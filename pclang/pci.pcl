; pci.m
    zstatic  u8    pci_exec.debug 
    zstatic  u64   pci_fixup.stproc 
    zstatic  u64   pci_lex.lxstart 
    zstatic  u64   pci_lex.lxsptr 
    zstatic  mem 256 pci_lex.alphamap 
    zstatic  u64   pci_parse.stproc 
    zstatic  u64   pci_parse.stextproc 
    zstatic  u64   pci_parse.ststatic 
    zstatic  i64   pci_parse.nstaticbytes 
    zstatic  u64   pci_parse.stmain 
    zstatic  i64   pci_parse.pcmain 
    zstatic  i64   pci_parse.undefflag 
    zstatic  i64   pci_parse.pcllineno 
    zstatic  i64   pci_parse.lastopcode 
    zstatic  i64   pci_parse.framebytes 
    zstatic  i64   pci_parse.parambytes 
    zstatic  i64   pci_parse.entrypending 
    istatic  mem 104 pci_tables.symbolnames 
    data     u64   "errorsym"
    data     u64   "namesym"
    data     u64   "labelsym"
    data     u64   "intsym"
    data     u64   "realsym"
    data     u64   "stringsym"
    data     u64   "charstringsym"
    data     u64   "starsym"
    data     u64   "colonsym"
    data     u64   "opcodesym"
    data     u64   "typesym"
    data     u64   "eolsym"
    data     u64   "sizesym"
    istatic  mem 104 pci_tables.typenames 
    data     u64   ""
    data     u64   "i64"
    data     u64   "u64"
    data     u64   "r64"
    data     u64   "r32"
    data     u64   "mem"
    data     u64   "i8"
    data     u64   "i16"
    data     u64   "i32"
    data     u64   "u8"
    data     u64   "u16"
    data     u64   "u32"
    data     u64   "void"
    istatic  mem 13 pci_tables.typesizes 
    data     u8    0 
    data     u8    8 
    data     u8    8 
    data     u8    8 
    data     u8    4 
    data     u8    0 
    data     u8    1 
    data     u8    2 
    data     u8    4 
    data     u8    1 
    data     u8    2 
    data     u8    4 
    data     u8    0 
    istatic  mem 56 pci_tables.idtypenames 
    data     u64   "noid"
    data     u64   "procid"
    data     u64   "staticid"
    data     u64   "frameid"
    data     u64   "paramid"
    data     u64   "importid"
    data     u64   "libid"
    istatic  mem 1200 pci_tables.pclnames 
    data     u64   "kproc"
    data     u64   "kparam"
    data     u64   "klocal"
    data     u64   "krettype"
    data     u64   "kend"
    data     u64   "kextproc"
    data     u64   "kextparam"
    data     u64   "kextvariadic"
    data     u64   "kextend"
    data     u64   "kistatic"
    data     u64   "kzstatic"
    data     u64   "kdata"
    data     u64   "klinkdll"
    data     u64   "kstartmx"
    data     u64   "kresetmx"
    data     u64   "kendmx"
    data     u64   "kload"
    data     u64   "kloadref"
    data     u64   "kloadimm"
    data     u64   "kstore"
    data     u64   "kunload"
    data     u64   "kdouble"
    data     u64   "kdupl"
    data     u64   "kswapopnds"
    data     u64   "kswapmem"
    data     u64   "kclear"
    data     u64   "kiload"
    data     u64   "kistore"
    data     u64   "kiloadx"
    data     u64   "kistorex"
    data     u64   "kaddptrx"
    data     u64   "ksubptrx"
    data     u64   "ksubptr"
    data     u64   "kcallp"
    data     u64   "kcallf"
    data     u64   "kicallp"
    data     u64   "kicallf"
    data     u64   "ksetcall"
    data     u64   "ksetarg"
    data     u64   "ksetret"
    data     u64   "kreturn"
    data     u64   "kstop"
    data     u64   "kjump"
    data     u64   "kijump"
    data     u64   "kjumpeq"
    data     u64   "kjumpne"
    data     u64   "kjumplt"
    data     u64   "kjumple"
    data     u64   "kjumpge"
    data     u64   "kjumpgt"
    data     u64   "kjumpt"
    data     u64   "kjumpf"
    data     u64   "kforup"
    data     u64   "kfordown"
    data     u64   "kto"
    data     u64   "kswitch"
    data     u64   "kswlabel"
    data     u64   "kendsw"
    data     u64   "kloadbit"
    data     u64   "kstorebit"
    data     u64   "kloadbf"
    data     u64   "kstorebf"
    data     u64   "kadd"
    data     u64   "ksub"
    data     u64   "kmul"
    data     u64   "kdivf"
    data     u64   "kdiv"
    data     u64   "krem"
    data     u64   "kdivrem"
    data     u64   "kbitand"
    data     u64   "kbitor"
    data     u64   "kbitxor"
    data     u64   "kshl"
    data     u64   "kshr"
    data     u64   "kmin"
    data     u64   "kmax"
    data     u64   "keq"
    data     u64   "kne"
    data     u64   "klt"
    data     u64   "kle"
    data     u64   "kge"
    data     u64   "kgt"
    data     u64   "kpower"
    data     u64   "katan2"
    data     u64   "kaddto"
    data     u64   "ksubto"
    data     u64   "kmulto"
    data     u64   "kdivfto"
    data     u64   "kdivto"
    data     u64   "kremto"
    data     u64   "kbitandto"
    data     u64   "kbitorto"
    data     u64   "kbitxorto"
    data     u64   "kshlto"
    data     u64   "kshrto"
    data     u64   "kminto"
    data     u64   "kmaxto"
    data     u64   "kaddpxto"
    data     u64   "ksubpxto"
    data     u64   "kneg"
    data     u64   "kabs"
    data     u64   "kbitnot"
    data     u64   "knot"
    data     u64   "knotnot"
    data     u64   "ksqr"
    data     u64   "ksign"
    data     u64   "ksqrt"
    data     u64   "ksin"
    data     u64   "kcos"
    data     u64   "ktan"
    data     u64   "kasin"
    data     u64   "kacos"
    data     u64   "katan"
    data     u64   "kln"
    data     u64   "klog"
    data     u64   "kexp"
    data     u64   "kround"
    data     u64   "kfloor"
    data     u64   "kceil"
    data     u64   "kfract"
    data     u64   "knegto"
    data     u64   "kabsto"
    data     u64   "kbitnotto"
    data     u64   "knotto"
    data     u64   "knotnotto"
    data     u64   "kincrto"
    data     u64   "kincrload"
    data     u64   "kloadincr"
    data     u64   "kdecrto"
    data     u64   "kdecrload"
    data     u64   "kloaddecr"
    data     u64   "kfloat"
    data     u64   "kfix"
    data     u64   "ktruncate"
    data     u64   "kfwiden"
    data     u64   "kfnarrow"
    data     u64   "ktypepun"
    data     u64   "kwiden"
    data     u64   "kopnd"
    data     u64   "kassem"
    data     u64   "kprinti64"
    data     u64   "kprintu64"
    data     u64   "kprintr64"
    data     u64   "kprintr32"
    data     u64   "kprintstr"
    data     u64   "kprinthex"
    data     u64   "kprintsp"
    data     u64   "ktest"
    data     u64   "kdebug"
    data     u64   "klast"
    istatic  mem 150 pci_tables.pclmain 
    data     u8    16 
    data     u8    16 
    data     u8    16 
    data     u8    0 
    data     u8    0 
    data     u8    16 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    16 
    data     u8    16 
    data     u8    31 
    data     u8    24 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    16 
    data     u8    17 
    data     u8    14 
    data     u8    16 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    16 
    data     u8    16 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    48 
    data     u8    0 
    data     u8    0 
    data     u8    1 
    data     u8    0 
    data     u8    1 
    data     u8    1 
    data     u8    1 
    data     u8    1 
    data     u8    1 
    data     u8    1 
    data     u8    1 
    data     u8    1 
    data     u8    1 
    data     u8    1 
    data     u8    1 
    data     u8    1 
    data     u8    1 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    19 
    data     u8    8 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    8 
    data     u8    0 
    data     u8    0 
    istatic  mem 150 pci_tables.pclattr 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    2 
    data     u8    2 
    data     u8    2 
    data     u8    2 
    data     u8    1 
    data     u8    2 
    data     u8    2 
    data     u8    2 
    data     u8    2 
    data     u8    1 
    data     u8    1 
    data     u8    0 
    data     u8    1 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    1 
    data     u8    1 
    data     u8    1 
    data     u8    1 
    data     u8    1 
    data     u8    1 
    data     u8    0 
    data     u8    0 
    data     u8    1 
    data     u8    1 
    data     u8    0 
    data     u8    2 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    2 
    data     u8    2 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    1 
    data     u8    1 
    data     u8    1 
    data     u8    1 
    data     u8    1 
    data     u8    1 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    1 
    data     u8    0 
    istatic  mem 300 pci_tables.pcljcode 
    data     u16   359 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   39 
    data     u16   0 
    data     u16   0 
    data     u16   375 
    data     u16   376 
    data     u16   377 
    data     u16   378 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   363 
    data     u16   364 
    data     u16   365 
    data     u16   379 
    data     u16   380 
    data     u16   381 
    data     u16   382 
    data     u16   0 
    data     u16   0 
    data     u16   385 
    data     u16   386 
    data     u16   395 
    data     u16   389 
    data     u16   390 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   304 
    data     u16   310 
    data     u16   316 
    data     u16   369 
    data     u16   370 
    data     u16   0 
    data     u16   371 
    data     u16   372 
    data     u16   373 
    data     u16   374 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   355 
    data     u16   356 
    data     u16   357 
    data     u16   358 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   354 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   361 
    data     u16   362 
    data     u16   0 
    data     u16   0 
    data     u16   366 
    data     u16   367 
    data     u16   368 
    data     u16   0 
    data     u16   0 
    data     u16   340 
    data     u16   341 
    data     u16   342 
    data     u16   343 
    data     u16   344 
    data     u16   345 
    data     u16   346 
    data     u16   347 
    data     u16   348 
    data     u16   349 
    data     u16   350 
    data     u16   351 
    data     u16   352 
    data     u16   353 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   326 
    data     u16   327 
    data     u16   0 
    data     u16   0 
    data     u16   405 
    data     u16   396 
    data     u16   397 
    data     u16   398 
    data     u16   399 
    data     u16   400 
    data     u16   401 
    data     u16   402 
    data     u16   403 
    data     u16   404 
    data     u16   408 
    data     u16   0 
    istatic  mem 3280 pci_tables.jcodenames 
    data     u64   "jnotready"
    data     u64   "jload_mi8"
    data     u64   "jload_mi16"
    data     u64   "jload_mi32"
    data     u64   "jload_mi64"
    data     u64   "jload_mu8"
    data     u64   "jload_mu16"
    data     u64   "jload_mu32"
    data     u64   "jload_mr64"
    data     u64   "jload_mr32"
    data     u64   "jload_mmem"
    data     u64   "jload_fi8"
    data     u64   "jload_fi16"
    data     u64   "jload_fi32"
    data     u64   "jload_fi64"
    data     u64   "jload_fu8"
    data     u64   "jload_fu16"
    data     u64   "jload_fu32"
    data     u64   "jload_fr64"
    data     u64   "jload_fr32"
    data     u64   "jload_fmem"
    data     u64   "jstore_mi8"
    data     u64   "jstore_mi16"
    data     u64   "jstore_mi32"
    data     u64   "jstore_mi64"
    data     u64   "jstore_mr64"
    data     u64   "jstore_mr32"
    data     u64   "jstore_mmem"
    data     u64   "jstore_fi8"
    data     u64   "jstore_fi16"
    data     u64   "jstore_fi32"
    data     u64   "jstore_fi64"
    data     u64   "jstore_fr64"
    data     u64   "jstore_fr32"
    data     u64   "jstore_fmem"
    data     u64   "jloadimm_i64"
    data     u64   "jloadimm_r64"
    data     u64   "jloadimm_r32"
    data     u64   "jloadimm_str"
    data     u64   "jloadref_m"
    data     u64   "jloadref_f"
    data     u64   "jloadref_lab"
    data     u64   "jloadref_p"
    data     u64   "jloadref_ext"
    data     u64   "jiload_i8"
    data     u64   "jiload_i16"
    data     u64   "jiload_i32"
    data     u64   "jiload_i64"
    data     u64   "jiload_u8"
    data     u64   "jiload_u16"
    data     u64   "jiload_u32"
    data     u64   "jiload_r64"
    data     u64   "jiload_r32"
    data     u64   "jiload_mem"
    data     u64   "jiloadx_i8"
    data     u64   "jiloadx_i16"
    data     u64   "jiloadx_i32"
    data     u64   "jiloadx_i64"
    data     u64   "jiloadx_u8"
    data     u64   "jiloadx_u16"
    data     u64   "jiloadx_u32"
    data     u64   "jiloadx_r64"
    data     u64   "jiloadx_r32"
    data     u64   "jiloadx_mem"
    data     u64   "jistore_i8"
    data     u64   "jistore_i16"
    data     u64   "jistore_i32"
    data     u64   "jistore_i64"
    data     u64   "jistore_r64"
    data     u64   "jistore_r32"
    data     u64   "jistore_mem"
    data     u64   "jistorex_i8"
    data     u64   "jistorex_i16"
    data     u64   "jistorex_i32"
    data     u64   "jistorex_i64"
    data     u64   "jistorex_r64"
    data     u64   "jistorex_r32"
    data     u64   "jistorex_mem"
    data     u64   "jswapmem_i8"
    data     u64   "jswapmem_i16"
    data     u64   "jswapmem_i32"
    data     u64   "jswapmem_i64"
    data     u64   "jswapmem_mem"
    data     u64   "jclear_i8"
    data     u64   "jclear_i16"
    data     u64   "jclear_i32"
    data     u64   "jclear_i64"
    data     u64   "jclear_mem"
    data     u64   "jjumpeq_i64"
    data     u64   "jjumpeq_r64"
    data     u64   "jjumpeq_r32"
    data     u64   "jjumpeq_mem"
    data     u64   "jjumpne_i64"
    data     u64   "jjumpne_r64"
    data     u64   "jjumpne_r32"
    data     u64   "jjumpne_mem"
    data     u64   "jjumplt_i64"
    data     u64   "jjumplt_u64"
    data     u64   "jjumplt_r64"
    data     u64   "jjumplt_r32"
    data     u64   "jjumple_i64"
    data     u64   "jjumple_u64"
    data     u64   "jjumple_r64"
    data     u64   "jjumple_r32"
    data     u64   "jjumpge_i64"
    data     u64   "jjumpge_u64"
    data     u64   "jjumpge_r64"
    data     u64   "jjumpge_r32"
    data     u64   "jjumpgt_i64"
    data     u64   "jjumpgt_u64"
    data     u64   "jjumpgt_r64"
    data     u64   "jjumpgt_r32"
    data     u64   "jjumpt_i64"
    data     u64   "jjumpt_r64"
    data     u64   "jjumpt_r32"
    data     u64   "jjumpf_i64"
    data     u64   "jjumpf_r64"
    data     u64   "jjumpf_r32"
    data     u64   "jadd_i64"
    data     u64   "jadd_r64"
    data     u64   "jadd_r32"
    data     u64   "jsub_i64"
    data     u64   "jsub_r64"
    data     u64   "jsub_r32"
    data     u64   "jmul_i64"
    data     u64   "jmul_r64"
    data     u64   "jmul_r32"
    data     u64   "jneg_i64"
    data     u64   "jneg_r64"
    data     u64   "jneg_r32"
    data     u64   "jabs_i64"
    data     u64   "jabs_r64"
    data     u64   "jabs_r32"
    data     u64   "jsqr_i64"
    data     u64   "jsqr_r64"
    data     u64   "jsqr_r32"
    data     u64   "jsign_i64"
    data     u64   "jsign_r64"
    data     u64   "jsign_r32"
    data     u64   "jnegto_i8"
    data     u64   "jnegto_i16"
    data     u64   "jnegto_i32"
    data     u64   "jnegto_i64"
    data     u64   "jnegto_r64"
    data     u64   "jnegto_r32"
    data     u64   "jabsto_i8"
    data     u64   "jabsto_i16"
    data     u64   "jabsto_i32"
    data     u64   "jabsto_i64"
    data     u64   "jabsto_r64"
    data     u64   "jabsto_r32"
    data     u64   "jdivf_r64"
    data     u64   "jdivf_r32"
    data     u64   "jdiv_i64"
    data     u64   "jdiv_u64"
    data     u64   "jrem_i64"
    data     u64   "jrem_u64"
    data     u64   "jdivrem_i64"
    data     u64   "jdivrem_u64"
    data     u64   "jshr_i64"
    data     u64   "jshr_u64"
    data     u64   "jeq_i64"
    data     u64   "jeq_u64"
    data     u64   "jeq_r64"
    data     u64   "jeq_r32"
    data     u64   "jne_i64"
    data     u64   "jne_u64"
    data     u64   "jne_r64"
    data     u64   "jne_r32"
    data     u64   "jmin_i64"
    data     u64   "jmin_u64"
    data     u64   "jmin_r64"
    data     u64   "jmin_r32"
    data     u64   "jmax_i64"
    data     u64   "jmax_u64"
    data     u64   "jmax_r64"
    data     u64   "jmax_r32"
    data     u64   "jlt_i64"
    data     u64   "jlt_u64"
    data     u64   "jlt_r64"
    data     u64   "jlt_r32"
    data     u64   "jle_i64"
    data     u64   "jle_u64"
    data     u64   "jle_r64"
    data     u64   "jle_r32"
    data     u64   "jge_i64"
    data     u64   "jge_u64"
    data     u64   "jge_r64"
    data     u64   "jge_r32"
    data     u64   "jgt_i64"
    data     u64   "jgt_u64"
    data     u64   "jgt_r64"
    data     u64   "jgt_r32"
    data     u64   "jpower_i64"
    data     u64   "jpower_u64"
    data     u64   "jpower_r64"
    data     u64   "jaddto_i8"
    data     u64   "jaddto_i16"
    data     u64   "jaddto_i32"
    data     u64   "jaddto_i64"
    data     u64   "jaddto_r64"
    data     u64   "jaddto_r32"
    data     u64   "jsubto_i8"
    data     u64   "jsubto_i16"
    data     u64   "jsubto_i32"
    data     u64   "jsubto_i64"
    data     u64   "jsubto_r64"
    data     u64   "jsubto_r32"
    data     u64   "jmulto_i8"
    data     u64   "jmulto_i16"
    data     u64   "jmulto_i32"
    data     u64   "jmulto_i64"
    data     u64   "jmulto_r64"
    data     u64   "jmulto_r32"
    data     u64   "jdivto_i8"
    data     u64   "jdivto_i16"
    data     u64   "jdivto_i32"
    data     u64   "jdivto_i64"
    data     u64   "jdivto_u8"
    data     u64   "jdivto_u16"
    data     u64   "jdivto_u32"
    data     u64   "jdivto_u64"
    data     u64   "jdivfto_r64"
    data     u64   "jdivfto_r32"
    data     u64   "jminto_i8"
    data     u64   "jminto_i16"
    data     u64   "jminto_i32"
    data     u64   "jminto_i64"
    data     u64   "jminto_u8"
    data     u64   "jminto_u16"
    data     u64   "jminto_u32"
    data     u64   "jminto_u64"
    data     u64   "jminto_r64"
    data     u64   "jminto_r32"
    data     u64   "jmaxto_i8"
    data     u64   "jmaxto_i16"
    data     u64   "jmaxto_i32"
    data     u64   "jmaxto_i64"
    data     u64   "jmaxto_u8"
    data     u64   "jmaxto_u16"
    data     u64   "jmaxto_u32"
    data     u64   "jmaxto_u64"
    data     u64   "jmaxto_r64"
    data     u64   "jmaxto_r32"
    data     u64   "jbitnotto_i8"
    data     u64   "jbitnotto_i16"
    data     u64   "jbitnotto_i32"
    data     u64   "jbitnotto_i64"
    data     u64   "jnotto_i8"
    data     u64   "jnotto_i16"
    data     u64   "jnotto_i32"
    data     u64   "jnotto_i64"
    data     u64   "jnotnotto_i8"
    data     u64   "jnotnotto_i16"
    data     u64   "jnotnotto_i32"
    data     u64   "jnotnotto_i64"
    data     u64   "jincrto_i8"
    data     u64   "jincrto_i16"
    data     u64   "jincrto_i32"
    data     u64   "jincrto_i64"
    data     u64   "jincrload_i8"
    data     u64   "jincrload_i16"
    data     u64   "jincrload_i32"
    data     u64   "jincrload_i64"
    data     u64   "jloadincr_i8"
    data     u64   "jloadincr_i16"
    data     u64   "jloadincr_i32"
    data     u64   "jloadincr_i64"
    data     u64   "jdecrto_i8"
    data     u64   "jdecrto_i16"
    data     u64   "jdecrto_i32"
    data     u64   "jdecrto_i64"
    data     u64   "jdecrload_i8"
    data     u64   "jdecrload_i16"
    data     u64   "jdecrload_i32"
    data     u64   "jdecrload_i64"
    data     u64   "jloaddecr_i8"
    data     u64   "jloaddecr_i16"
    data     u64   "jloaddecr_i32"
    data     u64   "jloaddecr_i64"
    data     u64   "jbitandto_i8"
    data     u64   "jbitandto_i16"
    data     u64   "jbitandto_i32"
    data     u64   "jbitandto_i64"
    data     u64   "jbitorto_i8"
    data     u64   "jbitorto_i16"
    data     u64   "jbitorto_i32"
    data     u64   "jbitorto_i64"
    data     u64   "jbitxorto_i8"
    data     u64   "jbitxorto_i16"
    data     u64   "jbitxorto_i32"
    data     u64   "jbitxorto_i64"
    data     u64   "jshlto_i8"
    data     u64   "jshlto_i16"
    data     u64   "jshlto_i32"
    data     u64   "jshlto_i64"
    data     u64   "jshrto_i8"
    data     u64   "jshrto_i16"
    data     u64   "jshrto_i32"
    data     u64   "jshrto_i64"
    data     u64   "jshrto_u8"
    data     u64   "jshrto_u16"
    data     u64   "jshrto_u32"
    data     u64   "jshrto_u64"
    data     u64   "jforup_mm"
    data     u64   "jforup_mf"
    data     u64   "jforup_fm"
    data     u64   "jforup_ff"
    data     u64   "jforup_mi64"
    data     u64   "jforup_fi64"
    data     u64   "jfordown_mm"
    data     u64   "jfordown_mf"
    data     u64   "jfordown_fm"
    data     u64   "jfordown_ff"
    data     u64   "jfordown_mi64"
    data     u64   "jfordown_fi64"
    data     u64   "jto_m"
    data     u64   "jto_f"
    data     u64   "jfloat_r64_i64"
    data     u64   "jfloat_r64_u64"
    data     u64   "jfloat_r32_i64"
    data     u64   "jfloat_r32_u64"
    data     u64   "jfix_i64_r64"
    data     u64   "jfix_u64_r64"
    data     u64   "jfix_i64_r32"
    data     u64   "jfix_u64_r32"
    data     u64   "jfwiden"
    data     u64   "jfnarrow"
    data     u64   "jtruncate_i8"
    data     u64   "jtruncate_i16"
    data     u64   "jtruncate_i32"
    data     u64   "jtruncate_u8"
    data     u64   "jtruncate_u16"
    data     u64   "jtruncate_u32"
    data     u64   "jwiden_i8"
    data     u64   "jwiden_i16"
    data     u64   "jwiden_i32"
    data     u64   "jwiden_u8"
    data     u64   "jwiden_u16"
    data     u64   "jwiden_u32"
    data     u64   "jsqrt"
    data     u64   "jsin"
    data     u64   "jcos"
    data     u64   "jtan"
    data     u64   "jasin"
    data     u64   "jacos"
    data     u64   "jatan"
    data     u64   "jlog"
    data     u64   "jlog10"
    data     u64   "jexp"
    data     u64   "jround"
    data     u64   "jfloor"
    data     u64   "jceil"
    data     u64   "jfract"
    data     u64   "jatan2"
    data     u64   "jbitand"
    data     u64   "jbitor"
    data     u64   "jbitxor"
    data     u64   "jshl"
    data     u64   "jprocent"
    data     u64   "jsubent"
    data     u64   "jaddpxto"
    data     u64   "jsubpxto"
    data     u64   "jaddptrx"
    data     u64   "jsubptrx"
    data     u64   "jsubptr"
    data     u64   "jbitnot"
    data     u64   "jnot"
    data     u64   "jnotnot"
    data     u64   "jswitch"
    data     u64   "jswlabel"
    data     u64   "jloadbit"
    data     u64   "jstorebit"
    data     u64   "jloadbf"
    data     u64   "jstorebf"
    data     u64   "junload"
    data     u64   "jdouble"
    data     u64   "jdupl"
    data     u64   "jswapopnds"
    data     u64   "jcallp"
    data     u64   "jcallf"
    data     u64   "jicallp"
    data     u64   "jicallf"
    data     u64   "jcalldllp"
    data     u64   "jcalldllf"
    data     u64   "jsetret_m"
    data     u64   "jreturn_p"
    data     u64   "jreturn_f"
    data     u64   "jreturn_m"
    data     u64   "jjump"
    data     u64   "jijump"
    data     u64   "jstartmx"
    data     u64   "jresetmx"
    data     u64   "jendmx"
    data     u64   "jcallargs"
    data     u64   "jstop"
    data     u64   "jassem"
    data     u64   "jprinti64"
    data     u64   "jprintu64"
    data     u64   "jprintr64"
    data     u64   "jprintr32"
    data     u64   "jprintstr"
    data     u64   "jprinthex"
    data     u64   "jprintsp"
    data     u64   "jtest"
    data     u64   "jopnd"
    data     u64   "jpushany"
    data     u64   "jstackadj"
    data     u64   "jdebug"
    data     u64   "jlast"
    istatic  mem 56 pci_tables.pcllist 
    data     u8    17 
    data     u8    20 
    data     u8    27 
    data     u8    29 
    data     u8    28 
    data     u8    30 
    data     u8    126 
    data     u8    129 
    data     u8    128 
    data     u8    131 
    data     u8    127 
    data     u8    130 
    data     u8    19 
    data     u8    25 
    data     u8    26 
    data     u8    63 
    data     u8    64 
    data     u8    65 
    data     u8    67 
    data     u8    68 
    data     u8    69 
    data     u8    75 
    data     u8    76 
    data     u8    83 
    data     u8    74 
    data     u8    66 
    data     u8    85 
    data     u8    86 
    data     u8    87 
    data     u8    89 
    data     u8    88 
    data     u8    91 
    data     u8    92 
    data     u8    93 
    data     u8    94 
    data     u8    95 
    data     u8    96 
    data     u8    97 
    data     u8    77 
    data     u8    78 
    data     u8    79 
    data     u8    80 
    data     u8    81 
    data     u8    82 
    data     u8    47 
    data     u8    48 
    data     u8    49 
    data     u8    50 
    data     u8    45 
    data     u8    46 
    data     u8    51 
    data     u8    52 
    data     u8    105 
    data     u8    100 
    data     u8    101 
    data     u8    138 
    istatic  mem 1344 pci_tables.jcodemodelist 
    data     u16   0 
    data     u16   4 
    data     u16   4 
    data     u16   4 
    data     u16   7 
    data     u16   10 
    data     u16   1 
    data     u16   2 
    data     u16   3 
    data     u16   5 
    data     u16   6 
    data     u16   7 
    data     u16   0 
    data     u16   24 
    data     u16   24 
    data     u16   24 
    data     u16   23 
    data     u16   27 
    data     u16   21 
    data     u16   22 
    data     u16   23 
    data     u16   21 
    data     u16   22 
    data     u16   23 
    data     u16   0 
    data     u16   47 
    data     u16   47 
    data     u16   47 
    data     u16   46 
    data     u16   53 
    data     u16   44 
    data     u16   45 
    data     u16   46 
    data     u16   48 
    data     u16   49 
    data     u16   50 
    data     u16   0 
    data     u16   57 
    data     u16   57 
    data     u16   57 
    data     u16   56 
    data     u16   63 
    data     u16   54 
    data     u16   55 
    data     u16   56 
    data     u16   58 
    data     u16   59 
    data     u16   60 
    data     u16   0 
    data     u16   67 
    data     u16   67 
    data     u16   67 
    data     u16   66 
    data     u16   70 
    data     u16   64 
    data     u16   65 
    data     u16   66 
    data     u16   64 
    data     u16   65 
    data     u16   66 
    data     u16   0 
    data     u16   74 
    data     u16   74 
    data     u16   74 
    data     u16   73 
    data     u16   77 
    data     u16   71 
    data     u16   72 
    data     u16   73 
    data     u16   71 
    data     u16   72 
    data     u16   73 
    data     u16   0 
    data     u16   259 
    data     u16   259 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   256 
    data     u16   257 
    data     u16   258 
    data     u16   256 
    data     u16   257 
    data     u16   258 
    data     u16   0 
    data     u16   271 
    data     u16   271 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   268 
    data     u16   269 
    data     u16   270 
    data     u16   268 
    data     u16   269 
    data     u16   270 
    data     u16   0 
    data     u16   267 
    data     u16   267 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   264 
    data     u16   265 
    data     u16   266 
    data     u16   264 
    data     u16   265 
    data     u16   266 
    data     u16   0 
    data     u16   279 
    data     u16   279 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   276 
    data     u16   277 
    data     u16   278 
    data     u16   276 
    data     u16   277 
    data     u16   278 
    data     u16   0 
    data     u16   263 
    data     u16   263 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   260 
    data     u16   261 
    data     u16   262 
    data     u16   260 
    data     u16   261 
    data     u16   262 
    data     u16   0 
    data     u16   275 
    data     u16   275 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   272 
    data     u16   273 
    data     u16   274 
    data     u16   272 
    data     u16   273 
    data     u16   274 
    data     u16   0 
    data     u16   35 
    data     u16   35 
    data     u16   36 
    data     u16   37 
    data     u16   0 
    data     u16   35 
    data     u16   35 
    data     u16   35 
    data     u16   35 
    data     u16   35 
    data     u16   35 
    data     u16   0 
    data     u16   81 
    data     u16   81 
    data     u16   81 
    data     u16   80 
    data     u16   82 
    data     u16   78 
    data     u16   79 
    data     u16   80 
    data     u16   78 
    data     u16   79 
    data     u16   80 
    data     u16   0 
    data     u16   86 
    data     u16   86 
    data     u16   86 
    data     u16   85 
    data     u16   87 
    data     u16   83 
    data     u16   84 
    data     u16   85 
    data     u16   83 
    data     u16   84 
    data     u16   85 
    data     u16   0 
    data     u16   118 
    data     u16   118 
    data     u16   119 
    data     u16   120 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   121 
    data     u16   121 
    data     u16   122 
    data     u16   123 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   124 
    data     u16   124 
    data     u16   125 
    data     u16   126 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   153 
    data     u16   154 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   155 
    data     u16   156 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   157 
    data     u16   158 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   169 
    data     u16   170 
    data     u16   171 
    data     u16   172 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   173 
    data     u16   174 
    data     u16   175 
    data     u16   176 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   193 
    data     u16   194 
    data     u16   195 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   159 
    data     u16   160 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   151 
    data     u16   152 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   199 
    data     u16   199 
    data     u16   200 
    data     u16   201 
    data     u16   0 
    data     u16   196 
    data     u16   197 
    data     u16   198 
    data     u16   196 
    data     u16   197 
    data     u16   198 
    data     u16   0 
    data     u16   205 
    data     u16   205 
    data     u16   206 
    data     u16   207 
    data     u16   0 
    data     u16   202 
    data     u16   203 
    data     u16   204 
    data     u16   202 
    data     u16   203 
    data     u16   204 
    data     u16   0 
    data     u16   211 
    data     u16   211 
    data     u16   212 
    data     u16   213 
    data     u16   0 
    data     u16   208 
    data     u16   209 
    data     u16   210 
    data     u16   208 
    data     u16   209 
    data     u16   210 
    data     u16   0 
    data     u16   217 
    data     u16   217 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   214 
    data     u16   215 
    data     u16   216 
    data     u16   214 
    data     u16   215 
    data     u16   216 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   222 
    data     u16   223 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   283 
    data     u16   283 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   280 
    data     u16   281 
    data     u16   282 
    data     u16   280 
    data     u16   281 
    data     u16   282 
    data     u16   0 
    data     u16   287 
    data     u16   287 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   284 
    data     u16   285 
    data     u16   286 
    data     u16   284 
    data     u16   285 
    data     u16   286 
    data     u16   0 
    data     u16   291 
    data     u16   291 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   288 
    data     u16   289 
    data     u16   290 
    data     u16   288 
    data     u16   289 
    data     u16   290 
    data     u16   0 
    data     u16   295 
    data     u16   295 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   292 
    data     u16   293 
    data     u16   294 
    data     u16   292 
    data     u16   293 
    data     u16   294 
    data     u16   0 
    data     u16   299 
    data     u16   299 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   296 
    data     u16   297 
    data     u16   298 
    data     u16   300 
    data     u16   301 
    data     u16   302 
    data     u16   0 
    data     u16   227 
    data     u16   227 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   224 
    data     u16   225 
    data     u16   226 
    data     u16   228 
    data     u16   229 
    data     u16   230 
    data     u16   0 
    data     u16   237 
    data     u16   237 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   234 
    data     u16   235 
    data     u16   236 
    data     u16   238 
    data     u16   239 
    data     u16   240 
    data     u16   0 
    data     u16   161 
    data     u16   161 
    data     u16   163 
    data     u16   164 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   165 
    data     u16   165 
    data     u16   167 
    data     u16   168 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   177 
    data     u16   178 
    data     u16   179 
    data     u16   180 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   181 
    data     u16   182 
    data     u16   183 
    data     u16   184 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   185 
    data     u16   186 
    data     u16   187 
    data     u16   188 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   189 
    data     u16   190 
    data     u16   191 
    data     u16   192 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   96 
    data     u16   97 
    data     u16   98 
    data     u16   99 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   100 
    data     u16   101 
    data     u16   102 
    data     u16   103 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   104 
    data     u16   105 
    data     u16   106 
    data     u16   107 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   108 
    data     u16   109 
    data     u16   110 
    data     u16   111 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   88 
    data     u16   88 
    data     u16   89 
    data     u16   90 
    data     u16   91 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   92 
    data     u16   92 
    data     u16   93 
    data     u16   94 
    data     u16   95 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   112 
    data     u16   112 
    data     u16   113 
    data     u16   114 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   115 
    data     u16   115 
    data     u16   116 
    data     u16   117 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   133 
    data     u16   133 
    data     u16   134 
    data     u16   135 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   127 
    data     u16   127 
    data     u16   128 
    data     u16   129 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   130 
    data     u16   130 
    data     u16   131 
    data     u16   132 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   0 
    data     u16   334 
    data     u16   335 
    data     u16   336 
    data     u16   337 
    data     u16   338 
    data     u16   339 
    istatic  mem 24 $pci.passnames 
    data     u64   "parse_pass"
    data     u64   "fixup_pass"
    data     u64   "run_pass"
    zstatic  u8    $pci.passlevel 
    zstatic  u8    $pci.fshowpcl 
    zstatic  u8    $pci.fshowst 
    zstatic  u8    $pci.fshowlibs 
    istatic  mem 64 $pci.optionnames 
    data     u64   "parse"
    data     u64   "fixup"
    data     u64   "dparse"
    data     u64   "dfixup"
    data     u64   "run"
    data     u64   "showpcl"
    data     u64   "showst"
    data     u64   "showlibs"
    zstatic  u8    $pci.ftest 
    zstatic  mem 256 $pci.addstr.str 
    zstatic  i64   msys.fmtparam 
    zstatic  i64   $cmdskip 
    istatic  i64   msys.needgap 
    data     u64   0 
    istatic  i64   msys.outdev 
    data     u64   1 
    istatic  u64   msys.outchan 
    data     u64   0 
    istatic  u64   msys.fmtstr 
    data     u64   0 
    zstatic  mem 80 msys.outchan_stack 
    zstatic  mem 80 msys.outdev_stack 
    zstatic  mem 80 msys.fmtstr_stack 
    zstatic  mem 10 msys.needgap_stack 
    zstatic  mem 80 msys.ptr_stack 
    istatic  i64   msys.niostack 
    data     u64   0 
    istatic  mem 16 msys.digits 
    data     u8    48 
    data     u8    49 
    data     u8    50 
    data     u8    51 
    data     u8    52 
    data     u8    53 
    data     u8    54 
    data     u8    55 
    data     u8    56 
    data     u8    57 
    data     u8    65 
    data     u8    66 
    data     u8    67 
    data     u8    68 
    data     u8    69 
    data     u8    70 
    istatic  mem 16 msys.defaultfmt 
    data     u8    0 
    data     u8    0 
    data     u8    10 
    data     u8    0 
    data     u8    32 
    data     u8    102 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    82 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    data     u8    0 
    zstatic  u64   msys.rd_buffer 
    zstatic  i64   msys.rd_length 
    zstatic  u64   msys.rd_pos 
    zstatic  u64   msys.rd_lastpos 
    zstatic  i64   msys.termchar 
    zstatic  i64   msys.itemerror 
    zstatic  mem 4096 msys.printbuffer 
    zstatic  u64   msys.printptr 
    zstatic  i64   msys.printlen 
    zstatic  i64   msys.nsysparams 
    zstatic  i64   msys.ncmdparams 
    zstatic  i64   msys.nenvstrings 
    zstatic  mem 1024 msys.sysparams 
    zstatic  u64   msys.cmdparams 
    zstatic  u64   msys.envstrings 
    zstatic  mem 576 msys.callbackstack 
    istatic  i64   msys.ncallbacks 
    data     u64   0 
    istatic  u64   msys.mask63 
    data     u64   9223372036854775807 
    istatic  r64   msys.offset64 
    data     r64   9223372036854775800.00000000000000000000 
    istatic  r64   msys.offset32 
    data     r64   9223372036854775800.00000000000000000000 
    zstatic  mem 128 msys.start.startupinfo 
    zstatic  mem 16 msys.getfmt.fmt 
    zstatic  mem 100 msys.strint.str 
    zstatic  mem 100 msys.strword.str 
    zstatic  mem 320 msys.strreal.str 
    zstatic  mem 2408 mlib.allocupper 
    zstatic  i64   mlib.alloccode 
    zstatic  i64   mlib.allocbytes 
    istatic  i64   mlib.fdebug 
    data     u64   0 
    zstatic  i64   mlib.rfsize 
    zstatic  u64   mlib.maxmemory 
    zstatic  i64   mlib.maxalloccode 
    zstatic  u64   mlib.allocbase 
    istatic  u8    mlib.pcm_setup 
    data     u8    0 
    istatic  i64   mlib.show 
    data     u64   0 
    istatic  i64   mlib.memtotal 
    data     u64   0 
    istatic  i64   mlib.smallmemtotal 
    data     u64   0 
    istatic  i64   mlib.smallmemobjs 
    data     u64   0 
    istatic  i64   mlib.maxmemtotal 
    data     u64   0 
    zstatic  mem 24 mlib.memalloctable 
    zstatic  mem 12 mlib.memallocsize 
    zstatic  u64   mlib.pcheapstart 
    zstatic  u64   mlib.pcheapend 
    zstatic  u64   mlib.pcheapptr 
    zstatic  mem 2049 mlib.sizeindextable 
    zstatic  mem 72 mlib.freelist 
    istatic  mem 48 mlib.pmnames 
    data     u64   "pm_end"
    data     u64   "pm_option"
    data     u64   "pm_sourcefile"
    data     u64   "pm_libfile"
    data     u64   "pm_colon"
    data     u64   "pm_extra"
    istatic  mem 16 mlib.seed 
    data     u64   2993073034246558322 
    data     u64   1617678968452121188 
    zstatic  i64   mlib.pcm_newblock.totalheapsize 
    istatic  mem 36 mlib.pcm_round.allocbytes 
    data     u32   0 
    data     u32   16 
    data     u32   32 
    data     u32   64 
    data     u32   128 
    data     u32   256 
    data     u32   512 
    data     u32   1024 
    data     u32   2048 
    zstatic  mem 260 mlib.changeext.newfile 
    zstatic  mem 260 mlib.extractpath.str 
    zstatic  mem 100 mlib.extractbasefile.str 
    istatic  i64   mlib.nextcmdparamnew.infile 
    data     u64   0 
    istatic  u64   mlib.nextcmdparamnew.filestart 
    data     u64   0 
    istatic  u64   mlib.nextcmdparamnew.fileptr 
    data     u64   0 
    istatic  u8    mlib.nextcmdparamnew.colonseen 
    data     u8    0 
    zstatic  i64   mlib.nextcmdparamnew.atsize 
    zstatic  mem 300 mlib.nextcmdparamnew.str 
    zstatic  mem 256 mlib.readnextfileitem.str 
    zstatic  mem 256 mlib.padstr.str 
    zstatic  u64   mlib.chr.str 
    zstatic  u64   mwindows.hconsole 
    zstatic  u64   mwindows.hconsolein 
    zstatic  mem 20 mwindows.lastkey 
    zstatic  mem 20 mwindows.pendkey 
    zstatic  i64   mwindows.keypending 
    istatic  u64   mwindows.wndproc_callbackfn 
    data     u64   0 
    istatic  i64   mwindows.init_flag 
    data     u64   0 
    zstatic  u8    mwindows.os_gxregisterclass.registered 
    istatic  i64   mwindows.mainwndproc.count 
    data     u64   0 
    zstatic  mem 300 mwindows.os_gethostname.name 
    zstatic  i64   mwindows.os_gethostname.n 
    zstatic  i64   mwindows.os_peek.lastticks 
    zstatic  mem 64 pci_decls.lx 
    zstatic  u64   pci_decls.inputfile 
    zstatic  u64   pci_decls.psource 
    zstatic  u64   pci_decls.sourcelines 
    zstatic  i64   pci_decls.nsourcelines 
    zstatic  mem 2097152 pci_decls.hashtable 
    zstatic  u64   pci_decls.stvoid 
    zstatic  mem 60000 pci_decls.labeltable 
    zstatic  i64   pci_decls.highlabel 
    zstatic  u64   pci_decls.pcltable 
    zstatic  u64   pci_decls.pcllines 
    zstatic  u64   pci_decls.pcllabels 
    zstatic  i64   pci_decls.npcl 
    zstatic  mem 160 pci_decls.libinst 
    zstatic  mem 160 pci_decls.libnames 
    zstatic  mem 160 pci_decls.libdef 
    zstatic  mem 20 pci_decls.libtype 
    zstatic  i64   pci_decls.nlibs 
    zstatic  mem 4000 pci_decls.extdef 
    zstatic  mem 4000 pci_decls.extaddr 
    zstatic  mem 500 pci_decls.extnparams 
    zstatic  mem 8000 pci_decls.exttypes 
    zstatic  mem 500 pci_decls.extrettype 
    zstatic  mem 500 pci_decls.extvariadic 
    zstatic  i64   pci_decls.nextprocs 
    zstatic  i64   pci_decls.cmdskip 
    zstatic  u64   pci_decls.datalist 
    zstatic  u64   pci_decls.labellist 
proc pci_exec.exec
    rettype  i64   
    param    i64   .pcstart 
    param    i64   .spstart 
    local    mem 560000 .stack 
    local    i64   .pc 
    local    i64   .sp 
    local    i64   .fp 
    local    u64   .pi64 
    local    i64   .n 
    local    i64   .x 
    local    i64   .a 
    local    i64   .b 
    local    i64   .c 
    local    i64   .opc 
    local    u64   .pi64b 
    local    i64   .i 
    local    i64   .j 
    local    i64   .spr 
    local    u64   .d 
;------------------------
    load     i64   .pcstart 
    store    i64   .pc 
    load     i64   .spstart 
    store    i64   .sp 
    loadimm  i64   0 
    store    i64   .fp 
#612:
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   8 
    iloadx   u16   1 0
    switch         #614 0 409
    opnd           #615 
#614:
    swlabel        #616 
    swlabel        #619 
    swlabel        #620 
    swlabel        #621 
    swlabel        #622 
    swlabel        #623 
    swlabel        #624 
    swlabel        #625 
    swlabel        #626 
    swlabel        #627 
    swlabel        #628 
    swlabel        #629 
    swlabel        #630 
    swlabel        #631 
    swlabel        #632 
    swlabel        #633 
    swlabel        #634 
    swlabel        #635 
    swlabel        #636 
    swlabel        #637 
    swlabel        #638 
    swlabel        #639 
    swlabel        #640 
    swlabel        #641 
    swlabel        #642 
    swlabel        #643 
    swlabel        #644 
    swlabel        #645 
    swlabel        #646 
    swlabel        #646 
    swlabel        #646 
    swlabel        #646 
    swlabel        #647 
    swlabel        #648 
    swlabel        #649 
    swlabel        #650 
    swlabel        #650 
    swlabel        #651 
    swlabel        #652 
    swlabel        #653 
    swlabel        #654 
    swlabel        #655 
    swlabel        #656 
    swlabel        #657 
    swlabel        #658 
    swlabel        #659 
    swlabel        #660 
    swlabel        #661 
    swlabel        #662 
    swlabel        #663 
    swlabel        #664 
    swlabel        #665 
    swlabel        #666 
    swlabel        #667 
    swlabel        #668 
    swlabel        #669 
    swlabel        #670 
    swlabel        #671 
    swlabel        #672 
    swlabel        #673 
    swlabel        #674 
    swlabel        #675 
    swlabel        #676 
    swlabel        #677 
    swlabel        #678 
    swlabel        #679 
    swlabel        #680 
    swlabel        #681 
    swlabel        #682 
    swlabel        #683 
    swlabel        #684 
    swlabel        #685 
    swlabel        #686 
    swlabel        #687 
    swlabel        #688 
    swlabel        #689 
    swlabel        #690 
    swlabel        #691 
    swlabel        #692 
    swlabel        #693 
    swlabel        #694 
    swlabel        #695 
    swlabel        #696 
    swlabel        #697 
    swlabel        #698 
    swlabel        #699 
    swlabel        #700 
    swlabel        #701 
    swlabel        #702 
    swlabel        #704 
    swlabel        #705 
    swlabel        #706 
    swlabel        #707 
    swlabel        #707 
    swlabel        #710 
    swlabel        #711 
    swlabel        #712 
    swlabel        #713 
    swlabel        #714 
    swlabel        #715 
    swlabel        #716 
    swlabel        #717 
    swlabel        #718 
    swlabel        #719 
    swlabel        #720 
    swlabel        #721 
    swlabel        #722 
    swlabel        #723 
    swlabel        #724 
    swlabel        #725 
    swlabel        #726 
    swlabel        #727 
    swlabel        #728 
    swlabel        #728 
    swlabel        #728 
    swlabel        #731 
    swlabel        #731 
    swlabel        #731 
    swlabel        #734 
    swlabel        #735 
    swlabel        #736 
    swlabel        #737 
    swlabel        #738 
    swlabel        #739 
    swlabel        #740 
    swlabel        #741 
    swlabel        #742 
    swlabel        #743 
    swlabel        #744 
    swlabel        #745 
    swlabel        #746 
    swlabel        #747 
    swlabel        #748 
    swlabel        #749 
    swlabel        #750 
    swlabel        #751 
    swlabel        #752 
    swlabel        #753 
    swlabel        #754 
    swlabel        #755 
    swlabel        #756 
    swlabel        #757 
    swlabel        #758 
    swlabel        #759 
    swlabel        #760 
    swlabel        #761 
    swlabel        #762 
    swlabel        #763 
    swlabel        #764 
    swlabel        #765 
    swlabel        #766 
    swlabel        #767 
    swlabel        #768 
    swlabel        #769 
    swlabel        #770 
    swlabel        #771 
    swlabel        #772 
    swlabel        #773 
    swlabel        #774 
    swlabel        #775 
    swlabel        #776 
    swlabel        #777 
    swlabel        #615 
    swlabel        #778 
    swlabel        #779 
    swlabel        #780 
    swlabel        #615 
    swlabel        #781 
    swlabel        #782 
    swlabel        #783 
    swlabel        #784 
    swlabel        #785 
    swlabel        #786 
    swlabel        #787 
    swlabel        #788 
    swlabel        #789 
    swlabel        #790 
    swlabel        #791 
    swlabel        #792 
    swlabel        #793 
    swlabel        #794 
    swlabel        #795 
    swlabel        #796 
    swlabel        #797 
    swlabel        #798 
    swlabel        #799 
    swlabel        #800 
    swlabel        #801 
    swlabel        #802 
    swlabel        #803 
    swlabel        #804 
    swlabel        #805 
    swlabel        #806 
    swlabel        #807 
    swlabel        #808 
    swlabel        #809 
    swlabel        #810 
    swlabel        #811 
    swlabel        #812 
    swlabel        #813 
    swlabel        #814 
    swlabel        #815 
    swlabel        #816 
    swlabel        #817 
    swlabel        #818 
    swlabel        #819 
    swlabel        #820 
    swlabel        #821 
    swlabel        #822 
    swlabel        #823 
    swlabel        #824 
    swlabel        #825 
    swlabel        #826 
    swlabel        #827 
    swlabel        #828 
    swlabel        #829 
    swlabel        #830 
    swlabel        #831 
    swlabel        #832 
    swlabel        #833 
    swlabel        #834 
    swlabel        #835 
    swlabel        #836 
    swlabel        #837 
    swlabel        #838 
    swlabel        #839 
    swlabel        #840 
    swlabel        #841 
    swlabel        #842 
    swlabel        #843 
    swlabel        #844 
    swlabel        #845 
    swlabel        #846 
    swlabel        #847 
    swlabel        #848 
    swlabel        #849 
    swlabel        #850 
    swlabel        #851 
    swlabel        #852 
    swlabel        #853 
    swlabel        #854 
    swlabel        #855 
    swlabel        #856 
    swlabel        #857 
    swlabel        #858 
    swlabel        #859 
    swlabel        #860 
    swlabel        #861 
    swlabel        #862 
    swlabel        #863 
    swlabel        #864 
    swlabel        #865 
    swlabel        #866 
    swlabel        #867 
    swlabel        #868 
    swlabel        #869 
    swlabel        #870 
    swlabel        #871 
    swlabel        #872 
    swlabel        #873 
    swlabel        #874 
    swlabel        #875 
    swlabel        #876 
    swlabel        #877 
    swlabel        #878 
    swlabel        #879 
    swlabel        #880 
    swlabel        #881 
    swlabel        #882 
    swlabel        #883 
    swlabel        #884 
    swlabel        #885 
    swlabel        #886 
    swlabel        #887 
    swlabel        #888 
    swlabel        #889 
    swlabel        #890 
    swlabel        #891 
    swlabel        #892 
    swlabel        #893 
    swlabel        #894 
    swlabel        #895 
    swlabel        #896 
    swlabel        #897 
    swlabel        #898 
    swlabel        #899 
    swlabel        #900 
    swlabel        #901 
    swlabel        #902 
    swlabel        #903 
    swlabel        #904 
    swlabel        #905 
    swlabel        #906 
    swlabel        #907 
    swlabel        #908 
    swlabel        #909 
    swlabel        #910 
    swlabel        #911 
    swlabel        #912 
    swlabel        #913 
    swlabel        #914 
    swlabel        #915 
    swlabel        #916 
    swlabel        #917 
    swlabel        #918 
    swlabel        #921 
    swlabel        #922 
    swlabel        #925 
    swlabel        #928 
    swlabel        #929 
    swlabel        #932 
    swlabel        #933 
    swlabel        #934 
    swlabel        #935 
    swlabel        #936 
    swlabel        #937 
    swlabel        #940 
    swlabel        #941 
    swlabel        #944 
    swlabel        #945 
    swlabel        #946 
    swlabel        #947 
    swlabel        #948 
    swlabel        #949 
    swlabel        #950 
    swlabel        #951 
    swlabel        #952 
    swlabel        #953 
    swlabel        #954 
    swlabel        #955 
    swlabel        #956 
    swlabel        #957 
    swlabel        #958 
    swlabel        #959 
    swlabel        #960 
    swlabel        #961 
    swlabel        #962 
    swlabel        #963 
    swlabel        #964 
    swlabel        #965 
    swlabel        #966 
    swlabel        #967 
    swlabel        #968 
    swlabel        #969 
    swlabel        #970 
    swlabel        #971 
    swlabel        #972 
    swlabel        #973 
    swlabel        #974 
    swlabel        #975 
    swlabel        #976 
    swlabel        #977 
    swlabel        #978 
    swlabel        #979 
    swlabel        #980 
    swlabel        #981 
    swlabel        #982 
    swlabel        #983 
    swlabel        #984 
    swlabel        #985 
    swlabel        #988 
    swlabel        #989 
    swlabel        #990 
    swlabel        #991 
    swlabel        #992 
    swlabel        #993 
    swlabel        #994 
    swlabel        #995 
    swlabel        #996 
    swlabel        #997 
    swlabel        #1000 
    swlabel        #1001 
    swlabel        #1002 
    swlabel        #1003 
    swlabel        #1006 
    swlabel        #1009 
    swlabel        #1010 
    swlabel        #1011 
    swlabel        #1012 
    swlabel        #1013 
    swlabel        #1013 
    swlabel        #1020 
    swlabel        #1023 
    swlabel        #1026 
    swlabel        #1027 
    swlabel        #1028 
    swlabel        #1029 
    swlabel        #1041 
    swlabel        #1048 
    swlabel        #1052 
    swlabel        #1053 
    swlabel        #1054 
    swlabel        #1055 
    swlabel        #1056 
    swlabel        #1057 
    swlabel        #1058 
    swlabel        #1059 
    swlabel        #1060 
    swlabel        #1061 
    swlabel        #1062 
    swlabel        #1063 
    swlabel        #1064 
    swlabel        #1065 
    swlabel        #1067 
    swlabel        #1069 
    swlabel        #1070 
    swlabel        #1071 
    swlabel        #1072 
    swlabel        #1081 
    swlabel        #1080 
    endsw          
#616:
    callp          msys.m$print_startcon 0 0
    loadimm  u64   "NO HANDLER"
    callp          msys.m$print_str_nf 1 0
    callp          msys.m$print_newline 0 0
    callp          msys.m$print_end 0 0
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#619:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#620:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#621:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#622:
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   16 
    iloadx   u64   1 0
    loadimm  i64   16 
    iloadx   u64   1 0
    store    u64   .pi64 
    load     u64   .pi64 
    iload    i64   
    loadref  u64   .stack 
    loadref  u64   .sp 
    incrload i64   1
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#623:
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   16 
    iloadx   u64   1 0
    loadimm  i64   16 
    iloadx   u64   1 0
    store    u64   .pi64 
    load     u64   .pi64 
    iload    u8    
    loadref  u64   .stack 
    loadref  u64   .sp 
    incrload i64   1
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#624:
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   16 
    iloadx   u64   1 0
    loadimm  i64   16 
    iloadx   u64   1 0
    store    u64   .pi64 
    load     u64   .pi64 
    iload    u16   
    loadref  u64   .stack 
    loadref  u64   .sp 
    incrload i64   1
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#625:
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   16 
    iloadx   u64   1 0
    loadimm  i64   16 
    iloadx   u64   1 0
    store    u64   .pi64 
    load     u64   .pi64 
    iload    u32   
    loadref  u64   .stack 
    loadref  u64   .sp 
    incrload i64   1
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#626:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#627:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#628:
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   16 
    iloadx   u64   1 0
    loadimm  i64   16 
    iloadx   u64   1 0
    loadref  u64   .stack 
    loadref  u64   .sp 
    incrload i64   1
    istorex  u64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#629:
    loadref  u64   .stack 
    load     i64   .fp 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   16 
    iloadx   u64   1 0
    loadimm  i64   16 
    iloadx   i64   1 0
    add      i64   
    iloadx   i64   8 -8
    truncate i64 i8 
    loadref  u64   .stack 
    loadref  u64   .sp 
    incrload i64   1
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#630:
    loadref  u64   .stack 
    load     i64   .fp 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   16 
    iloadx   u64   1 0
    loadimm  i64   16 
    iloadx   i64   1 0
    add      i64   
    iloadx   i64   8 -8
    truncate i64 i16 
    loadref  u64   .stack 
    loadref  u64   .sp 
    incrload i64   1
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#631:
    loadref  u64   .stack 
    load     i64   .fp 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   16 
    iloadx   u64   1 0
    loadimm  i64   16 
    iloadx   i64   1 0
    add      i64   
    iloadx   i64   8 -8
    truncate i64 i32 
    loadref  u64   .stack 
    loadref  u64   .sp 
    incrload i64   1
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#632:
    loadref  u64   .stack 
    load     i64   .fp 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   16 
    iloadx   u64   1 0
    loadimm  i64   16 
    iloadx   i64   1 0
    add      i64   
    iloadx   i64   8 -8
    loadref  u64   .stack 
    loadref  u64   .sp 
    incrload i64   1
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#633:
    loadref  u64   .stack 
    load     i64   .fp 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   16 
    iloadx   u64   1 0
    loadimm  i64   16 
    iloadx   i64   1 0
    add      i64   
    iloadx   i64   8 -8
    truncate i64 u8 
    loadref  u64   .stack 
    loadref  u64   .sp 
    incrload i64   1
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#634:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#635:
    loadref  u64   .stack 
    load     i64   .fp 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   16 
    iloadx   u64   1 0
    loadimm  i64   16 
    iloadx   i64   1 0
    add      i64   
    iloadx   i64   8 -8
    truncate i64 u32 
    loadref  u64   .stack 
    loadref  u64   .sp 
    incrload i64   1
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#636:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#637:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#638:
    loadref  u64   .stack 
    load     i64   .fp 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   16 
    iloadx   u64   1 0
    loadimm  i64   16 
    iloadx   i64   1 0
    add      i64   
    addptrx  i64   8 -8
    loadref  u64   .stack 
    loadref  u64   .sp 
    incrload i64   1
    istorex  u64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#639:
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   16 
    iloadx   u64   1 0
    loadimm  i64   16 
    iloadx   u64   1 0
    store    u64   .pi64 
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    load     u64   .pi64 
    istore   i8    
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#640:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#641:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#642:
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   16 
    iloadx   u64   1 0
    loadimm  i64   16 
    iloadx   u64   1 0
    store    u64   .pi64 
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    load     u64   .pi64 
    istore   i64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#643:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#644:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#645:
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   16 
    iloadx   u64   1 0
    loadimm  i64   16 
    iloadx   u64   1 0
    store    u64   .pi64 
    setcall        3
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   4 
    iloadx   u32   1 0
    setarg   u64   3
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   u64   8 -8
    setarg   u64   2
    load     u64   .pi64 
    setarg   u64   1
    callp          memcpy 3 0
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#646:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    loadref  u64   .stack 
    load     i64   .fp 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   16 
    iloadx   u64   1 0
    loadimm  i64   16 
    iloadx   i64   1 0
    add      i64   
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#647:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#648:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#649:
    loadref  u64   .stack 
    load     i64   .fp 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   16 
    iloadx   u64   1 0
    loadimm  i64   16 
    iloadx   i64   1 0
    add      i64   
    addptrx  i64   8 -8
    store    u64   .pi64 
    setcall        3
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   4 
    iloadx   u32   1 0
    setarg   u64   3
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   u64   8 -8
    setarg   u64   2
    load     u64   .pi64 
    setarg   u64   1
    callp          memcpy 3 0
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#650:
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   16 
    iloadx   i64   1 0
    loadref  u64   .stack 
    loadref  u64   .sp 
    incrload i64   1
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#651:
    setcall        1
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   16 
    iloadx   r32   1 0
    setarg   r32   1
    callf    i64   pci_exec.putr32 1 0
    loadref  u64   .stack 
    loadref  u64   .sp 
    incrload i64   1
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#652:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#653:
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   16 
    iloadx   u64   1 0
    loadimm  i64   16 
    iloadx   i64   1 0
    loadref  u64   .stack 
    loadref  u64   .sp 
    incrload i64   1
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#654:
    loadref  u64   .stack 
    load     i64   .fp 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   16 
    iloadx   u64   1 0
    loadimm  i64   16 
    iloadx   i64   1 0
    add      i64   
    addptrx  i64   8 -8
    loadref  u64   .stack 
    loadref  u64   .sp 
    incrload i64   1
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#655:
    loadref  u64   pci_decls.labeltable 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   16 
    iloadx   i64   1 0
    iloadx   i32   4 -4
    loadref  u64   .stack 
    loadref  u64   .sp 
    incrload i64   1
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#656:
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   16 
    iloadx   u64   1 0
    loadimm  i64   16 
    iloadx   i64   1 0
    loadref  u64   .stack 
    loadref  u64   .sp 
    incrload i64   1
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#657:
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   16 
    iloadx   u64   1 0
    store    u64   .d 
    setcall        1
    load     u64   .d 
    loadimm  i64   16 
    iloadx   i64   1 0
    setarg   i64   1
    callf    u64   pci_support.getdllfnptr 1 0
    loadref  u64   .stack 
    loadref  u64   .sp 
    incrload i64   1
    istorex  u64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#658:
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   u64   8 -8
    store    u64   .pi64 
    load     u64   .pi64 
    iload    i8    
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#659:
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   u64   8 -8
    store    u64   .pi64 
    load     u64   .pi64 
    iload    i16   
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#660:
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   u64   8 -8
    store    u64   .pi64 
    load     u64   .pi64 
    iload    i32   
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#661:
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   u64   8 -8
    store    u64   .pi64 
    load     u64   .pi64 
    iload    i64   
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#662:
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   u64   8 -8
    store    u64   .pi64 
    load     u64   .pi64 
    iload    u8    
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#663:
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   u64   8 -8
    store    u64   .pi64 
    load     u64   .pi64 
    iload    u16   
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#664:
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   u64   8 -8
    store    u64   .pi64 
    load     u64   .pi64 
    iload    u32   
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#665:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#666:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#667:
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#668:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   24 
    iloadx   u32   1 0
    mul      i64   
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   28 
    iloadx   i32   1 0
    add      i64   
    store    i64   .x 
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   u64   8 -8
    store    u64   .pi64 
    load     u64   .pi64 
    load     i64   .x 
    addptrx  u64   1 0
    iload    i8    
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#669:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   24 
    iloadx   u32   1 0
    mul      i64   
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   28 
    iloadx   i32   1 0
    add      i64   
    store    i64   .x 
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   u64   8 -8
    store    u64   .pi64 
    load     u64   .pi64 
    load     i64   .x 
    addptrx  u64   1 0
    iload    i16   
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#670:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   24 
    iloadx   u32   1 0
    mul      i64   
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   28 
    iloadx   i32   1 0
    add      i64   
    store    i64   .x 
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   u64   8 -8
    store    u64   .pi64 
    load     u64   .pi64 
    load     i64   .x 
    addptrx  u64   1 0
    iload    i32   
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#671:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   24 
    iloadx   u32   1 0
    mul      i64   
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   28 
    iloadx   i32   1 0
    add      i64   
    store    i64   .x 
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   u64   8 -8
    store    u64   .pi64 
    load     u64   .pi64 
    load     i64   .x 
    addptrx  u64   1 0
    iload    i64   
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#672:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   24 
    iloadx   u32   1 0
    mul      i64   
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   28 
    iloadx   i32   1 0
    add      i64   
    store    i64   .x 
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   u64   8 -8
    store    u64   .pi64 
    load     u64   .pi64 
    load     i64   .x 
    addptrx  u64   1 0
    iload    u8    
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#673:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   24 
    iloadx   u32   1 0
    mul      i64   
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   28 
    iloadx   i32   1 0
    add      i64   
    store    i64   .x 
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   u64   8 -8
    store    u64   .pi64 
    load     u64   .pi64 
    load     i64   .x 
    addptrx  u64   1 0
    iload    u16   
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#674:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   24 
    iloadx   u32   1 0
    mul      i64   
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   28 
    iloadx   i32   1 0
    add      i64   
    store    i64   .x 
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   u64   8 -8
    store    u64   .pi64 
    load     u64   .pi64 
    load     i64   .x 
    addptrx  u64   1 0
    iload    u32   
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#675:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#676:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#677:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   24 
    iloadx   u32   1 0
    mul      i64   
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   28 
    iloadx   i32   1 0
    add      i64   
    store    i64   .x 
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   u64   8 -8
    store    u64   .pi64 
    load     u64   .pi64 
    load     i64   .x 
    addptrx  u64   1 0
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  u64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#678:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   u64   8 -8
    store    u64   .pi64 
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    load     u64   .pi64 
    istore   i8    
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#679:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   u64   8 -8
    store    u64   .pi64 
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    load     u64   .pi64 
    istore   i16   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#680:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   u64   8 -8
    store    u64   .pi64 
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    load     u64   .pi64 
    istore   i32   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#681:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   u64   8 -8
    store    u64   .pi64 
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    load     u64   .pi64 
    istore   i64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#682:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#683:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#684:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   u64   8 -8
    store    u64   .pi64 
    setcall        3
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   4 
    iloadx   u32   1 0
    setarg   u64   3
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   u64   8 -8
    setarg   u64   2
    load     u64   .pi64 
    setarg   u64   1
    callp          memcpy 3 0
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#685:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   24 
    iloadx   u32   1 0
    mul      i64   
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   28 
    iloadx   i32   1 0
    add      i64   
    store    i64   .x 
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   u64   8 -8
    store    u64   .pi64 
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    load     u64   .pi64 
    load     i64   .x 
    addptrx  u64   1 0
    istore   i8    
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#686:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   24 
    iloadx   u32   1 0
    mul      i64   
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   28 
    iloadx   i32   1 0
    add      i64   
    store    i64   .x 
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   u64   8 -8
    store    u64   .pi64 
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    load     u64   .pi64 
    load     i64   .x 
    addptrx  u64   1 0
    istore   i16   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#687:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   24 
    iloadx   u32   1 0
    mul      i64   
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   28 
    iloadx   i32   1 0
    add      i64   
    store    i64   .x 
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   u64   8 -8
    store    u64   .pi64 
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    load     u64   .pi64 
    load     i64   .x 
    addptrx  u64   1 0
    istore   i32   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#688:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   24 
    iloadx   u32   1 0
    mul      i64   
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   28 
    iloadx   i32   1 0
    add      i64   
    store    i64   .x 
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   u64   8 -8
    store    u64   .pi64 
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    load     u64   .pi64 
    load     i64   .x 
    addptrx  u64   1 0
    istore   i64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#689:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#690:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#691:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   24 
    iloadx   u32   1 0
    mul      i64   
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   28 
    iloadx   i32   1 0
    add      i64   
    store    i64   .x 
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   u64   8 -8
    store    u64   .pi64 
    setcall        3
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   4 
    iloadx   u32   1 0
    setarg   u64   3
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   u64   8 -8
    setarg   u64   2
    load     u64   .pi64 
    load     i64   .x 
    addptrx  u64   1 0
    setarg   u64   1
    callp          memcpy 3 0
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#692:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#693:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#694:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#695:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   u64   8 -8
    store    u64   .pi64 
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   u64   8 -8
    store    u64   .pi64b 
    load     u64   .pi64 
    load     u64   .pi64b 
    swapmem  i64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#696:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#697:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#698:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#699:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   u64   8 -8
    store    u64   .pi64 
    loadimm  i64   0 
    load     u64   .pi64 
    istore   i32   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#700:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   u64   8 -8
    store    u64   .pi64 
    loadimm  i64   0 
    load     u64   .pi64 
    istore   i64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#701:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   u64   8 -8
    store    u64   .pi64 
    setcall        3
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   4 
    iloadx   u32   1 0
    setarg   u64   3
    loadimm  i64   0 
    setarg   i32   2
    load     u64   .pi64 
    setarg   u64   1
    callp          memset 3 0
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#702:
    loadref  u64   .sp 
    loadimm  i64   2 
    subto    i64   
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 0
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 8
    eq       i64   
    store    i64   .x 
    jump           #703 
    unload   u64   
    jump           #612 
#704:
    jump           #618 
    unload   u64   
    jump           #612 
#705:
    jump           #618 
    unload   u64   
    jump           #612 
#706:
    jump           #618 
    unload   u64   
    jump           #612 
#707:
    loadref  u64   .sp 
    loadimm  i64   2 
    subto    i64   
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 0
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 8
    ne       i64   
    store    i64   .x 
;dojumpcond::
#703:
    load     i64   .x 
    jumpf    i64   #709 
    loadref  u64   pci_decls.labeltable 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   16 
    iloadx   i64   1 0
    iloadx   i32   4 -4
    store    i64   .pc 
    jump           #708 
#709:
    loadref  u64   .sp 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   24 
    iloadx   u8    1 0
    addto    i64   
    loadref  u64   .pc 
    incrto   i64   1
#708:
    jump           #612 
#710:
    jump           #618 
    unload   u64   
    jump           #612 
#711:
    jump           #618 
    unload   u64   
    jump           #612 
#712:
    loadref  u64   .sp 
    loadimm  i64   2 
    subto    i64   
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 0
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 8
    lt       i64   
    store    i64   .x 
    jump           #703 
    unload   u64   
    jump           #612 
#713:
    loadref  u64   .sp 
    loadimm  i64   2 
    subto    i64   
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   u64   8 0
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   u64   8 8
    lt       u64   
    store    i64   .x 
    jump           #703 
    unload   u64   
    jump           #612 
#714:
    jump           #618 
    unload   u64   
    jump           #612 
#715:
    jump           #618 
    unload   u64   
    jump           #612 
#716:
    loadref  u64   .sp 
    loadimm  i64   2 
    subto    i64   
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 0
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 8
    le       i64   
    store    i64   .x 
    jump           #703 
    unload   u64   
    jump           #612 
#717:
    loadref  u64   .sp 
    loadimm  i64   2 
    subto    i64   
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   u64   8 0
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   u64   8 8
    le       u64   
    store    i64   .x 
    jump           #703 
    unload   u64   
    jump           #612 
#718:
    loadref  u64   .sp 
    loadimm  i64   2 
    subto    i64   
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   r64   8 0
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   r64   8 8
    le       r64   
    store    i64   .x 
    jump           #703 
    unload   u64   
    jump           #612 
#719:
    jump           #618 
    unload   u64   
    jump           #612 
#720:
    loadref  u64   .sp 
    loadimm  i64   2 
    subto    i64   
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 0
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 8
    ge       i64   
    store    i64   .x 
    jump           #703 
    unload   u64   
    jump           #612 
#721:
    loadref  u64   .sp 
    loadimm  i64   2 
    subto    i64   
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   u64   8 0
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   u64   8 8
    ge       u64   
    store    i64   .x 
    jump           #703 
    unload   u64   
    jump           #612 
#722:
    jump           #618 
    unload   u64   
    jump           #612 
#723:
    jump           #618 
    unload   u64   
    jump           #612 
#724:
    loadref  u64   .sp 
    loadimm  i64   2 
    subto    i64   
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 0
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 8
    gt       i64   
    store    i64   .x 
    jump           #703 
    unload   u64   
    jump           #612 
#725:
    loadref  u64   .sp 
    loadimm  i64   2 
    subto    i64   
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   u64   8 0
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   u64   8 8
    gt       u64   
    store    i64   .x 
    jump           #703 
    unload   u64   
    jump           #612 
#726:
    jump           #618 
    unload   u64   
    jump           #612 
#727:
    jump           #618 
    unload   u64   
    jump           #612 
#728:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    jumpf    i64   #730 
    loadref  u64   pci_decls.labeltable 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   16 
    iloadx   i64   1 0
    iloadx   i32   4 -4
    store    i64   .pc 
    jump           #729 
#730:
    loadref  u64   .pc 
    incrto   i64   1
#729:
    jump           #612 
#731:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    loadimm  i64   0 
    jumpne   i64   #733 
    loadref  u64   pci_decls.labeltable 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   16 
    iloadx   i64   1 0
    iloadx   i32   4 -4
    store    i64   .pc 
    jump           #732 
#733:
    loadref  u64   .pc 
    incrto   i64   1
#732:
    jump           #612 
#734:
    loadref  u64   .sp 
    decrto   i64   1
    loadref  u64   .stack 
    load     i64   .sp 
    addptrx  i64   8 -8
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 0
    addto    i64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#735:
    loadref  u64   .sp 
    decrto   i64   1
    loadref  u64   .stack 
    load     i64   .sp 
    addptrx  r64   8 -8
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   r64   8 0
    addto    r64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#736:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#737:
    loadref  u64   .sp 
    decrto   i64   1
    loadref  u64   .stack 
    load     i64   .sp 
    addptrx  i64   8 -8
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 0
    subto    i64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#738:
    loadref  u64   .sp 
    decrto   i64   1
    loadref  u64   .stack 
    load     i64   .sp 
    addptrx  r64   8 -8
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   r64   8 0
    subto    r64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#739:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#740:
    loadref  u64   .sp 
    decrto   i64   1
    loadref  u64   .stack 
    load     i64   .sp 
    addptrx  i64   8 -8
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 0
    multo    i64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#741:
    loadref  u64   .sp 
    decrto   i64   1
    loadref  u64   .stack 
    load     i64   .sp 
    addptrx  r64   8 -8
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   r64   8 0
    multo    r64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#742:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#743:
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 -8
    neg      i64   
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#744:
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   r64   8 -8
    neg      r64   
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  r64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#745:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#746:
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 -8
    abs      i64   
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#747:
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   r64   8 -8
    abs      r64   
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  r64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#748:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#749:
    loadref  u64   .stack 
    load     i64   .sp 
    addptrx  i64   8 -8
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 -8
    multo    i64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#750:
    loadref  u64   .stack 
    load     i64   .sp 
    addptrx  r64   8 -8
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   r64   8 -8
    multo    r64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#751:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#752:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#753:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#754:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#755:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#756:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#757:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#758:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#759:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#760:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#761:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#762:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#763:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#764:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#765:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#766:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#767:
    loadref  u64   .sp 
    decrto   i64   1
    loadref  u64   .stack 
    load     i64   .sp 
    addptrx  r64   8 -8
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   r64   8 0
    divfto   r64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#768:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#769:
    loadref  u64   .sp 
    decrto   i64   1
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 -8
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 0
    div      i64   
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#770:
    loadref  u64   .sp 
    decrto   i64   1
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   u64   8 -8
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   u64   8 0
    div      u64   
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  u64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#771:
    loadref  u64   .sp 
    decrto   i64   1
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 -8
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 0
    rem      i64   
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#772:
    loadref  u64   .sp 
    decrto   i64   1
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   u64   8 -8
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   u64   8 0
    rem      u64   
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  u64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#773:
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 -16
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 -8
    div      i64   
    store    i64   .a 
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 -16
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 -8
    rem      i64   
    store    i64   .b 
    load     i64   .a 
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -16
    load     i64   .b 
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#774:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#775:
    loadref  u64   .sp 
    decrto   i64   1
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 -8
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 0
    shr      i64   
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#776:
    loadref  u64   .sp 
    decrto   i64   1
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   u64   8 -8
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 0
    shr      u64   
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  u64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#777:
    loadref  u64   .sp 
    decrto   i64   1
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 -8
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 0
    eq       i64   
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#778:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#779:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#780:
    loadref  u64   .sp 
    decrto   i64   1
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 -8
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 0
    ne       i64   
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#781:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#782:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#783:
    loadref  u64   .sp 
    decrto   i64   1
    loadref  u64   .stack 
    load     i64   .sp 
    addptrx  i64   8 -8
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 0
    minto    i64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#784:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#785:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#786:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#787:
    loadref  u64   .sp 
    decrto   i64   1
    loadref  u64   .stack 
    load     i64   .sp 
    addptrx  i64   8 -8
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 0
    maxto    i64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#788:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#789:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#790:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#791:
    loadref  u64   .sp 
    decrto   i64   1
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 -8
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 0
    lt       i64   
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#792:
    loadref  u64   .sp 
    decrto   i64   1
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   u64   8 -8
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   u64   8 0
    le       u64   
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#793:
    loadref  u64   .sp 
    decrto   i64   1
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 -8
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 0
    lt       i64   
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#794:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#795:
    loadref  u64   .sp 
    decrto   i64   1
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 -8
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 0
    le       i64   
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#796:
    loadref  u64   .sp 
    decrto   i64   1
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   u64   8 -8
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   u64   8 0
    le       u64   
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  u64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#797:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#798:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#799:
    loadref  u64   .sp 
    decrto   i64   1
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 -8
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 0
    ge       i64   
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#800:
    loadref  u64   .sp 
    decrto   i64   1
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   u64   8 -8
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   u64   8 0
    ge       u64   
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  u64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#801:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#802:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#803:
    loadref  u64   .sp 
    decrto   i64   1
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 -8
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 0
    gt       i64   
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#804:
    loadref  u64   .sp 
    decrto   i64   1
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   u64   8 -8
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   u64   8 0
    gt       u64   
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#805:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#806:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#807:
    loadref  u64   .sp 
    decrto   i64   1
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 -8
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 0
    power    i64   
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#808:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#809:
    loadref  u64   .sp 
    decrto   i64   1
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   r64   8 -8
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   r64   8 0
    power    r64   
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  r64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#810:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    store    i64   .x 
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   u64   8 -8
    store    u64   .pi64 
    load     u64   .pi64 
    load     i64   .x 
    addto    i8    
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#811:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    store    i64   .x 
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   u64   8 -8
    store    u64   .pi64 
    load     u64   .pi64 
    load     i64   .x 
    addto    i16   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#812:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    store    i64   .x 
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   u64   8 -8
    store    u64   .pi64 
    load     u64   .pi64 
    load     i64   .x 
    addto    i32   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#813:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    store    i64   .x 
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   u64   8 -8
    store    u64   .pi64 
    load     u64   .pi64 
    load     i64   .x 
    addto    i64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#814:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    float    r64 i64 
    store    r64   .x 
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   u64   8 -8
    store    u64   .pi64 
    load     u64   .pi64 
    load     r64   .x 
    addto    r64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#815:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#816:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#817:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#818:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    store    i64   .x 
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   u64   8 -8
    store    u64   .pi64 
    load     u64   .pi64 
    load     i64   .x 
    subto    i32   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#819:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    store    i64   .x 
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   u64   8 -8
    store    u64   .pi64 
    load     u64   .pi64 
    load     i64   .x 
    subto    i64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#820:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#821:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#822:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#823:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#824:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#825:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    store    i64   .x 
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   u64   8 -8
    store    u64   .pi64 
    load     u64   .pi64 
    load     i64   .x 
    multo    i64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#826:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   r64   8 -8
    store    r64   .x 
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   u64   8 -8
    store    u64   .pi64 
    load     u64   .pi64 
    load     r64   .x 
    multo    r64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#827:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#828:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#829:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#830:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#831:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    store    i64   .x 
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   u64   8 -8
    store    u64   .pi64 
    load     u64   .pi64 
    iload    i64   
    load     i64   .x 
    div      i64   
    load     u64   .pi64 
    istore   i64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#832:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#833:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#834:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#835:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#836:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   r64   8 -8
    store    r64   .x 
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   u64   8 -8
    store    u64   .pi64 
    load     u64   .pi64 
    iload    r64   
    load     r64   .x 
    divf     r64   
    load     u64   .pi64 
    istore   r64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#837:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#838:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#839:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#840:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#841:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    store    i64   .x 
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   u64   8 -8
    store    u64   .pi64 
    load     u64   .pi64 
    load     i64   .x 
    minto    i64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#842:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#843:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#844:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#845:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#846:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#847:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#848:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#849:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#850:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#851:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    store    i64   .x 
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   u64   8 -8
    store    u64   .pi64 
    load     u64   .pi64 
    load     i64   .x 
    maxto    u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#852:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#853:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#854:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#855:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#856:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#857:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#858:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#859:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#860:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#861:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#862:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#863:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#864:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#865:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#866:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#867:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#868:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#869:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#870:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   u64   8 -8
    store    u64   .pi64 
    load     u64   .pi64 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   24 
    iloadx   i64   1 0
    addto    i8    
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#871:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   u64   8 -8
    store    u64   .pi64 
    load     u64   .pi64 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   24 
    iloadx   i64   1 0
    addto    i16   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#872:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   u64   8 -8
    store    u64   .pi64 
    load     u64   .pi64 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   24 
    iloadx   i64   1 0
    addto    i32   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#873:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   u64   8 -8
    store    u64   .pi64 
    load     u64   .pi64 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   24 
    iloadx   i64   1 0
    addto    i64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#874:
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   u64   8 -8
    store    u64   .pi64 
    load     u64   .pi64 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   24 
    iloadx   i64   1 0
    addto    i8    
    load     u64   .pi64 
    iload    i8    
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#875:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#876:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#877:
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   u64   8 -8
    store    u64   .pi64 
    load     u64   .pi64 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   24 
    iloadx   i64   1 0
    addto    i64   
    load     u64   .pi64 
    iload    i64   
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#878:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#879:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#880:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#881:
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   u64   8 -8
    store    u64   .pi64 
    load     u64   .pi64 
    iload    i64   
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    load     u64   .pi64 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   24 
    iloadx   i64   1 0
    addto    i64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#882:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   u64   8 -8
    store    u64   .pi64 
    load     u64   .pi64 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   24 
    iloadx   i64   1 0
    subto    i8    
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#883:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   u64   8 -8
    store    u64   .pi64 
    load     u64   .pi64 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   24 
    iloadx   i64   1 0
    subto    i16   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#884:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#885:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   u64   8 -8
    store    u64   .pi64 
    load     u64   .pi64 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   24 
    iloadx   i64   1 0
    subto    i64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#886:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#887:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#888:
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   u64   8 -8
    store    u64   .pi64 
    load     u64   .pi64 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   24 
    iloadx   i64   1 0
    subto    i32   
    load     u64   .pi64 
    iload    i32   
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#889:
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   u64   8 -8
    store    u64   .pi64 
    load     u64   .pi64 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   24 
    iloadx   i64   1 0
    subto    i64   
    load     u64   .pi64 
    iload    i64   
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#890:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#891:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#892:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#893:
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   u64   8 -8
    store    u64   .pi64 
    load     u64   .pi64 
    iload    i64   
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    load     u64   .pi64 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   24 
    iloadx   i64   1 0
    subto    i64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#894:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#895:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#896:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#897:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    store    i64   .x 
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   u64   8 -8
    store    u64   .pi64 
    load     u64   .pi64 
    load     i64   .x 
    bitandto i64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#898:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    store    i64   .x 
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   u64   8 -8
    store    u64   .pi64 
    load     u64   .pi64 
    load     i64   .x 
    bitorto  i8    
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#899:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#900:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#901:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    store    i64   .x 
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   u64   8 -8
    store    u64   .pi64 
    load     u64   .pi64 
    load     i64   .x 
    bitorto  i64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#902:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#903:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#904:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#905:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    store    i64   .x 
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   u64   8 -8
    store    u64   .pi64 
    load     u64   .pi64 
    load     i64   .x 
    bitxorto i64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#906:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#907:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#908:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#909:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    store    i64   .x 
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   u64   8 -8
    store    u64   .pi64 
    load     u64   .pi64 
    load     i64   .x 
    shlto    i64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#910:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#911:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#912:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#913:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    store    i64   .x 
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   u64   8 -8
    store    u64   .pi64 
    load     u64   .pi64 
    load     i64   .x 
    shrto    i64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#914:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#915:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#916:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#917:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#918:
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 0
    loadimm  i64   16 
    iloadx   u64   1 0
    loadimm  i64   16 
    iloadx   u64   1 0
    store    u64   .pi64 
    load     u64   .pi64 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   24 
    iloadx   i64   1 0
    addto    i64   
    load     u64   .pi64 
    iload    i64   
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 32
    loadimm  i64   16 
    iloadx   u64   1 0
    loadimm  i64   16 
    iloadx   u64   1 0
    iload    i64   
    jumpgt   i64   #920 
    loadref  u64   pci_decls.labeltable 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   16 
    iloadx   i64   1 0
    iloadx   i32   4 -4
    store    i64   .pc 
    jump           #919 
#920:
    loadref  u64   .pc 
    loadimm  i64   3 
    addto    i64   
#919:
    jump           #612 
#921:
    jump           #618 
    unload   u64   
    jump           #612 
#922:
    loadref  u64   .stack 
    load     i64   .fp 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 0
    loadimm  i64   16 
    iloadx   u64   1 0
    loadimm  i64   16 
    iloadx   i64   1 0
    add      i64   
    addptrx  i64   8 -8
    store    u64   .pi64 
    load     u64   .pi64 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   24 
    iloadx   i64   1 0
    addto    i64   
    load     u64   .pi64 
    iload    i64   
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 32
    loadimm  i64   16 
    iloadx   u64   1 0
    loadimm  i64   16 
    iloadx   u64   1 0
    iload    i64   
    jumpgt   i64   #924 
    loadref  u64   pci_decls.labeltable 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   16 
    iloadx   i64   1 0
    iloadx   i32   4 -4
    store    i64   .pc 
    jump           #923 
#924:
    loadref  u64   .pc 
    loadimm  i64   3 
    addto    i64   
#923:
    jump           #612 
#925:
    loadref  u64   .stack 
    load     i64   .fp 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 0
    loadimm  i64   16 
    iloadx   u64   1 0
    loadimm  i64   16 
    iloadx   i64   1 0
    add      i64   
    addptrx  i64   8 -8
    store    u64   .pi64 
    load     u64   .pi64 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   24 
    iloadx   i64   1 0
    addto    i64   
    load     u64   .pi64 
    iload    i64   
    loadref  u64   .stack 
    load     i64   .fp 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 32
    loadimm  i64   16 
    iloadx   u64   1 0
    loadimm  i64   16 
    iloadx   i64   1 0
    add      i64   
    iloadx   i64   8 -8
    jumpgt   i64   #927 
    loadref  u64   pci_decls.labeltable 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   16 
    iloadx   i64   1 0
    iloadx   i32   4 -4
    store    i64   .pc 
    jump           #926 
#927:
    loadref  u64   .pc 
    loadimm  i64   3 
    addto    i64   
#926:
    jump           #612 
#928:
    jump           #618 
    unload   u64   
    jump           #612 
#929:
    loadref  u64   .stack 
    load     i64   .fp 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 0
    loadimm  i64   16 
    iloadx   u64   1 0
    loadimm  i64   16 
    iloadx   i64   1 0
    add      i64   
    addptrx  i64   8 -8
    store    u64   .pi64 
    load     u64   .pi64 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   24 
    iloadx   i64   1 0
    addto    i64   
    load     u64   .pi64 
    iload    i64   
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 32
    loadimm  i64   16 
    iloadx   i64   1 0
    jumpgt   i64   #931 
    loadref  u64   pci_decls.labeltable 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   16 
    iloadx   i64   1 0
    iloadx   i32   4 -4
    store    i64   .pc 
    jump           #930 
#931:
    loadref  u64   .pc 
    loadimm  i64   3 
    addto    i64   
#930:
    jump           #612 
#932:
    jump           #618 
    unload   u64   
    jump           #612 
#933:
    jump           #618 
    unload   u64   
    jump           #612 
#934:
    jump           #618 
    unload   u64   
    jump           #612 
#935:
    jump           #618 
    unload   u64   
    jump           #612 
#936:
    jump           #618 
    unload   u64   
    jump           #612 
#937:
    loadref  u64   .stack 
    load     i64   .fp 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 0
    loadimm  i64   16 
    iloadx   u64   1 0
    loadimm  i64   16 
    iloadx   i64   1 0
    add      i64   
    addptrx  i64   8 -8
    store    u64   .pi64 
    load     u64   .pi64 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   24 
    iloadx   i64   1 0
    subto    i64   
    load     u64   .pi64 
    iload    i64   
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 32
    loadimm  i64   16 
    iloadx   i64   1 0
    jumplt   i64   #939 
    loadref  u64   pci_decls.labeltable 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   16 
    iloadx   i64   1 0
    iloadx   i32   4 -4
    store    i64   .pc 
    jump           #938 
#939:
    loadref  u64   .pc 
    loadimm  i64   3 
    addto    i64   
#938:
    jump           #612 
#940:
    jump           #618 
    unload   u64   
    jump           #612 
#941:
    loadref  u64   .stack 
    load     i64   .fp 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 0
    loadimm  i64   16 
    iloadx   u64   1 0
    loadimm  i64   16 
    iloadx   i64   1 0
    add      i64   
    addptrx  i64   8 -8
    store    u64   .pi64 
    load     u64   .pi64 
    decrto   i64   1
    load     u64   .pi64 
    iload    i64   
    jumpf    i64   #943 
    loadref  u64   pci_decls.labeltable 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   16 
    iloadx   i64   1 0
    iloadx   i32   4 -4
    store    i64   .pc 
    jump           #942 
#943:
    loadref  u64   .pc 
    loadimm  i64   2 
    addto    i64   
#942:
    jump           #612 
#944:
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 -8
    float    r64 i64 
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  r64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#945:
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   u64   8 -8
    float    r64 u64 
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  r64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#946:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#947:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#948:
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   r64   8 -8
    fix      i64 r64 
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#949:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#950:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#951:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#952:
    setcall        1
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 -8
    setarg   i64   1
    callf    r32   pci_exec.getr32 1 0
    fwiden   r64 r32 
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  r64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#953:
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   r64   8 -8
    fnarrow  r32 r64 
    typepun  i64 r32 
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#954:
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 -8
    truncate i64 i8 
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#955:
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 -8
    truncate i64 i16 
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#956:
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 -8
    truncate i64 i32 
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#957:
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 -8
    truncate i64 u8 
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#958:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#959:
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 -8
    truncate i64 u32 
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#960:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#961:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#962:
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 -8
    truncate i64 i32 
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#963:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#964:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#965:
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 -8
    truncate i64 u32 
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#966:
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   r64   8 -8
    sqrt     r64   
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  r64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#967:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#968:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#969:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#970:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#971:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#972:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#973:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#974:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#975:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#976:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#977:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#978:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#979:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#980:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#981:
    loadref  u64   .sp 
    decrto   i64   1
    loadref  u64   .stack 
    load     i64   .sp 
    addptrx  i64   8 -8
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 0
    bitandto i64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#982:
    loadref  u64   .sp 
    decrto   i64   1
    loadref  u64   .stack 
    load     i64   .sp 
    addptrx  i64   8 -8
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 0
    bitorto  i64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#983:
    loadref  u64   .sp 
    decrto   i64   1
    loadref  u64   .stack 
    load     i64   .sp 
    addptrx  i64   8 -8
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 0
    bitxorto i64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#984:
    loadref  u64   .sp 
    decrto   i64   1
    loadref  u64   .stack 
    load     i64   .sp 
    addptrx  i64   8 -8
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 0
    shlto    i64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#985:
    load     i64   .fp 
    loadref  u64   .stack 
    loadref  u64   .sp 
    incrload i64   1
    istorex  i64   8 -8
    load     i64   .sp 
    store    i64   .fp 
    loadref  u64   .sp 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   24 
    iloadx   u16   1 0
    addto    i64   
    loadimm  u64   0 
    jumpf    i64   #987 
    loadimm  i64   1457115631958533000 
    loadref  u64   .stack 
    loadref  u64   .sp 
    incrload i64   1
    istorex  i64   8 -8
#987:
#986:
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#988:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#989:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   24 
    iloadx   u32   1 0
    mul      i64   
    store    i64   .n 
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   u64   8 -8
    store    u64   .pi64 
    load     u64   .pi64 
    load     i64   .n 
    addto    u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#990:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   24 
    iloadx   u32   1 0
    mul      i64   
    store    i64   .n 
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   u64   8 -8
    store    u64   .pi64 
    load     u64   .pi64 
    load     i64   .n 
    subto    u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#991:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   24 
    iloadx   u32   1 0
    mul      i64   
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   28 
    iloadx   i32   1 0
    add      i64   
    store    i64   .x 
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   u64   8 -8
    store    u64   .pi64 
    load     u64   .pi64 
    load     i64   .x 
    addptrx  u64   1 0
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#992:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   24 
    iloadx   u32   1 0
    mul      i64   
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   28 
    iloadx   i32   1 0
    add      i64   
    store    i64   .x 
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   u64   8 -8
    store    u64   .pi64 
    load     u64   .pi64 
    load     i64   .x 
    subptrx  u64   1 0
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#993:
    loadref  u64   .sp 
    decrto   i64   1
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   u64   8 -8
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   u64   8 0
    subptr   u64   1
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   24 
    iloadx   u32   1 0
    div      i64   
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#994:
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 -8
    bitnot   i64   
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#995:
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 -8
    notnot   i64   
    not      i64   
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#996:
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 -8
    notnot   i64   
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#997:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    store    i64   .n 
    load     i64   .n 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   24 
    iloadx   i32   1 0
    jumplt   i64   #999 1
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   28 
    iloadx   i32   1 0
    jumpgt   i64   #999 
    load     i64   .pc 
    load     i64   .n 
    add      i64   
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   24 
    iloadx   i32   1 0
    sub      i64   
    loadimm  i64   2 
    add      i64   
    store    i64   .pc 
    loadref  u64   pci_decls.labeltable 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   16 
    iloadx   i64   1 0
    iloadx   i32   4 -4
    store    i64   .pc 
    jump           #998 
#999:
    loadref  u64   pci_decls.labeltable 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 0
    loadimm  i64   16 
    iloadx   i64   1 0
    iloadx   i32   4 -4
    store    i64   .pc 
#998:
    jump           #612 
#1000:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#1001:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    store    i64   .n 
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 -8
    load     i64   .n 
    shr      i64   
    loadimm  i64   1 
    bitand   i64   
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#1002:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    store    i64   .n 
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   u64   8 -8
    store    u64   .pi64 
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    store    i64   .x 
    load     u64   .pi64 
    iload    i64   
    loadimm  i64   1 
    load     i64   .n 
    shl      i64   
    bitnot   i64   
    bitand   i64   
    load     i64   .x 
    loadimm  i64   1 
    bitand   i64   
    load     i64   .n 
    shl      i64   
    bitor    i64   
    load     u64   .pi64 
    istore   i64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#1003:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    store    i64   .j 
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    store    i64   .i 
    load     i64   .i 
    load     i64   .j 
    jumple   i64   #1005 
    loadref  u64   .i 
    loadref  u64   .j 
    swapmem  i64   
#1005:
#1004:
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 -8
    load     i64   .i 
    shr      i64   
    loadimm  u64   -1 
    load     i64   .j 
    load     i64   .i 
    sub      i64   
    loadimm  i64   1 
    add      i64   
    shl      u64   
    bitnot   u64   
    bitand   i64   
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#1006:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    store    i64   .j 
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    store    i64   .i 
    load     i64   .i 
    load     i64   .j 
    jumple   i64   #1008 
    loadref  u64   .i 
    loadref  u64   .j 
    swapmem  i64   
#1008:
#1007:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   u64   8 -8
    store    u64   .pi64 
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    store    i64   .x 
    setcall        4
    load     i64   .x 
    setarg   i64   4
    load     i64   .j 
    setarg   i64   3
    load     i64   .i 
    setarg   i64   2
    load     u64   .pi64 
    setarg   u64   1
    callp          pci_support.storebit 4 0
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#1009:
    loadref  u64   .sp 
    decrto   i64   1
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#1010:
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 -8
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 0
    loadref  u64   .sp 
    incrto   i64   1
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#1011:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#1012:
    loadref  u64   .stack 
    load     i64   .sp 
    addptrx  i64   8 -8
    loadref  u64   .stack 
    load     i64   .sp 
    addptrx  i64   8 -16
    swapmem  i64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#1013:
    loadimm  u64   0 
    jumpf    i64   #1015 
    load     i64   .sp 
    loadimm  i64   69990 
    jumple   i64   #1017 
    setcall        3
    load     i64   .pc 
    setarg   i64   3
    loadimm  u64   ""
    setarg   u64   2
    loadimm  u64   "Stack overflow"
    setarg   u64   1
    callp          pci_support.pcerror3 3 0
#1017:
#1016:
#1015:
#1014:
    load     i64   .pc 
    loadimm  i64   1 
    add      i64   
    loadref  u64   .stack 
    loadref  u64   .sp 
    incrload i64   1
    istorex  i64   8 -8
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   16 
    iloadx   u64   1 0
    loadimm  i64   16 
    iloadx   i64   1 0
    store    i64   .pc 
    jump           #612 
#1020:
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 -8
    loadimm  i64   1000000 
    jumple   i64   #1022 
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   u64   8 -8
    store    u64   .pi64 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   24 
    iloadx   i32   1 0
    store    i64   .n 
    loadref  u64   .sp 
    load     i64   .n 
    loadimm  i64   1 
    sub      i64   
    subto    i64   
    setcall        6
    loadimm  i64   0 
    setarg   i64   6
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   28 
    iloadx   i32   1 0
    setarg   i64   5
    load     i64   .n 
    setarg   i64   4
    loadref  u64   .stack 
    load     i64   .sp 
    addptrx  i64   8 -8
    setarg   u64   3
    load     u64   .pi64 
    setarg   u64   2
    loadimm  u64   0 
    setarg   u64   1
    callf    i64   pci_support.docalldll 6 0
    unload   i64   
    loadref  u64   .sp 
    decrto   i64   1
    loadref  u64   .pc 
    incrto   i64   1
    jump           #1021 
#1022:
    load     i64   .pc 
    loadimm  i64   1 
    add      i64   
    store    i64   .x 
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 -8
    store    i64   .pc 
    load     i64   .x 
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
#1021:
    jump           #612 
#1023:
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 -8
    loadimm  i64   1000000 
    jumple   i64   #1025 
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   u64   8 -8
    store    u64   .pi64 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   24 
    iloadx   i32   1 0
    store    i64   .n 
    loadref  u64   .sp 
    load     i64   .n 
    loadimm  i64   1 
    sub      i64   
    subto    i64   
    setcall        6
    loadimm  i64   1 
    setarg   i64   6
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   28 
    iloadx   i32   1 0
    setarg   i64   5
    load     i64   .n 
    setarg   i64   4
    loadref  u64   .stack 
    load     i64   .sp 
    addptrx  i64   8 -8
    setarg   u64   3
    load     u64   .pi64 
    setarg   u64   2
    loadimm  u64   0 
    setarg   u64   1
    callf    i64   pci_support.docalldll 6 0
    store    i64   .x 
    load     i64   .x 
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #1024 
#1025:
    load     i64   .pc 
    loadimm  i64   1 
    add      i64   
    store    i64   .x 
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 -8
    store    i64   .pc 
    load     i64   .x 
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
#1024:
    jump           #612 
#1026:
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   24 
    iloadx   i32   1 0
    store    i64   .n 
    loadref  u64   .sp 
    load     i64   .n 
    loadimm  i64   1 
    sub      i64   
    subto    i64   
    setcall        6
    loadimm  i64   0 
    setarg   i64   6
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   28 
    iloadx   i32   1 0
    setarg   i64   5
    load     i64   .n 
    setarg   i64   4
    loadref  u64   .stack 
    load     i64   .sp 
    addptrx  i64   8 -8
    setarg   u64   3
    loadimm  u64   0 
    setarg   u64   2
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   16 
    iloadx   u64   1 0
    loadimm  i64   16 
    iloadx   u64   1 0
    setarg   u64   1
    callf    i64   pci_support.docalldll 6 0
    unload   i64   
    loadref  u64   .sp 
    decrto   i64   1
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#1027:
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   24 
    iloadx   i32   1 0
    store    i64   .n 
    loadref  u64   .sp 
    load     i64   .n 
    loadimm  i64   1 
    sub      i64   
    subto    i64   
    setcall        6
    loadimm  i64   1 
    setarg   i64   6
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   28 
    iloadx   i32   1 0
    setarg   i64   5
    load     i64   .n 
    setarg   i64   4
    loadref  u64   .stack 
    load     i64   .sp 
    addptrx  i64   8 -8
    setarg   u64   3
    loadimm  u64   0 
    setarg   u64   2
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   16 
    iloadx   u64   1 0
    loadimm  i64   16 
    iloadx   u64   1 0
    setarg   u64   1
    callf    i64   pci_support.docalldll 6 0
    store    i64   .x 
    load     i64   .x 
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#1028:
    loadref  u64   .stack 
    load     i64   .fp 
    iloadx   u64   8 -24
    store    u64   .pi64 
    setcall        3
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   4 
    iloadx   u32   1 0
    setarg   u64   3
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   u64   8 -8
    setarg   u64   2
    load     u64   .pi64 
    setarg   u64   1
    callp          memcpy 3 0
    load     u64   .pi64 
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  u64   8 -8
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#1029:
    loadimm  u64   0 
    jumpf    i64   #1031 
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    loadimm  i64   1457115631958533000 
    jumpeq   i64   #1033 
    setcall        3
    load     i64   .pc 
    setarg   i64   3
    loadimm  u64   ""
    setarg   u64   2
    loadimm  u64   "retp: stack error:"
    setarg   u64   1
    callp          pci_support.pcerror3 3 0
#1033:
#1032:
#1031:
#1030:
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   26 
    iloadx   u16   1 0
    store    i64   .n 
    loadref  u64   .sp 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   24 
    iloadx   u16   1 0
    subto    i64   
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    store    i64   .fp 
    load     i64   .fp 
    loadimm  i64   0 
    jumplt   i64   #1038 
    load     i64   .fp 
    loadimm  i64   69980 
    jumple   i64   #1037 
#1038:
    callp          msys.m$print_startcon 0 0
    loadimm  u64   "GETNLOCALS="
    callp          msys.m$print_str_nf 1 0
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   24 
    iloadx   u16   1 0
    callp          msys.m$print_i64_nf 1 0
    callp          msys.m$print_newline 0 0
    callp          msys.m$print_end 0 0
    setcall        3
    load     i64   .pc 
    setarg   i64   3
    setcall        2
    loadimm  u64   0 
    setarg   u64   2
    load     i64   .fp 
    setarg   i64   1
    callf    u64   msys.strint 2 0
    setarg   u64   2
    loadimm  u64   "RETP:INVALID FRAME PTR"
    setarg   u64   1
    callp          pci_support.pcerror3 3 0
#1037:
#1036:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    store    i64   .pc 
    loadref  u64   .sp 
    load     i64   .n 
    subto    i64   
    jump           #612 
#1041:
    loadimm  u64   0 
    jumpf    i64   #1043 
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 -16
    loadimm  i64   1457115631958533000 
    jumpeq   i64   #1045 
    setcall        3
    load     i64   .pc 
    setarg   i64   3
    loadimm  u64   ""
    setarg   u64   2
    loadimm  u64   "retf: stack error:"
    setarg   u64   1
    callp          pci_support.pcerror3 3 0
#1045:
#1044:
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 -8
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -16
    loadref  u64   .sp 
    decrto   i64   1
#1043:
#1042:
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 -8
    store    i64   .x 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   26 
    iloadx   u16   1 0
    store    i64   .n 
    loadref  u64   .sp 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   24 
    iloadx   u16   1 0
    subto    i64   
    loadref  u64   .stack 
    loadref  u64   .sp 
    decrload i64   1
    iloadx   i64   8 -8
    store    i64   .fp 
    loadref  u64   .stack 
    loadref  u64   .sp 
    decrload i64   1
    iloadx   i64   8 -8
    store    i64   .pc 
    loadref  u64   .sp 
    load     i64   .n 
    subto    i64   
    load     i64   .x 
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    jump           #612 
#1048:
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   28 
    iloadx   u16   1 0
    store    i64   .a 
    load     i64   .sp 
    load     i64   .a 
    sub      i64   
    loadimm  i64   1 
    add      i64   
    store    i64   .spr 
    loadref  u64   .sp 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   24 
    iloadx   u16   1 0
    load     i64   .a 
    add      i64   
    subto    i64   
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   26 
    iloadx   u16   1 0
    store    i64   .n 
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    store    i64   .fp 
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    store    i64   .pc 
    loadref  u64   .sp 
    load     i64   .n 
    subto    i64   
    loadimm  i64   1 
    store    i64   .i 
    load     i64   .a 
    loadimm  i64   1 
    jumplt   i64   #1051 
#1049:
    loadref  u64   .stack 
    load     i64   .spr 
    load     i64   .i 
    add      i64   
    iloadx   i64   8 -16
    loadref  u64   .stack 
    loadref  u64   .sp 
    incrload i64   1
    istorex  i64   8 -8
#1050:
    forup          #1049 1
    opnd           .i 
    opnd           .a 
#1051:
    jump           #612 
#1052:
    loadref  u64   pci_decls.labeltable 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   16 
    iloadx   i64   1 0
    iloadx   i32   4 -4
    store    i64   .pc 
    jump           #612 
#1053:
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    store    i64   .pc 
    jump           #612 
#1054:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#1055:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#1056:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#1057:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#1058:
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 -8
    setret   i64   
    jump           #611 
    jump           #613 
    jump           #612 
#1059:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#1060:
    callp          msys.m$print_startcon 0 0
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    callp          msys.m$print_i64_nf 1 0
    callp          msys.m$print_newline 0 0
    callp          msys.m$print_end 0 0
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#1061:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#1062:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#1063:
    callp          msys.m$print_startcon 0 0
    loadimm  i64   0 
    setcall        1
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   i64   8 -8
    setarg   i64   1
    callf    r32   pci_exec.getr32 1 0
    callp          msys.m$print_r32 2 0
    callp          msys.m$print_newline 0 0
    callp          msys.m$print_end 0 0
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#1064:
    callp          msys.m$print_startcon 0 0
    loadref  u64   .stack 
    loadref  u64   .sp 
    loaddecr i64   1
    iloadx   u64   8 -8
    callp          msys.m$print_str_nf 1 0
    callp          msys.m$print_newline 0 0
    callp          msys.m$print_end 0 0
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#1065:
    callp          msys.m$print_startcon 0 0
    loadimm  u64   "h"
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 -8
    callp          msys.m$print_i64 2 0
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 -8
    callp          msys.m$print_i64_nf 1 0
    callp          msys.m$print_newline 0 0
    callp          msys.m$print_end 0 0
    loadref  u64   .sp 
    decrto   i64   1
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#1067:
    callp          msys.m$print_startcon 0 0
    loadimm  u64   "SP="
    callp          msys.m$print_str_nf 1 0
    load     i64   .sp 
    callp          msys.m$print_i64_nf 1 0
    callp          msys.m$print_newline 0 0
    callp          msys.m$print_end 0 0
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#1069:
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#1070:
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#1071:
    loadref  u64   .sp 
    incrto   i64   1
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#1072:
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -64
    loadimm  i64   8 
    iloadx   u16   1 0
    loadimm  i64   383 
    jumpeq   i64   #1074 1
    loadimm  i64   384 
    jumpeq   i64   #1074 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   24 
    iloadx   i32   1 0
    loadimm  i64   0 
    jumpeq   i64   #1076 1
    loadimm  i64   1 
    jumpeq   i64   #1077 
    jump           #1078 
#1076:
    loadref  u64   .sp 
    decrto   i64   1
    jump           #1075 
#1077:
    loadref  u64   .sp 
    decrto   i64   1
    loadref  u64   .stack 
    load     i64   .sp 
    iloadx   i64   8 0
    loadref  u64   .stack 
    load     i64   .sp 
    istorex  i64   8 -8
    jump           #1075 
#1078:
    setcall        1
    loadimm  u64   "stackadj/mult"
    setarg   u64   1
    callf    i64   pci_support.serror 1 0
    unload   i64   
#1075:
#1074:
#1073:
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#1080:
    jump           #618 
    unload   u64   
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#1081:
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   24 
    iloadx   i32   1 0
    loadimm  i64   0 
    jumpeq   i64   #1083 1
    loadimm  i64   1 
    jumpeq   i64   #1083 1
    loadimm  i64   2 
    jumpeq   i64   #1084 
    jump           #1085 
#1083:
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   24 
    iloadx   i32   1 0
    store    u8    pci_exec.debug 
    callp          msys.m$print_startcon 0 0
    loadimm  u64   "Debug set to"
    callp          msys.m$print_str_nf 1 0
    load     u8    pci_exec.debug 
    callp          msys.m$print_i64_nf 1 0
    callp          msys.m$print_newline 0 0
    callp          msys.m$print_end 0 0
    jump           #1082 
#1084:
    callp          msys.m$print_startcon 0 0
    loadimm  u64   "SP="
    callp          msys.m$print_str_nf 1 0
    load     i64   .sp 
    callp          msys.m$print_i64_nf 1 0
    callp          msys.m$print_newline 0 0
    callp          msys.m$print_end 0 0
    jump           #1082 
#1085:
#1082:
    loadref  u64   .pc 
    incrto   i64   1
    jump           #612 
#615:
;unimpl::
#618:
    callp          msys.m$print_startcon 0 0
    callp          msys.m$print_newline 0 0
    callp          msys.m$print_end 0 0
    callp          msys.m$print_startcon 0 0
    loadimm  u64   "Unimpl: # (#) on line: #"
    callp          msys.m$print_setfmt 1 0
    loadref  u64   pci_tables.jcodenames 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    loadimm  i64   8 
    iloadx   u16   1 0
    iloadx   u64   8 0
    callp          msys.m$print_str_nf 1 0
    loadref  u64   pci_tables.pclnames 
    load     u64   pci_decls.pcltable 
    load     i64   .pc 
    addptrx  mem 32 32 -32
    iload    u8    
    iloadx   u64   8 -8
    callp          msys.m$print_str_nf 1 0
    load     u64   pci_decls.pcllines 
    load     i64   .pc 
    iloadx   i32   4 -4
    callp          msys.m$print_i64_nf 1 0
    callp          msys.m$print_newline 0 0
    callp          msys.m$print_end 0 0
    callp          msys.m$print_startcon 0 0
    callp          msys.m$print_newline 0 0
    callp          msys.m$print_end 0 0
    loadimm  i64   1 
    stop           
    jump           #612 
#613:
    loadimm  i64   0 
    setret   i64   
    jump           #611 
;------------------------
#611:
    return         
end

proc pci_exec.runpcl
    local    i64   .tt 
    local    i64   .stopcode 
;------------------------
    setcall        0
    callf    i32   clock 0 0
    widen    i32   
    store    i64   .tt 
    load     i64   pci_parse.pcmain 
    loadimm  i64   0 
    jumpne   i64   #1091 
    setcall        3
    loadimm  i64   0 
    setarg   i64   3
    loadimm  u64   ""
    setarg   u64   2
    loadimm  u64   "'main' not present"
    setarg   u64   1
    callp          pci_support.pcerror3 3 0
#1091:
#1090:
    load     i64   pci_parse.undefflag 
    jumpf    i64   #1095 
    setcall        3
    loadimm  i64   0 
    setarg   i64   3
    loadimm  u64   ""
    setarg   u64   2
    loadimm  u64   "Some names/labels undefined"
    setarg   u64   1
    callp          pci_support.pcerror3 3 0
#1095:
#1094:
    setcall        0
    callp          pci_support.updatedatarefs 0 0
    setcall        0
    callp          pci_support.loadlibs 0 0
    setcall        0
    callp          pci_support.docmdskip 0 0
    setcall        2
    loadimm  i64   0 
    setarg   i64   2
    load     i64   pci_parse.pcmain 
    setarg   i64   1
    callf    i64   pci_exec.exec 2 0
    store    i64   .stopcode 
    setcall        0
    callf    i32   clock 0 0
    widen    i32   
    load     i64   .tt 
    sub      i64   
    store    i64   .tt 
;------------------------
#1089:
    return         
end

proc pci_exec.getr32
    rettype  r32   
    param    i64   .a 
    local    u32   .b 
;------------------------
    load     i64   .a 
    store    u32   .b 
    load     r32   .b 
    setret   r32   
    jump           #1098 
;------------------------
#1098:
    return         
end

proc pci_exec.putr32
    rettype  i64   
    param    r32   .x 
    local    u32   .a 
;------------------------
    load     r32   .x 
    typepun  i64 r32 
    store    u32   .a 
    load     u32   .a 
    setret   i64   
    jump           #1099 
;------------------------
#1099:
    return         
end

proc pci_fixup.fixuppcl
    local    i64   .pcindex 
;------------------------
    loadimm  u64   0 
    store    u64   pci_fixup.stproc 
    loadimm  i64   1 
    store    i64   .pcindex 
    load     i64   pci_decls.npcl 
    loadimm  i64   1 
    jumplt   i64   #1103 
#1101:
    setcall        1
    load     i64   .pcindex 
    setarg   i64   1
    callp          pci_fixup.convertpcl 1 0
#1102:
    forup          #1101 1
    opnd           .pcindex 
    opnd           pci_decls.npcl 
#1103:
    load     i64   pci_parse.pcmain 
    jumpf    i64   #1105 
    setcall        2
    loadimm  i64   379 
    setarg   i64   2
    loadimm  i64   34 
    setarg   i64   1
    callp          pci_fixup.addpclop 2 0
    load     i64   pci_decls.npcl 
    store    i64   pci_parse.pcmain 
    load     u64   pci_parse.stmain 
    load     u64   pci_decls.pcltable 
    load     i64   pci_decls.npcl 
    addptrx  mem 32 32 -32
    loadimm  i64   16 
    istorex  u64   1 0
    loadimm  i64   2 
    load     u64   pci_decls.pcltable 
    load     i64   pci_decls.npcl 
    addptrx  mem 32 32 -32
    loadimm  i64   3 
    istorex  u8    1 0
    setcall        2
    loadimm  i64   35 
    setarg   i64   2
    loadimm  i64   19 
    setarg   i64   1
    callp          pci_fixup.addpclop 2 0
    setcall        2
    loadimm  i64   395 
    setarg   i64   2
    loadimm  i64   42 
    setarg   i64   1
    callp          pci_fixup.addpclop 2 0
#1105:
#1104:
;------------------------
#1100:
    return         
end

proc pci_fixup.addpclop
    param    i64   .k 
    param    i64   .j 
;------------------------
    loadref  u64   pci_decls.npcl 
    incrto   i64   1
    load     i64   .k 
    load     u64   pci_decls.pcltable 
    load     i64   pci_decls.npcl 
    addptrx  mem 32 32 -32
    loadimm  i64   0 
    istorex  u8    1 0
    load     i64   .j 
    load     u64   pci_decls.pcltable 
    load     i64   pci_decls.npcl 
    addptrx  mem 32 32 -32
    loadimm  i64   8 
    istorex  u16   1 0
;------------------------
#1106:
    return         
end

proc pci_fixup.convertpcl
    param    i64   .index 
    local    u64   .p 
    local    u64   .q 
    local    u64   .r 
    local    i64   .opcode 
    local    i64   .jcode 
    local    i64   .offset 
    local    u64   .d 
;------------------------
    load     u64   pci_decls.pcltable 
    load     i64   .index 
    addptrx  mem 32 32 -32
    store    u64   .p 
    load     u64   .p 
    iload    u8    
    store    i64   .opcode 
    loadref  u64   pci_tables.pcljcode 
    load     i64   .opcode 
    iloadx   u16   2 -2
    store    i64   .jcode 
    load     i64   .jcode 
    loadimm  i64   0 
    jumpne   i64   #1109 
    setcall        1
    load     u64   .p 
    setarg   u64   1
    callf    i64   pci_fixup.findjcode 1 0
    store    i64   .jcode 
    load     i64   .jcode 
    loadimm  i64   0 
    jumpne   i64   #1111 
    loadimm  i64   0 
    store    i64   .jcode 
#1111:
#1110:
#1109:
#1108:
    load     u64   .p 
    loadimm  i64   3 
    iloadx   u8    1 0
    loadimm  i64   2 
    jumpne   i64   #1113 
    load     u64   .p 
    loadimm  i64   16 
    iloadx   u64   1 0
    loadimm  i64   12 
    iloadx   u8    1 0
    loadimm  i64   3 
    jumpeq   i64   #1114 1
    loadimm  i64   4 
    jumpne   i64   #1113 
#1114:
    load     i64   .opcode 
    loadimm  i64   17 
    jumpeq   i64   #1116 1
    loadimm  i64   20 
    jumpeq   i64   #1117 1
    loadimm  i64   18 
    jumpeq   i64   #1118 
    jump           #1119 
#1116:
    loadimm  i64   11 
    load     i64   .jcode 
    loadimm  i64   1 
    sub      i64   
    add      i64   
    store    i64   .jcode 
    jump           #1115 
#1117:
    loadimm  i64   28 
    load     i64   .jcode 
    loadimm  i64   21 
    sub      i64   
    add      i64   
    store    i64   .jcode 
    jump           #1115 
#1118:
    loadimm  i64   40 
    store    i64   .jcode 
    jump           #1115 
#1119:
#1115:
    jump           #1112 
#1113:
    load     i64   .opcode 
    loadimm  i64   1 
    jumpeq   i64   #1121 1
    loadimm  i64   139 
    jumpeq   i64   #1122 1
    loadimm  i64   53 
    jumpeq   i64   #1123 1
    loadimm  i64   54 
    jumpeq   i64   #1123 1
    loadimm  i64   55 
    jumpeq   i64   #1124 1
    loadimm  i64   18 
    jumpeq   i64   #1125 1
    loadimm  i64   41 
    jumpeq   i64   #1126 1
    loadimm  i64   34 
    jumpeq   i64   #1127 1
    loadimm  i64   35 
    jumpeq   i64   #1128 1
    loadimm  i64   133 
    jumpeq   i64   #1129 1
    loadimm  i64   132 
    jumpeq   i64   #1130 1
    loadimm  i64   40 
    jumpeq   i64   #1131 1
    loadimm  i64   134 
    jumpeq   i64   #1132 
    jump           #1133 
#1121:
    load     u64   .p 
    loadimm  i64   16 
    iloadx   u64   1 0
    store    u64   pci_fixup.stproc 
    jump           #1120 
#1122:
    jump           #1120 
#1123:
    load     u64   pci_decls.pcltable 
    load     i64   .index 
    addptrx  mem 32 32 0
    store    u64   .q 
    load     u64   pci_decls.pcltable 
    load     i64   .index 
    addptrx  mem 32 32 32
    store    u64   .r 
    loadimm  i64   0 
    store    i64   .offset 
    load     u64   .q 
    loadimm  i64   16 
    iloadx   u64   1 0
    loadimm  i64   12 
    iloadx   u8    1 0
    loadimm  i64   2 
    jumpne   i64   #1135 
    load     u64   .r 
    loadimm  i64   3 
    iloadx   u8    1 0
    loadimm  i64   4 
    jumpne   i64   #1137 
    loadimm  i64   4 
    store    i64   .offset 
    jump           #1136 
#1137:
    load     u64   .r 
    loadimm  i64   16 
    iloadx   u64   1 0
    loadimm  i64   12 
    iloadx   u8    1 0
    loadimm  i64   2 
    jumpne   i64   #1138 
    jump           #1136 
#1138:
    loadimm  i64   1 
    store    i64   .offset 
#1136:
    jump           #1134 
#1135:
    load     u64   .r 
    loadimm  i64   3 
    iloadx   u8    1 0
    loadimm  i64   4 
    jumpne   i64   #1140 
    loadimm  i64   5 
    store    i64   .offset 
    jump           #1139 
#1140:
    load     u64   .r 
    loadimm  i64   16 
    iloadx   u64   1 0
    loadimm  i64   12 
    iloadx   u8    1 0
    loadimm  i64   2 
    jumpne   i64   #1141 
    loadimm  i64   2 
    store    i64   .offset 
    jump           #1139 
#1141:
    loadimm  i64   3 
    store    i64   .offset 
#1139:
#1134:
    loadref  u64   .jcode 
    load     i64   .offset 
    addto    i64   
    jump           #1120 
#1124:
    load     u64   pci_decls.pcltable 
    load     i64   .index 
    addptrx  mem 32 32 0
    store    u64   .q 
    load     u64   .q 
    loadimm  i64   16 
    iloadx   u64   1 0
    loadimm  i64   12 
    iloadx   u8    1 0
    loadimm  i64   2 
    jumpeq   i64   #1143 
    loadref  u64   .jcode 
    incrto   i64   1
#1143:
#1142:
    jump           #1120 
#1125:
    load     u64   .p 
    loadimm  i64   3 
    iloadx   u8    1 0
    loadimm  i64   3 
    jumpeq   i64   #1145 1
    loadimm  i64   2 
    jumpeq   i64   #1146 
    jump           #1147 
#1145:
    loadimm  i64   41 
    store    i64   .jcode 
    jump           #1144 
#1146:
    load     u64   .p 
    loadimm  i64   16 
    iloadx   u64   1 0
    loadimm  i64   12 
    iloadx   u8    1 0
    loadimm  i64   1 
    jumpeq   i64   #1149 1
    loadimm  i64   5 
    jumpeq   i64   #1150 
    jump           #1151 
#1149:
    loadimm  i64   42 
    store    i64   .jcode 
    jump           #1148 
#1150:
    loadimm  i64   43 
    store    i64   .jcode 
    jump           #1148 
#1151:
#1148:
    jump           #1144 
#1147:
#1144:
    jump           #1120 
#1126:
    load     u64   .p 
    loadimm  i64   28 
    iloadx   u16   1 0
    loadimm  i64   0 
    jumpeq   i64   #1153 1
    loadimm  i64   1 
    jumpeq   i64   #1154 
    jump           #1155 
#1153:
    jump           #1152 
#1154:
    loadimm  i64   387 
    store    i64   .jcode 
    jump           #1152 
#1155:
    loadimm  i64   388 
    store    i64   .jcode 
#1152:
    jump           #1120 
#1127:
    load     u64   .p 
    loadimm  i64   16 
    iloadx   u64   1 0
    loadimm  i64   11 
    iloadx   u8    1 0
    loadimm  i64   0 
    loadbit        
    jumpf    u64   #1157 
    loadimm  i64   383 
    store    i64   .jcode 
#1157:
#1156:
    jump           #1120 
#1128:
    load     u64   .p 
    loadimm  i64   16 
    iloadx   u64   1 0
    loadimm  i64   11 
    iloadx   u8    1 0
    loadimm  i64   0 
    loadbit        
    jumpf    u64   #1159 
    loadimm  i64   384 
    store    i64   .jcode 
#1159:
#1158:
    jump           #1120 
#1129:
    load     u64   .p 
    loadimm  i64   1 
    iloadx   u8    1 0
    loadimm  i64   1 
    jumpne   i64   #1161 
    startmx        
    load     u64   .p 
    loadimm  i64   2 
    iloadx   u8    1 0
    loadimm  i64   3 
    jumpne   i64   #1163 
    loadimm  i64   322 
    resetmx        
    jump           #1162 
#1163:
    loadimm  i64   324 
    endmx          
#1162:
    store    i64   .jcode 
    jump           #1160 
#1161:
    startmx        
    load     u64   .p 
    loadimm  i64   2 
    iloadx   u8    1 0
    loadimm  i64   3 
    jumpne   i64   #1165 
    loadimm  i64   323 
    resetmx        
    jump           #1164 
#1165:
    loadimm  i64   325 
    endmx          
#1164:
    store    i64   .jcode 
#1160:
    jump           #1120 
#1130:
    load     u64   .p 
    loadimm  i64   1 
    iloadx   u8    1 0
    loadimm  i64   3 
    jumpne   i64   #1167 
    startmx        
    load     u64   .p 
    loadimm  i64   2 
    iloadx   u8    1 0
    loadimm  i64   1 
    jumpne   i64   #1169 
    loadimm  i64   318 
    resetmx        
    jump           #1168 
#1169:
    loadimm  i64   319 
    endmx          
#1168:
    store    i64   .jcode 
    jump           #1166 
#1167:
    startmx        
    load     u64   .p 
    loadimm  i64   2 
    iloadx   u8    1 0
    loadimm  i64   1 
    jumpne   i64   #1171 
    loadimm  i64   320 
    resetmx        
    jump           #1170 
#1171:
    loadimm  i64   321 
    endmx          
#1170:
    store    i64   .jcode 
#1166:
    jump           #1120 
#1131:
    load     u64   .p 
    loadimm  i64   1 
    iloadx   u8    1 0
    loadimm  i64   5 
    jumpeq   i64   #1173 
    jump           #1107 
#1173:
#1172:
    jump           #1120 
#1132:
    load     u64   .p 
    loadimm  i64   2 
    iloadx   u8    1 0
    loadimm  i64   6 
    jumpeq   i64   #1175 1
    loadimm  i64   7 
    jumpeq   i64   #1176 1
    loadimm  i64   8 
    jumpeq   i64   #1177 1
    loadimm  i64   9 
    jumpeq   i64   #1178 1
    loadimm  i64   10 
    jumpeq   i64   #1179 
    jump           #1180 
#1175:
    loadimm  i64   328 
    store    i64   .jcode 
    jump           #1174 
#1176:
    loadimm  i64   329 
    store    i64   .jcode 
    jump           #1174 
#1177:
    loadimm  i64   330 
    store    i64   .jcode 
    jump           #1174 
#1178:
    loadimm  i64   331 
    store    i64   .jcode 
    jump           #1174 
#1179:
    loadimm  i64   332 
    store    i64   .jcode 
    jump           #1174 
#1180:
    loadimm  i64   333 
    store    i64   .jcode 
#1174:
    jump           #1120 
#1133:
#1120:
#1112:
    load     i64   .jcode 
    load     u64   pci_decls.pcltable 
    load     i64   .index 
    addptrx  mem 32 32 -32
    loadimm  i64   8 
    istorex  u16   1 0
;------------------------
#1107:
    return         
end

proc pci_fixup.findjcode
    rettype  i64   
    param    u64   .p 
    local    i64   .$av_1 
    local    i64   .i 
;------------------------
    loadimm  i64   1 
    store    i64   .i 
#1182:
    loadref  u64   pci_tables.pcllist 
    load     i64   .i 
    iloadx   u8    1 -1
    load     u64   .p 
    iload    u8    
    jumpne   i64   #1187 
    loadref  u64   pci_tables.jcodemodelist 
    load     i64   .i 
    addptrx  mem 24 24 -24
    load     u64   .p 
    loadimm  i64   1 
    iloadx   u8    1 0
    iloadx   u16   2 0
    setret   i64   
    jump           #1181 
#1187:
#1186:
#1183:
    forup          #1182 1
    opnd           .i 
    opnd           56 
#1185:
#1184:
    loadimm  i64   0 
    setret   i64   
    jump           #1181 
;------------------------
#1181:
    return         
end

proc pci_lex.startlex
    param    i64   .lineno 
;------------------------
    load     u64   pci_decls.sourcelines 
    load     i64   .lineno 
    iloadx   u64   8 -8
    store    u64   pci_lex.lxsptr 
    load     i64   .lineno 
    loadref  u64   pci_decls.lx 
    loadimm  i64   40 
    istorex  i64   1 0
;------------------------
#1188:
    return         
end

proc pci_lex.startlextest
    param    u64   .s 
;------------------------
    load     u64   .s 
    store    u64   pci_lex.lxsptr 
    loadimm  i64   1 
    loadref  u64   pci_decls.lx 
    loadimm  i64   40 
    istorex  i64   1 0
;------------------------
#1189:
    return         
end

proc pci_lex.lex
    local    mem 256 .str 
    local    i64   .c 
    local    i64   .hsum 
    local    i64   .hashindex 
    local    i64   .length 
    local    u64   .ss 
;------------------------
    loadimm  i64   0 
    loadref  u64   pci_decls.lx 
    loadimm  i64   8 
    istorex  i64   1 0
#1191:
    load     u64   pci_lex.lxsptr 
    store    u64   pci_lex.lxstart 
    loadref  u64   pci_lex.lxsptr 
    loadincr u64   1
    iload    u8    
    switch         #1193 0 122
    opnd           #1194 
#1193:
    swlabel        #1208 
    swlabel        #1194 
    swlabel        #1194 
    swlabel        #1194 
    swlabel        #1194 
    swlabel        #1194 
    swlabel        #1194 
    swlabel        #1194 
    swlabel        #1194 
    swlabel        #1215 
    swlabel        #1194 
    swlabel        #1194 
    swlabel        #1194 
    swlabel        #1194 
    swlabel        #1194 
    swlabel        #1194 
    swlabel        #1194 
    swlabel        #1194 
    swlabel        #1194 
    swlabel        #1194 
    swlabel        #1194 
    swlabel        #1194 
    swlabel        #1194 
    swlabel        #1194 
    swlabel        #1194 
    swlabel        #1194 
    swlabel        #1194 
    swlabel        #1194 
    swlabel        #1194 
    swlabel        #1194 
    swlabel        #1194 
    swlabel        #1194 
    swlabel        #1215 
    swlabel        #1208 
    swlabel        #1217 
    swlabel        #1209 
    swlabel        #1195 
    swlabel        #1194 
    swlabel        #1194 
    swlabel        #1218 
    swlabel        #1194 
    swlabel        #1194 
    swlabel        #1214 
    swlabel        #1194 
    swlabel        #1194 
    swlabel        #1205 
    swlabel        #1195 
    swlabel        #1194 
    swlabel        #1201 
    swlabel        #1201 
    swlabel        #1201 
    swlabel        #1201 
    swlabel        #1201 
    swlabel        #1201 
    swlabel        #1201 
    swlabel        #1201 
    swlabel        #1201 
    swlabel        #1201 
    swlabel        #1216 
    swlabel        #1208 
    swlabel        #1194 
    swlabel        #1194 
    swlabel        #1194 
    swlabel        #1194 
    swlabel        #1194 
    swlabel        #1195 
    swlabel        #1195 
    swlabel        #1195 
    swlabel        #1195 
    swlabel        #1195 
    swlabel        #1195 
    swlabel        #1195 
    swlabel        #1195 
    swlabel        #1195 
    swlabel        #1195 
    swlabel        #1195 
    swlabel        #1195 
    swlabel        #1195 
    swlabel        #1195 
    swlabel        #1195 
    swlabel        #1195 
    swlabel        #1195 
    swlabel        #1195 
    swlabel        #1195 
    swlabel        #1195 
    swlabel        #1195 
    swlabel        #1195 
    swlabel        #1195 
    swlabel        #1195 
    swlabel        #1195 
    swlabel        #1195 
    swlabel        #1194 
    swlabel        #1194 
    swlabel        #1194 
    swlabel        #1194 
    swlabel        #1195 
    swlabel        #1194 
    swlabel        #1195 
    swlabel        #1195 
    swlabel        #1195 
    swlabel        #1195 
    swlabel        #1195 
    swlabel        #1195 
    swlabel        #1195 
    swlabel        #1195 
    swlabel        #1195 
    swlabel        #1195 
    swlabel        #1195 
    swlabel        #1195 
    swlabel        #1195 
    swlabel        #1195 
    swlabel        #1195 
    swlabel        #1195 
    swlabel        #1195 
    swlabel        #1195 
    swlabel        #1195 
    swlabel        #1195 
    swlabel        #1195 
    swlabel        #1195 
    swlabel        #1195 
    swlabel        #1195 
    swlabel        #1195 
    swlabel        #1195 
    endsw          
#1195:
    load     u64   pci_lex.lxsptr 
    loadimm  i64   1 
    subptrx  u64   1 0
    store    u64   .ss 
    load     u64   .ss 
    iload    u8    
    store    i64   .hsum 
    jump           #1197 
#1196:
    load     i64   .hsum 
    loadimm  i64   4 
    shl      i64   
    load     i64   .hsum 
    sub      i64   
    load     i64   .c 
    add      i64   
    store    i64   .hsum 
#1197:
    loadref  u64   pci_lex.alphamap 
    loadref  u64   pci_lex.lxsptr 
    loadincr u64   1
    iload    u8    
    double         
    store    i64   .c 
    iloadx   u8    1 0
    jumpt    u64   #1196 
#1198:
    loadref  u64   pci_lex.lxsptr 
    decrto   u64   1
    loadimm  i64   2 
    loadref  u64   pci_decls.lx 
    loadimm  i64   0 
    istorex  i64   1 0
    loadimm  i64   0 
    double         
    loadref  u64   pci_decls.lx 
    loadimm  i64   56 
    istorex  i64   1 0
    loadref  u64   pci_decls.lx 
    loadimm  i64   48 
    istorex  i64   1 0
    load     u64   pci_lex.lxsptr 
    load     u64   .ss 
    subptr   u64   1
    store    i64   .length 
    load     u64   .ss 
    iload    u8    
    loadimm  u64   46 
    jumpne   u64   #1200 
    load     u64   pci_parse.stproc 
    jumpf    u64   #1200 
    setcall        2
    load     u64   pci_parse.stproc 
    iload    u64   
    setarg   u64   2
    loadref  u64   .str 
    setarg   u64   1
    callf    u64   strcpy 2 0
    unload   u64   
    setcall        3
    load     i64   .length 
    setarg   u64   3
    load     u64   .ss 
    setarg   u64   2
    loadref  u64   .str 
    load     u64   pci_parse.stproc 
    loadimm  i64   8 
    iloadx   u8    1 0
    addptrx  u64   1 0
    setarg   u64   1
    callp          memcpy 3 0
    loadref  u64   .length 
    load     u64   pci_parse.stproc 
    loadimm  i64   8 
    iloadx   u8    1 0
    addto    i64   
    loadimm  u64   0 
    loadref  u64   .str 
    load     i64   .length 
    istorex  u8    1 0
    setcall        3
    setcall        1
    loadref  u64   .str 
    setarg   u64   1
    callf    i64   pci_lex.gethashvaluez 1 0
    setarg   i64   3
    load     i64   .length 
    setarg   i64   2
    loadref  u64   .str 
    setarg   u64   1
    callf    i64   pci_lex.lookup 3 0
    unload   i64   
    jump           #1199 
#1200:
    setcall        3
    load     i64   .hsum 
    loadimm  i64   5 
    shl      i64   
    load     i64   .hsum 
    sub      i64   
    setarg   i64   3
    load     i64   .length 
    setarg   i64   2
    load     u64   .ss 
    setarg   u64   1
    callf    i64   pci_lex.lookup 3 0
    unload   i64   
#1199:
    jump           #1190 
    jump           #1191 
#1201:
    load     u64   pci_lex.lxstart 
    iload    u8    
    loadimm  u64   48 
    jumpne   u64   #1203 
    load     u64   pci_lex.lxsptr 
    iload    u8    
    loadimm  u64   120 
    jumpeq   u64   #1204 1
    loadimm  u64   88 
    jumpne   u64   #1203 
#1204:
    loadref  u64   pci_lex.lxsptr 
    incrto   u64   1
    setcall        0
    callp          pci_lex.readhex 0 0
    jump           #1202 
#1203:
    loadref  u64   pci_lex.lxsptr 
    decrto   u64   1
    setcall        1
    loadimm  i64   0 
    setarg   i64   1
    callp          pci_lex.readdec 1 0
#1202:
    jump           #1190 
    jump           #1191 
#1205:
    load     u64   pci_lex.lxsptr 
    iload    u8    
    loadimm  u64   45 
    jumpne   u64   #1207 
    loadref  u64   pci_lex.lxsptr 
    incrto   u64   1
    loadimm  i64   2 
    loadref  u64   pci_decls.lx 
    loadimm  i64   0 
    istorex  i64   1 0
    load     u64   pci_decls.stvoid 
    loadref  u64   pci_decls.lx 
    loadimm  i64   32 
    istorex  u64   1 0
    loadimm  i64   12 
    loadref  u64   pci_decls.lx 
    loadimm  i64   56 
    istorex  i64   1 0
    jump           #1206 
#1207:
    setcall        1
    loadimm  i64   1 
    setarg   i64   1
    callp          pci_lex.readdec 1 0
#1206:
    jump           #1190 
    jump           #1191 
#1208:
    loadimm  i64   12 
    loadref  u64   pci_decls.lx 
    loadimm  i64   0 
    istorex  i64   1 0
    loadref  u64   pci_lex.lxsptr 
    decrto   u64   1
    jump           #1190 
    jump           #1191 
#1209:
    load     u64   pci_lex.lxsptr 
    iload    u8    
    loadimm  i64   48 
    jumplt   u64   #1212 1
    loadimm  i64   57 
    jumple   u64   #1211 
#1212:
    setcall        1
    loadimm  u64   "Label?"
    setarg   u64   1
    callp          pci_lex.lxerror 1 0
#1211:
#1210:
    setcall        1
    loadimm  i64   0 
    setarg   i64   1
    callp          pci_lex.readdec 1 0
    loadimm  i64   3 
    loadref  u64   pci_decls.lx 
    loadimm  i64   0 
    istorex  i64   1 0
    jump           #1190 
    jump           #1191 
#1214:
    loadimm  i64   8 
    loadref  u64   pci_decls.lx 
    loadimm  i64   0 
    istorex  i64   1 0
    jump           #1190 
    jump           #1191 
#1215:
    jump           #1191 
#1216:
    loadimm  i64   9 
    loadref  u64   pci_decls.lx 
    loadimm  i64   0 
    istorex  i64   1 0
    jump           #1190 
    jump           #1191 
#1217:
    setcall        1
    loadimm  i64   34 
    setarg   i64   1
    callp          pci_lex.readstring 1 0
    jump           #1190 
    jump           #1191 
#1218:
    setcall        1
    loadimm  i64   39 
    setarg   i64   1
    callp          pci_lex.readstring 1 0
    jump           #1190 
    jump           #1191 
#1194:
    loadimm  i64   1 
    loadref  u64   pci_decls.lx 
    loadimm  i64   0 
    istorex  i64   1 0
    jump           #1190 
    jump           #1191 
#1192:
;------------------------
#1190:
    return         
end

proc pci_lex.start
    local    i64   .i 
;------------------------
    loadimm  i64   0 
    store    i64   .i 
#1220:
    load     i64   .i 
    loadimm  i64   65 
    jumplt   i64   #1226 1
    loadimm  i64   90 
    jumple   i64   #1225 
#1226:
    load     i64   .i 
    loadimm  i64   97 
    jumplt   i64   #1227 1
    loadimm  i64   122 
    jumple   i64   #1225 
#1227:
    load     i64   .i 
    loadimm  i64   48 
    jumplt   i64   #1228 1
    loadimm  i64   57 
    jumple   i64   #1225 
#1228:
    load     i64   .i 
    loadimm  u64   36 
    jumpeq   i64   #1225 1
    loadimm  u64   95 
    jumpeq   i64   #1225 1
    loadimm  u64   46 
    jumpeq   i64   #1225 
    load     i64   .i 
    loadimm  i64   128 
    jumplt   i64   #1224 
#1225:
    loadimm  u64   1 
    loadref  u64   pci_lex.alphamap 
    load     i64   .i 
    istorex  u8    1 0
#1224:
#1223:
#1221:
    forup          #1220 1
    opnd           .i 
    opnd           255 
#1222:
    setcall        0
    callp          pci_lex.inithashtable 0 0
;------------------------
#1219:
    return         
end

;
proc pci_lex.lxerror
    param    u64   .mess 
;------------------------
    callp          msys.m$print_startcon 0 0
    loadimm  u64   "LEX error:"
    callp          msys.m$print_str_nf 1 0
    load     u64   .mess 
    callp          msys.m$print_str_nf 1 0
    loadimm  u64   "on line:"
    callp          msys.m$print_str_nf 1 0
    loadref  u64   pci_decls.lx 
    loadimm  i64   40 
    iloadx   i64   1 0
    callp          msys.m$print_i64_nf 1 0
    callp          msys.m$print_newline 0 0
    callp          msys.m$print_end 0 0
    loadimm  i64   1 
    stop           
;------------------------
#1229:
    return         
end

proc pci_lex.printlx
;------------------------
    callp          msys.m$print_startcon 0 0
    loadref  u64   pci_decls.lx 
    loadimm  i64   40 
    iloadx   i64   1 0
    callp          msys.m$print_i64_nf 1 0
    callp          msys.m$print_nogap 0 0
    loadimm  u64   ":"
    callp          msys.m$print_str_nf 1 0
    loadref  u64   pci_tables.symbolnames 
    loadref  u64   pci_decls.lx 
    iload    i64   
    iloadx   u64   8 -8
    callp          msys.m$print_str_nf 1 0
    callp          msys.m$print_space 0 0
    callp          msys.m$print_end 0 0
    loadref  u64   pci_decls.lx 
    iload    i64   
    loadimm  i64   2 
    jumpeq   i64   #1235 1
    loadimm  i64   4 
    jumpeq   i64   #1236 1
    loadimm  i64   5 
    jumpeq   i64   #1237 1
    loadimm  i64   6 
    jumpeq   i64   #1238 1
    loadimm  i64   7 
    jumpeq   i64   #1239 1
    loadimm  i64   3 
    jumpeq   i64   #1240 
    jump           #1241 
#1235:
    loadref  u64   pci_decls.lx 
    loadimm  i64   48 
    iloadx   i64   1 0
    jumpf    i64   #1243 
    callp          msys.m$print_startcon 0 0
    loadimm  u64   "<OP:#>"
    callp          msys.m$print_setfmt 1 0
    loadref  u64   pci_tables.pclnames 
    loadref  u64   pci_decls.lx 
    loadimm  i64   48 
    iloadx   i64   1 0
    iloadx   u64   8 -8
    callp          msys.m$print_str_nf 1 0
    callp          msys.m$print_end 0 0
    jump           #1242 
#1243:
    loadref  u64   pci_decls.lx 
    loadimm  i64   56 
    iloadx   i64   1 0
    jumpf    i64   #1245 
    callp          msys.m$print_startcon 0 0
    loadimm  u64   "<TYPE:#>"
    callp          msys.m$print_setfmt 1 0
    loadref  u64   pci_tables.typenames 
    loadref  u64   pci_decls.lx 
    loadimm  i64   56 
    iloadx   i64   1 0
    iloadx   u64   8 0
    callp          msys.m$print_str_nf 1 0
    callp          msys.m$print_end 0 0
    jump           #1242 
#1245:
    callp          msys.m$print_startcon 0 0
    loadref  u64   pci_decls.lx 
    loadimm  i64   24 
    iloadx   u64   1 0
    callp          msys.m$print_str_nf 1 0
    callp          msys.m$print_end 0 0
#1242:
    jump           #1234 
#1236:
    callp          msys.m$print_startcon 0 0
    loadref  u64   pci_decls.lx 
    loadimm  i64   8 
    iloadx   i64   1 0
    callp          msys.m$print_i64_nf 1 0
    callp          msys.m$print_end 0 0
    jump           #1234 
#1237:
    callp          msys.m$print_startcon 0 0
    loadimm  i64   0 
    loadref  u64   pci_decls.lx 
    loadimm  i64   16 
    iloadx   r64   1 0
    callp          msys.m$print_r64 2 0
    callp          msys.m$print_end 0 0
    jump           #1234 
#1238:
    callp          msys.m$print_startcon 0 0
    loadimm  u64   "\"#\""
    callp          msys.m$print_setfmt 1 0
    loadref  u64   pci_decls.lx 
    loadimm  i64   24 
    iloadx   u64   1 0
    callp          msys.m$print_str_nf 1 0
    callp          msys.m$print_end 0 0
    jump           #1234 
#1239:
    callp          msys.m$print_startcon 0 0
    loadimm  u64   "'#'"
    callp          msys.m$print_setfmt 1 0
    loadref  u64   pci_decls.lx 
    loadimm  i64   24 
    iloadx   u64   1 0
    callp          msys.m$print_str_nf 1 0
    callp          msys.m$print_end 0 0
    jump           #1234 
#1240:
    callp          msys.m$print_startcon 0 0
    loadimm  u64   "#"
    callp          msys.m$print_str_nf 1 0
    callp          msys.m$print_nogap 0 0
    loadref  u64   pci_decls.lx 
    loadimm  i64   8 
    iloadx   i64   1 0
    callp          msys.m$print_i64_nf 1 0
    callp          msys.m$print_end 0 0
    jump           #1234 
#1241:
#1234:
    callp          msys.m$print_startcon 0 0
    callp          msys.m$print_newline 0 0
    callp          msys.m$print_end 0 0
;------------------------
#1232:
    return         
end

proc pci_lex.readdec
    param    i64   .neg 
    local    i64   .c 
    local    u64   .dest 
    local    u64   .destend 
    local    u64   .pstart 
    local    i64   .length 
    local    mem 1024 .str 
    local    u64   .a 
;------------------------
    load     u64   pci_lex.lxsptr 
    store    u64   .pstart 
    loadref  u64   .str 
    store    u64   .dest 
    load     u64   .dest 
    loadimm  i64   1024 
    addptrx  u64   1 0
    loadimm  i64   10 
    subptrx  u64   1 0
    store    u64   .destend 
    loadimm  u64   0 
    store    u64   .a 
#1251:
    loadref  u64   pci_lex.lxsptr 
    loadincr u64   1
    iload    u8    
    double         
    store    i64   .c 
    switch         #1254 46 101
    opnd           #1255 
#1254:
    swlabel        #1258 
    swlabel        #1255 
    swlabel        #1256 
    swlabel        #1256 
    swlabel        #1256 
    swlabel        #1256 
    swlabel        #1256 
    swlabel        #1256 
    swlabel        #1256 
    swlabel        #1256 
    swlabel        #1256 
    swlabel        #1256 
    swlabel        #1255 
    swlabel        #1255 
    swlabel        #1255 
    swlabel        #1255 
    swlabel        #1255 
    swlabel        #1255 
    swlabel        #1255 
    swlabel        #1255 
    swlabel        #1255 
    swlabel        #1255 
    swlabel        #1255 
    swlabel        #1257 
    swlabel        #1255 
    swlabel        #1255 
    swlabel        #1255 
    swlabel        #1255 
    swlabel        #1255 
    swlabel        #1255 
    swlabel        #1255 
    swlabel        #1255 
    swlabel        #1255 
    swlabel        #1255 
    swlabel        #1255 
    swlabel        #1255 
    swlabel        #1255 
    swlabel        #1255 
    swlabel        #1255 
    swlabel        #1255 
    swlabel        #1255 
    swlabel        #1255 
    swlabel        #1255 
    swlabel        #1255 
    swlabel        #1255 
    swlabel        #1255 
    swlabel        #1255 
    swlabel        #1255 
    swlabel        #1255 
    swlabel        #1255 
    swlabel        #1255 
    swlabel        #1255 
    swlabel        #1255 
    swlabel        #1255 
    swlabel        #1255 
    swlabel        #1257 
    endsw          
#1256:
    load     u64   .a 
    loadimm  i64   10 
    mul      i64   
    load     i64   .c 
    add      i64   
    loadimm  i64   48 
    sub      i64   
    store    u64   .a 
    load     i64   .c 
    loadref  u64   .dest 
    loadincr u64   1
    istore   u8    
    jump           #1253 
#1257:
    load     u64   .pstart 
    store    u64   pci_lex.lxsptr 
    setcall        1
    load     i64   .neg 
    setarg   i64   1
    callp          pci_lex.readreal 1 0
    jump           #1250 
    jump           #1253 
#1258:
    load     u64   .pstart 
    store    u64   pci_lex.lxsptr 
    setcall        1
    load     i64   .neg 
    setarg   i64   1
    callp          pci_lex.readreal 1 0
    jump           #1250 
    jump           #1253 
#1255:
    loadref  u64   pci_lex.lxsptr 
    decrto   u64   1
    jump           #1252 
#1253:
    load     u64   .dest 
    load     u64   .destend 
    jumplt   u64   #1260 
    setcall        1
    loadimm  u64   "Numlit too long"
    setarg   u64   1
    callp          pci_lex.lxerror 1 0
#1260:
#1259:
    jump           #1251 
#1252:
    load     u64   .dest 
    loadref  u64   .str 
    subptr   u64   1
    store    i64   .length 
    load     i64   .length 
    loadimm  i64   20 
    jumpgt   i64   #1264 
    load     i64   .length 
    loadimm  i64   20 
    jumpne   i64   #1263 
    setcall        3
    loadimm  u64   20 
    setarg   u64   3
    loadimm  u64   "18446744073709551615"
    setarg   u64   2
    loadref  u64   .str 
    setarg   u64   1
    callf    i32   strncmp 3 0
    widen    i32   
    jumpf    i64   #1263 
#1264:
    setcall        1
    loadimm  u64   "u64 overflow"
    setarg   u64   1
    callp          pci_lex.lxerror 1 0
#1263:
#1262:
;finish::
#1267:
    loadimm  i64   4 
    loadref  u64   pci_decls.lx 
    loadimm  i64   0 
    istorex  i64   1 0
    startmx        
    load     i64   .neg 
    jumpf    i64   #1269 
    load     u64   .a 
    neg      u64   
    resetmx        
    jump           #1268 
#1269:
    load     u64   .a 
    endmx          
#1268:
    loadref  u64   pci_decls.lx 
    loadimm  i64   8 
    istorex  i64   1 0
;------------------------
#1250:
    return         
end

proc pci_lex.readhex
    local    i64   .c 
    local    u64   .dest 
    local    u64   .destend 
    local    u64   .pstart 
    local    i64   .length 
    local    mem 1024 .str 
    local    u64   .a 
;------------------------
    load     u64   pci_lex.lxsptr 
    store    u64   .pstart 
    loadref  u64   .str 
    store    u64   .dest 
    load     u64   .dest 
    loadimm  i64   1024 
    addptrx  u64   1 0
    loadimm  i64   10 
    subptrx  u64   1 0
    store    u64   .destend 
    loadimm  u64   0 
    store    u64   .a 
#1271:
    loadref  u64   pci_lex.lxsptr 
    loadincr u64   1
    iload    u8    
    double         
    store    i64   .c 
    switch         #1274 48 102
    opnd           #1275 
#1274:
    swlabel        #1276 
    swlabel        #1276 
    swlabel        #1276 
    swlabel        #1276 
    swlabel        #1276 
    swlabel        #1276 
    swlabel        #1276 
    swlabel        #1276 
    swlabel        #1276 
    swlabel        #1276 
    swlabel        #1275 
    swlabel        #1275 
    swlabel        #1275 
    swlabel        #1275 
    swlabel        #1275 
    swlabel        #1275 
    swlabel        #1275 
    swlabel        #1277 
    swlabel        #1277 
    swlabel        #1277 
    swlabel        #1277 
    swlabel        #1277 
    swlabel        #1277 
    swlabel        #1275 
    swlabel        #1275 
    swlabel        #1275 
    swlabel        #1275 
    swlabel        #1275 
    swlabel        #1275 
    swlabel        #1275 
    swlabel        #1275 
    swlabel        #1275 
    swlabel        #1275 
    swlabel        #1275 
    swlabel        #1275 
    swlabel        #1275 
    swlabel        #1275 
    swlabel        #1275 
    swlabel        #1275 
    swlabel        #1275 
    swlabel        #1275 
    swlabel        #1275 
    swlabel        #1275 
    swlabel        #1275 
    swlabel        #1275 
    swlabel        #1275 
    swlabel        #1275 
    swlabel        #1275 
    swlabel        #1275 
    swlabel        #1278 
    swlabel        #1278 
    swlabel        #1278 
    swlabel        #1278 
    swlabel        #1278 
    swlabel        #1278 
    endsw          
#1276:
    load     u64   .a 
    loadimm  i64   16 
    mul      i64   
    load     i64   .c 
    add      i64   
    loadimm  i64   48 
    sub      i64   
    store    u64   .a 
    load     i64   .c 
    loadref  u64   .dest 
    loadincr u64   1
    istore   u8    
    jump           #1273 
#1277:
    load     i64   .c 
    loadref  u64   .dest 
    loadincr u64   1
    istore   u8    
    load     u64   .a 
    loadimm  i64   16 
    mul      i64   
    load     i64   .c 
    add      i64   
    loadimm  i64   65 
    sub      i64   
    loadimm  i64   10 
    add      i64   
    store    u64   .a 
    jump           #1273 
#1278:
    load     i64   .c 
    loadimm  i64   32 
    sub      i64   
    loadref  u64   .dest 
    loadincr u64   1
    istore   u8    
    load     u64   .a 
    loadimm  i64   16 
    mul      i64   
    load     i64   .c 
    add      i64   
    loadimm  i64   97 
    sub      i64   
    loadimm  i64   10 
    add      i64   
    store    u64   .a 
    jump           #1273 
#1275:
    loadref  u64   pci_lex.lxsptr 
    decrto   u64   1
    jump           #1272 
#1273:
    load     u64   .dest 
    load     u64   .destend 
    jumplt   u64   #1280 
    setcall        1
    loadimm  u64   "Numlit too long"
    setarg   u64   1
    callp          pci_lex.lxerror 1 0
#1280:
#1279:
    jump           #1271 
#1272:
    load     u64   .dest 
    loadref  u64   .str 
    subptr   u64   1
    store    i64   .length 
    load     i64   .length 
    loadimm  i64   16 
    jumple   i64   #1283 
    setcall        1
    loadimm  u64   "u64 overflow"
    setarg   u64   1
    callp          pci_lex.lxerror 1 0
#1283:
#1282:
    loadimm  i64   4 
    loadref  u64   pci_decls.lx 
    loadimm  i64   0 
    istorex  i64   1 0
    load     u64   .a 
    loadref  u64   pci_decls.lx 
    loadimm  i64   8 
    istorex  i64   1 0
;------------------------
#1270:
    return         
end

proc pci_lex.readreal
    param    i64   .neg 
    local    i64   .c 
    local    i64   .n 
    local    i64   .negexpon 
    local    i64   .dotseen 
    local    i64   .length 
    local    i64   .fractlen 
    local    i64   .expon 
    local    i64   .expseen 
    local    r64   .x 
    local    mem 1024 .str 
    local    u64   .dest 
    local    u64   .destend 
    local    u64   .pexpon 
;------------------------
    loadref  u64   .str 
    store    u64   .dest 
    load     u64   .dest 
    loadimm  i64   1024 
    addptrx  u64   1 0
    loadimm  i64   100 
    subptrx  u64   1 0
    store    u64   .destend 
    loadimm  i64   0 
    double         
    store    i64   .fractlen 
    double         
    store    i64   .expon 
    double         
    store    i64   .expseen 
    double         
    store    i64   .dotseen 
    double         
    store    i64   .negexpon 
    store    i64   .length 
#1286:
    loadref  u64   pci_lex.lxsptr 
    loadincr u64   1
    iload    u8    
    double         
    store    i64   .c 
    switch         #1289 46 101
    opnd           #1290 
#1289:
    swlabel        #1294 
    swlabel        #1290 
    swlabel        #1291 
    swlabel        #1291 
    swlabel        #1291 
    swlabel        #1291 
    swlabel        #1291 
    swlabel        #1291 
    swlabel        #1291 
    swlabel        #1291 
    swlabel        #1291 
    swlabel        #1291 
    swlabel        #1290 
    swlabel        #1290 
    swlabel        #1290 
    swlabel        #1290 
    swlabel        #1290 
    swlabel        #1290 
    swlabel        #1290 
    swlabel        #1290 
    swlabel        #1290 
    swlabel        #1290 
    swlabel        #1290 
    swlabel        #1297 
    swlabel        #1290 
    swlabel        #1290 
    swlabel        #1290 
    swlabel        #1290 
    swlabel        #1290 
    swlabel        #1290 
    swlabel        #1290 
    swlabel        #1290 
    swlabel        #1290 
    swlabel        #1290 
    swlabel        #1290 
    swlabel        #1290 
    swlabel        #1290 
    swlabel        #1290 
    swlabel        #1290 
    swlabel        #1290 
    swlabel        #1290 
    swlabel        #1290 
    swlabel        #1290 
    swlabel        #1290 
    swlabel        #1290 
    swlabel        #1290 
    swlabel        #1290 
    swlabel        #1290 
    swlabel        #1290 
    swlabel        #1290 
    swlabel        #1290 
    swlabel        #1290 
    swlabel        #1290 
    swlabel        #1290 
    swlabel        #1290 
    swlabel        #1297 
    endsw          
#1291:
    load     i64   .c 
    loadref  u64   .dest 
    loadincr u64   1
    istore   u8    
    loadref  u64   .length 
    incrto   i64   1
    load     i64   .dotseen 
    jumpf    i64   #1293 
    loadref  u64   .fractlen 
    incrto   i64   1
#1293:
#1292:
    jump           #1288 
#1294:
    load     i64   .dotseen 
    jumpf    i64   #1296 
    loadref  u64   pci_lex.lxsptr 
    decrto   u64   1
    jump           #1287 
#1296:
#1295:
    loadimm  i64   1 
    store    i64   .dotseen 
    load     i64   .c 
    loadref  u64   .dest 
    loadincr u64   1
    istore   u8    
    jump           #1288 
#1297:
    load     i64   .expseen 
    jumpf    i64   #1299 
    setcall        1
    loadimm  u64   "double expon"
    setarg   u64   1
    callp          pci_lex.lxerror 1 0
#1299:
#1298:
    loadimm  i64   1 
    store    i64   .expseen 
    load     i64   .c 
    loadref  u64   .dest 
    loadincr u64   1
    istore   u8    
    jump           #1302 
#1301:
    loadref  u64   pci_lex.lxsptr 
    incrto   u64   1
#1302:
    load     u64   pci_lex.lxsptr 
    iload    u8    
    loadimm  u64   32 
    jumpeq   u64   #1301 
#1303:
    load     u64   pci_lex.lxsptr 
    iload    u8    
    loadimm  u64   43 
    jumpeq   u64   #1306 1
    loadimm  u64   45 
    jumpne   u64   #1305 
#1306:
    load     u64   pci_lex.lxsptr 
    iload    u8    
    loadimm  u64   45 
    jumpne   u64   #1308 
    loadimm  i64   1 
    store    i64   .negexpon 
#1308:
#1307:
    loadref  u64   pci_lex.lxsptr 
    loadincr u64   1
    iload    u8    
    loadref  u64   .dest 
    loadincr u64   1
    istore   u8    
#1305:
#1304:
    loadimm  i64   0 
    store    i64   .expon 
#1309:
    loadref  u64   pci_lex.lxsptr 
    loadincr u64   1
    iload    u8    
    double         
    store    i64   .c 
    switch         #1311 48 57
    opnd           #1312 
#1311:
    swlabel        #1313 
    swlabel        #1313 
    swlabel        #1313 
    swlabel        #1313 
    swlabel        #1313 
    swlabel        #1313 
    swlabel        #1313 
    swlabel        #1313 
    swlabel        #1313 
    swlabel        #1313 
    endsw          
#1313:
    load     i64   .expon 
    loadimm  i64   10 
    mul      i64   
    load     i64   .c 
    add      i64   
    loadimm  i64   48 
    sub      i64   
    store    i64   .expon 
    load     i64   .c 
    loadref  u64   .dest 
    loadincr u64   1
    istore   u8    
    load     u64   .dest 
    load     u64   .destend 
    jumplt   u64   #1315 
    setcall        1
    loadimm  u64   "expon?"
    setarg   u64   1
    callp          pci_lex.lxerror 1 0
#1315:
#1314:
    jump           #1309 
#1312:
    loadref  u64   pci_lex.lxsptr 
    decrto   u64   1
    jump           #1287 
    jump           #1309 
#1310:
    jump           #1288 
#1290:
    loadref  u64   pci_lex.lxsptr 
    decrto   u64   1
    jump           #1287 
#1288:
    load     u64   .dest 
    load     u64   .destend 
    jumplt   u64   #1318 
    setcall        1
    loadimm  u64   "r64lit too long"
    setarg   u64   1
    callp          pci_lex.lxerror 1 0
#1318:
#1317:
    jump           #1286 
#1287:
    loadimm  u64   0 
    load     u64   .dest 
    istore   u8    
    setcall        2
    loadimm  u64   0 
    setarg   u64   2
    loadref  u64   .str 
    setarg   u64   1
    callf    r64   strtod 2 0
    loadref  u64   pci_decls.lx 
    loadimm  i64   16 
    istorex  r64   1 0
    load     i64   .neg 
    jumpf    i64   #1321 
    loadref  u64   pci_decls.lx 
    loadimm  i64   16 
    iloadx   r64   1 0
    neg      r64   
    loadref  u64   pci_decls.lx 
    loadimm  i64   16 
    istorex  r64   1 0
#1321:
#1320:
    loadimm  i64   5 
    loadref  u64   pci_decls.lx 
    loadimm  i64   0 
    istorex  i64   1 0
;------------------------
#1285:
    return         
end

proc pci_lex.readstring
    param    i64   .termchar 
    local    u64   .s 
    local    u64   .t 
    local    i64   .c 
    local    i64   .d 
    local    i64   .length 
    local    i64   .hasescape 
    local    u64   .str 
    local    i64   .$av_1 
;------------------------
    startmx        
    load     i64   .termchar 
    loadimm  i64   34 
    jumpne   i64   #1324 
    loadimm  i64   6 
    resetmx        
    jump           #1323 
#1324:
    loadimm  i64   7 
    endmx          
#1323:
    loadref  u64   pci_decls.lx 
    loadimm  i64   0 
    istorex  i64   1 0
    load     u64   pci_lex.lxsptr 
    store    u64   .s 
    loadimm  i64   0 
    store    i64   .length 
    loadimm  i64   0 
    store    i64   .hasescape 
#1325:
    loadref  u64   pci_lex.lxsptr 
    loadincr u64   1
    iload    u8    
    double         
    store    i64   .c 
    switch         #1327 0 92
    opnd           #1328 
#1327:
    swlabel        #1340 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1340 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1340 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1337 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1337 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1328 
    swlabel        #1329 
    endsw          
#1329:
    load     u64   pci_lex.lxsptr 
    iload    u8    
    store    i64   .c 
    loadref  u64   pci_lex.lxsptr 
    incrto   u64   1
    loadimm  i64   1 
    store    i64   .hasescape 
    load     i64   .c 
    switch         #1331 34 122
    opnd           #1332 
#1331:
    swlabel        #1333 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1333 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1333 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1333 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1333 
    swlabel        #1333 
    swlabel        #1333 
    swlabel        #1332 
    swlabel        #1333 
    swlabel        #1333 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1333 
    swlabel        #1332 
    swlabel        #1333 
    swlabel        #1332 
    swlabel        #1332 
    swlabel        #1333 
    swlabel        #1333 
    swlabel        #1333 
    swlabel        #1333 
    swlabel        #1332 
    swlabel        #1333 
    swlabel        #1334 
    swlabel        #1335 
    swlabel        #1333 
    swlabel        #1333 
    endsw          
#1333:
    loadref  u64   .length 
    incrto   i64   1
    jump           #1330 
#1334:
    loadref  u64   .length 
    incrto   i64   1
    jump           #1330 
#1335:
    loadref  u64   pci_lex.lxsptr 
    loadimm  i64   2 
    addpxto  u64   1 0
    loadref  u64   .length 
    incrto   i64   1
    jump           #1330 
#1332:
    setcall        1
    loadimm  u64   "Bad str escape"
    setarg   u64   1
    callp          pci_lex.lxerror 1 0
#1330:
    jump           #1325 
#1337:
    load     i64   .c 
    load     i64   .termchar 
    jumpne   i64   #1339 
    jump           #1326 
    jump           #1338 
#1339:
    loadref  u64   .length 
    incrto   i64   1
#1338:
    jump           #1325 
#1340:
    setcall        1
    loadimm  u64   "String not terminated"
    setarg   u64   1
    callp          pci_lex.lxerror 1 0
    jump           #1325 
#1328:
    loadref  u64   .length 
    incrto   i64   1
    jump           #1325 
#1326:
    load     i64   .length 
    loadimm  i64   0 
    jumpne   i64   #1343 
    loadimm  u64   ""
    loadref  u64   pci_decls.lx 
    loadimm  i64   24 
    istorex  u64   1 0
    jump           #1322 
    jump           #1342 
#1343:
    load     i64   .hasescape 
    jumpt    i64   #1345 
    setcall        2
    load     i64   .length 
    setarg   i64   2
    load     u64   .s 
    setarg   u64   1
    callf    u64   mlib.pcm_copyheapstringn 2 0
    loadref  u64   pci_decls.lx 
    loadimm  i64   24 
    istorex  u64   1 0
    jump           #1322 
#1345:
#1342:
    setcall        1
    load     i64   .length 
    loadimm  i64   1 
    add      i64   
    setarg   i64   1
    callf    u64   mlib.pcm_alloc 1 0
    double         
    store    u64   .t 
    loadref  u64   pci_decls.lx 
    loadimm  i64   24 
    istorex  u64   1 0
#1346:
    loadref  u64   .s 
    loadincr u64   1
    iload    u8    
    double         
    store    i64   .c 
    switch         #1349 0 92
    opnd           #1350 
#1349:
    swlabel        #1377 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1377 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1377 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1372 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1372 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1350 
    swlabel        #1351 
    endsw          
#1351:
    loadref  u64   .s 
    loadincr u64   1
    iload    u8    
    double         
    store    i64   .c 
    switch         #1353 34 120
    opnd           #1354 
#1353:
    swlabel        #1368 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1370 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1369 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1355 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1356 
    swlabel        #1354 
    swlabel        #1356 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1355 
    swlabel        #1354 
    swlabel        #1357 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1354 
    swlabel        #1358 
    endsw          
#1355:
    loadimm  i64   13 
    store    i64   .c 
    jump           #1352 
#1356:
    loadimm  i64   10 
    store    i64   .c 
    jump           #1352 
#1357:
    loadimm  i64   9 
    store    i64   .c 
    jump           #1352 
#1358:
    loadimm  i64   0 
    store    i64   .c 
    loadimm  i64   2 
    store    i64   .$av_1 
#1359:
    loadref  u64   .s 
    loadincr u64   1
    iload    u8    
    double         
    store    i64   .d 
    loadimm  i64   65 
    jumpeq   i64   #1363 1
    loadimm  i64   66 
    jumpeq   i64   #1363 1
    loadimm  i64   67 
    jumpeq   i64   #1363 1
    loadimm  i64   68 
    jumpeq   i64   #1363 1
    loadimm  i64   69 
    jumpeq   i64   #1363 1
    loadimm  i64   70 
    jumpeq   i64   #1363 1
    loadimm  i64   97 
    jumpeq   i64   #1364 1
    loadimm  i64   98 
    jumpeq   i64   #1364 1
    loadimm  i64   99 
    jumpeq   i64   #1364 1
    loadimm  i64   100 
    jumpeq   i64   #1364 1
    loadimm  i64   101 
    jumpeq   i64   #1364 1
    loadimm  i64   102 
    jumpeq   i64   #1364 1
    loadimm  i64   48 
    jumpeq   i64   #1365 1
    loadimm  i64   49 
    jumpeq   i64   #1365 1
    loadimm  i64   50 
    jumpeq   i64   #1365 1
    loadimm  i64   51 
    jumpeq   i64   #1365 1
    loadimm  i64   52 
    jumpeq   i64   #1365 1
    loadimm  i64   53 
    jumpeq   i64   #1365 1
    loadimm  i64   54 
    jumpeq   i64   #1365 1
    loadimm  i64   55 
    jumpeq   i64   #1365 1
    loadimm  i64   56 
    jumpeq   i64   #1365 1
    loadimm  i64   57 
    jumpeq   i64   #1365 
    jump           #1366 
#1363:
    load     i64   .c 
    loadimm  i64   16 
    mul      i64   
    load     i64   .d 
    add      i64   
    loadimm  i64   65 
    sub      i64   
    loadimm  i64   10 
    add      i64   
    store    i64   .c 
    jump           #1362 
#1364:
    load     i64   .c 
    loadimm  i64   16 
    mul      i64   
    load     i64   .d 
    add      i64   
    loadimm  i64   97 
    sub      i64   
    loadimm  i64   10 
    add      i64   
    store    i64   .c 
    jump           #1362 
#1365:
    load     i64   .c 
    loadimm  i64   16 
    mul      i64   
    load     i64   .d 
    add      i64   
    loadimm  i64   48 
    sub      i64   
    store    i64   .c 
    jump           #1362 
#1366:
    setcall        1
    loadimm  u64   "Bad \\x code"
    setarg   u64   1
    callp          pci_lex.lxerror 1 0
#1362:
#1360:
    to             #1359 
    opnd           .$av_1 
#1361:
    jump           #1352 
#1368:
    loadimm  i64   34 
    store    i64   .c 
    jump           #1352 
#1369:
    loadimm  i64   92 
    store    i64   .c 
    jump           #1352 
#1370:
    loadimm  i64   39 
    store    i64   .c 
    jump           #1352 
#1354:
    load     i64   .c 
    loadref  u64   .str 
    loadimm  i64   1 
    istorex  u8    1 -1
    loadimm  u64   0 
    loadref  u64   .str 
    loadimm  i64   2 
    istorex  u8    1 -1
    setcall        1
    setcall        2
    loadref  u64   .str 
    setarg   u64   2
    loadimm  u64   "Unknown string escape: "
    setarg   u64   1
    callf    u64   $pci.addstr 2 0
    setarg   u64   1
    callp          pci_lex.lxerror 1 0
#1352:
    jump           #1348 
#1372:
    load     i64   .c 
    load     i64   .termchar 
    jumpne   i64   #1374 
    load     u64   .s 
    iload    u8    
    load     i64   .c 
    jumpne   i64   #1376 
    loadref  u64   .s 
    incrto   u64   1
    jump           #1375 
#1376:
    jump           #1347 
#1375:
#1374:
#1373:
    jump           #1348 
#1377:
    setcall        1
    loadimm  u64   "String not terminated"
    setarg   u64   1
    callp          pci_lex.lxerror 1 0
    jump           #1348 
#1350:
#1348:
    load     i64   .c 
    loadref  u64   .t 
    loadincr u64   1
    istore   u8    
    jump           #1346 
#1347:
    loadimm  u64   0 
    load     u64   .t 
    istore   u8    
;------------------------
#1322:
    return         
end

proc pci_lex.inithashtable
    local    i64   .$av_1 
    local    i64   .$av_2 
    local    i64   .i 
;------------------------
    loadimm  i64   1 
    store    i64   .i 
#1380:
    setcall        3
    loadimm  i64   0 
    setarg   i64   3
    load     i64   .i 
    setarg   i64   2
    loadref  u64   pci_tables.pclnames 
    load     i64   .i 
    iloadx   u64   8 -8
    loadimm  i64   1 
    addptrx  u64   1 0
    setarg   u64   1
    callp          pci_lex.addreservedword 3 0
#1381:
    forup          #1380 1
    opnd           .i 
    opnd           150 
#1382:
    loadimm  i64   1 
    store    i64   .i 
#1383:
    setcall        3
    load     i64   .i 
    setarg   i64   3
    loadimm  i64   0 
    setarg   i64   2
    loadref  u64   pci_tables.typenames 
    load     i64   .i 
    iloadx   u64   8 0
    setarg   u64   1
    callp          pci_lex.addreservedword 3 0
    load     i64   .i 
    loadimm  i64   12 
    jumpne   i64   #1387 
    loadref  u64   pci_decls.lx 
    loadimm  i64   32 
    iloadx   u64   1 0
    store    u64   pci_decls.stvoid 
#1387:
#1386:
#1384:
    forup          #1383 1
    opnd           .i 
    opnd           12 
#1385:
    setcall        3
    loadimm  i64   1 
    setarg   i64   3
    loadimm  i64   0 
    setarg   i64   2
    loadimm  u64   "int"
    setarg   u64   1
    callp          pci_lex.addreservedword 3 0
    setcall        1
    loadimm  u64   "msvcrt"
    setarg   u64   1
    callp          pci_lex.adddlllib 1 0
    setcall        1
    loadimm  u64   "gdi32"
    setarg   u64   1
    callp          pci_lex.adddlllib 1 0
    setcall        1
    loadimm  u64   "user32"
    setarg   u64   1
    callp          pci_lex.adddlllib 1 0
    setcall        1
    loadimm  u64   "kernel32"
    setarg   u64   1
    callp          pci_lex.adddlllib 1 0
;------------------------
#1379:
    return         
end

proc pci_lex.adddlllib
    param    u64   .name 
;------------------------
    loadref  u64   pci_decls.nlibs 
    incrto   i64   1
    setcall        3
    loadimm  i64   0 
    setarg   i64   3
    loadimm  i64   0 
    setarg   i64   2
    load     u64   .name 
    setarg   u64   1
    callp          pci_lex.addreservedword 3 0
    loadimm  i64   6 
    loadref  u64   pci_decls.lx 
    loadimm  i64   32 
    iloadx   u64   1 0
    loadimm  i64   12 
    istorex  u8    1 0
    loadref  u64   pci_decls.lx 
    loadimm  i64   32 
    iloadx   u64   1 0
    loadref  u64   pci_decls.libdef 
    load     i64   pci_decls.nlibs 
    istorex  u64   8 -8
    loadref  u64   pci_decls.lx 
    loadimm  i64   32 
    iloadx   u64   1 0
    iload    u64   
    loadref  u64   pci_decls.libnames 
    load     i64   pci_decls.nlibs 
    istorex  u64   8 -8
    loadimm  i64   68 
    loadref  u64   pci_decls.libtype 
    load     i64   pci_decls.nlibs 
    istorex  u8    1 -1
;------------------------
#1393:
    return         
end

proc pci_lex.printhashtable
    local    u64   .d 
    local    i64   .i 
;------------------------
    loadimm  i64   0 
    store    i64   .i 
#1395:
    loadref  u64   pci_decls.hashtable 
    load     i64   .i 
    addptrx  mem 32 32 0
    store    u64   .d 
    load     u64   .d 
    loadimm  i64   8 
    iloadx   u8    1 0
    jumpf    i64   #1399 
    callp          msys.m$print_startcon 0 0
    load     i64   .i 
    callp          msys.m$print_i64_nf 1 0
    load     u64   .d 
    iload    u64   
    callp          msys.m$print_str_nf 1 0
    load     u64   .d 
    loadimm  i64   9 
    iloadx   u8    1 0
    callp          msys.m$print_i64_nf 1 0
    load     u64   .d 
    loadimm  i64   10 
    iloadx   u8    1 0
    callp          msys.m$print_i64_nf 1 0
    callp          msys.m$print_newline 0 0
    callp          msys.m$print_end 0 0
#1399:
#1398:
#1396:
    forup          #1395 1
    opnd           .i 
    opnd           65535 
#1397:
;------------------------
#1394:
    return         
end

proc pci_lex.addreservedword
    param    u64   .name 
    param    i64   .opcode 
    param    i64   .mode 
;------------------------
    setcall        3
    setcall        1
    load     u64   .name 
    setarg   u64   1
    callf    i64   pci_lex.gethashvaluez 1 0
    setarg   i64   3
    setcall        1
    load     u64   .name 
    setarg   u64   1
    callf    i64   strlen 1 0
    setarg   i64   2
    load     u64   .name 
    setarg   u64   1
    callf    i64   pci_lex.lookup 3 0
    jumpf    i64   #1402 
    setcall        1
    setcall        2
    load     u64   .name 
    setarg   u64   2
    loadimm  u64   "Dupl name:"
    setarg   u64   1
    callf    u64   $pci.addstr 2 0
    setarg   u64   1
    callp          pci_lex.lxerror 1 0
#1402:
#1401:
    load     i64   .opcode 
    loadref  u64   pci_decls.lx 
    loadimm  i64   32 
    iloadx   u64   1 0
    loadimm  i64   9 
    istorex  u8    1 0
    load     i64   .mode 
    loadref  u64   pci_decls.lx 
    loadimm  i64   32 
    iloadx   u64   1 0
    loadimm  i64   10 
    istorex  u8    1 0
;------------------------
#1400:
    return         
end

proc pci_lex.lookup
    rettype  i64   
    param    u64   .name 
    param    i64   .length 
    param    i64   .hashindex0 
    local    i64   .wrapped 
    local    i64   .hashindex 
    local    i64   .index 
    local    i64   .n 
    local    u64   .d 
    local    i64   .j 
;------------------------
    load     i64   .hashindex0 
    loadimm  i64   65535 
    bitand   i64   
    store    i64   .j 
    loadref  u64   pci_decls.hashtable 
    load     i64   .j 
    addptrx  mem 32 32 0
    store    u64   .d 
    loadimm  i64   0 
    store    i64   .wrapped 
#1405:
    load     u64   .d 
    loadimm  i64   8 
    iloadx   u8    1 0
    loadimm  i64   0 
    jumpne   i64   #1408 
    jump           #1406 
#1408:
#1407:
    load     u64   .d 
    loadimm  i64   8 
    iloadx   u8    1 0
    double         
    store    i64   .n 
    load     i64   .length 
    jumpne   i64   #1410 
    setcall        3
    load     i64   .n 
    setarg   u64   3
    load     u64   .name 
    setarg   u64   2
    load     u64   .d 
    iload    u64   
    setarg   u64   1
    callf    i32   memcmp 3 0
    widen    i32   
    loadimm  i64   0 
    jumpne   i64   #1410 
    load     u64   .d 
    loadref  u64   pci_decls.lx 
    loadimm  i64   32 
    istorex  u64   1 0
    load     u64   .d 
    loadimm  i64   9 
    iloadx   u8    1 0
    loadref  u64   pci_decls.lx 
    loadimm  i64   48 
    istorex  i64   1 0
    load     u64   .d 
    loadimm  i64   10 
    iloadx   u8    1 0
    loadref  u64   pci_decls.lx 
    loadimm  i64   56 
    istorex  i64   1 0
    loadimm  i64   1 
    setret   i64   
    jump           #1404 
#1410:
#1409:
    loadref  u64   .j 
    incrload i64   1
    loadimm  i64   65536 
    jumplt   i64   #1412 
    load     i64   .wrapped 
    jumpf    i64   #1414 
    setcall        1
    loadimm  u64   "Hashtab full"
    setarg   u64   1
    callp          pci_lex.lxerror 1 0
#1414:
#1413:
    loadimm  i64   1 
    store    i64   .wrapped 
    loadimm  i64   0 
    store    i64   .j 
#1412:
#1411:
    loadref  u64   pci_decls.hashtable 
    load     i64   .j 
    addptrx  mem 32 32 0
    store    u64   .d 
    jump           #1405 
#1406:
    setcall        2
    load     i64   .length 
    setarg   i64   2
    load     u64   .name 
    setarg   u64   1
    callf    u64   mlib.pcm_copyheapstringn 2 0
    load     u64   .d 
    loadimm  i64   0 
    istorex  u64   1 0
    load     i64   .length 
    load     u64   .d 
    loadimm  i64   8 
    istorex  u8    1 0
    load     u64   .d 
    iload    u64   
    loadref  u64   pci_decls.lx 
    loadimm  i64   24 
    istorex  u64   1 0
    load     u64   .d 
    loadref  u64   pci_decls.lx 
    loadimm  i64   32 
    istorex  u64   1 0
    loadimm  i64   0 
    setret   i64   
    jump           #1404 
;------------------------
#1404:
    return         
end

proc pci_lex.gethashvaluez
    rettype  i64   
    param    u64   .s 
    local    i64   .c 
    local    i64   .hsum 
;------------------------
    load     u64   .s 
    iload    u8    
    loadimm  i64   0 
    jumpne   i64   #1418 
    loadimm  i64   0 
    setret   i64   
    jump           #1416 
#1418:
#1417:
    loadref  u64   .s 
    loadincr u64   1
    iload    u8    
    store    i64   .hsum 
#1419:
    loadref  u64   .s 
    loadincr u64   1
    iload    u8    
    store    i64   .c 
    load     i64   .c 
    loadimm  i64   0 
    jumpne   i64   #1422 
    jump           #1420 
#1422:
#1421:
    load     i64   .hsum 
    loadimm  i64   4 
    shl      i64   
    load     i64   .hsum 
    sub      i64   
    load     i64   .c 
    add      i64   
    store    i64   .hsum 
    jump           #1419 
#1420:
    load     i64   .hsum 
    loadimm  i64   5 
    shl      i64   
    load     i64   .hsum 
    sub      i64   
    setret   i64   
    jump           #1416 
;------------------------
#1416:
    return         
end

proc pci_lex.findsymbol
    rettype  u64   
    param    u64   .name 
    local    u64   .d 
;------------------------
    setcall        3
    setcall        1
    load     u64   .name 
    setarg   u64   1
    callf    i64   pci_lex.gethashvaluez 1 0
    setarg   i64   3
    setcall        1
    load     u64   .name 
    setarg   u64   1
    callf    i64   strlen 1 0
    setarg   i64   2
    load     u64   .name 
    setarg   u64   1
    callf    i64   pci_lex.lookup 3 0
    jumpf    i64   #1425 
    loadref  u64   pci_decls.lx 
    loadimm  i64   32 
    iloadx   u64   1 0
    setret   u64   
    jump           #1423 
#1425:
#1424:
    loadimm  u64   0 
    setret   u64   
    jump           #1423 
;------------------------
#1423:
    return         
end

proc pci_parse.parseline
    param    i64   .lineno 
    local    mem 32 .p 
    local    i64   .mode 
    local    i64   .size 
    local    i64   .mode2 
    local    i64   .size2 
    local    i64   .opcode 
    local    i64   .labelno 
    local    i64   .i 
;------------------------
    loadref  u64   .p 
    clear    mem 32 
    loadimm  i64   0 
    store    i64   .mode 
    loadimm  i64   0 
    store    i64   .size 
    load     i64   .lineno 
    store    i64   pci_parse.pcllineno 
    setcall        1
    load     i64   .lineno 
    setarg   i64   1
    callp          pci_lex.startlex 1 0
    setcall        0
    callp          pci_lex.lex 0 0
    loadref  u64   pci_decls.lx 
    iload    i64   
    loadimm  i64   2 
    jumpeq   i64   #1428 1
    loadimm  i64   3 
    jumpeq   i64   #1429 1
    loadimm  i64   12 
    jumpeq   i64   #1430 
    jump           #1431 
#1428:
    loadref  u64   pci_decls.lx 
    loadimm  i64   48 
    iloadx   i64   1 0
    double         
    loadref  u64   .p 
    loadimm  i64   0 
    istorex  u8    1 0
    store    i64   .opcode 
    load     i64   .opcode 
    loadimm  i64   0 
    jumpeq   i64   #1433 1
    loadimm  i64   5 
    jumpeq   i64   #1434 1
    loadimm  i64   13 
    jumpeq   i64   #1434 1
    loadimm  i64   9 
    jumpeq   i64   #1434 1
    loadimm  i64   8 
    jumpeq   i64   #1434 
    jump           #1435 
#1433:
    setcall        1
    setcall        2
    loadref  u64   pci_decls.lx 
    loadimm  i64   24 
    iloadx   u64   1 0
    setarg   u64   2
    loadimm  u64   "Unknown opcode:"
    setarg   u64   1
    callf    u64   $pci.addstr 2 0
    setarg   u64   1
    callf    i64   pci_support.serror 1 0
    unload   i64   
    jump           #1432 
#1434:
    setcall        2
    loadimm  i64   0 
    setarg   i64   2
    loadref  u64   .p 
    setarg   u64   1
    callp          pci_parse.processop 2 0
    jump           #1426 
    jump           #1432 
#1435:
#1432:
    jump           #1427 
#1429:
    load     u64   pci_parse.stproc 
    jumpt    u64   #1438 
    setcall        1
    loadimm  u64   "Label outside proc"
    setarg   u64   1
    callf    i64   pci_support.serror 1 0
    unload   i64   
#1438:
#1437:
    loadref  u64   pci_decls.lx 
    loadimm  i64   8 
    iloadx   i64   1 0
    store    i64   .labelno 
    load     i64   .labelno 
    loadimm  i64   15000 
    jumple   i64   #1441 
    setcall        1
    loadimm  u64   "Label value too high"
    setarg   u64   1
    callf    i64   pci_support.serror 1 0
    unload   i64   
#1441:
#1440:
    loadref  u64   pci_decls.highlabel 
    load     i64   .labelno 
    maxto    i64   
    loadref  u64   pci_decls.labeltable 
    load     i64   .labelno 
    iloadx   i32   4 -4
    loadimm  i64   0 
    jumple   i64   #1444 
    setcall        1
    setcall        2
    setcall        2
    loadimm  u64   0 
    setarg   u64   2
    load     i64   .labelno 
    setarg   i64   1
    callf    u64   msys.strint 2 0
    setarg   u64   2
    loadimm  u64   "Dupl label:"
    setarg   u64   1
    callf    u64   $pci.addstr 2 0
    setarg   u64   1
    callf    i64   pci_support.serror 1 0
    unload   i64   
#1444:
#1443:
    load     i64   pci_decls.npcl 
    loadimm  i64   1 
    add      i64   
    loadref  u64   pci_decls.labeltable 
    load     i64   .labelno 
    istorex  i32   4 -4
    loadimm  i64   1 
    store    i64   .i 
#1446:
    load     u64   pci_decls.pcllabels 
    load     i64   pci_decls.npcl 
    addptrx  mem 16 16 0
    load     i64   .i 
    iloadx   u16   2 -2
    loadimm  i64   0 
    jumpne   i64   #1451 
    load     i64   .labelno 
    load     u64   pci_decls.pcllabels 
    load     i64   pci_decls.npcl 
    addptrx  mem 16 16 0
    load     i64   .i 
    istorex  u16   2 -2
    jump           #1448 
#1451:
#1450:
#1447:
    forup          #1446 1
    opnd           .i 
    opnd           8 
#1449:
    callp          msys.m$print_startcon 0 0
    loadimm  u64   "(More than 4 labels for this instr, line:"
    callp          msys.m$print_str_nf 1 0
    loadref  u64   pci_decls.lx 
    loadimm  i64   40 
    iloadx   i64   1 0
    callp          msys.m$print_i64_nf 1 0
    callp          msys.m$print_newline 0 0
    callp          msys.m$print_end 0 0
#1448:
    setcall        0
    callp          pci_lex.lex 0 0
    setcall        1
    loadimm  i64   9 
    setarg   i64   1
    callp          pci_parse.checksymbol 1 0
    setcall        0
    callp          pci_lex.lex 0 0
    jump           #1426 
    jump           #1427 
#1430:
    jump           #1426 
    jump           #1427 
#1431:
    setcall        1
    loadimm  u64   "Bad line"
    setarg   u64   1
    callf    i64   pci_support.serror 1 0
    unload   i64   
#1427:
    setcall        0
    callp          pci_lex.lex 0 0
    setcall        2
    loadref  u64   .size 
    setarg   u64   2
    loadref  u64   .p 
    loadimm  i64   1 
    addptrx  u64   1 0
    setarg   u64   1
    callp          pci_parse.readmode 2 0
    load     i64   .opcode 
    loadimm  i64   132 
    jumpeq   i64   #1455 1
    loadimm  i64   133 
    jumpeq   i64   #1455 1
    loadimm  i64   134 
    jumpeq   i64   #1455 1
    loadimm  i64   135 
    jumpeq   i64   #1455 1
    loadimm  i64   136 
    jumpeq   i64   #1455 1
    loadimm  i64   137 
    jumpeq   i64   #1455 
    jump           #1456 
#1455:
    setcall        2
    loadref  u64   .size2 
    setarg   u64   2
    loadref  u64   .p 
    loadimm  i64   2 
    addptrx  u64   1 0
    setarg   u64   1
    callp          pci_parse.readmode 2 0
    loadref  u64   .p 
    loadimm  i64   2 
    iloadx   u8    1 0
    loadimm  i64   5 
    jumpne   i64   #1458 
    setcall        1
    loadimm  u64   "Mem?"
    setarg   u64   1
    callf    i64   pci_support.serror 1 0
    unload   i64   
#1458:
#1457:
    setcall        2
    loadimm  i64   0 
    setarg   i64   2
    loadref  u64   .p 
    setarg   u64   1
    callp          pci_parse.processop 2 0
    load     i64   .opcode 
    store    i64   pci_parse.lastopcode 
    jump           #1426 
    jump           #1454 
#1456:
#1454:
    loadref  u64   pci_tables.pclmain 
    load     i64   .opcode 
    iloadx   u8    1 -1
    jumpf    i64   #1461 
    setcall        2
    loadref  u64   pci_tables.pclmain 
    load     i64   .opcode 
    iloadx   u8    1 -1
    setarg   i64   2
    loadref  u64   .p 
    setarg   u64   1
    callp          pci_parse.readopnd 2 0
    load     i64   .opcode 
    loadimm  i64   1 
    jumpne   i64   #1463 
    loadref  u64   pci_decls.lx 
    iload    i64   
    loadimm  i64   8 
    jumpne   i64   #1463 
    loadimm  u64   1 
    loadref  u64   .p 
    loadimm  i64   16 
    iloadx   u64   1 0
    loadimm  i64   11 
    addptrx  u64   1 0
    loadimm  i64   1 
    storebit       
    setcall        0
    callp          pci_lex.lex 0 0
#1463:
#1462:
#1461:
#1460:
    loadref  u64   pci_tables.pclattr 
    load     i64   .opcode 
    iloadx   u8    1 -1
    jumpf    i64   #1465 
    setcall        2
    loadref  u64   pci_tables.pclattr 
    load     i64   .opcode 
    iloadx   u8    1 -1
    setarg   i64   2
    loadref  u64   .p 
    setarg   u64   1
    callp          pci_parse.readattrs 2 0
#1465:
#1464:
    load     i64   .size 
    jumpf    i64   #1467 
    load     i64   .size 
    loadimm  i64   4294967295 
    jumple   i64   #1469 
    setcall        1
    loadimm  u64   "BLOCK SIZE TOO BIG"
    setarg   u64   1
    callf    i64   pci_support.serror 1 0
    unload   i64   
#1469:
#1468:
    load     i64   .size 
    loadref  u64   .p 
    loadimm  i64   4 
    istorex  u32   1 0
#1467:
#1466:
    setcall        1
    loadimm  i64   12 
    setarg   i64   1
    callp          pci_parse.checksymbol 1 0
    setcall        2
    loadimm  i64   0 
    setarg   i64   2
    loadref  u64   .p 
    setarg   u64   1
    callp          pci_parse.processop 2 0
    load     i64   .opcode 
    store    i64   pci_parse.lastopcode 
;------------------------
#1426:
    return         
end

proc pci_parse.readmode
    param    u64   .m 
    param    u64   .size 
;------------------------
    loadimm  i64   0 
    load     u64   .m 
    istore   u8    
    loadimm  i64   0 
    load     u64   .size 
    istore   i64   
    loadref  u64   pci_decls.lx 
    iload    i64   
    loadimm  i64   2 
    jumpne   i64   #1473 
    loadref  u64   pci_decls.lx 
    loadimm  i64   56 
    iloadx   i64   1 0
    jumpf    i64   #1473 
    loadref  u64   pci_decls.lx 
    loadimm  i64   56 
    iloadx   i64   1 0
    load     u64   .m 
    istore   u8    
    load     u64   .m 
    iload    u8    
    loadimm  i64   12 
    jumpne   i64   #1475 
    loadimm  i64   0 
    load     u64   .m 
    istore   u8    
#1475:
#1474:
    setcall        0
    callp          pci_lex.lex 0 0
    load     u64   .m 
    iload    u8    
    loadimm  i64   5 
    jumpne   i64   #1477 
    loadref  u64   pci_decls.lx 
    iload    i64   
    loadimm  i64   4 
    jumpeq   i64   #1479 
    setcall        1
    loadimm  u64   "Mem size missing"
    setarg   u64   1
    callf    i64   pci_support.serror 1 0
    unload   i64   
#1479:
#1478:
    loadref  u64   pci_decls.lx 
    loadimm  i64   8 
    iloadx   i64   1 0
    load     u64   .size 
    istore   i64   
    setcall        0
    callp          pci_lex.lex 0 0
#1477:
#1476:
#1473:
#1472:
;------------------------
#1471:
    return         
end

proc pci_parse.readint
    rettype  i64   
    local    i64   .x 
;------------------------
    loadref  u64   pci_decls.lx 
    iload    i64   
    loadimm  i64   4 
    jumpne   i64   #1483 
    loadref  u64   pci_decls.lx 
    loadimm  i64   8 
    iloadx   i64   1 0
    store    i64   .x 
    setcall        0
    callp          pci_lex.lex 0 0
    jump           #1482 
#1483:
    setcall        1
    loadimm  u64   "Intconst expected"
    setarg   u64   1
    callf    i64   pci_support.serror 1 0
    unload   i64   
#1482:
    load     i64   .x 
    setret   i64   
    jump           #1481 
;------------------------
#1481:
    return         
end

proc pci_parse.readattrs
    param    u64   .p 
    param    i64   .nattrs 
    local    i64   .i 
;------------------------
    loadimm  i64   1 
    store    i64   .i 
    load     i64   .nattrs 
    loadimm  i64   1 
    jumplt   i64   #1488 
#1486:
    loadref  u64   pci_decls.lx 
    iload    i64   
    loadimm  i64   12 
    jumpne   i64   #1490 
    jump           #1488 
#1490:
#1489:
    loadref  u64   pci_decls.lx 
    iload    i64   
    loadimm  i64   4 
    jumpeq   i64   #1492 
    setcall        1
    loadimm  u64   "Intconst expected"
    setarg   u64   1
    callf    i64   pci_support.serror 1 0
    unload   i64   
#1492:
#1491:
    load     i64   .i 
    loadimm  i64   1 
    jumpne   i64   #1494 
    loadref  u64   pci_decls.lx 
    loadimm  i64   8 
    iloadx   i64   1 0
    load     u64   .p 
    loadimm  i64   24 
    istorex  i32   1 0
    jump           #1493 
#1494:
    loadref  u64   pci_decls.lx 
    loadimm  i64   8 
    iloadx   i64   1 0
    load     u64   .p 
    loadimm  i64   28 
    istorex  i32   1 0
#1493:
    setcall        0
    callp          pci_lex.lex 0 0
#1487:
    forup          #1486 1
    opnd           .i 
    opnd           .nattrs 
#1488:
;------------------------
#1485:
    return         
end

proc pci_parse.readopnd
    param    u64   .p 
    param    i64   .flags 
    local    i64   .opndtype 
    local    i64   .labelno 
    local    u64   .q 
    local    u64   .d 
;------------------------
    load     u64   .p 
    loadimm  i64   16 
    addptrx  u64   1 0
    store    u64   .q 
    loadref  u64   pci_decls.lx 
    iload    i64   
    loadimm  i64   3 
    jumpeq   i64   #1497 1
    loadimm  i64   2 
    jumpeq   i64   #1498 1
    loadimm  i64   4 
    jumpeq   i64   #1499 1
    loadimm  i64   5 
    jumpeq   i64   #1500 1
    loadimm  i64   6 
    jumpeq   i64   #1501 1
    loadimm  i64   7 
    jumpeq   i64   #1501 1
    loadimm  i64   12 
    jumpeq   i64   #1502 
    jump           #1503 
#1497:
    loadref  u64   pci_decls.lx 
    loadimm  i64   8 
    iloadx   i64   1 0
    double         
    store    i64   .labelno 
    load     u64   .q 
    loadimm  i64   0 
    istorex  i64   1 0
    loadref  u64   pci_decls.highlabel 
    load     i64   .labelno 
    maxto    i64   
    loadref  u64   pci_decls.labeltable 
    load     i64   .labelno 
    iloadx   i32   4 -4
    loadimm  i64   0 
    jumpne   i64   #1505 
    loadimm  i64   -1 
    loadref  u64   pci_decls.labeltable 
    load     i64   .labelno 
    istorex  i32   4 -4
#1505:
#1504:
    load     i64   .flags 
    loadimm  i64   1 
    bitand   i64   
    jumpt    i64   #1507 
    jump           #1508 
    unload   u64   
#1507:
#1506:
    jump           #1496 
#1498:
    loadref  u64   pci_decls.lx 
    loadimm  i64   32 
    iloadx   u64   1 0
    double         
    load     u64   .q 
    loadimm  i64   0 
    istorex  u64   1 0
    store    u64   .d 
    load     i64   .flags 
    loadimm  i64   16 
    bitand   i64   
    jumpt    i64   #1510 
    jump           #1508 
    unload   u64   
#1510:
#1509:
    load     u64   .p 
    loadimm  i64   1 
    iloadx   u8    1 0
    loadimm  i64   0 
    jumpne   i64   #1512 
    load     u64   .d 
    loadimm  i64   25 
    iloadx   u8    1 0
    load     u64   .p 
    loadimm  i64   1 
    istorex  u8    1 0
#1512:
#1511:
    jump           #1496 
#1499:
    loadref  u64   pci_decls.lx 
    loadimm  i64   8 
    iloadx   i64   1 0
    load     u64   .q 
    loadimm  i64   0 
    istorex  i64   1 0
    load     u64   .p 
    loadimm  i64   1 
    iloadx   u8    1 0
    loadimm  i64   0 
    jumpne   i64   #1514 
    loadimm  i64   1 
    load     u64   .p 
    loadimm  i64   1 
    istorex  u8    1 0
#1514:
#1513:
    load     i64   .flags 
    loadimm  i64   2 
    bitand   i64   
    jumpt    i64   #1516 
    jump           #1508 
    unload   u64   
#1516:
#1515:
    jump           #1496 
#1500:
    loadref  u64   pci_decls.lx 
    loadimm  i64   16 
    iloadx   r64   1 0
    load     u64   .q 
    loadimm  i64   0 
    istorex  r64   1 0
    load     u64   .p 
    loadimm  i64   1 
    iloadx   u8    1 0
    loadimm  i64   0 
    jumpne   i64   #1518 
    loadimm  i64   3 
    load     u64   .p 
    loadimm  i64   1 
    istorex  u8    1 0
    jump           #1517 
#1518:
    load     u64   .p 
    loadimm  i64   1 
    iloadx   u8    1 0
    loadimm  i64   4 
    jumpne   i64   #1519 
    load     u64   .q 
    iload    r64   
    fnarrow  r32 r64 
    load     u64   .q 
    loadimm  i64   0 
    istorex  r32   1 0
#1519:
#1517:
    load     i64   .flags 
    loadimm  i64   4 
    bitand   i64   
    jumpt    i64   #1521 
    jump           #1508 
    unload   u64   
#1521:
#1520:
    jump           #1496 
#1501:
    loadref  u64   pci_decls.lx 
    loadimm  i64   24 
    iloadx   u64   1 0
    load     u64   .q 
    loadimm  i64   0 
    istorex  u64   1 0
    load     u64   .p 
    loadimm  i64   1 
    iloadx   u8    1 0
    loadimm  i64   0 
    jumpne   i64   #1523 
    loadimm  i64   2 
    load     u64   .p 
    loadimm  i64   1 
    istorex  u8    1 0
#1523:
#1522:
    load     i64   .flags 
    loadimm  i64   8 
    bitand   i64   
    jumpt    i64   #1525 
    jump           #1508 
    unload   u64   
#1525:
#1524:
    jump           #1496 
#1502:
    load     i64   .flags 
    loadimm  i64   32 
    bitand   i64   
    jumpt    i64   #1527 
    setcall        1
    loadimm  u64   "Missing opnd"
    setarg   u64   1
    callf    i64   pci_support.serror 1 0
    unload   i64   
#1527:
#1526:
    jump           #1496 
#1503:
;error::
#1508:
    setcall        1
    loadimm  u64   "Bad opnd"
    setarg   u64   1
    callf    i64   pci_support.serror 1 0
    unload   i64   
#1496:
    loadref  u64   pci_decls.lx 
    iload    i64   
    load     u64   .p 
    loadimm  i64   3 
    istorex  u8    1 0
    setcall        0
    callp          pci_lex.lex 0 0
;------------------------
#1495:
    return         
end

proc pci_parse.checkdefined
    param    u64   .p 
    param    i64   .idtype 
    local    u64   .d 
;------------------------
    load     u64   .p 
    loadimm  i64   16 
    iloadx   u64   1 0
    store    u64   .d 
    load     u64   .d 
    loadimm  i64   12 
    iloadx   u8    1 0
    jumpf    i64   #1532 
    setcall        1
    setcall        2
    load     u64   .d 
    iload    u64   
    setarg   u64   2
    loadimm  u64   "Dupl name: "
    setarg   u64   1
    callf    u64   $pci.addstr 2 0
    setarg   u64   1
    callf    i64   pci_support.serror 1 0
    unload   i64   
#1532:
#1531:
    load     i64   .idtype 
    load     u64   .d 
    loadimm  i64   12 
    istorex  u8    1 0
    load     u64   .p 
    loadimm  i64   1 
    iloadx   u8    1 0
    load     u64   .d 
    loadimm  i64   25 
    istorex  u8    1 0
    load     u64   .p 
    loadimm  i64   1 
    iloadx   u8    1 0
    loadimm  i64   5 
    jumpne   i64   #1535 
    setcall        1
    load     u64   .p 
    setarg   u64   1
    callf    i64   pci_parse.getpclsize 1 0
    load     u64   .d 
    loadimm  i64   28 
    istorex  u32   1 0
    jump           #1534 
#1535:
    loadimm  i64   8 
    load     u64   .d 
    loadimm  i64   28 
    istorex  u32   1 0
#1534:
;------------------------
#1530:
    return         
end

proc pci_parse.checksymbol
    param    i64   .symbol 
;------------------------
    loadref  u64   pci_decls.lx 
    iload    i64   
    load     i64   .symbol 
    jumpeq   i64   #1538 
    callp          msys.m$print_startcon 0 0
    loadimm  u64   "'#' expected not '#'"
    callp          msys.m$print_setfmt 1 0
    loadref  u64   pci_tables.symbolnames 
    load     i64   .symbol 
    iloadx   u64   8 -8
    callp          msys.m$print_str_nf 1 0
    loadref  u64   pci_tables.symbolnames 
    loadref  u64   pci_decls.lx 
    iload    i64   
    iloadx   u64   8 -8
    callp          msys.m$print_str_nf 1 0
    callp          msys.m$print_newline 0 0
    callp          msys.m$print_end 0 0
    setcall        1
    loadimm  u64   ""
    setarg   u64   1
    callf    i64   pci_support.serror 1 0
    unload   i64   
#1538:
#1537:
;------------------------
#1536:
    return         
end

proc pci_parse.dolocal
    param    u64   .p 
    local    u64   .d 
;------------------------
    load     u64   .p 
    loadimm  i64   16 
    iloadx   u64   1 0
    store    u64   .d 
    setcall        2
    loadimm  i64   3 
    setarg   i64   2
    load     u64   .p 
    setarg   u64   1
    callp          pci_parse.checkdefined 2 0
    load     u64   pci_parse.stproc 
    loadimm  i64   14 
    addptrx  u64   1 0
    incrto   u16   1
    load     u64   .d 
    loadimm  i64   25 
    iloadx   u8    1 0
    loadimm  i64   0 
    jumpne   i64   #1543 
    loadimm  i64   1 
    load     u64   .d 
    loadimm  i64   25 
    istorex  u8    1 0
#1543:
#1542:
    load     i64   pci_parse.framebytes 
    loadimm  i64   8 
    div      i64   
    loadimm  i64   1 
    add      i64   
    load     u64   .d 
    loadimm  i64   16 
    istorex  i64   1 0
    loadref  u64   pci_parse.framebytes 
    setcall        2
    loadimm  i64   8 
    setarg   i64   2
    load     u64   .d 
    loadimm  i64   28 
    iloadx   u32   1 0
    setarg   i64   1
    callf    i64   mlib.roundtoblock 2 0
    addto    i64   
;------------------------
#1541:
    return         
end

proc pci_parse.doparam
    param    u64   .p 
    local    u64   .d 
;------------------------
    load     u64   .p 
    loadimm  i64   16 
    iloadx   u64   1 0
    store    u64   .d 
    setcall        2
    loadimm  i64   4 
    setarg   i64   2
    load     u64   .p 
    setarg   u64   1
    callp          pci_parse.checkdefined 2 0
    load     u64   pci_parse.stproc 
    loadimm  i64   13 
    addptrx  u64   1 0
    incrto   u8    1
    load     u64   .d 
    loadimm  i64   25 
    iloadx   u8    1 0
    loadimm  i64   0 
    jumpne   i64   #1546 
    loadimm  i64   1 
    load     u64   .d 
    loadimm  i64   25 
    istorex  u8    1 0
#1546:
#1545:
    load     u64   .d 
    loadimm  i64   25 
    iloadx   u8    1 0
    loadimm  i64   5 
    jumpne   i64   #1548 
    loadref  u64   pci_parse.parambytes 
    loadimm  i64   8 
    addto    i64   
    jump           #1547 
#1548:
    loadref  u64   pci_parse.parambytes 
    load     u64   .d 
    loadimm  i64   28 
    iloadx   u32   1 0
    addto    i64   
#1547:
    load     i64   pci_parse.parambytes 
    loadimm  i64   8 
    div      i64   
    loadimm  i64   1 
    add      i64   
    neg      i64   
    load     u64   .d 
    loadimm  i64   16 
    istorex  i64   1 0
;------------------------
#1544:
    return         
end

proc pci_parse.dostatic
    param    u64   .p 
    local    u64   .d 
;------------------------
    load     u64   .p 
    loadimm  i64   16 
    iloadx   u64   1 0
    store    u64   .d 
    setcall        2
    loadimm  i64   2 
    setarg   i64   2
    load     u64   .p 
    setarg   u64   1
    callp          pci_parse.checkdefined 2 0
    load     u8    $pci.passlevel 
    loadimm  i64   3 
    jumpne   i64   #1551 
    setcall        1
    load     u64   .d 
    loadimm  i64   28 
    iloadx   u32   1 0
    setarg   i64   1
    callf    u64   mlib.allocmem 1 0
    load     u64   .d 
    loadimm  i64   16 
    istorex  u64   1 0
    load     u64   .d 
    loadimm  i64   25 
    iloadx   u8    1 0
    loadimm  i64   0 
    jumpne   i64   #1553 
    loadimm  i64   1 
    load     u64   .d 
    loadimm  i64   25 
    istorex  u8    1 0
#1553:
#1552:
    setcall        2
    load     u64   .d 
    loadimm  i64   28 
    iloadx   u32   1 0
    setarg   i64   2
    load     u64   .d 
    loadimm  i64   16 
    iloadx   u64   1 0
    setarg   u64   1
    callp          mlib.pcm_clearmem 2 0
#1551:
#1550:
    load     u64   .p 
    iload    u8    
    loadimm  i64   10 
    jumpne   i64   #1555 
    load     u64   .p 
    loadimm  i64   16 
    iloadx   u64   1 0
    store    u64   pci_parse.ststatic 
    loadimm  i64   0 
    store    i64   pci_parse.nstaticbytes 
    jump           #1554 
#1555:
    loadimm  u64   0 
    store    u64   pci_parse.ststatic 
#1554:
;------------------------
#1549:
    return         
end

proc pci_parse.doidata
    param    u64   .p 
    local    i64   .n 
    local    i64   .length 
    local    u64   .q 
    local    u64   .pdest 
    local    u64   .pdest64 
    local    r32   .sx 
;------------------------
    load     i64   pci_parse.lastopcode 
    loadimm  i64   10 
    jumpeq   i64   #1558 1
    loadimm  i64   12 
    jumpeq   i64   #1558 
    setcall        1
    loadimm  u64   "data out of sequence"
    setarg   u64   1
    callf    i64   pci_support.serror 1 0
    unload   i64   
#1558:
#1557:
    load     u64   pci_parse.ststatic 
    loadimm  u64   0 
    jumpne   u64   #1561 
    setcall        1
    loadimm  u64   "No current istatic"
    setarg   u64   1
    callf    i64   pci_support.serror 1 0
    unload   i64   
#1561:
#1560:
    load     u64   .p 
    loadimm  i64   16 
    addptrx  u64   1 0
    store    u64   .q 
    loadref  u64   pci_tables.typesizes 
    load     u64   .p 
    loadimm  i64   1 
    iloadx   u8    1 0
    iloadx   u8    1 0
    store    i64   .n 
    load     u64   .p 
    loadimm  i64   1 
    iloadx   u8    1 0
    loadimm  i64   5 
    jumpne   i64   #1564 
    load     u64   .p 
    loadimm  i64   4 
    iloadx   u32   1 0
    store    i64   .n 
#1564:
#1563:
    load     u64   .p 
    loadimm  i64   3 
    iloadx   u8    1 0
    loadimm  i64   7 
    jumpne   i64   #1566 
    setcall        1
    load     u64   .q 
    iload    u64   
    setarg   u64   1
    callf    i64   strlen 1 0
    store    i64   .length 
    load     i64   .n 
    jumpf    i64   #1568 
    load     i64   .n 
    load     i64   .length 
    jumpeq   i64   #1568 
    setcall        1
    loadimm  u64   "data/char size mismatch"
    setarg   u64   1
    callf    i64   pci_support.serror 1 0
    unload   i64   
#1568:
#1567:
    load     i64   .n 
    loadimm  i64   0 
    jumpne   i64   #1571 
    load     i64   .length 
    store    i64   .n 
#1571:
#1570:
    jump           #1565 
#1566:
    load     i64   .n 
    loadimm  i64   0 
    jumpne   i64   #1572 
    loadimm  i64   8 
    store    i64   .n 
    jump           #1565 
#1572:
    load     i64   .n 
    loadimm  i64   1 
    jumpeq   i64   #1573 1
    loadimm  i64   2 
    jumpeq   i64   #1573 1
    loadimm  i64   4 
    jumpeq   i64   #1573 1
    loadimm  i64   8 
    jumpeq   i64   #1573 
    setcall        1
    loadimm  u64   "data size not 1/2/4/8"
    setarg   u64   1
    callf    i64   pci_support.serror 1 0
    unload   i64   
#1573:
#1565:
    load     i64   pci_parse.nstaticbytes 
    load     i64   .n 
    add      i64   
    load     u64   pci_parse.ststatic 
    loadimm  i64   28 
    iloadx   u32   1 0
    jumple   i64   #1576 
    setcall        1
    loadimm  u64   "Too much data for static"
    setarg   u64   1
    callf    i64   pci_support.serror 1 0
    unload   i64   
#1576:
#1575:
    load     u64   pci_parse.ststatic 
    loadimm  i64   16 
    iloadx   u64   1 0
    load     i64   pci_parse.nstaticbytes 
    addptrx  u64   1 0
    store    u64   .pdest 
    load     u8    $pci.passlevel 
    loadimm  i64   3 
    jumpne   i64   #1579 
    load     u64   .p 
    loadimm  i64   3 
    iloadx   u8    1 0
    loadimm  i64   4 
    jumpeq   i64   #1581 1
    loadimm  i64   5 
    jumpeq   i64   #1582 1
    loadimm  i64   7 
    jumpeq   i64   #1583 1
    loadimm  i64   6 
    jumpeq   i64   #1584 1
    loadimm  i64   3 
    jumpeq   i64   #1585 1
    loadimm  i64   2 
    jumpeq   i64   #1586 
    jump           #1587 
#1581:
    setcall        3
    load     i64   .n 
    setarg   u64   3
    load     u64   .q 
    setarg   u64   2
    load     u64   .pdest 
    setarg   u64   1
    callp          memcpy 3 0
    jump           #1580 
#1582:
    load     i64   .n 
    loadimm  i64   8 
    jumpeq   i64   #1589 1
    loadimm  i64   4 
    jumpeq   i64   #1590 
    jump           #1591 
#1589:
    setcall        3
    loadimm  u64   8 
    setarg   u64   3
    load     u64   .q 
    setarg   u64   2
    load     u64   .pdest 
    setarg   u64   1
    callp          memcpy 3 0
    jump           #1588 
#1590:
    load     u64   .q 
    iload    r64   
    fnarrow  r32 r64 
    store    r32   .sx 
    setcall        3
    loadimm  u64   4 
    setarg   u64   3
    loadref  u64   .sx 
    setarg   u64   2
    load     u64   .pdest 
    setarg   u64   1
    callp          memcpy 3 0
    jump           #1588 
#1591:
    setcall        1
    loadimm  u64   "real can't fit in 1-2 bytes"
    setarg   u64   1
    callf    i64   pci_support.serror 1 0
    unload   i64   
#1588:
    jump           #1580 
#1583:
    setcall        3
    load     i64   .n 
    setarg   u64   3
    load     u64   .q 
    iload    u64   
    setarg   u64   2
    load     u64   .pdest 
    setarg   u64   1
    callp          memcpy 3 0
    jump           #1580 
#1584:
    load     i64   .n 
    loadimm  i64   8 
    jumpeq   i64   #1594 
    setcall        1
    loadimm  u64   "String data?"
    setarg   u64   1
    callf    i64   pci_support.serror 1 0
    unload   i64   
#1594:
#1593:
    setcall        3
    loadimm  u64   8 
    setarg   u64   3
    load     u64   .q 
    setarg   u64   2
    load     u64   .pdest 
    setarg   u64   1
    callp          memcpy 3 0
    jump           #1580 
#1585:
    load     i64   .n 
    loadimm  i64   8 
    jumpeq   i64   #1597 
    setcall        1
    loadimm  u64   "Label data?"
    setarg   u64   1
    callf    i64   pci_support.serror 1 0
    unload   i64   
#1597:
#1596:
    load     u64   .q 
    iload    i64   
    load     u64   .pdest 
    istore   u8    
    setcall        1
    load     u64   .pdest 
    setarg   u64   1
    callp          pci_support.addlabelref 1 0
    jump           #1580 
#1586:
    load     i64   .n 
    loadimm  i64   8 
    jumpeq   i64   #1600 
    setcall        1
    loadimm  u64   "Name data?"
    setarg   u64   1
    callf    i64   pci_support.serror 1 0
    unload   i64   
#1600:
#1599:
    load     u64   .q 
    iload    u64   
    load     u64   .pdest 
    istore   u64   
    setcall        1
    load     u64   .pdest 
    setarg   u64   1
    callp          pci_support.adddataref 1 0
    jump           #1580 
#1587:
#1580:
#1579:
#1578:
    loadref  u64   pci_parse.nstaticbytes 
    load     i64   .n 
    addto    i64   
;------------------------
#1556:
    return         
end

proc pci_parse.getpclsize
    rettype  i64   
    param    u64   .p 
;------------------------
    load     u64   .p 
    loadimm  i64   1 
    iloadx   u8    1 0
    loadimm  i64   5 
    jumpne   i64   #1604 
    load     u64   .p 
    loadimm  i64   4 
    iloadx   u32   1 0
    setret   i64   
    jump           #1602 
#1604:
#1603:
    loadimm  i64   0 
    setret   i64   
    jump           #1602 
;------------------------
#1602:
    return         
end

proc pci_parse.doproc
    param    u64   .p 
;------------------------
    load     u64   pci_parse.stproc 
    jumpt    u64   #1608 
    load     u64   pci_parse.stextproc 
    jumpf    u64   #1607 
#1608:
    setcall        1
    loadimm  u64   "\"end\" missing, or nested"
    setarg   u64   1
    callf    i64   pci_support.serror 1 0
    unload   i64   
#1607:
#1606:
    loadimm  i64   0 
    double         
    store    i64   pci_parse.parambytes 
    store    i64   pci_parse.framebytes 
    load     u64   .p 
    loadimm  i64   16 
    iloadx   u64   1 0
    store    u64   pci_parse.stproc 
    setcall        2
    loadimm  u64   "main"
    setarg   u64   2
    load     u64   pci_parse.stproc 
    iload    u64   
    setarg   u64   1
    callf    i64   mlib.eqstring 2 0
    jumpf    i64   #1611 
    loadimm  u64   1 
    load     u64   pci_parse.stproc 
    loadimm  i64   11 
    addptrx  u64   1 0
    loadimm  i64   1 
    storebit       
    load     u64   pci_parse.stproc 
    store    u64   pci_parse.stmain 
    load     i64   pci_decls.npcl 
    loadimm  i64   1 
    add      i64   
    store    i64   pci_parse.pcmain 
#1611:
#1610:
    setcall        2
    loadimm  i64   1 
    setarg   i64   2
    load     u64   .p 
    setarg   u64   1
    callp          pci_parse.checkdefined 2 0
    load     i64   pci_decls.npcl 
    loadimm  i64   1 
    add      i64   
    load     u64   pci_parse.stproc 
    loadimm  i64   16 
    istorex  i64   1 0
    loadimm  i64   1 
    store    i64   pci_parse.entrypending 
;------------------------
#1605:
    return         
end

proc pci_parse.doextproc
    param    u64   .p 
;------------------------
    load     u64   pci_parse.stproc 
    jumpt    u64   #1616 
    load     u64   pci_parse.stextproc 
    jumpf    u64   #1615 
#1616:
    setcall        1
    loadimm  u64   "\"end\" missing, or nested"
    setarg   u64   1
    callf    i64   pci_support.serror 1 0
    unload   i64   
#1615:
#1614:
    load     u64   .p 
    loadimm  i64   16 
    iloadx   u64   1 0
    store    u64   pci_parse.stextproc 
    setcall        2
    loadimm  i64   5 
    setarg   i64   2
    load     u64   .p 
    setarg   u64   1
    callp          pci_parse.checkdefined 2 0
    load     i64   pci_decls.nextprocs 
    loadimm  i64   500 
    jumple   i64   #1619 
    setcall        1
    loadimm  u64   "Too many imports"
    setarg   u64   1
    callf    i64   pci_support.serror 1 0
    unload   i64   
#1619:
#1618:
    loadref  u64   pci_decls.nextprocs 
    incrto   i64   1
    load     u64   pci_parse.stextproc 
    loadref  u64   pci_decls.extdef 
    load     i64   pci_decls.nextprocs 
    istorex  u64   8 -8
    load     i64   pci_decls.nextprocs 
    load     u64   pci_parse.stextproc 
    loadimm  i64   16 
    istorex  i64   1 0
    loadimm  u64   1 
    load     u64   pci_parse.stextproc 
    loadimm  i64   11 
    addptrx  u64   1 0
    loadimm  i64   0 
    storebit       
    load     u64   .p 
    loadimm  i64   1 
    iloadx   u8    1 0
    load     u64   pci_parse.stextproc 
    loadimm  i64   25 
    istorex  u8    1 0
    load     u64   .p 
    loadimm  i64   1 
    iloadx   u8    1 0
    loadref  u64   pci_decls.extrettype 
    load     i64   pci_decls.nextprocs 
    istorex  u8    1 -1
;------------------------
#1613:
    return         
end

proc pci_parse.doextparam
    param    u64   .p 
    local    i64   .index 
;------------------------
    load     u64   pci_parse.stextproc 
    loadimm  u64   0 
    jumpne   u64   #1623 
    setcall        1
    loadimm  u64   "\"extproc missing"
    setarg   u64   1
    callf    i64   pci_support.serror 1 0
    unload   i64   
#1623:
#1622:
    load     u64   pci_parse.stextproc 
    loadimm  i64   16 
    iloadx   i64   1 0
    store    i64   .index 
    loadref  u64   pci_decls.extnparams 
    load     i64   .index 
    iloadx   u8    1 -1
    loadimm  i64   16 
    jumplt   i64   #1626 
    setcall        1
    loadimm  u64   "Too many extparams"
    setarg   u64   1
    callf    i64   pci_support.serror 1 0
    unload   i64   
#1626:
#1625:
    loadref  u64   pci_decls.extnparams 
    load     i64   .index 
    addptrx  u8    1 -1
    incrto   u8    1
    load     u64   .p 
    loadimm  i64   1 
    iloadx   u8    1 0
    loadref  u64   pci_decls.exttypes 
    load     i64   .index 
    addptrx  mem 16 16 -16
    loadref  u64   pci_decls.extnparams 
    load     i64   .index 
    iloadx   u8    1 -1
    istorex  u8    1 -1
;------------------------
#1621:
    return         
end

proc pci_parse.updateproc
    local    u64   .p 
;------------------------
    load     u64   pci_parse.stproc 
    loadimm  i64   11 
    iloadx   u8    1 0
    loadimm  i64   2 
    loadbit        
    jumpf    u64   #1630 
    jump           #1628 
#1630:
#1629:
    load     u64   pci_decls.pcltable 
    load     u64   pci_parse.stproc 
    loadimm  i64   16 
    iloadx   i64   1 0
    addptrx  mem 32 32 -32
    store    u64   .p 
    load     i64   pci_parse.framebytes 
    loadimm  i64   8 
    div      i64   
    double         
    load     u64   pci_parse.stproc 
    loadimm  i64   14 
    istorex  u16   1 0
    load     u64   .p 
    loadimm  i64   24 
    istorex  u16   1 0
    load     i64   pci_parse.parambytes 
    loadimm  i64   8 
    div      i64   
    double         
    load     u64   pci_parse.stproc 
    loadimm  i64   13 
    istorex  u8    1 0
    load     u64   .p 
    loadimm  i64   26 
    istorex  u16   1 0
    loadimm  u64   1 
    load     u64   pci_parse.stproc 
    loadimm  i64   11 
    addptrx  u64   1 0
    loadimm  i64   2 
    storebit       
;------------------------
#1628:
    return         
end

proc pci_parse.undefinedcheck
    local    u64   .d 
    local    i64   .$av_1 
    local    i64   .i 
;------------------------
    loadimm  i64   1 
    store    i64   .i 
    load     i64   pci_decls.highlabel 
    loadimm  i64   1 
    jumplt   i64   #1634 
#1632:
    loadref  u64   pci_decls.labeltable 
    load     i64   .i 
    iloadx   i32   4 -4
    loadimm  i64   -1 
    jumpne   i64   #1636 
    callp          msys.m$print_startcon 0 0
    loadimm  u64   "Undefined label: #"
    callp          msys.m$print_str_nf 1 0
    callp          msys.m$print_nogap 0 0
    load     i64   .i 
    callp          msys.m$print_i64_nf 1 0
    callp          msys.m$print_newline 0 0
    callp          msys.m$print_end 0 0
    loadimm  i64   1 
    store    i64   pci_parse.undefflag 
#1636:
#1635:
#1633:
    forup          #1632 1
    opnd           .i 
    opnd           pci_decls.highlabel 
#1634:
    loadimm  i64   0 
    store    i64   .i 
#1638:
    loadref  u64   pci_decls.hashtable 
    load     i64   .i 
    addptrx  mem 32 32 0
    store    u64   .d 
    load     u64   .d 
    loadimm  i64   8 
    iloadx   u8    1 0
    jumpf    i64   #1642 
    load     u64   .d 
    loadimm  i64   9 
    iloadx   u8    1 0
    load     u64   .d 
    loadimm  i64   10 
    iloadx   u8    1 0
    swapopnds      
    jumpne   i64   #1642 1
    load     u64   .d 
    loadimm  i64   12 
    iloadx   u8    1 0
    swapopnds      
    jumpne   i64   #1642 1
    loadimm  i64   0 
    jumpne   i64   #1642 
    callp          msys.m$print_startcon 0 0
    load     u64   .d 
    callp          msys.m$print_ptr_nf 1 0
    loadimm  u64   "Undefined:"
    callp          msys.m$print_str_nf 1 0
    load     u64   .d 
    iload    u64   
    callp          msys.m$print_str_nf 1 0
    callp          msys.m$print_newline 0 0
    callp          msys.m$print_end 0 0
    loadimm  i64   1 
    store    i64   pci_parse.undefflag 
#1642:
#1641:
#1639:
    forup          #1638 1
    opnd           .i 
    opnd           65535 
#1640:
;------------------------
#1631:
    return         
end

proc pci_parse.parseprogram
    local    i64   .i 
;------------------------
    setcall        0
    callp          pci_support.initpcl1 0 0
    loadimm  i64   0 
    store    i64   pci_parse.lastopcode 
    loadimm  i64   1 
    store    i64   .i 
    load     i64   pci_decls.nsourcelines 
    loadimm  i64   1 
    jumplt   i64   #1647 
#1645:
    setcall        1
    load     i64   .i 
    setarg   i64   1
    callp          pci_parse.parseline 1 0
#1646:
    forup          #1645 1
    opnd           .i 
    opnd           pci_decls.nsourcelines 
#1647:
    load     u64   pci_parse.stproc 
    jumpt    u64   #1650 
    load     u64   pci_parse.stextproc 
    jumpf    u64   #1649 
#1650:
    setcall        1
    loadimm  u64   "2:\"end\" missing"
    setarg   u64   1
    callf    i64   pci_support.serror 1 0
    unload   i64   
#1649:
#1648:
    setcall        0
    callp          pci_parse.undefinedcheck 0 0
;------------------------
#1644:
    return         
end

proc pci_parse.processop
    param    u64   .p 
    param    i64   .size 
    local    i64   .index 
;------------------------
    load     u64   .p 
    iload    u8    
    switch         #1654 1 137
    opnd           #1655 
#1654:
    swlabel        #1656 
    swlabel        #1658 
    swlabel        #1657 
    swlabel        #1659 
    swlabel        #1671 
    swlabel        #1679 
    swlabel        #1680 
    swlabel        #1681 
    swlabel        #1685 
    swlabel        #1665 
    swlabel        #1665 
    swlabel        #1666 
    swlabel        #1678 
    swlabel        #1676 
    swlabel        #1676 
    swlabel        #1676 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1675 
    swlabel        #1675 
    swlabel        #1689 
    swlabel        #1667 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1674 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1655 
    swlabel        #1677 
    endsw          
#1656:
    setcall        1
    load     u64   .p 
    setarg   u64   1
    callp          pci_parse.doproc 1 0
    load     u64   .p 
    iload    mem 32 
    load     u64   pci_decls.pcltable 
    loadref  u64   pci_decls.npcl 
    incrload i64   1
    istorex  mem 32 32 -32
    loadref  u64   pci_decls.lx 
    loadimm  i64   40 
    iloadx   i64   1 0
    load     u64   pci_decls.pcllines 
    load     i64   pci_decls.npcl 
    istorex  i32   4 -4
    jump           #1652 
    jump           #1653 
#1657:
    setcall        1
    load     u64   .p 
    setarg   u64   1
    callp          pci_parse.dolocal 1 0
    jump           #1652 
    jump           #1653 
#1658:
    setcall        1
    load     u64   .p 
    setarg   u64   1
    callp          pci_parse.doparam 1 0
    jump           #1652 
    jump           #1653 
#1659:
    load     u64   pci_parse.stproc 
    loadimm  i64   24 
    iloadx   u8    1 0
    loadimm  i64   3 
    jumplt   i64   #1661 
    setcall        1
    loadimm  u64   "Too many return types"
    setarg   u64   1
    callf    i64   pci_support.serror 1 0
    unload   i64   
#1661:
#1660:
    load     u64   .p 
    loadimm  i64   1 
    iloadx   u8    1 0
    loadimm  i64   0 
    jumpne   i64   #1664 
    loadimm  i64   1 
    load     u64   .p 
    loadimm  i64   1 
    istorex  u8    1 0
#1664:
#1663:
    load     u64   .p 
    loadimm  i64   1 
    iloadx   u8    1 0
    load     u64   pci_parse.stproc 
    loadimm  i64   25 
    addptrx  u64   1 0
    load     u64   pci_parse.stproc 
    loadimm  i64   24 
    addptrx  u64   1 0
    incrload u8    1
    istorex  u8    1 -1
    setcall        1
    load     u64   .p 
    setarg   u64   1
    callf    i64   pci_parse.getpclsize 1 0
    load     u64   pci_parse.stproc 
    loadimm  i64   28 
    istorex  u32   1 0
    jump           #1652 
    jump           #1653 
#1665:
    setcall        1
    load     u64   .p 
    setarg   u64   1
    callp          pci_parse.dostatic 1 0
    jump           #1652 
    jump           #1653 
#1666:
    setcall        1
    load     u64   .p 
    setarg   u64   1
    callp          pci_parse.doidata 1 0
    jump           #1652 
    jump           #1653 
#1667:
    load     u64   pci_parse.stproc 
    jumpt    u64   #1669 
    setcall        1
    loadimm  u64   "\"proc\" missing"
    setarg   u64   1
    callf    i64   pci_support.serror 1 0
    unload   i64   
#1669:
#1668:
    setcall        0
    callp          pci_parse.updateproc 0 0
    load     u64   pci_parse.stproc 
    loadimm  i64   14 
    iloadx   u16   1 0
    load     u64   .p 
    loadimm  i64   24 
    istorex  u16   1 0
    load     u64   pci_parse.stproc 
    loadimm  i64   13 
    iloadx   u8    1 0
    load     u64   .p 
    loadimm  i64   26 
    istorex  u16   1 0
    load     u64   pci_parse.stproc 
    loadimm  i64   24 
    iloadx   u8    1 0
    load     u64   .p 
    loadimm  i64   28 
    istorex  u16   1 0
    jump           #1653 
#1671:
    load     u64   pci_parse.stproc 
    jumpt    u64   #1673 
    setcall        1
    loadimm  u64   "\"proc\" missing"
    setarg   u64   1
    callf    i64   pci_support.serror 1 0
    unload   i64   
#1673:
#1672:
    setcall        0
    callp          pci_parse.updateproc 0 0
    loadimm  u64   0 
    store    u64   pci_parse.stproc 
    setcall        0
    callp          pci_lex.lex 0 0
    jump           #1652 
    jump           #1653 
#1674:
    jump           #1652 
    jump           #1653 
#1675:
    jump           #1652 
    jump           #1653 
#1676:
    jump           #1652 
    jump           #1653 
#1677:
    jump           #1652 
    jump           #1653 
#1678:
    setcall        0
    callp          pci_lex.lex 0 0
    setcall        1
    loadimm  i64   2 
    setarg   i64   1
    callp          pci_parse.checksymbol 1 0
    setcall        1
    loadref  u64   pci_decls.lx 
    loadimm  i64   32 
    iloadx   u64   1 0
    setarg   u64   1
    callp          pci_support.addlib 1 0
    setcall        0
    callp          pci_lex.lex 0 0
    jump           #1652 
    jump           #1653 
#1679:
    setcall        1
    load     u64   .p 
    setarg   u64   1
    callp          pci_parse.doextproc 1 0
    jump           #1652 
    jump           #1653 
#1680:
    setcall        1
    load     u64   .p 
    setarg   u64   1
    callp          pci_parse.doextparam 1 0
    jump           #1652 
    jump           #1653 
#1681:
    load     u64   pci_parse.stextproc 
    jumpt    u64   #1683 
    setcall        1
    loadimm  u64   "extvar?"
    setarg   u64   1
    callf    i64   pci_support.serror 1 0
    unload   i64   
#1683:
#1682:
    load     u64   pci_parse.stextproc 
    loadimm  i64   16 
    iloadx   i64   1 0
    store    i64   .index 
    loadref  u64   pci_decls.extnparams 
    load     i64   .index 
    iloadx   u8    1 -1
    loadimm  i64   1 
    add      i64   
    loadref  u64   pci_decls.extvariadic 
    load     i64   .index 
    istorex  u8    1 -1
    jump           #1652 
    jump           #1653 
#1685:
    load     u64   pci_parse.stextproc 
    jumpt    u64   #1687 
    setcall        1
    loadimm  u64   "\"extproc\" missing"
    setarg   u64   1
    callf    i64   pci_support.serror 1 0
    unload   i64   
#1687:
#1686:
    loadimm  u64   0 
    store    u64   pci_parse.stextproc 
    setcall        0
    callp          pci_lex.lex 0 0
    jump           #1652 
    jump           #1653 
#1689:
    load     u64   .p 
    loadimm  i64   1 
    iloadx   u8    1 0
    loadimm  i64   5 
    jumpeq   i64   #1691 
    jump           #1652 
#1691:
#1690:
    jump           #1653 
#1655:
#1653:
    load     u64   .p 
    iload    mem 32 
    load     u64   pci_decls.pcltable 
    loadref  u64   pci_decls.npcl 
    incrload i64   1
    istorex  mem 32 32 -32
    loadref  u64   pci_decls.lx 
    loadimm  i64   40 
    iloadx   i64   1 0
    load     u64   pci_decls.pcllines 
    load     i64   pci_decls.npcl 
    istorex  i32   4 -4
;------------------------
#1652:
    return         
end

proc pci_support.docalldll
    rettype  i64   
    param    u64   .fnindex 
    param    u64   .fnaddr 
    param    u64   .revargs 
    param    i64   .nargs 
    param    i64   .nvars 
    param    i64   .isfunc 
    local    mem 800 .args 
    local    i64   .retval 
    local    i64   .i 
;------------------------
    load     i64   .nargs 
    store    i64   .i 
    load     i64   .i 
    loadimm  i64   1 
    jumplt   i64   #1695 
#1693:
    load     u64   .revargs 
    load     i64   .i 
    iloadx   i64   8 -8
    loadref  u64   .args 
    load     i64   .nargs 
    load     i64   .i 
    sub      i64   
    istorex  i64   8 0
#1694:
    fordown        #1693 1
    opnd           .i 
    opnd           1 
#1695:
    load     u64   .fnaddr 
    loadimm  u64   0 
    jumpne   u64   #1697 
    setcall        1
    load     u64   .fnindex 
    setarg   i64   1
    callf    u64   pci_support.getdllfnptr 1 0
    store    u64   .fnaddr 
#1697:
#1696:
    setcall        5
    loadimm  u64   0 
    setarg   u64   5
    loadref  u64   .args 
    setarg   u64   4
    load     i64   .nargs 
    setarg   i64   3
    loadimm  i64   73 
    setarg   i64   2
    load     u64   .fnaddr 
    setarg   u64   1
    callf    i64   mwindllc.os_calldllfunction 5 0
    store    i64   .retval 
    load     i64   .retval 
    setret   i64   
    jump           #1692 
;------------------------
#1692:
    return         
end

proc pci_support.loadlibs
    local    i64   .i 
;------------------------
    loadimm  i64   1 
    store    i64   .i 
    load     i64   pci_decls.nlibs 
    loadimm  i64   1 
    jumplt   i64   #1701 
#1699:
    setcall        1
    loadref  u64   pci_decls.libnames 
    load     i64   .i 
    iloadx   u64   8 -8
    setarg   u64   1
    callf    u64   mwindows.os_getdllinst 1 0
    loadref  u64   pci_decls.libinst 
    load     i64   .i 
    istorex  u64   8 -8
    loadref  u64   pci_decls.libinst 
    load     i64   .i 
    iloadx   u64   8 -8
    jumpt    u64   #1703 
    setcall        3
    loadimm  i64   0 
    setarg   i64   3
    loadref  u64   pci_decls.libnames 
    load     i64   .i 
    iloadx   u64   8 -8
    setarg   u64   2
    loadimm  u64   "Can't load lib:"
    setarg   u64   1
    callp          pci_support.pcerror3 3 0
#1703:
#1702:
#1700:
    forup          #1699 1
    opnd           .i 
    opnd           pci_decls.nlibs 
#1701:
;------------------------
#1698:
    return         
end

proc pci_support.getdllfnptr
    rettype  u64   
    param    i64   .fnindex 
    local    u64   .fnaddr 
    local    i64   .libindex 
    local    u64   .dllinst 
    local    u64   .procname 
    local    u64   .libname 
    local    i64   .i 
;------------------------
    loadref  u64   pci_decls.extaddr 
    load     i64   .fnindex 
    iloadx   u64   8 -8
    store    u64   .fnaddr 
    load     u64   .fnaddr 
    jumpf    u64   #1707 
    load     u64   .fnaddr 
    setret   u64   
    jump           #1705 
#1707:
#1706:
    loadref  u64   pci_decls.extdef 
    load     i64   .fnindex 
    iloadx   u64   8 -8
    iload    u64   
    store    u64   .procname 
    loadimm  i64   1 
    store    i64   .i 
    load     i64   pci_decls.nlibs 
    loadimm  i64   1 
    jumplt   i64   #1711 
#1708:
    setcall        2
    load     u64   .procname 
    setarg   u64   2
    loadref  u64   pci_decls.libinst 
    load     i64   .i 
    iloadx   i64   8 -8
    setarg   i64   1
    callf    u64   mwindows.os_getdllprocaddr 2 0
    store    u64   .fnaddr 
    load     u64   .fnaddr 
    jumpf    u64   #1713 
    jump           #1710 
#1713:
#1712:
#1709:
    forup          #1708 1
    opnd           .i 
    opnd           pci_decls.nlibs 
#1711:
    setcall        3
    loadimm  i64   0 
    setarg   i64   3
    load     u64   .procname 
    setarg   u64   2
    loadimm  u64   "Can't find DLL func:"
    setarg   u64   1
    callp          pci_support.pcerror3 3 0
#1710:
    load     u64   .fnaddr 
    loadref  u64   pci_decls.extaddr 
    load     i64   .fnindex 
    istorex  u64   8 -8
    load     u64   .fnaddr 
    setret   u64   
    jump           #1705 
;------------------------
#1705:
    return         
end

proc pci_support.initpcl1
    local    i64   .n 
;------------------------
    load     i64   pci_decls.nsourcelines 
    loadimm  i64   10 
    add      i64   
    store    i64   .n 
    setcall        1
    load     i64   .n 
    loadimm  i64   32 
    mul      i64   
    setarg   i64   1
    callf    u64   mlib.pcm_allocz 1 0
    store    u64   pci_decls.pcltable 
    setcall        1
    load     i64   .n 
    loadimm  i64   2 
    mul      i64   
    loadimm  i64   8 
    mul      i64   
    setarg   i64   1
    callf    u64   mlib.pcm_allocz 1 0
    store    u64   pci_decls.pcllabels 
    setcall        1
    load     i64   .n 
    loadimm  i64   4 
    mul      i64   
    setarg   i64   1
    callf    u64   mlib.pcm_allocz 1 0
    store    u64   pci_decls.pcllines 
    loadimm  i64   0 
    store    i64   pci_decls.npcl 
;------------------------
#1715:
    return         
end

proc pci_support.gerror
    param    u64   .mess 
    param    u64   .mess2 
;------------------------
    callp          msys.m$print_startcon 0 0
    loadimm  u64   "PCLGEN:"
    callp          msys.m$print_str_nf 1 0
    load     u64   .mess 
    callp          msys.m$print_str_nf 1 0
    load     u64   .mess2 
    callp          msys.m$print_str_nf 1 0
    callp          msys.m$print_newline 0 0
    callp          msys.m$print_end 0 0
    loadimm  i64   1 
    stop           
;------------------------
#1716:
    return         
end

proc pci_support.pcerror3
    param    u64   .mess 
    param    u64   .mess2 
    param    i64   .pc 
;------------------------
    callp          msys.m$print_startcon 0 0
    loadimm  u64   "PCERROR:"
    callp          msys.m$print_str_nf 1 0
    load     u64   .mess 
    callp          msys.m$print_str_nf 1 0
    load     u64   .mess2 
    callp          msys.m$print_str_nf 1 0
    callp          msys.m$print_end 0 0
    load     i64   .pc 
    jumpf    i64   #1721 
    callp          msys.m$print_startcon 0 0
    loadimm  u64   " on line"
    callp          msys.m$print_str_nf 1 0
    load     u64   pci_decls.pcllines 
    load     i64   .pc 
    iloadx   i32   4 -4
    callp          msys.m$print_i64_nf 1 0
    callp          msys.m$print_end 0 0
#1721:
#1720:
    callp          msys.m$print_startcon 0 0
    callp          msys.m$print_newline 0 0
    callp          msys.m$print_end 0 0
    callp          msys.m$print_startcon 0 0
    callp          msys.m$print_newline 0 0
    callp          msys.m$print_end 0 0
    loadimm  i64   1 
    stop           
;------------------------
#1718:
    return         
end

proc pci_support.loaderror
    param    u64   .mess 
;------------------------
    callp          msys.m$print_startcon 0 0
    load     u64   .mess 
    callp          msys.m$print_str_nf 1 0
    callp          msys.m$print_newline 0 0
    callp          msys.m$print_end 0 0
    setcall        1
    loadimm  u64   ""
    setarg   u64   1
    callp          mlib.abortprogram 1 0
;------------------------
#1723:
    return         
end

proc pci_support.addlib
    param    u64   .d 
    local    i64   .i 
;------------------------
    loadimm  i64   1 
    store    i64   .i 
    load     i64   pci_decls.nlibs 
    loadimm  i64   1 
    jumplt   i64   #1728 
#1726:
    setcall        2
    loadref  u64   pci_decls.libnames 
    load     i64   .i 
    iloadx   u64   8 -8
    setarg   u64   2
    load     u64   .d 
    iload    u64   
    setarg   u64   1
    callf    i64   mlib.eqstring 2 0
    jumpf    i64   #1730 
    jump           #1725 
#1730:
#1729:
#1727:
    forup          #1726 1
    opnd           .i 
    opnd           pci_decls.nlibs 
#1728:
    load     i64   pci_decls.nlibs 
    loadimm  i64   20 
    jumplt   i64   #1732 
    setcall        1
    loadimm  u64   "Too many libs"
    setarg   u64   1
    callf    i64   pci_support.serror 1 0
    unload   i64   
#1732:
#1731:
    loadref  u64   pci_decls.nlibs 
    incrto   i64   1
    setcall        1
    load     u64   .d 
    iload    u64   
    setarg   u64   1
    callf    u64   mlib.pcm_copyheapstring 1 0
    loadref  u64   pci_decls.libnames 
    load     i64   pci_decls.nlibs 
    istorex  u64   8 -8
    load     i64   pci_decls.nlibs 
    load     u64   .d 
    loadimm  i64   16 
    istorex  i64   1 0
    loadimm  i64   6 
    load     u64   .d 
    loadimm  i64   12 
    istorex  u8    1 0
;------------------------
#1725:
    return         
end

proc pci_support.serror
    rettype  i64   
    param    u64   .mess 
;------------------------
    callp          msys.m$print_startcon 0 0
    loadimm  u64   "Syntax error:"
    callp          msys.m$print_str_nf 1 0
    load     u64   .mess 
    callp          msys.m$print_str_nf 1 0
    loadimm  u64   "on line"
    callp          msys.m$print_str_nf 1 0
    loadref  u64   pci_decls.lx 
    loadimm  i64   40 
    iloadx   i64   1 0
    callp          msys.m$print_i64_nf 1 0
    callp          msys.m$print_newline 0 0
    callp          msys.m$print_end 0 0
    callp          msys.m$print_startcon 0 0
    callp          msys.m$print_newline 0 0
    callp          msys.m$print_end 0 0
    loadimm  i64   1 
    stop           
    loadimm  i64   0 
    setret   i64   
    jump           #1734 
;------------------------
#1734:
    return         
end

proc pci_support.docmdskip
    local    u64   .d 
;------------------------
    setcall        1
    loadimm  u64   "$cmdskip"
    setarg   u64   1
    callf    u64   pci_lex.findsymbol 1 0
    store    u64   .d 
    load     u64   .d 
    jumpf    u64   #1740 
    load     i64   pci_decls.cmdskip 
    load     u64   .d 
    loadimm  i64   16 
    iloadx   u64   1 0
    istore   i64   
#1740:
#1739:
;------------------------
#1737:
    return         
end

proc pci_support.adddataref
    param    u64   .pd 
    local    u64   .p 
;------------------------
    setcall        1
    loadimm  i64   16 
    setarg   i64   1
    callf    u64   mlib.pcm_allocz 1 0
    store    u64   .p 
    load     u64   .pd 
    load     u64   .p 
    loadimm  i64   0 
    istorex  u64   1 0
    load     u64   pci_decls.datalist 
    load     u64   .p 
    loadimm  i64   8 
    istorex  u64   1 0
    load     u64   .p 
    store    u64   pci_decls.datalist 
;------------------------
#1741:
    return         
end

proc pci_support.addlabelref
    param    u64   .plab 
    local    u64   .p 
;------------------------
    setcall        1
    loadimm  i64   16 
    setarg   i64   1
    callf    u64   mlib.pcm_allocz 1 0
    store    u64   .p 
    load     u64   .plab 
    load     u64   .p 
    loadimm  i64   0 
    istorex  u64   1 0
    load     u64   pci_decls.labellist 
    load     u64   .p 
    loadimm  i64   8 
    istorex  u64   1 0
    load     u64   .p 
    store    u64   pci_decls.labellist 
;------------------------
#1742:
    return         
end

proc pci_support.updatedatarefs
    local    u64   .p 
    local    u64   .q 
    local    u64   .pd 
    local    u64   .d 
    local    i64   .lab 
;------------------------
    load     u64   pci_decls.datalist 
    store    u64   .p 
    jump           #1747 
#1744:
    load     u64   .p 
    iload    u64   
    iload    u64   
    store    u64   .d 
    load     u64   .p 
    iload    u64   
    store    u64   .pd 
    load     u64   .d 
    loadimm  i64   12 
    iloadx   u8    1 0
    loadimm  i64   2 
    jumpeq   i64   #1749 1
    loadimm  i64   1 
    jumpeq   i64   #1750 
    jump           #1751 
#1749:
    load     u64   .d 
    loadimm  i64   16 
    iloadx   u64   1 0
    load     u64   .pd 
    istore   u64   
    jump           #1748 
#1750:
    load     u64   .d 
    loadimm  i64   16 
    iloadx   u64   1 0
    load     u64   .pd 
    istore   u64   
    jump           #1748 
#1751:
    setcall        3
    loadimm  i64   0 
    setarg   i64   3
    load     u64   .d 
    iload    u64   
    setarg   u64   2
    loadimm  u64   "DATALIST: Can't fixup"
    setarg   u64   1
    callp          pci_support.pcerror3 3 0
#1748:
#1745:
    load     u64   .p 
    loadimm  i64   8 
    iloadx   u64   1 0
    store    u64   .p 
#1747:
    load     u64   .p 
    jumpt    u64   #1744 
#1746:
    load     u64   pci_decls.labellist 
    store    u64   .q 
    jump           #1756 
#1753:
    load     u64   .q 
    iload    u64   
    iload    i64   
    store    i64   .lab 
    loadref  u64   pci_decls.labeltable 
    load     i64   .lab 
    iloadx   i32   4 -4
    load     u64   .q 
    iload    u64   
    istore   i64   
#1754:
    load     u64   .q 
    loadimm  i64   8 
    iloadx   u64   1 0
    store    u64   .q 
#1756:
    load     u64   .q 
    jumpt    u64   #1753 
#1755:
;------------------------
#1743:
    return         
end

proc pci_support.storebit
    param    u64   .p 
    param    i64   .i 
    param    i64   .j 
    param    i64   .x 
    local    i64   .bitlength 
    local    u64   .mask1 
    local    u64   .mask2 
    local    u64   .value 
;------------------------
    load     i64   .j 
    load     i64   .i 
    sub      i64   
    loadimm  i64   1 
    add      i64   
    store    i64   .bitlength 
    load     i64   .bitlength 
    loadimm  i64   64 
    jumpne   i64   #1759 
    load     i64   .x 
    load     u64   .p 
    istore   i64   
    jump           #1757 
#1759:
#1758:
    loadimm  u64   -2 
    store    u64   .mask1 
    load     i64   .bitlength 
    loadimm  i64   1 
    jumple   i64   #1761 
    load     u64   .mask1 
    load     i64   .bitlength 
    loadimm  i64   1 
    sub      i64   
    shl      u64   
    store    u64   .mask1 
#1761:
#1760:
    load     u64   .mask1 
    bitnot   u64   
    store    u64   .mask1 
    load     i64   .i 
    jumpf    i64   #1763 
    load     u64   .mask1 
    load     i64   .i 
    shl      u64   
    store    u64   .mask1 
#1763:
#1762:
    load     u64   .mask1 
    bitnot   u64   
    store    u64   .mask2 
    load     i64   .i 
    jumpf    i64   #1765 
    load     i64   .x 
    load     i64   .i 
    shl      i64   
    store    i64   .x 
#1765:
#1764:
    load     u64   .p 
    iload    i64   
    load     u64   .mask2 
    bitand   i64   
    load     i64   .x 
    load     u64   .mask1 
    bitand   i64   
    bitor    i64   
    load     u64   .p 
    istore   i64   
;------------------------
#1757:
    return         
end

proc main*
    callp          msys.start 0 0
    callp          $pci.start 0 0
;------------------------
    setcall        0
    callp          $pci.getinputoptions 0 0
    setcall        0
    callp          $pci.loadprogram 0 0
    setcall        0
    callp          pci_parse.parseprogram 0 0
    load     u8    $pci.passlevel 
    loadimm  i64   2 
    jumplt   i64   #1768 
    setcall        0
    callp          pci_fixup.fixuppcl 0 0
    load     u8    $pci.passlevel 
    loadimm  i64   3 
    jumpne   i64   #1770 
    setcall        0
    callp          pci_exec.runpcl 0 0
#1770:
#1769:
#1768:
#1767:
;------------------------
#1766:
    loadimm  i64   0 
    stop           
end

;
proc $pci.getinputoptions
    local    i64   .paramno 
    local    i64   .pmtype 
    local    u64   .name 
    local    u64   .value 
    local    mem 300 .filespec 
    local    i64   .$av_1 
    local    i64   .sw 
;------------------------
    loadimm  i64   1 
    store    i64   .paramno 
    jump           #1773 
#1772:
    load     i64   .pmtype 
    loadimm  i64   1 
    jumpeq   i64   #1776 1
    loadimm  i64   2 
    jumpeq   i64   #1777 
    jump           #1778 
#1776:
    setcall        1
    load     u64   .name 
    setarg   u64   1
    callf    u64   mlib.convlcstring 1 0
    unload   u64   
    loadimm  i64   1 
    store    i64   .sw 
#1779:
    setcall        2
    loadref  u64   $pci.optionnames 
    load     i64   .sw 
    iloadx   u64   8 -8
    setarg   u64   2
    load     u64   .name 
    setarg   u64   1
    callf    i64   mlib.eqstring 2 0
    jumpf    i64   #1784 
    setcall        2
    load     u64   .value 
    setarg   u64   2
    load     i64   .sw 
    setarg   i64   1
    callp          $pci.do_option 2 0
    jump           #1781 
#1784:
#1783:
#1780:
    forup          #1779 1
    opnd           .sw 
    opnd           8 
#1782:
    callp          msys.m$print_startcon 0 0
    loadimm  u64   "Unknown option:"
    callp          msys.m$print_str_nf 1 0
    load     u64   .name 
    callp          msys.m$print_str_nf 1 0
    callp          msys.m$print_newline 0 0
    callp          msys.m$print_end 0 0
    loadimm  i64   99 
    stop           
#1781:
    jump           #1775 
#1777:
    load     u64   pci_decls.inputfile 
    jumpf    u64   #1787 
    setcall        1
    loadimm  u64   "Too many input files"
    setarg   u64   1
    callp          pci_support.loaderror 1 0
#1787:
#1786:
    setcall        1
    load     u64   .name 
    setarg   u64   1
    callf    u64   mlib.convlcstring 1 0
    unload   u64   
    setcall        2
    loadimm  u64   "m"
    setarg   u64   2
    setcall        2
    loadimm  i64   0 
    setarg   i64   2
    load     u64   .name 
    setarg   u64   1
    callf    u64   mlib.extractext 2 0
    setarg   u64   1
    callf    i64   mlib.eqstring 2 0
    jumpf    i64   #1790 
    setcall        2
    loadimm  u64   "pcl"
    setarg   u64   2
    load     u64   .name 
    setarg   u64   1
    callf    u64   mlib.changeext 2 0
    store    u64   .name 
#1790:
#1789:
    setcall        1
    load     u64   .name 
    setarg   u64   1
    callf    u64   mlib.pcm_copyheapstring 1 0
    store    u64   pci_decls.inputfile 
    load     i64   .paramno 
    loadimm  i64   1 
    sub      i64   
    load     i64   $cmdskip 
    add      i64   
    store    i64   pci_decls.cmdskip 
    jump           #1774 
    jump           #1775 
#1778:
    setcall        1
    loadimm  u64   "Invalid params"
    setarg   u64   1
    callp          pci_support.loaderror 1 0
#1775:
#1773:
    setcall        4
    loadimm  u64   "pcl"
    setarg   u64   4
    loadref  u64   .value 
    setarg   u64   3
    loadref  u64   .name 
    setarg   u64   2
    loadref  u64   .paramno 
    setarg   u64   1
    callf    i64   mlib.nextcmdparamnew 4 0
    double         
    store    i64   .pmtype 
    jumpt    i64   #1772 
#1774:
    load     u64   pci_decls.inputfile 
    loadimm  u64   0 
    jumpne   u64   #1796 
    callp          msys.m$print_startcon 0 0
    loadimm  u64   "Usage:"
    callp          msys.m$print_str_nf 1 0
    callp          msys.m$print_newline 0 0
    callp          msys.m$print_end 0 0
    callp          msys.m$print_startcon 0 0
    loadimm  u64   "\t"
    callp          msys.m$print_str_nf 1 0
    callp          msys.m$print_nogap 0 0
    load     u64   msys.cmdparams 
    loadimm  i64   0 
    iloadx   u64   8 0
    callp          msys.m$print_str_nf 1 0
    loadimm  u64   "filename[.pcl]"
    callp          msys.m$print_str_nf 1 0
    callp          msys.m$print_newline 0 0
    callp          msys.m$print_end 0 0
    loadimm  i64   0 
    stop           
#1796:
#1795:
    load     u8    $pci.passlevel 
    loadimm  i64   0 
    jumpne   i64   #1801 
    loadimm  i64   3 
    store    u8    $pci.passlevel 
#1801:
#1800:
;------------------------
#1771:
    return         
end

proc $pci.do_option
    param    i64   .sw 
    param    u64   .value 
;------------------------
    load     i64   .sw 
    switch         #1804 1 8
    opnd           #1805 
#1804:
    swlabel        #1806 
    swlabel        #1807 
    swlabel        #1808 
    swlabel        #1809 
    swlabel        #1810 
    swlabel        #1811 
    swlabel        #1812 
    swlabel        #1813 
    endsw          
#1806:
    loadimm  i64   1 
    store    u8    $pci.passlevel 
    jump           #1803 
#1807:
    loadimm  i64   2 
    store    u8    $pci.passlevel 
    jump           #1803 
#1808:
    loadimm  i64   1 
    store    u8    $pci.passlevel 
    loadimm  i64   1 
    store    u8    $pci.fshowpcl 
    jump           #1803 
#1809:
    loadimm  i64   2 
    store    u8    $pci.passlevel 
    loadimm  i64   1 
    store    u8    $pci.fshowpcl 
    jump           #1803 
#1810:
    loadimm  i64   3 
    store    u8    $pci.passlevel 
    jump           #1803 
#1811:
    loadimm  i64   1 
    store    u8    $pci.fshowpcl 
    jump           #1803 
#1812:
    loadimm  i64   1 
    store    u8    $pci.fshowst 
    jump           #1803 
#1813:
    loadimm  i64   1 
    store    u8    $pci.fshowlibs 
    jump           #1803 
#1805:
#1803:
;------------------------
#1802:
    return         
end

proc $pci.addstr
    rettype  u64   
    param    u64   .s 
    param    u64   .t 
;------------------------
    setcall        2
    load     u64   .s 
    setarg   u64   2
    loadref  u64   $pci.addstr.str 
    setarg   u64   1
    callf    u64   strcpy 2 0
    unload   u64   
    setcall        2
    load     u64   .t 
    setarg   u64   2
    loadref  u64   $pci.addstr.str 
    setarg   u64   1
    callf    u64   strcat 2 0
    unload   u64   
    loadref  u64   $pci.addstr.str 
    setret   u64   
    jump           #1814 
;------------------------
#1814:
    return         
end

proc $pci.loadprogram
    local    u64   .p 
    local    i64   .i 
;------------------------
    setcall        1
    load     u64   pci_decls.inputfile 
    setarg   u64   1
    callf    u64   mlib.readfile 1 0
    store    u64   pci_decls.psource 
    load     u64   pci_decls.psource 
    loadimm  u64   0 
    jumpeq   u64   #1818 
    load     u64   pci_decls.psource 
    iload    u8    
    loadimm  i64   0 
    jumpne   i64   #1817 
#1818:
    setcall        1
    setcall        2
    load     u64   pci_decls.inputfile 
    setarg   u64   2
    loadimm  u64   "Can't load "
    setarg   u64   1
    callf    u64   $pci.addstr 2 0
    setarg   u64   1
    callp          pci_support.loaderror 1 0
#1817:
#1816:
    load     u64   pci_decls.psource 
    store    u64   .p 
    loadimm  i64   0 
    store    i64   pci_decls.nsourcelines 
#1820:
    load     u64   .p 
    iload    u8    
    loadimm  u64   10 
    jumpeq   u64   #1822 1
    loadimm  u64   0 
    jumpeq   u64   #1823 
    jump           #1824 
#1822:
    loadref  u64   pci_decls.nsourcelines 
    incrto   i64   1
    loadref  u64   .p 
    incrto   u64   1
    jump           #1820 
#1823:
    load     u64   .p 
    loadimm  i64   1 
    subptrx  u64   1 0
    iload    u8    
    loadimm  i64   10 
    jumpeq   i64   #1826 
    loadref  u64   pci_decls.nsourcelines 
    incrto   i64   1
#1826:
#1825:
    jump           #1821 
    jump           #1820 
#1824:
    loadref  u64   .p 
    incrto   u64   1
    jump           #1820 
#1821:
    setcall        1
    load     i64   pci_decls.nsourcelines 
    loadimm  i64   8 
    mul      i64   
    setarg   i64   1
    callf    u64   mlib.pcm_alloc 1 0
    store    u64   pci_decls.sourcelines 
    load     u64   pci_decls.psource 
    store    u64   .p 
    loadimm  i64   1 
    store    i64   .i 
    load     u64   pci_decls.psource 
    load     u64   pci_decls.sourcelines 
    loadimm  i64   1 
    istorex  u64   8 -8
#1827:
    load     u64   .p 
    iload    u8    
    loadimm  u64   13 
    jumpeq   u64   #1829 1
    loadimm  u64   10 
    jumpeq   u64   #1830 1
    loadimm  u64   0 
    jumpeq   u64   #1831 
    jump           #1832 
#1829:
    loadimm  u64   0 
    loadref  u64   .p 
    loadincr u64   1
    istore   u8    
    jump           #1827 
#1830:
    loadimm  u64   0 
    loadref  u64   .p 
    loadincr u64   1
    istore   u8    
    load     u64   .p 
    iload    u8    
    jumpf    u64   #1834 
    load     u64   .p 
    load     u64   pci_decls.sourcelines 
    loadref  u64   .i 
    incrload i64   1
    istorex  u64   8 -8
#1834:
#1833:
    jump           #1827 
#1831:
    jump           #1828 
    jump           #1827 
#1832:
    loadref  u64   .p 
    incrto   u64   1
    jump           #1827 
#1828:
;------------------------
#1815:
    return         
end

proc $pci.writeswitch
    local    i64   .$av_1 
    local    u64   .x 
;------------------------
    callp          msys.m$print_startcon 0 0
    loadimm  u64   "\tdoswitch getopcode"
    callp          msys.m$print_str_nf 1 0
    callp          msys.m$print_newline 0 0
    callp          msys.m$print_end 0 0
    loadimm  i64   0 
    store    i64   .$av_1 
#1837:
    loadref  u64   pci_tables.jcodenames 
    load     i64   .$av_1 
    iloadx   u64   8 0
    store    u64   .x 
    callp          msys.m$print_startcon 0 0
    loadimm  u64   "\twhen"
    callp          msys.m$print_str_nf 1 0
    load     u64   .x 
    callp          msys.m$print_str_nf 1 0
    loadimm  u64   "then"
    callp          msys.m$print_str_nf 1 0
    callp          msys.m$print_newline 0 0
    callp          msys.m$print_end 0 0
    callp          msys.m$print_startcon 0 0
    loadimm  u64   "\t\tunimpl"
    callp          msys.m$print_str_nf 1 0
    callp          msys.m$print_newline 0 0
    callp          msys.m$print_end 0 0
    callp          msys.m$print_startcon 0 0
    loadimm  u64   "\t\tsteppc"
    callp          msys.m$print_str_nf 1 0
    callp          msys.m$print_newline 0 0
    callp          msys.m$print_end 0 0
    callp          msys.m$print_startcon 0 0
    callp          msys.m$print_newline 0 0
    callp          msys.m$print_end 0 0
#1838:
    forup          #1837 1
    opnd           .$av_1 
    opnd           409 
#1839:
    callp          msys.m$print_startcon 0 0
    loadimm  u64   "\telse"
    callp          msys.m$print_str_nf 1 0
    callp          msys.m$print_newline 0 0
    callp          msys.m$print_end 0 0
    callp          msys.m$print_startcon 0 0
    loadimm  u64   "unimpl::"
    callp          msys.m$print_str_nf 1 0
    callp          msys.m$print_newline 0 0
    callp          msys.m$print_end 0 0
    callp          msys.m$print_startcon 0 0
    loadimm  u64   "\tend doswitch"
    callp          msys.m$print_str_nf 1 0
    callp          msys.m$print_newline 0 0
    callp          msys.m$print_end 0 0
;------------------------
#1835:
    return         
end

proc msys.start
    local    i32   .nargs 
    local    i64   .nargs64 
    local    u64   .args 
    local    i64   .res 
    local    i64   .j 
    local    i64   .i 
    callp          mlib.start 0 0
    callp          mclib.start 0 0
    callp          mwindows.start 0 0
    callp          mwindllc.start 0 0
;------------------------
    setcall        5
    loadref  u64   msys.start.startupinfo 
    setarg   u64   5
    loadimm  i64   0 
    setarg   i64   4
    loadref  u64   msys.envstrings 
    setarg   u64   3
    loadref  u64   .args 
    setarg   u64   2
    loadref  u64   .nargs 
    setarg   u64   1
    callf    i32   __getmainargs 5 0
    widen    i32   
    store    i64   .res 
    load     i32   .nargs 
    store    i64   msys.nsysparams 
    load     i64   msys.nsysparams 
    loadimm  i64   128 
    jumple   i64   #1849 
    setcall        1
    loadimm  u64   "Too many params\n"
    setarg   u64   1
    callp          printf 1 0
    loadimm  i64   50 
    stop           
#1849:
#1848:
    load     i32   .nargs 
    store    i64   .nargs64 
    loadimm  i64   1 
    store    i64   .i 
    load     i64   .nargs64 
    loadimm  i64   1 
    jumplt   i64   #1853 
#1851:
    load     u64   .args 
    load     i64   .i 
    iloadx   u64   8 -8
    loadref  u64   msys.sysparams 
    load     i64   .i 
    istorex  u64   8 -8
#1852:
    forup          #1851 1
    opnd           .i 
    opnd           .nargs64 
#1853:
    load     i64   msys.nsysparams 
    load     i64   $cmdskip 
    loadimm  i64   1 
    add      i64   
    sub      i64   
    store    i64   msys.ncmdparams 
    loadref  u64   msys.sysparams 
    load     i64   $cmdskip 
    addptrx  u64   8 0
    store    u64   msys.cmdparams 
    loadimm  i64   1 
    store    i64   .j 
    loadimm  i64   0 
    store    i64   msys.nenvstrings 
    jump           #1855 
#1854:
    loadref  u64   msys.nenvstrings 
    incrto   i64   1
    loadref  u64   .j 
    incrto   i64   1
#1855:
    load     u64   msys.envstrings 
    load     i64   .j 
    iloadx   u64   8 -8
    jumpt    u64   #1854 
#1856:
;------------------------
#1847:
    return         
end

;
proc msys.pushio
;------------------------
    load     i64   msys.niostack 
    loadimm  i64   10 
    jumplt   i64   #1859 
    setcall        1
    loadimm  u64   "Too many io levels\n"
    setarg   u64   1
    callp          printf 1 0
    loadimm  i64   53 
    stop           
#1859:
#1858:
    loadref  u64   msys.niostack 
    incrto   i64   1
    load     u64   msys.outchan 
    loadref  u64   msys.outchan_stack 
    load     i64   msys.niostack 
    istorex  u64   8 -8
    load     i64   msys.outdev 
    loadref  u64   msys.outdev_stack 
    load     i64   msys.niostack 
    istorex  i64   8 -8
    load     u64   msys.fmtstr 
    loadref  u64   msys.fmtstr_stack 
    load     i64   msys.niostack 
    istorex  u64   8 -8
    load     i64   msys.needgap 
    loadref  u64   msys.needgap_stack 
    load     i64   msys.niostack 
    istorex  u8    1 -1
    loadimm  i64   0 
    store    i64   msys.needgap 
    loadimm  u64   0 
    store    u64   msys.fmtstr 
    loadimm  u64   0 
    store    u64   msys.outchan 
;------------------------
#1857:
    return         
end

proc msys.m$print_startfile
    param    u64   .dev 
;------------------------
    setcall        0
    callp          msys.pushio 0 0
    load     u64   .dev 
    store    u64   msys.outchan 
    load     u64   .dev 
    jumpf    u64   #1863 
    loadimm  i64   2 
    store    i64   msys.outdev 
    jump           #1862 
#1863:
    loadimm  i64   1 
    store    i64   msys.outdev 
#1862:
    setcall        0
    callp          msys.resetprintbuffer 0 0
;------------------------
#1861:
    return         
end

proc msys.m$print_startstr
    param    u64   .s 
    local    u64   .p 
;------------------------
    setcall        0
    callp          msys.pushio 0 0
    load     u64   .s 
    loadref  u64   msys.ptr_stack 
    load     i64   msys.niostack 
    istorex  u64   8 -8
    loadref  u64   msys.ptr_stack 
    load     i64   msys.niostack 
    addptrx  u64   8 -8
    store    u64   .p 
    load     u64   .p 
    store    u64   msys.outchan 
    loadimm  i64   3 
    store    i64   msys.outdev 
;------------------------
#1864:
    return         
end

proc msys.m$print_startptr
    param    u64   .p 
;------------------------
    setcall        0
    callp          msys.pushio 0 0
    load     u64   .p 
    store    u64   msys.outchan 
    loadimm  i64   3 
    store    i64   msys.outdev 
;------------------------
#1865:
    return         
end

proc msys.m$print_startcon
;------------------------
    setcall        0
    callp          msys.pushio 0 0
    loadimm  i64   1 
    store    i64   msys.outdev 
    setcall        0
    callp          msys.resetprintbuffer 0 0
;------------------------
#1866:
    return         
end

proc msys.m$print_setfmt
    param    u64   .format 
;------------------------
    load     u64   .format 
    store    u64   msys.fmtstr 
;------------------------
#1867:
    return         
end

proc msys.m$print_end
;------------------------
    loadimm  i64   0 
    store    i64   msys.needgap 
    setcall        1
    loadimm  i64   1 
    setarg   i64   1
    callp          msys.nextfmtchars 1 0
    load     i64   msys.niostack 
    loadimm  i64   1 
    jumpne   i64   #1870 
    load     i64   msys.outdev 
    loadimm  i64   1 
    jumpeq   i64   #1871 1
    loadimm  i64   2 
    jumpne   i64   #1870 
#1871:
#1870:
#1869:
    load     i64   msys.niostack 
    loadimm  i64   0 
    jumpne   i64   #1873 
    jump           #1868 
#1873:
#1872:
    loadref  u64   msys.outchan_stack 
    load     i64   msys.niostack 
    iloadx   u64   8 -8
    store    u64   msys.outchan 
    loadref  u64   msys.outdev_stack 
    load     i64   msys.niostack 
    iloadx   i64   8 -8
    store    i64   msys.outdev 
    loadref  u64   msys.fmtstr_stack 
    load     i64   msys.niostack 
    iloadx   u64   8 -8
    store    u64   msys.fmtstr 
    loadref  u64   msys.needgap_stack 
    load     i64   msys.niostack 
    iloadx   u8    1 -1
    store    i64   msys.needgap 
    loadref  u64   msys.niostack 
    decrto   i64   1
;------------------------
#1868:
    return         
end

proc msys.m$print_ptr
    param    u64   .a 
    param    u64   .fmtstyle 
    local    mem 20 .s 
;------------------------
    load     u64   .fmtstyle 
    loadimm  u64   0 
    jumpne   u64   #1876 
    loadimm  u64   "z8H"
    store    u64   .fmtstyle 
#1876:
#1875:
    setcall        2
    load     u64   .fmtstyle 
    setarg   u64   2
    load     u64   .a 
    setarg   u64   1
    callp          msys.m$print_u64 2 0
;------------------------
#1874:
    return         
end

proc msys.m$print_ptr_nf
    param    u64   .a 
;------------------------
    setcall        2
    loadimm  u64   0 
    setarg   u64   2
    load     u64   .a 
    setarg   u64   1
    callp          msys.m$print_ptr 2 0
;------------------------
#1878:
    return         
end

proc msys.m$print_i64
    param    i64   .a 
    param    u64   .fmtstyle 
    local    mem 40 .s 
    local    mem 16 .fmt 
    local    i64   .n 
;------------------------
    setcall        1
    loadimm  i64   0 
    setarg   i64   1
    callp          msys.nextfmtchars 1 0
    load     u64   .fmtstyle 
    loadimm  u64   0 
    jumpne   u64   #1881 
    load     i64   .a 
    loadimm  i64   0 
    jumplt   i64   #1883 
    setcall        4
    loadimm  i64   0 
    setarg   i64   4
    loadimm  u64   10 
    setarg   u64   3
    loadref  u64   .s 
    setarg   u64   2
    load     i64   .a 
    setarg   u64   1
    callf    i64   msys.u64tostr 4 0
    store    i64   .n 
    jump           #1882 
#1883:
    loadimm  u64   45 
    loadref  u64   .s 
    loadimm  i64   1 
    istorex  u8    1 -1
    setcall        4
    loadimm  i64   0 
    setarg   i64   4
    loadimm  u64   10 
    setarg   u64   3
    loadref  u64   .s 
    loadimm  i64   2 
    addptrx  u8    1 -1
    setarg   u64   2
    load     i64   .a 
    neg      i64   
    setarg   u64   1
    callf    i64   msys.u64tostr 4 0
    loadimm  i64   1 
    add      i64   
    store    i64   .n 
#1882:
    setcall        2
    load     i64   .n 
    setarg   i64   2
    loadref  u64   .s 
    setarg   u64   1
    callp          msys.printstr_n 2 0
    jump           #1880 
#1881:
    setcall        3
    loadref  u64   .fmt 
    setarg   u64   3
    loadimm  i64   -1 
    setarg   i64   2
    load     u64   .fmtstyle 
    setarg   u64   1
    callp          msys.strtofmt 3 0
    loadref  u64   .fmt 
    loadimm  i64   14 
    iloadx   u8    1 0
    loadimm  u64   86 
    jumpne   u64   #1885 
    load     i64   .a 
    store    i64   msys.fmtparam 
    loadimm  i64   0 
    store    i64   msys.needgap 
    jump           #1884 
#1885:
    setcall        2
    loadref  u64   .fmt 
    setarg   u64   2
    load     i64   .a 
    setarg   i64   1
    callp          msys.tostr_i64 2 0
#1884:
#1880:
    loadimm  i64   1 
    store    i64   msys.needgap 
;------------------------
#1879:
    return         
end

proc msys.m$print_i64_nf
    param    i64   .a 
;------------------------
    setcall        2
    loadimm  u64   0 
    setarg   u64   2
    load     i64   .a 
    setarg   i64   1
    callp          msys.m$print_i64 2 0
;------------------------
#1886:
    return         
end

proc msys.m$print_bool
    param    i64   .a 
    param    u64   .fmtstyle 
;------------------------
    load     i64   .a 
    jumpf    i64   #1889 
    setcall        2
    load     u64   .fmtstyle 
    setarg   u64   2
    loadimm  u64   "True"
    setarg   u64   1
    callp          msys.m$print_str 2 0
    jump           #1888 
#1889:
    setcall        2
    load     u64   .fmtstyle 
    setarg   u64   2
    loadimm  u64   "False"
    setarg   u64   1
    callp          msys.m$print_str 2 0
#1888:
;------------------------
#1887:
    return         
end

proc msys.m$print_u64
    param    u64   .a 
    param    u64   .fmtstyle 
    local    mem 40 .s 
    local    mem 16 .fmt 
;------------------------
    setcall        1
    loadimm  i64   0 
    setarg   i64   1
    callp          msys.nextfmtchars 1 0
    load     u64   .fmtstyle 
    loadimm  u64   0 
    jumpne   u64   #1894 
    setcall        3
    load     u64   .a 
    setarg   u64   3
    loadimm  u64   "%llu"
    setarg   u64   2
    loadref  u64   .s 
    setarg   u64   1
    callp          sprintf 3 3
    setcall        1
    loadref  u64   .s 
    setarg   u64   1
    callp          msys.printstr 1 0
    jump           #1893 
#1894:
    setcall        3
    loadref  u64   .fmt 
    setarg   u64   3
    loadimm  i64   -1 
    setarg   i64   2
    load     u64   .fmtstyle 
    setarg   u64   1
    callp          msys.strtofmt 3 0
    setcall        2
    loadref  u64   .fmt 
    setarg   u64   2
    load     u64   .a 
    setarg   u64   1
    callp          msys.tostr_u64 2 0
#1893:
    loadimm  i64   1 
    store    i64   msys.needgap 
;------------------------
#1892:
    return         
end

proc msys.m$print_r64
    param    r64   .x 
    param    u64   .fmtstyle 
    local    mem 360 .s 
    local    mem 16 .fmt 
;------------------------
    setcall        1
    loadimm  i64   0 
    setarg   i64   1
    callp          msys.nextfmtchars 1 0
    load     u64   .fmtstyle 
    loadimm  u64   0 
    jumpne   u64   #1898 
    setcall        3
    load     r64   .x 
    setarg   r64   3
    loadimm  u64   "%f"
    setarg   u64   2
    loadref  u64   .s 
    setarg   u64   1
    callp          sprintf 3 3
    setcall        1
    loadref  u64   .s 
    setarg   u64   1
    callp          msys.printstr 1 0
    jump           #1897 
#1898:
    setcall        3
    loadref  u64   .fmt 
    setarg   u64   3
    loadimm  i64   -1 
    setarg   i64   2
    load     u64   .fmtstyle 
    setarg   u64   1
    callp          msys.strtofmt 3 0
    setcall        2
    loadref  u64   .fmt 
    setarg   u64   2
    load     r64   .x 
    setarg   r64   1
    callp          msys.tostr_r64 2 0
#1897:
    loadimm  i64   1 
    store    i64   msys.needgap 
;------------------------
#1896:
    return         
end

proc msys.m$print_r32
    param    r32   .x 
    param    u64   .fmtstyle 
;------------------------
    setcall        2
    load     u64   .fmtstyle 
    setarg   u64   2
    load     r32   .x 
    fwiden   r64 r32 
    setarg   r64   1
    callp          msys.m$print_r64 2 0
;------------------------
#1900:
    return         
end

proc msys.m$print_c8
    param    i64   .a 
    param    u64   .fmtstyle 
    local    mem 40 .s 
    local    mem 16 .fmt 
    local    i64   .n 
;------------------------
    setcall        1
    loadimm  i64   0 
    setarg   i64   1
    callp          msys.nextfmtchars 1 0
    load     i64   .a 
    loadref  u64   .s 
    loadimm  i64   1 
    istorex  u8    1 -1
    loadimm  u64   0 
    loadref  u64   .s 
    loadimm  i64   2 
    istorex  u8    1 -1
    setcall        1
    loadref  u64   .s 
    setarg   u64   1
    callp          msys.printstr 1 0
    loadimm  i64   1 
    store    i64   msys.needgap 
;------------------------
#1901:
    return         
end

proc msys.m$print_str
    param    u64   .s 
    param    u64   .fmtstyle 
    local    mem 16 .fmt 
;------------------------
    setcall        1
    loadimm  i64   0 
    setarg   i64   1
    callp          msys.nextfmtchars 1 0
    load     u64   .s 
    loadimm  u64   0 
    jumpne   u64   #1904 
    setcall        1
    loadimm  u64   "<null>"
    setarg   u64   1
    callp          msys.printstr 1 0
    jump           #1902 
#1904:
#1903:
    load     u64   .fmtstyle 
    loadimm  u64   0 
    jumpne   u64   #1907 
    setcall        1
    load     u64   .s 
    setarg   u64   1
    callp          msys.printstr 1 0
    jump           #1906 
#1907:
    setcall        3
    loadref  u64   .fmt 
    setarg   u64   3
    loadimm  i64   -1 
    setarg   i64   2
    load     u64   .fmtstyle 
    setarg   u64   1
    callp          msys.strtofmt 3 0
    setcall        3
    loadref  u64   .fmt 
    setarg   u64   3
    loadimm  i64   -1 
    setarg   i64   2
    load     u64   .s 
    setarg   u64   1
    callp          msys.tostr_str 3 0
#1906:
    loadimm  i64   1 
    store    i64   msys.needgap 
;------------------------
#1902:
    return         
end

proc msys.m$print_strn
    param    u64   .s 
    param    i64   .length 
    param    u64   .fmtstyle 
    local    mem 16 .fmt 
;------------------------
    setcall        1
    loadimm  i64   0 
    setarg   i64   1
    callp          msys.nextfmtchars 1 0
    load     u64   .s 
    loadimm  u64   0 
    jumpne   u64   #1910 
    setcall        1
    loadimm  u64   "<null>"
    setarg   u64   1
    callp          msys.printstr 1 0
    jump           #1908 
#1910:
#1909:
    load     u64   .fmtstyle 
    loadimm  u64   0 
    jumpne   u64   #1912 
    setcall        2
    load     i64   .length 
    setarg   i64   2
    load     u64   .s 
    setarg   u64   1
    callp          msys.printstr_n 2 0
    jump           #1911 
#1912:
    setcall        3
    loadref  u64   .fmt 
    setarg   u64   3
    loadimm  i64   -1 
    setarg   i64   2
    load     u64   .fmtstyle 
    setarg   u64   1
    callp          msys.strtofmt 3 0
    setcall        3
    loadref  u64   .fmt 
    setarg   u64   3
    load     i64   .length 
    setarg   i64   2
    load     u64   .s 
    setarg   u64   1
    callp          msys.tostr_str 3 0
#1911:
    loadimm  i64   1 
    store    i64   msys.needgap 
;------------------------
#1908:
    return         
end

proc msys.m$print_str_nf
    param    u64   .s 
;------------------------
    setcall        2
    loadimm  u64   0 
    setarg   u64   2
    load     u64   .s 
    setarg   u64   1
    callp          msys.m$print_str 2 0
;------------------------
#1913:
    return         
end

proc msys.m$print_strsl
    param    u64   .s 
    param    u64   .fmtstyle 
    local    mem 16 .fmt 
;------------------------
    setcall        1
    loadimm  i64   0 
    setarg   i64   1
    callp          msys.nextfmtchars 1 0
    setcall        1
    loadimm  u64   "FORMATED PRINT SLICE NOT READY"
    setarg   u64   1
    callp          mlib.abortprogram 1 0
    loadimm  i64   1 
    store    i64   msys.needgap 
;------------------------
#1914:
    return         
end

proc msys.m$print_newline
;------------------------
    loadimm  i64   0 
    store    i64   msys.needgap 
    setcall        1
    loadimm  i64   1 
    setarg   i64   1
    callp          msys.nextfmtchars 1 0
    setcall        1
    loadimm  u64   "\r\n"
    setarg   u64   1
    callp          msys.printstr 1 0
;------------------------
#1916:
    return         
end

proc msys.m$print_nogap
;------------------------
    loadimm  i64   0 
    store    i64   msys.needgap 
;------------------------
#1918:
    return         
end

proc msys.m$print_space
;------------------------
    loadimm  i64   0 
    store    i64   msys.needgap 
    setcall        1
    loadimm  u64   " "
    setarg   u64   1
    callp          msys.printstr 1 0
;------------------------
#1919:
    return         
end

proc msys.printstr
    param    u64   .s 
;------------------------
    setcall        2
    setcall        1
    load     u64   .s 
    setarg   u64   1
    callf    i64   strlen 1 0
    setarg   i64   2
    load     u64   .s 
    setarg   u64   1
    callp          msys.printstr_n 2 0
;------------------------
#1921:
    return         
end

proc msys.printstr_n
    param    u64   .s 
    param    i64   .n 
    local    u64   .p 
    local    u64   .f 
;------------------------
    load     i64   .n 
    loadimm  i64   0 
    jumpne   i64   #1924 
    jump           #1922 
#1924:
#1923:
    load     i64   msys.outdev 
    loadimm  i64   1 
    jumpeq   i64   #1926 1
    loadimm  i64   2 
    jumpeq   i64   #1927 
    jump           #1928 
#1926:
    setcall        3
    load     u64   .s 
    setarg   u64   3
    load     i64   .n 
    setarg   i64   2
    loadimm  u64   "%.*s"
    setarg   u64   1
    callp          printf 3 2
    jump           #1925 
#1927:
    setcall        4
    load     u64   .s 
    setarg   u64   4
    load     i64   .n 
    setarg   i64   3
    loadimm  u64   "%.*s"
    setarg   u64   2
    load     u64   msys.outchan 
    setarg   u64   1
    callp          fprintf 4 3
    jump           #1922 
    jump           #1925 
#1928:
    load     u64   msys.outchan 
    store    u64   .p 
    setcall        3
    load     i64   .n 
    setarg   u64   3
    load     u64   .s 
    setarg   u64   2
    load     u64   .p 
    iload    u64   
    setarg   u64   1
    callp          memcpy 3 0
    load     u64   .p 
    load     i64   .n 
    addpxto  u64   1 0
    loadimm  u64   0 
    load     u64   .p 
    iload    u64   
    istore   u8    
#1925:
;------------------------
#1922:
    return         
end

proc msys.printstrn_app
    param    u64   .s 
    param    i64   .length 
    param    u64   .f 
;------------------------
    load     i64   .length 
    jumpf    i64   #1932 
    load     u64   .f 
    loadimm  u64   0 
    jumpne   u64   #1934 
    setcall        3
    load     u64   .s 
    setarg   u64   3
    load     i64   .length 
    setarg   i64   2
    loadimm  u64   "%.*s"
    setarg   u64   1
    callp          printf 3 2
    jump           #1933 
#1934:
    setcall        4
    load     u64   .s 
    setarg   u64   4
    load     i64   .length 
    setarg   i64   3
    loadimm  u64   "%.*s"
    setarg   u64   2
    load     u64   .f 
    setarg   u64   1
    callp          fprintf 4 3
#1933:
#1932:
#1931:
;------------------------
#1930:
    return         
end

proc msys.printchar
    param    i64   .ch 
    local    u64   .p 
    local    u32   .str 
;------------------------
    load     i64   .ch 
    loadref  u64   .str 
    loadimm  i64   1 
    istorex  u8    1 -1
    load     i64   .ch 
    loadref  u64   .str 
    loadimm  i64   0 
    istorex  u8    1 -1
    setcall        2
    loadimm  i64   1 
    setarg   i64   2
    loadref  u64   .str 
    setarg   u64   1
    callp          msys.printstr_n 2 0
;------------------------
#1935:
    return         
end

proc msys.nextfmtchars
    param    i64   .lastx 
    local    u8    .c 
    local    u64   .pstart 
    local    i64   .n 
;------------------------
    load     u64   msys.fmtstr 
    jumpt    u64   #1938 
    load     i64   msys.needgap 
    jumpf    i64   #1940 
    setcall        1
    loadimm  i64   32 
    setarg   i64   1
    callp          msys.printchar 1 0
#1940:
#1939:
    loadimm  i64   0 
    store    i64   msys.needgap 
    jump           #1936 
#1938:
#1937:
    load     u64   msys.fmtstr 
    store    u64   .pstart 
    loadimm  i64   0 
    store    i64   .n 
#1941:
    load     u64   msys.fmtstr 
    iload    u8    
    store    u8    .c 
    load     u8    .c 
    switch         #1944 0 126
    opnd           #1945 
#1944:
    swlabel        #1952 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1946 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1945 
    swlabel        #1957 
    endsw          
#1946:
    load     i64   .lastx 
    jumpf    i64   #1948 
    jump           #1949 
#1948:
#1947:
    loadref  u64   msys.fmtstr 
    incrto   u64   1
    load     i64   .n 
    jumpf    i64   #1951 
    setcall        2
    load     i64   .n 
    setarg   i64   2
    load     u64   .pstart 
    setarg   u64   1
    callp          msys.printstr_n 2 0
#1951:
#1950:
    jump           #1936 
    jump           #1943 
#1952:
    load     i64   .n 
    jumpf    i64   #1954 
    setcall        2
    load     i64   .n 
    setarg   i64   2
    load     u64   .pstart 
    setarg   u64   1
    callp          msys.printstr_n 2 0
    jump           #1953 
#1954:
    load     i64   .lastx 
    jumpt    i64   #1955 
    setcall        2
    loadimm  i64   1 
    setarg   i64   2
    loadimm  u64   "|"
    setarg   u64   1
    callp          msys.printstr_n 2 0
#1955:
#1953:
    jump           #1936 
    jump           #1943 
#1957:
    load     i64   .n 
    jumpf    i64   #1959 
    setcall        2
    load     i64   .n 
    setarg   i64   2
    load     u64   .pstart 
    setarg   u64   1
    callp          msys.printstr_n 2 0
    loadimm  i64   0 
    store    i64   .n 
#1959:
#1958:
    loadref  u64   msys.fmtstr 
    incrto   u64   1
    load     u64   msys.fmtstr 
    iload    u8    
    store    u8    .c 
    load     u8    .c 
    jumpf    u64   #1961 
    loadref  u64   msys.fmtstr 
    incrto   u64   1
    setcall        1
    load     u8    .c 
    setarg   i64   1
    callp          msys.printchar 1 0
#1961:
#1960:
    load     u64   msys.fmtstr 
    store    u64   .pstart 
    jump           #1943 
#1945:
;skip::
#1949:
    loadref  u64   .n 
    incrto   i64   1
    loadref  u64   msys.fmtstr 
    incrto   u64   1
#1943:
    jump           #1941 
#1942:
;------------------------
#1936:
    return         
end

proc msys.strtofmt
    param    u64   .s 
    param    i64   .slen 
    param    u64   .fmt 
    local    i64   .c 
    local    i64   .base 
    local    u8    .wset 
    local    i64   .n 
    local    mem 100 .str 
;------------------------
    load     mem 16 msys.defaultfmt 
    load     u64   .fmt 
    istore   mem 16 
    load     u64   .s 
    loadimm  u64   0 
    jumpne   u64   #1964 
    jump           #1962 
#1964:
#1963:
    load     i64   .slen 
    loadimm  i64   -1 
    jumpne   i64   #1966 
    setcall        1
    load     u64   .s 
    setarg   u64   1
    callf    i64   strlen 1 0
    store    i64   .slen 
#1966:
#1965:
    setcall        3
    load     i64   .slen 
    setarg   u64   3
    load     u64   .s 
    setarg   u64   2
    loadref  u64   .str 
    setarg   u64   1
    callp          memcpy 3 0
    loadimm  u64   0 
    loadref  u64   .str 
    load     i64   .slen 
    istorex  u8    1 0
    loadref  u64   .str 
    store    u64   .s 
    loadimm  i64   0 
    store    u8    .wset 
    jump           #1968 
#1967:
    load     u64   .s 
    iload    u8    
    store    i64   .c 
    loadref  u64   .s 
    incrto   u64   1
    load     i64   .c 
    switch         #1971 42 126
    opnd           #1972 
#1971:
    swlabel        #2011 
    swlabel        #2006 
    swlabel        #2005 
    swlabel        #1972 
    swlabel        #2004 
    swlabel        #1972 
    swlabel        #1972 
    swlabel        #1972 
    swlabel        #1972 
    swlabel        #1972 
    swlabel        #1972 
    swlabel        #1972 
    swlabel        #1972 
    swlabel        #1972 
    swlabel        #1972 
    swlabel        #1972 
    swlabel        #1972 
    swlabel        #1972 
    swlabel        #1972 
    swlabel        #1972 
    swlabel        #1972 
    swlabel        #1972 
    swlabel        #1972 
    swlabel        #1988 
    swlabel        #1973 
    swlabel        #2008 
    swlabel        #2007 
    swlabel        #2001 
    swlabel        #2002 
    swlabel        #2003 
    swlabel        #1974 
    swlabel        #1972 
    swlabel        #1985 
    swlabel        #1972 
    swlabel        #1972 
    swlabel        #2009 
    swlabel        #1972 
    swlabel        #1975 
    swlabel        #1994 
    swlabel        #1983 
    swlabel        #1972 
    swlabel        #1991 
    swlabel        #1997 
    swlabel        #1972 
    swlabel        #2010 
    swlabel        #2000 
    swlabel        #1976 
    swlabel        #1972 
    swlabel        #1990 
    swlabel        #1972 
    swlabel        #1972 
    swlabel        #1972 
    swlabel        #1972 
    swlabel        #2005 
    swlabel        #1972 
    swlabel        #1989 
    swlabel        #1973 
    swlabel        #2008 
    swlabel        #2007 
    swlabel        #2001 
    swlabel        #2002 
    swlabel        #2003 
    swlabel        #1974 
    swlabel        #1972 
    swlabel        #1985 
    swlabel        #1972 
    swlabel        #1972 
    swlabel        #2009 
    swlabel        #1972 
    swlabel        #1975 
    swlabel        #1994 
    swlabel        #1983 
    swlabel        #1972 
    swlabel        #1991 
    swlabel        #1997 
    swlabel        #1972 
    swlabel        #2010 
    swlabel        #2000 
    swlabel        #1976 
    swlabel        #1972 
    swlabel        #1990 
    swlabel        #1972 
    swlabel        #1972 
    swlabel        #1972 
    swlabel        #1984 
    endsw          
#1973:
    loadimm  i64   2 
    load     u64   .fmt 
    loadimm  i64   2 
    istorex  u8    1 0
    jump           #1970 
#1974:
    loadimm  i64   16 
    load     u64   .fmt 
    loadimm  i64   2 
    istorex  u8    1 0
    jump           #1970 
#1975:
    loadimm  i64   8 
    load     u64   .fmt 
    loadimm  i64   2 
    istorex  u8    1 0
    jump           #1970 
#1976:
    loadimm  i64   0 
    store    i64   .base 
#1977:
    load     u64   .s 
    iload    u8    
    store    i64   .c 
    load     i64   .c 
    loadimm  i64   48 
    jumplt   i64   #1980 1
    loadimm  i64   57 
    jumpgt   i64   #1980 
    load     i64   .base 
    loadimm  i64   10 
    mul      i64   
    load     i64   .c 
    add      i64   
    loadimm  i64   48 
    sub      i64   
    store    i64   .base 
    loadref  u64   .s 
    incrto   u64   1
    jump           #1979 
#1980:
    jump           #1978 
#1979:
    jump           #1977 
#1978:
    load     i64   .base 
    loadimm  i64   2 
    jumplt   i64   #1982 1
    loadimm  i64   16 
    jumpgt   i64   #1982 
    load     i64   .base 
    load     u64   .fmt 
    loadimm  i64   2 
    istorex  u8    1 0
#1982:
#1981:
    jump           #1970 
#1983:
    loadimm  u64   34 
    load     u64   .fmt 
    loadimm  i64   3 
    istorex  u8    1 0
    jump           #1970 
#1984:
    loadimm  u64   126 
    load     u64   .fmt 
    loadimm  i64   3 
    istorex  u8    1 0
    jump           #1970 
#1985:
    setcall        1
    load     u64   .s 
    iload    u8    
    setarg   i32   1
    callf    i32   toupper 1 0
    widen    i32   
    load     u64   .fmt 
    loadimm  i64   9 
    istorex  u8    1 0
    load     u64   .s 
    iload    u8    
    jumpf    u64   #1987 
    loadref  u64   .s 
    incrto   u64   1
#1987:
#1986:
    jump           #1970 
#1988:
    loadimm  u64   65 
    load     u64   .fmt 
    loadimm  i64   8 
    istorex  u8    1 0
    jump           #1970 
#1989:
    loadimm  u64   97 
    load     u64   .fmt 
    loadimm  i64   8 
    istorex  u8    1 0
    jump           #1970 
#1990:
    loadimm  u64   48 
    load     u64   .fmt 
    loadimm  i64   4 
    istorex  u8    1 0
    jump           #1970 
#1991:
    load     u64   .s 
    iload    u8    
    load     u64   .fmt 
    loadimm  i64   7 
    istorex  u8    1 0
    load     u64   .s 
    iload    u8    
    jumpf    u64   #1993 
    loadref  u64   .s 
    incrto   u64   1
#1993:
#1992:
    jump           #1970 
#1994:
    load     u64   .s 
    iload    u8    
    load     u64   .fmt 
    loadimm  i64   4 
    istorex  u8    1 0
    load     u64   .s 
    iload    u8    
    jumpf    u64   #1996 
    loadref  u64   .s 
    incrto   u64   1
#1996:
#1995:
    jump           #1970 
#1997:
    load     u64   .s 
    iload    u8    
    load     u64   .fmt 
    loadimm  i64   10 
    istorex  u8    1 0
    load     u64   .s 
    iload    u8    
    jumpf    u64   #1999 
    loadref  u64   .s 
    incrto   u64   1
#1999:
#1998:
    jump           #1970 
#2000:
    loadimm  u64   87 
    load     u64   .fmt 
    loadimm  i64   11 
    istorex  u8    1 0
    jump           #1970 
#2001:
    loadimm  u64   101 
    load     u64   .fmt 
    loadimm  i64   5 
    istorex  u8    1 0
    jump           #1970 
#2002:
    loadimm  u64   102 
    load     u64   .fmt 
    loadimm  i64   5 
    istorex  u8    1 0
    jump           #1970 
#2003:
    loadimm  u64   103 
    load     u64   .fmt 
    loadimm  i64   5 
    istorex  u8    1 0
    jump           #1970 
#2004:
    loadimm  i64   1 
    store    u8    .wset 
    jump           #1970 
#2005:
    load     i64   .c 
    load     u64   .fmt 
    loadimm  i64   7 
    istorex  u8    1 0
    jump           #1970 
#2006:
    loadimm  u64   43 
    load     u64   .fmt 
    loadimm  i64   6 
    istorex  u8    1 0
    jump           #1970 
#2007:
    loadimm  u64   77 
    load     u64   .fmt 
    loadimm  i64   12 
    istorex  u8    1 0
    jump           #1970 
#2008:
    loadimm  u64   67 
    load     u64   .fmt 
    loadimm  i64   12 
    istorex  u8    1 0
    jump           #1970 
#2009:
    loadimm  u64   77 
    load     u64   .fmt 
    loadimm  i64   12 
    istorex  u8    1 0
    jump           #1970 
#2010:
    loadimm  u64   86 
    load     u64   .fmt 
    loadimm  i64   14 
    istorex  u8    1 0
    jump           #1970 
#2011:
    load     i64   msys.fmtparam 
    store    i64   .n 
    jump           #2012 
    jump           #1970 
#1972:
    load     i64   .c 
    loadimm  i64   48 
    jumplt   i64   #2014 
    load     i64   .c 
    loadimm  i64   57 
    jumpgt   i64   #2014 
    load     i64   .c 
    loadimm  i64   48 
    sub      i64   
    store    i64   .n 
#2015:
    load     u64   .s 
    iload    u8    
    store    i64   .c 
    load     u64   .s 
    iload    u8    
    loadimm  i64   0 
    jumpne   i64   #2018 
    jump           #2016 
#2018:
#2017:
    load     i64   .c 
    loadimm  i64   48 
    jumplt   i64   #2020 
    load     i64   .c 
    loadimm  i64   57 
    jumpgt   i64   #2020 
    loadref  u64   .s 
    incrto   u64   1
    load     i64   .n 
    loadimm  i64   10 
    mul      i64   
    load     i64   .c 
    add      i64   
    loadimm  i64   48 
    sub      i64   
    store    i64   .n 
    jump           #2019 
#2020:
    jump           #2016 
#2019:
    jump           #2015 
#2016:
;gotwidth::
#2012:
    load     u8    .wset 
    jumpt    i64   #2022 
    load     i64   .n 
    load     u64   .fmt 
    loadimm  i64   0 
    istorex  u8    1 0
    loadimm  i64   1 
    store    u8    .wset 
    jump           #2021 
#2022:
    load     i64   .n 
    load     u64   .fmt 
    loadimm  i64   1 
    istorex  i8    1 0
#2021:
#2014:
#2013:
#1970:
#1968:
    load     u64   .s 
    iload    u8    
    jumpt    u64   #1967 
#1969:
;------------------------
#1962:
    return         
end

proc msys.domultichar
    rettype  i64   
    param    u64   .p 
    param    i64   .n 
    param    u64   .dest 
    param    u64   .fmt 
    local    mem 20 .str 
    local    u64   .q 
    local    i64   .i 
    local    i64   .nchars 
    local    i64   .$av_1 
;------------------------
    loadref  u64   .str 
    store    u64   .q 
    load     i64   .n 
    store    i64   .nchars 
    load     i64   .n 
    store    i64   .$av_1 
    load     i64   .$av_1 
    loadimm  i64   0 
    jumple   i64   #2026 
#2024:
    load     u64   .p 
    iload    u8    
    loadimm  i64   0 
    jumpne   i64   #2028 
    jump           #2026 
#2028:
#2027:
    load     u64   .p 
    iload    u8    
    load     u64   .q 
    istore   u8    
    loadref  u64   .q 
    incrto   u64   1
    loadref  u64   .p 
    incrto   u64   1
#2025:
    to             #2024 
    opnd           .$av_1 
#2026:
    loadimm  u64   0 
    load     u64   .q 
    istore   u8    
    setcall        4
    load     u64   .fmt 
    setarg   u64   4
    setcall        1
    loadref  u64   .str 
    setarg   u64   1
    callf    i64   strlen 1 0
    setarg   i64   3
    load     u64   .dest 
    setarg   u64   2
    loadref  u64   .str 
    setarg   u64   1
    callf    i64   msys.expandstr 4 0
    setret   i64   
    jump           #2023 
;------------------------
#2023:
    return         
end

proc msys.expandstr
    rettype  i64   
    param    u64   .s 
    param    u64   .t 
    param    i64   .n 
    param    u64   .fmt 
    local    i64   .i 
    local    i64   .w 
    local    i64   .m 
    local    i64   .$av_1 
    local    i64   .$av_2 
    local    i64   .$av_3 
    local    i64   .$av_4 
    local    i64   .$av_5 
;------------------------
    load     u64   .fmt 
    iload    u8    
    store    i64   .w 
    load     i64   .w 
    loadimm  i64   0 
    jumpeq   i64   #2032 
    load     i64   .w 
    load     i64   .n 
    jumpgt   i64   #2031 
#2032:
    setcall        3
    load     i64   .n 
    setarg   u64   3
    load     u64   .s 
    setarg   u64   2
    load     u64   .t 
    setarg   u64   1
    callf    u64   strncpy 3 0
    unload   u64   
    loadimm  u64   0 
    load     u64   .t 
    load     i64   .n 
    addptrx  u64   1 0
    istore   u8    
    load     i64   .n 
    setret   i64   
    jump           #2029 
#2031:
#2030:
    load     u64   .fmt 
    loadimm  i64   9 
    iloadx   u8    1 0
    loadimm  u64   76 
    jumpne   u64   #2034 
    setcall        3
    load     i64   .n 
    setarg   u64   3
    load     u64   .s 
    setarg   u64   2
    load     u64   .t 
    setarg   u64   1
    callf    u64   strncpy 3 0
    unload   u64   
    loadref  u64   .t 
    load     i64   .n 
    addpxto  u64   1 0
    loadimm  i64   1 
    store    i64   .i 
    load     i64   .w 
    load     i64   .n 
    sub      i64   
    store    i64   .$av_1 
    load     i64   .$av_1 
    loadimm  i64   1 
    jumplt   i64   #2037 
#2035:
    load     u64   .fmt 
    loadimm  i64   4 
    iloadx   u8    1 0
    load     u64   .t 
    istore   u8    
    loadref  u64   .t 
    incrto   u64   1
#2036:
    forup          #2035 1
    opnd           .i 
    opnd           .$av_1 
#2037:
    loadimm  u64   0 
    load     u64   .t 
    istore   u8    
    jump           #2033 
#2034:
    load     u64   .fmt 
    loadimm  i64   9 
    iloadx   u8    1 0
    loadimm  u64   82 
    jumpne   u64   #2038 
    load     u64   .fmt 
    loadimm  i64   4 
    iloadx   u8    1 0
    loadimm  u64   48 
    jumpne   u64   #2040 
    load     u64   .fmt 
    loadimm  i64   2 
    iloadx   u8    1 0
    jumpf    i64   #2040 
    load     u64   .s 
    iload    u8    
    loadimm  u64   45 
    jumpeq   u64   #2041 
    load     u64   .s 
    iload    u8    
    loadimm  u64   43 
    jumpne   u64   #2040 
#2041:
    load     u64   .s 
    iload    u8    
    load     u64   .t 
    istore   u8    
    loadref  u64   .t 
    incrto   u64   1
    load     i64   .w 
    load     i64   .n 
    sub      i64   
    store    i64   .$av_2 
    load     i64   .$av_2 
    loadimm  i64   0 
    jumple   i64   #2044 
#2042:
    load     u64   .fmt 
    loadimm  i64   4 
    iloadx   u8    1 0
    load     u64   .t 
    istore   u8    
    loadref  u64   .t 
    incrto   u64   1
#2043:
    to             #2042 
    opnd           .$av_2 
#2044:
    setcall        3
    load     i64   .n 
    loadimm  i64   1 
    sub      i64   
    setarg   u64   3
    load     u64   .s 
    loadimm  i64   1 
    addptrx  u64   1 0
    setarg   u64   2
    load     u64   .t 
    setarg   u64   1
    callf    u64   strncpy 3 0
    unload   u64   
    loadimm  u64   0 
    load     u64   .t 
    load     i64   .n 
    addptrx  u64   1 0
    loadimm  i64   1 
    subptrx  u64   1 0
    istore   u8    
    jump           #2039 
#2040:
    load     i64   .w 
    load     i64   .n 
    sub      i64   
    store    i64   .$av_3 
    load     i64   .$av_3 
    loadimm  i64   0 
    jumple   i64   #2047 
#2045:
    load     u64   .fmt 
    loadimm  i64   4 
    iloadx   u8    1 0
    load     u64   .t 
    istore   u8    
    loadref  u64   .t 
    incrto   u64   1
#2046:
    to             #2045 
    opnd           .$av_3 
#2047:
    setcall        3
    load     i64   .n 
    setarg   u64   3
    load     u64   .s 
    setarg   u64   2
    load     u64   .t 
    setarg   u64   1
    callf    u64   strncpy 3 0
    unload   u64   
    loadimm  u64   0 
    load     u64   .t 
    load     i64   .n 
    addptrx  u64   1 0
    istore   u8    
#2039:
    jump           #2033 
#2038:
    load     i64   .w 
    load     i64   .n 
    sub      i64   
    loadimm  i64   1 
    add      i64   
    loadimm  i64   2 
    div      i64   
    store    i64   .m 
    load     i64   .m 
    store    i64   .$av_4 
    load     i64   .$av_4 
    loadimm  i64   0 
    jumple   i64   #2050 
#2048:
    load     u64   .fmt 
    loadimm  i64   4 
    iloadx   u8    1 0
    load     u64   .t 
    istore   u8    
    loadref  u64   .t 
    incrto   u64   1
#2049:
    to             #2048 
    opnd           .$av_4 
#2050:
    setcall        3
    load     i64   .n 
    setarg   u64   3
    load     u64   .s 
    setarg   u64   2
    load     u64   .t 
    setarg   u64   1
    callf    u64   strncpy 3 0
    unload   u64   
    loadref  u64   .t 
    load     i64   .n 
    addpxto  u64   1 0
    load     i64   .w 
    load     i64   .n 
    sub      i64   
    load     i64   .m 
    sub      i64   
    store    i64   .$av_5 
    load     i64   .$av_5 
    loadimm  i64   0 
    jumple   i64   #2053 
#2051:
    load     u64   .fmt 
    loadimm  i64   4 
    iloadx   u8    1 0
    load     u64   .t 
    istore   u8    
    loadref  u64   .t 
    incrto   u64   1
#2052:
    to             #2051 
    opnd           .$av_5 
#2053:
    loadimm  u64   0 
    load     u64   .t 
    istore   u8    
#2033:
    load     i64   .w 
    setret   i64   
    jump           #2029 
;------------------------
#2029:
    return         
end

proc msys.u64tostr
    rettype  i64   
    param    u64   .aa 
    param    u64   .s 
    param    u64   .base 
    param    i64   .sep 
    local    mem 360 .t 
    local    u64   .dd 
    local    i64   .i 
    local    i64   .j 
    local    i64   .k 
    local    i64   .g 
    local    i64   .cc 
    local    i64   .dummy 
    local    u64   .s0 
;------------------------
    loadimm  i64   0 
    store    i64   .i 
    loadimm  i64   0 
    store    i64   .k 
    startmx        
    load     u64   .base 
    loadimm  i64   10 
    jumpne   i64   #2056 
    loadimm  i64   3 
    resetmx        
    jump           #2055 
#2056:
    loadimm  i64   4 
    endmx          
#2055:
    store    i64   .g 
#2057:
    load     u64   .aa 
    load     u64   .base 
    rem      u64   
    store    u64   .dd 
    load     u64   .aa 
    load     u64   .base 
    div      u64   
    store    u64   .aa 
    loadref  u64   msys.digits 
    load     u64   .dd 
    iloadx   u8    1 0
    loadref  u64   .t 
    loadref  u64   .i 
    incrload i64   1
    istorex  u8    1 0
    loadref  u64   .k 
    incrto   i64   1
    load     i64   .sep 
    jumpf    i64   #2061 
    load     u64   .aa 
    loadimm  i64   0 
    jumpeq   i64   #2061 
    load     i64   .k 
    load     i64   .g 
    jumpne   i64   #2061 
    load     i64   .sep 
    loadref  u64   .t 
    loadref  u64   .i 
    incrload i64   1
    istorex  u8    1 0
    loadimm  i64   0 
    store    i64   .k 
#2061:
#2060:
#2058:
    load     u64   .aa 
    loadimm  i64   0 
    jumpne   i64   #2057 
#2059:
    load     i64   .i 
    store    i64   .j 
    load     u64   .s 
    store    u64   .s0 
    jump           #2063 
#2062:
    loadref  u64   .t 
    loadref  u64   .i 
    loaddecr i64   1
    iloadx   u8    1 0
    load     u64   .s 
    istore   u8    
    loadref  u64   .s 
    incrto   u64   1
#2063:
    load     i64   .i 
    jumpt    i64   #2062 
#2064:
    loadimm  u64   0 
    load     u64   .s 
    istore   u8    
    load     i64   .j 
    setret   i64   
    jump           #2054 
;------------------------
#2054:
    return         
end

proc msys.i64tostrfmt
    rettype  i64   
    param    i64   .aa 
    param    u64   .s 
    param    u64   .fmt 
    local    mem 360 .str 
    local    i64   .i 
    local    i64   .j 
    local    i64   .k 
    local    i64   .n 
    local    i64   .w 
    local    i64   .usigned 
;------------------------
    loadimm  i64   0 
    store    i64   .usigned 
    load     u64   .fmt 
    loadimm  i64   11 
    iloadx   u8    1 0
    jumpf    u64   #2067 
    loadimm  i64   1 
    store    i64   .usigned 
#2067:
#2066:
    load     i64   .aa 
    loadimm  i64   -9223372036854775808 
    jumpne   i64   #2069 
    load     i64   .usigned 
    jumpt    i64   #2069 
    loadimm  u64   45 
    loadref  u64   .str 
    loadimm  i64   0 
    istorex  u8    1 0
    setcall        3
    load     u64   .fmt 
    loadimm  i64   7 
    iloadx   u8    1 0
    setarg   i64   3
    load     u64   .fmt 
    loadimm  i64   2 
    iloadx   u8    1 0
    setarg   i64   2
    loadref  u64   .str 
    loadimm  i64   1 
    addptrx  u8    1 0
    setarg   u64   1
    callf    i64   msys.i64mintostr 3 0
    loadimm  i64   1 
    add      i64   
    store    i64   .n 
    jump           #2068 
#2069:
    load     i64   .usigned 
    jumpt    i64   #2073 
    load     i64   .aa 
    loadimm  i64   0 
    jumplt   i64   #2072 
#2073:
    load     u64   .fmt 
    loadimm  i64   6 
    iloadx   u8    1 0
    jumpf    u64   #2071 
#2072:
    load     i64   .aa 
    loadimm  i64   0 
    jumpge   i64   #2075 
    load     i64   .aa 
    neg      i64   
    store    i64   .aa 
    loadimm  u64   45 
    loadref  u64   .str 
    loadimm  i64   0 
    istorex  u8    1 0
    jump           #2074 
#2075:
    loadimm  u64   43 
    loadref  u64   .str 
    loadimm  i64   0 
    istorex  u8    1 0
#2074:
    setcall        4
    load     u64   .fmt 
    loadimm  i64   7 
    iloadx   u8    1 0
    setarg   i64   4
    load     u64   .fmt 
    loadimm  i64   2 
    iloadx   u8    1 0
    setarg   u64   3
    loadref  u64   .str 
    loadimm  i64   1 
    addptrx  u8    1 0
    setarg   u64   2
    load     i64   .aa 
    setarg   u64   1
    callf    i64   msys.u64tostr 4 0
    loadimm  i64   1 
    add      i64   
    store    i64   .n 
    jump           #2070 
#2071:
    setcall        4
    load     u64   .fmt 
    loadimm  i64   7 
    iloadx   u8    1 0
    setarg   i64   4
    load     u64   .fmt 
    loadimm  i64   2 
    iloadx   u8    1 0
    setarg   u64   3
    loadref  u64   .str 
    setarg   u64   2
    load     i64   .aa 
    setarg   u64   1
    callf    i64   msys.u64tostr 4 0
    store    i64   .n 
#2070:
#2068:
    load     u64   .fmt 
    loadimm  i64   10 
    iloadx   u8    1 0
    jumpf    u64   #2077 
    load     u64   .fmt 
    loadimm  i64   10 
    iloadx   u8    1 0
    loadref  u64   .str 
    load     i64   .n 
    istorex  u8    1 0
    loadimm  u64   0 
    loadref  u64   .str 
    loadref  u64   .n 
    incrload i64   1
    istorex  u8    1 0
#2077:
#2076:
    load     u64   .fmt 
    loadimm  i64   2 
    iloadx   u8    1 0
    loadimm  i64   10 
    jumpgt   i64   #2080 
    load     u64   .fmt 
    loadimm  i64   10 
    iloadx   u8    1 0
    jumpf    u64   #2079 
#2080:
    load     u64   .fmt 
    loadimm  i64   8 
    iloadx   u8    1 0
    loadimm  u64   97 
    jumpne   u64   #2079 
    setcall        1
    loadref  u64   .str 
    setarg   u64   1
    callf    u64   mlib.convlcstring 1 0
    unload   u64   
#2079:
#2078:
    setcall        4
    load     u64   .fmt 
    setarg   u64   4
    load     i64   .n 
    setarg   i64   3
    load     u64   .s 
    setarg   u64   2
    loadref  u64   .str 
    setarg   u64   1
    callf    i64   msys.expandstr 4 0
    setret   i64   
    jump           #2065 
;------------------------
#2065:
    return         
end

proc msys.u64tostrfmt
    rettype  i64   
    param    i64   .aa 
    param    u64   .s 
    param    u64   .fmt 
    local    mem 360 .str 
    local    i64   .i 
    local    i64   .j 
    local    i64   .k 
    local    i64   .n 
    local    i64   .w 
;------------------------
    setcall        4
    load     u64   .fmt 
    loadimm  i64   7 
    iloadx   u8    1 0
    setarg   i64   4
    load     u64   .fmt 
    loadimm  i64   2 
    iloadx   u8    1 0
    setarg   u64   3
    loadref  u64   .str 
    setarg   u64   2
    load     i64   .aa 
    setarg   u64   1
    callf    i64   msys.u64tostr 4 0
    store    i64   .n 
    load     u64   .fmt 
    loadimm  i64   10 
    iloadx   u8    1 0
    jumpf    u64   #2083 
    load     u64   .fmt 
    loadimm  i64   10 
    iloadx   u8    1 0
    loadref  u64   .str 
    load     i64   .n 
    istorex  u8    1 0
    loadimm  u64   0 
    loadref  u64   .str 
    loadref  u64   .n 
    incrload i64   1
    istorex  u8    1 0
#2083:
#2082:
    load     u64   .fmt 
    loadimm  i64   2 
    iloadx   u8    1 0
    loadimm  i64   10 
    jumpgt   i64   #2086 
    load     u64   .fmt 
    loadimm  i64   10 
    iloadx   u8    1 0
    jumpf    u64   #2085 
    load     u64   .fmt 
    loadimm  i64   8 
    iloadx   u8    1 0
    loadimm  u64   97 
    jumpne   u64   #2085 
#2086:
#2085:
#2084:
    setcall        4
    load     u64   .fmt 
    setarg   u64   4
    load     i64   .n 
    setarg   i64   3
    load     u64   .s 
    setarg   u64   2
    loadref  u64   .str 
    setarg   u64   1
    callf    i64   msys.expandstr 4 0
    setret   i64   
    jump           #2081 
;------------------------
#2081:
    return         
end

proc msys.i64mintostr
    rettype  i64   
    param    u64   .s 
    param    i64   .base 
    param    i64   .sep 
    local    mem 360 .t 
    local    i64   .i 
    local    i64   .j 
    local    i64   .k 
    local    i64   .g 
    local    i64   .neg 
;------------------------
    load     i64   .base 
    switch         #2089 2 16
    opnd           #2090 
#2089:
    swlabel        #2095 
    swlabel        #2090 
    swlabel        #2090 
    swlabel        #2090 
    swlabel        #2090 
    swlabel        #2090 
    swlabel        #2090 
    swlabel        #2090 
    swlabel        #2091 
    swlabel        #2090 
    swlabel        #2090 
    swlabel        #2090 
    swlabel        #2090 
    swlabel        #2090 
    swlabel        #2093 
    endsw          
#2091:
    setcall        2
    loadimm  u64   "9223372036854775808"
    setarg   u64   2
    loadref  u64   .t 
    loadimm  i64   0 
    addptrx  u8    1 0
    setarg   u64   1
    callf    u64   strcpy 2 0
    unload   u64   
    loadimm  i64   3 
    store    i64   .j 
    jump           #2088 
#2093:
    setcall        2
    loadimm  u64   "8000000000000000"
    setarg   u64   2
    loadref  u64   .t 
    loadimm  i64   0 
    addptrx  u8    1 0
    setarg   u64   1
    callf    u64   strcpy 2 0
    unload   u64   
    loadimm  i64   1 
    store    i64   .j 
    jump           #2088 
#2095:
    setcall        2
    loadimm  u64   "1000000000000000000000000000000000000000000000000000000000000000"
    setarg   u64   2
    loadref  u64   .t 
    loadimm  i64   0 
    addptrx  u8    1 0
    setarg   u64   1
    callf    u64   strcpy 2 0
    unload   u64   
    loadimm  i64   7 
    store    i64   .j 
    jump           #2088 
#2090:
    setcall        2
    loadimm  u64   "<mindint>"
    setarg   u64   2
    loadref  u64   .t 
    loadimm  i64   0 
    addptrx  u8    1 0
    setarg   u64   1
    callf    u64   strcpy 2 0
    unload   u64   
#2088:
    setcall        1
    loadref  u64   .t 
    loadimm  i64   0 
    addptrx  u8    1 0
    setarg   u64   1
    callf    i64   strlen 1 0
    store    i64   .i 
    loadref  u64   .s 
    load     i64   .i 
    addpxto  u64   1 0
    load     i64   .sep 
    jumpf    i64   #2099 
    loadref  u64   .s 
    load     i64   .j 
    addpxto  u64   1 0
#2099:
#2098:
    loadimm  u64   0 
    load     u64   .s 
    istore   u8    
    loadimm  i64   0 
    store    i64   .k 
    startmx        
    load     i64   .base 
    loadimm  i64   10 
    jumpne   i64   #2101 
    loadimm  i64   3 
    resetmx        
    jump           #2100 
#2101:
    loadimm  i64   4 
    endmx          
#2100:
    store    i64   .g 
    jump           #2103 
#2102:
    loadref  u64   .s 
    decrto   u64   1
    loadref  u64   .t 
    loadref  u64   .i 
    loaddecr i64   1
    iloadx   u8    1 -1
    load     u64   .s 
    istore   u8    
    load     i64   .sep 
    jumpf    i64   #2106 
    load     i64   .i 
    jumpf    i64   #2106 
    loadref  u64   .k 
    incrload i64   1
    load     i64   .g 
    jumpne   i64   #2106 
    loadref  u64   .s 
    decrto   u64   1
    load     i64   .sep 
    load     u64   .s 
    istore   u8    
    loadimm  i64   0 
    store    i64   .k 
#2106:
#2105:
#2103:
    load     i64   .i 
    jumpt    i64   #2102 
#2104:
    setcall        1
    load     u64   .s 
    setarg   u64   1
    callf    i64   strlen 1 0
    setret   i64   
    jump           #2087 
;------------------------
#2087:
    return         
end

proc msys.strtostrfmt
    rettype  i64   
    param    u64   .s 
    param    u64   .t 
    param    i64   .n 
    param    u64   .fmt 
    local    u64   .u 
    local    u64   .v 
    local    mem 256 .str 
    local    i64   .w 
    local    i64   .nheap 
;------------------------
    loadimm  i64   0 
    store    i64   .nheap 
    load     u64   .fmt 
    loadimm  i64   3 
    iloadx   u8    1 0
    jumpt    u64   #2110 
    load     u64   .fmt 
    loadimm  i64   8 
    iloadx   u8    1 0
    jumpf    u64   #2109 
#2110:
    load     i64   .n 
    loadimm  i64   256 
    jumpge   i64   #2112 
    loadref  u64   .str 
    store    u64   .u 
    jump           #2111 
#2112:
    load     i64   .n 
    loadimm  i64   3 
    add      i64   
    store    i64   .nheap 
    setcall        1
    load     i64   .nheap 
    setarg   i64   1
    callf    u64   mlib.pcm_alloc 1 0
    store    u64   .u 
#2111:
    load     u64   .fmt 
    loadimm  i64   3 
    iloadx   u8    1 0
    jumpf    u64   #2114 
    load     u64   .u 
    store    u64   .v 
    load     u64   .fmt 
    loadimm  i64   3 
    iloadx   u8    1 0
    load     u64   .v 
    istore   u8    
    loadref  u64   .v 
    incrto   u64   1
    load     i64   .n 
    jumpf    i64   #2116 
    setcall        2
    load     u64   .s 
    setarg   u64   2
    load     u64   .v 
    setarg   u64   1
    callf    u64   strcpy 2 0
    unload   u64   
    loadref  u64   .v 
    load     i64   .n 
    addpxto  u64   1 0
#2116:
#2115:
    load     u64   .fmt 
    loadimm  i64   3 
    iloadx   u8    1 0
    load     u64   .v 
    istore   u8    
    loadref  u64   .v 
    incrto   u64   1
    loadimm  u64   0 
    load     u64   .v 
    istore   u8    
    loadref  u64   .n 
    loadimm  i64   2 
    addto    i64   
    jump           #2113 
#2114:
    setcall        3
    load     i64   .n 
    setarg   u64   3
    load     u64   .s 
    setarg   u64   2
    load     u64   .u 
    setarg   u64   1
    callp          memcpy 3 0
#2113:
    load     u64   .fmt 
    loadimm  i64   8 
    iloadx   u8    1 0
    switch         #2118 65 97
    opnd           #2119 
#2118:
    swlabel        #2121 
    swlabel        #2119 
    swlabel        #2119 
    swlabel        #2119 
    swlabel        #2119 
    swlabel        #2119 
    swlabel        #2119 
    swlabel        #2119 
    swlabel        #2119 
    swlabel        #2119 
    swlabel        #2119 
    swlabel        #2119 
    swlabel        #2119 
    swlabel        #2119 
    swlabel        #2119 
    swlabel        #2119 
    swlabel        #2119 
    swlabel        #2119 
    swlabel        #2119 
    swlabel        #2119 
    swlabel        #2119 
    swlabel        #2119 
    swlabel        #2119 
    swlabel        #2119 
    swlabel        #2119 
    swlabel        #2119 
    swlabel        #2119 
    swlabel        #2119 
    swlabel        #2119 
    swlabel        #2119 
    swlabel        #2119 
    swlabel        #2119 
    swlabel        #2120 
    endsw          
#2120:
    setcall        1
    load     u64   .u 
    setarg   u64   1
    callf    u64   mlib.convlcstring 1 0
    unload   u64   
    jump           #2117 
#2121:
    setcall        1
    load     u64   .u 
    setarg   u64   1
    callf    u64   mlib.convucstring 1 0
    unload   u64   
    jump           #2117 
#2119:
#2117:
    load     u64   .u 
    store    u64   .s 
#2109:
#2108:
    load     u64   .fmt 
    iload    u8    
    store    i64   .w 
    load     i64   .w 
    load     i64   .n 
    jumple   i64   #2123 
    setcall        4
    load     u64   .fmt 
    setarg   u64   4
    load     i64   .n 
    setarg   i64   3
    load     u64   .t 
    setarg   u64   2
    load     u64   .s 
    setarg   u64   1
    callf    i64   msys.expandstr 4 0
    store    i64   .n 
    jump           #2122 
#2123:
    setcall        3
    load     i64   .n 
    setarg   u64   3
    load     u64   .s 
    setarg   u64   2
    load     u64   .t 
    setarg   u64   1
    callp          memcpy 3 0
#2122:
    load     i64   .nheap 
    jumpf    i64   #2125 
    setcall        2
    load     i64   .nheap 
    setarg   i64   2
    load     u64   .u 
    setarg   u64   1
    callp          mlib.pcm_free 2 0
#2125:
#2124:
    load     i64   .n 
    setret   i64   
    jump           #2107 
;------------------------
#2107:
    return         
end

proc msys.tostr_i64
    param    i64   .a 
    param    u64   .fmt 
    local    mem 360 .str 
    local    i64   .n 
;------------------------
    load     u64   .fmt 
    loadimm  i64   12 
    iloadx   u8    1 0
    loadimm  u64   0 
    jumpeq   u64   #2128 1
    loadimm  u64   77 
    jumpeq   u64   #2129 1
    loadimm  u64   109 
    jumpeq   u64   #2129 
    jump           #2130 
#2128:
    setcall        3
    load     u64   .fmt 
    setarg   u64   3
    loadref  u64   .str 
    setarg   u64   2
    load     i64   .a 
    setarg   i64   1
    callf    i64   msys.i64tostrfmt 3 0
    store    i64   .n 
    jump           #2127 
#2129:
    setcall        4
    load     u64   .fmt 
    setarg   u64   4
    loadref  u64   .str 
    setarg   u64   3
    loadimm  i64   8 
    setarg   i64   2
    loadref  u64   .a 
    setarg   u64   1
    callf    i64   msys.domultichar 4 0
    store    i64   .n 
    jump           #2127 
#2130:
    setcall        1
    load     i64   .a 
    setarg   i64   1
    callp          msys.printchar 1 0
    jump           #2126 
#2127:
    setcall        2
    load     i64   .n 
    setarg   i64   2
    loadref  u64   .str 
    setarg   u64   1
    callp          msys.printstr_n 2 0
;------------------------
#2126:
    return         
end

proc msys.tostr_u64
    param    u64   .a 
    param    u64   .fmt 
    local    mem 360 .str 
    local    i64   .n 
;------------------------
    load     u64   .fmt 
    loadimm  i64   12 
    iloadx   u8    1 0
    loadimm  u64   68 
    jumpeq   u64   #2133 1
    loadimm  u64   100 
    jumpeq   u64   #2133 1
    loadimm  u64   67 
    jumpeq   u64   #2134 1
    loadimm  u64   99 
    jumpeq   u64   #2134 
    jump           #2135 
#2133:
    setcall        4
    load     u64   .fmt 
    setarg   u64   4
    loadref  u64   .str 
    setarg   u64   3
    loadimm  i64   8 
    setarg   i64   2
    loadref  u64   .a 
    setarg   u64   1
    callf    i64   msys.domultichar 4 0
    store    i64   .n 
    jump           #2132 
#2134:
    setcall        1
    load     u64   .a 
    setarg   i64   1
    callp          msys.printchar 1 0
    jump           #2131 
    jump           #2132 
#2135:
    setcall        3
    load     u64   .fmt 
    setarg   u64   3
    loadref  u64   .str 
    setarg   u64   2
    load     u64   .a 
    setarg   i64   1
    callf    i64   msys.u64tostrfmt 3 0
    store    i64   .n 
#2132:
    setcall        2
    load     i64   .n 
    setarg   i64   2
    loadref  u64   .str 
    setarg   u64   1
    callp          msys.printstr_n 2 0
;------------------------
#2131:
    return         
end

proc msys.tostr_r64
    param    r64   .x 
    param    u64   .fmt 
    local    mem 360 .str 
    local    mem 360 .str2 
    local    mem 10 .cfmt 
    local    i64   .n 
;------------------------
    loadimm  u64   37 
    loadref  u64   .cfmt 
    loadimm  i64   0 
    istorex  u8    1 0
    load     u64   .fmt 
    loadimm  i64   1 
    iloadx   i8    1 0
    jumpf    i64   #2138 
    loadimm  u64   46 
    loadref  u64   .cfmt 
    loadimm  i64   1 
    istorex  u8    1 0
    loadimm  u64   42 
    loadref  u64   .cfmt 
    loadimm  i64   2 
    istorex  u8    1 0
    load     u64   .fmt 
    loadimm  i64   5 
    iloadx   u8    1 0
    loadref  u64   .cfmt 
    loadimm  i64   3 
    istorex  u8    1 0
    loadimm  u64   0 
    loadref  u64   .cfmt 
    loadimm  i64   4 
    istorex  u8    1 0
    setcall        4
    load     r64   .x 
    setarg   r64   4
    load     u64   .fmt 
    loadimm  i64   1 
    iloadx   i8    1 0
    setarg   i64   3
    loadref  u64   .cfmt 
    setarg   u64   2
    loadref  u64   .str 
    setarg   u64   1
    callp          sprintf 4 3
    jump           #2137 
#2138:
    load     u64   .fmt 
    loadimm  i64   5 
    iloadx   u8    1 0
    loadref  u64   .cfmt 
    loadimm  i64   1 
    istorex  u8    1 0
    loadimm  u64   0 
    loadref  u64   .cfmt 
    loadimm  i64   2 
    istorex  u8    1 0
    setcall        3
    load     r64   .x 
    setarg   r64   3
    loadref  u64   .cfmt 
    setarg   u64   2
    loadref  u64   .str 
    setarg   u64   1
    callp          sprintf 3 3
#2137:
    setcall        1
    loadref  u64   .str 
    setarg   u64   1
    callf    i64   strlen 1 0
    store    i64   .n 
    load     i64   .n 
    load     u64   .fmt 
    iload    u8    
    jumpge   i64   #2140 
    setcall        4
    load     u64   .fmt 
    setarg   u64   4
    load     i64   .n 
    setarg   i64   3
    loadref  u64   .str2 
    setarg   u64   2
    loadref  u64   .str 
    setarg   u64   1
    callf    i64   msys.expandstr 4 0
    store    i64   .n 
    setcall        2
    loadref  u64   .str2 
    setarg   u64   2
    loadref  u64   .str 
    setarg   u64   1
    callf    u64   strcpy 2 0
    unload   u64   
#2140:
#2139:
    setcall        2
    load     i64   .n 
    setarg   i64   2
    loadref  u64   .str 
    setarg   u64   1
    callp          msys.printstr_n 2 0
;------------------------
#2136:
    return         
end

proc msys.tostr_str
    param    u64   .s 
    param    i64   .oldlen 
    param    u64   .fmt 
    local    i64   .newlen 
    local    i64   .n 
    local    u64   .t 
;------------------------
    load     i64   .oldlen 
    loadimm  i64   -1 
    jumpne   i64   #2143 
    setcall        1
    load     u64   .s 
    setarg   u64   1
    callf    i64   strlen 1 0
    store    i64   .oldlen 
#2143:
#2142:
    load     i64   .oldlen 
    store    i64   .newlen 
    load     u64   .fmt 
    loadimm  i64   3 
    iloadx   u8    1 0
    jumpt    u64   #2146 
    load     u64   .fmt 
    iload    u8    
    load     i64   .newlen 
    jumpgt   i64   #2146 
    load     u64   .fmt 
    loadimm  i64   8 
    iloadx   u8    1 0
    jumpt    u64   #2146 
    load     u64   .fmt 
    loadimm  i64   1 
    iloadx   i8    1 0
    jumpf    i64   #2145 
#2146:
    load     u64   .fmt 
    loadimm  i64   3 
    iloadx   u8    1 0
    jumpf    u64   #2148 
    loadref  u64   .newlen 
    loadimm  i64   2 
    addto    i64   
#2148:
#2147:
    load     u64   .fmt 
    iload    u8    
    load     i64   .newlen 
    jumple   i64   #2150 
    load     u64   .fmt 
    iload    u8    
    store    i64   .newlen 
#2150:
#2149:
    setcall        1
    load     i64   .newlen 
    loadimm  i64   1 
    add      i64   
    setarg   i64   1
    callf    u64   mlib.pcm_alloc 1 0
    store    u64   .t 
    setcall        4
    load     u64   .fmt 
    setarg   u64   4
    load     i64   .oldlen 
    setarg   i64   3
    load     u64   .t 
    setarg   u64   2
    load     u64   .s 
    setarg   u64   1
    callf    i64   msys.strtostrfmt 4 0
    store    i64   .n 
    load     u64   .fmt 
    loadimm  i64   1 
    iloadx   i8    1 0
    jumpf    i64   #2152 
    loadref  u64   .n 
    load     u64   .fmt 
    loadimm  i64   1 
    iloadx   i8    1 0
    minto    i64   
#2152:
#2151:
    setcall        2
    load     i64   .n 
    setarg   i64   2
    load     u64   .t 
    setarg   u64   1
    callp          msys.printstr_n 2 0
    setcall        2
    load     i64   .newlen 
    loadimm  i64   1 
    add      i64   
    setarg   i64   2
    load     u64   .t 
    setarg   u64   1
    callp          mlib.pcm_free 2 0
    jump           #2144 
#2145:
    setcall        2
    load     i64   .oldlen 
    setarg   i64   2
    load     u64   .s 
    setarg   u64   1
    callp          msys.printstr_n 2 0
#2144:
;------------------------
#2141:
    return         
end

proc msys.getfmt
    rettype  u64   
    param    u64   .fmtstyle 
;------------------------
    startmx        
    load     u64   .fmtstyle 
    jumpf    u64   #2155 
    setcall        3
    loadref  u64   msys.getfmt.fmt 
    setarg   u64   3
    loadimm  i64   -1 
    setarg   i64   2
    load     u64   .fmtstyle 
    setarg   u64   1
    callp          msys.strtofmt 3 0
    loadref  u64   msys.getfmt.fmt 
    resetmx        
    jump           #2154 
#2155:
    loadref  u64   msys.defaultfmt 
    endmx          
#2154:
    setret   u64   
    jump           #2153 
;------------------------
#2153:
    return         
end

proc msys.strint
    rettype  u64   
    param    i64   .a 
    param    u64   .fmtstyle 
    local    u64   .fmt 
;------------------------
    setcall        1
    loadref  u64   msys.strint.str 
    setarg   u64   1
    callp          msys.m$print_startstr 1 0
    setcall        2
    setcall        1
    load     u64   .fmtstyle 
    setarg   u64   1
    callf    u64   msys.getfmt 1 0
    double         
    store    u64   .fmt 
    setarg   u64   2
    load     i64   .a 
    setarg   i64   1
    callp          msys.tostr_i64 2 0
    setcall        0
    callp          msys.m$print_end 0 0
    setcall        2
    load     u64   .fmt 
    setarg   u64   2
    loadref  u64   msys.strint.str 
    setarg   u64   1
    callf    u64   msys.getstr 2 0
    setret   u64   
    jump           #2156 
;------------------------
#2156:
    return         
end

proc msys.getstrint
    param    i64   .a 
    param    u64   .dest 
;------------------------
    setcall        1
    load     u64   .dest 
    setarg   u64   1
    callp          msys.m$print_startstr 1 0
    setcall        2
    setcall        1
    loadimm  u64   0 
    setarg   u64   1
    callf    u64   msys.getfmt 1 0
    setarg   u64   2
    load     i64   .a 
    setarg   i64   1
    callp          msys.tostr_i64 2 0
    setcall        0
    callp          msys.m$print_end 0 0
;------------------------
#2157:
    return         
end

proc msys.strword
    rettype  u64   
    param    u64   .a 
    param    u64   .fmtstyle 
    local    u64   .fmt 
;------------------------
    setcall        1
    loadref  u64   msys.strword.str 
    setarg   u64   1
    callp          msys.m$print_startstr 1 0
    setcall        2
    setcall        1
    load     u64   .fmtstyle 
    setarg   u64   1
    callf    u64   msys.getfmt 1 0
    double         
    store    u64   .fmt 
    setarg   u64   2
    load     u64   .a 
    setarg   u64   1
    callp          msys.tostr_u64 2 0
    setcall        0
    callp          msys.m$print_end 0 0
    setcall        2
    load     u64   .fmt 
    setarg   u64   2
    loadref  u64   msys.strword.str 
    setarg   u64   1
    callf    u64   msys.getstr 2 0
    setret   u64   
    jump           #2158 
;------------------------
#2158:
    return         
end

proc msys.strreal
    rettype  u64   
    param    r64   .a 
    param    u64   .fmtstyle 
    local    u64   .fmt 
;------------------------
    setcall        1
    loadref  u64   msys.strreal.str 
    setarg   u64   1
    callp          msys.m$print_startstr 1 0
    setcall        2
    setcall        1
    load     u64   .fmtstyle 
    setarg   u64   1
    callf    u64   msys.getfmt 1 0
    double         
    store    u64   .fmt 
    setarg   u64   2
    load     r64   .a 
    setarg   r64   1
    callp          msys.tostr_r64 2 0
    setcall        0
    callp          msys.m$print_end 0 0
    setcall        2
    load     u64   .fmt 
    setarg   u64   2
    loadref  u64   msys.strreal.str 
    setarg   u64   1
    callf    u64   msys.getstr 2 0
    setret   u64   
    jump           #2159 
;------------------------
#2159:
    return         
end

proc msys.getstr
    rettype  u64   
    param    u64   .s 
    param    u64   .fmt 
;------------------------
    startmx        
    load     u64   .fmt 
    loadimm  i64   13 
    iloadx   u8    1 0
    jumpf    u64   #2162 
    setcall        1
    load     u64   .s 
    setarg   u64   1
    callf    u64   mlib.pcm_copyheapstring 1 0
    resetmx        
    jump           #2161 
#2162:
    load     u64   .s 
    endmx          
#2161:
    setret   u64   
    jump           #2160 
;------------------------
#2160:
    return         
end

proc msys.initreadbuffer
;------------------------
    load     u64   msys.rd_buffer 
    jumpf    u64   #2165 
    jump           #2163 
#2165:
#2164:
    setcall        1
    loadimm  i64   16384 
    setarg   i64   1
    callf    u64   mlib.pcm_alloc 1 0
    store    u64   msys.rd_buffer 
    loadimm  u64   0 
    load     u64   msys.rd_buffer 
    istore   u8    
    load     u64   msys.rd_buffer 
    double         
    store    u64   msys.rd_lastpos 
    store    u64   msys.rd_pos 
;------------------------
#2163:
    return         
end

proc msys.m$read_conline
;------------------------
    setcall        0
    callp          msys.initreadbuffer 0 0
    setcall        3
    loadimm  i64   16384 
    setarg   i64   3
    load     u64   msys.rd_buffer 
    setarg   u64   2
    loadimm  u64   0 
    setarg   u64   1
    callp          mlib.readlinen 3 0
    setcall        1
    load     u64   msys.rd_buffer 
    setarg   u64   1
    callf    i64   strlen 1 0
    store    i64   msys.rd_length 
    load     u64   msys.rd_buffer 
    store    u64   msys.rd_pos 
    loadimm  u64   0 
    store    u64   msys.rd_lastpos 
;------------------------
#2166:
    return         
end

proc msys.m$read_fileline
    param    u64   .f 
    local    u64   .p 
;------------------------
    setcall        0
    callp          msys.initreadbuffer 0 0
    load     u64   .f 
    loadimm  u64   1 
    jumpne   u64   #2169 
    setcall        1
    loadimm  u64   "READ CMDLINE"
    setarg   u64   1
    callp          mlib.abortprogram 1 0
    jump           #2167 
#2169:
#2168:
    setcall        3
    loadimm  i64   16384 
    setarg   i64   3
    load     u64   msys.rd_buffer 
    setarg   u64   2
    load     u64   .f 
    setarg   u64   1
    callp          mlib.readlinen 3 0
    setcall        1
    load     u64   msys.rd_buffer 
    setarg   u64   1
    callf    i64   strlen 1 0
    store    i64   msys.rd_length 
    load     u64   msys.rd_buffer 
    store    u64   msys.rd_pos 
    loadimm  u64   0 
    store    u64   msys.rd_lastpos 
;------------------------
#2167:
    return         
end

proc msys.m$read_strline
    param    u64   .s 
    local    i64   .n 
;------------------------
    setcall        0
    callp          msys.initreadbuffer 0 0
    setcall        1
    load     u64   .s 
    setarg   u64   1
    callf    i64   strlen 1 0
    store    i64   .n 
    load     i64   .n 
    loadimm  i64   16384 
    jumpge   i64   #2173 
    setcall        2
    load     u64   .s 
    setarg   u64   2
    load     u64   msys.rd_buffer 
    setarg   u64   1
    callf    u64   strcpy 2 0
    unload   u64   
    jump           #2172 
#2173:
    setcall        3
    loadimm  u64   16383 
    setarg   u64   3
    load     u64   .s 
    setarg   u64   2
    load     u64   msys.rd_buffer 
    setarg   u64   1
    callp          memcpy 3 0
    loadimm  u64   0 
    load     u64   msys.rd_buffer 
    loadimm  i64   16384 
    addptrx  u64   1 0
    loadimm  i64   1 
    subptrx  u64   1 0
    istore   u8    
#2172:
    load     i64   .n 
    store    i64   msys.rd_length 
    load     u64   msys.rd_buffer 
    store    u64   msys.rd_pos 
    loadimm  u64   0 
    store    u64   msys.rd_lastpos 
;------------------------
#2171:
    return         
end

proc msys.readitem
    rettype  u64   
    param    u64   .itemlength 
    local    u64   .p 
    local    u64   .s 
    local    u64   .itemstr 
    local    u8    .quotechar 
    local    u8    .c 
;------------------------
    load     u64   msys.rd_buffer 
    jumpt    u64   #2176 
    setcall        0
    callp          msys.initreadbuffer 0 0
#2176:
#2175:
    load     u64   msys.rd_pos 
    store    u64   .s 
    jump           #2178 
#2177:
    loadref  u64   .s 
    incrto   u64   1
#2178:
    load     u64   .s 
    iload    u8    
    loadimm  u64   32 
    jumpeq   u64   #2177 
    load     u64   .s 
    iload    u8    
    loadimm  i64   9 
    jumpeq   i64   #2177 
#2179:
    load     u64   .s 
    store    u64   .itemstr 
    load     u64   .s 
    double         
    store    u64   msys.rd_pos 
    store    u64   msys.rd_lastpos 
    load     u64   .s 
    iload    u8    
    loadimm  i64   0 
    jumpne   i64   #2181 
    loadimm  i64   0 
    store    i64   msys.termchar 
    loadimm  i64   0 
    load     u64   .itemlength 
    istore   i64   
    load     u64   .s 
    setret   u64   
    jump           #2174 
#2181:
#2180:
    loadimm  u64   0 
    store    u8    .quotechar 
    load     u64   .s 
    iload    u8    
    loadimm  u64   34 
    jumpne   u64   #2183 
    loadimm  u64   34 
    store    u8    .quotechar 
    loadref  u64   .s 
    incrto   u64   1
    jump           #2182 
#2183:
    load     u64   .s 
    iload    u8    
    loadimm  u64   39 
    jumpne   u64   #2184 
    loadimm  u64   39 
    store    u8    .quotechar 
    loadref  u64   .s 
    incrto   u64   1
#2184:
#2182:
    load     u64   .s 
    double         
    store    u64   .itemstr 
    store    u64   .p 
    jump           #2186 
#2185:
    loadref  u64   .s 
    loadincr u64   1
    iload    u8    
    store    u8    .c 
    load     u8    .c 
    switch         #2189 9 61
    opnd           #2190 
#2189:
    swlabel        #2191 
    swlabel        #2190 
    swlabel        #2190 
    swlabel        #2190 
    swlabel        #2190 
    swlabel        #2190 
    swlabel        #2190 
    swlabel        #2190 
    swlabel        #2190 
    swlabel        #2190 
    swlabel        #2190 
    swlabel        #2190 
    swlabel        #2190 
    swlabel        #2190 
    swlabel        #2190 
    swlabel        #2190 
    swlabel        #2190 
    swlabel        #2190 
    swlabel        #2190 
    swlabel        #2190 
    swlabel        #2190 
    swlabel        #2190 
    swlabel        #2190 
    swlabel        #2191 
    swlabel        #2190 
    swlabel        #2190 
    swlabel        #2190 
    swlabel        #2190 
    swlabel        #2190 
    swlabel        #2190 
    swlabel        #2190 
    swlabel        #2190 
    swlabel        #2190 
    swlabel        #2190 
    swlabel        #2190 
    swlabel        #2191 
    swlabel        #2190 
    swlabel        #2190 
    swlabel        #2190 
    swlabel        #2190 
    swlabel        #2190 
    swlabel        #2190 
    swlabel        #2190 
    swlabel        #2190 
    swlabel        #2190 
    swlabel        #2190 
    swlabel        #2190 
    swlabel        #2190 
    swlabel        #2190 
    swlabel        #2190 
    swlabel        #2190 
    swlabel        #2190 
    swlabel        #2191 
    endsw          
#2191:
    load     u8    .quotechar 
    jumpt    u64   #2194 
    load     u64   .p 
    load     u64   .s 
    jumpne   u64   #2193 
#2194:
    jump           #2195 
#2193:
#2192:
    load     u8    .c 
    store    i64   msys.termchar 
    jump           #2187 
    jump           #2188 
#2190:
;normalchar::
#2195:
    load     u8    .c 
    load     u8    .quotechar 
    jumpne   u64   #2197 
    load     u64   .s 
    iload    u8    
    load     u8    .quotechar 
    jumpne   u64   #2199 
    load     u8    .c 
    load     u64   .p 
    istore   u8    
    loadref  u64   .s 
    incrto   u64   1
    loadref  u64   .p 
    incrto   u64   1
    jump           #2198 
#2199:
    load     u64   .s 
    iload    u8    
    store    i64   msys.termchar 
    load     i64   msys.termchar 
    loadimm  i64   44 
    jumpeq   i64   #2202 
    load     i64   msys.termchar 
    loadimm  i64   61 
    jumpne   i64   #2201 
#2202:
    loadref  u64   .s 
    incrto   u64   1
    load     u64   .s 
    iload    u8    
    store    i64   msys.termchar 
#2201:
#2200:
    jump           #2187 
#2198:
    jump           #2196 
#2197:
    load     u8    .c 
    load     u64   .p 
    istore   u8    
    loadref  u64   .p 
    incrto   u64   1
#2196:
#2188:
#2186:
    load     u64   .s 
    iload    u8    
    jumpt    u64   #2185 
#2187:
    load     u64   .s 
    iload    u8    
    loadimm  i64   0 
    jumpne   i64   #2204 
    loadimm  i64   0 
    store    i64   msys.termchar 
#2204:
#2203:
    load     u64   .p 
    load     u64   .itemstr 
    subptr   u64   1
    load     u64   .itemlength 
    istore   i64   
    load     u64   .s 
    store    u64   msys.rd_pos 
    load     u64   .itemstr 
    setret   u64   
    jump           #2174 
;------------------------
#2174:
    return         
end

proc msys.strtoint
    rettype  i64   
    param    u64   .s 
    param    i64   .length 
    param    u64   .base 
    local    u8    .signd 
    local    u64   .aa 
    local    u64   .c 
    local    u64   .d 
;------------------------
    loadimm  i64   0 
    store    i64   msys.itemerror 
    load     i64   .length 
    loadimm  i64   -1 
    jumpne   i64   #2207 
    setcall        1
    load     u64   .s 
    setarg   u64   1
    callf    i64   strlen 1 0
    store    i64   .length 
#2207:
#2206:
    loadimm  i64   0 
    store    u8    .signd 
    load     i64   .length 
    jumpf    i64   #2209 
    load     u64   .s 
    iload    u8    
    loadimm  u64   45 
    jumpne   u64   #2209 
    loadimm  i64   1 
    store    u8    .signd 
    loadref  u64   .s 
    incrto   u64   1
    loadref  u64   .length 
    decrto   i64   1
    jump           #2208 
#2209:
    load     i64   .length 
    jumpf    i64   #2210 
    load     u64   .s 
    iload    u8    
    loadimm  u64   43 
    jumpne   u64   #2210 
    loadref  u64   .s 
    incrto   u64   1
    loadref  u64   .length 
    decrto   i64   1
#2210:
#2208:
    loadimm  u64   0 
    store    u64   .aa 
    jump           #2212 
#2211:
    loadref  u64   .s 
    loadincr u64   1
    iload    u8    
    store    u64   .c 
    loadref  u64   .length 
    decrto   i64   1
    load     u64   .c 
    switch         #2215 39 102
    opnd           #2216 
#2215:
    swlabel        #2220 
    swlabel        #2216 
    swlabel        #2216 
    swlabel        #2216 
    swlabel        #2216 
    swlabel        #2216 
    swlabel        #2216 
    swlabel        #2216 
    swlabel        #2216 
    swlabel        #2219 
    swlabel        #2219 
    swlabel        #2219 
    swlabel        #2219 
    swlabel        #2219 
    swlabel        #2219 
    swlabel        #2219 
    swlabel        #2219 
    swlabel        #2219 
    swlabel        #2219 
    swlabel        #2216 
    swlabel        #2216 
    swlabel        #2216 
    swlabel        #2216 
    swlabel        #2216 
    swlabel        #2216 
    swlabel        #2216 
    swlabel        #2217 
    swlabel        #2217 
    swlabel        #2217 
    swlabel        #2217 
    swlabel        #2217 
    swlabel        #2217 
    swlabel        #2216 
    swlabel        #2216 
    swlabel        #2216 
    swlabel        #2216 
    swlabel        #2216 
    swlabel        #2216 
    swlabel        #2216 
    swlabel        #2216 
    swlabel        #2216 
    swlabel        #2216 
    swlabel        #2216 
    swlabel        #2216 
    swlabel        #2216 
    swlabel        #2216 
    swlabel        #2216 
    swlabel        #2216 
    swlabel        #2216 
    swlabel        #2216 
    swlabel        #2216 
    swlabel        #2216 
    swlabel        #2216 
    swlabel        #2216 
    swlabel        #2216 
    swlabel        #2216 
    swlabel        #2220 
    swlabel        #2216 
    swlabel        #2218 
    swlabel        #2218 
    swlabel        #2218 
    swlabel        #2218 
    swlabel        #2218 
    swlabel        #2218 
    endsw          
#2217:
    load     u64   .c 
    loadimm  u64   65 
    sub      u64   
    loadimm  i64   10 
    add      i64   
    store    u64   .d 
    jump           #2214 
#2218:
    load     u64   .c 
    loadimm  u64   97 
    sub      u64   
    loadimm  i64   10 
    add      i64   
    store    u64   .d 
    jump           #2214 
#2219:
    load     u64   .c 
    loadimm  u64   48 
    sub      u64   
    store    u64   .d 
    jump           #2214 
#2220:
    jump           #2212 
    jump           #2214 
#2216:
    loadimm  i64   1 
    store    i64   msys.itemerror 
    jump           #2213 
#2214:
    load     u64   .d 
    load     u64   .base 
    jumplt   u64   #2222 
    loadimm  i64   1 
    store    i64   msys.itemerror 
    jump           #2213 
#2222:
#2221:
    load     u64   .aa 
    load     u64   .base 
    mul      u64   
    load     u64   .d 
    add      u64   
    store    u64   .aa 
#2212:
    load     i64   .length 
    jumpt    i64   #2211 
#2213:
    startmx        
    load     u8    .signd 
    jumpf    i64   #2224 
    load     u64   .aa 
    neg      u64   
    resetmx        
    jump           #2223 
#2224:
    load     u64   .aa 
    endmx          
#2223:
    setret   i64   
    jump           #2205 
;------------------------
#2205:
    return         
end

proc msys.m$read_i64
    rettype  i64   
    param    i64   .fmt 
    local    u64   .s 
    local    i64   .length 
    local    i64   .c 
    local    i64   .aa 
;------------------------
    load     i64   .fmt 
    loadimm  i64   67 
    jumpeq   i64   #2227 1
    loadimm  i64   99 
    jumpeq   i64   #2227 1
    loadimm  i64   84 
    jumpeq   i64   #2228 1
    loadimm  i64   116 
    jumpeq   i64   #2228 1
    loadimm  i64   69 
    jumpeq   i64   #2229 1
    loadimm  i64   101 
    jumpeq   i64   #2229 
    jump           #2230 
#2227:
    load     u64   msys.rd_pos 
    store    u64   msys.rd_lastpos 
    load     u64   msys.rd_pos 
    iload    u8    
    jumpf    u64   #2232 
    loadref  u64   msys.rd_pos 
    loadincr u64   1
    iload    u8    
    setret   i64   
    jump           #2225 
    jump           #2231 
#2232:
    loadimm  i64   0 
    setret   i64   
    jump           #2225 
#2231:
    jump           #2226 
#2228:
    load     i64   msys.termchar 
    setret   i64   
    jump           #2225 
    jump           #2226 
#2229:
    load     i64   msys.itemerror 
    setret   i64   
    jump           #2225 
    jump           #2226 
#2230:
#2226:
    setcall        1
    loadref  u64   .length 
    setarg   u64   1
    callf    u64   msys.readitem 1 0
    store    u64   .s 
    load     i64   .fmt 
    loadimm  i64   0 
    jumpeq   i64   #2234 1
    loadimm  i64   73 
    jumpeq   i64   #2234 1
    loadimm  i64   105 
    jumpeq   i64   #2234 1
    loadimm  i64   66 
    jumpeq   i64   #2235 1
    loadimm  i64   98 
    jumpeq   i64   #2235 1
    loadimm  i64   72 
    jumpeq   i64   #2236 1
    loadimm  i64   104 
    jumpeq   i64   #2236 
    jump           #2237 
#2234:
    setcall        3
    loadimm  u64   10 
    setarg   u64   3
    load     i64   .length 
    setarg   i64   2
    load     u64   .s 
    setarg   u64   1
    callf    i64   msys.strtoint 3 0
    setret   i64   
    jump           #2225 
    jump           #2233 
#2235:
    setcall        3
    loadimm  u64   2 
    setarg   u64   3
    load     i64   .length 
    setarg   i64   2
    load     u64   .s 
    setarg   u64   1
    callf    i64   msys.strtoint 3 0
    setret   i64   
    jump           #2225 
    jump           #2233 
#2236:
    setcall        3
    loadimm  u64   16 
    setarg   u64   3
    load     i64   .length 
    setarg   i64   2
    load     u64   .s 
    setarg   u64   1
    callf    i64   msys.strtoint 3 0
    setret   i64   
    jump           #2225 
    jump           #2233 
#2237:
#2233:
    loadimm  i64   0 
    setret   i64   
    jump           #2225 
;------------------------
#2225:
    return         
end

proc msys.m$read_r64
    rettype  r64   
    param    i64   .fmt 
    local    mem 512 .str 
    local    u64   .s 
    local    i64   .length 
    local    i32   .numlength 
    local    r64   .x 
;------------------------
    setcall        1
    loadref  u64   .length 
    setarg   u64   1
    callf    u64   msys.readitem 1 0
    store    u64   .s 
    load     i64   .length 
    loadimm  i64   0 
    jumpeq   i64   #2241 
    load     i64   .length 
    loadimm  i64   512 
    jumplt   i64   #2240 
#2241:
    loadimm  r64   0.00000000000000000000 
    setret   r64   
    jump           #2238 
#2240:
#2239:
    setcall        3
    load     i64   .length 
    setarg   u64   3
    load     u64   .s 
    setarg   u64   2
    loadref  u64   .str 
    setarg   u64   1
    callp          memcpy 3 0
    loadimm  u64   0 
    loadref  u64   .str 
    load     i64   .length 
    istorex  u8    1 0
    loadimm  i64   0 
    store    i64   msys.itemerror 
    setcall        4
    loadref  u64   .numlength 
    setarg   u64   4
    loadref  u64   .x 
    setarg   u64   3
    loadimm  u64   "%lf%n"
    setarg   u64   2
    loadref  u64   .str 
    setarg   u64   1
    callf    i32   sscanf 4 3
    widen    i32   
    loadimm  i64   0 
    jumpeq   i64   #2244 
    load     i32   .numlength 
    load     i64   .length 
    jumpeq   i64   #2243 
#2244:
    loadimm  r64   0.00000000000000000000 
    store    r64   .x 
    loadimm  i64   1 
    store    i64   msys.itemerror 
#2243:
#2242:
    load     r64   .x 
    setret   r64   
    jump           #2238 
;------------------------
#2238:
    return         
end

proc msys.m$read_str
    param    u64   .dest 
    param    i64   .destlen 
    param    i64   .fmt 
    local    u64   .s 
    local    i64   .length 
    local    i64   .numlength 
    local    r64   .x 
;------------------------
    loadimm  i64   0 
    store    i64   msys.itemerror 
    load     i64   .fmt 
    loadimm  i64   76 
    jumpeq   i64   #2249 
    load     i64   .fmt 
    loadimm  i64   108 
    jumpne   i64   #2248 
#2249:
    load     u64   msys.rd_pos 
    store    u64   .s 
    load     u64   msys.rd_buffer 
    load     i64   msys.rd_length 
    addptrx  u64   1 0
    load     u64   msys.rd_pos 
    subptr   u64   1
    store    i64   .length 
    jump           #2247 
#2248:
    setcall        1
    loadref  u64   .length 
    setarg   u64   1
    callf    u64   msys.readitem 1 0
    store    u64   .s 
    load     i64   .fmt 
    loadimm  i64   78 
    jumpeq   i64   #2252 
    load     i64   .fmt 
    loadimm  i64   110 
    jumpne   i64   #2251 
#2252:
    setcall        2
    load     i64   .length 
    setarg   i64   2
    load     u64   .s 
    setarg   u64   1
    callp          mlib.iconvlcn 2 0
#2251:
#2250:
#2247:
    load     i64   .destlen 
    loadimm  i64   0 
    jumple   i64   #2254 
    load     i64   .length 
    load     i64   .destlen 
    jumplt   i64   #2256 
    load     i64   .destlen 
    loadimm  i64   1 
    sub      i64   
    store    i64   .length 
    loadimm  i64   1 
    store    i64   msys.itemerror 
#2256:
#2255:
#2254:
#2253:
    setcall        3
    load     i64   .length 
    setarg   u64   3
    load     u64   .s 
    setarg   u64   2
    load     u64   .dest 
    setarg   u64   1
    callp          memcpy 3 0
    loadimm  u64   0 
    load     u64   .dest 
    load     i64   .length 
    addptrx  u64   1 0
    istore   u8    
;------------------------
#2246:
    return         
end

proc msys.readstr
    param    u64   .dest 
    param    i64   .fmt 
    param    i64   .destlen 
;------------------------
    setcall        3
    load     i64   .fmt 
    setarg   i64   3
    load     i64   .destlen 
    setarg   i64   2
    load     u64   .dest 
    setarg   u64   1
    callp          msys.m$read_str 3 0
;------------------------
#2257:
    return         
end

proc msys.rereadln
;------------------------
    load     u64   msys.rd_buffer 
    store    u64   msys.rd_pos 
    load     u64   msys.rd_pos 
    store    u64   msys.rd_lastpos 
;------------------------
#2258:
    return         
end

proc msys.reread
;------------------------
    load     u64   msys.rd_lastpos 
    store    u64   msys.rd_pos 
;------------------------
#2259:
    return         
end

proc msys.valint
    rettype  i64   
    param    u64   .s 
    param    i64   .fmt 
    local    u64   .old_pos 
    local    u64   .old_lastpos 
    local    i64   .aa 
;------------------------
    setcall        0
    callp          msys.initreadbuffer 0 0
    load     u64   msys.rd_pos 
    store    u64   .old_pos 
    load     u64   msys.rd_lastpos 
    store    u64   .old_lastpos 
    load     u64   .s 
    store    u64   msys.rd_pos 
    setcall        1
    load     i64   .fmt 
    setarg   i64   1
    callf    i64   msys.m$read_i64 1 0
    store    i64   .aa 
    load     u64   .old_pos 
    store    u64   msys.rd_pos 
    load     u64   .old_lastpos 
    store    u64   msys.rd_lastpos 
    load     i64   .aa 
    setret   i64   
    jump           #2260 
;------------------------
#2260:
    return         
end

proc msys.valreal
    rettype  r64   
    param    u64   .s 
    local    u64   .old_pos 
    local    u64   .old_lastpos 
    local    r64   .x 
;------------------------
    setcall        0
    callp          msys.initreadbuffer 0 0
    load     u64   msys.rd_pos 
    store    u64   .old_pos 
    load     u64   msys.rd_lastpos 
    store    u64   .old_lastpos 
    load     u64   .s 
    store    u64   msys.rd_pos 
    setcall        1
    loadimm  i64   0 
    setarg   i64   1
    callf    r64   msys.m$read_r64 1 0
    store    r64   .x 
    load     u64   .old_pos 
    store    u64   msys.rd_pos 
    load     u64   .old_lastpos 
    store    u64   msys.rd_lastpos 
    load     r64   .x 
    setret   r64   
    jump           #2261 
;------------------------
#2261:
    return         
end

proc msys.mclunimpl
    param    u64   .mess 
;------------------------
    setcall        2
    load     u64   .mess 
    setarg   u64   2
    loadimm  u64   "MCL-UNIMPL: %s\n"
    setarg   u64   1
    callp          printf 2 2
    loadimm  i64   1 
    stop           
;------------------------
#2262:
    return         
end

proc msys.dumpstr
    param    u64   .s 
    param    i64   .n 
    param    i64   .fbuffer 
    local    u64   .p 
;------------------------
    load     i64   .n 
    loadimm  i64   0 
    jumpne   i64   #2266 
    jump           #2264 
#2266:
#2265:
    load     i64   msys.outdev 
    loadimm  i64   3 
    jumpne   i64   #2268 
    load     u64   msys.outchan 
    store    u64   .p 
    setcall        3
    load     i64   .n 
    setarg   u64   3
    load     u64   .s 
    setarg   u64   2
    load     u64   .p 
    iload    u64   
    setarg   u64   1
    callp          memcpy 3 0
    load     u64   .p 
    load     i64   .n 
    addpxto  u64   1 0
    loadimm  u64   0 
    load     u64   .p 
    iload    u64   
    istore   u8    
    jump           #2264 
#2268:
#2267:
    load     i64   .fbuffer 
    jumpf    i64   #2270 
    load     i64   .n 
    loadimm  i64   2 
    jumplt   i64   #2270 
    load     i64   msys.outdev 
    loadimm  i64   1 
    jumpne   i64   #2270 
    loadref  u64   msys.printptr 
    decrto   u64   1
    load     u64   msys.printptr 
    iload    u8    
    loadimm  i64   10 
    jumpne   i64   #2272 
    load     u64   msys.printptr 
    loadimm  i64   1 
    subptrx  u64   1 0
    iload    u8    
    loadimm  i64   13 
    jumpne   i64   #2274 
    loadimm  u64   0 
    load     u64   msys.printptr 
    loadimm  i64   1 
    subptrx  u64   1 0
    istore   u8    
    jump           #2273 
#2274:
    loadimm  u64   0 
    load     u64   msys.printptr 
    istore   u8    
#2273:
    setcall        1
    loadref  u64   msys.printbuffer 
    setarg   u64   1
    callf    i32   puts 1 0
    unload   i32   
    jump           #2264 
#2272:
#2271:
#2270:
#2269:
    load     i64   msys.outdev 
    loadimm  i64   1 
    jumpeq   i64   #2276 1
    loadimm  i64   2 
    jumpeq   i64   #2277 
    jump           #2278 
#2276:
    setcall        3
    load     u64   .s 
    setarg   u64   3
    load     i64   .n 
    setarg   i64   2
    loadimm  u64   "%.*s"
    setarg   u64   1
    callp          printf 3 2
    jump           #2275 
#2277:
    setcall        4
    load     u64   .s 
    setarg   u64   4
    load     i64   .n 
    setarg   i64   3
    loadimm  u64   "%.*s"
    setarg   u64   2
    load     u64   msys.outchan 
    setarg   u64   1
    callp          fprintf 4 3
    jump           #2275 
#2278:
#2275:
;------------------------
#2264:
    return         
end

proc msys.dumpprintbuffer
;------------------------
    load     i64   msys.printlen 
    jumpf    i64   #2282 
    setcall        3
    loadimm  i64   1 
    setarg   i64   3
    load     i64   msys.printlen 
    setarg   i64   2
    loadref  u64   msys.printbuffer 
    setarg   u64   1
    callp          msys.dumpstr 3 0
#2282:
#2281:
    setcall        0
    callp          msys.resetprintbuffer 0 0
;------------------------
#2280:
    return         
end

proc msys.resetprintbuffer
;------------------------
    loadref  u64   msys.printbuffer 
    store    u64   msys.printptr 
    loadimm  i64   0 
    store    i64   msys.printlen 
;------------------------
#2283:
    return         
end

proc msys.addtobuffer
    param    u64   .s 
    param    i64   .n 
;------------------------
    load     i64   msys.printlen 
    load     i64   .n 
    add      i64   
    loadimm  i64   4088 
    jumplt   i64   #2286 
    setcall        0
    callp          msys.dumpprintbuffer 0 0
#2286:
#2285:
    load     i64   .n 
    loadimm  i64   4096 
    jumpge   i64   #2288 
    setcall        3
    load     i64   .n 
    setarg   u64   3
    load     u64   .s 
    setarg   u64   2
    load     u64   msys.printptr 
    setarg   u64   1
    callp          memcpy 3 0
    loadref  u64   msys.printptr 
    load     i64   .n 
    addpxto  u64   1 0
    loadref  u64   msys.printlen 
    load     i64   .n 
    addto    i64   
    jump           #2284 
#2288:
#2287:
    setcall        3
    loadimm  i64   0 
    setarg   i64   3
    load     i64   .n 
    setarg   i64   2
    load     u64   .s 
    setarg   u64   1
    callp          msys.dumpstr 3 0
;------------------------
#2284:
    return         
end

proc msys.m$power_i64
    rettype  i64   
    param    i64   .a 
    param    i64   .n 
;------------------------
    startmx        
    load     i64   .n 
    loadimm  i64   0 
    jumpge   i64   #2291 
    loadimm  i64   0 
    resetmx        
    jump           #2290 
#2291:
    load     i64   .n 
    loadimm  i64   0 
    jumpne   i64   #2292 
    loadimm  i64   1 
    resetmx        
    jump           #2290 
#2292:
    load     i64   .n 
    loadimm  i64   1 
    jumpne   i64   #2293 
    load     i64   .a 
    resetmx        
    jump           #2290 
#2293:
    load     i64   .n 
    loadimm  i64   1 
    bitand   i64   
    loadimm  i64   0 
    jumpne   i64   #2294 
    setcall        2
    load     i64   .n 
    loadimm  i64   2 
    div      i64   
    setarg   i64   2
    load     i64   .a 
    sqr      i64   
    setarg   i64   1
    callf    i64   msys.m$power_i64 2 0
    resetmx        
    jump           #2290 
#2294:
    setcall        2
    load     i64   .n 
    loadimm  i64   1 
    sub      i64   
    loadimm  i64   2 
    div      i64   
    setarg   i64   2
    load     i64   .a 
    sqr      i64   
    setarg   i64   1
    callf    i64   msys.m$power_i64 2 0
    load     i64   .a 
    mul      i64   
    endmx          
#2290:
    setret   i64   
    jump           #2289 
;------------------------
#2289:
    return         
end

proc mlib.pcm_alloc
    rettype  u64   
    param    i64   .n 
    local    u64   .p 
;------------------------
    load     u8    mlib.pcm_setup 
    jumpt    i64   #2297 
    setcall        0
    callp          mlib.pcm_init 0 0
#2297:
#2296:
    load     i64   .n 
    loadimm  i64   2048 
    jumple   i64   #2299 
    setcall        1
    load     i64   .n 
    setarg   i64   1
    callf    i64   mlib.pcm_getac 1 0
    store    i64   mlib.alloccode 
    loadref  u64   mlib.allocupper 
    load     i64   mlib.alloccode 
    iloadx   i64   8 0
    store    i64   mlib.allocbytes 
    setcall        1
    load     i64   mlib.allocbytes 
    setarg   i64   1
    callf    u64   mlib.allocmem 1 0
    store    u64   .p 
    load     u64   .p 
    jumpt    u64   #2301 
    setcall        1
    loadimm  u64   "pcm_alloc failure"
    setarg   u64   1
    callp          mlib.abortprogram 1 0
#2301:
#2300:
    load     u64   .p 
    setret   u64   
    jump           #2295 
#2299:
#2298:
    loadref  u64   mlib.sizeindextable 
    load     i64   .n 
    iloadx   u8    1 0
    store    i64   mlib.alloccode 
    loadref  u64   mlib.allocupper 
    load     i64   mlib.alloccode 
    iloadx   i64   8 0
    store    i64   mlib.allocbytes 
    loadref  u64   mlib.smallmemtotal 
    load     i64   mlib.allocbytes 
    addto    i64   
    loadref  u64   mlib.freelist 
    load     i64   mlib.alloccode 
    iloadx   u64   8 0
    double         
    store    u64   .p 
    jumpf    u64   #2304 
    loadref  u64   mlib.freelist 
    load     i64   mlib.alloccode 
    iloadx   u64   8 0
    iload    u64   
    loadref  u64   mlib.freelist 
    load     i64   mlib.alloccode 
    istorex  u64   8 0
    load     u64   .p 
    setret   u64   
    jump           #2295 
#2304:
#2303:
    load     u64   mlib.pcheapptr 
    store    u64   .p 
    loadref  u64   mlib.pcheapptr 
    load     i64   mlib.allocbytes 
    addpxto  u64   1 0
    load     u64   mlib.pcheapptr 
    load     u64   mlib.pcheapend 
    jumplt   u64   #2306 
    setcall        1
    load     i64   mlib.allocbytes 
    setarg   i64   1
    callf    u64   mlib.pcm_newblock 1 0
    store    u64   .p 
    load     u64   .p 
    setret   u64   
    jump           #2295 
#2306:
#2305:
    load     u64   .p 
    setret   u64   
    jump           #2295 
;------------------------
#2295:
    return         
end

proc mlib.pcm_free
    param    u64   .p 
    param    i64   .n 
    local    i64   .acode 
;------------------------
    load     i64   .n 
    loadimm  i64   0 
    jumpne   i64   #2309 
    jump           #2307 
#2309:
#2308:
    load     i64   .n 
    loadimm  i64   2048 
    jumple   i64   #2311 
    loadref  u64   mlib.memtotal 
    load     i64   .n 
    subto    i64   
    setcall        1
    load     u64   .p 
    setarg   u64   1
    callp          free 1 0
    jump           #2307 
#2311:
#2310:
    load     u64   .p 
    jumpf    u64   #2313 
    loadref  u64   mlib.sizeindextable 
    load     i64   .n 
    iloadx   u8    1 0
    store    i64   .acode 
    loadref  u64   mlib.smallmemtotal 
    loadref  u64   mlib.allocupper 
    load     i64   .acode 
    iloadx   i64   8 0
    subto    i64   
    loadref  u64   mlib.freelist 
    load     i64   .acode 
    iloadx   u64   8 0
    load     u64   .p 
    istore   u64   
    load     u64   .p 
    loadref  u64   mlib.freelist 
    load     i64   .acode 
    istorex  u64   8 0
#2313:
#2312:
;------------------------
#2307:
    return         
end

proc mlib.pcm_freeac
    param    u64   .p 
    param    i64   .alloc 
;------------------------
    setcall        2
    loadref  u64   mlib.allocupper 
    load     i64   .alloc 
    iloadx   i64   8 0
    setarg   i64   2
    load     u64   .p 
    setarg   u64   1
    callp          mlib.pcm_free 2 0
;------------------------
#2314:
    return         
end

proc mlib.pcm_clearmem
    param    u64   .p 
    param    i64   .n 
;------------------------
    setcall        3
    load     i64   .n 
    setarg   u64   3
    loadimm  i64   0 
    setarg   i32   2
    load     u64   .p 
    setarg   u64   1
    callp          memset 3 0
;------------------------
#2315:
    return         
end

proc mlib.pcm_init
    local    i64   .j 
    local    i64   .k 
    local    i64   .k1 
    local    i64   .k2 
    local    i64   .size 
    local    i64   .$av_1 
    local    i64   .i 
;------------------------
    loadimm  i64   0 
    store    i64   mlib.alloccode 
    load     u8    mlib.pcm_setup 
    jumpf    i64   #2318 
    jump           #2316 
#2318:
#2317:
    setcall        1
    loadimm  i64   0 
    setarg   i64   1
    callf    u64   mlib.pcm_newblock 1 0
    unload   u64   
    loadimm  i64   1 
    store    i64   .i 
#2319:
    loadimm  i64   1 
    store    i64   .j 
    loadimm  i64   16 
    store    i64   .k 
    jump           #2323 
#2322:
    load     i64   .k 
    loadimm  i64   1 
    shl      i64   
    store    i64   .k 
    loadref  u64   .j 
    incrto   i64   1
#2323:
    load     i64   .i 
    load     i64   .k 
    jumpgt   i64   #2322 
#2324:
    load     i64   .j 
    loadref  u64   mlib.sizeindextable 
    load     i64   .i 
    istorex  u8    1 0
#2320:
    forup          #2319 1
    opnd           .i 
    opnd           2048 
#2321:
    loadimm  u64   16 
    loadref  u64   mlib.allocupper 
    loadimm  i64   1 
    istorex  u64   8 0
    loadimm  i64   16 
    store    i64   .size 
    loadimm  i64   2 
    store    i64   .i 
#2325:
    loadref  u64   .size 
    loadimm  i64   2 
    multo    i64   
    load     i64   .size 
    loadref  u64   mlib.allocupper 
    load     i64   .i 
    istorex  u64   8 0
    load     i64   .size 
    loadimm  i64   33554432 
    jumplt   i64   #2329 
    load     i64   .i 
    store    i64   .k 
    jump           #2327 
#2329:
#2328:
#2326:
    forup          #2325 1
    opnd           .i 
    opnd           27 
#2327:
    load     i64   .k 
    loadimm  i64   1 
    add      i64   
    store    i64   .i 
    load     i64   .i 
    loadimm  i64   300 
    jumpgt   i64   #2332 
#2330:
    loadref  u64   .size 
    loadimm  i64   33554432 
    addto    i64   
    load     i64   .size 
    loadimm  i64   8589934592 
    jumpge   i64   #2334 
    load     i64   .size 
    loadref  u64   mlib.allocupper 
    load     i64   .i 
    istorex  u64   8 0
    load     i64   .size 
    store    u64   mlib.maxmemory 
    jump           #2333 
#2334:
    load     i64   .i 
    loadimm  i64   1 
    sub      i64   
    store    i64   mlib.maxalloccode 
    jump           #2332 
#2333:
#2331:
    forup          #2330 1
    opnd           .i 
    opnd           300 
#2332:
    loadimm  i64   1 
    store    u8    mlib.pcm_setup 
;------------------------
#2316:
    return         
end

proc mlib.pcm_getac
    rettype  i64   
    param    i64   .size 
;------------------------
    load     i64   .size 
    loadimm  i64   2048 
    jumpgt   i64   #2337 
    loadref  u64   mlib.sizeindextable 
    load     i64   .size 
    iloadx   u8    1 0
    setret   i64   
    jump           #2335 
#2337:
#2336:
    load     i64   .size 
    loadimm  i64   255 
    add      i64   
    loadimm  i64   8 
    shr      i64   
    store    i64   .size 
    load     i64   .size 
    loadimm  i64   2048 
    jumpgt   i64   #2339 
    loadref  u64   mlib.sizeindextable 
    load     i64   .size 
    iloadx   u8    1 0
    loadimm  i64   8 
    add      i64   
    setret   i64   
    jump           #2335 
#2339:
#2338:
    load     i64   .size 
    loadimm  i64   63 
    add      i64   
    loadimm  i64   6 
    shr      i64   
    store    i64   .size 
    load     i64   .size 
    loadimm  i64   2048 
    jumpgt   i64   #2341 
    loadref  u64   mlib.sizeindextable 
    load     i64   .size 
    iloadx   u8    1 0
    loadimm  i64   14 
    add      i64   
    setret   i64   
    jump           #2335 
#2341:
#2340:
    load     i64   .size 
    loadimm  i64   2048 
    sub      i64   
    loadimm  i64   2047 
    add      i64   
    loadimm  i64   2048 
    div      i64   
    loadimm  i64   22 
    add      i64   
    store    i64   .size 
    load     i64   .size 
    setret   i64   
    jump           #2335 
;------------------------
#2335:
    return         
end

proc mlib.pcm_newblock
    rettype  u64   
    param    i64   .itemsize 
    local    u64   .p 
;------------------------
    loadref  u64   mlib.pcm_newblock.totalheapsize 
    loadimm  i64   2097152 
    addto    i64   
    loadimm  i64   0 
    store    i64   mlib.alloccode 
    setcall        1
    loadimm  i64   2097152 
    setarg   i64   1
    callf    u64   mlib.allocmem 1 0
    store    u64   .p 
    load     u64   .p 
    loadimm  u64   0 
    jumpne   u64   #2344 
    setcall        1
    loadimm  u64   "Can't alloc pc heap"
    setarg   u64   1
    callp          mlib.abortprogram 1 0
#2344:
#2343:
    load     u64   .p 
    store    u64   mlib.pcheapptr 
    load     u64   .p 
    loadimm  i64   2097152 
    addptrx  u64   1 0
    store    u64   mlib.pcheapend 
    load     u64   mlib.pcheapstart 
    loadimm  u64   0 
    jumpne   u64   #2347 
    load     u64   .p 
    store    u64   mlib.pcheapstart 
#2347:
#2346:
    loadref  u64   mlib.pcheapptr 
    load     i64   .itemsize 
    addpxto  u64   1 0
    load     u64   .p 
    setret   u64   
    jump           #2342 
;------------------------
#2342:
    return         
end

proc mlib.pcm_round
    rettype  i64   
    param    i64   .n 
;------------------------
    startmx        
    load     i64   .n 
    loadimm  i64   2048 
    jumple   i64   #2350 
    load     i64   .n 
    resetmx        
    jump           #2349 
#2350:
    loadref  u64   mlib.pcm_round.allocbytes 
    loadref  u64   mlib.sizeindextable 
    load     i64   .n 
    iloadx   u8    1 0
    iloadx   i32   4 0
    endmx          
#2349:
    setret   i64   
    jump           #2348 
;------------------------
#2348:
    return         
end

proc mlib.pcm_allocz
    rettype  u64   
    param    i64   .n 
    local    u64   .p 
;------------------------
    setcall        1
    load     i64   .n 
    setarg   i64   1
    callf    u64   mlib.pcm_alloc 1 0
    store    u64   .p 
    setcall        3
    load     i64   .n 
    setarg   u64   3
    loadimm  i64   0 
    setarg   i32   2
    load     u64   .p 
    setarg   u64   1
    callp          memset 3 0
    load     u64   .p 
    setret   u64   
    jump           #2351 
;------------------------
#2351:
    return         
end

proc mlib.pcm_copyheapstring
    rettype  u64   
    param    u64   .s 
    local    u64   .q 
    local    i64   .n 
;------------------------
    load     u64   .s 
    loadimm  u64   0 
    jumpne   u64   #2354 
    loadimm  u64   0 
    setret   u64   
    jump           #2352 
#2354:
#2353:
    setcall        1
    load     u64   .s 
    setarg   u64   1
    callf    i64   strlen 1 0
    loadimm  i64   1 
    add      i64   
    store    i64   .n 
    setcall        1
    load     i64   .n 
    setarg   i64   1
    callf    u64   mlib.pcm_alloc 1 0
    store    u64   .q 
    setcall        3
    load     i64   .n 
    setarg   u64   3
    load     u64   .s 
    setarg   u64   2
    load     u64   .q 
    setarg   u64   1
    callp          memcpy 3 0
    load     u64   .q 
    setret   u64   
    jump           #2352 
;------------------------
#2352:
    return         
end

proc mlib.pcm_copyheapstringn
    rettype  u64   
    param    u64   .s 
    param    i64   .n 
    local    u64   .q 
;------------------------
    load     u64   .s 
    loadimm  u64   0 
    jumpne   u64   #2357 
    loadimm  u64   0 
    setret   u64   
    jump           #2355 
#2357:
#2356:
    setcall        1
    load     i64   .n 
    loadimm  i64   1 
    add      i64   
    setarg   i64   1
    callf    u64   mlib.pcm_alloc 1 0
    store    u64   .q 
    setcall        3
    load     i64   .n 
    setarg   u64   3
    load     u64   .s 
    setarg   u64   2
    load     u64   .q 
    setarg   u64   1
    callp          memcpy 3 0
    loadimm  u64   0 
    load     u64   .q 
    load     i64   .n 
    addptrx  u64   1 0
    istore   u8    
    load     u64   .q 
    setret   u64   
    jump           #2355 
;------------------------
#2355:
    return         
end

proc mlib.pcm_copyheapblock
    rettype  u64   
    param    u64   .s 
    param    i64   .length 
    local    u64   .q 
;------------------------
    load     i64   .length 
    loadimm  i64   0 
    jumpne   i64   #2360 
    loadimm  u64   0 
    setret   u64   
    jump           #2358 
#2360:
#2359:
    setcall        1
    load     i64   .length 
    setarg   i64   1
    callf    u64   mlib.pcm_alloc 1 0
    store    u64   .q 
    setcall        3
    load     i64   .length 
    setarg   u64   3
    load     u64   .s 
    setarg   u64   2
    load     u64   .q 
    setarg   u64   1
    callp          memcpy 3 0
    load     u64   .q 
    setret   u64   
    jump           #2358 
;------------------------
#2358:
    return         
end

proc mlib.allocmem
    rettype  u64   
    param    i64   .n 
    local    u64   .p 
;------------------------
    setcall        1
    load     i64   .n 
    setarg   u64   1
    callf    u64   malloc 1 0
    store    u64   .p 
    load     u64   .p 
    jumpf    u64   #2363 
    loadref  u64   mlib.memtotal 
    load     i64   .n 
    addto    i64   
    load     u64   .p 
    setret   u64   
    jump           #2361 
#2363:
#2362:
    callp          msys.m$print_startcon 0 0
    load     i64   .n 
    callp          msys.m$print_i64_nf 1 0
    load     i64   mlib.memtotal 
    callp          msys.m$print_i64_nf 1 0
    callp          msys.m$print_newline 0 0
    callp          msys.m$print_end 0 0
    setcall        1
    loadimm  u64   "Alloc mem failure"
    setarg   u64   1
    callp          mlib.abortprogram 1 0
    loadimm  u64   0 
    setret   u64   
    jump           #2361 
;------------------------
#2361:
    return         
end

proc mlib.reallocmem
    rettype  u64   
    param    u64   .p 
    param    i64   .n 
;------------------------
    setcall        2
    load     i64   .n 
    setarg   u64   2
    load     u64   .p 
    setarg   u64   1
    callf    u64   realloc 2 0
    store    u64   .p 
    load     u64   .p 
    jumpf    u64   #2367 
    load     u64   .p 
    setret   u64   
    jump           #2365 
#2367:
#2366:
    callp          msys.m$print_startcon 0 0
    load     i64   .n 
    callp          msys.m$print_i64_nf 1 0
    callp          msys.m$print_newline 0 0
    callp          msys.m$print_end 0 0
    setcall        1
    loadimm  u64   "Realloc mem failure"
    setarg   u64   1
    callp          mlib.abortprogram 1 0
    loadimm  u64   0 
    setret   u64   
    jump           #2365 
;------------------------
#2365:
    return         
end

proc mlib.abortprogram
    param    u64   .s 
;------------------------
    callp          msys.m$print_startcon 0 0
    load     u64   .s 
    callp          msys.m$print_str_nf 1 0
    callp          msys.m$print_newline 0 0
    callp          msys.m$print_end 0 0
    callp          msys.m$print_startcon 0 0
    loadimm  u64   "ABORTING: Press key..."
    callp          msys.m$print_str_nf 1 0
    callp          msys.m$print_newline 0 0
    callp          msys.m$print_end 0 0
    callp          msys.m$print_startcon 0 0
    callp          msys.m$print_newline 0 0
    callp          msys.m$print_end 0 0
    callp          msys.m$print_startcon 0 0
    callp          msys.m$print_newline 0 0
    callp          msys.m$print_end 0 0
    loadimm  i64   5 
    stop           
;------------------------
#2369:
    return         
end

proc mlib.getfilesize
    rettype  i64   
    param    u64   .handlex 
    local    u32   .p 
    local    u32   .size 
;------------------------
    setcall        1
    load     u64   .handlex 
    setarg   u64   1
    callf    i32   ftell 1 0
    widen    i32   
    store    u32   .p 
    setcall        3
    loadimm  i64   2 
    setarg   i32   3
    loadimm  i64   0 
    setarg   i32   2
    load     u64   .handlex 
    setarg   u64   1
    callf    i32   fseek 3 0
    unload   i32   
    setcall        1
    load     u64   .handlex 
    setarg   u64   1
    callf    i32   ftell 1 0
    widen    i32   
    store    u32   .size 
    setcall        3
    loadimm  i64   0 
    setarg   i32   3
    load     u32   .p 
    setarg   i32   2
    load     u64   .handlex 
    setarg   u64   1
    callf    i32   fseek 3 0
    unload   i32   
    load     u32   .size 
    setret   i64   
    jump           #2371 
;------------------------
#2371:
    return         
end

proc mlib.readrandom
    param    u64   .handlex 
    param    u64   .mem 
    param    i64   .offset 
    param    i64   .size 
    local    i64   .a 
;------------------------
    setcall        3
    loadimm  i64   0 
    setarg   i32   3
    load     i64   .offset 
    setarg   i32   2
    load     u64   .handlex 
    setarg   u64   1
    callf    i32   fseek 3 0
    unload   i32   
    setcall        4
    load     u64   .handlex 
    setarg   u64   4
    load     i64   .size 
    setarg   u64   3
    loadimm  u64   1 
    setarg   u64   2
    load     u64   .mem 
    setarg   u64   1
    callf    i64   fread 4 0
    store    i64   .a 
;------------------------
#2372:
    return         
end

proc mlib.writerandom
    rettype  i64   
    param    u64   .handlex 
    param    u64   .mem 
    param    i64   .offset 
    param    i64   .size 
;------------------------
    setcall        3
    loadimm  i64   0 
    setarg   i32   3
    load     i64   .offset 
    setarg   i32   2
    load     u64   .handlex 
    setarg   u64   1
    callf    i32   fseek 3 0
    unload   i32   
    setcall        4
    load     u64   .handlex 
    setarg   u64   4
    load     i64   .size 
    setarg   u64   3
    loadimm  u64   1 
    setarg   u64   2
    load     u64   .mem 
    setarg   u64   1
    callf    i64   fwrite 4 0
    setret   i64   
    jump           #2373 
;------------------------
#2373:
    return         
end

proc mlib.setfilepos
    rettype  i64   
    param    u64   .file 
    param    i64   .offset 
;------------------------
    setcall        3
    loadimm  i64   0 
    setarg   i32   3
    load     i64   .offset 
    setarg   i32   2
    load     u64   .file 
    setarg   u64   1
    callf    i32   fseek 3 0
    widen    i32   
    setret   i64   
    jump           #2374 
;------------------------
#2374:
    return         
end

proc mlib.getfilepos
    rettype  i64   
    param    u64   .file 
;------------------------
    setcall        1
    load     u64   .file 
    setarg   u64   1
    callf    i32   ftell 1 0
    widen    i32   
    setret   i64   
    jump           #2375 
;------------------------
#2375:
    return         
end

proc mlib.readfile
    rettype  u64   
    param    u64   .filename 
    local    u64   .f 
    local    i64   .size 
    local    u64   .m 
    local    u64   .p 
;------------------------
    setcall        2
    loadimm  u64   "rb"
    setarg   u64   2
    load     u64   .filename 
    setarg   u64   1
    callf    u64   fopen 2 0
    store    u64   .f 
    load     u64   .f 
    loadimm  u64   0 
    jumpne   u64   #2379 
    loadimm  u64   0 
    setret   u64   
    jump           #2376 
#2379:
#2378:
    setcall        1
    load     u64   .f 
    setarg   u64   1
    callf    i64   mlib.getfilesize 1 0
    double         
    store    i64   .size 
    store    i64   mlib.rfsize 
    setcall        1
    load     i64   .size 
    loadimm  i64   2 
    add      i64   
    setarg   i64   1
    callf    u64   mlib.pcm_alloc 1 0
    store    u64   .m 
    load     u64   .m 
    loadimm  u64   0 
    jumpne   u64   #2381 
    loadimm  u64   0 
    setret   u64   
    jump           #2376 
#2381:
#2380:
    setcall        4
    load     i64   .size 
    setarg   i64   4
    loadimm  i64   0 
    setarg   i64   3
    load     u64   .m 
    setarg   u64   2
    load     u64   .f 
    setarg   u64   1
    callp          mlib.readrandom 4 0
    load     u64   .m 
    load     i64   .size 
    addptrx  u64   1 0
    store    u64   .p 
    loadimm  i64   0 
    load     u64   .p 
    istore   u16   
    setcall        1
    load     u64   .f 
    setarg   u64   1
    callf    i32   fclose 1 0
    unload   i32   
    load     u64   .m 
    setret   u64   
    jump           #2376 
;------------------------
#2376:
    return         
end

proc mlib.writefile
    rettype  i64   
    param    u64   .filename 
    param    u64   .data 
    param    i64   .size 
    local    u64   .f 
    local    i64   .n 
;------------------------
    setcall        2
    loadimm  u64   "wb"
    setarg   u64   2
    load     u64   .filename 
    setarg   u64   1
    callf    u64   fopen 2 0
    store    u64   .f 
    load     u64   .f 
    loadimm  u64   0 
    jumpne   u64   #2385 
    loadimm  i64   0 
    setret   i64   
    jump           #2382 
#2385:
#2384:
    setcall        4
    load     i64   .size 
    setarg   i64   4
    loadimm  i64   0 
    setarg   i64   3
    load     u64   .data 
    setarg   u64   2
    load     u64   .f 
    setarg   u64   1
    callf    i64   mlib.writerandom 4 0
    store    i64   .n 
    setcall        1
    load     u64   .f 
    setarg   u64   1
    callf    i32   fclose 1 0
    unload   i32   
    load     i64   .n 
    setret   i64   
    jump           #2382 
;------------------------
#2382:
    return         
end

proc mlib.checkfile
    rettype  i64   
    param    u64   .file 
    local    u64   .f 
;------------------------
    setcall        2
    loadimm  u64   "rb"
    setarg   u64   2
    load     u64   .file 
    setarg   u64   1
    callf    u64   fopen 2 0
    double         
    store    u64   .f 
    jumpf    u64   #2388 
    setcall        1
    load     u64   .f 
    setarg   u64   1
    callf    i32   fclose 1 0
    unload   i32   
    loadimm  i64   1 
    setret   i64   
    jump           #2386 
#2388:
#2387:
    loadimm  i64   0 
    setret   i64   
    jump           #2386 
;------------------------
#2386:
    return         
end

proc mlib.readlinen
    param    u64   .handlex 
    param    u64   .buffer 
    param    i64   .size 
    local    i64   .ch 
    local    u64   .p 
    local    i64   .n 
    local    mem 100 .buff 
    local    u8    .crseen 
;------------------------
    load     u64   .handlex 
    loadimm  u64   0 
    jumpne   u64   #2392 
    setcall        0
    callf    u64   mwindows.os_getstdin 0 0
    store    u64   .handlex 
#2392:
#2391:
    load     u64   .handlex 
    loadimm  u64   0 
    jumpne   u64   #2394 
    loadimm  i64   0 
    store    i64   .n 
    load     u64   .buffer 
    store    u64   .p 
#2395:
    setcall        0
    callf    i32   getchar 0 0
    widen    i32   
    store    i64   .ch 
    load     i64   .ch 
    loadimm  i64   13 
    jumpeq   i64   #2399 
    load     i64   .ch 
    loadimm  i64   10 
    jumpeq   i64   #2399 
    load     i64   .ch 
    loadimm  i64   -1 
    jumpne   i64   #2398 
#2399:
    loadimm  u64   0 
    load     u64   .p 
    istore   u8    
    jump           #2390 
#2398:
#2397:
    load     i64   .ch 
    loadref  u64   .p 
    loadincr u64   1
    istore   u8    
    loadref  u64   .n 
    incrto   i64   1
    load     i64   .n 
    load     i64   .size 
    loadimm  i64   2 
    sub      i64   
    jumplt   i64   #2401 
    loadimm  u64   0 
    load     u64   .p 
    istore   u8    
    jump           #2390 
#2401:
#2400:
    jump           #2395 
#2396:
#2394:
#2393:
    loadimm  u64   0 
    load     u64   .buffer 
    istore   u8    
    setcall        3
    load     u64   .handlex 
    setarg   u64   3
    load     i64   .size 
    loadimm  i64   2 
    sub      i64   
    setarg   i64   2
    load     u64   .buffer 
    setarg   u64   1
    callf    u64   fgets 3 0
    loadimm  u64   0 
    jumpne   u64   #2403 
    jump           #2390 
#2403:
#2402:
    setcall        1
    load     u64   .buffer 
    setarg   u64   1
    callf    i64   strlen 1 0
    store    i64   .n 
    load     i64   .n 
    loadimm  i64   0 
    jumpne   i64   #2405 
    jump           #2390 
#2405:
#2404:
    load     u64   .buffer 
    load     i64   .n 
    addptrx  u64   1 0
    loadimm  i64   1 
    subptrx  u64   1 0
    store    u64   .p 
    loadimm  i64   0 
    store    u8    .crseen 
    jump           #2407 
#2406:
    load     u64   .p 
    iload    u8    
    loadimm  i64   13 
    jumpeq   i64   #2411 
    load     u64   .p 
    iload    u8    
    loadimm  i64   10 
    jumpne   i64   #2410 
#2411:
    loadimm  i64   1 
    store    u8    .crseen 
#2410:
#2409:
    loadimm  u64   0 
    loadref  u64   .p 
    loaddecr u64   1
    istore   u8    
#2407:
    load     u64   .p 
    load     u64   .buffer 
    jumplt   u64   #2412 
    load     u64   .p 
    iload    u8    
    loadimm  i64   13 
    jumpeq   i64   #2406 
    load     u64   .p 
    iload    u8    
    loadimm  i64   10 
    jumpeq   i64   #2406 
#2412:
#2408:
    load     u8    .crseen 
    jumpt    i64   #2414 
    load     i64   .n 
    loadimm  i64   4 
    add      i64   
    load     i64   .size 
    jumple   i64   #2414 
    callp          msys.m$print_startcon 0 0
    load     i64   .size 
    callp          msys.m$print_i64_nf 1 0
    load     i64   .n 
    callp          msys.m$print_i64_nf 1 0
    callp          msys.m$print_newline 0 0
    callp          msys.m$print_end 0 0
    setcall        1
    loadimm  u64   "line too long"
    setarg   u64   1
    callp          mlib.abortprogram 1 0
#2414:
#2413:
;------------------------
#2390:
    return         
end

proc mlib.iconvlcn
    param    u64   .s 
    param    i64   .n 
    local    i64   .$av_1 
;------------------------
    load     i64   .n 
    store    i64   .$av_1 
    load     i64   .$av_1 
    loadimm  i64   0 
    jumple   i64   #2419 
#2417:
    setcall        1
    load     u64   .s 
    iload    u8    
    setarg   i32   1
    callf    i32   tolower 1 0
    widen    i32   
    load     u64   .s 
    istore   u8    
    loadref  u64   .s 
    incrto   u64   1
#2418:
    to             #2417 
    opnd           .$av_1 
#2419:
;------------------------
#2416:
    return         
end

proc mlib.iconvucn
    param    u64   .s 
    param    i64   .n 
    local    i64   .$av_1 
;------------------------
    load     i64   .n 
    store    i64   .$av_1 
    load     i64   .$av_1 
    loadimm  i64   0 
    jumple   i64   #2423 
#2421:
    setcall        1
    load     u64   .s 
    iload    u8    
    setarg   i32   1
    callf    i32   toupper 1 0
    widen    i32   
    load     u64   .s 
    istore   u8    
    loadref  u64   .s 
    incrto   u64   1
#2422:
    to             #2421 
    opnd           .$av_1 
#2423:
;------------------------
#2420:
    return         
end

proc mlib.convlcstring
    rettype  u64   
    param    u64   .s 
    local    u64   .s0 
;------------------------
    load     u64   .s 
    store    u64   .s0 
    jump           #2426 
#2425:
    setcall        1
    load     u64   .s 
    iload    u8    
    setarg   i32   1
    callf    i32   tolower 1 0
    widen    i32   
    load     u64   .s 
    istore   u8    
    loadref  u64   .s 
    incrto   u64   1
#2426:
    load     u64   .s 
    iload    u8    
    jumpt    u64   #2425 
#2427:
    load     u64   .s0 
    setret   u64   
    jump           #2424 
;------------------------
#2424:
    return         
end

proc mlib.convucstring
    rettype  u64   
    param    u64   .s 
    local    u64   .s0 
;------------------------
    load     u64   .s 
    store    u64   .s0 
    jump           #2430 
#2429:
    setcall        1
    load     u64   .s 
    iload    u8    
    setarg   i32   1
    callf    i32   toupper 1 0
    widen    i32   
    load     u64   .s 
    istore   u8    
    loadref  u64   .s 
    incrto   u64   1
#2430:
    load     u64   .s 
    iload    u8    
    jumpt    u64   #2429 
#2431:
    load     u64   .s0 
    setret   u64   
    jump           #2428 
;------------------------
#2428:
    return         
end

proc mlib.changeext
    rettype  u64   
    param    u64   .s 
    param    u64   .newext 
    local    mem 32 .newext2 
    local    u64   .sext 
    local    i64   .n 
;------------------------
    setcall        2
    load     u64   .s 
    setarg   u64   2
    loadref  u64   mlib.changeext.newfile 
    loadimm  i64   1 
    addptrx  u8    1 -1
    setarg   u64   1
    callf    u64   strcpy 2 0
    unload   u64   
    load     u64   .newext 
    iload    u8    
    loadimm  u64   0 
    jumpeq   u64   #2434 1
    loadimm  u64   46 
    jumpeq   u64   #2435 
    jump           #2436 
#2434:
    loadimm  u64   0 
    loadref  u64   .newext2 
    loadimm  i64   1 
    istorex  u8    1 -1
    loadimm  u64   0 
    loadref  u64   .newext2 
    loadimm  i64   2 
    istorex  u8    1 -1
    jump           #2433 
#2435:
    setcall        2
    load     u64   .newext 
    setarg   u64   2
    loadref  u64   .newext2 
    loadimm  i64   1 
    addptrx  u8    1 -1
    setarg   u64   1
    callf    u64   strcpy 2 0
    unload   u64   
    jump           #2433 
#2436:
    setcall        2
    loadimm  u64   "."
    setarg   u64   2
    loadref  u64   .newext2 
    loadimm  i64   1 
    addptrx  u8    1 -1
    setarg   u64   1
    callf    u64   strcpy 2 0
    unload   u64   
    setcall        2
    load     u64   .newext 
    setarg   u64   2
    loadref  u64   .newext2 
    loadimm  i64   1 
    addptrx  u8    1 -1
    setarg   u64   1
    callf    u64   strcat 2 0
    unload   u64   
#2433:
    setcall        2
    loadimm  i64   1 
    setarg   i64   2
    load     u64   .s 
    setarg   u64   1
    callf    u64   mlib.extractext 2 0
    store    u64   .sext 
    load     u64   .sext 
    iload    u8    
    loadimm  u64   0 
    jumpeq   u64   #2439 1
    loadimm  u64   46 
    jumpeq   u64   #2440 
    jump           #2441 
#2439:
    setcall        2
    loadref  u64   .newext2 
    loadimm  i64   1 
    addptrx  u8    1 -1
    setarg   u64   2
    loadref  u64   mlib.changeext.newfile 
    loadimm  i64   1 
    addptrx  u8    1 -1
    setarg   u64   1
    callf    u64   strcat 2 0
    unload   u64   
    jump           #2438 
#2440:
    setcall        2
    loadref  u64   .newext2 
    loadimm  i64   2 
    addptrx  u8    1 -1
    setarg   u64   2
    loadref  u64   mlib.changeext.newfile 
    loadimm  i64   1 
    addptrx  u8    1 -1
    setarg   u64   1
    callf    u64   strcat 2 0
    unload   u64   
    jump           #2438 
#2441:
    load     u64   .sext 
    load     u64   .s 
    subptr   u64   1
    loadimm  i64   2 
    sub      i64   
    store    i64   .n 
    setcall        2
    loadref  u64   .newext2 
    loadimm  i64   1 
    addptrx  u8    1 -1
    setarg   u64   2
    loadref  u64   mlib.changeext.newfile 
    loadimm  i64   1 
    addptrx  u8    1 -1
    load     i64   .n 
    addptrx  u64   1 0
    loadimm  i64   1 
    addptrx  u64   1 0
    setarg   u64   1
    callf    u64   strcpy 2 0
    unload   u64   
#2438:
    loadref  u64   mlib.changeext.newfile 
    loadimm  i64   1 
    addptrx  u8    1 -1
    setret   u64   
    jump           #2432 
;------------------------
#2432:
    return         
end

proc mlib.extractext
    rettype  u64   
    param    u64   .s 
    param    i64   .period 
    local    u64   .t 
    local    u64   .u 
;------------------------
    setcall        1
    load     u64   .s 
    setarg   u64   1
    callf    u64   mlib.extractfile 1 0
    store    u64   .t 
    load     u64   .t 
    iload    u8    
    loadimm  i64   0 
    jumpne   i64   #2444 
    loadimm  u64   ""
    setret   u64   
    jump           #2442 
#2444:
#2443:
    load     u64   .t 
    setcall        1
    load     u64   .t 
    setarg   u64   1
    callf    i64   strlen 1 0
    addptrx  u64   1 0
    loadimm  i64   1 
    subptrx  u64   1 0
    store    u64   .u 
    jump           #2447 
#2446:
    load     u64   .u 
    iload    u8    
    loadimm  u64   46 
    jumpne   u64   #2450 
    load     u64   .u 
    loadimm  i64   1 
    addptrx  u64   1 0
    iload    u8    
    loadimm  i64   0 
    jumpne   i64   #2452 
    startmx        
    load     i64   .period 
    jumpf    i64   #2454 
    loadimm  u64   "."
    resetmx        
    jump           #2453 
#2454:
    loadimm  u64   ""
    endmx          
#2453:
    setret   u64   
    jump           #2442 
#2452:
#2451:
    load     u64   .u 
    loadimm  i64   1 
    addptrx  u64   1 0
    setret   u64   
    jump           #2442 
#2450:
#2449:
    loadref  u64   .u 
    decrto   u64   1
#2447:
    load     u64   .u 
    load     u64   .t 
    jumpge   u64   #2446 
#2448:
    loadimm  u64   ""
    setret   u64   
    jump           #2442 
;------------------------
#2442:
    return         
end

proc mlib.extractpath
    rettype  u64   
    param    u64   .s 
    local    u64   .t 
    local    i64   .n 
;------------------------
    load     u64   .s 
    setcall        1
    load     u64   .s 
    setarg   u64   1
    callf    i64   strlen 1 0
    addptrx  u64   1 0
    loadimm  i64   1 
    subptrx  u64   1 0
    store    u64   .t 
    jump           #2459 
#2458:
    load     u64   .t 
    iload    u8    
    switch         #2462 47 92
    opnd           #2463 
#2462:
    swlabel        #2464 
    swlabel        #2463 
    swlabel        #2463 
    swlabel        #2463 
    swlabel        #2463 
    swlabel        #2463 
    swlabel        #2463 
    swlabel        #2463 
    swlabel        #2463 
    swlabel        #2463 
    swlabel        #2463 
    swlabel        #2464 
    swlabel        #2463 
    swlabel        #2463 
    swlabel        #2463 
    swlabel        #2463 
    swlabel        #2463 
    swlabel        #2463 
    swlabel        #2463 
    swlabel        #2463 
    swlabel        #2463 
    swlabel        #2463 
    swlabel        #2463 
    swlabel        #2463 
    swlabel        #2463 
    swlabel        #2463 
    swlabel        #2463 
    swlabel        #2463 
    swlabel        #2463 
    swlabel        #2463 
    swlabel        #2463 
    swlabel        #2463 
    swlabel        #2463 
    swlabel        #2463 
    swlabel        #2463 
    swlabel        #2463 
    swlabel        #2463 
    swlabel        #2463 
    swlabel        #2463 
    swlabel        #2463 
    swlabel        #2463 
    swlabel        #2463 
    swlabel        #2463 
    swlabel        #2463 
    swlabel        #2463 
    swlabel        #2464 
    endsw          
#2464:
    load     u64   .t 
    load     u64   .s 
    subptr   u64   1
    loadimm  i64   1 
    add      i64   
    store    i64   .n 
    setcall        3
    load     i64   .n 
    setarg   u64   3
    load     u64   .s 
    setarg   u64   2
    loadref  u64   mlib.extractpath.str 
    setarg   u64   1
    callp          memcpy 3 0
    loadimm  u64   0 
    loadref  u64   mlib.extractpath.str 
    load     i64   .n 
    istorex  u8    1 0
    loadref  u64   mlib.extractpath.str 
    setret   u64   
    jump           #2457 
    jump           #2461 
#2463:
#2461:
    loadref  u64   .t 
    decrto   u64   1
#2459:
    load     u64   .t 
    load     u64   .s 
    jumpge   u64   #2458 
#2460:
    loadimm  u64   ""
    setret   u64   
    jump           #2457 
;------------------------
#2457:
    return         
end

proc mlib.extractfile
    rettype  u64   
    param    u64   .s 
    local    u64   .t 
;------------------------
    setcall        1
    load     u64   .s 
    setarg   u64   1
    callf    u64   mlib.extractpath 1 0
    store    u64   .t 
    load     u64   .t 
    iload    u8    
    loadimm  i64   0 
    jumpne   i64   #2467 
    load     u64   .s 
    setret   u64   
    jump           #2465 
#2467:
#2466:
    load     u64   .s 
    setcall        1
    load     u64   .t 
    setarg   u64   1
    callf    i64   strlen 1 0
    addptrx  u64   1 0
    setret   u64   
    jump           #2465 
;------------------------
#2465:
    return         
end

proc mlib.extractbasefile
    rettype  u64   
    param    u64   .s 
    local    u64   .f 
    local    u64   .e 
    local    i64   .n 
    local    i64   .flen 
;------------------------
    setcall        1
    load     u64   .s 
    setarg   u64   1
    callf    u64   mlib.extractfile 1 0
    store    u64   .f 
    setcall        1
    load     u64   .f 
    setarg   u64   1
    callf    i64   strlen 1 0
    store    i64   .flen 
    load     i64   .flen 
    loadimm  i64   0 
    jumpne   i64   #2470 
    loadimm  u64   ""
    setret   u64   
    jump           #2468 
#2470:
#2469:
    setcall        2
    loadimm  i64   0 
    setarg   i64   2
    load     u64   .f 
    setarg   u64   1
    callf    u64   mlib.extractext 2 0
    store    u64   .e 
    load     u64   .e 
    iload    u8    
    jumpf    u64   #2472 
    load     i64   .flen 
    setcall        1
    load     u64   .e 
    setarg   u64   1
    callf    i64   strlen 1 0
    sub      i64   
    loadimm  i64   1 
    sub      i64   
    store    i64   .n 
    setcall        3
    load     i64   .n 
    setarg   u64   3
    load     u64   .f 
    setarg   u64   2
    loadref  u64   mlib.extractbasefile.str 
    setarg   u64   1
    callp          memcpy 3 0
    loadimm  u64   0 
    loadref  u64   mlib.extractbasefile.str 
    load     i64   .n 
    istorex  u8    1 0
    loadref  u64   mlib.extractbasefile.str 
    setret   u64   
    jump           #2468 
#2472:
#2471:
    load     u64   .f 
    load     i64   .flen 
    addptrx  u64   1 0
    loadimm  i64   1 
    subptrx  u64   1 0
    iload    u8    
    loadimm  u64   46 
    jumpne   u64   #2474 
    setcall        3
    load     i64   .flen 
    loadimm  i64   1 
    sub      i64   
    setarg   u64   3
    load     u64   .f 
    setarg   u64   2
    loadref  u64   mlib.extractbasefile.str 
    setarg   u64   1
    callp          memcpy 3 0
    loadimm  u64   0 
    loadref  u64   mlib.extractbasefile.str 
    load     i64   .flen 
    istorex  u8    1 -1
    loadref  u64   mlib.extractbasefile.str 
    setret   u64   
    jump           #2468 
#2474:
#2473:
    load     u64   .f 
    setret   u64   
    jump           #2468 
;------------------------
#2468:
    return         
end

proc mlib.addext
    rettype  u64   
    param    u64   .s 
    param    u64   .newext 
    local    u64   .sext 
;------------------------
    setcall        2
    loadimm  i64   1 
    setarg   i64   2
    load     u64   .s 
    setarg   u64   1
    callf    u64   mlib.extractext 2 0
    store    u64   .sext 
    load     u64   .sext 
    iload    u8    
    loadimm  i64   0 
    jumpne   i64   #2477 
    setcall        2
    load     u64   .newext 
    setarg   u64   2
    load     u64   .s 
    setarg   u64   1
    callf    u64   mlib.changeext 2 0
    setret   u64   
    jump           #2475 
#2477:
#2476:
    load     u64   .s 
    setret   u64   
    jump           #2475 
;------------------------
#2475:
    return         
end

proc mlib.pcm_alloc32
    rettype  u64   
    local    u64   .p 
;------------------------
    loadimm  i64   32 
    store    i64   mlib.allocbytes 
    loadref  u64   mlib.smallmemtotal 
    loadimm  i64   32 
    addto    i64   
    loadref  u64   mlib.freelist 
    loadimm  i64   2 
    iloadx   u64   8 0
    double         
    store    u64   .p 
    jumpf    u64   #2480 
    loadref  u64   mlib.freelist 
    loadimm  i64   2 
    iloadx   u64   8 0
    iload    u64   
    loadref  u64   mlib.freelist 
    loadimm  i64   2 
    istorex  u64   8 0
    load     u64   .p 
    setret   u64   
    jump           #2478 
#2480:
#2479:
    setcall        1
    loadimm  i64   32 
    setarg   i64   1
    callf    u64   mlib.pcm_alloc 1 0
    setret   u64   
    jump           #2478 
;------------------------
#2478:
    return         
end

proc mlib.pcm_free32
    param    u64   .p 
;------------------------
    loadref  u64   mlib.smallmemtotal 
    loadimm  i64   32 
    subto    i64   
    loadref  u64   mlib.freelist 
    loadimm  i64   2 
    iloadx   u64   8 0
    load     u64   .p 
    istore   u64   
    load     u64   .p 
    loadref  u64   mlib.freelist 
    loadimm  i64   2 
    istorex  u64   8 0
;------------------------
#2481:
    return         
end

proc mlib.outbyte
    param    u64   .f 
    param    i64   .x 
;------------------------
    setcall        4
    load     u64   .f 
    setarg   u64   4
    loadimm  u64   1 
    setarg   u64   3
    loadimm  u64   1 
    setarg   u64   2
    loadref  u64   .x 
    setarg   u64   1
    callf    u64   fwrite 4 0
    unload   u64   
;------------------------
#2482:
    return         
end

proc mlib.outword16
    param    u64   .f 
    param    u64   .x 
;------------------------
    setcall        4
    load     u64   .f 
    setarg   u64   4
    loadimm  u64   1 
    setarg   u64   3
    loadimm  u64   2 
    setarg   u64   2
    loadref  u64   .x 
    setarg   u64   1
    callf    u64   fwrite 4 0
    unload   u64   
;------------------------
#2483:
    return         
end

proc mlib.outword32
    param    u64   .f 
    param    u64   .x 
;------------------------
    setcall        4
    load     u64   .f 
    setarg   u64   4
    loadimm  u64   1 
    setarg   u64   3
    loadimm  u64   4 
    setarg   u64   2
    loadref  u64   .x 
    setarg   u64   1
    callf    u64   fwrite 4 0
    unload   u64   
;------------------------
#2484:
    return         
end

proc mlib.outword64
    param    u64   .f 
    param    u64   .x 
;------------------------
    setcall        4
    load     u64   .f 
    setarg   u64   4
    loadimm  u64   1 
    setarg   u64   3
    loadimm  u64   8 
    setarg   u64   2
    loadref  u64   .x 
    setarg   u64   1
    callf    u64   fwrite 4 0
    unload   u64   
;------------------------
#2485:
    return         
end

proc mlib.outstring
    param    u64   .f 
    param    u64   .s 
;------------------------
    setcall        4
    load     u64   .f 
    setarg   u64   4
    loadimm  u64   1 
    setarg   u64   3
    setcall        1
    load     u64   .s 
    setarg   u64   1
    callf    i64   strlen 1 0
    loadimm  i64   1 
    add      i64   
    setarg   u64   2
    load     u64   .s 
    setarg   u64   1
    callf    u64   fwrite 4 0
    unload   u64   
;------------------------
#2486:
    return         
end

proc mlib.outblock
    param    u64   .f 
    param    u64   .p 
    param    i64   .n 
;------------------------
    setcall        4
    load     u64   .f 
    setarg   u64   4
    loadimm  u64   1 
    setarg   u64   3
    load     i64   .n 
    setarg   u64   2
    load     u64   .p 
    setarg   u64   1
    callf    u64   fwrite 4 0
    unload   u64   
;------------------------
#2487:
    return         
end

proc mlib.myeof
    rettype  i64   
    param    u64   .f 
    local    i64   .c 
;------------------------
    setcall        1
    load     u64   .f 
    setarg   u64   1
    callf    i32   fgetc 1 0
    widen    i32   
    store    i64   .c 
    load     i64   .c 
    loadimm  i64   -1 
    jumpne   i64   #2490 
    loadimm  i64   1 
    setret   i64   
    jump           #2488 
#2490:
#2489:
    setcall        2
    load     u64   .f 
    setarg   u64   2
    load     i64   .c 
    setarg   i32   1
    callf    i32   ungetc 2 0
    unload   i32   
    loadimm  i64   0 
    setret   i64   
    jump           #2488 
;------------------------
#2488:
    return         
end

proc mlib.strbuffer_add
    param    u64   .dest 
    param    u64   .s 
    param    i64   .n 
    local    i64   .newlen 
    local    i64   .oldlen 
    local    u64   .newptr 
;------------------------
    load     i64   .n 
    loadimm  i64   0 
    jumpne   i64   #2493 
    callp          msys.m$print_startcon 0 0
    loadimm  u64   "N=0"
    callp          msys.m$print_str_nf 1 0
    callp          msys.m$print_newline 0 0
    callp          msys.m$print_end 0 0
#2493:
#2492:
    load     i64   .n 
    loadimm  i64   -1 
    jumpne   i64   #2496 
    setcall        1
    load     u64   .s 
    setarg   u64   1
    callf    i64   strlen 1 0
    store    i64   .n 
#2496:
#2495:
    load     u64   .dest 
    loadimm  i64   8 
    iloadx   i32   1 0
    store    i64   .oldlen 
    load     i64   .oldlen 
    loadimm  i64   0 
    jumpne   i64   #2498 
    setcall        1
    load     i64   .n 
    loadimm  i64   1 
    add      i64   
    setarg   i64   1
    callf    u64   mlib.pcm_alloc 1 0
    load     u64   .dest 
    loadimm  i64   0 
    istorex  u64   1 0
    load     i64   mlib.allocbytes 
    load     u64   .dest 
    loadimm  i64   12 
    istorex  i32   1 0
    load     i64   .n 
    load     u64   .dest 
    loadimm  i64   8 
    istorex  i32   1 0
    setcall        3
    load     i64   .n 
    setarg   u64   3
    load     u64   .s 
    setarg   u64   2
    load     u64   .dest 
    iload    u64   
    setarg   u64   1
    callp          memcpy 3 0
    loadimm  u64   0 
    load     u64   .dest 
    iload    u64   
    load     i64   .n 
    addptrx  u64   1 0
    istore   u8    
    jump           #2491 
#2498:
#2497:
    load     i64   .oldlen 
    load     i64   .n 
    add      i64   
    store    i64   .newlen 
    load     i64   .newlen 
    loadimm  i64   1 
    add      i64   
    load     u64   .dest 
    loadimm  i64   12 
    iloadx   i32   1 0
    jumple   i64   #2500 
    setcall        1
    load     i64   .newlen 
    loadimm  i64   1 
    add      i64   
    setarg   i64   1
    callf    u64   mlib.pcm_alloc 1 0
    store    u64   .newptr 
    setcall        3
    load     i64   .oldlen 
    setarg   u64   3
    load     u64   .dest 
    iload    u64   
    setarg   u64   2
    load     u64   .newptr 
    setarg   u64   1
    callp          memcpy 3 0
    load     u64   .newptr 
    load     u64   .dest 
    loadimm  i64   0 
    istorex  u64   1 0
    load     i64   mlib.allocbytes 
    load     u64   .dest 
    loadimm  i64   12 
    istorex  i32   1 0
#2500:
#2499:
    setcall        3
    load     i64   .n 
    setarg   u64   3
    load     u64   .s 
    setarg   u64   2
    load     u64   .dest 
    iload    u64   
    load     i64   .oldlen 
    addptrx  u64   1 0
    setarg   u64   1
    callp          memcpy 3 0
    loadimm  u64   0 
    load     u64   .dest 
    iload    u64   
    load     i64   .newlen 
    addptrx  u64   1 0
    istore   u8    
    load     i64   .newlen 
    load     u64   .dest 
    loadimm  i64   8 
    istorex  i32   1 0
;------------------------
#2491:
    return         
end

proc mlib.gs_init
    param    u64   .dest 
;------------------------
    setcall        2
    loadimm  i64   16 
    setarg   i64   2
    load     u64   .dest 
    setarg   u64   1
    callp          mlib.pcm_clearmem 2 0
;------------------------
#2501:
    return         
end

proc mlib.gs_free
    param    u64   .dest 
;------------------------
    load     u64   .dest 
    loadimm  i64   12 
    iloadx   i32   1 0
    jumpf    i64   #2504 
    setcall        2
    load     u64   .dest 
    loadimm  i64   12 
    iloadx   i32   1 0
    setarg   i64   2
    load     u64   .dest 
    iload    u64   
    setarg   u64   1
    callp          mlib.pcm_free 2 0
#2504:
#2503:
;------------------------
#2502:
    return         
end

proc mlib.gs_str
    param    u64   .dest 
    param    u64   .s 
;------------------------
    setcall        3
    loadimm  i64   -1 
    setarg   i64   3
    load     u64   .s 
    setarg   u64   2
    load     u64   .dest 
    setarg   u64   1
    callp          mlib.strbuffer_add 3 0
;------------------------
#2505:
    return         
end

proc mlib.gs_char
    param    u64   .dest 
    param    i64   .c 
    local    mem 16 .s 
;------------------------
    load     i64   .c 
    loadref  u64   .s 
    loadimm  i64   1 
    istorex  u8    1 -1
    loadimm  u64   0 
    loadref  u64   .s 
    loadimm  i64   2 
    istorex  u8    1 -1
    setcall        3
    loadimm  i64   1 
    setarg   i64   3
    loadref  u64   .s 
    setarg   u64   2
    load     u64   .dest 
    setarg   u64   1
    callp          mlib.strbuffer_add 3 0
;------------------------
#2506:
    return         
end

proc mlib.gs_strn
    param    u64   .dest 
    param    u64   .s 
    param    i64   .length 
;------------------------
    setcall        3
    load     i64   .length 
    setarg   i64   3
    load     u64   .s 
    setarg   u64   2
    load     u64   .dest 
    setarg   u64   1
    callp          mlib.strbuffer_add 3 0
;------------------------
#2507:
    return         
end

proc mlib.gs_strvar
    param    u64   .dest 
    param    u64   .s 
;------------------------
    setcall        3
    loadimm  i64   -1 
    setarg   i64   3
    load     u64   .s 
    iload    u64   
    setarg   u64   2
    load     u64   .dest 
    setarg   u64   1
    callp          mlib.strbuffer_add 3 0
;------------------------
#2508:
    return         
end

proc mlib.gs_strint
    param    u64   .dest 
    param    i64   .a 
;------------------------
    setcall        3
    loadimm  i64   -1 
    setarg   i64   3
    setcall        2
    loadimm  u64   0 
    setarg   u64   2
    load     i64   .a 
    setarg   i64   1
    callf    u64   msys.strint 2 0
    setarg   u64   2
    load     u64   .dest 
    setarg   u64   1
    callp          mlib.strbuffer_add 3 0
;------------------------
#2509:
    return         
end

proc mlib.gs_strln
    param    u64   .dest 
    param    u64   .s 
;------------------------
    setcall        2
    load     u64   .s 
    setarg   u64   2
    load     u64   .dest 
    setarg   u64   1
    callp          mlib.gs_str 2 0
    setcall        1
    load     u64   .dest 
    setarg   u64   1
    callp          mlib.gs_line 1 0
;------------------------
#2510:
    return         
end

proc mlib.gs_strsp
    param    u64   .dest 
    param    u64   .s 
;------------------------
    setcall        2
    load     u64   .s 
    setarg   u64   2
    load     u64   .dest 
    setarg   u64   1
    callp          mlib.gs_str 2 0
    setcall        2
    loadimm  u64   " "
    setarg   u64   2
    load     u64   .dest 
    setarg   u64   1
    callp          mlib.gs_str 2 0
;------------------------
#2511:
    return         
end

proc mlib.gs_line
    param    u64   .dest 
;------------------------
    setcall        3
    loadimm  i64   -1 
    setarg   i64   3
    loadimm  u64   "\r\n"
    setarg   u64   2
    load     u64   .dest 
    setarg   u64   1
    callp          mlib.strbuffer_add 3 0
;------------------------
#2513:
    return         
end

proc mlib.gs_getcol
    rettype  i64   
    param    u64   .dest 
;------------------------
    load     u64   .dest 
    loadimm  i64   8 
    iloadx   i32   1 0
    setret   i64   
    jump           #2515 
;------------------------
#2515:
    return         
end

proc mlib.gs_leftstr
    param    u64   .dest 
    param    u64   .s 
    param    i64   .w 
    param    i64   .padch 
    local    i64   .col 
    local    i64   .i 
    local    i64   .n 
    local    i64   .slen 
    local    mem 2560 .str 
;------------------------
    load     u64   .dest 
    loadimm  i64   8 
    iloadx   i32   1 0
    store    i64   .col 
    setcall        2
    load     u64   .s 
    setarg   u64   2
    loadref  u64   .str 
    setarg   u64   1
    callf    u64   strcpy 2 0
    unload   u64   
    setcall        1
    load     u64   .s 
    setarg   u64   1
    callf    i64   strlen 1 0
    store    i64   .slen 
    load     i64   .w 
    load     i64   .slen 
    sub      i64   
    store    i64   .n 
    load     i64   .n 
    loadimm  i64   0 
    jumple   i64   #2518 
    loadimm  i64   1 
    store    i64   .i 
    load     i64   .n 
    loadimm  i64   1 
    jumplt   i64   #2521 
#2519:
    load     i64   .padch 
    loadref  u64   .str 
    load     i64   .slen 
    load     i64   .i 
    add      i64   
    istorex  u8    1 -1
#2520:
    forup          #2519 1
    opnd           .i 
    opnd           .n 
#2521:
    loadimm  u64   0 
    loadref  u64   .str 
    load     i64   .slen 
    load     i64   .n 
    add      i64   
    istorex  u8    1 0
#2518:
#2517:
    setcall        2
    loadref  u64   .str 
    setarg   u64   2
    load     u64   .dest 
    setarg   u64   1
    callp          mlib.gs_str 2 0
;------------------------
#2516:
    return         
end

proc mlib.gs_leftint
    param    u64   .dest 
    param    i64   .a 
    param    i64   .w 
    param    i64   .padch 
;------------------------
    setcall        4
    load     i64   .padch 
    setarg   i64   4
    load     i64   .w 
    setarg   i64   3
    setcall        2
    loadimm  u64   0 
    setarg   u64   2
    load     i64   .a 
    setarg   i64   1
    callf    u64   msys.strint 2 0
    setarg   u64   2
    load     u64   .dest 
    setarg   u64   1
    callp          mlib.gs_leftstr 4 0
;------------------------
#2522:
    return         
end

proc mlib.gs_padto
    param    u64   .dest 
    param    i64   .col 
    param    i64   .ch 
    local    i64   .n 
    local    mem 2560 .str 
    local    i64   .i 
;------------------------
    load     i64   .col 
    load     u64   .dest 
    loadimm  i64   8 
    iloadx   i32   1 0
    sub      i64   
    store    i64   .n 
    load     i64   .n 
    loadimm  i64   0 
    jumpgt   i64   #2525 
    jump           #2523 
#2525:
#2524:
    loadimm  i64   1 
    store    i64   .i 
    load     i64   .n 
    loadimm  i64   1 
    jumplt   i64   #2528 
#2526:
    load     i64   .ch 
    loadref  u64   .str 
    load     i64   .i 
    istorex  u8    1 -1
#2527:
    forup          #2526 1
    opnd           .i 
    opnd           .n 
#2528:
    loadimm  u64   0 
    loadref  u64   .str 
    load     i64   .n 
    istorex  u8    1 0
    setcall        2
    loadref  u64   .str 
    setarg   u64   2
    load     u64   .dest 
    setarg   u64   1
    callp          mlib.gs_str 2 0
;------------------------
#2523:
    return         
end

proc mlib.gs_println
    param    u64   .dest 
    param    u64   .f 
;------------------------
    load     u64   .dest 
    loadimm  i64   8 
    iloadx   i32   1 0
    loadimm  i64   0 
    jumpne   i64   #2531 
    jump           #2529 
#2531:
#2530:
    loadimm  u64   0 
    load     u64   .dest 
    iload    u64   
    load     u64   .dest 
    loadimm  i64   8 
    iloadx   i32   1 0
    addptrx  u64   1 0
    istore   u8    
    load     u64   .f 
    loadimm  u64   0 
    jumpne   u64   #2533 
    callp          msys.m$print_startcon 0 0
    load     u64   .dest 
    iload    u64   
    callp          msys.m$print_str_nf 1 0
    callp          msys.m$print_newline 0 0
    callp          msys.m$print_end 0 0
    jump           #2532 
#2533:
    load     u64   .f 
    callp          msys.m$print_startfile 1 0
    load     u64   .dest 
    iload    u64   
    callp          msys.m$print_str_nf 1 0
    callp          msys.m$print_newline 0 0
    callp          msys.m$print_end 0 0
#2532:
;------------------------
#2529:
    return         
end

proc mlib.nextcmdparamnew
    rettype  i64   
    param    u64   .paramno 
    param    u64   .name 
    param    u64   .value 
    param    u64   .defext 
    local    u64   .q 
    local    u64   .item 
    local    u64   .fileext 
    local    u64   .rest 
;------------------------
;reenter::
#2535:
    loadimm  u64   0 
    load     u64   .value 
    istore   u64   
    loadimm  u64   0 
    load     u64   .name 
    istore   u64   
    load     i64   mlib.nextcmdparamnew.infile 
    jumpf    i64   #2537 
    setcall        2
    loadref  u64   .item 
    setarg   u64   2
    loadref  u64   mlib.nextcmdparamnew.fileptr 
    setarg   u64   1
    callf    i64   mlib.readnextfileitem 2 0
    loadimm  i64   0 
    jumpne   i64   #2539 
    setcall        2
    load     i64   mlib.nextcmdparamnew.atsize 
    setarg   i64   2
    load     u64   mlib.nextcmdparamnew.filestart 
    setarg   u64   1
    callp          mlib.pcm_free 2 0
    loadimm  i64   0 
    store    i64   mlib.nextcmdparamnew.infile 
    jump           #2535 
#2539:
#2538:
    jump           #2536 
#2537:
    load     u64   .paramno 
    iload    i64   
    load     i64   msys.ncmdparams 
    jumple   i64   #2541 
    loadimm  i64   0 
    setret   i64   
    jump           #2534 
#2541:
#2540:
    load     u64   msys.cmdparams 
    load     u64   .paramno 
    iload    i64   
    iloadx   u64   8 0
    store    u64   .item 
    load     u64   .paramno 
    incrto   i64   1
    load     u64   .item 
    iload    u8    
    loadimm  u64   64 
    jumpne   u64   #2543 
    load     i64   mlib.nextcmdparamnew.infile 
    jumpf    i64   #2545 
    callp          msys.m$print_startcon 0 0
    loadimm  u64   "Nested @"
    callp          msys.m$print_str_nf 1 0
    callp          msys.m$print_newline 0 0
    callp          msys.m$print_end 0 0
    loadimm  i64   1 
    stop           
#2545:
#2544:
    setcall        1
    load     u64   .item 
    loadimm  i64   1 
    addptrx  u64   1 0
    setarg   u64   1
    callf    u64   mlib.readfile 1 0
    double         
    store    u64   mlib.nextcmdparamnew.fileptr 
    store    u64   mlib.nextcmdparamnew.filestart 
    load     u64   mlib.nextcmdparamnew.filestart 
    loadimm  u64   0 
    jumpne   u64   #2548 
    callp          msys.m$print_startcon 0 0
    loadimm  u64   "Can't open"
    callp          msys.m$print_str_nf 1 0
    load     u64   .item 
    callp          msys.m$print_str_nf 1 0
    callp          msys.m$print_newline 0 0
    callp          msys.m$print_end 0 0
    loadimm  i64   7 
    stop           
#2548:
#2547:
    loadimm  i64   1 
    store    i64   mlib.nextcmdparamnew.infile 
    load     i64   mlib.allocbytes 
    store    i64   mlib.nextcmdparamnew.atsize 
    jump           #2535 
#2543:
#2542:
    load     u64   .item 
    iload    u8    
    loadimm  u64   58 
    jumpne   u64   #2551 
    loadimm  i64   1 
    store    u8    mlib.nextcmdparamnew.colonseen 
    loadimm  i64   4 
    setret   i64   
    jump           #2534 
#2551:
#2550:
#2536:
    loadimm  u64   0 
    load     u64   .value 
    istore   u64   
    load     u64   .item 
    iload    u8    
    loadimm  u64   45 
    jumpne   u64   #2553 
    load     u64   .item 
    startmx        
    load     u8    mlib.nextcmdparamnew.colonseen 
    jumpf    i64   #2555 
    loadimm  i64   0 
    resetmx        
    jump           #2554 
#2555:
    loadimm  i64   1 
    endmx          
#2554:
    addptrx  u64   1 0
    load     u64   .name 
    istore   u64   
    setcall        2
    loadimm  u64   58 
    setarg   i32   2
    load     u64   .item 
    setarg   u64   1
    callf    u64   strchr 2 0
    store    u64   .q 
    load     u64   .q 
    jumpt    u64   #2557 
    setcall        2
    loadimm  u64   61 
    setarg   i32   2
    load     u64   .item 
    setarg   u64   1
    callf    u64   strchr 2 0
    store    u64   .q 
#2557:
#2556:
    load     u64   .q 
    jumpf    u64   #2559 
    load     u64   .q 
    loadimm  i64   1 
    addptrx  u64   1 0
    load     u64   .value 
    istore   u64   
    loadimm  u64   0 
    load     u64   .q 
    istore   u8    
#2559:
#2558:
    startmx        
    load     u8    mlib.nextcmdparamnew.colonseen 
    jumpf    i64   #2561 
    loadimm  i64   5 
    resetmx        
    jump           #2560 
#2561:
    loadimm  i64   1 
    endmx          
#2560:
    setret   i64   
    jump           #2534 
#2553:
#2552:
    setcall        2
    loadimm  i64   0 
    setarg   i64   2
    load     u64   .item 
    setarg   u64   1
    callf    u64   mlib.extractext 2 0
    store    u64   .fileext 
    load     u64   .item 
    load     u64   .name 
    istore   u64   
    load     u64   .fileext 
    iload    u8    
    loadimm  i64   0 
    jumpne   i64   #2563 
    setcall        2
    load     u64   .name 
    iload    u64   
    setarg   u64   2
    loadref  u64   mlib.nextcmdparamnew.str 
    setarg   u64   1
    callf    u64   strcpy 2 0
    unload   u64   
    load     u64   .defext 
    jumpf    u64   #2565 
    load     u8    mlib.nextcmdparamnew.colonseen 
    jumpt    i64   #2565 
    setcall        2
    load     u64   .defext 
    setarg   u64   2
    loadref  u64   mlib.nextcmdparamnew.str 
    setarg   u64   1
    callf    u64   mlib.addext 2 0
    load     u64   .name 
    istore   u64   
#2565:
#2564:
    jump           #2562 
#2563:
    setcall        2
    loadimm  u64   "dll"
    setarg   u64   2
    load     u64   .fileext 
    setarg   u64   1
    callf    i64   mlib.eqstring 2 0
    jumpt    i64   #2567 
    setcall        2
    loadimm  u64   "mcx"
    setarg   u64   2
    load     u64   .fileext 
    setarg   u64   1
    callf    i64   mlib.eqstring 2 0
    jumpf    i64   #2566 
#2567:
    startmx        
    load     u8    mlib.nextcmdparamnew.colonseen 
    jumpf    i64   #2571 
    loadimm  i64   5 
    resetmx        
    jump           #2570 
#2571:
    loadimm  i64   3 
    endmx          
#2570:
    setret   i64   
    jump           #2534 
#2566:
#2562:
    startmx        
    load     u8    mlib.nextcmdparamnew.colonseen 
    jumpf    i64   #2573 
    loadimm  i64   5 
    resetmx        
    jump           #2572 
#2573:
    loadimm  i64   2 
    endmx          
#2572:
    setret   i64   
    jump           #2534 
;------------------------
#2534:
    return         
end

proc mlib.readnextfileitem
    rettype  i64   
    param    u64   .fileptr 
    param    u64   .item 
    local    u64   .p 
    local    u64   .pstart 
    local    u64   .pend 
    local    i64   .n 
;------------------------
    load     u64   .fileptr 
    iload    u64   
    store    u64   .p 
;reenter::
#2575:
#2576:
    load     u64   .p 
    iload    u8    
    loadimm  u64   32 
    jumpeq   u64   #2579 1
    loadimm  u64   9 
    jumpeq   u64   #2579 1
    loadimm  u64   13 
    jumpeq   u64   #2579 1
    loadimm  u64   10 
    jumpeq   u64   #2579 1
    loadimm  u64   26 
    jumpeq   u64   #2580 1
    loadimm  u64   0 
    jumpeq   u64   #2580 
    jump           #2581 
#2579:
    loadref  u64   .p 
    incrto   u64   1
    jump           #2578 
#2580:
    loadimm  i64   0 
    setret   i64   
    jump           #2574 
    jump           #2578 
#2581:
    jump           #2577 
#2578:
    jump           #2576 
#2577:
    load     u64   .p 
    iload    u8    
    loadimm  u64   33 
    jumpeq   u64   #2583 1
    loadimm  u64   35 
    jumpeq   u64   #2583 
    jump           #2584 
#2583:
    loadref  u64   .p 
    incrto   u64   1
#2585:
    loadref  u64   .p 
    loadincr u64   1
    iload    u8    
    loadimm  u64   10 
    jumpeq   u64   #2587 1
    loadimm  u64   26 
    jumpeq   u64   #2588 1
    loadimm  u64   0 
    jumpeq   u64   #2588 
    jump           #2589 
#2587:
    jump           #2575 
    jump           #2585 
#2588:
    load     u64   .p 
    loadimm  i64   1 
    subptrx  u64   1 0
    load     u64   .fileptr 
    istore   u64   
    loadimm  i64   0 
    setret   i64   
    jump           #2574 
    jump           #2585 
#2589:
    jump           #2585 
#2586:
    jump           #2582 
#2584:
#2582:
    load     u64   .p 
    iload    u8    
    loadimm  u64   34 
    jumpeq   u64   #2591 
    jump           #2592 
#2591:
    loadref  u64   .p 
    incrload u64   1
    store    u64   .pstart 
#2593:
    load     u64   .p 
    iload    u8    
    loadimm  u64   0 
    jumpeq   u64   #2596 1
    loadimm  u64   26 
    jumpeq   u64   #2596 1
    loadimm  u64   34 
    jumpeq   u64   #2597 
    jump           #2598 
#2596:
    callp          msys.m$print_startcon 0 0
    loadimm  u64   "Unexpected EOF in @file"
    callp          msys.m$print_str_nf 1 0
    callp          msys.m$print_newline 0 0
    callp          msys.m$print_end 0 0
    loadimm  i64   8 
    stop           
    jump           #2595 
#2597:
    loadref  u64   .p 
    loadincr u64   1
    store    u64   .pend 
    load     u64   .p 
    iload    u8    
    loadimm  u64   44 
    jumpne   u64   #2601 
    loadref  u64   .p 
    incrto   u64   1
#2601:
#2600:
    jump           #2594 
    jump           #2595 
#2598:
#2595:
    loadref  u64   .p 
    incrto   u64   1
    jump           #2593 
#2594:
    jump           #2590 
#2592:
    load     u64   .p 
    store    u64   .pstart 
#2602:
    load     u64   .p 
    iload    u8    
    loadimm  u64   0 
    jumpeq   u64   #2605 1
    loadimm  u64   26 
    jumpeq   u64   #2605 1
    loadimm  u64   32 
    jumpeq   u64   #2606 1
    loadimm  u64   9 
    jumpeq   u64   #2606 1
    loadimm  u64   44 
    jumpeq   u64   #2606 1
    loadimm  u64   13 
    jumpeq   u64   #2606 1
    loadimm  u64   10 
    jumpeq   u64   #2606 
    jump           #2607 
#2605:
    load     u64   .p 
    store    u64   .pend 
    jump           #2603 
    jump           #2604 
#2606:
    loadref  u64   .p 
    loadincr u64   1
    store    u64   .pend 
    jump           #2603 
    jump           #2604 
#2607:
#2604:
    loadref  u64   .p 
    incrto   u64   1
    jump           #2602 
#2603:
#2590:
    load     u64   .pend 
    load     u64   .pstart 
    subptr   u64   1
    store    i64   .n 
    load     i64   .n 
    loadimm  i64   256 
    jumplt   i64   #2609 
    callp          msys.m$print_startcon 0 0
    loadimm  u64   "@file item too long"
    callp          msys.m$print_str_nf 1 0
    callp          msys.m$print_newline 0 0
    callp          msys.m$print_end 0 0
    loadimm  i64   9 
    stop           
#2609:
#2608:
    setcall        3
    load     i64   .n 
    setarg   u64   3
    load     u64   .pstart 
    setarg   u64   2
    loadref  u64   mlib.readnextfileitem.str 
    setarg   u64   1
    callp          memcpy 3 0
    loadimm  u64   0 
    loadref  u64   mlib.readnextfileitem.str 
    load     i64   .n 
    istorex  u8    1 0
    loadref  u64   mlib.readnextfileitem.str 
    load     u64   .item 
    istore   u64   
    load     u64   .p 
    load     u64   .fileptr 
    istore   u64   
    loadimm  i64   1 
    setret   i64   
    jump           #2574 
;------------------------
#2574:
    return         
end

proc mlib.ipadstr
    param    u64   .s 
    param    i64   .width 
    param    u64   .padchar 
    local    i64   .n 
    local    i64   .$av_1 
;------------------------
    setcall        1
    load     u64   .s 
    setarg   u64   1
    callf    i64   strlen 1 0
    store    i64   .n 
    load     i64   .width 
    load     i64   .n 
    sub      i64   
    store    i64   .$av_1 
    load     i64   .$av_1 
    loadimm  i64   0 
    jumple   i64   #2614 
#2612:
    setcall        2
    load     u64   .padchar 
    setarg   u64   2
    load     u64   .s 
    setarg   u64   1
    callf    u64   strcat 2 0
    unload   u64   
#2613:
    to             #2612 
    opnd           .$av_1 
#2614:
;------------------------
#2611:
    return         
end

proc mlib.padstr
    rettype  u64   
    param    u64   .s 
    param    i64   .width 
    param    u64   .padchar 
;------------------------
    setcall        2
    load     u64   .s 
    setarg   u64   2
    loadref  u64   mlib.padstr.str 
    setarg   u64   1
    callf    u64   strcpy 2 0
    unload   u64   
    setcall        3
    load     u64   .padchar 
    setarg   u64   3
    load     i64   .width 
    setarg   i64   2
    loadref  u64   mlib.padstr.str 
    setarg   u64   1
    callp          mlib.ipadstr 3 0
    loadref  u64   mlib.padstr.str 
    setret   u64   
    jump           #2615 
;------------------------
#2615:
    return         
end

proc mlib.chr
    rettype  u64   
    param    i64   .c 
;------------------------
    load     i64   .c 
    loadref  u64   mlib.chr.str 
    loadimm  i64   1 
    istorex  u8    1 -1
    loadimm  u64   0 
    loadref  u64   mlib.chr.str 
    loadimm  i64   2 
    istorex  u8    1 -1
    loadref  u64   mlib.chr.str 
    setret   u64   
    jump           #2616 
;------------------------
#2616:
    return         
end

proc mlib.cmpstring
    rettype  i64   
    param    u64   .s 
    param    u64   .t 
    local    i64   .res 
;------------------------
    startmx        
    setcall        2
    load     u64   .t 
    setarg   u64   2
    load     u64   .s 
    setarg   u64   1
    callf    i32   strcmp 2 0
    widen    i32   
    double         
    store    i64   .res 
    loadimm  i64   0 
    jumpge   i64   #2619 
    loadimm  i64   -1 
    resetmx        
    jump           #2618 
#2619:
    load     i64   .res 
    loadimm  i64   0 
    jumple   i64   #2620 
    loadimm  i64   1 
    resetmx        
    jump           #2618 
#2620:
    loadimm  i64   0 
    endmx          
#2618:
    setret   i64   
    jump           #2617 
;------------------------
#2617:
    return         
end

proc mlib.cmpstringn
    rettype  i64   
    param    u64   .s 
    param    u64   .t 
    param    i64   .n 
    local    i64   .res 
;------------------------
    startmx        
    setcall        3
    load     i64   .n 
    setarg   u64   3
    load     u64   .t 
    setarg   u64   2
    load     u64   .s 
    setarg   u64   1
    callf    i32   strncmp 3 0
    widen    i32   
    double         
    store    i64   .res 
    loadimm  i64   0 
    jumpge   i64   #2623 
    loadimm  i64   -1 
    resetmx        
    jump           #2622 
#2623:
    load     i64   .res 
    loadimm  i64   0 
    jumple   i64   #2624 
    loadimm  i64   1 
    resetmx        
    jump           #2622 
#2624:
    loadimm  i64   0 
    endmx          
#2622:
    setret   i64   
    jump           #2621 
;------------------------
#2621:
    return         
end

proc mlib.eqstring
    rettype  i64   
    param    u64   .s 
    param    u64   .t 
;------------------------
    setcall        2
    load     u64   .t 
    setarg   u64   2
    load     u64   .s 
    setarg   u64   1
    callf    i32   strcmp 2 0
    widen    i32   
    loadimm  i64   0 
    eq       i64   
    setret   i64   
    jump           #2625 
;------------------------
#2625:
    return         
end

proc mlib.cmpbytes
    rettype  i64   
    param    u64   .p 
    param    u64   .q 
    param    i64   .n 
    local    i64   .res 
;------------------------
    startmx        
    setcall        3
    load     i64   .n 
    setarg   u64   3
    load     u64   .q 
    setarg   u64   2
    load     u64   .p 
    setarg   u64   1
    callf    i32   memcmp 3 0
    widen    i32   
    double         
    store    i64   .res 
    loadimm  i64   0 
    jumpge   i64   #2628 
    loadimm  i64   -1 
    resetmx        
    jump           #2627 
#2628:
    load     i64   .res 
    loadimm  i64   0 
    jumple   i64   #2629 
    loadimm  i64   1 
    resetmx        
    jump           #2627 
#2629:
    loadimm  i64   0 
    endmx          
#2627:
    setret   i64   
    jump           #2626 
;------------------------
#2626:
    return         
end

proc mlib.eqbytes
    rettype  i64   
    param    u64   .p 
    param    u64   .q 
    param    i64   .n 
;------------------------
    setcall        3
    load     i64   .n 
    setarg   u64   3
    load     u64   .q 
    setarg   u64   2
    load     u64   .p 
    setarg   u64   1
    callf    i32   memcmp 3 0
    widen    i32   
    loadimm  i64   0 
    eq       i64   
    setret   i64   
    jump           #2630 
;------------------------
#2630:
    return         
end

proc mlib.mseed
    param    u64   .a 
    param    u64   .b 
;------------------------
    load     u64   .a 
    loadref  u64   mlib.seed 
    loadimm  i64   1 
    istorex  u64   8 -8
    load     u64   .b 
    jumpf    u64   #2633 
    load     u64   .b 
    loadref  u64   mlib.seed 
    loadimm  i64   2 
    istorex  u64   8 -8
    jump           #2632 
#2633:
    loadref  u64   mlib.seed 
    loadimm  i64   2 
    addptrx  u64   8 -8
    load     u64   .a 
    bitxorto u64   
#2632:
;------------------------
#2631:
    return         
end

proc mlib.mrandom
    rettype  u64   
    local    i64   .x 
    local    i64   .y 
;------------------------
    loadref  u64   mlib.seed 
    loadimm  i64   1 
    iloadx   i64   8 -8
    store    i64   .x 
    loadref  u64   mlib.seed 
    loadimm  i64   2 
    iloadx   i64   8 -8
    store    i64   .y 
    load     i64   .y 
    loadref  u64   mlib.seed 
    loadimm  i64   1 
    istorex  u64   8 -8
    loadref  u64   .x 
    load     i64   .x 
    loadimm  i64   23 
    shl      i64   
    bitxorto i64   
    load     i64   .x 
    load     i64   .y 
    bitxor   i64   
    load     i64   .x 
    loadimm  i64   17 
    shr      i64   
    bitxor   i64   
    load     i64   .y 
    loadimm  i64   26 
    shr      i64   
    bitxor   i64   
    loadref  u64   mlib.seed 
    loadimm  i64   2 
    istorex  u64   8 -8
    loadref  u64   mlib.seed 
    loadimm  i64   2 
    iloadx   i64   8 -8
    load     i64   .y 
    add      i64   
    setret   u64   
    jump           #2634 
;------------------------
#2634:
    return         
end

proc mlib.mrandomp
    rettype  i64   
;------------------------
    setcall        0
    callf    i64   mlib.mrandom 0 0
    loadimm  i64   9223372036854775807 
    bitand   i64   
    setret   i64   
    jump           #2635 
;------------------------
#2635:
    return         
end

proc mlib.mrandomint
    rettype  i64   
    param    i64   .n 
;------------------------
    setcall        0
    callf    i64   mlib.mrandomp 0 0
    load     i64   .n 
    rem      i64   
    setret   i64   
    jump           #2636 
;------------------------
#2636:
    return         
end

proc mlib.mrandomrange
    rettype  i64   
    param    i64   .a 
    param    i64   .b 
    local    i64   .span 
;------------------------
    load     i64   .b 
    load     i64   .a 
    sub      i64   
    loadimm  i64   1 
    add      i64   
    store    i64   .span 
    load     i64   .span 
    loadimm  i64   0 
    jumpgt   i64   #2639 
    loadimm  i64   0 
    setret   i64   
    jump           #2637 
#2639:
#2638:
    setcall        0
    callf    i64   mlib.mrandomp 0 0
    load     i64   .span 
    rem      i64   
    load     i64   .a 
    add      i64   
    setret   i64   
    jump           #2637 
;------------------------
#2637:
    return         
end

proc mlib.mrandomreal
    rettype  r64   
    local    r64   .x 
;------------------------
#2641:
    setcall        0
    callf    i64   mlib.mrandomp 0 0
    float    r64 i64 
    loadimm  r64   9223372036854775800.00000000000000000000 
    divf     r64   
    store    r64   .x 
#2642:
    load     r64   .x 
    loadimm  r64   1.00000000000000000000 
    jumpeq   r64   #2641 
#2643:
    load     r64   .x 
    setret   r64   
    jump           #2640 
;------------------------
#2640:
    return         
end

proc mlib.mrandomreal1
    rettype  r64   
;------------------------
    setcall        0
    callf    i64   mlib.mrandomp 0 0
    loadimm  i64   9223372036854775807 
    div      i64   
    float    r64 i64 
    setret   r64   
    jump           #2644 
;------------------------
#2644:
    return         
end

proc mlib.readline
    rettype  u64   
;------------------------
    callp          msys.m$read_conline 0 0
    load     u64   msys.rd_buffer 
    setret   u64   
    jump           #2645 
;------------------------
#2645:
    return         
end

proc mlib.findfunction
    rettype  u64   
    param    u64   .name 
    local    i64   .$av_1 
    local    i64   .i 
;------------------------
    loadimm  i64   1 
    store    i64   .i 
;SYSCALL
    load     i64   $nprocs 
    store    i64   .$av_1 
    load     i64   .$av_1 
    loadimm  i64   1 
    jumplt   i64   #2649 
#2647:
    setcall        2
    load     u64   .name 
    setarg   u64   2
;SYSCALL
    loadref  u64   $procname 
    load     i64   .i 
    iloadx   u64   8 -8
    setarg   u64   1
    callf    i64   mlib.eqstring 2 0
    jumpf    i64   #2651 
;SYSCALL
    loadref  u64   $procaddr 
    load     i64   .i 
    iloadx   u64   8 -8
    setret   u64   
    jump           #2646 
#2651:
#2650:
#2648:
    forup          #2647 1
    opnd           .i 
    opnd           .$av_1 
#2649:
    loadimm  u64   0 
    setret   u64   
    jump           #2646 
;------------------------
#2646:
    return         
end

proc mlib.roundtoblock
    rettype  i64   
    param    i64   .n 
    param    i64   .align 
;------------------------
    load     i64   .n 
    load     i64   .align 
    loadimm  i64   1 
    sub      i64   
    bitand   i64   
    loadimm  i64   0 
    jumpne   i64   #2654 
    load     i64   .n 
    setret   i64   
    jump           #2652 
#2654:
#2653:
    load     i64   .n 
    load     i64   .align 
    load     i64   .n 
    load     i64   .align 
    loadimm  i64   1 
    sub      i64   
    bitand   i64   
    sub      i64   
    add      i64   
    setret   i64   
    jump           #2652 
;------------------------
#2652:
    return         
end

proc mwindows.os_init
    local    i64   .i 
    local    i64   .count 
    local    mem 22 .info 
;------------------------
    setcall        1
    loadimm  i64   -11 
    truncate i64 u32 
    setarg   u32   1
    callf    u64   GetStdHandle 1 0
    store    u64   mwindows.hconsole 
    setcall        1
    loadimm  i64   -10 
    truncate i64 u32 
    setarg   u32   1
    callf    u64   GetStdHandle 1 0
    store    u64   mwindows.hconsolein 
    loadimm  i64   0 
    loadref  u64   mwindows.lastkey 
    loadimm  i64   8 
    istorex  u16   1 0
    loadimm  i64   0 
    store    i64   mwindows.keypending 
    setcall        2
    loadimm  i64   1 
    setarg   i64   2
    loadimm  u64   0 
    setarg   u64   1
    callf    i64   SetConsoleCtrlHandler 2 0
    unload   i64   
    setcall        2
    loadimm  i64   3 
    setarg   u32   2
    load     u64   mwindows.hconsole 
    setarg   u64   1
    callf    i64   SetConsoleMode 2 0
    unload   i64   
    loadimm  i64   1 
    store    i64   mwindows.init_flag 
;------------------------
#2655:
    return         
end

proc mwindows.os_execwait
    rettype  i64   
    param    u64   .cmdline 
    param    i64   .newconsole 
    param    u64   .workdir 
    local    u32   .exitcode 
    local    i64   .status 
    local    i64   .cflags 
    local    mem 104 .si 
    local    mem 24 .xpi 
;------------------------
    loadimm  i64   0 
    store    i64   .cflags 
    loadref  u64   .si 
    clear    mem 104 
    loadref  u64   .xpi 
    clear    mem 24 
    load     i64   .newconsole 
    switch         #2658 0 2
    opnd           #2659 
#2658:
    swlabel        #2660 
    swlabel        #2661 
    swlabel        #2662 
    endsw          
#2660:
    loadimm  i64   32 
    store    i64   .cflags 
    jump           #2657 
#2661:
    loadimm  i64   48 
    store    i64   .cflags 
    jump           #2657 
#2662:
    loadimm  i64   48 
    store    i64   .cflags 
    jump           #2657 
#2659:
#2657:
    loadimm  i64   104 
    loadref  u64   .si 
    loadimm  i64   0 
    istorex  u32   1 0
    setcall        10
    loadref  u64   .xpi 
    setarg   u64   10
    loadref  u64   .si 
    setarg   u64   9
    loadimm  u64   0 
    setarg   u64   8
    loadimm  u64   0 
    setarg   u64   7
    load     i64   .cflags 
    setarg   u32   6
    loadimm  i64   1 
    setarg   i64   5
    loadimm  u64   0 
    setarg   u64   4
    loadimm  u64   0 
    setarg   u64   3
    load     u64   .cmdline 
    setarg   u64   2
    loadimm  u64   0 
    setarg   u64   1
    callf    i64   CreateProcessA 10 0
    store    i64   .status 
    load     i64   .status 
    loadimm  i64   0 
    jumpne   i64   #2664 
    setcall        0
    callf    u32   GetLastError 0 0
    widen    u32   
    store    i64   .status 
    setcall        2
    load     i64   .status 
    setarg   i64   2
    loadimm  u64   "Winexec error: %lld\n"
    setarg   u64   1
    callp          printf 2 2
    loadimm  i64   -1 
    setret   i64   
    jump           #2656 
#2664:
#2663:
    setcall        2
    loadimm  i64   4294967295 
    setarg   u32   2
    loadref  u64   .xpi 
    iload    u64   
    setarg   u64   1
    callf    u32   WaitForSingleObject 2 0
    unload   u32   
    setcall        2
    loadref  u64   .exitcode 
    setarg   u64   2
    loadref  u64   .xpi 
    iload    u64   
    setarg   u64   1
    callf    i64   GetExitCodeProcess 2 0
    unload   i64   
    setcall        1
    loadref  u64   .xpi 
    iload    u64   
    setarg   u64   1
    callf    i64   CloseHandle 1 0
    unload   i64   
    setcall        1
    loadref  u64   .xpi 
    loadimm  i64   8 
    iloadx   u64   1 0
    setarg   u64   1
    callf    i64   CloseHandle 1 0
    unload   i64   
    load     u32   .exitcode 
    setret   i64   
    jump           #2656 
;------------------------
#2656:
    return         
end

proc mwindows.os_execcmd
    rettype  i64   
    param    u64   .cmdline 
    param    i64   .newconsole 
    local    u32   .exitcode 
    local    i64   .i 
    local    i64   .j 
    local    i64   .k 
    local    mem 104 .si 
    local    mem 24 .xpi 
;------------------------
    loadref  u64   .si 
    clear    mem 104 
    loadref  u64   .xpi 
    clear    mem 24 
    loadimm  i64   104 
    loadref  u64   .si 
    loadimm  i64   0 
    istorex  u32   1 0
    setcall        10
    loadref  u64   .xpi 
    setarg   u64   10
    loadref  u64   .si 
    setarg   u64   9
    loadimm  u64   0 
    setarg   u64   8
    loadimm  u64   0 
    setarg   u64   7
    loadimm  i64   32 
    startmx        
    load     i64   .newconsole 
    jumpf    i64   #2668 
    loadimm  i64   16 
    resetmx        
    jump           #2667 
#2668:
    loadimm  i64   0 
    endmx          
#2667:
    bitor    i64   
    setarg   u32   6
    loadimm  i64   1 
    setarg   i64   5
    loadimm  u64   0 
    setarg   u64   4
    loadimm  u64   0 
    setarg   u64   3
    load     u64   .cmdline 
    setarg   u64   2
    loadimm  u64   0 
    setarg   u64   1
    callf    i64   CreateProcessA 10 0
    unload   i64   
    setcall        1
    loadref  u64   .xpi 
    iload    u64   
    setarg   u64   1
    callf    i64   CloseHandle 1 0
    unload   i64   
    setcall        1
    loadref  u64   .xpi 
    loadimm  i64   8 
    iloadx   u64   1 0
    setarg   u64   1
    callf    i64   CloseHandle 1 0
    unload   i64   
    loadimm  i64   1 
    setret   i64   
    jump           #2666 
;------------------------
#2666:
    return         
end

proc mwindows.os_getch
    rettype  i64   
    local    i64   .k 
;------------------------
    setcall        0
    callf    i64   mwindows.os_getchx 0 0
    loadimm  i64   255 
    bitand   i64   
    store    i64   .k 
    load     i64   .k 
    setret   i64   
    jump           #2669 
;------------------------
#2669:
    return         
end

proc mwindows.os_kbhit
    rettype  i64   
    local    u32   .count 
;------------------------
    load     i64   mwindows.init_flag 
    jumpt    i64   #2672 
    setcall        0
    callp          mwindows.os_init 0 0
#2672:
#2671:
    setcall        2
    loadref  u64   .count 
    setarg   u64   2
    load     u64   mwindows.hconsolein 
    setarg   u64   1
    callf    i64   GetNumberOfConsoleInputEvents 2 0
    unload   i64   
    load     u32   .count 
    loadimm  i64   1 
    gt       i64   
    setret   i64   
    jump           #2670 
;------------------------
#2670:
    return         
end

proc mwindows.os_getdllinst
    rettype  u64   
    param    u64   .name 
    local    u64   .hinst 
;------------------------
    setcall        1
    load     u64   .name 
    setarg   u64   1
    callf    u64   LoadLibraryA 1 0
    store    u64   .hinst 
    load     u64   .hinst 
    setret   u64   
    jump           #2673 
;------------------------
#2673:
    return         
end

proc mwindows.os_getdllprocaddr
    rettype  u64   
    param    i64   .hinst 
    param    u64   .name 
;------------------------
    setcall        2
    load     u64   .name 
    setarg   u64   2
    load     i64   .hinst 
    setarg   u64   1
    callf    u64   GetProcAddress 2 0
    setret   u64   
    jump           #2674 
;------------------------
#2674:
    return         
end

proc mwindows.os_initwindows
;------------------------
    setcall        0
    callp          mwindows.os_init 0 0
    setcall        1
    loadimm  u64   "pcc001"
    setarg   u64   1
    callp          mwindows.os_gxregisterclass 1 0
;------------------------
#2675:
    return         
end

proc mwindows.os_gxregisterclass
    param    u64   .classname 
    local    mem 80 .r 
;------------------------
    load     u8    mwindows.os_gxregisterclass.registered 
    jumpf    i64   #2679 
    jump           #2677 
#2679:
#2678:
    loadref  u64   .r 
    clear    mem 80 
    loadimm  i64   80 
    loadref  u64   .r 
    loadimm  i64   0 
    istorex  u32   1 0
    loadimm  i64   40 
    loadref  u64   .r 
    loadimm  i64   4 
    istorex  u32   1 0
    loadref  u64   mwindows.mainwndproc 
    loadref  u64   .r 
    loadimm  i64   8 
    istorex  u64   1 0
    loadimm  u64   0 
    loadref  u64   .r 
    loadimm  i64   24 
    istorex  u64   1 0
    loadimm  u64   0 
    loadref  u64   .r 
    loadimm  i64   32 
    istorex  u64   1 0
    setcall        2
    loadimm  u64   32512 
    setarg   u64   2
    loadimm  u64   0 
    setarg   u64   1
    callf    u64   LoadCursorA 2 0
    loadref  u64   .r 
    loadimm  i64   40 
    istorex  u64   1 0
    loadimm  u64   16 
    loadref  u64   .r 
    loadimm  i64   48 
    istorex  u64   1 0
    loadimm  u64   0 
    loadref  u64   .r 
    loadimm  i64   56 
    istorex  u64   1 0
    load     u64   .classname 
    loadref  u64   .r 
    loadimm  i64   64 
    istorex  u64   1 0
    loadimm  u64   0 
    loadref  u64   .r 
    loadimm  i64   72 
    istorex  u64   1 0
    setcall        1
    loadref  u64   .r 
    setarg   u64   1
    callf    u32   RegisterClassExA 1 0
    widen    u32   
    loadimm  i64   0 
    jumpne   i64   #2681 
    setcall        3
    setcall        0
    callf    u32   GetLastError 0 0
    widen    u32   
    setarg   i64   3
    load     u64   .classname 
    setarg   u64   2
    loadimm  u64   "Regclass error: %lld %lld\n"
    setarg   u64   1
    callp          printf 3 2
    loadimm  i64   1 
    stop           
#2681:
#2680:
    loadimm  i64   1 
    store    u8    mwindows.os_gxregisterclass.registered 
;------------------------
#2677:
    return         
end

proc mwindows.mainwndproc
    rettype  i64   
    param    u64   .hwnd 
    param    u32   .message 
    param    u64   .wparam 
    param    u64   .lparam 
    local    mem 48 .m 
    local    i64   .i 
    local    i64   .result 
    local    i64   .l 
;------------------------
    load     u64   .hwnd 
    loadref  u64   .m 
    loadimm  i64   0 
    istorex  u64   1 0
    load     u32   .message 
    loadref  u64   .m 
    loadimm  i64   8 
    istorex  u32   1 0
    load     u64   .wparam 
    loadref  u64   .m 
    loadimm  i64   16 
    istorex  u64   1 0
    load     u64   .lparam 
    loadref  u64   .m 
    loadimm  i64   24 
    istorex  u64   1 0
    loadimm  i64   0 
    loadref  u64   .m 
    loadimm  i64   40 
    istorex  i32   1 0
    loadimm  i64   0 
    loadref  u64   .m 
    loadimm  i64   44 
    istorex  i32   1 0
    load     u64   mwindows.wndproc_callbackfn 
    jumpf    u64   #2685 
    setcall        1
    loadref  u64   .m 
    setarg   u64   1
    load     u64   mwindows.wndproc_callbackfn 
    icallf   i64   1 0
    store    i64   .result 
    jump           #2684 
#2685:
    loadimm  i64   0 
    store    i64   .result 
#2684:
    loadref  u64   .m 
    loadimm  i64   8 
    iloadx   u32   1 0
    loadimm  i64   2 
    jumpne   i64   #2687 
    loadimm  i64   0 
    setret   i64   
    jump           #2683 
#2687:
#2686:
    startmx        
    load     i64   .result 
    jumpt    i64   #2689 
    setcall        4
    load     u64   .lparam 
    setarg   u64   4
    load     u64   .wparam 
    setarg   u64   3
    load     u32   .message 
    setarg   u32   2
    load     u64   .hwnd 
    setarg   u64   1
    callf    i64   DefWindowProcA 4 0
    resetmx        
    jump           #2688 
#2689:
    loadimm  i64   0 
    endmx          
#2688:
    setret   i64   
    jump           #2683 
;------------------------
#2683:
    return         
end

proc mwindows.os_setmesshandler
    param    u64   .addr 
;------------------------
    load     u64   .addr 
    store    u64   mwindows.wndproc_callbackfn 
;------------------------
#2690:
    return         
end

proc mwindows.os_getchx
    rettype  i64   
    local    i64   .count 
    local    i64   .charcode 
    local    i64   .keyshift 
    local    i64   .keycode 
    local    i64   .altdown 
    local    i64   .ctrldown 
    local    i64   .shiftdown 
    local    i64   .capslock 
;------------------------
    load     i64   mwindows.init_flag 
    jumpt    i64   #2693 
    setcall        0
    callp          mwindows.os_init 0 0
#2693:
#2692:
    load     i64   mwindows.keypending 
    jumpf    i64   #2695 
    load     mem 20 mwindows.pendkey 
    store    mem 20 mwindows.lastkey 
    loadimm  i64   0 
    store    i64   mwindows.keypending 
    jump           #2694 
#2695:
    loadref  u64   mwindows.lastkey 
    loadimm  i64   8 
    iloadx   u16   1 0
    loadimm  i64   0 
    jumpne   i64   #2697 
#2698:
    loadimm  i64   0 
    store    i64   .count 
    setcall        4
    loadref  u64   .count 
    setarg   u64   4
    loadimm  i64   1 
    setarg   u32   3
    loadref  u64   mwindows.lastkey 
    setarg   u64   2
    load     u64   mwindows.hconsolein 
    setarg   u64   1
    callf    i64   ReadConsoleInputA 4 0
    unload   i64   
#2699:
    loadref  u64   mwindows.lastkey 
    iload    u16   
    loadimm  i64   1 
    jumpne   i64   #2698 
    loadref  u64   mwindows.lastkey 
    loadimm  i64   4 
    iloadx   u32   1 0
    loadimm  i64   1 
    jumpne   i64   #2698 
#2700:
#2697:
#2696:
#2694:
    startmx        
    loadref  u64   mwindows.lastkey 
    loadimm  i64   16 
    iloadx   u32   1 0
    loadimm  i64   3 
    bitand   i64   
    jumpf    i64   #2702 
    loadimm  i64   1 
    resetmx        
    jump           #2701 
#2702:
    loadimm  i64   0 
    endmx          
#2701:
    store    i64   .altdown 
    startmx        
    loadref  u64   mwindows.lastkey 
    loadimm  i64   16 
    iloadx   u32   1 0
    loadimm  i64   12 
    bitand   i64   
    jumpf    i64   #2704 
    loadimm  i64   1 
    resetmx        
    jump           #2703 
#2704:
    loadimm  i64   0 
    endmx          
#2703:
    store    i64   .ctrldown 
    startmx        
    loadref  u64   mwindows.lastkey 
    loadimm  i64   16 
    iloadx   u32   1 0
    loadimm  i64   16 
    bitand   i64   
    jumpf    i64   #2706 
    loadimm  i64   1 
    resetmx        
    jump           #2705 
#2706:
    loadimm  i64   0 
    endmx          
#2705:
    store    i64   .shiftdown 
    startmx        
    loadref  u64   mwindows.lastkey 
    loadimm  i64   16 
    iloadx   u32   1 0
    loadimm  i64   128 
    bitand   i64   
    jumpf    i64   #2708 
    loadimm  i64   1 
    resetmx        
    jump           #2707 
#2708:
    loadimm  i64   0 
    endmx          
#2707:
    store    i64   .capslock 
    loadref  u64   mwindows.lastkey 
    loadimm  i64   8 
    addptrx  u64   1 0
    decrto   u16   1
    loadref  u64   mwindows.lastkey 
    loadimm  i64   14 
    iloadx   u8    1 0
    store    i64   .charcode 
    loadref  u64   mwindows.lastkey 
    loadimm  i64   10 
    iloadx   u16   1 0
    loadimm  i64   255 
    bitand   i64   
    store    i64   .keycode 
    load     i64   .charcode 
    loadimm  i64   0 
    jumpge   i64   #2710 
    load     i64   .charcode 
    loadimm  i64   -128 
    jumpge   i64   #2712 
    loadimm  i64   0 
    store    i64   .charcode 
    jump           #2711 
#2712:
    loadref  u64   .charcode 
    loadimm  i64   256 
    addto    i64   
#2711:
#2710:
#2709:
    load     i64   .altdown 
    jumpf    i64   #2714 
    load     i64   .ctrldown 
    jumpf    i64   #2714 
    load     i64   .charcode 
    loadimm  i64   166 
    jumpne   i64   #2714 
    loadimm  i64   0 
    double         
    store    i64   .ctrldown 
    store    i64   .altdown 
    jump           #2713 
#2714:
    load     i64   .altdown 
    jumpt    i64   #2717 
    load     i64   .ctrldown 
    jumpf    i64   #2716 
#2717:
    loadimm  i64   0 
    store    i64   .charcode 
    load     i64   .keycode 
    loadimm  i64   65 
    jumplt   i64   #2719 
    load     i64   .keycode 
    loadimm  i64   90 
    jumpgt   i64   #2719 
    load     i64   .keycode 
    loadimm  i64   64 
    sub      i64   
    store    i64   .charcode 
#2719:
#2718:
#2716:
#2715:
#2713:
    load     i64   .capslock 
    loadimm  i64   3 
    shl      i64   
    load     i64   .altdown 
    loadimm  i64   2 
    shl      i64   
    bitor    i64   
    load     i64   .ctrldown 
    loadimm  i64   1 
    shl      i64   
    bitor    i64   
    load     i64   .shiftdown 
    bitor    i64   
    store    i64   .keyshift 
    load     i64   .keyshift 
    loadimm  i64   24 
    shl      i64   
    load     i64   .keycode 
    loadimm  i64   16 
    shl      i64   
    bitor    i64   
    load     i64   .charcode 
    bitor    i64   
    setret   i64   
    jump           #2691 
;------------------------
#2691:
    return         
end

proc mwindows.os_getos
    rettype  u64   
;------------------------
    startmx        
    loadimm  i64   64 
    loadimm  i64   32 
    jumpne   i64   #2722 
    loadimm  u64   "W32"
    resetmx        
    jump           #2721 
#2722:
    loadimm  u64   "W64"
    endmx          
#2721:
    setret   u64   
    jump           #2720 
;------------------------
#2720:
    return         
end

proc mwindows.os_gethostsize
    rettype  i64   
;------------------------
    loadimm  i64   64 
    setret   i64   
    jump           #2725 
;------------------------
#2725:
    return         
end

proc mwindows.os_shellexec
    rettype  i64   
    param    u64   .opc 
    param    u64   .file 
;------------------------
    setcall        1
    load     u64   .file 
    setarg   u64   1
    callf    i32   system 1 0
    widen    i32   
    setret   i64   
    jump           #2726 
;------------------------
#2726:
    return         
end

proc mwindows.os_sleep
    param    i64   .a 
;------------------------
    setcall        1
    load     i64   .a 
    setarg   u32   1
    callp          Sleep 1 0
;------------------------
#2727:
    return         
end

proc mwindows.os_getstdin
    rettype  u64   
;------------------------
    setcall        2
    loadimm  u64   "rb"
    setarg   u64   2
    loadimm  u64   "con"
    setarg   u64   1
    callf    u64   fopen 2 0
    setret   u64   
    jump           #2728 
;------------------------
#2728:
    return         
end

proc mwindows.os_getstdout
    rettype  u64   
;------------------------
    setcall        2
    loadimm  u64   "wb"
    setarg   u64   2
    loadimm  u64   "con"
    setarg   u64   1
    callf    u64   fopen 2 0
    setret   u64   
    jump           #2731 
;------------------------
#2731:
    return         
end

proc mwindows.os_gethostname
    rettype  u64   
;------------------------
    setcall        3
    loadimm  i64   300 
    setarg   u32   3
    loadref  u64   mwindows.os_gethostname.name 
    setarg   u64   2
    loadimm  u64   0 
    setarg   u64   1
    callf    u32   GetModuleFileNameA 3 0
    unload   u32   
    loadref  u64   mwindows.os_gethostname.name 
    setret   u64   
    jump           #2734 
;------------------------
#2734:
    return         
end

proc mwindows.os_getmpath
    rettype  u64   
;------------------------
    loadimm  u64   "C:\\m\\"
    setret   u64   
    jump           #2735 
;------------------------
#2735:
    return         
end

proc mwindows.os_clock
    rettype  i64   
;------------------------
    setcall        0
    callf    i32   clock 0 0
    widen    i32   
    setret   i64   
    jump           #2737 
;------------------------
#2737:
    return         
end

proc mwindows.os_ticks
    rettype  i64   
;------------------------
    setcall        0
    callf    i64   GetTickCount64 0 0
    setret   i64   
    jump           #2738 
;------------------------
#2738:
    return         
end

proc mwindows.os_hptimer
    rettype  i64   
    local    i64   .t 
;------------------------
    setcall        1
    loadref  u64   .t 
    setarg   u64   1
    callf    u32   QueryPerformanceCounter 1 0
    unload   u32   
    load     i64   .t 
    setret   i64   
    jump           #2739 
;------------------------
#2739:
    return         
end

proc mwindows.os_iswindows
    rettype  i64   
;------------------------
    loadimm  i64   1 
    setret   i64   
    jump           #2740 
;------------------------
#2740:
    return         
end

proc mwindows.os_getsystime
    param    u64   .tm 
;------------------------
    setcall        1
    load     u64   .tm 
    setarg   u64   1
    callp          GetLocalTime 1 0
;------------------------
#2741:
    return         
end

proc mwindows.os_peek
    local    i64   .ticks 
    local    mem 100 .m 
;------------------------
    setcall        0
    callf    i64   GetTickCount64 0 0
    store    i64   .ticks 
    load     i64   .ticks 
    load     i64   mwindows.os_peek.lastticks 
    sub      i64   
    loadimm  i64   1000 
    jumplt   i64   #2744 
    load     i64   .ticks 
    store    i64   mwindows.os_peek.lastticks 
    setcall        5
    loadimm  i64   0 
    setarg   u32   5
    loadimm  i64   0 
    setarg   u32   4
    loadimm  i64   0 
    setarg   u32   3
    loadimm  u64   0 
    setarg   u64   2
    loadref  u64   .m 
    setarg   u64   1
    callf    u32   PeekMessageA 5 0
    unload   u32   
#2744:
#2743:
;------------------------
#2742:
    return         
end

proc mwindows.os_allocexecmem
    rettype  u64   
    param    i64   .n 
    local    u64   .p 
    local    u32   .oldprot 
    local    i64   .status 
;------------------------
    setcall        4
    loadimm  i64   1 
    setarg   u32   4
    loadimm  i64   12288 
    setarg   u32   3
    load     i64   .n 
    setarg   u32   2
    loadimm  u64   0 
    setarg   u64   1
    callf    u64   VirtualAlloc 4 0
    store    u64   .p 
    load     u64   .p 
    loadimm  u64   0 
    jumpne   u64   #2747 
    loadimm  u64   0 
    setret   u64   
    jump           #2745 
#2747:
#2746:
    setcall        4
    loadref  u64   .oldprot 
    setarg   u64   4
    loadimm  i64   64 
    setarg   u32   3
    load     i64   .n 
    setarg   u32   2
    load     u64   .p 
    setarg   u64   1
    callf    u32   VirtualProtect 4 0
    widen    u32   
    store    i64   .status 
    load     i64   .status 
    loadimm  i64   0 
    jumpne   i64   #2749 
    loadimm  u64   0 
    setret   u64   
    jump           #2745 
#2749:
#2748:
    load     u64   .p 
    setret   u64   
    jump           #2745 
;------------------------
#2745:
    return         
end

proc mwindows.start
;------------------------
;------------------------
#2750:
    return         
end

;
proc mwindllc.os_calldllfunction
    rettype  u64   
    param    u64   .fnaddr 
    param    i64   .retcode 
    param    i64   .nargs 
    param    u64   .args 
    param    u64   .argcodes 
    local    u64   .a 
    local    r64   .x 
    local    i64   .oddstack 
    local    i64   .nextra 
    local    i64   .pushedbytes 
;------------------------
    startmx        
    load     i64   .retcode 
    loadimm  i64   73 
    jumpne   i64   #2753 
    setcall        3
    load     i64   .nargs 
    setarg   i64   3
    load     u64   .args 
    setarg   u64   2
    load     u64   .fnaddr 
    setarg   u64   1
    callf    u64   mwindllc.calldll_cint 3 0
    resetmx        
    jump           #2752 
#2753:
    setcall        3
    load     i64   .nargs 
    setarg   i64   3
    load     u64   .args 
    setarg   u64   2
    load     u64   .fnaddr 
    setarg   u64   1
    callf    u64   mwindllc.calldll_creal 3 0
    endmx          
#2752:
    setret   u64   
    jump           #2751 
;------------------------
#2751:
    return         
end

proc mwindllc.os_pushargs
    rettype  u64   
    param    u64   .args 
    param    i64   .nargs 
    param    i64   .nextra 
    param    u64   .fnaddr 
    param    i64   .isfloat 
    local    u64   .a 
    local    r64   .x 
;------------------------
    setcall        5
    loadimm  u64   0 
    setarg   u64   5
    load     u64   .args 
    setarg   u64   4
    load     i64   .nargs 
    setarg   i64   3
    startmx        
    load     i64   .isfloat 
    jumpf    i64   #2756 
    loadimm  i64   0 
    resetmx        
    jump           #2755 
#2756:
    loadimm  i64   73 
    endmx          
#2755:
    setarg   i64   2
    load     u64   .fnaddr 
    setarg   u64   1
    callf    u64   mwindllc.os_calldllfunction 5 0
    setret   u64   
    jump           #2754 
;------------------------
#2754:
    return         
end

proc mwindllc.calldll_cint
    rettype  i64   
    param    u64   .fnaddr 
    param    u64   .params 
    param    i64   .nparams 
;------------------------
    load     i64   .nparams 
    switch         #2759 0 14
    opnd           #2760 
#2759:
    swlabel        #2761 
    swlabel        #2762 
    swlabel        #2763 
    swlabel        #2764 
    swlabel        #2765 
    swlabel        #2766 
    swlabel        #2767 
    swlabel        #2760 
    swlabel        #2760 
    swlabel        #2768 
    swlabel        #2769 
    swlabel        #2770 
    swlabel        #2771 
    swlabel        #2760 
    swlabel        #2772 
    endsw          
#2761:
    setcall        0
    load     u64   .fnaddr 
    icallf   i64   0 0
    setret   i64   
    jump           #2757 
    jump           #2758 
#2762:
    setcall        1
    load     u64   .params 
    loadimm  i64   1 
    iloadx   i64   8 -8
    setarg   i64   1
    load     u64   .fnaddr 
    icallf   i64   1 0
    setret   i64   
    jump           #2757 
    jump           #2758 
#2763:
    setcall        2
    load     u64   .params 
    loadimm  i64   2 
    iloadx   i64   8 -8
    setarg   i64   2
    load     u64   .params 
    loadimm  i64   1 
    iloadx   i64   8 -8
    setarg   i64   1
    load     u64   .fnaddr 
    icallf   i64   2 0
    setret   i64   
    jump           #2757 
    jump           #2758 
#2764:
    setcall        3
    load     u64   .params 
    loadimm  i64   3 
    iloadx   i64   8 -8
    setarg   i64   3
    load     u64   .params 
    loadimm  i64   2 
    iloadx   i64   8 -8
    setarg   i64   2
    load     u64   .params 
    loadimm  i64   1 
    iloadx   i64   8 -8
    setarg   i64   1
    load     u64   .fnaddr 
    icallf   i64   3 0
    setret   i64   
    jump           #2757 
    jump           #2758 
#2765:
    setcall        4
    load     u64   .params 
    loadimm  i64   4 
    iloadx   i64   8 -8
    setarg   i64   4
    load     u64   .params 
    loadimm  i64   3 
    iloadx   i64   8 -8
    setarg   i64   3
    load     u64   .params 
    loadimm  i64   2 
    iloadx   i64   8 -8
    setarg   i64   2
    load     u64   .params 
    loadimm  i64   1 
    iloadx   i64   8 -8
    setarg   i64   1
    load     u64   .fnaddr 
    icallf   i64   4 0
    setret   i64   
    jump           #2757 
    jump           #2758 
#2766:
    setcall        5
    load     u64   .params 
    loadimm  i64   5 
    iloadx   i64   8 -8
    setarg   i64   5
    load     u64   .params 
    loadimm  i64   4 
    iloadx   i64   8 -8
    setarg   i64   4
    load     u64   .params 
    loadimm  i64   3 
    iloadx   i64   8 -8
    setarg   i64   3
    load     u64   .params 
    loadimm  i64   2 
    iloadx   i64   8 -8
    setarg   i64   2
    load     u64   .params 
    loadimm  i64   1 
    iloadx   i64   8 -8
    setarg   i64   1
    load     u64   .fnaddr 
    icallf   i64   5 0
    setret   i64   
    jump           #2757 
    jump           #2758 
#2767:
    setcall        6
    load     u64   .params 
    loadimm  i64   6 
    iloadx   i64   8 -8
    setarg   i64   6
    load     u64   .params 
    loadimm  i64   5 
    iloadx   i64   8 -8
    setarg   i64   5
    load     u64   .params 
    loadimm  i64   4 
    iloadx   i64   8 -8
    setarg   i64   4
    load     u64   .params 
    loadimm  i64   3 
    iloadx   i64   8 -8
    setarg   i64   3
    load     u64   .params 
    loadimm  i64   2 
    iloadx   i64   8 -8
    setarg   i64   2
    load     u64   .params 
    loadimm  i64   1 
    iloadx   i64   8 -8
    setarg   i64   1
    load     u64   .fnaddr 
    icallf   i64   6 0
    setret   i64   
    jump           #2757 
    jump           #2758 
#2768:
    setcall        9
    load     u64   .params 
    loadimm  i64   9 
    iloadx   i64   8 -8
    setarg   i64   9
    load     u64   .params 
    loadimm  i64   8 
    iloadx   i64   8 -8
    setarg   i64   8
    load     u64   .params 
    loadimm  i64   7 
    iloadx   i64   8 -8
    setarg   i64   7
    load     u64   .params 
    loadimm  i64   6 
    iloadx   i64   8 -8
    setarg   i64   6
    load     u64   .params 
    loadimm  i64   5 
    iloadx   i64   8 -8
    setarg   i64   5
    load     u64   .params 
    loadimm  i64   4 
    iloadx   i64   8 -8
    setarg   i64   4
    load     u64   .params 
    loadimm  i64   3 
    iloadx   i64   8 -8
    setarg   i64   3
    load     u64   .params 
    loadimm  i64   2 
    iloadx   i64   8 -8
    setarg   i64   2
    load     u64   .params 
    loadimm  i64   1 
    iloadx   i64   8 -8
    setarg   i64   1
    load     u64   .fnaddr 
    icallf   i64   9 0
    setret   i64   
    jump           #2757 
    jump           #2758 
#2769:
    setcall        10
    load     u64   .params 
    loadimm  i64   10 
    iloadx   i64   8 -8
    setarg   i64   10
    load     u64   .params 
    loadimm  i64   9 
    iloadx   i64   8 -8
    setarg   i64   9
    load     u64   .params 
    loadimm  i64   8 
    iloadx   i64   8 -8
    setarg   i64   8
    load     u64   .params 
    loadimm  i64   7 
    iloadx   i64   8 -8
    setarg   i64   7
    load     u64   .params 
    loadimm  i64   6 
    iloadx   i64   8 -8
    setarg   i64   6
    load     u64   .params 
    loadimm  i64   5 
    iloadx   i64   8 -8
    setarg   i64   5
    load     u64   .params 
    loadimm  i64   4 
    iloadx   i64   8 -8
    setarg   i64   4
    load     u64   .params 
    loadimm  i64   3 
    iloadx   i64   8 -8
    setarg   i64   3
    load     u64   .params 
    loadimm  i64   2 
    iloadx   i64   8 -8
    setarg   i64   2
    load     u64   .params 
    loadimm  i64   1 
    iloadx   i64   8 -8
    setarg   i64   1
    load     u64   .fnaddr 
    icallf   i64   10 0
    setret   i64   
    jump           #2757 
    jump           #2758 
#2770:
    setcall        11
    load     u64   .params 
    loadimm  i64   11 
    iloadx   i64   8 -8
    setarg   i64   11
    load     u64   .params 
    loadimm  i64   10 
    iloadx   i64   8 -8
    setarg   i64   10
    load     u64   .params 
    loadimm  i64   9 
    iloadx   i64   8 -8
    setarg   i64   9
    load     u64   .params 
    loadimm  i64   8 
    iloadx   i64   8 -8
    setarg   i64   8
    load     u64   .params 
    loadimm  i64   7 
    iloadx   i64   8 -8
    setarg   i64   7
    load     u64   .params 
    loadimm  i64   6 
    iloadx   i64   8 -8
    setarg   i64   6
    load     u64   .params 
    loadimm  i64   5 
    iloadx   i64   8 -8
    setarg   i64   5
    load     u64   .params 
    loadimm  i64   4 
    iloadx   i64   8 -8
    setarg   i64   4
    load     u64   .params 
    loadimm  i64   3 
    iloadx   i64   8 -8
    setarg   i64   3
    load     u64   .params 
    loadimm  i64   2 
    iloadx   i64   8 -8
    setarg   i64   2
    load     u64   .params 
    loadimm  i64   1 
    iloadx   i64   8 -8
    setarg   i64   1
    load     u64   .fnaddr 
    icallf   i64   11 0
    setret   i64   
    jump           #2757 
    jump           #2758 
#2771:
    setcall        12
    load     u64   .params 
    loadimm  i64   12 
    iloadx   i64   8 -8
    setarg   i64   12
    load     u64   .params 
    loadimm  i64   11 
    iloadx   i64   8 -8
    setarg   i64   11
    load     u64   .params 
    loadimm  i64   10 
    iloadx   i64   8 -8
    setarg   i64   10
    load     u64   .params 
    loadimm  i64   9 
    iloadx   i64   8 -8
    setarg   i64   9
    load     u64   .params 
    loadimm  i64   8 
    iloadx   i64   8 -8
    setarg   i64   8
    load     u64   .params 
    loadimm  i64   7 
    iloadx   i64   8 -8
    setarg   i64   7
    load     u64   .params 
    loadimm  i64   6 
    iloadx   i64   8 -8
    setarg   i64   6
    load     u64   .params 
    loadimm  i64   5 
    iloadx   i64   8 -8
    setarg   i64   5
    load     u64   .params 
    loadimm  i64   4 
    iloadx   i64   8 -8
    setarg   i64   4
    load     u64   .params 
    loadimm  i64   3 
    iloadx   i64   8 -8
    setarg   i64   3
    load     u64   .params 
    loadimm  i64   2 
    iloadx   i64   8 -8
    setarg   i64   2
    load     u64   .params 
    loadimm  i64   1 
    iloadx   i64   8 -8
    setarg   i64   1
    load     u64   .fnaddr 
    icallf   i64   12 0
    setret   i64   
    jump           #2757 
    jump           #2758 
#2772:
    setcall        14
    load     u64   .params 
    loadimm  i64   14 
    iloadx   i64   8 -8
    setarg   i64   14
    load     u64   .params 
    loadimm  i64   13 
    iloadx   i64   8 -8
    setarg   i64   13
    load     u64   .params 
    loadimm  i64   12 
    iloadx   i64   8 -8
    setarg   i64   12
    load     u64   .params 
    loadimm  i64   11 
    iloadx   i64   8 -8
    setarg   i64   11
    load     u64   .params 
    loadimm  i64   10 
    iloadx   i64   8 -8
    setarg   i64   10
    load     u64   .params 
    loadimm  i64   9 
    iloadx   i64   8 -8
    setarg   i64   9
    load     u64   .params 
    loadimm  i64   8 
    iloadx   i64   8 -8
    setarg   i64   8
    load     u64   .params 
    loadimm  i64   7 
    iloadx   i64   8 -8
    setarg   i64   7
    load     u64   .params 
    loadimm  i64   6 
    iloadx   i64   8 -8
    setarg   i64   6
    load     u64   .params 
    loadimm  i64   5 
    iloadx   i64   8 -8
    setarg   i64   5
    load     u64   .params 
    loadimm  i64   4 
    iloadx   i64   8 -8
    setarg   i64   4
    load     u64   .params 
    loadimm  i64   3 
    iloadx   i64   8 -8
    setarg   i64   3
    load     u64   .params 
    loadimm  i64   2 
    iloadx   i64   8 -8
    setarg   i64   2
    load     u64   .params 
    loadimm  i64   1 
    iloadx   i64   8 -8
    setarg   i64   1
    load     u64   .fnaddr 
    icallf   i64   14 0
    setret   i64   
    jump           #2757 
    jump           #2758 
#2760:
    callp          msys.m$print_startcon 0 0
    load     i64   .nparams 
    callp          msys.m$print_i64_nf 1 0
    callp          msys.m$print_newline 0 0
    callp          msys.m$print_end 0 0
    callp          msys.m$print_startcon 0 0
    loadimm  u64   "calldll/c/int unsupported # of params"
    callp          msys.m$print_str_nf 1 0
    load     i64   .nparams 
    callp          msys.m$print_i64_nf 1 0
    callp          msys.m$print_newline 0 0
    callp          msys.m$print_end 0 0
    loadimm  i64   1 
    stop           
#2758:
    loadimm  i64   0 
    setret   i64   
    jump           #2757 
;------------------------
#2757:
    return         
end

proc mwindllc.calldll_creal
    rettype  i64   
    param    u64   .fnaddr 
    param    u64   .params 
    param    i64   .nparams 
    local    r64   .x 
;------------------------
    load     i64   .nparams 
    switch         #2776 0 2
    opnd           #2777 
#2776:
    swlabel        #2778 
    swlabel        #2779 
    swlabel        #2780 
    endsw          
#2778:
    setcall        0
    load     u64   .fnaddr 
    icallf   r64   0 0
    fix      i64 r64 
    setret   i64   
    jump           #2774 
    jump           #2775 
#2779:
    setcall        4
    load     u64   .params 
    loadimm  i64   4 
    iloadx   i64   8 -8
    float    r64 i64 
    setarg   r64   4
    load     u64   .params 
    loadimm  i64   3 
    iloadx   i64   8 -8
    float    r64 i64 
    setarg   r64   3
    load     u64   .params 
    loadimm  i64   2 
    iloadx   i64   8 -8
    float    r64 i64 
    setarg   r64   2
    load     u64   .params 
    loadimm  i64   1 
    iloadx   i64   8 -8
    float    r64 i64 
    setarg   r64   1
    callp          mwindllc.os_dummycall 4 0
    setcall        1
    load     u64   .params 
    loadimm  i64   1 
    iloadx   i64   8 -8
    setarg   i64   1
    load     u64   .fnaddr 
    icallf   r64   1 0
    store    r64   .x 
    jump           #2775 
#2780:
    setcall        2
    load     u64   .params 
    loadimm  i64   2 
    iloadx   i64   8 -8
    setarg   i64   2
    load     u64   .params 
    loadimm  i64   1 
    iloadx   i64   8 -8
    setarg   i64   1
    load     u64   .fnaddr 
    icallf   r64   2 0
    store    r64   .x 
    jump           #2775 
#2777:
    callp          msys.m$print_startcon 0 0
    loadimm  u64   "calldll/c/real too many params"
    callp          msys.m$print_str_nf 1 0
    callp          msys.m$print_newline 0 0
    callp          msys.m$print_end 0 0
    loadimm  i64   1 
    stop           
#2775:
    load     r64   .x 
    typepun  i64 r64 
    setret   i64   
    jump           #2774 
;------------------------
#2774:
    return         
end

proc mwindllc.os_dummycall
    param    r64   .a 
    param    r64   .b 
    param    r64   .c 
    param    r64   .d 
;------------------------
;------------------------
#2782:
    return         
end

proc pci_decls.start
;------------------------
;------------------------
#2783:
    return         
end

;
proc pci_exec.start
;------------------------
;------------------------
#2784:
    return         
end

;
proc pci_fixup.start
;------------------------
;------------------------
#2785:
    return         
end

;
proc pci_parse.start
;------------------------
;------------------------
#2786:
    return         
end

;
proc pci_support.start
;------------------------
;------------------------
#2787:
    return         
end

;
proc pci_tables.start
;------------------------
;------------------------
#2788:
    return         
end

;
proc $pci.start
    callp          pci_decls.start 0 0
    callp          pci_exec.start 0 0
    callp          pci_fixup.start 0 0
    callp          pci_lex.start 0 0
    callp          pci_parse.start 0 0
    callp          pci_support.start 0 0
    callp          pci_tables.start 0 0
;------------------------
;------------------------
#2789:
    return         
end

;
proc mlib.start
;------------------------
;------------------------
#2790:
    return         
end

;
proc mclib.start
;------------------------
;------------------------
#2791:
    return         
end

;
proc mwindllc.start
;------------------------
;------------------------
#2792:
    return         
end

;
;Function Table
    istatic  i64   $nprocs 
    data     i64   0 
;
    istatic  mem 0 $procname 
;
    istatic  mem 0 $procaddr 
;
extproc u64 malloc
    extparam u64   
extend

;
extproc u64 realloc
    extparam u64   
    extparam u64   
extend

;
extproc void free
    extparam u64   
extend

;
extproc void memset
    extparam u64   
    extparam i32   
    extparam u64   
extend

;
extproc void memcpy
    extparam u64   
    extparam u64   
    extparam u64   
extend

;
extproc i32 clock
extend

;
extproc i32 ftell
    extparam u64   
extend

;
extproc i32 fseek
    extparam u64   
    extparam i32   
    extparam i32   
extend

;
extproc u64 fread
    extparam u64   
    extparam u64   
    extparam u64   
    extparam u64   
extend

;
extproc u64 fwrite
    extparam u64   
    extparam u64   
    extparam u64   
    extparam u64   
extend

;
extproc i32 ungetc
    extparam i32   
    extparam u64   
extend

;
extproc u64 fopen
    extparam u64   
    extparam u64   
extend

;
extproc i32 fclose
    extparam u64   
extend

;
extproc u64 fgets
    extparam u64   
    extparam i64   
    extparam u64   
extend

;
extproc i32 getchar
extend

;
extproc i64 strlen
    extparam u64   
extend

;
extproc u64 strcpy
    extparam u64   
    extparam u64   
extend

;
extproc i32 strcmp
    extparam u64   
    extparam u64   
extend

;
extproc i32 strncmp
    extparam u64   
    extparam u64   
    extparam u64   
extend

;
extproc u64 strncpy
    extparam u64   
    extparam u64   
    extparam u64   
extend

;
extproc i32 memcmp
    extparam u64   
    extparam u64   
    extparam u64   
extend

;
extproc u64 strcat
    extparam u64   
    extparam u64   
extend

;
extproc i32 tolower
    extparam i32   
extend

;
extproc i32 toupper
    extparam i32   
extend

;
extproc r64 strtod
    extparam u64   
    extparam u64   
extend

;
extproc i32 puts
    extparam u64   
extend

;
extproc i32 printf
    extparam u64   
    extvariadic      2 
extend

;
extproc i32 sprintf
    extparam u64   
    extparam u64   
    extvariadic      3 
extend

;
extproc i32 sscanf
    extparam u64   
    extparam u64   
    extvariadic      3 
extend

;
extproc i32 system
    extparam u64   
extend

;
extproc i32 fgetc
    extparam u64   
extend

;
extproc i32 fprintf
    extparam u64   
    extparam u64   
    extvariadic      3 
extend

;
extproc u64 strchr
    extparam u64   
    extparam i32   
extend

;
extproc i32 __getmainargs
    extparam u64   
    extparam u64   
    extparam u64   
    extparam i64   
    extparam u64   
extend

;
extproc u64 GetStdHandle
    extparam u32   
extend

;
extproc i64 SetConsoleCtrlHandler
    extparam u64   
    extparam i64   
extend

;
extproc i64 SetConsoleMode
    extparam u64   
    extparam u32   
extend

;
extproc i64 CreateProcessA
    extparam u64   
    extparam u64   
    extparam u64   
    extparam u64   
    extparam i64   
    extparam u32   
    extparam u64   
    extparam u64   
    extparam u64   
    extparam u64   
extend

;
extproc u32 GetLastError
extend

;
extproc u32 WaitForSingleObject
    extparam u64   
    extparam u32   
extend

;
extproc i64 GetExitCodeProcess
    extparam u64   
    extparam u64   
extend

;
extproc i64 CloseHandle
    extparam u64   
extend

;
extproc i64 GetNumberOfConsoleInputEvents
    extparam u64   
    extparam u64   
extend

;
extproc u64 LoadLibraryA
    extparam u64   
extend

;
extproc u64 GetProcAddress
    extparam u64   
    extparam u64   
extend

;
extproc u64 LoadCursorA
    extparam u64   
    extparam u64   
extend

;
extproc u32 RegisterClassExA
    extparam u64   
extend

;
extproc i64 DefWindowProcA
    extparam u64   
    extparam u32   
    extparam u64   
    extparam u64   
extend

;
extproc i64 ReadConsoleInputA
    extparam u64   
    extparam u64   
    extparam u32   
    extparam u64   
extend

;
extproc void Sleep
    extparam u32   
extend

;
extproc u32 GetModuleFileNameA
    extparam u64   
    extparam u64   
    extparam u32   
extend

;
extproc u32 QueryPerformanceCounter
    extparam u64   
extend

;
extproc void GetLocalTime
    extparam u64   
extend

;
extproc u64 GetTickCount64
extend

;
extproc u32 PeekMessageA
    extparam u64   
    extparam u64   
    extparam u32   
    extparam u32   
    extparam u32   
extend

;
extproc u64 VirtualAlloc
    extparam u64   
    extparam u32   
    extparam u32   
    extparam u32   
extend

;
extproc u32 VirtualProtect
    extparam u64   
    extparam u32   
    extparam u32   
    extparam u64   
extend

;

