COMPILER TESTS

These tests show how compilers fared when given just a very large block of
simple but repeated lines. The test inputs were 20K, 100K, 500K or 2000K
lines of:

    a = b+c*d

or equivalent in each language. a,b,c,d are integers when declared,
and initialised to 1,2,3,4.

With interpreted languages, it measures the start-up time (eg. compiling
to byte-code) until it can start executing (although execution time in
each case was neglible).

Tests compile variously to object code, ASM, EXE, or some internal format
for interpreters. All compilers were run under Windows 7 64-bit.

C Language:

  Lines:          20K    100K    500K   2000K

  PellesC         1.1     7.1    35.0     OOM
  PellesC opt    25.0     T/O     ---     ---

  lccwin          0.4     1.8     8.7    *OOM
  lccwin opt      0.2     1.1     7.4    67.0

  DMC           Crash     T/O     ---     ---

  gcc 8.1.0       3.2    16.5   137.0    *OOM
  gcc opt         0.5     1.5    12.0     T/O
  g++ 8.1.0       ---    19.3
  g++ opt         ---     2.7

  TinyC           0.1     0.2     0.8     3.3

  MSVC            1.4    11.6     T/O     ---
  MSVC opt        1.4    11.6     T/O     ---

  Clang           1.1     4.6    22.5    *OOM
  Clang opt       0.8     3.4    18.6    73.0

  bcc             0.1     0.3     2.0     8.4  (my own C compiler; 2-pass)

  Smaller C       0.8     3.6    17.8    72.0

  Pico C          OOM     ---     ---     ---


Other languages:

  DMD (D)        28.7    T/O     ---     ---

  Lua (not JIT)   0.1    0.3     1.6     6.3

  Python 2.7      0.3    1.3     5.9     OOM
  Python 3.7      0.4    1.4     6.6     T/O
  PyPy            1.1    5.0     OOM     ---

  Ruby 192        0.2    0.8     4.0    17.7

  Perl            0.2    1.0     4.8    19.6

  Rustc (Rust)   30.7    T/O     ---     ---
  Rustc -O        5.2    T/O     ---     ---

  Nim+CC         16.0    OOM     ---     ---
  Nim to C        2.0   25.0     T/O     ---

  FPC (Pascal)   Fail    ---     ---     ---  (proc too complex)

  FBC (Basic)     9.0    T/O     ---     ---
  
  Go              0.8    2.0     8.0    31.0
  
  CLISP (Lisp)    0.3    1.2     5.7    22.0  (Appears to parse and execute as it goes)

  A68G (Algol68)  OOM    ---     ---     ---

  Zig             8.7   40.0    *OOM     ---
  eui (Euphoria)  0.3    1.3     5.1    21.0

  Julia          13.0  189.0     T/O     ---

  LuaJIT          0.0    0.1     0.5     2.0
  
  Dip             8.0    ---     ---     ---  (Estimate; run another machine)

  Clox (Lox)      0.0    0.1     0.3     1.0
  
  V (Vlang)       5.2   20.0     ---     ---
  
  Dart            8.5   19.5    74.5     --- (Compiling just hello.dart takes 6.5 seconds)
  
  Vox             1.3    1.5    2.3      5.4
  
  Wren            0.1    0.2    0.6      2.2 (Compile only; code is inside a function)
  
  Wasm            0.2    0.6    2.7     Fail (File too big; not line counts as 6x as high for Wasm; each a=b+c*d take 6 lines)

  Javac (Java)   Fail    ---    ---      --- (Code too large)

My languages:

  MM ('M')        0.2    0.4     1.6     6.3  (5-pass, to .exe; self-hosted, but built via C target and gcc-03)
  BB ('M')        0.1    0.4     1.8     7.2  (5-pass, to .exe; self-hosted, built with BB)

  QQ ('Q')        0.1    0.2     0.7     2.4  (3-pass Dynamic language, to internal byte-code, built with BB)
  MS ('MS')       0.0    0.1     0.4     1.6  (1.5-pass Dynamic language, to internal byte-code; built with BB)

------------------------------

Notes:

OOM means compiler reported Out of Memory and bailed out

*OOM means memory usage reached 99% (of 8GB) and was aborted

T/O means it timed out and was aborted (over 2 mins or so)

Some compilers are much faster when optimised, however virtually
no output is done (all code is eliminated), so take those results
with a pinch of salt.

A68G didn't manage 20K lines but did do 10K lines in about 1.5 seconds.

Javac managed 5000 lines in 3.2 seconds (but hello world takes 2.0 seconds).

This particular test input probably represents somewhat higher code density
that is typical, but all compilers are given the same input. But it means
lines-per-second figures derived from these could be underestimated.
