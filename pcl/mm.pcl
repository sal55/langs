Extproc malloc u64
    extparam                  u64 
Endext

Extproc realloc u64
    extparam                  u64 
    extparam                  u64 
Endext

Extproc free
    extparam                  u64 
Endext

Extproc memset
    extparam                  u64 
    extparam                  i32 
    extparam                  u64 
Endext

Extproc memcpy
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
Endext

Extproc clock i32
Endext

Extproc ftell i32
    extparam                  u64 
Endext

Extproc fseek i32
    extparam                  u64 
    extparam                  i32 
    extparam                  i32 
Endext

Extproc fread u64
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
Endext

Extproc fwrite u64
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
Endext

Extproc ungetc i32
    extparam                  i32 
    extparam                  u64 
Endext

Extproc fopen u64
    extparam                  u64 
    extparam                  u64 
Endext

Extproc fclose i32
    extparam                  u64 
Endext

Extproc fgets u64
    extparam                  u64 
    extparam                  i64 
    extparam                  u64 
Endext

Extproc remove i32
    extparam                  u64 
Endext

Extproc getchar i32
Endext

Extproc strlen i64
    extparam                  u64 
Endext

Extproc strcpy u64
    extparam                  u64 
    extparam                  u64 
Endext

Extproc strcmp i32
    extparam                  u64 
    extparam                  u64 
Endext

Extproc strncmp i32
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
Endext

Extproc strncpy u64
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
Endext

Extproc memcmp i32
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
Endext

Extproc strcat u64
    extparam                  u64 
    extparam                  u64 
Endext

Extproc tolower i32
    extparam                  i32 
Endext

Extproc toupper i32
    extparam                  i32 
Endext

Extproc strtod r64
    extparam                  u64 
    extparam                  u64 
Endext

Extproc puts i32
    extparam                  u64 
Endext

Extproc printf i32
    extparam                  u64 
    extvariadics              
Endext

Extproc sprintf i32
    extparam                  u64 
    extparam                  u64 
    extvariadics              
Endext

Extproc sscanf i32
    extparam                  u64 
    extparam                  u64 
    extvariadics              
Endext

Extproc system i32
    extparam                  u64 
Endext

Extproc fgetc i32
    extparam                  u64 
Endext

Extproc fputc i32
    extparam                  i32 
    extparam                  u64 
Endext

Extproc fprintf i32
    extparam                  u64 
    extparam                  u64 
    extvariadics              
Endext

Extproc strchr u64
    extparam                  u64 
    extparam                  i32 
Endext

Extproc __getmainargs i32
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
    extparam                  i64 
    extparam                  u64 
Endext

Extproc `GetStdHandle u64
    extparam                  u32 
Endext

Extproc `SetConsoleCtrlHandler i64
    extparam                  u64 
    extparam                  i64 
Endext

Extproc `SetConsoleMode i64
    extparam                  u64 
    extparam                  u32 
Endext

Extproc `CreateProcessA i64
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
    extparam                  i64 
    extparam                  u32 
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
Endext

Extproc `GetLastError u32
Endext

Extproc `WaitForSingleObject u32
    extparam                  u64 
    extparam                  u32 
Endext

Extproc `GetExitCodeProcess i64
    extparam                  u64 
    extparam                  u64 
Endext

Extproc `CloseHandle i64
    extparam                  u64 
Endext

Extproc `GetNumberOfConsoleInputEvents i64
    extparam                  u64 
    extparam                  u64 
Endext

Extproc `FlushConsoleInputBuffer i64
    extparam                  u64 
Endext

Extproc `LoadLibraryA u64
    extparam                  u64 
Endext

Extproc `GetProcAddress u64
    extparam                  u64 
    extparam                  u64 
Endext

Extproc `LoadCursorA u64
    extparam                  u64 
    extparam                  u64 
Endext

Extproc `RegisterClassExA u32
    extparam                  u64 
Endext

Extproc `DefWindowProcA i64
    extparam                  u64 
    extparam                  u32 
    extparam                  u64 
    extparam                  u64 
Endext

Extproc `ReadConsoleInputA i64
    extparam                  u64 
    extparam                  u64 
    extparam                  u32 
    extparam                  u64 
Endext

Extproc `Sleep
    extparam                  u32 
Endext

Extproc `GetModuleFileNameA u32
    extparam                  u64 
    extparam                  u64 
    extparam                  u32 
Endext

Extproc `MessageBoxA
    extparam                  i32 
    extparam                  u64 
    extparam                  u64 
    extparam                  i32 
Endext

Extproc `QueryPerformanceCounter u32
    extparam                  u64 
Endext

Extproc `QueryPerformanceFrequency u32
    extparam                  u64 
Endext

Extproc `CreateFileA u64
    extparam                  u64 
    extparam                  u32 
    extparam                  u32 
    extparam                  u64 
    extparam                  u32 
    extparam                  u32 
    extparam                  u64 
Endext

Extproc `GetFileTime u32
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
Endext

Extproc `GetLocalTime
    extparam                  u64 
Endext

Extproc `GetTickCount64 u64
Endext

Extproc `PeekMessageA u32
    extparam                  u64 
    extparam                  u64 
    extparam                  u32 
    extparam                  u32 
    extparam                  u32 
Endext

    zstatic        mm_decls.searchdirs: block:80 
    istatic        mm_decls.nsearchdirs: i64 
    data           0          u64 
    zstatic        mm_decls.stprogram: u64 
    zstatic        mm_decls.stmodule: u64 
    zstatic        mm_decls.stsysmodule: u64 
    zstatic        mm_decls.alldeflist: u64 
    zstatic        mm_decls.lx: block:16 
    zstatic        mm_decls.nextlx: block:16 
    zstatic        mm_decls.moduletable: block:91656 
    zstatic        mm_decls.inputfiles: block:1608 
    zstatic        mm_decls.libfiles: block:408 
    zstatic        mm_decls.sourcefilenames: block:8008 
    zstatic        mm_decls.sourcefilepaths: block:8008 
    zstatic        mm_decls.sourcefiletext: block:8008 
    zstatic        mm_decls.sourcefilesizes: block:8008 
    zstatic        mm_decls.issupportfile: block:1001 
    zstatic        mm_decls.nmodules: i64 
    zstatic        mm_decls.nsourcefiles: i64 
    zstatic        mm_decls.ninputfiles: i64 
    zstatic        mm_decls.nlibfiles: i64 
    zstatic        mm_decls.mafilenames: block:8008 
    zstatic        mm_decls.mafilesizes: block:8008 
    zstatic        mm_decls.mafileoffsets: block:8008 
    zstatic        mm_decls.mafiletext: block:8008 
    zstatic        mm_decls.mafilefileno: block:1001 
    zstatic        mm_decls.mafilesupport: block:1001 
    zstatic        mm_decls.nmafiles: i64 
    zstatic        mm_decls.mafilesource: u64 
    zstatic        mm_decls.currmodule: u64 
    zstatic        mm_decls.currmoduleno: i64 
    zstatic        mm_decls.ntypes: i64 
    zstatic        mm_decls.ttnamedef: block:48008 
    zstatic        mm_decls.ttowner: block:48008 
    zstatic        mm_decls.ttbasetype: block:24004 
    zstatic        mm_decls.ttname: block:48008 
    zstatic        mm_decls.ttsize: block:24004 
    zstatic        mm_decls.ttsizeset: block:6001 
    zstatic        mm_decls.ttlower: block:24004 
    zstatic        mm_decls.ttlength: block:24004 
    zstatic        mm_decls.ttmult: block:48008 
    zstatic        mm_decls.ttdimexpr: block:48008 
    zstatic        mm_decls.tttarget: block:24004 
    zstatic        mm_decls.ttkeytype: block:24004 
    zstatic        mm_decls.ttusercat: block:6001 
    zstatic        mm_decls.ttlineno: block:24004 
    zstatic        mm_decls.ttisint: block:6001 
    zstatic        mm_decls.ttisword: block:6001 
    zstatic        mm_decls.ttisreal: block:6001 
    zstatic        mm_decls.ttisinteger: block:6001 
    zstatic        mm_decls.ttisallnum: block:6001 
    zstatic        mm_decls.ttismainnum: block:6001 
    zstatic        mm_decls.ttisshort: block:6001 
    zstatic        mm_decls.ttisref: block:6001 
    zstatic        mm_decls.typenames: block:384032 
    zstatic        mm_decls.typenamepos: block:48004 
    zstatic        mm_decls.ntypenames: i64 
    zstatic        mm_decls.typestarterset: block:6001 
    zstatic        mm_decls.currproc: u64 
    istatic        mm_decls.alineno: i64 
    data           0          u64 
    istatic        mm_decls.debug: i64 
    data           0          u64 
    istatic        mm_decls.assemmode: i64 
    data           0          u64 
    zstatic        mm_decls.proclist: u64 
    zstatic        mm_decls.proclistx: u64 
    zstatic        mm_decls.staticlist: u64 
    zstatic        mm_decls.staticlistx: u64 
    zstatic        mm_decls.constlist: u64 
    zstatic        mm_decls.constlistx: u64 
    zstatic        mm_decls.genericmodules: block:200 
    zstatic        mm_decls.actualmodules: block:200 
    zstatic        mm_decls.nmodulemap: i64 
    zstatic        mm_decls.nullunit: u64 
    istatic        mm_decls.targetbits: i64 
    data           64         u64 
    istatic        mm_decls.targetsize: i64 
    data           8          u64 
    zstatic        mm_decls.docstrings: block:160 
    zstatic        mm_decls.ndocstrings: i64 
    zstatic        mm_decls.ndllnametable: i64 
    zstatic        mm_decls.ndllproctable: i64 
    zstatic        mm_decls.dllnametable: block:400 
    zstatic        mm_decls.dllinsttable: block:400 
    zstatic        mm_decls.dllproctable: block:12000 
    istatic        mm_decls.fverbose: i64 
    data           1          u64 
    istatic        mm_decls.msyslevel: i64 
    data           2          u64 
    istatic        mm_decls.fvarnames: u8 
    data           0          u8 
    istatic        mm_decls.fbundled: u8 
    data           0          u8 
    zstatic        mm_decls.fwritema: u8 
    zstatic        mm_decls.fwriteexports: u8 
    zstatic        mm_decls.fwritedocs: u8 
    zstatic        mm_decls.fexe: u8 
    zstatic        mm_decls.fobj: u8 
    zstatic        mm_decls.fwritelibs: u8 
    zstatic        mm_decls.fshowtiming: u8 
    zstatic        mm_decls.fshowss: u8 
    zstatic        mm_decls.fshowpcl: u8 
    zstatic        mm_decls.fshowasm: u8 
    zstatic        mm_decls.fshowast1: u8 
    zstatic        mm_decls.fshowast2: u8 
    zstatic        mm_decls.fshowast3: u8 
    zstatic        mm_decls.fshowst: u8 
    zstatic        mm_decls.fshowstflat: u8 
    zstatic        mm_decls.fshowtypes: u8 
    zstatic        mm_decls.fshowoverloads: u8 
    zstatic        mm_decls.foptim: u8 
    istatic        mm_decls.fcheckunusedlocals: u8 
    data           0          u8 
    zstatic        mm_decls.fwindows: u8 
    zstatic        mm_decls.flinux: u8 
    zstatic        mm_decls.fx64: u8 
    zstatic        mm_decls.fssonly: u8 
    zstatic        mm_decls.fnofile: u8 
    istatic        mm_decls.fdorts: u8 
    data           1          u8 
    istatic        mm_decls.dointlibs: u8 
    data           1          u8 
    istatic        mm_decls.passnames: block:104 
    data           "load_pass" u64 
    data           "parse_pass" u64 
    data           "fixup_pass" u64 
    data           "name_pass" u64 
    data           "type_pass" u64 
    data           "pcl_pass" u64 
    data           "mcl_pass" u64 
    data           "asm_pass" u64 
    data           "obj_pass" u64 
    data           "exe_pass" u64 
    data           "dll_pass" u64 
    data           "run_pass" u64 
    data           "clang_pass" u64 
    istatic        mm_decls.passlevel: i64 
    data           0          u64 
    istatic        mm_decls.prodmode: i64 
    data           0          u64 
    istatic        mm_decls.debugmode: i64 
    data           0          u64 
    zstatic        mm_decls.outfile: u64 
    zstatic        mm_decls.destfilename: u64 
    zstatic        mm_decls.destfilepath: u64 
    zstatic        mm_decls.asmfilename: u64 
    zstatic        mm_decls.pclfilename: u64 
    zstatic        mm_decls.exefilename: u64 
    zstatic        mm_decls.dllfilename: u64 
    zstatic        mm_decls.objfilename: u64 
    zstatic        mm_decls.mafilename: u64 
    zstatic        mm_decls.expfilename: u64 
    zstatic        mm_decls.extendtypelist: u64 
    zstatic        mm_decls.overloadtable: block:1152 
    zstatic        mm_decls.cclibtable: block:80 
    zstatic        mm_decls.ncclibs: i64 
    zstatic        mm_decls.infotext: u64 
    zstatic        mm_decls.nunits: i64 
    istatic        mm_tables.stdnames: block:272 
    data           "void"     u64 
    data           "c64"      u64 
    data           "u64"      u64 
    data           "u128"     u64 
    data           "i64"      u64 
    data           "i128"     u64 
    data           "r32"      u64 
    data           "r64"      u64 
    data           "range"    u64 
    data           "ref"      u64 
    data           "ichar"    u64 
    data           "array"    u64 
    data           "slice"    u64 
    data           "rec"      u64 
    data           "block"    u64 
    data           "short"    u64 
    data           "c8"       u64 
    data           "c16"      u64 
    data           "i8"       u64 
    data           "i16"      u64 
    data           "i32"      u64 
    data           "u8"       u64 
    data           "u16"      u64 
    data           "u32"      u64 
    data           "enum"     u64 
    data           "auto"     u64 
    data           "any"      u64 
    data           "proc"     u64 
    data           "label"    u64 
    data           "type"     u64 
    data           "bitfl"    u64 
    data           "tuple"    u64 
    data           "pend"     u64 
    data           "last "    u64 
    istatic        mm_tables.stdbits: block:34 
    data           0          u8 
    data           64         u8 
    data           64         u8 
    data           128        u8 
    data           64         u8 
    data           128        u8 
    data           32         u8 
    data           64         u8 
    data           128        u8 
    data           64         u8 
    data           64         u8 
    data           0          u8 
    data           128        u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           8          u8 
    data           16         u8 
    data           8          u8 
    data           16         u8 
    data           32         u8 
    data           8          u8 
    data           16         u8 
    data           32         u8 
    data           64         u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           64         u8 
    data           8          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    istatic        mm_tables.stdcodes: block:34 
    data           0          u8 
    data           67         u8 
    data           85         u8 
    data           85         u8 
    data           73         u8 
    data           73         u8 
    data           82         u8 
    data           82         u8 
    data           71         u8 
    data           80         u8 
    data           80         u8 
    data           65         u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           67         u8 
    data           67         u8 
    data           73         u8 
    data           73         u8 
    data           73         u8 
    data           85         u8 
    data           85         u8 
    data           85         u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    istatic        mm_tables.stdtopcl: block:34 
    data           0          u8 
    data           4          u8 
    data           4          u8 
    data           5          u8 
    data           9          u8 
    data           10         u8 
    data           11         u8 
    data           12         u8 
    data           5          u8 
    data           4          u8 
    data           4          u8 
    data           13         u8 
    data           5          u8 
    data           13         u8 
    data           13         u8 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           6          u8 
    data           7          u8 
    data           8          u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           4          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    zstatic        mm_tables.trefproc: i64 
    zstatic        mm_tables.treflabel: i64 
    istatic        mm_tables.typerank: block:56 
    data           1          u64 
    data           2          u64 
    data           4          u64 
    data           3          u64 
    data           5          u64 
    data           6          u64 
    data           7          u64 
    istatic        mm_tables.sysfnnames: block:256 
    data           "sysfn_init" u64 
    data           "sysfn_print_startfile" u64 
    data           "sysfn_print_startstr" u64 
    data           "sysfn_print_startptr" u64 
    data           "sysfn_print_startcon" u64 
    data           "sysfn_print_setfmt" u64 
    data           "sysfn_print_nogap" u64 
    data           "sysfn_print_space" u64 
    data           "sysfn_print_i64" u64 
    data           "sysfn_print_i64_nf" u64 
    data           "sysfn_print_u64" u64 
    data           "sysfn_print_r64" u64 
    data           "sysfn_print_r32" u64 
    data           "sysfn_print_i128" u64 
    data           "sysfn_print_u128" u64 
    data           "sysfn_print_str" u64 
    data           "sysfn_print_str_nf" u64 
    data           "sysfn_print_strsl" u64 
    data           "sysfn_print_ptr" u64 
    data           "sysfn_print_ptr_nf" u64 
    data           "sysfn_print_c8" u64 
    data           "sysfn_print_newline" u64 
    data           "sysfn_print_end" u64 
    data           "sysfn_read_i64" u64 
    data           "sysfn_read_r64" u64 
    data           "sysfn_read_str" u64 
    data           "sysfn_read_fileline" u64 
    data           "sysfn_read_strline" u64 
    data           "sysfn_read_conline" u64 
    data           "sysfn_getnprocs" u64 
    data           "sysfn_getprocname" u64 
    data           "sysfn_getprocaddr" u64 
    istatic        mm_tables.sysfnparams: block:32 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    istatic        mm_tables.sysfnres: block:32 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    zstatic        mm_tables.sysfnhandlers: block:256 
    zstatic        mm_tables.mlineno: i64 
    zstatic        mm_tables.fshowpst: u8 
    istatic        mm_tables.jtagnames: block:1152 
    data           "j_none"   u64 
    data           "j_const"  u64 
    data           "j_null"   u64 
    data           "j_name"   u64 
    data           "j_namelv" u64 
    data           "j_block"  u64 
    data           "j_stmtblock" u64 
    data           "j_decimal" u64 
    data           "j_assem"  u64 
    data           "j_assemmacro" u64 
    data           "j_assemreg" u64 
    data           "j_assemxreg" u64 
    data           "j_assemmem" u64 
    data           "j_strinclude" u64 
    data           "j_andl"   u64 
    data           "j_orl"    u64 
    data           "j_xorl"   u64 
    data           "j_notl"   u64 
    data           "j_istruel" u64 
    data           "j_makelist" u64 
    data           "j_makerange" u64 
    data           "j_makeset" u64 
    data           "j_makedict" u64 
    data           "j_makeslice" u64 
    data           "j_exprlist" u64 
    data           "j_multexpr" u64 
    data           "j_returnmult" u64 
    data           "j_keyword" u64 
    data           "j_keyvalue" u64 
    data           "j_assign" u64 
    data           "j_deepcopy" u64 
    data           "j_callfn" u64 
    data           "j_new"    u64 
    data           "j_destroy" u64 
    data           "j_cmp"    u64 
    data           "j_cmpchain" u64 
    data           "j_bin"    u64 
    data           "j_unary"  u64 
    data           "j_binto"  u64 
    data           "j_unaryto" u64 
    data           "j_incr"   u64 
    data           "j_inrev"  u64 
    data           "j_inrange" u64 
    data           "j_inset"  u64 
    data           "j_clamp"  u64 
    data           "j_flexptr" u64 
    data           "j_stringz" u64 
    data           "j_sliceptr" u64 
    data           "j_index"  u64 
    data           "j_indexlv" u64 
    data           "j_slice"  u64 
    data           "j_dot"    u64 
    data           "j_dotlv"  u64 
    data           "j_dotindex" u64 
    data           "j_dotslice" u64 
    data           "j_anddotslice" u64 
    data           "j_anddotindex" u64 
    data           "j_ptr"    u64 
    data           "j_ptrlv"  u64 
    data           "j_addrof" u64 
    data           "j_addroffirst" u64 
    data           "j_convert" u64 
    data           "j_shorten" u64 
    data           "j_autocast" u64 
    data           "j_typepun" u64 
    data           "j_typeconst" u64 
    data           "j_operator" u64 
    data           "j_upper"  u64 
    data           "j_bitwidth" u64 
    data           "j_bytesize" u64 
    data           "j_typeof" u64 
    data           "j_typestr" u64 
    data           "j_bitfield" u64 
    data           "j_minvalue" u64 
    data           "j_maxvalue" u64 
    data           "j_cvlineno" u64 
    data           "j_cvstrlineno" u64 
    data           "j_cvmodulename" u64 
    data           "j_cvfilename" u64 
    data           "j_cvfunction" u64 
    data           "j_cvdate" u64 
    data           "j_cvtime" u64 
    data           "j_cvversion" u64 
    data           "j_cvtypename" u64 
    data           "j_cvtargetbits" u64 
    data           "j_cvtargetsize" u64 
    data           "j_cvtargetcode" u64 
    data           "j_cvnil"  u64 
    data           "j_cvpi"   u64 
    data           "j_cvtrue" u64 
    data           "j_cvfalse" u64 
    data           "j_whenthen" u64 
    data           "j_elsif"  u64 
    data           "j_fmtitem" u64 
    data           "j_nogap"  u64 
    data           "j_space"  u64 
    data           "j_callproc" u64 
    data           "j_return" u64 
    data           "j_syscall" u64 
    data           "j_to"     u64 
    data           "j_if"     u64 
    data           "j_longif" u64 
    data           "j_forup"  u64 
    data           "j_fordown" u64 
    data           "j_forall" u64 
    data           "j_forallrev" u64 
    data           "j_while"  u64 
    data           "j_repeat" u64 
    data           "j_goto"   u64 
    data           "j_labeldef" u64 
    data           "j_restart" u64 
    data           "j_redo"   u64 
    data           "j_next"   u64 
    data           "j_exit"   u64 
    data           "j_do"     u64 
    data           "j_case"   u64 
    data           "j_docase" u64 
    data           "j_switch" u64 
    data           "j_doswitch" u64 
    data           "j_swap"   u64 
    data           "j_select" u64 
    data           "j_recase" u64 
    data           "j_print"  u64 
    data           "j_println" u64 
    data           "j_fprint" u64 
    data           "j_fprintln" u64 
    data           "j_cprint" u64 
    data           "j_cprintln" u64 
    data           "j_sprint" u64 
    data           "j_sfprint" u64 
    data           "j_read"   u64 
    data           "j_readln" u64 
    data           "j_sread"  u64 
    data           "j_sreadln" u64 
    data           "j_stop"   u64 
    data           "j_try"    u64 
    data           "j_except" u64 
    data           "j_yield"  u64 
    data           "j_raise"  u64 
    data           "j_eval"   u64 
    data           "j_stack"  u64 
    data           "j_unstack" u64 
    data           "j_empty"  u64 
    data           "j_dummy"  u64 
    istatic        mm_tables.jisexpr: block:144 
    data           0          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           0          u8 
    data           0          u8 
    data           3          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           1          u8 
    data           1          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           0          u8 
    data           2          u8 
    data           1          u8 
    data           2          u8 
    data           1          u8 
    data           2          u8 
    data           1          u8 
    data           3          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           1          u8 
    data           1          u8 
    data           3          u8 
    data           1          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           0          u8 
    data           0          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           3          u8 
    data           3          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           3          u8 
    data           0          u8 
    data           3          u8 
    data           0          u8 
    data           0          u8 
    data           3          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           3          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           3          u8 
    istatic        mm_tables.bitfieldnames: block:64 
    data           "bf_msb"   u64 
    data           "bf_lsb"   u64 
    data           "bf_msbit" u64 
    data           "bf_lsbit" u64 
    data           "bf_msw"   u64 
    data           "bf_lsw"   u64 
    data           "bf_odd"   u64 
    data           "bf_even"  u64 
    istatic        mm_tables.optypenames: block:32 
    data           "no_op"    u64 
    data           "bin_op"   u64 
    data           "mon_op"   u64 
    data           "prop_op"  u64 
    istatic        mm_tables.symbolnames: block:1424 
    data           "errorsym" u64 
    data           "."        u64 
    data           "lexdotsym" u64 
    data           "&."       u64 
    data           ","        u64 
    data           ";"        u64 
    data           ":"        u64 
    data           "::"       u64 
    data           ":="       u64 
    data           "::="      u64 
    data           "=>"       u64 
    data           "("        u64 
    data           ")"        u64 
    data           "["        u64 
    data           "]"        u64 
    data           "{"        u64 
    data           "}"        u64 
    data           "^"        u64 
    data           "|"        u64 
    data           "||"       u64 
    data           "@"        u64 
    data           "@@"       u64 
    data           "?"        u64 
    data           "&"        u64 
    data           "&&"       u64 
    data           "~"        u64 
    data           ".."       u64 
    data           "..."      u64 
    data           "#"        u64 
    data           "+"        u64 
    data           "-"        u64 
    data           "*"        u64 
    data           "/"        u64 
    data           "%"        u64 
    data           "rem"      u64 
    data           "iand"     u64 
    data           "ior"      u64 
    data           "ixor"     u64 
    data           "<<"       u64 
    data           ">>"       u64 
    data           "min"      u64 
    data           "max"      u64 
    data           "and"      u64 
    data           "or"       u64 
    data           "xor"      u64 
    data           "="        u64 
    data           "cmp"      u64 
    data           "**"       u64 
    data           "=="       u64 
    data           "in"       u64 
    data           "notin"    u64 
    data           "inrev"    u64 
    data           "$neg"     u64 
    data           "not"      u64 
    data           "istrue"   u64 
    data           "inot"     u64 
    data           "abs"      u64 
    data           "sign"     u64 
    data           "sqrt"     u64 
    data           "sqr"      u64 
    data           "propsym"  u64 
    data           "mathsopsym" u64 
    data           "maths2opsym" u64 
    data           "bitfieldsym" u64 
    data           "eolsym"   u64 
    data           "eofsym"   u64 
    data           "rawxnamesym" u64 
    data           "docstringsym" u64 
    data           "incrsym"  u64 
    data           "intconstsym" u64 
    data           "decimalconstsym" u64 
    data           "realconstsym" u64 
    data           "charconstsym" u64 
    data           "wcharconstsym" u64 
    data           "stringconstsym" u64 
    data           "astringconstsym" u64 
    data           "wstringconstsym" u64 
    data           "unitnamesym" u64 
    data           "namesym"  u64 
    data           "ksourcedirsym" u64 
    data           "kstrincludesym" u64 
    data           "regsym"   u64 
    data           "xregsym"  u64 
    data           "fregsym"  u64 
    data           "mregsym"  u64 
    data           "jmpccsym" u64 
    data           "setccsym" u64 
    data           "movccsym" u64 
    data           "segnamesym" u64 
    data           "asmopcodesym" u64 
    data           "stdtypesym" u64 
    data           "machinetypesym" u64 
    data           "ktypeofsym" u64 
    data           "ksubrangesym" u64 
    data           "koutsym"  u64 
    data           "kicharsym" u64 
    data           "kifsym"   u64 
    data           "kthensym" u64 
    data           "kelsifsym" u64 
    data           "kelsesym" u64 
    data           "kelsecasesym" u64 
    data           "kelseswitchsym" u64 
    data           "kelseselectsym" u64 
    data           "kendsym"  u64 
    data           "kunlesssym" u64 
    data           "kcasesym" u64 
    data           "kdocasesym" u64 
    data           "krecasesym" u64 
    data           "kwhensym" u64 
    data           "kforsym"  u64 
    data           "ktosym"   u64 
    data           "kbysym"   u64 
    data           "kdosym"   u64 
    data           "kwhilesym" u64 
    data           "krepeatsym" u64 
    data           "kuntilsym" u64 
    data           "kreturnsym" u64 
    data           "kstopsym" u64 
    data           "kloopsym" u64 
    data           "kstepsym" u64 
    data           "kgotosym" u64 
    data           "kswitchsym" u64 
    data           "kdoswitchsym" u64 
    data           "kprintsym" u64 
    data           "ksprintsym" u64 
    data           "kreadsym" u64 
    data           "ksreadsym" u64 
    data           "ksreadlnsym" u64 
    data           "kprocsym" u64 
    data           "kfunctionsym" u64 
    data           "klabelsym" u64 
    data           "krecordsym" u64 
    data           "kstructsym" u64 
    data           "kunionsym" u64 
    data           "kimportsym" u64 
    data           "kimportmodulesym" u64 
    data           "kimportpathsym" u64 
    data           "kmapmodulesym" u64 
    data           "ktypesym" u64 
    data           "ktypealiassym" u64 
    data           "kextendtypesym" u64 
    data           "krefsym"  u64 
    data           "kmutsym"  u64 
    data           "kletsym"  u64 
    data           "kslicesym" u64 
    data           "karraysym" u64 
    data           "kdictsym" u64 
    data           "kmacrosym" u64 
    data           "kexpandsym" u64 
    data           "koperatorsym" u64 
    data           "kconstsym" u64 
    data           "kenumsym" u64 
    data           "knewsym"  u64 
    data           "kdestroysym" u64 
    data           "kclearsym" u64 
    data           "kclasssym" u64 
    data           "kfflangsym" u64 
    data           "kglobalsym" u64 
    data           "kstaticsym" u64 
    data           "ktrysym"  u64 
    data           "kexceptsym" u64 
    data           "kfinallysym" u64 
    data           "kraisesym" u64 
    data           "kyieldsym" u64 
    data           "kcastsym" u64 
    data           "ktypeconstsym" u64 
    data           "compilervarsym" u64 
    data           "dollarsym" u64 
    data           "kevalsym" u64 
    data           "ktabledatasym" u64 
    data           "kstacksym" u64 
    data           "kclampsym" u64 
    data           "kswapsym" u64 
    data           "kerrorsym" u64 
    data           "kassemsym" u64 
    data           "ksyscallsym" u64 
    data           "kemptysym" u64 
    data           "kdummysym" u64 
    istatic        mm_tables.symboloptypes: block:178 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           3          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    istatic        mm_tables.symbolgenops: block:178 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           102        u8 
    data           103        u8 
    data           104        u8 
    data           105        u8 
    data           106        u8 
    data           107        u8 
    data           108        u8 
    data           109        u8 
    data           110        u8 
    data           111        u8 
    data           112        u8 
    data           115        u8 
    data           116        u8 
    data           124        u8 
    data           125        u8 
    data           0          u8 
    data           117        u8 
    data           0          u8 
    data           151        u8 
    data           123        u8 
    data           113        u8 
    data           114        u8 
    data           0          u8 
    data           129        u8 
    data           132        u8 
    data           133        u8 
    data           131        u8 
    data           130        u8 
    data           149        u8 
    data           135        u8 
    data           134        u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    istatic        mm_tables.symbolgentoops: block:178 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           159        u8 
    data           160        u8 
    data           161        u8 
    data           162        u8 
    data           163        u8 
    data           164        u8 
    data           165        u8 
    data           166        u8 
    data           167        u8 
    data           168        u8 
    data           169        u8 
    data           170        u8 
    data           171        u8 
    data           172        u8 
    data           173        u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           179        u8 
    data           180        u8 
    data           178        u8 
    data           177        u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    istatic        mm_tables.symbolopprios: block:178 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           5          u8 
    data           0          u8 
    data           0          u8 
    data           4          u8 
    data           4          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           3          u8 
    data           3          u8 
    data           4          u8 
    data           4          u8 
    data           7          u8 
    data           8          u8 
    data           8          u8 
    data           6          u8 
    data           6          u8 
    data           2          u8 
    data           6          u8 
    data           6          u8 
    data           6          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    istatic        mm_tables.exprstarter: block:178 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    istatic        mm_tables.sourcedirnames: block:48 
    data           "includedir" u64 
    data           "strincludedir" u64 
    data           "binincludedir" u64 
    data           "textincludedir" u64 
    data           "defineunitdir" u64 
    data           "cclibdir" u64 
    istatic        mm_tables.fflangnames: block:40 
    data           "noff"     u64 
    data           "windowsff" u64 
    data           "clangff"  u64 
    data           "mlangff"  u64 
    data           "callbackff" u64 
    istatic        mm_tables.scopenames: block:32 
    data           "local_scope" u64 
    data           "program_scope" u64 
    data           "export_scope" u64 
    data           "exportq_scope" u64 
    istatic        mm_tables.parammodenames: block:32 
    data           "Var "     u64 
    data           "In "      u64 
    data           "Out "     u64 
    data           "Opt "     u64 
    istatic        mm_tables.namenames: block:192 
    data           "nullid"   u64 
    data           "programid" u64 
    data           "moduleid" u64 
    data           "dllmoduleid" u64 
    data           "typeid"   u64 
    data           "procid"   u64 
    data           "dllprocid" u64 
    data           "dllvarid" u64 
    data           "genprocid" u64 
    data           "generatorid" u64 
    data           "constid"  u64 
    data           "staticid" u64 
    data           "frameid"  u64 
    data           "paramid"  u64 
    data           "fieldid"  u64 
    data           "genfieldid" u64 
    data           "enumid"   u64 
    data           "labelid"  u64 
    data           "blockid"  u64 
    data           "aliasid"  u64 
    data           "macroid"  u64 
    data           "macroparamid" u64 
    data           "linkid"   u64 
    data           "functionopid" u64 
    istatic        mm_tables.stnames: block:1952 
    data           "if"       u64 
    data           "then"     u64 
    data           "elsif"    u64 
    data           "else"     u64 
    data           "elsecase" u64 
    data           "elseswitch" u64 
    data           "case"     u64 
    data           "docase"   u64 
    data           "recase"   u64 
    data           "when"     u64 
    data           "for"      u64 
    data           "forall"   u64 
    data           "to"       u64 
    data           "downto"   u64 
    data           "by"       u64 
    data           "do"       u64 
    data           "end"      u64 
    data           "while"    u64 
    data           "repeat"   u64 
    data           "until"    u64 
    data           "always"   u64 
    data           "return"   u64 
    data           "yield"    u64 
    data           "stop"     u64 
    data           "restart"  u64 
    data           "redo"     u64 
    data           "loop"     u64 
    data           "next"     u64 
    data           "exit"     u64 
    data           "$step"    u64 
    data           "goto"     u64 
    data           "go"       u64 
    data           "switch"   u64 
    data           "doswitch" u64 
    data           "tabledata" u64 
    data           "clamp"    u64 
    data           "eval"     u64 
    data           "print"    u64 
    data           "println"  u64 
    data           "fprint"   u64 
    data           "fprintln" u64 
    data           "cprint"   u64 
    data           "cprintln" u64 
    data           "sprint"   u64 
    data           "sfprint"  u64 
    data           "cp"       u64 
    data           "cpl"      u64 
    data           "read"     u64 
    data           "readln"   u64 
    data           "cast"     u64 
    data           "proc"     u64 
    data           "function" u64 
    data           "threadedproc" u64 
    data           "type"     u64 
    data           "class"    u64 
    data           "record"   u64 
    data           "struct"   u64 
    data           "union"    u64 
    data           "ref"      u64 
    data           "pointer"  u64 
    data           "returning" u64 
    data           "var"      u64 
    data           "mut"      u64 
    data           "let"      u64 
    data           "include"  u64 
    data           "strinclude" u64 
    data           "bininclude" u64 
    data           "macro"    u64 
    data           "cclib"    u64 
    data           "assem"    u64 
    data           "asm"      u64 
    data           "static"   u64 
    data           "const"    u64 
    data           "enum"     u64 
    data           "$get_nprocs" u64 
    data           "$getnprocs" u64 
    data           "$get_procname" u64 
    data           "$getprocname" u64 
    data           "$get_procaddr" u64 
    data           "$getprocaddr" u64 
    data           "importdll" u64 
    data           "importlib" u64 
    data           "import"   u64 
    data           "importx"  u64 
    data           "importd"  u64 
    data           "importpath" u64 
    data           "mapmodule" u64 
    data           "unless"   u64 
    data           "try"      u64 
    data           "except"   u64 
    data           "finally"  u64 
    data           "raise"    u64 
    data           "out"      u64 
    data           "new"      u64 
    data           "destroy"  u64 
    data           "global"   u64 
    data           "exportq"  u64 
    data           "export"   u64 
    data           "clang"    u64 
    data           "mlang"    u64 
    data           "windows"  u64 
    data           "callback" u64 
    data           "swap"     u64 
    data           "void"     u64 
    data           "int"      u64 
    data           "word"     u64 
    data           "real"     u64 
    data           "ichar"    u64 
    data           "int8"     u64 
    data           "int16"    u64 
    data           "int32"    u64 
    data           "int64"    u64 
    data           "int128"   u64 
    data           "i8"       u64 
    data           "i16"      u64 
    data           "i32"      u64 
    data           "i64"      u64 
    data           "i128"     u64 
    data           "real32"   u64 
    data           "real64"   u64 
    data           "r32"      u64 
    data           "r64"      u64 
    data           "float32"  u64 
    data           "float64"  u64 
    data           "byte"     u64 
    data           "u8"       u64 
    data           "u16"      u64 
    data           "u32"      u64 
    data           "u64"      u64 
    data           "u128"     u64 
    data           "word8"    u64 
    data           "word16"   u64 
    data           "word32"   u64 
    data           "word64"   u64 
    data           "word128"  u64 
    data           "char"     u64 
    data           "wchar"    u64 
    data           "char64"   u64 
    data           "auto"     u64 
    data           "intm"     u64 
    data           "intp"     u64 
    data           "wordm"    u64 
    data           "wordp"    u64 
    data           "slice"    u64 
    data           "typeof"   u64 
    data           "million"  u64 
    data           "billion"  u64 
    data           "thousand" u64 
    data           "kb"       u64 
    data           "mb"       u64 
    data           "gb"       u64 
    data           "$lineno"  u64 
    data           "$strlineno" u64 
    data           "$filename" u64 
    data           "$modulename" u64 
    data           "$function" u64 
    data           "$date"    u64 
    data           "$time"    u64 
    data           "$version" u64 
    data           "$typename" u64 
    data           "$targetbits" u64 
    data           "$targetsize" u64 
    data           "$targetcode" u64 
    data           "nil"      u64 
    data           "pi"       u64 
    data           "true"     u64 
    data           "false"    u64 
    data           "$"        u64 
    data           "and"      u64 
    data           "or"       u64 
    data           "xor"      u64 
    data           "iand"     u64 
    data           "ior"      u64 
    data           "ixor"     u64 
    data           "in"       u64 
    data           "notin"    u64 
    data           "inrev"    u64 
    data           "rem"      u64 
    data           "min"      u64 
    data           "max"      u64 
    data           "not"      u64 
    data           "inot"     u64 
    data           "istrue"   u64 
    data           "abs"      u64 
    data           "$neg"     u64 
    data           "sqr"      u64 
    data           "sqrt"     u64 
    data           "sign"     u64 
    data           "sin"      u64 
    data           "cos"      u64 
    data           "tan"      u64 
    data           "asin"     u64 
    data           "acos"     u64 
    data           "atan"     u64 
    data           "ln"       u64 
    data           "log"      u64 
    data           "exp"      u64 
    data           "round"    u64 
    data           "floor"    u64 
    data           "ceil"     u64 
    data           "fract"    u64 
    data           "atan2"    u64 
    data           "fmod"     u64 
    data           "len"      u64 
    data           "lwb"      u64 
    data           "upb"      u64 
    data           "bounds"   u64 
    data           "lenstr"   u64 
    data           "bitwidth" u64 
    data           "bytes"    u64 
    data           "minvalue" u64 
    data           "maxvalue" u64 
    data           "typestr"  u64 
    data           "msb"      u64 
    data           "lsb"      u64 
    data           "msbit"    u64 
    data           "lsbit"    u64 
    data           "msw"      u64 
    data           "lsw"      u64 
    data           "odd"      u64 
    data           "even"     u64 
    data           "endif"    u64 
    data           "fi"       u64 
    data           "endcase"  u64 
    data           "esac"     u64 
    data           "enddocase" u64 
    data           "endswitch" u64 
    data           "enddoswitch" u64 
    data           "endfor"   u64 
    data           "od"       u64 
    data           "endproc"  u64 
    data           "endfunction" u64 
    data           "endwhile" u64 
    data           "endto"    u64 
    data           "enddo"    u64 
    data           "endunless" u64 
    data           "endimportmodule" u64 
    data           "endtry"   u64 
    data           "endrecord" u64 
    data           "endassem" u64 
    data           "$caligned" u64 
    data           "empty"    u64 
    data           "clear"    u64 
    data           "$$dummy"  u64 
    istatic        mm_tables.stsymbols: block:1952 
    data           97         u64 
    data           98         u64 
    data           99         u64 
    data           100        u64 
    data           101        u64 
    data           102        u64 
    data           106        u64 
    data           107        u64 
    data           108        u64 
    data           109        u64 
    data           110        u64 
    data           110        u64 
    data           111        u64 
    data           111        u64 
    data           112        u64 
    data           113        u64 
    data           104        u64 
    data           114        u64 
    data           115        u64 
    data           116        u64 
    data           116        u64 
    data           117        u64 
    data           164        u64 
    data           118        u64 
    data           119        u64 
    data           119        u64 
    data           119        u64 
    data           119        u64 
    data           119        u64 
    data           120        u64 
    data           121        u64 
    data           121        u64 
    data           122        u64 
    data           123        u64 
    data           170        u64 
    data           172        u64 
    data           169        u64 
    data           124        u64 
    data           124        u64 
    data           124        u64 
    data           124        u64 
    data           124        u64 
    data           124        u64 
    data           125        u64 
    data           125        u64 
    data           124        u64 
    data           124        u64 
    data           126        u64 
    data           126        u64 
    data           165        u64 
    data           129        u64 
    data           130        u64 
    data           129        u64 
    data           139        u64 
    data           156        u64 
    data           132        u64 
    data           133        u64 
    data           134        u64 
    data           142        u64 
    data           142        u64 
    data           11         u64 
    data           143        u64 
    data           143        u64 
    data           144        u64 
    data           80         u64 
    data           81         u64 
    data           80         u64 
    data           148        u64 
    data           80         u64 
    data           175        u64 
    data           175        u64 
    data           159        u64 
    data           151        u64 
    data           152        u64 
    data           176        u64 
    data           176        u64 
    data           176        u64 
    data           176        u64 
    data           176        u64 
    data           176        u64 
    data           136        u64 
    data           136        u64 
    data           135        u64 
    data           135        u64 
    data           135        u64 
    data           137        u64 
    data           138        u64 
    data           105        u64 
    data           160        u64 
    data           161        u64 
    data           162        u64 
    data           163        u64 
    data           95         u64 
    data           153        u64 
    data           154        u64 
    data           158        u64 
    data           158        u64 
    data           158        u64 
    data           157        u64 
    data           157        u64 
    data           157        u64 
    data           157        u64 
    data           173        u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           96         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           92         u64 
    data           92         u64 
    data           92         u64 
    data           92         u64 
    data           145        u64 
    data           93         u64 
    data           78         u64 
    data           78         u64 
    data           78         u64 
    data           78         u64 
    data           78         u64 
    data           78         u64 
    data           167        u64 
    data           167        u64 
    data           167        u64 
    data           167        u64 
    data           167        u64 
    data           167        u64 
    data           167        u64 
    data           167        u64 
    data           167        u64 
    data           167        u64 
    data           167        u64 
    data           167        u64 
    data           167        u64 
    data           167        u64 
    data           167        u64 
    data           167        u64 
    data           168        u64 
    data           43         u64 
    data           44         u64 
    data           45         u64 
    data           36         u64 
    data           37         u64 
    data           38         u64 
    data           50         u64 
    data           51         u64 
    data           52         u64 
    data           35         u64 
    data           41         u64 
    data           42         u64 
    data           54         u64 
    data           56         u64 
    data           55         u64 
    data           57         u64 
    data           53         u64 
    data           60         u64 
    data           59         u64 
    data           58         u64 
    data           62         u64 
    data           62         u64 
    data           62         u64 
    data           62         u64 
    data           62         u64 
    data           62         u64 
    data           62         u64 
    data           62         u64 
    data           62         u64 
    data           62         u64 
    data           62         u64 
    data           62         u64 
    data           62         u64 
    data           63         u64 
    data           63         u64 
    data           61         u64 
    data           61         u64 
    data           61         u64 
    data           61         u64 
    data           61         u64 
    data           61         u64 
    data           61         u64 
    data           61         u64 
    data           61         u64 
    data           61         u64 
    data           64         u64 
    data           64         u64 
    data           64         u64 
    data           64         u64 
    data           64         u64 
    data           64         u64 
    data           64         u64 
    data           64         u64 
    data           104        u64 
    data           104        u64 
    data           104        u64 
    data           104        u64 
    data           104        u64 
    data           104        u64 
    data           104        u64 
    data           104        u64 
    data           104        u64 
    data           104        u64 
    data           104        u64 
    data           104        u64 
    data           104        u64 
    data           104        u64 
    data           104        u64 
    data           104        u64 
    data           104        u64 
    data           104        u64 
    data           104        u64 
    data           21         u64 
    data           177        u64 
    data           177        u64 
    data           0          u64 
    istatic        mm_tables.stsubcodes: block:1952 
    data           100        u64 
    data           0          u64 
    data           100        u64 
    data           0          u64 
    data           115        u64 
    data           117        u64 
    data           115        u64 
    data           116        u64 
    data           121        u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           1          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           1          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           110        u64 
    data           111        u64 
    data           111        u64 
    data           112        u64 
    data           113        u64 
    data           0          u64 
    data           0          u64 
    data           1          u64 
    data           117        u64 
    data           118        u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           122        u64 
    data           123        u64 
    data           124        u64 
    data           125        u64 
    data           126        u64 
    data           127        u64 
    data           128        u64 
    data           129        u64 
    data           122        u64 
    data           123        u64 
    data           130        u64 
    data           131        u64 
    data           61         u64 
    data           0          u64 
    data           0          u64 
    data           1          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           1          u64 
    data           0          u64 
    data           3          u64 
    data           0          u64 
    data           6          u64 
    data           1          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           30         u64 
    data           30         u64 
    data           31         u64 
    data           31         u64 
    data           32         u64 
    data           32         u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           88         u64 
    data           68         u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           32         u64 
    data           33         u64 
    data           1          u64 
    data           3          u64 
    data           2          u64 
    data           2          u64 
    data           3          u64 
    data           1          u64 
    data           4          u64 
    data           0          u64 
    data           0          u64 
    data           4          u64 
    data           2          u64 
    data           7          u64 
    data           0          u64 
    data           18         u64 
    data           19         u64 
    data           20         u64 
    data           4          u64 
    data           5          u64 
    data           18         u64 
    data           19         u64 
    data           20         u64 
    data           4          u64 
    data           5          u64 
    data           6          u64 
    data           7          u64 
    data           6          u64 
    data           7          u64 
    data           6          u64 
    data           7          u64 
    data           21         u64 
    data           21         u64 
    data           22         u64 
    data           23         u64 
    data           2          u64 
    data           3          u64 
    data           21         u64 
    data           22         u64 
    data           23         u64 
    data           2          u64 
    data           3          u64 
    data           16         u64 
    data           17         u64 
    data           1          u64 
    data           25         u64 
    data           73         u64 
    data           105        u64 
    data           87         u64 
    data           119        u64 
    data           12         u64 
    data           0          u64 
    data           2          u64 
    data           3          u64 
    data           1          u64 
    data           4          u64 
    data           5          u64 
    data           6          u64 
    data           75         u64 
    data           76         u64 
    data           78         u64 
    data           77         u64 
    data           79         u64 
    data           80         u64 
    data           81         u64 
    data           82         u64 
    data           83         u64 
    data           84         u64 
    data           85         u64 
    data           86         u64 
    data           87         u64 
    data           88         u64 
    data           89         u64 
    data           90         u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           113        u64 
    data           114        u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           130        u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           136        u64 
    data           137        u64 
    data           138        u64 
    data           139        u64 
    data           140        u64 
    data           141        u64 
    data           142        u64 
    data           143        u64 
    data           144        u64 
    data           145        u64 
    data           146        u64 
    data           147        u64 
    data           148        u64 
    data           150        u64 
    data           152        u64 
    data           201        u64 
    data           202        u64 
    data           203        u64 
    data           204        u64 
    data           205        u64 
    data           206        u64 
    data           207        u64 
    data           209        u64 
    data           210        u64 
    data           211        u64 
    data           1          u64 
    data           2          u64 
    data           3          u64 
    data           4          u64 
    data           5          u64 
    data           6          u64 
    data           7          u64 
    data           8          u64 
    data           97         u64 
    data           97         u64 
    data           106        u64 
    data           106        u64 
    data           107        u64 
    data           122        u64 
    data           123        u64 
    data           110        u64 
    data           113        u64 
    data           129        u64 
    data           130        u64 
    data           114        u64 
    data           111        u64 
    data           113        u64 
    data           105        u64 
    data           136        u64 
    data           160        u64 
    data           132        u64 
    data           175        u64 
    data           1          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    istatic        mm_tables.d_typestarterset: block:72 
    data           91         u64 
    data           14         u64 
    data           142        u64 
    data           152        u64 
    data           132        u64 
    data           96         u64 
    data           93         u64 
    data           145        u64 
    data           147        u64 
    istatic        mm_tables.intresultlist: block:18 
    data           113        u8 
    data           114        u8 
    data           202        u8 
    data           203        u8 
    data           201        u8 
    data           205        u8 
    data           206        u8 
    data           207        u8 
    data           117        u8 
    data           118        u8 
    data           119        u8 
    data           120        u8 
    data           121        u8 
    data           122        u8 
    data           124        u8 
    data           125        u8 
    data           132        u8 
    data           133        u8 
    istatic        mm_tables.softconvmappings: block:294 
    data           1          u16 
    data           1          u16 
    data           182        u16 
    data           1          u16 
    data           2          u16 
    data           182        u16 
    data           1          u16 
    data           3          u16 
    data           191        u16 
    data           1          u16 
    data           4          u16 
    data           182        u16 
    data           1          u16 
    data           5          u16 
    data           191        u16 
    data           1          u16 
    data           6          u16 
    data           185        u16 
    data           1          u16 
    data           7          u16 
    data           185        u16 
    data           2          u16 
    data           1          u16 
    data           182        u16 
    data           2          u16 
    data           2          u16 
    data           182        u16 
    data           2          u16 
    data           3          u16 
    data           191        u16 
    data           2          u16 
    data           4          u16 
    data           182        u16 
    data           2          u16 
    data           5          u16 
    data           191        u16 
    data           2          u16 
    data           6          u16 
    data           185        u16 
    data           2          u16 
    data           7          u16 
    data           185        u16 
    data           3          u16 
    data           1          u16 
    data           190        u16 
    data           3          u16 
    data           2          u16 
    data           190        u16 
    data           3          u16 
    data           3          u16 
    data           182        u16 
    data           3          u16 
    data           4          u16 
    data           190        u16 
    data           3          u16 
    data           5          u16 
    data           182        u16 
    data           3          u16 
    data           6          u16 
    data           212        u16 
    data           3          u16 
    data           7          u16 
    data           212        u16 
    data           4          u16 
    data           1          u16 
    data           182        u16 
    data           4          u16 
    data           2          u16 
    data           182        u16 
    data           4          u16 
    data           3          u16 
    data           191        u16 
    data           4          u16 
    data           4          u16 
    data           182        u16 
    data           4          u16 
    data           5          u16 
    data           191        u16 
    data           4          u16 
    data           6          u16 
    data           185        u16 
    data           4          u16 
    data           7          u16 
    data           185        u16 
    data           5          u16 
    data           1          u16 
    data           190        u16 
    data           5          u16 
    data           2          u16 
    data           190        u16 
    data           5          u16 
    data           3          u16 
    data           182        u16 
    data           5          u16 
    data           4          u16 
    data           190        u16 
    data           5          u16 
    data           5          u16 
    data           182        u16 
    data           5          u16 
    data           6          u16 
    data           212        u16 
    data           5          u16 
    data           7          u16 
    data           212        u16 
    data           6          u16 
    data           1          u16 
    data           186        u16 
    data           6          u16 
    data           2          u16 
    data           186        u16 
    data           6          u16 
    data           3          u16 
    data           212        u16 
    data           6          u16 
    data           4          u16 
    data           186        u16 
    data           6          u16 
    data           5          u16 
    data           212        u16 
    data           6          u16 
    data           6          u16 
    data           182        u16 
    data           6          u16 
    data           7          u16 
    data           188        u16 
    data           7          u16 
    data           1          u16 
    data           186        u16 
    data           7          u16 
    data           2          u16 
    data           186        u16 
    data           7          u16 
    data           3          u16 
    data           212        u16 
    data           7          u16 
    data           4          u16 
    data           186        u16 
    data           7          u16 
    data           5          u16 
    data           212        u16 
    data           7          u16 
    data           6          u16 
    data           189        u16 
    data           7          u16 
    data           7          u16 
    data           182        u16 
    zstatic        mm_tables.intresult: block:219 
    zstatic        mm_tables.softconvtable: block:392 
    zstatic        pc_decls.optimflag: i64 
    zstatic        pc_decls.rtsproctable: block:48 
    zstatic        pc_decls.npdllnametable: i64 
    zstatic        pc_decls.pdllnametable: block:400 
    zstatic        pc_libpcl.pcstart: u64 
    zstatic        pc_libpcl.pccurr: u64 
    zstatic        pc_libpcl.pcend: u64 
    zstatic        pc_libpcl.pcalloc: i64 
    zstatic        pc_libpcl.pcfixed: u8 
    zstatic        pc_libpcl.pcseqno: i64 
    zstatic        pc_libpcl.pcneedfntable: i64 
    istatic        pc_libpcl.initpcalloc: i64 
    data           65536      u64 
    zstatic        pc_libpcl.sbuffer: block:16 
    istatic        pc_libpcl.dest: u64 
    data           &pc_libpcl.sbuffer u64 
    zstatic        pc_libpcl.destlinestart: i64 
    zstatic        pc_libpcl.labelmap: block:400000 
    zstatic        pc_libpcl.labelno: i64 
    zstatic        pc_libpcl.maxuserlabel: i64 
    zstatic        pc_libpcl.labelnooffset: i64 
    zstatic        pc_libpcl.npcl: i64 
    zstatic        pc_libpcl.labeloffset: block:800000 
    zstatic        pc_libpcl.longstring: u64 
    zstatic        pc_libpcl.longstringlen: i64 
    zstatic        pc_libpcl.errormess: u64 
    zstatic        pc_libpcl.mcldone: i64 
    zstatic        pc_libpcl.stropnd.str: block:512 
    zstatic        pc_libpcl.strpmode.str: block:64 
    zstatic        mlibp.mdebug: i64 
    zstatic        mlibp.npcmalloc: i64 
    zstatic        mlibp.allocupper: block:2408 
    zstatic        mlibp.alloccode: i64 
    zstatic        mlibp.allocbytes: i64 
    istatic        mlibp.fdebug: i64 
    data           0          u64 
    zstatic        mlibp.rfsize: i64 
    zstatic        mlibp.maxmemory: u64 
    zstatic        mlibp.maxalloccode: i64 
    istatic        mlibp.pcm_setup: u8 
    data           0          u8 
    istatic        mlibp.show: i64 
    data           0          u64 
    zstatic        mlibp.allocbase: u64 
    istatic        mlibp.memtotal: i64 
    data           0          u64 
    istatic        mlibp.smallmemtotal: i64 
    data           0          u64 
    istatic        mlibp.smallmemobjs: i64 
    data           0          u64 
    istatic        mlibp.maxmemtotal: i64 
    data           0          u64 
    zstatic        mlibp.memalloctable: block:24 
    zstatic        mlibp.memallocsize: block:12 
    zstatic        mlibp.pcheapstart: u64 
    zstatic        mlibp.pcheapend: u64 
    zstatic        mlibp.pcheapptr: u64 
    zstatic        mlibp.sizeindextable: block:2049 
    zstatic        mlibp.freelist: block:72 
    istatic        mlibp.pmnames: block:48 
    data           "pm_end"   u64 
    data           "pm_option" u64 
    data           "pm_sourcefile" u64 
    data           "pm_libfile" u64 
    data           "pm_colon" u64 
    data           "pm_extra" u64 
    istatic        mlibp.seed: block:16 
    data           2993073034246558322 u64 
    data           1617678968452121188 u64 
    zstatic        mlibp.pcm_newblock.totalheapsize: i64 
    istatic        mlibp.pcm_round.allocbytes: block:36 
    data           0          u32 
    data           16         u32 
    data           32         u32 
    data           64         u32 
    data           128        u32 
    data           256        u32 
    data           512        u32 
    data           1024       u32 
    data           2048       u32 
    zstatic        mlibp.changeext.newfile: block:260 
    zstatic        mlibp.extractpath.str: block:260 
    zstatic        mlibp.extractbasefile.str: block:100 
    istatic        mlibp.nextcmdparam.infile: i64 
    data           0          u64 
    istatic        mlibp.nextcmdparam.filestart: u64 
    data           0          u64 
    istatic        mlibp.nextcmdparam.fileptr: u64 
    data           0          u64 
    istatic        mlibp.nextcmdparam.colonseen: u8 
    data           0          u8 
    zstatic        mlibp.nextcmdparam.str: block:300 
    zstatic        mlibp.readnextfileitem.str: block:256 
    zstatic        mlibp.padstr.str: block:256 
    zstatic        mlibp.chr.str: block:8 
    zstatic        msysp.fmtparam: i64 
    istatic        msysp.needgap: i64 
    data           0          u64 
    istatic        msysp.outdev: i64 
    data           1          u64 
    istatic        msysp.outchan: u64 
    data           0          u64 
    istatic        msysp.fmtstr: u64 
    data           0          u64 
    zstatic        msysp.outchan_stack: block:80 
    zstatic        msysp.outdev_stack: block:80 
    zstatic        msysp.fmtstr_stack: block:80 
    zstatic        msysp.needgap_stack: block:10 
    zstatic        msysp.ptr_stack: block:80 
    istatic        msysp.niostack: i64 
    data           0          u64 
    istatic        msysp.digits: block:16 
    data           48         u8 
    data           49         u8 
    data           50         u8 
    data           51         u8 
    data           52         u8 
    data           53         u8 
    data           54         u8 
    data           55         u8 
    data           56         u8 
    data           57         u8 
    data           65         u8 
    data           66         u8 
    data           67         u8 
    data           68         u8 
    data           69         u8 
    data           70         u8 
    istatic        msysp.defaultfmt: block:16 
    data           0          u8 
    data           0          u8 
    data           10         u8 
    data           0          u8 
    data           32         u8 
    data           102        u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           82         u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    zstatic        msysp.rd_buffer: u64 
    zstatic        msysp.rd_length: i64 
    zstatic        msysp.rd_pos: u64 
    zstatic        msysp.rd_lastpos: u64 
    zstatic        msysp.termchar: i64 
    zstatic        msysp.itemerror: i64 
    zstatic        msysp.nsysparams: i64 
    zstatic        msysp.nenvstrings: i64 
    zstatic        msysp.sysparams: block:1024 
    zstatic        msysp.envstrings: block:1024 
    zstatic        msysp.callbackstack: block:576 
    istatic        msysp.ncallbacks: i64 
    data           0          u64 
    istatic        msysp.mask63: u64 
    data           9223372036854775807 u64 
    istatic        msysp.offset64: r64 
    data           9.2233720368547758e+018 u64 
    istatic        msysp.offset32: r64 
    data           9.2233720368547758e+018 u64 
    zstatic        msysp.m$init.startupinfo: block:128 
    zstatic        msysp.getfmt.fmt: block:16 
    zstatic        msysp.strint.str: block:100 
    zstatic        msysp.strword.str: block:100 
    zstatic        msysp.strreal.str: block:320 
    zstatic        mwindowsp.hconsole: u64 
    zstatic        mwindowsp.hconsolein: u64 
    zstatic        mwindowsp.lastkey: block:20 
    zstatic        mwindowsp.pendkey: block:20 
    zstatic        mwindowsp.keypending: i64 
    istatic        mwindowsp.wndproc_callbackfn: u64 
    data           0          u64 
    istatic        mwindowsp.init_flag: i64 
    data           0          u64 
    zstatic        mwindowsp.os_gxregisterclass.registered: u8 
    istatic        mwindowsp.mainwndproc.count: i64 
    data           0          u64 
    zstatic        mwindowsp.os_gethostname.name: block:300 
    zstatic        mwindowsp.os_gethostname.n: i64 
    zstatic        mwindowsp.os_peek.lastticks: i64 
    istatic        pc_lex.symbolnames: block:176 
    data           "errorsym" u64 
    data           "commasym" u64 
    data           "colonsym" u64 
    data           "dcolonsym" u64 
    data           "lsqsym"   u64 
    data           "rsqsym"   u64 
    data           "addsym"   u64 
    data           "subsym"   u64 
    data           "mulsym"   u64 
    data           "addrsym"  u64 
    data           "eqsym"    u64 
    data           "eolsym"   u64 
    data           "eofsym"   u64 
    data           "labelsym" u64 
    data           "intconstsym" u64 
    data           "realconstsym" u64 
    data           "stringconstsym" u64 
    data           "int128constsym" u64 
    data           "namesym"  u64 
    data           "kopcodesym" u64 
    data           "typesym"  u64 
    data           "kdummysym" u64 
    zstatic        pc_lex.lexhashtable: block:2097152 
    zstatic        pc_lex.nsymbols: i64 
    istatic        pc_lex.lxfileno: i64 
    data           0          u64 
    istatic        pc_lex.lxlineno: i64 
    data           0          u64 
    istatic        pc_lex.nsourcefiles: i64 
    data           0          u64 
    zstatic        pc_lex.lxsymbol: i64 
    zstatic        pc_lex.lxsubcode: i64 
    zstatic        pc_lex.lxvalue: i64 
    zstatic        pc_lex.lxuvalue128: u128 
    zstatic        pc_lex.lxxvalue: r64 
    zstatic        pc_lex.lxsvalue: u64 
    zstatic        pc_lex.lxlength: i64 
    zstatic        pc_lex.lxtruename: u8 
    zstatic        pc_lex.lxhashvalue: i64 
    zstatic        pc_lex.lxsptr: u64 
    zstatic        pc_lex.lxstart: u64 
    zstatic        pc_lex.lxsymptr: u64 
    zstatic        pc_lex.commentmap: block:256 
    istatic        pc_lex.initlex.done: u8 
    data           0          u8 
    zstatic        pc_parse.insideproc: i64 
    istatic        pc_parse.parse_readrts.source: u64 
    data           "!\c\nProcrts rts.$power_i64: i64\c\n    param          rts.$power_i64.a i64 \c\n    param          rts.$power_i64.n i64 \c\n    procentry                 \c\n!-------------------------------------------------\c\n    startmult                 \c\n    push           rts.$power_i64.n i64 \c\n    push           0          i64 \c\n    jumpge         #8         i64 \c\n    push           0          i64 \c\n    resetmult                 \c\n    jump           #9         \c\n#8: \c\n    push           rts.$power_i64.n i64 \c\n    push           0          i64 \c\n    jumpne         #10        i64 \c\n    push           1          i64 \c\n    resetmult                 \c\n    jump           #9         \c\n#10: \c\n    push           rts.$power_i64.n i64 \c\n    push           1          i64 \c\n    jumpne         #11        i64 \c\n    push           rts.$power_i64.a i64 \c\n    resetmult                 \c\n    jump           #9         \c\n#11: \c\n    push           rts.$power_i64.n i64 \c\n    push           0          i64 \c\n    dotindex                  i64 \c\n    jumptrue       #12        i64 \c\n    setargs                   2 0\c\n    push           rts.$power_i64.n i64 \c\n    push           2          i64 \c\n    idiv                      i64 \c\n    push           rts.$power_i64.a i64 \c\n    sqr                       i64 \c\n    callfn         &rts.$power_i64 i64 \c\n    resetmult                 \c\n    jump           #9         \c\n#12: \c\n    setargs                   2 0\c\n    push           rts.$power_i64.n i64 \c\n    push           1          i64 \c\n    sub                       i64 \c\n    push           2          i64 \c\n    idiv                      i64 \c\n    push           rts.$power_i64.a i64 \c\n    sqr                       i64 \c\n    callfn         &rts.$power_i64 i64 \c\n    push           rts.$power_i64.a i64 \c\n    mul                       i64 \c\n    endmult                   \c\n#9: \c\n    setret                    i64 \c\n    jump           #13        \c\n!-------------------------------------------------\c\n#13: \c\n    retfn                     i64 \c\nEnd\c\n\c\n!\c\n    endprogram                \c\n" u64 
    istatic        pc_tables.pstdnames: block:120 
    data           "void"     u64 
    data           "u8"       u64 
    data           "u16"      u64 
    data           "u32"      u64 
    data           "u64"      u64 
    data           "u128"     u64 
    data           "i8"       u64 
    data           "i16"      u64 
    data           "i32"      u64 
    data           "i64"      u64 
    data           "i128"     u64 
    data           "r32"      u64 
    data           "r64"      u64 
    data           "block"    u64 
    data           "$last"    u64 
    istatic        pc_tables.psize: block:15 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           4          u8 
    data           8          u8 
    data           16         u8 
    data           1          u8 
    data           2          u8 
    data           4          u8 
    data           8          u8 
    data           16         u8 
    data           4          u8 
    data           8          u8 
    data           0          u8 
    data           0          u8 
    istatic        pc_tables.psigned: block:15 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    istatic        pc_tables.pfloat: block:15 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    istatic        pc_tables.pcat: block:15 
    data           0          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           1          u8 
    data           5          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           1          u8 
    data           5          u8 
    data           2          u8 
    data           3          u8 
    data           6          u8 
    data           0          u8 
    istatic        pc_tables.catnames: block:56 
    data           "voidcat"  u64 
    data           "d64cat"   u64 
    data           "x32cat"   u64 
    data           "x64cat"   u64 
    data           "shortcat" u64 
    data           "widecat"  u64 
    data           "blockcat" u64 
    istatic        pc_tables.opndnames: block:80 
    data           "no_opnd"  u64 
    data           "mem_opnd" u64 
    data           "memaddr_opnd" u64 
    data           "label_opnd" u64 
    data           "int_opnd" u64 
    data           "real_opnd" u64 
    data           "int128_opnd" u64 
    data           "real32_opnd" u64 
    data           "string_opnd" u64 
    data           "assem_opnd" u64 
    istatic        pc_tables.pclnames: block:1752 
    data           "kzero"    u64 
    data           "knop"     u64 
    data           "kstop"    u64 
    data           "kcomment" u64 
    data           "kimportdll" u64 
    data           "kistatic" u64 
    data           "kzstatic" u64 
    data           "kequiv"   u64 
    data           "kprocdef" u64 
    data           "kprocentry" u64 
    data           "kendproc" u64 
    data           "kendprogram" u64 
    data           "kextproc" u64 
    data           "kextparam" u64 
    data           "kextvariadics" u64 
    data           "kendextproc" u64 
    data           "kthreadedproc" u64 
    data           "kprocrts" u64 
    data           "klocal"   u64 
    data           "kparam"   u64 
    data           "klabel"   u64 
    data           "klabelname" u64 
    data           "kpush"    u64 
    data           "kpop"     u64 
    data           "kstore"   u64 
    data           "kpushnc"  u64 
    data           "kpushlabel" u64 
    data           "kopnd"    u64 
    data           "ktype"    u64 
    data           "kduplstack" u64 
    data           "kswapstack" u64 
    data           "kpushptroff" u64 
    data           "kpopptroff" u64 
    data           "kstoreptroff" u64 
    data           "kpushptr" u64 
    data           "kpopptr"  u64 
    data           "kstoreptr" u64 
    data           "kdotindex" u64 
    data           "kpopdotindex" u64 
    data           "kstoredotindex" u64 
    data           "kdotslice" u64 
    data           "kpopdotslice" u64 
    data           "kstoredotslice" u64 
    data           "kpopstack" u64 
    data           "keval"    u64 
    data           "kcallproc" u64 
    data           "kcallprocptr" u64 
    data           "kretproc" u64 
    data           "kcallfn"  u64 
    data           "kcallfnptr" u64 
    data           "kretfn"   u64 
    data           "kjump"    u64 
    data           "kjumpptr" u64 
    data           "kjumpeq"  u64 
    data           "kjumpne"  u64 
    data           "kjumplt"  u64 
    data           "kjumple"  u64 
    data           "kjumpge"  u64 
    data           "kjumpgt"  u64 
    data           "kjumptrue" u64 
    data           "kjumpfalse" u64 
    data           "kjumpinrange" u64 
    data           "kjumpnotinrange" u64 
    data           "ksetjumpeq" u64 
    data           "ksetjumpeqx" u64 
    data           "ksetjumpne" u64 
    data           "kseteq"   u64 
    data           "ksetne"   u64 
    data           "ksetlt"   u64 
    data           "ksetle"   u64 
    data           "ksetge"   u64 
    data           "ksetgt"   u64 
    data           "kcasejumpeq" u64 
    data           "kselecteq" u64 
    data           "kselectne" u64 
    data           "kselectlt" u64 
    data           "kselectle" u64 
    data           "kselectge" u64 
    data           "kselectgt" u64 
    data           "kselecttrue" u64 
    data           "kto"      u64 
    data           "kforup"   u64 
    data           "kfordown" u64 
    data           "kswap"    u64 
    data           "kmakeslice" u64 
    data           "kswitch"  u64 
    data           "kswitchlabel" u64 
    data           "kendswitch" u64 
    data           "kclear"   u64 
    data           "kcsegment" u64 
    data           "kisegment" u64 
    data           "kzsegment" u64 
    data           "krosegment" u64 
    data           "kdata"    u64 
    data           "kdb"      u64 
    data           "kdw"      u64 
    data           "kdd"      u64 
    data           "kdq"      u64 
    data           "kdstring" u64 
    data           "kdstringz" u64 
    data           "kreserve" u64 
    data           "kassem"   u64 
    data           "kadd"     u64 
    data           "ksub"     u64 
    data           "kmul"     u64 
    data           "kdiv"     u64 
    data           "kidiv"    u64 
    data           "kirem"    u64 
    data           "kiand"    u64 
    data           "kior"     u64 
    data           "kixor"    u64 
    data           "kshl"     u64 
    data           "kshr"     u64 
    data           "kin"      u64 
    data           "knotin"   u64 
    data           "kmin"     u64 
    data           "kmax"     u64 
    data           "keq"      u64 
    data           "kne"      u64 
    data           "klt"      u64 
    data           "kle"      u64 
    data           "kge"      u64 
    data           "kgt"      u64 
    data           "ksame"    u64 
    data           "kandl"    u64 
    data           "korl"     u64 
    data           "kaddrefoff" u64 
    data           "ksubrefoff" u64 
    data           "ksubref"  u64 
    data           "kneg"     u64 
    data           "kabs"     u64 
    data           "kinot"    u64 
    data           "knotl"    u64 
    data           "kistruel" u64 
    data           "ksqr"     u64 
    data           "ksqrt"    u64 
    data           "ksin"     u64 
    data           "kcos"     u64 
    data           "ktan"     u64 
    data           "kasin"    u64 
    data           "kacos"    u64 
    data           "katan"    u64 
    data           "kln"      u64 
    data           "klog"     u64 
    data           "kexp"     u64 
    data           "kround"   u64 
    data           "kfloor"   u64 
    data           "kceil"    u64 
    data           "kfract"   u64 
    data           "ksign"    u64 
    data           "katan2"   u64 
    data           "kpower"   u64 
    data           "kfmod"    u64 
    data           "kincr"    u64 
    data           "kdecr"    u64 
    data           "kincrload" u64 
    data           "kdecrload" u64 
    data           "kloadincr" u64 
    data           "kloaddecr" u64 
    data           "kaddto"   u64 
    data           "ksubto"   u64 
    data           "kmulto"   u64 
    data           "kdivto"   u64 
    data           "kidivto"  u64 
    data           "kiremto"  u64 
    data           "kiandto"  u64 
    data           "kiorto"   u64 
    data           "kixorto"  u64 
    data           "kshlto"   u64 
    data           "kshrto"   u64 
    data           "kminto"   u64 
    data           "kmaxto"   u64 
    data           "kandlto"  u64 
    data           "korlto"   u64 
    data           "kaddrefoffto" u64 
    data           "ksubrefoffto" u64 
    data           "knegto"   u64 
    data           "kabsto"   u64 
    data           "kinotto"  u64 
    data           "knotlto"  u64 
    data           "kistruelto" u64 
    data           "ktypepun" u64 
    data           "ksoftconv" u64 
    data           "kwiden"   u64 
    data           "knarrow"  u64 
    data           "kfloat"   u64 
    data           "kfix"     u64 
    data           "ktruncate" u64 
    data           "kfwiden"  u64 
    data           "kfnarrow" u64 
    data           "ksofttruncw" u64 
    data           "kwidenw"  u64 
    data           "kstartmult" u64 
    data           "kresetmult" u64 
    data           "kendmult" u64 
    data           "ksetret"  u64 
    data           "ksetretmult" u64 
    data           "ksetargs" u64 
    data           "kgetnprocs" u64 
    data           "kgetprocname" u64 
    data           "kgetprocaddr" u64 
    data           "klen"     u64 
    data           "klwb"     u64 
    data           "kupb"     u64 
    data           "kbounds"  u64 
    data           "klenstr"  u64 
    data           "kbitwidth" u64 
    data           "kbytesize" u64 
    data           "kbytes"   u64 
    data           "kminvalue" u64 
    data           "kmaxvalue" u64 
    data           "ktypestr" u64 
    data           "kerror"   u64 
    data           "karraytoslice" u64 
    data           "kichartoslice" u64 
    data           "ksofttruncshort" u64 
    data           "kcharaxtoichar" u64 
    data           "ksliceptr" u64 
    data           "klast"    u64 
    istatic        pc_tables.pclhasopnd: block:219 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           4          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           2          u8 
    data           2          u8 
    data           3          u8 
    data           3          u8 
    data           1          u8 
    data           2          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    istatic        pc_tables.pclhastype: block:219 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    istatic        pc_tables.pclextra: block:219 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           2          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           2          u8 
    data           2          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           2          u8 
    data           2          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    istatic        pc_tables.rtsnames: block:48 
    data           "rts_rts_unimpl" u64 
    data           "rts_power_i64" u64 
    data           "rts_float_u64r64" u64 
    data           "rts_mul_i128" u64 
    data           "rts_div_i128" u64 
    data           "rts_div_u128" u64 
    istatic        mm_start.optionnames: block:392 
    data           "load"     u64 
    data           "fixup"    u64 
    data           "parse"    u64 
    data           "name"     u64 
    data           "type"     u64 
    data           "pcl"      u64 
    data           "asm"      u64 
    data           "c"        u64 
    data           "obj"      u64 
    data           "dll"      u64 
    data           "exe"      u64 
    data           "run"      u64 
    data           "pclexe"   u64 
    data           "asmexe"   u64 
    data           "sys"      u64 
    data           "minsys"   u64 
    data           "nosys"    u64 
    data           "nofile"   u64 
    data           "rts"      u64 
    data           "norts"    u64 
    data           "debug"    u64 
    data           "ma"       u64 
    data           "docs"     u64 
    data           "exp"      u64 
    data           "opt"      u64 
    data           "opt1"     u64 
    data           "opt2"     u64 
    data           "ast1"     u64 
    data           "ast2"     u64 
    data           "ast3"     u64 
    data           "showpcl"  u64 
    data           "showasm"  u64 
    data           "st"       u64 
    data           "pst"      u64 
    data           "stflat"   u64 
    data           "types"    u64 
    data           "overloads" u64 
    data           "ss"       u64 
    data           "time"     u64 
    data           "v"        u64 
    data           "vv"       u64 
    data           "q"        u64 
    data           "h"        u64 
    data           "help"     u64 
    data           "ext"      u64 
    data           "out"      u64 
    data           "outpath"  u64 
    data           "unused"   u64 
    data           "set"      u64 
    zstatic        mm_start.fpclexe: u8 
    zstatic        mm_start.fasmexe: u8 
    zstatic        mm_start.extraparams: block:1024 
    zstatic        mm_start.extravalues: block:1024 
    istatic        mm_start.nextraparams: i64 
    data           0          u64 
    istatic        mm_start.outext: u64 
    data           ""         u64 
    zstatic        mm_start.optionvars: block:200 
    zstatic        mm_start.optionvalues: block:200 
    zstatic        mm_start.noptionvars: i64 
    zstatic        mm_start.startclock: i64 
    zstatic        mm_start.endclock: i64 
    zstatic        mm_start.do_option.outused: u8 
    zstatic        mm_start.do_option.outpathused: u8 
    istatic        mm_start.showhelp.helptext: u64 
    data           "'BB' Mosaic Compiler Generating x64 native code - Windows Version\c\n\c\nWhole-program compiler builds entire program from the lead module\c\ninto a executable file.\c\n\c\n    bb main              # Create main.exe from lead module main.m\c\n    bb main.m            # Same (.m extension is default)\c\n    bb -c main           # Create single-file main.asm intermediate ASM\c\n\c\nOptions:\c\n\c\n    -c  or -asm           # Generate only intermediate ASM file only\c\n    -exe                  # Generate .exe executable file\c\n    -dll                  # Generate .dll library and .exp file\c\n\c\n    -opt                  # Apply simple optimiser\c\n\c\n    -out:file             # Name of output file \c\n\c\n    -ma                   # Create .ma file combining source/support files\c\n    -docs                 # Create .txt with docstrings of exported files (not finished)\c\n    -run                  # For -exe mode only: run resulting executable\c\n\c\n    @file                 # Read options from file\c\n\c\nExample:\c\n\c\n     bb -run prog : abc def\c\n\c\nAny parameters for the new program must follow \" : \" (spaces needed).\c\n" u64 
    zstatic        mm_start.starttimer.tt: i64 
    zstatic        mm_lex.lxstart_stack: block:160 
    zstatic        mm_lex.lxsptr_stack: block:160 
    zstatic        mm_lex.lxfileno_stack: block:160 
    zstatic        mm_lex.lxlineno_stack: block:160 
    zstatic        mm_lex.isfile_stack: block:20 
    istatic        mm_lex.sourcelevel: i64 
    data           0          u64 
    zstatic        mm_lex.lxstart: u64 
    zstatic        mm_lex.lxsptr: u64 
    zstatic        mm_lex.lxifcond: i64 
    zstatic        mm_lex.longsuffix: i64 
    zstatic        mm_lex.lxfileno: i64 
    zstatic        mm_lex.hashtable: block:4194304 
    zstatic        mm_lex.hashkeys: block:262144 
    zstatic        mm_lex.hashtablelast: u64 
    zstatic        mm_lex.astringlength: i64 
    istatic        mm_lex.prescanmode: u8 
    data           0          u8 
    istatic        mm_lex.maxnumlist: block:128 
    data           ""         u64 
    data           "1111111111111111111111111111111111111111111111111111111111111111" u64 
    data           "11112220022122120101211020120210210211220" u64 
    data           "33333333333333333333333333333333" u64 
    data           "2214220303114400424121122430" u64 
    data           "3520522010102100444244423" u64 
    data           "45012021522523134134601" u64 
    data           "1777777777777777777777" u64 
    data           "145808576354216723756" u64 
    data           "18446744073709551615" u64 
    data           "335500516A429071284" u64 
    data           "839365134A2A240713" u64 
    data           "219505A9511A867B72" u64 
    data           "8681049ADB03DB171" u64 
    data           "2C1D56B648C6CD110" u64 
    data           "FFFFFFFFFFFFFFFF" u64 
    zstatic        mm_lex.maxnumlen: block:128 
    zstatic        mm_lex.lexsetup.n: i64 
    istatic        mm_support.bytemasks: block:8 
    data           1          u8 
    data           2          u8 
    data           4          u8 
    data           8          u8 
    data           16         u8 
    data           32         u8 
    data           64         u8 
    data           128        u8 
    zstatic        mm_support.findfile.filespec: block:300 
    istatic        mm_lib.autotypeno: i64 
    data           0          u64 
    istatic        mm_lib.nextavindex: i64 
    data           0          u64 
    istatic        mm_lib.nextsvindex: i64 
    data           0          u64 
    zstatic        mm_lib.exprstrvar: block:16 
    istatic        mm_lib.exprstr: u64 
    data           &mm_lib.exprstrvar u64 
    istatic        mm_lib.unitheapptr: u64 
    data           0          u64 
    istatic        mm_lib.remainingunits: i64 
    data           0          u64 
    zstatic        mm_lib.sbuffer: block:16 
    istatic        mm_lib.dest: u64 
    data           &mm_lib.sbuffer u64 
    zstatic        mm_lib.framevarname: u64 
    zstatic        mm_lib.nextautotype.str: block:32 
    zstatic        mm_lib.getdottedname.str: block:256 
    zstatic        mm_lib.strmode.str: block:4096 
    zstatic        mm_lib.strmode2.str: block:4096 
    zstatic        mm_diags.currlineno: i64 
    zstatic        mm_diags.currfileno: i64 
    zstatic        mm_diags.sbuffer: block:16 
    istatic        mm_diags.dest: u64 
    data           &mm_diags.sbuffer u64 
    zstatic        mm_diags.destlinestart: i64 
    istatic        mm_diags.printunit.cmpchain: i64 
    data           0          u64 
    zstatic        mm_diags.getprefix.str: block:1024 
    zstatic        mm_diags.getlineinfok.str: block:40 
    istatic        mm_diags.printmodelist.tab: u64 
    data           "\t"       u64 
    istatic        pci_mcl.valtypenames: block:80 
    data           "no_val"   u64 
    data           "intimm_val" u64 
    data           "realimm_val" u64 
    data           "realmem_val" u64 
    data           "stringimm_val" u64 
    data           "def_val"  u64 
    data           "temp_val" u64 
    data           "label_val" u64 
    data           "name_val" u64 
    data           "syscall_val" u64 
    istatic        pci_mcl.mclnames: block:1184 
    data           "m_procstart" u64 
    data           "m_procend" u64 
    data           "m_comment" u64 
    data           "m_blank"  u64 
    data           "m_deleted" u64 
    data           "m_labelname" u64 
    data           "m_define" u64 
    data           "m_definereg" u64 
    data           "m_label"  u64 
    data           "m_nop"    u64 
    data           "m_param"  u64 
    data           "m_mov"    u64 
    data           "m_push"   u64 
    data           "m_pop"    u64 
    data           "m_lea"    u64 
    data           "m_cmovcc" u64 
    data           "m_movd"   u64 
    data           "m_movq"   u64 
    data           "m_movsx"  u64 
    data           "m_movzx"  u64 
    data           "m_movsxd" u64 
    data           "m_call"   u64 
    data           "m_ret"    u64 
    data           "m_leave"  u64 
    data           "m_retn"   u64 
    data           "m_jmp"    u64 
    data           "m_jmpcc"  u64 
    data           "m_xchg"   u64 
    data           "m_add"    u64 
    data           "m_sub"    u64 
    data           "m_adc"    u64 
    data           "m_sbb"    u64 
    data           "m_imul"   u64 
    data           "m_mul"    u64 
    data           "m_imul2"  u64 
    data           "m_imul3"  u64 
    data           "m_idiv"   u64 
    data           "m_div"    u64 
    data           "m_andx"   u64 
    data           "m_orx"    u64 
    data           "m_xorx"   u64 
    data           "m_test"   u64 
    data           "m_cmp"    u64 
    data           "m_shl"    u64 
    data           "m_sar"    u64 
    data           "m_shr"    u64 
    data           "m_rol"    u64 
    data           "m_ror"    u64 
    data           "m_rcl"    u64 
    data           "m_rcr"    u64 
    data           "m_neg"    u64 
    data           "m_notx"   u64 
    data           "m_inc"    u64 
    data           "m_dec"    u64 
    data           "m_cbw"    u64 
    data           "m_cwd"    u64 
    data           "m_cdq"    u64 
    data           "m_cqo"    u64 
    data           "m_setcc"  u64 
    data           "m_bsf"    u64 
    data           "m_bsr"    u64 
    data           "m_sqrtsd" u64 
    data           "m_sqrtss" u64 
    data           "m_addss"  u64 
    data           "m_subss"  u64 
    data           "m_mulss"  u64 
    data           "m_divss"  u64 
    data           "m_addsd"  u64 
    data           "m_subsd"  u64 
    data           "m_mulsd"  u64 
    data           "m_divsd"  u64 
    data           "m_comiss" u64 
    data           "m_comisd" u64 
    data           "m_xorpd"  u64 
    data           "m_xorps"  u64 
    data           "m_andpd"  u64 
    data           "m_andps"  u64 
    data           "m_pxor"   u64 
    data           "m_pand"   u64 
    data           "m_cvtss2si" u64 
    data           "m_cvtsd2si" u64 
    data           "m_cvttss2si" u64 
    data           "m_cvttsd2si" u64 
    data           "m_cvtsi2ss" u64 
    data           "m_cvtsi2sd" u64 
    data           "m_cvtsd2ss" u64 
    data           "m_cvtss2sd" u64 
    data           "m_movdqa" u64 
    data           "m_movdqu" u64 
    data           "m_pcmpistri" u64 
    data           "m_pcmpistrm" u64 
    data           "m_fld"    u64 
    data           "m_fst"    u64 
    data           "m_fstp"   u64 
    data           "m_fild"   u64 
    data           "m_fist"   u64 
    data           "m_fistp"  u64 
    data           "m_fadd"   u64 
    data           "m_fsub"   u64 
    data           "m_fmul"   u64 
    data           "m_fdiv"   u64 
    data           "m_fsqrt"  u64 
    data           "m_fsin"   u64 
    data           "m_fcos"   u64 
    data           "m_fsincos" u64 
    data           "m_fptan"  u64 
    data           "m_fpatan" u64 
    data           "m_fabs"   u64 
    data           "m_fchs"   u64 
    data           "m_minss"  u64 
    data           "m_maxss"  u64 
    data           "m_minsd"  u64 
    data           "m_maxsd"  u64 
    data           "m_db"     u64 
    data           "m_dw"     u64 
    data           "m_dd"     u64 
    data           "m_dq"     u64 
    data           "m_ddoffset" u64 
    data           "m_segment" u64 
    data           "m_isegment" u64 
    data           "m_zsegment" u64 
    data           "m_csegment" u64 
    data           "m_align"  u64 
    data           "m_resb"   u64 
    data           "m_resw"   u64 
    data           "m_resd"   u64 
    data           "m_resq"   u64 
    data           "m_xlat"   u64 
    data           "m_loopnz" u64 
    data           "m_loopz"  u64 
    data           "m_loopcx" u64 
    data           "m_jecxz"  u64 
    data           "m_jrcxz"  u64 
    data           "m_cmpsb"  u64 
    data           "m_cmpsw"  u64 
    data           "m_cmpsd"  u64 
    data           "m_cmpsq"  u64 
    data           "m_rdtsc"  u64 
    data           "m_popcnt" u64 
    data           "m_finit"  u64 
    data           "m_fldz"   u64 
    data           "m_fld1"   u64 
    data           "m_fldpi"  u64 
    data           "m_fld2t"  u64 
    data           "m_fld2e"  u64 
    data           "m_fldlg2" u64 
    data           "m_fldln2" u64 
    data           "m_halt"   u64 
    istatic        pci_mcl.mclnopnds: block:148 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           1          u8 
    data           1          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           1          u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           1          u8 
    data           1          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           3          u8 
    data           3          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           2          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    istatic        pci_mcl.mclcodes: block:148 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           144        u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           232        u8 
    data           195        u8 
    data           201        u8 
    data           0          u8 
    data           233        u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           5          u8 
    data           2          u8 
    data           3          u8 
    data           5          u8 
    data           4          u8 
    data           0          u8 
    data           0          u8 
    data           7          u8 
    data           6          u8 
    data           4          u8 
    data           1          u8 
    data           6          u8 
    data           0          u8 
    data           7          u8 
    data           4          u8 
    data           7          u8 
    data           5          u8 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           3          u8 
    data           2          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           188        u8 
    data           189        u8 
    data           81         u8 
    data           81         u8 
    data           88         u8 
    data           92         u8 
    data           89         u8 
    data           94         u8 
    data           88         u8 
    data           92         u8 
    data           89         u8 
    data           94         u8 
    data           0          u8 
    data           0          u8 
    data           87         u8 
    data           87         u8 
    data           84         u8 
    data           84         u8 
    data           239        u8 
    data           219        u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           102        u8 
    data           243        u8 
    data           99         u8 
    data           98         u8 
    data           0          u8 
    data           2          u8 
    data           3          u8 
    data           0          u8 
    data           2          u8 
    data           3          u8 
    data           193        u8 
    data           233        u8 
    data           201        u8 
    data           249        u8 
    data           250        u8 
    data           254        u8 
    data           255        u8 
    data           251        u8 
    data           242        u8 
    data           243        u8 
    data           225        u8 
    data           224        u8 
    data           93         u8 
    data           95         u8 
    data           93         u8 
    data           95         u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           4          u8 
    data           8          u8 
    data           215        u8 
    data           224        u8 
    data           225        u8 
    data           226        u8 
    data           227        u8 
    data           227        u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           49         u8 
    data           0          u8 
    data           0          u8 
    data           238        u8 
    data           232        u8 
    data           235        u8 
    data           233        u8 
    data           234        u8 
    data           236        u8 
    data           237        u8 
    data           244        u8 
    istatic        pci_mcl.regnames: block:168 
    data           "rnone"    u64 
    data           "r0"       u64 
    data           "r1"       u64 
    data           "r2"       u64 
    data           "r3"       u64 
    data           "r4"       u64 
    data           "r5"       u64 
    data           "r6"       u64 
    data           "r7"       u64 
    data           "r8"       u64 
    data           "r9"       u64 
    data           "r10"      u64 
    data           "r11"      u64 
    data           "r12"      u64 
    data           "r13"      u64 
    data           "r14"      u64 
    data           "r15"      u64 
    data           "r16"      u64 
    data           "r17"      u64 
    data           "r18"      u64 
    data           "r19"      u64 
    istatic        pci_mcl.regcodes: block:21 
    data           0          u8 
    data           0          u8 
    data           10         u8 
    data           11         u8 
    data           7          u8 
    data           3          u8 
    data           6          u8 
    data           12         u8 
    data           13         u8 
    data           14         u8 
    data           15         u8 
    data           1          u8 
    data           2          u8 
    data           8          u8 
    data           9          u8 
    data           5          u8 
    data           4          u8 
    data           4          u8 
    data           7          u8 
    data           5          u8 
    data           6          u8 
    istatic        pci_mcl.condnames: block:160 
    data           "ov"       u64 
    data           "nov"      u64 
    data           "ltu"      u64 
    data           "geu"      u64 
    data           "eq"       u64 
    data           "ne"       u64 
    data           "leu"      u64 
    data           "gtu"      u64 
    data           "s"        u64 
    data           "ns"       u64 
    data           "p"        u64 
    data           "np"       u64 
    data           "lt"       u64 
    data           "ge"       u64 
    data           "le"       u64 
    data           "gt"       u64 
    data           "flt"      u64 
    data           "fge"      u64 
    data           "fle"      u64 
    data           "fgt"      u64 
    istatic        pci_mcl.asmcondnames: block:160 
    data           "o"        u64 
    data           "no"       u64 
    data           "b"        u64 
    data           "ae"       u64 
    data           "z"        u64 
    data           "nz"       u64 
    data           "be"       u64 
    data           "a"        u64 
    data           "s"        u64 
    data           "ns"       u64 
    data           "p"        u64 
    data           "np"       u64 
    data           "l"        u64 
    data           "ge"       u64 
    data           "le"       u64 
    data           "g"        u64 
    data           "b"        u64 
    data           "ae"       u64 
    data           "be"       u64 
    data           "a"        u64 
    istatic        pci_mcl.asmrevcond: block:160 
    data           1          u64 
    data           0          u64 
    data           3          u64 
    data           2          u64 
    data           5          u64 
    data           4          u64 
    data           7          u64 
    data           6          u64 
    data           9          u64 
    data           8          u64 
    data           11         u64 
    data           10         u64 
    data           13         u64 
    data           12         u64 
    data           15         u64 
    data           14         u64 
    data           17         u64 
    data           16         u64 
    data           19         u64 
    data           18         u64 
    istatic        pci_mcl.dregnames: block:1088 
    data           "d0"       u64 
    data           "d1"       u64 
    data           "d2"       u64 
    data           "d3"       u64 
    data           "d4"       u64 
    data           "d5"       u64 
    data           "d6"       u64 
    data           "d7"       u64 
    data           "d8"       u64 
    data           "d9"       u64 
    data           "d10"      u64 
    data           "d11"      u64 
    data           "d12"      u64 
    data           "d13"      u64 
    data           "d14"      u64 
    data           "d15"      u64 
    data           "a0"       u64 
    data           "a1"       u64 
    data           "a2"       u64 
    data           "a3"       u64 
    data           "a4"       u64 
    data           "a5"       u64 
    data           "a6"       u64 
    data           "a7"       u64 
    data           "a8"       u64 
    data           "a9"       u64 
    data           "a10"      u64 
    data           "a11"      u64 
    data           "a12"      u64 
    data           "a13"      u64 
    data           "a14"      u64 
    data           "a15"      u64 
    data           "w0"       u64 
    data           "w1"       u64 
    data           "w2"       u64 
    data           "w3"       u64 
    data           "w4"       u64 
    data           "w5"       u64 
    data           "w6"       u64 
    data           "w7"       u64 
    data           "w8"       u64 
    data           "w9"       u64 
    data           "w10"      u64 
    data           "w11"      u64 
    data           "w12"      u64 
    data           "w13"      u64 
    data           "w14"      u64 
    data           "w15"      u64 
    data           "b0"       u64 
    data           "b1"       u64 
    data           "b2"       u64 
    data           "b3"       u64 
    data           "b4"       u64 
    data           "b5"       u64 
    data           "b6"       u64 
    data           "b7"       u64 
    data           "b8"       u64 
    data           "b9"       u64 
    data           "b10"      u64 
    data           "b11"      u64 
    data           "b12"      u64 
    data           "b13"      u64 
    data           "b14"      u64 
    data           "b15"      u64 
    data           "b16"      u64 
    data           "b17"      u64 
    data           "b18"      u64 
    data           "b19"      u64 
    data           "rax"      u64 
    data           "rbx"      u64 
    data           "rcx"      u64 
    data           "rdx"      u64 
    data           "rsi"      u64 
    data           "rdi"      u64 
    data           "rbp"      u64 
    data           "rsp"      u64 
    data           "r8"       u64 
    data           "r9"       u64 
    data           "r10"      u64 
    data           "r11"      u64 
    data           "r12"      u64 
    data           "r13"      u64 
    data           "r14"      u64 
    data           "r15"      u64 
    data           "eax"      u64 
    data           "ebx"      u64 
    data           "ecx"      u64 
    data           "edx"      u64 
    data           "esi"      u64 
    data           "edi"      u64 
    data           "ebp"      u64 
    data           "esp"      u64 
    data           "r8d"      u64 
    data           "r9d"      u64 
    data           "r10d"     u64 
    data           "r11d"     u64 
    data           "r12d"     u64 
    data           "r13d"     u64 
    data           "r14d"     u64 
    data           "r15d"     u64 
    data           "ax"       u64 
    data           "bx"       u64 
    data           "cx"       u64 
    data           "dx"       u64 
    data           "si"       u64 
    data           "di"       u64 
    data           "bp"       u64 
    data           "sp"       u64 
    data           "r8w"      u64 
    data           "r9w"      u64 
    data           "r10w"     u64 
    data           "r11w"     u64 
    data           "r12w"     u64 
    data           "r13w"     u64 
    data           "r14w"     u64 
    data           "r15w"     u64 
    data           "al"       u64 
    data           "bl"       u64 
    data           "cl"       u64 
    data           "dl"       u64 
    data           "ah"       u64 
    data           "bh"       u64 
    data           "ch"       u64 
    data           "dh"       u64 
    data           "sil"      u64 
    data           "dil"      u64 
    data           "bpl"      u64 
    data           "spl"      u64 
    data           "r8b"      u64 
    data           "r9b"      u64 
    data           "r10b"     u64 
    data           "r11b"     u64 
    data           "r12b"     u64 
    data           "r13b"     u64 
    data           "r14b"     u64 
    data           "r15b"     u64 
    istatic        pci_mcl.regsizes: block:136 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    istatic        pci_mcl.regindices: block:136 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           4          u8 
    data           5          u8 
    data           6          u8 
    data           7          u8 
    data           8          u8 
    data           9          u8 
    data           10         u8 
    data           11         u8 
    data           12         u8 
    data           13         u8 
    data           14         u8 
    data           15         u8 
    data           16         u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           4          u8 
    data           5          u8 
    data           6          u8 
    data           7          u8 
    data           8          u8 
    data           9          u8 
    data           10         u8 
    data           11         u8 
    data           12         u8 
    data           13         u8 
    data           14         u8 
    data           15         u8 
    data           16         u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           4          u8 
    data           5          u8 
    data           6          u8 
    data           7          u8 
    data           8          u8 
    data           9          u8 
    data           10         u8 
    data           11         u8 
    data           12         u8 
    data           13         u8 
    data           14         u8 
    data           15         u8 
    data           16         u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           4          u8 
    data           5          u8 
    data           6          u8 
    data           7          u8 
    data           8          u8 
    data           9          u8 
    data           10         u8 
    data           11         u8 
    data           12         u8 
    data           13         u8 
    data           14         u8 
    data           15         u8 
    data           16         u8 
    data           17         u8 
    data           18         u8 
    data           19         u8 
    data           20         u8 
    data           1          u8 
    data           5          u8 
    data           11         u8 
    data           12         u8 
    data           6          u8 
    data           4          u8 
    data           15         u8 
    data           16         u8 
    data           13         u8 
    data           14         u8 
    data           2          u8 
    data           3          u8 
    data           7          u8 
    data           8          u8 
    data           9          u8 
    data           10         u8 
    data           1          u8 
    data           5          u8 
    data           11         u8 
    data           12         u8 
    data           6          u8 
    data           4          u8 
    data           15         u8 
    data           16         u8 
    data           13         u8 
    data           14         u8 
    data           2          u8 
    data           3          u8 
    data           7          u8 
    data           8          u8 
    data           9          u8 
    data           10         u8 
    data           1          u8 
    data           5          u8 
    data           11         u8 
    data           12         u8 
    data           6          u8 
    data           4          u8 
    data           15         u8 
    data           16         u8 
    data           13         u8 
    data           14         u8 
    data           2          u8 
    data           3          u8 
    data           7          u8 
    data           8          u8 
    data           9          u8 
    data           10         u8 
    data           1          u8 
    data           5          u8 
    data           11         u8 
    data           12         u8 
    data           17         u8 
    data           18         u8 
    data           19         u8 
    data           20         u8 
    data           6          u8 
    data           4          u8 
    data           15         u8 
    data           16         u8 
    data           13         u8 
    data           14         u8 
    data           2          u8 
    data           3          u8 
    data           7          u8 
    data           8          u8 
    data           9          u8 
    data           10         u8 
    istatic        pci_mcl.xmmregnames: block:128 
    data           "xmm0"     u64 
    data           "xmm1"     u64 
    data           "xmm2"     u64 
    data           "xmm3"     u64 
    data           "xmm4"     u64 
    data           "xmm5"     u64 
    data           "xmm6"     u64 
    data           "xmm7"     u64 
    data           "xmm8"     u64 
    data           "xmm9"     u64 
    data           "xmm10"    u64 
    data           "xmm11"    u64 
    data           "xmm12"    u64 
    data           "xmm13"    u64 
    data           "xmm14"    u64 
    data           "xmm15"    u64 
    istatic        pci_mcl.fregnames: block:64 
    data           "st0"      u64 
    data           "st1"      u64 
    data           "st2"      u64 
    data           "st3"      u64 
    data           "st4"      u64 
    data           "st5"      u64 
    data           "st6"      u64 
    data           "st7"      u64 
    istatic        pci_mcl.mregnames: block:64 
    data           "mmx0"     u64 
    data           "mmx1"     u64 
    data           "mmx2"     u64 
    data           "mmx3"     u64 
    data           "mmx4"     u64 
    data           "mmx5"     u64 
    data           "mmx6"     u64 
    data           "mmx7"     u64 
    istatic        pci_mcl.jmpccnames: block:128 
    data           "jo"       u64 
    data           "jno"      u64 
    data           "jb"       u64 
    data           "jae"      u64 
    data           "jz"       u64 
    data           "jnz"      u64 
    data           "jbe"      u64 
    data           "ja"       u64 
    data           "js"       u64 
    data           "jns"      u64 
    data           "jp"       u64 
    data           "jnp"      u64 
    data           "jl"       u64 
    data           "jge"      u64 
    data           "jle"      u64 
    data           "jg"       u64 
    istatic        pci_mcl.jmpcccodes: block:16 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           4          u8 
    data           5          u8 
    data           6          u8 
    data           7          u8 
    data           8          u8 
    data           9          u8 
    data           10         u8 
    data           11         u8 
    data           12         u8 
    data           13         u8 
    data           14         u8 
    data           15         u8 
    istatic        pci_mcl.setccnames: block:128 
    data           "seto"     u64 
    data           "setno"    u64 
    data           "setb"     u64 
    data           "setae"    u64 
    data           "setz"     u64 
    data           "setnz"    u64 
    data           "setbe"    u64 
    data           "seta"     u64 
    data           "sets"     u64 
    data           "setns"    u64 
    data           "setp"     u64 
    data           "setnp"    u64 
    data           "setl"     u64 
    data           "setge"    u64 
    data           "setle"    u64 
    data           "setg"     u64 
    istatic        pci_mcl.setcccodes: block:16 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           4          u8 
    data           5          u8 
    data           6          u8 
    data           7          u8 
    data           8          u8 
    data           9          u8 
    data           10         u8 
    data           11         u8 
    data           12         u8 
    data           13         u8 
    data           14         u8 
    data           15         u8 
    istatic        pci_mcl.cmovccnames: block:128 
    data           "cmovo"    u64 
    data           "cmovno"   u64 
    data           "cmovb"    u64 
    data           "cmovae"   u64 
    data           "cmovz"    u64 
    data           "cmovnz"   u64 
    data           "cmovbe"   u64 
    data           "cmova"    u64 
    data           "cmovs"    u64 
    data           "cmovns"   u64 
    data           "cmovp"    u64 
    data           "cmovnp"   u64 
    data           "cmovl"    u64 
    data           "cmovge"   u64 
    data           "cmovle"   u64 
    data           "cmovg"    u64 
    istatic        pci_mcl.cmovcccodes: block:16 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           4          u8 
    data           5          u8 
    data           6          u8 
    data           7          u8 
    data           8          u8 
    data           9          u8 
    data           10         u8 
    data           11         u8 
    data           12         u8 
    data           13         u8 
    data           14         u8 
    data           15         u8 
    istatic        pci_mcl.segmentnames: block:48 
    data           "no_seg"   u64 
    data           "code_seg" u64 
    data           "idata_seg" u64 
    data           "zdata_seg" u64 
    data           "rodata_seg" u64 
    data           "impdata_seg" u64 
    istatic        pci_mcl.reftypenames: block:24 
    data           "extern_ref" u64 
    data           "fwd_ref"  u64 
    data           "back_ref" u64 
    istatic        pci_mcl.opndnames_ma: block:56 
    data           "a_none"   u64 
    data           "a_reg"    u64 
    data           "a_imm"    u64 
    data           "a_mem"    u64 
    data           "a_cond"   u64 
    data           "a_xreg"   u64 
    data           "a_wreg"   u64 
    zstatic        pci_mcl.mlabelno: i64 
    zstatic        pci_mcl.pclopndstack: block:3150 
    zstatic        pci_mcl.noperands: i64 
    zstatic        pci_mcl.mstackdepth: i64 
    zstatic        pci_mcl.pclstack: u64 
    zstatic        pci_mcl.pclstackzero: block:15 
    istatic        pci_mcl.locnames: block:72 
    data           "no_loc"   u64 
    data           "reg_loc"  u64 
    data           "xreg_loc" u64 
    data           "stack_loc" u64 
    data           "imm_loc"  u64 
    data           "mem_loc"  u64 
    data           "memhigh_loc" u64 
    data           "regvar_loc" u64 
    data           "xregvar_loc" u64 
    istatic        pci_mcl.fmtnames: block:160 
    data           "nofmt_void" u64 
    data           "reg_d64"  u64 
    data           "xreg_x64" u64 
    data           "xreg_x32" u64 
    data           "stack_d64" u64 
    data           "stack_x64" u64 
    data           "stack_x32" u64 
    data           "imm_d64"  u64 
    data           "imm_x64"  u64 
    data           "imm_x32"  u64 
    data           "imm_str"  u64 
    data           "imm_memaddr" u64 
    data           "imm_label" u64 
    data           "imm_labaddr" u64 
    data           "mem_d64"  u64 
    data           "mem_x64"  u64 
    data           "mem_x32"  u64 
    data           "memhigh_d64" u64 
    data           "regvar_d64" u64 
    data           "xregvar_x64" u64 
    istatic        pci_mcl.loccodes: block:20 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           2          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           5          u8 
    data           5          u8 
    data           5          u8 
    data           5          u8 
    data           7          u8 
    data           8          u8 
    istatic        pci_mcl.floatloc: block:20 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    istatic        pci_mcl.loadfmt: block:20 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           1          u8 
    data           1          u8 
    data           2          u8 
    istatic        pci_mcl.pushfmt: block:20 
    data           0          u8 
    data           4          u8 
    data           5          u8 
    data           6          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           4          u8 
    data           5          u8 
    data           6          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           5          u8 
    data           6          u8 
    data           4          u8 
    data           4          u8 
    data           5          u8 
    zstatic        pci_mcl.regset: block:16 
    zstatic        pci_mcl.xregset: block:16 
    zstatic        pci_mcl.isregvar: block:16 
    zstatic        pci_mcl.isxregvar: block:16 
    zstatic        pci_mcl.inf_proccalls: i64 
    zstatic        pci_mcl.inf_proclocals: i64 
    zstatic        pci_mcl.inf_procxlocals: i64 
    zstatic        pci_mcl.inf_leafproc: i64 
    zstatic        pci_mcl.inf_highreg: i64 
    zstatic        pci_mcl.inf_highxreg: i64 
    zstatic        pci_mcl.inf_maxargs: i64 
    zstatic        pci_mcl.inf_assem: i64 
    zstatic        pci_mcl.inf_r10used: i64 
    zstatic        pci_mcl.inf_r11used: i64 
    zstatic        pci_mcl.inf_r13used: i64 
    zstatic        pci_mcl.dsaveregs: block:128 
    zstatic        pci_mcl.xsaveregs: block:128 
    zstatic        pci_mcl.ndsaveregs: i64 
    zstatic        pci_mcl.ndsavepush: i64 
    zstatic        pci_mcl.nxsaveregs: i64 
    zstatic        pci_mcl.dsaveoffset: i64 
    zstatic        pci_mcl.xsaveoffset: i64 
    zstatic        pci_mcl.needstackframe: i64 
    zstatic        pci_mcl.framebytes: i64 
    zstatic        pci_mcl.needshadow48: i64 
    zstatic        pci_mcl.needshadow32: i64 
    zstatic        pci_mcl.noxorclear: u8 
    istatic        pci_mcl.xregnames: block:136 
    data           "xnone"    u64 
    data           "xr0"      u64 
    data           "xr1"      u64 
    data           "xr2"      u64 
    data           "xr3"      u64 
    data           "xr4"      u64 
    data           "xr5"      u64 
    data           "xr6"      u64 
    data           "xr7"      u64 
    data           "xr8"      u64 
    data           "xr9"      u64 
    data           "xr10"     u64 
    data           "xr11"     u64 
    data           "xr12"     u64 
    data           "xr13"     u64 
    data           "xr14"     u64 
    data           "xr15"     u64 
    zstatic        pci_mcl.procdefpcl: u64 
    zstatic        pci_mcl.procdef: u64 
    zstatic        pci_mcl.callshadow: block:128 
    zstatic        pci_mcl.callslots: block:128 
    zstatic        pci_mcl.callalign: block:16 
    zstatic        pci_mcl.callargs: block:16 
    zstatic        pci_mcl.callnvars: block:16 
    zstatic        pci_mcl.ncalldepth: i64 
    zstatic        pci_mcl.paramdefs: block:256 
    zstatic        pci_mcl.localdefs: block:2048 
    zstatic        pci_mcl.nparams: i64 
    zstatic        pci_mcl.nlocals: i64 
    zstatic        pci_mcl.retmode: i64 
    zstatic        pci_mcl.passno: i64 
    zstatic        pci_mcl.sa_nargs: i64 
    istatic        pci_mcl.multregs: block:48 
    data           1          u64 
    data           2          u64 
    data           3          u64 
    data           11         u64 
    data           12         u64 
    data           13         u64 
    istatic        pci_mcl.multxregs: block:48 
    data           1          u64 
    data           2          u64 
    data           3          u64 
    data           4          u64 
    data           5          u64 
    data           6          u64 
    zstatic        pci_mcl.paramoffset: i64 
    zstatic        pci_mcl.lababs32: i64 
    zstatic        pci_mcl.lababs64: i64 
    zstatic        pci_mcl.labneg32: i64 
    zstatic        pci_mcl.labneg64: i64 
    zstatic        pci_mcl.labmask63: i64 
    zstatic        pci_mcl.laboffset64: i64 
    zstatic        pci_mcl.labzero: i64 
    istatic        pci_mcl.kk0used: i64 
    data           0          u64 
    zstatic        pci_mcl.stackaligned: i64 
    zstatic        pci_mcl.mccode: u64 
    zstatic        pci_mcl.mccodex: u64 
    istatic        pci_mcl.currsegment: i64 
    data           0          u64 
    istatic        pci_mcl.currzdataalign: i64 
    data           0          u64 
    istatic        pci_mcl.curridataalign: i64 
    data           0          u64 
    zstatic        pci_mcl.frameoffset: i64 
    zstatic        pci_mcl.isthreadedproc: i64 
    zstatic        pci_mcl.iscallbackproc: i64 
    zstatic        pci_mcl.structretoffset: i64 
    zstatic        pci_mcl.stacksetinstr: u64 
    zstatic        pci_mcl.currblocksize: i64 
    zstatic        pci_mcl.allasmstr: u64 
    zstatic        pci_mcl.allasmstrlen: i64 
    zstatic        pci_mcl.dstackopnd: u64 
    zstatic        pci_mcl.dframeopnd: u64 
    istatic        pci_mcl.zero_opnd: u64 
    data           0          u64 
    zstatic        pci_mcl.regtable: block:2048 
    zstatic        pci_mcl.smallinttable: block:264 
    zstatic        pci_mcl.frameregtable: block:1544 
    zstatic        pci_mcl.stringtable: u64 
    zstatic        pci_mcl.stringlabtable: u64 
    zstatic        pci_mcl.realtable: u64 
    zstatic        pci_mcl.reallabtable: u64 
    zstatic        pci_mcl.stringtablesize: i64 
    zstatic        pci_mcl.realtablesize: i64 
    istatic        pci_mcl.nstrings: i64 
    data           0          u64 
    istatic        pci_mcl.nreals: i64 
    data           0          u64 
    zstatic        pci_mcl.labeltable: block:6400000 
    zstatic        pci_mcl.sbuffer: block:16 
    istatic        pci_mcl.dest: u64 
    data           &pci_mcl.sbuffer u64 
    zstatic        pci_mcl.destlinestart: i64 
    zstatic        pci_mcl.currasmproc: u64 
    zstatic        pci_mcl.noregvar: i64 
    zstatic        pci_mcl.mseqno: i64 
    zstatic        pci_mcl.rtsproclabels: block:48 
    zstatic        pci_mcl.lab_funcnametable: i64 
    zstatic        pci_mcl.lab_funcaddrtable: i64 
    zstatic        pci_mcl.lab_funcnprocs: i64 
    zstatic        pci_mcl.ss_zdatalen: i64 
    zstatic        pci_mcl.ss_zdata: u64 
    zstatic        pci_mcl.ss_idata: u64 
    zstatic        pci_mcl.ss_code: u64 
    zstatic        pci_mcl.ss_idatarelocs: u64 
    zstatic        pci_mcl.ss_coderelocs: u64 
    zstatic        pci_mcl.ss_nidatarelocs: i64 
    zstatic        pci_mcl.ss_ncoderelocs: i64 
    zstatic        pci_mcl.ss_symboltable: u64 
    zstatic        pci_mcl.ss_nsymbols: i64 
    zstatic        pci_mcl.ss_symboltablesize: i64 
    zstatic        pci_mcl.labeldeftable: u64 
    zstatic        pci_mcl.alineno: i64 
    zstatic        pci_mcl.psearchlibs: block:240 
    zstatic        pci_mcl.npsearchlibs: i64 
    zstatic        pci_mcl.plibfiles: block:408 
    zstatic        pci_mcl.nplibfiles: i64 
    zstatic        pci_mcl.hostasmhandler: u64 
    zstatic        pc_genmcl.procdefmcl: u64 
    zstatic        pc_genmcl.currpcl: u64 
    zstatic        pc_genmcl.px_handlertable: block:1752 
    istatic        pc_genmcl.scondcodes: block:6 
    data           4          u8 
    data           5          u8 
    data           12         u8 
    data           14         u8 
    data           13         u8 
    data           15         u8 
    istatic        pc_genmcl.ucondcodes: block:6 
    data           4          u8 
    data           5          u8 
    data           2          u8 
    data           6          u8 
    data           3          u8 
    data           7          u8 
    istatic        pc_genmcl.multregs: block:48 
    data           1          u64 
    data           2          u64 
    data           3          u64 
    data           11         u64 
    data           12         u64 
    data           13         u64 
    istatic        pc_genmcl.multxregs: block:48 
    data           1          u64 
    data           2          u64 
    data           3          u64 
    data           4          u64 
    data           5          u64 
    data           6          u64 
    istatic        pc_genmcl.inithandlers.initdone: u8 
    data           0          u8 
    istatic        pc_libmcl.fshowmsource: i64 
    data           0          u64 
    zstatic        pc_libmcl.rd: block:120 
    zstatic        pc_libmcl.strmcl.str: block:512 
    istatic        pc_libmcl.getregname.prefix: block:136 
    data           "B"        u64 
    data           "W"        u64 
    data           ""         u64 
    data           "A"        u64 
    data           ""         u64 
    data           ""         u64 
    data           ""         u64 
    data           "D"        u64 
    data           ""         u64 
    data           ""         u64 
    data           ""         u64 
    data           ""         u64 
    data           ""         u64 
    data           ""         u64 
    data           ""         u64 
    data           "Q"        u64 
    data           "N"        u64 
    zstatic        pc_libmcl.getregname.str: block:32 
    zstatic        pc_libmcl.fgetregname.str: block:32 
    zstatic        pc_libmcl.getfullname.str: block:256 
    zstatic        pc_libmcl.stropnd.str: block:512 
    zstatic        pc_libmcl.strvalue.str: block:512 
    zstatic        pc_stackmcl.stropndstack.str: block:512 
    zstatic        pc_genss.rex: i64 
    zstatic        pc_genss.sizeoverride: i64 
    zstatic        pc_genss.addroverride: i64 
    zstatic        pc_genss.f2override: i64 
    zstatic        pc_genss.f3override: i64 
    zstatic        pc_genss.ddd: u64 
    zstatic        pc_genss.extraparam: u64 
    istatic        pc_genss.currseg: i64 
    data           0          u64 
    zstatic        pc_genss.currdata: u64 
    zstatic        pc_genss.currrelocs: u64 
    zstatic        pc_genss.nrelocs: i64 
    istatic        pc_genss.instrno: i64 
    data           2          u64 
    zstatic        pc_genss.currmcl: u64 
    istatic        pc_genss.genrm.scaletable: block:64 
    data           0          u64 
    data           1          u64 
    data           0          u64 
    data           2          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           3          u64 
    istatic        pc_objdecls.relocnames: block:56 
    data           "abs_rel"  u64 
    data           "addr64_rel" u64 
    data           "addr32_rel" u64 
    data           "addr32nb_rel" u64 
    data           "rel32_rel" u64 
    data           "rel321_rel" u64 
    data           "rel8_rel" u64 
    zstatic        mm_genpcl.retindex: i64 
    zstatic        mm_genpcl.initstaticsindex: i64 
    zstatic        mm_genpcl.framebytes: i64 
    zstatic        mm_genpcl.parambytes: i64 
    zstatic        mm_genpcl.retpending: i64 
    zstatic        mm_genpcl.pclastframe: u64 
    zstatic        mm_genpcl.pcltempindex: i64 
    zstatic        mm_genpcl.pclcurrproc: u64 
    zstatic        mm_genpcl.loopstack: block:1600 
    zstatic        mm_genpcl.loopindex: i64 
    zstatic        mm_genpcl.zero_unit: block:64 
    istatic        mm_genpcl.pzero: u64 
    data           &mm_genpcl.zero_unit u64 
    zstatic        mm_blockpcl.casestmt: block:160 
    zstatic        mm_blockpcl.caseelse: block:160 
    zstatic        mm_blockpcl.casedepth: i64 
    zstatic        mm_blockpcl.sw_labeltable: u64 
    zstatic        mm_blockpcl.sw_valuetable: u64 
    zstatic        mm_blockpcl.sw_lower: i64 
    zstatic        mm_blockpcl.sw_ncases: i64 
    zstatic        mm_blockpcl.sw_defaultseen: u8 
    zstatic        mm_blockpcl.sw_defaultlabel: i64 
    zstatic        mm_blockpcl.sw_breaklabel: i64 
    istatic        mm_blockpcl.maxreg: i64 
    data           0          u64 
    zstatic        pc_writeexe.libinsttable: block:240 
    zstatic        pc_writeexe.libinstnames: block:240 
    zstatic        pc_writeexe.libnotable: block:240 
    zstatic        pc_writeexe.basereloclist: u64 
    zstatic        pc_writeexe.nbaserelocs: i64 
    zstatic        pc_writeexe.maxrelocaddr: i64 
    zstatic        pc_writeexe.blockbases: block:4000 
    zstatic        pc_writeexe.blockcounts: block:2000 
    zstatic        pc_writeexe.blockbytes: block:2000 
    zstatic        pc_writeexe.blockpadding: block:500 
    zstatic        pc_writeexe.nbaseblocks: i64 
    zstatic        pc_writeexe.basetablesize: i64 
    zstatic        pc_writeexe.imagebase: i64 
    zstatic        pc_writeexe.imagesize: i64 
    zstatic        pc_writeexe.filesize: i64 
    zstatic        pc_writeexe.thunktable: u64 
    zstatic        pc_writeexe.fileiatoffset: i64 
    zstatic        pc_writeexe.fileiatsize: i64 
    zstatic        pc_writeexe.stentrypoint: u64 
    zstatic        pc_writeexe.stentrypoint2: u64 
    zstatic        pc_writeexe.stentrypoint3: u64 
    zstatic        pc_writeexe.sectiontable: block:720 
    zstatic        pc_writeexe.nsections: i64 
    zstatic        pc_writeexe.importdir: u64 
    zstatic        pc_writeexe.importtable: block:144000 
    zstatic        pc_writeexe.nimports: i64 
    zstatic        pc_writeexe.exporttable: block:16000 
    zstatic        pc_writeexe.nexports: i64 
    zstatic        pc_writeexe.dllfilename: u64 
    zstatic        pc_writeexe.isdll: i64 
    zstatic        pc_writeexe.dlltable: block:2400 
    zstatic        pc_writeexe.ndlls: i64 
    zstatic        pc_writeexe.datastart: u64 
    zstatic        pc_writeexe.dataptr: u64 
    zstatic        pc_writeexe.userentrypoint: u64 
    zstatic        pc_writeexe.exportdirvirtaddr: i64 
    zstatic        pc_writeexe.exportdirvirtsize: i64 
    zstatic        pc_writeexe.exportdiroffset: i64 
    zstatic        pc_writeexe.blockdirvirtaddr: i64 
    zstatic        pc_writeexe.blockdirvirtsize: i64 
    zstatic        pc_writeexe.blockdiroffset: i64 
    istatic        pc_writeexe.writedosstub.stubdata: block:128 
    data           77         u8 
    data           90         u8 
    data           144        u8 
    data           0          u8 
    data           3          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           4          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           255        u8 
    data           255        u8 
    data           0          u8 
    data           0          u8 
    data           184        u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           64         u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           128        u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           14         u8 
    data           31         u8 
    data           186        u8 
    data           14         u8 
    data           0          u8 
    data           180        u8 
    data           9          u8 
    data           205        u8 
    data           33         u8 
    data           184        u8 
    data           1          u8 
    data           76         u8 
    data           205        u8 
    data           33         u8 
    data           84         u8 
    data           104        u8 
    data           105        u8 
    data           115        u8 
    data           32         u8 
    data           112        u8 
    data           114        u8 
    data           111        u8 
    data           103        u8 
    data           114        u8 
    data           97         u8 
    data           109        u8 
    data           32         u8 
    data           99         u8 
    data           97         u8 
    data           110        u8 
    data           110        u8 
    data           111        u8 
    data           116        u8 
    data           32         u8 
    data           98         u8 
    data           101        u8 
    data           32         u8 
    data           114        u8 
    data           117        u8 
    data           110        u8 
    data           32         u8 
    data           105        u8 
    data           110        u8 
    data           32         u8 
    data           68         u8 
    data           79         u8 
    data           83         u8 
    data           32         u8 
    data           109        u8 
    data           111        u8 
    data           100        u8 
    data           101        u8 
    data           46         u8 
    data           13         u8 
    data           13         u8 
    data           10         u8 
    data           36         u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    zstatic        pc_disasm.nmodules: i64 
    zstatic        pc_disasm.xfchsmask_pd: i64 
    istatic        pc_disasm.opnames: block:64 
    data           "add"      u64 
    data           "or"       u64 
    data           "adc"      u64 
    data           "sbb"      u64 
    data           "and"      u64 
    data           "sub"      u64 
    data           "xor"      u64 
    data           "cmp"      u64 
    istatic        pc_disasm.condnames: block:128 
    data           "o"        u64 
    data           "no"       u64 
    data           "b"        u64 
    data           "ae"       u64 
    data           "z"        u64 
    data           "nz"       u64 
    data           "be"       u64 
    data           "a"        u64 
    data           "s"        u64 
    data           "ns"       u64 
    data           "p"        u64 
    data           "np"       u64 
    data           "l"        u64 
    data           "ge"       u64 
    data           "le"       u64 
    data           "g"        u64 
    istatic        pc_disasm.addrmodenames: block:24 
    data           "amreg"    u64 
    data           "ammem"    u64 
    data           "amrel"    u64 
    zstatic        pc_disasm.rex: i64 
    zstatic        pc_disasm.addrmode: i64 
    zstatic        pc_disasm.rmreg: i64 
    zstatic        pc_disasm.rmopc: i64 
    zstatic        pc_disasm.basereg: i64 
    zstatic        pc_disasm.indexreg: i64 
    zstatic        pc_disasm.scale: i64 
    zstatic        pc_disasm.opsize: i64 
    zstatic        pc_disasm.offset: i64 
    zstatic        pc_disasm.offsetsize: i64 
    zstatic        pc_disasm.sizeoverride: i64 
    zstatic        pc_disasm.addroverride: i64 
    zstatic        pc_disasm.f2override: i64 
    zstatic        pc_disasm.f3override: i64 
    zstatic        pc_disasm.deststr: block:256 
    zstatic        pc_disasm.destptr: u64 
    zstatic        pc_disasm.codeptr: u64 
    zstatic        pc_disasm.decodeinstr.str: block:256 
    istatic        pc_disasm.strreg.regnames8: block:160 
    data           "al"       u64 
    data           "cl"       u64 
    data           "dl"       u64 
    data           "bl"       u64 
    data           "spl"      u64 
    data           "bpl"      u64 
    data           "sil"      u64 
    data           "dil"      u64 
    data           "r8b"      u64 
    data           "r9b"      u64 
    data           "r10b"     u64 
    data           "r11b"     u64 
    data           "r12b"     u64 
    data           "r13b"     u64 
    data           "r14b"     u64 
    data           "r15b"     u64 
    data           "ah"       u64 
    data           "bh"       u64 
    data           "ch"       u64 
    data           "dh"       u64 
    istatic        pc_disasm.strreg.regnames16: block:128 
    data           "ax"       u64 
    data           "cx"       u64 
    data           "dx"       u64 
    data           "bx"       u64 
    data           "sp"       u64 
    data           "bp"       u64 
    data           "si"       u64 
    data           "di"       u64 
    data           "r8w"      u64 
    data           "r9w"      u64 
    data           "r10w"     u64 
    data           "r11w"     u64 
    data           "r12w"     u64 
    data           "r13w"     u64 
    data           "r14w"     u64 
    data           "r15w"     u64 
    istatic        pc_disasm.strreg.regnames32: block:128 
    data           "eax"      u64 
    data           "ecx"      u64 
    data           "edx"      u64 
    data           "ebx"      u64 
    data           "esp"      u64 
    data           "ebp"      u64 
    data           "esi"      u64 
    data           "edi"      u64 
    data           "r8d"      u64 
    data           "r9d"      u64 
    data           "r10d"     u64 
    data           "r11d"     u64 
    data           "r12d"     u64 
    data           "r13d"     u64 
    data           "r14d"     u64 
    data           "r15d"     u64 
    istatic        pc_disasm.strreg.regnames64: block:128 
    data           "rax"      u64 
    data           "rcx"      u64 
    data           "rdx"      u64 
    data           "rbx"      u64 
    data           "rsp"      u64 
    data           "rbp"      u64 
    data           "rsi"      u64 
    data           "rdi"      u64 
    data           "r8"       u64 
    data           "r9"       u64 
    data           "r10"      u64 
    data           "r11"      u64 
    data           "r12"      u64 
    data           "r13"      u64 
    data           "r14"      u64 
    data           "r15"      u64 
    istatic        pc_disasm.strreg.mregnames8: block:160 
    data           "B0"       u64 
    data           "B10"      u64 
    data           "B11"      u64 
    data           "B4"       u64 
    data           "B15"      u64 
    data           "B14"      u64 
    data           "B5"       u64 
    data           "B3"       u64 
    data           "B12"      u64 
    data           "B13"      u64 
    data           "B1"       u64 
    data           "B2"       u64 
    data           "B6"       u64 
    data           "B7"       u64 
    data           "B8"       u64 
    data           "B9"       u64 
    data           "B16"      u64 
    data           "B18"      u64 
    data           "B19"      u64 
    data           "B17"      u64 
    istatic        pc_disasm.strreg.mregnames16: block:128 
    data           "W0"       u64 
    data           "W10"      u64 
    data           "W11"      u64 
    data           "W4"       u64 
    data           "Wsp"      u64 
    data           "Wbp"      u64 
    data           "W5"       u64 
    data           "W3"       u64 
    data           "W12"      u64 
    data           "W13"      u64 
    data           "W1"       u64 
    data           "W2"       u64 
    data           "W6"       u64 
    data           "W7"       u64 
    data           "W8"       u64 
    data           "W9"       u64 
    istatic        pc_disasm.strreg.mregnames32: block:128 
    data           "A0"       u64 
    data           "A10"      u64 
    data           "A11"      u64 
    data           "A4"       u64 
    data           "Astack"   u64 
    data           "Aframe"   u64 
    data           "A5"       u64 
    data           "A3"       u64 
    data           "A12"      u64 
    data           "A13"      u64 
    data           "A1"       u64 
    data           "A2"       u64 
    data           "A6"       u64 
    data           "A7"       u64 
    data           "A8"       u64 
    data           "A9"       u64 
    istatic        pc_disasm.strreg.mregnames64: block:128 
    data           "D0"       u64 
    data           "D10"      u64 
    data           "D11"      u64 
    data           "D4"       u64 
    data           "Dstack"   u64 
    data           "Dframe"   u64 
    data           "D5"       u64 
    data           "D3"       u64 
    data           "D12"      u64 
    data           "D13"      u64 
    data           "D1"       u64 
    data           "D2"       u64 
    data           "D6"       u64 
    data           "D7"       u64 
    data           "D8"       u64 
    data           "D9"       u64 
    istatic        pc_disasm.strfreg.fregnames: block:64 
    data           "st0"      u64 
    data           "st1"      u64 
    data           "st2"      u64 
    data           "st3"      u64 
    data           "st4"      u64 
    data           "st5"      u64 
    data           "st6"      u64 
    data           "st7"      u64 
    zstatic        pc_disasm.printaddrmode.str: block:100 
    zstatic        pc_disasm.strxmm.str: block:32 
    zstatic        pc_disasm.strmmx.str: block:32 
    zstatic        mm_parse.loopstack: block:800 
    zstatic        mm_parse.nloops: i64 
    istatic        mm_parse.intabledata: i64 
    data           0          u64 
    istatic        mm_parse.inreadprint: i64 
    data           0          u64 
    istatic        mm_parse.inparamlist: i64 
    data           0          u64 
    istatic        mm_parse.inrecordbody: i64 
    data           0          u64 
    istatic        mm_parse.inimportmodule: i64 
    data           0          u64 
    istatic        mm_parse.labelseen: i64 
    data           0          u64 
    istatic        mm_parse.tabledataname: u64 
    data           0          u64 
    zstatic        mm_parse.procstack: block:80 
    istatic        mm_parse.nprocstack: i64 
    data           0          u64 
    zstatic        mm_parse.unionstring: block:8 
    zstatic        mm_parse.unionpend: block:8 
    istatic        mm_parse.unionlastvar: u64 
    data           0          u64 
    zstatic        mm_parse.dretvar: u64 
    istatic        mm_parse.try_level: i64 
    data           0          u64 
    istatic        mm_parse.varattribs: i64 
    data           0          u64 
    zstatic        mm_parse.dollarstack: block:80 
    istatic        mm_parse.ndollar: i64 
    data           0          u64 
    istatic        mm_parse.inmultexpr: i64 
    data           0          u64 
    istatic        mm_parse.insiderecord: i64 
    data           0          u64 
    istatic        mm_parse.insidedllimport: i64 
    data           0          u64 
    istatic        mm_parse.yieldseen: i64 
    data           0          u64 
    zstatic        mm_parse.forindexvars: block:80 
    zstatic        mm_parse.nforloops: i64 
    zstatic        mm_parse.docfile: u64 
    istatic        mm_parse.readcompilervar.monthnames: block:96 
    data           "Jan"      u64 
    data           "Feb"      u64 
    data           "Mar"      u64 
    data           "Apr"      u64 
    data           "May"      u64 
    data           "Jun"      u64 
    data           "Jul"      u64 
    data           "Aug"      u64 
    data           "Sep"      u64 
    data           "Oct"      u64 
    data           "Nov"      u64 
    data           "Dec"      u64 
    zstatic        mm_name.currstproc: u64 
    istatic        mm_name.allowmodname: i64 
    data           0          u64 
    zstatic        mm_name.noexpand: i64 
    zstatic        mm_name.noassem: i64 
    zstatic        mm_name.macrolevels: i64 
    zstatic        mm_name.macroparams: block:400 
    zstatic        mm_name.macroparamsgen: block:400 
    zstatic        mm_name.macroargs: block:400 
    zstatic        mm_name.nmacroparams: i64 
    zstatic        mm_name.nmacroargs: i64 
    zstatic        mm_name.resolvetopname.maxdupl: i64 
    zstatic        mm_type.countedfields: i64 
    zstatic        mm_type.inassem: i64 
    zstatic        mm_export.sbuffer: block:16 
    istatic        mm_export.dest: u64 
    data           &mm_export.sbuffer u64 

Proc mm_tables.inittypetables:
    local          mm_tables.inittypetables.genop i64 
    local          mm_tables.inittypetables.s i64 
    local          mm_tables.inittypetables.t i64 
    local          mm_tables.inittypetables.a i64 
    local          mm_tables.inittypetables.specop i64 
    local          mm_tables.inittypetables.av_1 i64 
    local          mm_tables.inittypetables.av_2 i64 
    local          mm_tables.inittypetables.i i64 
    procentry                 
#10180: 
    push           1          i64 
    pop            mm_tables.inittypetables.i i64 
    push           18         i64 
    pop            mm_tables.inittypetables.av_1 i64 
    push           mm_tables.inittypetables.av_1 i64 
    push           1          i64 
    jumplt         #10181     i64 
#10182: 
    push           1          i64 
    push           &mm_tables.intresult 
    push           &mm_tables.intresultlist 
    push           mm_tables.inittypetables.i i64 
    pushptroff                u8 1 -1
    popptroff                 u8 1 0
#10183: 
    forup          #10182     i64 1
    opnd           mm_tables.inittypetables.i 
    opnd           mm_tables.inittypetables.av_1 
#10181: 
#10184: 
    push           1          i64 
    pop            mm_tables.inittypetables.i i64 
    push           49         i64 
    pop            mm_tables.inittypetables.av_2 i64 
    push           mm_tables.inittypetables.av_2 i64 
    push           1          i64 
    jumplt         #10185     i64 
#10186: 
    push           &mm_tables.softconvmappings 
    push           mm_tables.inittypetables.i i64 
    addrefoff                 block:6 6 -6
    push           1          i64 
    pushptroff                i16 2 -2
    pop            mm_tables.inittypetables.s i64 
    push           &mm_tables.softconvmappings 
    push           mm_tables.inittypetables.i i64 
    addrefoff                 block:6 6 -6
    push           2          i64 
    pushptroff                i16 2 -2
    pop            mm_tables.inittypetables.t i64 
    push           &mm_tables.softconvmappings 
    push           mm_tables.inittypetables.i i64 
    addrefoff                 block:6 6 -6
    push           3          i64 
    pushptroff                i16 2 -2
    push           &mm_tables.softconvtable 
    push           mm_tables.inittypetables.s i64 
    addrefoff                 block:56 56 -56
    push           mm_tables.inittypetables.t i64 
    popptroff                 i64 8 -8
#10187: 
    forup          #10186     i64 1
    opnd           mm_tables.inittypetables.i 
    opnd           mm_tables.inittypetables.av_2 
#10185: 
#10188: 
    retproc                   
End


Proc pc_libpcl.pcl_start::
    param          pc_libpcl.pcl_start.nunits i64 
    procentry                 
    push           pc_libpcl.initpcalloc i64 
    pop            pc_libpcl.pcalloc i64 
    push           pc_libpcl.pcl_start.nunits i64 
    jumpfalse      #10190     i64 
    push           pc_libpcl.pcl_start.nunits i64 
    push           9          i64 
    mul                       i64 
    push           8          i64 
    idiv                      i64 
    pop            pc_libpcl.pcl_start.nunits i64 
    jump           #10191     
#10192: 
    push           &pc_libpcl.pcalloc 
    push           2          i64 
    multo                     i64 
#10191: 
    push           pc_libpcl.pcalloc i64 
    push           pc_libpcl.pcl_start.nunits i64 
    jumplt         #10192     i64 
#10193: 
#10190: 
    setargs                   1 0
    push           pc_libpcl.pcalloc i64 
    push           32         i64 
    mul                       i64 
    callfn         &mlibp.pcm_allocz u64 
    pop            pc_libpcl.pcstart u64 
    push           pc_libpcl.pcstart u64 
    push           pc_libpcl.pcalloc i64 
    addrefoff                 u64 32 -256
    pop            pc_libpcl.pcend u64 
    push           pc_libpcl.pcstart u64 
    push           1          i64 
    subrefoff                 u64 32 0
    pop            pc_libpcl.pccurr u64 
    push           0          i64 
    pop            pc_libpcl.pcfixed u8 
    push           0          i64 
    pop            pc_libpcl.pcseqno i64 
    push           0          i64 
    pop            pc_libpcl.pcneedfntable i64 
    push           0          i64 
    store          pc_libpcl.labelnooffset i64 
    store          pc_libpcl.maxuserlabel i64 
    pop            pc_libpcl.labelno i64 
    push           0          i64 
    pop            pc_libpcl.mcldone i64 
    push           &pc_decls.rtsproctable 
    clear                     block:48 
#10194: 
    retproc                   
End


Proc pc_libpcl.pcl_end::
    param          pc_libpcl.pcl_end.fixup i64 
    procentry                 
    push           pc_libpcl.pccurr u64 
    push           pc_libpcl.pccurr u64 
    jumplt         #10196     u64 
    push           pc_libpcl.pccurr u64 
    push           1          
    pushptroff                u8 1 0
    push           11         i64 
    jumpeq         #10196     i64 
    setargs                   2 0
    push           0          u64 
    push           11         i64 
    callproc       &pc_libpcl.pcl_gen 
#10196: 
    push           pc_libpcl.pcl_end.fixup i64 
    jumpfalse      #10197     i64 
    setargs                   0 0
    callproc       &pc_libpcl.fixuppcl 
#10197: 
#10198: 
    retproc                   
End


Proc pc_libpcl.pcl_free::
    param          pc_libpcl.pcl_free.fixup i64 
    procentry                 
    push           0          u64 
    store          pc_libpcl.pcend u64 
    store          pc_libpcl.pccurr u64 
    pop            pc_libpcl.pcstart u64 
    push           0          i64 
    pop            pc_libpcl.pcfixed u8 
#10200: 
    retproc                   
End


Proc pc_libpcl.fixuppcl:
    local          pc_libpcl.fixuppcl.d u64 
    local          pc_libpcl.fixuppcl.p u64 
    local          pc_libpcl.fixuppcl.pextproc u64 
    local          pc_libpcl.fixuppcl.labno i64 
    local          pc_libpcl.fixuppcl.insideproc i64 
    local          pc_libpcl.fixuppcl.extparams i64 
    local          pc_libpcl.fixuppcl.isthreaded i64 
    procentry                 
    push           pc_libpcl.pcfixed u8 
    jumpfalse      #10202     i64 
    jump           #10203     
#10202: 
    push           pc_libpcl.pcstart u64 
    pop            pc_libpcl.fixuppcl.p u64 
    push           0          i64 
    pop            pc_libpcl.fixuppcl.insideproc i64 
    push           0          u64 
    pop            pc_libpcl.fixuppcl.pextproc u64 
    jump           #10204     
#10205: 
    push           pc_libpcl.fixuppcl.p u64 
    push           1          
    pushptroff                u8 1 0
    switch         #10206     5 97
    opnd           #10207     
#10206: 
    switchlabel    #10208     
    switchlabel    #10208     
    switchlabel    #10207     
    switchlabel    #10209     
    switchlabel    #10207     
    switchlabel    #10210     
    switchlabel    #10207     
    switchlabel    #10211     
    switchlabel    #10212     
    switchlabel    #10213     
    switchlabel    #10214     
    switchlabel    #10215     
    switchlabel    #10207     
    switchlabel    #10216     
    switchlabel    #10216     
    switchlabel    #10207     
    switchlabel    #10217     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10207     
    switchlabel    #10218     
    switchlabel    #10219     
    switchlabel    #10220     
    switchlabel    #10221     
    switchlabel    #10222     
    endswitch                 
#10216: 
    push           pc_libpcl.fixuppcl.insideproc i64 
    push           1          i64 
    jumpeq         #10223     i64 
    setargs                   1 0
    push           "Not allowed" u64 
    callproc       &pc_libpcl.perror 
#10223: 
    push           pc_libpcl.fixuppcl.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_libpcl.fixuppcl.d u64 
    push           pc_libpcl.fixuppcl.p u64 
    push           1          
    pushptroff                u8 1 0
    push           pc_libpcl.fixuppcl.d u64 
    push           27         
    popptroff                 u8 1 0
    push           pc_libpcl.fixuppcl.p u64 
    push           pc_libpcl.fixuppcl.d u64 
    push           16         
    popptroff                 u64 1 0
    push           pc_libpcl.fixuppcl.d u64 
    push           46         
    pushptroff                u16 1 0
    push           0          i64 
    dotindex                  i64 
    jumpfalse      #10224     u64 
    setargs                   2 0
    push           pc_libpcl.fixuppcl.d u64 
    pushptr                   u64 
    push           "Redefining local/param/ext:" u64 
    callproc       &pc_libpcl.perror_s 
#10224: 
    push           1          u64 
    push           pc_libpcl.fixuppcl.d u64 
    push           46         
    addrefoff                 u64 1 0
    push           0          i64 
    popdotindex               u16 
    jump           #10225     
#10209: 
    push           0          i64 
    pop            pc_libpcl.fixuppcl.isthreaded i64 
!doprocdef::
#10226: 
    push           pc_libpcl.fixuppcl.insideproc i64 
    jumpfalse      #10227     i64 
    setargs                   1 0
    push           "Nested proc" u64 
    callproc       &pc_libpcl.perror 
#10227: 
    push           1          i64 
    pop            pc_libpcl.fixuppcl.insideproc i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_libpcl.fixuppcl.d u64 
    push           pc_libpcl.fixuppcl.p u64 
    push           1          
    pushptroff                u8 1 0
    push           pc_libpcl.fixuppcl.d u64 
    push           27         
    popptroff                 u8 1 0
    push           pc_libpcl.fixuppcl.p u64 
    push           pc_libpcl.fixuppcl.d u64 
    push           16         
    popptroff                 u64 1 0
    push           pc_libpcl.fixuppcl.d u64 
    push           46         
    pushptroff                u16 1 0
    push           0          i64 
    dotindex                  i64 
    jumpfalse      #10228     u64 
    setargs                   2 0
    push           pc_libpcl.fixuppcl.d u64 
    pushptr                   u64 
    push           "Redefining proc:" u64 
    callproc       &pc_libpcl.perror_s 
#10228: 
    push           1          u64 
    push           pc_libpcl.fixuppcl.d u64 
    push           46         
    addrefoff                 u64 1 0
    push           0          i64 
    popdotindex               u16 
    push           pc_libpcl.fixuppcl.isthreaded u64 
    push           pc_libpcl.fixuppcl.d u64 
    push           46         
    addrefoff                 u64 1 0
    push           7          i64 
    popdotindex               u16 
    setargs                   1 0
    push           pc_libpcl.fixuppcl.d u64 
    callproc       &pc_libpcl.assignlabeltoname 
    jump           #10225     
#10208: 
    push           pc_libpcl.fixuppcl.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_libpcl.fixuppcl.d u64 
    push           pc_libpcl.fixuppcl.p u64 
    push           1          
    pushptroff                u8 1 0
    push           pc_libpcl.fixuppcl.d u64 
    push           27         
    popptroff                 u8 1 0
    push           pc_libpcl.fixuppcl.p u64 
    push           pc_libpcl.fixuppcl.d u64 
    push           16         
    popptroff                 u64 1 0
    push           pc_libpcl.fixuppcl.d u64 
    push           46         
    pushptroff                u16 1 0
    push           0          i64 
    dotindex                  i64 
    jumpfalse      #10229     u64 
    setargs                   2 0
    push           pc_libpcl.fixuppcl.d u64 
    pushptr                   u64 
    push           "Redefining proc/static/label:" u64 
    callproc       &pc_libpcl.perror_s 
#10229: 
    push           1          u64 
    push           pc_libpcl.fixuppcl.d u64 
    push           46         
    addrefoff                 u64 1 0
    push           0          i64 
    popdotindex               u16 
    setargs                   1 0
    push           pc_libpcl.fixuppcl.d u64 
    callproc       &pc_libpcl.assignlabeltoname 
    jump           #10225     
#10210: 
    push           pc_libpcl.fixuppcl.insideproc i64 
    push           1          i64 
    jumpeq         #10230     i64 
    setargs                   1 0
    push           "End without proc" u64 
    callproc       &pc_libpcl.perror 
#10230: 
    push           0          i64 
    pop            pc_libpcl.fixuppcl.insideproc i64 
    jump           #10225     
#10214: 
    push           pc_libpcl.fixuppcl.insideproc i64 
    push           2          i64 
    jumpeq         #10231     i64 
    setargs                   1 0
    push           "End without extproc" u64 
    callproc       &pc_libpcl.perror 
#10231: 
    push           0          i64 
    pop            pc_libpcl.fixuppcl.insideproc i64 
    jump           #10225     
#10211: 
    push           pc_libpcl.fixuppcl.p u64 
    pop            pc_libpcl.fixuppcl.pextproc u64 
    push           0          i64 
    pop            pc_libpcl.fixuppcl.extparams i64 
    push           pc_libpcl.fixuppcl.insideproc i64 
    jumpfalse      #10232     i64 
    setargs                   1 0
    push           "Nested proc" u64 
    callproc       &pc_libpcl.perror 
#10232: 
    push           2          i64 
    pop            pc_libpcl.fixuppcl.insideproc i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_libpcl.fixuppcl.d u64 
    push           pc_libpcl.fixuppcl.d u64 
    push           46         
    pushptroff                u16 1 0
    push           0          i64 
    dotindex                  i64 
    jumptrue       #10233     u64 
    push           pc_libpcl.fixuppcl.p u64 
    push           1          
    pushptroff                u8 1 0
    push           pc_libpcl.fixuppcl.d u64 
    push           27         
    popptroff                 u8 1 0
    push           pc_libpcl.fixuppcl.p u64 
    push           pc_libpcl.fixuppcl.d u64 
    push           16         
    popptroff                 u64 1 0
    push           pc_libpcl.fixuppcl.d u64 
    push           46         
    pushptroff                u16 1 0
    push           0          i64 
    dotindex                  i64 
    jumpfalse      #10234     u64 
    setargs                   2 0
    push           pc_libpcl.fixuppcl.d u64 
    pushptr                   u64 
    push           "Redefining extproc:" u64 
    callproc       &pc_libpcl.perror_s 
#10234: 
    push           1          u64 
    push           pc_libpcl.fixuppcl.d u64 
    push           46         
    addrefoff                 u64 1 0
    push           0          i64 
    popdotindex               u16 
    push           1          u64 
    push           pc_libpcl.fixuppcl.d u64 
    push           46         
    addrefoff                 u64 1 0
    push           1          i64 
    popdotindex               u16 
#10233: 
    jump           #10225     
#10212: 
    push           pc_libpcl.fixuppcl.insideproc i64 
    push           2          i64 
    jumpeq         #10235     i64 
    setargs                   1 0
    push           "Not allowed" u64 
    callproc       &pc_libpcl.perror 
#10235: 
    push           &pc_libpcl.fixuppcl.extparams 
    incr                      i64 1
    jump           #10225     
#10213: 
    push           pc_libpcl.fixuppcl.insideproc i64 
    push           2          i64 
    jumpeq         #10236     i64 
    setargs                   1 0
    push           "Not allowed" u64 
    callproc       &pc_libpcl.perror 
#10236: 
    push           pc_libpcl.fixuppcl.extparams i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           16         
    popptroff                 i32 1 0
    jump           #10225     
#10215: 
    push           1          i64 
    pop            pc_libpcl.fixuppcl.isthreaded i64 
    jump           #10226     
    jump           #10225     
#10217: 
    push           pc_libpcl.fixuppcl.p u64 
    push           8          
    pushptroff                i64 1 0
    pop            pc_libpcl.fixuppcl.labno i64 
    push           pc_libpcl.fixuppcl.labno i64 
    push           1          i64 
    push           100000     i64 
    jumpinrange    #10237     i64 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_libpcl.fixuppcl.labno i64 
    callfn         &msysp.strint u64 
    push           "3:Label out of range" u64 
    callproc       &pc_libpcl.perror_s 
#10237: 
    setargs                   1 0
    push           pc_libpcl.fixuppcl.labno i64 
    callfn         &pc_libpcl.fixlabel i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           8          
    popptroff                 i64 1 0
    push           3          i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           0          
    popptroff                 u8 1 0
    jump           #10225     
#10219: 
    push           93         i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           1          
    popptroff                 u8 1 0
    push           1          i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           3          
    popptroff                 u8 1 0
    push           1          i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           4          
    popptroff                 i32 1 0
    jump           #10225     
#10220: 
    push           93         i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           1          
    popptroff                 u8 1 0
    push           2          i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           3          
    popptroff                 u8 1 0
    push           2          i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           4          
    popptroff                 i32 1 0
    jump           #10225     
#10221: 
    push           93         i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           1          
    popptroff                 u8 1 0
    push           3          i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           3          
    popptroff                 u8 1 0
    push           4          i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           4          
    popptroff                 i32 1 0
    jump           #10225     
#10222: 
    push           93         i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           1          
    popptroff                 u8 1 0
    push           4          i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           3          
    popptroff                 u8 1 0
    push           8          i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           4          
    popptroff                 i32 1 0
    jump           #10225     
#10218: 
    push           pc_libpcl.fixuppcl.p u64 
    push           4          
    pushptroff                i32 1 0
    push           0          i64 
    jumpne         #10238     i64 
    push           &pc_tables.psize 
    push           pc_libpcl.fixuppcl.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           pc_libpcl.fixuppcl.p u64 
    push           4          
    popptroff                 i32 1 0
#10238: 
    jump           #10225     
#10207: 
    push           pc_libpcl.fixuppcl.p u64 
    pushptr                   u8 
    push           5          i64 
    casejumpeq     #10239     i64 0
    push           3          i64 
    casejumpeq     #10240     i64 0
    push           198        i64 
    casejumpeq     #10241     i64 0
    push           199        i64 
    casejumpeq     #10241     i64 0
    push           200        i64 
    casejumpeq     #10241     i64 0
    popstack                  i64 
    jump           #10242     
#10239: 
    push           pc_libpcl.fixuppcl.p u64 
    push           3          
    pushptroff                u8 1 0
    push           11         i64 
    jumpeq         #10243     i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           4          
    pushptroff                i32 1 0
    push           4          i64 
    jumpne         #10244     i64 
#10243: 
    push           7          i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           0          
    popptroff                 u8 1 0
    push           pc_libpcl.fixuppcl.p u64 
    push           8          
    pushptroff                r64 1 0
    fnarrow                   r32 r64 
    push           pc_libpcl.fixuppcl.p u64 
    push           8          
    popptroff                 r32 1 0
#10244: 
    jump           #10245     
#10240: 
    setargs                   1 0
    push           pc_libpcl.fixuppcl.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libpcl.fixlabel i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           8          
    popptroff                 i64 1 0
    jump           #10245     
#10241: 
    push           1          i64 
    pop            pc_libpcl.pcneedfntable i64 
    jump           #10245     
#10242: 
#10245: 
#10225: 
#10246: 
    push           &pc_libpcl.fixuppcl.p 
    incr                      u64 32
#10204: 
    push           pc_libpcl.fixuppcl.p u64 
    push           pc_libpcl.pcend u64 
    jumple         #10205     u64 
#10247: 
    push           pc_libpcl.fixuppcl.insideproc i64 
    jumpfalse      #10248     i64 
    setargs                   1 0
    push           "End missing" u64 
    callproc       &pc_libpcl.perror 
#10248: 
    push           1          i64 
    pop            pc_libpcl.pcfixed u8 
#10203: 
    retproc                   
End


Proc pc_libpcl.extendpclblock:
    local          pc_libpcl.extendpclblock.newpcalloc i64 
    local          pc_libpcl.extendpclblock.lengthused i64 
    local          pc_libpcl.extendpclblock.newpcstart u64 
    procentry                 
    push           pc_libpcl.pcalloc i64 
    push           2          i64 
    mul                       i64 
    pop            pc_libpcl.extendpclblock.newpcalloc i64 
    push           pc_libpcl.pccurr u64 
    push           pc_libpcl.pcstart u64 
    subref                    i64 32
    push           1          i64 
    add                       i64 
    pop            pc_libpcl.extendpclblock.lengthused i64 
    setargs                   1 0
    push           32         i64 
    push           pc_libpcl.extendpclblock.newpcalloc i64 
    mul                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pc_libpcl.extendpclblock.newpcstart u64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "EXTEND PCL" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libpcl.extendpclblock.newpcalloc i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   3 0
    push           pc_libpcl.extendpclblock.lengthused i64 
    push           32         i64 
    mul                       u64 
    push           pc_libpcl.pcstart u64 
    push           pc_libpcl.extendpclblock.newpcstart u64 
    callproc       &memcpy    
    setargs                   2 0
    push           pc_libpcl.extendpclblock.newpcalloc i64 
    push           pc_libpcl.extendpclblock.lengthused i64 
    sub                       i64 
    push           32         i64 
    mul                       i64 
    push           pc_libpcl.extendpclblock.newpcstart u64 
    push           pc_libpcl.extendpclblock.lengthused i64 
    addrefoff                 u64 32 0
    callproc       &mlibp.pcm_clearmem 
    push           pc_libpcl.extendpclblock.newpcstart u64 
    push           pc_libpcl.pccurr u64 
    push           pc_libpcl.pcstart u64 
    subref                    i64 32
    addrefoff                 u64 32 0
    pop            pc_libpcl.pccurr u64 
    push           pc_libpcl.extendpclblock.newpcstart u64 
    push           pc_libpcl.extendpclblock.newpcalloc i64 
    addrefoff                 u64 32 -256
    pop            pc_libpcl.pcend u64 
    setargs                   2 0
    push           pc_libpcl.pcalloc i64 
    push           32         i64 
    mul                       i64 
    push           pc_libpcl.pcstart u64 
    callproc       &mlibp.pcm_free 
    push           pc_libpcl.extendpclblock.newpcstart u64 
    pop            pc_libpcl.pcstart u64 
    push           pc_libpcl.extendpclblock.newpcalloc i64 
    pop            pc_libpcl.pcalloc i64 
#10250: 
    retproc                   
End


Proc pc_libpcl.newpcl: u64
    procentry                 
    push           pc_libpcl.pccurr u64 
    push           pc_libpcl.pcend u64 
    jumplt         #10252     u64 
    setargs                   0 0
    callproc       &pc_libpcl.extendpclblock 
#10252: 
    push           &pc_libpcl.npcl 
    incr                      i64 1
    push           &pc_libpcl.pccurr 
    incr                      u64 32
    push           &pc_libpcl.pcseqno 
    incrload                  i64 1
    push           pc_libpcl.pccurr u64 
    push           24         
    popptroff                 u32 1 0
    push           pc_libpcl.pccurr u64 
    setret                    u64 
    jump           #10253     
#10253: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_gen::
    param          pc_libpcl.pcl_gen.opcode i64 
    param          pc_libpcl.pcl_gen.p u64 
    local          pc_libpcl.pcl_gen.d u64 
    procentry                 
    push           pc_libpcl.pcl_gen.p u64 
    push           0          u64 
    jumpne         #10255     u64 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_gen.p u64 
#10255: 
    push           pc_libpcl.pcl_gen.opcode i64 
    push           pc_libpcl.pcl_gen.p u64 
    push           1          
    popptroff                 u8 1 0
#10256: 
    retproc                   
End


Proc pc_libpcl.pcl_gent::
    param          pc_libpcl.pcl_gent.opcode i64 
    param          pc_libpcl.pcl_gent.t i64 
    param          pc_libpcl.pcl_gent.p u64 
    procentry                 
    push           pc_libpcl.pcl_gent.p u64 
    push           0          u64 
    jumpne         #10258     u64 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_gent.p u64 
#10258: 
    push           pc_libpcl.pcl_gent.opcode i64 
    push           pc_libpcl.pcl_gent.p u64 
    push           1          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_gent.t i64 
    push           0          i64 
    jumpge         #10259     i64 
    push           13         i64 
    push           pc_libpcl.pcl_gent.p u64 
    push           3          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_gent.t i64 
    neg                       i64 
    push           pc_libpcl.pcl_gent.p u64 
    push           4          
    popptroff                 i32 1 0
    jump           #10260     
#10259: 
    push           pc_libpcl.pcl_gent.t i64 
    push           pc_libpcl.pcl_gent.p u64 
    push           3          
    popptroff                 u8 1 0
#10260: 
#10261: 
    retproc                   
End


Proc pc_libpcl.pcl_genx::
    param          pc_libpcl.pcl_genx.opcode i64 
    param          pc_libpcl.pcl_genx.x i64 
    param          pc_libpcl.pcl_genx.p u64 
    procentry                 
    push           pc_libpcl.pcl_genx.p u64 
    push           0          u64 
    jumpne         #10263     u64 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_genx.p u64 
#10263: 
    push           pc_libpcl.pcl_genx.opcode i64 
    push           pc_libpcl.pcl_genx.p u64 
    push           1          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_genx.x i64 
    push           pc_libpcl.pcl_genx.p u64 
    push           16         
    popptroff                 i32 1 0
#10264: 
    retproc                   
End


Proc pc_libpcl.pcl_genxy::
    param          pc_libpcl.pcl_genxy.opcode i64 
    param          pc_libpcl.pcl_genxy.x i64 
    param          pc_libpcl.pcl_genxy.y i64 
    param          pc_libpcl.pcl_genxy.p u64 
    procentry                 
    push           pc_libpcl.pcl_genxy.p u64 
    push           0          u64 
    jumpne         #10266     u64 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_genxy.p u64 
#10266: 
    push           pc_libpcl.pcl_genxy.opcode i64 
    push           pc_libpcl.pcl_genxy.p u64 
    push           1          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_genxy.x i64 
    push           pc_libpcl.pcl_genxy.p u64 
    push           16         
    popptroff                 i32 1 0
    push           pc_libpcl.pcl_genxy.y i64 
    push           pc_libpcl.pcl_genxy.p u64 
    push           20         
    popptroff                 i32 1 0
#10267: 
    retproc                   
End


Proc pc_libpcl.pcl_genint:: u64
    param          pc_libpcl.pcl_genint.a i64 
    param          pc_libpcl.pcl_genint.mode i64 
    local          pc_libpcl.pcl_genint.p u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_genint.p u64 
    push           pc_libpcl.pcl_genint.a i64 
    push           pc_libpcl.pcl_genint.p u64 
    push           8          
    popptroff                 i64 1 0
    push           4          i64 
    push           pc_libpcl.pcl_genint.p u64 
    push           0          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_genint.p u64 
    setret                    u64 
    jump           #10269     
#10269: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_genint128:: u64
    param          pc_libpcl.pcl_genint128.a i128 
    param          pc_libpcl.pcl_genint128.mode i64 
    local          pc_libpcl.pcl_genint128.p u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_genint128.p u64 
    push           pc_libpcl.pcl_genint128.a i128 
    push           pc_libpcl.pcl_genint128.p u64 
    push           8          
    popptroff                 i128 1 0
    push           6          i64 
    push           pc_libpcl.pcl_genint128.p u64 
    push           0          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_genint128.p u64 
    setret                    u64 
    jump           #10271     
#10271: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_genreal:: u64
    param          pc_libpcl.pcl_genreal.x r64 
    local          pc_libpcl.pcl_genreal.p u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_genreal.p u64 
    push           pc_libpcl.pcl_genreal.x r64 
    push           pc_libpcl.pcl_genreal.p u64 
    push           8          
    popptroff                 r64 1 0
    push           5          i64 
    push           pc_libpcl.pcl_genreal.p u64 
    push           0          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_genreal.p u64 
    setret                    u64 
    jump           #10273     
#10273: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_genreal32:: u64
    param          pc_libpcl.pcl_genreal32.x r64 
    local          pc_libpcl.pcl_genreal32.p u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_genreal32.p u64 
    push           pc_libpcl.pcl_genreal32.x r64 
    fnarrow                   r32 r64 
    push           pc_libpcl.pcl_genreal32.p u64 
    push           8          
    popptroff                 r32 1 0
    push           7          i64 
    push           pc_libpcl.pcl_genreal32.p u64 
    push           0          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_genreal32.p u64 
    setret                    u64 
    jump           #10275     
#10275: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_genstring:: u64
    param          pc_libpcl.pcl_genstring.s u64 
    local          pc_libpcl.pcl_genstring.p u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_genstring.p u64 
    setargs                   1 0
    push           pc_libpcl.pcl_genstring.s u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           pc_libpcl.pcl_genstring.p u64 
    push           8          
    popptroff                 u64 1 0
    push           8          i64 
    push           pc_libpcl.pcl_genstring.p u64 
    push           0          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_genstring.p u64 
    setret                    u64 
    jump           #10277     
#10277: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_genlabel:: u64
    param          pc_libpcl.pcl_genlabel.a i64 
    local          pc_libpcl.pcl_genlabel.p u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_genlabel.p u64 
    push           pc_libpcl.pcl_genlabel.a i64 
    push           pc_libpcl.pcl_genlabel.p u64 
    push           8          
    popptroff                 i64 1 0
    push           3          i64 
    push           pc_libpcl.pcl_genlabel.p u64 
    push           0          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_genlabel.p u64 
    setret                    u64 
    jump           #10279     
#10279: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_genmem:: u64
    param          pc_libpcl.pcl_genmem.d u64 
    local          pc_libpcl.pcl_genmem.p u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_genmem.p u64 
    push           pc_libpcl.pcl_genmem.d u64 
    push           pc_libpcl.pcl_genmem.p u64 
    push           8          
    popptroff                 u64 1 0
    push           1          i64 
    push           pc_libpcl.pcl_genmem.p u64 
    push           0          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_genmem.p u64 
    setret                    u64 
    jump           #10281     
#10281: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_genmemaddr:: u64
    param          pc_libpcl.pcl_genmemaddr.d u64 
    local          pc_libpcl.pcl_genmemaddr.p u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_genmemaddr.p u64 
    push           pc_libpcl.pcl_genmemaddr.d u64 
    push           pc_libpcl.pcl_genmemaddr.p u64 
    push           8          
    popptroff                 u64 1 0
    push           2          i64 
    push           pc_libpcl.pcl_genmemaddr.p u64 
    push           0          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_genmemaddr.p u64 
    setret                    u64 
    jump           #10283     
#10283: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_gencomment::
    param          pc_libpcl.pcl_gencomment.s u64 
    procentry                 
    setargs                   2 0
    setargs                   1 0
    push           pc_libpcl.pcl_gencomment.s u64 
    callfn         &pc_libpcl.pcl_genstring u64 
    push           3          i64 
    callproc       &pc_libpcl.pcl_gen 
#10285: 
    retproc                   
End


Proc pc_libpcl.pcl_genname:: u64
    param          pc_libpcl.pcl_genname.s u64 
    procentry                 
    setargs                   1 0
    setargs                   1 0
    push           pc_libpcl.pcl_genname.s u64 
    callfn         &pc_libpcl.pcl_makesymbol u64 
    callfn         &pc_libpcl.pcl_genmem u64 
    setret                    u64 
    jump           #10287     
#10287: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_gennameaddr:: u64
    param          pc_libpcl.pcl_gennameaddr.s u64 
    procentry                 
    setargs                   1 0
    setargs                   1 0
    push           pc_libpcl.pcl_gennameaddr.s u64 
    callfn         &pc_libpcl.pcl_makesymbol u64 
    callfn         &pc_libpcl.pcl_genmemaddr u64 
    setret                    u64 
    jump           #10289     
#10289: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_genassem:: u64
    param          pc_libpcl.pcl_genassem.code u64 
    local          pc_libpcl.pcl_genassem.p u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_genassem.p u64 
    push           pc_libpcl.pcl_genassem.code u64 
    push           pc_libpcl.pcl_genassem.p u64 
    push           8          
    popptroff                 u64 1 0
    push           9          i64 
    push           pc_libpcl.pcl_genassem.p u64 
    push           0          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_genassem.p u64 
    setret                    u64 
    jump           #10291     
#10291: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_makesymbol:: u64
    param          pc_libpcl.pcl_makesymbol.s u64 
    local          pc_libpcl.pcl_makesymbol.d u64 
    procentry                 
    setargs                   1 0
    push           pc_libpcl.pcl_makesymbol.s u64 
    callfn         &pc_lex.addnamestr u64 
    pop            pc_libpcl.pcl_makesymbol.d u64 
    push           pc_libpcl.pcl_makesymbol.d u64 
    setret                    u64 
    jump           #10293     
#10293: 
    retfn                     u64 
End


Proc pc_libpcl.strpcl:
    param          pc_libpcl.strpcl.p u64 
    local          pc_libpcl.strpcl.pmodestr block:256 
    local          pc_libpcl.strpcl.str block:256 
    local          pc_libpcl.strpcl.opcode i64 
    local          pc_libpcl.strpcl.defused i64 
    procentry                 
    push           pc_libpcl.strpcl.p u64 
    push           1          
    pushptroff                u8 1 0
    pop            pc_libpcl.strpcl.opcode i64 
    push           pc_libpcl.strpcl.opcode i64 
    push           20         i64 
    casejumpeq     #10295     i64 0
    push           3          i64 
    casejumpeq     #10296     i64 0
    push           8          i64 
    casejumpeq     #10297     i64 0
    push           16         i64 
    casejumpeq     #10297     i64 0
    push           10         i64 
    casejumpeq     #10298     i64 0
    push           15         i64 
    casejumpeq     #10299     i64 0
    push           12         i64 
    casejumpeq     #10300     i64 0
    push           21         i64 
    casejumpeq     #10301     i64 0
    push           11         i64 
    casejumpeq     #10302     i64 0
    popstack                  i64 
    jump           #10303     
#10295: 
    setargs                   2 0
    push           1          i64 
    push           pc_libpcl.strpcl.p u64 
    push           8          
    pushptroff                i64 1 0
    callproc       &pc_libpcl.strlabel 
    jump           #10304     
    jump           #10305     
#10296: 
    push           pc_libpcl.strpcl.p u64 
    push           8          
    pushptroff                u64 1 0
    pushptr                   u8 
    jumpfalse      #10306     u64 
    setargs                   1 0
    push           "!"        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.strpcl.p u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &pc_libpcl.psstr 
#10306: 
    jump           #10304     
    jump           #10305     
#10297: 
    push           pc_libpcl.strpcl.p u64 
    push           8          
    pushptroff                u64 1 0
    push           46         
    pushptroff                u16 1 0
    push           9          i64 
    dotindex                  i64 
    jumpfalse      #10307     u64 
    setargs                   1 0
    push           "Procrts"  u64 
    callproc       &pc_libpcl.psstr 
    jump           #10308     
#10307: 
    push           pc_libpcl.strpcl.opcode i64 
    push           16         i64 
    jumpne         #10309     i64 
    setargs                   1 0
    push           "Threadedproc" u64 
    callproc       &pc_libpcl.psstr 
    jump           #10308     
#10309: 
    setargs                   1 0
    push           "Proc"     u64 
    callproc       &pc_libpcl.psstr 
#10308: 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.strpcl.p u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &pc_libpcl.psname 
    setargs                   1 0
    startmult                 
    push           pc_libpcl.strpcl.p u64 
    push           2          
    pushptroff                u8 1 0
    push           0          i64 
    dotindex                  i64 
    jumpfalse      #10310     u64 
    push           "::"       u64 
    resetmult                 
    jump           #10311     
#10310: 
    push           ":"        u64 
    endmult                   
#10311: 
    callproc       &pc_libpcl.psstr 
    push           pc_libpcl.strpcl.p u64 
    push           3          
    pushptroff                u8 1 0
    jumpfalse      #10312     i64 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    setargs                   2 0
    push           pc_libpcl.strpcl.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_libpcl.strpcl.p u64 
    push           3          
    pushptroff                u8 1 0
    callfn         &pc_libpcl.strpmode u64 
    callproc       &pc_libpcl.psstr 
#10312: 
    jump           #10304     
    jump           #10305     
#10298: 
    setargs                   1 0
    push           "End"      u64 
    callproc       &pc_libpcl.psstr 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    jump           #10304     
    jump           #10305     
#10299: 
    setargs                   1 0
    push           "Endext"   u64 
    callproc       &pc_libpcl.psstr 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    jump           #10304     
    jump           #10305     
#10300: 
    setargs                   1 0
    push           "Extproc"  u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.strpcl.p u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &pc_libpcl.psname 
    push           pc_libpcl.strpcl.p u64 
    push           3          
    pushptroff                u8 1 0
    jumpfalse      #10313     i64 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    setargs                   2 0
    push           pc_libpcl.strpcl.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_libpcl.strpcl.p u64 
    push           3          
    pushptroff                u8 1 0
    callfn         &pc_libpcl.strpmode u64 
    callproc       &pc_libpcl.psstr 
#10313: 
    jump           #10304     
    jump           #10305     
#10301: 
    setargs                   1 0
    push           pc_libpcl.strpcl.p u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &pc_libpcl.psname 
    setargs                   1 0
    startmult                 
    push           pc_libpcl.strpcl.p u64 
    push           8          
    pushptroff                u64 1 0
    push           46         
    pushptroff                u16 1 0
    push           3          i64 
    dotindex                  i64 
    jumpfalse      #10314     u64 
    push           "::"       u64 
    resetmult                 
    jump           #10315     
#10314: 
    push           ":"        u64 
    endmult                   
#10315: 
    callproc       &pc_libpcl.psstr 
    jump           #10304     
    jump           #10305     
#10302: 
    setargs                   1 0
    push           "Endprogram" u64 
    callproc       &pc_libpcl.psstr 
    jump           #10304     
    jump           #10305     
#10303: 
#10305: 
    setargs                   1 0
    push           "    "     u64 
    callproc       &pc_libpcl.psstr 
    setargs                   2 0
    push           &pc_tables.pclnames 
    push           pc_libpcl.strpcl.opcode i64 
    pushptroff                u64 8 0
    push           1          i64 
    addrefoff                 u64 1 0
    push           &pc_libpcl.strpcl.str 
    callproc       &strcpy    
    setargs                   4 0
    push           32         i64 
    push           15         i64 
    push           &pc_libpcl.strpcl.str 
    push           pc_libpcl.dest u64 
    callproc       &mlibp.gs_leftstr 
    push           pc_libpcl.strpcl.p u64 
    pushptr                   u8 
    push           0          i64 
    jumpeq         #10316     i64 
    setargs                   1 0
    setargs                   1 0
    push           pc_libpcl.strpcl.p u64 
    callfn         &pc_libpcl.stropnd u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
#10316: 
    setargs                   1 0
    push           30         i64 
    callproc       &pc_libpcl.pstabto 
    push           pc_libpcl.strpcl.p u64 
    push           3          
    pushptroff                u8 1 0
    push           0          i64 
    jumpeq         #10317     i64 
    setargs                   1 0
    setargs                   2 0
    push           pc_libpcl.strpcl.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_libpcl.strpcl.p u64 
    push           3          
    pushptroff                u8 1 0
    callfn         &pc_libpcl.strpmode u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
#10317: 
    push           &pc_tables.pclhastype 
    push           pc_libpcl.strpcl.opcode i64 
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #10318     i64 
    push           pc_libpcl.strpcl.p u64 
    push           3          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #10319     i64 
    setargs                   1 0
    push           "void"     u64 
    callproc       &pc_libpcl.psstr 
#10319: 
    setargs                   1 0
    setargs                   2 0
    push           pc_libpcl.strpcl.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_libpcl.strpcl.p u64 
    push           16         
    pushptroff                i32 1 0
    callfn         &pc_libpcl.strpmode u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
#10318: 
    push           &pc_tables.pclextra 
    push           pc_libpcl.strpcl.opcode i64 
    pushptroff                u8 1 0
    jumpfalse      #10320     i64 
    setargs                   1 0
    push           pc_libpcl.strpcl.p u64 
    push           16         
    pushptroff                i32 1 0
    callproc       &pc_libpcl.psint 
    push           &pc_tables.pclextra 
    push           pc_libpcl.strpcl.opcode i64 
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #10321     i64 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.strpcl.p u64 
    push           20         
    pushptroff                i32 1 0
    callproc       &pc_libpcl.psint 
#10321: 
#10320: 
#10304: 
    retproc                   
End


Proc pc_libpcl.stropnd: u64
    param          pc_libpcl.stropnd.p u64 
    local          pc_libpcl.stropnd.length i64 
    local          pc_libpcl.stropnd.d u64 
    procentry                 
    push           pc_libpcl.stropnd.p u64 
    push           0          u64 
    jumpne         #10323     u64 
    push           ""         u64 
    setret                    u64 
    jump           #10324     
#10323: 
    push           pc_libpcl.stropnd.p u64 
    pushptr                   u8 
    push           4          i64 
    casejumpeq     #10325     i64 0
    push           5          i64 
    casejumpeq     #10326     i64 0
    push           7          i64 
    casejumpeq     #10327     i64 0
    push           8          i64 
    casejumpeq     #10328     i64 0
    push           1          i64 
    casejumpeq     #10329     i64 0
    push           2          i64 
    casejumpeq     #10330     i64 0
    push           3          i64 
    casejumpeq     #10331     i64 0
    push           0          i64 
    casejumpeq     #10332     i64 0
    push           6          i64 
    casejumpeq     #10333     i64 0
    push           9          i64 
    casejumpeq     #10334     i64 0
    popstack                  i64 
    jump           #10335     
#10325: 
    setargs                   2 0
    push           0          u64 
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &msysp.strint u64 
    setret                    u64 
    jump           #10324     
    jump           #10336     
#10326: 
    setargs                   1 0
    push           &pc_libpcl.stropnd.str 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    push           "e16.16"   u64 
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                r64 1 0
    callproc       &msysp.m$print_r64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #10336     
#10327: 
    setargs                   1 0
    push           &pc_libpcl.stropnd.str 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    push           "e16.16"   u64 
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                r32 1 0
    callproc       &msysp.m$print_r32 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #10336     
#10328: 
    setargs                   1 0
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &strlen    i64 
    store          pc_libpcl.stropnd.length i64 
    push           256        i64 
    jumpge         #10337     i64 
    setargs                   2 0
    push           "\""       u64 
    push           &pc_libpcl.stropnd.str 
    callproc       &strcpy    
    setargs                   2 0
    push           &pc_libpcl.stropnd.str 
    push           1          i64 
    addrefoff                 u64 1 0
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &pc_libpcl.convertstring 
    setargs                   2 0
    push           "\""       u64 
    push           &pc_libpcl.stropnd.str 
    callproc       &strcat    
    jump           #10338     
#10337: 
    push           pc_libpcl.longstring u64 
    jumpfalse      #10339     u64 
    setargs                   2 0
    push           pc_libpcl.longstringlen i64 
    push           pc_libpcl.longstring u64 
    callproc       &mlibp.pcm_free 
#10339: 
    push           pc_libpcl.stropnd.length i64 
    push           2          i64 
    mul                       i64 
    pop            pc_libpcl.longstringlen i64 
    setargs                   1 0
    push           pc_libpcl.longstringlen i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pc_libpcl.longstring u64 
    push           34         u64 
    push           pc_libpcl.longstring u64 
    popptr                    u8 
    setargs                   2 0
    push           pc_libpcl.longstring u64 
    push           1          i64 
    addrefoff                 u64 1 0
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libpcl.convertstring i64 
    pop            pc_libpcl.stropnd.length i64 
    push           34         u64 
    push           pc_libpcl.longstring u64 
    push           pc_libpcl.stropnd.length i64 
    popptroff                 u8 1 1
    push           0          u64 
    push           pc_libpcl.longstring u64 
    push           pc_libpcl.stropnd.length i64 
    popptroff                 u8 1 2
    push           pc_libpcl.longstring u64 
    setret                    u64 
    jump           #10324     
#10338: 
    jump           #10336     
#10329: 
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_libpcl.stropnd.d u64 
    setargs                   1 0
    push           &pc_libpcl.stropnd.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    startmult                 
    push           pc_libpcl.stropnd.d u64 
    push           46         
    pushptroff                u16 1 0
    push           8          i64 
    dotindex                  i64 
    jumpfalse      #10340     u64 
    push           "`"        u64 
    resetmult                 
    jump           #10341     
#10340: 
    push           ""         u64 
    endmult                   
#10341: 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           pc_libpcl.stropnd.d u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           pc_libpcl.stropnd.p u64 
    push           1          
    pushptroff                u8 1 0
    push           5          i64 
    setjumpeq      #10342     i64 
    push           6          i64 
    setjumpne      #10343     i64 
#10342: 
    setargs                   2 0
    push           ":"        u64 
    push           &pc_libpcl.stropnd.str 
    callproc       &strcat    
#10343: 
    jump           #10336     
#10330: 
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_libpcl.stropnd.d u64 
    setargs                   1 0
    push           &pc_libpcl.stropnd.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "&##"      u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    startmult                 
    push           pc_libpcl.stropnd.d u64 
    push           46         
    pushptroff                u16 1 0
    push           8          i64 
    dotindex                  i64 
    jumpfalse      #10344     u64 
    push           "`"        u64 
    resetmult                 
    jump           #10345     
#10344: 
    push           ""         u64 
    endmult                   
#10345: 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libpcl.stropnd.d u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #10336     
#10331: 
    setargs                   1 0
    push           &pc_libpcl.stropnd.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "## "      u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           "#"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                i64 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #10336     
#10332: 
    push           ""         u64 
    setret                    u64 
    jump           #10324     
    jump           #10336     
#10333: 
    setargs                   1 0
    push           &pc_libpcl.stropnd.str 
    callproc       &msysp.m$print_startstr 
    setargs                   3 0
    push           0          i64 
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                i128 1 0
    callproc       &msysp.m$print_i128 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #10336     
#10334: 
    setargs                   2 0
    push           0          u64 
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &msysp.strint u64 
    setret                    u64 
    jump           #10324     
    jump           #10336     
#10335: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pc_tables.opndnames 
    push           pc_libpcl.stropnd.p u64 
    pushptr                   u8 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           "<PCLOPND?>" u64 
    setret                    u64 
    jump           #10324     
#10336: 
    push           &pc_libpcl.stropnd.str 
    setret                    u64 
    jump           #10324     
#10324: 
    retfn                     u64 
End


Proc pc_libpcl.psstr:
    param          pc_libpcl.psstr.s u64 
    procentry                 
    setargs                   2 0
    push           pc_libpcl.psstr.s u64 
    push           pc_libpcl.dest u64 
    callproc       &mlibp.gs_str 
#10347: 
    retproc                   
End


Proc pc_libpcl.psline:
    procentry                 
    setargs                   1 0
    push           pc_libpcl.dest u64 
    callproc       &mlibp.gs_line 
#10349: 
    retproc                   
End


Proc pc_libpcl.psint:
    param          pc_libpcl.psint.a i64 
    procentry                 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_libpcl.psint.a i64 
    callfn         &msysp.strint u64 
    push           pc_libpcl.dest u64 
    callproc       &mlibp.gs_str 
#10351: 
    retproc                   
End


Proc pc_libpcl.psname:
    param          pc_libpcl.psname.d u64 
    procentry                 
    push           pc_libpcl.psname.d u64 
    push           46         
    pushptroff                u16 1 0
    push           8          i64 
    dotindex                  i64 
    jumpfalse      #10353     u64 
    setargs                   2 0
    push           "`"        u64 
    push           pc_libpcl.dest u64 
    callproc       &mlibp.gs_str 
#10353: 
    setargs                   2 0
    push           pc_libpcl.psname.d u64 
    pushptr                   u64 
    push           pc_libpcl.dest u64 
    callproc       &mlibp.gs_str 
#10354: 
    retproc                   
End


Proc pc_libpcl.pstabto:
    param          pc_libpcl.pstabto.n i64 
    local          pc_libpcl.pstabto.col i64 
    procentry                 
    push           pc_libpcl.dest u64 
    push           8          
    pushptroff                i32 1 0
    push           pc_libpcl.destlinestart i64 
    sub                       i64 
    pop            pc_libpcl.pstabto.col i64 
    jump           #10356     
#10357: 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
    push           &pc_libpcl.pstabto.col 
    incr                      i64 1
#10356: 
    push           pc_libpcl.pstabto.n i64 
    push           pc_libpcl.pstabto.col i64 
    jumpgt         #10357     i64 
#10358: 
#10359: 
    retproc                   
End


Proc pc_libpcl.convertstring: i64
    param          pc_libpcl.convertstring.s u64 
    param          pc_libpcl.convertstring.t u64 
    local          pc_libpcl.convertstring.c i64 
    local          pc_libpcl.convertstring.t0 u64 
    procentry                 
    push           pc_libpcl.convertstring.t u64 
    pop            pc_libpcl.convertstring.t0 u64 
    jump           #10361     
#10362: 
    push           pc_libpcl.convertstring.c i64 
    switch         #10363     7 92
    opnd           #10364     
#10363: 
    switchlabel    #10365     
    switchlabel    #10365     
    switchlabel    #10366     
    switchlabel    #10367     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10368     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10365     
    switchlabel    #10365     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10369     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10364     
    switchlabel    #10370     
    endswitch                 
#10369: 
    push           92         u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           34         u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    jump           #10371     
#10367: 
    push           92         u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           110        u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    jump           #10371     
#10368: 
    push           92         u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           99         u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    jump           #10371     
#10366: 
    push           92         u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           116        u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    jump           #10371     
#10370: 
    push           92         u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           92         u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    jump           #10371     
#10365: 
    push           60         u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           pc_libpcl.convertstring.c i64 
    push           10         i64 
    idiv                      i64 
    push           48         i64 
    add                       u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           pc_libpcl.convertstring.c i64 
    push           10         i64 
    irem                      i64 
    push           48         i64 
    add                       u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           62         u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    jump           #10371     
#10364: 
    push           pc_libpcl.convertstring.c u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
#10371: 
#10361: 
    push           &pc_libpcl.convertstring.s 
    loadincr                  u64 1
    pushptr                   u8 
    store          pc_libpcl.convertstring.c i64 
    jumptrue       #10362     i64 
#10372: 
    push           0          u64 
    push           pc_libpcl.convertstring.t u64 
    popptr                    u8 
    push           pc_libpcl.convertstring.t u64 
    push           pc_libpcl.convertstring.t0 u64 
    subref                    i64 1
    setret                    i64 
    jump           #10373     
#10373: 
    retfn                     i64 
End


Proc pc_libpcl.strlabel:
    param          pc_libpcl.strlabel.labelno i64 
    param          pc_libpcl.strlabel.colon i64 
    procentry                 
    setargs                   1 0
    push           "#"        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.strlabel.labelno i64 
    callproc       &pc_libpcl.psint 
    push           pc_libpcl.strlabel.colon i64 
    jumpfalse      #10375     i64 
    setargs                   1 0
    push           ":"        u64 
    callproc       &pc_libpcl.psstr 
#10375: 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
#10376: 
    retproc                   
End


Proc pc_libpcl.psopnd:
    param          pc_libpcl.psopnd.p u64 
    procentry                 
    setargs                   1 0
    setargs                   1 0
    push           pc_libpcl.psopnd.p u64 
    callfn         &pc_libpcl.stropnd u64 
    callproc       &pc_libpcl.psstr 
#10378: 
    retproc                   
End


Proc pc_libpcl.strpmode: u64
    param          pc_libpcl.strpmode.m i64 
    param          pc_libpcl.strpmode.size i64 
    procentry                 
    push           pc_libpcl.strpmode.m i64 
    push           13         i64 
    jumpeq         #10380     i64 
    setargs                   2 0
    push           &pc_tables.pstdnames 
    push           pc_libpcl.strpmode.m i64 
    pushptroff                u64 8 0
    push           &pc_libpcl.strpmode.str 
    callproc       &strcpy    
    jump           #10381     
#10380: 
    setargs                   1 0
    push           &pc_libpcl.strpmode.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "#:#"      u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           &pc_tables.pstdnames 
    push           pc_libpcl.strpmode.m i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libpcl.strpmode.size i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#10381: 
    push           &pc_libpcl.strpmode.str 
    setret                    u64 
    jump           #10382     
#10382: 
    retfn                     u64 
End


Proc pc_libpcl.writepcl:
    param          pc_libpcl.writepcl.p u64 
    procentry                 
    setargs                   1 0
    push           pc_libpcl.writepcl.p u64 
    callproc       &pc_libpcl.strpcl 
    setargs                   1 0
    push           pc_libpcl.dest u64 
    callproc       &mlibp.gs_line 
#10384: 
    retproc                   
End


Proc pc_libpcl.writeallpcl:
    local          pc_libpcl.writeallpcl.p u64 
    local          pc_libpcl.writeallpcl.d u64 
    local          pc_libpcl.writeallpcl.e u64 
    procentry                 
    setargs                   1 0
    push           pc_libpcl.dest u64 
    callproc       &mlibp.gs_init 
    push           pc_libpcl.dest u64 
    push           8          
    pushptroff                i32 1 0
    pop            pc_libpcl.destlinestart i64 
    push           pc_libpcl.pcstart u64 
    pop            pc_libpcl.writeallpcl.p u64 
    jump           #10386     
#10387: 
    setargs                   1 0
    push           pc_libpcl.writeallpcl.p u64 
    callproc       &pc_libpcl.writepcl 
    push           pc_libpcl.dest u64 
    push           8          
    pushptroff                i32 1 0
    pop            pc_libpcl.destlinestart i64 
    push           &pc_libpcl.writeallpcl.p 
    incr                      u64 32
#10386: 
    push           pc_libpcl.writeallpcl.p u64 
    push           pc_libpcl.pccurr u64 
    jumple         #10387     u64 
#10388: 
    push           pc_libpcl.longstring u64 
    jumpfalse      #10389     u64 
    setargs                   2 0
    push           pc_libpcl.longstringlen i64 
    push           pc_libpcl.longstring u64 
    callproc       &mlibp.pcm_free 
#10389: 
    push           pc_libpcl.dest u64 
    push           8          
    pushptroff                i32 1 0
    push           pc_libpcl.dest u64 
    pushptr                   u64 
    setretmult                2
    jump           #10390     
#10390: 
    retfn                     
End


Proc pc_libpcl.nextlabel: i64
    procentry                 
    push           pc_libpcl.labelno i64 
    push           100000     i64 
    jumplt         #10392     i64 
    setargs                   3 0
    push           0          i64 
    push           0          u64 
    push           "Too many global labels" u64 
    callproc       &pc_libpcl.pclerror 
#10392: 
    push           &pc_libpcl.labelno 
    incrload                  i64 1
    setret                    i64 
    jump           #10393     
#10393: 
    retfn                     i64 
End


Proc pc_libpcl.fixlabel: i64
    param          pc_libpcl.fixlabel.userlab i64 
    procentry                 
    push           pc_libpcl.fixlabel.userlab i64 
    push           1          i64 
    push           100000     i64 
    jumpinrange    #10395     i64 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_libpcl.fixlabel.userlab i64 
    callfn         &msysp.strint u64 
    push           "Label no out of range:" u64 
    callproc       &pc_libpcl.perror_s 
#10395: 
    startmult                 
    push           &pc_libpcl.labelmap 
    push           pc_libpcl.fixlabel.userlab i64 
    pushptroff                i32 4 -4
    push           0          i64 
    jumpne         #10396     i64 
    setargs                   0 0
    callfn         &pc_libpcl.nextlabel i64 
    push           &pc_libpcl.labelmap 
    push           pc_libpcl.fixlabel.userlab i64 
    popptroff                 i32 4 -4
    push           pc_libpcl.labelno i64 
    resetmult                 
    jump           #10397     
#10396: 
    push           &pc_libpcl.labelmap 
    push           pc_libpcl.fixlabel.userlab i64 
    pushptroff                i32 4 -4
    endmult                   
#10397: 
    setret                    i64 
    jump           #10398     
#10398: 
    retfn                     i64 
End


Proc pc_libpcl.pdefinelabel:
    param          pc_libpcl.pdefinelabel.label i64 
    param          pc_libpcl.pdefinelabel.seqno i64 
    procentry                 
    push           &pc_libpcl.labeloffset 
    push           pc_libpcl.pdefinelabel.label i64 
    pushptroff                u64 8 -8
    jumpfalse      #10400     u64 
    setargs                   3 0
    push           0          i64 
    setargs                   2 0
    push           0          u64 
    push           pc_libpcl.pdefinelabel.label i64 
    callfn         &msysp.strint u64 
    push           "Redefining label:" u64 
    callproc       &pc_libpcl.pclerror 
#10400: 
    setargs                   2 0
    setargs                   1 0
    push           pc_libpcl.pdefinelabel.label i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    push           20         i64 
    callproc       &pc_libpcl.pcl_gen 
    push           pc_libpcl.pdefinelabel.seqno i64 
    push           pc_libpcl.pccurr u64 
    push           24         
    popptroff                 u32 1 0
    push           pc_libpcl.pccurr u64 
    push           &pc_libpcl.labeloffset 
    push           pc_libpcl.pdefinelabel.label i64 
    popptroff                 u64 8 -8
#10401: 
    retproc                   
End


Proc pc_libpcl.assignlabeltoname:
    param          pc_libpcl.assignlabeltoname.d u64 
    procentry                 
    push           pc_libpcl.assignlabeltoname.d u64 
    push           40         
    pushptroff                i32 1 0
    jumpfalse      #10403     i64 
    jump           #10404     
#10403: 
    setargs                   0 0
    callfn         &pc_libpcl.nextlabel i64 
    push           pc_libpcl.assignlabeltoname.d u64 
    push           40         
    popptroff                 i32 1 0
#10404: 
    retproc                   
End


Proc pc_libpcl.pclerror:
    param          pc_libpcl.pclerror.mess u64 
    param          pc_libpcl.pclerror.param u64 
    param          pc_libpcl.pclerror.lineno i64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "PCC error:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libpcl.pclerror.mess u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           pc_libpcl.pclerror.param u64 
    jumpfalse      #10406     u64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           pc_libpcl.pclerror.param u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#10406: 
    push           pc_libpcl.pclerror.lineno i64 
    jumpfalse      #10407     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           " on line:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libpcl.pclerror.lineno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#10407: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#10408: 
    retproc                   
End


Proc pc_libpcl.getpclstr: u64
    param          pc_libpcl.getpclstr.p u64 
    procentry                 
    setargs                   1 0
    push           pc_libpcl.dest u64 
    callproc       &mlibp.gs_init 
    push           pc_libpcl.dest u64 
    push           8          
    pushptroff                i32 1 0
    pop            pc_libpcl.destlinestart i64 
    setargs                   1 0
    push           pc_libpcl.getpclstr.p u64 
    callproc       &pc_libpcl.strpcl 
    push           0          u64 
    push           pc_libpcl.dest u64 
    pushptr                   u64 
    push           pc_libpcl.dest u64 
    push           8          
    pushptroff                i32 1 0
    popptroff                 u8 1 0
    push           pc_libpcl.dest u64 
    pushptr                   u64 
    setret                    u64 
    jump           #10410     
#10410: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_getopcode:: i64
    procentry                 
    push           pc_libpcl.pccurr u64 
    push           1          
    pushptroff                u8 1 0
    setret                    i64 
    jump           #10412     
#10412: 
    retfn                     i64 
End


Proc pc_libpcl.pcl_setopcode::
    param          pc_libpcl.pcl_setopcode.opc i64 
    procentry                 
    push           pc_libpcl.pcl_setopcode.opc i64 
    push           pc_libpcl.pccurr u64 
    push           1          
    popptroff                 u8 1 0
#10414: 
    retproc                   
End


Proc pc_libpcl.pcl_settype::
    param          pc_libpcl.pcl_settype.t i64 
    param          pc_libpcl.pcl_settype.size i64 
    procentry                 
    push           pc_libpcl.pcl_settype.t i64 
    push           pc_libpcl.pccurr u64 
    push           3          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_settype.size i64 
    push           pc_libpcl.pccurr u64 
    push           4          
    popptroff                 i32 1 0
    push           pc_libpcl.pcl_settype.t i64 
    push           0          i64 
    jumpge         #10416     i64 
    push           13         i64 
    push           pc_libpcl.pccurr u64 
    push           3          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_settype.t i64 
    neg                       i64 
    push           pc_libpcl.pccurr u64 
    push           4          
    popptroff                 i32 1 0
#10416: 
#10417: 
    retproc                   
End


Proc pc_libpcl.pcl_setxy::
    param          pc_libpcl.pcl_setxy.x i64 
    param          pc_libpcl.pcl_setxy.y i64 
    procentry                 
    push           pc_libpcl.pcl_setxy.x i64 
    push           pc_libpcl.pccurr u64 
    push           16         
    popptroff                 i32 1 0
    push           pc_libpcl.pcl_setxy.y i64 
    push           pc_libpcl.pccurr u64 
    push           20         
    popptroff                 i32 1 0
#10419: 
    retproc                   
End


Proc pc_libpcl.pcl_setscale::
    param          pc_libpcl.pcl_setscale.scale i64 
    procentry                 
    push           pc_libpcl.pcl_setscale.scale i64 
    push           pc_libpcl.pccurr u64 
    push           16         
    popptroff                 i32 1 0
#10421: 
    retproc                   
End


Proc pc_libpcl.pcl_setoffset::
    param          pc_libpcl.pcl_setoffset.offset i64 
    procentry                 
    push           pc_libpcl.pcl_setoffset.offset i64 
    push           pc_libpcl.pccurr u64 
    push           20         
    popptroff                 i32 1 0
#10423: 
    retproc                   
End


Proc pc_libpcl.pcl_addoffset::
    param          pc_libpcl.pcl_addoffset.offset i64 
    procentry                 
    push           pc_libpcl.pccurr u64 
    push           20         
    addrefoff                 u64 1 0
    push           pc_libpcl.pcl_addoffset.offset i64 
    addto                     i32 
#10425: 
    retproc                   
End


Proc pc_libpcl.pcl_setincr::
    param          pc_libpcl.pcl_setincr.n i64 
    procentry                 
    push           pc_libpcl.pcl_setincr.n i64 
    push           pc_libpcl.pccurr u64 
    push           16         
    popptroff                 i32 1 0
#10427: 
    retproc                   
End


Proc pc_libpcl.pcl_setnargs::
    param          pc_libpcl.pcl_setnargs.n i64 
    procentry                 
    push           pc_libpcl.pcl_setnargs.n i64 
    push           pc_libpcl.pccurr u64 
    push           16         
    popptroff                 i32 1 0
#10429: 
    retproc                   
End


Proc pc_libpcl.pcl_setnmult::
    param          pc_libpcl.pcl_setnmult.n i64 
    procentry                 
    setargs                   1 0
    push           "SETNMULT" u64 
    callproc       &mlibp.abortprogram 
#10431: 
    retproc                   
End


Proc pc_libpcl.pcl_setrettypes::
    param          pc_libpcl.pcl_setrettypes.types u64 
    param          pc_libpcl.pcl_setrettypes.n i64 
    procentry                 
    setargs                   1 0
    push           "SETRETTYPES" u64 
    callproc       &mlibp.abortprogram 
#10433: 
    retproc                   
End


Proc pc_libpcl.pcl_setexported::
    param          pc_libpcl.pcl_setexported.x i64 
    procentry                 
    push           pc_libpcl.pcl_setexported.x u64 
    push           pc_libpcl.pccurr u64 
    push           2          
    addrefoff                 u64 1 0
    push           0          i64 
    popdotindex               u8 
    push           pc_libpcl.pccurr u64 
    push           8          
    pushptroff                u64 1 0
    jumpfalse      #10435     u64 
    push           pc_libpcl.pcl_setexported.x u64 
    push           pc_libpcl.pccurr u64 
    push           8          
    pushptroff                u64 1 0
    push           46         
    addrefoff                 u64 1 0
    push           3          i64 
    popdotindex               u16 
#10435: 
#10436: 
    retproc                   
End


Proc pc_libpcl.pcl_isthreaded::
    param          pc_libpcl.pcl_isthreaded.x i64 
    procentry                 
    push           pc_libpcl.pccurr u64 
    push           8          
    pushptroff                u64 1 0
    jumpfalse      #10438     u64 
    push           pc_libpcl.pcl_isthreaded.x u64 
    push           pc_libpcl.pccurr u64 
    push           8          
    pushptroff                u64 1 0
    push           46         
    addrefoff                 u64 1 0
    push           7          i64 
    popdotindex               u16 
#10438: 
#10439: 
    retproc                   
End


Proc pc_libpcl.pcl_setnvariadics::
    param          pc_libpcl.pcl_setnvariadics.n i64 
    procentry                 
    push           pc_libpcl.pcl_setnvariadics.n i64 
    push           pc_libpcl.pccurr u64 
    push           20         
    popptroff                 i32 1 0
#10441: 
    retproc                   
End


Proc pc_libpcl.pcl_setalign::
    param          pc_libpcl.pcl_setalign.n i64 
    procentry                 
    push           pc_libpcl.pcl_setalign.n i64 
    push           pc_libpcl.pccurr u64 
    push           16         
    popptroff                 i32 1 0
#10443: 
    retproc                   
End


Proc pc_libpcl.pcl_setrtsproc::
    procentry                 
    push           pc_libpcl.pccurr u64 
    push           8          
    pushptroff                u64 1 0
    jumpfalse      #10445     u64 
    push           pc_libpcl.pccurr u64 
    push           1          
    pushptroff                u8 1 0
    push           8          i64 
    jumpne         #10445     i64 
    setargs                   1 0
    push           pc_libpcl.pccurr u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &pc_libpcl.definertsproc 
#10445: 
#10446: 
    retproc                   
End


Proc pc_libpcl.pcl_setoldtype::
    param          pc_libpcl.pcl_setoldtype.t i64 
    procentry                 
    push           pc_libpcl.pcl_setoldtype.t i64 
    push           pc_libpcl.pccurr u64 
    push           16         
    popptroff                 i32 1 0
#10448: 
    retproc                   
End


Proc pc_libpcl.pcl_setpos::
    param          pc_libpcl.pcl_setpos.pos i64 
    procentry                 
    setargs                   1 0
    push           "SETPOS"   u64 
    callproc       &mlibp.abortprogram 
#10450: 
    retproc                   
End


Proc pc_libpcl.pcl_lasterror:: u64
    procentry                 
    push           pc_libpcl.errormess u64 
    setret                    u64 
    jump           #10452     
#10452: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_writepclfile:: i64
    param          pc_libpcl.pcl_writepclfile.filename u64 
    local          pc_libpcl.pcl_writepclfile.source u64 
    local          pc_libpcl.pcl_writepclfile.length i64 
    procentry                 
    setargs                   0 0
    callproc       &pc_libpcl.fixuppcl 
    setargs                   0 0
    callfn         &pc_libpcl.writeallpcl 
    type                      u64 
    type                      i64 
    pop            pc_libpcl.pcl_writepclfile.source u64 
    pop            pc_libpcl.pcl_writepclfile.length i64 
    setargs                   3 0
    push           pc_libpcl.pcl_writepclfile.length i64 
    push           pc_libpcl.pcl_writepclfile.source u64 
    push           pc_libpcl.pcl_writepclfile.filename u64 
    callfn         &mlibp.writefile i64 
    setret                    i64 
    jump           #10454     
#10454: 
    retfn                     i64 
End


Proc pc_libpcl.perror:
    param          pc_libpcl.perror.mess u64 
    procentry                 
    setargs                   2 0
    push           0          u64 
    push           pc_libpcl.perror.mess u64 
    callproc       &pc_libpcl.perror_s 
#10456: 
    retproc                   
End


Proc pc_libpcl.perror_s:
    param          pc_libpcl.perror_s.mess u64 
    param          pc_libpcl.perror_s.param u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "PCL error:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libpcl.perror_s.mess u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           pc_libpcl.perror_s.param u64 
    jumpfalse      #10458     u64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           ":"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libpcl.perror_s.param u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#10458: 
    push           1          i64 
    stop                      
#10459: 
    retproc                   
End


Proc pc_libpcl.writesymbols:
    local          pc_libpcl.writesymbols.p u64 
    local          pc_libpcl.writesymbols.d u64 
    local          pc_libpcl.writesymbols.e u64 
    procentry                 
    push           pc_libpcl.pcstart u64 
    pop            pc_libpcl.writesymbols.p u64 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    setargs                   1 0
    push           "PROC PCL DEF OPS" u64 
    callproc       &pc_libpcl.psstr 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    jump           #10461     
#10462: 
    push           pc_libpcl.writesymbols.p u64 
    push           1          
    pushptroff                u8 1 0
    push           8          i64 
    casejumpeq     #10463     i64 0
    push           5          i64 
    casejumpeq     #10463     i64 0
    push           6          i64 
    casejumpeq     #10463     i64 0
    push           12         i64 
    casejumpeq     #10463     i64 0
    push           21         i64 
    casejumpeq     #10463     i64 0
    push           18         i64 
    casejumpeq     #10463     i64 0
    push           19         i64 
    casejumpeq     #10463     i64 0
    popstack                  i64 
    jump           #10464     
#10463: 
    push           pc_libpcl.writesymbols.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_libpcl.writesymbols.d u64 
    setargs                   1 0
    push           pc_libpcl.writesymbols.p i64 
    callproc       &pc_libpcl.psint 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.d i64 
    callproc       &pc_libpcl.psint 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.d u64 
    pushptr                   u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           ": "       u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.p u64 
    push           24         
    pushptroff                u32 1 0
    callproc       &pc_libpcl.psint 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    setargs                   1 0
    push           "\tOpcode:" u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           &pc_tables.pclnames 
    push           pc_libpcl.writesymbols.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &pc_libpcl.psstr 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    setargs                   1 0
    push           "\tPCLdef:" u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    startmult                 
    push           pc_libpcl.writesymbols.d u64 
    push           16         
    pushptroff                u64 1 0
    jumpfalse      #10465     u64 
    push           &pc_tables.pclnames 
    push           pc_libpcl.writesymbols.d u64 
    push           16         
    pushptroff                u64 1 0
    push           1          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    resetmult                 
    jump           #10466     
#10465: 
    push           "---"      u64 
    endmult                   
#10466: 
    callproc       &pc_libpcl.psstr 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    setargs                   1 0
    push           "\tIsdefined:" u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.d u64 
    push           46         
    pushptroff                u16 1 0
    push           0          i64 
    dotindex                  i64 
    callproc       &pc_libpcl.psint 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    setargs                   1 0
    push           "\tIsexported:" u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.d u64 
    push           46         
    pushptroff                u16 1 0
    push           3          i64 
    dotindex                  i64 
    callproc       &pc_libpcl.psint 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    setargs                   1 0
    push           "\tIsimported:" u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.d u64 
    push           46         
    pushptroff                u16 1 0
    push           1          i64 
    dotindex                  i64 
    callproc       &pc_libpcl.psint 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    setargs                   1 0
    push           "\tExtvariadics:" u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.p u64 
    push           16         
    pushptroff                i32 1 0
    callproc       &pc_libpcl.psint 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    setargs                   1 0
    push           "\tIsaddrof:" u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.d u64 
    push           46         
    pushptroff                u16 1 0
    push           2          i64 
    dotindex                  i64 
    callproc       &pc_libpcl.psint 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    setargs                   1 0
    push           "\tLabel#:" u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.d u64 
    push           40         
    pushptroff                i32 1 0
    callproc       &pc_libpcl.psint 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    jump           #10467     
#10464: 
#10467: 
#10468: 
    push           &pc_libpcl.writesymbols.p 
    incr                      u64 32
#10461: 
    push           pc_libpcl.writesymbols.p u64 
    push           pc_libpcl.pccurr u64 
    jumple         #10462     u64 
#10469: 
    push           pc_libpcl.pcstart u64 
    pop            pc_libpcl.writesymbols.p u64 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    setargs                   1 0
    push           "PROC PCL UNDEFINED MEM REFS" u64 
    callproc       &pc_libpcl.psstr 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    jump           #10470     
#10471: 
    push           pc_libpcl.writesymbols.p u64 
    pushptr                   u8 
    push           1          i64 
    setjumpeq      #10472     i64 
    push           2          i64 
    setjumpne      #10473     i64 
#10472: 
    push           pc_libpcl.writesymbols.p u64 
    push           8          
    pushptroff                u64 1 0
    push           46         
    pushptroff                u16 1 0
    push           0          i64 
    dotindex                  i64 
    jumptrue       #10473     u64 
    push           pc_libpcl.writesymbols.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_libpcl.writesymbols.d u64 
    setargs                   1 0
    push           pc_libpcl.writesymbols.p i64 
    callproc       &pc_libpcl.psint 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.d i64 
    callproc       &pc_libpcl.psint 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           "Not defined: " u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.d u64 
    pushptr                   u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.p u64 
    push           24         
    pushptroff                u32 1 0
    callproc       &pc_libpcl.psint 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    push           1          u64 
    push           pc_libpcl.writesymbols.d u64 
    push           46         
    addrefoff                 u64 1 0
    push           0          i64 
    popdotindex               u16 
#10473: 
#10474: 
    push           &pc_libpcl.writesymbols.p 
    incr                      u64 32
#10470: 
    push           pc_libpcl.writesymbols.p u64 
    push           pc_libpcl.pccurr u64 
    jumple         #10471     u64 
#10475: 
#10476: 
    retproc                   
End


Proc pc_libpcl.getbasename: u64
    param          pc_libpcl.getbasename.s u64 
    local          pc_libpcl.getbasename.t u64 
    procentry                 
    push           pc_libpcl.getbasename.s u64 
    setargs                   1 0
    push           pc_libpcl.getbasename.s u64 
    callfn         &strlen    i64 
    addrefoff                 u64 1 -1
    pop            pc_libpcl.getbasename.t u64 
    jump           #10478     
#10479: 
    push           &pc_libpcl.getbasename.t 
    decr                      u64 1
#10478: 
    push           pc_libpcl.getbasename.t u64 
    push           pc_libpcl.getbasename.s u64 
    jumple         #10480     u64 
    push           pc_libpcl.getbasename.t u64 
    push           1          i64 
    subrefoff                 u64 1 0
    pushptr                   u8 
    push           46         u64 
    jumpne         #10479     u64 
#10480: 
#10481: 
    push           pc_libpcl.getbasename.t u64 
    setret                    u64 
    jump           #10482     
#10482: 
    retfn                     u64 
End


Proc pc_libpcl.definertsproc:
    param          pc_libpcl.definertsproc.d u64 
    local          pc_libpcl.definertsproc.s u64 
    local          pc_libpcl.definertsproc.c i64 
    local          pc_libpcl.definertsproc.av_1 i64 
    local          pc_libpcl.definertsproc.i i64 
    procentry                 
    push           pc_libpcl.definertsproc.d u64 
    pushptr                   u64 
    pop            pc_libpcl.definertsproc.s u64 
    jump           #10484     
#10485: 
#10484: 
    push           &pc_libpcl.definertsproc.s 
    loadincr                  u64 1
    pushptr                   u8 
    store          pc_libpcl.definertsproc.c i64 
    push           36         i64 
    jumpne         #10485     i64 
#10486: 
#10487: 
    push           1          i64 
    pop            pc_libpcl.definertsproc.i i64 
    push           6          i64 
    pop            pc_libpcl.definertsproc.av_1 i64 
    push           pc_libpcl.definertsproc.av_1 i64 
    push           1          i64 
    jumplt         #10488     i64 
#10489: 
    setargs                   2 0
    push           pc_libpcl.definertsproc.s u64 
    push           &pc_tables.rtsnames 
    push           pc_libpcl.definertsproc.i i64 
    pushptroff                u64 8 -8
    push           4          i64 
    addrefoff                 u64 1 0
    callfn         &mlibp.eqstring i64 
    jumpfalse      #10490     i64 
    push           1          u64 
    push           pc_libpcl.definertsproc.d u64 
    push           46         
    addrefoff                 u64 1 0
    push           9          i64 
    popdotindex               u16 
    push           pc_libpcl.definertsproc.i i64 
    push           pc_libpcl.definertsproc.d u64 
    push           26         
    popptroff                 u8 1 0
    push           pc_libpcl.definertsproc.d u64 
    push           &pc_decls.rtsproctable 
    push           pc_libpcl.definertsproc.i i64 
    popptroff                 u64 8 -8
    jump           #10491     
#10490: 
#10492: 
    forup          #10489     i64 1
    opnd           pc_libpcl.definertsproc.i 
    opnd           pc_libpcl.definertsproc.av_1 
#10488: 
#10493: 
#10491: 
    retproc                   
End


Proc mlibp.pcm_alloc: u64
    param          mlibp.pcm_alloc.n i64 
    local          mlibp.pcm_alloc.p u64 
    procentry                 
    push           mlibp.pcm_setup u8 
    jumptrue       #10495     i64 
    setargs                   0 0
    callproc       &mlibp.pcm_init 
#10495: 
    push           mlibp.pcm_alloc.n i64 
    push           2048       i64 
    jumple         #10496     i64 
    setargs                   1 0
    push           mlibp.pcm_alloc.n i64 
    callfn         &mlibp.pcm_getac i64 
    pop            mlibp.alloccode i64 
    push           &mlibp.allocupper 
    push           mlibp.alloccode i64 
    pushptroff                i64 8 0
    pop            mlibp.allocbytes i64 
    setargs                   1 0
    push           mlibp.allocbytes i64 
    callfn         &mlibp.allocmem u64 
    pop            mlibp.pcm_alloc.p u64 
    push           mlibp.pcm_alloc.p u64 
    jumptrue       #10497     u64 
    setargs                   1 0
    push           "pcm_alloc failure" u64 
    callproc       &mlibp.abortprogram 
#10497: 
    push           mlibp.pcm_alloc.p u64 
    setret                    u64 
    jump           #10498     
#10496: 
    push           &mlibp.sizeindextable 
    push           mlibp.pcm_alloc.n i64 
    pushptroff                u8 1 0
    pop            mlibp.alloccode i64 
    push           &mlibp.allocupper 
    push           mlibp.alloccode i64 
    pushptroff                i64 8 0
    pop            mlibp.allocbytes i64 
    push           &mlibp.smallmemtotal 
    push           mlibp.allocbytes i64 
    addto                     i64 
    push           &mlibp.freelist 
    push           mlibp.alloccode i64 
    pushptroff                u64 8 0
    store          mlibp.pcm_alloc.p u64 
    jumpfalse      #10499     u64 
    push           &mlibp.freelist 
    push           mlibp.alloccode i64 
    pushptroff                u64 8 0
    pushptr                   u64 
    push           &mlibp.freelist 
    push           mlibp.alloccode i64 
    popptroff                 u64 8 0
    push           mlibp.pcm_alloc.p u64 
    setret                    u64 
    jump           #10498     
#10499: 
    push           mlibp.pcheapptr u64 
    pop            mlibp.pcm_alloc.p u64 
    push           &mlibp.pcheapptr 
    push           mlibp.allocbytes i64 
    addrefoffto               u64 1 0
    push           mlibp.pcheapptr u64 
    push           mlibp.pcheapend u64 
    jumplt         #10500     u64 
    setargs                   1 0
    push           mlibp.allocbytes i64 
    callfn         &mlibp.pcm_newblock u64 
    pop            mlibp.pcm_alloc.p u64 
    push           mlibp.pcm_alloc.p u64 
    setret                    u64 
    jump           #10498     
#10500: 
    push           mlibp.pcm_alloc.p u64 
    setret                    u64 
    jump           #10498     
#10498: 
    retfn                     u64 
End


Proc mlibp.pcm_free:
    param          mlibp.pcm_free.p u64 
    param          mlibp.pcm_free.n i64 
    local          mlibp.pcm_free.acode i64 
    procentry                 
    push           mlibp.pcm_free.n i64 
    push           0          i64 
    jumpne         #10502     i64 
    jump           #10503     
#10502: 
    push           mlibp.pcm_free.n i64 
    push           2048       i64 
    jumple         #10504     i64 
    setargs                   1 0
    push           mlibp.pcm_free.p u64 
    callproc       &free      
    jump           #10503     
#10504: 
    push           mlibp.pcm_free.p u64 
    jumpfalse      #10505     u64 
    push           &mlibp.sizeindextable 
    push           mlibp.pcm_free.n i64 
    pushptroff                u8 1 0
    pop            mlibp.pcm_free.acode i64 
    push           &mlibp.smallmemtotal 
    push           &mlibp.allocupper 
    push           mlibp.pcm_free.acode i64 
    pushptroff                i64 8 0
    subto                     i64 
    push           &mlibp.freelist 
    push           mlibp.pcm_free.acode i64 
    pushptroff                u64 8 0
    push           mlibp.pcm_free.p u64 
    popptr                    u64 
    push           mlibp.pcm_free.p u64 
    push           &mlibp.freelist 
    push           mlibp.pcm_free.acode i64 
    popptroff                 u64 8 0
#10505: 
#10503: 
    retproc                   
End


Proc mlibp.pcm_freeac:
    param          mlibp.pcm_freeac.p u64 
    param          mlibp.pcm_freeac.alloc i64 
    procentry                 
    setargs                   2 0
    push           &mlibp.allocupper 
    push           mlibp.pcm_freeac.alloc i64 
    pushptroff                i64 8 0
    push           mlibp.pcm_freeac.p u64 
    callproc       &mlibp.pcm_free 
#10507: 
    retproc                   
End


Proc mlibp.pcm_copymem4:
    param          mlibp.pcm_copymem4.p u64 
    param          mlibp.pcm_copymem4.q u64 
    param          mlibp.pcm_copymem4.n i64 
    procentry                 
    setargs                   3 0
    push           mlibp.pcm_copymem4.n u64 
    push           mlibp.pcm_copymem4.q u64 
    push           mlibp.pcm_copymem4.p u64 
    callproc       &memcpy    
#10509: 
    retproc                   
End


Proc mlibp.pcm_clearmem:
    param          mlibp.pcm_clearmem.p u64 
    param          mlibp.pcm_clearmem.n i64 
    procentry                 
    setargs                   3 0
    push           mlibp.pcm_clearmem.n u64 
    push           0          i64 
    push           mlibp.pcm_clearmem.p u64 
    callproc       &memset    
#10511: 
    retproc                   
End


Proc mlibp.pcm_init:
    local          mlibp.pcm_init.j i64 
    local          mlibp.pcm_init.k i64 
    local          mlibp.pcm_init.k1 i64 
    local          mlibp.pcm_init.k2 i64 
    local          mlibp.pcm_init.size i64 
    local          mlibp.pcm_init.av_1 i64 
    local          mlibp.pcm_init.i i64 
    procentry                 
    push           0          i64 
    pop            mlibp.alloccode i64 
    push           mlibp.pcm_setup u8 
    jumpfalse      #10513     i64 
    jump           #10514     
#10513: 
    setargs                   1 0
    push           0          i64 
    callproc       &mlibp.pcm_newblock 
    push           mlibp.pcheapptr u64 
    pop            mlibp.allocbase u64 
#10515: 
    push           1          i64 
    pop            mlibp.pcm_init.i i64 
#10516: 
    push           1          i64 
    pop            mlibp.pcm_init.j i64 
    push           16         i64 
    pop            mlibp.pcm_init.k i64 
    jump           #10517     
#10518: 
    push           mlibp.pcm_init.k i64 
    push           1          i64 
    shl                       i64 
    pop            mlibp.pcm_init.k i64 
    push           &mlibp.pcm_init.j 
    incr                      i64 1
#10517: 
    push           mlibp.pcm_init.i i64 
    push           mlibp.pcm_init.k i64 
    jumpgt         #10518     i64 
#10519: 
    push           mlibp.pcm_init.j i64 
    push           &mlibp.sizeindextable 
    push           mlibp.pcm_init.i i64 
    popptroff                 u8 1 0
#10520: 
    forup          #10516     i64 1
    opnd           mlibp.pcm_init.i 
    opnd           2048       
#10521: 
    push           16         u64 
    push           &mlibp.allocupper 
    push           1          i64 
    popptroff                 u64 8 0
    push           16         i64 
    pop            mlibp.pcm_init.size i64 
#10522: 
    push           2          i64 
    pop            mlibp.pcm_init.i i64 
#10523: 
    push           &mlibp.pcm_init.size 
    push           2          i64 
    multo                     i64 
    push           mlibp.pcm_init.size u64 
    push           &mlibp.allocupper 
    push           mlibp.pcm_init.i i64 
    popptroff                 u64 8 0
    push           mlibp.pcm_init.size i64 
    push           33554432   i64 
    jumplt         #10524     i64 
    push           mlibp.pcm_init.i i64 
    pop            mlibp.pcm_init.k i64 
    jump           #10525     
#10524: 
#10526: 
    forup          #10523     i64 1
    opnd           mlibp.pcm_init.i 
    opnd           27         
#10525: 
#10527: 
    push           mlibp.pcm_init.k i64 
    push           1          i64 
    add                       i64 
    pop            mlibp.pcm_init.i i64 
    push           300        i64 
    pop            mlibp.pcm_init.av_1 i64 
    push           mlibp.pcm_init.i i64 
    push           mlibp.pcm_init.av_1 i64 
    jumpgt         #10528     i64 
#10529: 
    push           &mlibp.pcm_init.size 
    push           33554432   i64 
    addto                     i64 
    push           mlibp.pcm_init.size i64 
    push           8589934592 i64 
    jumpge         #10530     i64 
    push           mlibp.pcm_init.size u64 
    push           &mlibp.allocupper 
    push           mlibp.pcm_init.i i64 
    popptroff                 u64 8 0
    push           mlibp.pcm_init.size u64 
    pop            mlibp.maxmemory u64 
    jump           #10531     
#10530: 
    push           mlibp.pcm_init.i i64 
    push           1          i64 
    sub                       i64 
    pop            mlibp.maxalloccode i64 
    jump           #10528     
#10531: 
#10532: 
    forup          #10529     i64 1
    opnd           mlibp.pcm_init.i 
    opnd           mlibp.pcm_init.av_1 
#10528: 
    push           1          i64 
    pop            mlibp.pcm_setup u8 
#10514: 
    retproc                   
End


Proc mlibp.pcm_getac: i64
    param          mlibp.pcm_getac.size i64 
    procentry                 
    push           mlibp.pcm_getac.size i64 
    push           2048       i64 
    jumpgt         #10534     i64 
    push           &mlibp.sizeindextable 
    push           mlibp.pcm_getac.size i64 
    pushptroff                u8 1 0
    setret                    i64 
    jump           #10535     
#10534: 
    push           mlibp.pcm_getac.size i64 
    push           255        i64 
    add                       i64 
    push           8          i64 
    shr                       i64 
    pop            mlibp.pcm_getac.size i64 
    push           mlibp.pcm_getac.size i64 
    push           2048       i64 
    jumpgt         #10536     i64 
    push           &mlibp.sizeindextable 
    push           mlibp.pcm_getac.size i64 
    pushptroff                u8 1 0
    push           8          i64 
    add                       i64 
    setret                    i64 
    jump           #10535     
#10536: 
    push           mlibp.pcm_getac.size i64 
    push           63         i64 
    add                       i64 
    push           6          i64 
    shr                       i64 
    pop            mlibp.pcm_getac.size i64 
    push           mlibp.pcm_getac.size i64 
    push           2048       i64 
    jumpgt         #10537     i64 
    push           &mlibp.sizeindextable 
    push           mlibp.pcm_getac.size i64 
    pushptroff                u8 1 0
    push           14         i64 
    add                       i64 
    setret                    i64 
    jump           #10535     
#10537: 
    push           mlibp.pcm_getac.size i64 
    push           2048       i64 
    sub                       i64 
    push           2047       i64 
    add                       i64 
    push           2048       i64 
    idiv                      i64 
    push           22         i64 
    add                       i64 
    pop            mlibp.pcm_getac.size i64 
    push           mlibp.pcm_getac.size i64 
    setret                    i64 
    jump           #10535     
#10535: 
    retfn                     i64 
End


Proc mlibp.pcm_newblock: u64
    param          mlibp.pcm_newblock.itemsize i64 
    local          mlibp.pcm_newblock.p u64 
    procentry                 
    push           &mlibp.pcm_newblock.totalheapsize 
    push           2097152    i64 
    addto                     i64 
    push           0          i64 
    pop            mlibp.alloccode i64 
    setargs                   1 0
    push           2097152    i64 
    callfn         &mlibp.allocmem u64 
    pop            mlibp.pcm_newblock.p u64 
    push           mlibp.pcm_newblock.p u64 
    push           0          u64 
    jumpne         #10539     u64 
    setargs                   1 0
    push           "Can't alloc pc heap" u64 
    callproc       &mlibp.abortprogram 
#10539: 
    push           mlibp.pcm_newblock.p u64 
    pop            mlibp.pcheapptr u64 
    push           mlibp.pcm_newblock.p u64 
    push           2097152    i64 
    addrefoff                 u64 1 0
    pop            mlibp.pcheapend u64 
    push           mlibp.pcheapstart u64 
    push           0          u64 
    jumpne         #10540     u64 
    push           mlibp.pcm_newblock.p u64 
    pop            mlibp.pcheapstart u64 
#10540: 
    push           &mlibp.pcheapptr 
    push           mlibp.pcm_newblock.itemsize i64 
    addrefoffto               u64 1 0
    push           mlibp.pcm_newblock.p u64 
    setret                    u64 
    jump           #10541     
#10541: 
    retfn                     u64 
End


Proc mlibp.pcm_round: i64
    param          mlibp.pcm_round.n i64 
    procentry                 
    startmult                 
    push           mlibp.pcm_round.n i64 
    push           2048       i64 
    jumple         #10543     i64 
    push           mlibp.pcm_round.n i64 
    resetmult                 
    jump           #10544     
#10543: 
    push           &mlibp.pcm_round.allocbytes 
    push           &mlibp.sizeindextable 
    push           mlibp.pcm_round.n i64 
    pushptroff                u8 1 0
    pushptroff                i32 4 0
    endmult                   
#10544: 
    setret                    i64 
    jump           #10545     
#10545: 
    retfn                     i64 
End


Proc mlibp.pcm_array: i64
    param          mlibp.pcm_array.n i64 
    local          mlibp.pcm_array.m i64 
    procentry                 
    startmult                 
    push           mlibp.pcm_array.n i64 
    push           2048       i64 
    jumpgt         #10547     i64 
    setargs                   1 0
    push           mlibp.pcm_array.n i64 
    callfn         &mlibp.pcm_round i64 
    resetmult                 
    jump           #10548     
#10547: 
    push           2048       i64 
    pop            mlibp.pcm_array.m i64 
    jump           #10549     
#10550: 
    push           &mlibp.pcm_array.m 
    push           1          i64 
    shlto                     i64 
#10549: 
    push           mlibp.pcm_array.n i64 
    push           mlibp.pcm_array.m i64 
    jumpgt         #10550     i64 
#10551: 
    push           mlibp.pcm_array.m i64 
    endmult                   
#10548: 
    setret                    i64 
    jump           #10552     
#10552: 
    retfn                     i64 
End


Proc mlibp.pcm_printfreelist:
    param          mlibp.pcm_printfreelist.size i64 
    param          mlibp.pcm_printfreelist.p u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Size: "   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mlibp.pcm_printfreelist.size i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #10554     
#10555: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           " "        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   2 0
    push           "h"        u64 
    push           mlibp.pcm_printfreelist.p u64 
    callproc       &msysp.m$print_ptr 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           mlibp.pcm_printfreelist.p u64 
    pushptr                   u64 
    pop            mlibp.pcm_printfreelist.p u64 
#10554: 
    push           mlibp.pcm_printfreelist.p u64 
    jumptrue       #10555     u64 
#10556: 
    setargs                   1 0
    push           ""         u64 
    callproc       &puts      
#10557: 
    retproc                   
End


Proc mlibp.pcm_diags:
    param          mlibp.pcm_diags.caption u64 
    local          mlibp.pcm_diags.m i64 
    local          mlibp.pcm_diags.i i64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "HEAP FREELISTS:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mlibp.pcm_diags.caption u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           16         i64 
    pop            mlibp.pcm_diags.m i64 
#10559: 
    push           1          i64 
    pop            mlibp.pcm_diags.i i64 
#10560: 
    setargs                   2 0
    push           &mlibp.freelist 
    push           mlibp.pcm_diags.i i64 
    pushptroff                u64 8 0
    push           mlibp.pcm_diags.m i64 
    callproc       &mlibp.pcm_printfreelist 
    push           &mlibp.pcm_diags.m 
    push           1          i64 
    shlto                     i64 
#10561: 
    forup          #10560     i64 1
    opnd           mlibp.pcm_diags.i 
    opnd           8          
#10562: 
#10563: 
    retproc                   
End


Proc mlibp.pcm_allocz: u64
    param          mlibp.pcm_allocz.n i64 
    local          mlibp.pcm_allocz.p u64 
    procentry                 
    setargs                   1 0
    push           mlibp.pcm_allocz.n i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            mlibp.pcm_allocz.p u64 
    setargs                   3 0
    push           mlibp.pcm_allocz.n u64 
    push           0          i64 
    push           mlibp.pcm_allocz.p u64 
    callproc       &memset    
    push           mlibp.pcm_allocz.p u64 
    setret                    u64 
    jump           #10565     
#10565: 
    retfn                     u64 
End


Proc mlibp.pcm_copyheapstring: u64
    param          mlibp.pcm_copyheapstring.s u64 
    local          mlibp.pcm_copyheapstring.q u64 
    local          mlibp.pcm_copyheapstring.n i64 
    procentry                 
    push           mlibp.pcm_copyheapstring.s u64 
    push           0          u64 
    jumpne         #10567     u64 
    push           0          u64 
    setret                    u64 
    jump           #10568     
#10567: 
    setargs                   1 0
    push           mlibp.pcm_copyheapstring.s u64 
    callfn         &strlen    i64 
    push           1          i64 
    add                       i64 
    pop            mlibp.pcm_copyheapstring.n i64 
    setargs                   1 0
    push           mlibp.pcm_copyheapstring.n i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            mlibp.pcm_copyheapstring.q u64 
    setargs                   3 0
    push           mlibp.pcm_copyheapstring.n u64 
    push           mlibp.pcm_copyheapstring.s u64 
    push           mlibp.pcm_copyheapstring.q u64 
    callproc       &memcpy    
    push           mlibp.pcm_copyheapstring.q u64 
    setret                    u64 
    jump           #10568     
#10568: 
    retfn                     u64 
End


Proc mlibp.pcm_copyheapstringn: u64
    param          mlibp.pcm_copyheapstringn.s u64 
    param          mlibp.pcm_copyheapstringn.n i64 
    local          mlibp.pcm_copyheapstringn.q u64 
    procentry                 
    push           mlibp.pcm_copyheapstringn.s u64 
    push           0          u64 
    jumpne         #10570     u64 
    push           0          u64 
    setret                    u64 
    jump           #10571     
#10570: 
    setargs                   1 0
    push           mlibp.pcm_copyheapstringn.n i64 
    push           1          i64 
    add                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            mlibp.pcm_copyheapstringn.q u64 
    setargs                   3 0
    push           mlibp.pcm_copyheapstringn.n u64 
    push           mlibp.pcm_copyheapstringn.s u64 
    push           mlibp.pcm_copyheapstringn.q u64 
    callproc       &memcpy    
    push           0          u64 
    push           mlibp.pcm_copyheapstringn.q u64 
    push           mlibp.pcm_copyheapstringn.n i64 
    popptroff                 u8 1 0
    push           mlibp.pcm_copyheapstringn.q u64 
    setret                    u64 
    jump           #10571     
#10571: 
    retfn                     u64 
End


Proc mlibp.pcm_copyheapblock: u64
    param          mlibp.pcm_copyheapblock.s u64 
    param          mlibp.pcm_copyheapblock.length i64 
    local          mlibp.pcm_copyheapblock.q u64 
    procentry                 
    push           mlibp.pcm_copyheapblock.length i64 
    push           0          i64 
    jumpne         #10573     i64 
    push           0          u64 
    setret                    u64 
    jump           #10574     
#10573: 
    setargs                   1 0
    push           mlibp.pcm_copyheapblock.length i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            mlibp.pcm_copyheapblock.q u64 
    setargs                   3 0
    push           mlibp.pcm_copyheapblock.length u64 
    push           mlibp.pcm_copyheapblock.s u64 
    push           mlibp.pcm_copyheapblock.q u64 
    callproc       &memcpy    
    push           mlibp.pcm_copyheapblock.q u64 
    setret                    u64 
    jump           #10574     
#10574: 
    retfn                     u64 
End


Proc mlibp.addtomemalloc:
    param          mlibp.addtomemalloc.ptr u64 
    param          mlibp.addtomemalloc.size i64 
    local          mlibp.addtomemalloc.i i64 
    procentry                 
#10576: 
    push           1          i64 
    pop            mlibp.addtomemalloc.i i64 
#10577: 
    push           &mlibp.memalloctable 
    push           mlibp.addtomemalloc.i i64 
    pushptroff                u64 8 -8
    push           mlibp.addtomemalloc.ptr u64 
    jumpne         #10578     u64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "ALLOC ERROR:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mlibp.addtomemalloc.ptr u64 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   1 0
    push           "ALREADY ALLOCATED\n\n\n" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           2          i64 
    stop                      
#10578: 
    push           &mlibp.memalloctable 
    push           mlibp.addtomemalloc.i i64 
    pushptroff                u64 8 -8
    push           0          u64 
    jumpne         #10579     u64 
    push           mlibp.addtomemalloc.ptr u64 
    push           &mlibp.memalloctable 
    push           mlibp.addtomemalloc.i i64 
    popptroff                 u64 8 -8
    push           mlibp.addtomemalloc.size i64 
    push           &mlibp.memallocsize 
    push           mlibp.addtomemalloc.i i64 
    popptroff                 i32 4 -4
    jump           #10580     
#10579: 
#10581: 
    forup          #10577     i64 1
    opnd           mlibp.addtomemalloc.i 
    opnd           2          
#10582: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "MEMALLOCTABLE FULL\n\n\n\n" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &mwindowsp.os_getch 
    push           3          i64 
    stop                      
#10580: 
    retproc                   
End


Proc mlibp.removefrommemalloc:
    param          mlibp.removefrommemalloc.ptr u64 
    param          mlibp.removefrommemalloc.size i64 
    local          mlibp.removefrommemalloc.i i64 
    procentry                 
#10584: 
    push           1          i64 
    pop            mlibp.removefrommemalloc.i i64 
#10585: 
    push           &mlibp.memalloctable 
    push           mlibp.removefrommemalloc.i i64 
    pushptroff                u64 8 -8
    push           mlibp.removefrommemalloc.ptr u64 
    jumpne         #10586     u64 
    push           &mlibp.memallocsize 
    push           mlibp.removefrommemalloc.i i64 
    pushptroff                i32 4 -4
    push           mlibp.removefrommemalloc.size i64 
    jumpeq         #10587     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "REMOVE:FOUND" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mlibp.removefrommemalloc.ptr u64 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   1 0
    push           "IN MEMALLOCTABLE, FREESIZE=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mlibp.removefrommemalloc.size i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           ", BUT STORED AS BLOCK SIZE:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mlibp.memallocsize 
    push           mlibp.removefrommemalloc.i i64 
    pushptroff                i32 4 -4
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "MEMSIZE"  u64 
    callproc       &mlibp.abortprogram 
#10587: 
    push           0          u64 
    push           &mlibp.memalloctable 
    push           mlibp.removefrommemalloc.i i64 
    popptroff                 u64 8 -8
    jump           #10588     
#10586: 
#10589: 
    forup          #10585     i64 1
    opnd           mlibp.removefrommemalloc.i 
    opnd           2          
#10590: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "CAN'T FIND" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mlibp.removefrommemalloc.ptr u64 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   1 0
    push           "IN MEMALLOCTABLE" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mlibp.removefrommemalloc.size i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "MEM"      u64 
    callproc       &mlibp.abortprogram 
    push           4          i64 
    stop                      
#10588: 
    retproc                   
End


Proc mlibp.allocmem: u64
    param          mlibp.allocmem.n i64 
    local          mlibp.allocmem.p u64 
    procentry                 
    setargs                   1 0
    push           mlibp.allocmem.n u64 
    callfn         &malloc    u64 
    pop            mlibp.allocmem.p u64 
    push           mlibp.allocmem.p u64 
    jumpfalse      #10592     u64 
    push           mlibp.allocmem.p u64 
    setret                    u64 
    jump           #10593     
#10592: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mlibp.allocmem.n i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           mlibp.memtotal i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Alloc mem failure" u64 
    callproc       &mlibp.abortprogram 
    push           0          u64 
    setret                    u64 
    jump           #10593     
#10593: 
    retfn                     u64 
End


Proc mlibp.reallocmem: u64
    param          mlibp.reallocmem.p u64 
    param          mlibp.reallocmem.n i64 
    procentry                 
    setargs                   2 0
    push           mlibp.reallocmem.n u64 
    push           mlibp.reallocmem.p u64 
    callfn         &realloc   u64 
    pop            mlibp.reallocmem.p u64 
    push           mlibp.reallocmem.p u64 
    jumpfalse      #10595     u64 
    push           mlibp.reallocmem.p u64 
    setret                    u64 
    jump           #10596     
#10595: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mlibp.reallocmem.n i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Realloc mem failure" u64 
    callproc       &mlibp.abortprogram 
    push           0          u64 
    setret                    u64 
    jump           #10596     
#10596: 
    retfn                     u64 
End


Proc mlibp.abortprogram:
    param          mlibp.abortprogram.s u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mlibp.abortprogram.s u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "ABORTING: Press key..." u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           5          i64 
    stop                      
#10598: 
    retproc                   
End


Proc mlibp.getfilesize: i64
    param          mlibp.getfilesize.handlex u64 
    local          mlibp.getfilesize.p u32 
    local          mlibp.getfilesize.size u32 
    procentry                 
    setargs                   1 0
    push           mlibp.getfilesize.handlex u64 
    callfn         &ftell     i32 
    pop            mlibp.getfilesize.p u32 
    setargs                   3 0
    push           2          i64 
    push           0          i64 
    push           mlibp.getfilesize.handlex u64 
    callproc       &fseek     
    setargs                   1 0
    push           mlibp.getfilesize.handlex u64 
    callfn         &ftell     i32 
    pop            mlibp.getfilesize.size u32 
    setargs                   3 0
    push           0          i64 
    push           mlibp.getfilesize.p u32 
    push           mlibp.getfilesize.handlex u64 
    callproc       &fseek     
    push           mlibp.getfilesize.size u32 
    setret                    i64 
    jump           #10600     
#10600: 
    retfn                     i64 
End


Proc mlibp.readrandom:
    param          mlibp.readrandom.handlex u64 
    param          mlibp.readrandom.mem u64 
    param          mlibp.readrandom.offset i64 
    param          mlibp.readrandom.size i64 
    local          mlibp.readrandom.a i64 
    procentry                 
    setargs                   3 0
    push           0          i64 
    push           mlibp.readrandom.offset i64 
    push           mlibp.readrandom.handlex u64 
    callproc       &fseek     
    setargs                   4 0
    push           mlibp.readrandom.handlex u64 
    push           mlibp.readrandom.size u64 
    push           1          u64 
    push           mlibp.readrandom.mem u64 
    callfn         &fread     i64 
    pop            mlibp.readrandom.a i64 
#10602: 
    retproc                   
End


Proc mlibp.writerandom: i64
    param          mlibp.writerandom.handlex u64 
    param          mlibp.writerandom.mem u64 
    param          mlibp.writerandom.offset i64 
    param          mlibp.writerandom.size i64 
    procentry                 
    setargs                   3 0
    push           0          i64 
    push           mlibp.writerandom.offset i64 
    push           mlibp.writerandom.handlex u64 
    callproc       &fseek     
    setargs                   4 0
    push           mlibp.writerandom.handlex u64 
    push           mlibp.writerandom.size u64 
    push           1          u64 
    push           mlibp.writerandom.mem u64 
    callfn         &fwrite    i64 
    setret                    i64 
    jump           #10604     
#10604: 
    retfn                     i64 
End


Proc mlibp.setfilepos: i64
    param          mlibp.setfilepos.file u64 
    param          mlibp.setfilepos.offset i64 
    procentry                 
    setargs                   3 0
    push           0          i64 
    push           mlibp.setfilepos.offset i64 
    push           mlibp.setfilepos.file u64 
    callfn         &fseek     i32 
    setret                    i64 
    jump           #10606     
#10606: 
    retfn                     i64 
End


Proc mlibp.getfilepos: i64
    param          mlibp.getfilepos.file u64 
    procentry                 
    setargs                   1 0
    push           mlibp.getfilepos.file u64 
    callfn         &ftell     i32 
    setret                    i64 
    jump           #10608     
#10608: 
    retfn                     i64 
End


Proc mlibp.readfile: u64
    param          mlibp.readfile.filename u64 
    local          mlibp.readfile.f u64 
    local          mlibp.readfile.size i64 
    local          mlibp.readfile.m u64 
    local          mlibp.readfile.p u64 
    procentry                 
    setargs                   2 0
    push           "rb"       u64 
    push           mlibp.readfile.filename u64 
    callfn         &fopen     u64 
    pop            mlibp.readfile.f u64 
    push           mlibp.readfile.f u64 
    push           0          u64 
    jumpne         #10610     u64 
    push           0          u64 
    setret                    u64 
    jump           #10611     
#10610: 
    setargs                   1 0
    push           mlibp.readfile.f u64 
    callfn         &mlibp.getfilesize i64 
    store          mlibp.readfile.size i64 
    pop            mlibp.rfsize i64 
    setargs                   1 0
    push           mlibp.readfile.size i64 
    push           4          i64 
    add                       u64 
    callfn         &malloc    u64 
    pop            mlibp.readfile.m u64 
    push           mlibp.readfile.m u64 
    push           0          u64 
    jumpne         #10612     u64 
    push           0          u64 
    setret                    u64 
    jump           #10611     
#10612: 
    setargs                   4 0
    push           mlibp.readfile.size i64 
    push           0          i64 
    push           mlibp.readfile.m u64 
    push           mlibp.readfile.f u64 
    callproc       &mlibp.readrandom 
    push           mlibp.readfile.m u64 
    push           mlibp.readfile.size i64 
    addrefoff                 u64 1 0
    pop            mlibp.readfile.p u64 
    push           0          i64 
    push           mlibp.readfile.p u64 
    popptr                    u8 
    push           26         i64 
    push           mlibp.readfile.p u64 
    push           1          i64 
    popptroff                 u8 1 0
    push           0          i64 
    push           mlibp.readfile.p u64 
    push           2          i64 
    popptroff                 u8 1 0
    setargs                   1 0
    push           mlibp.readfile.f u64 
    callproc       &fclose    
    push           mlibp.readfile.m u64 
    setret                    u64 
    jump           #10611     
#10611: 
    retfn                     u64 
End


Proc mlibp.writefile: i64
    param          mlibp.writefile.filename u64 
    param          mlibp.writefile.data u64 
    param          mlibp.writefile.size i64 
    local          mlibp.writefile.f u64 
    local          mlibp.writefile.n i64 
    procentry                 
    setargs                   2 0
    push           "wb"       u64 
    push           mlibp.writefile.filename u64 
    callfn         &fopen     u64 
    pop            mlibp.writefile.f u64 
    push           mlibp.writefile.f u64 
    push           0          u64 
    jumpne         #10614     u64 
    push           0          i64 
    setret                    i64 
    jump           #10615     
#10614: 
    setargs                   4 0
    push           mlibp.writefile.size i64 
    push           0          i64 
    push           mlibp.writefile.data u64 
    push           mlibp.writefile.f u64 
    callfn         &mlibp.writerandom i64 
    pop            mlibp.writefile.n i64 
    setargs                   1 0
    push           mlibp.writefile.f u64 
    callproc       &fclose    
    push           mlibp.writefile.n i64 
    setret                    i64 
    jump           #10615     
#10615: 
    retfn                     i64 
End


Proc mlibp.checkfile: i64
    param          mlibp.checkfile.file u64 
    local          mlibp.checkfile.f u64 
    procentry                 
    setargs                   2 0
    push           "rb"       u64 
    push           mlibp.checkfile.file u64 
    callfn         &fopen     u64 
    store          mlibp.checkfile.f u64 
    jumpfalse      #10617     u64 
    setargs                   1 0
    push           mlibp.checkfile.f u64 
    callproc       &fclose    
    push           1          i64 
    setret                    i64 
    jump           #10618     
#10617: 
    push           0          i64 
    setret                    i64 
    jump           #10618     
#10618: 
    retfn                     i64 
End


Proc mlibp.readlinen:
    param          mlibp.readlinen.handlex u64 
    param          mlibp.readlinen.buffer u64 
    param          mlibp.readlinen.size i64 
    local          mlibp.readlinen.ch i64 
    local          mlibp.readlinen.p u64 
    local          mlibp.readlinen.n i64 
    local          mlibp.readlinen.buff block:100 
    local          mlibp.readlinen.crseen u8 
    procentry                 
    push           mlibp.readlinen.handlex u64 
    push           0          u64 
    jumpne         #10620     u64 
    setargs                   0 0
    callfn         &mwindowsp.os_getstdin u64 
    pop            mlibp.readlinen.handlex u64 
#10620: 
    push           mlibp.readlinen.handlex u64 
    push           0          u64 
    jumpne         #10621     u64 
    push           0          i64 
    pop            mlibp.readlinen.n i64 
    push           mlibp.readlinen.buffer u64 
    pop            mlibp.readlinen.p u64 
#10622: 
    setargs                   0 0
    callfn         &getchar   i32 
    pop            mlibp.readlinen.ch i64 
    push           mlibp.readlinen.ch i64 
    push           13         i64 
    jumpeq         #10623     i64 
    push           mlibp.readlinen.ch i64 
    push           10         i64 
    jumpeq         #10623     i64 
    push           mlibp.readlinen.ch i64 
    push           -1         i64 
    jumpne         #10624     i64 
#10623: 
    push           0          u64 
    push           mlibp.readlinen.p u64 
    popptr                    u8 
    jump           #10625     
#10624: 
    push           mlibp.readlinen.ch u64 
    push           &mlibp.readlinen.p 
    loadincr                  u64 1
    popptr                    u8 
    push           &mlibp.readlinen.n 
    incr                      i64 1
    push           mlibp.readlinen.n i64 
    push           mlibp.readlinen.size i64 
    push           2          i64 
    sub                       i64 
    jumplt         #10626     i64 
    push           0          u64 
    push           mlibp.readlinen.p u64 
    popptr                    u8 
    jump           #10625     
#10626: 
    jump           #10622     
#10627: 
#10621: 
    push           0          u64 
    push           mlibp.readlinen.buffer u64 
    popptr                    u8 
    setargs                   3 0
    push           mlibp.readlinen.handlex u64 
    push           mlibp.readlinen.size i64 
    push           2          i64 
    sub                       i64 
    push           mlibp.readlinen.buffer u64 
    callfn         &fgets     u64 
    push           0          u64 
    jumpne         #10628     u64 
    jump           #10625     
#10628: 
    setargs                   1 0
    push           mlibp.readlinen.buffer u64 
    callfn         &strlen    i64 
    pop            mlibp.readlinen.n i64 
    push           mlibp.readlinen.n i64 
    push           0          i64 
    jumpne         #10629     i64 
    jump           #10625     
#10629: 
    push           mlibp.readlinen.buffer u64 
    push           mlibp.readlinen.n i64 
    addrefoff                 u64 1 -1
    pop            mlibp.readlinen.p u64 
    push           0          i64 
    pop            mlibp.readlinen.crseen u8 
    jump           #10630     
#10631: 
    push           mlibp.readlinen.p u64 
    pushptr                   u8 
    push           13         i64 
    jumpeq         #10632     i64 
    push           mlibp.readlinen.p u64 
    pushptr                   u8 
    push           10         i64 
    jumpne         #10633     i64 
#10632: 
    push           1          i64 
    pop            mlibp.readlinen.crseen u8 
#10633: 
    push           0          u64 
    push           &mlibp.readlinen.p 
    loaddecr                  u64 1
    popptr                    u8 
#10630: 
    push           mlibp.readlinen.p u64 
    push           mlibp.readlinen.buffer u64 
    jumplt         #10634     u64 
    push           mlibp.readlinen.p u64 
    pushptr                   u8 
    push           13         i64 
    jumpeq         #10631     i64 
    push           mlibp.readlinen.p u64 
    pushptr                   u8 
    push           10         i64 
    jumpeq         #10631     i64 
#10634: 
#10635: 
    push           mlibp.readlinen.crseen u8 
    jumptrue       #10636     i64 
    push           mlibp.readlinen.n i64 
    push           4          i64 
    add                       i64 
    push           mlibp.readlinen.size i64 
    jumple         #10636     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mlibp.readlinen.size i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           mlibp.readlinen.n i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "line too long" u64 
    callproc       &mlibp.abortprogram 
#10636: 
#10625: 
    retproc                   
End


Proc mlibp.iconvlcn:
    param          mlibp.iconvlcn.s u64 
    param          mlibp.iconvlcn.n i64 
    local          mlibp.iconvlcn.av_1 i64 
    procentry                 
#10638: 
    push           mlibp.iconvlcn.n i64 
    pop            mlibp.iconvlcn.av_1 i64 
    push           mlibp.iconvlcn.av_1 i64 
    push           0          i64 
    jumple         #10639     i64 
#10640: 
    setargs                   1 0
    push           mlibp.iconvlcn.s u64 
    pushptr                   u8 
    callfn         &tolower   i32 
    push           mlibp.iconvlcn.s u64 
    popptr                    u8 
    push           &mlibp.iconvlcn.s 
    incr                      u64 1
#10641: 
    to             #10640     
    opnd           mlibp.iconvlcn.av_1 
#10639: 
#10642: 
    retproc                   
End


Proc mlibp.iconvucn:
    param          mlibp.iconvucn.s u64 
    param          mlibp.iconvucn.n i64 
    local          mlibp.iconvucn.av_1 i64 
    procentry                 
#10644: 
    push           mlibp.iconvucn.n i64 
    pop            mlibp.iconvucn.av_1 i64 
    push           mlibp.iconvucn.av_1 i64 
    push           0          i64 
    jumple         #10645     i64 
#10646: 
    setargs                   1 0
    push           mlibp.iconvucn.s u64 
    pushptr                   u8 
    callfn         &toupper   i32 
    push           mlibp.iconvucn.s u64 
    popptr                    u8 
    push           &mlibp.iconvucn.s 
    incr                      u64 1
#10647: 
    to             #10646     
    opnd           mlibp.iconvucn.av_1 
#10645: 
#10648: 
    retproc                   
End


Proc mlibp.convlcstring: u64
    param          mlibp.convlcstring.s u64 
    local          mlibp.convlcstring.s0 u64 
    procentry                 
    push           mlibp.convlcstring.s u64 
    pop            mlibp.convlcstring.s0 u64 
    jump           #10650     
#10651: 
    setargs                   1 0
    push           mlibp.convlcstring.s u64 
    pushptr                   u8 
    callfn         &tolower   i32 
    push           mlibp.convlcstring.s u64 
    popptr                    u8 
    push           &mlibp.convlcstring.s 
    incr                      u64 1
#10650: 
    push           mlibp.convlcstring.s u64 
    pushptr                   u8 
    jumptrue       #10651     u64 
#10652: 
    push           mlibp.convlcstring.s0 u64 
    setret                    u64 
    jump           #10653     
#10653: 
    retfn                     u64 
End


Proc mlibp.convucstring: u64
    param          mlibp.convucstring.s u64 
    local          mlibp.convucstring.s0 u64 
    procentry                 
    push           mlibp.convucstring.s u64 
    pop            mlibp.convucstring.s0 u64 
    jump           #10655     
#10656: 
    setargs                   1 0
    push           mlibp.convucstring.s u64 
    pushptr                   u8 
    callfn         &toupper   i32 
    push           mlibp.convucstring.s u64 
    popptr                    u8 
    push           &mlibp.convucstring.s 
    incr                      u64 1
#10655: 
    push           mlibp.convucstring.s u64 
    pushptr                   u8 
    jumptrue       #10656     u64 
#10657: 
    push           mlibp.convucstring.s0 u64 
    setret                    u64 
    jump           #10658     
#10658: 
    retfn                     u64 
End


Proc mlibp.changeext: u64
    param          mlibp.changeext.s u64 
    param          mlibp.changeext.newext u64 
    local          mlibp.changeext.newext2 block:32 
    local          mlibp.changeext.sext u64 
    local          mlibp.changeext.n i64 
    procentry                 
    setargs                   2 0
    push           mlibp.changeext.s u64 
    push           &mlibp.changeext.newfile 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcpy    
    push           mlibp.changeext.newext u64 
    pushptr                   u8 
    push           0          u64 
    casejumpeq     #10660     u64 0
    push           46         u64 
    casejumpeq     #10661     u64 0
    popstack                  u64 
    jump           #10662     
#10660: 
    push           0          u64 
    push           &mlibp.changeext.newext2 
    push           1          i64 
    popptroff                 u8 1 -1
    push           0          u64 
    push           &mlibp.changeext.newext2 
    push           2          i64 
    popptroff                 u8 1 -1
    jump           #10663     
#10661: 
    setargs                   2 0
    push           mlibp.changeext.newext u64 
    push           &mlibp.changeext.newext2 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcpy    
    jump           #10663     
#10662: 
    setargs                   2 0
    push           "."        u64 
    push           &mlibp.changeext.newext2 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcpy    
    setargs                   2 0
    push           mlibp.changeext.newext u64 
    push           &mlibp.changeext.newext2 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcat    
#10663: 
    setargs                   2 0
    push           1          i64 
    push           mlibp.changeext.s u64 
    callfn         &mlibp.extractext u64 
    pop            mlibp.changeext.sext u64 
    push           mlibp.changeext.sext u64 
    pushptr                   u8 
    push           0          u64 
    casejumpeq     #10664     u64 0
    push           46         u64 
    casejumpeq     #10665     u64 0
    popstack                  u64 
    jump           #10666     
#10664: 
    setargs                   2 0
    push           &mlibp.changeext.newext2 
    push           0          
    addrefoff                 u8 1 0
    push           &mlibp.changeext.newfile 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcat    
    jump           #10667     
#10665: 
    setargs                   2 0
    push           &mlibp.changeext.newext2 
    push           1          
    addrefoff                 u8 1 0
    push           &mlibp.changeext.newfile 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcat    
    jump           #10667     
#10666: 
    push           mlibp.changeext.sext u64 
    push           mlibp.changeext.s u64 
    subref                    i64 1
    push           2          i64 
    sub                       i64 
    pop            mlibp.changeext.n i64 
    setargs                   2 0
    push           &mlibp.changeext.newext2 
    push           0          
    addrefoff                 u8 1 0
    push           &mlibp.changeext.newfile 
    push           0          
    addrefoff                 u8 1 0
    push           mlibp.changeext.n i64 
    addrefoff                 u64 1 1
    callproc       &strcpy    
#10667: 
    push           &mlibp.changeext.newfile 
    push           0          
    addrefoff                 u8 1 0
    setret                    u64 
    jump           #10668     
#10668: 
    retfn                     u64 
End


Proc mlibp.extractext: u64
    param          mlibp.extractext.s u64 
    param          mlibp.extractext.period i64 
    local          mlibp.extractext.t u64 
    local          mlibp.extractext.u u64 
    procentry                 
    setargs                   1 0
    push           mlibp.extractext.s u64 
    callfn         &mlibp.extractfile u64 
    pop            mlibp.extractext.t u64 
    push           mlibp.extractext.t u64 
    pushptr                   u8 
    push           0          i64 
    jumpne         #10670     i64 
    push           ""         u64 
    setret                    u64 
    jump           #10671     
#10670: 
    push           mlibp.extractext.t u64 
    setargs                   1 0
    push           mlibp.extractext.t u64 
    callfn         &strlen    i64 
    addrefoff                 u64 1 -1
    pop            mlibp.extractext.u u64 
    jump           #10672     
#10673: 
    push           mlibp.extractext.u u64 
    pushptr                   u8 
    push           46         u64 
    jumpne         #10674     u64 
    push           mlibp.extractext.u u64 
    push           1          i64 
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #10675     i64 
    startmult                 
    push           mlibp.extractext.period i64 
    jumpfalse      #10676     i64 
    push           "."        u64 
    resetmult                 
    jump           #10677     
#10676: 
    push           ""         u64 
    endmult                   
#10677: 
    setret                    u64 
    jump           #10671     
#10675: 
    push           mlibp.extractext.u u64 
    push           1          i64 
    addrefoff                 u64 1 0
    setret                    u64 
    jump           #10671     
#10674: 
    push           &mlibp.extractext.u 
    decr                      u64 1
#10672: 
    push           mlibp.extractext.u u64 
    push           mlibp.extractext.t u64 
    jumpge         #10673     u64 
#10678: 
    push           ""         u64 
    setret                    u64 
    jump           #10671     
#10671: 
    retfn                     u64 
End


Proc mlibp.extractpath: u64
    param          mlibp.extractpath.s u64 
    local          mlibp.extractpath.t u64 
    local          mlibp.extractpath.n i64 
    procentry                 
    push           mlibp.extractpath.s u64 
    setargs                   1 0
    push           mlibp.extractpath.s u64 
    callfn         &strlen    i64 
    addrefoff                 u64 1 -1
    pop            mlibp.extractpath.t u64 
    jump           #10680     
#10681: 
    push           mlibp.extractpath.t u64 
    pushptr                   u8 
    switch         #10682     47 92
    opnd           #10683     
#10682: 
    switchlabel    #10684     
    switchlabel    #10683     
    switchlabel    #10683     
    switchlabel    #10683     
    switchlabel    #10683     
    switchlabel    #10683     
    switchlabel    #10683     
    switchlabel    #10683     
    switchlabel    #10683     
    switchlabel    #10683     
    switchlabel    #10683     
    switchlabel    #10684     
    switchlabel    #10683     
    switchlabel    #10683     
    switchlabel    #10683     
    switchlabel    #10683     
    switchlabel    #10683     
    switchlabel    #10683     
    switchlabel    #10683     
    switchlabel    #10683     
    switchlabel    #10683     
    switchlabel    #10683     
    switchlabel    #10683     
    switchlabel    #10683     
    switchlabel    #10683     
    switchlabel    #10683     
    switchlabel    #10683     
    switchlabel    #10683     
    switchlabel    #10683     
    switchlabel    #10683     
    switchlabel    #10683     
    switchlabel    #10683     
    switchlabel    #10683     
    switchlabel    #10683     
    switchlabel    #10683     
    switchlabel    #10683     
    switchlabel    #10683     
    switchlabel    #10683     
    switchlabel    #10683     
    switchlabel    #10683     
    switchlabel    #10683     
    switchlabel    #10683     
    switchlabel    #10683     
    switchlabel    #10683     
    switchlabel    #10683     
    switchlabel    #10684     
    endswitch                 
#10684: 
    push           mlibp.extractpath.t u64 
    push           mlibp.extractpath.s u64 
    subref                    i64 1
    push           1          i64 
    add                       i64 
    pop            mlibp.extractpath.n i64 
    setargs                   3 0
    push           mlibp.extractpath.n u64 
    push           mlibp.extractpath.s u64 
    push           &mlibp.extractpath.str 
    callproc       &memcpy    
    push           0          u64 
    push           &mlibp.extractpath.str 
    push           mlibp.extractpath.n i64 
    popptroff                 u8 1 0
    push           &mlibp.extractpath.str 
    setret                    u64 
    jump           #10685     
    jump           #10686     
#10683: 
#10686: 
    push           &mlibp.extractpath.t 
    decr                      u64 1
#10680: 
    push           mlibp.extractpath.t u64 
    push           mlibp.extractpath.s u64 
    jumpge         #10681     u64 
#10687: 
    push           ""         u64 
    setret                    u64 
    jump           #10685     
#10685: 
    retfn                     u64 
End


Proc mlibp.extractfile: u64
    param          mlibp.extractfile.s u64 
    local          mlibp.extractfile.t u64 
    procentry                 
    setargs                   1 0
    push           mlibp.extractfile.s u64 
    callfn         &mlibp.extractpath u64 
    pop            mlibp.extractfile.t u64 
    push           mlibp.extractfile.t u64 
    pushptr                   u8 
    push           0          i64 
    jumpne         #10689     i64 
    push           mlibp.extractfile.s u64 
    setret                    u64 
    jump           #10690     
#10689: 
    push           mlibp.extractfile.s u64 
    setargs                   1 0
    push           mlibp.extractfile.t u64 
    callfn         &strlen    i64 
    addrefoff                 u64 1 0
    setret                    u64 
    jump           #10690     
#10690: 
    retfn                     u64 
End


Proc mlibp.extractbasefile: u64
    param          mlibp.extractbasefile.s u64 
    local          mlibp.extractbasefile.f u64 
    local          mlibp.extractbasefile.e u64 
    local          mlibp.extractbasefile.n i64 
    local          mlibp.extractbasefile.flen i64 
    procentry                 
    setargs                   1 0
    push           mlibp.extractbasefile.s u64 
    callfn         &mlibp.extractfile u64 
    pop            mlibp.extractbasefile.f u64 
    setargs                   1 0
    push           mlibp.extractbasefile.f u64 
    callfn         &strlen    i64 
    pop            mlibp.extractbasefile.flen i64 
    push           mlibp.extractbasefile.flen i64 
    push           0          i64 
    jumpne         #10692     i64 
    push           ""         u64 
    setret                    u64 
    jump           #10693     
#10692: 
    setargs                   2 0
    push           0          i64 
    push           mlibp.extractbasefile.f u64 
    callfn         &mlibp.extractext u64 
    pop            mlibp.extractbasefile.e u64 
    push           mlibp.extractbasefile.e u64 
    pushptr                   u8 
    jumpfalse      #10694     u64 
    push           mlibp.extractbasefile.flen i64 
    setargs                   1 0
    push           mlibp.extractbasefile.e u64 
    callfn         &strlen    i64 
    sub                       i64 
    push           1          i64 
    sub                       i64 
    pop            mlibp.extractbasefile.n i64 
    setargs                   3 0
    push           mlibp.extractbasefile.n u64 
    push           mlibp.extractbasefile.f u64 
    push           &mlibp.extractbasefile.str 
    callproc       &memcpy    
    push           0          u64 
    push           &mlibp.extractbasefile.str 
    push           mlibp.extractbasefile.n i64 
    popptroff                 u8 1 0
    push           &mlibp.extractbasefile.str 
    setret                    u64 
    jump           #10693     
#10694: 
    push           mlibp.extractbasefile.f u64 
    push           mlibp.extractbasefile.flen i64 
    pushptroff                u8 1 -1
    push           46         u64 
    jumpne         #10695     u64 
    setargs                   3 0
    push           mlibp.extractbasefile.flen i64 
    push           1          i64 
    sub                       u64 
    push           mlibp.extractbasefile.f u64 
    push           &mlibp.extractbasefile.str 
    callproc       &memcpy    
    push           0          u64 
    push           &mlibp.extractbasefile.str 
    push           mlibp.extractbasefile.flen i64 
    popptroff                 u8 1 -1
    push           &mlibp.extractbasefile.str 
    setret                    u64 
    jump           #10693     
#10695: 
    push           mlibp.extractbasefile.f u64 
    setret                    u64 
    jump           #10693     
#10693: 
    retfn                     u64 
End


Proc mlibp.addext: u64
    param          mlibp.addext.s u64 
    param          mlibp.addext.newext u64 
    local          mlibp.addext.sext u64 
    procentry                 
    setargs                   2 0
    push           1          i64 
    push           mlibp.addext.s u64 
    callfn         &mlibp.extractext u64 
    pop            mlibp.addext.sext u64 
    push           mlibp.addext.sext u64 
    pushptr                   u8 
    push           0          i64 
    jumpne         #10697     i64 
    setargs                   2 0
    push           mlibp.addext.newext u64 
    push           mlibp.addext.s u64 
    callfn         &mlibp.changeext u64 
    setret                    u64 
    jump           #10698     
#10697: 
    push           mlibp.addext.s u64 
    setret                    u64 
    jump           #10698     
#10698: 
    retfn                     u64 
End


Proc mlibp.alloctable: u64
    param          mlibp.alloctable.n i64 
    param          mlibp.alloctable.size i64 
    local          mlibp.alloctable.p u64 
    procentry                 
    setargs                   1 0
    push           mlibp.alloctable.n i64 
    push           1          i64 
    add                       i64 
    push           mlibp.alloctable.size i64 
    mul                       u64 
    callfn         &malloc    u64 
    pop            mlibp.alloctable.p u64 
    push           mlibp.alloctable.p u64 
    jumptrue       #10700     u64 
    setargs                   1 0
    push           "Alloctable failure" u64 
    callproc       &mlibp.abortprogram 
#10700: 
    push           mlibp.alloctable.p u64 
    setret                    u64 
    jump           #10701     
#10701: 
    retfn                     u64 
End


Proc mlibp.zalloctable: u64
    param          mlibp.zalloctable.n i64 
    param          mlibp.zalloctable.size i64 
    local          mlibp.zalloctable.p u64 
    procentry                 
    setargs                   2 0
    push           mlibp.zalloctable.size i64 
    push           mlibp.zalloctable.n i64 
    callfn         &mlibp.alloctable u64 
    pop            mlibp.zalloctable.p u64 
    setargs                   2 0
    push           mlibp.zalloctable.n i64 
    push           1          i64 
    add                       i64 
    push           mlibp.zalloctable.size i64 
    mul                       i64 
    push           mlibp.zalloctable.p u64 
    callproc       &mlibp.pcm_clearmem 
    push           mlibp.zalloctable.p u64 
    setret                    u64 
    jump           #10703     
#10703: 
    retfn                     u64 
End


Proc mlibp.checkfreelists:
    param          mlibp.checkfreelists.s u64 
    local          mlibp.checkfreelists.p u64 
    local          mlibp.checkfreelists.q u64 
    local          mlibp.checkfreelists.aa i64 
    local          mlibp.checkfreelists.i i64 
    procentry                 
#10705: 
    push           2          i64 
    pop            mlibp.checkfreelists.i i64 
#10706: 
    push           &mlibp.freelist 
    push           mlibp.checkfreelists.i i64 
    pushptroff                u64 8 0
    pop            mlibp.checkfreelists.p u64 
    jump           #10707     
#10708: 
    push           mlibp.checkfreelists.p i64 
    pop            mlibp.checkfreelists.aa i64 
    push           mlibp.checkfreelists.aa i64 
    push           4294967295 i64 
    jumpgt         #10709     i64 
    push           mlibp.checkfreelists.aa i64 
    push           100        i64 
    jumpge         #10710     i64 
#10709: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mlibp.checkfreelists.s u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "FREE LIST ERROR" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mlibp.checkfreelists.i i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           mlibp.checkfreelists.p u64 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   1 0
    push           mlibp.checkfreelists.q u64 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#10710: 
    push           mlibp.checkfreelists.p u64 
    pop            mlibp.checkfreelists.q u64 
    push           mlibp.checkfreelists.p u64 
    pushptr                   u64 
    pop            mlibp.checkfreelists.p u64 
#10707: 
    push           mlibp.checkfreelists.p u64 
    jumptrue       #10708     u64 
#10711: 
#10712: 
    forup          #10706     i64 1
    opnd           mlibp.checkfreelists.i 
    opnd           2          
#10713: 
#10714: 
    retproc                   
End


Proc mlibp.pcm_alloc32: u64
    local          mlibp.pcm_alloc32.p u64 
    procentry                 
    push           32         i64 
    pop            mlibp.allocbytes i64 
    push           &mlibp.smallmemtotal 
    push           32         i64 
    addto                     i64 
    push           &mlibp.freelist 
    push           2          i64 
    pushptroff                u64 8 0
    store          mlibp.pcm_alloc32.p u64 
    jumpfalse      #10716     u64 
    push           &mlibp.freelist 
    push           2          i64 
    pushptroff                u64 8 0
    pushptr                   u64 
    push           &mlibp.freelist 
    push           2          i64 
    popptroff                 u64 8 0
    push           mlibp.pcm_alloc32.p u64 
    setret                    u64 
    jump           #10717     
#10716: 
    setargs                   1 0
    push           32         i64 
    callfn         &mlibp.pcm_alloc u64 
    setret                    u64 
    jump           #10717     
#10717: 
    retfn                     u64 
End


Proc mlibp.pcm_free32:
    param          mlibp.pcm_free32.p u64 
    procentry                 
    push           &mlibp.smallmemtotal 
    push           32         i64 
    subto                     i64 
    push           &mlibp.freelist 
    push           2          i64 
    pushptroff                u64 8 0
    push           mlibp.pcm_free32.p u64 
    popptr                    u64 
    push           mlibp.pcm_free32.p u64 
    push           &mlibp.freelist 
    push           2          i64 
    popptroff                 u64 8 0
#10719: 
    retproc                   
End


Proc mlibp.outbyte:
    param          mlibp.outbyte.f u64 
    param          mlibp.outbyte.x i64 
    procentry                 
    setargs                   4 0
    push           mlibp.outbyte.f u64 
    push           1          u64 
    push           1          u64 
    push           &mlibp.outbyte.x 
    callproc       &fwrite    
#10721: 
    retproc                   
End


Proc mlibp.outword16:
    param          mlibp.outword16.f u64 
    param          mlibp.outword16.x u64 
    procentry                 
    setargs                   4 0
    push           mlibp.outword16.f u64 
    push           1          u64 
    push           2          u64 
    push           &mlibp.outword16.x 
    callproc       &fwrite    
#10723: 
    retproc                   
End


Proc mlibp.outword:
    param          mlibp.outword.f u64 
    param          mlibp.outword.x u64 
    procentry                 
    setargs                   4 0
    push           mlibp.outword.f u64 
    push           1          u64 
    push           4          u64 
    push           &mlibp.outword.x 
    callproc       &fwrite    
#10725: 
    retproc                   
End


Proc mlibp.outword64:
    param          mlibp.outword64.f u64 
    param          mlibp.outword64.x u64 
    procentry                 
    setargs                   4 0
    push           mlibp.outword64.f u64 
    push           1          u64 
    push           8          u64 
    push           &mlibp.outword64.x 
    callproc       &fwrite    
#10727: 
    retproc                   
End


Proc mlibp.myeof: i64
    param          mlibp.myeof.f u64 
    local          mlibp.myeof.c i64 
    procentry                 
    setargs                   1 0
    push           mlibp.myeof.f u64 
    callfn         &fgetc     i32 
    pop            mlibp.myeof.c i64 
    push           mlibp.myeof.c i64 
    push           -1         i64 
    jumpne         #10729     i64 
    push           1          i64 
    setret                    i64 
    jump           #10730     
#10729: 
    setargs                   2 0
    push           mlibp.myeof.f u64 
    push           mlibp.myeof.c i64 
    callproc       &ungetc    
    push           0          i64 
    setret                    i64 
    jump           #10730     
#10730: 
    retfn                     i64 
End


Proc mlibp.pcm_smallallocz: u64
    param          mlibp.pcm_smallallocz.n i64 
    local          mlibp.pcm_smallallocz.p u64 
    procentry                 
    push           &mlibp.allocupper 
    push           &mlibp.sizeindextable 
    push           mlibp.pcm_smallallocz.n i64 
    pushptroff                u8 1 0
    store          mlibp.alloccode i64 
    pushptroff                i64 8 0
    pop            mlibp.allocbytes i64 
    push           mlibp.pcheapptr u64 
    pop            mlibp.pcm_smallallocz.p u64 
    push           &mlibp.pcheapptr 
    push           mlibp.allocbytes i64 
    addrefoffto               u64 1 0
    push           mlibp.pcheapptr u64 
    push           mlibp.pcheapend u64 
    jumplt         #10732     u64 
    setargs                   1 0
    push           mlibp.allocbytes i64 
    callfn         &mlibp.pcm_newblock u64 
    pop            mlibp.pcm_smallallocz.p u64 
    setargs                   3 0
    push           mlibp.pcm_smallallocz.n u64 
    push           0          i64 
    push           mlibp.pcm_smallallocz.p u64 
    callproc       &memset    
    push           mlibp.pcm_smallallocz.p u64 
    setret                    u64 
    jump           #10733     
#10732: 
    setargs                   3 0
    push           mlibp.pcm_smallallocz.n u64 
    push           0          i64 
    push           mlibp.pcm_smallallocz.p u64 
    callproc       &memset    
    push           mlibp.pcm_smallallocz.p u64 
    setret                    u64 
    jump           #10733     
#10733: 
    retfn                     u64 
End


Proc mlibp.pcm_smallalloc: u64
    param          mlibp.pcm_smallalloc.n i64 
    local          mlibp.pcm_smallalloc.p u64 
    procentry                 
    push           &mlibp.allocupper 
    push           &mlibp.sizeindextable 
    push           mlibp.pcm_smallalloc.n i64 
    pushptroff                u8 1 0
    store          mlibp.alloccode i64 
    pushptroff                i64 8 0
    pop            mlibp.allocbytes i64 
    push           mlibp.pcheapptr u64 
    pop            mlibp.pcm_smallalloc.p u64 
    push           &mlibp.pcheapptr 
    push           mlibp.allocbytes i64 
    addrefoffto               u64 1 0
    push           mlibp.pcheapptr u64 
    push           mlibp.pcheapend u64 
    jumplt         #10735     u64 
    setargs                   1 0
    push           mlibp.allocbytes i64 
    callfn         &mlibp.pcm_newblock u64 
    pop            mlibp.pcm_smallalloc.p u64 
    push           mlibp.pcm_smallalloc.p u64 
    setret                    u64 
    jump           #10736     
#10735: 
    push           mlibp.pcm_smallalloc.p u64 
    setret                    u64 
    jump           #10736     
#10736: 
    retfn                     u64 
End


Proc mlibp.strbuffer_add:
    param          mlibp.strbuffer_add.dest u64 
    param          mlibp.strbuffer_add.s u64 
    param          mlibp.strbuffer_add.n i64 
    local          mlibp.strbuffer_add.newlen i64 
    local          mlibp.strbuffer_add.oldlen i64 
    local          mlibp.strbuffer_add.newptr u64 
    procentry                 
    push           mlibp.strbuffer_add.n i64 
    push           0          i64 
    jumpne         #10738     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "N=0"      u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#10738: 
    push           mlibp.strbuffer_add.n i64 
    push           -1         i64 
    jumpne         #10739     i64 
    setargs                   1 0
    push           mlibp.strbuffer_add.s u64 
    callfn         &strlen    i64 
    pop            mlibp.strbuffer_add.n i64 
#10739: 
    push           mlibp.strbuffer_add.dest u64 
    push           8          
    pushptroff                i32 1 0
    pop            mlibp.strbuffer_add.oldlen i64 
    push           mlibp.strbuffer_add.oldlen i64 
    push           0          i64 
    jumpne         #10740     i64 
    setargs                   1 0
    push           mlibp.strbuffer_add.n i64 
    push           1          i64 
    add                       i64 
    callfn         &mlibp.pcm_alloc u64 
    push           mlibp.strbuffer_add.dest u64 
    push           0          
    popptroff                 u64 1 0
    push           mlibp.allocbytes i64 
    push           mlibp.strbuffer_add.dest u64 
    push           12         
    popptroff                 i32 1 0
    push           mlibp.strbuffer_add.n i64 
    push           mlibp.strbuffer_add.dest u64 
    push           8          
    popptroff                 i32 1 0
    setargs                   3 0
    push           mlibp.strbuffer_add.n u64 
    push           mlibp.strbuffer_add.s u64 
    push           mlibp.strbuffer_add.dest u64 
    pushptr                   u64 
    callproc       &memcpy    
    push           0          u64 
    push           mlibp.strbuffer_add.dest u64 
    pushptr                   u64 
    push           mlibp.strbuffer_add.n i64 
    popptroff                 u8 1 0
    jump           #10741     
#10740: 
    push           mlibp.strbuffer_add.oldlen i64 
    push           mlibp.strbuffer_add.n i64 
    add                       i64 
    pop            mlibp.strbuffer_add.newlen i64 
    push           mlibp.strbuffer_add.newlen i64 
    push           1          i64 
    add                       i64 
    push           mlibp.strbuffer_add.dest u64 
    push           12         
    pushptroff                i32 1 0
    jumple         #10742     i64 
    setargs                   1 0
    push           mlibp.strbuffer_add.newlen i64 
    push           1          i64 
    add                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            mlibp.strbuffer_add.newptr u64 
    setargs                   3 0
    push           mlibp.strbuffer_add.oldlen u64 
    push           mlibp.strbuffer_add.dest u64 
    pushptr                   u64 
    push           mlibp.strbuffer_add.newptr u64 
    callproc       &memcpy    
    push           mlibp.strbuffer_add.newptr u64 
    push           mlibp.strbuffer_add.dest u64 
    push           0          
    popptroff                 u64 1 0
    push           mlibp.allocbytes i64 
    push           mlibp.strbuffer_add.dest u64 
    push           12         
    popptroff                 i32 1 0
#10742: 
    setargs                   3 0
    push           mlibp.strbuffer_add.n u64 
    push           mlibp.strbuffer_add.s u64 
    push           mlibp.strbuffer_add.dest u64 
    pushptr                   u64 
    push           mlibp.strbuffer_add.oldlen i64 
    addrefoff                 u64 1 0
    callproc       &memcpy    
    push           0          u64 
    push           mlibp.strbuffer_add.dest u64 
    pushptr                   u64 
    push           mlibp.strbuffer_add.newlen i64 
    popptroff                 u8 1 0
    push           mlibp.strbuffer_add.newlen i64 
    push           mlibp.strbuffer_add.dest u64 
    push           8          
    popptroff                 i32 1 0
#10741: 
    retproc                   
End


Proc mlibp.gs_init:
    param          mlibp.gs_init.dest u64 
    procentry                 
    setargs                   2 0
    push           16         i64 
    push           mlibp.gs_init.dest u64 
    callproc       &mlibp.pcm_clearmem 
#10744: 
    retproc                   
End


Proc mlibp.gs_free:
    param          mlibp.gs_free.dest u64 
    procentry                 
    push           mlibp.gs_free.dest u64 
    push           12         
    pushptroff                i32 1 0
    jumpfalse      #10746     i64 
    setargs                   2 0
    push           mlibp.gs_free.dest u64 
    push           12         
    pushptroff                i32 1 0
    push           mlibp.gs_free.dest u64 
    pushptr                   u64 
    callproc       &mlibp.pcm_free 
#10746: 
#10747: 
    retproc                   
End


Proc mlibp.gs_str:
    param          mlibp.gs_str.dest u64 
    param          mlibp.gs_str.s u64 
    procentry                 
    setargs                   3 0
    push           -1         i64 
    push           mlibp.gs_str.s u64 
    push           mlibp.gs_str.dest u64 
    callproc       &mlibp.strbuffer_add 
#10749: 
    retproc                   
End


Proc mlibp.gs_char:
    param          mlibp.gs_char.dest u64 
    param          mlibp.gs_char.c i64 
    local          mlibp.gs_char.s block:16 
    procentry                 
    push           mlibp.gs_char.c u64 
    push           &mlibp.gs_char.s 
    push           1          i64 
    popptroff                 u8 1 -1
    push           0          u64 
    push           &mlibp.gs_char.s 
    push           2          i64 
    popptroff                 u8 1 -1
    setargs                   3 0
    push           1          i64 
    push           &mlibp.gs_char.s 
    push           mlibp.gs_char.dest u64 
    callproc       &mlibp.strbuffer_add 
#10751: 
    retproc                   
End


Proc mlibp.gs_strn:
    param          mlibp.gs_strn.dest u64 
    param          mlibp.gs_strn.s u64 
    param          mlibp.gs_strn.length i64 
    procentry                 
    setargs                   3 0
    push           mlibp.gs_strn.length i64 
    push           mlibp.gs_strn.s u64 
    push           mlibp.gs_strn.dest u64 
    callproc       &mlibp.strbuffer_add 
#10753: 
    retproc                   
End


Proc mlibp.gs_strvar:
    param          mlibp.gs_strvar.dest u64 
    param          mlibp.gs_strvar.s u64 
    procentry                 
    setargs                   3 0
    push           -1         i64 
    push           mlibp.gs_strvar.s u64 
    pushptr                   u64 
    push           mlibp.gs_strvar.dest u64 
    callproc       &mlibp.strbuffer_add 
#10755: 
    retproc                   
End


Proc mlibp.gs_strint:
    param          mlibp.gs_strint.dest u64 
    param          mlibp.gs_strint.a i64 
    procentry                 
    setargs                   3 0
    push           -1         i64 
    setargs                   2 0
    push           0          u64 
    push           mlibp.gs_strint.a i64 
    callfn         &msysp.strint u64 
    push           mlibp.gs_strint.dest u64 
    callproc       &mlibp.strbuffer_add 
#10757: 
    retproc                   
End


Proc mlibp.gs_strln:
    param          mlibp.gs_strln.dest u64 
    param          mlibp.gs_strln.s u64 
    procentry                 
    setargs                   2 0
    push           mlibp.gs_strln.s u64 
    push           mlibp.gs_strln.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   1 0
    push           mlibp.gs_strln.dest u64 
    callproc       &mlibp.gs_line 
#10759: 
    retproc                   
End


Proc mlibp.gs_strsp:
    param          mlibp.gs_strsp.dest u64 
    param          mlibp.gs_strsp.s u64 
    procentry                 
    setargs                   2 0
    push           mlibp.gs_strsp.s u64 
    push           mlibp.gs_strsp.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           " "        u64 
    push           mlibp.gs_strsp.dest u64 
    callproc       &mlibp.gs_str 
#10761: 
    retproc                   
End


Proc mlibp.gs_line:
    param          mlibp.gs_line.dest u64 
    procentry                 
    setargs                   3 0
    push           -1         i64 
    push           "\c\n"     u64 
    push           mlibp.gs_line.dest u64 
    callproc       &mlibp.strbuffer_add 
#10763: 
    retproc                   
End


Proc mlibp.gs_getcol: i64
    param          mlibp.gs_getcol.dest u64 
    procentry                 
    push           mlibp.gs_getcol.dest u64 
    push           8          
    pushptroff                i32 1 0
    setret                    i64 
    jump           #10765     
#10765: 
    retfn                     i64 
End


Proc mlibp.gs_leftstr:
    param          mlibp.gs_leftstr.dest u64 
    param          mlibp.gs_leftstr.s u64 
    param          mlibp.gs_leftstr.w i64 
    param          mlibp.gs_leftstr.padch i64 
    local          mlibp.gs_leftstr.col i64 
    local          mlibp.gs_leftstr.i i64 
    local          mlibp.gs_leftstr.n i64 
    local          mlibp.gs_leftstr.slen i64 
    local          mlibp.gs_leftstr.str block:2560 
    procentry                 
    push           mlibp.gs_leftstr.dest u64 
    push           8          
    pushptroff                i32 1 0
    pop            mlibp.gs_leftstr.col i64 
    setargs                   2 0
    push           mlibp.gs_leftstr.s u64 
    push           &mlibp.gs_leftstr.str 
    callproc       &strcpy    
    setargs                   1 0
    push           mlibp.gs_leftstr.s u64 
    callfn         &strlen    i64 
    pop            mlibp.gs_leftstr.slen i64 
    push           mlibp.gs_leftstr.w i64 
    push           mlibp.gs_leftstr.slen i64 
    sub                       i64 
    pop            mlibp.gs_leftstr.n i64 
    push           mlibp.gs_leftstr.n i64 
    push           0          i64 
    jumple         #10767     i64 
#10768: 
    push           1          i64 
    pop            mlibp.gs_leftstr.i i64 
    push           mlibp.gs_leftstr.n i64 
    push           1          i64 
    jumplt         #10769     i64 
#10770: 
    push           mlibp.gs_leftstr.padch u64 
    push           &mlibp.gs_leftstr.str 
    push           mlibp.gs_leftstr.slen i64 
    push           mlibp.gs_leftstr.i i64 
    add                       i64 
    popptroff                 u8 1 -1
#10771: 
    forup          #10770     i64 1
    opnd           mlibp.gs_leftstr.i 
    opnd           mlibp.gs_leftstr.n 
#10769: 
    push           0          u64 
    push           &mlibp.gs_leftstr.str 
    push           mlibp.gs_leftstr.slen i64 
    push           mlibp.gs_leftstr.n i64 
    add                       i64 
    popptroff                 u8 1 0
#10767: 
    setargs                   2 0
    push           &mlibp.gs_leftstr.str 
    push           mlibp.gs_leftstr.dest u64 
    callproc       &mlibp.gs_str 
#10772: 
    retproc                   
End


Proc mlibp.gs_leftint:
    param          mlibp.gs_leftint.dest u64 
    param          mlibp.gs_leftint.a i64 
    param          mlibp.gs_leftint.w i64 
    param          mlibp.gs_leftint.padch i64 
    procentry                 
    setargs                   4 0
    push           mlibp.gs_leftint.padch i64 
    push           mlibp.gs_leftint.w i64 
    setargs                   2 0
    push           0          u64 
    push           mlibp.gs_leftint.a i64 
    callfn         &msysp.strint u64 
    push           mlibp.gs_leftint.dest u64 
    callproc       &mlibp.gs_leftstr 
#10774: 
    retproc                   
End


Proc mlibp.gs_padto:
    param          mlibp.gs_padto.dest u64 
    param          mlibp.gs_padto.col i64 
    param          mlibp.gs_padto.ch i64 
    local          mlibp.gs_padto.n i64 
    local          mlibp.gs_padto.str block:2560 
    local          mlibp.gs_padto.i i64 
    procentry                 
    push           mlibp.gs_padto.col i64 
    push           mlibp.gs_padto.dest u64 
    push           8          
    pushptroff                i32 1 0
    sub                       i64 
    pop            mlibp.gs_padto.n i64 
    push           mlibp.gs_padto.n i64 
    push           0          i64 
    jumpgt         #10776     i64 
    jump           #10777     
#10776: 
#10778: 
    push           1          i64 
    pop            mlibp.gs_padto.i i64 
    push           mlibp.gs_padto.n i64 
    push           1          i64 
    jumplt         #10779     i64 
#10780: 
    push           mlibp.gs_padto.ch u64 
    push           &mlibp.gs_padto.str 
    push           mlibp.gs_padto.i i64 
    popptroff                 u8 1 -1
#10781: 
    forup          #10780     i64 1
    opnd           mlibp.gs_padto.i 
    opnd           mlibp.gs_padto.n 
#10779: 
    push           0          u64 
    push           &mlibp.gs_padto.str 
    push           mlibp.gs_padto.n i64 
    popptroff                 u8 1 0
    setargs                   2 0
    push           &mlibp.gs_padto.str 
    push           mlibp.gs_padto.dest u64 
    callproc       &mlibp.gs_str 
#10777: 
    retproc                   
End


Proc mlibp.gs_println:
    param          mlibp.gs_println.dest u64 
    param          mlibp.gs_println.f u64 
    procentry                 
    push           0          u64 
    push           mlibp.gs_println.dest u64 
    pushptr                   u64 
    push           mlibp.gs_println.dest u64 
    push           8          
    pushptroff                i32 1 0
    popptroff                 u8 1 0
    push           mlibp.gs_println.f u64 
    push           0          u64 
    jumpne         #10783     u64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mlibp.gs_println.dest u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           "\c"       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #10784     
#10783: 
    setargs                   1 0
    push           mlibp.gs_println.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           mlibp.gs_println.dest u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           "\c"       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#10784: 
#10785: 
    retproc                   
End


Proc mlibp.nextcmdparam: i64
    param          mlibp.nextcmdparam.paramno u64 
    param          mlibp.nextcmdparam.name u64 
    param          mlibp.nextcmdparam.value u64 
    param          mlibp.nextcmdparam.defext u64 
    local          mlibp.nextcmdparam.q u64 
    local          mlibp.nextcmdparam.item u64 
    local          mlibp.nextcmdparam.fileext u64 
    local          mlibp.nextcmdparam.rest u64 
    local          mlibp.nextcmdparam.length i64 
    procentry                 
!reenter::
#10787: 
    push           0          u64 
    push           mlibp.nextcmdparam.value u64 
    popptr                    u64 
    push           0          u64 
    push           mlibp.nextcmdparam.name u64 
    popptr                    u64 
    push           mlibp.nextcmdparam.infile i64 
    jumpfalse      #10788     i64 
    setargs                   2 0
    push           &mlibp.nextcmdparam.item 
    push           &mlibp.nextcmdparam.fileptr 
    callfn         &mlibp.readnextfileitem i64 
    push           0          i64 
    jumpne         #10789     i64 
    setargs                   1 0
    push           mlibp.nextcmdparam.filestart u64 
    callproc       &free      
    push           0          i64 
    pop            mlibp.nextcmdparam.infile i64 
    jump           #10787     
#10789: 
    jump           #10790     
#10788: 
    push           mlibp.nextcmdparam.paramno u64 
    pushptr                   i64 
    push           msysp.nsysparams i64 
    jumple         #10791     i64 
    push           0          i64 
    setret                    i64 
    jump           #10792     
#10791: 
    push           &msysp.sysparams 
    push           mlibp.nextcmdparam.paramno u64 
    pushptr                   i64 
    pushptroff                u64 8 -8
    pop            mlibp.nextcmdparam.item u64 
    push           mlibp.nextcmdparam.paramno u64 
    incr                      i64 1
    setargs                   1 0
    push           mlibp.nextcmdparam.item u64 
    callfn         &strlen    i64 
    pop            mlibp.nextcmdparam.length i64 
    push           mlibp.nextcmdparam.item u64 
    pushptr                   u8 
    push           64         u64 
    jumpne         #10793     u64 
    setargs                   1 0
    push           mlibp.nextcmdparam.item u64 
    push           1          i64 
    addrefoff                 u64 1 0
    callfn         &mlibp.readfile u64 
    store          mlibp.nextcmdparam.fileptr u64 
    pop            mlibp.nextcmdparam.filestart u64 
    push           mlibp.nextcmdparam.filestart u64 
    push           0          u64 
    jumpne         #10794     u64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Can't open" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mlibp.nextcmdparam.item u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           7          i64 
    stop                      
#10794: 
    push           1          i64 
    pop            mlibp.nextcmdparam.infile i64 
    jump           #10787     
#10793: 
    push           mlibp.nextcmdparam.item u64 
    pushptr                   u8 
    push           58         u64 
    jumpne         #10795     u64 
    push           1          i64 
    pop            mlibp.nextcmdparam.colonseen u8 
    push           4          i64 
    setret                    i64 
    jump           #10792     
#10795: 
#10790: 
    push           0          u64 
    push           mlibp.nextcmdparam.value u64 
    popptr                    u64 
    push           mlibp.nextcmdparam.item u64 
    pushptr                   u8 
    push           45         u64 
    jumpne         #10796     u64 
    push           mlibp.nextcmdparam.item u64 
    startmult                 
    push           mlibp.nextcmdparam.colonseen u8 
    jumpfalse      #10797     i64 
    push           0          i64 
    resetmult                 
    jump           #10798     
#10797: 
    push           1          i64 
    endmult                   
#10798: 
    addrefoff                 u64 1 0
    push           mlibp.nextcmdparam.name u64 
    popptr                    u64 
    setargs                   2 0
    push           58         u64 
    push           mlibp.nextcmdparam.item u64 
    callfn         &strchr    u64 
    pop            mlibp.nextcmdparam.q u64 
    push           mlibp.nextcmdparam.q u64 
    jumptrue       #10799     u64 
    setargs                   2 0
    push           61         u64 
    push           mlibp.nextcmdparam.item u64 
    callfn         &strchr    u64 
    pop            mlibp.nextcmdparam.q u64 
#10799: 
    push           mlibp.nextcmdparam.q u64 
    jumpfalse      #10800     u64 
    push           mlibp.nextcmdparam.q u64 
    push           1          i64 
    addrefoff                 u64 1 0
    push           mlibp.nextcmdparam.value u64 
    popptr                    u64 
    push           0          u64 
    push           mlibp.nextcmdparam.q u64 
    popptr                    u8 
#10800: 
    startmult                 
    push           mlibp.nextcmdparam.colonseen u8 
    jumpfalse      #10801     i64 
    push           5          i64 
    resetmult                 
    jump           #10802     
#10801: 
    push           1          i64 
    endmult                   
#10802: 
    setret                    i64 
    jump           #10792     
#10796: 
    setargs                   2 0
    push           0          i64 
    push           mlibp.nextcmdparam.item u64 
    callfn         &mlibp.extractext u64 
    pop            mlibp.nextcmdparam.fileext u64 
    push           mlibp.nextcmdparam.item u64 
    push           mlibp.nextcmdparam.name u64 
    popptr                    u64 
    push           mlibp.nextcmdparam.fileext u64 
    pushptr                   u8 
    push           0          i64 
    jumpne         #10803     i64 
    setargs                   2 0
    push           mlibp.nextcmdparam.name u64 
    pushptr                   u64 
    push           &mlibp.nextcmdparam.str 
    callproc       &strcpy    
    push           mlibp.nextcmdparam.defext u64 
    jumpfalse      #10804     u64 
    push           mlibp.nextcmdparam.colonseen u8 
    jumptrue       #10804     i64 
    setargs                   2 0
    push           mlibp.nextcmdparam.defext u64 
    push           &mlibp.nextcmdparam.str 
    callfn         &mlibp.addext u64 
    push           mlibp.nextcmdparam.name u64 
    popptr                    u64 
#10804: 
    jump           #10805     
#10803: 
    setargs                   2 0
    push           "dll"      u64 
    push           mlibp.nextcmdparam.fileext u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #10806     i64 
    startmult                 
    push           mlibp.nextcmdparam.colonseen u8 
    jumpfalse      #10807     i64 
    push           5          i64 
    resetmult                 
    jump           #10808     
#10807: 
    push           3          i64 
    endmult                   
#10808: 
    setret                    i64 
    jump           #10792     
#10806: 
#10805: 
    startmult                 
    push           mlibp.nextcmdparam.colonseen u8 
    jumpfalse      #10809     i64 
    push           5          i64 
    resetmult                 
    jump           #10810     
#10809: 
    push           2          i64 
    endmult                   
#10810: 
    setret                    i64 
    jump           #10792     
#10792: 
    retfn                     i64 
End


Proc mlibp.readnextfileitem: i64
    param          mlibp.readnextfileitem.fileptr u64 
    param          mlibp.readnextfileitem.item u64 
    local          mlibp.readnextfileitem.p u64 
    local          mlibp.readnextfileitem.pstart u64 
    local          mlibp.readnextfileitem.pend u64 
    local          mlibp.readnextfileitem.n i64 
    procentry                 
    push           mlibp.readnextfileitem.fileptr u64 
    pushptr                   u64 
    pop            mlibp.readnextfileitem.p u64 
!reenter::
#10812: 
#10813: 
    push           mlibp.readnextfileitem.p u64 
    pushptr                   u8 
    push           32         u64 
    casejumpeq     #10814     u64 0
    push           9          u64 
    casejumpeq     #10814     u64 0
    push           13         u64 
    casejumpeq     #10814     u64 0
    push           10         u64 
    casejumpeq     #10814     u64 0
    push           26         u64 
    casejumpeq     #10815     u64 0
    push           0          u64 
    casejumpeq     #10815     u64 0
    popstack                  u64 
    jump           #10816     
#10814: 
    push           &mlibp.readnextfileitem.p 
    incr                      u64 1
    jump           #10817     
#10815: 
    push           0          i64 
    setret                    i64 
    jump           #10818     
    jump           #10817     
#10816: 
    jump           #10819     
#10817: 
    jump           #10813     
#10819: 
    push           mlibp.readnextfileitem.p u64 
    pushptr                   u8 
    push           33         u64 
    casejumpeq     #10820     u64 0
    push           35         u64 
    casejumpeq     #10820     u64 0
    popstack                  u64 
    jump           #10821     
#10820: 
    push           &mlibp.readnextfileitem.p 
    incr                      u64 1
#10822: 
    push           &mlibp.readnextfileitem.p 
    loadincr                  u64 1
    pushptr                   u8 
    push           10         u64 
    casejumpeq     #10823     u64 0
    push           26         u64 
    casejumpeq     #10824     u64 0
    push           0          u64 
    casejumpeq     #10824     u64 0
    popstack                  u64 
    jump           #10825     
#10823: 
    jump           #10812     
    jump           #10822     
#10824: 
    push           mlibp.readnextfileitem.p u64 
    push           1          i64 
    subrefoff                 u64 1 0
    push           mlibp.readnextfileitem.fileptr u64 
    popptr                    u64 
    push           0          i64 
    setret                    i64 
    jump           #10818     
    jump           #10822     
#10825: 
    jump           #10822     
#10826: 
    jump           #10827     
#10821: 
#10827: 
    push           mlibp.readnextfileitem.p u64 
    pushptr                   u8 
    push           34         u64 
    casejumpeq     #10828     u64 0
    popstack                  u64 
    jump           #10829     
#10828: 
    push           &mlibp.readnextfileitem.p 
    incrload                  u64 1
    pop            mlibp.readnextfileitem.pstart u64 
#10830: 
    push           mlibp.readnextfileitem.p u64 
    pushptr                   u8 
    push           0          u64 
    casejumpeq     #10831     u64 0
    push           26         u64 
    casejumpeq     #10831     u64 0
    push           34         u64 
    casejumpeq     #10832     u64 0
    popstack                  u64 
    jump           #10833     
#10831: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Unexpected EOF in @file" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           8          i64 
    stop                      
    jump           #10834     
#10832: 
    push           &mlibp.readnextfileitem.p 
    loadincr                  u64 1
    pop            mlibp.readnextfileitem.pend u64 
    push           mlibp.readnextfileitem.p u64 
    pushptr                   u8 
    push           44         u64 
    jumpne         #10835     u64 
    push           &mlibp.readnextfileitem.p 
    incr                      u64 1
#10835: 
    jump           #10836     
    jump           #10834     
#10833: 
#10834: 
    push           &mlibp.readnextfileitem.p 
    incr                      u64 1
    jump           #10830     
#10836: 
    jump           #10837     
#10829: 
    push           mlibp.readnextfileitem.p u64 
    pop            mlibp.readnextfileitem.pstart u64 
#10838: 
    push           mlibp.readnextfileitem.p u64 
    pushptr                   u8 
    push           0          u64 
    casejumpeq     #10839     u64 0
    push           26         u64 
    casejumpeq     #10839     u64 0
    push           32         u64 
    casejumpeq     #10840     u64 0
    push           9          u64 
    casejumpeq     #10840     u64 0
    push           44         u64 
    casejumpeq     #10840     u64 0
    push           13         u64 
    casejumpeq     #10840     u64 0
    push           10         u64 
    casejumpeq     #10840     u64 0
    popstack                  u64 
    jump           #10841     
#10839: 
    push           mlibp.readnextfileitem.p u64 
    pop            mlibp.readnextfileitem.pend u64 
    jump           #10842     
    jump           #10843     
#10840: 
    push           &mlibp.readnextfileitem.p 
    loadincr                  u64 1
    pop            mlibp.readnextfileitem.pend u64 
    jump           #10842     
    jump           #10843     
#10841: 
#10843: 
    push           &mlibp.readnextfileitem.p 
    incr                      u64 1
    jump           #10838     
#10842: 
#10837: 
    push           mlibp.readnextfileitem.pend u64 
    push           mlibp.readnextfileitem.pstart u64 
    subref                    i64 1
    pop            mlibp.readnextfileitem.n i64 
    push           mlibp.readnextfileitem.n i64 
    push           256        i64 
    jumplt         #10844     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "@file item too long" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           9          i64 
    stop                      
#10844: 
    setargs                   3 0
    push           mlibp.readnextfileitem.n u64 
    push           mlibp.readnextfileitem.pstart u64 
    push           &mlibp.readnextfileitem.str 
    callproc       &memcpy    
    push           0          u64 
    push           &mlibp.readnextfileitem.str 
    push           mlibp.readnextfileitem.n i64 
    popptroff                 u8 1 0
    push           &mlibp.readnextfileitem.str 
    push           mlibp.readnextfileitem.item u64 
    popptr                    u64 
    push           mlibp.readnextfileitem.p u64 
    push           mlibp.readnextfileitem.fileptr u64 
    popptr                    u64 
    push           1          i64 
    setret                    i64 
    jump           #10818     
#10818: 
    retfn                     i64 
End


Proc mlibp.ipadstr:
    param          mlibp.ipadstr.s u64 
    param          mlibp.ipadstr.width i64 
    param          mlibp.ipadstr.padchar u64 
    local          mlibp.ipadstr.n i64 
    local          mlibp.ipadstr.av_1 i64 
    procentry                 
    setargs                   1 0
    push           mlibp.ipadstr.s u64 
    callfn         &strlen    i64 
    pop            mlibp.ipadstr.n i64 
#10846: 
    push           mlibp.ipadstr.width i64 
    push           mlibp.ipadstr.n i64 
    sub                       i64 
    pop            mlibp.ipadstr.av_1 i64 
    push           mlibp.ipadstr.av_1 i64 
    push           0          i64 
    jumple         #10847     i64 
#10848: 
    setargs                   2 0
    push           mlibp.ipadstr.padchar u64 
    push           mlibp.ipadstr.s u64 
    callproc       &strcat    
#10849: 
    to             #10848     
    opnd           mlibp.ipadstr.av_1 
#10847: 
#10850: 
    retproc                   
End


Proc mlibp.padstr: u64
    param          mlibp.padstr.s u64 
    param          mlibp.padstr.width i64 
    param          mlibp.padstr.padchar u64 
    procentry                 
    setargs                   2 0
    push           mlibp.padstr.s u64 
    push           &mlibp.padstr.str 
    callproc       &strcpy    
    setargs                   3 0
    push           mlibp.padstr.padchar u64 
    push           mlibp.padstr.width i64 
    push           &mlibp.padstr.str 
    callproc       &mlibp.ipadstr 
    push           &mlibp.padstr.str 
    setret                    u64 
    jump           #10852     
#10852: 
    retfn                     u64 
End


Proc mlibp.chr: u64
    param          mlibp.chr.c i64 
    procentry                 
    push           mlibp.chr.c u64 
    push           &mlibp.chr.str 
    push           1          i64 
    popptroff                 u8 1 -1
    push           0          u64 
    push           &mlibp.chr.str 
    push           2          i64 
    popptroff                 u8 1 -1
    push           &mlibp.chr.str 
    setret                    u64 
    jump           #10854     
#10854: 
    retfn                     u64 
End


Proc mlibp.cmpstring: i64
    param          mlibp.cmpstring.s u64 
    param          mlibp.cmpstring.t u64 
    local          mlibp.cmpstring.res i64 
    procentry                 
    startmult                 
    setargs                   2 0
    push           mlibp.cmpstring.t u64 
    push           mlibp.cmpstring.s u64 
    callfn         &strcmp    i32 
    store          mlibp.cmpstring.res i64 
    push           0          i64 
    jumpge         #10856     i64 
    push           -1         i64 
    resetmult                 
    jump           #10857     
#10856: 
    push           mlibp.cmpstring.res i64 
    push           0          i64 
    jumple         #10858     i64 
    push           1          i64 
    resetmult                 
    jump           #10857     
#10858: 
    push           0          i64 
    endmult                   
#10857: 
    setret                    i64 
    jump           #10859     
#10859: 
    retfn                     i64 
End


Proc mlibp.cmpstringn: i64
    param          mlibp.cmpstringn.s u64 
    param          mlibp.cmpstringn.t u64 
    param          mlibp.cmpstringn.n i64 
    local          mlibp.cmpstringn.res i64 
    procentry                 
    startmult                 
    setargs                   3 0
    push           mlibp.cmpstringn.n u64 
    push           mlibp.cmpstringn.t u64 
    push           mlibp.cmpstringn.s u64 
    callfn         &strncmp   i32 
    store          mlibp.cmpstringn.res i64 
    push           0          i64 
    jumpge         #10861     i64 
    push           -1         i64 
    resetmult                 
    jump           #10862     
#10861: 
    push           mlibp.cmpstringn.res i64 
    push           0          i64 
    jumple         #10863     i64 
    push           1          i64 
    resetmult                 
    jump           #10862     
#10863: 
    push           0          i64 
    endmult                   
#10862: 
    setret                    i64 
    jump           #10864     
#10864: 
    retfn                     i64 
End


Proc mlibp.eqstring: i64
    param          mlibp.eqstring.s u64 
    param          mlibp.eqstring.t u64 
    procentry                 
    setargs                   2 0
    push           mlibp.eqstring.t u64 
    push           mlibp.eqstring.s u64 
    callfn         &strcmp    i32 
    push           0          i64 
    seteq                     i64 
    setret                    i64 
    jump           #10866     
#10866: 
    retfn                     i64 
End


Proc mlibp.cmpbytes: i64
    param          mlibp.cmpbytes.p u64 
    param          mlibp.cmpbytes.q u64 
    param          mlibp.cmpbytes.n i64 
    local          mlibp.cmpbytes.res i64 
    procentry                 
    startmult                 
    setargs                   3 0
    push           mlibp.cmpbytes.n u64 
    push           mlibp.cmpbytes.q u64 
    push           mlibp.cmpbytes.p u64 
    callfn         &memcmp    i32 
    store          mlibp.cmpbytes.res i64 
    push           0          i64 
    jumpge         #10868     i64 
    push           -1         i64 
    resetmult                 
    jump           #10869     
#10868: 
    push           mlibp.cmpbytes.res i64 
    push           0          i64 
    jumple         #10870     i64 
    push           1          i64 
    resetmult                 
    jump           #10869     
#10870: 
    push           0          i64 
    endmult                   
#10869: 
    setret                    i64 
    jump           #10871     
#10871: 
    retfn                     i64 
End


Proc mlibp.eqbytes: i64
    param          mlibp.eqbytes.p u64 
    param          mlibp.eqbytes.q u64 
    param          mlibp.eqbytes.n i64 
    procentry                 
    setargs                   3 0
    push           mlibp.eqbytes.n u64 
    push           mlibp.eqbytes.q u64 
    push           mlibp.eqbytes.p u64 
    callfn         &memcmp    i32 
    push           0          i64 
    seteq                     i64 
    setret                    i64 
    jump           #10873     
#10873: 
    retfn                     i64 
End


Proc mlibp.mseed:
    param          mlibp.mseed.a u64 
    param          mlibp.mseed.b u64 
    procentry                 
    push           mlibp.mseed.a i64 
    push           &mlibp.seed 
    push           1          i64 
    popptroff                 i64 8 -8
    push           mlibp.mseed.b u64 
    jumpfalse      #10875     u64 
    push           mlibp.mseed.b i64 
    push           &mlibp.seed 
    push           2          i64 
    popptroff                 i64 8 -8
    jump           #10876     
#10875: 
    push           &mlibp.seed 
    push           2          i64 
    addrefoff                 i64 8 -8
    push           mlibp.mseed.a i64 
    ixorto                    i64 
#10876: 
#10877: 
    retproc                   
End


Proc mlibp.mrandom: u64
    local          mlibp.mrandom.x i64 
    local          mlibp.mrandom.y i64 
    procentry                 
    push           &mlibp.seed 
    push           1          i64 
    pushptroff                i64 8 -8
    pop            mlibp.mrandom.x i64 
    push           &mlibp.seed 
    push           2          i64 
    pushptroff                i64 8 -8
    pop            mlibp.mrandom.y i64 
    push           mlibp.mrandom.y i64 
    push           &mlibp.seed 
    push           1          i64 
    popptroff                 i64 8 -8
    push           &mlibp.mrandom.x 
    push           mlibp.mrandom.x i64 
    push           23         i64 
    shl                       i64 
    ixorto                    i64 
    push           mlibp.mrandom.x i64 
    push           mlibp.mrandom.y i64 
    ixor                      i64 
    push           mlibp.mrandom.x i64 
    push           17         i64 
    shr                       i64 
    ixor                      i64 
    push           mlibp.mrandom.y i64 
    push           26         i64 
    shr                       i64 
    ixor                      i64 
    push           &mlibp.seed 
    push           2          i64 
    popptroff                 i64 8 -8
    push           &mlibp.seed 
    push           2          i64 
    pushptroff                i64 8 -8
    push           mlibp.mrandom.y i64 
    add                       u64 
    setret                    u64 
    jump           #10879     
#10879: 
    retfn                     u64 
End


Proc mlibp.mrandomp: i64
    procentry                 
    setargs                   0 0
    callfn         &mlibp.mrandom i64 
    push           9223372036854775807 i64 
    iand                      i64 
    setret                    i64 
    jump           #10881     
#10881: 
    retfn                     i64 
End


Proc mlibp.mrandomint: i64
    param          mlibp.mrandomint.n i64 
    procentry                 
    setargs                   0 0
    callfn         &mlibp.mrandomp i64 
    push           mlibp.mrandomint.n i64 
    irem                      i64 
    setret                    i64 
    jump           #10883     
#10883: 
    retfn                     i64 
End


Proc mlibp.mrandomrange: i64
    param          mlibp.mrandomrange.a i64 
    param          mlibp.mrandomrange.b i64 
    local          mlibp.mrandomrange.span i64 
    procentry                 
    push           mlibp.mrandomrange.b i64 
    push           mlibp.mrandomrange.a i64 
    sub                       i64 
    push           1          i64 
    add                       i64 
    pop            mlibp.mrandomrange.span i64 
    push           mlibp.mrandomrange.span i64 
    push           0          i64 
    jumpgt         #10885     i64 
    push           0          i64 
    setret                    i64 
    jump           #10886     
#10885: 
    setargs                   0 0
    callfn         &mlibp.mrandomp i64 
    push           mlibp.mrandomrange.span i64 
    irem                      i64 
    push           mlibp.mrandomrange.a i64 
    add                       i64 
    setret                    i64 
    jump           #10886     
#10886: 
    retfn                     i64 
End


Proc mlibp.mrandomreal: r64
    local          mlibp.mrandomreal.x r64 
    procentry                 
#10888: 
    setargs                   0 0
    callfn         &mlibp.mrandomp i64 
    float                     r64 i64 
    push           9.2233720368547758e+018 r64 
    div                       r64 
    pop            mlibp.mrandomreal.x r64 
#10889: 
    push           mlibp.mrandomreal.x r64 
    push           1.0000000000000000e+000 r64 
    jumpeq         #10888     r64 
#10890: 
    push           mlibp.mrandomreal.x r64 
    setret                    r64 
    jump           #10891     
#10891: 
    retfn                     r64 
End


Proc mlibp.mrandomreal1: r64
    procentry                 
    setargs                   0 0
    callfn         &mlibp.mrandomp i64 
    push           9223372036854775807 i64 
    idiv                      i64 
    float                     r64 i64 
    setret                    r64 
    jump           #10893     
#10893: 
    retfn                     r64 
End


Proc mlibp.checkpackfile: u64
    local          mlibp.checkpackfile.a i64 
    local          mlibp.checkpackfile.offset i64 
    local          mlibp.checkpackfile.i i64 
    local          mlibp.checkpackfile.size i64 
    local          mlibp.checkpackfile.name block:100 
    local          mlibp.checkpackfile.exefile block:300 
    local          mlibp.checkpackfile.packexeptr u64 
    local          mlibp.checkpackfile.packexesize i64 
    local          mlibp.checkpackfile.packfilename u64 
    local          mlibp.checkpackfile.packfilesize i64 
    local          mlibp.checkpackfile.packfileptr u64 
    procentry                 
    setargs                   2 0
    setargs                   0 0
    callfn         &mwindowsp.os_gethostname u64 
    push           &mlibp.checkpackfile.exefile 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcpy    
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Attempting to open" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mlibp.checkpackfile.exefile 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           &mlibp.checkpackfile.exefile 
    push           0          
    addrefoff                 u8 1 0
    callfn         &mlibp.readfile u64 
    pop            mlibp.checkpackfile.packexeptr u64 
    push           mlibp.checkpackfile.packexeptr u64 
    jumptrue       #10895     u64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Can't open" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mlibp.checkpackfile.exefile 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   1 0
    push           &mlibp.checkpackfile.packexeptr 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           0          
    stop                      
#10895: 
    push           mlibp.rfsize i64 
    pop            mlibp.checkpackfile.packexesize i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "File read OK. Size" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mlibp.checkpackfile.packexesize i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           mlibp.checkpackfile.packexeptr u64 
    push           mlibp.checkpackfile.packexesize i64 
    push           4          i64 
    sub                       i64 
    pushptroff                i32 1 0
    pop            mlibp.checkpackfile.a i64 
    push           mlibp.checkpackfile.a i64 
    push           1262568272 i64 
    jumpeq         #10896     i64 
    setargs                   1 0
    push           mlibp.checkpackfile.packexeptr u64 
    callproc       &free      
    push           0          u64 
    pop            mlibp.checkpackfile.packfileptr u64 
    push           0          u64 
    setret                    u64 
    jump           #10897     
#10896: 
    push           mlibp.checkpackfile.packexeptr u64 
    push           mlibp.checkpackfile.packexesize i64 
    push           8          i64 
    sub                       i64 
    pushptroff                i32 1 0
    pop            mlibp.checkpackfile.offset i64 
    push           mlibp.checkpackfile.packexeptr u64 
    push           mlibp.checkpackfile.offset i64 
    addrefoff                 u64 1 0
    pop            mlibp.checkpackfile.packfilename u64 
    push           &mlibp.checkpackfile.offset 
    setargs                   1 0
    push           mlibp.checkpackfile.packfilename u64 
    callfn         &strlen    i64 
    push           1          i64 
    add                       i64 
    addto                     i64 
    push           mlibp.checkpackfile.packexeptr u64 
    push           mlibp.checkpackfile.offset i64 
    pushptroff                i32 1 0
    pop            mlibp.checkpackfile.packfilesize i64 
    push           mlibp.checkpackfile.packexeptr u64 
    push           mlibp.checkpackfile.offset i64 
    addrefoff                 u64 1 4
    pop            mlibp.checkpackfile.packfileptr u64 
    push           mlibp.checkpackfile.packfileptr u64 
    setret                    u64 
    jump           #10897     
#10897: 
    retfn                     u64 
End


Proc mlibp.pcm_allocx: u64
    local          mlibp.pcm_allocx.p u64 
    procentry                 
    push           32         i64 
    pop            mlibp.allocbytes i64 
    startmult                 
    push           &mlibp.freelist 
    push           2          i64 
    pushptroff                u64 8 0
    store          mlibp.pcm_allocx.p u64 
    jumpfalse      #10899     u64 
    push           &mlibp.freelist 
    push           2          i64 
    pushptroff                u64 8 0
    pushptr                   u64 
    push           &mlibp.freelist 
    push           2          i64 
    storeptroff               u64 8 0
    resetmult                 
    jump           #10900     
#10899: 
    push           mlibp.pcheapptr u64 
    pop            mlibp.pcm_allocx.p u64 
    push           &mlibp.pcheapptr 
    push           32         i64 
    addrefoffto               u64 1 0
    push           mlibp.pcheapptr u64 
    push           mlibp.pcheapend u64 
    jumplt         #10901     u64 
    setargs                   1 0
    push           32         i64 
    callfn         &mlibp.pcm_newblock u64 
    pop            mlibp.pcm_allocx.p u64 
#10901: 
    push           0          u64 
    push           mlibp.pcm_allocx.p u64 
    popptr                    u64 
    push           0          u64 
    push           mlibp.pcm_allocx.p u64 
    push           1          i64 
    popptroff                 u64 8 0
    push           0          u64 
    push           mlibp.pcm_allocx.p u64 
    push           2          i64 
    popptroff                 u64 8 0
    push           0          u64 
    push           mlibp.pcm_allocx.p u64 
    push           3          i64 
    popptroff                 u64 8 0
    push           mlibp.pcm_allocx.p u64 
    endmult                   
#10900: 
    setret                    u64 
    jump           #10902     
#10902: 
    retfn                     u64 
End


Proc mlibp.readline: u64
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$read_conline 
    push           msysp.rd_buffer u64 
    setret                    u64 
    jump           #10904     
#10904: 
    retfn                     u64 
End


Proc mlibp.stralloc: u64
    param          mlibp.stralloc.p u64 
    procentry                 
    setargs                   2 0
    push           0          u64 
    push           mlibp.stralloc.p u64 
    push           mlibp.allocbase u64 
    subref                    i64 1
    callfn         &msysp.strint u64 
    setret                    u64 
    jump           #10906     
#10906: 
    retfn                     u64 
End


Proc mlibp.findfunction: u64
    param          mlibp.findfunction.name u64 
    local          mlibp.findfunction.av_1 i64 
    local          mlibp.findfunction.i i64 
    procentry                 
#10908: 
    push           1          i64 
    pop            mlibp.findfunction.i i64 
    getnprocs                 i64 
    pop            mlibp.findfunction.av_1 i64 
    push           mlibp.findfunction.av_1 i64 
    push           1          i64 
    jumplt         #10909     i64 
#10910: 
    setargs                   2 0
    push           mlibp.findfunction.name u64 
    push           mlibp.findfunction.i i64 
    getprocname               i64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #10911     i64 
    push           mlibp.findfunction.i i64 
    getprocaddr               i64 
    setret                    u64 
    jump           #10912     
#10911: 
#10913: 
    forup          #10910     i64 1
    opnd           mlibp.findfunction.i 
    opnd           mlibp.findfunction.av_1 
#10909: 
    push           0          u64 
    setret                    u64 
    jump           #10912     
#10912: 
    retfn                     u64 
End


Proc msysp.m$init:
    local          msysp.m$init.nargs i32 
    local          msysp.m$init.nargs64 i64 
    local          msysp.m$init.args u64 
    local          msysp.m$init.env u64 
    local          msysp.m$init.res i64 
    local          msysp.m$init.s u64 
    local          msysp.m$init.j i64 
    local          msysp.m$init.i i64 
    procentry                 
    setargs                   5 0
    push           &msysp.m$init.startupinfo 
    push           0          i64 
    push           &msysp.m$init.env 
    push           &msysp.m$init.args 
    push           &msysp.m$init.nargs 
    callfn         &__getmainargs i32 
    pop            msysp.m$init.res i64 
    push           msysp.m$init.nargs i32 
    pop            msysp.nsysparams i64 
    push           msysp.nsysparams i64 
    push           128        i64 
    jumple         #10915     i64 
    setargs                   1 0
    push           "Too many params\n" u64 
    callproc       &printf    
    push           50         i64 
    stop                      
#10915: 
    push           msysp.m$init.nargs i32 
    pop            msysp.m$init.nargs64 i64 
#10916: 
    push           1          i64 
    pop            msysp.m$init.i i64 
    push           msysp.m$init.nargs64 i64 
    push           1          i64 
    jumplt         #10917     i64 
#10918: 
    push           msysp.m$init.args u64 
    push           msysp.m$init.i i64 
    pushptroff                u64 8 -8
    push           &msysp.sysparams 
    push           msysp.m$init.i i64 
    popptroff                 u64 8 -8
#10919: 
    forup          #10918     i64 1
    opnd           msysp.m$init.i 
    opnd           msysp.m$init.nargs64 
#10917: 
    push           1          i64 
    pop            msysp.m$init.j i64 
    push           0          i64 
    pop            msysp.nenvstrings i64 
    jump           #10920     
#10921: 
    push           msysp.m$init.env u64 
    push           msysp.m$init.j i64 
    pushptroff                u64 8 -8
    push           &msysp.envstrings 
    push           &msysp.nenvstrings 
    incrload                  i64 1
    popptroff                 u64 8 -8
    push           &msysp.m$init.j 
    incr                      i64 1
#10920: 
    push           msysp.m$init.env u64 
    push           msysp.m$init.j i64 
    pushptroff                u64 8 -8
    jumptrue       #10921     u64 
#10922: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
#10923: 
    retproc                   
End


Proc msysp.pushio:
    procentry                 
    push           msysp.niostack i64 
    push           10         i64 
    jumplt         #10925     i64 
    setargs                   1 0
    push           "Too many io levels\n" u64 
    callproc       &printf    
    push           53         i64 
    stop                      
#10925: 
    push           &msysp.niostack 
    incr                      i64 1
    push           msysp.outchan u64 
    push           &msysp.outchan_stack 
    push           msysp.niostack i64 
    popptroff                 u64 8 -8
    push           msysp.outdev i64 
    push           &msysp.outdev_stack 
    push           msysp.niostack i64 
    popptroff                 i64 8 -8
    push           msysp.fmtstr u64 
    push           &msysp.fmtstr_stack 
    push           msysp.niostack i64 
    popptroff                 u64 8 -8
    push           msysp.needgap i64 
    push           &msysp.needgap_stack 
    push           msysp.niostack i64 
    popptroff                 u8 1 -1
    push           0          i64 
    pop            msysp.needgap i64 
    push           0          u64 
    pop            msysp.fmtstr u64 
    push           0          u64 
    pop            msysp.outchan u64 
#10926: 
    retproc                   
End


Proc msysp.m$print_startfile:
    param          msysp.m$print_startfile.dev u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.pushio 
    push           msysp.m$print_startfile.dev u64 
    pop            msysp.outchan u64 
    push           msysp.m$print_startfile.dev u64 
    jumpfalse      #10928     u64 
    push           2          i64 
    pop            msysp.outdev i64 
    jump           #10929     
#10928: 
    push           1          i64 
    pop            msysp.outdev i64 
#10929: 
#10930: 
    retproc                   
End


Proc msysp.m$print_startstr:
    param          msysp.m$print_startstr.s u64 
    local          msysp.m$print_startstr.p u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.pushio 
    push           msysp.m$print_startstr.s u64 
    push           &msysp.ptr_stack 
    push           msysp.niostack i64 
    popptroff                 u64 8 -8
    push           &msysp.ptr_stack 
    push           msysp.niostack i64 
    addrefoff                 u64 8 -8
    pop            msysp.m$print_startstr.p u64 
    push           msysp.m$print_startstr.p u64 
    pop            msysp.outchan u64 
    push           3          i64 
    pop            msysp.outdev i64 
#10932: 
    retproc                   
End


Proc msysp.m$print_startptr:
    param          msysp.m$print_startptr.p u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.pushio 
    push           msysp.m$print_startptr.p u64 
    pop            msysp.outchan u64 
    push           3          i64 
    pop            msysp.outdev i64 
#10934: 
    retproc                   
End


Proc msysp.m$print_startcon:
    procentry                 
    setargs                   0 0
    callproc       &msysp.pushio 
    push           1          i64 
    pop            msysp.outdev i64 
#10936: 
    retproc                   
End


Proc msysp.m$freddy:
    procentry                 
    setargs                   0 0
    callproc       &msysp.pushio 
    push           1          i64 
    pop            msysp.outdev i64 
#10938: 
    retproc                   
End


Proc msysp.m$print_setfmt:
    param          msysp.m$print_setfmt.format u64 
    procentry                 
    push           msysp.m$print_setfmt.format u64 
    pop            msysp.fmtstr u64 
#10940: 
    retproc                   
End


Proc msysp.m$print_end:
    procentry                 
    push           0          i64 
    pop            msysp.needgap i64 
    setargs                   1 0
    push           1          i64 
    callproc       &msysp.nextfmtchars 
    push           msysp.niostack i64 
    push           0          i64 
    jumpne         #10942     i64 
    jump           #10943     
#10942: 
    push           &msysp.outchan_stack 
    push           msysp.niostack i64 
    pushptroff                u64 8 -8
    pop            msysp.outchan u64 
    push           &msysp.outdev_stack 
    push           msysp.niostack i64 
    pushptroff                i64 8 -8
    pop            msysp.outdev i64 
    push           &msysp.fmtstr_stack 
    push           msysp.niostack i64 
    pushptroff                u64 8 -8
    pop            msysp.fmtstr u64 
    push           &msysp.needgap_stack 
    push           msysp.niostack i64 
    pushptroff                u8 1 -1
    pop            msysp.needgap i64 
    push           &msysp.niostack 
    decr                      i64 1
#10943: 
    retproc                   
End


Proc msysp.m$print_ptr:
    param          msysp.m$print_ptr.a u64 
    param          msysp.m$print_ptr.fmtstyle u64 
    local          msysp.m$print_ptr.s block:20 
    procentry                 
    push           msysp.m$print_ptr.fmtstyle u64 
    push           0          u64 
    jumpne         #10945     u64 
    push           "z8H"      u64 
    pop            msysp.m$print_ptr.fmtstyle u64 
#10945: 
    setargs                   2 0
    push           msysp.m$print_ptr.fmtstyle u64 
    push           msysp.m$print_ptr.a u64 
    callproc       &msysp.m$print_u64 
#10946: 
    retproc                   
End


Proc msysp.m$print_ptr_nf:
    param          msysp.m$print_ptr_nf.a u64 
    procentry                 
    setargs                   2 0
    push           0          u64 
    push           msysp.m$print_ptr_nf.a u64 
    callproc       &msysp.m$print_ptr 
#10948: 
    retproc                   
End


Proc msysp.m$print_i64:
    param          msysp.m$print_i64.a i64 
    param          msysp.m$print_i64.fmtstyle u64 
    local          msysp.m$print_i64.s block:40 
    local          msysp.m$print_i64.fmt block:16 
    local          msysp.m$print_i64.n i64 
    procentry                 
    setargs                   1 0
    push           0          i64 
    callproc       &msysp.nextfmtchars 
    push           msysp.m$print_i64.fmtstyle u64 
    push           0          u64 
    jumpne         #10950     u64 
    push           msysp.m$print_i64.a i64 
    push           0          i64 
    jumplt         #10951     i64 
    setargs                   4 0
    push           0          i64 
    push           10         u64 
    push           &msysp.m$print_i64.s 
    push           msysp.m$print_i64.a u64 
    callfn         &msysp.u64tostr i64 
    pop            msysp.m$print_i64.n i64 
    jump           #10952     
#10951: 
    push           45         u64 
    push           &msysp.m$print_i64.s 
    push           1          i64 
    popptroff                 u8 1 -1
    setargs                   4 0
    push           0          i64 
    push           10         u64 
    push           &msysp.m$print_i64.s 
    push           1          
    addrefoff                 u8 1 0
    push           msysp.m$print_i64.a i64 
    neg                       u64 
    callfn         &msysp.u64tostr i64 
    push           1          i64 
    add                       i64 
    pop            msysp.m$print_i64.n i64 
#10952: 
    setargs                   2 0
    push           msysp.m$print_i64.n i64 
    push           &msysp.m$print_i64.s 
    callproc       &msysp.printstr_n 
    jump           #10953     
#10950: 
    setargs                   3 0
    push           &msysp.m$print_i64.fmt 
    push           -1         i64 
    push           msysp.m$print_i64.fmtstyle u64 
    callproc       &msysp.strtofmt 
    push           &msysp.m$print_i64.fmt 
    push           14         
    pushptroff                u8 1 0
    push           86         u64 
    jumpne         #10954     u64 
    push           msysp.m$print_i64.a i64 
    pop            msysp.fmtparam i64 
    push           0          i64 
    pop            msysp.needgap i64 
    jump           #10955     
#10954: 
    setargs                   2 0
    push           &msysp.m$print_i64.fmt 
    push           msysp.m$print_i64.a i64 
    callproc       &msysp.tostr_i64 
#10955: 
#10953: 
    push           1          i64 
    pop            msysp.needgap i64 
#10956: 
    retproc                   
End


Proc msysp.m$print_i64_nf:
    param          msysp.m$print_i64_nf.a i64 
    procentry                 
    setargs                   2 0
    push           0          u64 
    push           msysp.m$print_i64_nf.a i64 
    callproc       &msysp.m$print_i64 
#10958: 
    retproc                   
End


Proc msysp.m$print_u64:
    param          msysp.m$print_u64.a u64 
    param          msysp.m$print_u64.fmtstyle u64 
    local          msysp.m$print_u64.s block:40 
    local          msysp.m$print_u64.fmt block:16 
    procentry                 
    setargs                   1 0
    push           0          i64 
    callproc       &msysp.nextfmtchars 
    push           msysp.m$print_u64.fmtstyle u64 
    push           0          u64 
    jumpne         #10960     u64 
    setargs                   3 3
    push           msysp.m$print_u64.a u64 
    push           "%llu"     u64 
    push           &msysp.m$print_u64.s 
    callproc       &sprintf   
    setargs                   1 0
    push           &msysp.m$print_u64.s 
    callproc       &msysp.printstr 
    jump           #10961     
#10960: 
    setargs                   3 0
    push           &msysp.m$print_u64.fmt 
    push           -1         i64 
    push           msysp.m$print_u64.fmtstyle u64 
    callproc       &msysp.strtofmt 
    setargs                   2 0
    push           &msysp.m$print_u64.fmt 
    push           msysp.m$print_u64.a u64 
    callproc       &msysp.tostr_u64 
#10961: 
    push           1          i64 
    pop            msysp.needgap i64 
#10962: 
    retproc                   
End


Proc msysp.m$print_i128:
    param          msysp.m$print_i128.a i128 
    param          msysp.m$print_i128.fmtstyle u64 
    local          msysp.m$print_i128.s block:40 
    local          msysp.m$print_i128.fmt block:16 
    procentry                 
    setargs                   1 0
    push           0          i64 
    callproc       &msysp.nextfmtchars 
    setargs                   3 0
    push           &msysp.m$print_i128.fmt 
    push           -1         i64 
    push           msysp.m$print_i128.fmtstyle u64 
    callproc       &msysp.strtofmt 
    push           msysp.m$print_i128.a i128 
    push           0          i64 
    widenw                    i128 i64 
    jumplt         #10964     i128 
    setargs                   4 0
    push           0          i64 
    push           &msysp.m$print_i128.fmt 
    push           msysp.m$print_i128.a u128 
    callproc       &msysp.tostr_u128 
    jump           #10965     
#10964: 
    setargs                   4 0
    push           1          i64 
    push           &msysp.m$print_i128.fmt 
    push           msysp.m$print_i128.a i128 
    neg                       u128 
    callproc       &msysp.tostr_u128 
#10965: 
    push           1          i64 
    pop            msysp.needgap i64 
#10966: 
    retproc                   
End


Proc msysp.m$print_u128:
    param          msysp.m$print_u128.a u128 
    param          msysp.m$print_u128.fmtstyle u64 
    local          msysp.m$print_u128.s block:40 
    local          msysp.m$print_u128.fmt block:16 
    procentry                 
    setargs                   1 0
    push           0          i64 
    callproc       &msysp.nextfmtchars 
    setargs                   3 0
    push           &msysp.m$print_u128.fmt 
    push           -1         i64 
    push           msysp.m$print_u128.fmtstyle u64 
    callproc       &msysp.strtofmt 
    setargs                   4 0
    push           0          i64 
    push           &msysp.m$print_u128.fmt 
    push           msysp.m$print_u128.a u128 
    callproc       &msysp.tostr_u128 
    push           1          i64 
    pop            msysp.needgap i64 
#10968: 
    retproc                   
End


Proc msysp.m$print_r64:
    param          msysp.m$print_r64.x r64 
    param          msysp.m$print_r64.fmtstyle u64 
    local          msysp.m$print_r64.s block:360 
    local          msysp.m$print_r64.fmt block:16 
    procentry                 
    setargs                   1 0
    push           0          i64 
    callproc       &msysp.nextfmtchars 
    push           msysp.m$print_r64.fmtstyle u64 
    push           0          u64 
    jumpne         #10970     u64 
    setargs                   3 3
    push           msysp.m$print_r64.x r64 
    push           "%f"       u64 
    push           &msysp.m$print_r64.s 
    callproc       &sprintf   
    setargs                   1 0
    push           &msysp.m$print_r64.s 
    callproc       &msysp.printstr 
    jump           #10971     
#10970: 
    setargs                   3 0
    push           &msysp.m$print_r64.fmt 
    push           -1         i64 
    push           msysp.m$print_r64.fmtstyle u64 
    callproc       &msysp.strtofmt 
    setargs                   2 0
    push           &msysp.m$print_r64.fmt 
    push           msysp.m$print_r64.x r64 
    callproc       &msysp.tostr_r64 
#10971: 
    push           1          i64 
    pop            msysp.needgap i64 
#10972: 
    retproc                   
End


Proc msysp.m$print_r32:
    param          msysp.m$print_r32.x r32 
    param          msysp.m$print_r32.fmtstyle u64 
    procentry                 
    setargs                   2 0
    push           msysp.m$print_r32.fmtstyle u64 
    push           msysp.m$print_r32.x r32 
    fwiden                    r64 r32 
    callproc       &msysp.m$print_r64 
#10974: 
    retproc                   
End


Proc msysp.m$print_c8:
    param          msysp.m$print_c8.a i64 
    param          msysp.m$print_c8.fmtstyle u64 
    local          msysp.m$print_c8.s block:40 
    local          msysp.m$print_c8.fmt block:16 
    local          msysp.m$print_c8.n i64 
    procentry                 
    setargs                   1 0
    push           0          i64 
    callproc       &msysp.nextfmtchars 
    push           msysp.m$print_c8.a u64 
    push           &msysp.m$print_c8.s 
    push           1          i64 
    popptroff                 u8 1 -1
    push           0          u64 
    push           &msysp.m$print_c8.s 
    push           2          i64 
    popptroff                 u8 1 -1
    setargs                   1 0
    push           &msysp.m$print_c8.s 
    callproc       &msysp.printstr 
    push           1          i64 
    pop            msysp.needgap i64 
#10976: 
    retproc                   
End


Proc msysp.m$print_str:
    param          msysp.m$print_str.s u64 
    param          msysp.m$print_str.fmtstyle u64 
    local          msysp.m$print_str.fmt block:16 
    procentry                 
    setargs                   1 0
    push           0          i64 
    callproc       &msysp.nextfmtchars 
    push           msysp.m$print_str.s u64 
    push           0          u64 
    jumpne         #10978     u64 
    setargs                   1 0
    push           "<null>"   u64 
    callproc       &msysp.printstr 
    jump           #10979     
#10978: 
    push           msysp.m$print_str.fmtstyle u64 
    push           0          u64 
    jumpne         #10980     u64 
    setargs                   1 0
    push           msysp.m$print_str.s u64 
    callproc       &msysp.printstr 
    jump           #10981     
#10980: 
    setargs                   3 0
    push           &msysp.m$print_str.fmt 
    push           -1         i64 
    push           msysp.m$print_str.fmtstyle u64 
    callproc       &msysp.strtofmt 
    setargs                   2 0
    push           &msysp.m$print_str.fmt 
    push           msysp.m$print_str.s u64 
    callproc       &msysp.tostr_str 
#10981: 
    push           1          i64 
    pop            msysp.needgap i64 
#10979: 
    retproc                   
End


Proc msysp.m$print_str_nf:
    param          msysp.m$print_str_nf.s u64 
    procentry                 
    setargs                   2 0
    push           0          u64 
    push           msysp.m$print_str_nf.s u64 
    callproc       &msysp.m$print_str 
#10983: 
    retproc                   
End


Proc msysp.m$print_strsl:
    param          msysp.m$print_strsl.s u128 
    param          msysp.m$print_strsl.fmtstyle u64 
    local          msysp.m$print_strsl.fmt block:16 
    procentry                 
    setargs                   1 0
    push           0          i64 
    callproc       &msysp.nextfmtchars 
    setargs                   1 0
    push           "FORMATED PRINT SLICE NOT READY" u64 
    callproc       &mlibp.abortprogram 
    push           1          i64 
    pop            msysp.needgap i64 
#10985: 
    retproc                   
End


Proc msysp.m$print_newline:
    procentry                 
    push           0          i64 
    pop            msysp.needgap i64 
    setargs                   1 0
    push           1          i64 
    callproc       &msysp.nextfmtchars 
    setargs                   1 0
    push           "\c\n"     u64 
    callproc       &msysp.printstr 
#10987: 
    retproc                   
End


Proc msysp.m$print_nogap:
    procentry                 
    push           0          i64 
    pop            msysp.needgap i64 
#10989: 
    retproc                   
End


Proc msysp.m$print_space:
    procentry                 
    push           0          i64 
    pop            msysp.needgap i64 
    setargs                   1 0
    push           " "        u64 
    callproc       &msysp.printstr 
#10991: 
    retproc                   
End


Proc msysp.printstr:
    param          msysp.printstr.s u64 
    local          msysp.printstr.n i64 
    local          msysp.printstr.p u64 
    procentry                 
    push           msysp.outdev i64 
    push           1          i64 
    casejumpeq     #10993     i64 0
    push           2          i64 
    casejumpeq     #10994     i64 0
    push           3          i64 
    casejumpeq     #10995     i64 0
    popstack                  i64 
    jump           #10996     
#10993: 
    setargs                   2 2
    push           msysp.printstr.s u64 
    push           "%s"       u64 
    callproc       &printf    
    jump           #10997     
#10994: 
    setargs                   3 3
    push           msysp.printstr.s u64 
    push           "%s"       u64 
    push           msysp.outchan u64 
    callproc       &fprintf   
    jump           #10997     
#10995: 
    push           msysp.outchan u64 
    pop            msysp.printstr.p u64 
    setargs                   2 0
    push           msysp.printstr.s u64 
    push           msysp.printstr.p u64 
    pushptr                   u64 
    callproc       &strcpy    
    push           msysp.printstr.p u64 
    setargs                   1 0
    push           msysp.printstr.s u64 
    callfn         &strlen    i64 
    addrefoffto               u64 1 0
    push           0          u64 
    push           msysp.printstr.p u64 
    pushptr                   u64 
    popptr                    u8 
    jump           #10997     
#10996: 
#10997: 
#10998: 
    retproc                   
End


Proc msysp.printstr_n:
    param          msysp.printstr_n.s u64 
    param          msysp.printstr_n.n i64 
    local          msysp.printstr_n.p u64 
    procentry                 
    push           msysp.printstr_n.n i64 
    push           -1         i64 
    casejumpeq     #11000     i64 0
    push           0          i64 
    casejumpeq     #11001     i64 0
    popstack                  i64 
    jump           #11002     
#11000: 
    setargs                   1 0
    push           msysp.printstr_n.s u64 
    callfn         &strlen    i64 
    pop            msysp.printstr_n.n i64 
    jump           #11003     
#11001: 
    jump           #11004     
    jump           #11003     
#11002: 
#11003: 
    push           msysp.outdev i64 
    push           1          i64 
    casejumpeq     #11005     i64 0
    push           2          i64 
    casejumpeq     #11006     i64 0
    push           3          i64 
    casejumpeq     #11007     i64 0
    popstack                  i64 
    jump           #11008     
#11005: 
    setargs                   3 2
    push           msysp.printstr_n.s u64 
    push           msysp.printstr_n.n i64 
    push           "%.*s"     u64 
    callproc       &printf    
    jump           #11009     
#11006: 
    setargs                   4 3
    push           msysp.printstr_n.s u64 
    push           msysp.printstr_n.n i64 
    push           "%.*s"     u64 
    push           msysp.outchan u64 
    callproc       &fprintf   
    jump           #11009     
#11007: 
    push           msysp.outchan u64 
    pop            msysp.printstr_n.p u64 
    setargs                   3 0
    push           msysp.printstr_n.n u64 
    push           msysp.printstr_n.s u64 
    push           msysp.printstr_n.p u64 
    pushptr                   u64 
    callproc       &memcpy    
    push           msysp.printstr_n.p u64 
    push           msysp.printstr_n.n i64 
    addrefoffto               u64 1 0
    push           0          u64 
    push           msysp.printstr_n.p u64 
    pushptr                   u64 
    popptr                    u8 
    jump           #11009     
#11008: 
#11009: 
#11004: 
    retproc                   
End


Proc msysp.printstrn_app:
    param          msysp.printstrn_app.s u64 
    param          msysp.printstrn_app.length i64 
    param          msysp.printstrn_app.f u64 
    procentry                 
    push           msysp.printstrn_app.length i64 
    jumpfalse      #11011     i64 
    push           msysp.printstrn_app.f u64 
    push           0          u64 
    jumpne         #11012     u64 
    setargs                   3 2
    push           msysp.printstrn_app.s u64 
    push           msysp.printstrn_app.length i64 
    push           "%.*s"     u64 
    callproc       &printf    
    jump           #11013     
#11012: 
    setargs                   4 3
    push           msysp.printstrn_app.s u64 
    push           msysp.printstrn_app.length i64 
    push           "%.*s"     u64 
    push           msysp.printstrn_app.f u64 
    callproc       &fprintf   
#11013: 
#11011: 
#11014: 
    retproc                   
End


Proc msysp.printchar:
    param          msysp.printchar.ch i64 
    local          msysp.printchar.p u64 
    procentry                 
    push           msysp.outdev i64 
    push           1          i64 
    casejumpeq     #11016     i64 0
    push           2          i64 
    casejumpeq     #11017     i64 0
    push           3          i64 
    casejumpeq     #11018     i64 0
    popstack                  i64 
    jump           #11019     
#11016: 
    setargs                   2 2
    push           msysp.printchar.ch i64 
    push           "%c"       u64 
    callproc       &printf    
    jump           #11020     
#11017: 
    setargs                   3 3
    push           msysp.printchar.ch i64 
    push           "%c"       u64 
    push           msysp.outchan u64 
    callproc       &fprintf   
    jump           #11020     
#11018: 
    push           msysp.outchan u64 
    pop            msysp.printchar.p u64 
    push           msysp.printchar.ch u64 
    push           msysp.printchar.p u64 
    pushptr                   u64 
    popptr                    u8 
    push           msysp.printchar.p u64 
    push           1          i64 
    addrefoffto               u64 1 0
    push           0          u64 
    push           msysp.printchar.p u64 
    pushptr                   u64 
    popptr                    u8 
    jump           #11020     
#11019: 
#11020: 
#11021: 
    retproc                   
End


Proc msysp.nextfmtchars:
    param          msysp.nextfmtchars.lastx i64 
    local          msysp.nextfmtchars.c u8 
    local          msysp.nextfmtchars.pstart u64 
    local          msysp.nextfmtchars.n i64 
    procentry                 
    push           msysp.fmtstr u64 
    jumptrue       #11023     u64 
    push           msysp.needgap i64 
    jumpfalse      #11024     i64 
    setargs                   1 0
    push           32         i64 
    callproc       &msysp.printchar 
#11024: 
    push           0          i64 
    pop            msysp.needgap i64 
    jump           #11025     
#11023: 
    push           msysp.fmtstr u64 
    pop            msysp.nextfmtchars.pstart u64 
    push           0          i64 
    pop            msysp.nextfmtchars.n i64 
#11026: 
    push           msysp.fmtstr u64 
    pushptr                   u8 
    pop            msysp.nextfmtchars.c u8 
    push           msysp.nextfmtchars.c u8 
    switch         #11027     0 126
    opnd           #11028     
#11027: 
    switchlabel    #11029     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11030     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11028     
    switchlabel    #11031     
    endswitch                 
#11030: 
    push           msysp.nextfmtchars.lastx i64 
    jumpfalse      #11032     i64 
    jump           #11033     
#11032: 
    push           &msysp.fmtstr 
    incr                      u64 1
    push           msysp.nextfmtchars.n i64 
    jumpfalse      #11034     i64 
    setargs                   2 0
    push           msysp.nextfmtchars.n i64 
    push           msysp.nextfmtchars.pstart u64 
    callproc       &msysp.printstr_n 
#11034: 
    jump           #11025     
    jump           #11035     
#11029: 
    push           msysp.nextfmtchars.n i64 
    jumpfalse      #11036     i64 
    setargs                   2 0
    push           msysp.nextfmtchars.n i64 
    push           msysp.nextfmtchars.pstart u64 
    callproc       &msysp.printstr_n 
    jump           #11037     
#11036: 
    push           msysp.nextfmtchars.lastx i64 
    jumptrue       #11038     i64 
    setargs                   2 0
    push           1          i64 
    push           "|"        u64 
    callproc       &msysp.printstr_n 
#11038: 
#11037: 
    jump           #11025     
    jump           #11035     
#11031: 
    push           msysp.nextfmtchars.n i64 
    jumpfalse      #11039     i64 
    setargs                   2 0
    push           msysp.nextfmtchars.n i64 
    push           msysp.nextfmtchars.pstart u64 
    callproc       &msysp.printstr_n 
    push           0          i64 
    pop            msysp.nextfmtchars.n i64 
#11039: 
    push           &msysp.fmtstr 
    incr                      u64 1
    push           msysp.fmtstr u64 
    pushptr                   u8 
    pop            msysp.nextfmtchars.c u8 
    push           msysp.nextfmtchars.c u8 
    jumpfalse      #11040     u64 
    push           &msysp.fmtstr 
    incr                      u64 1
    setargs                   1 0
    push           msysp.nextfmtchars.c u8 
    callproc       &msysp.printchar 
#11040: 
    push           msysp.fmtstr u64 
    pop            msysp.nextfmtchars.pstart u64 
    jump           #11035     
#11028: 
!skip::
#11033: 
    push           &msysp.nextfmtchars.n 
    incr                      i64 1
    push           &msysp.fmtstr 
    incr                      u64 1
#11035: 
    jump           #11026     
#11041: 
#11025: 
    retproc                   
End


Proc msysp.strtofmt:
    param          msysp.strtofmt.s u64 
    param          msysp.strtofmt.slen i64 
    param          msysp.strtofmt.fmt u64 
    local          msysp.strtofmt.c i64 
    local          msysp.strtofmt.wset u8 
    local          msysp.strtofmt.n i64 
    local          msysp.strtofmt.str block:100 
    procentry                 
    push           msysp.defaultfmt block:16 
    push           msysp.strtofmt.fmt u64 
    popptr                    block:16 
    push           msysp.strtofmt.s u64 
    push           0          u64 
    jumpne         #11043     u64 
    jump           #11044     
#11043: 
    push           msysp.strtofmt.slen i64 
    push           -1         i64 
    jumpne         #11045     i64 
    setargs                   1 0
    push           msysp.strtofmt.s u64 
    callfn         &strlen    i64 
    pop            msysp.strtofmt.slen i64 
#11045: 
    setargs                   3 0
    push           msysp.strtofmt.slen u64 
    push           msysp.strtofmt.s u64 
    push           &msysp.strtofmt.str 
    callproc       &memcpy    
    push           0          u64 
    push           &msysp.strtofmt.str 
    push           msysp.strtofmt.slen i64 
    popptroff                 u8 1 0
    push           &msysp.strtofmt.str 
    pop            msysp.strtofmt.s u64 
    push           0          i64 
    pop            msysp.strtofmt.wset u8 
    jump           #11046     
#11047: 
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    pop            msysp.strtofmt.c i64 
    push           &msysp.strtofmt.s 
    incr                      u64 1
    push           msysp.strtofmt.c i64 
    switch         #11048     42 126
    opnd           #11049     
#11048: 
    switchlabel    #11050     
    switchlabel    #11051     
    switchlabel    #11052     
    switchlabel    #11049     
    switchlabel    #11053     
    switchlabel    #11049     
    switchlabel    #11049     
    switchlabel    #11049     
    switchlabel    #11049     
    switchlabel    #11049     
    switchlabel    #11049     
    switchlabel    #11049     
    switchlabel    #11049     
    switchlabel    #11049     
    switchlabel    #11049     
    switchlabel    #11049     
    switchlabel    #11049     
    switchlabel    #11049     
    switchlabel    #11049     
    switchlabel    #11049     
    switchlabel    #11049     
    switchlabel    #11049     
    switchlabel    #11049     
    switchlabel    #11054     
    switchlabel    #11055     
    switchlabel    #11056     
    switchlabel    #11057     
    switchlabel    #11058     
    switchlabel    #11059     
    switchlabel    #11060     
    switchlabel    #11061     
    switchlabel    #11049     
    switchlabel    #11062     
    switchlabel    #11049     
    switchlabel    #11049     
    switchlabel    #11063     
    switchlabel    #11049     
    switchlabel    #11064     
    switchlabel    #11065     
    switchlabel    #11066     
    switchlabel    #11049     
    switchlabel    #11067     
    switchlabel    #11068     
    switchlabel    #11049     
    switchlabel    #11069     
    switchlabel    #11070     
    switchlabel    #11071     
    switchlabel    #11049     
    switchlabel    #11072     
    switchlabel    #11049     
    switchlabel    #11049     
    switchlabel    #11049     
    switchlabel    #11049     
    switchlabel    #11052     
    switchlabel    #11049     
    switchlabel    #11073     
    switchlabel    #11055     
    switchlabel    #11056     
    switchlabel    #11057     
    switchlabel    #11058     
    switchlabel    #11059     
    switchlabel    #11060     
    switchlabel    #11061     
    switchlabel    #11049     
    switchlabel    #11062     
    switchlabel    #11049     
    switchlabel    #11049     
    switchlabel    #11063     
    switchlabel    #11049     
    switchlabel    #11064     
    switchlabel    #11065     
    switchlabel    #11066     
    switchlabel    #11049     
    switchlabel    #11067     
    switchlabel    #11068     
    switchlabel    #11049     
    switchlabel    #11069     
    switchlabel    #11070     
    switchlabel    #11071     
    switchlabel    #11049     
    switchlabel    #11072     
    switchlabel    #11049     
    switchlabel    #11049     
    switchlabel    #11049     
    switchlabel    #11074     
    endswitch                 
#11055: 
    push           2          i64 
    push           msysp.strtofmt.fmt u64 
    push           2          
    popptroff                 u8 1 0
    jump           #11075     
#11061: 
    push           16         i64 
    push           msysp.strtofmt.fmt u64 
    push           2          
    popptroff                 u8 1 0
    jump           #11075     
#11064: 
    push           8          i64 
    push           msysp.strtofmt.fmt u64 
    push           2          
    popptroff                 u8 1 0
    jump           #11075     
#11071: 
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    pop            msysp.strtofmt.c i64 
    push           msysp.strtofmt.c i64 
    jumpfalse      #11076     i64 
    push           msysp.strtofmt.c i64 
    switch         #11077     48 102
    opnd           #11078     
#11077: 
    switchlabel    #11079     
    switchlabel    #11079     
    switchlabel    #11079     
    switchlabel    #11079     
    switchlabel    #11079     
    switchlabel    #11079     
    switchlabel    #11079     
    switchlabel    #11079     
    switchlabel    #11079     
    switchlabel    #11079     
    switchlabel    #11078     
    switchlabel    #11078     
    switchlabel    #11078     
    switchlabel    #11078     
    switchlabel    #11078     
    switchlabel    #11078     
    switchlabel    #11078     
    switchlabel    #11080     
    switchlabel    #11080     
    switchlabel    #11080     
    switchlabel    #11080     
    switchlabel    #11080     
    switchlabel    #11080     
    switchlabel    #11078     
    switchlabel    #11078     
    switchlabel    #11078     
    switchlabel    #11078     
    switchlabel    #11078     
    switchlabel    #11078     
    switchlabel    #11078     
    switchlabel    #11078     
    switchlabel    #11078     
    switchlabel    #11078     
    switchlabel    #11078     
    switchlabel    #11078     
    switchlabel    #11078     
    switchlabel    #11078     
    switchlabel    #11078     
    switchlabel    #11078     
    switchlabel    #11078     
    switchlabel    #11078     
    switchlabel    #11078     
    switchlabel    #11078     
    switchlabel    #11078     
    switchlabel    #11078     
    switchlabel    #11078     
    switchlabel    #11078     
    switchlabel    #11078     
    switchlabel    #11078     
    switchlabel    #11081     
    switchlabel    #11081     
    switchlabel    #11081     
    switchlabel    #11081     
    switchlabel    #11081     
    switchlabel    #11081     
    endswitch                 
#11079: 
    push           msysp.strtofmt.c i64 
    push           48         i64 
    sub                       i64 
    pop            msysp.strtofmt.c i64 
    jump           #11082     
#11080: 
    push           msysp.strtofmt.c i64 
    push           65         i64 
    sub                       i64 
    push           10         i64 
    add                       i64 
    pop            msysp.strtofmt.c i64 
    jump           #11082     
#11081: 
    push           msysp.strtofmt.c i64 
    push           97         i64 
    sub                       i64 
    push           10         i64 
    add                       i64 
    pop            msysp.strtofmt.c i64 
    jump           #11082     
#11078: 
    push           10         i64 
    pop            msysp.strtofmt.c i64 
#11082: 
    push           msysp.strtofmt.c i64 
    push           msysp.strtofmt.fmt u64 
    push           2          
    popptroff                 u8 1 0
    push           &msysp.strtofmt.s 
    incr                      u64 1
#11076: 
    jump           #11075     
#11066: 
    push           34         u64 
    push           msysp.strtofmt.fmt u64 
    push           3          
    popptroff                 u8 1 0
    jump           #11075     
#11074: 
    push           126        u64 
    push           msysp.strtofmt.fmt u64 
    push           3          
    popptroff                 u8 1 0
    jump           #11075     
#11062: 
    setargs                   1 0
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    callfn         &toupper   i32 
    push           msysp.strtofmt.fmt u64 
    push           9          
    popptroff                 u8 1 0
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    jumpfalse      #11083     u64 
    push           &msysp.strtofmt.s 
    incr                      u64 1
#11083: 
    jump           #11075     
#11054: 
    push           65         u64 
    push           msysp.strtofmt.fmt u64 
    push           8          
    popptroff                 u8 1 0
    jump           #11075     
#11073: 
    push           97         u64 
    push           msysp.strtofmt.fmt u64 
    push           8          
    popptroff                 u8 1 0
    jump           #11075     
#11072: 
    push           48         u64 
    push           msysp.strtofmt.fmt u64 
    push           4          
    popptroff                 u8 1 0
    jump           #11075     
#11067: 
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    push           msysp.strtofmt.fmt u64 
    push           7          
    popptroff                 u8 1 0
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    jumpfalse      #11084     u64 
    push           &msysp.strtofmt.s 
    incr                      u64 1
#11084: 
    jump           #11075     
#11065: 
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    push           msysp.strtofmt.fmt u64 
    push           4          
    popptroff                 u8 1 0
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    jumpfalse      #11085     u64 
    push           &msysp.strtofmt.s 
    incr                      u64 1
#11085: 
    jump           #11075     
#11068: 
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    push           msysp.strtofmt.fmt u64 
    push           10         
    popptroff                 u8 1 0
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    jumpfalse      #11086     u64 
    push           &msysp.strtofmt.s 
    incr                      u64 1
#11086: 
    jump           #11075     
#11070: 
    push           87         u64 
    push           msysp.strtofmt.fmt u64 
    push           11         
    popptroff                 u8 1 0
    jump           #11075     
#11058: 
    push           101        u64 
    push           msysp.strtofmt.fmt u64 
    push           5          
    popptroff                 u8 1 0
    jump           #11075     
#11059: 
    push           102        u64 
    push           msysp.strtofmt.fmt u64 
    push           5          
    popptroff                 u8 1 0
    jump           #11075     
#11060: 
    push           103        u64 
    push           msysp.strtofmt.fmt u64 
    push           5          
    popptroff                 u8 1 0
    jump           #11075     
#11053: 
    push           1          i64 
    pop            msysp.strtofmt.wset u8 
    jump           #11075     
#11052: 
    push           msysp.strtofmt.c u64 
    push           msysp.strtofmt.fmt u64 
    push           7          
    popptroff                 u8 1 0
    jump           #11075     
#11051: 
    push           43         u64 
    push           msysp.strtofmt.fmt u64 
    push           6          
    popptroff                 u8 1 0
    jump           #11075     
#11057: 
    push           68         u64 
    push           msysp.strtofmt.fmt u64 
    push           12         
    popptroff                 u8 1 0
    jump           #11075     
#11056: 
    push           67         u64 
    push           msysp.strtofmt.fmt u64 
    push           12         
    popptroff                 u8 1 0
    jump           #11075     
#11063: 
    push           77         u64 
    push           msysp.strtofmt.fmt u64 
    push           13         
    popptroff                 u8 1 0
    jump           #11075     
#11069: 
    push           86         u64 
    push           msysp.strtofmt.fmt u64 
    push           14         
    popptroff                 u8 1 0
    jump           #11075     
#11050: 
    push           msysp.fmtparam i64 
    pop            msysp.strtofmt.n i64 
    jump           #11087     
    jump           #11075     
#11049: 
    push           msysp.strtofmt.c i64 
    push           48         i64 
    jumplt         #11088     i64 
    push           msysp.strtofmt.c i64 
    push           57         i64 
    jumpgt         #11088     i64 
    push           msysp.strtofmt.c i64 
    push           48         i64 
    sub                       i64 
    pop            msysp.strtofmt.n i64 
#11089: 
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    pop            msysp.strtofmt.c i64 
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    push           0          i64 
    jumpne         #11090     i64 
    jump           #11091     
#11090: 
    push           msysp.strtofmt.c i64 
    push           48         i64 
    jumplt         #11092     i64 
    push           msysp.strtofmt.c i64 
    push           57         i64 
    jumpgt         #11092     i64 
    push           &msysp.strtofmt.s 
    incr                      u64 1
    push           msysp.strtofmt.n i64 
    push           10         i64 
    mul                       i64 
    push           msysp.strtofmt.c i64 
    add                       i64 
    push           48         i64 
    sub                       i64 
    pop            msysp.strtofmt.n i64 
    jump           #11093     
#11092: 
    jump           #11091     
#11093: 
    jump           #11089     
#11091: 
!gotwidth::
#11087: 
    push           msysp.strtofmt.wset u8 
    jumptrue       #11094     i64 
    push           msysp.strtofmt.n i64 
    push           msysp.strtofmt.fmt u64 
    push           0          
    popptroff                 u8 1 0
    push           1          i64 
    pop            msysp.strtofmt.wset u8 
    jump           #11095     
#11094: 
    push           msysp.strtofmt.n i64 
    push           msysp.strtofmt.fmt u64 
    push           1          
    popptroff                 i8 1 0
#11095: 
#11088: 
#11075: 
#11046: 
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    jumptrue       #11047     u64 
#11096: 
#11044: 
    retproc                   
End


Proc msysp.domultichar: i64
    param          msysp.domultichar.p u64 
    param          msysp.domultichar.n i64 
    param          msysp.domultichar.dest u64 
    param          msysp.domultichar.fmt u64 
    local          msysp.domultichar.str block:20 
    local          msysp.domultichar.q u64 
    local          msysp.domultichar.i i64 
    local          msysp.domultichar.nchars i64 
    local          msysp.domultichar.av_1 i64 
    procentry                 
    push           &msysp.domultichar.str 
    pop            msysp.domultichar.q u64 
    push           msysp.domultichar.n i64 
    pop            msysp.domultichar.nchars i64 
#11098: 
    push           msysp.domultichar.n i64 
    pop            msysp.domultichar.av_1 i64 
    push           msysp.domultichar.av_1 i64 
    push           0          i64 
    jumple         #11099     i64 
#11100: 
    push           msysp.domultichar.p u64 
    pushptr                   u8 
    push           0          i64 
    jumpne         #11101     i64 
    jump           #11099     
#11101: 
    push           msysp.domultichar.p u64 
    pushptr                   u8 
    push           msysp.domultichar.q u64 
    popptr                    u8 
    push           &msysp.domultichar.q 
    incr                      u64 1
    push           &msysp.domultichar.p 
    incr                      u64 1
#11102: 
    to             #11100     
    opnd           msysp.domultichar.av_1 
#11099: 
    push           0          u64 
    push           msysp.domultichar.q u64 
    popptr                    u8 
    setargs                   4 0
    push           msysp.domultichar.fmt u64 
    setargs                   1 0
    push           &msysp.domultichar.str 
    callfn         &strlen    i64 
    push           msysp.domultichar.dest u64 
    push           &msysp.domultichar.str 
    callfn         &msysp.expandstr i64 
    setret                    i64 
    jump           #11103     
#11103: 
    retfn                     i64 
End


Proc msysp.expandstr: i64
    param          msysp.expandstr.s u64 
    param          msysp.expandstr.t u64 
    param          msysp.expandstr.n i64 
    param          msysp.expandstr.fmt u64 
    local          msysp.expandstr.i i64 
    local          msysp.expandstr.w i64 
    local          msysp.expandstr.m i64 
    local          msysp.expandstr.av_1 i64 
    local          msysp.expandstr.av_2 i64 
    local          msysp.expandstr.av_3 i64 
    local          msysp.expandstr.av_4 i64 
    local          msysp.expandstr.av_5 i64 
    procentry                 
    push           msysp.expandstr.fmt u64 
    pushptr                   u8 
    pop            msysp.expandstr.w i64 
    push           msysp.expandstr.w i64 
    push           0          i64 
    jumpeq         #11105     i64 
    push           msysp.expandstr.w i64 
    push           msysp.expandstr.n i64 
    jumpgt         #11106     i64 
#11105: 
    setargs                   3 0
    push           msysp.expandstr.n u64 
    push           msysp.expandstr.s u64 
    push           msysp.expandstr.t u64 
    callproc       &strncpy   
    push           0          u64 
    push           msysp.expandstr.t u64 
    push           msysp.expandstr.n i64 
    popptroff                 u8 1 0
    push           msysp.expandstr.n i64 
    setret                    i64 
    jump           #11107     
#11106: 
    push           msysp.expandstr.fmt u64 
    push           9          
    pushptroff                u8 1 0
    push           76         u64 
    jumpne         #11108     u64 
    setargs                   3 0
    push           msysp.expandstr.n u64 
    push           msysp.expandstr.s u64 
    push           msysp.expandstr.t u64 
    callproc       &strncpy   
    push           &msysp.expandstr.t 
    push           msysp.expandstr.n i64 
    addrefoffto               u64 1 0
#11109: 
    push           1          i64 
    pop            msysp.expandstr.i i64 
    push           msysp.expandstr.w i64 
    push           msysp.expandstr.n i64 
    sub                       i64 
    pop            msysp.expandstr.av_1 i64 
    push           msysp.expandstr.av_1 i64 
    push           1          i64 
    jumplt         #11110     i64 
#11111: 
    push           msysp.expandstr.fmt u64 
    push           4          
    pushptroff                u8 1 0
    push           msysp.expandstr.t u64 
    popptr                    u8 
    push           &msysp.expandstr.t 
    incr                      u64 1
#11112: 
    forup          #11111     i64 1
    opnd           msysp.expandstr.i 
    opnd           msysp.expandstr.av_1 
#11110: 
    push           0          u64 
    push           msysp.expandstr.t u64 
    popptr                    u8 
    jump           #11113     
#11108: 
    push           msysp.expandstr.fmt u64 
    push           9          
    pushptroff                u8 1 0
    push           82         u64 
    jumpne         #11114     u64 
    push           msysp.expandstr.fmt u64 
    push           4          
    pushptroff                u8 1 0
    push           48         u64 
    jumpne         #11115     u64 
    push           msysp.expandstr.fmt u64 
    push           2          
    pushptroff                u8 1 0
    jumpfalse      #11115     i64 
    push           msysp.expandstr.s u64 
    pushptr                   u8 
    push           45         u64 
    jumpeq         #11116     u64 
    push           msysp.expandstr.s u64 
    pushptr                   u8 
    push           43         u64 
    jumpne         #11115     u64 
#11116: 
    push           msysp.expandstr.s u64 
    pushptr                   u8 
    push           msysp.expandstr.t u64 
    popptr                    u8 
    push           &msysp.expandstr.t 
    incr                      u64 1
#11117: 
    push           msysp.expandstr.w i64 
    push           msysp.expandstr.n i64 
    sub                       i64 
    pop            msysp.expandstr.av_2 i64 
    push           msysp.expandstr.av_2 i64 
    push           0          i64 
    jumple         #11118     i64 
#11119: 
    push           msysp.expandstr.fmt u64 
    push           4          
    pushptroff                u8 1 0
    push           msysp.expandstr.t u64 
    popptr                    u8 
    push           &msysp.expandstr.t 
    incr                      u64 1
#11120: 
    to             #11119     
    opnd           msysp.expandstr.av_2 
#11118: 
    setargs                   3 0
    push           msysp.expandstr.n i64 
    push           1          i64 
    sub                       u64 
    push           msysp.expandstr.s u64 
    push           1          i64 
    addrefoff                 u64 1 0
    push           msysp.expandstr.t u64 
    callproc       &strncpy   
    push           0          u64 
    push           msysp.expandstr.t u64 
    push           msysp.expandstr.n i64 
    popptroff                 u8 1 -1
    jump           #11121     
#11115: 
#11122: 
    push           msysp.expandstr.w i64 
    push           msysp.expandstr.n i64 
    sub                       i64 
    pop            msysp.expandstr.av_3 i64 
    push           msysp.expandstr.av_3 i64 
    push           0          i64 
    jumple         #11123     i64 
#11124: 
    push           msysp.expandstr.fmt u64 
    push           4          
    pushptroff                u8 1 0
    push           msysp.expandstr.t u64 
    popptr                    u8 
    push           &msysp.expandstr.t 
    incr                      u64 1
#11125: 
    to             #11124     
    opnd           msysp.expandstr.av_3 
#11123: 
    setargs                   3 0
    push           msysp.expandstr.n u64 
    push           msysp.expandstr.s u64 
    push           msysp.expandstr.t u64 
    callproc       &strncpy   
    push           0          u64 
    push           msysp.expandstr.t u64 
    push           msysp.expandstr.n i64 
    popptroff                 u8 1 0
#11121: 
    jump           #11113     
#11114: 
    push           msysp.expandstr.w i64 
    push           msysp.expandstr.n i64 
    sub                       i64 
    push           1          i64 
    add                       i64 
    push           2          i64 
    idiv                      i64 
    pop            msysp.expandstr.m i64 
#11126: 
    push           msysp.expandstr.m i64 
    pop            msysp.expandstr.av_4 i64 
    push           msysp.expandstr.av_4 i64 
    push           0          i64 
    jumple         #11127     i64 
#11128: 
    push           msysp.expandstr.fmt u64 
    push           4          
    pushptroff                u8 1 0
    push           msysp.expandstr.t u64 
    popptr                    u8 
    push           &msysp.expandstr.t 
    incr                      u64 1
#11129: 
    to             #11128     
    opnd           msysp.expandstr.av_4 
#11127: 
    setargs                   3 0
    push           msysp.expandstr.n u64 
    push           msysp.expandstr.s u64 
    push           msysp.expandstr.t u64 
    callproc       &strncpy   
    push           &msysp.expandstr.t 
    push           msysp.expandstr.n i64 
    addrefoffto               u64 1 0
#11130: 
    push           msysp.expandstr.w i64 
    push           msysp.expandstr.n i64 
    sub                       i64 
    push           msysp.expandstr.m i64 
    sub                       i64 
    pop            msysp.expandstr.av_5 i64 
    push           msysp.expandstr.av_5 i64 
    push           0          i64 
    jumple         #11131     i64 
#11132: 
    push           msysp.expandstr.fmt u64 
    push           4          
    pushptroff                u8 1 0
    push           msysp.expandstr.t u64 
    popptr                    u8 
    push           &msysp.expandstr.t 
    incr                      u64 1
#11133: 
    to             #11132     
    opnd           msysp.expandstr.av_5 
#11131: 
    push           0          u64 
    push           msysp.expandstr.t u64 
    popptr                    u8 
#11113: 
    push           msysp.expandstr.w i64 
    setret                    i64 
    jump           #11107     
#11107: 
    retfn                     i64 
End


Proc msysp.u64tostr: i64
    param          msysp.u64tostr.aa u64 
    param          msysp.u64tostr.s u64 
    param          msysp.u64tostr.base u64 
    param          msysp.u64tostr.sep i64 
    local          msysp.u64tostr.t block:360 
    local          msysp.u64tostr.dd u64 
    local          msysp.u64tostr.i i64 
    local          msysp.u64tostr.j i64 
    local          msysp.u64tostr.k i64 
    local          msysp.u64tostr.g i64 
    local          msysp.u64tostr.cc i64 
    local          msysp.u64tostr.dummy i64 
    local          msysp.u64tostr.s0 u64 
    procentry                 
    push           0          i64 
    pop            msysp.u64tostr.i i64 
    push           0          i64 
    pop            msysp.u64tostr.k i64 
    startmult                 
    push           msysp.u64tostr.base i64 
    push           10         i64 
    jumpne         #11135     i64 
    push           3          i64 
    resetmult                 
    jump           #11136     
#11135: 
    push           4          i64 
    endmult                   
#11136: 
    pop            msysp.u64tostr.g i64 
#11137: 
    push           msysp.u64tostr.aa u64 
    push           msysp.u64tostr.base u64 
    irem                      u64 
    pop            msysp.u64tostr.dd u64 
    push           msysp.u64tostr.aa u64 
    push           msysp.u64tostr.base u64 
    idiv                      u64 
    pop            msysp.u64tostr.aa u64 
    push           &msysp.digits 
    push           msysp.u64tostr.dd i64 
    pushptroff                u8 1 0
    push           &msysp.u64tostr.t 
    push           &msysp.u64tostr.i 
    incrload                  i64 1
    popptroff                 u8 1 0
    push           &msysp.u64tostr.k 
    incr                      i64 1
    push           msysp.u64tostr.sep i64 
    jumpfalse      #11138     i64 
    push           msysp.u64tostr.aa i64 
    push           0          i64 
    jumpeq         #11138     i64 
    push           msysp.u64tostr.k i64 
    push           msysp.u64tostr.g i64 
    jumpne         #11138     i64 
    push           msysp.u64tostr.sep u64 
    push           &msysp.u64tostr.t 
    push           &msysp.u64tostr.i 
    incrload                  i64 1
    popptroff                 u8 1 0
    push           0          i64 
    pop            msysp.u64tostr.k i64 
#11138: 
#11139: 
    push           msysp.u64tostr.aa i64 
    push           0          i64 
    jumpne         #11137     i64 
#11140: 
    push           msysp.u64tostr.i i64 
    pop            msysp.u64tostr.j i64 
    push           msysp.u64tostr.s u64 
    pop            msysp.u64tostr.s0 u64 
    jump           #11141     
#11142: 
    push           &msysp.u64tostr.t 
    push           &msysp.u64tostr.i 
    loaddecr                  i64 1
    pushptroff                u8 1 0
    push           msysp.u64tostr.s u64 
    popptr                    u8 
    push           &msysp.u64tostr.s 
    incr                      u64 1
#11141: 
    push           msysp.u64tostr.i i64 
    jumptrue       #11142     i64 
#11143: 
    push           0          u64 
    push           msysp.u64tostr.s u64 
    popptr                    u8 
    push           msysp.u64tostr.j i64 
    setret                    i64 
    jump           #11144     
#11144: 
    retfn                     i64 
End


Proc msysp.u128tostr: i64
    param          msysp.u128tostr.aa u128 
    param          msysp.u128tostr.s u64 
    param          msysp.u128tostr.base u64 
    param          msysp.u128tostr.sep i64 
    local          msysp.u128tostr.t block:160 
    local          msysp.u128tostr.dd u64 
    local          msysp.u128tostr.i i64 
    local          msysp.u128tostr.j i64 
    local          msysp.u128tostr.k i64 
    local          msysp.u128tostr.g i64 
    local          msysp.u128tostr.dummy i64 
    local          msysp.u128tostr.s0 u64 
    procentry                 
    push           0          i64 
    pop            msysp.u128tostr.i i64 
    push           0          i64 
    pop            msysp.u128tostr.k i64 
    startmult                 
    push           msysp.u128tostr.base i64 
    push           10         i64 
    jumpne         #11146     i64 
    push           3          i64 
    resetmult                 
    jump           #11147     
#11146: 
    push           4          i64 
    endmult                   
#11147: 
    pop            msysp.u128tostr.g i64 
#11148: 
    setargs                   4 0
    push           &msysp.u128tostr.dd 
    push           msysp.u128tostr.base u64 
    push           msysp.u128tostr.aa u128 
    callfn         &msysp.xdivrem128 u128 
    pop            msysp.u128tostr.aa u128 
    push           &msysp.digits 
    push           msysp.u128tostr.dd i64 
    pushptroff                u8 1 0
    push           &msysp.u128tostr.t 
    push           &msysp.u128tostr.i 
    incrload                  i64 1
    popptroff                 u8 1 0
    push           &msysp.u128tostr.k 
    incr                      i64 1
    push           msysp.u128tostr.sep i64 
    jumpfalse      #11149     i64 
    push           msysp.u128tostr.aa u128 
    push           0          i64 
    widenw                    u128 i64 
    jumpeq         #11149     u128 
    push           msysp.u128tostr.k i64 
    push           msysp.u128tostr.g i64 
    jumpne         #11149     i64 
    push           msysp.u128tostr.sep u64 
    push           &msysp.u128tostr.t 
    push           &msysp.u128tostr.i 
    incrload                  i64 1
    popptroff                 u8 1 0
    push           0          i64 
    pop            msysp.u128tostr.k i64 
#11149: 
#11150: 
    push           msysp.u128tostr.aa u128 
    push           0          i64 
    widenw                    u128 i64 
    jumpne         #11148     u128 
#11151: 
    push           msysp.u128tostr.i i64 
    pop            msysp.u128tostr.j i64 
    push           msysp.u128tostr.s u64 
    pop            msysp.u128tostr.s0 u64 
    jump           #11152     
#11153: 
    push           &msysp.u128tostr.t 
    push           &msysp.u128tostr.i 
    loaddecr                  i64 1
    pushptroff                u8 1 0
    push           msysp.u128tostr.s u64 
    popptr                    u8 
    push           &msysp.u128tostr.s 
    incr                      u64 1
#11152: 
    push           msysp.u128tostr.i i64 
    jumptrue       #11153     i64 
#11154: 
    push           0          u64 
    push           msysp.u128tostr.s u64 
    popptr                    u8 
    push           msysp.u128tostr.j i64 
    setret                    i64 
    jump           #11155     
#11155: 
    retfn                     i64 
End


Proc msysp.xdivrem128: u128
    param          msysp.xdivrem128.a u128 
    param          msysp.xdivrem128.b u64 
    param          msysp.xdivrem128.remainder u64 
    local          msysp.xdivrem128.d u128 
    local          msysp.xdivrem128.e u128 
    local          msysp.xdivrem128.r u128 
    local          msysp.xdivrem128.rlow u64 
    local          msysp.xdivrem128.dlow u64 
    local          msysp.xdivrem128.p u64 
    local          msysp.xdivrem128.q u64 
    procentry                 
    push           &msysp.xdivrem128.d 
    pop            msysp.xdivrem128.p u64 
    push           &msysp.xdivrem128.d 
    pop            msysp.xdivrem128.q u64 
    push           msysp.xdivrem128.a u128 
    push           msysp.xdivrem128.b u64 
    widenw                    u128 u64 
    idiv                      u128 
    pop            msysp.xdivrem128.d u128 
    push           msysp.xdivrem128.a u128 
    push           msysp.xdivrem128.d u128 
    push           msysp.xdivrem128.b u64 
    widenw                    u128 u64 
    mul                       u128 
    sub                       u128 
    pop            msysp.xdivrem128.r u128 
    push           msysp.xdivrem128.r u128 
    softtruncw                u64 u128 
    pop            msysp.xdivrem128.rlow u64 
    push           msysp.xdivrem128.d u128 
    softtruncw                u64 u128 
    pop            msysp.xdivrem128.dlow u64 
    push           msysp.xdivrem128.rlow u64 
    push           msysp.xdivrem128.remainder u64 
    popptr                    u64 
    push           msysp.xdivrem128.d u128 
    setretmult                u128 2
    jump           #11157     
#11157: 
    retfn                     u128 
End


Proc msysp.i64tostrfmt: i64
    param          msysp.i64tostrfmt.aa i64 
    param          msysp.i64tostrfmt.s u64 
    param          msysp.i64tostrfmt.fmt u64 
    local          msysp.i64tostrfmt.str block:360 
    local          msysp.i64tostrfmt.i i64 
    local          msysp.i64tostrfmt.j i64 
    local          msysp.i64tostrfmt.k i64 
    local          msysp.i64tostrfmt.n i64 
    local          msysp.i64tostrfmt.w i64 
    local          msysp.i64tostrfmt.usigned i64 
    procentry                 
    push           0          i64 
    pop            msysp.i64tostrfmt.usigned i64 
    push           msysp.i64tostrfmt.fmt u64 
    push           11         
    pushptroff                u8 1 0
    jumpfalse      #11159     u64 
    push           1          i64 
    pop            msysp.i64tostrfmt.usigned i64 
#11159: 
    push           msysp.i64tostrfmt.aa i64 
    push           -9223372036854775808 i64 
    jumpne         #11160     i64 
    push           msysp.i64tostrfmt.usigned i64 
    jumptrue       #11160     i64 
    push           45         u64 
    push           &msysp.i64tostrfmt.str 
    push           0          i64 
    popptroff                 u8 1 0
    setargs                   3 0
    push           msysp.i64tostrfmt.fmt u64 
    push           7          
    pushptroff                u8 1 0
    push           msysp.i64tostrfmt.fmt u64 
    push           2          
    pushptroff                u8 1 0
    push           &msysp.i64tostrfmt.str 
    push           1          
    addrefoff                 u8 1 0
    callfn         &msysp.i64mintostr i64 
    push           1          i64 
    add                       i64 
    pop            msysp.i64tostrfmt.n i64 
    jump           #11161     
#11160: 
    push           msysp.i64tostrfmt.usigned i64 
    jumptrue       #11162     i64 
    push           msysp.i64tostrfmt.aa i64 
    push           0          i64 
    jumplt         #11163     i64 
#11162: 
    push           msysp.i64tostrfmt.fmt u64 
    push           6          
    pushptroff                u8 1 0
    jumpfalse      #11164     u64 
#11163: 
    push           msysp.i64tostrfmt.aa i64 
    push           0          i64 
    jumpge         #11165     i64 
    push           msysp.i64tostrfmt.aa i64 
    neg                       i64 
    pop            msysp.i64tostrfmt.aa i64 
    push           45         u64 
    push           &msysp.i64tostrfmt.str 
    push           0          i64 
    popptroff                 u8 1 0
    jump           #11166     
#11165: 
    push           43         u64 
    push           &msysp.i64tostrfmt.str 
    push           0          i64 
    popptroff                 u8 1 0
#11166: 
    setargs                   4 0
    push           msysp.i64tostrfmt.fmt u64 
    push           7          
    pushptroff                u8 1 0
    push           msysp.i64tostrfmt.fmt u64 
    push           2          
    pushptroff                u8 1 0
    push           &msysp.i64tostrfmt.str 
    push           1          
    addrefoff                 u8 1 0
    push           msysp.i64tostrfmt.aa u64 
    callfn         &msysp.u64tostr i64 
    push           1          i64 
    add                       i64 
    pop            msysp.i64tostrfmt.n i64 
    jump           #11167     
#11164: 
    setargs                   4 0
    push           msysp.i64tostrfmt.fmt u64 
    push           7          
    pushptroff                u8 1 0
    push           msysp.i64tostrfmt.fmt u64 
    push           2          
    pushptroff                u8 1 0
    push           &msysp.i64tostrfmt.str 
    push           msysp.i64tostrfmt.aa u64 
    callfn         &msysp.u64tostr i64 
    pop            msysp.i64tostrfmt.n i64 
#11167: 
#11161: 
    push           msysp.i64tostrfmt.fmt u64 
    push           10         
    pushptroff                u8 1 0
    jumpfalse      #11168     u64 
    push           msysp.i64tostrfmt.fmt u64 
    push           10         
    pushptroff                u8 1 0
    push           &msysp.i64tostrfmt.str 
    push           msysp.i64tostrfmt.n i64 
    popptroff                 u8 1 0
    push           0          u64 
    push           &msysp.i64tostrfmt.str 
    push           &msysp.i64tostrfmt.n 
    incrload                  i64 1
    popptroff                 u8 1 0
#11168: 
    push           msysp.i64tostrfmt.fmt u64 
    push           2          
    pushptroff                u8 1 0
    push           10         i64 
    jumpgt         #11169     i64 
    push           msysp.i64tostrfmt.fmt u64 
    push           10         
    pushptroff                u8 1 0
    jumpfalse      #11170     u64 
#11169: 
    push           msysp.i64tostrfmt.fmt u64 
    push           8          
    pushptroff                u8 1 0
    push           97         u64 
    jumpne         #11170     u64 
    setargs                   1 0
    push           &msysp.i64tostrfmt.str 
    callproc       &mlibp.convlcstring 
#11170: 
    setargs                   4 0
    push           msysp.i64tostrfmt.fmt u64 
    push           msysp.i64tostrfmt.n i64 
    push           msysp.i64tostrfmt.s u64 
    push           &msysp.i64tostrfmt.str 
    callfn         &msysp.expandstr i64 
    setret                    i64 
    jump           #11171     
#11171: 
    retfn                     i64 
End


Proc msysp.u64tostrfmt: i64
    param          msysp.u64tostrfmt.aa i64 
    param          msysp.u64tostrfmt.s u64 
    param          msysp.u64tostrfmt.fmt u64 
    local          msysp.u64tostrfmt.str block:360 
    local          msysp.u64tostrfmt.i i64 
    local          msysp.u64tostrfmt.j i64 
    local          msysp.u64tostrfmt.k i64 
    local          msysp.u64tostrfmt.n i64 
    local          msysp.u64tostrfmt.w i64 
    procentry                 
    setargs                   4 0
    push           msysp.u64tostrfmt.fmt u64 
    push           7          
    pushptroff                u8 1 0
    push           msysp.u64tostrfmt.fmt u64 
    push           2          
    pushptroff                u8 1 0
    push           &msysp.u64tostrfmt.str 
    push           msysp.u64tostrfmt.aa u64 
    callfn         &msysp.u64tostr i64 
    pop            msysp.u64tostrfmt.n i64 
    push           msysp.u64tostrfmt.fmt u64 
    push           10         
    pushptroff                u8 1 0
    jumpfalse      #11173     u64 
    push           msysp.u64tostrfmt.fmt u64 
    push           10         
    pushptroff                u8 1 0
    push           &msysp.u64tostrfmt.str 
    push           msysp.u64tostrfmt.n i64 
    popptroff                 u8 1 0
    push           0          u64 
    push           &msysp.u64tostrfmt.str 
    push           &msysp.u64tostrfmt.n 
    incrload                  i64 1
    popptroff                 u8 1 0
#11173: 
    push           msysp.u64tostrfmt.fmt u64 
    push           2          
    pushptroff                u8 1 0
    push           10         i64 
    jumpgt         #11174     i64 
    push           msysp.u64tostrfmt.fmt u64 
    push           10         
    pushptroff                u8 1 0
    jumpfalse      #11175     u64 
    push           msysp.u64tostrfmt.fmt u64 
    push           8          
    pushptroff                u8 1 0
    push           97         u64 
    jumpne         #11175     u64 
#11174: 
#11175: 
    setargs                   4 0
    push           msysp.u64tostrfmt.fmt u64 
    push           msysp.u64tostrfmt.n i64 
    push           msysp.u64tostrfmt.s u64 
    push           &msysp.u64tostrfmt.str 
    callfn         &msysp.expandstr i64 
    setret                    i64 
    jump           #11176     
#11176: 
    retfn                     i64 
End


Proc msysp.u128tostrfmt: i64
    param          msysp.u128tostrfmt.aa i128 
    param          msysp.u128tostrfmt.s u64 
    param          msysp.u128tostrfmt.fmt u64 
    local          msysp.u128tostrfmt.str block:360 
    local          msysp.u128tostrfmt.i i64 
    local          msysp.u128tostrfmt.j i64 
    local          msysp.u128tostrfmt.k i64 
    local          msysp.u128tostrfmt.n i64 
    local          msysp.u128tostrfmt.w i64 
    procentry                 
    setargs                   5 0
    push           msysp.u128tostrfmt.fmt u64 
    push           7          
    pushptroff                u8 1 0
    push           msysp.u128tostrfmt.fmt u64 
    push           2          
    pushptroff                u8 1 0
    push           &msysp.u128tostrfmt.str 
    push           msysp.u128tostrfmt.aa u128 
    callfn         &msysp.u128tostr i64 
    pop            msysp.u128tostrfmt.n i64 
    push           msysp.u128tostrfmt.fmt u64 
    push           10         
    pushptroff                u8 1 0
    jumpfalse      #11178     u64 
    push           msysp.u128tostrfmt.fmt u64 
    push           10         
    pushptroff                u8 1 0
    push           &msysp.u128tostrfmt.str 
    push           msysp.u128tostrfmt.n i64 
    popptroff                 u8 1 0
    push           0          u64 
    push           &msysp.u128tostrfmt.str 
    push           &msysp.u128tostrfmt.n 
    incrload                  i64 1
    popptroff                 u8 1 0
#11178: 
    push           msysp.u128tostrfmt.fmt u64 
    push           2          
    pushptroff                u8 1 0
    push           10         i64 
    jumpgt         #11179     i64 
    push           msysp.u128tostrfmt.fmt u64 
    push           10         
    pushptroff                u8 1 0
    jumpfalse      #11180     u64 
    push           msysp.u128tostrfmt.fmt u64 
    push           8          
    pushptroff                u8 1 0
    push           97         u64 
    jumpne         #11180     u64 
#11179: 
    setargs                   1 0
    push           &msysp.u128tostrfmt.str 
    callproc       &mlibp.convlcstring 
#11180: 
    setargs                   4 0
    push           msysp.u128tostrfmt.fmt u64 
    push           msysp.u128tostrfmt.n i64 
    push           msysp.u128tostrfmt.s u64 
    push           &msysp.u128tostrfmt.str 
    callfn         &msysp.expandstr i64 
    setret                    i64 
    jump           #11181     
#11181: 
    retfn                     i64 
End


Proc msysp.i64mintostr: i64
    param          msysp.i64mintostr.s u64 
    param          msysp.i64mintostr.base i64 
    param          msysp.i64mintostr.sep i64 
    local          msysp.i64mintostr.t block:360 
    local          msysp.i64mintostr.i i64 
    local          msysp.i64mintostr.j i64 
    local          msysp.i64mintostr.k i64 
    local          msysp.i64mintostr.g i64 
    local          msysp.i64mintostr.neg i64 
    procentry                 
    push           msysp.i64mintostr.base i64 
    switch         #11183     2 16
    opnd           #11184     
#11183: 
    switchlabel    #11185     
    switchlabel    #11184     
    switchlabel    #11184     
    switchlabel    #11184     
    switchlabel    #11184     
    switchlabel    #11184     
    switchlabel    #11184     
    switchlabel    #11184     
    switchlabel    #11186     
    switchlabel    #11184     
    switchlabel    #11184     
    switchlabel    #11184     
    switchlabel    #11184     
    switchlabel    #11184     
    switchlabel    #11187     
    endswitch                 
#11186: 
    setargs                   2 0
    push           "9223372036854775808" u64 
    push           &msysp.i64mintostr.t 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcpy    
    push           3          i64 
    pop            msysp.i64mintostr.j i64 
    jump           #11188     
#11187: 
    setargs                   2 0
    push           "8000000000000000" u64 
    push           &msysp.i64mintostr.t 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcpy    
    push           1          i64 
    pop            msysp.i64mintostr.j i64 
    jump           #11188     
#11185: 
    setargs                   2 0
    push           "1000000000000000000000000000000000000000000000000000000000000000" u64 
    push           &msysp.i64mintostr.t 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcpy    
    push           7          i64 
    pop            msysp.i64mintostr.j i64 
    jump           #11188     
#11184: 
    setargs                   2 0
    push           "<mindint>" u64 
    push           &msysp.i64mintostr.t 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcpy    
#11188: 
    setargs                   1 0
    push           &msysp.i64mintostr.t 
    push           0          
    addrefoff                 u8 1 0
    callfn         &strlen    i64 
    pop            msysp.i64mintostr.i i64 
    push           &msysp.i64mintostr.s 
    push           msysp.i64mintostr.i i64 
    addrefoffto               u64 1 0
    push           msysp.i64mintostr.sep i64 
    jumpfalse      #11189     i64 
    push           &msysp.i64mintostr.s 
    push           msysp.i64mintostr.j i64 
    addrefoffto               u64 1 0
#11189: 
    push           0          u64 
    push           msysp.i64mintostr.s u64 
    popptr                    u8 
    push           0          i64 
    pop            msysp.i64mintostr.k i64 
    startmult                 
    push           msysp.i64mintostr.base i64 
    push           10         i64 
    jumpne         #11190     i64 
    push           3          i64 
    resetmult                 
    jump           #11191     
#11190: 
    push           4          i64 
    endmult                   
#11191: 
    pop            msysp.i64mintostr.g i64 
    jump           #11192     
#11193: 
    push           &msysp.i64mintostr.s 
    decr                      u64 1
    push           &msysp.i64mintostr.t 
    push           &msysp.i64mintostr.i 
    loaddecr                  i64 1
    pushptroff                u8 1 -1
    push           msysp.i64mintostr.s u64 
    popptr                    u8 
    push           msysp.i64mintostr.sep i64 
    jumpfalse      #11194     i64 
    push           msysp.i64mintostr.i i64 
    jumpfalse      #11194     i64 
    push           &msysp.i64mintostr.k 
    incrload                  i64 1
    push           msysp.i64mintostr.g i64 
    jumpne         #11194     i64 
    push           &msysp.i64mintostr.s 
    decr                      u64 1
    push           msysp.i64mintostr.sep u64 
    push           msysp.i64mintostr.s u64 
    popptr                    u8 
    push           0          i64 
    pop            msysp.i64mintostr.k i64 
#11194: 
#11192: 
    push           msysp.i64mintostr.i i64 
    jumptrue       #11193     i64 
#11195: 
    setargs                   1 0
    push           msysp.i64mintostr.s u64 
    callfn         &strlen    i64 
    setret                    i64 
    jump           #11196     
#11196: 
    retfn                     i64 
End


Proc msysp.strtostrfmt: i64
    param          msysp.strtostrfmt.s u64 
    param          msysp.strtostrfmt.t u64 
    param          msysp.strtostrfmt.n i64 
    param          msysp.strtostrfmt.fmt u64 
    local          msysp.strtostrfmt.u u64 
    local          msysp.strtostrfmt.v u64 
    local          msysp.strtostrfmt.str block:256 
    local          msysp.strtostrfmt.w i64 
    local          msysp.strtostrfmt.nheap i64 
    procentry                 
    push           0          i64 
    pop            msysp.strtostrfmt.nheap i64 
    push           msysp.strtostrfmt.fmt u64 
    push           3          
    pushptroff                u8 1 0
    jumptrue       #11198     u64 
    push           msysp.strtostrfmt.fmt u64 
    push           8          
    pushptroff                u8 1 0
    jumpfalse      #11199     u64 
#11198: 
    push           msysp.strtostrfmt.n i64 
    push           256        i64 
    jumpge         #11200     i64 
    push           &msysp.strtostrfmt.str 
    pop            msysp.strtostrfmt.u u64 
    jump           #11201     
#11200: 
    push           msysp.strtostrfmt.n i64 
    push           3          i64 
    add                       i64 
    pop            msysp.strtostrfmt.nheap i64 
    setargs                   1 0
    push           msysp.strtostrfmt.nheap i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            msysp.strtostrfmt.u u64 
#11201: 
    push           msysp.strtostrfmt.fmt u64 
    push           3          
    pushptroff                u8 1 0
    jumpfalse      #11202     u64 
    push           msysp.strtostrfmt.u u64 
    pop            msysp.strtostrfmt.v u64 
    push           msysp.strtostrfmt.fmt u64 
    push           3          
    pushptroff                u8 1 0
    push           msysp.strtostrfmt.v u64 
    popptr                    u8 
    push           &msysp.strtostrfmt.v 
    incr                      u64 1
    push           msysp.strtostrfmt.n i64 
    jumpfalse      #11203     i64 
    setargs                   2 0
    push           msysp.strtostrfmt.s u64 
    push           msysp.strtostrfmt.v u64 
    callproc       &strcpy    
    push           &msysp.strtostrfmt.v 
    push           msysp.strtostrfmt.n i64 
    addrefoffto               u64 1 0
#11203: 
    push           msysp.strtostrfmt.fmt u64 
    push           3          
    pushptroff                u8 1 0
    push           msysp.strtostrfmt.v u64 
    popptr                    u8 
    push           &msysp.strtostrfmt.v 
    incr                      u64 1
    push           0          u64 
    push           msysp.strtostrfmt.v u64 
    popptr                    u8 
    push           &msysp.strtostrfmt.n 
    push           2          i64 
    addto                     i64 
    jump           #11204     
#11202: 
    setargs                   3 0
    push           msysp.strtostrfmt.n u64 
    push           msysp.strtostrfmt.s u64 
    push           msysp.strtostrfmt.u u64 
    callproc       &memcpy    
#11204: 
    push           msysp.strtostrfmt.fmt u64 
    push           8          
    pushptroff                u8 1 0
    switch         #11205     65 97
    opnd           #11206     
#11205: 
    switchlabel    #11207     
    switchlabel    #11206     
    switchlabel    #11206     
    switchlabel    #11206     
    switchlabel    #11206     
    switchlabel    #11206     
    switchlabel    #11206     
    switchlabel    #11206     
    switchlabel    #11206     
    switchlabel    #11206     
    switchlabel    #11206     
    switchlabel    #11206     
    switchlabel    #11206     
    switchlabel    #11206     
    switchlabel    #11206     
    switchlabel    #11206     
    switchlabel    #11206     
    switchlabel    #11206     
    switchlabel    #11206     
    switchlabel    #11206     
    switchlabel    #11206     
    switchlabel    #11206     
    switchlabel    #11206     
    switchlabel    #11206     
    switchlabel    #11206     
    switchlabel    #11206     
    switchlabel    #11206     
    switchlabel    #11206     
    switchlabel    #11206     
    switchlabel    #11206     
    switchlabel    #11206     
    switchlabel    #11206     
    switchlabel    #11208     
    endswitch                 
#11208: 
    setargs                   1 0
    push           msysp.strtostrfmt.u u64 
    callproc       &mlibp.convlcstring 
    jump           #11209     
#11207: 
    setargs                   1 0
    push           msysp.strtostrfmt.u u64 
    callproc       &mlibp.convucstring 
    jump           #11209     
#11206: 
#11209: 
    push           msysp.strtostrfmt.u u64 
    pop            msysp.strtostrfmt.s u64 
#11199: 
    push           msysp.strtostrfmt.fmt u64 
    pushptr                   u8 
    pop            msysp.strtostrfmt.w i64 
    push           msysp.strtostrfmt.w i64 
    push           msysp.strtostrfmt.n i64 
    jumple         #11210     i64 
    setargs                   4 0
    push           msysp.strtostrfmt.fmt u64 
    push           msysp.strtostrfmt.n i64 
    push           msysp.strtostrfmt.t u64 
    push           msysp.strtostrfmt.s u64 
    callfn         &msysp.expandstr i64 
    pop            msysp.strtostrfmt.n i64 
    jump           #11211     
#11210: 
    setargs                   3 0
    push           msysp.strtostrfmt.n u64 
    push           msysp.strtostrfmt.s u64 
    push           msysp.strtostrfmt.t u64 
    callproc       &memcpy    
#11211: 
    push           msysp.strtostrfmt.nheap i64 
    jumpfalse      #11212     i64 
    setargs                   2 0
    push           msysp.strtostrfmt.nheap i64 
    push           msysp.strtostrfmt.u u64 
    callproc       &mlibp.pcm_free 
#11212: 
    push           msysp.strtostrfmt.n i64 
    setret                    i64 
    jump           #11213     
#11213: 
    retfn                     i64 
End


Proc msysp.tostr_i64:
    param          msysp.tostr_i64.a i64 
    param          msysp.tostr_i64.fmt u64 
    local          msysp.tostr_i64.str block:360 
    local          msysp.tostr_i64.n i64 
    procentry                 
    push           msysp.tostr_i64.fmt u64 
    push           12         
    pushptroff                u8 1 0
    push           0          u64 
    casejumpeq     #11215     u64 0
    push           68         u64 
    casejumpeq     #11216     u64 0
    push           100        u64 
    casejumpeq     #11216     u64 0
    popstack                  u64 
    jump           #11217     
#11215: 
    setargs                   3 0
    push           msysp.tostr_i64.fmt u64 
    push           &msysp.tostr_i64.str 
    push           msysp.tostr_i64.a i64 
    callfn         &msysp.i64tostrfmt i64 
    pop            msysp.tostr_i64.n i64 
    jump           #11218     
#11216: 
    setargs                   4 0
    push           msysp.tostr_i64.fmt u64 
    push           &msysp.tostr_i64.str 
    push           8          i64 
    push           &msysp.tostr_i64.a 
    callfn         &msysp.domultichar i64 
    pop            msysp.tostr_i64.n i64 
    jump           #11218     
#11217: 
    setargs                   1 0
    push           msysp.tostr_i64.a i64 
    callproc       &msysp.printchar 
    jump           #11219     
#11218: 
    setargs                   2 0
    push           msysp.tostr_i64.n i64 
    push           &msysp.tostr_i64.str 
    callproc       &msysp.printstr_n 
#11219: 
    retproc                   
End


Proc msysp.tostr_u64:
    param          msysp.tostr_u64.a u64 
    param          msysp.tostr_u64.fmt u64 
    local          msysp.tostr_u64.str block:360 
    local          msysp.tostr_u64.n i64 
    procentry                 
    push           msysp.tostr_u64.fmt u64 
    push           12         
    pushptroff                u8 1 0
    push           68         u64 
    casejumpeq     #11221     u64 0
    push           100        u64 
    casejumpeq     #11221     u64 0
    push           67         u64 
    casejumpeq     #11222     u64 0
    push           99         u64 
    casejumpeq     #11222     u64 0
    popstack                  u64 
    jump           #11223     
#11221: 
    setargs                   4 0
    push           msysp.tostr_u64.fmt u64 
    push           &msysp.tostr_u64.str 
    push           8          i64 
    push           &msysp.tostr_u64.a 
    callfn         &msysp.domultichar i64 
    pop            msysp.tostr_u64.n i64 
    jump           #11224     
#11222: 
    setargs                   1 0
    push           msysp.tostr_u64.a i64 
    callproc       &msysp.printchar 
    jump           #11225     
    jump           #11224     
#11223: 
    setargs                   3 0
    push           msysp.tostr_u64.fmt u64 
    push           &msysp.tostr_u64.str 
    push           msysp.tostr_u64.a i64 
    callfn         &msysp.u64tostrfmt i64 
    pop            msysp.tostr_u64.n i64 
#11224: 
    setargs                   2 0
    push           msysp.tostr_u64.n i64 
    push           &msysp.tostr_u64.str 
    callproc       &msysp.printstr_n 
#11225: 
    retproc                   
End


Proc msysp.tostr_u128:
    param          msysp.tostr_u128.a u128 
    param          msysp.tostr_u128.fmt u64 
    param          msysp.tostr_u128.neg i64 
    local          msysp.tostr_u128.str block:360 
    local          msysp.tostr_u128.n i64 
    procentry                 
    push           msysp.tostr_u128.fmt u64 
    push           12         
    pushptroff                u8 1 0
    push           68         u64 
    casejumpeq     #11227     u64 0
    push           100        u64 
    casejumpeq     #11227     u64 0
    push           67         u64 
    casejumpeq     #11228     u64 0
    push           99         u64 
    casejumpeq     #11228     u64 0
    popstack                  u64 
    jump           #11229     
#11227: 
    setargs                   4 0
    push           msysp.tostr_u128.fmt u64 
    push           &msysp.tostr_u128.str 
    push           8          i64 
    push           &msysp.tostr_u128.a 
    callfn         &msysp.domultichar i64 
    pop            msysp.tostr_u128.n i64 
    jump           #11230     
#11228: 
    setargs                   1 0
    push           msysp.tostr_u128.a u128 
    softtruncw                i64 u128 
    callproc       &msysp.printchar 
    jump           #11231     
    jump           #11230     
#11229: 
    push           msysp.tostr_u128.neg i64 
    jumpfalse      #11232     i64 
    push           45         u64 
    push           &msysp.tostr_u128.str 
    push           1          i64 
    popptroff                 u8 1 -1
    setargs                   4 0
    push           msysp.tostr_u128.fmt u64 
    push           &msysp.tostr_u128.str 
    push           1          
    addrefoff                 u8 1 0
    push           msysp.tostr_u128.a i128 
    callfn         &msysp.u128tostrfmt i64 
    push           1          i64 
    add                       i64 
    pop            msysp.tostr_u128.n i64 
    jump           #11233     
#11232: 
    setargs                   4 0
    push           msysp.tostr_u128.fmt u64 
    push           &msysp.tostr_u128.str 
    push           msysp.tostr_u128.a i128 
    callfn         &msysp.u128tostrfmt i64 
    pop            msysp.tostr_u128.n i64 
#11233: 
#11230: 
    setargs                   2 0
    push           msysp.tostr_u128.n i64 
    push           &msysp.tostr_u128.str 
    callproc       &msysp.printstr_n 
#11231: 
    retproc                   
End


Proc msysp.tostr_r64:
    param          msysp.tostr_r64.x r64 
    param          msysp.tostr_r64.fmt u64 
    local          msysp.tostr_r64.str block:360 
    local          msysp.tostr_r64.str2 block:360 
    local          msysp.tostr_r64.cfmt block:10 
    local          msysp.tostr_r64.n i64 
    procentry                 
    push           37         u64 
    push           &msysp.tostr_r64.cfmt 
    push           0          i64 
    popptroff                 u8 1 0
    push           msysp.tostr_r64.fmt u64 
    push           1          
    pushptroff                i8 1 0
    jumpfalse      #11235     i64 
    push           46         u64 
    push           &msysp.tostr_r64.cfmt 
    push           1          i64 
    popptroff                 u8 1 0
    push           42         u64 
    push           &msysp.tostr_r64.cfmt 
    push           2          i64 
    popptroff                 u8 1 0
    push           msysp.tostr_r64.fmt u64 
    push           5          
    pushptroff                u8 1 0
    push           &msysp.tostr_r64.cfmt 
    push           3          i64 
    popptroff                 u8 1 0
    push           0          u64 
    push           &msysp.tostr_r64.cfmt 
    push           4          i64 
    popptroff                 u8 1 0
    setargs                   4 3
    push           msysp.tostr_r64.x r64 
    push           msysp.tostr_r64.fmt u64 
    push           1          
    pushptroff                i8 1 0
    push           &msysp.tostr_r64.cfmt 
    push           &msysp.tostr_r64.str 
    callproc       &sprintf   
    jump           #11236     
#11235: 
    push           msysp.tostr_r64.fmt u64 
    push           5          
    pushptroff                u8 1 0
    push           &msysp.tostr_r64.cfmt 
    push           1          i64 
    popptroff                 u8 1 0
    push           0          u64 
    push           &msysp.tostr_r64.cfmt 
    push           2          i64 
    popptroff                 u8 1 0
    setargs                   3 3
    push           msysp.tostr_r64.x r64 
    push           &msysp.tostr_r64.cfmt 
    push           &msysp.tostr_r64.str 
    callproc       &sprintf   
#11236: 
    setargs                   1 0
    push           &msysp.tostr_r64.str 
    callfn         &strlen    i64 
    pop            msysp.tostr_r64.n i64 
    push           msysp.tostr_r64.n i64 
    push           msysp.tostr_r64.fmt u64 
    pushptr                   u8 
    jumpge         #11237     i64 
    setargs                   4 0
    push           msysp.tostr_r64.fmt u64 
    push           msysp.tostr_r64.n i64 
    push           &msysp.tostr_r64.str2 
    push           &msysp.tostr_r64.str 
    callfn         &msysp.expandstr i64 
    pop            msysp.tostr_r64.n i64 
    setargs                   2 0
    push           &msysp.tostr_r64.str2 
    push           &msysp.tostr_r64.str 
    callproc       &strcpy    
#11237: 
    setargs                   2 0
    push           msysp.tostr_r64.n i64 
    push           &msysp.tostr_r64.str 
    callproc       &msysp.printstr_n 
#11238: 
    retproc                   
End


Proc msysp.tostr_str:
    param          msysp.tostr_str.s u64 
    param          msysp.tostr_str.fmt u64 
    local          msysp.tostr_str.oldlen i64 
    local          msysp.tostr_str.newlen i64 
    local          msysp.tostr_str.n i64 
    local          msysp.tostr_str.t u64 
    procentry                 
    setargs                   1 0
    push           msysp.tostr_str.s u64 
    callfn         &strlen    i64 
    pop            msysp.tostr_str.oldlen i64 
    push           msysp.tostr_str.oldlen i64 
    pop            msysp.tostr_str.newlen i64 
    push           msysp.tostr_str.fmt u64 
    push           3          
    pushptroff                u8 1 0
    jumptrue       #11240     u64 
    push           msysp.tostr_str.fmt u64 
    pushptr                   u8 
    push           msysp.tostr_str.newlen i64 
    jumpgt         #11240     i64 
    push           msysp.tostr_str.fmt u64 
    push           8          
    pushptroff                u8 1 0
    jumptrue       #11240     u64 
    push           msysp.tostr_str.fmt u64 
    push           1          
    pushptroff                i8 1 0
    jumpfalse      #11241     i64 
#11240: 
    push           msysp.tostr_str.fmt u64 
    push           3          
    pushptroff                u8 1 0
    jumpfalse      #11242     u64 
    push           &msysp.tostr_str.newlen 
    push           2          i64 
    addto                     i64 
#11242: 
    push           msysp.tostr_str.fmt u64 
    pushptr                   u8 
    push           msysp.tostr_str.newlen i64 
    jumple         #11243     i64 
    push           msysp.tostr_str.fmt u64 
    pushptr                   u8 
    pop            msysp.tostr_str.newlen i64 
#11243: 
    setargs                   1 0
    push           msysp.tostr_str.newlen i64 
    push           1          i64 
    add                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            msysp.tostr_str.t u64 
    setargs                   4 0
    push           msysp.tostr_str.fmt u64 
    push           msysp.tostr_str.oldlen i64 
    push           msysp.tostr_str.t u64 
    push           msysp.tostr_str.s u64 
    callfn         &msysp.strtostrfmt i64 
    pop            msysp.tostr_str.n i64 
    push           msysp.tostr_str.fmt u64 
    push           1          
    pushptroff                i8 1 0
    jumpfalse      #11244     i64 
    push           &msysp.tostr_str.n 
    push           msysp.tostr_str.fmt u64 
    push           1          
    pushptroff                i8 1 0
    minto                     i64 
#11244: 
    setargs                   2 0
    push           msysp.tostr_str.n i64 
    push           msysp.tostr_str.t u64 
    callproc       &msysp.printstr_n 
    setargs                   2 0
    push           msysp.tostr_str.newlen i64 
    push           1          i64 
    add                       i64 
    push           msysp.tostr_str.t u64 
    callproc       &mlibp.pcm_free 
    jump           #11245     
#11241: 
    setargs                   2 0
    push           msysp.tostr_str.oldlen i64 
    push           msysp.tostr_str.s u64 
    callproc       &msysp.printstr_n 
#11245: 
#11246: 
    retproc                   
End


Proc msysp.getfmt: u64
    param          msysp.getfmt.fmtstyle u64 
    procentry                 
    startmult                 
    push           msysp.getfmt.fmtstyle u64 
    jumpfalse      #11248     u64 
    setargs                   3 0
    push           &msysp.getfmt.fmt 
    push           -1         i64 
    push           msysp.getfmt.fmtstyle u64 
    callproc       &msysp.strtofmt 
    push           &msysp.getfmt.fmt 
    resetmult                 
    jump           #11249     
#11248: 
    push           &msysp.defaultfmt 
    endmult                   
#11249: 
    setret                    u64 
    jump           #11250     
#11250: 
    retfn                     u64 
End


Proc msysp.strint: u64
    param          msysp.strint.a i64 
    param          msysp.strint.fmtstyle u64 
    local          msysp.strint.fmt u64 
    procentry                 
    setargs                   1 0
    push           &msysp.strint.str 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    setargs                   1 0
    push           msysp.strint.fmtstyle u64 
    callfn         &msysp.getfmt u64 
    store          msysp.strint.fmt u64 
    push           msysp.strint.a i64 
    callproc       &msysp.tostr_i64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           msysp.strint.fmt u64 
    push           &msysp.strint.str 
    callfn         &msysp.getstr u64 
    setret                    u64 
    jump           #11252     
#11252: 
    retfn                     u64 
End


Proc msysp.getstrint:
    param          msysp.getstrint.a i64 
    param          msysp.getstrint.dest u64 
    procentry                 
    setargs                   1 0
    push           msysp.getstrint.dest u64 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    setargs                   1 0
    push           0          u64 
    callfn         &msysp.getfmt u64 
    push           msysp.getstrint.a i64 
    callproc       &msysp.tostr_i64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#11254: 
    retproc                   
End


Proc msysp.strword: u64
    param          msysp.strword.a u64 
    param          msysp.strword.fmtstyle u64 
    local          msysp.strword.fmt u64 
    procentry                 
    setargs                   1 0
    push           &msysp.strword.str 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    setargs                   1 0
    push           msysp.strword.fmtstyle u64 
    callfn         &msysp.getfmt u64 
    store          msysp.strword.fmt u64 
    push           msysp.strword.a u64 
    callproc       &msysp.tostr_u64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           msysp.strword.fmt u64 
    push           &msysp.strword.str 
    callfn         &msysp.getstr u64 
    setret                    u64 
    jump           #11256     
#11256: 
    retfn                     u64 
End


Proc msysp.strreal: u64
    param          msysp.strreal.a r64 
    param          msysp.strreal.fmtstyle u64 
    local          msysp.strreal.fmt u64 
    procentry                 
    setargs                   1 0
    push           &msysp.strreal.str 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    setargs                   1 0
    push           msysp.strreal.fmtstyle u64 
    callfn         &msysp.getfmt u64 
    store          msysp.strreal.fmt u64 
    push           msysp.strreal.a r64 
    callproc       &msysp.tostr_r64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           msysp.strreal.fmt u64 
    push           &msysp.strreal.str 
    callfn         &msysp.getstr u64 
    setret                    u64 
    jump           #11258     
#11258: 
    retfn                     u64 
End


Proc msysp.getstr: u64
    param          msysp.getstr.s u64 
    param          msysp.getstr.fmt u64 
    procentry                 
    startmult                 
    push           msysp.getstr.fmt u64 
    push           13         
    pushptroff                u8 1 0
    jumpfalse      #11260     u64 
    setargs                   1 0
    push           msysp.getstr.s u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    resetmult                 
    jump           #11261     
#11260: 
    push           msysp.getstr.s u64 
    endmult                   
#11261: 
    setret                    u64 
    jump           #11262     
#11262: 
    retfn                     u64 
End


Proc msysp.initreadbuffer:
    procentry                 
    push           msysp.rd_buffer u64 
    jumpfalse      #11264     u64 
    jump           #11265     
#11264: 
    setargs                   1 0
    push           524288     i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            msysp.rd_buffer u64 
    push           0          u64 
    push           msysp.rd_buffer u64 
    popptr                    u8 
    push           msysp.rd_buffer u64 
    store          msysp.rd_lastpos u64 
    pop            msysp.rd_pos u64 
#11265: 
    retproc                   
End


Proc msysp.m$read_conline:
    procentry                 
    setargs                   0 0
    callproc       &msysp.initreadbuffer 
    setargs                   3 0
    push           524288     i64 
    push           msysp.rd_buffer u64 
    push           0          u64 
    callproc       &mlibp.readlinen 
    setargs                   1 0
    push           msysp.rd_buffer u64 
    callfn         &strlen    i64 
    pop            msysp.rd_length i64 
    push           msysp.rd_buffer u64 
    pop            msysp.rd_pos u64 
    push           0          u64 
    pop            msysp.rd_lastpos u64 
#11267: 
    retproc                   
End


Proc msysp.m$read_fileline:
    param          msysp.m$read_fileline.f u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.initreadbuffer 
    setargs                   3 0
    push           524288     i64 
    push           msysp.rd_buffer u64 
    push           msysp.m$read_fileline.f u64 
    callproc       &mlibp.readlinen 
    setargs                   1 0
    push           msysp.rd_buffer u64 
    callfn         &strlen    i64 
    pop            msysp.rd_length i64 
    push           msysp.rd_buffer u64 
    pop            msysp.rd_pos u64 
    push           0          u64 
    pop            msysp.rd_lastpos u64 
#11269: 
    retproc                   
End


Proc msysp.m$read_strline:
    param          msysp.m$read_strline.s u64 
    local          msysp.m$read_strline.n i64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.initreadbuffer 
    setargs                   1 0
    push           msysp.m$read_strline.s u64 
    callfn         &strlen    i64 
    pop            msysp.m$read_strline.n i64 
    push           msysp.m$read_strline.n i64 
    push           524288     i64 
    jumpge         #11271     i64 
    setargs                   2 0
    push           msysp.m$read_strline.s u64 
    push           msysp.rd_buffer u64 
    callproc       &strcpy    
    jump           #11272     
#11271: 
    setargs                   3 0
    push           524287     u64 
    push           msysp.m$read_strline.s u64 
    push           msysp.rd_buffer u64 
    callproc       &memcpy    
    push           0          u64 
    push           msysp.rd_buffer u64 
    push           524288     i64 
    popptroff                 u8 1 -1
#11272: 
    push           msysp.m$read_strline.n i64 
    pop            msysp.rd_length i64 
    push           msysp.rd_buffer u64 
    pop            msysp.rd_pos u64 
    push           0          u64 
    pop            msysp.rd_lastpos u64 
#11273: 
    retproc                   
End


Proc msysp.readitem: u64
    param          msysp.readitem.itemlength u64 
    local          msysp.readitem.p u64 
    local          msysp.readitem.s u64 
    local          msysp.readitem.itemstr u64 
    local          msysp.readitem.quotechar u8 
    local          msysp.readitem.c u8 
    procentry                 
    push           msysp.rd_buffer u64 
    jumptrue       #11275     u64 
    setargs                   0 0
    callproc       &msysp.initreadbuffer 
#11275: 
    push           msysp.rd_pos u64 
    pop            msysp.readitem.s u64 
    jump           #11276     
#11277: 
    push           &msysp.readitem.s 
    incr                      u64 1
#11276: 
    push           msysp.readitem.s u64 
    pushptr                   u8 
    push           32         u64 
    jumpeq         #11277     u64 
    push           msysp.readitem.s u64 
    pushptr                   u8 
    push           9          i64 
    jumpeq         #11277     i64 
#11278: 
    push           msysp.readitem.s u64 
    pop            msysp.readitem.itemstr u64 
    push           msysp.readitem.s u64 
    store          msysp.rd_pos u64 
    pop            msysp.rd_lastpos u64 
    push           msysp.readitem.s u64 
    pushptr                   u8 
    push           0          i64 
    jumpne         #11279     i64 
    push           0          i64 
    pop            msysp.termchar i64 
    push           0          i64 
    push           msysp.readitem.itemlength u64 
    popptr                    i64 
    push           msysp.readitem.s u64 
    setret                    u64 
    jump           #11280     
#11279: 
    push           0          u64 
    pop            msysp.readitem.quotechar u8 
    push           msysp.readitem.s u64 
    pushptr                   u8 
    push           34         u64 
    jumpne         #11281     u64 
    push           34         u64 
    pop            msysp.readitem.quotechar u8 
    push           &msysp.readitem.s 
    incr                      u64 1
    jump           #11282     
#11281: 
    push           msysp.readitem.s u64 
    pushptr                   u8 
    push           39         u64 
    jumpne         #11283     u64 
    push           39         u64 
    pop            msysp.readitem.quotechar u8 
    push           &msysp.readitem.s 
    incr                      u64 1
#11283: 
#11282: 
    push           msysp.readitem.s u64 
    store          msysp.readitem.itemstr u64 
    pop            msysp.readitem.p u64 
    jump           #11284     
#11285: 
    push           &msysp.readitem.s 
    loadincr                  u64 1
    pushptr                   u8 
    pop            msysp.readitem.c u8 
    push           msysp.readitem.c u8 
    switch         #11286     9 61
    opnd           #11287     
#11286: 
    switchlabel    #11288     
    switchlabel    #11287     
    switchlabel    #11287     
    switchlabel    #11287     
    switchlabel    #11287     
    switchlabel    #11287     
    switchlabel    #11287     
    switchlabel    #11287     
    switchlabel    #11287     
    switchlabel    #11287     
    switchlabel    #11287     
    switchlabel    #11287     
    switchlabel    #11287     
    switchlabel    #11287     
    switchlabel    #11287     
    switchlabel    #11287     
    switchlabel    #11287     
    switchlabel    #11287     
    switchlabel    #11287     
    switchlabel    #11287     
    switchlabel    #11287     
    switchlabel    #11287     
    switchlabel    #11287     
    switchlabel    #11288     
    switchlabel    #11287     
    switchlabel    #11287     
    switchlabel    #11287     
    switchlabel    #11287     
    switchlabel    #11287     
    switchlabel    #11287     
    switchlabel    #11287     
    switchlabel    #11287     
    switchlabel    #11287     
    switchlabel    #11287     
    switchlabel    #11287     
    switchlabel    #11288     
    switchlabel    #11287     
    switchlabel    #11287     
    switchlabel    #11287     
    switchlabel    #11287     
    switchlabel    #11287     
    switchlabel    #11287     
    switchlabel    #11287     
    switchlabel    #11287     
    switchlabel    #11287     
    switchlabel    #11287     
    switchlabel    #11287     
    switchlabel    #11287     
    switchlabel    #11287     
    switchlabel    #11287     
    switchlabel    #11287     
    switchlabel    #11287     
    switchlabel    #11288     
    endswitch                 
#11288: 
    push           msysp.readitem.quotechar u8 
    jumptrue       #11289     u64 
    push           msysp.readitem.p u64 
    push           msysp.readitem.s u64 
    jumpne         #11290     u64 
#11289: 
    jump           #11291     
#11290: 
    push           msysp.readitem.c u8 
    pop            msysp.termchar i64 
    jump           #11292     
    jump           #11293     
#11287: 
!normalchar::
#11291: 
    push           msysp.readitem.c u8 
    push           msysp.readitem.quotechar u8 
    jumpne         #11294     u64 
    push           msysp.readitem.s u64 
    pushptr                   u8 
    push           msysp.readitem.quotechar u8 
    jumpne         #11295     u64 
    push           msysp.readitem.c u8 
    push           msysp.readitem.p u64 
    popptr                    u8 
    push           &msysp.readitem.s 
    incr                      u64 1
    push           &msysp.readitem.p 
    incr                      u64 1
    jump           #11296     
#11295: 
    push           msysp.readitem.s u64 
    pushptr                   u8 
    pop            msysp.termchar i64 
    push           msysp.termchar i64 
    push           44         i64 
    jumpeq         #11297     i64 
    push           msysp.termchar i64 
    push           61         i64 
    jumpne         #11298     i64 
#11297: 
    push           &msysp.readitem.s 
    incr                      u64 1
    push           msysp.readitem.s u64 
    pushptr                   u8 
    pop            msysp.termchar i64 
#11298: 
    jump           #11292     
#11296: 
    jump           #11299     
#11294: 
    push           msysp.readitem.c u8 
    push           msysp.readitem.p u64 
    popptr                    u8 
    push           &msysp.readitem.p 
    incr                      u64 1
#11299: 
#11293: 
#11284: 
    push           msysp.readitem.s u64 
    pushptr                   u8 
    jumptrue       #11285     u64 
#11292: 
    push           msysp.readitem.s u64 
    pushptr                   u8 
    push           0          i64 
    jumpne         #11300     i64 
    push           0          i64 
    pop            msysp.termchar i64 
#11300: 
    push           msysp.readitem.p u64 
    push           msysp.readitem.itemstr u64 
    subref                    i64 1
    push           msysp.readitem.itemlength u64 
    popptr                    i64 
    push           msysp.readitem.s u64 
    pop            msysp.rd_pos u64 
    push           msysp.readitem.itemstr u64 
    setret                    u64 
    jump           #11280     
#11280: 
    retfn                     u64 
End


Proc msysp.strtoint: i64
    param          msysp.strtoint.s u64 
    param          msysp.strtoint.length i64 
    param          msysp.strtoint.base u64 
    local          msysp.strtoint.signd u8 
    local          msysp.strtoint.aa u64 
    local          msysp.strtoint.c u64 
    local          msysp.strtoint.d u64 
    procentry                 
    push           0          i64 
    pop            msysp.itemerror i64 
    push           msysp.strtoint.length i64 
    push           -1         i64 
    jumpne         #11302     i64 
    setargs                   1 0
    push           msysp.strtoint.s u64 
    callfn         &strlen    i64 
    pop            msysp.strtoint.length i64 
#11302: 
    push           0          i64 
    pop            msysp.strtoint.signd u8 
    push           msysp.strtoint.length i64 
    jumpfalse      #11303     i64 
    push           msysp.strtoint.s u64 
    pushptr                   u8 
    push           45         u64 
    jumpne         #11303     u64 
    push           1          i64 
    pop            msysp.strtoint.signd u8 
    push           &msysp.strtoint.s 
    incr                      u64 1
    push           &msysp.strtoint.length 
    decr                      i64 1
    jump           #11304     
#11303: 
    push           msysp.strtoint.length i64 
    jumpfalse      #11305     i64 
    push           msysp.strtoint.s u64 
    pushptr                   u8 
    push           43         u64 
    jumpne         #11305     u64 
    push           &msysp.strtoint.s 
    incr                      u64 1
    push           &msysp.strtoint.length 
    decr                      i64 1
#11305: 
#11304: 
    push           0          u64 
    pop            msysp.strtoint.aa u64 
    jump           #11306     
#11307: 
    push           &msysp.strtoint.s 
    loadincr                  u64 1
    pushptr                   u8 
    pop            msysp.strtoint.c u64 
    push           &msysp.strtoint.length 
    decr                      i64 1
    push           msysp.strtoint.c i64 
    switch         #11308     39 102
    opnd           #11309     
#11308: 
    switchlabel    #11310     
    switchlabel    #11309     
    switchlabel    #11309     
    switchlabel    #11309     
    switchlabel    #11309     
    switchlabel    #11309     
    switchlabel    #11309     
    switchlabel    #11309     
    switchlabel    #11309     
    switchlabel    #11311     
    switchlabel    #11311     
    switchlabel    #11311     
    switchlabel    #11311     
    switchlabel    #11311     
    switchlabel    #11311     
    switchlabel    #11311     
    switchlabel    #11311     
    switchlabel    #11311     
    switchlabel    #11311     
    switchlabel    #11309     
    switchlabel    #11309     
    switchlabel    #11309     
    switchlabel    #11309     
    switchlabel    #11309     
    switchlabel    #11309     
    switchlabel    #11309     
    switchlabel    #11312     
    switchlabel    #11312     
    switchlabel    #11312     
    switchlabel    #11312     
    switchlabel    #11312     
    switchlabel    #11312     
    switchlabel    #11309     
    switchlabel    #11309     
    switchlabel    #11309     
    switchlabel    #11309     
    switchlabel    #11309     
    switchlabel    #11309     
    switchlabel    #11309     
    switchlabel    #11309     
    switchlabel    #11309     
    switchlabel    #11309     
    switchlabel    #11309     
    switchlabel    #11309     
    switchlabel    #11309     
    switchlabel    #11309     
    switchlabel    #11309     
    switchlabel    #11309     
    switchlabel    #11309     
    switchlabel    #11309     
    switchlabel    #11309     
    switchlabel    #11309     
    switchlabel    #11309     
    switchlabel    #11309     
    switchlabel    #11309     
    switchlabel    #11309     
    switchlabel    #11310     
    switchlabel    #11309     
    switchlabel    #11313     
    switchlabel    #11313     
    switchlabel    #11313     
    switchlabel    #11313     
    switchlabel    #11313     
    switchlabel    #11313     
    endswitch                 
#11312: 
    push           msysp.strtoint.c u64 
    push           65         u64 
    sub                       i64 
    push           10         i64 
    add                       u64 
    pop            msysp.strtoint.d u64 
    jump           #11314     
#11313: 
    push           msysp.strtoint.c u64 
    push           97         u64 
    sub                       i64 
    push           10         i64 
    add                       u64 
    pop            msysp.strtoint.d u64 
    jump           #11314     
#11311: 
    push           msysp.strtoint.c u64 
    push           48         u64 
    sub                       u64 
    pop            msysp.strtoint.d u64 
    jump           #11314     
#11310: 
    jump           #11306     
    jump           #11314     
#11309: 
    push           1          i64 
    pop            msysp.itemerror i64 
    jump           #11315     
#11314: 
    push           msysp.strtoint.d u64 
    push           msysp.strtoint.base u64 
    jumplt         #11316     u64 
    push           1          i64 
    pop            msysp.itemerror i64 
    jump           #11315     
#11316: 
    push           msysp.strtoint.aa u64 
    push           msysp.strtoint.base u64 
    mul                       u64 
    push           msysp.strtoint.d u64 
    add                       u64 
    pop            msysp.strtoint.aa u64 
#11306: 
    push           msysp.strtoint.length i64 
    jumptrue       #11307     i64 
#11315: 
    startmult                 
    push           msysp.strtoint.signd u8 
    jumpfalse      #11317     i64 
    push           msysp.strtoint.aa u64 
    neg                       i64 
    resetmult                 
    jump           #11318     
#11317: 
    push           msysp.strtoint.aa i64 
    endmult                   
#11318: 
    setret                    i64 
    jump           #11319     
#11319: 
    retfn                     i64 
End


Proc msysp.m$read_i64: i64
    param          msysp.m$read_i64.fmt i64 
    local          msysp.m$read_i64.s u64 
    local          msysp.m$read_i64.length i64 
    local          msysp.m$read_i64.c i64 
    local          msysp.m$read_i64.aa i64 
    procentry                 
    push           msysp.m$read_i64.fmt i64 
    push           67         i64 
    casejumpeq     #11321     i64 0
    push           99         i64 
    casejumpeq     #11321     i64 0
    push           84         i64 
    casejumpeq     #11322     i64 0
    push           116        i64 
    casejumpeq     #11322     i64 0
    push           69         i64 
    casejumpeq     #11323     i64 0
    push           101        i64 
    casejumpeq     #11323     i64 0
    popstack                  i64 
    jump           #11324     
#11321: 
    push           msysp.rd_pos u64 
    pop            msysp.rd_lastpos u64 
    push           msysp.rd_pos u64 
    pushptr                   u8 
    jumpfalse      #11325     u64 
    push           &msysp.rd_pos 
    loadincr                  u64 1
    pushptr                   u8 
    setret                    i64 
    jump           #11326     
    jump           #11327     
#11325: 
    push           0          i64 
    setret                    i64 
    jump           #11326     
#11327: 
    jump           #11328     
#11322: 
    push           msysp.termchar i64 
    setret                    i64 
    jump           #11326     
    jump           #11328     
#11323: 
    push           msysp.itemerror i64 
    setret                    i64 
    jump           #11326     
    jump           #11328     
#11324: 
#11328: 
    setargs                   1 0
    push           &msysp.m$read_i64.length 
    callfn         &msysp.readitem u64 
    pop            msysp.m$read_i64.s u64 
    push           msysp.m$read_i64.fmt i64 
    push           0          i64 
    casejumpeq     #11329     i64 0
    push           73         i64 
    casejumpeq     #11329     i64 0
    push           105        i64 
    casejumpeq     #11329     i64 0
    push           66         i64 
    casejumpeq     #11330     i64 0
    push           98         i64 
    casejumpeq     #11330     i64 0
    push           72         i64 
    casejumpeq     #11331     i64 0
    push           104        i64 
    casejumpeq     #11331     i64 0
    popstack                  i64 
    jump           #11332     
#11329: 
    setargs                   3 0
    push           10         u64 
    push           msysp.m$read_i64.length i64 
    push           msysp.m$read_i64.s u64 
    callfn         &msysp.strtoint i64 
    setret                    i64 
    jump           #11326     
    jump           #11333     
#11330: 
    setargs                   3 0
    push           2          u64 
    push           msysp.m$read_i64.length i64 
    push           msysp.m$read_i64.s u64 
    callfn         &msysp.strtoint i64 
    setret                    i64 
    jump           #11326     
    jump           #11333     
#11331: 
    setargs                   3 0
    push           16         u64 
    push           msysp.m$read_i64.length i64 
    push           msysp.m$read_i64.s u64 
    callfn         &msysp.strtoint i64 
    setret                    i64 
    jump           #11326     
    jump           #11333     
#11332: 
#11333: 
    push           0          i64 
    setret                    i64 
    jump           #11326     
#11326: 
    retfn                     i64 
End


Proc msysp.m$read_r64: r64
    param          msysp.m$read_r64.fmt i64 
    local          msysp.m$read_r64.str block:512 
    local          msysp.m$read_r64.s u64 
    local          msysp.m$read_r64.length i64 
    local          msysp.m$read_r64.numlength i32 
    local          msysp.m$read_r64.x r64 
    procentry                 
    setargs                   1 0
    push           &msysp.m$read_r64.length 
    callfn         &msysp.readitem u64 
    pop            msysp.m$read_r64.s u64 
    push           msysp.m$read_r64.length i64 
    push           0          i64 
    jumpeq         #11335     i64 
    push           msysp.m$read_r64.length i64 
    push           512        i64 
    jumplt         #11336     i64 
#11335: 
    push           0.0000000000000000e+000 r64 
    setret                    r64 
    jump           #11337     
#11336: 
    setargs                   3 0
    push           msysp.m$read_r64.length u64 
    push           msysp.m$read_r64.s u64 
    push           &msysp.m$read_r64.str 
    callproc       &memcpy    
    push           0          u64 
    push           &msysp.m$read_r64.str 
    push           msysp.m$read_r64.length i64 
    popptroff                 u8 1 0
    push           0          i64 
    pop            msysp.itemerror i64 
    setargs                   4 3
    push           &msysp.m$read_r64.numlength 
    push           &msysp.m$read_r64.x 
    push           "%lf%n"    u64 
    push           &msysp.m$read_r64.str 
    callfn         &sscanf    i32 
    push           0          i64 
    jumpeq         #11338     i64 
    push           msysp.m$read_r64.numlength i32 
    push           msysp.m$read_r64.length i64 
    jumpeq         #11339     i64 
#11338: 
    push           0.0000000000000000e+000 r64 
    pop            msysp.m$read_r64.x r64 
    push           1          i64 
    pop            msysp.itemerror i64 
#11339: 
    push           msysp.m$read_r64.x r64 
    setret                    r64 
    jump           #11337     
#11337: 
    retfn                     r64 
End


Proc msysp.m$read_str:
    param          msysp.m$read_str.dest u64 
    param          msysp.m$read_str.destlen i64 
    param          msysp.m$read_str.fmt i64 
    local          msysp.m$read_str.s u64 
    local          msysp.m$read_str.length i64 
    local          msysp.m$read_str.numlength i64 
    local          msysp.m$read_str.x r64 
    procentry                 
    push           0          i64 
    pop            msysp.itemerror i64 
    push           msysp.m$read_str.fmt i64 
    push           76         i64 
    jumpeq         #11341     i64 
    push           msysp.m$read_str.fmt i64 
    push           108        i64 
    jumpne         #11342     i64 
#11341: 
    push           msysp.rd_pos u64 
    pop            msysp.m$read_str.s u64 
    push           msysp.rd_buffer u64 
    push           msysp.rd_length i64 
    addrefoff                 u64 1 0
    push           msysp.rd_pos u64 
    subref                    i64 1
    pop            msysp.m$read_str.length i64 
    jump           #11343     
#11342: 
    setargs                   1 0
    push           &msysp.m$read_str.length 
    callfn         &msysp.readitem u64 
    pop            msysp.m$read_str.s u64 
    push           msysp.m$read_str.fmt i64 
    push           78         i64 
    jumpeq         #11344     i64 
    push           msysp.m$read_str.fmt i64 
    push           110        i64 
    jumpne         #11345     i64 
#11344: 
    setargs                   2 0
    push           msysp.m$read_str.length i64 
    push           msysp.m$read_str.s u64 
    callproc       &mlibp.iconvlcn 
#11345: 
#11343: 
    push           msysp.m$read_str.destlen i64 
    push           0          i64 
    jumple         #11346     i64 
    push           msysp.m$read_str.length i64 
    push           msysp.m$read_str.destlen i64 
    jumplt         #11347     i64 
    push           msysp.m$read_str.destlen i64 
    push           1          i64 
    sub                       i64 
    pop            msysp.m$read_str.length i64 
    push           1          i64 
    pop            msysp.itemerror i64 
#11347: 
#11346: 
    setargs                   3 0
    push           msysp.m$read_str.length u64 
    push           msysp.m$read_str.s u64 
    push           msysp.m$read_str.dest u64 
    callproc       &memcpy    
    push           0          u64 
    push           msysp.m$read_str.dest u64 
    push           msysp.m$read_str.length i64 
    popptroff                 u8 1 0
#11348: 
    retproc                   
End


Proc msysp.readstr:
    param          msysp.readstr.dest u64 
    param          msysp.readstr.fmt i64 
    param          msysp.readstr.destlen i64 
    procentry                 
    setargs                   3 0
    push           msysp.readstr.fmt i64 
    push           msysp.readstr.destlen i64 
    push           msysp.readstr.dest u64 
    callproc       &msysp.m$read_str 
#11350: 
    retproc                   
End


Proc msysp.rereadln:
    procentry                 
    push           msysp.rd_buffer u64 
    pop            msysp.rd_pos u64 
    push           msysp.rd_pos u64 
    pop            msysp.rd_lastpos u64 
#11352: 
    retproc                   
End


Proc msysp.reread:
    procentry                 
    push           msysp.rd_lastpos u64 
    pop            msysp.rd_pos u64 
#11354: 
    retproc                   
End


Proc msysp.valint: i64
    param          msysp.valint.s u64 
    param          msysp.valint.fmt i64 
    local          msysp.valint.old_pos u64 
    local          msysp.valint.old_lastpos u64 
    local          msysp.valint.aa i64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.initreadbuffer 
    push           msysp.rd_pos u64 
    pop            msysp.valint.old_pos u64 
    push           msysp.rd_lastpos u64 
    pop            msysp.valint.old_lastpos u64 
    push           msysp.valint.s u64 
    pop            msysp.rd_pos u64 
    setargs                   1 0
    push           msysp.valint.fmt i64 
    callfn         &msysp.m$read_i64 i64 
    pop            msysp.valint.aa i64 
    push           msysp.valint.old_pos u64 
    pop            msysp.rd_pos u64 
    push           msysp.valint.old_lastpos u64 
    pop            msysp.rd_lastpos u64 
    push           msysp.valint.aa i64 
    setret                    i64 
    jump           #11356     
#11356: 
    retfn                     i64 
End


Proc msysp.valreal: r64
    param          msysp.valreal.s u64 
    local          msysp.valreal.old_pos u64 
    local          msysp.valreal.old_lastpos u64 
    local          msysp.valreal.x r64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.initreadbuffer 
    push           msysp.rd_pos u64 
    pop            msysp.valreal.old_pos u64 
    push           msysp.rd_lastpos u64 
    pop            msysp.valreal.old_lastpos u64 
    push           msysp.valreal.s u64 
    pop            msysp.rd_pos u64 
    setargs                   1 0
    push           0          i64 
    callfn         &msysp.m$read_r64 r64 
    pop            msysp.valreal.x r64 
    push           msysp.valreal.old_pos u64 
    pop            msysp.rd_pos u64 
    push           msysp.valreal.old_lastpos u64 
    pop            msysp.rd_lastpos u64 
    push           msysp.valreal.x r64 
    setret                    r64 
    jump           #11358     
#11358: 
    retfn                     r64 
End


Proc msysp.mclunimpl:
    param          msysp.mclunimpl.mess u64 
    procentry                 
    setargs                   2 2
    push           msysp.mclunimpl.mess u64 
    push           "MCL-UNIMPL: %s\n" u64 
    callproc       &printf    
    push           1          i64 
    stop                      
#11360: 
    retproc                   
End


Proc mwindowsp.os_init:
    local          mwindowsp.os_init.i i64 
    local          mwindowsp.os_init.count i64 
    local          mwindowsp.os_init.info block:22 
    procentry                 
    setargs                   1 0
    push           -11        i64 
    truncate                  i64 u32 
    callfn         &`GetStdHandle u64 
    pop            mwindowsp.hconsole u64 
    setargs                   1 0
    push           -10        i64 
    truncate                  i64 u32 
    callfn         &`GetStdHandle u64 
    pop            mwindowsp.hconsolein u64 
    push           0          i64 
    push           &mwindowsp.lastkey 
    push           8          
    popptroff                 u16 1 0
    push           0          i64 
    pop            mwindowsp.keypending i64 
    setargs                   2 0
    push           1          i64 
    push           0          u64 
    callproc       &`SetConsoleCtrlHandler 
    setargs                   2 0
    push           3          i64 
    push           mwindowsp.hconsole u64 
    callproc       &`SetConsoleMode 
    push           1          i64 
    pop            mwindowsp.init_flag i64 
#11362: 
    retproc                   
End


Proc mwindowsp.os_execwait: i64
    param          mwindowsp.os_execwait.cmdline u64 
    param          mwindowsp.os_execwait.newconsole i64 
    param          mwindowsp.os_execwait.workdir u64 
    local          mwindowsp.os_execwait.exitcode u32 
    local          mwindowsp.os_execwait.status i64 
    local          mwindowsp.os_execwait.cflags i64 
    local          mwindowsp.os_execwait.si block:104 
    local          mwindowsp.os_execwait.xpi block:24 
    procentry                 
    push           0          i64 
    pop            mwindowsp.os_execwait.cflags i64 
    push           &mwindowsp.os_execwait.si 
    clear                     block:104 
    push           &mwindowsp.os_execwait.xpi 
    clear                     block:24 
    push           mwindowsp.os_execwait.newconsole i64 
    switch         #11364     0 2
    opnd           #11365     
#11364: 
    switchlabel    #11366     
    switchlabel    #11367     
    switchlabel    #11368     
    endswitch                 
#11366: 
    push           32         i64 
    pop            mwindowsp.os_execwait.cflags i64 
    jump           #11369     
#11367: 
    push           48         i64 
    pop            mwindowsp.os_execwait.cflags i64 
    jump           #11369     
#11368: 
    push           48         i64 
    pop            mwindowsp.os_execwait.cflags i64 
    jump           #11369     
#11365: 
#11369: 
    push           104        i64 
    push           &mwindowsp.os_execwait.si 
    push           0          
    popptroff                 u32 1 0
    setargs                   10 0
    push           &mwindowsp.os_execwait.xpi 
    push           &mwindowsp.os_execwait.si 
    push           0          u64 
    push           0          u64 
    push           mwindowsp.os_execwait.cflags i64 
    push           1          i64 
    push           0          u64 
    push           0          u64 
    push           mwindowsp.os_execwait.cmdline u64 
    push           0          u64 
    callfn         &`CreateProcessA i64 
    pop            mwindowsp.os_execwait.status i64 
    push           mwindowsp.os_execwait.status i64 
    push           0          i64 
    jumpne         #11370     i64 
    setargs                   0 0
    callfn         &`GetLastError u32 
    pop            mwindowsp.os_execwait.status i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Winexec error:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mwindowsp.os_execwait.status i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           -1         i64 
    setret                    i64 
    jump           #11371     
#11370: 
    setargs                   2 0
    push           4294967295 i64 
    push           &mwindowsp.os_execwait.xpi 
    pushptr                   u64 
    callproc       &`WaitForSingleObject 
    setargs                   2 0
    push           &mwindowsp.os_execwait.exitcode 
    push           &mwindowsp.os_execwait.xpi 
    pushptr                   u64 
    callproc       &`GetExitCodeProcess 
    setargs                   1 0
    push           &mwindowsp.os_execwait.xpi 
    pushptr                   u64 
    callproc       &`CloseHandle 
    setargs                   1 0
    push           &mwindowsp.os_execwait.xpi 
    push           8          
    pushptroff                u64 1 0
    callproc       &`CloseHandle 
    push           mwindowsp.os_execwait.exitcode u32 
    setret                    i64 
    jump           #11371     
#11371: 
    retfn                     i64 
End


Proc mwindowsp.os_execcmd: i64
    param          mwindowsp.os_execcmd.cmdline u64 
    param          mwindowsp.os_execcmd.newconsole i64 
    local          mwindowsp.os_execcmd.exitcode u32 
    local          mwindowsp.os_execcmd.i i64 
    local          mwindowsp.os_execcmd.j i64 
    local          mwindowsp.os_execcmd.k i64 
    local          mwindowsp.os_execcmd.si block:104 
    local          mwindowsp.os_execcmd.xpi block:24 
    procentry                 
    push           &mwindowsp.os_execcmd.si 
    clear                     block:104 
    push           &mwindowsp.os_execcmd.xpi 
    clear                     block:24 
    push           104        i64 
    push           &mwindowsp.os_execcmd.si 
    push           0          
    popptroff                 u32 1 0
    setargs                   10 0
    push           &mwindowsp.os_execcmd.xpi 
    push           &mwindowsp.os_execcmd.si 
    push           0          u64 
    push           0          u64 
    push           32         i64 
    startmult                 
    push           mwindowsp.os_execcmd.newconsole i64 
    jumpfalse      #11373     i64 
    push           16         i64 
    resetmult                 
    jump           #11374     
#11373: 
    push           0          i64 
    endmult                   
#11374: 
    ior                       i64 
    push           1          i64 
    push           0          u64 
    push           0          u64 
    push           mwindowsp.os_execcmd.cmdline u64 
    push           0          u64 
    callproc       &`CreateProcessA 
    setargs                   1 0
    push           &mwindowsp.os_execcmd.xpi 
    pushptr                   u64 
    callproc       &`CloseHandle 
    setargs                   1 0
    push           &mwindowsp.os_execcmd.xpi 
    push           8          
    pushptroff                u64 1 0
    callproc       &`CloseHandle 
    push           1          i64 
    setret                    i64 
    jump           #11375     
#11375: 
    retfn                     i64 
End


Proc mwindowsp.os_getch: i64
    local          mwindowsp.os_getch.k i64 
    procentry                 
    setargs                   0 0
    callfn         &mwindowsp.os_getchx i64 
    push           255        i64 
    iand                      i64 
    pop            mwindowsp.os_getch.k i64 
    push           mwindowsp.os_getch.k i64 
    setret                    i64 
    jump           #11377     
#11377: 
    retfn                     i64 
End


Proc mwindowsp.os_kbhit: i64
    local          mwindowsp.os_kbhit.count u32 
    procentry                 
    push           mwindowsp.init_flag i64 
    jumptrue       #11379     i64 
    setargs                   0 0
    callproc       &mwindowsp.os_init 
#11379: 
    setargs                   2 0
    push           &mwindowsp.os_kbhit.count 
    push           mwindowsp.hconsolein u64 
    callproc       &`GetNumberOfConsoleInputEvents 
    push           mwindowsp.os_kbhit.count u32 
    push           1          i64 
    setgt                     i64 
    setret                    i64 
    jump           #11380     
#11380: 
    retfn                     i64 
End


Proc mwindowsp.os_flushkeys:
    procentry                 
    setargs                   1 0
    push           mwindowsp.hconsolein u64 
    callproc       &`FlushConsoleInputBuffer 
#11382: 
    retproc                   
End


Proc mwindowsp.os_getconsolein: u64
    procentry                 
    push           mwindowsp.hconsolein u64 
    setret                    u64 
    jump           #11384     
#11384: 
    retfn                     u64 
End


Proc mwindowsp.os_getconsoleout: u64
    procentry                 
    push           mwindowsp.hconsole u64 
    setret                    u64 
    jump           #11386     
#11386: 
    retfn                     u64 
End


Proc mwindowsp.os_proginstance: u64
    procentry                 
    setargs                   1 0
    push           "PROGINST" u64 
    callproc       &mlibp.abortprogram 
    push           0          u64 
    setret                    u64 
    jump           #11388     
#11388: 
    retfn                     u64 
End


Proc mwindowsp.os_getdllinst: u64
    param          mwindowsp.os_getdllinst.name u64 
    local          mwindowsp.os_getdllinst.hinst u64 
    procentry                 
    setargs                   1 0
    push           mwindowsp.os_getdllinst.name u64 
    callfn         &`LoadLibraryA u64 
    pop            mwindowsp.os_getdllinst.hinst u64 
    push           mwindowsp.os_getdllinst.hinst u64 
    setret                    u64 
    jump           #11390     
#11390: 
    retfn                     u64 
End


Proc mwindowsp.os_getdllprocaddr: u64
    param          mwindowsp.os_getdllprocaddr.hinst i64 
    param          mwindowsp.os_getdllprocaddr.name u64 
    procentry                 
    setargs                   2 0
    push           mwindowsp.os_getdllprocaddr.name u64 
    push           mwindowsp.os_getdllprocaddr.hinst u64 
    callfn         &`GetProcAddress u64 
    setret                    u64 
    jump           #11392     
#11392: 
    retfn                     u64 
End


Proc mwindowsp.os_initwindows:
    procentry                 
    setargs                   0 0
    callproc       &mwindowsp.os_init 
    setargs                   1 0
    push           "pcc001"   u64 
    callproc       &mwindowsp.os_gxregisterclass 
#11394: 
    retproc                   
End


Proc mwindowsp.os_gxregisterclass:
    param          mwindowsp.os_gxregisterclass.classname u64 
    local          mwindowsp.os_gxregisterclass.r block:80 
    procentry                 
    push           mwindowsp.os_gxregisterclass.registered u8 
    jumpfalse      #11396     i64 
    jump           #11397     
#11396: 
    push           &mwindowsp.os_gxregisterclass.r 
    clear                     block:80 
    push           80         i64 
    push           &mwindowsp.os_gxregisterclass.r 
    push           0          
    popptroff                 u32 1 0
    push           40         i64 
    push           &mwindowsp.os_gxregisterclass.r 
    push           4          
    popptroff                 u32 1 0
    push           &mwindowsp.mainwndproc 
    push           &mwindowsp.os_gxregisterclass.r 
    push           8          
    popptroff                 u64 1 0
    push           0          u64 
    push           &mwindowsp.os_gxregisterclass.r 
    push           24         
    popptroff                 u64 1 0
    push           0          u64 
    push           &mwindowsp.os_gxregisterclass.r 
    push           32         
    popptroff                 u64 1 0
    setargs                   2 0
    push           32512      u64 
    push           0          u64 
    callfn         &`LoadCursorA u64 
    push           &mwindowsp.os_gxregisterclass.r 
    push           40         
    popptroff                 u64 1 0
    push           16         u64 
    push           &mwindowsp.os_gxregisterclass.r 
    push           48         
    popptroff                 u64 1 0
    push           0          u64 
    push           &mwindowsp.os_gxregisterclass.r 
    push           56         
    popptroff                 u64 1 0
    push           mwindowsp.os_gxregisterclass.classname u64 
    push           &mwindowsp.os_gxregisterclass.r 
    push           64         
    popptroff                 u64 1 0
    push           0          u64 
    push           &mwindowsp.os_gxregisterclass.r 
    push           72         
    popptroff                 u64 1 0
    setargs                   1 0
    push           &mwindowsp.os_gxregisterclass.r 
    callfn         &`RegisterClassExA u32 
    push           0          i64 
    jumpne         #11398     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mwindowsp.os_gxregisterclass.classname u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &`GetLastError 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Registerclass error" u64 
    callproc       &mlibp.abortprogram 
#11398: 
    push           1          i64 
    pop            mwindowsp.os_gxregisterclass.registered u8 
#11397: 
    retproc                   
End


Proc mwindowsp.mainwndproc: i64
    param          mwindowsp.mainwndproc.hwnd u64 
    param          mwindowsp.mainwndproc.message u32 
    param          mwindowsp.mainwndproc.wparam u64 
    param          mwindowsp.mainwndproc.lparam u64 
    local          mwindowsp.mainwndproc.m block:48 
    local          mwindowsp.mainwndproc.i i64 
    local          mwindowsp.mainwndproc.result i64 
    local          mwindowsp.mainwndproc.l i64 
    procentry                 
    push           mwindowsp.mainwndproc.hwnd u64 
    push           &mwindowsp.mainwndproc.m 
    push           0          
    popptroff                 u64 1 0
    push           mwindowsp.mainwndproc.message u32 
    push           &mwindowsp.mainwndproc.m 
    push           8          
    popptroff                 u32 1 0
    push           mwindowsp.mainwndproc.wparam u64 
    push           &mwindowsp.mainwndproc.m 
    push           16         
    popptroff                 u64 1 0
    push           mwindowsp.mainwndproc.lparam u64 
    push           &mwindowsp.mainwndproc.m 
    push           24         
    popptroff                 u64 1 0
    push           0          i64 
    push           &mwindowsp.mainwndproc.m 
    push           40         
    popptroff                 i32 1 0
    push           0          i64 
    push           &mwindowsp.mainwndproc.m 
    push           44         
    popptroff                 i32 1 0
    push           mwindowsp.wndproc_callbackfn u64 
    jumpfalse      #11400     u64 
    setargs                   1 0
    push           &mwindowsp.mainwndproc.m 
    push           mwindowsp.wndproc_callbackfn u64 
    callfnptr                 i64 
    pop            mwindowsp.mainwndproc.result i64 
    jump           #11401     
#11400: 
    push           0          i64 
    pop            mwindowsp.mainwndproc.result i64 
#11401: 
    push           &mwindowsp.mainwndproc.m 
    push           8          
    pushptroff                u32 1 0
    push           2          i64 
    jumpne         #11402     i64 
    push           0          i64 
    setret                    i64 
    jump           #11403     
#11402: 
    startmult                 
    push           mwindowsp.mainwndproc.result i64 
    jumptrue       #11404     i64 
    setargs                   4 0
    push           mwindowsp.mainwndproc.lparam u64 
    push           mwindowsp.mainwndproc.wparam u64 
    push           mwindowsp.mainwndproc.message u32 
    push           mwindowsp.mainwndproc.hwnd u64 
    callfn         &`DefWindowProcA i64 
    resetmult                 
    jump           #11405     
#11404: 
    push           0          i64 
    endmult                   
#11405: 
    setret                    i64 
    jump           #11403     
#11403: 
    retfn                     i64 
End


Proc mwindowsp.timerproc:
    param          mwindowsp.timerproc.hwnd u64 
    param          mwindowsp.timerproc.msg i64 
    param          mwindowsp.timerproc.id i64 
    param          mwindowsp.timerproc.time i64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "TIMERPROC" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#11407: 
    retproc                   
End


Proc mwindowsp.os_testcallback:
    param          mwindowsp.os_testcallback.p u64 
    procentry                 
    push           mwindowsp.wndproc_callbackfn u64 
    jumpfalse      #11409     u64 
    setargs                   1 0
    push           mwindowsp.os_testcallback.p u64 
    push           mwindowsp.wndproc_callbackfn u64 
    callprocptr               
    jump           #11410     
#11409: 
    setargs                   1 0
    push           "MESS HANDLER NOT DEFINED" u64 
    callproc       &mlibp.abortprogram 
#11410: 
#11411: 
    retproc                   
End


Proc mwindowsp.os_setmesshandler:
    param          mwindowsp.os_setmesshandler.addr u64 
    procentry                 
    push           mwindowsp.os_setmesshandler.addr u64 
    pop            mwindowsp.wndproc_callbackfn u64 
#11413: 
    retproc                   
End


Proc mwindowsp.os_getchx: i64
    local          mwindowsp.os_getchx.count i64 
    local          mwindowsp.os_getchx.charcode i64 
    local          mwindowsp.os_getchx.keyshift i64 
    local          mwindowsp.os_getchx.keycode i64 
    local          mwindowsp.os_getchx.altdown i64 
    local          mwindowsp.os_getchx.ctrldown i64 
    local          mwindowsp.os_getchx.shiftdown i64 
    local          mwindowsp.os_getchx.capslock i64 
    procentry                 
    push           mwindowsp.init_flag i64 
    jumptrue       #11415     i64 
    setargs                   0 0
    callproc       &mwindowsp.os_init 
#11415: 
    push           mwindowsp.keypending i64 
    jumpfalse      #11416     i64 
    push           mwindowsp.pendkey block:20 
    pop            mwindowsp.lastkey block:20 
    push           0          i64 
    pop            mwindowsp.keypending i64 
    jump           #11417     
#11416: 
    push           &mwindowsp.lastkey 
    push           8          
    pushptroff                u16 1 0
    push           0          i64 
    jumpne         #11418     i64 
#11419: 
    push           0          i64 
    pop            mwindowsp.os_getchx.count i64 
    setargs                   4 0
    push           &mwindowsp.os_getchx.count 
    push           1          i64 
    push           &mwindowsp.lastkey 
    push           mwindowsp.hconsolein u64 
    callproc       &`ReadConsoleInputA 
#11420: 
    push           &mwindowsp.lastkey 
    pushptr                   u16 
    push           1          i64 
    jumpne         #11419     i64 
    push           &mwindowsp.lastkey 
    push           4          
    pushptroff                u32 1 0
    push           1          i64 
    jumpne         #11419     i64 
#11421: 
#11418: 
#11417: 
    startmult                 
    push           &mwindowsp.lastkey 
    push           16         
    pushptroff                u32 1 0
    push           3          i64 
    iand                      i64 
    jumpfalse      #11422     i64 
    push           1          i64 
    resetmult                 
    jump           #11423     
#11422: 
    push           0          i64 
    endmult                   
#11423: 
    pop            mwindowsp.os_getchx.altdown i64 
    startmult                 
    push           &mwindowsp.lastkey 
    push           16         
    pushptroff                u32 1 0
    push           12         i64 
    iand                      i64 
    jumpfalse      #11424     i64 
    push           1          i64 
    resetmult                 
    jump           #11425     
#11424: 
    push           0          i64 
    endmult                   
#11425: 
    pop            mwindowsp.os_getchx.ctrldown i64 
    startmult                 
    push           &mwindowsp.lastkey 
    push           16         
    pushptroff                u32 1 0
    push           16         i64 
    iand                      i64 
    jumpfalse      #11426     i64 
    push           1          i64 
    resetmult                 
    jump           #11427     
#11426: 
    push           0          i64 
    endmult                   
#11427: 
    pop            mwindowsp.os_getchx.shiftdown i64 
    startmult                 
    push           &mwindowsp.lastkey 
    push           16         
    pushptroff                u32 1 0
    push           128        i64 
    iand                      i64 
    jumpfalse      #11428     i64 
    push           1          i64 
    resetmult                 
    jump           #11429     
#11428: 
    push           0          i64 
    endmult                   
#11429: 
    pop            mwindowsp.os_getchx.capslock i64 
    push           &mwindowsp.lastkey 
    push           8          
    addrefoff                 u64 1 0
    decr                      u16 1
    push           &mwindowsp.lastkey 
    push           14         
    pushptroff                u8 1 0
    pop            mwindowsp.os_getchx.charcode i64 
    push           &mwindowsp.lastkey 
    push           10         
    pushptroff                u16 1 0
    push           255        i64 
    iand                      i64 
    pop            mwindowsp.os_getchx.keycode i64 
    push           mwindowsp.os_getchx.charcode i64 
    push           0          i64 
    jumpge         #11430     i64 
    push           mwindowsp.os_getchx.charcode i64 
    push           -128       i64 
    jumpge         #11431     i64 
    push           0          i64 
    pop            mwindowsp.os_getchx.charcode i64 
    jump           #11432     
#11431: 
    push           &mwindowsp.os_getchx.charcode 
    push           256        i64 
    addto                     i64 
#11432: 
#11430: 
    push           mwindowsp.os_getchx.altdown i64 
    jumpfalse      #11433     i64 
    push           mwindowsp.os_getchx.ctrldown i64 
    jumpfalse      #11433     i64 
    push           mwindowsp.os_getchx.charcode i64 
    push           166        i64 
    jumpne         #11433     i64 
    push           0          i64 
    store          mwindowsp.os_getchx.ctrldown i64 
    pop            mwindowsp.os_getchx.altdown i64 
    jump           #11434     
#11433: 
    push           mwindowsp.os_getchx.altdown i64 
    jumptrue       #11435     i64 
    push           mwindowsp.os_getchx.ctrldown i64 
    jumpfalse      #11436     i64 
#11435: 
    push           0          i64 
    pop            mwindowsp.os_getchx.charcode i64 
    push           mwindowsp.os_getchx.keycode i64 
    push           65         i64 
    jumplt         #11437     i64 
    push           mwindowsp.os_getchx.keycode i64 
    push           90         i64 
    jumpgt         #11437     i64 
    push           mwindowsp.os_getchx.keycode i64 
    push           64         i64 
    sub                       i64 
    pop            mwindowsp.os_getchx.charcode i64 
#11437: 
#11436: 
#11434: 
    push           mwindowsp.os_getchx.capslock i64 
    push           3          i64 
    shl                       i64 
    push           mwindowsp.os_getchx.altdown i64 
    push           2          i64 
    shl                       i64 
    ior                       i64 
    push           mwindowsp.os_getchx.ctrldown i64 
    push           1          i64 
    shl                       i64 
    ior                       i64 
    push           mwindowsp.os_getchx.shiftdown i64 
    ior                       i64 
    pop            mwindowsp.os_getchx.keyshift i64 
    push           mwindowsp.os_getchx.keyshift i64 
    push           24         i64 
    shl                       i64 
    push           mwindowsp.os_getchx.keycode i64 
    push           16         i64 
    shl                       i64 
    ior                       i64 
    push           mwindowsp.os_getchx.charcode i64 
    ior                       i64 
    setret                    i64 
    jump           #11438     
#11438: 
    retfn                     i64 
End


Proc mwindowsp.os_getos: u64
    procentry                 
    push           "W64"      u64 
    setret                    u64 
    jump           #11440     
#11440: 
    retfn                     u64 
End


Proc mwindowsp.os_gethostsize: i64
    procentry                 
    push           64         i64 
    setret                    i64 
    jump           #11442     
#11442: 
    retfn                     i64 
End


Proc mwindowsp.os_shellexec: i64
    param          mwindowsp.os_shellexec.opc u64 
    param          mwindowsp.os_shellexec.file u64 
    procentry                 
    setargs                   1 0
    push           mwindowsp.os_shellexec.file u64 
    callfn         &system    i32 
    setret                    i64 
    jump           #11444     
#11444: 
    retfn                     i64 
End


Proc mwindowsp.os_sleep:
    param          mwindowsp.os_sleep.a i64 
    procentry                 
    setargs                   1 0
    push           mwindowsp.os_sleep.a i64 
    callproc       &`Sleep    
#11446: 
    retproc                   
End


Proc mwindowsp.os_getstdin: u64
    procentry                 
    setargs                   2 0
    push           "rb"       u64 
    push           "con"      u64 
    callfn         &fopen     u64 
    setret                    u64 
    jump           #11448     
#11448: 
    retfn                     u64 
End


Proc mwindowsp.os_getstdout: u64
    procentry                 
    setargs                   2 0
    push           "wb"       u64 
    push           "con"      u64 
    callfn         &fopen     u64 
    setret                    u64 
    jump           #11450     
#11450: 
    retfn                     u64 
End


Proc mwindowsp.os_gethostname: u64
    procentry                 
    setargs                   3 0
    push           300        i64 
    push           &mwindowsp.os_gethostname.name 
    push           0          u64 
    callproc       &`GetModuleFileNameA 
    push           &mwindowsp.os_gethostname.name 
    setret                    u64 
    jump           #11452     
#11452: 
    retfn                     u64 
End


Proc mwindowsp.os_getmpath: u64
    procentry                 
    push           "C:\\m\\"  u64 
    setret                    u64 
    jump           #11454     
#11454: 
    retfn                     u64 
End


Proc mwindowsp.os_exitprocess:
    param          mwindowsp.os_exitprocess.x i64 
    procentry                 
    push           mwindowsp.os_exitprocess.x i64 
    stop                      
#11456: 
    retproc                   
End


Proc mwindowsp.os_clock: i64
    procentry                 
    setargs                   0 0
    callfn         &clock     i32 
    setret                    i64 
    jump           #11458     
#11458: 
    retfn                     i64 
End


Proc mwindowsp.os_ticks: i64
    procentry                 
    setargs                   0 0
    callfn         &`GetTickCount64 i64 
    setret                    i64 
    jump           #11460     
#11460: 
    retfn                     i64 
End


Proc mwindowsp.os_getclockspersec: i64
    procentry                 
    push           1000       i64 
    setret                    i64 
    jump           #11462     
#11462: 
    retfn                     i64 
End


Proc mwindowsp.os_iswindows: i64
    procentry                 
    push           1          i64 
    setret                    i64 
    jump           #11464     
#11464: 
    retfn                     i64 
End


Proc mwindowsp.os_filelastwritetime: i64
    param          mwindowsp.os_filelastwritetime.filename u64 
    local          mwindowsp.os_filelastwritetime.f u64 
    local          mwindowsp.os_filelastwritetime.ctime i64 
    local          mwindowsp.os_filelastwritetime.atime i64 
    local          mwindowsp.os_filelastwritetime.wtime i64 
    procentry                 
    push           mwindowsp.os_filelastwritetime.filename u64 
    push           0          u64 
    jumpne         #11466     u64 
    push           1          i64 
    setret                    i64 
    jump           #11467     
#11466: 
    setargs                   7 0
    push           0          u64 
    push           3          i64 
    push           3          i64 
    push           0          u64 
    push           1          i64 
    push           2147483648 i64 
    push           mwindowsp.os_filelastwritetime.filename u64 
    callfn         &`CreateFileA u64 
    pop            mwindowsp.os_filelastwritetime.f u64 
    push           mwindowsp.os_filelastwritetime.f i64 
    push           -1         i64 
    jumpne         #11468     i64 
    push           0          i64 
    setret                    i64 
    jump           #11467     
#11468: 
    setargs                   4 0
    push           &mwindowsp.os_filelastwritetime.wtime 
    push           &mwindowsp.os_filelastwritetime.atime 
    push           &mwindowsp.os_filelastwritetime.ctime 
    push           mwindowsp.os_filelastwritetime.f u64 
    callproc       &`GetFileTime 
    setargs                   1 0
    push           mwindowsp.os_filelastwritetime.f u64 
    callproc       &`CloseHandle 
    push           mwindowsp.os_filelastwritetime.wtime i64 
    setret                    i64 
    jump           #11467     
#11467: 
    retfn                     i64 
End


Proc mwindowsp.os_getsystime:
    param          mwindowsp.os_getsystime.tm u64 
    procentry                 
    setargs                   1 0
    push           mwindowsp.os_getsystime.tm u64 
    callproc       &`GetLocalTime 
#11470: 
    retproc                   
End


Proc mwindowsp.os_messagebox:
    param          mwindowsp.os_messagebox.s u64 
    param          mwindowsp.os_messagebox.t u64 
    procentry                 
    setargs                   4 0
    push           0          i64 
    push           mwindowsp.os_messagebox.t u64 
    push           mwindowsp.os_messagebox.s u64 
    push           0          i64 
    callproc       &`MessageBoxA 
#11472: 
    retproc                   
End


Proc mwindowsp.os_hpcounter: i64
    local          mwindowsp.os_hpcounter.a i64 
    procentry                 
    setargs                   1 0
    push           &mwindowsp.os_hpcounter.a 
    callproc       &`QueryPerformanceCounter 
    push           mwindowsp.os_hpcounter.a i64 
    setret                    i64 
    jump           #11474     
#11474: 
    retfn                     i64 
End


Proc mwindowsp.os_hpfrequency: i64
    local          mwindowsp.os_hpfrequency.a i64 
    procentry                 
    setargs                   1 0
    push           &mwindowsp.os_hpfrequency.a 
    callproc       &`QueryPerformanceFrequency 
    push           mwindowsp.os_hpfrequency.a i64 
    setret                    i64 
    jump           #11476     
#11476: 
    retfn                     i64 
End


Proc mwindowsp.os_peek:
    local          mwindowsp.os_peek.ticks i64 
    local          mwindowsp.os_peek.m block:100 
    procentry                 
    setargs                   0 0
    callfn         &`GetTickCount64 i64 
    pop            mwindowsp.os_peek.ticks i64 
    push           mwindowsp.os_peek.ticks i64 
    push           mwindowsp.os_peek.lastticks i64 
    sub                       i64 
    push           1000       i64 
    jumplt         #11478     i64 
    push           mwindowsp.os_peek.ticks i64 
    pop            mwindowsp.os_peek.lastticks i64 
    setargs                   5 0
    push           0          i64 
    push           0          i64 
    push           0          i64 
    push           0          u64 
    push           &mwindowsp.os_peek.m 
    callproc       &`PeekMessageA 
#11478: 
#11479: 
    retproc                   
End


Proc pc_lex.lex:
    local          pc_lex.lex.i i64 
    local          pc_lex.lex.c i64 
    local          pc_lex.lex.d i64 
    local          pc_lex.lex.hsum i64 
    local          pc_lex.lex.length i64 
    local          pc_lex.lex.pstart u64 
    procentry                 
    push           0          i64 
    pop            pc_lex.lxsubcode i64 
#11481: 
    push           &pc_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          pc_lex.lex.c i64 
    switch         #11482     0 122
    opnd           #11483     
#11482: 
    switchlabel    #11484     
    switchlabel    #11483     
    switchlabel    #11483     
    switchlabel    #11483     
    switchlabel    #11483     
    switchlabel    #11483     
    switchlabel    #11483     
    switchlabel    #11483     
    switchlabel    #11483     
    switchlabel    #11485     
    switchlabel    #11486     
    switchlabel    #11483     
    switchlabel    #11483     
    switchlabel    #11487     
    switchlabel    #11483     
    switchlabel    #11483     
    switchlabel    #11483     
    switchlabel    #11483     
    switchlabel    #11483     
    switchlabel    #11483     
    switchlabel    #11483     
    switchlabel    #11483     
    switchlabel    #11483     
    switchlabel    #11483     
    switchlabel    #11483     
    switchlabel    #11483     
    switchlabel    #11484     
    switchlabel    #11483     
    switchlabel    #11483     
    switchlabel    #11483     
    switchlabel    #11483     
    switchlabel    #11483     
    switchlabel    #11485     
    switchlabel    #11488     
    switchlabel    #11489     
    switchlabel    #11490     
    switchlabel    #11491     
    switchlabel    #11483     
    switchlabel    #11492     
    switchlabel    #11483     
    switchlabel    #11483     
    switchlabel    #11483     
    switchlabel    #11493     
    switchlabel    #11483     
    switchlabel    #11494     
    switchlabel    #11495     
    switchlabel    #11491     
    switchlabel    #11483     
    switchlabel    #11496     
    switchlabel    #11496     
    switchlabel    #11496     
    switchlabel    #11496     
    switchlabel    #11496     
    switchlabel    #11496     
    switchlabel    #11496     
    switchlabel    #11496     
    switchlabel    #11496     
    switchlabel    #11496     
    switchlabel    #11497     
    switchlabel    #11488     
    switchlabel    #11483     
    switchlabel    #11483     
    switchlabel    #11483     
    switchlabel    #11483     
    switchlabel    #11483     
    switchlabel    #11498     
    switchlabel    #11498     
    switchlabel    #11498     
    switchlabel    #11498     
    switchlabel    #11498     
    switchlabel    #11498     
    switchlabel    #11498     
    switchlabel    #11498     
    switchlabel    #11498     
    switchlabel    #11498     
    switchlabel    #11498     
    switchlabel    #11498     
    switchlabel    #11498     
    switchlabel    #11498     
    switchlabel    #11498     
    switchlabel    #11498     
    switchlabel    #11498     
    switchlabel    #11498     
    switchlabel    #11498     
    switchlabel    #11498     
    switchlabel    #11498     
    switchlabel    #11498     
    switchlabel    #11498     
    switchlabel    #11498     
    switchlabel    #11498     
    switchlabel    #11498     
    switchlabel    #11483     
    switchlabel    #11483     
    switchlabel    #11483     
    switchlabel    #11483     
    switchlabel    #11491     
    switchlabel    #11499     
    switchlabel    #11491     
    switchlabel    #11491     
    switchlabel    #11491     
    switchlabel    #11491     
    switchlabel    #11491     
    switchlabel    #11491     
    switchlabel    #11491     
    switchlabel    #11491     
    switchlabel    #11491     
    switchlabel    #11491     
    switchlabel    #11491     
    switchlabel    #11491     
    switchlabel    #11491     
    switchlabel    #11491     
    switchlabel    #11491     
    switchlabel    #11491     
    switchlabel    #11491     
    switchlabel    #11491     
    switchlabel    #11491     
    switchlabel    #11491     
    switchlabel    #11491     
    switchlabel    #11491     
    switchlabel    #11491     
    switchlabel    #11491     
    switchlabel    #11491     
    switchlabel    #11491     
    endswitch                 
#11491: 
    push           pc_lex.lxsptr u64 
    push           1          i64 
    subrefoff                 u64 1 0
    pop            pc_lex.lex.pstart u64 
!doname::
#11500: 
    push           pc_lex.lex.pstart u64 
    pushptr                   u8 
    pop            pc_lex.lex.hsum i64 
#11501: 
    push           &pc_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          pc_lex.lex.c i64 
    switch         #11502     36 122
    opnd           #11503     
#11502: 
    switchlabel    #11504     
    switchlabel    #11503     
    switchlabel    #11503     
    switchlabel    #11503     
    switchlabel    #11503     
    switchlabel    #11503     
    switchlabel    #11503     
    switchlabel    #11503     
    switchlabel    #11503     
    switchlabel    #11503     
    switchlabel    #11504     
    switchlabel    #11503     
    switchlabel    #11504     
    switchlabel    #11504     
    switchlabel    #11504     
    switchlabel    #11504     
    switchlabel    #11504     
    switchlabel    #11504     
    switchlabel    #11504     
    switchlabel    #11504     
    switchlabel    #11504     
    switchlabel    #11504     
    switchlabel    #11503     
    switchlabel    #11503     
    switchlabel    #11503     
    switchlabel    #11503     
    switchlabel    #11503     
    switchlabel    #11503     
    switchlabel    #11503     
    switchlabel    #11505     
    switchlabel    #11505     
    switchlabel    #11505     
    switchlabel    #11505     
    switchlabel    #11505     
    switchlabel    #11505     
    switchlabel    #11505     
    switchlabel    #11505     
    switchlabel    #11505     
    switchlabel    #11505     
    switchlabel    #11505     
    switchlabel    #11505     
    switchlabel    #11505     
    switchlabel    #11505     
    switchlabel    #11505     
    switchlabel    #11505     
    switchlabel    #11505     
    switchlabel    #11505     
    switchlabel    #11505     
    switchlabel    #11505     
    switchlabel    #11505     
    switchlabel    #11505     
    switchlabel    #11505     
    switchlabel    #11505     
    switchlabel    #11505     
    switchlabel    #11505     
    switchlabel    #11503     
    switchlabel    #11503     
    switchlabel    #11503     
    switchlabel    #11503     
    switchlabel    #11504     
    switchlabel    #11503     
    switchlabel    #11504     
    switchlabel    #11504     
    switchlabel    #11504     
    switchlabel    #11504     
    switchlabel    #11504     
    switchlabel    #11504     
    switchlabel    #11504     
    switchlabel    #11504     
    switchlabel    #11504     
    switchlabel    #11504     
    switchlabel    #11504     
    switchlabel    #11504     
    switchlabel    #11504     
    switchlabel    #11504     
    switchlabel    #11504     
    switchlabel    #11504     
    switchlabel    #11504     
    switchlabel    #11504     
    switchlabel    #11504     
    switchlabel    #11504     
    switchlabel    #11504     
    switchlabel    #11504     
    switchlabel    #11504     
    switchlabel    #11504     
    switchlabel    #11504     
    switchlabel    #11504     
    endswitch                 
#11504: 
    push           pc_lex.lex.hsum i64 
    push           4          i64 
    shl                       i64 
    push           pc_lex.lex.hsum i64 
    sub                       i64 
    push           pc_lex.lex.c i64 
    add                       i64 
    pop            pc_lex.lex.hsum i64 
    jump           #11501     
#11505: 
    push           pc_lex.lex.c i64 
    push           32         i64 
    add                       i64 
    push           pc_lex.lxsptr u64 
    push           1          i64 
    subrefoff                 u64 1 0
    popptr                    u8 
    push           pc_lex.lex.hsum i64 
    push           4          i64 
    shl                       i64 
    push           pc_lex.lex.hsum i64 
    sub                       i64 
    push           pc_lex.lex.c i64 
    add                       i64 
    push           32         i64 
    add                       i64 
    pop            pc_lex.lex.hsum i64 
    jump           #11501     
#11503: 
    push           &pc_lex.lxsptr 
    decr                      u64 1
    jump           #11506     
    jump           #11501     
#11506: 
    push           pc_lex.lxsptr u64 
    push           pc_lex.lex.pstart u64 
    subref                    i64 1
    pop            pc_lex.lxlength i64 
    push           pc_lex.lex.hsum i64 
    push           5          i64 
    shl                       i64 
    push           pc_lex.lex.hsum i64 
    sub                       i64 
    pop            pc_lex.lxhashvalue i64 
    push           0          i64 
    pop            pc_lex.lxtruename u8 
    setargs                   2 0
    push           pc_lex.lxlength i64 
    push           pc_lex.lex.pstart u64 
    callfn         &pc_lex.lookuplex i64 
    jumpfalse      #11507     i64 
    push           pc_lex.lxsymptr u64 
    push           25         
    pushptroff                u8 1 0
    jumpfalse      #11508     i64 
    push           pc_lex.lxsymptr u64 
    push           25         
    pushptroff                u8 1 0
    pop            pc_lex.lxsymbol i64 
    push           pc_lex.lxsymptr u64 
    push           26         
    pushptroff                u8 1 0
    pop            pc_lex.lxsubcode i64 
    jump           #11509     
#11508: 
    push           pc_lex.lxsymptr u64 
    push           24         
    pushptroff                u8 1 0
    pop            pc_lex.lxsymbol i64 
#11509: 
    jump           #11510     
#11507: 
    push           19         i64 
    pop            pc_lex.lxsymbol i64 
#11510: 
    jump           #11511     
    jump           #11481     
#11498: 
    push           pc_lex.lxsptr u64 
    push           1          i64 
    subrefoff                 u64 1 0
    pop            pc_lex.lex.pstart u64 
    push           pc_lex.lex.pstart u64 
    pushptr                   u8 
    push           32         i64 
    add                       i64 
    push           pc_lex.lex.pstart u64 
    storeptr                  u8 
    pop            pc_lex.lex.c i64 
    jump           #11500     
    jump           #11481     
#11496: 
    setargs                   2 0
    push           1          i64 
    push           pc_lex.lex.c i64 
    callproc       &pc_lex.readnumber 
    jump           #11511     
    jump           #11481     
#11499: 
    push           pc_lex.lxsptr u64 
    pop            pc_lex.lex.pstart u64 
    push           0          i64 
    pop            pc_lex.lex.hsum i64 
#11512: 
    push           pc_lex.lxsptr u64 
    pushptr                   u8 
    store          pc_lex.lex.c i64 
    switch         #11513     36 122
    opnd           #11514     
#11513: 
    switchlabel    #11515     
    switchlabel    #11514     
    switchlabel    #11514     
    switchlabel    #11514     
    switchlabel    #11514     
    switchlabel    #11514     
    switchlabel    #11514     
    switchlabel    #11514     
    switchlabel    #11514     
    switchlabel    #11514     
    switchlabel    #11515     
    switchlabel    #11514     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11514     
    switchlabel    #11514     
    switchlabel    #11514     
    switchlabel    #11514     
    switchlabel    #11514     
    switchlabel    #11514     
    switchlabel    #11514     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11514     
    switchlabel    #11514     
    switchlabel    #11514     
    switchlabel    #11514     
    switchlabel    #11515     
    switchlabel    #11514     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    endswitch                 
#11515: 
    push           &pc_lex.lxsptr 
    incr                      u64 1
    push           pc_lex.lex.hsum i64 
    push           4          i64 
    shl                       i64 
    push           pc_lex.lex.hsum i64 
    sub                       i64 
    push           pc_lex.lex.c i64 
    add                       i64 
    pop            pc_lex.lex.hsum i64 
    jump           #11512     
#11514: 
    jump           #11516     
    jump           #11512     
#11516: 
    push           19         i64 
    pop            pc_lex.lxsymbol i64 
    push           1          i64 
    pop            pc_lex.lxtruename u8 
    push           pc_lex.lex.pstart u64 
    push           pc_lex.lxsptr u64 
    jumpne         #11517     u64 
    setargs                   1 0
    push           "NULL ` name" u64 
    callproc       &pc_lex.lxerror 
#11517: 
    push           pc_lex.lxsptr u64 
    push           pc_lex.lex.pstart u64 
    subref                    i64 1
    pop            pc_lex.lxlength i64 
    push           pc_lex.lex.hsum i64 
    push           5          i64 
    shl                       i64 
    push           pc_lex.lex.hsum i64 
    sub                       i64 
    pop            pc_lex.lxhashvalue i64 
    setargs                   2 0
    push           pc_lex.lxlength i64 
    push           pc_lex.lex.pstart u64 
    callfn         &pc_lex.lookuplex i64 
    jumpfalse      #11518     i64 
    push           pc_lex.lxsymptr u64 
    push           24         
    pushptroff                u8 1 0
    pop            pc_lex.lxsymbol i64 
    push           pc_lex.lxsymbol i64 
    push           0          i64 
    jumpne         #11519     i64 
    push           19         i64 
    push           pc_lex.lxsymptr u64 
    push           24         
    storeptroff               u8 1 0
    pop            pc_lex.lxsymbol i64 
#11519: 
#11518: 
    jump           #11511     
    jump           #11481     
#11488: 
    jump           #11520     
#11521: 
#11520: 
    push           &pc_lex.commentmap 
    push           &pc_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    pushptroff                u8 1 0
    jumptrue       #11521     u64 
#11522: 
    push           pc_lex.lxsptr u64 
    push           1          i64 
    subrefoff                 u64 1 0
    pushptr                   u8 
    push           0          i64 
    jumpne         #11523     i64 
    push           &pc_lex.lxsptr 
    decr                      u64 1
#11523: 
    push           &pc_lex.lxlineno 
    incr                      i64 1
    push           12         i64 
    pop            pc_lex.lxsymbol i64 
    jump           #11511     
    jump           #11481     
#11490: 
    push           0          i64 
    pop            pc_lex.lxvalue i64 
#11524: 
    push           &pc_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          pc_lex.lex.c i64 
    switch         #11525     48 57
    opnd           #11526     
#11525: 
    switchlabel    #11527     
    switchlabel    #11527     
    switchlabel    #11527     
    switchlabel    #11527     
    switchlabel    #11527     
    switchlabel    #11527     
    switchlabel    #11527     
    switchlabel    #11527     
    switchlabel    #11527     
    switchlabel    #11527     
    endswitch                 
#11527: 
    push           pc_lex.lxvalue i64 
    push           10         i64 
    mul                       i64 
    push           pc_lex.lex.c i64 
    add                       i64 
    push           48         i64 
    sub                       i64 
    pop            pc_lex.lxvalue i64 
    jump           #11524     
#11526: 
    push           &pc_lex.lxsptr 
    decr                      u64 1
    jump           #11528     
    jump           #11524     
#11528: 
    push           pc_lex.lxvalue i64 
    push           0          i64 
    jumpne         #11529     i64 
    setargs                   1 0
    push           "Bad label" u64 
    callproc       &pc_lex.lxerror 
#11529: 
    push           pc_libpcl.labelnooffset i64 
    push           0          i64 
    jumpne         #11530     i64 
    push           &pc_libpcl.maxuserlabel 
    push           pc_lex.lxvalue i64 
    maxto                     i64 
    jump           #11531     
#11530: 
    push           &pc_lex.lxvalue 
    push           pc_libpcl.labelnooffset i64 
    addto                     i64 
#11531: 
    push           14         i64 
    pop            pc_lex.lxsymbol i64 
    jump           #11511     
    jump           #11481     
#11494: 
    push           2          i64 
    pop            pc_lex.lxsymbol i64 
    jump           #11511     
    jump           #11481     
#11497: 
    push           pc_lex.lxsptr u64 
    pushptr                   u8 
    push           58         i64 
    jumpne         #11532     i64 
    push           4          i64 
    pop            pc_lex.lxsymbol i64 
    push           &pc_lex.lxsptr 
    incr                      u64 1
    jump           #11533     
#11532: 
    push           3          i64 
    pop            pc_lex.lxsymbol i64 
#11533: 
    jump           #11511     
    jump           #11481     
#11495: 
    push           &pc_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    pop            pc_lex.lex.c i64 
    push           pc_lex.lex.c i64 
    push           48         u64 
    push           57         u64 
    jumpinrange    #11534     i64 
    setargs                   1 0
    push           "Bad no"   u64 
    callproc       &pc_lex.lxerror 
#11534: 
    setargs                   2 0
    push           -1         i64 
    push           pc_lex.lex.c i64 
    callproc       &pc_lex.readnumber 
    jump           #11511     
    jump           #11481     
#11493: 
    push           9          i64 
    pop            pc_lex.lxsymbol i64 
    jump           #11511     
    jump           #11481     
#11492: 
    push           10         i64 
    pop            pc_lex.lxsymbol i64 
    jump           #11511     
    jump           #11481     
#11489: 
    setargs                   0 0
    callproc       &pc_lex.readstring 
    jump           #11511     
    jump           #11481     
#11485: 
    jump           #11481     
#11487: 
    jump           #11481     
#11486: 
    push           &pc_lex.lxlineno 
    incr                      i64 1
    push           12         i64 
    pop            pc_lex.lxsymbol i64 
    jump           #11511     
    jump           #11481     
#11484: 
    push           13         i64 
    pop            pc_lex.lxsymbol i64 
    push           &pc_lex.lxsptr 
    decr                      u64 1
    jump           #11511     
    jump           #11481     
#11483: 
    push           1          i64 
    pop            pc_lex.lxsymbol i64 
    push           pc_lex.lex.c i64 
    pop            pc_lex.lxvalue i64 
    jump           #11511     
    jump           #11481     
#11535: 
#11511: 
    retproc                   
End


Proc pc_lex.initlex:
    local          pc_lex.initlex.i i64 
    procentry                 
    push           pc_lex.initlex.done u8 
    jumpfalse      #11537     i64 
    jump           #11538     
#11537: 
    push           0          i64 
    pop            pc_lex.lxsubcode i64 
    push           1          i64 
    pop            pc_lex.lxsymbol i64 
    push           0          i64 
    pop            pc_lex.lxlineno i64 
#11539: 
    push           0          i64 
    pop            pc_lex.initlex.i i64 
#11540: 
    push           1          u64 
    push           &pc_lex.commentmap 
    push           pc_lex.initlex.i i64 
    popptroff                 u8 1 0
#11541: 
    forup          #11540     i64 1
    opnd           pc_lex.initlex.i 
    opnd           255        
#11542: 
    push           0          u64 
    push           &pc_lex.commentmap 
    push           0          i64 
    popptroff                 u8 1 0
    push           0          u64 
    push           &pc_lex.commentmap 
    push           10         i64 
    popptroff                 u8 1 0
    setargs                   0 0
    callproc       &pc_lex.inithashtable 
    push           1          i64 
    pop            pc_lex.initlex.done u8 
#11538: 
    retproc                   
End


Proc pc_lex.readreal:
    param          pc_lex.readreal.s u64 
    param          pc_lex.readreal.slen i64 
    local          pc_lex.readreal.c i64 
    procentry                 
    push           pc_lex.lxsptr u64 
    pushptr                   u8 
    pop            pc_lex.readreal.c i64 
    push           0          i64 
    push           pc_lex.lxsptr u64 
    popptr                    u8 
    setargs                   2 0
    push           0          u64 
    push           pc_lex.readreal.s u64 
    callfn         &strtod    r64 
    pop            pc_lex.lxxvalue r64 
    push           pc_lex.readreal.c i64 
    push           pc_lex.lxsptr u64 
    popptr                    u8 
    push           16         i64 
    pop            pc_lex.lxsymbol i64 
#11544: 
    retproc                   
End


Proc pc_lex.readnumber:
    param          pc_lex.readnumber.c i64 
    param          pc_lex.readnumber.signx i64 
    local          pc_lex.readnumber.str block:256 
    local          pc_lex.readnumber.i i64 
    local          pc_lex.readnumber.d i64 
    local          pc_lex.readnumber.intlen i64 
    local          pc_lex.readnumber.slen i64 
    local          pc_lex.readnumber.isfloat i64 
    local          pc_lex.readnumber.sepseen i64 
    local          pc_lex.readnumber.s u64 
    procentry                 
    push           pc_lex.lxsptr u64 
    pushptr                   u8 
    pop            pc_lex.readnumber.d i64 
    push           pc_lex.readnumber.d i64 
    push           120        i64 
    casejumpeq     #11546     i64 0
    push           88         i64 
    casejumpeq     #11546     i64 0
    popstack                  i64 
    jump           #11547     
#11546: 
    push           pc_lex.readnumber.c i64 
    push           48         i64 
    casejumpeq     #11548     i64 0
    popstack                  i64 
    jump           #11549     
#11548: 
    push           &pc_lex.lxsptr 
    incr                      u64 1
    setargs                   0 0
    callproc       &pc_lex.readhex 
    push           &pc_lex.lxvalue 
    push           pc_lex.readnumber.signx i64 
    multo                     i64 
    jump           #11550     
    jump           #11551     
#11549: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           pc_lex.readnumber.c i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Base not supported" u64 
    callproc       &pc_lex.lxerror 
#11551: 
    jump           #11552     
#11547: 
#11552: 
    push           pc_lex.readnumber.c u64 
    push           &pc_lex.readnumber.str 
    push           1          i64 
    popptroff                 u8 1 -1
    push           pc_lex.lxsptr u64 
    push           1          i64 
    subrefoff                 u64 1 0
    pop            pc_lex.readnumber.s u64 
    push           1          i64 
    pop            pc_lex.readnumber.slen i64 
    push           0          i64 
    store          pc_lex.readnumber.sepseen i64 
    pop            pc_lex.readnumber.isfloat i64 
#11553: 
    push           &pc_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          pc_lex.readnumber.c i64 
    switch         #11554     39 101
    opnd           #11555     
#11554: 
    switchlabel    #11556     
    switchlabel    #11555     
    switchlabel    #11555     
    switchlabel    #11555     
    switchlabel    #11557     
    switchlabel    #11555     
    switchlabel    #11557     
    switchlabel    #11558     
    switchlabel    #11555     
    switchlabel    #11559     
    switchlabel    #11559     
    switchlabel    #11559     
    switchlabel    #11559     
    switchlabel    #11559     
    switchlabel    #11559     
    switchlabel    #11559     
    switchlabel    #11559     
    switchlabel    #11559     
    switchlabel    #11559     
    switchlabel    #11555     
    switchlabel    #11555     
    switchlabel    #11555     
    switchlabel    #11555     
    switchlabel    #11555     
    switchlabel    #11555     
    switchlabel    #11555     
    switchlabel    #11555     
    switchlabel    #11555     
    switchlabel    #11555     
    switchlabel    #11555     
    switchlabel    #11560     
    switchlabel    #11555     
    switchlabel    #11555     
    switchlabel    #11555     
    switchlabel    #11555     
    switchlabel    #11555     
    switchlabel    #11555     
    switchlabel    #11555     
    switchlabel    #11555     
    switchlabel    #11555     
    switchlabel    #11555     
    switchlabel    #11555     
    switchlabel    #11555     
    switchlabel    #11555     
    switchlabel    #11555     
    switchlabel    #11555     
    switchlabel    #11555     
    switchlabel    #11555     
    switchlabel    #11555     
    switchlabel    #11555     
    switchlabel    #11555     
    switchlabel    #11555     
    switchlabel    #11555     
    switchlabel    #11555     
    switchlabel    #11555     
    switchlabel    #11555     
    switchlabel    #11556     
    switchlabel    #11555     
    switchlabel    #11555     
    switchlabel    #11555     
    switchlabel    #11555     
    switchlabel    #11555     
    switchlabel    #11560     
    endswitch                 
#11559: 
    push           pc_lex.readnumber.c u64 
    push           &pc_lex.readnumber.str 
    push           &pc_lex.readnumber.slen 
    incrload                  i64 1
    popptroff                 u8 1 -1
    jump           #11553     
#11556: 
    push           1          i64 
    pop            pc_lex.readnumber.sepseen i64 
    jump           #11553     
#11558: 
    push           pc_lex.readnumber.isfloat i64 
    jumpfalse      #11561     i64 
    setargs                   1 0
    push           "float?"   u64 
    callproc       &pc_lex.lxerror 
#11561: 
    push           1          i64 
    pop            pc_lex.readnumber.isfloat i64 
    push           pc_lex.readnumber.slen i64 
    pop            pc_lex.readnumber.intlen i64 
    jump           #11553     
#11560: 
    push           pc_lex.readnumber.isfloat i64 
    push           2          i64 
    jumpne         #11562     i64 
    setargs                   1 0
    push           "float?"   u64 
    callproc       &pc_lex.lxerror 
#11562: 
    push           2          i64 
    pop            pc_lex.readnumber.isfloat i64 
    jump           #11553     
#11557: 
    push           pc_lex.readnumber.isfloat i64 
    push           2          i64 
    jumpeq         #11563     i64 
    setargs                   1 0
    push           "float?"   u64 
    callproc       &pc_lex.lxerror 
#11563: 
    push           3          i64 
    pop            pc_lex.readnumber.isfloat i64 
    jump           #11553     
#11555: 
    push           &pc_lex.lxsptr 
    decr                      u64 1
    jump           #11564     
    jump           #11553     
#11564: 
    push           pc_lex.readnumber.isfloat i64 
    jumpfalse      #11565     i64 
    push           pc_lex.readnumber.sepseen i64 
    jumpfalse      #11566     i64 
    setargs                   1 0
    push           "seps in float?" u64 
    callproc       &pc_lex.lxerror 
#11566: 
    setargs                   2 0
    push           pc_lex.lxsptr u64 
    push           pc_lex.readnumber.s u64 
    subref                    i64 1
    push           pc_lex.readnumber.s u64 
    callproc       &pc_lex.readreal 
    push           &pc_lex.lxxvalue 
    push           pc_lex.readnumber.signx i64 
    float                     r64 i64 
    multo                     r64 
    jump           #11550     
#11565: 
    push           pc_lex.readnumber.slen i64 
    push           20         i64 
    jumpgt         #11567     i64 
    push           pc_lex.readnumber.slen i64 
    push           20         i64 
    jumpne         #11568     i64 
    setargs                   2 0
    push           "18446744073709551615" u64 
    push           &pc_lex.readnumber.str 
    callfn         &mlibp.cmpstring i64 
    push           0          i64 
    jumple         #11568     i64 
#11567: 
    push           pc_lex.readnumber.slen i64 
    push           39         i64 
    jumpgt         #11569     i64 
    push           pc_lex.readnumber.slen i64 
    push           39         i64 
    jumpne         #11570     i64 
    setargs                   3 0
    push           39         u64 
    push           "340282366920938463463374607431768211455" u64 
    push           pc_lex.readnumber.s u64 
    callfn         &strncmp   i32 
    push           0          i64 
    jumple         #11570     i64 
#11569: 
    setargs                   1 0
    push           "Overflows 128 bits" u64 
    callproc       &pc_lex.lxerror 
#11570: 
    setargs                   3 0
    push           10         i64 
    push           pc_lex.readnumber.slen i64 
    push           &pc_lex.readnumber.str 
    callproc       &pc_lex.stringtonumber128 
    jump           #11550     
#11568: 
    push           15         i64 
    pop            pc_lex.lxsymbol i64 
    push           0          i64 
    pop            pc_lex.lxvalue i64 
#11571: 
    push           1          i64 
    pop            pc_lex.readnumber.i i64 
    push           pc_lex.readnumber.slen i64 
    push           1          i64 
    jumplt         #11572     i64 
#11573: 
    push           pc_lex.lxvalue i64 
    push           10         i64 
    mul                       i64 
    push           &pc_lex.readnumber.str 
    push           pc_lex.readnumber.i i64 
    pushptroff                u8 1 -1
    add                       i64 
    push           48         i64 
    sub                       i64 
    pop            pc_lex.lxvalue i64 
#11574: 
    forup          #11573     i64 1
    opnd           pc_lex.readnumber.i 
    opnd           pc_lex.readnumber.slen 
#11572: 
    push           &pc_lex.lxvalue 
    push           pc_lex.readnumber.signx i64 
    multo                     i64 
#11550: 
    retproc                   
End


Proc pc_lex.readhex:
    local          pc_lex.readhex.ndigs i64 
    local          pc_lex.readhex.c i64 
    procentry                 
    push           0          i64 
    pop            pc_lex.readhex.ndigs i64 
    push           0          i64 
    pop            pc_lex.lxvalue i64 
#11576: 
    push           &pc_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          pc_lex.readhex.c i64 
    switch         #11577     39 102
    opnd           #11578     
#11577: 
    switchlabel    #11579     
    switchlabel    #11578     
    switchlabel    #11578     
    switchlabel    #11578     
    switchlabel    #11578     
    switchlabel    #11578     
    switchlabel    #11578     
    switchlabel    #11578     
    switchlabel    #11578     
    switchlabel    #11580     
    switchlabel    #11580     
    switchlabel    #11580     
    switchlabel    #11580     
    switchlabel    #11580     
    switchlabel    #11580     
    switchlabel    #11580     
    switchlabel    #11580     
    switchlabel    #11580     
    switchlabel    #11580     
    switchlabel    #11578     
    switchlabel    #11578     
    switchlabel    #11578     
    switchlabel    #11578     
    switchlabel    #11578     
    switchlabel    #11578     
    switchlabel    #11578     
    switchlabel    #11581     
    switchlabel    #11581     
    switchlabel    #11581     
    switchlabel    #11581     
    switchlabel    #11581     
    switchlabel    #11581     
    switchlabel    #11578     
    switchlabel    #11578     
    switchlabel    #11578     
    switchlabel    #11578     
    switchlabel    #11578     
    switchlabel    #11578     
    switchlabel    #11578     
    switchlabel    #11578     
    switchlabel    #11578     
    switchlabel    #11578     
    switchlabel    #11578     
    switchlabel    #11578     
    switchlabel    #11578     
    switchlabel    #11578     
    switchlabel    #11578     
    switchlabel    #11578     
    switchlabel    #11578     
    switchlabel    #11578     
    switchlabel    #11578     
    switchlabel    #11578     
    switchlabel    #11578     
    switchlabel    #11578     
    switchlabel    #11578     
    switchlabel    #11578     
    switchlabel    #11579     
    switchlabel    #11579     
    switchlabel    #11582     
    switchlabel    #11582     
    switchlabel    #11582     
    switchlabel    #11582     
    switchlabel    #11582     
    switchlabel    #11582     
    endswitch                 
#11580: 
    push           pc_lex.lxvalue i64 
    push           16         i64 
    mul                       i64 
    push           pc_lex.readhex.c i64 
    add                       i64 
    push           48         i64 
    sub                       i64 
    pop            pc_lex.lxvalue i64 
    push           &pc_lex.readhex.ndigs 
    incr                      i64 1
    jump           #11576     
#11581: 
    push           pc_lex.lxvalue i64 
    push           16         i64 
    mul                       i64 
    push           pc_lex.readhex.c i64 
    push           65         i64 
    sub                       i64 
    push           10         i64 
    add                       i64 
    add                       i64 
    pop            pc_lex.lxvalue i64 
    push           &pc_lex.readhex.ndigs 
    incr                      i64 1
    jump           #11576     
#11582: 
    push           pc_lex.lxvalue i64 
    push           16         i64 
    mul                       i64 
    push           pc_lex.readhex.c i64 
    push           97         i64 
    sub                       i64 
    push           10         i64 
    add                       i64 
    add                       i64 
    pop            pc_lex.lxvalue i64 
    push           &pc_lex.readhex.ndigs 
    incr                      i64 1
    jump           #11576     
#11579: 
    jump           #11576     
#11578: 
    push           &pc_lex.lxsptr 
    decr                      u64 1
    jump           #11583     
    jump           #11576     
#11583: 
    push           pc_lex.readhex.ndigs i64 
    push           0          i64 
    jumpne         #11584     i64 
    setargs                   1 0
    push           "No hex digits" u64 
    callproc       &pc_lex.lxerror 
    jump           #11585     
#11584: 
    push           pc_lex.readhex.ndigs i64 
    push           32         i64 
    jumple         #11586     i64 
    setargs                   1 0
    push           "Overflow in hex number" u64 
    callproc       &pc_lex.lxerror 
    jump           #11585     
#11586: 
    push           pc_lex.readhex.ndigs i64 
    push           16         i64 
    jumple         #11587     i64 
    setargs                   1 0
    push           "hex/128 bits not ready" u64 
    callproc       &pc_lex.lxerror 
    jump           #11588     
#11587: 
#11585: 
    push           15         i64 
    pop            pc_lex.lxsymbol i64 
#11588: 
    retproc                   
End


Proc pc_lex.ps:
    param          pc_lex.ps.caption u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           pc_lex.ps.caption u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_lex.lxsptr u64 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   1 0
    push           ":"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           0          u64 
    callproc       &pc_lex.printsymbol 
#11590: 
    retproc                   
End


Proc pc_lex.printsymbol:
    param          pc_lex.printsymbol.dev u64 
    local          pc_lex.printsymbol.str block:256 
    local          pc_lex.printsymbol.av_1 i64 
    procentry                 
    setargs                   2 0
    push           &pc_lex.symbolnames 
    push           pc_lex.lxsymbol i64 
    pushptroff                u64 8 -8
    push           &pc_lex.printsymbol.str 
    callproc       &strcpy    
    push           0          u64 
    push           &pc_lex.printsymbol.str 
    setargs                   1 0
    push           &pc_lex.printsymbol.str 
    callfn         &strlen    i64 
    popptroff                 u8 1 -3
    setargs                   1 0
    push           pc_lex.printsymbol.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           &pc_lex.printsymbol.str 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#11592: 
    push           14         i64 
    setargs                   1 0
    push           &pc_lex.printsymbol.str 
    callfn         &strlen    i64 
    sub                       i64 
    pop            pc_lex.printsymbol.av_1 i64 
    push           pc_lex.printsymbol.av_1 i64 
    push           0          i64 
    jumple         #11593     i64 
#11594: 
    setargs                   1 0
    push           pc_lex.printsymbol.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           " "        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#11595: 
    to             #11594     
    opnd           pc_lex.printsymbol.av_1 
#11593: 
    push           pc_lex.lxsymbol i64 
    push           19         i64 
    casejumpeq     #11596     i64 0
    push           15         i64 
    casejumpeq     #11597     i64 0
    push           16         i64 
    casejumpeq     #11598     i64 0
    push           17         i64 
    casejumpeq     #11599     i64 0
    push           1          i64 
    casejumpeq     #11600     i64 0
    push           20         i64 
    casejumpeq     #11601     i64 0
    push           21         i64 
    casejumpeq     #11602     i64 0
    popstack                  i64 
    jump           #11603     
#11596: 
    setargs                   1 0
    push           pc_lex.printsymbol.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           pc_lex.lxsymptr u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #11604     
#11597: 
    setargs                   1 0
    push           pc_lex.printsymbol.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           pc_lex.lxvalue i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #11604     
#11598: 
    setargs                   1 0
    push           pc_lex.printsymbol.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   2 0
    push           0          i64 
    push           pc_lex.lxxvalue r64 
    callproc       &msysp.m$print_r64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #11604     
#11599: 
    setargs                   1 0
    push           pc_lex.printsymbol.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "\""       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           pc_lex.lxsvalue u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           "\""       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #11604     
#11600: 
    setargs                   1 0
    push           pc_lex.printsymbol.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           pc_lex.lxvalue i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #11604     
#11601: 
    setargs                   1 0
    push           pc_lex.printsymbol.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           &pc_tables.pclnames 
    push           pc_lex.lxsubcode i64 
    pushptroff                u64 8 0
    push           1          i64 
    addrefoff                 u64 1 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #11604     
#11602: 
    setargs                   1 0
    push           pc_lex.printsymbol.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           &pc_tables.pstdnames 
    push           pc_lex.lxsubcode i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #11604     
#11603: 
    setargs                   1 0
    push           pc_lex.printsymbol.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           &pc_lex.symbolnames 
    push           pc_lex.lxsymbol i64 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           pc_lex.lxsubcode i64 
    jumpfalse      #11605     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           " "        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           pc_lex.lxsubcode i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#11605: 
#11604: 
    setargs                   1 0
    push           pc_lex.printsymbol.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   0 0
    callproc       &msysp.m$print_space 
    setargs                   1 0
    push           pc_lex.lxlineno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#11606: 
    retproc                   
End


Proc pc_lex.inithashtable:
    local          pc_lex.inithashtable.av_1 i64 
    local          pc_lex.inithashtable.av_2 i64 
    local          pc_lex.inithashtable.i i64 
    procentry                 
#11608: 
    push           0          i64 
    pop            pc_lex.inithashtable.i i64 
    push           218        i64 
    pop            pc_lex.inithashtable.av_1 i64 
    push           pc_lex.inithashtable.av_1 i64 
    push           0          i64 
    jumplt         #11609     i64 
#11610: 
    setargs                   3 0
    push           pc_lex.inithashtable.i i64 
    push           20         i64 
    push           &pc_tables.pclnames 
    push           pc_lex.inithashtable.i i64 
    pushptroff                u64 8 0
    push           1          i64 
    addrefoff                 u64 1 0
    callproc       &pc_lex.addreservedword 
#11611: 
    forup          #11610     i64 1
    opnd           pc_lex.inithashtable.i 
    opnd           pc_lex.inithashtable.av_1 
#11609: 
#11612: 
    push           0          i64 
    pop            pc_lex.inithashtable.i i64 
    push           14         i64 
    pop            pc_lex.inithashtable.av_2 i64 
    push           pc_lex.inithashtable.av_2 i64 
    push           0          i64 
    jumplt         #11613     i64 
#11614: 
    setargs                   3 0
    push           pc_lex.inithashtable.i i64 
    push           21         i64 
    push           &pc_tables.pstdnames 
    push           pc_lex.inithashtable.i i64 
    pushptroff                u64 8 0
    callproc       &pc_lex.addreservedword 
#11615: 
    forup          #11614     i64 1
    opnd           pc_lex.inithashtable.i 
    opnd           pc_lex.inithashtable.av_2 
#11613: 
    setargs                   3 0
    push           8          i64 
    push           20         i64 
    push           "proc"     u64 
    callproc       &pc_lex.addreservedword 
    setargs                   3 0
    push           8          i64 
    push           20         i64 
    push           "function" u64 
    callproc       &pc_lex.addreservedword 
    setargs                   3 0
    push           10         i64 
    push           20         i64 
    push           "end"      u64 
    callproc       &pc_lex.addreservedword 
    setargs                   3 0
    push           15         i64 
    push           20         i64 
    push           "endext"   u64 
    callproc       &pc_lex.addreservedword 
#11616: 
    retproc                   
End


Proc pc_lex.addreservedword:
    param          pc_lex.addreservedword.name u64 
    param          pc_lex.addreservedword.symbol i64 
    param          pc_lex.addreservedword.subcode i64 
    procentry                 
    setargs                   1 0
    push           pc_lex.addreservedword.name u64 
    callfn         &pc_lex.gethashvalue i64 
    pop            pc_lex.lxhashvalue i64 
    setargs                   2 0
    push           0          i64 
    push           pc_lex.addreservedword.name u64 
    callfn         &pc_lex.lookuplex i64 
    jumpfalse      #11618     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "NAME="    u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_lex.addreservedword.name u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "DUPL NAME" u64 
    callproc       &pc_lex.lxerror 
#11618: 
    push           0          i64 
    push           pc_lex.lxsymptr u64 
    push           24         
    popptroff                 u8 1 0
    push           pc_lex.addreservedword.symbol i64 
    push           pc_lex.lxsymptr u64 
    push           25         
    popptroff                 u8 1 0
    push           pc_lex.addreservedword.subcode i64 
    push           pc_lex.lxsymptr u64 
    push           26         
    popptroff                 u8 1 0
#11619: 
    retproc                   
End


Proc pc_lex.printhashtable:
    param          pc_lex.printhashtable.devx u64 
    param          pc_lex.printhashtable.caption u64 
    local          pc_lex.printhashtable.r u64 
    local          pc_lex.printhashtable.count i64 
    local          pc_lex.printhashtable.i i64 
    local          pc_lex.printhashtable.av_1 i64 
    procentry                 
    setargs                   1 0
    push           pc_lex.printhashtable.devx u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           pc_lex.printhashtable.caption u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           ":"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           0          i64 
    pop            pc_lex.printhashtable.count i64 
#11621: 
    push           0          i64 
    pop            pc_lex.printhashtable.i i64 
    push           262143     i64 
    pop            pc_lex.printhashtable.av_1 i64 
    push           pc_lex.printhashtable.av_1 i64 
    push           0          i64 
    jumplt         #11622     i64 
#11623: 
    push           &pc_lex.lexhashtable 
    push           pc_lex.printhashtable.i i64 
    pushptroff                u64 8 0
    pop            pc_lex.printhashtable.r u64 
    push           pc_lex.printhashtable.r u64 
    jumpfalse      #11624     u64 
    push           pc_lex.printhashtable.r u64 
    pushptr                   u64 
    jumpfalse      #11624     u64 
    push           &pc_lex.printhashtable.count 
    push           1          i64 
    addto                     i64 
#11624: 
#11625: 
    forup          #11623     i64 1
    opnd           pc_lex.printhashtable.i 
    opnd           pc_lex.printhashtable.av_1 
#11622: 
    setargs                   1 0
    push           pc_lex.printhashtable.devx u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           pc_lex.printhashtable.count i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           " items in table" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           262144     i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#11626: 
    retproc                   
End


Proc pc_lex.lookuplex: i64
    param          pc_lex.lookuplex.name u64 
    param          pc_lex.lookuplex.length i64 
    local          pc_lex.lookuplex.e u64 
    local          pc_lex.lookuplex.j i64 
    local          pc_lex.lookuplex.wrapped i64 
    local          pc_lex.lookuplex.insource i64 
    local          pc_lex.lookuplex.firstj i64 
    procentry                 
    push           pc_lex.lookuplex.length i64 
    pop            pc_lex.lookuplex.insource i64 
    push           pc_lex.lookuplex.length i64 
    push           0          i64 
    jumpne         #11628     i64 
    setargs                   1 0
    push           pc_lex.lookuplex.name u64 
    callfn         &strlen    i64 
    pop            pc_lex.lookuplex.length i64 
#11628: 
    push           pc_lex.lxhashvalue i64 
    push           262143     i64 
    iand                      i64 
    store          pc_lex.lookuplex.j i64 
    pop            pc_lex.lookuplex.firstj i64 
    push           0          i64 
    pop            pc_lex.lookuplex.wrapped i64 
#11629: 
    push           &pc_lex.lexhashtable 
    push           pc_lex.lookuplex.j i64 
    pushptroff                u64 8 0
    pop            pc_lex.lxsymptr u64 
    push           pc_lex.lxsymptr u64 
    push           0          u64 
    jumpne         #11630     u64 
    jump           #11631     
#11630: 
    push           pc_lex.lxsymptr u64 
    push           31         
    pushptroff                u8 1 0
    push           pc_lex.lookuplex.length i64 
    jumpne         #11632     i64 
    setargs                   3 0
    push           pc_lex.lookuplex.length u64 
    push           pc_lex.lookuplex.name u64 
    push           pc_lex.lxsymptr u64 
    pushptr                   u64 
    callfn         &memcmp    i32 
    push           0          i64 
    jumpne         #11632     i64 
    push           1          i64 
    setret                    i64 
    jump           #11633     
#11632: 
    push           &pc_lex.lookuplex.j 
    incrload                  i64 1
    push           262144     i64 
    jumplt         #11634     i64 
    push           pc_lex.lookuplex.wrapped i64 
    jumpfalse      #11635     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "???????HASHTABLE FULL" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           262144     i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           pc_lex.lxlineno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#11635: 
    push           1          i64 
    pop            pc_lex.lookuplex.wrapped i64 
    push           1          i64 
    pop            pc_lex.lookuplex.j i64 
#11634: 
    jump           #11629     
#11631: 
    push           pc_lex.lookuplex.insource i64 
    jumpfalse      #11636     i64 
    setargs                   2 0
    push           pc_lex.lookuplex.length i64 
    push           pc_lex.lookuplex.name u64 
    callfn         &mlibp.pcm_copyheapstringn u64 
    pop            pc_lex.lookuplex.name u64 
#11636: 
    push           &pc_lex.nsymbols 
    incrload                  i64 1
    push           229376     i64 
    jumple         #11637     i64 
    setargs                   1 0
    push           "Hashtable getting full" u64 
    callproc       &pc_lex.lxerror 
#11637: 
    push           pc_lex.lxsymptr u64 
    push           0          u64 
    jumpne         #11638     u64 
    setargs                   1 0
    push           64         i64 
    callfn         &mlibp.pcm_allocz u64 
    pop            pc_lex.lxsymptr u64 
    push           pc_lex.lxsymptr u64 
    push           &pc_lex.lexhashtable 
    push           pc_lex.lookuplex.j i64 
    popptroff                 u64 8 0
#11638: 
    push           pc_lex.lookuplex.name u64 
    push           pc_lex.lxsymptr u64 
    push           0          
    popptroff                 u64 1 0
    push           pc_lex.lookuplex.length i64 
    push           pc_lex.lxsymptr u64 
    push           31         
    popptroff                 u8 1 0
    push           19         i64 
    push           pc_lex.lxsymptr u64 
    push           24         
    popptroff                 u8 1 0
    push           0          i64 
    push           pc_lex.lxsymptr u64 
    push           25         
    popptroff                 u8 1 0
    push           0          i64 
    setret                    i64 
    jump           #11633     
#11633: 
    retfn                     i64 
End


Proc pc_lex.startlex:
    param          pc_lex.startlex.source u64 
    procentry                 
    setargs                   0 0
    callproc       &pc_lex.initlex 
    push           pc_lex.startlex.source u64 
    store          pc_lex.lxsptr u64 
    pop            pc_lex.lxstart u64 
    push           1          i64 
    pop            pc_lex.lxlineno i64 
    push           1          i64 
    pop            pc_lex.lxsymbol i64 
#11640: 
    retproc                   
End


Proc pc_lex.addnamestr: u64
    param          pc_lex.addnamestr.name u64 
    procentry                 
    setargs                   1 0
    push           pc_lex.addnamestr.name u64 
    callfn         &pc_lex.gethashvalue i64 
    pop            pc_lex.lxhashvalue i64 
    setargs                   2 0
    push           0          i64 
    setargs                   1 0
    push           pc_lex.addnamestr.name u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    callproc       &pc_lex.lookuplex 
    push           pc_lex.lxsymptr u64 
    setret                    u64 
    jump           #11642     
#11642: 
    retfn                     u64 
End


Proc pc_lex.lxerror:
    param          pc_lex.lxerror.m u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\c\n\c\n Lexical Error\n*** # *** on line #" u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           pc_lex.lxerror.m u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_lex.lxlineno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#11644: 
    retproc                   
End


Proc pc_lex.gethashvalue: i64
    param          pc_lex.gethashvalue.s u64 
    local          pc_lex.gethashvalue.c i64 
    local          pc_lex.gethashvalue.hsum i64 
    procentry                 
    push           pc_lex.gethashvalue.s u64 
    pushptr                   u8 
    push           0          i64 
    jumpne         #11646     i64 
    push           0          i64 
    setret                    i64 
    jump           #11647     
#11646: 
    push           &pc_lex.gethashvalue.s 
    loadincr                  u64 1
    pushptr                   u8 
    pop            pc_lex.gethashvalue.hsum i64 
#11648: 
    push           &pc_lex.gethashvalue.s 
    loadincr                  u64 1
    pushptr                   u8 
    pop            pc_lex.gethashvalue.c i64 
    push           pc_lex.gethashvalue.c i64 
    push           0          i64 
    jumpne         #11649     i64 
    jump           #11650     
#11649: 
    push           pc_lex.gethashvalue.hsum i64 
    push           4          i64 
    shl                       i64 
    push           pc_lex.gethashvalue.hsum i64 
    sub                       i64 
    push           pc_lex.gethashvalue.c i64 
    add                       i64 
    pop            pc_lex.gethashvalue.hsum i64 
    jump           #11648     
#11650: 
    push           pc_lex.gethashvalue.hsum i64 
    push           5          i64 
    shl                       i64 
    push           pc_lex.gethashvalue.hsum i64 
    sub                       i64 
    setret                    i64 
    jump           #11647     
#11647: 
    retfn                     i64 
End


Proc pc_lex.readstring:
    local          pc_lex.readstring.dest u64 
    local          pc_lex.readstring.c i64 
    local          pc_lex.readstring.d i64 
    local          pc_lex.readstring.str block:8 
    local          pc_lex.readstring.av_1 i64 
    procentry                 
    push           17         i64 
    pop            pc_lex.lxsymbol i64 
    push           pc_lex.lxsptr u64 
    pop            pc_lex.lxsvalue u64 
    push           pc_lex.lxsptr u64 
    pop            pc_lex.readstring.dest u64 
#11652: 
    push           &pc_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          pc_lex.readstring.c i64 
    switch         #11653     0 92
    opnd           #11654     
#11653: 
    switchlabel    #11655     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11655     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11655     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11656     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11654     
    switchlabel    #11657     
    endswitch                 
#11657: 
    push           pc_lex.lxsptr u64 
    pushptr                   u8 
    pop            pc_lex.readstring.c i64 
    push           pc_lex.readstring.c i64 
    push           65         i64 
    jumplt         #11658     i64 
    push           pc_lex.readstring.c i64 
    push           90         i64 
    jumpgt         #11658     i64 
    push           &pc_lex.readstring.c 
    push           32         i64 
    addto                     i64 
#11658: 
    push           &pc_lex.lxsptr 
    incr                      u64 1
    push           pc_lex.readstring.c i64 
    switch         #11659     34 122
    opnd           #11660     
#11659: 
    switchlabel    #11661     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11662     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11663     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11661     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11664     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11665     
    switchlabel    #11666     
    switchlabel    #11667     
    switchlabel    #11660     
    switchlabel    #11668     
    switchlabel    #11669     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11670     
    switchlabel    #11660     
    switchlabel    #11670     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11660     
    switchlabel    #11667     
    switchlabel    #11671     
    switchlabel    #11672     
    switchlabel    #11660     
    switchlabel    #11673     
    switchlabel    #11674     
    switchlabel    #11675     
    switchlabel    #11676     
    switchlabel    #11663     
    endswitch                 
#11665: 
    push           7          i64 
    pop            pc_lex.readstring.c i64 
    jump           #11677     
#11666: 
    push           8          i64 
    pop            pc_lex.readstring.c i64 
    jump           #11677     
#11667: 
    push           13         i64 
    pop            pc_lex.readstring.c i64 
    jump           #11677     
#11668: 
    push           26         i64 
    pop            pc_lex.readstring.c i64 
    jump           #11677     
#11669: 
    push           12         i64 
    pop            pc_lex.readstring.c i64 
    jump           #11677     
#11670: 
    push           10         i64 
    pop            pc_lex.readstring.c i64 
    jump           #11677     
#11671: 
    push           27         i64 
    pop            pc_lex.readstring.c i64 
    jump           #11677     
#11672: 
    push           9          i64 
    pop            pc_lex.readstring.c i64 
    jump           #11677     
#11673: 
    push           11         i64 
    pop            pc_lex.readstring.c i64 
    jump           #11677     
#11674: 
    push           13         u64 
    push           &pc_lex.readstring.dest 
    loadincr                  u64 1
    popptr                    u8 
    push           10         i64 
    pop            pc_lex.readstring.c i64 
    jump           #11677     
#11675: 
    push           0          i64 
    pop            pc_lex.readstring.c i64 
#11678: 
    push           2          i64 
    pop            pc_lex.readstring.av_1 i64 
#11679: 
    push           &pc_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          pc_lex.readstring.d i64 
    push           65         i64 
    casejumpeq     #11680     i64 0
    push           66         i64 
    casejumpeq     #11680     i64 0
    push           67         i64 
    casejumpeq     #11680     i64 0
    push           68         i64 
    casejumpeq     #11680     i64 0
    push           69         i64 
    casejumpeq     #11680     i64 0
    push           70         i64 
    casejumpeq     #11680     i64 0
    push           97         i64 
    casejumpeq     #11681     i64 0
    push           98         i64 
    casejumpeq     #11681     i64 0
    push           99         i64 
    casejumpeq     #11681     i64 0
    push           100        i64 
    casejumpeq     #11681     i64 0
    push           101        i64 
    casejumpeq     #11681     i64 0
    push           102        i64 
    casejumpeq     #11681     i64 0
    push           48         i64 
    casejumpeq     #11682     i64 0
    push           49         i64 
    casejumpeq     #11682     i64 0
    push           50         i64 
    casejumpeq     #11682     i64 0
    push           51         i64 
    casejumpeq     #11682     i64 0
    push           52         i64 
    casejumpeq     #11682     i64 0
    push           53         i64 
    casejumpeq     #11682     i64 0
    push           54         i64 
    casejumpeq     #11682     i64 0
    push           55         i64 
    casejumpeq     #11682     i64 0
    push           56         i64 
    casejumpeq     #11682     i64 0
    push           57         i64 
    casejumpeq     #11682     i64 0
    popstack                  i64 
    jump           #11683     
#11680: 
    push           pc_lex.readstring.c i64 
    push           16         i64 
    mul                       i64 
    push           pc_lex.readstring.d i64 
    add                       i64 
    push           65         i64 
    sub                       i64 
    push           10         i64 
    add                       i64 
    pop            pc_lex.readstring.c i64 
    jump           #11684     
#11681: 
    push           pc_lex.readstring.c i64 
    push           16         i64 
    mul                       i64 
    push           pc_lex.readstring.d i64 
    add                       i64 
    push           97         i64 
    sub                       i64 
    push           10         i64 
    add                       i64 
    pop            pc_lex.readstring.c i64 
    jump           #11684     
#11682: 
    push           pc_lex.readstring.c i64 
    push           16         i64 
    mul                       i64 
    push           pc_lex.readstring.d i64 
    add                       i64 
    push           48         i64 
    sub                       i64 
    pop            pc_lex.readstring.c i64 
    jump           #11684     
#11683: 
    setargs                   1 0
    push           "Bad \\x code" u64 
    callproc       &pc_lex.lxerror 
#11684: 
#11685: 
    to             #11679     
    opnd           pc_lex.readstring.av_1 
#11686: 
    jump           #11677     
#11676: 
    push           16         i64 
    pop            pc_lex.readstring.c i64 
    jump           #11677     
#11663: 
    push           0          i64 
    pop            pc_lex.readstring.c i64 
    jump           #11677     
#11661: 
    push           34         i64 
    pop            pc_lex.readstring.c i64 
    jump           #11677     
#11664: 
    push           92         i64 
    pop            pc_lex.readstring.c i64 
    jump           #11677     
#11662: 
    push           39         i64 
    pop            pc_lex.readstring.c i64 
    jump           #11677     
#11660: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "<"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   2 0
    push           0          i64 
    push           pc_lex.readstring.c i64 
    truncate                  u64 u8 
    callproc       &msysp.m$print_c8 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           ">"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Unknown string escape" u64 
    callproc       &pc_lex.lxerror 
#11677: 
    jump           #11687     
#11656: 
    push           pc_lex.lxsptr u64 
    pushptr                   u8 
    push           pc_lex.readstring.c i64 
    jumpne         #11688     i64 
    push           &pc_lex.lxsptr 
    incr                      u64 1
    jump           #11689     
#11688: 
    jump           #11690     
#11689: 
    jump           #11687     
#11655: 
    setargs                   1 0
    push           "String not terminated" u64 
    callproc       &pc_lex.lxerror 
    jump           #11687     
#11654: 
#11687: 
    push           pc_lex.readstring.c u64 
    push           &pc_lex.readstring.dest 
    loadincr                  u64 1
    popptr                    u8 
    jump           #11652     
#11690: 
    push           pc_lex.readstring.dest u64 
    push           pc_lex.lxsvalue u64 
    subref                    i64 1
    pop            pc_lex.lxlength i64 
    push           0          u64 
    push           pc_lex.lxsvalue u64 
    push           pc_lex.lxlength i64 
    popptroff                 u8 1 0
#11691: 
    retproc                   
End


Proc pc_lex.stringtonumber128:
    param          pc_lex.stringtonumber128.s u64 
    param          pc_lex.stringtonumber128.length i64 
    param          pc_lex.stringtonumber128.base i64 
    local          pc_lex.stringtonumber128.aa u128 
    local          pc_lex.stringtonumber128.c i64 
    local          pc_lex.stringtonumber128.d i64 
    local          pc_lex.stringtonumber128.av_1 i64 
    procentry                 
    push           0          i64 
    widenw                    u128 i64 
    pop            pc_lex.stringtonumber128.aa u128 
#11693: 
    push           pc_lex.stringtonumber128.length i64 
    pop            pc_lex.stringtonumber128.av_1 i64 
    push           pc_lex.stringtonumber128.av_1 i64 
    push           0          i64 
    jumple         #11694     i64 
#11695: 
    push           pc_lex.stringtonumber128.aa u128 
    push           pc_lex.stringtonumber128.base i64 
    widenw                    u128 i64 
    mul                       u128 
    pop            pc_lex.stringtonumber128.aa u128 
    push           &pc_lex.stringtonumber128.s 
    loadincr                  u64 1
    pushptr                   u8 
    pop            pc_lex.stringtonumber128.c i64 
    push           pc_lex.stringtonumber128.c i64 
    push           97         i64 
    jumplt         #11696     i64 
    push           pc_lex.stringtonumber128.c i64 
    push           97         i64 
    sub                       i64 
    push           10         i64 
    add                       i64 
    pop            pc_lex.stringtonumber128.d i64 
    jump           #11697     
#11696: 
    push           pc_lex.stringtonumber128.c i64 
    push           65         i64 
    jumplt         #11698     i64 
    push           pc_lex.stringtonumber128.c i64 
    push           65         i64 
    sub                       i64 
    push           10         i64 
    add                       i64 
    pop            pc_lex.stringtonumber128.d i64 
    jump           #11697     
#11698: 
    push           pc_lex.stringtonumber128.c i64 
    push           48         i64 
    sub                       i64 
    pop            pc_lex.stringtonumber128.d i64 
#11697: 
    push           pc_lex.stringtonumber128.aa u128 
    push           pc_lex.stringtonumber128.d i64 
    widenw                    u128 i64 
    add                       u128 
    pop            pc_lex.stringtonumber128.aa u128 
#11699: 
    to             #11695     
    opnd           pc_lex.stringtonumber128.av_1 
#11694: 
    push           pc_lex.stringtonumber128.aa u128 
    pop            pc_lex.lxuvalue128 u128 
    push           18         i64 
    pop            pc_lex.lxsymbol i64 
#11700: 
    retproc                   
End


Proc pc_parse.parse: i64
    param          pc_parse.parse.source u64 
    local          pc_parse.parse.d u64 
    local          pc_parse.parse.labno i64 
    procentry                 
    setargs                   1 0
    push           pc_parse.parse.source u64 
    callproc       &pc_lex.startlex 
    push           1          i64 
    pop            pc_lex.lxsymbol i64 
#11702: 
    setargs                   0 0
    callproc       &pc_lex.lex 
    push           pc_lex.lxsymbol i64 
    push           20         i64 
    casejumpeq     #11703     i64 0
    push           21         i64 
    casejumpeq     #11703     i64 0
    push           14         i64 
    casejumpeq     #11704     i64 0
    push           19         i64 
    casejumpeq     #11705     i64 0
    push           15         i64 
    casejumpeq     #11706     i64 0
    push           12         i64 
    casejumpeq     #11707     i64 0
    push           13         i64 
    casejumpeq     #11708     i64 0
    popstack                  i64 
    jump           #11709     
#11703: 
    push           pc_lex.lxsubcode i64 
    push           11         i64 
    jumpne         #11710     i64 
    jump           #11711     
#11710: 
    setargs                   0 0
    callproc       &pc_parse.readinstr 
    jump           #11712     
#11704: 
    setargs                   0 0
    callproc       &pc_parse.dolabel 
    jump           #11712     
#11705: 
    setargs                   1 0
    push           "\"NAME:\" NOT SUPPORTED" u64 
    callproc       &pc_parse.serror 
    jump           #11712     
#11706: 
    jump           #11702     
    jump           #11712     
#11707: 
    jump           #11702     
    jump           #11712     
#11708: 
    jump           #11711     
    jump           #11712     
#11709: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "SYMBOLNAMES[LXSYMBOL]=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pc_lex.symbolnames 
    push           pc_lex.lxsymbol i64 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Bad input" u64 
    callproc       &pc_parse.serror 
#11712: 
    setargs                   1 0
    push           12         i64 
    callproc       &pc_parse.checksymbol 
    jump           #11702     
#11711: 
    push           pc_parse.insideproc i64 
    jumpfalse      #11713     i64 
    setargs                   1 0
    push           "End missing" u64 
    callproc       &pc_parse.serror 
#11713: 
    push           1          i64 
    setret                    i64 
    jump           #11714     
#11714: 
    retfn                     i64 
End


Proc pc_parse.checksymbol:
    param          pc_parse.checksymbol.symbol i64 
    procentry                 
    push           pc_lex.lxsymbol i64 
    push           pc_parse.checksymbol.symbol i64 
    jumpeq         #11716     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pc_lex.symbolnames 
    push           pc_parse.checksymbol.symbol i64 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "expected, not" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pc_lex.symbolnames 
    push           pc_lex.lxsymbol i64 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           ", on line:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_lex.lxlineno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#11716: 
#11717: 
    retproc                   
End


Proc pc_parse.dolabel:
    procentry                 
    push           pc_lex.lxvalue i64 
    push           1          i64 
    push           100000     i64 
    jumpinrange    #11719     i64 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_lex.lxvalue i64 
    callfn         &msysp.strint u64 
    push           "1:Label out of range:" u64 
    callproc       &pc_parse.serror_s 
#11719: 
    setargs                   2 0
    push           pc_lex.lxlineno i64 
    push           pc_lex.lxvalue i64 
    callproc       &pc_libpcl.pdefinelabel 
    setargs                   0 0
    callproc       &pc_lex.lex 
    setargs                   1 0
    push           3          i64 
    callproc       &pc_parse.checksymbol 
    setargs                   0 0
    callproc       &pc_lex.lex 
#11720: 
    retproc                   
End


Proc pc_parse.readmode:
    param          pc_parse.readmode.p u64 
    procentry                 
    push           pc_parse.readmode.p u64 
    push           3          
    pushptroff                u8 1 0
    push           0          i64 
    jumpeq         #11722     i64 
    push           pc_lex.lxsubcode i64 
    push           pc_parse.readmode.p u64 
    push           16         
    popptroff                 i32 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
    jump           #11723     
#11722: 
    push           pc_lex.lxsubcode i64 
    push           pc_parse.readmode.p u64 
    push           3          
    popptroff                 u8 1 0
    push           &pc_tables.psize 
    push           pc_lex.lxsubcode i64 
    pushptroff                u8 1 0
    push           pc_parse.readmode.p u64 
    push           4          
    popptroff                 i32 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
    push           pc_parse.readmode.p u64 
    push           3          
    pushptroff                u8 1 0
    push           13         i64 
    jumpne         #11724     i64 
    setargs                   1 0
    push           3          i64 
    callproc       &pc_parse.checksymbol 
    setargs                   0 0
    callproc       &pc_lex.lex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_parse.checksymbol 
    push           pc_lex.lxvalue i64 
    push           pc_parse.readmode.p u64 
    push           4          
    popptroff                 i32 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
#11724: 
#11723: 
    retproc                   
End


Proc pc_parse.readinstr:
    local          pc_parse.readinstr.opcode i64 
    local          pc_parse.readinstr.mode i64 
    local          pc_parse.readinstr.size i64 
    local          pc_parse.readinstr.p u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_parse.readinstr.p u64 
    push           pc_lex.lxlineno i64 
    push           pc_parse.readinstr.p u64 
    push           24         
    popptroff                 u32 1 0
    push           0          i64 
    pop            pc_parse.readinstr.mode i64 
    push           0          i64 
    pop            pc_parse.readinstr.size i64 
    push           pc_lex.lxsymbol i64 
    push           21         i64 
    jumpne         #11726     i64 
    setargs                   1 0
    push           pc_parse.readinstr.p u64 
    callproc       &pc_parse.readmode 
    setargs                   1 0
    push           20         i64 
    callproc       &pc_parse.checksymbol 
#11726: 
    push           pc_lex.lxsubcode i64 
    store          pc_parse.readinstr.opcode i64 
    push           pc_parse.readinstr.p u64 
    push           1          
    popptroff                 u8 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
    push           pc_lex.lxsymbol i64 
    push           21         i64 
    jumpne         #11727     i64 
    setargs                   1 0
    push           pc_parse.readinstr.p u64 
    callproc       &pc_parse.readmode 
#11727: 
    push           &pc_tables.pclhasopnd 
    push           pc_parse.readinstr.opcode i64 
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #11728     i64 0
    push           2          i64 
    casejumpeq     #11729     i64 0
    push           3          i64 
    casejumpeq     #11730     i64 0
    push           4          i64 
    casejumpeq     #11731     i64 0
    popstack                  i64 
    jump           #11732     
#11728: 
    push           pc_lex.lxsymbol i64 
    push           15         i64 
    casejumpeq     #11733     i64 0
    push           16         i64 
    casejumpeq     #11734     i64 0
    push           17         i64 
    casejumpeq     #11735     i64 0
    push           14         i64 
    casejumpeq     #11736     i64 0
    push           19         i64 
    casejumpeq     #11737     i64 0
    push           18         i64 
    casejumpeq     #11738     i64 0
    push           10         i64 
    casejumpeq     #11739     i64 0
    popstack                  i64 
    jump           #11740     
#11733: 
    push           pc_lex.lxvalue i64 
    push           pc_parse.readinstr.p u64 
    push           8          
    popptroff                 i64 1 0
    push           4          i64 
    push           pc_parse.readinstr.p u64 
    push           0          
    popptroff                 u8 1 0
    push           9          i64 
    pop            pc_parse.readinstr.mode i64 
    setargs                   0 0
    callproc       &pc_lex.lex 
    jump           #11741     
#11734: 
    push           pc_lex.lxxvalue r64 
    push           pc_parse.readinstr.p u64 
    push           8          
    popptroff                 r64 1 0
    push           5          i64 
    push           pc_parse.readinstr.p u64 
    push           0          
    popptroff                 u8 1 0
    push           4          i64 
    pop            pc_parse.readinstr.mode i64 
    setargs                   0 0
    callproc       &pc_lex.lex 
    jump           #11741     
#11735: 
    setargs                   1 0
    push           pc_lex.lxsvalue u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           pc_parse.readinstr.p u64 
    push           8          
    popptroff                 u64 1 0
    push           8          i64 
    push           pc_parse.readinstr.p u64 
    push           0          
    popptroff                 u8 1 0
    push           4          i64 
    pop            pc_parse.readinstr.mode i64 
    setargs                   0 0
    callproc       &pc_lex.lex 
    jump           #11741     
#11736: 
    push           pc_lex.lxvalue i64 
    push           1          i64 
    push           100000     i64 
    jumpinrange    #11742     i64 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_lex.lxvalue i64 
    callfn         &msysp.strint u64 
    push           "2:Label out of range:" u64 
    callproc       &pc_parse.serror_s 
#11742: 
    push           pc_lex.lxvalue i64 
    push           pc_parse.readinstr.p u64 
    push           8          
    popptroff                 i64 1 0
    push           3          i64 
    push           pc_parse.readinstr.p u64 
    push           0          
    popptroff                 u8 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
    jump           #11741     
#11737: 
    push           pc_lex.lxsymptr u64 
    push           pc_parse.readinstr.p u64 
    push           8          
    popptroff                 u64 1 0
    push           1          i64 
    push           pc_parse.readinstr.p u64 
    push           0          
    popptroff                 u8 1 0
    push           pc_lex.lxtruename u8 
    push           pc_parse.readinstr.p u64 
    push           8          
    pushptroff                u64 1 0
    push           46         
    addrefoff                 u64 1 0
    push           8          i64 
    popdotindex               u16 
    setargs                   0 0
    callproc       &pc_lex.lex 
    jump           #11741     
#11738: 
    push           pc_lex.lxuvalue128 i128 
    push           pc_parse.readinstr.p u64 
    push           8          
    popptroff                 i128 1 0
    push           6          i64 
    push           pc_parse.readinstr.p u64 
    push           0          
    popptroff                 u8 1 0
    push           10         i64 
    pop            pc_parse.readinstr.mode i64 
    setargs                   0 0
    callproc       &pc_lex.lex 
    jump           #11741     
#11739: 
    setargs                   0 0
    callproc       &pc_lex.lex 
    setargs                   1 0
    push           19         i64 
    callproc       &pc_parse.checksymbol 
    push           pc_lex.lxsymptr u64 
    push           pc_parse.readinstr.p u64 
    push           8          
    popptroff                 u64 1 0
    push           pc_lex.lxtruename u8 
    push           pc_parse.readinstr.p u64 
    push           8          
    pushptroff                u64 1 0
    push           46         
    addrefoff                 u64 1 0
    push           8          i64 
    popdotindex               u16 
    push           2          i64 
    push           pc_parse.readinstr.p u64 
    push           0          
    popptroff                 u8 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
    push           pc_lex.lxsymbol i64 
    push           9          i64 
    jumpne         #11743     i64 
    push           1          u64 
    push           pc_parse.readinstr.p u64 
    push           8          
    pushptroff                u64 1 0
    push           46         
    addrefoff                 u64 1 0
    push           1          i64 
    popdotindex               u16 
    setargs                   0 0
    callproc       &pc_lex.lex 
#11743: 
    jump           #11741     
#11740: 
    setargs                   1 0
    push           "Missing or Bad Operand" u64 
    callproc       &pc_parse.serror 
#11741: 
    jump           #11744     
#11729: 
    setargs                   1 0
    push           19         i64 
    callproc       &pc_parse.checksymbol 
    push           pc_lex.lxsymptr u64 
    push           pc_parse.readinstr.p u64 
    push           8          
    popptroff                 u64 1 0
    push           pc_parse.readinstr.opcode i64 
    push           17         i64 
    jumpne         #11745     i64 
    push           8          i64 
    push           pc_parse.readinstr.p u64 
    push           1          
    popptroff                 u8 1 0
    setargs                   1 0
    push           pc_parse.readinstr.p u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &pc_libpcl.definertsproc 
#11745: 
    push           1          i64 
    push           pc_parse.readinstr.p u64 
    push           0          
    popptroff                 u8 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
    push           pc_lex.lxsymbol i64 
    push           3          i64 
    casejumpeq     #11746     i64 0
    push           4          i64 
    casejumpeq     #11747     i64 0
    popstack                  i64 
    jump           #11748     
#11746: 
    jump           #11749     
#11747: 
    push           1          u64 
    push           pc_parse.readinstr.p u64 
    push           8          
    pushptroff                u64 1 0
    push           46         
    addrefoff                 u64 1 0
    push           3          i64 
    popdotindex               u16 
    push           1          u64 
    push           pc_parse.readinstr.p u64 
    push           2          
    addrefoff                 u64 1 0
    push           0          i64 
    popdotindex               u8 
    jump           #11749     
#11748: 
    setargs                   1 0
    push           "Colon expected" u64 
    callproc       &pc_parse.serror 
#11749: 
    setargs                   0 0
    callproc       &pc_lex.lex 
    jump           #11744     
#11730: 
    setargs                   1 0
    push           19         i64 
    callproc       &pc_parse.checksymbol 
    push           pc_lex.lxsymptr u64 
    push           pc_parse.readinstr.p u64 
    push           8          
    popptroff                 u64 1 0
    push           1          i64 
    push           pc_parse.readinstr.p u64 
    push           0          
    popptroff                 u8 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
    push           pc_lex.lxsymbol i64 
    push           3          i64 
    jumpne         #11750     i64 
    setargs                   1 0
    push           ": not used for locals" u64 
    callproc       &pc_parse.serror 
#11750: 
    jump           #11744     
#11731: 
    setargs                   1 0
    push           19         i64 
    callproc       &pc_parse.checksymbol 
    push           pc_lex.lxsymptr u64 
    push           pc_parse.readinstr.p u64 
    push           8          
    popptroff                 u64 1 0
    push           1          i64 
    push           pc_parse.readinstr.p u64 
    push           0          
    popptroff                 u8 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
    jump           #11744     
#11732: 
#11744: 
    push           pc_lex.lxsymbol i64 
    push           21         i64 
    jumpne         #11751     i64 
    setargs                   1 0
    push           pc_parse.readinstr.p u64 
    callproc       &pc_parse.readmode 
#11751: 
    push           pc_parse.readinstr.p u64 
    push           3          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #11752     i64 
    push           pc_parse.readinstr.mode i64 
    push           0          i64 
    jumpeq         #11753     i64 
    push           pc_parse.readinstr.mode i64 
    push           pc_parse.readinstr.p u64 
    push           3          
    popptroff                 u8 1 0
    push           pc_parse.readinstr.size i64 
    push           pc_parse.readinstr.p u64 
    push           4          
    popptroff                 i32 1 0
#11753: 
#11752: 
    push           &pc_tables.pclextra 
    push           pc_parse.readinstr.opcode i64 
    pushptroff                u8 1 0
    jumpfalse      #11754     i64 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_parse.checksymbol 
    push           pc_lex.lxvalue i64 
    push           pc_parse.readinstr.p u64 
    push           16         
    popptroff                 i32 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
    push           &pc_tables.pclextra 
    push           pc_parse.readinstr.opcode i64 
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #11755     i64 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_parse.checksymbol 
    push           pc_lex.lxvalue i64 
    push           pc_parse.readinstr.p u64 
    push           20         
    popptroff                 i32 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
#11755: 
#11754: 
#11756: 
    retproc                   
End


Proc pc_parse.serror:
    param          pc_parse.serror.mess u64 
    procentry                 
    setargs                   2 0
    push           0          u64 
    push           pc_parse.serror.mess u64 
    callproc       &pc_parse.serror_s 
#11758: 
    retproc                   
End


Proc pc_parse.serror_s:
    param          pc_parse.serror_s.mess u64 
    param          pc_parse.serror_s.param u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Syntax error:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_parse.serror_s.mess u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           pc_parse.serror_s.param u64 
    jumpfalse      #11760     u64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           ":"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_parse.serror_s.param u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#11760: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           " on line:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_lex.lxlineno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#11761: 
    retproc                   
End


Proc pc_parse.pcl_readpclfile:: i64
    param          pc_parse.pcl_readpclfile.filename u64 
    param          pc_parse.pcl_readpclfile.rtsfile u64 
    local          pc_parse.pcl_readpclfile.source u64 
    procentry                 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_libpcl.pcl_start 
    setargs                   1 0
    push           pc_parse.pcl_readpclfile.filename u64 
    callfn         &pc_parse.parse_readsource i64 
    jumptrue       #11763     i64 
    push           0          i64 
    setret                    i64 
    jump           #11764     
#11763: 
    push           pc_parse.pcl_readpclfile.rtsfile u64 
    jumpfalse      #11765     u64 
    push           pc_libpcl.maxuserlabel i64 
    pop            pc_libpcl.labelnooffset i64 
    setargs                   0 0
    callfn         &pc_parse.parse_readrts i64 
    jumptrue       #11766     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "No RTS found" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           0          i64 
    setret                    i64 
    jump           #11764     
#11766: 
#11765: 
    setargs                   2 0
    push           0          u64 
    push           11         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_libpcl.pcl_end 
    push           1          i64 
    setret                    i64 
    jump           #11764     
#11764: 
    retfn                     i64 
End


Proc pc_parse.parse_readsource: i64
    param          pc_parse.parse_readsource.filename u64 
    local          pc_parse.parse_readsource.source u64 
    procentry                 
    setargs                   1 0
    push           pc_parse.parse_readsource.filename u64 
    callfn         &mlibp.readfile u64 
    pop            pc_parse.parse_readsource.source u64 
    push           pc_parse.parse_readsource.source u64 
    push           0          u64 
    jumpne         #11768     u64 
    push           "Can't load file" u64 
    pop            pc_libpcl.errormess u64 
    push           0          i64 
    setret                    i64 
    jump           #11769     
#11768: 
    setargs                   1 0
    push           pc_parse.parse_readsource.source u64 
    callfn         &pc_parse.parse i64 
    jumptrue       #11770     i64 
    push           "Couldn't parse" u64 
    pop            pc_libpcl.errormess u64 
    push           0          i64 
    setret                    i64 
    jump           #11769     
#11770: 
    push           1          i64 
    setret                    i64 
    jump           #11769     
#11769: 
    retfn                     i64 
End


Proc pc_parse.parse_readrts: i64
    procentry                 
    setargs                   1 0
    push           pc_parse.parse_readrts.source u64 
    callfn         &pc_parse.parse i64 
    jumptrue       #11772     i64 
    push           "Couldn't parse RTS" u64 
    pop            pc_libpcl.errormess u64 
    push           0          i64 
    setret                    i64 
    jump           #11773     
#11772: 
    push           1          i64 
    setret                    i64 
    jump           #11773     
#11773: 
    retfn                     i64 
End


Proc mm_start.start_common:
    param          mm_start.start_common.os i64 
    param          mm_start.start_common.target i64 
    local          mm_start.start_common.p u64 
    local          mm_start.start_common.q u64 
    local          mm_start.start_common.r u64 
    local          mm_start.start_common.m i64 
    local          mm_start.start_common.fileno i64 
    local          mm_start.start_common.ntokens i64 
    local          mm_start.start_common.t i64 
    procentry                 
    setargs                   0 0
    callfn         &mwindowsp.os_clock i64 
    pop            mm_start.startclock i64 
    setargs                   2 0
    push           mm_start.start_common.target i64 
    push           mm_start.start_common.os i64 
    callproc       &mm_start.initdata 
    setargs                   0 0
    callproc       &mm_start.getinputoptions 
    push           mm_decls.passlevel i64 
    push           2          i64 
    jumpge         #11775     i64 
    jump           #11776     
#11775: 
    push           mm_decls.fverbose i64 
    push           1          i64 
    jumplt         #11777     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Compiling # to #" u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   2 0
    push           "14jlp-"   u64 
    push           &mm_decls.inputfiles 
    push           1          i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str 
    setargs                   1 0
    setargs                   2 0
    push           mm_start.outext u64 
    push           mm_decls.outfile u64 
    callfn         &mlibp.changeext u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_space 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#11777: 
    setargs                   0 0
    callproc       &mm_start.initsearchdirs 
    setargs                   1 0
    push           "mx.log"   u64 
    callproc       &remove    
    setargs                   0 0
    callproc       &mm_start.starttimer 
    setargs                   0 0
    callproc       &mm_start.do_loadmodules 
    setargs                   1 0
    push           "LOAD"     u64 
    callproc       &mm_start.stoptimer 
    setargs                   0 0
    callproc       &mm_start.do_parse 
    setargs                   1 0
    push           "PARSE"    u64 
    callproc       &mm_start.stoptimer 
    setargs                   0 0
    callproc       &mm_start.do_name 
    setargs                   1 0
    push           "NAME"     u64 
    callproc       &mm_start.stoptimer 
    setargs                   0 0
    callproc       &mm_start.do_type 
    setargs                   0 0
    callproc       &mm_start.do_writema 
    setargs                   1 0
    push           mm_decls.outfile u64 
    callproc       &mm_start.do_writeexports 
    setargs                   1 0
    push           "TYPE"     u64 
    callproc       &mm_start.stoptimer 
    setargs                   1 0
    push           mm_decls.stprogram u64 
    push           16         
    pushptroff                u64 1 0
    callproc       &mm_start.fixstlist 
    setargs                   0 0
    callproc       &mm_start.do_genpcl 
    push           mm_decls.passlevel i64 
    push           12         i64 
    jumpne         #11778     i64 
    setargs                   0 0
    callproc       &mm_start.do_runprog 
#11778: 
    push           mm_decls.fverbose i64 
    push           2          i64 
    jumplt         #11779     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Finished." u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#11779: 
    setargs                   0 0
    callproc       &mm_start.showlogfile 
    push           mm_decls.fshowtiming u8 
    jumpfalse      #11780     i64 
    setargs                   0 0
    callfn         &mwindowsp.os_clock i64 
    pop            mm_start.endclock i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Time"     u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_start.endclock i64 
    push           mm_start.startclock i64 
    sub                       i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           "ms"       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#11780: 
#11776: 
    retproc                   
End


Proc mm_start.do_loadmodules:
    procentry                 
    push           mm_decls.fbundled u8 
    jumpfalse      #11782     i64 
    setargs                   0 0
    callproc       &mm_support.loadmafile 
#11782: 
    setargs                   1 0
    push           &mm_decls.inputfiles 
    push           1          i64 
    pushptroff                u64 8 0
    callproc       &mm_start.loadmainmodule 
#11783: 
    retproc                   
End


Proc mm_start.do_parse:
    local          mm_start.do_parse.i i64 
    procentry                 
    push           mm_decls.passlevel i64 
    push           2          i64 
    jumpge         #11785     i64 
    jump           #11786     
#11785: 
    push           mm_decls.fwritedocs u8 
    jumpfalse      #11787     i64 
    setargs                   2 0
    push           "w"        u64 
    setargs                   2 0
    push           "txt"      u64 
    push           mm_decls.outfile u64 
    callfn         &mlibp.changeext u64 
    callfn         &fopen     u64 
    pop            mm_parse.docfile u64 
#11787: 
#11788: 
    push           2          i64 
    pop            mm_start.do_parse.i i64 
    push           mm_decls.nmodules i64 
    push           2          i64 
    jumplt         #11789     i64 
#11790: 
    setargs                   1 0
    push           mm_start.do_parse.i i64 
    callproc       &mm_parse.parsemodule 
#11791: 
    forup          #11790     i64 1
    opnd           mm_start.do_parse.i 
    opnd           mm_decls.nmodules 
#11789: 
    setargs                   1 0
    push           1          i64 
    callproc       &mm_parse.parsemodule 
    setargs                   0 0
    callproc       &mm_start.dostarimports 
    push           mm_parse.docfile u64 
    jumpfalse      #11792     u64 
    setargs                   1 0
    push           mm_parse.docfile u64 
    callproc       &fclose    
#11792: 
    push           mm_decls.debugmode i64 
    jumpfalse      #11793     i64 
    push           mm_decls.passlevel i64 
    push           3          i64 
    jumplt         #11794     i64 
#11793: 
    setargs                   0 0
    callproc       &mm_name.fixusertypes 
#11794: 
    push           mm_decls.debugmode i64 
    jumpfalse      #11795     i64 
    push           mm_decls.fshowast1 u8 
    jumpfalse      #11795     i64 
    setargs                   1 0
    push           "AST1"     u64 
    callproc       &mm_start.showast 
#11795: 
#11786: 
    retproc                   
End


Proc mm_start.do_name:
    local          mm_start.do_name.i i64 
    procentry                 
    push           mm_decls.passlevel i64 
    push           4          i64 
    jumpge         #11797     i64 
    jump           #11798     
#11797: 
    setargs                   0 0
    callproc       &mm_name.rx_typetable 
#11799: 
    push           2          i64 
    pop            mm_start.do_name.i i64 
    push           mm_decls.nmodules i64 
    push           2          i64 
    jumplt         #11800     i64 
#11801: 
    setargs                   1 0
    push           mm_start.do_name.i i64 
    callproc       &mm_name.rx_module 
#11802: 
    forup          #11801     i64 1
    opnd           mm_start.do_name.i 
    opnd           mm_decls.nmodules 
#11800: 
    setargs                   1 0
    push           1          i64 
    callproc       &mm_name.rx_module 
    push           mm_decls.debugmode i64 
    jumpfalse      #11803     i64 
    push           mm_decls.fshowast2 u8 
    jumpfalse      #11803     i64 
    setargs                   1 0
    push           "AST2"     u64 
    callproc       &mm_start.showast 
#11803: 
#11798: 
    retproc                   
End


Proc mm_start.do_type:
    local          mm_start.do_type.i i64 
    procentry                 
    push           mm_decls.passlevel i64 
    push           5          i64 
    jumpge         #11805     i64 
    jump           #11806     
#11805: 
    setargs                   0 0
    callproc       &mm_type.tx_typetable 
    setargs                   0 0
    callproc       &mm_name.fixblockparams 
#11807: 
    push           1          i64 
    pop            mm_start.do_type.i i64 
    push           mm_decls.nmodules i64 
    push           1          i64 
    jumplt         #11808     i64 
#11809: 
    setargs                   1 0
    push           mm_start.do_type.i i64 
    callproc       &mm_type.tx_module 
#11810: 
    forup          #11809     i64 1
    opnd           mm_start.do_type.i 
    opnd           mm_decls.nmodules 
#11808: 
    setargs                   0 0
    callproc       &mm_type.tx_allprocs 
    push           mm_decls.debugmode i64 
    jumpfalse      #11811     i64 
    push           mm_decls.fshowast3 u8 
    jumpfalse      #11811     i64 
    setargs                   1 0
    push           "AST3"     u64 
    callproc       &mm_start.showast 
#11811: 
#11806: 
    retproc                   
End


Proc mm_start.showlogfile:
    local          mm_start.showlogfile.str block:256 
    local          mm_start.showlogfile.logdev u64 
    local          mm_start.showlogfile.size i64 
    procentry                 
    push           mm_decls.debugmode i64 
    jumptrue       #11813     i64 
    jump           #11814     
#11813: 
    setargs                   2 0
    push           "w"        u64 
    push           "mx.log"   u64 
    callfn         &fopen     u64 
    pop            mm_start.showlogfile.logdev u64 
    push           mm_decls.fshowasm u8 
    jumpfalse      #11815     i64 
    push           mm_decls.passlevel i64 
    push           7          i64 
    jumplt         #11815     i64 
    setargs                   1 0
    push           mm_start.showlogfile.logdev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "PROC ASSEMBLY" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           mm_start.showlogfile.logdev u64 
    push           mm_decls.asmfilename u64 
    callproc       &mm_lib.addtolog 
#11815: 
    push           mm_decls.fshowpcl u8 
    jumpfalse      #11816     i64 
    push           mm_decls.passlevel i64 
    push           6          i64 
    jumplt         #11816     i64 
    setargs                   1 0
    push           mm_start.showlogfile.logdev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "PROC PCL" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           mm_start.showlogfile.logdev u64 
    push           mm_decls.pclfilename u64 
    callproc       &mm_lib.addtolog 
#11816: 
    push           mm_decls.fshowast3 u8 
    jumpfalse      #11817     i64 
    push           mm_decls.passlevel i64 
    push           5          i64 
    jumplt         #11817     i64 
    setargs                   2 0
    push           mm_start.showlogfile.logdev u64 
    push           "AST3"     u64 
    callproc       &mm_lib.addtolog 
#11817: 
    push           mm_decls.fshowast2 u8 
    jumpfalse      #11818     i64 
    push           mm_decls.passlevel i64 
    push           4          i64 
    jumplt         #11818     i64 
    setargs                   2 0
    push           mm_start.showlogfile.logdev u64 
    push           "AST2"     u64 
    callproc       &mm_lib.addtolog 
#11818: 
    push           mm_decls.fshowast1 u8 
    jumpfalse      #11819     i64 
    push           mm_decls.passlevel i64 
    push           2          i64 
    jumplt         #11819     i64 
    setargs                   2 0
    push           mm_start.showlogfile.logdev u64 
    push           "AST1"     u64 
    callproc       &mm_lib.addtolog 
#11819: 
    push           mm_decls.fshowst u8 
    jumpfalse      #11820     i64 
    setargs                   2 0
    push           mm_start.showlogfile.logdev u64 
    push           "SYMBOL TABLE" u64 
    callproc       &mm_start.showsttree 
#11820: 
    push           mm_decls.fshowstflat u8 
    jumpfalse      #11821     i64 
    setargs                   2 0
    push           mm_start.showlogfile.logdev u64 
    push           "FLAT SYMBOL TABLE" u64 
    callproc       &mm_start.showstflat 
#11821: 
    push           mm_decls.fshowtypes u8 
    jumpfalse      #11822     i64 
    setargs                   1 0
    push           mm_start.showlogfile.logdev u64 
    callproc       &mm_diags.printmodelist 
#11822: 
    push           mm_decls.fshowoverloads u8 
    jumpfalse      #11823     i64 
    setargs                   1 0
    push           mm_start.showlogfile.logdev u64 
    callproc       &mm_diags.printoverloads 
#11823: 
    setargs                   1 0
    push           mm_start.showlogfile.logdev u64 
    callfn         &mlibp.getfilesize i64 
    pop            mm_start.showlogfile.size i64 
    setargs                   1 0
    push           mm_start.showlogfile.logdev u64 
    callproc       &fclose    
    push           mm_start.showlogfile.size i64 
    jumpfalse      #11824     i64 
    setargs                   1 0
    push           &mm_start.showlogfile.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "\\m\\olded.bat -w " u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "mx.log"   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "mm.m"     u64 
    callfn         &mlibp.checkfile i64 
    jumpfalse      #11825     i64 
    setargs                   3 0
    push           0          u64 
    push           1          i64 
    push           &mm_start.showlogfile.str 
    callproc       &mwindowsp.os_execwait 
    jump           #11826     
#11825: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Diagnostic outputs written to" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "mx.log"   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#11826: 
#11824: 
    push           0          i64 
    stop                      
#11814: 
    retproc                   
End


Proc mm_start.initdata:
    param          mm_start.initdata.os i64 
    param          mm_start.initdata.target i64 
    procentry                 
    setargs                   0 0
    callproc       &mlibp.pcm_init 
    setargs                   0 0
    callproc       &mm_lex.lexsetup 
    setargs                   0 0
    callproc       &mm_start.initassemsymbols 
    setargs                   0 0
    callproc       &mm_support.init_tt_tables 
    setargs                   0 0
    callproc       &mm_support.initbblib 
    push           mm_start.initdata.os i64 
    push           87         i64 
    jumpne         #11828     i64 
    push           1          i64 
    pop            mm_decls.fwindows u8 
    jump           #11829     
#11828: 
    push           1          i64 
    pop            mm_decls.flinux u8 
#11829: 
    push           mm_start.initdata.target i64 
    push           3421784    i64 
    casejumpeq     #11830     i64 0
    popstack                  i64 
    jump           #11831     
#11830: 
    push           1          i64 
    pop            mm_decls.fx64 u8 
    push           mm_decls.flinux u8 
    jumpfalse      #11832     i64 
    setargs                   3 0
    push           ""         u64 
    push           ""         u64 
    push           "Linux/x64" u64 
    callproc       &mm_support.loaderror 
#11832: 
    jump           #11833     
#11831: 
    setargs                   3 0
    push           ""         u64 
    push           ""         u64 
    push           "Bad os/target" u64 
    callproc       &mm_support.loaderror 
#11833: 
    setargs                   2 0
    push           "1"        u64 
    push           "mm"       u64 
    callproc       &mm_start.addoptionvar 
#11834: 
    retproc                   
End


Proc mm_start.loadmainmodule: i64
    param          mm_start.loadmainmodule.filespec u64 
    local          mm_start.loadmainmodule.modulename block:100 
    local          mm_start.loadmainmodule.path block:300 
    local          mm_start.loadmainmodule.source u64 
    local          mm_start.loadmainmodule.status i64 
    local          mm_start.loadmainmodule.m block:456 
    local          mm_start.loadmainmodule.i i64 
    local          mm_start.loadmainmodule.fileno i64 
    procentry                 
    setargs                   2 0
    push           456        i64 
    push           &mm_decls.moduletable 
    push           0          
    addrefoff                 u8 1 0
    callproc       &mlibp.pcm_clearmem 
    push           "<dummy file>" u64 
    push           &mm_decls.sourcefilenames 
    push           0          i64 
    popptroff                 u64 8 0
    push           "<dummy path>" u64 
    push           &mm_decls.sourcefilepaths 
    push           0          i64 
    popptroff                 u64 8 0
    push           "<sourcefile0>" u64 
    push           &mm_decls.sourcefiletext 
    push           0          i64 
    popptroff                 u64 8 0
    setargs                   1 0
    push           &mm_decls.sourcefiletext 
    push           0          i64 
    pushptroff                u64 8 0
    callfn         &strlen    i64 
    push           &mm_decls.sourcefilesizes 
    push           0          i64 
    popptroff                 i64 8 0
    push           "PROGRAM"  u64 
    push           &mm_decls.moduletable 
    push           0          i64 
    addrefoff                 block:456 456 0
    push           0          
    popptroff                 u64 1 0
    push           0          i64 
    push           &mm_decls.moduletable 
    push           0          i64 
    addrefoff                 block:456 456 0
    push           16         
    popptroff                 i64 1 0
    setargs                   3 0
    push           1          i64 
    setargs                   1 0
    push           "$prog"    u64 
    callfn         &mm_lex.addnamestr u64 
    push           0          u64 
    callfn         &mm_lib.createdupldef u64 
    pop            mm_decls.stprogram u64 
    push           mm_decls.stprogram u64 
    push           &mm_decls.moduletable 
    push           0          i64 
    addrefoff                 block:456 456 0
    push           8          
    popptroff                 u64 1 0
    setargs                   1 0
    push           mm_start.loadmainmodule.filespec u64 
    callfn         &mm_support.getmainfile i64 
    pop            mm_start.loadmainmodule.fileno i64 
    push           0          u64 
    pop            mm_decls.infotext u64 
    setargs                   2 0
    setargs                   1 0
    push           mm_start.loadmainmodule.filespec u64 
    callfn         &mlibp.extractbasefile u64 
    push           &mm_start.loadmainmodule.modulename 
    callproc       &strcpy    
    setargs                   2 0
    setargs                   1 0
    push           mm_start.loadmainmodule.filespec u64 
    callfn         &mlibp.extractpath u64 
    push           &mm_start.loadmainmodule.path 
    callproc       &strcpy    
    push           &mm_start.loadmainmodule.path 
    push           1          i64 
    pushptroff                u8 1 -1
    jumpfalse      #11836     u64 
    setargs                   1 0
    push           &mm_start.loadmainmodule.path 
    callproc       &mm_start.addsearchdir 
#11836: 
    setargs                   2 0
    push           mm_start.loadmainmodule.fileno i64 
    push           &mm_start.loadmainmodule.modulename 
    callproc       &mm_start.addmodule 
    setargs                   0 0
    callproc       &mm_support.addspecialtypes 
    push           1          i64 
    setret                    i64 
    jump           #11837     
#11837: 
    retfn                     i64 
End


Proc mm_start.addmodule: i64
    param          mm_start.addmodule.modulename u64 
    param          mm_start.addmodule.fileno i64 
    local          mm_start.addmodule.m block:456 
    local          mm_start.addmodule.importnames block:1600 
    local          mm_start.addmodule.importflags block:201 
    local          mm_start.addmodule.importxd block:201 
    local          mm_start.addmodule.importmoduleno block:1600 
    local          mm_start.addmodule.nimports i64 
    local          mm_start.addmodule.i i64 
    local          mm_start.addmodule.status i64 
    local          mm_start.addmodule.k i64 
    local          mm_start.addmodule.flag i64 
    local          mm_start.addmodule.j i64 
    local          mm_start.addmodule.newmodno i64 
    local          mm_start.addmodule.pmodule u64 
    procentry                 
    setargs                   1 0
    push           mm_start.addmodule.modulename u64 
    callproc       &mlibp.convlcstring 
    setargs                   2 0
    push           456        i64 
    push           &mm_start.addmodule.m 
    callproc       &mlibp.pcm_clearmem 
    setargs                   1 0
    push           mm_start.addmodule.modulename u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &mm_start.addmodule.m 
    push           0          
    popptroff                 u64 1 0
    push           mm_start.addmodule.fileno i64 
    push           &mm_start.addmodule.m 
    push           16         
    popptroff                 i64 1 0
    setargs                   2 0
    setargs                   1 0
    push           &mm_start.addmodule.m 
    pushptr                   u64 
    callfn         &mm_lex.addnamestr u64 
    push           mm_decls.stprogram u64 
    callfn         &mm_lib.createnewmoduledef u64 
    pop            mm_decls.stmodule u64 
    push           mm_decls.stmodule u64 
    push           &mm_start.addmodule.m 
    push           8          
    popptroff                 u64 1 0
    push           mm_decls.nmodules i64 
    push           200        i64 
    jumplt         #11839     i64 
    setargs                   3 0
    push           ""         u64 
    push           mm_start.addmodule.modulename u64 
    push           "Too many modules" u64 
    callproc       &mm_support.loaderror 
#11839: 
    push           &mm_decls.moduletable 
    push           &mm_decls.nmodules 
    incrload                  i64 1
    store          mm_start.addmodule.newmodno i64 
    addrefoff                 block:456 456 0
    pop            mm_start.addmodule.pmodule u64 
    push           mm_start.addmodule.m block:456 
    push           mm_start.addmodule.pmodule u64 
    popptr                    block:456 
    push           1          i64 
    push           mm_start.addmodule.pmodule u64 
    push           40         
    addrefoff                 u64 1 0
    push           mm_start.addmodule.newmodno i64 
    popptroff                 u8 1 -1
    push           mm_start.addmodule.newmodno i64 
    push           &mm_start.addmodule.m 
    push           8          
    pushptroff                u64 1 0
    push           94         
    popptroff                 u8 1 0
    push           &mm_start.addmodule.importflags 
    clear                     block:201 
    setargs                   5 0
    push           200        i64 
    push           &mm_start.addmodule.importxd 
    push           &mm_start.addmodule.importflags 
    push           &mm_start.addmodule.importnames 
    push           mm_start.addmodule.newmodno i64 
    callfn         &mm_start.readimportlist i64 
    pop            mm_start.addmodule.nimports i64 
#11840: 
    push           1          i64 
    pop            mm_start.addmodule.i i64 
    push           mm_start.addmodule.nimports i64 
    push           1          i64 
    jumplt         #11841     i64 
#11842: 
    push           0          i64 
    pop            mm_start.addmodule.flag i64 
    push           mm_decls.fverbose i64 
    push           3          i64 
    jumpne         #11843     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Load import for" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_start.addmodule.modulename u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "IMPORTNAMES[I]=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_start.addmodule.importnames 
    push           mm_start.addmodule.i i64 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#11843: 
    setargs                   3 0
    push           mm_start.addmodule.modulename u64 
    push           &mm_start.addmodule.importxd 
    push           mm_start.addmodule.i i64 
    pushptroff                u8 1 0
    push           &mm_start.addmodule.importnames 
    push           mm_start.addmodule.i i64 
    pushptroff                u64 8 -8
    callfn         &mm_start.loadimport i64 
    pop            mm_start.addmodule.k i64 
    push           1          i64 
    push           mm_start.addmodule.pmodule u64 
    push           40         
    addrefoff                 u64 1 0
    push           mm_start.addmodule.k i64 
    popptroff                 u8 1 -1
    push           &mm_start.addmodule.importflags 
    push           mm_start.addmodule.i i64 
    pushptroff                u8 1 0
    push           mm_start.addmodule.pmodule u64 
    push           240        
    addrefoff                 u64 1 0
    push           mm_start.addmodule.k i64 
    popptroff                 u8 1 -1
    push           mm_start.addmodule.k i64 
    push           &mm_start.addmodule.importmoduleno 
    push           mm_start.addmodule.i i64 
    popptroff                 i64 8 -8
#11844: 
    forup          #11842     i64 1
    opnd           mm_start.addmodule.i 
    opnd           mm_start.addmodule.nimports 
#11841: 
    push           mm_start.addmodule.newmodno i64 
    setret                    i64 
    jump           #11845     
#11845: 
    retfn                     i64 
End


Proc mm_start.readimportlist: i64
    param          mm_start.readimportlist.m i64 
    param          mm_start.readimportlist.importnames u64 
    param          mm_start.readimportlist.importflags u64 
    param          mm_start.readimportlist.importxd u64 
    param          mm_start.readimportlist.maximports i64 
    local          mm_start.readimportlist.n i64 
    local          mm_start.readimportlist.flag i64 
    local          mm_start.readimportlist.xdflag i64 
    local          mm_start.readimportlist.s u64 
    local          mm_start.readimportlist.name block:100 
    local          mm_start.readimportlist.libname block:100 
    local          mm_start.readimportlist.iname u64 
    local          mm_start.readimportlist.needbsys i64 
    local          mm_start.readimportlist.needclib i64 
    local          mm_start.readimportlist.bsysname u64 
    local          mm_start.readimportlist.i i64 
    procentry                 
    setargs                   2 0
    push           mm_start.readimportlist.m i64 
    push           "RIL"      u64 
    callproc       &mm_lex.startlex 
    push           0          i64 
    pop            mm_start.readimportlist.n i64 
#11847: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           66         i64 
    casejumpeq     #11848     i64 0
    push           6          i64 
    casejumpeq     #11849     i64 0
    push           65         i64 
    casejumpeq     #11849     i64 0
    push           135        i64 
    casejumpeq     #11850     i64 0
    push           137        i64 
    casejumpeq     #11851     i64 0
    push           138        i64 
    casejumpeq     #11852     i64 0
    popstack                  i64 
    jump           #11853     
#11848: 
    jump           #11854     
    jump           #11855     
#11849: 
    jump           #11855     
#11850: 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    pop            mm_start.readimportlist.xdflag i64 
    push           0          i64 
    pop            mm_start.readimportlist.flag i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           32         i64 
    jumpne         #11856     i64 
    push           1          i64 
    pop            mm_start.readimportlist.flag i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
#11856: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           79         i64 
    jumpeq         #11857     i64 
    setargs                   1 0
    push           "import: modulename expected" u64 
    callproc       &mlibp.abortprogram 
#11857: 
    push           &mm_start.readimportlist.n 
    incrload                  i64 1
    push           mm_start.readimportlist.maximports i64 
    jumplt         #11858     i64 
    setargs                   1 0
    push           "too many imports" u64 
    callproc       &mlibp.abortprogram 
#11858: 
    setargs                   1 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    pushptr                   u64 
    callfn         &mm_start.mapimport u64 
    pop            mm_start.readimportlist.iname u64 
    setargs                   1 0
    push           mm_start.readimportlist.iname u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           mm_start.readimportlist.importnames u64 
    push           mm_start.readimportlist.n i64 
    popptroff                 u64 8 -8
    push           mm_start.readimportlist.flag i64 
    push           mm_start.readimportlist.importflags u64 
    push           mm_start.readimportlist.n i64 
    popptroff                 u8 1 0
    push           mm_start.readimportlist.xdflag i64 
    push           mm_start.readimportlist.importxd u64 
    push           mm_start.readimportlist.n i64 
    popptroff                 u8 1 0
#11859: 
    setargs                   0 0
    callproc       &mm_lex.lex 
#11860: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           79         i64 
    jumpeq         #11859     i64 
#11861: 
    jump           #11855     
#11851: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           75         i64 
    jumpne         #11862     i64 
    setargs                   1 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    callproc       &mm_start.addsearchdir 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #11863     
#11862: 
    setargs                   1 0
    push           "string path expected" u64 
    callproc       &mlibp.abortprogram 
#11863: 
    jump           #11855     
#11852: 
    setargs                   0 0
    callproc       &mm_start.domapmodule 
    jump           #11855     
#11853: 
    jump           #11854     
#11855: 
    jump           #11847     
#11854: 
    push           mm_decls.msyslevel i64 
    push           1          i64 
    casejumpeq     #11864     i64 0
    push           0          i64 
    casejumpeq     #11865     i64 0
    push           2          i64 
    casejumpeq     #11865     i64 0
    popstack                  i64 
    jump           #11866     
#11864: 
    push           "msystemp" u64 
    pop            mm_start.readimportlist.bsysname u64 
    jump           #11867     
#11865: 
    push           "msysp"    u64 
    pop            mm_start.readimportlist.bsysname u64 
    jump           #11867     
#11866: 
#11867: 
    push           mm_decls.nmodules i64 
    push           1          i64 
    jumpne         #11868     i64 
    push           mm_decls.msyslevel i64 
    jumpfalse      #11869     i64 
    push           1          i64 
    pop            mm_start.readimportlist.needbsys i64 
#11870: 
    push           1          i64 
    pop            mm_start.readimportlist.i i64 
    push           mm_start.readimportlist.n i64 
    push           1          i64 
    jumplt         #11871     i64 
#11872: 
    setargs                   2 0
    push           mm_start.readimportlist.bsysname u64 
    push           mm_start.readimportlist.importnames u64 
    push           mm_start.readimportlist.i i64 
    pushptroff                u64 8 -8
    callfn         &mlibp.eqstring i64 
    jumpfalse      #11873     i64 
    push           0          i64 
    pop            mm_start.readimportlist.needbsys i64 
    jump           #11871     
#11873: 
#11874: 
    forup          #11872     i64 1
    opnd           mm_start.readimportlist.i 
    opnd           mm_start.readimportlist.n 
#11871: 
    jump           #11875     
#11869: 
    push           0          i64 
    pop            mm_start.readimportlist.needbsys i64 
#11875: 
    push           mm_start.readimportlist.needbsys i64 
    jumpfalse      #11876     i64 
    push           &mm_start.readimportlist.n 
    incr                      i64 1
    setargs                   1 0
    push           mm_start.readimportlist.bsysname u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           mm_start.readimportlist.importnames u64 
    push           mm_start.readimportlist.n i64 
    popptroff                 u64 8 -8
    push           0          i64 
    push           mm_start.readimportlist.importflags u64 
    push           mm_start.readimportlist.n i64 
    popptroff                 u8 1 0
    push           0          i64 
    push           mm_start.readimportlist.importxd u64 
    push           mm_start.readimportlist.n i64 
    popptroff                 u8 1 0
#11876: 
#11868: 
    push           mm_start.readimportlist.n i64 
    setret                    i64 
    jump           #11877     
#11877: 
    retfn                     i64 
End


Proc mm_start.loadimport: i64
    param          mm_start.loadimport.modulename u64 
    param          mm_start.loadimport.xdflag i64 
    param          mm_start.loadimport.ownername u64 
    local          mm_start.loadimport.i i64 
    local          mm_start.loadimport.fileno i64 
    local          mm_start.loadimport.ifilespec u64 
    local          mm_start.loadimport.filespec block:300 
    local          mm_start.loadimport.source u64 
    local          mm_start.loadimport.newname u64 
    procentry                 
    push           mm_start.loadimport.modulename u64 
    pop            mm_start.loadimport.newname u64 
#11879: 
    push           1          i64 
    pop            mm_start.loadimport.i i64 
    push           mm_decls.nmodules i64 
    push           1          i64 
    jumplt         #11880     i64 
#11881: 
    setargs                   2 0
    push           mm_start.loadimport.newname u64 
    push           &mm_decls.moduletable 
    push           mm_start.loadimport.i i64 
    addrefoff                 block:456 456 0
    pushptr                   u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #11882     i64 
    push           mm_start.loadimport.i i64 
    setret                    i64 
    jump           #11883     
#11882: 
#11884: 
    forup          #11881     i64 1
    opnd           mm_start.loadimport.i 
    opnd           mm_decls.nmodules 
#11880: 
    setargs                   3 0
    push           mm_start.loadimport.xdflag i64 
    push           mm_start.loadimport.ownername u64 
    push           mm_start.loadimport.modulename u64 
    callfn         &mm_support.getmodulefile i64 
    pop            mm_start.loadimport.fileno i64 
    push           mm_start.loadimport.xdflag i64 
    jumpfalse      #11885     i64 
    setargs                   1 0
    push           mm_start.loadimport.modulename u64 
    callproc       &mm_lib.addcclib 
#11885: 
    setargs                   2 0
    push           mm_start.loadimport.fileno i64 
    push           mm_start.loadimport.newname u64 
    callfn         &mm_start.addmodule i64 
    setret                    i64 
    jump           #11883     
#11883: 
    retfn                     i64 
End


Proc mm_start.initsearchdirs:
    local          mm_start.initsearchdirs.str1 block:300 
    local          mm_start.initsearchdirs.str2 block:300 
    local          mm_start.initsearchdirs.i i64 
    procentry                 
    push           0          i64 
    pop            mm_decls.nsearchdirs i64 
    setargs                   1 0
    push           "c:/mxp/"  u64 
    callproc       &mm_start.addsearchdir 
    setargs                   1 0
    setargs                   0 0
    callfn         &mwindowsp.os_getmpath u64 
    callproc       &mm_start.addsearchdir 
    setargs                   1 0
    setargs                   0 0
    callfn         &mwindowsp.os_gethostname u64 
    callproc       &mm_start.addsearchdir 
    setargs                   1 0
    push           "./"       u64 
    callproc       &mm_start.addsearchdir 
#11887: 
    retproc                   
End


Proc mm_start.addsearchdir:
    param          mm_start.addsearchdir.path u64 
    local          mm_start.addsearchdir.i i64 
    procentry                 
#11889: 
    push           1          i64 
    pop            mm_start.addsearchdir.i i64 
    push           mm_decls.nsearchdirs i64 
    push           1          i64 
    jumplt         #11890     i64 
#11891: 
    setargs                   2 0
    push           mm_start.addsearchdir.path u64 
    push           &mm_decls.searchdirs 
    push           mm_start.addsearchdir.i i64 
    pushptroff                u64 8 -8
    callfn         &mlibp.eqstring i64 
    jumpfalse      #11892     i64 
    jump           #11893     
#11892: 
#11894: 
    forup          #11891     i64 1
    opnd           mm_start.addsearchdir.i 
    opnd           mm_decls.nsearchdirs 
#11890: 
    push           mm_decls.nsearchdirs i64 
    push           10         i64 
    jumple         #11895     i64 
    setargs                   3 0
    push           ""         u64 
    push           ""         u64 
    push           "Too many search paths" u64 
    callproc       &mm_support.loaderror 
#11895: 
    setargs                   1 0
    push           mm_start.addsearchdir.path u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &mm_decls.searchdirs 
    push           &mm_decls.nsearchdirs 
    incrload                  i64 1
    popptroff                 u64 8 -8
#11893: 
    retproc                   
End


Proc mm_start.getinputoptions:
    local          mm_start.getinputoptions.i i64 
    local          mm_start.getinputoptions.j i64 
    local          mm_start.getinputoptions.k i64 
    local          mm_start.getinputoptions.paramno i64 
    local          mm_start.getinputoptions.pmtype i64 
    local          mm_start.getinputoptions.sw i64 
    local          mm_start.getinputoptions.ncolons i64 
    local          mm_start.getinputoptions.passfixed i64 
    local          mm_start.getinputoptions.name u64 
    local          mm_start.getinputoptions.value u64 
    local          mm_start.getinputoptions.filename u64 
    local          mm_start.getinputoptions.ext u64 
    local          mm_start.getinputoptions.filespec block:300 
    local          mm_start.getinputoptions.av_1 i64 
    procentry                 
    push           1          i64 
    pop            mm_decls.prodmode i64 
    push           2          i64 
    pop            mm_start.getinputoptions.paramno i64 
    push           0          i64 
    pop            mm_start.getinputoptions.ncolons i64 
    jump           #11897     
#11898: 
    push           mm_start.getinputoptions.pmtype i64 
    push           1          i64 
    casejumpeq     #11899     i64 0
    push           2          i64 
    casejumpeq     #11900     i64 0
    push           3          i64 
    casejumpeq     #11901     i64 0
    push           4          i64 
    casejumpeq     #11902     i64 0
    push           5          i64 
    casejumpeq     #11903     i64 0
    popstack                  i64 
    jump           #11904     
#11899: 
    setargs                   1 0
    push           mm_start.getinputoptions.name u64 
    callproc       &mlibp.convlcstring 
#11905: 
    push           1          i64 
    pop            mm_start.getinputoptions.sw i64 
    push           49         i64 
    pop            mm_start.getinputoptions.av_1 i64 
    push           mm_start.getinputoptions.av_1 i64 
    push           1          i64 
    jumplt         #11906     i64 
#11907: 
    setargs                   2 0
    push           &mm_start.optionnames 
    push           mm_start.getinputoptions.sw i64 
    pushptroff                u64 8 -8
    push           mm_start.getinputoptions.name u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #11908     i64 
    setargs                   2 0
    push           mm_start.getinputoptions.value u64 
    push           mm_start.getinputoptions.sw i64 
    callproc       &mm_start.do_option 
    jump           #11909     
#11908: 
#11910: 
    forup          #11907     i64 1
    opnd           mm_start.getinputoptions.sw 
    opnd           mm_start.getinputoptions.av_1 
#11906: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Unknown option:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_start.getinputoptions.name u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           99         i64 
    stop                      
#11909: 
    jump           #11911     
#11900: 
    push           mm_decls.ninputfiles i64 
    push           200        i64 
    jumplt         #11912     i64 
    setargs                   3 0
    push           ""         u64 
    push           ""         u64 
    push           "Too many input files" u64 
    callproc       &mm_support.loaderror 
#11912: 
    setargs                   1 0
    push           mm_start.getinputoptions.name u64 
    callproc       &mlibp.convlcstring 
    setargs                   1 0
    push           mm_start.getinputoptions.name u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &mm_decls.inputfiles 
    push           &mm_decls.ninputfiles 
    incrload                  i64 1
    popptroff                 u64 8 0
    jump           #11911     
#11901: 
    push           mm_decls.nlibfiles i64 
    push           50         i64 
    jumplt         #11913     i64 
    setargs                   3 0
    push           ""         u64 
    push           ""         u64 
    push           "Too many lib files" u64 
    callproc       &mm_support.loaderror 
#11913: 
    setargs                   1 0
    push           mm_start.getinputoptions.name u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &mm_decls.libfiles 
    push           &mm_decls.nlibfiles 
    incrload                  i64 1
    popptroff                 u64 8 0
    jump           #11911     
#11902: 
    push           &mm_start.getinputoptions.ncolons 
    incrload                  i64 1
    push           1          i64 
    jumple         #11914     i64 
    push           ":"        u64 
    pop            mm_start.getinputoptions.name u64 
    push           0          u64 
    pop            mm_start.getinputoptions.value u64 
    jump           #11915     
#11914: 
    jump           #11911     
#11903: 
!doextra::
#11915: 
    setargs                   1 0
    push           mm_start.getinputoptions.name u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &mm_start.extraparams 
    push           &mm_start.nextraparams 
    incrload                  i64 1
    popptroff                 u64 8 -8
    setargs                   1 0
    push           mm_start.getinputoptions.value u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &mm_start.extravalues 
    push           mm_start.nextraparams i64 
    popptroff                 u64 8 -8
    jump           #11911     
#11904: 
#11911: 
#11897: 
    setargs                   4 0
    push           "m"        u64 
    push           &mm_start.getinputoptions.value 
    push           &mm_start.getinputoptions.name 
    push           &mm_start.getinputoptions.paramno 
    callfn         &mlibp.nextcmdparam i64 
    store          mm_start.getinputoptions.pmtype i64 
    jumptrue       #11898     i64 
#11916: 
    push           mm_decls.prodmode i64 
    push           mm_decls.debugmode i64 
    jumpne         #11917     i64 
    push           mm_decls.debugmode i64 
    push           0          i64 
    jumpne         #11917     i64 
    push           10         i64 
    pop            mm_decls.passlevel i64 
    push           "exe"      u64 
    pop            mm_start.outext u64 
    push           1          i64 
    pop            mm_decls.prodmode i64 
    jump           #11918     
#11917: 
    push           mm_decls.prodmode i64 
    jumpfalse      #11919     i64 
    push           mm_decls.passlevel i64 
    push           0          i64 
    jumpne         #11919     i64 
    push           10         i64 
    pop            mm_decls.passlevel i64 
    push           "exe"      u64 
    pop            mm_start.outext u64 
    jump           #11918     
#11919: 
    push           mm_decls.debugmode i64 
    jumpfalse      #11920     i64 
    push           mm_decls.passlevel i64 
    push           0          i64 
    jumpne         #11920     i64 
    push           7          i64 
    pop            mm_decls.passlevel i64 
    push           "asm"      u64 
    pop            mm_start.outext u64 
#11920: 
#11918: 
    push           mm_decls.msyslevel i64 
    push           -1         i64 
    jumpne         #11921     i64 
    startmult                 
    push           mm_decls.prodmode i64 
    jumpfalse      #11922     i64 
    push           2          i64 
    resetmult                 
    jump           #11923     
#11922: 
    push           0          i64 
    endmult                   
#11923: 
    pop            mm_decls.msyslevel i64 
    startmult                 
    push           mm_decls.prodmode i64 
    jumpfalse      #11924     i64 
    push           2          i64 
    resetmult                 
    jump           #11925     
#11924: 
    push           0          i64 
    endmult                   
#11925: 
    pop            mm_decls.msyslevel i64 
#11921: 
    push           mm_decls.ninputfiles i64 
    push           0          i64 
    jumpne         #11926     i64 
    setargs                   0 0
    callproc       &mm_start.showcaption 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Usage:"   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\t"       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           &msysp.sysparams 
    push           1          i64 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "filename[.m]     # Compile project to executable" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\t"       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           &msysp.sysparams 
    push           1          i64 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "-help            # Other options" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           0          
    stop                      
    jump           #11927     
#11926: 
    push           mm_decls.ninputfiles i64 
    push           1          i64 
    jumpne         #11928     i64 
    push           &mm_decls.inputfiles 
    push           1          i64 
    pushptroff                u64 8 0
    pop            mm_start.getinputoptions.filename u64 
    setargs                   2 0
    push           0          i64 
    push           mm_start.getinputoptions.filename u64 
    callfn         &mlibp.extractext u64 
    pop            mm_start.getinputoptions.ext u64 
    setargs                   2 0
    push           "ma"       u64 
    push           mm_start.getinputoptions.ext u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #11929     i64 
    push           1          i64 
    pop            mm_decls.fbundled u8 
    setargs                   1 0
    push           mm_start.getinputoptions.filename u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    pop            mm_decls.mafilename u64 
    setargs                   1 0
    setargs                   2 0
    push           "m"        u64 
    push           mm_start.getinputoptions.filename u64 
    callfn         &mlibp.changeext u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &mm_decls.inputfiles 
    push           1          i64 
    popptroff                 u64 8 0
#11929: 
    setargs                   1 0
    push           mm_start.getinputoptions.filename u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    pop            mm_decls.outfile u64 
    push           mm_decls.destfilename u64 
    jumpfalse      #11930     u64 
    push           mm_decls.destfilename u64 
    pop            mm_decls.outfile u64 
    jump           #11931     
#11930: 
    push           mm_decls.destfilepath u64 
    jumpfalse      #11932     u64 
    setargs                   2 0
    push           mm_decls.destfilepath u64 
    push           &mm_start.getinputoptions.filespec 
    callproc       &strcpy    
    setargs                   2 0
    push           mm_decls.outfile u64 
    setargs                   1 0
    push           &mm_start.getinputoptions.filespec 
    callfn         &mlibp.extractfile u64 
    callproc       &strcat    
    setargs                   1 0
    push           &mm_start.getinputoptions.filespec 
    callfn         &mlibp.pcm_copyheapstring u64 
    pop            mm_decls.outfile u64 
#11932: 
#11931: 
    jump           #11927     
#11928: 
    setargs                   3 0
    push           ""         u64 
    push           ""         u64 
    push           "Specify one lead module only" u64 
    callproc       &mm_support.loaderror 
#11927: 
    push           mm_decls.msyslevel i64 
    push           1          i64 
    casejumpeq     #11933     i64 0
    push           0          i64 
    casejumpeq     #11934     i64 0
    push           2          i64 
    casejumpeq     #11934     i64 0
    popstack                  i64 
    jump           #11935     
#11933: 
    setargs                   4 0
    push           0          u64 
    push           0          u64 
    push           "msystemp" u64 
    push           "msys"     u64 
    callproc       &mm_start.addmodulemapping 
    jump           #11936     
#11934: 
    setargs                   4 0
    push           0          u64 
    push           0          u64 
    push           "msysp"    u64 
    push           "msys"     u64 
    callproc       &mm_start.addmodulemapping 
    jump           #11936     
#11935: 
#11936: 
    setargs                   2 0
    push           "asm"      u64 
    push           mm_decls.outfile u64 
    callfn         &mm_start.getoutfilename u64 
    pop            mm_decls.asmfilename u64 
    setargs                   2 0
    push           "pcl"      u64 
    push           mm_decls.outfile u64 
    callfn         &mm_start.getoutfilename u64 
    pop            mm_decls.pclfilename u64 
    setargs                   2 0
    push           "exe"      u64 
    push           mm_decls.outfile u64 
    callfn         &mm_start.getoutfilename u64 
    pop            mm_decls.exefilename u64 
    setargs                   2 0
    push           "dll"      u64 
    push           mm_decls.outfile u64 
    callfn         &mm_start.getoutfilename u64 
    pop            mm_decls.dllfilename u64 
    setargs                   2 0
    push           "obj"      u64 
    push           mm_decls.outfile u64 
    callfn         &mm_start.getoutfilename u64 
    pop            mm_decls.objfilename u64 
    setargs                   2 0
    push           "ma"       u64 
    push           mm_decls.outfile u64 
    callfn         &mm_start.getoutfilename u64 
    pop            mm_decls.mafilename u64 
    setargs                   2 0
    push           "exp"      u64 
    push           mm_decls.outfile u64 
    callfn         &mm_start.getoutfilename u64 
    pop            mm_decls.expfilename u64 
#11937: 
    retproc                   
End


Proc mm_start.do_option:
    param          mm_start.do_option.sw i64 
    param          mm_start.do_option.value u64 
    procentry                 
    push           mm_start.do_option.sw i64 
    switch         #11939     1 48
    opnd           #11940     
#11939: 
    switchlabel    #11941     
    switchlabel    #11942     
    switchlabel    #11943     
    switchlabel    #11944     
    switchlabel    #11945     
    switchlabel    #11946     
    switchlabel    #11947     
    switchlabel    #11940     
    switchlabel    #11948     
    switchlabel    #11949     
    switchlabel    #11950     
    switchlabel    #11951     
    switchlabel    #11952     
    switchlabel    #11953     
    switchlabel    #11954     
    switchlabel    #11955     
    switchlabel    #11956     
    switchlabel    #11957     
    switchlabel    #11940     
    switchlabel    #11958     
    switchlabel    #11959     
    switchlabel    #11960     
    switchlabel    #11961     
    switchlabel    #11962     
    switchlabel    #11963     
    switchlabel    #11964     
    switchlabel    #11965     
    switchlabel    #11966     
    switchlabel    #11967     
    switchlabel    #11968     
    switchlabel    #11969     
    switchlabel    #11970     
    switchlabel    #11971     
    switchlabel    #11972     
    switchlabel    #11973     
    switchlabel    #11974     
    switchlabel    #11975     
    switchlabel    #11976     
    switchlabel    #11977     
    switchlabel    #11978     
    switchlabel    #11979     
    switchlabel    #11980     
    switchlabel    #11981     
    switchlabel    #11981     
    switchlabel    #11982     
    switchlabel    #11983     
    switchlabel    #11984     
    switchlabel    #11985     
    endswitch                 
#11941: 
    push           1          i64 
    pop            mm_decls.passlevel i64 
    jump           #11986     
#11943: 
    push           2          i64 
    pop            mm_decls.passlevel i64 
    jump           #11986     
#11942: 
    push           3          i64 
    pop            mm_decls.passlevel i64 
    jump           #11986     
#11944: 
    push           4          i64 
    pop            mm_decls.passlevel i64 
    jump           #11986     
#11945: 
    push           5          i64 
    pop            mm_decls.passlevel i64 
    jump           #11986     
#11946: 
    push           6          i64 
    pop            mm_decls.passlevel i64 
    push           "pcl"      u64 
    pop            mm_start.outext u64 
    jump           #11986     
#11947: 
    push           8          i64 
    pop            mm_decls.passlevel i64 
    push           "asm"      u64 
    pop            mm_start.outext u64 
    jump           #11986     
#11948: 
    push           9          i64 
    pop            mm_decls.passlevel i64 
    push           "obj"      u64 
    pop            mm_start.outext u64 
    jump           #11986     
#11950: 
    push           10         i64 
    pop            mm_decls.passlevel i64 
    push           "exe"      u64 
    pop            mm_start.outext u64 
    jump           #11986     
#11949: 
    push           11         i64 
    pop            mm_decls.passlevel i64 
    push           "dll"      u64 
    pop            mm_start.outext u64 
    jump           #11986     
#11951: 
    push           12         i64 
    pop            mm_decls.passlevel i64 
    push           "exe"      u64 
    pop            mm_start.outext u64 
    jump           #11986     
#11952: 
    push           6          i64 
    pop            mm_decls.passlevel i64 
    push           "pcl"      u64 
    pop            mm_start.outext u64 
    push           1          i64 
    pop            mm_start.fpclexe u8 
    jump           #11986     
#11953: 
    push           8          i64 
    pop            mm_decls.passlevel i64 
    push           "asm"      u64 
    pop            mm_start.outext u64 
    push           1          i64 
    pop            mm_start.fasmexe u8 
    jump           #11986     
#11960: 
    push           1          i64 
    pop            mm_decls.fwritema u8 
    push           "ma"       u64 
    pop            mm_start.outext u64 
    jump           #11986     
#11962: 
    push           1          i64 
    pop            mm_decls.fwriteexports u8 
    jump           #11986     
#11961: 
    push           1          i64 
    pop            mm_decls.fwritedocs u8 
    jump           #11986     
#11954: 
    push           2          i64 
    pop            mm_decls.msyslevel i64 
    jump           #11986     
#11955: 
    push           1          i64 
    pop            mm_decls.msyslevel i64 
    jump           #11986     
#11956: 
    push           0          i64 
    pop            mm_decls.msyslevel i64 
    jump           #11986     
#11957: 
    push           1          i64 
    pop            mm_decls.fnofile u8 
    jump           #11986     
#11958: 
    push           0          i64 
    pop            mm_decls.fdorts u8 
    jump           #11986     
#11963: 
    push           2          i64 
    pop            mm_decls.foptim u8 
    jump           #11986     
#11964: 
    push           1          i64 
    pop            mm_decls.foptim u8 
    jump           #11986     
#11965: 
    push           2          i64 
    pop            mm_decls.foptim u8 
    jump           #11986     
#11959: 
    push           1          i64 
    pop            mm_decls.debugmode i64 
    push           0          i64 
    pop            mm_decls.prodmode i64 
    jump           #11986     
#11977: 
    push           1          i64 
    pop            mm_decls.fshowtiming u8 
    jump           #11986     
#11978: 
    push           2          i64 
    pop            mm_decls.fverbose i64 
    jump           #11986     
#11979: 
    push           3          i64 
    pop            mm_decls.fverbose i64 
    jump           #11986     
#11980: 
    push           0          i64 
    pop            mm_decls.fverbose i64 
    jump           #11986     
#11981: 
    setargs                   0 0
    callproc       &mm_start.showhelp 
    push           0          
    stop                      
    jump           #11986     
#11982: 
    push           0          i64 
    pop            mm_decls.dointlibs u8 
    jump           #11986     
#11983: 
    push           mm_start.do_option.outpathused u8 
    jumpfalse      #11987     i64 
    setargs                   3 0
    push           ""         u64 
    push           ""         u64 
    push           "mixed out/path" u64 
    callproc       &mm_support.loaderror 
#11987: 
    setargs                   1 0
    push           mm_start.do_option.value u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    pop            mm_decls.destfilename u64 
    push           1          i64 
    pop            mm_start.do_option.outused u8 
    jump           #11986     
#11984: 
    push           mm_start.do_option.outused u8 
    jumpfalse      #11988     i64 
    setargs                   3 0
    push           ""         u64 
    push           ""         u64 
    push           "mixed out/path" u64 
    callproc       &mm_support.loaderror 
#11988: 
    push           mm_start.do_option.value u64 
    setargs                   1 0
    push           mm_start.do_option.value u64 
    callfn         &strlen    i64 
    pushptroff                u8 1 -1
    push           92         i64 
    setjumpeq      #11989     u64 
    push           47         i64 
    setjumpeqx     #11989     u64 
    setargs                   3 0
    push           ""         u64 
    push           ""         u64 
    push           "Path needs to end with \\ or /" u64 
    callproc       &mm_support.loaderror 
#11989: 
    setargs                   1 0
    push           mm_start.do_option.value u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    pop            mm_decls.destfilepath u64 
    push           1          i64 
    pop            mm_start.do_option.outpathused u8 
    jump           #11986     
#11985: 
    push           1          i64 
    pop            mm_decls.fcheckunusedlocals u8 
    jump           #11986     
#11966: 
    push           1          i64 
    pop            mm_decls.fshowast1 u8 
    jump           #11986     
#11967: 
    push           1          i64 
    pop            mm_decls.fshowast2 u8 
    jump           #11986     
#11968: 
    push           1          i64 
    pop            mm_decls.fshowast3 u8 
    jump           #11986     
#11969: 
    push           1          i64 
    pop            mm_decls.fshowpcl u8 
    jump           #11986     
#11970: 
    push           1          i64 
    pop            mm_decls.fshowasm u8 
    jump           #11986     
#11971: 
    push           1          i64 
    pop            mm_decls.fshowst u8 
    jump           #11986     
#11972: 
    push           1          i64 
    pop            mm_tables.fshowpst u8 
    jump           #11986     
#11973: 
    push           1          i64 
    pop            mm_decls.fshowstflat u8 
    jump           #11986     
#11974: 
    push           1          i64 
    pop            mm_decls.fshowtypes u8 
    jump           #11986     
#11975: 
    push           1          i64 
    pop            mm_decls.fshowoverloads u8 
    jump           #11986     
#11976: 
    push           1          i64 
    pop            mm_decls.fshowss u8 
    jump           #11986     
#11940: 
#11986: 
#11990: 
    retproc                   
End


Proc mm_start.showcaption:
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Mosaic/'M' Compiler" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "5-Oct-2021" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "00:27:49" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#11992: 
    retproc                   
End


Proc mm_start.showstflat:
    param          mm_start.showstflat.caption u64 
    param          mm_start.showstflat.f u64 
    procentry                 
    setargs                   1 0
    push           mm_start.showstflat.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "PROC"     u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_start.showstflat.caption u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           mm_start.showstflat.f u64 
    callproc       &mm_diags.printstflat 
    setargs                   1 0
    push           mm_start.showstflat.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#11994: 
    retproc                   
End


Proc mm_start.showsttree:
    param          mm_start.showsttree.caption u64 
    param          mm_start.showsttree.f u64 
    procentry                 
    setargs                   1 0
    push           mm_start.showsttree.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "PROC"     u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_start.showsttree.caption u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   3 0
    push           0          i64 
    push           mm_decls.stprogram u64 
    push           mm_start.showsttree.f u64 
    callproc       &mm_diags.printst 
    setargs                   1 0
    push           mm_start.showsttree.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#11996: 
    retproc                   
End


Proc mm_start.showhelp:
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mm_start.showhelp.helptext u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#11998: 
    retproc                   
End


Proc mm_start.showast:
    param          mm_start.showast.filename u64 
    local          mm_start.showast.f u64 
    procentry                 
    setargs                   2 0
    push           "w"        u64 
    push           mm_start.showast.filename u64 
    callfn         &fopen     u64 
    pop            mm_start.showast.f u64 
    push           mm_start.showast.f u64 
    jumptrue       #12000     u64 
    jump           #12001     
#12000: 
    setargs                   1 0
    push           mm_start.showast.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "PROC"     u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_start.showast.filename u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           ""         u64 
    push           mm_start.showast.f u64 
    callproc       &mm_diags.printcode 
    setargs                   1 0
    push           mm_start.showast.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           mm_start.showast.f u64 
    callproc       &fclose    
#12001: 
    retproc                   
End


Proc mm_start.domapmodule:
    local          mm_start.domapmodule.genname block:256 
    local          mm_start.domapmodule.actualname block:256 
    local          mm_start.domapmodule.optionname block:256 
    local          mm_start.domapmodule.valuename block:256 
    local          mm_start.domapmodule.cond i64 
    local          mm_start.domapmodule.option i64 
    procentry                 
    setargs                   1 0
    push           &mm_start.domapmodule.genname 
    callproc       &mm_start.getpsname 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           11         i64 
    jumpeq         #12003     i64 
    setargs                   1 0
    push           "=> expected" u64 
    callproc       &mlibp.abortprogram 
#12003: 
    setargs                   1 0
    push           &mm_start.domapmodule.actualname 
    callproc       &mm_start.getpsname 
    push           0          i64 
    pop            mm_start.domapmodule.cond i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           109        i64 
    jumpne         #12004     i64 
    setargs                   1 0
    push           &mm_start.domapmodule.optionname 
    callproc       &mm_start.getpsname 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           46         i64 
    jumpne         #12005     i64 
    setargs                   1 0
    push           &mm_start.domapmodule.valuename 
    callproc       &mm_start.getpsname 
    jump           #12006     
#12005: 
    setargs                   2 0
    push           "1"        u64 
    push           &mm_start.domapmodule.valuename 
    callproc       &strcpy    
#12006: 
    push           1          i64 
    pop            mm_start.domapmodule.cond i64 
#12004: 
    jump           #12007     
#12008: 
    setargs                   0 0
    callproc       &mm_lex.lex 
#12007: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           6          i64 
    setjumpeq      #12009     i64 
    push           66         i64 
    setjumpne      #12008     i64 
#12009: 
#12010: 
    push           mm_start.domapmodule.cond i64 
    jumpfalse      #12011     i64 
    setargs                   4 0
    push           &mm_start.domapmodule.valuename 
    push           &mm_start.domapmodule.optionname 
    push           &mm_start.domapmodule.actualname 
    push           &mm_start.domapmodule.genname 
    callproc       &mm_start.addmodulemapping 
    jump           #12012     
#12011: 
    setargs                   4 0
    push           0          u64 
    push           0          u64 
    push           &mm_start.domapmodule.actualname 
    push           &mm_start.domapmodule.genname 
    callproc       &mm_start.addmodulemapping 
#12012: 
#12013: 
    retproc                   
End


Proc mm_start.mapimport: u64
    param          mm_start.mapimport.name u64 
    local          mm_start.mapimport.i i64 
    procentry                 
#12015: 
    push           1          i64 
    pop            mm_start.mapimport.i i64 
    push           mm_decls.nmodulemap i64 
    push           1          i64 
    jumplt         #12016     i64 
#12017: 
    setargs                   2 0
    push           &mm_decls.genericmodules 
    push           mm_start.mapimport.i i64 
    pushptroff                u64 8 -8
    push           mm_start.mapimport.name u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #12018     i64 
    push           &mm_decls.actualmodules 
    push           mm_start.mapimport.i i64 
    pushptroff                u64 8 -8
    setret                    u64 
    jump           #12019     
#12018: 
#12020: 
    forup          #12017     i64 1
    opnd           mm_start.mapimport.i 
    opnd           mm_decls.nmodulemap 
#12016: 
    push           mm_start.mapimport.name u64 
    setret                    u64 
    jump           #12019     
#12019: 
    retfn                     u64 
End


Proc mm_start.getpsname:
    param          mm_start.getpsname.dest u64 
    procentry                 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           79         i64 
    casejumpeq     #12022     i64 0
    push           75         i64 
    casejumpeq     #12023     i64 0
    push           70         i64 
    casejumpeq     #12024     i64 0
    popstack                  i64 
    jump           #12025     
#12022: 
    setargs                   2 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    pushptr                   u64 
    push           mm_start.getpsname.dest u64 
    callproc       &strcpy    
    jump           #12026     
#12023: 
    setargs                   2 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           mm_start.getpsname.dest u64 
    callproc       &strcpy    
    jump           #12026     
#12024: 
    setargs                   2 0
    push           0          u64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                i64 1 0
    callfn         &msysp.strint u64 
    push           &mm_decls.lx 
    push           8          
    popptroff                 u64 1 0
    jump           #12026     
#12025: 
    setargs                   1 0
    push           "map1"     u64 
    callproc       &mlibp.abortprogram 
#12026: 
    setargs                   0 0
    callproc       &mm_lex.lex 
#12027: 
    retproc                   
End


Proc mm_start.addmodulemapping:
    param          mm_start.addmodulemapping.old u64 
    param          mm_start.addmodulemapping.newx u64 
    param          mm_start.addmodulemapping.optionname u64 
    param          mm_start.addmodulemapping.valuename u64 
    local          mm_start.addmodulemapping.option i64 
    local          mm_start.addmodulemapping.i i64 
    procentry                 
    push           mm_start.addmodulemapping.optionname u64 
    jumpfalse      #12029     u64 
    setargs                   1 0
    push           mm_start.addmodulemapping.optionname u64 
    callfn         &mm_start.findoptionvar i64 
    pop            mm_start.addmodulemapping.option i64 
    push           mm_start.addmodulemapping.option i64 
    jumpfalse      #12030     i64 
    setargs                   2 0
    push           &mm_start.optionvars 
    push           mm_start.addmodulemapping.option i64 
    pushptroff                u64 8 -8
    push           mm_start.addmodulemapping.optionname u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #12031     i64 
    setargs                   2 0
    push           mm_start.addmodulemapping.valuename u64 
    push           &mm_start.optionvalues 
    push           mm_start.addmodulemapping.option i64 
    pushptroff                u64 8 -8
    callfn         &mlibp.eqstring i64 
    jumptrue       #12032     i64 
    jump           #12033     
#12032: 
#12031: 
    jump           #12034     
#12030: 
    jump           #12033     
#12034: 
#12029: 
    push           mm_decls.nmodulemap i64 
    push           25         i64 
    jumplt         #12035     i64 
    setargs                   1 0
    push           "Too many module mappings" u64 
    callproc       &mlibp.abortprogram 
#12035: 
#12036: 
    push           1          i64 
    pop            mm_start.addmodulemapping.i i64 
    push           mm_decls.nmodulemap i64 
    push           1          i64 
    jumplt         #12037     i64 
#12038: 
    setargs                   2 0
    push           &mm_decls.genericmodules 
    push           mm_start.addmodulemapping.i i64 
    pushptroff                u64 8 -8
    push           mm_start.addmodulemapping.old u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #12039     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mm_start.addmodulemapping.old u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Dupl module mapping" u64 
    callproc       &mlibp.abortprogram 
#12039: 
#12040: 
    forup          #12038     i64 1
    opnd           mm_start.addmodulemapping.i 
    opnd           mm_decls.nmodulemap 
#12037: 
    setargs                   1 0
    push           mm_start.addmodulemapping.old u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &mm_decls.genericmodules 
    push           &mm_decls.nmodulemap 
    incrload                  i64 1
    popptroff                 u64 8 -8
    setargs                   1 0
    push           mm_start.addmodulemapping.newx u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &mm_decls.actualmodules 
    push           mm_decls.nmodulemap i64 
    popptroff                 u64 8 -8
#12033: 
    retproc                   
End


Proc mm_start.addoptionvar:
    param          mm_start.addoptionvar.name u64 
    param          mm_start.addoptionvar.value u64 
    local          mm_start.addoptionvar.i i64 
    procentry                 
    push           mm_start.noptionvars i64 
    push           25         i64 
    jumplt         #12042     i64 
    setargs                   1 0
    push           "Too many option vars" u64 
    callproc       &mlibp.abortprogram 
#12042: 
#12043: 
    push           1          i64 
    pop            mm_start.addoptionvar.i i64 
    push           mm_start.noptionvars i64 
    push           1          i64 
    jumplt         #12044     i64 
#12045: 
    setargs                   2 0
    push           &mm_start.optionvars 
    push           mm_start.addoptionvar.i i64 
    pushptroff                u64 8 -8
    push           mm_start.addoptionvar.name u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #12046     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mm_start.addoptionvar.name u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Dupl optionvar" u64 
    callproc       &mlibp.abortprogram 
#12046: 
#12047: 
    forup          #12045     i64 1
    opnd           mm_start.addoptionvar.i 
    opnd           mm_start.noptionvars 
#12044: 
    setargs                   1 0
    push           mm_start.addoptionvar.name u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &mm_start.optionvars 
    push           &mm_start.noptionvars 
    incrload                  i64 1
    popptroff                 u64 8 -8
    push           mm_start.addoptionvar.value u64 
    push           0          u64 
    jumpne         #12048     u64 
    push           "1"        u64 
    push           &mm_start.optionvalues 
    push           mm_start.noptionvars i64 
    popptroff                 u64 8 -8
    jump           #12049     
#12048: 
    setargs                   1 0
    push           mm_start.addoptionvar.value u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &mm_start.optionvalues 
    push           mm_start.noptionvars i64 
    popptroff                 u64 8 -8
#12049: 
#12050: 
    retproc                   
End


Proc mm_start.findoptionvar: i64
    param          mm_start.findoptionvar.name u64 
    local          mm_start.findoptionvar.i i64 
    procentry                 
#12052: 
    push           1          i64 
    pop            mm_start.findoptionvar.i i64 
    push           mm_start.noptionvars i64 
    push           1          i64 
    jumplt         #12053     i64 
#12054: 
    setargs                   2 0
    push           &mm_start.optionvars 
    push           mm_start.findoptionvar.i i64 
    pushptroff                u64 8 -8
    push           mm_start.findoptionvar.name u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #12055     i64 
    push           mm_start.findoptionvar.i i64 
    setret                    i64 
    jump           #12056     
#12055: 
#12057: 
    forup          #12054     i64 1
    opnd           mm_start.findoptionvar.i 
    opnd           mm_start.noptionvars 
#12053: 
    push           0          i64 
    setret                    i64 
    jump           #12056     
#12056: 
    retfn                     i64 
End


Proc mm_start.initassemsymbols:
    local          mm_start.initassemsymbols.str block:32 
    local          mm_start.initassemsymbols.i i64 
    local          mm_start.initassemsymbols.av_1 i64 
    local          mm_start.initassemsymbols.av_2 i64 
    local          mm_start.initassemsymbols.av_3 i64 
    local          mm_start.initassemsymbols.av_4 i64 
    local          mm_start.initassemsymbols.av_5 i64 
    local          mm_start.initassemsymbols.av_6 i64 
    local          mm_start.initassemsymbols.av_7 i64 
    local          mm_start.initassemsymbols.av_8 i64 
    local          mm_start.initassemsymbols.av_9 i64 
    procentry                 
#12059: 
    push           1          i64 
    pop            mm_start.initassemsymbols.i i64 
    push           148        i64 
    pop            mm_start.initassemsymbols.av_1 i64 
    push           mm_start.initassemsymbols.av_1 i64 
    push           1          i64 
    jumplt         #12060     i64 
#12061: 
    setargs                   4 0
    push           0          i64 
    push           mm_start.initassemsymbols.i i64 
    push           90         i64 
    push           &pci_mcl.mclnames 
    push           mm_start.initassemsymbols.i i64 
    pushptroff                u64 8 -8
    push           2          i64 
    addrefoff                 u64 1 0
    callproc       &mm_lex.addreservedword 
#12062: 
    forup          #12061     i64 1
    opnd           mm_start.initassemsymbols.i 
    opnd           mm_start.initassemsymbols.av_1 
#12060: 
#12063: 
    push           1          i64 
    pop            mm_start.initassemsymbols.i i64 
    push           136        i64 
    pop            mm_start.initassemsymbols.av_2 i64 
    push           mm_start.initassemsymbols.av_2 i64 
    push           1          i64 
    jumplt         #12064     i64 
#12065: 
    setargs                   4 0
    push           &pci_mcl.regsizes 
    push           mm_start.initassemsymbols.i i64 
    pushptroff                u8 1 -1
    push           &pci_mcl.regindices 
    push           mm_start.initassemsymbols.i i64 
    pushptroff                u8 1 -1
    push           82         i64 
    push           &pci_mcl.dregnames 
    push           mm_start.initassemsymbols.i i64 
    pushptroff                u64 8 -8
    callproc       &mm_lex.addreservedword 
#12066: 
    forup          #12065     i64 1
    opnd           mm_start.initassemsymbols.i 
    opnd           mm_start.initassemsymbols.av_2 
#12064: 
#12067: 
    push           1          i64 
    pop            mm_start.initassemsymbols.i i64 
    push           16         i64 
    pop            mm_start.initassemsymbols.av_3 i64 
    push           mm_start.initassemsymbols.av_3 i64 
    push           1          i64 
    jumplt         #12068     i64 
#12069: 
    setargs                   4 0
    push           0          i64 
    push           mm_start.initassemsymbols.i i64 
    push           83         i64 
    push           &pci_mcl.xmmregnames 
    push           mm_start.initassemsymbols.i i64 
    pushptroff                u64 8 -8
    callproc       &mm_lex.addreservedword 
#12070: 
    forup          #12069     i64 1
    opnd           mm_start.initassemsymbols.i 
    opnd           mm_start.initassemsymbols.av_3 
#12068: 
#12071: 
    push           1          i64 
    pop            mm_start.initassemsymbols.i i64 
    push           8          i64 
    pop            mm_start.initassemsymbols.av_4 i64 
    push           mm_start.initassemsymbols.av_4 i64 
    push           1          i64 
    jumplt         #12072     i64 
#12073: 
    setargs                   4 0
    push           0          i64 
    push           mm_start.initassemsymbols.i i64 
    push           84         i64 
    push           &pci_mcl.fregnames 
    push           mm_start.initassemsymbols.i i64 
    pushptroff                u64 8 -8
    callproc       &mm_lex.addreservedword 
#12074: 
    forup          #12073     i64 1
    opnd           mm_start.initassemsymbols.i 
    opnd           mm_start.initassemsymbols.av_4 
#12072: 
#12075: 
    push           1          i64 
    pop            mm_start.initassemsymbols.i i64 
    push           8          i64 
    pop            mm_start.initassemsymbols.av_5 i64 
    push           mm_start.initassemsymbols.av_5 i64 
    push           1          i64 
    jumplt         #12076     i64 
#12077: 
    setargs                   4 0
    push           0          i64 
    push           mm_start.initassemsymbols.i i64 
    push           85         i64 
    push           &pci_mcl.mregnames 
    push           mm_start.initassemsymbols.i i64 
    pushptroff                u64 8 -8
    callproc       &mm_lex.addreservedword 
#12078: 
    forup          #12077     i64 1
    opnd           mm_start.initassemsymbols.i 
    opnd           mm_start.initassemsymbols.av_5 
#12076: 
#12079: 
    push           1          i64 
    pop            mm_start.initassemsymbols.i i64 
    push           16         i64 
    pop            mm_start.initassemsymbols.av_6 i64 
    push           mm_start.initassemsymbols.av_6 i64 
    push           1          i64 
    jumplt         #12080     i64 
#12081: 
    setargs                   4 0
    push           0          i64 
    push           &pci_mcl.jmpcccodes 
    push           mm_start.initassemsymbols.i i64 
    pushptroff                u8 1 -1
    push           86         i64 
    push           &pci_mcl.jmpccnames 
    push           mm_start.initassemsymbols.i i64 
    pushptroff                u64 8 -8
    callproc       &mm_lex.addreservedword 
#12082: 
    forup          #12081     i64 1
    opnd           mm_start.initassemsymbols.i 
    opnd           mm_start.initassemsymbols.av_6 
#12080: 
#12083: 
    push           1          i64 
    pop            mm_start.initassemsymbols.i i64 
    push           16         i64 
    pop            mm_start.initassemsymbols.av_7 i64 
    push           mm_start.initassemsymbols.av_7 i64 
    push           1          i64 
    jumplt         #12084     i64 
#12085: 
    setargs                   4 0
    push           0          i64 
    push           &pci_mcl.setcccodes 
    push           mm_start.initassemsymbols.i i64 
    pushptroff                u8 1 -1
    push           87         i64 
    push           &pci_mcl.setccnames 
    push           mm_start.initassemsymbols.i i64 
    pushptroff                u64 8 -8
    callproc       &mm_lex.addreservedword 
#12086: 
    forup          #12085     i64 1
    opnd           mm_start.initassemsymbols.i 
    opnd           mm_start.initassemsymbols.av_7 
#12084: 
#12087: 
    push           1          i64 
    pop            mm_start.initassemsymbols.i i64 
    push           16         i64 
    pop            mm_start.initassemsymbols.av_8 i64 
    push           mm_start.initassemsymbols.av_8 i64 
    push           1          i64 
    jumplt         #12088     i64 
#12089: 
    setargs                   4 0
    push           0          i64 
    push           &pci_mcl.cmovcccodes 
    push           mm_start.initassemsymbols.i i64 
    pushptroff                u8 1 -1
    push           88         i64 
    push           &pci_mcl.cmovccnames 
    push           mm_start.initassemsymbols.i i64 
    pushptroff                u64 8 -8
    callproc       &mm_lex.addreservedword 
#12090: 
    forup          #12089     i64 1
    opnd           mm_start.initassemsymbols.i 
    opnd           mm_start.initassemsymbols.av_8 
#12088: 
#12091: 
    push           1          i64 
    pop            mm_start.initassemsymbols.i i64 
    push           5          i64 
    pop            mm_start.initassemsymbols.av_9 i64 
    push           mm_start.initassemsymbols.av_9 i64 
    push           1          i64 
    jumplt         #12092     i64 
#12093: 
    setargs                   2 0
    push           &pci_mcl.segmentnames 
    push           mm_start.initassemsymbols.i i64 
    pushptroff                u64 8 0
    push           &mm_start.initassemsymbols.str 
    callproc       &strcpy    
    push           0          u64 
    push           &mm_start.initassemsymbols.str 
    setargs                   1 0
    push           &mm_start.initassemsymbols.str 
    callfn         &strlen    i64 
    popptroff                 u8 1 -4
    setargs                   4 0
    push           0          i64 
    push           mm_start.initassemsymbols.i i64 
    push           89         i64 
    setargs                   1 0
    push           &mm_start.initassemsymbols.str 
    callfn         &mlibp.pcm_copyheapstring u64 
    callproc       &mm_lex.addreservedword 
#12094: 
    forup          #12093     i64 1
    opnd           mm_start.initassemsymbols.i 
    opnd           mm_start.initassemsymbols.av_9 
#12092: 
    setargs                   4 0
    push           4          i64 
    push           15         i64 
    push           82         i64 
    push           "aframe"   u64 
    callproc       &mm_lex.addreservedword 
    setargs                   4 0
    push           8          i64 
    push           15         i64 
    push           82         i64 
    push           "dframe"   u64 
    callproc       &mm_lex.addreservedword 
    setargs                   4 0
    push           4          i64 
    push           16         i64 
    push           82         i64 
    push           "astack"   u64 
    callproc       &mm_lex.addreservedword 
    setargs                   4 0
    push           8          i64 
    push           16         i64 
    push           82         i64 
    push           "dstack"   u64 
    callproc       &mm_lex.addreservedword 
    setargs                   4 0
    push           8          i64 
    push           9          i64 
    push           82         i64 
    push           "dprog"    u64 
    callproc       &mm_lex.addreservedword 
    setargs                   4 0
    push           8          i64 
    push           10         i64 
    push           82         i64 
    push           "dsptr"    u64 
    callproc       &mm_lex.addreservedword 
#12095: 
    retproc                   
End


Proc mm_start.showmodules:
    local          mm_start.showmodules.i i64 
    local          mm_start.showmodules.k i64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Modules:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_decls.nmodules i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#12097: 
    push           1          i64 
    pop            mm_start.showmodules.i i64 
    push           mm_decls.nmodules i64 
    push           1          i64 
    jumplt         #12098     i64 
#12099: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &mm_decls.moduletable 
    push           mm_start.showmodules.i i64 
    addrefoff                 block:456 456 0
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_decls.sourcefilepaths 
    push           &mm_decls.moduletable 
    push           mm_start.showmodules.i i64 
    addrefoff                 block:456 456 0
    push           16         
    pushptroff                i64 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_space 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "                 " u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#12100: 
    push           1          i64 
    pop            mm_start.showmodules.k i64 
    push           mm_decls.nmodules i64 
    push           1          i64 
    jumplt         #12101     i64 
#12102: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "# "       u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           &mm_decls.moduletable 
    push           mm_start.showmodules.i i64 
    addrefoff                 block:456 456 0
    push           40         
    addrefoff                 u64 1 0
    push           mm_start.showmodules.k i64 
    pushptroff                u8 1 -1
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#12103: 
    forup          #12102     i64 1
    opnd           mm_start.showmodules.k 
    opnd           mm_decls.nmodules 
#12101: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#12104: 
    push           1          i64 
    pop            mm_start.showmodules.k i64 
    push           mm_decls.nmodules i64 
    push           1          i64 
    jumplt         #12105     i64 
#12106: 
    push           &mm_decls.moduletable 
    push           mm_start.showmodules.i i64 
    addrefoff                 block:456 456 0
    push           40         
    addrefoff                 u64 1 0
    push           mm_start.showmodules.k i64 
    pushptroff                u8 1 -1
    jumpfalse      #12107     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\t\t"     u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_decls.moduletable 
    push           mm_start.showmodules.k i64 
    addrefoff                 block:456 456 0
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#12107: 
#12108: 
    forup          #12106     i64 1
    opnd           mm_start.showmodules.k 
    opnd           mm_decls.nmodules 
#12105: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#12109: 
    forup          #12099     i64 1
    opnd           mm_start.showmodules.i 
    opnd           mm_decls.nmodules 
#12098: 
#12110: 
    retproc                   
End


Proc mm_start.do_writema:
    procentry                 
    push           mm_decls.fwritema u8 
    jumpfalse      #12112     i64 
    push           mm_decls.fbundled u8 
    jumpfalse      #12113     i64 
    setargs                   3 0
    push           ""         u64 
    push           ""         u64 
    push           "-ma used with .ma input" u64 
    callproc       &mm_support.loaderror 
#12113: 
    setargs                   2 0
    push           mm_decls.mafilename u64 
    push           &mm_decls.inputfiles 
    push           1          i64 
    pushptroff                u64 8 0
    callproc       &mm_support.writemafile 
    push           0          
    stop                      
#12112: 
#12114: 
    retproc                   
End


Proc mm_start.do_writeexports:
    param          mm_start.do_writeexports.expfile u64 
    local          mm_start.do_writeexports.str block:300 
    procentry                 
    push           mm_decls.fwriteexports u8 
    jumptrue       #12116     i64 
    push           mm_decls.passlevel i64 
    push           11         i64 
    jumpeq         #12116     i64 
    jump           #12117     
#12116: 
    setargs                   2 0
    push           &mm_decls.moduletable 
    push           1          i64 
    addrefoff                 block:456 456 0
    pushptr                   u64 
    push           mm_decls.expfilename u64 
    callproc       &mm_export.writeexports 
    push           mm_decls.fwriteexports u8 
    jumpfalse      #12118     i64 
    push           0          
    stop                      
#12118: 
#12117: 
    retproc                   
End


Proc mm_start.starttimer:
    procentry                 
    setargs                   0 0
    callfn         &clock     i32 
    pop            mm_start.starttimer.tt i64 
#12120: 
    retproc                   
End


Proc mm_start.stoptimer:
    param          mm_start.stoptimer.mess u64 
    local          mm_start.stoptimer.newtt i64 
    procentry                 
    setargs                   0 0
    callfn         &clock     i32 
    pop            mm_start.stoptimer.newtt i64 
#12122: 
    retproc                   
End


Proc mm_start.do_runprog:
    local          mm_start.do_runprog.str block:300 
    local          mm_start.do_runprog.i i64 
    procentry                 
    setargs                   2 0
    push           mm_decls.outfile u64 
    push           &mm_start.do_runprog.str 
    callproc       &strcpy    
#12124: 
    push           1          i64 
    pop            mm_start.do_runprog.i i64 
    push           mm_start.nextraparams i64 
    push           1          i64 
    jumplt         #12125     i64 
#12126: 
    setargs                   2 0
    push           " "        u64 
    push           &mm_start.do_runprog.str 
    callproc       &strcat    
    setargs                   2 0
    push           &mm_start.extraparams 
    push           mm_start.do_runprog.i i64 
    pushptroff                u64 8 -8
    push           &mm_start.do_runprog.str 
    callproc       &strcat    
    push           &mm_start.extravalues 
    push           mm_start.do_runprog.i i64 
    pushptroff                u64 8 -8
    jumpfalse      #12127     u64 
    setargs                   2 0
    push           ":"        u64 
    push           &mm_start.do_runprog.str 
    callproc       &strcat    
    setargs                   2 0
    push           &mm_start.extravalues 
    push           mm_start.do_runprog.i i64 
    pushptroff                u64 8 -8
    push           &mm_start.do_runprog.str 
    callproc       &strcat    
#12127: 
#12128: 
    forup          #12126     i64 1
    opnd           mm_start.do_runprog.i 
    opnd           mm_start.nextraparams 
#12125: 
    setargs                   3 0
    push           0          u64 
    push           0          i64 
    push           &mm_start.do_runprog.str 
    callproc       &mwindowsp.os_execwait 
#12129: 
    retproc                   
End


Proc mm_start.dostarimports:
    local          mm_start.dostarimports.pm u64 
    local          mm_start.dostarimports.m i64 
    local          mm_start.dostarimports.star i64 
    local          mm_start.dostarimports.i i64 
    local          mm_start.dostarimports.k i64 
    local          mm_start.dostarimports.j i64 
    procentry                 
#12131: 
    push           1          i64 
    pop            mm_start.dostarimports.i i64 
    push           mm_decls.nmodules i64 
    push           1          i64 
    jumplt         #12132     i64 
#12133: 
#12134: 
    push           1          i64 
    pop            mm_start.dostarimports.k i64 
    push           mm_decls.nmodules i64 
    push           1          i64 
    jumplt         #12135     i64 
#12136: 
    push           &mm_decls.moduletable 
    push           mm_start.dostarimports.i i64 
    addrefoff                 block:456 456 0
    push           40         
    addrefoff                 u64 1 0
    push           mm_start.dostarimports.k i64 
    pushptroff                u8 1 -1
    jumpfalse      #12137     i64 
    push           &mm_decls.moduletable 
    push           mm_start.dostarimports.i i64 
    addrefoff                 block:456 456 0
    push           240        
    addrefoff                 u64 1 0
    push           mm_start.dostarimports.k i64 
    pushptroff                u8 1 -1
    jumpfalse      #12137     i64 
    push           &mm_decls.moduletable 
    push           mm_start.dostarimports.k i64 
    addrefoff                 block:456 456 0
    pop            mm_start.dostarimports.pm u64 
#12138: 
    push           1          i64 
    pop            mm_start.dostarimports.j i64 
    push           mm_decls.nmodules i64 
    push           1          i64 
    jumplt         #12139     i64 
#12140: 
    push           mm_start.dostarimports.pm u64 
    push           40         
    addrefoff                 u64 1 0
    push           mm_start.dostarimports.j i64 
    pushptroff                u8 1 -1
    jumpfalse      #12141     i64 
    push           1          i64 
    push           &mm_decls.moduletable 
    push           mm_start.dostarimports.i i64 
    addrefoff                 block:456 456 0
    push           40         
    addrefoff                 u64 1 0
    push           mm_start.dostarimports.j i64 
    popptroff                 u8 1 -1
#12141: 
#12142: 
    forup          #12140     i64 1
    opnd           mm_start.dostarimports.j 
    opnd           mm_decls.nmodules 
#12139: 
    push           &mm_decls.moduletable 
    push           mm_start.dostarimports.i i64 
    addrefoff                 block:456 456 0
    push           40         
    addrefoff                 u64 1 0
    push           mm_start.dostarimports.k i64 
    pushptroff                u8 1 -1
    pop            mm_start.dostarimports.m i64 
    push           &mm_decls.moduletable 
    push           mm_start.dostarimports.i i64 
    addrefoff                 block:456 456 0
    push           240        
    addrefoff                 u64 1 0
    push           mm_start.dostarimports.k i64 
    pushptroff                u8 1 -1
    pop            mm_start.dostarimports.star i64 
#12137: 
#12143: 
    forup          #12136     i64 1
    opnd           mm_start.dostarimports.k 
    opnd           mm_decls.nmodules 
#12135: 
#12144: 
    forup          #12133     i64 1
    opnd           mm_start.dostarimports.i 
    opnd           mm_decls.nmodules 
#12132: 
#12145: 
    retproc                   
End


Proc mm_start.fixstlist:
    param          mm_start.fixstlist.d u64 
    procentry                 
    jump           #12147     
#12148: 
    setargs                   1 0
    push           mm_start.fixstlist.d u64 
    callproc       &mm_start.fixst 
#12149: 
    push           mm_start.fixstlist.d u64 
    push           32         
    pushptroff                u64 1 0
    pop            mm_start.fixstlist.d u64 
#12147: 
    push           mm_start.fixstlist.d u64 
    jumptrue       #12148     u64 
#12150: 
#12151: 
    retproc                   
End


Proc mm_start.fixst:
    param          mm_start.fixst.d u64 
    local          mm_start.fixst.p u64 
    procentry                 
    push           0          u64 
    push           mm_start.fixst.d u64 
    push           24         
    popptroff                 u64 1 0
    push           mm_start.fixst.d u64 
    push           115        
    pushptroff                u8 1 0
    push           4          i64 
    seteq                     i64 
    push           mm_start.fixst.d u64 
    push           92         
    addrefoff                 u64 1 0
    push           7          i64 
    popdotindex               u16 
    push           mm_start.fixst.d u64 
    push           92         
    pushptroff                u16 1 0
    push           13         i64 
    dotindex                  i64 
    jumpfalse      #12153     u64 
    push           mm_start.fixst.d u64 
    push           96         
    pushptroff                u64 1 0
    pop            mm_start.fixst.p u64 
    push           mm_start.fixst.p u64 
    pushptr                   u8 
    push           59         i64 
    jumpne         #12154     i64 
    push           mm_start.fixst.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_start.fixst.p u64 
#12154: 
    push           mm_start.fixst.p u64 
    pushptr                   u8 
    push           3          i64 
    jumpeq         #12155     i64 
    setargs                   1 0
    push           "FIXST@"   u64 
    callproc       &mm_support.serror 
#12155: 
    push           1          u64 
    push           mm_start.fixst.p u64 
    push           16         
    pushptroff                u64 1 0
    push           92         
    addrefoff                 u64 1 0
    push           11         i64 
    popdotindex               u16 
#12153: 
    push           &mm_decls.ttbasetype 
    push           mm_start.fixst.d u64 
    push           72         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           11         i64 
    setjumpeq      #12156     i64 
    push           13         i64 
    setjumpeqx     #12156     i64 
    push           mm_start.fixst.d u64 
    push           92         
    pushptroff                u16 1 0
    push           11         i64 
    dotindex                  i64 
    jumptrue       #12156     u64 
    push           mm_start.fixst.d u64 
    push           92         
    pushptroff                u16 1 0
    push           13         i64 
    dotindex                  i64 
    jumpfalse      #12157     u64 
#12156: 
    push           1          u64 
    push           mm_start.fixst.d u64 
    push           92         
    addrefoff                 u64 1 0
    push           9          i64 
    popdotindex               u16 
#12157: 
    setargs                   1 0
    push           mm_start.fixst.d u64 
    push           16         
    pushptroff                u64 1 0
    callproc       &mm_start.fixstlist 
#12158: 
    retproc                   
End


Proc mm_start.getoutfilename: u64
    param          mm_start.getoutfilename.file u64 
    param          mm_start.getoutfilename.ext u64 
    procentry                 
    setargs                   1 0
    setargs                   2 0
    push           mm_start.getoutfilename.ext u64 
    push           mm_start.getoutfilename.file u64 
    callfn         &mlibp.changeext u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    setret                    u64 
    jump           #12160     
#12160: 
    retfn                     u64 
End


Proc mm_start.do_genpcl:
    local          mm_start.do_genpcl.str block:256 
    procentry                 
    push           mm_decls.passlevel i64 
    push           6          i64 
    jumpge         #12162     i64 
    jump           #12163     
#12162: 
    push           mm_decls.passlevel i64 
    push           6          i64 
    jumpne         #12164     i64 
    setargs                   1 0
    push           0          i64 
    callproc       &mm_genpcl.codegen_pcl 
    jump           #12165     
#12164: 
    push           mm_decls.fdorts u8 
    push           0          i64 
    jumpne         #12166     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "-----NO RTS" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           0          i64 
    callproc       &mm_genpcl.codegen_pcl 
    jump           #12165     
#12166: 
    setargs                   1 0
    push           1          i64 
    callproc       &mm_genpcl.codegen_pcl 
#12165: 
    push           mm_decls.passlevel i64 
    push           6          i64 
    jumpne         #12167     i64 
    push           mm_decls.fnofile u8 
    jumpfalse      #12168     i64 
#12167: 
    push           mm_decls.debugmode i64 
    jumpfalse      #12169     i64 
    push           mm_decls.fshowpcl u8 
    jumpfalse      #12169     i64 
#12168: 
    setargs                   1 0
    push           mm_decls.pclfilename u64 
    callproc       &pc_libpcl.pcl_writepclfile 
#12169: 
    push           mm_decls.passlevel i64 
    push           13         i64 
    casejumpeq     #12170     i64 0
    push           6          i64 
    casejumpeq     #12171     i64 0
    popstack                  i64 
    jump           #12172     
#12170: 
    setargs                   3 0
    push           ""         u64 
    push           ""         u64 
    push           "-Clang not ready" u64 
    callproc       &mm_support.loaderror 
    jump           #12173     
#12171: 
    push           mm_start.fpclexe u8 
    jumpfalse      #12174     i64 
    setargs                   1 0
    push           &mm_start.do_genpcl.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "\\mxp\\pc -exe -rts #" u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           mm_decls.pclfilename u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Running:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_start.do_genpcl.str 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           &mm_start.do_genpcl.str 
    callfn         &system    i32 
    stop                      
#12174: 
    jump           #12163     
    jump           #12173     
#12172: 
#12173: 
    setargs                   1 0
    push           &mm_lib.domcl_assem 
    callproc       &pc_libmcl.pcl_setasmhandler 
    setargs                   1 0
    push           mm_decls.foptim u8 
    callproc       &pc_win64.pcl_genmcl 
    push           mm_decls.passlevel i64 
    push           8          i64 
    jumpne         #12175     i64 
    push           mm_decls.fnofile u8 
    jumpfalse      #12176     i64 
#12175: 
    push           mm_decls.debugmode i64 
    jumpfalse      #12177     i64 
    push           mm_decls.fshowasm u8 
    jumpfalse      #12177     i64 
#12176: 
    setargs                   2 0
    push           0          i64 
    push           mm_decls.asmfilename u64 
    callproc       &pc_win64.pcl_writeasmfile 
#12177: 
    push           mm_decls.passlevel i64 
    push           8          i64 
    casejumpeq     #12178     i64 0
    push           10         i64 
    casejumpeq     #12179     i64 0
    push           11         i64 
    casejumpeq     #12180     i64 0
    push           12         i64 
    casejumpeq     #12181     i64 0
    popstack                  i64 
    jump           #12182     
#12178: 
    push           mm_start.fasmexe u8 
    jumpfalse      #12183     i64 
    setargs                   1 0
    push           &mm_start.do_genpcl.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "aa -exe #" u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           mm_decls.asmfilename u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Running:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_start.do_genpcl.str 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           &mm_start.do_genpcl.str 
    callfn         &system    i32 
    stop                      
#12183: 
    jump           #12184     
#12179: 
    setargs                   2 0
    push           mm_decls.foptim u8 
    push           mm_decls.exefilename u64 
    callproc       &pc_win64.pcl_writeexefile 
    jump           #12184     
#12180: 
    setargs                   2 0
    push           mm_decls.foptim u8 
    push           mm_decls.dllfilename u64 
    callproc       &pc_win64.pcl_writedllfile 
    jump           #12184     
#12181: 
    setargs                   3 0
    push           ""         u64 
    push           ""         u64 
    push           "CAN'T DO RUNEXE" u64 
    callproc       &mm_support.loaderror 
    jump           #12184     
#12182: 
#12184: 
#12163: 
    retproc                   
End


Proc mm_lex.lex:
    local          mm_lex.lex.lena i64 
    local          mm_lex.lex.lenb i64 
    local          mm_lex.lex.p u64 
    procentry                 
    push           mm_decls.nextlx block:16 
    pop            mm_decls.lx block:16 
!reenter::
#12186: 
    setargs                   0 0
    callproc       &mm_lex.lexreadtoken 
!reenter2::
#12187: 
    push           &mm_decls.nextlx 
    pushptr                   u8 
    switch         #12188     46 175
    opnd           #12189     
#12188: 
    switchlabel    #12190     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12191     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12192     
    switchlabel    #12189     
    switchlabel    #12193     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12194     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12195     
    switchlabel    #12196     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12197     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12198     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12198     
    switchlabel    #12198     
    switchlabel    #12198     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12198     
    switchlabel    #12198     
    switchlabel    #12189     
    switchlabel    #12198     
    switchlabel    #12198     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12198     
    switchlabel    #12198     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12198     
    switchlabel    #12198     
    switchlabel    #12189     
    switchlabel    #12198     
    switchlabel    #12198     
    switchlabel    #12198     
    switchlabel    #12189     
    switchlabel    #12198     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12198     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12198     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12198     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12198     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12189     
    switchlabel    #12198     
    endswitch                 
#12198: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           104        i64 
    jumpne         #12199     i64 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    jumpfalse      #12200     i64 
    setargs                   1 0
    push           "end if if?" u64 
    callproc       &mm_support.lxerror 
#12200: 
    push           &mm_decls.nextlx 
    pushptr                   u8 
    push           &mm_decls.lx 
    push           1          
    popptroff                 u8 1 0
    jump           #12186     
#12199: 
    jump           #12201     
#12192: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    setjumpeq      #12202     i64 
    push           14         i64 
    setjumpeq      #12202     i64 
    push           12         i64 
    setjumpne      #12203     i64 
#12202: 
    jump           #12186     
    jump           #12204     
#12203: 
    push           &mm_tables.symboloptypes 
    push           &mm_decls.lx 
    pushptr                   u8 
    pushptroff                u8 1 -1
    push           1          i64 
    jumpne         #12205     i64 
    push           mm_decls.assemmode i64 
    jumptrue       #12205     i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           42         i64 
    setjumpeq      #12205     i64 
    push           41         i64 
    setjumpeqx     #12205     i64 
    jump           #12186     
#12205: 
#12204: 
    push           6          i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    jump           #12201     
#12194: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           75         i64 
    jumpne         #12206     i64 
    setargs                   1 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    callfn         &strlen    i64 
    pop            mm_lex.lex.lena i64 
    setargs                   1 0
    push           &mm_decls.nextlx 
    push           8          
    pushptroff                u64 1 0
    callfn         &strlen    i64 
    pop            mm_lex.lex.lenb i64 
    setargs                   1 0
    push           mm_lex.lex.lena i64 
    push           mm_lex.lex.lenb i64 
    add                       i64 
    push           1          i64 
    add                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            mm_lex.lex.p u64 
    setargs                   3 0
    push           mm_lex.lex.lena u64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           mm_lex.lex.p u64 
    callproc       &memcpy    
    setargs                   3 0
    push           mm_lex.lex.lenb u64 
    push           &mm_decls.nextlx 
    push           8          
    pushptroff                u64 1 0
    push           mm_lex.lex.p u64 
    push           mm_lex.lex.lena i64 
    addrefoff                 u64 1 0
    callproc       &memcpy    
    push           0          u64 
    push           mm_lex.lex.p u64 
    push           mm_lex.lex.lena i64 
    addrefoff                 u64 1 0
    push           mm_lex.lex.lenb i64 
    popptroff                 u8 1 0
    push           mm_lex.lex.p u64 
    push           &mm_decls.lx 
    push           8          
    popptroff                 u64 1 0
#12206: 
    jump           #12201     
#12196: 
    setargs                   1 0
    push           &mm_decls.nextlx 
    push           1          
    pushptroff                u8 1 0
    callfn         &mm_lex.dolexdirective i64 
    jumptrue       #12207     i64 
    jump           #12186     
#12207: 
    jump           #12201     
#12195: 
    push           &mm_decls.nextlx 
    push           1          
    pushptroff                u8 1 0
    push           78         i64 
    jumpne         #12208     i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           70         i64 
    casejumpeq     #12209     i64 0
    push           72         i64 
    casejumpeq     #12210     i64 0
    popstack                  i64 
    jump           #12211     
#12209: 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    push           5          i64 
    setjumpeq      #12212     i64 
    push           3          i64 
    setjumpne      #12213     i64 
#12212: 
    setargs                   1 0
    push           "No suffix on i128/u128" u64 
    callproc       &mm_support.lxerror 
#12213: 
    push           &mm_decls.nextlx 
    push           8          
    pushptroff                u64 1 0
    push           80         
    pushptroff                i32 1 0
    push           2          i64 
    casejumpeq     #12214     i64 0
    push           3          i64 
    casejumpeq     #12215     i64 0
    push           1          i64 
    casejumpeq     #12216     i64 0
    push           4          i64 
    casejumpeq     #12217     i64 0
    push           5          i64 
    casejumpeq     #12218     i64 0
    push           6          i64 
    casejumpeq     #12219     i64 0
    popstack                  i64 
    jump           #12220     
#12214: 
    push           &mm_decls.lx 
    push           8          
    addrefoff                 u64 1 0
    push           1000000    i64 
    multo                     i64 
    jump           #12221     
#12215: 
    push           &mm_decls.lx 
    push           8          
    addrefoff                 u64 1 0
    push           1000000000 i64 
    multo                     i64 
    jump           #12221     
#12216: 
    push           &mm_decls.lx 
    push           8          
    addrefoff                 u64 1 0
    push           1000       i64 
    multo                     i64 
    jump           #12221     
#12217: 
    push           &mm_decls.lx 
    push           8          
    addrefoff                 u64 1 0
    push           1024       i64 
    multo                     i64 
    jump           #12221     
#12218: 
    push           &mm_decls.lx 
    push           8          
    addrefoff                 u64 1 0
    push           1048576    i64 
    multo                     i64 
    jump           #12221     
#12219: 
    push           &mm_decls.lx 
    push           8          
    addrefoff                 u64 1 0
    push           1073741824 i64 
    multo                     i64 
    jump           #12221     
#12220: 
    setargs                   1 0
    push           "Can't do this unit index" u64 
    callproc       &mm_support.lxerror 
#12221: 
    setargs                   1 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    callfn         &mm_lex.setinttype i64 
    push           &mm_decls.lx 
    push           1          
    popptroff                 u8 1 0
    jump           #12186     
    jump           #12222     
#12210: 
    setargs                   1 0
    push           "Unit suffix after float not implem" u64 
    callproc       &mm_support.lxerror 
    jump           #12222     
#12211: 
    push           79         i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
#12222: 
#12208: 
    jump           #12201     
#12197: 
    push           &mm_decls.nextlx 
    push           1          
    pushptroff                u8 1 0
    push           73         i64 
    casejumpeq     #12223     i64 0
    push           105        i64 
    casejumpeq     #12223     i64 0
    push           87         i64 
    casejumpeq     #12224     i64 0
    push           119        i64 
    casejumpeq     #12224     i64 0
    popstack                  i64 
    jump           #12225     
#12223: 
    push           4          i64 
    push           &mm_decls.nextlx 
    push           1          
    popptroff                 u8 1 0
    jump           #12226     
#12224: 
    push           2          i64 
    push           &mm_decls.nextlx 
    push           1          
    popptroff                 u8 1 0
    jump           #12226     
#12225: 
#12226: 
    push           91         i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    jump           #12201     
#12193: 
    push           79         i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    jump           #12201     
#12191: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           54         i64 
    jumpne         #12227     i64 
    push           51         i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    push           114        i64 
    push           &mm_decls.lx 
    push           1          
    popptroff                 u8 1 0
    jump           #12186     
#12227: 
    jump           #12201     
#12190: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           54         i64 
    jumpne         #12228     i64 
    push           47         i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    push           118        i64 
    push           &mm_decls.lx 
    push           1          
    popptroff                 u8 1 0
    jump           #12186     
#12228: 
    jump           #12201     
#12189: 
#12201: 
    push           &mm_decls.nextlx 
    push           4          
    pushptroff                u32 1 0
    push           mm_lex.lxfileno i64 
    push           24         i64 
    shl                       i64 
    ior                       i64 
    push           &mm_decls.nextlx 
    push           4          
    popptroff                 u32 1 0
#12229: 
    retproc                   
End


Proc mm_lex.lexreadtoken:
    local          mm_lex.lexreadtoken.c i64 
    local          mm_lex.lexreadtoken.hsum i64 
    local          mm_lex.lexreadtoken.commentseen i64 
    local          mm_lex.lexreadtoken.hashindex i64 
    local          mm_lex.lexreadtoken.length i64 
    local          mm_lex.lexreadtoken.pstart u64 
    local          mm_lex.lexreadtoken.pnext u64 
    local          mm_lex.lexreadtoken.p u64 
    local          mm_lex.lexreadtoken.ss u64 
    local          mm_lex.lexreadtoken.lxsvalue u64 
    local          mm_lex.lexreadtoken.base i64 
    procentry                 
    push           0          i64 
    push           &mm_decls.nextlx 
    push           1          
    popptroff                 u8 1 0
#12231: 
    push           &mm_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    switch         #12232     0 255
    opnd           #12233     
#12232: 
    switchlabel    #12234     
    switchlabel    #12233     
    switchlabel    #12233     
    switchlabel    #12233     
    switchlabel    #12233     
    switchlabel    #12233     
    switchlabel    #12233     
    switchlabel    #12233     
    switchlabel    #12233     
    switchlabel    #12235     
    switchlabel    #12236     
    switchlabel    #12233     
    switchlabel    #12233     
    switchlabel    #12237     
    switchlabel    #12233     
    switchlabel    #12233     
    switchlabel    #12233     
    switchlabel    #12233     
    switchlabel    #12233     
    switchlabel    #12233     
    switchlabel    #12233     
    switchlabel    #12233     
    switchlabel    #12233     
    switchlabel    #12233     
    switchlabel    #12233     
    switchlabel    #12233     
    switchlabel    #12233     
    switchlabel    #12233     
    switchlabel    #12233     
    switchlabel    #12233     
    switchlabel    #12233     
    switchlabel    #12233     
    switchlabel    #12235     
    switchlabel    #12238     
    switchlabel    #12239     
    switchlabel    #12240     
    switchlabel    #12241     
    switchlabel    #12242     
    switchlabel    #12243     
    switchlabel    #12244     
    switchlabel    #12245     
    switchlabel    #12246     
    switchlabel    #12247     
    switchlabel    #12248     
    switchlabel    #12249     
    switchlabel    #12250     
    switchlabel    #12251     
    switchlabel    #12252     
    switchlabel    #12253     
    switchlabel    #12253     
    switchlabel    #12253     
    switchlabel    #12253     
    switchlabel    #12253     
    switchlabel    #12253     
    switchlabel    #12253     
    switchlabel    #12253     
    switchlabel    #12253     
    switchlabel    #12253     
    switchlabel    #12254     
    switchlabel    #12255     
    switchlabel    #12256     
    switchlabel    #12257     
    switchlabel    #12258     
    switchlabel    #12259     
    switchlabel    #12260     
    switchlabel    #12261     
    switchlabel    #12261     
    switchlabel    #12261     
    switchlabel    #12261     
    switchlabel    #12261     
    switchlabel    #12261     
    switchlabel    #12261     
    switchlabel    #12261     
    switchlabel    #12261     
    switchlabel    #12261     
    switchlabel    #12261     
    switchlabel    #12261     
    switchlabel    #12261     
    switchlabel    #12261     
    switchlabel    #12261     
    switchlabel    #12261     
    switchlabel    #12261     
    switchlabel    #12261     
    switchlabel    #12261     
    switchlabel    #12261     
    switchlabel    #12261     
    switchlabel    #12261     
    switchlabel    #12261     
    switchlabel    #12261     
    switchlabel    #12261     
    switchlabel    #12261     
    switchlabel    #12262     
    switchlabel    #12263     
    switchlabel    #12264     
    switchlabel    #12265     
    switchlabel    #12241     
    switchlabel    #12266     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12267     
    switchlabel    #12268     
    switchlabel    #12269     
    switchlabel    #12270     
    switchlabel    #12233     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12271     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    switchlabel    #12241     
    endswitch                 
#12241: 
    push           mm_lex.lxsptr u64 
    push           1          i64 
    subrefoff                 u64 1 0
    pop            mm_lex.lexreadtoken.lxsvalue u64 
!doname::
#12272: 
    push           mm_lex.lexreadtoken.lxsvalue u64 
    pushptr                   u8 
    pop            mm_lex.lexreadtoken.hsum i64 
#12273: 
    push           &mm_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          mm_lex.lexreadtoken.c i64 
    switch         #12274     34 255
    opnd           #12275     
#12274: 
    switchlabel    #12276     
    switchlabel    #12275     
    switchlabel    #12277     
    switchlabel    #12275     
    switchlabel    #12275     
    switchlabel    #12275     
    switchlabel    #12275     
    switchlabel    #12275     
    switchlabel    #12275     
    switchlabel    #12275     
    switchlabel    #12275     
    switchlabel    #12275     
    switchlabel    #12275     
    switchlabel    #12275     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12275     
    switchlabel    #12275     
    switchlabel    #12275     
    switchlabel    #12275     
    switchlabel    #12275     
    switchlabel    #12275     
    switchlabel    #12275     
    switchlabel    #12278     
    switchlabel    #12278     
    switchlabel    #12278     
    switchlabel    #12278     
    switchlabel    #12278     
    switchlabel    #12278     
    switchlabel    #12278     
    switchlabel    #12278     
    switchlabel    #12278     
    switchlabel    #12278     
    switchlabel    #12278     
    switchlabel    #12278     
    switchlabel    #12278     
    switchlabel    #12278     
    switchlabel    #12278     
    switchlabel    #12278     
    switchlabel    #12278     
    switchlabel    #12278     
    switchlabel    #12278     
    switchlabel    #12278     
    switchlabel    #12278     
    switchlabel    #12278     
    switchlabel    #12278     
    switchlabel    #12278     
    switchlabel    #12278     
    switchlabel    #12278     
    switchlabel    #12275     
    switchlabel    #12275     
    switchlabel    #12275     
    switchlabel    #12275     
    switchlabel    #12277     
    switchlabel    #12275     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12275     
    switchlabel    #12275     
    switchlabel    #12275     
    switchlabel    #12275     
    switchlabel    #12275     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12275     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    switchlabel    #12277     
    endswitch                 
#12277: 
    push           mm_lex.lexreadtoken.hsum i64 
    push           4          i64 
    shl                       i64 
    push           mm_lex.lexreadtoken.hsum i64 
    sub                       i64 
    push           mm_lex.lexreadtoken.c i64 
    add                       i64 
    pop            mm_lex.lexreadtoken.hsum i64 
    jump           #12273     
#12278: 
    push           mm_lex.lexreadtoken.c i64 
    push           32         i64 
    add                       u64 
    push           mm_lex.lxsptr u64 
    push           1          i64 
    subrefoff                 u64 1 0
    popptr                    u8 
    push           mm_lex.lexreadtoken.hsum i64 
    push           4          i64 
    shl                       i64 
    push           mm_lex.lexreadtoken.hsum i64 
    sub                       i64 
    push           mm_lex.lexreadtoken.c i64 
    push           32         i64 
    add                       i64 
    add                       i64 
    pop            mm_lex.lexreadtoken.hsum i64 
    jump           #12273     
#12276: 
    push           &mm_lex.lxsptr 
    decr                      u64 1
    push           mm_lex.lexreadtoken.lxsvalue u64 
    push           1          i64 
    addrefoff                 u64 1 0
    push           mm_lex.lxsptr u64 
    jumpne         #12279     u64 
    push           mm_lex.lexreadtoken.lxsvalue u64 
    pushptr                   u8 
    push           70         u64 
    casejumpeq     #12280     u64 0
    push           102        u64 
    casejumpeq     #12280     u64 0
    push           82         u64 
    casejumpeq     #12280     u64 0
    push           114        u64 
    casejumpeq     #12280     u64 0
    push           65         u64 
    casejumpeq     #12281     u64 0
    push           97         u64 
    casejumpeq     #12281     u64 0
    push           90         u64 
    casejumpeq     #12281     u64 0
    push           122        u64 
    casejumpeq     #12281     u64 0
    popstack                  u64 
    jump           #12282     
#12280: 
    setargs                   0 0
    callproc       &mm_lex.readrawstring 
    jump           #12283     
    jump           #12284     
#12281: 
    setargs                   1 0
    push           mm_lex.lexreadtoken.lxsvalue u64 
    pushptr                   u8 
    callproc       &mm_lex.readarraystring 
    jump           #12283     
    jump           #12284     
#12282: 
#12284: 
#12279: 
    jump           #12285     
    jump           #12273     
#12275: 
    push           &mm_lex.lxsptr 
    decr                      u64 1
    jump           #12285     
    jump           #12273     
#12285: 
    setargs                   3 0
    push           mm_lex.lexreadtoken.hsum i64 
    push           5          i64 
    shl                       i64 
    push           mm_lex.lexreadtoken.hsum i64 
    sub                       i64 
    push           mm_lex.lxsptr u64 
    push           mm_lex.lexreadtoken.lxsvalue u64 
    subref                    i64 1
    push           mm_lex.lexreadtoken.lxsvalue u64 
    callproc       &mm_lex.lookup 
    jump           #12283     
    jump           #12231     
#12261: 
    push           mm_lex.lxsptr u64 
    push           1          i64 
    subrefoff                 u64 1 0
    pop            mm_lex.lexreadtoken.lxsvalue u64 
    push           mm_lex.lexreadtoken.lxsvalue u64 
    push           32         i64 
    addto                     u8 
    jump           #12272     
    jump           #12231     
#12253: 
    push           mm_lex.lxsptr u64 
    push           1          i64 
    subrefoff                 u64 1 0
    pushptr                   u8 
    pop            mm_lex.lexreadtoken.c i64 
    push           mm_lex.lxsptr u64 
    pushptr                   u8 
    push           32         u64 
    casejumpeq     #12286     u64 0
    push           41         u64 
    casejumpeq     #12286     u64 0
    push           13         u64 
    casejumpeq     #12286     u64 0
    push           44         u64 
    casejumpeq     #12286     u64 0
    push           124        u64 
    casejumpeq     #12286     u64 0
    push           120        u64 
    casejumpeq     #12287     u64 0
    push           88         u64 
    casejumpeq     #12287     u64 0
    popstack                  u64 
    jump           #12288     
#12286: 
    push           70         i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    push           4          i64 
    push           &mm_decls.nextlx 
    push           1          
    popptroff                 u8 1 0
    push           mm_lex.lexreadtoken.c i64 
    push           48         i64 
    sub                       i64 
    push           &mm_decls.nextlx 
    push           8          
    popptroff                 i64 1 0
    jump           #12289     
#12287: 
    push           mm_lex.lexreadtoken.c i64 
    push           48         i64 
    casejumpeq     #12290     i64 0
    push           49         i64 
    casejumpeq     #12291     i64 0
    popstack                  i64 
    jump           #12292     
#12290: 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    setargs                   1 0
    push           16         i64 
    callproc       &mm_lex.readnumber 
    jump           #12293     
#12291: 
    setargs                   1 0
    push           "Bad base" u64 
    callproc       &mm_support.lxerror 
    jump           #12293     
#12292: 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    setargs                   1 0
    push           mm_lex.lexreadtoken.c i64 
    push           48         i64 
    sub                       i64 
    callproc       &mm_lex.readnumber 
#12293: 
    jump           #12289     
#12288: 
    push           mm_lex.lexreadtoken.c i64 
    push           49         i64 
    jumpne         #12294     i64 
    push           mm_lex.lxsptr u64 
    pushptr                   u8 
    push           48         u64 
    push           54         u64 
    jumpnotinrange #12294     u64 
    push           mm_lex.lxsptr u64 
    push           1          i64 
    pushptroff                u8 1 0
    push           120        i64 
    setjumpeq      #12295     u64 
    push           88         i64 
    setjumpne      #12294     u64 
#12295: 
    push           mm_lex.lxsptr u64 
    pushptr                   u8 
    push           -38        i64 
    add                       i64 
    pop            mm_lex.lexreadtoken.base i64 
    push           &mm_lex.lxsptr 
    push           2          i64 
    addrefoffto               u64 1 0
    setargs                   1 0
    push           mm_lex.lexreadtoken.base i64 
    callproc       &mm_lex.readnumber 
    jump           #12296     
#12294: 
    push           &mm_lex.lxsptr 
    decr                      u64 1
    setargs                   0 0
    callproc       &mm_lex.readdecimalnumber 
#12296: 
#12289: 
    jump           #12283     
    jump           #12231     
#12238: 
!docomment::
#12297: 
#12298: 
    push           &mm_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          mm_lex.lexreadtoken.c i64 
    switch         #12299     0 13
    opnd           #12300     
#12299: 
    switchlabel    #12301     
    switchlabel    #12300     
    switchlabel    #12300     
    switchlabel    #12300     
    switchlabel    #12300     
    switchlabel    #12300     
    switchlabel    #12300     
    switchlabel    #12300     
    switchlabel    #12300     
    switchlabel    #12300     
    switchlabel    #12302     
    switchlabel    #12300     
    switchlabel    #12300     
    switchlabel    #12303     
    endswitch                 
#12303: 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    jump           #12304     
    jump           #12298     
#12302: 
    jump           #12304     
    jump           #12298     
#12301: 
    push           &mm_lex.lxsptr 
    decr                      u64 1
    jump           #12304     
    jump           #12298     
#12300: 
    jump           #12298     
#12304: 
    push           &mm_decls.nextlx 
    push           4          
    addrefoff                 u64 1 0
    incr                      u32 1
    push           65         i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    jump           #12283     
    jump           #12231     
#12240: 
    push           mm_lex.lxsptr u64 
    pop            mm_lex.lexreadtoken.lxsvalue u64 
#12305: 
    push           &mm_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          mm_lex.lexreadtoken.c i64 
    switch         #12306     0 13
    opnd           #12307     
#12306: 
    switchlabel    #12308     
    switchlabel    #12307     
    switchlabel    #12307     
    switchlabel    #12307     
    switchlabel    #12307     
    switchlabel    #12307     
    switchlabel    #12307     
    switchlabel    #12307     
    switchlabel    #12307     
    switchlabel    #12307     
    switchlabel    #12308     
    switchlabel    #12307     
    switchlabel    #12307     
    switchlabel    #12308     
    endswitch                 
#12308: 
    push           &mm_lex.lxsptr 
    decr                      u64 1
    jump           #12309     
    jump           #12305     
#12307: 
    jump           #12305     
#12309: 
    push           mm_lex.lxsptr u64 
    push           mm_lex.lexreadtoken.lxsvalue u64 
    subref                    i64 1
    pop            mm_lex.lexreadtoken.length i64 
    push           68         i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    setargs                   2 0
    push           mm_lex.lexreadtoken.length i64 
    push           mm_lex.lexreadtoken.lxsvalue u64 
    callfn         &mlibp.pcm_copyheapstringn u64 
    push           &mm_decls.nextlx 
    push           8          
    popptroff                 u64 1 0
    jump           #12283     
    jump           #12231     
#12263: 
    push           0          i64 
    pop            mm_lex.lexreadtoken.commentseen i64 
#12310: 
    push           &mm_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    switch         #12311     0 33
    opnd           #12312     
#12311: 
    switchlabel    #12313     
    switchlabel    #12312     
    switchlabel    #12312     
    switchlabel    #12312     
    switchlabel    #12312     
    switchlabel    #12312     
    switchlabel    #12312     
    switchlabel    #12312     
    switchlabel    #12312     
    switchlabel    #12314     
    switchlabel    #12315     
    switchlabel    #12312     
    switchlabel    #12312     
    switchlabel    #12316     
    switchlabel    #12312     
    switchlabel    #12312     
    switchlabel    #12312     
    switchlabel    #12312     
    switchlabel    #12312     
    switchlabel    #12312     
    switchlabel    #12312     
    switchlabel    #12312     
    switchlabel    #12312     
    switchlabel    #12312     
    switchlabel    #12312     
    switchlabel    #12312     
    switchlabel    #12312     
    switchlabel    #12312     
    switchlabel    #12312     
    switchlabel    #12312     
    switchlabel    #12312     
    switchlabel    #12312     
    switchlabel    #12314     
    switchlabel    #12317     
    endswitch                 
#12316: 
    push           &mm_decls.nextlx 
    push           4          
    addrefoff                 u64 1 0
    incr                      u32 1
    push           &mm_lex.lxsptr 
    incr                      u64 1
    jump           #12318     
    jump           #12310     
#12315: 
    push           &mm_decls.nextlx 
    push           4          
    addrefoff                 u64 1 0
    incr                      u32 1
    jump           #12318     
    jump           #12310     
#12313: 
    push           66         i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    push           &mm_lex.lxsptr 
    decr                      u64 1
    jump           #12283     
    jump           #12310     
#12314: 
    jump           #12310     
#12317: 
    push           1          i64 
    pop            mm_lex.lexreadtoken.commentseen i64 
    jump           #12310     
#12312: 
    push           mm_lex.lexreadtoken.commentseen i64 
    jumptrue       #12319     i64 
    setargs                   1 0
    push           "\\ not followed by eol" u64 
    callproc       &mm_support.lxerror 
#12319: 
    jump           #12310     
#12318: 
#12320: 
    push           &mm_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    switch         #12321     9 32
    opnd           #12322     
#12321: 
    switchlabel    #12323     
    switchlabel    #12324     
    switchlabel    #12322     
    switchlabel    #12322     
    switchlabel    #12325     
    switchlabel    #12322     
    switchlabel    #12322     
    switchlabel    #12322     
    switchlabel    #12322     
    switchlabel    #12322     
    switchlabel    #12322     
    switchlabel    #12322     
    switchlabel    #12322     
    switchlabel    #12322     
    switchlabel    #12322     
    switchlabel    #12322     
    switchlabel    #12322     
    switchlabel    #12322     
    switchlabel    #12322     
    switchlabel    #12322     
    switchlabel    #12322     
    switchlabel    #12322     
    switchlabel    #12322     
    switchlabel    #12323     
    endswitch                 
#12325: 
    push           &mm_decls.nextlx 
    push           4          
    addrefoff                 u64 1 0
    incr                      u32 1
    push           &mm_lex.lxsptr 
    incr                      u64 1
    jump           #12320     
#12324: 
    push           &mm_decls.nextlx 
    push           4          
    addrefoff                 u64 1 0
    incr                      u32 1
    jump           #12320     
#12323: 
    jump           #12320     
#12322: 
    push           &mm_lex.lxsptr 
    decr                      u64 1
    jump           #12326     
    jump           #12320     
#12326: 
    jump           #12231     
#12267: 
    push           16         i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    jump           #12283     
    jump           #12231     
#12269: 
    push           17         i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    jump           #12283     
    jump           #12231     
#12251: 
    push           mm_lex.lxsptr u64 
    pushptr                   u8 
    switch         #12327     46 57
    opnd           #12328     
#12327: 
    switchlabel    #12329     
    switchlabel    #12328     
    switchlabel    #12330     
    switchlabel    #12330     
    switchlabel    #12330     
    switchlabel    #12330     
    switchlabel    #12330     
    switchlabel    #12330     
    switchlabel    #12330     
    switchlabel    #12330     
    switchlabel    #12330     
    switchlabel    #12330     
    endswitch                 
#12329: 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    push           mm_lex.lxsptr u64 
    pushptr                   u8 
    push           46         u64 
    jumpne         #12331     u64 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    push           28         i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    jump           #12332     
#12331: 
    push           27         i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    push           20         i64 
    push           &mm_decls.nextlx 
    push           1          
    popptroff                 u8 1 0
#12332: 
    jump           #12283     
    jump           #12333     
#12330: 
    push           &mm_lex.lxsptr 
    decr                      u64 1
    setargs                   3 0
    push           10         i64 
    push           0          i64 
    push           0          u64 
    callproc       &mm_lex.readrealnumber 
    jump           #12283     
    jump           #12333     
#12328: 
    push           2          i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    jump           #12283     
#12333: 
    jump           #12231     
#12249: 
    push           5          i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    jump           #12283     
    jump           #12231     
#12255: 
    push           6          i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    jump           #12283     
    jump           #12231     
#12254: 
    push           mm_lex.lxsptr u64 
    pushptr                   u8 
    switch         #12334     58 61
    opnd           #12335     
#12334: 
    switchlabel    #12336     
    switchlabel    #12335     
    switchlabel    #12335     
    switchlabel    #12337     
    endswitch                 
#12337: 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    push           9          i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    push           29         i64 
    push           &mm_decls.nextlx 
    push           1          
    popptroff                 u8 1 0
    jump           #12338     
#12336: 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    push           mm_lex.lxsptr u64 
    pushptr                   u8 
    push           61         u64 
    casejumpeq     #12339     u64 0
    popstack                  u64 
    jump           #12340     
#12339: 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    push           10         i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    push           30         i64 
    push           &mm_decls.nextlx 
    push           1          
    popptroff                 u8 1 0
    jump           #12341     
#12340: 
    push           8          i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
#12341: 
    jump           #12338     
#12335: 
    push           7          i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
#12338: 
    jump           #12283     
    jump           #12231     
#12245: 
    push           12         i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    jump           #12283     
    jump           #12231     
#12246: 
    push           13         i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    jump           #12283     
    jump           #12231     
#12262: 
    push           14         i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    jump           #12283     
    jump           #12231     
#12264: 
    push           15         i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    jump           #12283     
    jump           #12231     
#12268: 
    push           mm_lex.lxsptr u64 
    pushptr                   u8 
    push           124        u64 
    jumpne         #12342     u64 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    push           20         i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    jump           #12343     
#12342: 
    push           19         i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
#12343: 
    jump           #12283     
    jump           #12231     
#12265: 
    push           18         i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    jump           #12283     
    jump           #12231     
#12260: 
    push           mm_lex.lxsptr u64 
    pushptr                   u8 
    push           64         u64 
    jumpne         #12344     u64 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    push           22         i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    jump           #12345     
#12344: 
    push           21         i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
#12345: 
    jump           #12283     
    jump           #12231     
#12259: 
    push           23         i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    jump           #12283     
    jump           #12231     
#12270: 
    push           26         i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    jump           #12283     
    jump           #12231     
#12248: 
    push           30         i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    push           mm_lex.lxsptr u64 
    pushptr                   u8 
    push           43         u64 
    jumpne         #12346     u64 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    push           69         i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    push           153        i64 
    push           &mm_decls.nextlx 
    push           1          
    popptroff                 u8 1 0
    jump           #12283     
#12346: 
    jump           #12283     
    jump           #12231     
#12250: 
    push           31         i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    push           mm_lex.lxsptr u64 
    pushptr                   u8 
    push           45         u64 
    jumpne         #12347     u64 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    push           69         i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    push           154        i64 
    push           &mm_decls.nextlx 
    push           1          
    popptroff                 u8 1 0
    jump           #12283     
#12347: 
    jump           #12283     
    jump           #12231     
#12247: 
    push           mm_lex.lxsptr u64 
    pushptr                   u8 
    push           42         u64 
    jumpne         #12348     u64 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    push           48         i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    jump           #12349     
#12348: 
    push           32         i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
#12349: 
    jump           #12283     
    jump           #12231     
#12252: 
    push           33         i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    jump           #12283     
    jump           #12231     
#12242: 
    push           34         i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    jump           #12283     
    jump           #12231     
#12257: 
    push           mm_lex.lxsptr u64 
    pushptr                   u8 
    push           62         u64 
    casejumpeq     #12350     u64 0
    push           61         u64 
    casejumpeq     #12351     u64 0
    popstack                  u64 
    jump           #12352     
#12350: 
    push           11         i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    push           &mm_lex.lxsptr 
    incr                      u64 1
    jump           #12353     
#12351: 
    push           49         i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    push           &mm_lex.lxsptr 
    incr                      u64 1
    jump           #12353     
#12352: 
    push           46         i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    push           117        i64 
    push           &mm_decls.nextlx 
    push           1          
    popptroff                 u8 1 0
#12353: 
    jump           #12283     
    jump           #12231     
#12256: 
    push           47         i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    push           mm_lex.lxsptr u64 
    pushptr                   u8 
    switch         #12354     60 62
    opnd           #12355     
#12354: 
    switchlabel    #12356     
    switchlabel    #12357     
    switchlabel    #12358     
    endswitch                 
#12357: 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    push           120        i64 
    push           &mm_decls.nextlx 
    push           1          
    popptroff                 u8 1 0
    jump           #12359     
#12358: 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    push           118        i64 
    push           &mm_decls.nextlx 
    push           1          
    popptroff                 u8 1 0
    jump           #12359     
#12356: 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    push           39         i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    jump           #12359     
#12355: 
    push           119        i64 
    push           &mm_decls.nextlx 
    push           1          
    popptroff                 u8 1 0
#12359: 
    jump           #12283     
    jump           #12231     
#12258: 
    push           47         i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    push           mm_lex.lxsptr u64 
    pushptr                   u8 
    switch         #12360     61 62
    opnd           #12361     
#12360: 
    switchlabel    #12362     
    switchlabel    #12363     
    endswitch                 
#12362: 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    push           47         i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    push           121        i64 
    push           &mm_decls.nextlx 
    push           1          
    popptroff                 u8 1 0
    jump           #12364     
#12363: 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    push           40         i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    jump           #12364     
#12361: 
    push           47         i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    push           122        i64 
    push           &mm_decls.nextlx 
    push           1          
    popptroff                 u8 1 0
#12364: 
    jump           #12283     
    jump           #12231     
#12243: 
    push           mm_lex.lxsptr u64 
    pushptr                   u8 
    push           46         u64 
    casejumpeq     #12365     u64 0
    popstack                  u64 
    jump           #12366     
#12365: 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    push           4          i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    push           0          i64 
    push           &mm_decls.nextlx 
    push           1          
    popptroff                 u8 1 0
    jump           #12367     
#12366: 
    push           24         i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    push           59         i64 
    push           &mm_decls.nextlx 
    push           1          
    popptroff                 u8 1 0
#12367: 
    jump           #12283     
    jump           #12231     
#12244: 
    setargs                   1 0
    push           39         i64 
    callproc       &mm_lex.lxreadstring 
    jump           #12283     
    jump           #12231     
#12239: 
    setargs                   1 0
    push           34         i64 
    callproc       &mm_lex.lxreadstring 
    jump           #12283     
    jump           #12231     
#12266: 
    setargs                   0 0
    callproc       &mm_lex.readrawxname 
    jump           #12283     
    jump           #12231     
#12235: 
    jump           #12231     
#12237: 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    push           &mm_decls.nextlx 
    push           4          
    addrefoff                 u64 1 0
    incr                      u32 1
    push           65         i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    jump           #12283     
    jump           #12231     
#12236: 
    push           &mm_decls.nextlx 
    push           4          
    addrefoff                 u64 1 0
    incr                      u32 1
    push           65         i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    jump           #12283     
    jump           #12231     
#12234: 
    push           mm_lex.sourcelevel i64 
    jumpfalse      #12368     i64 
    setargs                   0 0
    callproc       &mm_lex.unstacksource 
    jump           #12369     
#12368: 
    push           66         i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    push           &mm_lex.lxsptr 
    decr                      u64 1
    jump           #12283     
#12369: 
    jump           #12231     
#12271: 
    push           &mm_lex.lxsptr 
    push           2          i64 
    addrefoffto               u64 1 0
    jump           #12231     
#12233: 
    push           1          i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    jump           #12283     
    jump           #12231     
#12370: 
#12283: 
    retproc                   
End


Proc mm_lex.readnumber:
    param          mm_lex.readnumber.base i64 
    local          mm_lex.readnumber.pstart u64 
    local          mm_lex.readnumber.dest u64 
    local          mm_lex.readnumber.c i64 
    local          mm_lex.readnumber.p u64 
    procentry                 
    push           mm_lex.lxsptr u64 
    store          mm_lex.readnumber.pstart u64 
    pop            mm_lex.readnumber.dest u64 
    push           mm_lex.readnumber.base i64 
    push           10         i64 
    jumpne         #12372     i64 
#12373: 
    push           &mm_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          mm_lex.readnumber.c i64 
    switch         #12374     39 96
    opnd           #12375     
#12374: 
    switchlabel    #12376     
    switchlabel    #12375     
    switchlabel    #12375     
    switchlabel    #12375     
    switchlabel    #12375     
    switchlabel    #12375     
    switchlabel    #12375     
    switchlabel    #12375     
    switchlabel    #12375     
    switchlabel    #12377     
    switchlabel    #12377     
    switchlabel    #12377     
    switchlabel    #12377     
    switchlabel    #12377     
    switchlabel    #12377     
    switchlabel    #12377     
    switchlabel    #12377     
    switchlabel    #12377     
    switchlabel    #12377     
    switchlabel    #12375     
    switchlabel    #12375     
    switchlabel    #12375     
    switchlabel    #12375     
    switchlabel    #12375     
    switchlabel    #12375     
    switchlabel    #12375     
    switchlabel    #12375     
    switchlabel    #12375     
    switchlabel    #12375     
    switchlabel    #12375     
    switchlabel    #12375     
    switchlabel    #12375     
    switchlabel    #12375     
    switchlabel    #12375     
    switchlabel    #12375     
    switchlabel    #12375     
    switchlabel    #12375     
    switchlabel    #12375     
    switchlabel    #12375     
    switchlabel    #12375     
    switchlabel    #12375     
    switchlabel    #12375     
    switchlabel    #12375     
    switchlabel    #12375     
    switchlabel    #12375     
    switchlabel    #12375     
    switchlabel    #12375     
    switchlabel    #12375     
    switchlabel    #12375     
    switchlabel    #12375     
    switchlabel    #12375     
    switchlabel    #12375     
    switchlabel    #12375     
    switchlabel    #12375     
    switchlabel    #12375     
    switchlabel    #12375     
    switchlabel    #12376     
    switchlabel    #12376     
    endswitch                 
#12377: 
    push           mm_lex.readnumber.c u64 
    push           &mm_lex.readnumber.dest 
    loadincr                  u64 1
    popptr                    u8 
    jump           #12373     
#12376: 
    jump           #12373     
#12375: 
    push           &mm_lex.lxsptr 
    decr                      u64 1
    jump           #12378     
    jump           #12373     
#12378: 
    jump           #12379     
#12372: 
    setargs                   1 0
    push           mm_lex.readnumber.base i64 
    callfn         &mm_lex.scannumber u64 
    pop            mm_lex.readnumber.dest u64 
    push           mm_lex.lxsptr u64 
    pushptr                   u8 
    pop            mm_lex.readnumber.c i64 
#12379: 
    push           mm_lex.readnumber.c i64 
    switch         #12380     46 112
    opnd           #12381     
#12380: 
    switchlabel    #12382     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12383     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12384     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12383     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12381     
    switchlabel    #12384     
    endswitch                 
#12382: 
    push           mm_lex.lxsptr u64 
    push           1          i64 
    pushptroff                u8 1 0
    push           46         u64 
    jumpeq         #12385     u64 
    setargs                   3 0
    push           mm_lex.readnumber.base i64 
    push           mm_lex.readnumber.dest u64 
    push           mm_lex.readnumber.pstart u64 
    subref                    i64 1
    push           mm_lex.readnumber.pstart u64 
    callproc       &mm_lex.readrealnumber 
    jump           #12386     
#12385: 
    jump           #12387     
#12383: 
    push           mm_lex.readnumber.base i64 
    push           15         i64 
    jumpge         #12388     i64 
    setargs                   3 0
    push           mm_lex.readnumber.base i64 
    push           mm_lex.readnumber.dest u64 
    push           mm_lex.readnumber.pstart u64 
    subref                    i64 1
    push           mm_lex.readnumber.pstart u64 
    callproc       &mm_lex.readrealnumber 
    jump           #12386     
#12388: 
    jump           #12387     
#12384: 
    push           mm_lex.readnumber.base i64 
    push           15         i64 
    jumplt         #12389     i64 
    setargs                   3 0
    push           mm_lex.readnumber.base i64 
    push           mm_lex.readnumber.dest u64 
    push           mm_lex.readnumber.pstart u64 
    subref                    i64 1
    push           mm_lex.readnumber.pstart u64 
    callproc       &mm_lex.readrealnumber 
    jump           #12386     
#12389: 
    jump           #12387     
#12381: 
#12387: 
    setargs                   3 0
    push           mm_lex.readnumber.base i64 
    push           mm_lex.readnumber.dest u64 
    push           mm_lex.readnumber.pstart u64 
    subref                    i64 1
    push           mm_lex.readnumber.pstart u64 
    callproc       &mm_lex.stringtonumber 
#12386: 
    retproc                   
End


Proc mm_lex.readdecimalnumber:
    local          mm_lex.readdecimalnumber.pstart u64 
    local          mm_lex.readdecimalnumber.dest u64 
    local          mm_lex.readdecimalnumber.c i64 
    local          mm_lex.readdecimalnumber.n i64 
    local          mm_lex.readdecimalnumber.base i64 
    local          mm_lex.readdecimalnumber.suffix i64 
    local          mm_lex.readdecimalnumber.p u64 
    local          mm_lex.readdecimalnumber.av_1 i64 
    procentry                 
    push           mm_lex.lxsptr u64 
    store          mm_lex.readdecimalnumber.pstart u64 
    pop            mm_lex.readdecimalnumber.dest u64 
    push           0          i64 
    pop            mm_lex.readdecimalnumber.suffix i64 
#12391: 
    push           &mm_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          mm_lex.readdecimalnumber.c i64 
    switch         #12392     39 96
    opnd           #12393     
#12392: 
    switchlabel    #12394     
    switchlabel    #12393     
    switchlabel    #12393     
    switchlabel    #12393     
    switchlabel    #12393     
    switchlabel    #12393     
    switchlabel    #12393     
    switchlabel    #12393     
    switchlabel    #12393     
    switchlabel    #12395     
    switchlabel    #12395     
    switchlabel    #12395     
    switchlabel    #12395     
    switchlabel    #12395     
    switchlabel    #12395     
    switchlabel    #12395     
    switchlabel    #12395     
    switchlabel    #12395     
    switchlabel    #12395     
    switchlabel    #12393     
    switchlabel    #12393     
    switchlabel    #12393     
    switchlabel    #12393     
    switchlabel    #12393     
    switchlabel    #12393     
    switchlabel    #12393     
    switchlabel    #12393     
    switchlabel    #12393     
    switchlabel    #12393     
    switchlabel    #12393     
    switchlabel    #12393     
    switchlabel    #12393     
    switchlabel    #12393     
    switchlabel    #12393     
    switchlabel    #12393     
    switchlabel    #12393     
    switchlabel    #12393     
    switchlabel    #12393     
    switchlabel    #12393     
    switchlabel    #12393     
    switchlabel    #12393     
    switchlabel    #12393     
    switchlabel    #12393     
    switchlabel    #12393     
    switchlabel    #12393     
    switchlabel    #12393     
    switchlabel    #12393     
    switchlabel    #12393     
    switchlabel    #12393     
    switchlabel    #12393     
    switchlabel    #12393     
    switchlabel    #12393     
    switchlabel    #12393     
    switchlabel    #12393     
    switchlabel    #12393     
    switchlabel    #12393     
    switchlabel    #12394     
    switchlabel    #12394     
    endswitch                 
#12395: 
    push           mm_lex.readdecimalnumber.c u64 
    push           &mm_lex.readdecimalnumber.dest 
    loadincr                  u64 1
    popptr                    u8 
    jump           #12391     
#12394: 
    jump           #12391     
#12393: 
    push           &mm_lex.lxsptr 
    decr                      u64 1
    jump           #12396     
    jump           #12391     
#12396: 
    push           mm_lex.readdecimalnumber.c i64 
    switch         #12397     46 101
    opnd           #12398     
#12397: 
    switchlabel    #12399     
    switchlabel    #12398     
    switchlabel    #12398     
    switchlabel    #12398     
    switchlabel    #12398     
    switchlabel    #12398     
    switchlabel    #12398     
    switchlabel    #12398     
    switchlabel    #12398     
    switchlabel    #12398     
    switchlabel    #12398     
    switchlabel    #12398     
    switchlabel    #12398     
    switchlabel    #12398     
    switchlabel    #12398     
    switchlabel    #12398     
    switchlabel    #12398     
    switchlabel    #12398     
    switchlabel    #12398     
    switchlabel    #12398     
    switchlabel    #12400     
    switchlabel    #12398     
    switchlabel    #12398     
    switchlabel    #12401     
    switchlabel    #12398     
    switchlabel    #12398     
    switchlabel    #12398     
    switchlabel    #12398     
    switchlabel    #12398     
    switchlabel    #12398     
    switchlabel    #12398     
    switchlabel    #12398     
    switchlabel    #12398     
    switchlabel    #12398     
    switchlabel    #12398     
    switchlabel    #12398     
    switchlabel    #12398     
    switchlabel    #12398     
    switchlabel    #12398     
    switchlabel    #12398     
    switchlabel    #12398     
    switchlabel    #12398     
    switchlabel    #12398     
    switchlabel    #12398     
    switchlabel    #12398     
    switchlabel    #12398     
    switchlabel    #12398     
    switchlabel    #12398     
    switchlabel    #12398     
    switchlabel    #12398     
    switchlabel    #12398     
    switchlabel    #12398     
    switchlabel    #12400     
    switchlabel    #12398     
    switchlabel    #12398     
    switchlabel    #12401     
    endswitch                 
#12399: 
    push           mm_lex.lxsptr u64 
    push           1          i64 
    pushptroff                u8 1 0
    push           46         u64 
    jumpeq         #12402     u64 
    setargs                   3 0
    push           10         i64 
    push           mm_lex.readdecimalnumber.dest u64 
    push           mm_lex.readdecimalnumber.pstart u64 
    subref                    i64 1
    push           mm_lex.readdecimalnumber.pstart u64 
    callproc       &mm_lex.readrealnumber 
    jump           #12403     
#12402: 
    jump           #12404     
#12401: 
    setargs                   3 0
    push           10         i64 
    push           mm_lex.readdecimalnumber.dest u64 
    push           mm_lex.readdecimalnumber.pstart u64 
    subref                    i64 1
    push           mm_lex.readdecimalnumber.pstart u64 
    callproc       &mm_lex.readrealnumber 
    jump           #12403     
    jump           #12404     
#12400: 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    push           mm_lex.readdecimalnumber.dest u64 
    push           mm_lex.readdecimalnumber.pstart u64 
    subref                    i64 1
    pop            mm_lex.readdecimalnumber.n i64 
    push           mm_lex.readdecimalnumber.pstart u64 
    pop            mm_lex.readdecimalnumber.p u64 
#12405: 
    push           mm_lex.readdecimalnumber.n i64 
    pop            mm_lex.readdecimalnumber.av_1 i64 
    push           mm_lex.readdecimalnumber.av_1 i64 
    push           0          i64 
    jumple         #12406     i64 
#12407: 
    push           mm_lex.readdecimalnumber.p u64 
    pushptr                   u8 
    push           48         u64 
    jumplt         #12408     u64 
    push           mm_lex.readdecimalnumber.p u64 
    pushptr                   u8 
    push           49         u64 
    jumple         #12409     u64 
#12408: 
    setargs                   1 0
    push           "1101B: bad digit" u64 
    callproc       &mm_support.lxerror 
#12409: 
    push           &mm_lex.readdecimalnumber.p 
    incr                      u64 1
#12410: 
    to             #12407     
    opnd           mm_lex.readdecimalnumber.av_1 
#12406: 
    setargs                   3 0
    push           2          i64 
    push           mm_lex.readdecimalnumber.n i64 
    push           mm_lex.readdecimalnumber.pstart u64 
    callproc       &mm_lex.stringtonumber 
    jump           #12403     
    jump           #12404     
#12398: 
#12404: 
    setargs                   3 0
    push           mm_lex.readdecimalnumber.suffix i64 
    push           mm_lex.readdecimalnumber.dest u64 
    push           mm_lex.readdecimalnumber.pstart u64 
    subref                    i64 1
    push           mm_lex.readdecimalnumber.pstart u64 
    callproc       &mm_lex.stringtodecimalnumber 
#12403: 
    retproc                   
End


Proc mm_lex.readrealnumber:
    param          mm_lex.readrealnumber.intstart u64 
    param          mm_lex.readrealnumber.intlen i64 
    param          mm_lex.readrealnumber.base i64 
    local          mm_lex.readrealnumber.fractstart u64 
    local          mm_lex.readrealnumber.ss u64 
    local          mm_lex.readrealnumber.fractlen i64 
    local          mm_lex.readrealnumber.expon i64 
    local          mm_lex.readrealnumber.i i64 
    local          mm_lex.readrealnumber.c i64 
    local          mm_lex.readrealnumber.n i64 
    local          mm_lex.readrealnumber.basex r64 
    local          mm_lex.readrealnumber.x r64 
    local          mm_lex.readrealnumber.realstr block:500 
    local          mm_lex.readrealnumber.str block:32 
    local          mm_lex.readrealnumber.av_1 i64 
    local          mm_lex.readrealnumber.av_2 i64 
    local          mm_lex.readrealnumber.av_3 i64 
    procentry                 
    push           0          u64 
    pop            mm_lex.readrealnumber.fractstart u64 
    push           0          i64 
    pop            mm_lex.readrealnumber.fractlen i64 
    push           0          i64 
    pop            mm_lex.readrealnumber.expon i64 
    push           0          i64 
    pop            mm_lex.longsuffix i64 
    push           mm_lex.lxsptr u64 
    pushptr                   u8 
    push           46         u64 
    jumpne         #12412     u64 
    push           &mm_lex.lxsptr 
    incrload                  u64 1
    pop            mm_lex.readrealnumber.fractstart u64 
    setargs                   1 0
    push           mm_lex.readrealnumber.base i64 
    callfn         &mm_lex.scannumber u64 
    push           mm_lex.readrealnumber.fractstart u64 
    subref                    i64 1
    pop            mm_lex.readrealnumber.fractlen i64 
#12412: 
    push           mm_lex.lxsptr u64 
    pushptr                   u8 
    push           101        u64 
    casejumpeq     #12413     u64 0
    push           69         u64 
    casejumpeq     #12413     u64 0
    push           112        u64 
    casejumpeq     #12414     u64 0
    push           80         u64 
    casejumpeq     #12414     u64 0
    push           108        u64 
    casejumpeq     #12415     u64 0
    push           76         u64 
    casejumpeq     #12415     u64 0
    popstack                  u64 
    jump           #12416     
#12413: 
    push           mm_lex.readrealnumber.base i64 
    push           15         i64 
    jumpge         #12417     i64 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    setargs                   1 0
    push           mm_lex.readrealnumber.base i64 
    callfn         &mm_lex.readexponent i64 
    pop            mm_lex.readrealnumber.expon i64 
#12417: 
    jump           #12418     
#12414: 
    push           mm_lex.readrealnumber.base i64 
    push           15         i64 
    jumplt         #12419     i64 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    setargs                   1 0
    push           mm_lex.readrealnumber.base i64 
    callfn         &mm_lex.readexponent i64 
    pop            mm_lex.readrealnumber.expon i64 
#12419: 
    jump           #12418     
#12415: 
    push           mm_lex.longsuffix i64 
    jumpfalse      #12420     i64 
    setargs                   1 0
    push           "LL?"      u64 
    callproc       &mm_support.lxerror 
#12420: 
    push           76         i64 
    pop            mm_lex.longsuffix i64 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    jump           #12418     
#12416: 
#12418: 
    push           mm_lex.longsuffix i64 
    push           76         i64 
    jumpne         #12421     i64 
    setargs                   1 0
    push           mm_lex.readrealnumber.intlen i64 
    push           mm_lex.readrealnumber.fractlen i64 
    add                       i64 
    push           16         i64 
    add                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            mm_lex.readrealnumber.ss u64 
    setargs                   3 0
    push           mm_lex.readrealnumber.intlen u64 
    push           mm_lex.readrealnumber.intstart u64 
    push           mm_lex.readrealnumber.ss u64 
    callproc       &memcpy    
    setargs                   3 0
    push           1          u64 
    push           "."        u64 
    push           mm_lex.readrealnumber.ss u64 
    push           mm_lex.readrealnumber.intlen i64 
    addrefoff                 u64 1 0
    callproc       &memcpy    
    setargs                   3 0
    push           mm_lex.readrealnumber.fractlen u64 
    push           mm_lex.readrealnumber.fractstart u64 
    push           mm_lex.readrealnumber.ss u64 
    push           mm_lex.readrealnumber.intlen i64 
    addrefoff                 u64 1 1
    callproc       &memcpy    
    setargs                   3 0
    push           1          u64 
    push           "e"        u64 
    push           mm_lex.readrealnumber.ss u64 
    push           mm_lex.readrealnumber.intlen i64 
    addrefoff                 u64 1 0
    push           mm_lex.readrealnumber.fractlen i64 
    addrefoff                 u64 1 1
    callproc       &memcpy    
    setargs                   2 0
    push           &mm_lex.readrealnumber.str 
    push           mm_lex.readrealnumber.expon i64 
    callproc       &msysp.getstrint 
    setargs                   3 0
    setargs                   1 0
    push           &mm_lex.readrealnumber.str 
    callfn         &strlen    i64 
    push           1          i64 
    add                       u64 
    push           &mm_lex.readrealnumber.str 
    push           mm_lex.readrealnumber.ss u64 
    push           mm_lex.readrealnumber.intlen i64 
    addrefoff                 u64 1 0
    push           mm_lex.readrealnumber.fractlen i64 
    addrefoff                 u64 1 2
    callproc       &memcpy    
    push           71         i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    push           mm_lex.readrealnumber.ss u64 
    push           &mm_decls.nextlx 
    push           8          
    popptroff                 u64 1 0
    jump           #12422     
#12421: 
    push           mm_lex.readrealnumber.intlen i64 
    push           mm_lex.readrealnumber.fractlen i64 
    add                       i64 
    push           500        i64 
    jumple         #12423     i64 
    setargs                   1 0
    push           "Real too long" u64 
    callproc       &mm_support.lxerror 
#12423: 
    push           mm_lex.readrealnumber.intlen i64 
    jumpfalse      #12424     i64 
    setargs                   3 0
    push           mm_lex.readrealnumber.intlen u64 
    push           mm_lex.readrealnumber.intstart u64 
    push           &mm_lex.readrealnumber.realstr 
    callproc       &memcpy    
#12424: 
    push           mm_lex.readrealnumber.fractlen i64 
    jumpfalse      #12425     i64 
    setargs                   3 0
    push           mm_lex.readrealnumber.fractlen u64 
    push           mm_lex.readrealnumber.fractstart u64 
    push           &mm_lex.readrealnumber.realstr 
    push           0          
    addrefoff                 u8 1 0
    push           mm_lex.readrealnumber.intlen i64 
    addrefoff                 u64 1 0
    callproc       &memcpy    
#12425: 
    push           mm_lex.readrealnumber.base i64 
    push           10         i64 
    jumpne         #12426     i64 
    setargs                   4 0
    push           &mm_lex.readrealnumber.realstr 
    push           mm_lex.readrealnumber.expon i64 
    push           mm_lex.readrealnumber.fractlen i64 
    push           mm_lex.readrealnumber.intlen i64 
    callfn         &mm_lex.readrealbest r64 
    pop            mm_lex.readrealnumber.x r64 
    jump           #12427     
#12426: 
    push           mm_lex.readrealnumber.base i64 
    float                     r64 i64 
    pop            mm_lex.readrealnumber.basex r64 
    push           &mm_lex.readrealnumber.expon 
    push           mm_lex.readrealnumber.fractlen i64 
    subto                     i64 
    push           0.0000000000000000e+000 r64 
    pop            mm_lex.readrealnumber.x r64 
#12428: 
    push           1          i64 
    pop            mm_lex.readrealnumber.i i64 
    push           mm_lex.readrealnumber.intlen i64 
    push           mm_lex.readrealnumber.fractlen i64 
    add                       i64 
    pop            mm_lex.readrealnumber.av_1 i64 
    push           mm_lex.readrealnumber.av_1 i64 
    push           1          i64 
    jumplt         #12429     i64 
#12430: 
    push           &mm_lex.readrealnumber.realstr 
    push           mm_lex.readrealnumber.i i64 
    pushptroff                u8 1 -1
    pop            mm_lex.readrealnumber.c i64 
    push           mm_lex.readrealnumber.c i64 
    push           48         i64 
    jumplt         #12431     i64 
    push           mm_lex.readrealnumber.c i64 
    push           57         i64 
    jumpgt         #12431     i64 
    push           mm_lex.readrealnumber.x r64 
    push           mm_lex.readrealnumber.basex r64 
    mul                       r64 
    push           mm_lex.readrealnumber.c i64 
    float                     r64 i64 
    add                       r64 
    push           48         u64 
    float                     r64 u64 
    sub                       r64 
    pop            mm_lex.readrealnumber.x r64 
    jump           #12432     
#12431: 
    push           mm_lex.readrealnumber.c i64 
    push           97         i64 
    jumple         #12433     i64 
    push           mm_lex.readrealnumber.x r64 
    push           mm_lex.readrealnumber.basex r64 
    mul                       r64 
    push           mm_lex.readrealnumber.c i64 
    float                     r64 i64 
    add                       r64 
    push           97         u64 
    float                     r64 u64 
    sub                       r64 
    push           1.0000000000000000e+001 r64 
    add                       r64 
    pop            mm_lex.readrealnumber.x r64 
    jump           #12432     
#12433: 
    push           mm_lex.readrealnumber.x r64 
    push           mm_lex.readrealnumber.basex r64 
    mul                       r64 
    push           mm_lex.readrealnumber.c i64 
    float                     r64 i64 
    add                       r64 
    push           65         u64 
    float                     r64 u64 
    sub                       r64 
    push           1.0000000000000000e+001 r64 
    add                       r64 
    pop            mm_lex.readrealnumber.x r64 
#12432: 
#12434: 
    forup          #12430     i64 1
    opnd           mm_lex.readrealnumber.i 
    opnd           mm_lex.readrealnumber.av_1 
#12429: 
    push           mm_lex.readrealnumber.expon i64 
    push           0          i64 
    jumplt         #12435     i64 
#12436: 
    push           mm_lex.readrealnumber.expon i64 
    pop            mm_lex.readrealnumber.av_2 i64 
    push           mm_lex.readrealnumber.av_2 i64 
    push           0          i64 
    jumple         #12437     i64 
#12438: 
    push           &mm_lex.readrealnumber.x 
    push           mm_lex.readrealnumber.basex r64 
    multo                     r64 
#12439: 
    to             #12438     
    opnd           mm_lex.readrealnumber.av_2 
#12437: 
    jump           #12440     
#12435: 
#12441: 
    push           mm_lex.readrealnumber.expon i64 
    neg                       i64 
    pop            mm_lex.readrealnumber.av_3 i64 
    push           mm_lex.readrealnumber.av_3 i64 
    push           0          i64 
    jumple         #12442     i64 
#12443: 
    push           &mm_lex.readrealnumber.x 
    push           mm_lex.readrealnumber.basex r64 
    divto                     r64 
#12444: 
    to             #12443     
    opnd           mm_lex.readrealnumber.av_3 
#12442: 
#12440: 
#12427: 
    push           72         i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    push           7          i64 
    push           &mm_decls.nextlx 
    push           1          
    popptroff                 u8 1 0
    push           mm_lex.readrealnumber.x r64 
    push           &mm_decls.nextlx 
    push           8          
    popptroff                 r64 1 0
#12422: 
    retproc                   
End


Proc mm_lex.readrealbest: r64
    param          mm_lex.readrealbest.intlen i64 
    param          mm_lex.readrealbest.fractlen i64 
    param          mm_lex.readrealbest.expon i64 
    param          mm_lex.readrealbest.realstr u64 
    local          mm_lex.readrealbest.expstr block:32 
    procentry                 
    push           0          u64 
    push           mm_lex.readrealbest.realstr u64 
    push           mm_lex.readrealbest.intlen i64 
    addrefoff                 u64 1 0
    push           mm_lex.readrealbest.fractlen i64 
    popptroff                 u8 1 0
    push           &mm_lex.readrealbest.expon 
    push           mm_lex.readrealbest.fractlen i64 
    subto                     i64 
    setargs                   1 0
    push           &mm_lex.readrealbest.expstr 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "e"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           mm_lex.readrealbest.expon i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           &mm_lex.readrealbest.expstr 
    push           mm_lex.readrealbest.realstr u64 
    callproc       &strcat    
    setargs                   2 0
    push           0          u64 
    push           mm_lex.readrealbest.realstr u64 
    callfn         &strtod    r64 
    setret                    r64 
    jump           #12446     
#12446: 
    retfn                     r64 
End


Proc mm_lex.readexponent: i64
    param          mm_lex.readexponent.base i64 
    local          mm_lex.readexponent.numstart u64 
    local          mm_lex.readexponent.numend u64 
    local          mm_lex.readexponent.expon i64 
    local          mm_lex.readexponent.length i64 
    local          mm_lex.readexponent.neg i64 
    procentry                 
    push           0          i64 
    pop            mm_lex.readexponent.neg i64 
    push           mm_lex.lxsptr u64 
    pushptr                   u8 
    push           43         u64 
    casejumpeq     #12448     u64 0
    push           45         u64 
    casejumpeq     #12449     u64 0
    popstack                  u64 
    jump           #12450     
#12448: 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    jump           #12451     
#12449: 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    push           1          i64 
    pop            mm_lex.readexponent.neg i64 
    jump           #12451     
#12450: 
#12451: 
    push           mm_lex.lxsptr u64 
    pop            mm_lex.readexponent.numstart u64 
    setargs                   1 0
    push           mm_lex.readexponent.base i64 
    callfn         &mm_lex.scannumber u64 
    push           mm_lex.readexponent.numstart u64 
    subref                    i64 1
    pop            mm_lex.readexponent.length i64 
    push           mm_lex.readexponent.length i64 
    push           0          i64 
    jumpne         #12452     i64 
    setargs                   1 0
    push           "Bad expon" u64 
    callproc       &mm_support.lxerror 
#12452: 
    setargs                   3 0
    push           mm_lex.readexponent.base i64 
    push           mm_lex.readexponent.length i64 
    push           mm_lex.readexponent.numstart u64 
    callproc       &mm_lex.stringtonumber 
    startmult                 
    push           mm_lex.readexponent.neg i64 
    jumpfalse      #12453     i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                i64 1 0
    neg                       i64 
    resetmult                 
    jump           #12454     
#12453: 
    push           &mm_decls.lx 
    push           8          
    pushptroff                i64 1 0
    endmult                   
#12454: 
    setret                    i64 
    jump           #12455     
#12455: 
    retfn                     i64 
End


Proc mm_lex.printsymbol:
    param          mm_lex.printsymbol.lp u64 
    local          mm_lex.printsymbol.l block:16 
    procentry                 
    push           mm_lex.printsymbol.lp u64 
    pushptr                   block:16 
    pop            mm_lex.printsymbol.l block:16 
    setargs                   2 2
    push           &mm_tables.symbolnames 
    push           &mm_lex.printsymbol.l 
    pushptr                   u8 
    pushptroff                u64 8 -8
    push           "%-18s"    u64 
    callproc       &printf    
    push           &mm_lex.printsymbol.l 
    pushptr                   u8 
    push           79         i64 
    casejumpeq     #12457     i64 0
    push           70         i64 
    casejumpeq     #12458     i64 0
    push           72         i64 
    casejumpeq     #12459     i64 0
    push           75         i64 
    casejumpeq     #12460     i64 0
    push           73         i64 
    casejumpeq     #12461     i64 0
    push           71         i64 
    casejumpeq     #12462     i64 0
    push           9          i64 
    casejumpeq     #12463     i64 0
    push           24         i64 
    casejumpeq     #12463     i64 0
    push           18         i64 
    casejumpeq     #12463     i64 0
    push           10         i64 
    casejumpeq     #12463     i64 0
    push           27         i64 
    casejumpeq     #12463     i64 0
    push           43         i64 
    casejumpeq     #12463     i64 0
    push           44         i64 
    casejumpeq     #12463     i64 0
    push           46         i64 
    casejumpeq     #12463     i64 0
    push           47         i64 
    casejumpeq     #12463     i64 0
    push           30         i64 
    casejumpeq     #12463     i64 0
    push           31         i64 
    casejumpeq     #12463     i64 0
    push           32         i64 
    casejumpeq     #12463     i64 0
    push           33         i64 
    casejumpeq     #12463     i64 0
    push           34         i64 
    casejumpeq     #12463     i64 0
    push           35         i64 
    casejumpeq     #12463     i64 0
    push           36         i64 
    casejumpeq     #12463     i64 0
    push           37         i64 
    casejumpeq     #12463     i64 0
    push           38         i64 
    casejumpeq     #12463     i64 0
    push           39         i64 
    casejumpeq     #12463     i64 0
    push           40         i64 
    casejumpeq     #12463     i64 0
    push           41         i64 
    casejumpeq     #12463     i64 0
    push           42         i64 
    casejumpeq     #12463     i64 0
    push           48         i64 
    casejumpeq     #12463     i64 0
    push           49         i64 
    casejumpeq     #12463     i64 0
    popstack                  i64 
    jump           #12464     
#12457: 
    setargs                   2 0
    push           &mm_lex.printsymbol.l 
    push           8          
    pushptroff                u64 1 0
    push           76         
    pushptroff                u8 1 0
    push           &mm_lex.printsymbol.l 
    push           8          
    pushptroff                u64 1 0
    pushptr                   u64 
    callproc       &mm_lex.printstrn 
    push           &mm_lex.printsymbol.l 
    push           1          
    pushptroff                u8 1 0
    jumpfalse      #12465     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           " [#]"     u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           &mm_tables.symbolnames 
    push           &mm_lex.printsymbol.l 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#12465: 
    jump           #12466     
#12458: 
    push           &mm_lex.printsymbol.l 
    push           1          
    pushptroff                u8 1 0
    push           4          i64 
    casejumpeq     #12467     i64 0
    push           2          i64 
    casejumpeq     #12468     i64 0
    popstack                  i64 
    jump           #12469     
#12467: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &mm_lex.printsymbol.l 
    push           8          
    pushptroff                i64 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           "int"      u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #12470     
#12468: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   2 0
    push           0          i64 
    push           &mm_lex.printsymbol.l 
    push           8          
    pushptroff                u64 1 0
    callproc       &msysp.m$print_u64 
    setargs                   1 0
    push           "word"     u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #12470     
#12469: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &mm_lex.printsymbol.l 
    push           8          
    pushptroff                i64 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#12470: 
    jump           #12466     
#12459: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   2 0
    push           0          i64 
    push           &mm_lex.printsymbol.l 
    push           8          
    pushptroff                r64 1 0
    callproc       &msysp.m$print_r64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #12466     
#12460: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\""       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           &mm_lex.printsymbol.l 
    push           8          
    pushptroff                u64 1 0
    callproc       &msysp.printstr 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\""       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    setargs                   1 0
    push           &mm_lex.printsymbol.l 
    push           8          
    pushptroff                u64 1 0
    callfn         &strlen    i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #12466     
#12461: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "'"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           &mm_lex.printsymbol.l 
    push           8          
    pushptroff                u64 1 0
    callproc       &msysp.printstr 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "'"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #12466     
#12462: 
    setargs                   1 0
    push           &mm_lex.printsymbol.l 
    push           8          
    pushptroff                u64 1 0
    callproc       &msysp.printstr 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "L"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #12466     
#12463: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &mm_tables.symbolnames 
    push           &mm_lex.printsymbol.l 
    pushptr                   u8 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #12466     
#12464: 
    push           &mm_lex.printsymbol.l 
    push           1          
    pushptroff                u8 1 0
    jumpfalse      #12471     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "SUBCODE:" u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           &mm_lex.printsymbol.l 
    push           1          
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#12471: 
#12466: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#12472: 
    retproc                   
End


Proc mm_lex.stringtonumber:
    param          mm_lex.stringtonumber.s u64 
    param          mm_lex.stringtonumber.length i64 
    param          mm_lex.stringtonumber.base i64 
    local          mm_lex.stringtonumber.a i64 
    local          mm_lex.stringtonumber.b u64 
    local          mm_lex.stringtonumber.c i64 
    local          mm_lex.stringtonumber.av_1 i64 
    local          mm_lex.stringtonumber.av_2 i64 
    procentry                 
    jump           #12474     
#12475: 
    push           &mm_lex.stringtonumber.s 
    incr                      u64 1
    push           &mm_lex.stringtonumber.length 
    decr                      i64 1
#12474: 
    push           mm_lex.stringtonumber.length i64 
    push           2          i64 
    jumplt         #12476     i64 
    push           mm_lex.stringtonumber.s u64 
    pushptr                   u8 
    push           48         u64 
    jumpeq         #12475     u64 
#12476: 
#12477: 
    push           70         i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    push           mm_lex.stringtonumber.length i64 
    push           &mm_lex.maxnumlen 
    push           mm_lex.stringtonumber.base i64 
    pushptroff                i64 8 -8
    jumpgt         #12478     i64 
    push           mm_lex.stringtonumber.length i64 
    push           &mm_lex.maxnumlen 
    push           mm_lex.stringtonumber.base i64 
    pushptroff                i64 8 -8
    jumpne         #12479     i64 
    setargs                   3 0
    push           mm_lex.stringtonumber.length u64 
    push           &mm_lex.maxnumlist 
    push           mm_lex.stringtonumber.base i64 
    pushptroff                u64 8 -8
    push           mm_lex.stringtonumber.s u64 
    callfn         &strncmp   i32 
    push           0          i64 
    jumple         #12479     i64 
#12478: 
    push           mm_lex.stringtonumber.base i64 
    push           16         i64 
    jumpeq         #12480     i64 
    setargs                   1 0
    push           "longint const" u64 
    callproc       &mm_support.lxerror 
    jump           #12481     
#12480: 
    push           mm_lex.stringtonumber.length i64 
    push           32         i64 
    jumpgt         #12482     i64 
    push           mm_lex.stringtonumber.length i64 
    push           32         i64 
    jumpne         #12483     i64 
    setargs                   3 0
    push           32         u64 
    push           "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF" u64 
    push           mm_lex.stringtonumber.s u64 
    callfn         &strncmp   i32 
    push           0          i64 
    jumple         #12483     i64 
#12482: 
    setargs                   1 0
    push           "longint const" u64 
    callproc       &mm_support.lxerror 
    jump           #12484     
#12483: 
    push           mm_lex.stringtonumber.length i64 
    push           32         i64 
    jumpne         #12485     i64 
    setargs                   3 0
    push           32         u64 
    push           "7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF" u64 
    push           mm_lex.stringtonumber.s u64 
    callfn         &strncmp   i32 
    push           0          i64 
    jumple         #12485     i64 
    push           3          i64 
    push           &mm_decls.nextlx 
    push           1          
    popptroff                 u8 1 0
    jump           #12486     
#12485: 
    push           5          i64 
    push           &mm_decls.nextlx 
    push           1          
    popptroff                 u8 1 0
#12486: 
    setargs                   3 0
    push           16         i64 
    push           mm_lex.stringtonumber.length i64 
    push           mm_lex.stringtonumber.s u64 
    callfn         &mm_lex.stringtonumber128 u64 
    push           &mm_decls.nextlx 
    push           8          
    popptroff                 u64 1 0
#12484: 
#12481: 
    jump           #12487     
#12479: 
    push           0          i64 
    pop            mm_lex.stringtonumber.a i64 
    push           mm_lex.stringtonumber.base i64 
    push           10         i64 
    jumpgt         #12488     i64 
#12489: 
    push           mm_lex.stringtonumber.length i64 
    pop            mm_lex.stringtonumber.av_1 i64 
    push           mm_lex.stringtonumber.av_1 i64 
    push           0          i64 
    jumple         #12490     i64 
#12491: 
    push           mm_lex.stringtonumber.a i64 
    push           mm_lex.stringtonumber.base i64 
    mul                       i64 
    push           &mm_lex.stringtonumber.s 
    loadincr                  u64 1
    pushptr                   u8 
    add                       i64 
    push           48         i64 
    sub                       i64 
    pop            mm_lex.stringtonumber.a i64 
#12492: 
    to             #12491     
    opnd           mm_lex.stringtonumber.av_1 
#12490: 
    jump           #12493     
#12488: 
#12494: 
    push           mm_lex.stringtonumber.length i64 
    pop            mm_lex.stringtonumber.av_2 i64 
    push           mm_lex.stringtonumber.av_2 i64 
    push           0          i64 
    jumple         #12495     i64 
#12496: 
    push           &mm_lex.stringtonumber.s 
    loadincr                  u64 1
    pushptr                   u8 
    pop            mm_lex.stringtonumber.c i64 
    push           mm_lex.stringtonumber.c i64 
    push           97         i64 
    jumplt         #12497     i64 
    push           mm_lex.stringtonumber.a i64 
    push           mm_lex.stringtonumber.base i64 
    mul                       i64 
    push           mm_lex.stringtonumber.c i64 
    add                       i64 
    push           97         i64 
    sub                       i64 
    push           10         i64 
    add                       i64 
    pop            mm_lex.stringtonumber.a i64 
    jump           #12498     
#12497: 
    push           mm_lex.stringtonumber.c i64 
    push           65         i64 
    jumplt         #12499     i64 
    push           mm_lex.stringtonumber.a i64 
    push           mm_lex.stringtonumber.base i64 
    mul                       i64 
    push           mm_lex.stringtonumber.c i64 
    add                       i64 
    push           65         i64 
    sub                       i64 
    push           10         i64 
    add                       i64 
    pop            mm_lex.stringtonumber.a i64 
    jump           #12498     
#12499: 
    push           mm_lex.stringtonumber.a i64 
    push           mm_lex.stringtonumber.base i64 
    mul                       i64 
    push           mm_lex.stringtonumber.c i64 
    add                       i64 
    push           48         i64 
    sub                       i64 
    pop            mm_lex.stringtonumber.a i64 
#12498: 
#12500: 
    to             #12496     
    opnd           mm_lex.stringtonumber.av_2 
#12495: 
#12493: 
    push           mm_lex.stringtonumber.a i64 
    push           &mm_decls.nextlx 
    push           8          
    popptroff                 i64 1 0
    setargs                   1 0
    push           mm_lex.stringtonumber.a u64 
    callfn         &mm_lex.setinttype i64 
    push           &mm_decls.nextlx 
    push           1          
    popptroff                 u8 1 0
#12487: 
    retproc                   
End


Proc mm_lex.stringtodecimalnumber:
    param          mm_lex.stringtodecimalnumber.s u64 
    param          mm_lex.stringtodecimalnumber.length i64 
    param          mm_lex.stringtodecimalnumber.suffix i64 
    local          mm_lex.stringtodecimalnumber.a i64 
    local          mm_lex.stringtodecimalnumber.b u64 
    local          mm_lex.stringtodecimalnumber.c i64 
    local          mm_lex.stringtodecimalnumber.av_1 i64 
    procentry                 
    jump           #12502     
#12503: 
    push           &mm_lex.stringtodecimalnumber.s 
    incr                      u64 1
    push           &mm_lex.stringtodecimalnumber.length 
    decr                      i64 1
#12502: 
    push           mm_lex.stringtodecimalnumber.length i64 
    push           2          i64 
    jumplt         #12504     i64 
    push           mm_lex.stringtodecimalnumber.s u64 
    pushptr                   u8 
    push           48         u64 
    jumpeq         #12503     u64 
#12504: 
#12505: 
    push           70         i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    push           mm_lex.stringtodecimalnumber.length i64 
    push           20         i64 
    jumpgt         #12506     i64 
    push           mm_lex.stringtodecimalnumber.length i64 
    push           20         i64 
    jumpne         #12507     i64 
    setargs                   3 0
    push           20         u64 
    push           "18446744073709551615" u64 
    push           mm_lex.stringtodecimalnumber.s u64 
    callfn         &strncmp   i32 
    push           0          i64 
    jumpgt         #12506     i64 
#12507: 
    push           mm_lex.stringtodecimalnumber.suffix i64 
    jumpfalse      #12508     i64 
#12506: 
    push           mm_lex.stringtodecimalnumber.length i64 
    push           39         i64 
    jumpgt         #12509     i64 
    push           mm_lex.stringtodecimalnumber.length i64 
    push           39         i64 
    jumpne         #12510     i64 
    setargs                   3 0
    push           39         u64 
    push           "340282366920938463463374607431768211455" u64 
    push           mm_lex.stringtodecimalnumber.s u64 
    callfn         &strncmp   i32 
    push           0          i64 
    jumple         #12510     i64 
#12509: 
    push           mm_lex.stringtodecimalnumber.suffix i64 
    push           87         i64 
    jumpne         #12511     i64 
    setargs                   1 0
    push           "-W overflows 128 bits" u64 
    callproc       &mm_support.lxerror 
#12511: 
!dolongint::
#12512: 
    push           71         i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    setargs                   1 0
    push           mm_lex.stringtodecimalnumber.s u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &mm_decls.nextlx 
    push           8          
    popptroff                 u64 1 0
    jump           #12513     
#12510: 
    push           mm_lex.stringtodecimalnumber.suffix i64 
    push           76         i64 
    jumpne         #12514     i64 
    jump           #12512     
#12514: 
    push           mm_lex.stringtodecimalnumber.length i64 
    push           39         i64 
    jumpne         #12515     i64 
    setargs                   3 0
    push           39         u64 
    push           "170141183460469231731687303715884105727" u64 
    push           mm_lex.stringtodecimalnumber.s u64 
    callfn         &strncmp   i32 
    push           0          i64 
    jumple         #12515     i64 
    push           3          i64 
    push           &mm_decls.nextlx 
    push           1          
    popptroff                 u8 1 0
    jump           #12516     
#12515: 
    push           5          i64 
    push           &mm_decls.nextlx 
    push           1          
    popptroff                 u8 1 0
#12516: 
    setargs                   3 0
    push           10         i64 
    push           mm_lex.stringtodecimalnumber.length i64 
    push           mm_lex.stringtodecimalnumber.s u64 
    callfn         &mm_lex.stringtonumber128 u64 
    push           &mm_decls.nextlx 
    push           8          
    popptroff                 u64 1 0
#12513: 
    jump           #12517     
#12508: 
    push           0          i64 
    pop            mm_lex.stringtodecimalnumber.a i64 
#12518: 
    push           mm_lex.stringtodecimalnumber.length i64 
    pop            mm_lex.stringtodecimalnumber.av_1 i64 
    push           mm_lex.stringtodecimalnumber.av_1 i64 
    push           0          i64 
    jumple         #12519     i64 
#12520: 
    push           mm_lex.stringtodecimalnumber.a i64 
    push           10         i64 
    mul                       i64 
    push           &mm_lex.stringtodecimalnumber.s 
    loadincr                  u64 1
    pushptr                   u8 
    add                       i64 
    push           48         i64 
    sub                       i64 
    pop            mm_lex.stringtodecimalnumber.a i64 
#12521: 
    to             #12520     
    opnd           mm_lex.stringtodecimalnumber.av_1 
#12519: 
    push           mm_lex.stringtodecimalnumber.a i64 
    push           &mm_decls.nextlx 
    push           8          
    popptroff                 i64 1 0
    setargs                   1 0
    push           mm_lex.stringtodecimalnumber.a u64 
    callfn         &mm_lex.setinttype i64 
    push           &mm_decls.nextlx 
    push           1          
    popptroff                 u8 1 0
#12517: 
    retproc                   
End


Proc mm_lex.lexsetup:
    local          mm_lex.lexsetup.i i64 
    local          mm_lex.lexsetup.av_1 i64 
    procentry                 
#12523: 
    push           1          i64 
    pop            mm_lex.lexsetup.i i64 
    push           16         i64 
    pop            mm_lex.lexsetup.av_1 i64 
    push           mm_lex.lexsetup.av_1 i64 
    push           1          i64 
    jumplt         #12524     i64 
#12525: 
    setargs                   1 0
    push           &mm_lex.maxnumlist 
    push           mm_lex.lexsetup.i i64 
    pushptroff                u64 8 -8
    callfn         &strlen    i64 
    push           &mm_lex.maxnumlen 
    push           mm_lex.lexsetup.i i64 
    popptroff                 i64 8 -8
#12526: 
    forup          #12525     i64 1
    opnd           mm_lex.lexsetup.i 
    opnd           mm_lex.lexsetup.av_1 
#12524: 
    setargs                   0 0
    callproc       &mm_lex.inithashtable 
#12527: 
    retproc                   
End


Proc mm_lex.printstrn:
    param          mm_lex.printstrn.s u64 
    param          mm_lex.printstrn.length i64 
    procentry                 
    push           mm_lex.printstrn.length i64 
    jumpfalse      #12529     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   2 0
    push           "v"        u64 
    push           mm_lex.printstrn.length i64 
    callproc       &msysp.m$print_i64 
    setargs                   2 0
    push           ".*"       u64 
    push           mm_lex.printstrn.s u64 
    callproc       &msysp.m$print_str 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#12529: 
#12530: 
    retproc                   
End


Proc mm_lex.scannumber: u64
    param          mm_lex.scannumber.base i64 
    local          mm_lex.scannumber.dest u64 
    local          mm_lex.scannumber.c i64 
    procentry                 
    push           mm_lex.lxsptr u64 
    pop            mm_lex.scannumber.dest u64 
#12532: 
    push           &mm_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          mm_lex.scannumber.c i64 
    switch         #12533     39 108
    opnd           #12534     
#12533: 
    switchlabel    #12535     
    switchlabel    #12534     
    switchlabel    #12534     
    switchlabel    #12534     
    switchlabel    #12534     
    switchlabel    #12534     
    switchlabel    #12534     
    switchlabel    #12534     
    switchlabel    #12534     
    switchlabel    #12536     
    switchlabel    #12536     
    switchlabel    #12536     
    switchlabel    #12536     
    switchlabel    #12536     
    switchlabel    #12536     
    switchlabel    #12536     
    switchlabel    #12536     
    switchlabel    #12536     
    switchlabel    #12536     
    switchlabel    #12534     
    switchlabel    #12534     
    switchlabel    #12534     
    switchlabel    #12534     
    switchlabel    #12534     
    switchlabel    #12534     
    switchlabel    #12534     
    switchlabel    #12537     
    switchlabel    #12537     
    switchlabel    #12537     
    switchlabel    #12537     
    switchlabel    #12538     
    switchlabel    #12537     
    switchlabel    #12534     
    switchlabel    #12534     
    switchlabel    #12534     
    switchlabel    #12534     
    switchlabel    #12534     
    switchlabel    #12539     
    switchlabel    #12534     
    switchlabel    #12534     
    switchlabel    #12534     
    switchlabel    #12534     
    switchlabel    #12534     
    switchlabel    #12534     
    switchlabel    #12534     
    switchlabel    #12534     
    switchlabel    #12534     
    switchlabel    #12534     
    switchlabel    #12534     
    switchlabel    #12534     
    switchlabel    #12534     
    switchlabel    #12534     
    switchlabel    #12534     
    switchlabel    #12534     
    switchlabel    #12534     
    switchlabel    #12534     
    switchlabel    #12535     
    switchlabel    #12535     
    switchlabel    #12537     
    switchlabel    #12537     
    switchlabel    #12537     
    switchlabel    #12537     
    switchlabel    #12538     
    switchlabel    #12537     
    switchlabel    #12534     
    switchlabel    #12534     
    switchlabel    #12534     
    switchlabel    #12534     
    switchlabel    #12534     
    switchlabel    #12539     
    endswitch                 
#12536: 
    push           mm_lex.scannumber.c u64 
    push           &mm_lex.scannumber.dest 
    loadincr                  u64 1
    popptr                    u8 
    push           mm_lex.scannumber.c i64 
    push           48         i64 
    push           mm_lex.scannumber.base i64 
    add                       i64 
    jumplt         #12540     i64 
    setargs                   1 0
    push           "Digit out of range" u64 
    callproc       &mm_support.lxerror 
#12540: 
    jump           #12532     
#12537: 
    push           11         i64 
    push           mm_lex.scannumber.base i64 
    jumpgt         #12541     i64 
    push           mm_lex.scannumber.base i64 
    push           16         i64 
    jumpgt         #12541     i64 
    push           mm_lex.scannumber.c u64 
    push           &mm_lex.scannumber.dest 
    loadincr                  u64 1
    popptr                    u8 
    jump           #12542     
#12541: 
    push           &mm_lex.lxsptr 
    decr                      u64 1
    jump           #12543     
#12542: 
    jump           #12532     
#12538: 
    push           mm_lex.scannumber.base i64 
    push           15         i64 
    jumpge         #12544     i64 
    push           &mm_lex.lxsptr 
    decr                      u64 1
    jump           #12543     
    jump           #12545     
#12544: 
    push           mm_lex.scannumber.c u64 
    push           &mm_lex.scannumber.dest 
    loadincr                  u64 1
    popptr                    u8 
#12545: 
    jump           #12532     
#12535: 
    jump           #12532     
#12539: 
    push           76         i64 
    pop            mm_lex.longsuffix i64 
    jump           #12543     
    jump           #12532     
#12534: 
    push           &mm_lex.lxsptr 
    decr                      u64 1
    jump           #12543     
    jump           #12532     
#12543: 
    push           mm_lex.scannumber.dest u64 
    setret                    u64 
    jump           #12546     
#12546: 
    retfn                     u64 
End


Proc mm_lex.readrawstring:
    local          mm_lex.readrawstring.dest u64 
    local          mm_lex.readrawstring.c i64 
    procentry                 
    push           75         i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    push           &mm_lex.lxsptr 
    incrload                  u64 1
    push           &mm_decls.nextlx 
    push           8          
    popptroff                 u64 1 0
    push           mm_lex.lxsptr u64 
    pop            mm_lex.readrawstring.dest u64 
#12548: 
    push           &mm_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          mm_lex.readrawstring.c i64 
    switch         #12549     0 34
    opnd           #12550     
#12549: 
    switchlabel    #12551     
    switchlabel    #12550     
    switchlabel    #12550     
    switchlabel    #12550     
    switchlabel    #12550     
    switchlabel    #12550     
    switchlabel    #12550     
    switchlabel    #12550     
    switchlabel    #12550     
    switchlabel    #12550     
    switchlabel    #12551     
    switchlabel    #12550     
    switchlabel    #12550     
    switchlabel    #12551     
    switchlabel    #12550     
    switchlabel    #12550     
    switchlabel    #12550     
    switchlabel    #12550     
    switchlabel    #12550     
    switchlabel    #12550     
    switchlabel    #12550     
    switchlabel    #12550     
    switchlabel    #12550     
    switchlabel    #12550     
    switchlabel    #12550     
    switchlabel    #12550     
    switchlabel    #12550     
    switchlabel    #12550     
    switchlabel    #12550     
    switchlabel    #12550     
    switchlabel    #12550     
    switchlabel    #12550     
    switchlabel    #12550     
    switchlabel    #12550     
    switchlabel    #12552     
    endswitch                 
#12552: 
    push           mm_lex.lxsptr u64 
    pushptr                   u8 
    push           34         u64 
    jumpne         #12553     u64 
    push           34         u64 
    push           &mm_lex.readrawstring.dest 
    loadincr                  u64 1
    popptr                    u8 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    jump           #12554     
#12553: 
    push           0          u64 
    push           mm_lex.lxsptr u64 
    push           1          i64 
    subrefoff                 u64 1 0
    popptr                    u8 
    jump           #12555     
#12554: 
    jump           #12548     
#12551: 
    setargs                   1 0
    push           "Raw string not terminated" u64 
    callproc       &mm_support.lxerror 
    push           &mm_lex.lxsptr 
    decr                      u64 1
    jump           #12555     
    jump           #12548     
#12550: 
    push           mm_lex.readrawstring.c u64 
    push           &mm_lex.readrawstring.dest 
    loadincr                  u64 1
    popptr                    u8 
    jump           #12548     
#12555: 
#12556: 
    retproc                   
End


Proc mm_lex.lookup:
    param          mm_lex.lookup.name u64 
    param          mm_lex.lookup.length i64 
    param          mm_lex.lookup.hashindex0 i64 
    local          mm_lex.lookup.wrapped i64 
    local          mm_lex.lookup.hashindex i64 
    local          mm_lex.lookup.index i64 
    local          mm_lex.lookup.n i64 
    local          mm_lex.lookup.d u64 
    procentry                 
    push           mm_lex.lookup.hashindex0 i64 
    push           32767      i64 
    iand                      i64 
    pop            mm_lex.lookup.hashindex i64 
    push           &mm_lex.hashtable 
    push           mm_lex.lookup.hashindex i64 
    addrefoff                 block:128 128 0
    pop            mm_lex.lookup.d u64 
    push           0          i64 
    pop            mm_lex.lookup.wrapped i64 
#12558: 
    push           mm_lex.lookup.d u64 
    push           76         
    pushptroff                u8 1 0
    store          mm_lex.lookup.n i64 
    push           mm_lex.lookup.length i64 
    jumpne         #12559     i64 
    setargs                   3 0
    push           mm_lex.lookup.n u64 
    push           mm_lex.lookup.name u64 
    push           mm_lex.lookup.d u64 
    pushptr                   u64 
    callfn         &memcmp    i32 
    push           0          i64 
    jumpne         #12559     i64 
    push           mm_lex.lookup.d u64 
    push           &mm_decls.nextlx 
    push           8          
    popptroff                 u64 1 0
    push           mm_lex.lookup.d u64 
    push           77         
    pushptroff                u8 1 0
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    push           mm_lex.lookup.d u64 
    push           79         
    pushptroff                u8 1 0
    push           &mm_decls.nextlx 
    push           1          
    popptroff                 u8 1 0
    jump           #12560     
    jump           #12561     
#12559: 
    push           mm_lex.lookup.n i64 
    push           0          i64 
    jumpne         #12562     i64 
    jump           #12563     
#12562: 
#12561: 
    push           &mm_lex.lookup.d 
    incr                      u64 128
    push           mm_lex.lookup.d u64 
    push           mm_lex.hashtablelast u64 
    jumplt         #12564     u64 
    push           mm_lex.lookup.wrapped i64 
    jumpfalse      #12565     i64 
    setargs                   1 0
    push           "HASHTABLE FULL" u64 
    callproc       &mlibp.abortprogram 
#12565: 
    push           1          i64 
    pop            mm_lex.lookup.wrapped i64 
    push           &mm_lex.hashtable 
    push           0          
    addrefoff                 u8 1 0
    pop            mm_lex.lookup.d u64 
#12564: 
    jump           #12558     
#12563: 
    setargs                   2 0
    push           mm_lex.lookup.length i64 
    push           mm_lex.lookup.name u64 
    callfn         &mlibp.pcm_copyheapstringn u64 
    push           mm_lex.lookup.d u64 
    push           0          
    popptroff                 u64 1 0
    push           mm_lex.lookup.length i64 
    push           mm_lex.lookup.d u64 
    push           76         
    popptroff                 u8 1 0
    push           79         i64 
    push           mm_lex.lookup.d u64 
    push           77         
    popptroff                 u8 1 0
    push           mm_lex.lookup.d u64 
    push           &mm_decls.nextlx 
    push           8          
    popptroff                 u64 1 0
    push           mm_lex.lookup.d u64 
    push           77         
    pushptroff                u8 1 0
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
#12560: 
    retproc                   
End


Proc mm_lex.lookupsys: i64
    param          mm_lex.lookupsys.name u64 
    local          mm_lex.lookupsys.j i64 
    local          mm_lex.lookupsys.wrapped i64 
    local          mm_lex.lookupsys.hashvalue i64 
    procentry                 
    setargs                   1 0
    push           mm_lex.lookupsys.name u64 
    callfn         &mm_lex.gethashvaluez i64 
    push           32767      i64 
    iand                      i64 
    pop            mm_lex.lookupsys.j i64 
    push           &mm_lex.hashtable 
    push           mm_lex.lookupsys.j i64 
    addrefoff                 block:128 128 0
    push           &mm_decls.lx 
    push           8          
    popptroff                 u64 1 0
    push           0          i64 
    pop            mm_lex.lookupsys.wrapped i64 
#12567: 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           76         
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #12568     i64 
    jump           #12569     
    jump           #12570     
#12568: 
    setargs                   2 0
    push           mm_lex.lookupsys.name u64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    pushptr                   u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #12571     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mm_lex.lookupsys.name u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "sys dupl name?" u64 
    callproc       &mm_support.lxerror 
#12571: 
#12570: 
    push           &mm_decls.lx 
    push           8          
    addrefoff                 u64 1 0
    incr                      u64 128
    push           &mm_lex.lookupsys.j 
    incrload                  i64 1
    push           32768      i64 
    jumplt         #12572     i64 
    push           mm_lex.lookupsys.wrapped i64 
    jumpfalse      #12573     i64 
    setargs                   1 0
    push           "SYS:HASHTABLE FULL" u64 
    callproc       &mlibp.abortprogram 
#12573: 
    push           1          i64 
    pop            mm_lex.lookupsys.wrapped i64 
    push           &mm_lex.hashtable 
    push           0          
    addrefoff                 u8 1 0
    push           &mm_decls.lx 
    push           8          
    popptroff                 u64 1 0
    push           0          i64 
    pop            mm_lex.lookupsys.j i64 
#12572: 
    jump           #12567     
#12569: 
    push           mm_lex.lookupsys.name u64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           0          
    popptroff                 u64 1 0
    setargs                   1 0
    push           mm_lex.lookupsys.name u64 
    callfn         &strlen    i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           76         
    popptroff                 u8 1 0
    push           79         i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           77         
    popptroff                 u8 1 0
    push           0          i64 
    setret                    i64 
    jump           #12574     
#12574: 
    retfn                     i64 
End


Proc mm_lex.gethashvaluez: i64
    param          mm_lex.gethashvaluez.s u64 
    local          mm_lex.gethashvaluez.c i64 
    local          mm_lex.gethashvaluez.hsum i64 
    procentry                 
    push           mm_lex.gethashvaluez.s u64 
    pushptr                   u8 
    push           0          i64 
    jumpne         #12576     i64 
    push           0          i64 
    setret                    i64 
    jump           #12577     
#12576: 
    push           &mm_lex.gethashvaluez.s 
    loadincr                  u64 1
    pushptr                   u8 
    pop            mm_lex.gethashvaluez.hsum i64 
#12578: 
    push           &mm_lex.gethashvaluez.s 
    loadincr                  u64 1
    pushptr                   u8 
    pop            mm_lex.gethashvaluez.c i64 
    push           mm_lex.gethashvaluez.c i64 
    push           0          i64 
    jumpne         #12579     i64 
    jump           #12580     
#12579: 
    push           mm_lex.gethashvaluez.hsum i64 
    push           4          i64 
    shl                       i64 
    push           mm_lex.gethashvaluez.hsum i64 
    sub                       i64 
    push           mm_lex.gethashvaluez.c i64 
    add                       i64 
    pop            mm_lex.gethashvaluez.hsum i64 
    jump           #12578     
#12580: 
    push           mm_lex.gethashvaluez.hsum i64 
    push           5          i64 
    shl                       i64 
    push           mm_lex.gethashvaluez.hsum i64 
    sub                       i64 
    setret                    i64 
    jump           #12577     
#12577: 
    retfn                     i64 
End


Proc mm_lex.inithashtable:
    local          mm_lex.inithashtable.i i64 
    local          mm_lex.inithashtable.av_1 i64 
    procentry                 
    setargs                   3 0
    push           4194304    u64 
    push           0          i64 
    push           &mm_lex.hashtable 
    callproc       &memset    
    push           &mm_lex.hashtable 
    push           4194176    
    addrefoff                 u8 1 0
    pop            mm_lex.hashtablelast u64 
#12582: 
    push           1          i64 
    pop            mm_lex.inithashtable.i i64 
    push           244        i64 
    pop            mm_lex.inithashtable.av_1 i64 
    push           mm_lex.inithashtable.av_1 i64 
    push           1          i64 
    jumplt         #12583     i64 
#12584: 
    setargs                   1 0
    push           &mm_tables.stnames 
    push           mm_lex.inithashtable.i i64 
    pushptroff                u64 8 -8
    callproc       &mm_lex.lookupsys 
    push           &mm_tables.stsymbols 
    push           mm_lex.inithashtable.i i64 
    pushptroff                i64 8 -8
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           77         
    popptroff                 u8 1 0
    push           &mm_tables.stsymbols 
    push           mm_lex.inithashtable.i i64 
    pushptroff                i64 8 -8
    push           78         i64 
    casejumpeq     #12585     i64 0
    popstack                  i64 
    jump           #12586     
#12585: 
    push           &mm_tables.stsubcodes 
    push           mm_lex.inithashtable.i i64 
    pushptroff                i64 8 -8
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           80         
    popptroff                 i32 1 0
    push           78         i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           79         
    popptroff                 u8 1 0
    push           79         i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           77         
    popptroff                 u8 1 0
    jump           #12587     
#12586: 
    push           &mm_tables.stsubcodes 
    push           mm_lex.inithashtable.i i64 
    pushptroff                i64 8 -8
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           79         
    popptroff                 u8 1 0
#12587: 
#12588: 
    forup          #12584     i64 1
    opnd           mm_lex.inithashtable.i 
    opnd           mm_lex.inithashtable.av_1 
#12583: 
#12589: 
    retproc                   
End


Proc mm_lex.printhashtable:
    local          mm_lex.printhashtable.av_1 i64 
    local          mm_lex.printhashtable.i i64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Hashtable:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#12591: 
    push           0          i64 
    pop            mm_lex.printhashtable.i i64 
    push           32767      i64 
    pop            mm_lex.printhashtable.av_1 i64 
    push           mm_lex.printhashtable.av_1 i64 
    push           0          i64 
    jumplt         #12592     i64 
#12593: 
    push           &mm_lex.hashtable 
    push           mm_lex.printhashtable.i i64 
    addrefoff                 block:128 128 0
    push           76         
    pushptroff                u8 1 0
    jumpfalse      #12594     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mm_lex.printhashtable.i i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           &mm_lex.hashtable 
    push           mm_lex.printhashtable.i i64 
    addrefoff                 block:128 128 0
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_tables.symbolnames 
    push           &mm_lex.hashtable 
    push           mm_lex.printhashtable.i i64 
    addrefoff                 block:128 128 0
    push           77         
    pushptroff                u8 1 0
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#12594: 
#12595: 
    forup          #12593     i64 1
    opnd           mm_lex.printhashtable.i 
    opnd           mm_lex.printhashtable.av_1 
#12592: 
#12596: 
    retproc                   
End


Proc mm_lex.addreservedword:
    param          mm_lex.addreservedword.name u64 
    param          mm_lex.addreservedword.symbol i64 
    param          mm_lex.addreservedword.subcode i64 
    param          mm_lex.addreservedword.regsize i64 
    procentry                 
    setargs                   1 0
    push           mm_lex.addreservedword.name u64 
    callproc       &mm_lex.lookupsys 
    push           79         i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           77         
    popptroff                 u8 1 0
    push           mm_lex.addreservedword.symbol i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           79         
    popptroff                 u8 1 0
    push           mm_lex.addreservedword.subcode i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           80         
    popptroff                 i32 1 0
    push           mm_lex.addreservedword.regsize i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           122        
    popptroff                 i16 1 0
#12598: 
    retproc                   
End


Proc mm_lex.dolexdirective: i64
    param          mm_lex.dolexdirective.index i64 
    local          mm_lex.dolexdirective.symptr u64 
    local          mm_lex.dolexdirective.p u64 
    local          mm_lex.dolexdirective.file u64 
    local          mm_lex.dolexdirective.i i64 
    local          mm_lex.dolexdirective.lastsymbol i64 
    local          mm_lex.dolexdirective.cond i64 
    local          mm_lex.dolexdirective.fileno i64 
    local          mm_lex.dolexdirective.length i64 
    local          mm_lex.dolexdirective.str block:256 
    procentry                 
    push           mm_lex.dolexdirective.index i64 
    push           2          i64 
    casejumpeq     #12600     i64 0
    push           3          i64 
    casejumpeq     #12600     i64 0
    push           1          i64 
    casejumpeq     #12601     i64 0
    push           5          i64 
    casejumpeq     #12602     i64 0
    push           6          i64 
    casejumpeq     #12603     i64 0
    popstack                  i64 
    jump           #12604     
#12600: 
    setargs                   0 0
    callproc       &mm_lex.lexreadtoken 
    push           &mm_decls.nextlx 
    pushptr                   u8 
    push           75         i64 
    jumpeq         #12605     i64 
    setargs                   1 0
    push           "strincl: string expected" u64 
    callproc       &mm_support.lxerror 
    jump           #12606     
#12605: 
    push           &mm_decls.nextlx 
    push           8          
    pushptroff                u64 1 0
    pop            mm_lex.dolexdirective.file u64 
#12606: 
    setargs                   1 0
    push           mm_lex.dolexdirective.file u64 
    callfn         &mm_support.getsupportfile i64 
    pop            mm_lex.dolexdirective.fileno i64 
    push           &mm_decls.sourcefiletext 
    push           mm_lex.dolexdirective.fileno i64 
    pushptroff                u64 8 0
    push           &mm_decls.nextlx 
    push           8          
    popptroff                 u64 1 0
    push           &mm_decls.sourcefilesizes 
    push           mm_lex.dolexdirective.fileno i64 
    pushptroff                i64 8 0
    store          mm_lex.dolexdirective.length i64 
    pop            mm_lex.astringlength i64 
    startmult                 
    push           mm_lex.dolexdirective.index i64 
    push           2          i64 
    jumpne         #12607     i64 
    push           75         i64 
    resetmult                 
    jump           #12608     
#12607: 
    push           76         i64 
    endmult                   
#12608: 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    push           65         i64 
    push           &mm_decls.nextlx 
    push           1          
    popptroff                 u8 1 0
    push           0          u64 
    push           &mm_decls.nextlx 
    push           8          
    pushptroff                u64 1 0
    push           mm_lex.dolexdirective.length i64 
    popptroff                 u8 1 0
    push           1          i64 
    setret                    i64 
    jump           #12609     
    jump           #12610     
#12601: 
    setargs                   0 0
    callproc       &mm_lex.lexreadtoken 
    push           &mm_decls.nextlx 
    pushptr                   u8 
    push           75         i64 
    jumpeq         #12611     i64 
    setargs                   1 0
    push           "include: string expected" u64 
    callproc       &mm_support.lxerror 
#12611: 
    push           &mm_decls.nextlx 
    push           8          
    pushptroff                u64 1 0
    pop            mm_lex.dolexdirective.file u64 
    setargs                   1 0
    push           mm_lex.dolexdirective.file u64 
    callproc       &mlibp.convlcstring 
    setargs                   2 0
    push           ".m"       u64 
    push           mm_lex.dolexdirective.file u64 
    callfn         &mlibp.addext u64 
    pop            mm_lex.dolexdirective.file u64 
    setargs                   2 0
    push           0          i64 
    push           mm_lex.dolexdirective.file u64 
    callproc       &mm_lex.stacksourcefile 
    push           0          i64 
    setret                    i64 
    jump           #12609     
    jump           #12610     
#12602: 
    setargs                   1 0
    push           "DEFINE UNIT NOT DONE" u64 
    callproc       &mm_support.lxerror 
    jump           #12610     
#12603: 
#12612: 
    setargs                   0 0
    callproc       &mm_lex.lexreadtoken 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           75         i64 
    casejumpeq     #12613     i64 0
    push           79         i64 
    casejumpeq     #12614     i64 0
    popstack                  i64 
    jump           #12615     
#12613: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "ADD/S"    u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    callproc       &mm_lib.addcclib 
    jump           #12616     
#12614: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "ADD/N"    u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    pushptr                   u64 
    callproc       &mm_lib.addcclib 
    jump           #12616     
#12615: 
    setargs                   1 0
    push           "cclib/not str/name" u64 
    callproc       &mm_support.lxerror 
#12616: 
    setargs                   0 0
    callproc       &mm_lex.lexreadtoken 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpeq         #12617     i64 
    jump           #12618     
#12617: 
    jump           #12612     
#12618: 
    push           0          i64 
    setret                    i64 
    jump           #12609     
    jump           #12610     
#12604: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &mm_tables.sourcedirnames 
    push           mm_lex.dolexdirective.index i64 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Directive not implemented" u64 
    callproc       &mm_support.lxerror 
#12610: 
    push           0          i64 
    setret                    i64 
    jump           #12609     
#12609: 
    retfn                     i64 
End


Proc mm_lex.lexreadline:
    procentry                 
#12620: 
    push           mm_lex.lxsptr u64 
    pushptr                   u8 
    switch         #12621     0 13
    opnd           #12622     
#12621: 
    switchlabel    #12623     
    switchlabel    #12622     
    switchlabel    #12622     
    switchlabel    #12622     
    switchlabel    #12622     
    switchlabel    #12622     
    switchlabel    #12622     
    switchlabel    #12622     
    switchlabel    #12622     
    switchlabel    #12622     
    switchlabel    #12624     
    switchlabel    #12622     
    switchlabel    #12622     
    switchlabel    #12624     
    endswitch                 
#12624: 
    jump           #12625     
    jump           #12620     
#12623: 
    push           &mm_lex.lxsptr 
    decr                      u64 1
    jump           #12625     
    jump           #12620     
#12622: 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    jump           #12620     
#12626: 
#12625: 
    retproc                   
End


Proc mm_lex.startlex:
    param          mm_lex.startlex.caption u64 
    param          mm_lex.startlex.fileno i64 
    procentry                 
    push           &mm_decls.sourcefiletext 
    push           mm_lex.startlex.fileno i64 
    pushptroff                u64 8 0
    pop            mm_lex.lxsptr u64 
    push           mm_lex.startlex.fileno i64 
    pop            mm_lex.lxfileno i64 
    push           1          i64 
    push           &mm_decls.nextlx 
    push           4          
    popptroff                 u32 1 0
    push           6          i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    push           0          i64 
    push           &mm_decls.nextlx 
    push           1          
    popptroff                 u8 1 0
#12628: 
    retproc                   
End


Proc mm_lex.addnamestr: u64
    param          mm_lex.addnamestr.name u64 
    local          mm_lex.addnamestr.oldlx block:16 
    local          mm_lex.addnamestr.symptr u64 
    procentry                 
    push           mm_decls.nextlx block:16 
    pop            mm_lex.addnamestr.oldlx block:16 
    setargs                   3 0
    setargs                   1 0
    push           mm_lex.addnamestr.name u64 
    callfn         &mm_lex.gethashvaluez i64 
    setargs                   1 0
    push           mm_lex.addnamestr.name u64 
    callfn         &strlen    i64 
    push           mm_lex.addnamestr.name u64 
    callproc       &mm_lex.lookup 
    push           &mm_decls.nextlx 
    push           8          
    pushptroff                u64 1 0
    pop            mm_lex.addnamestr.symptr u64 
    push           mm_lex.addnamestr.oldlx block:16 
    pop            mm_decls.nextlx block:16 
    push           mm_lex.addnamestr.symptr u64 
    setret                    u64 
    jump           #12630     
#12630: 
    retfn                     u64 
End


Proc mm_lex.ps:
    param          mm_lex.ps.caption u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mm_lex.ps.caption u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           ": "       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           &mm_decls.lx 
    callproc       &mm_lex.printsymbol 
#12632: 
    retproc                   
End


Proc mm_lex.psnext:
    param          mm_lex.psnext.caption u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mm_lex.psnext.caption u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           ": "       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           &mm_decls.nextlx 
    callproc       &mm_lex.printsymbol 
#12634: 
    retproc                   
End


Proc mm_lex.stacksourcefile:
    param          mm_lex.stacksourcefile.file u64 
    param          mm_lex.stacksourcefile.ismainmodule i64 
    local          mm_lex.stacksourcefile.fileno i64 
    local          mm_lex.stacksourcefile.basefile u64 
    local          mm_lex.stacksourcefile.sptr u64 
    local          mm_lex.stacksourcefile.path u64 
    procentry                 
    setargs                   1 0
    push           mm_lex.stacksourcefile.file u64 
    callfn         &mm_support.getsupportfile i64 
    pop            mm_lex.stacksourcefile.fileno i64 
    setargs                   3 0
    push           1          i64 
    push           mm_lex.stacksourcefile.fileno i64 
    push           &mm_decls.sourcefiletext 
    push           mm_lex.stacksourcefile.fileno i64 
    pushptroff                u64 8 0
    callproc       &mm_lex.stacksource 
#12636: 
    retproc                   
End


Proc mm_lex.stacksource:
    param          mm_lex.stacksource.sptr u64 
    param          mm_lex.stacksource.fileno i64 
    param          mm_lex.stacksource.isfile i64 
    procentry                 
    push           mm_lex.sourcelevel i64 
    push           20         i64 
    jumplt         #12638     i64 
    setargs                   1 0
    push           "Include file/macro overflow" u64 
    callproc       &mm_support.lxerror 
#12638: 
    push           &mm_lex.sourcelevel 
    incr                      i64 1
    push           mm_lex.lxstart u64 
    push           &mm_lex.lxstart_stack 
    push           mm_lex.sourcelevel i64 
    popptroff                 u64 8 -8
    push           mm_lex.lxsptr u64 
    push           &mm_lex.lxsptr_stack 
    push           mm_lex.sourcelevel i64 
    popptroff                 u64 8 -8
    push           mm_lex.lxfileno i64 
    push           &mm_lex.lxfileno_stack 
    push           mm_lex.sourcelevel i64 
    popptroff                 i64 8 -8
    push           &mm_decls.nextlx 
    push           4          
    pushptroff                u32 1 0
    push           &mm_lex.lxlineno_stack 
    push           mm_lex.sourcelevel i64 
    popptroff                 i64 8 -8
    push           mm_lex.stacksource.isfile i64 
    push           &mm_lex.isfile_stack 
    push           mm_lex.sourcelevel i64 
    popptroff                 u8 1 -1
    push           mm_lex.stacksource.sptr u64 
    store          mm_lex.lxsptr u64 
    pop            mm_lex.lxstart u64 
    push           1          i64 
    push           &mm_decls.nextlx 
    push           4          
    popptroff                 u32 1 0
    push           mm_lex.stacksource.fileno i64 
    pop            mm_lex.lxfileno i64 
#12639: 
    retproc                   
End


Proc mm_lex.unstacksource:
    procentry                 
    push           mm_lex.sourcelevel i64 
    push           0          i64 
    jumple         #12641     i64 
    push           &mm_lex.lxstart_stack 
    push           mm_lex.sourcelevel i64 
    pushptroff                u64 8 -8
    pop            mm_lex.lxstart u64 
    push           &mm_lex.lxsptr_stack 
    push           mm_lex.sourcelevel i64 
    pushptroff                u64 8 -8
    pop            mm_lex.lxsptr u64 
    push           &mm_lex.lxlineno_stack 
    push           mm_lex.sourcelevel i64 
    pushptroff                i64 8 -8
    push           &mm_decls.nextlx 
    push           4          
    popptroff                 u32 1 0
    push           &mm_lex.lxfileno_stack 
    push           mm_lex.sourcelevel i64 
    pushptroff                i64 8 -8
    pop            mm_lex.lxfileno i64 
    push           &mm_lex.sourcelevel 
    decr                      i64 1
#12641: 
#12642: 
    retproc                   
End


Proc mm_lex.readarraystring:
    param          mm_lex.readarraystring.prefix i64 
    procentry                 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    setargs                   1 0
    push           34         i64 
    callproc       &mm_lex.lxreadstring 
    push           76         i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    setargs                   1 0
    push           mm_lex.readarraystring.prefix i64 
    callfn         &toupper   i32 
    push           &mm_decls.nextlx 
    push           1          
    popptroff                 u8 1 0
    setargs                   1 0
    push           &mm_decls.nextlx 
    push           8          
    pushptroff                u64 1 0
    callfn         &strlen    i64 
    pop            mm_lex.astringlength i64 
#12644: 
    retproc                   
End


Proc mm_lex.stringtonumber128: u64
    param          mm_lex.stringtonumber128.s u64 
    param          mm_lex.stringtonumber128.length i64 
    param          mm_lex.stringtonumber128.base i64 
    local          mm_lex.stringtonumber128.aa i128 
    local          mm_lex.stringtonumber128.c i64 
    local          mm_lex.stringtonumber128.d i64 
    local          mm_lex.stringtonumber128.av_1 i64 
    local          mm_lex.stringtonumber128.p u64 
    procentry                 
    push           0          i64 
    widenw                    i128 i64 
    pop            mm_lex.stringtonumber128.aa i128 
#12646: 
    push           mm_lex.stringtonumber128.length i64 
    pop            mm_lex.stringtonumber128.av_1 i64 
    push           mm_lex.stringtonumber128.av_1 i64 
    push           0          i64 
    jumple         #12647     i64 
#12648: 
    push           mm_lex.stringtonumber128.aa i128 
    push           mm_lex.stringtonumber128.base i64 
    widenw                    i128 i64 
    mul                       i128 
    pop            mm_lex.stringtonumber128.aa i128 
    push           &mm_lex.stringtonumber128.s 
    loadincr                  u64 1
    pushptr                   u8 
    pop            mm_lex.stringtonumber128.c i64 
    push           mm_lex.stringtonumber128.c i64 
    push           97         i64 
    jumplt         #12649     i64 
    push           mm_lex.stringtonumber128.c i64 
    push           97         i64 
    sub                       i64 
    push           10         i64 
    add                       i64 
    pop            mm_lex.stringtonumber128.d i64 
    jump           #12650     
#12649: 
    push           mm_lex.stringtonumber128.c i64 
    push           65         i64 
    jumplt         #12651     i64 
    push           mm_lex.stringtonumber128.c i64 
    push           65         i64 
    sub                       i64 
    push           10         i64 
    add                       i64 
    pop            mm_lex.stringtonumber128.d i64 
    jump           #12650     
#12651: 
    push           mm_lex.stringtonumber128.c i64 
    push           48         i64 
    sub                       i64 
    pop            mm_lex.stringtonumber128.d i64 
#12650: 
    push           mm_lex.stringtonumber128.aa i128 
    push           mm_lex.stringtonumber128.d i64 
    widenw                    i128 i64 
    add                       i128 
    pop            mm_lex.stringtonumber128.aa i128 
#12652: 
    to             #12648     
    opnd           mm_lex.stringtonumber128.av_1 
#12647: 
    setargs                   1 0
    push           16         i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            mm_lex.stringtonumber128.p u64 
    push           mm_lex.stringtonumber128.aa i128 
    push           mm_lex.stringtonumber128.p u64 
    popptr                    i128 
    push           mm_lex.stringtonumber128.p u64 
    setret                    u64 
    jump           #12653     
#12653: 
    retfn                     u64 
End


Proc mm_lex.setinttype: i64
    param          mm_lex.setinttype.a u64 
    procentry                 
    startmult                 
    push           mm_lex.setinttype.a u64 
    push           9223372036854775807 u64 
    jumpgt         #12655     u64 
    push           4          i64 
    resetmult                 
    jump           #12656     
#12655: 
    push           2          i64 
    endmult                   
#12656: 
    setret                    i64 
    jump           #12657     
#12657: 
    retfn                     i64 
End


Proc mm_lex.readrawxname:
    local          mm_lex.readrawxname.c i64 
    local          mm_lex.readrawxname.hsum i64 
    local          mm_lex.readrawxname.length i64 
    procentry                 
    push           mm_lex.lxsptr u64 
    push           &mm_decls.nextlx 
    push           8          
    popptroff                 u64 1 0
    push           0          i64 
    pop            mm_lex.readrawxname.hsum i64 
#12659: 
    push           &mm_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          mm_lex.readrawxname.c i64 
    switch         #12660     36 255
    opnd           #12661     
#12660: 
    switchlabel    #12662     
    switchlabel    #12661     
    switchlabel    #12661     
    switchlabel    #12661     
    switchlabel    #12661     
    switchlabel    #12661     
    switchlabel    #12661     
    switchlabel    #12661     
    switchlabel    #12661     
    switchlabel    #12661     
    switchlabel    #12661     
    switchlabel    #12661     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12661     
    switchlabel    #12661     
    switchlabel    #12661     
    switchlabel    #12661     
    switchlabel    #12661     
    switchlabel    #12661     
    switchlabel    #12661     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12661     
    switchlabel    #12661     
    switchlabel    #12661     
    switchlabel    #12661     
    switchlabel    #12662     
    switchlabel    #12661     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12661     
    switchlabel    #12661     
    switchlabel    #12661     
    switchlabel    #12661     
    switchlabel    #12661     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    switchlabel    #12662     
    endswitch                 
#12662: 
    push           mm_lex.readrawxname.hsum i64 
    push           4          i64 
    shl                       i64 
    push           mm_lex.readrawxname.hsum i64 
    sub                       i64 
    push           mm_lex.readrawxname.c i64 
    add                       i64 
    pop            mm_lex.readrawxname.hsum i64 
    jump           #12659     
#12661: 
    push           &mm_lex.lxsptr 
    decr                      u64 1
    jump           #12663     
    jump           #12659     
#12663: 
    push           mm_lex.lxsptr u64 
    push           &mm_decls.nextlx 
    push           8          
    pushptroff                u64 1 0
    subref                    i64 1
    pop            mm_lex.readrawxname.length i64 
    push           mm_lex.readrawxname.length i64 
    push           0          i64 
    jumpne         #12664     i64 
    setargs                   1 0
    push           "Bad ` name" u64 
    callproc       &mm_support.lxerror 
#12664: 
    setargs                   3 0
    push           mm_lex.readrawxname.hsum i64 
    push           5          i64 
    shl                       i64 
    push           mm_lex.readrawxname.hsum i64 
    sub                       i64 
    push           mm_lex.readrawxname.length i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    callproc       &mm_lex.lookup 
    push           67         i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    jump           #12665     
#12665: 
    retproc                   
End


Proc mm_lex.lxerror_s:
    param          mm_lex.lxerror_s.mess u64 
    param          mm_lex.lxerror_s.s u64 
    procentry                 
    setargs                   1 0
    push           mm_lex.lxerror_s.mess u64 
    callproc       &mm_support.lxerror 
#12667: 
    retproc                   
End


Proc mm_lex.lxreadstring:
    param          mm_lex.lxreadstring.termchar i64 
    local          mm_lex.lxreadstring.s u64 
    local          mm_lex.lxreadstring.t u64 
    local          mm_lex.lxreadstring.c i64 
    local          mm_lex.lxreadstring.d i64 
    local          mm_lex.lxreadstring.length i64 
    local          mm_lex.lxreadstring.hasescape i64 
    local          mm_lex.lxreadstring.str block:8 
    local          mm_lex.lxreadstring.av_1 i64 
    procentry                 
    push           mm_lex.lxreadstring.termchar i64 
    push           34         i64 
    jumpne         #12669     i64 
    push           75         i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    jump           #12670     
#12669: 
    push           73         i64 
    push           &mm_decls.nextlx 
    push           0          
    popptroff                 u8 1 0
    push           4          i64 
    push           &mm_decls.nextlx 
    push           1          
    popptroff                 u8 1 0
#12670: 
    push           mm_lex.lxsptr u64 
    pop            mm_lex.lxreadstring.s u64 
    push           0          i64 
    pop            mm_lex.lxreadstring.length i64 
    push           0          i64 
    pop            mm_lex.lxreadstring.hasescape i64 
#12671: 
    push           &mm_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          mm_lex.lxreadstring.c i64 
    switch         #12672     0 92
    opnd           #12673     
#12672: 
    switchlabel    #12674     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12674     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12674     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12675     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12675     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12673     
    switchlabel    #12676     
    endswitch                 
#12676: 
    push           mm_lex.lxsptr u64 
    pushptr                   u8 
    pop            mm_lex.lxreadstring.c i64 
    push           mm_lex.lxreadstring.c i64 
    push           65         u64 
    push           90         u64 
    jumpnotinrange #12677     i64 
    push           &mm_lex.lxreadstring.c 
    push           32         i64 
    addto                     i64 
#12677: 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    push           1          i64 
    pop            mm_lex.lxreadstring.hasescape i64 
    push           mm_lex.lxreadstring.c i64 
    switch         #12678     34 122
    opnd           #12679     
#12678: 
    switchlabel    #12680     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12680     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12680     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12680     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12680     
    switchlabel    #12680     
    switchlabel    #12680     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12680     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12680     
    switchlabel    #12679     
    switchlabel    #12680     
    switchlabel    #12679     
    switchlabel    #12679     
    switchlabel    #12680     
    switchlabel    #12680     
    switchlabel    #12680     
    switchlabel    #12680     
    switchlabel    #12679     
    switchlabel    #12680     
    switchlabel    #12681     
    switchlabel    #12682     
    switchlabel    #12680     
    switchlabel    #12680     
    endswitch                 
#12680: 
    push           &mm_lex.lxreadstring.length 
    incr                      i64 1
    jump           #12683     
#12681: 
    push           &mm_lex.lxreadstring.length 
    incr                      i64 1
    jump           #12683     
#12682: 
    push           &mm_lex.lxsptr 
    push           2          i64 
    addrefoffto               u64 1 0
    push           &mm_lex.lxreadstring.length 
    incr                      i64 1
    jump           #12683     
#12679: 
    setargs                   1 0
    push           "Bad str escape" u64 
    callproc       &mm_support.lxerror 
#12683: 
    jump           #12671     
#12675: 
    push           mm_lex.lxreadstring.c i64 
    push           mm_lex.lxreadstring.termchar i64 
    jumpne         #12684     i64 
    push           mm_lex.lxsptr u64 
    pushptr                   u8 
    push           mm_lex.lxreadstring.c i64 
    jumpne         #12685     i64 
    push           1          i64 
    pop            mm_lex.lxreadstring.hasescape i64 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    push           &mm_lex.lxreadstring.length 
    incr                      i64 1
    jump           #12686     
#12685: 
    jump           #12687     
#12686: 
    jump           #12688     
#12684: 
    push           &mm_lex.lxreadstring.length 
    incr                      i64 1
#12688: 
    jump           #12671     
#12674: 
    setargs                   1 0
    push           "String not terminated" u64 
    callproc       &mm_support.lxerror 
    jump           #12671     
#12673: 
    push           &mm_lex.lxreadstring.length 
    incr                      i64 1
    jump           #12671     
#12687: 
    push           mm_lex.lxreadstring.length i64 
    push           0          i64 
    jumpne         #12689     i64 
    push           ""         u64 
    push           &mm_decls.nextlx 
    push           8          
    popptroff                 u64 1 0
    jump           #12690     
    jump           #12691     
#12689: 
    push           mm_lex.lxreadstring.hasescape i64 
    jumptrue       #12692     i64 
    setargs                   2 0
    push           mm_lex.lxreadstring.length i64 
    push           mm_lex.lxreadstring.s u64 
    callfn         &mlibp.pcm_copyheapstringn u64 
    push           &mm_decls.nextlx 
    push           8          
    popptroff                 u64 1 0
    jump           #12690     
#12692: 
#12691: 
    setargs                   1 0
    push           mm_lex.lxreadstring.length i64 
    push           1          i64 
    add                       i64 
    callfn         &mlibp.pcm_alloc u64 
    store          mm_lex.lxreadstring.t u64 
    push           &mm_decls.nextlx 
    push           8          
    popptroff                 u64 1 0
#12693: 
    push           &mm_lex.lxreadstring.s 
    loadincr                  u64 1
    pushptr                   u8 
    store          mm_lex.lxreadstring.c i64 
    switch         #12694     0 92
    opnd           #12695     
#12694: 
    switchlabel    #12696     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12696     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12696     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12697     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12697     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12695     
    switchlabel    #12698     
    endswitch                 
#12698: 
    push           mm_lex.lxreadstring.s u64 
    pushptr                   u8 
    pop            mm_lex.lxreadstring.c i64 
    push           mm_lex.lxreadstring.c i64 
    push           65         i64 
    jumplt         #12699     i64 
    push           mm_lex.lxreadstring.c i64 
    push           90         i64 
    jumpgt         #12699     i64 
    push           &mm_lex.lxreadstring.c 
    push           32         i64 
    addto                     i64 
#12699: 
    push           &mm_lex.lxreadstring.s 
    incr                      u64 1
    push           mm_lex.lxreadstring.c i64 
    switch         #12700     34 122
    opnd           #12701     
#12700: 
    switchlabel    #12702     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12703     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12704     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12702     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12705     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12706     
    switchlabel    #12707     
    switchlabel    #12708     
    switchlabel    #12701     
    switchlabel    #12709     
    switchlabel    #12710     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12711     
    switchlabel    #12701     
    switchlabel    #12711     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12701     
    switchlabel    #12708     
    switchlabel    #12712     
    switchlabel    #12713     
    switchlabel    #12701     
    switchlabel    #12714     
    switchlabel    #12715     
    switchlabel    #12716     
    switchlabel    #12717     
    switchlabel    #12704     
    endswitch                 
#12706: 
    push           7          i64 
    pop            mm_lex.lxreadstring.c i64 
    jump           #12718     
#12707: 
    push           8          i64 
    pop            mm_lex.lxreadstring.c i64 
    jump           #12718     
#12708: 
    push           13         i64 
    pop            mm_lex.lxreadstring.c i64 
    jump           #12718     
#12709: 
    push           26         i64 
    pop            mm_lex.lxreadstring.c i64 
    jump           #12718     
#12710: 
    push           12         i64 
    pop            mm_lex.lxreadstring.c i64 
    jump           #12718     
#12711: 
    push           10         i64 
    pop            mm_lex.lxreadstring.c i64 
    jump           #12718     
#12712: 
    push           27         i64 
    pop            mm_lex.lxreadstring.c i64 
    jump           #12718     
#12713: 
    push           9          i64 
    pop            mm_lex.lxreadstring.c i64 
    jump           #12718     
#12714: 
    push           11         i64 
    pop            mm_lex.lxreadstring.c i64 
    jump           #12718     
#12715: 
    push           13         u64 
    push           &mm_lex.lxreadstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           10         i64 
    pop            mm_lex.lxreadstring.c i64 
    jump           #12718     
#12716: 
    push           0          i64 
    pop            mm_lex.lxreadstring.c i64 
#12719: 
    push           2          i64 
    pop            mm_lex.lxreadstring.av_1 i64 
#12720: 
    push           &mm_lex.lxreadstring.s 
    loadincr                  u64 1
    pushptr                   u8 
    store          mm_lex.lxreadstring.d i64 
    push           65         i64 
    casejumpeq     #12721     i64 0
    push           66         i64 
    casejumpeq     #12721     i64 0
    push           67         i64 
    casejumpeq     #12721     i64 0
    push           68         i64 
    casejumpeq     #12721     i64 0
    push           69         i64 
    casejumpeq     #12721     i64 0
    push           70         i64 
    casejumpeq     #12721     i64 0
    push           97         i64 
    casejumpeq     #12722     i64 0
    push           98         i64 
    casejumpeq     #12722     i64 0
    push           99         i64 
    casejumpeq     #12722     i64 0
    push           100        i64 
    casejumpeq     #12722     i64 0
    push           101        i64 
    casejumpeq     #12722     i64 0
    push           102        i64 
    casejumpeq     #12722     i64 0
    push           48         i64 
    casejumpeq     #12723     i64 0
    push           49         i64 
    casejumpeq     #12723     i64 0
    push           50         i64 
    casejumpeq     #12723     i64 0
    push           51         i64 
    casejumpeq     #12723     i64 0
    push           52         i64 
    casejumpeq     #12723     i64 0
    push           53         i64 
    casejumpeq     #12723     i64 0
    push           54         i64 
    casejumpeq     #12723     i64 0
    push           55         i64 
    casejumpeq     #12723     i64 0
    push           56         i64 
    casejumpeq     #12723     i64 0
    push           57         i64 
    casejumpeq     #12723     i64 0
    popstack                  i64 
    jump           #12724     
#12721: 
    push           mm_lex.lxreadstring.c i64 
    push           16         i64 
    mul                       i64 
    push           mm_lex.lxreadstring.d i64 
    add                       i64 
    push           65         i64 
    sub                       i64 
    push           10         i64 
    add                       i64 
    pop            mm_lex.lxreadstring.c i64 
    jump           #12725     
#12722: 
    push           mm_lex.lxreadstring.c i64 
    push           16         i64 
    mul                       i64 
    push           mm_lex.lxreadstring.d i64 
    add                       i64 
    push           97         i64 
    sub                       i64 
    push           10         i64 
    add                       i64 
    pop            mm_lex.lxreadstring.c i64 
    jump           #12725     
#12723: 
    push           mm_lex.lxreadstring.c i64 
    push           16         i64 
    mul                       i64 
    push           mm_lex.lxreadstring.d i64 
    add                       i64 
    push           48         i64 
    sub                       i64 
    pop            mm_lex.lxreadstring.c i64 
    jump           #12725     
#12724: 
    setargs                   1 0
    push           "Bad \\x code" u64 
    callproc       &mm_support.lxerror 
#12725: 
#12726: 
    to             #12720     
    opnd           mm_lex.lxreadstring.av_1 
#12727: 
    jump           #12718     
#12717: 
    push           16         i64 
    pop            mm_lex.lxreadstring.c i64 
    jump           #12718     
#12704: 
    push           0          i64 
    pop            mm_lex.lxreadstring.c i64 
    jump           #12718     
#12702: 
    push           34         i64 
    pop            mm_lex.lxreadstring.c i64 
    jump           #12718     
#12705: 
    push           92         i64 
    pop            mm_lex.lxreadstring.c i64 
    jump           #12718     
#12703: 
    push           39         i64 
    pop            mm_lex.lxreadstring.c i64 
    jump           #12718     
#12701: 
    push           mm_lex.lxreadstring.c u64 
    push           &mm_lex.lxreadstring.str 
    push           1          i64 
    popptroff                 u8 1 -1
    push           0          u64 
    push           &mm_lex.lxreadstring.str 
    push           2          i64 
    popptroff                 u8 1 -1
    setargs                   2 0
    push           &mm_lex.lxreadstring.str 
    push           "Unknown string escape: \\%s" u64 
    callproc       &mm_lex.lxerror_s 
#12718: 
    jump           #12728     
#12697: 
    push           mm_lex.lxreadstring.c i64 
    push           mm_lex.lxreadstring.termchar i64 
    jumpne         #12729     i64 
    push           mm_lex.lxreadstring.s u64 
    pushptr                   u8 
    push           mm_lex.lxreadstring.c i64 
    jumpne         #12730     i64 
    push           &mm_lex.lxreadstring.s 
    incr                      u64 1
    jump           #12731     
#12730: 
    jump           #12732     
#12731: 
#12729: 
    jump           #12728     
#12696: 
    setargs                   1 0
    push           "String not terminated" u64 
    callproc       &mm_support.lxerror 
    jump           #12728     
#12695: 
#12728: 
    push           mm_lex.lxreadstring.c u64 
    push           &mm_lex.lxreadstring.t 
    loadincr                  u64 1
    popptr                    u8 
    jump           #12693     
#12732: 
    push           0          u64 
    push           mm_lex.lxreadstring.t u64 
    popptr                    u8 
#12690: 
    retproc                   
End


Proc mm_support.loadsourcefile: i64
    param          mm_support.loadsourcefile.filespec u64 
    local          mm_support.loadsourcefile.s u64 
    local          mm_support.loadsourcefile.shortfile u64 
    procentry                 
    push           mm_decls.nsourcefiles i64 
    push           1000       i64 
    jumple         #12734     i64 
    setargs                   3 0
    push           ""         u64 
    push           ""         u64 
    push           "Too many source files" u64 
    callproc       &mm_support.loaderror 
#12734: 
    setargs                   1 0
    push           mm_support.loadsourcefile.filespec u64 
    callfn         &mlibp.extractfile u64 
    pop            mm_support.loadsourcefile.shortfile u64 
    push           &mm_decls.nsourcefiles 
    incr                      i64 1
    setargs                   1 0
    push           mm_support.loadsourcefile.filespec u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &mm_decls.sourcefilepaths 
    push           mm_decls.nsourcefiles i64 
    popptroff                 u64 8 0
    setargs                   1 0
    push           mm_support.loadsourcefile.shortfile u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &mm_decls.sourcefilenames 
    push           mm_decls.nsourcefiles i64 
    popptroff                 u64 8 0
    setargs                   1 0
    push           mm_support.loadsourcefile.filespec u64 
    callfn         &mlibp.readfile u64 
    pop            mm_support.loadsourcefile.s u64 
    push           mm_support.loadsourcefile.s u64 
    jumptrue       #12735     u64 
    setargs                   3 0
    push           ""         u64 
    push           mm_support.loadsourcefile.filespec u64 
    push           "LSF can't load " u64 
    callproc       &mm_support.loaderror 
#12735: 
    push           mm_support.loadsourcefile.s u64 
    push           &mm_decls.sourcefiletext 
    push           mm_decls.nsourcefiles i64 
    popptroff                 u64 8 0
    push           mm_decls.fwritema u8 
    jumpfalse      #12736     i64 
    setargs                   1 0
    push           mm_support.loadsourcefile.s u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &mm_decls.mafiletext 
    push           mm_decls.nsourcefiles i64 
    popptroff                 u64 8 0
#12736: 
    push           mlibp.rfsize i64 
    push           &mm_decls.sourcefilesizes 
    push           mm_decls.nsourcefiles i64 
    popptroff                 i64 8 0
    push           0          u64 
    push           mm_support.loadsourcefile.s u64 
    push           mlibp.rfsize i64 
    popptroff                 u8 1 0
    push           mm_decls.nsourcefiles i64 
    setret                    i64 
    jump           #12737     
#12737: 
    retfn                     i64 
End


Proc mm_support.loadbuiltin: i64
    param          mm_support.loadbuiltin.shortfile u64 
    param          mm_support.loadbuiltin.text u64 
    local          mm_support.loadbuiltin.s u64 
    local          mm_support.loadbuiltin.str block:128 
    procentry                 
    push           mm_decls.nsourcefiles i64 
    push           1000       i64 
    jumple         #12739     i64 
    setargs                   3 0
    push           ""         u64 
    push           ""         u64 
    push           "Too many source files" u64 
    callproc       &mm_support.loaderror 
#12739: 
    push           &mm_decls.nsourcefiles 
    incr                      i64 1
    setargs                   1 0
    push           &mm_support.loadbuiltin.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "<Built-in: #>" u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           mm_support.loadbuiltin.shortfile u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           &mm_support.loadbuiltin.str 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &mm_decls.sourcefilepaths 
    push           mm_decls.nsourcefiles i64 
    popptroff                 u64 8 0
    setargs                   1 0
    push           mm_support.loadbuiltin.shortfile u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &mm_decls.sourcefilenames 
    push           mm_decls.nsourcefiles i64 
    popptroff                 u64 8 0
    setargs                   1 0
    push           mm_support.loadbuiltin.text u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &mm_decls.sourcefiletext 
    push           mm_decls.nsourcefiles i64 
    popptroff                 u64 8 0
    push           mm_decls.fwritema u8 
    jumpfalse      #12740     i64 
    setargs                   1 0
    push           mm_support.loadbuiltin.text u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &mm_decls.mafiletext 
    push           mm_decls.nsourcefiles i64 
    popptroff                 u64 8 0
#12740: 
    setargs                   1 0
    push           mm_support.loadbuiltin.text u64 
    callfn         &strlen    i64 
    push           &mm_decls.sourcefilesizes 
    push           mm_decls.nsourcefiles i64 
    popptroff                 i64 8 0
    push           mm_decls.nsourcefiles i64 
    setret                    i64 
    jump           #12741     
#12741: 
    retfn                     i64 
End


Proc mm_support.loadbundledfile: i64
    param          mm_support.loadbundledfile.filespec u64 
    param          mm_support.loadbundledfile.support i64 
    local          mm_support.loadbundledfile.fileno i64 
    local          mm_support.loadbundledfile.file u64 
    local          mm_support.loadbundledfile.n i64 
    local          mm_support.loadbundledfile.lastmatch i64 
    local          mm_support.loadbundledfile.i i64 
    procentry                 
    setargs                   1 0
    push           mm_support.loadbundledfile.filespec u64 
    callfn         &mlibp.extractfile u64 
    pop            mm_support.loadbundledfile.file u64 
#12743: 
    push           1          i64 
    pop            mm_support.loadbundledfile.i i64 
    push           mm_decls.nmafiles i64 
    push           1          i64 
    jumplt         #12744     i64 
#12745: 
    setargs                   2 0
    push           &mm_decls.mafilenames 
    push           mm_support.loadbundledfile.i i64 
    pushptroff                u64 8 0
    push           mm_support.loadbundledfile.file u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #12746     i64 
    push           mm_support.loadbundledfile.support i64 
    push           &mm_decls.mafilesupport 
    push           mm_support.loadbundledfile.i i64 
    pushptroff                u8 1 0
    jumpne         #12746     i64 
    push           &mm_decls.mafilefileno 
    push           mm_support.loadbundledfile.i i64 
    pushptroff                u8 1 0
    pop            mm_support.loadbundledfile.fileno i64 
    push           mm_support.loadbundledfile.fileno i64 
    jumptrue       #12747     i64 
    push           &mm_decls.nsourcefiles 
    incrload                  i64 1
    pop            mm_support.loadbundledfile.fileno i64 
    push           mm_support.loadbundledfile.fileno i64 
    push           &mm_decls.mafilefileno 
    push           mm_support.loadbundledfile.i i64 
    popptroff                 u8 1 0
    push           &mm_decls.mafilenames 
    push           mm_support.loadbundledfile.i i64 
    pushptroff                u64 8 0
    push           &mm_decls.sourcefilepaths 
    push           mm_decls.nsourcefiles i64 
    popptroff                 u64 8 0
    push           &mm_decls.mafilenames 
    push           mm_support.loadbundledfile.i i64 
    pushptroff                u64 8 0
    push           &mm_decls.sourcefilenames 
    push           mm_decls.nsourcefiles i64 
    popptroff                 u64 8 0
    push           &mm_decls.mafiletext 
    push           mm_support.loadbundledfile.i i64 
    pushptroff                u64 8 0
    push           &mm_decls.sourcefiletext 
    push           mm_decls.nsourcefiles i64 
    popptroff                 u64 8 0
    push           &mm_decls.mafilesizes 
    push           mm_support.loadbundledfile.i i64 
    pushptroff                i64 8 0
    push           &mm_decls.sourcefilesizes 
    push           mm_decls.nsourcefiles i64 
    popptroff                 i64 8 0
    setargs                   1 0
    push           &mm_decls.mafiletext 
    push           mm_support.loadbundledfile.i i64 
    pushptroff                u64 8 0
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &mm_decls.sourcefiletext 
    push           mm_decls.nsourcefiles i64 
    popptroff                 u64 8 0
    jump           #12748     
#12747: 
#12748: 
    push           mm_support.loadbundledfile.fileno i64 
    setret                    i64 
    jump           #12749     
#12746: 
#12750: 
    forup          #12745     i64 1
    opnd           mm_support.loadbundledfile.i 
    opnd           mm_decls.nmafiles 
#12744: 
    setargs                   3 0
    push           ""         u64 
    push           mm_support.loadbundledfile.filespec u64 
    push           "Can't find bundled file: # #" u64 
    callproc       &mm_support.loaderror 
    push           0          i64 
    setret                    i64 
    jump           #12749     
#12749: 
    retfn                     i64 
End


Proc mm_support.mcerror:
    param          mm_support.mcerror.mess u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "MC Error:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_support.mcerror.mess u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#12752: 
    retproc                   
End


Proc mm_support.serror_gen:
    param          mm_support.serror_gen.mess u64 
    procentry                 
    push           mm_decls.currproc u64 
    jumpfalse      #12754     u64 
    push           mm_decls.currproc u64 
    push           78         
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #12754     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "In function" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_decls.currproc u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           " "        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#12754: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "On line"  u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   2 0
    push           0          i64 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    push           0          i64 
    push           23         i64 
    dotslice                  i64 
    callproc       &msysp.m$print_u64 
    setargs                   1 0
    push           "in file"  u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_decls.sourcefilepaths 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    push           24         i64 
    push           31         i64 
    dotslice                  i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_decls.sourcefilenames 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    push           24         i64 
    push           31         i64 
    dotslice                  i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "**** Syntax Error:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_support.serror_gen.mess u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "****"     u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    push           0          i64 
    push           23         i64 
    dotslice                  i64 
    push           &mm_decls.sourcefilepaths 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    push           24         i64 
    push           31         i64 
    dotslice                  i64 
    pushptroff                u64 8 0
    callproc       &mm_support.stopcompiler 
#12755: 
    retproc                   
End


Proc mm_support.stopcompiler:
    param          mm_support.stopcompiler.filename u64 
    param          mm_support.stopcompiler.lineno i64 
    local          mm_support.stopcompiler.f u64 
    procentry                 
    setargs                   2 0
    push           "w"        u64 
    push           "$error.tmp" u64 
    callfn         &fopen     u64 
    pop            mm_support.stopcompiler.f u64 
    setargs                   1 0
    push           mm_support.stopcompiler.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           mm_support.stopcompiler.filename u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_support.stopcompiler.lineno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           mm_support.stopcompiler.f u64 
    callproc       &fclose    
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#12757: 
    retproc                   
End


Proc mm_support.serror:
    param          mm_support.serror.mess u64 
    procentry                 
    setargs                   1 0
    push           mm_support.serror.mess u64 
    callproc       &mm_support.serror_gen 
#12759: 
    retproc                   
End


Proc mm_support.serror_s:
    param          mm_support.serror_s.mess u64 
    param          mm_support.serror_s.a u64 
    local          mm_support.serror_s.str block:256 
    procentry                 
    setargs                   1 0
    push           &mm_support.serror_s.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           mm_support.serror_s.mess u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           mm_support.serror_s.a u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           &mm_support.serror_s.str 
    callproc       &mm_support.serror_gen 
#12761: 
    retproc                   
End


Proc mm_support.error_gen:
    param          mm_support.error_gen.pass i64 
    param          mm_support.error_gen.mess u64 
    param          mm_support.error_gen.p u64 
    local          mm_support.error_gen.lineno i64 
    local          mm_support.error_gen.fileno i64 
    procentry                 
    push           mm_support.error_gen.p u64 
    jumpfalse      #12763     u64 
    push           mm_support.error_gen.p u64 
    push           4          
    pushptroff                u32 1 0
    push           24         i64 
    push           31         i64 
    dotslice                  i64 
    pop            mm_support.error_gen.fileno i64 
    push           mm_support.error_gen.p u64 
    push           4          
    pushptroff                u32 1 0
    push           0          i64 
    push           23         i64 
    dotslice                  i64 
    pop            mm_support.error_gen.lineno i64 
    jump           #12764     
#12763: 
    push           mm_tables.mlineno i64 
    push           24         i64 
    shr                       i64 
    pop            mm_support.error_gen.fileno i64 
    push           mm_tables.mlineno i64 
    push           16777215   i64 
    iand                      i64 
    pop            mm_support.error_gen.lineno i64 
#12764: 
    push           mm_decls.currproc u64 
    jumpfalse      #12765     u64 
    push           mm_decls.currproc u64 
    push           78         
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #12765     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "In function" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_decls.currproc u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           " "        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#12765: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "On line"  u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_support.error_gen.lineno i64 
    push           16777215   i64 
    iand                      i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           "in file"  u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_decls.sourcefilepaths 
    push           mm_support.error_gen.fileno i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           mm_support.error_gen.pass i64 
    push           78         i64 
    casejumpeq     #12766     i64 0
    push           84         i64 
    casejumpeq     #12767     i64 0
    push           71         i64 
    casejumpeq     #12768     i64 0
    push           65         i64 
    casejumpeq     #12769     i64 0
    popstack                  i64 
    jump           #12770     
#12766: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "**** RX Name Error: " u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #12771     
#12767: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "**** TX Type Error: " u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #12771     
#12768: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "**** GX Code Gen Error: " u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #12771     
#12769: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "**** 'AX Code Gen Error: " u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #12771     
#12770: 
#12771: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mm_support.error_gen.mess u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &mwindowsp.os_getch 
    setargs                   2 0
    push           mm_support.error_gen.lineno i64 
    push           16777215   i64 
    iand                      i64 
    push           &mm_decls.sourcefilepaths 
    push           mm_support.error_gen.fileno i64 
    pushptroff                u64 8 0
    callproc       &mm_support.stopcompiler 
#12772: 
    retproc                   
End


Proc mm_support.rxerror:
    param          mm_support.rxerror.mess u64 
    param          mm_support.rxerror.p u64 
    procentry                 
    setargs                   3 0
    push           mm_support.rxerror.p u64 
    push           mm_support.rxerror.mess u64 
    push           78         i64 
    callproc       &mm_support.error_gen 
#12774: 
    retproc                   
End


Proc mm_support.gerror:
    param          mm_support.gerror.mess u64 
    param          mm_support.gerror.p u64 
    procentry                 
    setargs                   3 0
    push           mm_support.gerror.p u64 
    push           mm_support.gerror.mess u64 
    push           71         i64 
    callproc       &mm_support.error_gen 
#12776: 
    retproc                   
End


Proc mm_support.axerror:
    param          mm_support.axerror.mess u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "ALINENO=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_decls.alineno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   3 0
    push           0          u64 
    push           mm_support.axerror.mess u64 
    push           65         i64 
    callproc       &mm_support.error_gen 
#12778: 
    retproc                   
End


Proc mm_support.txerror:
    param          mm_support.txerror.mess u64 
    param          mm_support.txerror.p u64 
    procentry                 
    setargs                   3 0
    push           mm_support.txerror.p u64 
    push           mm_support.txerror.mess u64 
    push           84         i64 
    callproc       &mm_support.error_gen 
#12780: 
    retproc                   
End


Proc mm_support.txerror_s:
    param          mm_support.txerror_s.mess u64 
    param          mm_support.txerror_s.a u64 
    param          mm_support.txerror_s.p u64 
    local          mm_support.txerror_s.str block:256 
    procentry                 
    setargs                   1 0
    push           &mm_support.txerror_s.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           mm_support.txerror_s.mess u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           mm_support.txerror_s.a u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   3 0
    push           mm_support.txerror_s.p u64 
    push           &mm_support.txerror_s.str 
    push           84         i64 
    callproc       &mm_support.error_gen 
#12782: 
    retproc                   
End


Proc mm_support.txerror_ss:
    param          mm_support.txerror_ss.mess u64 
    param          mm_support.txerror_ss.a u64 
    param          mm_support.txerror_ss.b u64 
    local          mm_support.txerror_ss.str block:256 
    procentry                 
    setargs                   1 0
    push           &mm_support.txerror_ss.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           mm_support.txerror_ss.mess u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           mm_support.txerror_ss.a u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_support.txerror_ss.b u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   3 0
    push           0          u64 
    push           &mm_support.txerror_ss.str 
    push           84         i64 
    callproc       &mm_support.error_gen 
#12784: 
    retproc                   
End


Proc mm_support.rxerror_s:
    param          mm_support.rxerror_s.mess u64 
    param          mm_support.rxerror_s.a u64 
    param          mm_support.rxerror_s.p u64 
    local          mm_support.rxerror_s.str block:256 
    procentry                 
    setargs                   1 0
    push           &mm_support.rxerror_s.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           mm_support.rxerror_s.mess u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           mm_support.rxerror_s.a u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   3 0
    push           mm_support.rxerror_s.p u64 
    push           &mm_support.rxerror_s.str 
    push           78         i64 
    callproc       &mm_support.error_gen 
#12786: 
    retproc                   
End


Proc mm_support.gerror_s:
    param          mm_support.gerror_s.mess u64 
    param          mm_support.gerror_s.s u64 
    param          mm_support.gerror_s.p u64 
    local          mm_support.gerror_s.str block:256 
    procentry                 
    setargs                   1 0
    push           &mm_support.gerror_s.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           mm_support.gerror_s.mess u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           mm_support.gerror_s.s u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   3 0
    push           mm_support.gerror_s.p u64 
    push           &mm_support.gerror_s.str 
    push           71         i64 
    callproc       &mm_support.error_gen 
#12788: 
    retproc                   
End


Proc mm_support.lxerror_gen:
    param          mm_support.lxerror_gen.mess u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "On line"  u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   2 0
    push           0          i64 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    push           0          i64 
    push           23         i64 
    dotslice                  i64 
    callproc       &msysp.m$print_u64 
    setargs                   1 0
    push           "in file"  u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_decls.sourcefilepaths 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    push           24         i64 
    push           31         i64 
    dotslice                  i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "**** Lex Error:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_support.lxerror_gen.mess u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "****"     u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    push           0          i64 
    push           23         i64 
    dotslice                  i64 
    push           &mm_decls.sourcefilepaths 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    push           24         i64 
    push           31         i64 
    dotslice                  i64 
    pushptroff                u64 8 0
    callproc       &mm_support.stopcompiler 
#12790: 
    retproc                   
End


Proc mm_support.lxerror:
    param          mm_support.lxerror.mess u64 
    procentry                 
    setargs                   1 0
    push           mm_support.lxerror.mess u64 
    callproc       &mm_support.lxerror_gen 
#12792: 
    retproc                   
End


Proc mm_support.loaderror:
    param          mm_support.loaderror.mess u64 
    param          mm_support.loaderror.mess2 u64 
    param          mm_support.loaderror.mess3 u64 
    local          mm_support.loaderror.str block:512 
    procentry                 
    setargs                   1 0
    push           &mm_support.loaderror.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           mm_support.loaderror.mess u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           mm_support.loaderror.mess2 u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_support.loaderror.mess3 u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Load Error:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_support.loaderror.str 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Stopping" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#12794: 
    retproc                   
End


Proc mm_support.gs_additem:
    param          mm_support.gs_additem.dest u64 
    param          mm_support.gs_additem.s u64 
    local          mm_support.gs_additem.d u64 
    local          mm_support.gs_additem.lastchar i64 
    local          mm_support.gs_additem.nextchar i64 
    procentry                 
    push           mm_support.gs_additem.dest u64 
    pushptr                   u64 
    pop            mm_support.gs_additem.d u64 
    push           mm_support.gs_additem.dest u64 
    push           8          
    pushptroff                i32 1 0
    jumpfalse      #12796     i64 
    push           mm_support.gs_additem.d u64 
    push           mm_support.gs_additem.dest u64 
    push           8          
    pushptroff                i32 1 0
    pushptroff                u8 1 -1
    pop            mm_support.gs_additem.lastchar i64 
    push           mm_support.gs_additem.s u64 
    pushptr                   u8 
    pop            mm_support.gs_additem.nextchar i64 
    setargs                   1 0
    push           mm_support.gs_additem.lastchar i64 
    callfn         &mm_support.isalphanum i64 
    jumpfalse      #12797     i64 
    setargs                   1 0
    push           mm_support.gs_additem.nextchar i64 
    callfn         &mm_support.isalphanum i64 
    jumpfalse      #12797     i64 
    setargs                   3 0
    push           -1         i64 
    push           " "        u64 
    push           mm_support.gs_additem.dest u64 
    callproc       &mlibp.strbuffer_add 
#12797: 
#12796: 
    setargs                   3 0
    push           -1         i64 
    push           mm_support.gs_additem.s u64 
    push           mm_support.gs_additem.dest u64 
    callproc       &mlibp.strbuffer_add 
#12798: 
    retproc                   
End


Proc mm_support.gs_copytostr:
    param          mm_support.gs_copytostr.source u64 
    param          mm_support.gs_copytostr.s u64 
    procentry                 
    push           mm_support.gs_copytostr.source u64 
    push           8          
    pushptroff                i32 1 0
    jumpfalse      #12800     i64 
    setargs                   3 0
    push           mm_support.gs_copytostr.source u64 
    push           8          
    pushptroff                i32 1 0
    push           mm_support.gs_copytostr.source u64 
    pushptr                   u64 
    push           mm_support.gs_copytostr.s u64 
    callproc       &memcpy    
    push           0          u64 
    push           mm_support.gs_copytostr.s u64 
    push           mm_support.gs_copytostr.source u64 
    push           8          
    pushptroff                i32 1 0
    popptroff                 u8 1 0
    jump           #12801     
#12800: 
    push           0          u64 
    push           mm_support.gs_copytostr.s u64 
    popptr                    u8 
#12801: 
#12802: 
    retproc                   
End


Proc mm_support.isalphanum: i64
    param          mm_support.isalphanum.c i64 
    procentry                 
    push           mm_support.isalphanum.c i64 
    push           65         i64 
    jumplt         #12804     i64 
    push           mm_support.isalphanum.c i64 
    push           90         i64 
    jumple         #12805     i64 
#12804: 
    push           mm_support.isalphanum.c i64 
    push           97         i64 
    jumplt         #12806     i64 
    push           mm_support.isalphanum.c i64 
    push           122        i64 
    jumple         #12805     i64 
#12806: 
    push           mm_support.isalphanum.c i64 
    push           48         i64 
    jumplt         #12807     i64 
    push           mm_support.isalphanum.c i64 
    push           57         i64 
    jumpgt         #12807     i64 
#12805: 
    push           1          i64 
    setret                    i64 
    jump           #12808     
#12807: 
    push           0          i64 
    setret                    i64 
    jump           #12808     
#12808: 
    retfn                     i64 
End


Proc mm_support.init_tt_tables:
    local          mm_support.init_tt_tables.i i64 
    local          mm_support.init_tt_tables.size i64 
    local          mm_support.init_tt_tables.bitsize i64 
    local          mm_support.init_tt_tables.s i64 
    local          mm_support.init_tt_tables.t i64 
    local          mm_support.init_tt_tables.u i64 
    local          mm_support.init_tt_tables.v i64 
    local          mm_support.init_tt_tables.av_1 i64 
    procentry                 
#12810: 
    push           0          i64 
    pop            mm_support.init_tt_tables.i i64 
    push           32         i64 
    pop            mm_support.init_tt_tables.av_1 i64 
    push           mm_support.init_tt_tables.av_1 i64 
    push           0          i64 
    jumplt         #12811     i64 
#12812: 
    push           &mm_tables.stdnames 
    push           mm_support.init_tt_tables.i i64 
    pushptroff                u64 8 0
    push           &mm_decls.ttname 
    push           mm_support.init_tt_tables.i i64 
    popptroff                 u64 8 0
    push           mm_support.init_tt_tables.i i64 
    push           &mm_decls.ttbasetype 
    push           mm_support.init_tt_tables.i i64 
    popptroff                 i32 4 0
    push           &mm_tables.stdbits 
    push           mm_support.init_tt_tables.i i64 
    pushptroff                u8 1 0
    pop            mm_support.init_tt_tables.bitsize i64 
    push           mm_support.init_tt_tables.bitsize i64 
    switch         #12813     0 4
    opnd           #12814     
#12813: 
    switchlabel    #12815     
    switchlabel    #12816     
    switchlabel    #12816     
    switchlabel    #12814     
    switchlabel    #12816     
    endswitch                 
#12815: 
    push           0          i64 
    pop            mm_support.init_tt_tables.size i64 
    jump           #12817     
#12816: 
    push           1          i64 
    pop            mm_support.init_tt_tables.size i64 
    jump           #12817     
#12814: 
    push           mm_support.init_tt_tables.bitsize i64 
    push           8          i64 
    idiv                      i64 
    pop            mm_support.init_tt_tables.size i64 
#12817: 
    push           mm_support.init_tt_tables.size i64 
    push           &mm_decls.ttsize 
    push           mm_support.init_tt_tables.i i64 
    popptroff                 i32 4 0
    push           &mm_tables.stdcodes 
    push           mm_support.init_tt_tables.i i64 
    pushptroff                u8 1 0
    push           73         i64 
    casejumpeq     #12818     i64 0
    push           85         i64 
    casejumpeq     #12819     i64 0
    push           67         i64 
    casejumpeq     #12819     i64 0
    push           82         i64 
    casejumpeq     #12820     i64 0
    push           80         i64 
    casejumpeq     #12821     i64 0
    push           81         i64 
    casejumpeq     #12821     i64 0
    popstack                  i64 
    jump           #12822     
#12818: 
    push           1          i64 
    push           &mm_decls.ttisint 
    push           mm_support.init_tt_tables.i i64 
    popptroff                 u8 1 0
    push           1          i64 
    push           &mm_decls.ttisinteger 
    push           mm_support.init_tt_tables.i i64 
    popptroff                 u8 1 0
    jump           #12823     
#12819: 
    push           1          i64 
    push           &mm_decls.ttisword 
    push           mm_support.init_tt_tables.i i64 
    popptroff                 u8 1 0
    push           1          i64 
    push           &mm_decls.ttisinteger 
    push           mm_support.init_tt_tables.i i64 
    popptroff                 u8 1 0
    jump           #12823     
#12820: 
    push           1          i64 
    push           &mm_decls.ttisreal 
    push           mm_support.init_tt_tables.i i64 
    popptroff                 u8 1 0
    jump           #12823     
#12821: 
    push           1          i64 
    push           &mm_decls.ttisref 
    push           mm_support.init_tt_tables.i i64 
    popptroff                 u8 1 0
    jump           #12823     
#12822: 
#12823: 
    push           &mm_decls.ttisinteger 
    push           mm_support.init_tt_tables.i i64 
    pushptroff                u8 1 0
    jumpfalse      #12824     i64 
    push           mm_support.init_tt_tables.size i64 
    push           8          i64 
    jumpge         #12824     i64 
    push           1          i64 
    push           &mm_decls.ttisshort 
    push           mm_support.init_tt_tables.i i64 
    popptroff                 u8 1 0
#12824: 
    push           &mm_decls.ttisinteger 
    push           mm_support.init_tt_tables.i i64 
    pushptroff                u8 1 0
    jumptrue       #12825     i64 
    push           &mm_decls.ttisreal 
    push           mm_support.init_tt_tables.i i64 
    pushptroff                u8 1 0
    jumpfalse      #12826     i64 
#12825: 
    push           1          i64 
    push           &mm_decls.ttisallnum 
    push           mm_support.init_tt_tables.i i64 
    popptroff                 u8 1 0
    push           &mm_decls.ttisshort 
    push           mm_support.init_tt_tables.i i64 
    pushptroff                u8 1 0
    jumptrue       #12827     i64 
    push           1          i64 
    push           &mm_decls.ttismainnum 
    push           mm_support.init_tt_tables.i i64 
    popptroff                 u8 1 0
#12827: 
#12826: 
    push           1          i64 
    push           &mm_decls.ttlower 
    push           mm_support.init_tt_tables.i i64 
    popptroff                 i32 4 0
#12828: 
    forup          #12812     i64 1
    opnd           mm_support.init_tt_tables.i 
    opnd           mm_support.init_tt_tables.av_1 
#12811: 
    push           9          i64 
    push           &mm_decls.ttbasetype 
    push           10         i64 
    popptroff                 i32 4 0
    push           16         i64 
    push           &mm_decls.tttarget 
    push           10         i64 
    popptroff                 i32 4 0
    push           32         i64 
    pop            mm_decls.ntypes i64 
#12829: 
    retproc                   
End


Proc mm_support.addspecialtypes:
    procentry                 
    setargs                   3 0
    push           0          i64 
    push           27         i64 
    push           0          u64 
    callfn         &mm_lib.createrefmode i64 
    pop            mm_tables.trefproc i64 
    setargs                   3 0
    push           0          i64 
    push           28         i64 
    push           0          u64 
    callfn         &mm_lib.createrefmode i64 
    pop            mm_tables.treflabel i64 
#12831: 
    retproc                   
End


Proc mm_support.findfile: u64
    param          mm_support.findfile.filename u64 
    local          mm_support.findfile.i i64 
    procentry                 
    push           mm_decls.fverbose i64 
    push           3          i64 
    jumpne         #12833     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Finding"  u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_support.findfile.filename u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#12833: 
#12834: 
    push           mm_decls.nsearchdirs i64 
    pop            mm_support.findfile.i i64 
    push           mm_support.findfile.i i64 
    push           1          i64 
    jumplt         #12835     i64 
#12836: 
    setargs                   2 0
    push           &mm_decls.searchdirs 
    push           mm_support.findfile.i i64 
    pushptroff                u64 8 -8
    push           &mm_support.findfile.filespec 
    callproc       &strcpy    
    setargs                   2 0
    push           mm_support.findfile.filename u64 
    push           &mm_support.findfile.filespec 
    callproc       &strcat    
    push           mm_decls.fverbose i64 
    push           3          i64 
    jumpne         #12837     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\tChecking:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_support.findfile.filespec 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#12837: 
    setargs                   1 0
    push           &mm_support.findfile.filespec 
    callfn         &mlibp.checkfile i64 
    jumpfalse      #12838     i64 
    push           mm_decls.fverbose i64 
    push           3          i64 
    jumpne         #12839     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\tFound:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_support.findfile.filespec 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#12839: 
    push           &mm_support.findfile.filespec 
    setret                    u64 
    jump           #12840     
#12838: 
#12841: 
    fordown        #12836     i64 1
    opnd           mm_support.findfile.i 
    opnd           1          
#12835: 
    push           0          u64 
    setret                    u64 
    jump           #12840     
#12840: 
    retfn                     u64 
End


Proc mm_support.getmainfile: i64
    param          mm_support.getmainfile.filename u64 
    procentry                 
    push           mm_decls.fbundled u8 
    jumpfalse      #12843     i64 
    setargs                   2 0
    push           0          i64 
    push           mm_support.getmainfile.filename u64 
    callfn         &mm_support.loadbundledfile i64 
    setret                    i64 
    jump           #12844     
#12843: 
    setargs                   1 0
    push           mm_support.getmainfile.filename u64 
    callfn         &mlibp.checkfile i64 
    jumptrue       #12845     i64 
    setargs                   3 0
    push           ""         u64 
    push           mm_support.getmainfile.filename u64 
    push           "Can't find main module: ##" u64 
    callproc       &mm_support.loaderror 
#12845: 
    setargs                   1 0
    push           mm_support.getmainfile.filename u64 
    callfn         &mm_support.loadsourcefile i64 
    setret                    i64 
    jump           #12844     
#12844: 
    retfn                     i64 
End


Proc mm_support.getmodulefile: i64
    param          mm_support.getmodulefile.modulename u64 
    param          mm_support.getmodulefile.ownername u64 
    param          mm_support.getmodulefile.xdflag i64 
    local          mm_support.getmodulefile.filename block:300 
    local          mm_support.getmodulefile.file u64 
    local          mm_support.getmodulefile.libtext u64 
    procentry                 
    setargs                   2 0
    setargs                   2 0
    startmult                 
    push           mm_support.getmodulefile.xdflag i64 
    jumpfalse      #12847     i64 
    push           "exp"      u64 
    resetmult                 
    jump           #12848     
#12847: 
    push           "m"        u64 
    endmult                   
#12848: 
    push           mm_support.getmodulefile.modulename u64 
    callfn         &mlibp.addext u64 
    push           &mm_support.getmodulefile.filename 
    callproc       &strcpy    
    push           mm_decls.fbundled u8 
    jumpfalse      #12849     i64 
    setargs                   2 0
    push           0          i64 
    push           &mm_support.getmodulefile.filename 
    callfn         &mm_support.loadbundledfile i64 
    setret                    i64 
    jump           #12850     
#12849: 
    push           mm_decls.dointlibs u8 
    jumpfalse      #12851     i64 
    setargs                   1 0
    push           &mm_support.getmodulefile.filename 
    callfn         &mm_libsources_dummy.findstdlib u64 
    pop            mm_support.getmodulefile.libtext u64 
    push           mm_support.getmodulefile.libtext u64 
    jumpfalse      #12852     u64 
    setargs                   2 0
    push           mm_support.getmodulefile.libtext u64 
    push           &mm_support.getmodulefile.filename 
    callfn         &mm_support.loadbuiltin i64 
    setret                    i64 
    jump           #12850     
#12852: 
#12851: 
    setargs                   1 0
    push           &mm_support.getmodulefile.filename 
    callfn         &mm_support.findfile u64 
    pop            mm_support.getmodulefile.file u64 
    push           mm_support.getmodulefile.file u64 
    push           0          u64 
    jumpne         #12853     u64 
    setargs                   3 0
    push           mm_support.getmodulefile.ownername u64 
    push           &mm_support.getmodulefile.filename 
    push           "Can't find import module: # imported in: #" u64 
    callproc       &mm_support.loaderror 
#12853: 
    setargs                   1 0
    push           mm_support.getmodulefile.file u64 
    callfn         &mm_support.loadsourcefile i64 
    setret                    i64 
    jump           #12850     
#12850: 
    retfn                     i64 
End


Proc mm_support.getsupportfile: i64
    param          mm_support.getsupportfile.filename u64 
    local          mm_support.getsupportfile.path u64 
    local          mm_support.getsupportfile.file u64 
    local          mm_support.getsupportfile.fileno i64 
    procentry                 
    push           mm_decls.fbundled u8 
    jumpfalse      #12855     i64 
    setargs                   2 0
    push           1          i64 
    push           mm_support.getsupportfile.filename u64 
    callfn         &mm_support.loadbundledfile i64 
    setret                    i64 
    jump           #12856     
#12855: 
    setargs                   1 0
    push           mm_support.getsupportfile.filename u64 
    callfn         &mlibp.extractpath u64 
    pop            mm_support.getsupportfile.path u64 
    push           mm_support.getsupportfile.path u64 
    pushptr                   u8 
    push           92         i64 
    setjumpeq      #12857     u64 
    push           47         i64 
    setjumpeqx     #12857     u64 
    push           mm_support.getsupportfile.path u64 
    pushptr                   u8 
    push           0          i64 
    jumpeq         #12858     i64 
    push           mm_support.getsupportfile.path u64 
    push           1          i64 
    pushptroff                u8 1 0
    push           58         u64 
    jumpne         #12858     u64 
#12857: 
    push           mm_support.getsupportfile.filename u64 
    pop            mm_support.getsupportfile.file u64 
    jump           #12859     
#12858: 
    setargs                   1 0
    push           mm_support.getsupportfile.filename u64 
    callfn         &mm_support.findfile u64 
    pop            mm_support.getsupportfile.file u64 
#12859: 
    push           mm_support.getsupportfile.file u64 
    push           0          u64 
    jumpeq         #12860     u64 
    setargs                   1 0
    push           mm_support.getsupportfile.file u64 
    callfn         &mlibp.checkfile i64 
    jumptrue       #12861     i64 
#12860: 
    setargs                   3 0
    push           ""         u64 
    push           mm_support.getsupportfile.filename u64 
    push           "Can't find include file: # #" u64 
    callproc       &mm_support.loaderror 
#12861: 
    setargs                   1 0
    push           mm_support.getsupportfile.file u64 
    callfn         &mm_support.loadsourcefile i64 
    pop            mm_support.getsupportfile.fileno i64 
    push           1          i64 
    push           &mm_decls.issupportfile 
    push           mm_support.getsupportfile.fileno i64 
    popptroff                 u8 1 0
    push           mm_support.getsupportfile.fileno i64 
    setret                    i64 
    jump           #12856     
#12856: 
    retfn                     i64 
End


Proc mm_support.writemafile:
    param          mm_support.writemafile.leadmodule u64 
    param          mm_support.writemafile.destfile u64 
    local          mm_support.writemafile.filename block:256 
    local          mm_support.writemafile.f u64 
    local          mm_support.writemafile.fileoffsets block:8000 
    local          mm_support.writemafile.headeroffsets block:8000 
    local          mm_support.writemafile.offset i64 
    local          mm_support.writemafile.nn i64 
    local          mm_support.writemafile.newoffset i64 
    local          mm_support.writemafile.i i64 
    procentry                 
    setargs                   2 0
    setargs                   2 0
    push           "ma"       u64 
    push           mm_support.writemafile.leadmodule u64 
    callfn         &mlibp.changeext u64 
    push           &mm_support.writemafile.filename 
    callproc       &strcpy    
    push           mm_support.writemafile.destfile u64 
    jumpfalse      #12863     u64 
    setargs                   2 0
    push           mm_support.writemafile.destfile u64 
    push           &mm_support.writemafile.filename 
    callproc       &strcpy    
#12863: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Writing MA File" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_support.writemafile.filename 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           "wb"       u64 
    push           &mm_support.writemafile.filename 
    callfn         &fopen     u64 
    pop            mm_support.writemafile.f u64 
    push           mm_support.writemafile.f u64 
    jumptrue       #12864     u64 
    setargs                   3 0
    push           ""         u64 
    push           &mm_support.writemafile.filename 
    push           "Can't create ma file #" u64 
    callproc       &mm_support.loaderror 
#12864: 
    setargs                   1 0
    push           mm_support.writemafile.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "mafile"   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_decls.nsourcefiles i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#12865: 
    push           1          i64 
    pop            mm_support.writemafile.i i64 
    push           mm_decls.nsourcefiles i64 
    push           1          i64 
    jumplt         #12866     i64 
#12867: 
    setargs                   1 0
    push           mm_support.writemafile.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   2 0
    push           "3"        u64 
    push           mm_support.writemafile.i i64 
    callproc       &msysp.m$print_i64 
    setargs                   2 0
    push           "16jl"     u64 
    push           &mm_decls.sourcefilenames 
    push           mm_support.writemafile.i i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str 
    setargs                   2 0
    push           "7"        u64 
    push           &mm_decls.sourcefilesizes 
    push           mm_support.writemafile.i i64 
    pushptroff                i64 8 0
    callproc       &msysp.m$print_i64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           mm_support.writemafile.f u64 
    callfn         &mlibp.getfilepos i64 
    push           1          i64 
    add                       i64 
    push           &mm_support.writemafile.headeroffsets 
    push           mm_support.writemafile.i i64 
    popptroff                 i64 8 -8
    setargs                   1 0
    push           mm_support.writemafile.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "           " u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_decls.issupportfile 
    push           mm_support.writemafile.i i64 
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#12868: 
    forup          #12867     i64 1
    opnd           mm_support.writemafile.i 
    opnd           mm_decls.nsourcefiles 
#12866: 
#12869: 
    push           1          i64 
    pop            mm_support.writemafile.i i64 
    push           mm_decls.nsourcefiles i64 
    push           1          i64 
    jumplt         #12870     i64 
#12871: 
    setargs                   1 0
    push           mm_support.writemafile.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "=== # #/# ===" u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           &mm_decls.sourcefilenames 
    push           mm_support.writemafile.i i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_support.writemafile.i i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           mm_decls.nsourcefiles i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           mm_support.writemafile.f u64 
    callfn         &mlibp.getfilepos i64 
    pop            mm_support.writemafile.offset i64 
    push           mm_support.writemafile.offset i64 
    push           &mm_support.writemafile.fileoffsets 
    push           mm_support.writemafile.i i64 
    popptroff                 i64 8 -8
    setargs                   4 0
    push           &mm_decls.sourcefilesizes 
    push           mm_support.writemafile.i i64 
    pushptroff                i64 8 0
    push           mm_support.writemafile.offset i64 
    push           &mm_decls.mafiletext 
    push           mm_support.writemafile.i i64 
    pushptroff                u64 8 0
    push           mm_support.writemafile.f u64 
    callfn         &mlibp.writerandom i64 
    pop            mm_support.writemafile.nn i64 
#12872: 
    forup          #12871     i64 1
    opnd           mm_support.writemafile.i 
    opnd           mm_decls.nsourcefiles 
#12870: 
    setargs                   1 0
    push           mm_support.writemafile.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "=== end ===" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#12873: 
    push           1          i64 
    pop            mm_support.writemafile.i i64 
    push           mm_decls.nsourcefiles i64 
    push           1          i64 
    jumplt         #12874     i64 
#12875: 
    setargs                   2 0
    push           &mm_support.writemafile.headeroffsets 
    push           mm_support.writemafile.i i64 
    pushptroff                i64 8 -8
    push           mm_support.writemafile.f u64 
    callproc       &mlibp.setfilepos 
    setargs                   1 0
    push           mm_support.writemafile.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   2 0
    push           "8"        u64 
    push           &mm_support.writemafile.fileoffsets 
    push           mm_support.writemafile.i i64 
    pushptroff                i64 8 -8
    callproc       &msysp.m$print_i64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#12876: 
    forup          #12875     i64 1
    opnd           mm_support.writemafile.i 
    opnd           mm_decls.nsourcefiles 
#12874: 
    setargs                   1 0
    push           mm_support.writemafile.f u64 
    callproc       &fclose    
#12877: 
    retproc                   
End


Proc mm_support.loadmafile:
    local          mm_support.loadmafile.f u64 
    local          mm_support.loadmafile.kwd block:16 
    local          mm_support.loadmafile.filename block:256 
    local          mm_support.loadmafile.index i64 
    local          mm_support.loadmafile.size i64 
    local          mm_support.loadmafile.offset i64 
    local          mm_support.loadmafile.issupport i64 
    local          mm_support.loadmafile.i i64 
    procentry                 
    setargs                   2 0
    push           "rb"       u64 
    push           mm_decls.mafilename u64 
    callfn         &fopen     u64 
    pop            mm_support.loadmafile.f u64 
    push           mm_support.loadmafile.f u64 
    jumptrue       #12879     u64 
    setargs                   3 0
    push           ""         u64 
    push           mm_decls.mafilename u64 
    push           "Can't open ##" u64 
    callproc       &mm_support.loaderror 
#12879: 
    setargs                   1 0
    push           mm_support.loadmafile.f u64 
    callproc       &msysp.m$read_fileline 
    setargs                   3 0
    push           16         i64 
    push           110        i64 
    push           &mm_support.loadmafile.kwd 
    callproc       &msysp.readstr 
    setargs                   2 0
    push           "mafile"   u64 
    push           &mm_support.loadmafile.kwd 
    callfn         &mlibp.eqstring i64 
    jumptrue       #12880     i64 
    setargs                   3 0
    push           &mm_support.loadmafile.kwd 
    push           mm_decls.mafilename u64 
    push           "Bad sig in ma file: # '#'" u64 
    callproc       &mm_support.loaderror 
#12880: 
    setargs                   1 0
    push           0          i64 
    callfn         &msysp.m$read_i64 i64 
    pop            mm_decls.nmafiles i64 
#12881: 
    push           1          i64 
    pop            mm_support.loadmafile.i i64 
    push           mm_decls.nmafiles i64 
    push           1          i64 
    jumplt         #12882     i64 
#12883: 
    setargs                   1 0
    push           mm_support.loadmafile.f u64 
    callproc       &msysp.m$read_fileline 
    setargs                   1 0
    push           0          i64 
    callfn         &msysp.m$read_i64 i64 
    pop            mm_support.loadmafile.index i64 
    setargs                   3 0
    push           256        i64 
    push           110        i64 
    push           &mm_support.loadmafile.filename 
    callproc       &msysp.readstr 
    setargs                   1 0
    push           0          i64 
    callfn         &msysp.m$read_i64 i64 
    pop            mm_support.loadmafile.size i64 
    setargs                   1 0
    push           0          i64 
    callfn         &msysp.m$read_i64 i64 
    pop            mm_support.loadmafile.offset i64 
    setargs                   1 0
    push           0          i64 
    callfn         &msysp.m$read_i64 i64 
    pop            mm_support.loadmafile.issupport i64 
    setargs                   1 0
    push           &mm_support.loadmafile.filename 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &mm_decls.mafilenames 
    push           mm_support.loadmafile.i i64 
    popptroff                 u64 8 0
    push           mm_support.loadmafile.size i64 
    push           &mm_decls.mafilesizes 
    push           mm_support.loadmafile.i i64 
    popptroff                 i64 8 0
    push           mm_support.loadmafile.offset i64 
    push           &mm_decls.mafileoffsets 
    push           mm_support.loadmafile.i i64 
    popptroff                 i64 8 0
    push           0          i64 
    push           &mm_decls.mafilefileno 
    push           mm_support.loadmafile.i i64 
    popptroff                 u8 1 0
    push           mm_support.loadmafile.issupport i64 
    push           &mm_decls.mafilesupport 
    push           mm_support.loadmafile.i i64 
    popptroff                 u8 1 0
#12884: 
    forup          #12883     i64 1
    opnd           mm_support.loadmafile.i 
    opnd           mm_decls.nmafiles 
#12882: 
    setargs                   1 0
    push           mm_support.loadmafile.f u64 
    callproc       &fclose    
    setargs                   1 0
    push           mm_decls.mafilename u64 
    callfn         &mlibp.readfile u64 
    pop            mm_decls.mafilesource u64 
    push           mm_decls.mafilesource u64 
    jumptrue       #12885     u64 
    setargs                   3 0
    push           ""         u64 
    push           ""         u64 
    push           "MA load?" u64 
    callproc       &mm_support.loaderror 
#12885: 
#12886: 
    push           1          i64 
    pop            mm_support.loadmafile.i i64 
    push           mm_decls.nmafiles i64 
    push           1          i64 
    jumplt         #12887     i64 
#12888: 
    push           &mm_decls.mafilesizes 
    push           mm_support.loadmafile.i i64 
    pushptroff                i64 8 0
    pop            mm_support.loadmafile.size i64 
    push           &mm_decls.mafileoffsets 
    push           mm_support.loadmafile.i i64 
    pushptroff                i64 8 0
    pop            mm_support.loadmafile.offset i64 
    push           mm_decls.mafilesource u64 
    push           mm_support.loadmafile.offset i64 
    addrefoff                 u64 1 0
    push           &mm_decls.mafiletext 
    push           mm_support.loadmafile.i i64 
    popptroff                 u64 8 0
    push           0          u64 
    push           mm_decls.mafilesource u64 
    push           mm_support.loadmafile.offset i64 
    addrefoff                 u64 1 0
    push           mm_support.loadmafile.size i64 
    popptroff                 u8 1 0
#12889: 
    forup          #12888     i64 1
    opnd           mm_support.loadmafile.i 
    opnd           mm_decls.nmafiles 
#12887: 
#12890: 
    retproc                   
End


Proc mm_support.mapimport: u64
    param          mm_support.mapimport.name u64 
    local          mm_support.mapimport.i i64 
    procentry                 
#12892: 
    push           1          i64 
    pop            mm_support.mapimport.i i64 
    push           mm_decls.nmodulemap i64 
    push           1          i64 
    jumplt         #12893     i64 
#12894: 
    setargs                   2 0
    push           &mm_decls.genericmodules 
    push           mm_support.mapimport.i i64 
    pushptroff                u64 8 -8
    push           mm_support.mapimport.name u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #12895     i64 
    push           &mm_decls.actualmodules 
    push           mm_support.mapimport.i i64 
    pushptroff                u64 8 -8
    setret                    u64 
    jump           #12896     
#12895: 
#12897: 
    forup          #12894     i64 1
    opnd           mm_support.mapimport.i 
    opnd           mm_decls.nmodulemap 
#12893: 
    push           mm_support.mapimport.name u64 
    setret                    u64 
    jump           #12896     
#12896: 
    retfn                     u64 
End


Proc mm_support.initbblib:
    local          mm_support.initbblib.av_1 i64 
    local          mm_support.initbblib.i i64 
    procentry                 
#12899: 
    push           1          i64 
    pop            mm_support.initbblib.i i64 
    push           9          i64 
    pop            mm_support.initbblib.av_1 i64 
    push           mm_support.initbblib.av_1 i64 
    push           1          i64 
    jumplt         #12900     i64 
#12901: 
    push           1          i64 
    push           &mm_decls.typestarterset 
    push           &mm_tables.d_typestarterset 
    push           mm_support.initbblib.i i64 
    pushptroff                i64 8 -8
    popptroff                 u8 1 0
#12902: 
    forup          #12901     i64 1
    opnd           mm_support.initbblib.i 
    opnd           mm_support.initbblib.av_1 
#12900: 
#12903: 
    retproc                   
End


Proc mm_lib.newstrec: u64
    local          mm_lib.newstrec.p u64 
    procentry                 
    setargs                   1 0
    push           128        i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            mm_lib.newstrec.p u64 
    push           mm_lib.newstrec.p u64 
    clear                     block:128 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    push           mm_lib.newstrec.p u64 
    push           88         
    popptroff                 u32 1 0
    push           mm_decls.currmoduleno i64 
    push           mm_lib.newstrec.p u64 
    push           94         
    popptroff                 u8 1 0
    push           mm_lib.newstrec.p u64 
    setret                    u64 
    jump           #12905     
#12905: 
    retfn                     u64 
End


Proc mm_lib.getduplnameptr: u64
    param          mm_lib.getduplnameptr.owner u64 
    param          mm_lib.getduplnameptr.symptr u64 
    param          mm_lib.getduplnameptr.id i64 
    local          mm_lib.getduplnameptr.p u64 
    local          mm_lib.getduplnameptr.q u64 
    procentry                 
    setargs                   0 0
    callfn         &mm_lib.newstrec u64 
    pop            mm_lib.getduplnameptr.p u64 
    push           mm_lib.getduplnameptr.symptr u64 
    pushptr                   u64 
    push           mm_lib.getduplnameptr.p u64 
    push           0          
    popptroff                 u64 1 0
    push           mm_lib.getduplnameptr.symptr u64 
    push           76         
    pushptroff                u8 1 0
    push           mm_lib.getduplnameptr.p u64 
    push           76         
    popptroff                 u8 1 0
    push           79         i64 
    push           mm_lib.getduplnameptr.p u64 
    push           77         
    popptroff                 u8 1 0
    push           mm_lib.getduplnameptr.owner u64 
    push           mm_lib.getduplnameptr.p u64 
    push           8          
    popptroff                 u64 1 0
    push           mm_lib.getduplnameptr.id i64 
    push           mm_lib.getduplnameptr.p u64 
    push           78         
    popptroff                 u8 1 0
    push           mm_lib.getduplnameptr.id i64 
    push           12         i64 
    jumpeq         #12907     i64 
    push           mm_lib.getduplnameptr.id i64 
    push           13         i64 
    jumpne         #12908     i64 
#12907: 
#12908: 
    push           mm_lib.getduplnameptr.symptr u64 
    push           40         
    pushptroff                u64 1 0
    push           mm_lib.getduplnameptr.p u64 
    push           40         
    popptroff                 u64 1 0
    push           mm_lib.getduplnameptr.symptr u64 
    push           mm_lib.getduplnameptr.p u64 
    push           48         
    popptroff                 u64 1 0
    push           mm_lib.getduplnameptr.p u64 
    push           mm_lib.getduplnameptr.symptr u64 
    push           40         
    popptroff                 u64 1 0
    push           mm_lib.getduplnameptr.p u64 
    setret                    u64 
    jump           #12909     
#12909: 
    retfn                     u64 
End


Proc mm_lib.adddef:
    param          mm_lib.adddef.owner u64 
    param          mm_lib.adddef.p u64 
    local          mm_lib.adddef.q u64 
    procentry                 
    push           mm_lib.adddef.p u64 
    push           40         
    pushptroff                u64 1 0
    store          mm_lib.adddef.q u64 
    jumpfalse      #12911     u64 
    push           mm_lib.adddef.q u64 
    push           8          
    pushptroff                u64 1 0
    push           mm_lib.adddef.owner u64 
    jumpne         #12912     u64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mm_lib.adddef.q u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "in"       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_lib.adddef.owner u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Duplicate name" u64 
    callproc       &mm_support.serror 
#12912: 
#12911: 
    push           mm_lib.adddef.owner u64 
    push           16         
    pushptroff                u64 1 0
    push           0          u64 
    jumpne         #12913     u64 
    push           mm_lib.adddef.p u64 
    push           mm_lib.adddef.owner u64 
    push           16         
    popptroff                 u64 1 0
    jump           #12914     
#12913: 
    push           mm_lib.adddef.p u64 
    push           mm_lib.adddef.owner u64 
    push           24         
    pushptroff                u64 1 0
    push           32         
    popptroff                 u64 1 0
#12914: 
    push           mm_lib.adddef.p u64 
    push           mm_lib.adddef.owner u64 
    push           24         
    popptroff                 u64 1 0
#12915: 
    retproc                   
End


Proc mm_lib.createname: u64
    param          mm_lib.createname.p u64 
    local          mm_lib.createname.u u64 
    procentry                 
    setargs                   0 0
    callfn         &mm_lib.allocunitrec u64 
    pop            mm_lib.createname.u u64 
    push           3          i64 
    push           mm_lib.createname.u u64 
    push           0          
    popptroff                 u8 1 0
    push           mm_lib.createname.p u64 
    push           mm_lib.createname.u u64 
    push           16         
    popptroff                 u64 1 0
    push           mm_lib.createname.u u64 
    setret                    u64 
    jump           #12917     
#12917: 
    retfn                     u64 
End


Proc mm_lib.createunit0: u64
    param          mm_lib.createunit0.tag i64 
    local          mm_lib.createunit0.u u64 
    procentry                 
    setargs                   0 0
    callfn         &mm_lib.allocunitrec u64 
    pop            mm_lib.createunit0.u u64 
    push           mm_lib.createunit0.tag i64 
    push           mm_lib.createunit0.u u64 
    push           0          
    popptroff                 u8 1 0
    push           mm_lib.createunit0.u u64 
    setret                    u64 
    jump           #12919     
#12919: 
    retfn                     u64 
End


Proc mm_lib.createunit1: u64
    param          mm_lib.createunit1.tag i64 
    param          mm_lib.createunit1.p u64 
    local          mm_lib.createunit1.u u64 
    procentry                 
    setargs                   0 0
    callfn         &mm_lib.allocunitrec u64 
    pop            mm_lib.createunit1.u u64 
    push           mm_lib.createunit1.tag i64 
    push           mm_lib.createunit1.u u64 
    push           0          
    popptroff                 u8 1 0
    push           mm_lib.createunit1.p u64 
    push           mm_lib.createunit1.u u64 
    push           16         
    popptroff                 u64 1 0
    push           1          i64 
    push           mm_lib.createunit1.u u64 
    push           1          
    popptroff                 u8 1 0
    push           mm_lib.createunit1.u u64 
    setret                    u64 
    jump           #12921     
#12921: 
    retfn                     u64 
End


Proc mm_lib.createunit2: u64
    param          mm_lib.createunit2.tag i64 
    param          mm_lib.createunit2.p u64 
    param          mm_lib.createunit2.q u64 
    local          mm_lib.createunit2.u u64 
    procentry                 
    setargs                   0 0
    callfn         &mm_lib.allocunitrec u64 
    pop            mm_lib.createunit2.u u64 
    push           mm_lib.createunit2.tag i64 
    push           mm_lib.createunit2.u u64 
    push           0          
    popptroff                 u8 1 0
    push           mm_lib.createunit2.p u64 
    push           mm_lib.createunit2.u u64 
    push           16         
    popptroff                 u64 1 0
    push           mm_lib.createunit2.q u64 
    push           mm_lib.createunit2.u u64 
    push           24         
    popptroff                 u64 1 0
    push           1          i64 
    push           mm_lib.createunit2.u u64 
    push           1          
    popptroff                 u8 1 0
    push           1          i64 
    push           mm_lib.createunit2.u u64 
    push           2          
    popptroff                 u8 1 0
    push           mm_lib.createunit2.u u64 
    setret                    u64 
    jump           #12923     
#12923: 
    retfn                     u64 
End


Proc mm_lib.createunit3: u64
    param          mm_lib.createunit3.tag i64 
    param          mm_lib.createunit3.p u64 
    param          mm_lib.createunit3.q u64 
    param          mm_lib.createunit3.r u64 
    local          mm_lib.createunit3.u u64 
    procentry                 
    setargs                   0 0
    callfn         &mm_lib.allocunitrec u64 
    pop            mm_lib.createunit3.u u64 
    push           mm_lib.createunit3.tag i64 
    push           mm_lib.createunit3.u u64 
    push           0          
    popptroff                 u8 1 0
    push           mm_lib.createunit3.p u64 
    push           mm_lib.createunit3.u u64 
    push           16         
    popptroff                 u64 1 0
    push           mm_lib.createunit3.q u64 
    push           mm_lib.createunit3.u u64 
    push           24         
    popptroff                 u64 1 0
    push           mm_lib.createunit3.r u64 
    push           mm_lib.createunit3.u u64 
    push           32         
    popptroff                 u64 1 0
    push           1          i64 
    push           mm_lib.createunit3.u u64 
    push           1          
    popptroff                 u8 1 0
    push           1          i64 
    push           mm_lib.createunit3.u u64 
    push           2          
    popptroff                 u8 1 0
    push           1          i64 
    push           mm_lib.createunit3.u u64 
    push           3          
    popptroff                 u8 1 0
    push           mm_lib.createunit3.u u64 
    setret                    u64 
    jump           #12925     
#12925: 
    retfn                     u64 
End


Proc mm_lib.insertunit:
    param          mm_lib.insertunit.p u64 
    param          mm_lib.insertunit.tag i64 
    local          mm_lib.insertunit.q u64 
    local          mm_lib.insertunit.nextunit u64 
    local          mm_lib.insertunit.mode i64 
    procentry                 
    setargs                   0 0
    callfn         &mm_lib.allocunitrec u64 
    pop            mm_lib.insertunit.q u64 
    push           mm_lib.insertunit.p u64 
    pushptr                   block:64 
    push           mm_lib.insertunit.q u64 
    popptr                    block:64 
    push           mm_lib.insertunit.q u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_lib.insertunit.mode i64 
    push           mm_lib.insertunit.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_lib.insertunit.nextunit u64 
    push           0          u64 
    push           mm_lib.insertunit.q u64 
    push           8          
    popptroff                 u64 1 0
    push           mm_lib.insertunit.p u64 
    clear                     block:64 
    push           mm_lib.insertunit.tag i64 
    push           mm_lib.insertunit.p u64 
    push           0          
    popptroff                 u8 1 0
    push           mm_lib.insertunit.q u64 
    push           4          
    pushptroff                u32 1 0
    push           mm_lib.insertunit.p u64 
    push           4          
    popptroff                 u32 1 0
    push           mm_lib.insertunit.q u64 
    push           mm_lib.insertunit.p u64 
    push           16         
    popptroff                 u64 1 0
    push           1          i64 
    push           mm_lib.insertunit.p u64 
    push           1          
    popptroff                 u8 1 0
    push           mm_lib.insertunit.mode i64 
    push           mm_lib.insertunit.p u64 
    push           48         
    popptroff                 i32 1 0
    push           mm_lib.insertunit.nextunit u64 
    push           mm_lib.insertunit.p u64 
    push           8          
    popptroff                 u64 1 0
    push           mm_lib.insertunit.q u64 
    push           59         
    pushptroff                u8 1 0
    push           mm_lib.insertunit.p u64 
    push           59         
    popptroff                 u8 1 0
#12927: 
    retproc                   
End


Proc mm_lib.deleteunit:
    param          mm_lib.deleteunit.p u64 
    param          mm_lib.deleteunit.q u64 
    local          mm_lib.deleteunit.r u64 
    procentry                 
    push           mm_lib.deleteunit.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_lib.deleteunit.r u64 
    push           mm_lib.deleteunit.q u64 
    pushptr                   block:64 
    push           mm_lib.deleteunit.p u64 
    popptr                    block:64 
    push           mm_lib.deleteunit.r u64 
    push           mm_lib.deleteunit.p u64 
    push           8          
    popptroff                 u64 1 0
#12929: 
    retproc                   
End


Proc mm_lib.createconstunit: u64
    param          mm_lib.createconstunit.a u64 
    param          mm_lib.createconstunit.t i64 
    local          mm_lib.createconstunit.u u64 
    procentry                 
    setargs                   0 0
    callfn         &mm_lib.allocunitrec u64 
    pop            mm_lib.createconstunit.u u64 
    push           1          i64 
    push           mm_lib.createconstunit.u u64 
    push           0          
    popptroff                 u8 1 0
    push           mm_lib.createconstunit.a i64 
    push           mm_lib.createconstunit.u u64 
    push           16         
    popptroff                 i64 1 0
    push           mm_lib.createconstunit.t i64 
    push           mm_lib.createconstunit.u u64 
    push           48         
    popptroff                 i32 1 0
    push           mm_lib.createconstunit.t i64 
    push           5          i64 
    setjumpeq      #12931     i64 
    push           3          i64 
    setjumpne      #12932     i64 
#12931: 
    push           mm_lib.createconstunit.a u64 
    pushptr                   i128 
    push           mm_lib.createconstunit.u u64 
    push           16         
    popptroff                 i128 1 0
#12932: 
    push           1          i64 
    push           mm_lib.createconstunit.u u64 
    push           58         
    popptroff                 u8 1 0
    push           mm_lib.createconstunit.u u64 
    setret                    u64 
    jump           #12933     
#12933: 
    retfn                     u64 
End


Proc mm_lib.createstringconstunit: u64
    param          mm_lib.createstringconstunit.s u64 
    param          mm_lib.createstringconstunit.length i64 
    local          mm_lib.createstringconstunit.u u64 
    procentry                 
    setargs                   0 0
    callfn         &mm_lib.allocunitrec u64 
    pop            mm_lib.createstringconstunit.u u64 
    push           1          i64 
    push           mm_lib.createstringconstunit.u u64 
    push           0          
    popptroff                 u8 1 0
    push           mm_lib.createstringconstunit.s u64 
    push           mm_lib.createstringconstunit.u u64 
    push           16         
    popptroff                 u64 1 0
    push           10         i64 
    push           mm_lib.createstringconstunit.u u64 
    push           48         
    popptroff                 i32 1 0
    push           1          i64 
    push           mm_lib.createstringconstunit.u u64 
    push           44         
    popptroff                 u8 1 0
    push           mm_lib.createstringconstunit.length i64 
    push           -1         i64 
    jumpne         #12935     i64 
    setargs                   1 0
    push           mm_lib.createstringconstunit.s u64 
    callfn         &strlen    i64 
    push           mm_lib.createstringconstunit.u u64 
    push           40         
    popptroff                 u32 1 0
    jump           #12936     
#12935: 
    push           mm_lib.createstringconstunit.length i64 
    push           mm_lib.createstringconstunit.u u64 
    push           40         
    popptroff                 u32 1 0
#12936: 
    push           mm_lib.createstringconstunit.u u64 
    setret                    u64 
    jump           #12937     
#12937: 
    retfn                     u64 
End


Proc mm_lib.newtypename: i64
    param          mm_lib.newtypename.a u64 
    param          mm_lib.newtypename.b u64 
    procentry                 
    push           mm_decls.ntypenames i64 
    push           12000      i64 
    jumplt         #12939     i64 
    setargs                   1 0
    push           "Too many type names" u64 
    callproc       &mm_support.serror 
#12939: 
    push           &mm_decls.ntypenames 
    incr                      i64 1
    push           mm_lib.newtypename.a u64 
    push           &mm_decls.typenames 
    push           mm_decls.ntypenames i64 
    addrefoff                 block:32 32 0
    push           8          
    popptroff                 u64 1 0
    push           mm_lib.newtypename.b u64 
    push           &mm_decls.typenames 
    push           mm_decls.ntypenames i64 
    addrefoff                 block:32 32 0
    push           16         
    popptroff                 u64 1 0
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    push           &mm_decls.typenamepos 
    push           mm_decls.ntypenames i64 
    addrefoff                 block:4 4 0
    push           0          
    popptroff                 u32 1 0
    push           mm_decls.ntypenames i64 
    neg                       i64 
    setret                    i64 
    jump           #12940     
#12940: 
    retfn                     i64 
End


Proc mm_lib.createusertype: i64
    param          mm_lib.createusertype.stname u64 
    procentry                 
    push           mm_decls.ntypes i64 
    push           6000       i64 
    jumplt         #12942     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mm_decls.ntypes i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           mm_lib.createusertype.stname u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Too many types" u64 
    callproc       &mm_support.serror 
#12942: 
    push           &mm_decls.ntypes 
    incr                      i64 1
    push           mm_lib.createusertype.stname u64 
    pushptr                   u64 
    push           &mm_decls.ttname 
    push           mm_decls.ntypes i64 
    popptroff                 u64 8 0
    push           mm_lib.createusertype.stname u64 
    push           &mm_decls.ttnamedef 
    push           mm_decls.ntypes i64 
    popptroff                 u64 8 0
    push           0          i64 
    push           &mm_decls.ttbasetype 
    push           mm_decls.ntypes i64 
    popptroff                 i32 4 0
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    push           &mm_decls.ttlineno 
    push           mm_decls.ntypes i64 
    popptroff                 i32 4 0
    push           mm_decls.ntypes i64 
    push           mm_lib.createusertype.stname u64 
    push           72         
    popptroff                 i32 1 0
    push           mm_decls.ntypes i64 
    setret                    i64 
    jump           #12943     
#12943: 
    retfn                     i64 
End


Proc mm_lib.createusertypefromstr: i64
    param          mm_lib.createusertypefromstr.name u64 
    local          mm_lib.createusertypefromstr.stname u64 
    procentry                 
    setargs                   3 0
    push           4          i64 
    setargs                   1 0
    push           mm_lib.createusertypefromstr.name u64 
    callfn         &mm_lex.addnamestr u64 
    push           mm_decls.stmodule u64 
    callfn         &mm_lib.getduplnameptr u64 
    pop            mm_lib.createusertypefromstr.stname u64 
    setargs                   1 0
    push           mm_lib.createusertypefromstr.stname u64 
    callfn         &mm_lib.createusertype i64 
    setret                    i64 
    jump           #12945     
#12945: 
    retfn                     i64 
End


Proc mm_lib.getrangelwbunit: u64
    param          mm_lib.getrangelwbunit.p u64 
    procentry                 
    startmult                 
    push           mm_lib.getrangelwbunit.p u64 
    pushptr                   u8 
    push           20         i64 
    jumpne         #12947     i64 
    push           mm_lib.getrangelwbunit.p u64 
    push           16         
    pushptroff                u64 1 0
    resetmult                 
    jump           #12948     
#12947: 
    setargs                   2 0
    push           mm_lib.getrangelwbunit.p u64 
    push           37         i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_lib.getrangelwbunit.p u64 
    push           202        i64 
    push           mm_lib.getrangelwbunit.p u64 
    push           60         
    popptroff                 u8 1 0
    push           mm_lib.getrangelwbunit.p u64 
    endmult                   
#12948: 
    setret                    u64 
    jump           #12949     
#12949: 
    retfn                     u64 
End


Proc mm_lib.getrangeupbunit: u64
    param          mm_lib.getrangeupbunit.p u64 
    procentry                 
    startmult                 
    push           mm_lib.getrangeupbunit.p u64 
    pushptr                   u8 
    push           20         i64 
    jumpne         #12951     i64 
    push           mm_lib.getrangeupbunit.p u64 
    push           24         
    pushptroff                u64 1 0
    resetmult                 
    jump           #12952     
#12951: 
    setargs                   2 0
    push           mm_lib.getrangeupbunit.p u64 
    push           37         i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_lib.getrangeupbunit.p u64 
    push           203        i64 
    push           mm_lib.getrangeupbunit.p u64 
    push           60         
    popptroff                 u8 1 0
    push           mm_lib.getrangeupbunit.p u64 
    endmult                   
#12952: 
    setret                    u64 
    jump           #12953     
#12953: 
    retfn                     u64 
End


Proc mm_lib.createarraymode: i64
    param          mm_lib.createarraymode.owner u64 
    param          mm_lib.createarraymode.target i64 
    param          mm_lib.createarraymode.dimexpr u64 
    param          mm_lib.createarraymode.typedefx i64 
    local          mm_lib.createarraymode.k i64 
    local          mm_lib.createarraymode.m i64 
    procentry                 
    push           mm_lib.createarraymode.typedefx i64 
    push           0          i64 
    jumpne         #12955     i64 
#12956: 
    push           33         i64 
    pop            mm_lib.createarraymode.k i64 
    push           mm_decls.ntypes i64 
    push           33         i64 
    jumplt         #12957     i64 
#12958: 
    push           &mm_decls.ttusercat 
    push           mm_lib.createarraymode.k i64 
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #12959     i64 
    push           &mm_decls.ttbasetype 
    push           mm_lib.createarraymode.k i64 
    pushptroff                i32 4 0
    push           11         i64 
    jumpne         #12959     i64 
    push           &mm_decls.tttarget 
    push           mm_lib.createarraymode.k i64 
    pushptroff                i32 4 0
    push           mm_lib.createarraymode.target i64 
    jumpne         #12959     i64 
    setargs                   4 0
    push           &mm_decls.ttowner 
    push           mm_lib.createarraymode.k i64 
    pushptroff                u64 8 0
    push           mm_lib.createarraymode.owner u64 
    push           &mm_decls.ttdimexpr 
    push           mm_lib.createarraymode.k i64 
    pushptroff                u64 8 0
    push           mm_lib.createarraymode.dimexpr u64 
    callfn         &mm_lib.sameunit i64 
    jumpfalse      #12959     i64 
    push           mm_lib.createarraymode.k i64 
    setret                    i64 
    jump           #12960     
#12959: 
#12961: 
    forup          #12958     i64 1
    opnd           mm_lib.createarraymode.k 
    opnd           mm_decls.ntypes 
#12957: 
    setargs                   1 0
    setargs                   0 0
    callfn         &mm_lib.nextautotype u64 
    callfn         &mm_lib.createusertypefromstr i64 
    pop            mm_lib.createarraymode.m i64 
    jump           #12962     
#12955: 
    push           mm_lib.createarraymode.typedefx i64 
    pop            mm_lib.createarraymode.m i64 
#12962: 
    push           11         i64 
    push           &mm_decls.ttbasetype 
    push           mm_lib.createarraymode.m i64 
    popptroff                 i32 4 0
    push           1          i64 
    push           &mm_decls.ttlower 
    push           mm_lib.createarraymode.m i64 
    popptroff                 i32 4 0
    push           mm_lib.createarraymode.dimexpr u64 
    push           &mm_decls.ttdimexpr 
    push           mm_lib.createarraymode.m i64 
    popptroff                 u64 8 0
    setargs                   3 0
    push           &mm_decls.tttarget 
    push           mm_lib.createarraymode.m i64 
    addrefoff                 i32 4 0
    push           mm_lib.createarraymode.target i64 
    push           mm_lib.createarraymode.owner u64 
    callproc       &mm_lib.storemode 
    push           mm_lib.createarraymode.owner u64 
    push           &mm_decls.ttowner 
    push           mm_lib.createarraymode.m i64 
    popptroff                 u64 8 0
    push           mm_lib.createarraymode.m i64 
    setret                    i64 
    jump           #12960     
#12960: 
    retfn                     i64 
End


Proc mm_lib.sameunit: i64
    param          mm_lib.sameunit.p u64 
    param          mm_lib.sameunit.q u64 
    param          mm_lib.sameunit.powner u64 
    param          mm_lib.sameunit.qowner u64 
    local          mm_lib.sameunit.d u64 
    local          mm_lib.sameunit.e u64 
    procentry                 
    push           mm_lib.sameunit.p u64 
    push           mm_lib.sameunit.q u64 
    jumpne         #12964     u64 
    push           1          i64 
    setret                    i64 
    jump           #12965     
#12964: 
    push           mm_lib.sameunit.p u64 
    push           0          u64 
    jumpeq         #12966     u64 
    push           mm_lib.sameunit.q u64 
    push           0          u64 
    jumpne         #12967     u64 
#12966: 
    push           0          i64 
    setret                    i64 
    jump           #12965     
#12967: 
    push           mm_lib.sameunit.p u64 
    pushptr                   u8 
    push           mm_lib.sameunit.q u64 
    pushptr                   u8 
    jumpeq         #12968     i64 
    push           0          i64 
    setret                    i64 
    jump           #12965     
#12968: 
    push           mm_lib.sameunit.p u64 
    pushptr                   u8 
    push           1          i64 
    casejumpeq     #12969     i64 0
    push           20         i64 
    casejumpeq     #12970     i64 0
    push           28         i64 
    casejumpeq     #12970     i64 0
    push           3          i64 
    casejumpeq     #12971     i64 0
    popstack                  i64 
    jump           #12972     
#12969: 
    push           mm_lib.sameunit.p u64 
    push           16         
    pushptroff                i64 1 0
    push           mm_lib.sameunit.q u64 
    push           16         
    pushptroff                i64 1 0
    seteq                     i64 
    setret                    i64 
    jump           #12965     
    jump           #12973     
#12970: 
    startmult                 
    setargs                   4 0
    push           0          u64 
    push           0          u64 
    push           mm_lib.sameunit.q u64 
    push           16         
    pushptroff                u64 1 0
    push           mm_lib.sameunit.p u64 
    push           16         
    pushptroff                u64 1 0
    callfn         &mm_lib.sameunit i64 
    jumpfalse      #12974     i64 
    setargs                   4 0
    push           0          u64 
    push           0          u64 
    push           mm_lib.sameunit.q u64 
    push           24         
    pushptroff                u64 1 0
    push           mm_lib.sameunit.p u64 
    push           24         
    pushptroff                u64 1 0
    callfn         &mm_lib.sameunit i64 
    jumpfalse      #12974     i64 
    push           1          
    resetmult                 
    jump           #12975     
#12974: 
    push           0          
    endmult                   
#12975: 
    setret                    i64 
    jump           #12965     
    jump           #12973     
#12971: 
    push           mm_lib.sameunit.p u64 
    push           16         
    pushptroff                u64 1 0
    push           mm_lib.sameunit.q u64 
    push           16         
    pushptroff                u64 1 0
    jumpne         #12976     u64 
    push           mm_lib.sameunit.powner u64 
    push           mm_lib.sameunit.qowner u64 
    jumpne         #12976     u64 
    push           1          i64 
    setret                    i64 
    jump           #12965     
#12976: 
    jump           #12973     
#12972: 
#12973: 
    push           0          i64 
    setret                    i64 
    jump           #12965     
#12965: 
    retfn                     i64 
End


Proc mm_lib.createarraymodek: i64
    param          mm_lib.createarraymodek.owner u64 
    param          mm_lib.createarraymodek.target i64 
    param          mm_lib.createarraymodek.lower i64 
    param          mm_lib.createarraymodek.length i64 
    param          mm_lib.createarraymodek.typedefx i64 
    local          mm_lib.createarraymodek.atype i64 
    local          mm_lib.createarraymodek.k i64 
    local          mm_lib.createarraymodek.m i64 
    procentry                 
    push           11         i64 
    pop            mm_lib.createarraymodek.atype i64 
    push           mm_lib.createarraymodek.typedefx i64 
    push           0          i64 
    jumpne         #12978     i64 
    setargs                   1 0
    setargs                   0 0
    callfn         &mm_lib.nextautotype u64 
    callfn         &mm_lib.createusertypefromstr i64 
    pop            mm_lib.createarraymodek.m i64 
    jump           #12979     
#12978: 
    push           mm_lib.createarraymodek.typedefx i64 
    pop            mm_lib.createarraymodek.m i64 
#12979: 
    push           mm_lib.createarraymodek.atype i64 
    push           &mm_decls.ttbasetype 
    push           mm_lib.createarraymodek.m i64 
    popptroff                 i32 4 0
    push           mm_lib.createarraymodek.lower i64 
    push           &mm_decls.ttlower 
    push           mm_lib.createarraymodek.m i64 
    popptroff                 i32 4 0
    push           mm_lib.createarraymodek.length i64 
    push           &mm_decls.ttlength 
    push           mm_lib.createarraymodek.m i64 
    popptroff                 i32 4 0
    push           mm_lib.createarraymodek.target i64 
    push           0          i64 
    jumpge         #12980     i64 
    setargs                   1 0
    push           "CREATEARRAYMODEK/TARGET NOT RESOLVED" u64 
    callproc       &mm_support.serror 
#12980: 
    push           mm_lib.createarraymodek.length i64 
    push           &mm_decls.ttsize 
    push           mm_lib.createarraymodek.target i64 
    pushptroff                i32 4 0
    mul                       i64 
    push           &mm_decls.ttsize 
    push           mm_lib.createarraymodek.m i64 
    popptroff                 i32 4 0
    setargs                   3 0
    push           &mm_decls.tttarget 
    push           mm_lib.createarraymodek.m i64 
    addrefoff                 i32 4 0
    push           mm_lib.createarraymodek.target i64 
    push           mm_lib.createarraymodek.owner u64 
    callproc       &mm_lib.storemode 
    push           mm_lib.createarraymodek.owner u64 
    push           &mm_decls.ttowner 
    push           mm_lib.createarraymodek.m i64 
    popptroff                 u64 8 0
    push           mm_lib.createarraymodek.m i64 
    setret                    i64 
    jump           #12981     
#12981: 
    retfn                     i64 
End


Proc mm_lib.nextautotype: u64
    procentry                 
    setargs                   1 0
    push           &mm_lib.nextautotype.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "$T"       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           &mm_lib.autotypeno 
    incrload                  i64 1
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           &mm_lib.nextautotype.str 
    setret                    u64 
    jump           #12983     
#12983: 
    retfn                     u64 
End


Proc mm_lib.createslicemode: i64
    param          mm_lib.createslicemode.owner u64 
    param          mm_lib.createslicemode.slicetype i64 
    param          mm_lib.createslicemode.target i64 
    param          mm_lib.createslicemode.dimexpr u64 
    param          mm_lib.createslicemode.typedefx i64 
    local          mm_lib.createslicemode.k i64 
    local          mm_lib.createslicemode.m i64 
    procentry                 
    push           mm_lib.createslicemode.typedefx i64 
    push           0          i64 
    jumpne         #12985     i64 
    setargs                   1 0
    setargs                   0 0
    callfn         &mm_lib.nextautotype u64 
    callfn         &mm_lib.createusertypefromstr i64 
    pop            mm_lib.createslicemode.m i64 
    jump           #12986     
#12985: 
    push           mm_lib.createslicemode.typedefx i64 
    pop            mm_lib.createslicemode.m i64 
#12986: 
    push           mm_lib.createslicemode.slicetype i64 
    push           &mm_decls.ttbasetype 
    push           mm_lib.createslicemode.m i64 
    popptroff                 i32 4 0
    push           mm_lib.createslicemode.dimexpr u64 
    jumpfalse      #12987     u64 
    push           mm_lib.createslicemode.dimexpr u64 
    push           &mm_decls.ttdimexpr 
    push           mm_lib.createslicemode.m i64 
    popptroff                 u64 8 0
    jump           #12988     
#12987: 
    push           1          i64 
    push           &mm_decls.ttlower 
    push           mm_lib.createslicemode.m i64 
    popptroff                 i32 4 0
#12988: 
    setargs                   3 0
    push           &mm_decls.tttarget 
    push           mm_lib.createslicemode.m i64 
    addrefoff                 i32 4 0
    push           mm_lib.createslicemode.target i64 
    push           mm_lib.createslicemode.owner u64 
    callproc       &mm_lib.storemode 
    push           mm_lib.createslicemode.owner u64 
    push           &mm_decls.ttowner 
    push           mm_lib.createslicemode.m i64 
    popptroff                 u64 8 0
    push           mm_lib.createslicemode.m i64 
    setret                    i64 
    jump           #12989     
#12989: 
    retfn                     i64 
End


Proc mm_lib.createslicemodek: i64
    param          mm_lib.createslicemodek.owner u64 
    param          mm_lib.createslicemodek.target i64 
    param          mm_lib.createslicemodek.lower i64 
    param          mm_lib.createslicemodek.typedefx i64 
    local          mm_lib.createslicemodek.k i64 
    local          mm_lib.createslicemodek.m i64 
    procentry                 
    push           mm_lib.createslicemodek.typedefx i64 
    push           0          i64 
    jumpne         #12991     i64 
    setargs                   1 0
    setargs                   0 0
    callfn         &mm_lib.nextautotype u64 
    callfn         &mm_lib.createusertypefromstr i64 
    pop            mm_lib.createslicemodek.m i64 
    jump           #12992     
#12991: 
    push           mm_lib.createslicemodek.typedefx i64 
    pop            mm_lib.createslicemodek.m i64 
#12992: 
    push           12         i64 
    push           &mm_decls.ttbasetype 
    push           mm_lib.createslicemodek.m i64 
    popptroff                 i32 4 0
    push           mm_lib.createslicemodek.lower i64 
    push           &mm_decls.ttlower 
    push           mm_lib.createslicemodek.m i64 
    popptroff                 i32 4 0
    setargs                   3 0
    push           &mm_decls.tttarget 
    push           mm_lib.createslicemodek.m i64 
    addrefoff                 i32 4 0
    push           mm_lib.createslicemodek.target i64 
    push           mm_lib.createslicemodek.owner u64 
    callproc       &mm_lib.storemode 
    push           mm_lib.createslicemodek.owner u64 
    push           &mm_decls.ttowner 
    push           mm_lib.createslicemodek.m i64 
    popptroff                 u64 8 0
    push           mm_lib.createslicemodek.m i64 
    setret                    i64 
    jump           #12993     
#12993: 
    retfn                     i64 
End


Proc mm_lib.createrefmode: i64
    param          mm_lib.createrefmode.owner u64 
    param          mm_lib.createrefmode.target i64 
    param          mm_lib.createrefmode.typedefx i64 
    local          mm_lib.createrefmode.k i64 
    local          mm_lib.createrefmode.m i64 
    procentry                 
    push           mm_lib.createrefmode.typedefx i64 
    push           0          i64 
    jumpne         #12995     i64 
#12996: 
    push           33         i64 
    pop            mm_lib.createrefmode.k i64 
    push           mm_decls.ntypes i64 
    push           33         i64 
    jumplt         #12997     i64 
#12998: 
    push           &mm_decls.ttusercat 
    push           mm_lib.createrefmode.k i64 
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #12999     i64 
    push           &mm_decls.ttbasetype 
    push           mm_lib.createrefmode.k i64 
    pushptroff                i32 4 0
    push           9          i64 
    jumpne         #12999     i64 
    push           &mm_decls.tttarget 
    push           mm_lib.createrefmode.k i64 
    pushptroff                i32 4 0
    push           mm_lib.createrefmode.target i64 
    jumpne         #12999     i64 
    push           mm_lib.createrefmode.k i64 
    setret                    i64 
    jump           #13000     
#12999: 
#13001: 
    forup          #12998     i64 1
    opnd           mm_lib.createrefmode.k 
    opnd           mm_decls.ntypes 
#12997: 
    setargs                   1 0
    setargs                   0 0
    callfn         &mm_lib.nextautotype u64 
    callfn         &mm_lib.createusertypefromstr i64 
    pop            mm_lib.createrefmode.m i64 
    jump           #13002     
#12995: 
    push           mm_lib.createrefmode.typedefx i64 
    pop            mm_lib.createrefmode.m i64 
#13002: 
    setargs                   3 0
    push           &mm_decls.tttarget 
    push           mm_lib.createrefmode.m i64 
    addrefoff                 i32 4 0
    push           mm_lib.createrefmode.target i64 
    push           mm_lib.createrefmode.owner u64 
    callproc       &mm_lib.storemode 
    push           9          i64 
    push           &mm_decls.ttbasetype 
    push           mm_lib.createrefmode.m i64 
    popptroff                 i32 4 0
    push           &mm_decls.ttsize 
    push           9          i64 
    pushptroff                i32 4 0
    push           &mm_decls.ttsize 
    push           mm_lib.createrefmode.m i64 
    popptroff                 i32 4 0
    push           1          i64 
    push           &mm_decls.ttisref 
    push           mm_lib.createrefmode.m i64 
    popptroff                 u8 1 0
    push           mm_lib.createrefmode.m i64 
    setret                    i64 
    jump           #13000     
#13000: 
    retfn                     i64 
End


Proc mm_lib.createrefprocmode: i64
    param          mm_lib.createrefprocmode.owner u64 
    param          mm_lib.createrefprocmode.stproc u64 
    param          mm_lib.createrefprocmode.paramlist u64 
    param          mm_lib.createrefprocmode.kwd i64 
    param          mm_lib.createrefprocmode.prettype i64 
    param          mm_lib.createrefprocmode.typedefx i64 
    local          mm_lib.createrefprocmode.m i64 
    local          mm_lib.createrefprocmode.mproc i64 
    procentry                 
    setargs                   1 0
    push           mm_lib.createrefprocmode.stproc u64 
    callfn         &mm_lib.createusertype i64 
    pop            mm_lib.createrefprocmode.mproc i64 
    push           mm_lib.createrefprocmode.paramlist u64 
    push           mm_lib.createrefprocmode.stproc u64 
    push           104        
    popptroff                 u64 1 0
    push           mm_lib.createrefprocmode.prettype i64 
    push           mm_lib.createrefprocmode.stproc u64 
    push           72         
    popptroff                 i32 1 0
    push           27         i64 
    push           &mm_decls.ttbasetype 
    push           mm_lib.createrefprocmode.mproc i64 
    popptroff                 i32 4 0
    push           mm_lib.createrefprocmode.typedefx i64 
    push           0          i64 
    jumpne         #13004     i64 
    setargs                   1 0
    setargs                   0 0
    callfn         &mm_lib.nextautotype u64 
    callfn         &mm_lib.createusertypefromstr i64 
    pop            mm_lib.createrefprocmode.m i64 
    jump           #13005     
#13004: 
    push           mm_lib.createrefprocmode.typedefx i64 
    pop            mm_lib.createrefprocmode.m i64 
#13005: 
    push           mm_lib.createrefprocmode.mproc i64 
    push           &mm_decls.tttarget 
    push           mm_lib.createrefprocmode.m i64 
    popptroff                 i32 4 0
    push           9          i64 
    push           &mm_decls.ttbasetype 
    push           mm_lib.createrefprocmode.m i64 
    popptroff                 i32 4 0
    push           &mm_decls.ttsize 
    push           9          i64 
    pushptroff                i32 4 0
    push           &mm_decls.ttsize 
    push           mm_lib.createrefprocmode.m i64 
    popptroff                 i32 4 0
    push           1          i64 
    push           &mm_decls.ttisref 
    push           mm_lib.createrefprocmode.m i64 
    popptroff                 u8 1 0
    push           mm_lib.createrefprocmode.m i64 
    setret                    i64 
    jump           #13006     
#13006: 
    retfn                     i64 
End


Proc mm_lib.copyttvalues:
    param          mm_lib.copyttvalues.dest i64 
    param          mm_lib.copyttvalues.source i64 
    procentry                 
    push           &mm_decls.ttisint 
    push           mm_lib.copyttvalues.source i64 
    pushptroff                u8 1 0
    push           &mm_decls.ttisint 
    push           mm_lib.copyttvalues.dest i64 
    popptroff                 u8 1 0
    push           &mm_decls.ttisword 
    push           mm_lib.copyttvalues.source i64 
    pushptroff                u8 1 0
    push           &mm_decls.ttisword 
    push           mm_lib.copyttvalues.dest i64 
    popptroff                 u8 1 0
    push           &mm_decls.ttisreal 
    push           mm_lib.copyttvalues.source i64 
    pushptroff                u8 1 0
    push           &mm_decls.ttisreal 
    push           mm_lib.copyttvalues.dest i64 
    popptroff                 u8 1 0
    push           &mm_decls.ttisinteger 
    push           mm_lib.copyttvalues.source i64 
    pushptroff                u8 1 0
    push           &mm_decls.ttisinteger 
    push           mm_lib.copyttvalues.dest i64 
    popptroff                 u8 1 0
    push           &mm_decls.ttisallnum 
    push           mm_lib.copyttvalues.source i64 
    pushptroff                u8 1 0
    push           &mm_decls.ttisallnum 
    push           mm_lib.copyttvalues.dest i64 
    popptroff                 u8 1 0
    push           &mm_decls.ttismainnum 
    push           mm_lib.copyttvalues.source i64 
    pushptroff                u8 1 0
    push           &mm_decls.ttismainnum 
    push           mm_lib.copyttvalues.dest i64 
    popptroff                 u8 1 0
    push           &mm_decls.ttisshort 
    push           mm_lib.copyttvalues.source i64 
    pushptroff                u8 1 0
    push           &mm_decls.ttisshort 
    push           mm_lib.copyttvalues.dest i64 
    popptroff                 u8 1 0
    push           &mm_decls.ttisref 
    push           mm_lib.copyttvalues.source i64 
    pushptroff                u8 1 0
    push           &mm_decls.ttisref 
    push           mm_lib.copyttvalues.dest i64 
    popptroff                 u8 1 0
#13008: 
    retproc                   
End


Proc mm_lib.setnameptr:
    param          mm_lib.setnameptr.p u64 
    procentry                 
    push           mm_lib.setnameptr.p u64 
    push           mm_lib.setnameptr.p u64 
    push           16         
    pushptroff                u64 1 0
    push           64         
    popptroff                 u64 1 0
#13010: 
    retproc                   
End


Proc mm_lib.getdottedname: u64
    param          mm_lib.getdottedname.p u64 
    local          mm_lib.getdottedname.str2 block:256 
    local          mm_lib.getdottedname.owner u64 
    procentry                 
    setargs                   2 0
    push           mm_lib.getdottedname.p u64 
    pushptr                   u64 
    push           &mm_lib.getdottedname.str 
    callproc       &strcpy    
    push           mm_lib.getdottedname.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_lib.getdottedname.owner u64 
    jump           #13012     
#13013: 
    setargs                   2 0
    push           &mm_lib.getdottedname.str 
    push           &mm_lib.getdottedname.str2 
    callproc       &strcpy    
    setargs                   2 0
    push           mm_lib.getdottedname.owner u64 
    pushptr                   u64 
    push           &mm_lib.getdottedname.str 
    callproc       &strcpy    
    setargs                   2 0
    push           "."        u64 
    push           &mm_lib.getdottedname.str 
    callproc       &strcat    
    setargs                   2 0
    push           &mm_lib.getdottedname.str2 
    push           &mm_lib.getdottedname.str 
    callproc       &strcat    
    push           mm_lib.getdottedname.owner u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_lib.getdottedname.owner u64 
#13012: 
    push           mm_lib.getdottedname.owner u64 
    jumpfalse      #13014     u64 
    push           mm_lib.getdottedname.owner u64 
    push           78         
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #13013     i64 
#13014: 
#13015: 
    push           &mm_lib.getdottedname.str 
    setret                    u64 
    jump           #13016     
#13016: 
    retfn                     u64 
End


Proc mm_lib.getavname: u64
    param          mm_lib.getavname.owner u64 
    param          mm_lib.getavname.id i64 
    local          mm_lib.getavname.p u64 
    local          mm_lib.getavname.str block:32 
    local          mm_lib.getavname.name u64 
    procentry                 
    push           mm_lib.getavname.id i64 
    push           12         i64 
    jumpne         #13018     i64 
    push           mm_lib.getavname.owner u64 
    push           78         
    pushptroff                u8 1 0
    push           5          i64 
    jumpeq         #13018     i64 
    setargs                   1 0
    push           "Auto frame not in proc" u64 
    callproc       &mm_support.serror 
#13018: 
    push           mm_lib.getavname.id i64 
    push           12         i64 
    jumpne         #13019     i64 
    setargs                   1 0
    push           &mm_lib.getavname.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "av_"      u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           &mm_lib.nextavindex 
    incrload                  i64 1
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13020     
#13019: 
    setargs                   1 0
    push           &mm_lib.getavname.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "sv_"      u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_lib.nextsvindex 
    incrload                  i64 1
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13020: 
    setargs                   1 0
    push           &mm_lib.getavname.str 
    callfn         &mlibp.pcm_copyheapstring u64 
    pop            mm_lib.getavname.name u64 
    setargs                   1 0
    push           mm_lib.getavname.name u64 
    callproc       &mm_lex.addnamestr 
    setargs                   3 0
    push           mm_lib.getavname.id i64 
    setargs                   1 0
    push           mm_lib.getavname.name u64 
    callfn         &mm_lex.addnamestr u64 
    push           mm_lib.getavname.owner u64 
    callfn         &mm_lib.getduplnameptr u64 
    pop            mm_lib.getavname.p u64 
    push           1          u64 
    push           mm_lib.getavname.p u64 
    push           92         
    addrefoff                 u64 1 0
    push           3          i64 
    popdotindex               u16 
    push           4          i64 
    push           mm_lib.getavname.p u64 
    push           72         
    popptroff                 i32 1 0
    setargs                   2 0
    push           mm_lib.getavname.p u64 
    push           mm_lib.getavname.owner u64 
    callproc       &mm_lib.adddef 
    push           mm_lib.getavname.p u64 
    setret                    u64 
    jump           #13021     
#13021: 
    retfn                     u64 
End


Proc mm_lib.unionstr_clear:
    param          mm_lib.unionstr_clear.u u64 
    procentry                 
    push           0          u64 
    push           mm_lib.unionstr_clear.u u64 
    popptr                    u64 
#13023: 
    retproc                   
End


Proc mm_lib.unionstr_append:
    param          mm_lib.unionstr_append.u u64 
    param          mm_lib.unionstr_append.c i64 
    procentry                 
    push           mm_lib.unionstr_append.u u64 
    push           7          
    pushptroff                u8 1 0
    push           6          i64 
    jumpne         #13025     i64 
    setargs                   1 0
    push           "Uflags overflow/a" u64 
    callproc       &mm_support.serror 
#13025: 
    push           mm_lib.unionstr_append.u u64 
    push           7          
    addrefoff                 u64 1 0
    incr                      u8 1
    push           mm_lib.unionstr_append.c i64 
    push           mm_lib.unionstr_append.u u64 
    push           mm_lib.unionstr_append.u u64 
    push           7          
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
#13026: 
    retproc                   
End


Proc mm_lib.unionstr_concat:
    param          mm_lib.unionstr_concat.u u64 
    param          mm_lib.unionstr_concat.v u64 
    local          mm_lib.unionstr_concat.ulen i64 
    local          mm_lib.unionstr_concat.vlen i64 
    local          mm_lib.unionstr_concat.i i64 
    procentry                 
    push           mm_lib.unionstr_concat.u u64 
    push           7          
    pushptroff                u8 1 0
    pop            mm_lib.unionstr_concat.ulen i64 
    push           mm_lib.unionstr_concat.v u64 
    push           7          
    pushptroff                u8 1 0
    pop            mm_lib.unionstr_concat.vlen i64 
    push           mm_lib.unionstr_concat.ulen i64 
    push           mm_lib.unionstr_concat.vlen i64 
    add                       i64 
    push           7          i64 
    jumple         #13028     i64 
    setargs                   1 0
    push           "Uflags overflow/c" u64 
    callproc       &mm_support.serror 
#13028: 
#13029: 
    push           1          i64 
    pop            mm_lib.unionstr_concat.i i64 
    push           mm_lib.unionstr_concat.vlen i64 
    push           1          i64 
    jumplt         #13030     i64 
#13031: 
    push           mm_lib.unionstr_concat.v u64 
    push           mm_lib.unionstr_concat.i i64 
    pushptroff                u8 1 -1
    push           mm_lib.unionstr_concat.u u64 
    push           mm_lib.unionstr_concat.i i64 
    push           mm_lib.unionstr_concat.ulen i64 
    add                       i64 
    popptroff                 u8 1 -1
#13032: 
    forup          #13031     i64 1
    opnd           mm_lib.unionstr_concat.i 
    opnd           mm_lib.unionstr_concat.vlen 
#13030: 
    push           mm_lib.unionstr_concat.ulen i64 
    push           mm_lib.unionstr_concat.vlen i64 
    add                       i64 
    push           mm_lib.unionstr_concat.u u64 
    push           7          
    popptroff                 u8 1 0
#13033: 
    retproc                   
End


Proc mm_lib.unionstr_last: i64
    param          mm_lib.unionstr_last.u u64 
    procentry                 
    push           mm_lib.unionstr_last.u u64 
    push           7          
    pushptroff                u8 1 0
    jumpfalse      #13035     i64 
    push           mm_lib.unionstr_last.u u64 
    push           mm_lib.unionstr_last.u u64 
    push           7          
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    setret                    i64 
    jump           #13036     
#13035: 
    push           0          i64 
    setret                    i64 
    jump           #13036     
#13036: 
    retfn                     i64 
End


Proc mm_lib.unionstr_copy:
    param          mm_lib.unionstr_copy.u u64 
    param          mm_lib.unionstr_copy.v u64 
    procentry                 
    setargs                   3 0
    push           8          u64 
    push           mm_lib.unionstr_copy.v u64 
    push           mm_lib.unionstr_copy.u u64 
    callproc       &memcpy    
#13038: 
    retproc                   
End


Proc mm_lib.createrecordmode: i64
    param          mm_lib.createrecordmode.owner u64 
    param          mm_lib.createrecordmode.typedefx i64 
    local          mm_lib.createrecordmode.m i64 
    procentry                 
    push           mm_lib.createrecordmode.typedefx i64 
    push           0          i64 
    jumpne         #13040     i64 
    setargs                   1 0
    push           mm_lib.createrecordmode.owner u64 
    callfn         &mm_lib.createusertype i64 
    pop            mm_lib.createrecordmode.m i64 
    jump           #13041     
#13040: 
    push           mm_lib.createrecordmode.typedefx i64 
    pop            mm_lib.createrecordmode.m i64 
#13041: 
    push           13         i64 
    push           &mm_decls.ttbasetype 
    push           mm_lib.createrecordmode.m i64 
    popptroff                 i32 4 0
    push           1          i64 
    push           &mm_decls.ttusercat 
    push           mm_lib.createrecordmode.m i64 
    popptroff                 u8 1 0
    push           mm_lib.createrecordmode.m i64 
    setret                    i64 
    jump           #13042     
#13042: 
    retfn                     i64 
End


Proc mm_lib.createtuplemode: i64
    param          mm_lib.createtuplemode.owner u64 
    param          mm_lib.createtuplemode.elements u128 
    param          mm_lib.createtuplemode.typedefx i64 
    local          mm_lib.createtuplemode.m i64 
    local          mm_lib.createtuplemode.av_1 i64 
    local          mm_lib.createtuplemode.i i64 
    procentry                 
    push           mm_lib.createtuplemode.typedefx i64 
    push           0          i64 
    jumpne         #13044     i64 
    setargs                   1 0
    push           mm_lib.createtuplemode.owner u64 
    callfn         &mm_lib.createusertype i64 
    pop            mm_lib.createtuplemode.m i64 
    jump           #13045     
#13044: 
    push           mm_lib.createtuplemode.typedefx i64 
    pop            mm_lib.createtuplemode.m i64 
#13045: 
    push           31         i64 
    push           &mm_decls.ttbasetype 
    push           mm_lib.createtuplemode.m i64 
    popptroff                 i32 4 0
    push           1          i64 
    push           &mm_decls.ttusercat 
    push           mm_lib.createtuplemode.m i64 
    popptroff                 u8 1 0
    push           mm_lib.createtuplemode.elements u128 
    len                       i64 
    push           &mm_decls.ttlength 
    push           mm_lib.createtuplemode.m i64 
    popptroff                 i32 4 0
    setargs                   1 0
    push           mm_lib.createtuplemode.elements u128 
    len                       i64 
    push           4          i64 
    mul                       i64 
    callfn         &mlibp.pcm_alloc u64 
    push           &mm_decls.ttmult 
    push           mm_lib.createtuplemode.m i64 
    popptroff                 u64 8 0
#13046: 
    push           1          i64 
    pop            mm_lib.createtuplemode.i i64 
    push           mm_lib.createtuplemode.elements u128 
    len                       i64 
    pop            mm_lib.createtuplemode.av_1 i64 
    push           mm_lib.createtuplemode.av_1 i64 
    push           1          i64 
    jumplt         #13047     i64 
#13048: 
    setargs                   3 0
    push           &mm_decls.ttmult 
    push           mm_lib.createtuplemode.m i64 
    pushptroff                u64 8 0
    push           mm_lib.createtuplemode.i i64 
    addrefoff                 i32 4 -4
    push           mm_lib.createtuplemode.elements u128 
    sliceptr                  u64 
    push           mm_lib.createtuplemode.i i64 
    pushptroff                i64 8 -8
    push           mm_lib.createtuplemode.owner u64 
    callproc       &mm_lib.storemode 
#13049: 
    forup          #13048     i64 1
    opnd           mm_lib.createtuplemode.i 
    opnd           mm_lib.createtuplemode.av_1 
#13047: 
    push           mm_lib.createtuplemode.m i64 
    setret                    i64 
    jump           #13050     
#13050: 
    retfn                     i64 
End


Proc mm_lib.createenummode: i64
    param          mm_lib.createenummode.owner u64 
    param          mm_lib.createenummode.typedefx i64 
    local          mm_lib.createenummode.m i64 
    procentry                 
    push           mm_lib.createenummode.typedefx i64 
    push           0          i64 
    jumpne         #13052     i64 
    setargs                   1 0
    push           mm_lib.createenummode.owner u64 
    callfn         &mm_lib.createusertype i64 
    pop            mm_lib.createenummode.m i64 
    jump           #13053     
#13052: 
    push           mm_lib.createenummode.typedefx i64 
    pop            mm_lib.createenummode.m i64 
#13053: 
    push           24         i64 
    push           &mm_decls.ttbasetype 
    push           mm_lib.createenummode.m i64 
    popptroff                 i32 4 0
    push           1          i64 
    push           &mm_decls.ttusercat 
    push           mm_lib.createenummode.m i64 
    popptroff                 u8 1 0
    push           mm_lib.createenummode.m i64 
    setret                    i64 
    jump           #13054     
#13054: 
    retfn                     i64 
End


Proc mm_lib.convertstring:
    param          mm_lib.convertstring.s u64 
    param          mm_lib.convertstring.t u64 
    local          mm_lib.convertstring.c i64 
    procentry                 
    jump           #13056     
#13057: 
    push           mm_lib.convertstring.c i64 
    switch         #13058     7 92
    opnd           #13059     
#13058: 
    switchlabel    #13060     
    switchlabel    #13060     
    switchlabel    #13061     
    switchlabel    #13062     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13063     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13060     
    switchlabel    #13060     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13064     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13059     
    switchlabel    #13065     
    endswitch                 
#13064: 
    push           92         u64 
    push           &mm_lib.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           34         u64 
    push           &mm_lib.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    jump           #13066     
#13062: 
    push           92         u64 
    push           &mm_lib.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           110        u64 
    push           &mm_lib.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    jump           #13066     
#13063: 
    push           92         u64 
    push           &mm_lib.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           99         u64 
    push           &mm_lib.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    jump           #13066     
#13061: 
    push           92         u64 
    push           &mm_lib.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           116        u64 
    push           &mm_lib.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    jump           #13066     
#13065: 
    push           92         u64 
    push           &mm_lib.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           92         u64 
    push           &mm_lib.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    jump           #13066     
#13060: 
    push           60         u64 
    push           &mm_lib.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           mm_lib.convertstring.c i64 
    push           10         i64 
    idiv                      i64 
    push           48         i64 
    add                       u64 
    push           &mm_lib.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           mm_lib.convertstring.c i64 
    push           10         i64 
    irem                      i64 
    push           48         i64 
    add                       u64 
    push           &mm_lib.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           62         u64 
    push           &mm_lib.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    jump           #13066     
#13059: 
    push           mm_lib.convertstring.c u64 
    push           &mm_lib.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
#13066: 
#13056: 
    push           &mm_lib.convertstring.s 
    loadincr                  u64 1
    pushptr                   u8 
    store          mm_lib.convertstring.c i64 
    jumptrue       #13057     i64 
#13067: 
    push           0          u64 
    push           mm_lib.convertstring.t u64 
    popptr                    u8 
#13068: 
    retproc                   
End


Proc mm_lib.strexpr: u64
    param          mm_lib.strexpr.p u64 
    procentry                 
    setargs                   1 0
    push           mm_lib.exprstr u64 
    callproc       &mlibp.gs_init 
    setargs                   2 0
    push           mm_lib.strexpr.p u64 
    push           mm_lib.exprstr u64 
    callproc       &mm_lib.jeval 
    push           mm_lib.exprstr u64 
    setret                    u64 
    jump           #13070     
#13070: 
    retfn                     u64 
End


Proc mm_lib.jeval:
    param          mm_lib.jeval.dest u64 
    param          mm_lib.jeval.p u64 
    local          mm_lib.jeval.q u64 
    local          mm_lib.jeval.a u64 
    local          mm_lib.jeval.b u64 
    local          mm_lib.jeval.str block:500 
    procentry                 
    push           mm_lib.jeval.p u64 
    push           0          u64 
    jumpne         #13072     u64 
    jump           #13073     
#13072: 
    push           mm_lib.jeval.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_lib.jeval.a u64 
    push           mm_lib.jeval.p u64 
    push           24         
    pushptroff                u64 1 0
    pop            mm_lib.jeval.b u64 
    push           mm_lib.jeval.p u64 
    pushptr                   u8 
    switch         #13074     1 100
    opnd           #13075     
#13074: 
    switchlabel    #13076     
    switchlabel    #13077     
    switchlabel    #13078     
    switchlabel    #13075     
    switchlabel    #13079     
    switchlabel    #13075     
    switchlabel    #13075     
    switchlabel    #13075     
    switchlabel    #13075     
    switchlabel    #13075     
    switchlabel    #13075     
    switchlabel    #13075     
    switchlabel    #13080     
    switchlabel    #13075     
    switchlabel    #13075     
    switchlabel    #13075     
    switchlabel    #13075     
    switchlabel    #13081     
    switchlabel    #13082     
    switchlabel    #13083     
    switchlabel    #13075     
    switchlabel    #13075     
    switchlabel    #13075     
    switchlabel    #13075     
    switchlabel    #13075     
    switchlabel    #13075     
    switchlabel    #13075     
    switchlabel    #13084     
    switchlabel    #13085     
    switchlabel    #13075     
    switchlabel    #13086     
    switchlabel    #13075     
    switchlabel    #13075     
    switchlabel    #13087     
    switchlabel    #13075     
    switchlabel    #13087     
    switchlabel    #13081     
    switchlabel    #13075     
    switchlabel    #13075     
    switchlabel    #13088     
    switchlabel    #13075     
    switchlabel    #13075     
    switchlabel    #13075     
    switchlabel    #13089     
    switchlabel    #13075     
    switchlabel    #13075     
    switchlabel    #13075     
    switchlabel    #13090     
    switchlabel    #13075     
    switchlabel    #13090     
    switchlabel    #13091     
    switchlabel    #13075     
    switchlabel    #13090     
    switchlabel    #13090     
    switchlabel    #13075     
    switchlabel    #13075     
    switchlabel    #13092     
    switchlabel    #13075     
    switchlabel    #13093     
    switchlabel    #13094     
    switchlabel    #13095     
    switchlabel    #13096     
    switchlabel    #13097     
    switchlabel    #13075     
    switchlabel    #13098     
    switchlabel    #13075     
    switchlabel    #13075     
    switchlabel    #13075     
    switchlabel    #13075     
    switchlabel    #13099     
    switchlabel    #13100     
    switchlabel    #13101     
    switchlabel    #13075     
    switchlabel    #13075     
    switchlabel    #13102     
    switchlabel    #13075     
    switchlabel    #13102     
    switchlabel    #13102     
    switchlabel    #13075     
    switchlabel    #13075     
    switchlabel    #13075     
    switchlabel    #13075     
    switchlabel    #13075     
    switchlabel    #13075     
    switchlabel    #13075     
    switchlabel    #13075     
    switchlabel    #13075     
    switchlabel    #13075     
    switchlabel    #13075     
    switchlabel    #13075     
    switchlabel    #13075     
    switchlabel    #13075     
    switchlabel    #13103     
    switchlabel    #13075     
    switchlabel    #13075     
    switchlabel    #13086     
    switchlabel    #13075     
    switchlabel    #13104     
    switchlabel    #13075     
    switchlabel    #13105     
    endswitch                 
#13076: 
    push           &mm_decls.ttbasetype 
    push           mm_lib.jeval.p u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           20         i64 
    casejumpeq     #13106     i64 0
    push           4          i64 
    casejumpeq     #13106     i64 0
    push           18         i64 
    casejumpeq     #13106     i64 0
    push           19         i64 
    casejumpeq     #13106     i64 0
    push           23         i64 
    casejumpeq     #13107     i64 0
    push           2          i64 
    casejumpeq     #13107     i64 0
    push           21         i64 
    casejumpeq     #13107     i64 0
    push           22         i64 
    casejumpeq     #13107     i64 0
    push           16         i64 
    casejumpeq     #13108     i64 0
    push           17         i64 
    casejumpeq     #13108     i64 0
    push           1          i64 
    casejumpeq     #13108     i64 0
    push           5          i64 
    casejumpeq     #13109     i64 0
    push           3          i64 
    casejumpeq     #13110     i64 0
    push           7          i64 
    casejumpeq     #13111     i64 0
    push           9          i64 
    casejumpeq     #13112     i64 0
    popstack                  i64 
    jump           #13113     
#13106: 
    setargs                   2 0
    push           &mm_lib.jeval.str 
    push           mm_lib.jeval.p u64 
    push           16         
    pushptroff                i64 1 0
    callproc       &msysp.getstrint 
    jump           #13114     
#13107: 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           mm_lib.jeval.p u64 
    push           16         
    pushptroff                u64 1 0
    callfn         &msysp.strword u64 
    push           &mm_lib.jeval.str 
    callproc       &strcpy    
    jump           #13114     
#13108: 
    push           mm_lib.jeval.p u64 
    push           16         
    pushptroff                u64 1 0
    push           &mm_lib.jeval.str 
    push           1          i64 
    popptroff                 u8 1 -1
    push           0          u64 
    push           &mm_lib.jeval.str 
    push           0          i64 
    popptroff                 u8 1 -1
    jump           #13114     
#13109: 
    setargs                   1 0
    push           &mm_lib.jeval.str 
    callproc       &msysp.m$print_startstr 
    setargs                   3 0
    push           0          i64 
    push           mm_lib.jeval.p u64 
    push           16         
    pushptroff                i128 1 0
    callproc       &msysp.m$print_i128 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13114     
#13110: 
    setargs                   1 0
    push           &mm_lib.jeval.str 
    callproc       &msysp.m$print_startstr 
    setargs                   3 0
    push           0          i64 
    push           mm_lib.jeval.p u64 
    push           16         
    pushptroff                u128 1 0
    callproc       &msysp.m$print_u128 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13114     
#13111: 
    setargs                   1 0
    push           &mm_lib.jeval.str 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    push           0          i64 
    push           mm_lib.jeval.p u64 
    push           16         
    pushptroff                r64 1 0
    callproc       &msysp.m$print_r64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13114     
#13112: 
    push           mm_lib.jeval.p u64 
    push           48         
    pushptroff                i32 1 0
    push           10         i64 
    jumpne         #13115     i64 
    push           mm_lib.jeval.p u64 
    push           44         
    pushptroff                u8 1 0
    jumpfalse      #13115     i64 
    push           mm_lib.jeval.p u64 
    push           40         
    pushptroff                u32 1 0
    push           250        i64 
    jumple         #13116     i64 
    setargs                   2 0
    push           "LONGSTR)" u64 
    push           &mm_lib.jeval.str 
    callproc       &strcpy    
    jump           #13117     
#13116: 
    setargs                   2 0
    push           &mm_lib.jeval.str 
    push           mm_lib.jeval.p u64 
    push           16         
    pushptroff                u64 1 0
    callproc       &mm_lib.convertstring 
#13117: 
    setargs                   2 0
    push           "\""       u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    setargs                   2 0
    push           &mm_lib.jeval.str 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    setargs                   2 0
    push           "\""       u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    jump           #13073     
    jump           #13118     
#13115: 
    setargs                   1 0
    push           &mm_lib.jeval.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           mm_lib.jeval.p u64 
    push           16         
    pushptroff                u64 1 0
    callproc       &msysp.m$print_ptr_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13118: 
    jump           #13114     
#13113: 
    setargs                   2 0
    push           "<EVAL/CONST PROBABLY VOID>" u64 
    push           &mm_lib.jeval.str 
    callproc       &sprintf   
#13114: 
    setargs                   2 0
    push           &mm_lib.jeval.str 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    jump           #13119     
#13078: 
    setargs                   2 0
    push           mm_lib.jeval.p u64 
    push           16         
    pushptroff                u64 1 0
    pushptr                   u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    jump           #13119     
#13087: 
    setargs                   2 0
    push           &pc_tables.pclnames 
    push           mm_lib.jeval.p u64 
    push           60         
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    push           &mm_lib.jeval.str 
    callproc       &strcpy    
    setargs                   2 0
    push           "("        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    setargs                   2 0
    push           mm_lib.jeval.a u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    setargs                   2 0
    push           &mm_lib.jeval.str 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    setargs                   2 0
    push           mm_lib.jeval.b u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    setargs                   2 0
    push           ")"        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    jump           #13119     
#13081: 
    setargs                   2 0
    push           &pc_tables.pclnames 
    push           mm_lib.jeval.p u64 
    push           60         
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    push           &mm_lib.jeval.str 
    callproc       &strcpy    
    setargs                   2 0
    push           &mm_lib.jeval.str 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    setargs                   2 0
    push           "("        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    push           mm_lib.jeval.a u64 
    pushptr                   u8 
    push           65         i64 
    jumpne         #13120     i64 
    setargs                   2 0
    setargs                   2 0
    push           1          i64 
    push           mm_lib.jeval.a u64 
    push           16         
    pushptroff                i64 1 0
    callfn         &mm_lib.strmode u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    jump           #13121     
#13120: 
    setargs                   2 0
    push           mm_lib.jeval.a u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
#13121: 
    setargs                   2 0
    push           ")"        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    jump           #13119     
#13086: 
    setargs                   2 0
    push           mm_lib.jeval.a u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    setargs                   2 0
    push           "("        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    push           mm_lib.jeval.b u64 
    pop            mm_lib.jeval.q u64 
    jump           #13122     
#13123: 
    setargs                   2 0
    push           mm_lib.jeval.q u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    push           mm_lib.jeval.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_lib.jeval.q u64 
    push           mm_lib.jeval.q u64 
    jumpfalse      #13124     u64 
    setargs                   2 0
    push           ","        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
#13124: 
#13122: 
    push           mm_lib.jeval.q u64 
    jumptrue       #13123     u64 
#13125: 
    setargs                   2 0
    push           ")"        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    jump           #13119     
#13090: 
    setargs                   2 0
    push           mm_lib.jeval.a u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    push           mm_lib.jeval.p u64 
    pushptr                   u8 
    push           53         i64 
    jumpeq         #13126     i64 
    push           mm_lib.jeval.p u64 
    pushptr                   u8 
    push           54         i64 
    jumpne         #13127     i64 
#13126: 
    setargs                   2 0
    push           "."        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
#13127: 
    setargs                   2 0
    push           "["        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    setargs                   2 0
    push           mm_lib.jeval.b u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    setargs                   2 0
    push           "]"        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    jump           #13119     
#13091: 
    setargs                   2 0
    push           mm_lib.jeval.a u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    setargs                   2 0
    push           "."        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    setargs                   2 0
    push           mm_lib.jeval.b u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    jump           #13119     
#13082: 
    setargs                   2 0
    push           "("        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    push           mm_lib.jeval.a u64 
    pop            mm_lib.jeval.q u64 
    jump           #13128     
#13129: 
    setargs                   2 0
    push           mm_lib.jeval.q u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    push           mm_lib.jeval.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_lib.jeval.q u64 
    push           mm_lib.jeval.q u64 
    jumpfalse      #13130     u64 
    setargs                   2 0
    push           ","        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
#13130: 
#13128: 
    push           mm_lib.jeval.q u64 
    jumptrue       #13129     u64 
#13131: 
    setargs                   2 0
    push           ")"        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    jump           #13119     
#13083: 
    setargs                   2 0
    push           "("        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    setargs                   2 0
    push           mm_lib.jeval.a u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    setargs                   2 0
    push           ".."       u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    setargs                   2 0
    push           mm_lib.jeval.b u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    setargs                   2 0
    push           ")"        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    jump           #13119     
#13085: 
    setargs                   2 0
    push           mm_lib.jeval.a u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    setargs                   2 0
    push           ":="       u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    setargs                   2 0
    push           mm_lib.jeval.b u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    jump           #13119     
#13105: 
    setargs                   2 0
    push           "("        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    setargs                   2 0
    push           mm_lib.jeval.a u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    setargs                   2 0
    push           "|"        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    setargs                   2 0
    push           mm_lib.jeval.b u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    setargs                   2 0
    push           "|"        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    setargs                   2 0
    push           mm_lib.jeval.p u64 
    push           32         
    pushptroff                u64 1 0
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    setargs                   2 0
    push           ")"        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    jump           #13119     
#13098: 
    setargs                   2 0
    setargs                   2 0
    push           1          i64 
    push           mm_lib.jeval.p u64 
    push           48         
    pushptroff                i32 1 0
    callfn         &mm_lib.strmode u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    jump           #13119     
#13095: 
    setargs                   2 0
    setargs                   2 0
    push           1          i64 
    push           mm_lib.jeval.p u64 
    push           52         
    pushptroff                i32 1 0
    callfn         &mm_lib.strmode u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    setargs                   2 0
    push           "("        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    setargs                   2 0
    push           mm_lib.jeval.a u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    setargs                   2 0
    push           ")"        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    jump           #13119     
#13096: 
    setargs                   2 0
    push           "shorten(" u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    setargs                   2 0
    push           mm_lib.jeval.a u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    setargs                   2 0
    push           ")"        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    jump           #13119     
#13097: 
    setargs                   2 0
    push           "cast("    u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    setargs                   2 0
    push           mm_lib.jeval.a u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    setargs                   2 0
    push           ")"        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    jump           #13119     
#13084: 
    setargs                   2 0
    push           mm_lib.jeval.a u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    setargs                   2 0
    push           ":"        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    push           mm_lib.jeval.b u64 
    jumpfalse      #13132     u64 
    setargs                   2 0
    push           mm_lib.jeval.p u64 
    push           24         
    pushptroff                u64 1 0
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    jump           #13133     
#13132: 
    setargs                   2 0
    push           "-"        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mlibp.gs_str 
#13133: 
    jump           #13119     
#13092: 
    setargs                   2 0
    push           mm_lib.jeval.a u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    setargs                   2 0
    push           "^"        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    jump           #13119     
#13089: 
    setargs                   2 0
    push           "("        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    setargs                   2 0
    push           mm_lib.jeval.a u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    setargs                   2 0
    push           ","        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    setargs                   2 0
    push           mm_lib.jeval.b u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    setargs                   2 0
    push           ","        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    setargs                   2 0
    push           mm_lib.jeval.p u64 
    push           32         
    pushptroff                u64 1 0
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    setargs                   2 0
    push           ")"        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    jump           #13119     
#13079: 
    setargs                   2 0
    push           "<JBLOCK>" u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    jump           #13119     
#13077: 
    setargs                   2 0
    push           "<nullunit>" u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mlibp.gs_str 
    jump           #13119     
#13093: 
    setargs                   2 0
    push           "&"        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    setargs                   2 0
    push           mm_lib.jeval.a u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    push           mm_lib.jeval.b u64 
    jumpfalse      #13134     u64 
    setargs                   2 0
    push           "+"        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           mm_lib.jeval.b u64 
    push           16         
    pushptroff                i64 1 0
    push           mm_lib.jeval.dest u64 
    callproc       &mlibp.gs_strint 
#13134: 
    jump           #13119     
#13094: 
    setargs                   2 0
    push           "&."       u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    setargs                   2 0
    push           mm_lib.jeval.a u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    jump           #13119     
#13100: 
    setargs                   2 0
    push           "TYPESTR(" u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    setargs                   2 0
    push           mm_lib.jeval.a u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    setargs                   2 0
    push           ")"        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    jump           #13119     
#13102: 
    setargs                   2 0
    push           "$"        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           &mm_tables.jtagnames 
    push           mm_lib.jeval.p u64 
    pushptr                   u8 
    pushptroff                u64 8 0
    push           2          i64 
    addrefoff                 u64 1 0
    push           mm_lib.jeval.dest u64 
    callproc       &mlibp.gs_str 
    jump           #13119     
#13101: 
    setargs                   2 0
    push           mm_lib.jeval.a u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    setargs                   2 0
    push           "."        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           &mm_tables.bitfieldnames 
    push           mm_lib.jeval.p u64 
    push           40         
    pushptroff                i16 1 0
    pushptroff                u64 8 -8
    push           mm_lib.jeval.dest u64 
    callproc       &mlibp.gs_str 
    jump           #13119     
#13103: 
    setargs                   2 0
    push           mm_lib.jeval.a u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    setargs                   2 0
    push           ":"        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           mm_lib.jeval.b u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    jump           #13119     
#13099: 
    setargs                   2 0
    push           "typeof("  u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           mm_lib.jeval.a u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    setargs                   2 0
    push           ")"        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mlibp.gs_str 
    jump           #13119     
#13104: 
    setargs                   2 0
    push           &mm_tables.sysfnnames 
    push           mm_lib.jeval.p u64 
    push           40         
    pushptroff                i16 1 0
    pushptroff                u64 8 -8
    push           6          i64 
    addrefoff                 u64 1 0
    push           mm_lib.jeval.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           "("        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mlibp.gs_str 
    push           mm_lib.jeval.a u64 
    jumpfalse      #13135     u64 
    setargs                   2 0
    push           mm_lib.jeval.a u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
#13135: 
    setargs                   2 0
    push           ")"        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mlibp.gs_str 
    jump           #13119     
#13088: 
    setargs                   2 0
    push           "incr "    u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           mm_lib.jeval.a u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    jump           #13119     
#13080: 
    setargs                   2 0
    push           "newstrinclude " u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           mm_lib.jeval.a u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    jump           #13119     
#13075: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &mm_tables.jtagnames 
    push           mm_lib.jeval.p u64 
    pushptr                   u8 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           mm_lib.jeval.p u64 
    push           "CAN'T DO JEVAL" u64 
    callproc       &mm_support.gerror 
#13119: 
#13073: 
    retproc                   
End


Proc mm_lib.strmode: u64
    param          mm_lib.strmode.m i64 
    param          mm_lib.strmode.expand i64 
    procentry                 
    setargs                   3 0
    push           &mm_lib.strmode.str 
    push           mm_lib.strmode.expand i64 
    push           mm_lib.strmode.m i64 
    callproc       &mm_lib.istrmode 
    push           &mm_lib.strmode.str 
    setret                    u64 
    jump           #13137     
#13137: 
    retfn                     u64 
End


Proc mm_lib.strmode2: u64
    param          mm_lib.strmode2.m i64 
    param          mm_lib.strmode2.expand i64 
    procentry                 
    setargs                   3 0
    push           &mm_lib.strmode2.str 
    push           mm_lib.strmode2.expand i64 
    push           mm_lib.strmode2.m i64 
    callproc       &mm_lib.istrmode 
    push           &mm_lib.strmode2.str 
    setret                    u64 
    jump           #13139     
#13139: 
    retfn                     u64 
End


Proc mm_lib.istrmode:
    param          mm_lib.istrmode.m i64 
    param          mm_lib.istrmode.expand i64 
    param          mm_lib.istrmode.dest u64 
    local          mm_lib.istrmode.d u64 
    local          mm_lib.istrmode.q u64 
    local          mm_lib.istrmode.e u64 
    local          mm_lib.istrmode.value i64 
    local          mm_lib.istrmode.needcomma i64 
    local          mm_lib.istrmode.x i64 
    local          mm_lib.istrmode.i i64 
    local          mm_lib.istrmode.target i64 
    local          mm_lib.istrmode.mbase i64 
    local          mm_lib.istrmode.n i64 
    local          mm_lib.istrmode.sxx block:16 
    local          mm_lib.istrmode.xx u64 
    local          mm_lib.istrmode.sdim u64 
    local          mm_lib.istrmode.slength u64 
    local          mm_lib.istrmode.strdim block:100 
    local          mm_lib.istrmode.prefix u64 
    local          mm_lib.istrmode.tn block:32 
    procentry                 
    push           &mm_lib.istrmode.sxx 
    pop            mm_lib.istrmode.xx u64 
    push           mm_lib.istrmode.m i64 
    push           0          i64 
    jumpge         #13141     i64 
    setargs                   2 0
    push           "XX*"      u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcpy    
    push           &mm_decls.typenames 
    push           mm_lib.istrmode.m i64 
    neg                       i64 
    pushptroff                block:32 32 0
    pop            mm_lib.istrmode.tn block:32 
    push           &mm_lib.istrmode.tn 
    push           16         
    pushptroff                u64 1 0
    push           0          u64 
    jumpne         #13142     u64 
    setargs                   2 0
    push           "typeof("  u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcat    
    setargs                   2 0
    push           &mm_lib.istrmode.tn 
    push           8          
    pushptroff                u64 1 0
    pushptr                   u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcat    
    setargs                   2 0
    push           ")"        u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcat    
    jump           #13143     
#13142: 
    push           &mm_lib.istrmode.tn 
    push           8          
    pushptroff                u64 1 0
    jumpfalse      #13144     u64 
    setargs                   2 0
    push           &mm_lib.istrmode.tn 
    push           8          
    pushptroff                u64 1 0
    pushptr                   u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcat    
    setargs                   2 0
    push           "."        u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcat    
#13144: 
    setargs                   2 0
    push           &mm_lib.istrmode.tn 
    push           16         
    pushptroff                u64 1 0
    pushptr                   u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcat    
#13143: 
    jump           #13145     
#13141: 
    push           mm_lib.istrmode.m i64 
    push           33         i64 
    jumpge         #13146     i64 
    push           mm_lib.istrmode.m i64 
    push           9          i64 
    jumpeq         #13146     i64 
    setargs                   2 0
    setargs                   1 0
    push           mm_lib.istrmode.m i64 
    callfn         &mm_lib.typename u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcpy    
    jump           #13145     
#13146: 
    push           &mm_decls.ttbasetype 
    push           mm_lib.istrmode.m i64 
    pushptroff                i32 4 0
    store          mm_lib.istrmode.mbase i64 
    push           9          i64 
    casejumpeq     #13147     i64 0
    push           11         i64 
    casejumpeq     #13148     i64 0
    push           12         i64 
    casejumpeq     #13149     i64 0
    push           24         i64 
    casejumpeq     #13150     i64 0
    push           13         i64 
    casejumpeq     #13151     i64 0
    push           0          i64 
    casejumpeq     #13152     i64 0
    push           33         i64 
    casejumpeq     #13153     i64 0
    push           27         i64 
    casejumpeq     #13154     i64 0
    push           31         i64 
    casejumpeq     #13155     i64 0
    push           30         i64 
    casejumpeq     #13156     i64 0
    popstack                  i64 
    jump           #13157     
#13147: 
    setargs                   2 0
    push           "ref "     u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcpy    
    push           &mm_decls.tttarget 
    push           mm_lib.istrmode.m i64 
    pushptroff                i32 4 0
    pop            mm_lib.istrmode.target i64 
    push           mm_lib.istrmode.target i64 
    push           0          i64 
    jumplt         #13158     i64 
    push           &mm_decls.ttbasetype 
    push           mm_lib.istrmode.target i64 
    pushptroff                i32 4 0
    push           13         i64 
    jumpne         #13158     i64 
    setargs                   2 0
    setargs                   1 0
    push           mm_lib.istrmode.target i64 
    callfn         &mm_lib.typename u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcat    
    jump           #13159     
#13158: 
    setargs                   3 0
    push           mm_lib.istrmode.dest u64 
    setargs                   1 0
    push           mm_lib.istrmode.dest u64 
    callfn         &strlen    i64 
    addrefoff                 u64 1 0
    push           0          i64 
    push           &mm_decls.tttarget 
    push           mm_lib.istrmode.m i64 
    pushptroff                i32 4 0
    callproc       &mm_lib.istrmode 
#13159: 
    jump           #13160     
#13148: 
    push           &mm_decls.ttdimexpr 
    push           mm_lib.istrmode.m i64 
    pushptroff                u64 8 0
    jumpfalse      #13161     u64 
    setargs                   2 0
    push           &mm_lib.istrmode.strdim 
    setargs                   1 0
    push           &mm_decls.ttdimexpr 
    push           mm_lib.istrmode.m i64 
    pushptroff                u64 8 0
    callfn         &mm_lib.strexpr u64 
    callproc       &mm_support.gs_copytostr 
    setargs                   1 0
    push           mm_lib.istrmode.dest u64 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "@[#]"     u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           &mm_lib.istrmode.strdim 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13162     
#13161: 
    push           &mm_decls.ttlength 
    push           mm_lib.istrmode.m i64 
    pushptroff                i32 4 0
    jumpfalse      #13163     i64 
    push           &mm_decls.ttlower 
    push           mm_lib.istrmode.m i64 
    pushptroff                i32 4 0
    push           1          i64 
    jumpne         #13164     i64 
    setargs                   1 0
    push           mm_lib.istrmode.dest u64 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "[#]"      u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           &mm_decls.ttlength 
    push           mm_lib.istrmode.m i64 
    pushptroff                i32 4 0
    push           &mm_decls.ttlower 
    push           mm_lib.istrmode.m i64 
    pushptroff                i32 4 0
    add                       i64 
    push           1          i64 
    sub                       i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13165     
#13164: 
    setargs                   1 0
    push           mm_lib.istrmode.dest u64 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "[#..#]"   u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           &mm_decls.ttlower 
    push           mm_lib.istrmode.m i64 
    pushptroff                i32 4 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           &mm_decls.ttlength 
    push           mm_lib.istrmode.m i64 
    pushptroff                i32 4 0
    push           &mm_decls.ttlower 
    push           mm_lib.istrmode.m i64 
    pushptroff                i32 4 0
    add                       i64 
    push           1          i64 
    sub                       i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13165: 
    jump           #13166     
#13163: 
    push           &mm_decls.ttlower 
    push           mm_lib.istrmode.m i64 
    pushptroff                i32 4 0
    push           1          i64 
    jumpne         #13167     i64 
    setargs                   1 0
    push           mm_lib.istrmode.dest u64 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "[]"       u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13168     
#13167: 
    setargs                   1 0
    push           mm_lib.istrmode.dest u64 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "[#:]"     u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           &mm_decls.ttlower 
    push           mm_lib.istrmode.m i64 
    pushptroff                i32 4 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13168: 
#13166: 
#13162: 
    setargs                   3 0
    push           mm_lib.istrmode.dest u64 
    setargs                   1 0
    push           mm_lib.istrmode.dest u64 
    callfn         &strlen    i64 
    addrefoff                 u64 1 0
    push           0          i64 
    push           &mm_decls.tttarget 
    push           mm_lib.istrmode.m i64 
    pushptroff                i32 4 0
    callproc       &mm_lib.istrmode 
    jump           #13160     
#13149: 
    push           &mm_tables.stdnames 
    push           mm_lib.istrmode.mbase i64 
    pushptroff                u64 8 0
    pop            mm_lib.istrmode.prefix u64 
    push           &mm_decls.ttdimexpr 
    push           mm_lib.istrmode.m i64 
    pushptroff                u64 8 0
    jumpfalse      #13169     u64 
    setargs                   2 0
    push           &mm_lib.istrmode.strdim 
    setargs                   1 0
    push           &mm_decls.ttdimexpr 
    push           mm_lib.istrmode.m i64 
    pushptroff                u64 8 0
    callfn         &mm_lib.strexpr u64 
    callproc       &mm_support.gs_copytostr 
    setargs                   1 0
    push           mm_lib.istrmode.dest u64 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "@#[#:]"   u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           mm_lib.istrmode.prefix u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_lib.istrmode.strdim 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13170     
#13169: 
    push           &mm_decls.ttlower 
    push           mm_lib.istrmode.m i64 
    pushptroff                i32 4 0
    push           1          i64 
    jumpne         #13171     i64 
    setargs                   2 0
    push           mm_lib.istrmode.prefix u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcpy    
    setargs                   2 0
    push           "[]"       u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcat    
    jump           #13172     
#13171: 
    setargs                   1 0
    push           mm_lib.istrmode.dest u64 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "#[#:]"    u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           mm_lib.istrmode.prefix u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_decls.ttlower 
    push           mm_lib.istrmode.m i64 
    pushptroff                i32 4 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13172: 
#13170: 
    setargs                   3 0
    push           mm_lib.istrmode.dest u64 
    setargs                   1 0
    push           mm_lib.istrmode.dest u64 
    callfn         &strlen    i64 
    addrefoff                 u64 1 0
    push           0          i64 
    push           &mm_decls.tttarget 
    push           mm_lib.istrmode.m i64 
    pushptroff                i32 4 0
    callproc       &mm_lib.istrmode 
    jump           #13160     
#13150: 
    push           &mm_decls.ttnamedef 
    push           mm_lib.istrmode.m i64 
    pushptroff                u64 8 0
    pop            mm_lib.istrmode.d u64 
    push           mm_lib.istrmode.expand i64 
    jumptrue       #13173     i64 
    setargs                   2 0
    push           mm_lib.istrmode.d u64 
    pushptr                   u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcpy    
    jump           #13145     
#13173: 
    setargs                   2 0
    push           "enum("    u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcpy    
    push           1          i64 
    pop            mm_lib.istrmode.value i64 
    push           0          i64 
    pop            mm_lib.istrmode.needcomma i64 
    push           mm_lib.istrmode.d u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_lib.istrmode.q u64 
    jump           #13174     
#13175: 
    push           mm_lib.istrmode.needcomma i64 
    jumpfalse      #13176     i64 
    setargs                   2 0
    push           ","        u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcat    
#13176: 
    push           1          i64 
    pop            mm_lib.istrmode.needcomma i64 
    setargs                   2 0
    push           mm_lib.istrmode.q u64 
    pushptr                   u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcat    
    push           mm_lib.istrmode.q u64 
    push           32         
    pushptroff                u64 1 0
    pop            mm_lib.istrmode.q u64 
#13174: 
    push           mm_lib.istrmode.q u64 
    jumptrue       #13175     u64 
#13177: 
    setargs                   2 0
    push           ")"        u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcat    
    jump           #13160     
#13151: 
    push           mm_lib.istrmode.expand i64 
    jumptrue       #13178     i64 
    setargs                   2 0
    setargs                   1 0
    push           mm_lib.istrmode.m i64 
    callfn         &mm_lib.typename u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcpy    
    jump           #13145     
#13178: 
    setargs                   2 0
    push           ""         u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcpy    
    push           mm_lib.istrmode.expand i64 
    push           2          i64 
    jumpeq         #13179     i64 
    setargs                   2 0
    setargs                   1 0
    push           &mm_decls.ttbasetype 
    push           mm_lib.istrmode.m i64 
    pushptroff                i32 4 0
    callfn         &mm_lib.typename u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcat    
#13179: 
    setargs                   2 0
    push           "("        u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcat    
    push           &mm_decls.ttnamedef 
    push           mm_lib.istrmode.m i64 
    pushptroff                u64 8 0
    pop            mm_lib.istrmode.d u64 
    push           0          i64 
    pop            mm_lib.istrmode.needcomma i64 
    push           mm_lib.istrmode.d u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_lib.istrmode.q u64 
    jump           #13180     
#13181: 
    push           mm_lib.istrmode.needcomma i64 
    jumpfalse      #13182     i64 
    setargs                   2 0
    push           ","        u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcat    
#13182: 
    push           1          i64 
    pop            mm_lib.istrmode.needcomma i64 
    setargs                   3 0
    push           mm_lib.istrmode.dest u64 
    setargs                   1 0
    push           mm_lib.istrmode.dest u64 
    callfn         &strlen    i64 
    addrefoff                 u64 1 0
    push           0          i64 
    push           mm_lib.istrmode.q u64 
    push           72         
    pushptroff                i32 1 0
    callproc       &mm_lib.istrmode 
    setargs                   2 0
    push           " "        u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcat    
    setargs                   2 0
    push           mm_lib.istrmode.q u64 
    pushptr                   u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcat    
    push           mm_lib.istrmode.q u64 
    push           32         
    pushptroff                u64 1 0
    pop            mm_lib.istrmode.q u64 
#13180: 
    push           mm_lib.istrmode.q u64 
    jumptrue       #13181     u64 
#13183: 
    setargs                   2 0
    push           ")"        u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcat    
    jump           #13160     
#13152: 
    setargs                   2 0
    push           "void"     u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcpy    
    jump           #13160     
#13153: 
    setargs                   2 0
    setargs                   1 0
    push           mm_lib.istrmode.m i64 
    callfn         &mm_lib.typename u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcpy    
    jump           #13160     
#13154: 
    push           &mm_decls.ttnamedef 
    push           mm_lib.istrmode.m i64 
    pushptroff                u64 8 0
    pop            mm_lib.istrmode.d u64 
    setargs                   2 0
    push           "proc("    u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcpy    
    push           mm_lib.istrmode.d u64 
    push           104        
    pushptroff                u64 1 0
    pop            mm_lib.istrmode.q u64 
    push           0          i64 
    pop            mm_lib.istrmode.needcomma i64 
    jump           #13184     
#13185: 
    push           mm_lib.istrmode.needcomma i64 
    jumpfalse      #13186     i64 
    setargs                   2 0
    push           ","        u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcat    
#13186: 
    push           1          i64 
    pop            mm_lib.istrmode.needcomma i64 
    setargs                   3 0
    push           mm_lib.istrmode.dest u64 
    setargs                   1 0
    push           mm_lib.istrmode.dest u64 
    callfn         &strlen    i64 
    addrefoff                 u64 1 0
    push           0          i64 
    push           mm_lib.istrmode.q u64 
    push           72         
    pushptroff                i32 1 0
    callproc       &mm_lib.istrmode 
    setargs                   2 0
    push           " "        u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcat    
    setargs                   2 0
    push           mm_lib.istrmode.q u64 
    pushptr                   u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcat    
    push           mm_lib.istrmode.q u64 
    push           32         
    pushptroff                u64 1 0
    pop            mm_lib.istrmode.q u64 
#13184: 
    push           mm_lib.istrmode.q u64 
    push           0          u64 
    jumpne         #13185     u64 
#13187: 
    setargs                   2 0
    push           ")"        u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcat    
    push           mm_lib.istrmode.d u64 
    push           72         
    pushptroff                i32 1 0
    push           0          i64 
    jumpeq         #13188     i64 
    setargs                   3 0
    push           mm_lib.istrmode.dest u64 
    setargs                   1 0
    push           mm_lib.istrmode.dest u64 
    callfn         &strlen    i64 
    addrefoff                 u64 1 0
    push           0          i64 
    push           mm_lib.istrmode.d u64 
    push           72         
    pushptroff                i32 1 0
    callproc       &mm_lib.istrmode 
#13188: 
    jump           #13160     
#13155: 
    setargs                   2 0
    push           "Tuple("   u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcpy    
    push           &mm_decls.ttlength 
    push           mm_lib.istrmode.m i64 
    pushptroff                i32 4 0
    pop            mm_lib.istrmode.n i64 
#13189: 
    push           1          i64 
    pop            mm_lib.istrmode.i i64 
    push           mm_lib.istrmode.n i64 
    push           1          i64 
    jumplt         #13190     i64 
#13191: 
    setargs                   3 0
    push           mm_lib.istrmode.dest u64 
    setargs                   1 0
    push           mm_lib.istrmode.dest u64 
    callfn         &strlen    i64 
    addrefoff                 u64 1 0
    push           0          i64 
    push           &mm_decls.ttmult 
    push           mm_lib.istrmode.m i64 
    pushptroff                u64 8 0
    push           mm_lib.istrmode.i i64 
    pushptroff                i32 4 -4
    callproc       &mm_lib.istrmode 
    push           mm_lib.istrmode.i i64 
    push           mm_lib.istrmode.n i64 
    jumpge         #13192     i64 
    setargs                   2 0
    push           ","        u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcat    
#13192: 
#13193: 
    forup          #13191     i64 1
    opnd           mm_lib.istrmode.i 
    opnd           mm_lib.istrmode.n 
#13190: 
    setargs                   2 0
    push           ")"        u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcat    
    jump           #13160     
#13156: 
    setargs                   2 0
    push           "bitfield" u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcpy    
    jump           #13160     
#13157: 
    push           &mm_decls.ttbasetype 
    push           mm_lib.istrmode.m i64 
    pushptroff                i32 4 0
    push           33         i64 
    jumpge         #13194     i64 
    setargs                   2 0
    push           "Alias for:" u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcpy    
    setargs                   3 0
    push           mm_lib.istrmode.dest u64 
    setargs                   1 0
    push           mm_lib.istrmode.dest u64 
    callfn         &strlen    i64 
    addrefoff                 u64 1 0
    push           0          i64 
    push           &mm_decls.tttarget 
    push           mm_lib.istrmode.m i64 
    pushptroff                i32 4 0
    callproc       &mm_lib.istrmode 
    jump           #13195     
#13194: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    setargs                   1 0
    push           mm_lib.istrmode.m i64 
    callfn         &mm_lib.typename u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    setargs                   2 0
    push           1          i64 
    push           &mm_decls.ttbasetype 
    push           mm_lib.istrmode.m i64 
    pushptroff                i32 4 0
    callfn         &mm_lib.strmode u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "NEWSTRMODE" u64 
    callproc       &mm_support.mcerror 
#13195: 
#13160: 
#13145: 
    retproc                   
End


Proc mm_lib.addtoproclist:
    param          mm_lib.addtoproclist.d u64 
    local          mm_lib.addtoproclist.pp u64 
    procentry                 
    setargs                   1 0
    push           16         i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            mm_lib.addtoproclist.pp u64 
    push           mm_decls.proclist u64 
    push           0          u64 
    jumpne         #13197     u64 
    push           mm_lib.addtoproclist.pp u64 
    store          mm_decls.proclistx u64 
    pop            mm_decls.proclist u64 
    jump           #13198     
#13197: 
    push           mm_lib.addtoproclist.pp u64 
    push           mm_decls.proclistx u64 
    push           8          
    popptroff                 u64 1 0
    push           mm_lib.addtoproclist.pp u64 
    pop            mm_decls.proclistx u64 
#13198: 
    push           mm_lib.addtoproclist.d u64 
    push           mm_lib.addtoproclist.pp u64 
    push           0          
    popptroff                 u64 1 0
#13199: 
    retproc                   
End


Proc mm_lib.addstatic:
    param          mm_lib.addstatic.d u64 
    local          mm_lib.addstatic.pp u64 
    procentry                 
    setargs                   1 0
    push           16         i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            mm_lib.addstatic.pp u64 
    push           mm_decls.staticlist u64 
    push           0          u64 
    jumpne         #13201     u64 
    push           mm_lib.addstatic.pp u64 
    store          mm_decls.staticlistx u64 
    pop            mm_decls.staticlist u64 
    jump           #13202     
#13201: 
    push           mm_lib.addstatic.pp u64 
    push           mm_decls.staticlistx u64 
    push           8          
    popptroff                 u64 1 0
    push           mm_lib.addstatic.pp u64 
    pop            mm_decls.staticlistx u64 
#13202: 
    push           mm_lib.addstatic.d u64 
    push           mm_lib.addstatic.pp u64 
    push           0          
    popptroff                 u64 1 0
#13203: 
    retproc                   
End


Proc mm_lib.addconst:
    param          mm_lib.addconst.d u64 
    local          mm_lib.addconst.pp u64 
    procentry                 
    setargs                   1 0
    push           16         i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            mm_lib.addconst.pp u64 
    push           mm_decls.constlist u64 
    push           0          u64 
    jumpne         #13205     u64 
    push           mm_lib.addconst.pp u64 
    store          mm_decls.constlistx u64 
    pop            mm_decls.constlist u64 
    jump           #13206     
#13205: 
    push           mm_lib.addconst.pp u64 
    push           mm_decls.constlistx u64 
    push           8          
    popptroff                 u64 1 0
    push           mm_lib.addconst.pp u64 
    pop            mm_decls.constlistx u64 
#13206: 
    push           mm_lib.addconst.d u64 
    push           mm_lib.addconst.pp u64 
    push           0          
    popptroff                 u64 1 0
#13207: 
    retproc                   
End


Proc mm_lib.typename: u64
    param          mm_lib.typename.m i64 
    procentry                 
    push           mm_lib.typename.m i64 
    push           0          i64 
    jumplt         #13209     i64 
    push           &mm_decls.ttname 
    push           mm_lib.typename.m i64 
    pushptroff                u64 8 0
    setret                    u64 
    jump           #13210     
#13209: 
    push           &mm_decls.typenames 
    push           mm_lib.typename.m i64 
    neg                       i64 
    addrefoff                 block:32 32 0
    push           16         
    pushptroff                u64 1 0
    pushptr                   u64 
    setret                    u64 
    jump           #13210     
#13210: 
    retfn                     u64 
End


Proc mm_lib.allocunitrec: u64
    local          mm_lib.allocunitrec.p u64 
    local          mm_lib.allocunitrec.q u64 
    local          mm_lib.allocunitrec.nwords i64 
    procentry                 
    push           &mm_decls.nunits 
    incr                      i64 1
    push           &mm_lib.remainingunits 
    loaddecr                  i64 1
    jumpfalse      #13212     i64 
    push           mm_lib.unitheapptr u64 
    pop            mm_lib.allocunitrec.p u64 
    push           &mm_lib.unitheapptr 
    incr                      u64 64
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    push           mm_lib.allocunitrec.p u64 
    push           4          
    popptroff                 u32 1 0
    push           mm_decls.currmoduleno i64 
    push           mm_lib.allocunitrec.p u64 
    push           56         
    popptroff                 u8 1 0
    push           mm_lib.allocunitrec.p u64 
    setret                    u64 
    jump           #13213     
#13212: 
    setargs                   1 0
    push           2097152    i64 
    callfn         &mlibp.pcm_alloc u64 
    store          mm_lib.unitheapptr u64 
    pop            mm_lib.allocunitrec.p u64 
    setargs                   3 0
    push           2097152    u64 
    push           0          i64 
    push           mm_lib.allocunitrec.p u64 
    callproc       &memset    
    push           32767      i64 
    pop            mm_lib.remainingunits i64 
    push           &mm_lib.unitheapptr 
    incr                      u64 64
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    push           mm_lib.allocunitrec.p u64 
    push           4          
    popptroff                 u32 1 0
    push           mm_decls.currmoduleno i64 
    push           mm_lib.allocunitrec.p u64 
    push           56         
    popptroff                 u8 1 0
    push           mm_lib.allocunitrec.p u64 
    setret                    u64 
    jump           #13213     
#13213: 
    retfn                     u64 
End


Proc mm_lib.createdupldef: u64
    param          mm_lib.createdupldef.owner u64 
    param          mm_lib.createdupldef.symptr u64 
    param          mm_lib.createdupldef.id i64 
    local          mm_lib.createdupldef.p u64 
    local          mm_lib.createdupldef.q u64 
    procentry                 
    setargs                   0 0
    callfn         &mm_lib.newstrec u64 
    pop            mm_lib.createdupldef.p u64 
    push           mm_lib.createdupldef.symptr u64 
    pushptr                   u64 
    push           mm_lib.createdupldef.p u64 
    push           0          
    popptroff                 u64 1 0
    push           mm_lib.createdupldef.symptr u64 
    push           76         
    pushptroff                u8 1 0
    push           mm_lib.createdupldef.p u64 
    push           76         
    popptroff                 u8 1 0
    push           79         i64 
    push           mm_lib.createdupldef.p u64 
    push           77         
    popptroff                 u8 1 0
    push           mm_lib.createdupldef.owner u64 
    push           mm_lib.createdupldef.p u64 
    push           8          
    popptroff                 u64 1 0
    push           mm_lib.createdupldef.id i64 
    push           mm_lib.createdupldef.p u64 
    push           78         
    popptroff                 u8 1 0
    push           mm_lib.createdupldef.symptr u64 
    push           40         
    pushptroff                u64 1 0
    push           mm_lib.createdupldef.p u64 
    push           40         
    popptroff                 u64 1 0
    push           mm_lib.createdupldef.p u64 
    push           mm_lib.createdupldef.symptr u64 
    push           40         
    popptroff                 u64 1 0
    push           mm_lib.createdupldef.owner u64 
    jumpfalse      #13215     u64 
    push           mm_lib.createdupldef.owner u64 
    push           16         
    pushptroff                u64 1 0
    push           0          u64 
    jumpne         #13216     u64 
    push           mm_lib.createdupldef.p u64 
    push           mm_lib.createdupldef.owner u64 
    push           24         
    storeptroff               u64 1 0
    push           mm_lib.createdupldef.owner u64 
    push           16         
    popptroff                 u64 1 0
    jump           #13217     
#13216: 
    push           mm_lib.createdupldef.p u64 
    push           mm_lib.createdupldef.owner u64 
    push           24         
    pushptroff                u64 1 0
    push           32         
    popptroff                 u64 1 0
    push           mm_lib.createdupldef.p u64 
    push           mm_lib.createdupldef.owner u64 
    push           24         
    popptroff                 u64 1 0
#13217: 
#13215: 
    push           mm_lib.createdupldef.p u64 
    setret                    u64 
    jump           #13218     
#13218: 
    retfn                     u64 
End


Proc mm_lib.createnewmoduledef: u64
    param          mm_lib.createnewmoduledef.owner u64 
    param          mm_lib.createnewmoduledef.symptr u64 
    local          mm_lib.createnewmoduledef.p u64 
    local          mm_lib.createnewmoduledef.q u64 
    procentry                 
    setargs                   3 0
    push           2          i64 
    push           mm_lib.createnewmoduledef.symptr u64 
    push           mm_lib.createnewmoduledef.owner u64 
    callfn         &mm_lib.createdupldef u64 
    pop            mm_lib.createnewmoduledef.p u64 
    push           mm_lib.createnewmoduledef.p u64 
    setret                    u64 
    jump           #13220     
#13220: 
    retfn                     u64 
End


Proc mm_lib.duplunit: u64
    param          mm_lib.duplunit.p u64 
    param          mm_lib.duplunit.lineno i64 
    local          mm_lib.duplunit.q u64 
    procentry                 
    push           mm_lib.duplunit.p u64 
    push           0          u64 
    jumpne         #13222     u64 
    push           0          u64 
    setret                    u64 
    jump           #13223     
#13222: 
    setargs                   1 0
    push           mm_lib.duplunit.p u64 
    pushptr                   u8 
    callfn         &mm_lib.createunit0 u64 
    pop            mm_lib.duplunit.q u64 
    push           mm_lib.duplunit.p u64 
    pushptr                   block:64 
    push           mm_lib.duplunit.q u64 
    popptr                    block:64 
    push           0          u64 
    push           mm_lib.duplunit.q u64 
    push           8          
    popptroff                 u64 1 0
    push           mm_lib.duplunit.q u64 
    push           1          
    pushptroff                u8 1 0
    jumpfalse      #13224     i64 
    setargs                   2 0
    push           0          i64 
    push           mm_lib.duplunit.q u64 
    push           16         
    pushptroff                u64 1 0
    callfn         &mm_lib.duplunit u64 
    push           mm_lib.duplunit.q u64 
    push           16         
    popptroff                 u64 1 0
    push           1          i64 
    push           mm_lib.duplunit.q u64 
    push           1          
    popptroff                 u8 1 0
#13224: 
    push           mm_lib.duplunit.q u64 
    push           2          
    pushptroff                u8 1 0
    jumpfalse      #13225     i64 
    setargs                   2 0
    push           0          i64 
    push           mm_lib.duplunit.q u64 
    push           24         
    pushptroff                u64 1 0
    callfn         &mm_lib.duplunit u64 
    push           mm_lib.duplunit.q u64 
    push           24         
    popptroff                 u64 1 0
    push           1          i64 
    push           mm_lib.duplunit.q u64 
    push           2          
    popptroff                 u8 1 0
#13225: 
    push           mm_lib.duplunit.q u64 
    push           3          
    pushptroff                u8 1 0
    jumpfalse      #13226     i64 
    setargs                   2 0
    push           0          i64 
    push           mm_lib.duplunit.q u64 
    push           32         
    pushptroff                u64 1 0
    callfn         &mm_lib.duplunit u64 
    push           mm_lib.duplunit.q u64 
    push           32         
    popptroff                 u64 1 0
    push           1          i64 
    push           mm_lib.duplunit.q u64 
    push           3          
    popptroff                 u8 1 0
#13226: 
    push           mm_lib.duplunit.q u64 
    setret                    u64 
    jump           #13223     
#13223: 
    retfn                     u64 
End


Proc mm_lib.checkblockreturn: i64
    param          mm_lib.checkblockreturn.p u64 
    local          mm_lib.checkblockreturn.e u64 
    local          mm_lib.checkblockreturn.wt u64 
    local          mm_lib.checkblockreturn.m i64 
    local          mm_lib.checkblockreturn.res i64 
    procentry                 
    push           mm_lib.checkblockreturn.p u64 
    push           0          u64 
    jumpne         #13228     u64 
    push           0          i64 
    setret                    i64 
    jump           #13229     
#13228: 
    push           mm_lib.checkblockreturn.p u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_lib.checkblockreturn.m i64 
    push           mm_lib.checkblockreturn.p u64 
    pushptr                   u8 
    push           97         i64 
    casejumpeq     #13230     i64 0
    push           134        i64 
    casejumpeq     #13231     i64 0
    push           100        i64 
    casejumpeq     #13232     i64 0
    push           101        i64 
    casejumpeq     #13233     i64 0
    push           5          i64 
    casejumpeq     #13234     i64 0
    push           115        i64 
    casejumpeq     #13235     i64 0
    push           117        i64 
    casejumpeq     #13235     i64 0
    push           116        i64 
    casejumpeq     #13235     i64 0
    push           118        i64 
    casejumpeq     #13235     i64 0
    push           8          i64 
    casejumpeq     #13236     i64 0
    popstack                  i64 
    jump           #13237     
#13230: 
    push           1          i64 
    setret                    i64 
    jump           #13229     
    jump           #13238     
#13231: 
    push           1          i64 
    setret                    i64 
    jump           #13229     
    jump           #13238     
#13232: 
    push           1          i64 
    push           mm_lib.checkblockreturn.p u64 
    push           40         
    popptroff                 u8 1 0
    startmult                 
    setargs                   1 0
    push           mm_lib.checkblockreturn.p u64 
    push           24         
    pushptroff                u64 1 0
    callfn         &mm_lib.checkblockreturn i64 
    jumpfalse      #13239     i64 
    setargs                   1 0
    push           mm_lib.checkblockreturn.p u64 
    push           32         
    pushptroff                u64 1 0
    callfn         &mm_lib.checkblockreturn i64 
    jumpfalse      #13239     i64 
    push           1          
    resetmult                 
    jump           #13240     
#13239: 
    push           0          
    endmult                   
#13240: 
    setret                    i64 
    jump           #13229     
    jump           #13238     
#13233: 
    push           mm_lib.checkblockreturn.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_lib.checkblockreturn.e u64 
    push           1          i64 
    push           mm_lib.checkblockreturn.p u64 
    push           40         
    popptroff                 u8 1 0
    jump           #13241     
#13242: 
    setargs                   1 0
    push           mm_lib.checkblockreturn.e u64 
    push           24         
    pushptroff                u64 1 0
    callfn         &mm_lib.checkblockreturn i64 
    jumptrue       #13243     i64 
    push           0          i64 
    setret                    i64 
    jump           #13229     
#13243: 
    push           mm_lib.checkblockreturn.e u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_lib.checkblockreturn.e u64 
#13241: 
    push           mm_lib.checkblockreturn.e u64 
    jumptrue       #13242     u64 
#13244: 
    setargs                   1 0
    push           mm_lib.checkblockreturn.p u64 
    push           24         
    pushptroff                u64 1 0
    callfn         &mm_lib.checkblockreturn i64 
    setret                    i64 
    jump           #13229     
    jump           #13238     
#13234: 
    push           mm_lib.checkblockreturn.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_lib.checkblockreturn.e u64 
    push           mm_lib.checkblockreturn.e u64 
    jumpfalse      #13245     u64 
    jump           #13246     
#13247: 
    push           mm_lib.checkblockreturn.e u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_lib.checkblockreturn.e u64 
#13246: 
    push           mm_lib.checkblockreturn.e u64 
    jumpfalse      #13248     u64 
    push           mm_lib.checkblockreturn.e u64 
    push           8          
    pushptroff                u64 1 0
    jumptrue       #13247     u64 
#13248: 
#13249: 
    setargs                   1 0
    push           mm_lib.checkblockreturn.e u64 
    callfn         &mm_lib.checkblockreturn i64 
    setret                    i64 
    jump           #13229     
#13245: 
    jump           #13238     
#13235: 
    push           1          i64 
    push           mm_lib.checkblockreturn.p u64 
    push           40         
    popptroff                 u8 1 0
    push           mm_lib.checkblockreturn.p u64 
    push           24         
    pushptroff                u64 1 0
    pop            mm_lib.checkblockreturn.wt u64 
    jump           #13250     
#13251: 
    setargs                   1 0
    push           mm_lib.checkblockreturn.wt u64 
    push           24         
    pushptroff                u64 1 0
    callfn         &mm_lib.checkblockreturn i64 
    jumptrue       #13252     i64 
    push           0          i64 
    setret                    i64 
    jump           #13229     
#13252: 
    push           mm_lib.checkblockreturn.wt u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_lib.checkblockreturn.wt u64 
#13250: 
    push           mm_lib.checkblockreturn.wt u64 
    jumptrue       #13251     u64 
#13253: 
    setargs                   1 0
    push           mm_lib.checkblockreturn.p u64 
    push           32         
    pushptroff                u64 1 0
    callfn         &mm_lib.checkblockreturn i64 
    setret                    i64 
    jump           #13229     
    jump           #13238     
#13236: 
    push           1          i64 
    setret                    i64 
    jump           #13229     
    jump           #13238     
#13237: 
#13238: 
    startmult                 
    push           &mm_tables.jisexpr 
    push           mm_lib.checkblockreturn.p u64 
    pushptr                   u8 
    pushptroff                u8 1 0
    jumpfalse      #13254     i64 
    push           mm_lib.checkblockreturn.m i64 
    push           0          i64 
    jumpeq         #13254     i64 
    push           1          i64 
    resetmult                 
    jump           #13255     
#13254: 
    push           0          i64 
    endmult                   
#13255: 
    setret                    i64 
    jump           #13229     
#13229: 
    retfn                     i64 
End


Proc mm_lib.isconstunit: i64
    param          mm_lib.isconstunit.a u64 
    procentry                 
    push           mm_lib.isconstunit.a u64 
    push           58         
    pushptroff                u8 1 0
    setret                    i64 
    jump           #13257     
#13257: 
    retfn                     i64 
End


Proc mm_lib.getownername:
    param          mm_lib.getownername.d u64 
    param          mm_lib.getownername.dest u64 
    local          mm_lib.getownername.owner u64 
    procentry                 
    push           mm_lib.getownername.d u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_lib.getownername.owner u64 
    push           mm_lib.getownername.owner u64 
    push           0          u64 
    jumpeq         #13259     u64 
    push           mm_lib.getownername.owner u64 
    push           78         
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #13260     i64 
#13259: 
    jump           #13261     
#13260: 
    setargs                   2 0
    push           mm_lib.getownername.dest u64 
    push           mm_lib.getownername.owner u64 
    callproc       &mm_lib.getownername 
    setargs                   2 0
    push           mm_lib.getownername.owner u64 
    pushptr                   u64 
    push           mm_lib.getownername.dest u64 
    callproc       &strcat    
    setargs                   2 0
    push           "."        u64 
    push           mm_lib.getownername.dest u64 
    callproc       &strcat    
#13261: 
    retproc                   
End


Proc mm_lib.getalignment: i64
    param          mm_lib.getalignment.m i64 
    local          mm_lib.getalignment.a i64 
    procentry                 
    push           &mm_decls.ttbasetype 
    push           mm_lib.getalignment.m i64 
    pushptroff                i32 4 0
    push           11         i64 
    casejumpeq     #13263     i64 0
    push           13         i64 
    casejumpeq     #13264     i64 0
    popstack                  i64 
    jump           #13265     
#13263: 
    setargs                   1 0
    push           &mm_decls.tttarget 
    push           mm_lib.getalignment.m i64 
    pushptroff                i32 4 0
    callfn         &mm_lib.getalignment i64 
    setret                    i64 
    jump           #13266     
    jump           #13267     
#13264: 
    push           16         i64 
    setret                    i64 
    jump           #13266     
    jump           #13267     
#13265: 
#13267: 
    push           &mm_decls.ttsize 
    push           mm_lib.getalignment.m i64 
    pushptroff                i32 4 0
    pop            mm_lib.getalignment.a i64 
    push           mm_lib.getalignment.a i64 
    push           1          i64 
    casejumpeq     #13268     i64 0
    push           2          i64 
    casejumpeq     #13268     i64 0
    push           4          i64 
    casejumpeq     #13268     i64 0
    push           8          i64 
    casejumpeq     #13268     i64 0
    push           16         i64 
    casejumpeq     #13268     i64 0
    push           0          i64 
    casejumpeq     #13269     i64 0
    popstack                  i64 
    jump           #13270     
#13268: 
    push           mm_lib.getalignment.a i64 
    setret                    i64 
    jump           #13266     
    jump           #13271     
#13269: 
    push           8          i64 
    setret                    i64 
    jump           #13266     
    jump           #13271     
#13270: 
#13271: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    setargs                   2 0
    push           1          i64 
    push           mm_lib.getalignment.m i64 
    callfn         &mm_lib.strmode u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           0          u64 
    push           "GETALIGN SIZE NOT 1248" u64 
    callproc       &mm_support.gerror 
    push           0          i64 
    setret                    i64 
    jump           #13266     
#13266: 
    retfn                     i64 
End


Proc mm_lib.ispoweroftwo: i64
    param          mm_lib.ispoweroftwo.x i64 
    local          mm_lib.ispoweroftwo.a i64 
    local          mm_lib.ispoweroftwo.n i64 
    local          mm_lib.ispoweroftwo.av_1 i64 
    procentry                 
    push           1          i64 
    pop            mm_lib.ispoweroftwo.a i64 
    push           0          i64 
    pop            mm_lib.ispoweroftwo.n i64 
#13273: 
    push           60         i64 
    pop            mm_lib.ispoweroftwo.av_1 i64 
#13274: 
    push           &mm_lib.ispoweroftwo.n 
    incr                      i64 1
    push           mm_lib.ispoweroftwo.a i64 
    push           1          i64 
    shl                       i64 
    pop            mm_lib.ispoweroftwo.a i64 
    push           mm_lib.ispoweroftwo.a i64 
    push           mm_lib.ispoweroftwo.x i64 
    jumpne         #13275     i64 
    push           mm_lib.ispoweroftwo.n i64 
    setret                    i64 
    jump           #13276     
#13275: 
#13277: 
    to             #13274     
    opnd           mm_lib.ispoweroftwo.av_1 
#13278: 
    push           0          i64 
    setret                    i64 
    jump           #13276     
#13276: 
    retfn                     i64 
End


Proc mm_lib.addlistunit:
    param          mm_lib.addlistunit.ulist u64 
    param          mm_lib.addlistunit.ulistx u64 
    param          mm_lib.addlistunit.p u64 
    procentry                 
    push           mm_lib.addlistunit.ulist u64 
    pushptr                   u64 
    push           0          u64 
    jumpne         #13280     u64 
    push           mm_lib.addlistunit.p u64 
    push           mm_lib.addlistunit.ulistx u64 
    storeptr                  u64 
    push           mm_lib.addlistunit.ulist u64 
    popptr                    u64 
    jump           #13281     
#13280: 
    push           mm_lib.addlistunit.p u64 
    push           mm_lib.addlistunit.ulistx u64 
    pushptr                   u64 
    push           8          
    popptroff                 u64 1 0
#13281: 
    push           mm_lib.addlistunit.p u64 
    push           mm_lib.addlistunit.ulistx u64 
    popptr                    u64 
#13282: 
    retproc                   
End


Proc mm_lib.storemode: i64
    param          mm_lib.storemode.owner u64 
    param          mm_lib.storemode.m i64 
    param          mm_lib.storemode.pmode u64 
    local          mm_lib.storemode.r u64 
    procentry                 
    push           mm_lib.storemode.m i64 
    push           0          i64 
    jumplt         #13284     i64 
    push           mm_lib.storemode.m i64 
    push           mm_lib.storemode.pmode u64 
    popptr                    i32 
    push           mm_lib.storemode.m i64 
    setret                    i64 
    jump           #13285     
#13284: 
    push           &mm_decls.typenames 
    push           mm_lib.storemode.m i64 
    neg                       i64 
    addrefoff                 block:32 32 0
    pop            mm_lib.storemode.r u64 
    push           mm_lib.storemode.r u64 
    push           24         
    pushptroff                u64 1 0
    push           0          u64 
    jumpne         #13286     u64 
    push           mm_lib.storemode.owner u64 
    push           mm_lib.storemode.r u64 
    push           0          
    popptroff                 u64 1 0
    push           mm_lib.storemode.m i64 
    push           mm_lib.storemode.pmode u64 
    popptr                    i32 
    push           mm_lib.storemode.pmode u64 
    push           mm_lib.storemode.r u64 
    push           24         
    popptroff                 u64 1 0
    push           mm_lib.storemode.r u64 
    push           24         
    pushptroff                u64 1 0
    push           0          u64 
    jumpne         #13287     u64 
    setargs                   1 0
    push           "PMODE=NIL" u64 
    callproc       &mm_support.serror 
#13287: 
    push           mm_lib.storemode.m i64 
    setret                    i64 
    jump           #13285     
#13286: 
    setargs                   2 0
    push           mm_lib.storemode.r u64 
    push           16         
    pushptroff                u64 1 0
    push           mm_lib.storemode.r u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &mm_lib.newtypename i64 
    pop            mm_lib.storemode.m i64 
    push           &mm_decls.typenames 
    push           mm_lib.storemode.m i64 
    neg                       i64 
    addrefoff                 block:32 32 0
    pop            mm_lib.storemode.r u64 
    push           mm_lib.storemode.owner u64 
    push           mm_lib.storemode.r u64 
    push           0          
    popptroff                 u64 1 0
    push           mm_lib.storemode.m i64 
    push           mm_lib.storemode.pmode u64 
    popptr                    i32 
    push           mm_lib.storemode.pmode u64 
    push           mm_lib.storemode.r u64 
    push           24         
    popptroff                 u64 1 0
    push           mm_lib.storemode.m i64 
    setret                    i64 
    jump           #13285     
#13285: 
    retfn                     i64 
End


Proc mm_lib.gettypebase: i64
    param          mm_lib.gettypebase.m i64 
    procentry                 
    startmult                 
    push           &mm_decls.ttbasetype 
    push           mm_lib.gettypebase.m i64 
    pushptroff                i32 4 0
    switch         #13289     6 23
    opnd           #13290     
#13289: 
    switchlabel    #13291     
    switchlabel    #13290     
    switchlabel    #13290     
    switchlabel    #13290     
    switchlabel    #13290     
    switchlabel    #13290     
    switchlabel    #13290     
    switchlabel    #13290     
    switchlabel    #13290     
    switchlabel    #13290     
    switchlabel    #13292     
    switchlabel    #13292     
    switchlabel    #13293     
    switchlabel    #13293     
    switchlabel    #13293     
    switchlabel    #13294     
    switchlabel    #13294     
    switchlabel    #13294     
    endswitch                 
#13293: 
    push           4          i64 
    resetmult                 
    jump           #13295     
#13294: 
    push           4          i64 
    resetmult                 
    jump           #13295     
#13291: 
    push           7          i64 
    resetmult                 
    jump           #13295     
#13292: 
    push           1          i64 
    resetmult                 
    jump           #13295     
#13290: 
    push           mm_lib.gettypebase.m i64 
    endmult                   
#13295: 
    setret                    i64 
    jump           #13296     
#13296: 
    retfn                     i64 
End


Proc mm_lib.writegsfile:
    param          mm_lib.writegsfile.filename u64 
    param          mm_lib.writegsfile.d u64 
    local          mm_lib.writegsfile.f u64 
    procentry                 
    setargs                   2 0
    push           "w"        u64 
    push           mm_lib.writegsfile.filename u64 
    callfn         &fopen     u64 
    pop            mm_lib.writegsfile.f u64 
    setargs                   2 0
    push           mm_lib.writegsfile.f u64 
    push           mm_lib.writegsfile.d u64 
    callproc       &mlibp.gs_println 
    setargs                   1 0
    push           mm_lib.writegsfile.f u64 
    callproc       &fclose    
#13298: 
    retproc                   
End


Proc mm_lib.addtolog:
    param          mm_lib.addtolog.filename u64 
    param          mm_lib.addtolog.logdest u64 
    local          mm_lib.addtolog.f u64 
    local          mm_lib.addtolog.c i64 
    procentry                 
    setargs                   2 0
    push           "rb"       u64 
    push           mm_lib.addtolog.filename u64 
    callfn         &fopen     u64 
    pop            mm_lib.addtolog.f u64 
    push           mm_lib.addtolog.f u64 
    push           0          u64 
    jumpne         #13300     u64 
    jump           #13301     
#13300: 
#13302: 
    setargs                   1 0
    push           mm_lib.addtolog.f u64 
    callfn         &fgetc     i32 
    pop            mm_lib.addtolog.c i64 
    push           mm_lib.addtolog.c i64 
    push           -1         i64 
    jumpne         #13303     i64 
    jump           #13304     
#13303: 
    setargs                   2 0
    push           mm_lib.addtolog.logdest u64 
    push           mm_lib.addtolog.c i64 
    callproc       &fputc     
    jump           #13302     
#13304: 
    setargs                   1 0
    push           mm_lib.addtolog.f u64 
    callproc       &fclose    
#13301: 
    retproc                   
End


Proc mm_lib.getprocretmodes: u64
    param          mm_lib.getprocretmodes.p u64 
    local          mm_lib.getprocretmodes.d u64 
    local          mm_lib.getprocretmodes.a u64 
    procentry                 
    push           mm_lib.getprocretmodes.p u64 
    pushptr                   u8 
    push           31         i64 
    jumpeq         #13306     i64 
    setargs                   2 0
    push           0          u64 
    push           "multass/need multfn" u64 
    callproc       &mm_support.txerror 
#13306: 
    push           mm_lib.getprocretmodes.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_lib.getprocretmodes.a u64 
    startmult                 
    push           mm_lib.getprocretmodes.a u64 
    pushptr                   u8 
    push           3          i64 
    casejumpeq     #13307     i64 0
    popstack                  i64 
    jump           #13308     
#13307: 
    push           mm_lib.getprocretmodes.a u64 
    push           16         
    pushptroff                u64 1 0
    resetmult                 
    jump           #13309     
#13308: 
    push           &mm_decls.ttnamedef 
    push           &mm_decls.tttarget 
    push           mm_lib.getprocretmodes.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    pushptroff                u64 8 0
    endmult                   
#13309: 
    setret                    u64 
    jump           #13310     
#13310: 
    retfn                     u64 
End


Proc mm_lib.getmemmode: i64
    param          mm_lib.getmemmode.p u64 
    procentry                 
    push           mm_lib.getmemmode.p u64 
    push           52         
    pushptroff                i32 1 0
    jumpfalse      #13312     i64 
    push           mm_lib.getmemmode.p u64 
    push           52         
    pushptroff                i32 1 0
    setret                    i64 
    jump           #13313     
#13312: 
    push           mm_lib.getmemmode.p u64 
    push           48         
    pushptroff                i32 1 0
    setret                    i64 
    jump           #13313     
#13313: 
    retfn                     i64 
End


Proc mm_lib.isnum: i64
    param          mm_lib.isnum.m i64 
    procentry                 
    push           mm_lib.isnum.m i64 
    push           1          i64 
    jumplt         #13315     i64 
    push           mm_lib.isnum.m i64 
    push           7          i64 
    jumpgt         #13315     i64 
    push           1          i64 
    setret                    i64 
    jump           #13316     
#13315: 
    push           0          i64 
    setret                    i64 
    jump           #13316     
#13316: 
    retfn                     i64 
End


Proc mm_lib.isboolunit: i64
    param          mm_lib.isboolunit.p u64 
    procentry                 
    startmult                 
    push           mm_lib.isboolunit.p u64 
    pushptr                   u8 
    push           34         i64 
    casejumpeq     #13318     i64 0
    push           14         i64 
    casejumpeq     #13318     i64 0
    push           15         i64 
    casejumpeq     #13318     i64 0
    push           17         i64 
    casejumpeq     #13318     i64 0
    push           18         i64 
    casejumpeq     #13318     i64 0
    push           42         i64 
    casejumpeq     #13318     i64 0
    push           43         i64 
    casejumpeq     #13318     i64 0
    push           35         i64 
    casejumpeq     #13318     i64 0
    popstack                  i64 
    jump           #13319     
#13318: 
    push           1          i64 
    resetmult                 
    jump           #13320     
#13319: 
    push           0          i64 
    endmult                   
#13320: 
    setret                    i64 
    jump           #13321     
#13321: 
    retfn                     i64 
End


Proc mm_lib.addcclib:
    param          mm_lib.addcclib.name u64 
    local          mm_lib.addcclib.i i64 
    procentry                 
#13323: 
    push           1          i64 
    pop            mm_lib.addcclib.i i64 
    push           mm_decls.ncclibs i64 
    push           1          i64 
    jumplt         #13324     i64 
#13325: 
    setargs                   2 0
    push           &mm_decls.cclibtable 
    push           mm_lib.addcclib.i i64 
    pushptroff                u64 8 -8
    push           mm_lib.addcclib.name u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #13326     i64 
    jump           #13327     
#13326: 
#13328: 
    forup          #13325     i64 1
    opnd           mm_lib.addcclib.i 
    opnd           mm_decls.ncclibs 
#13324: 
    push           mm_decls.ncclibs i64 
    push           10         i64 
    jumplt         #13329     i64 
    setargs                   1 0
    push           "Too many cclibs" u64 
    callproc       &mm_support.serror 
#13329: 
    setargs                   1 0
    push           mm_lib.addcclib.name u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &mm_decls.cclibtable 
    push           &mm_decls.ncclibs 
    incrload                  i64 1
    popptroff                 u64 8 -8
#13327: 
    retproc                   
End


Proc mm_lib.getpclmode: i64
    param          mm_lib.getpclmode.t i64 
    local          mm_lib.getpclmode.u i64 
    procentry                 
    push           &mm_tables.stdtopcl 
    push           &mm_decls.ttbasetype 
    push           mm_lib.getpclmode.t i64 
    pushptroff                i32 4 0
    pushptroff                u8 1 0
    pop            mm_lib.getpclmode.u i64 
    push           mm_lib.getpclmode.u i64 
    setret                    i64 
    jump           #13331     
#13331: 
    retfn                     i64 
End


Proc mm_lib.domcl_assem:
    param          mm_lib.domcl_assem.pcode u64 
    procentry                 
    push           mm_lib.domcl_assem.pcode u64 
    jumpfalse      #13333     u64 
    push           mm_lib.domcl_assem.pcode u64 
    pushptr                   u8 
    push           8          i64 
    jumpeq         #13334     i64 
#13333: 
    jump           #13335     
#13334: 
    push           1          i64 
    pop            pci_mcl.inf_assem i64 
    setargs                   3 0
    setargs                   1 0
    push           mm_lib.domcl_assem.pcode u64 
    push           24         
    pushptroff                u64 1 0
    callfn         &mm_lib.genasmopnd u64 
    setargs                   1 0
    push           mm_lib.domcl_assem.pcode u64 
    push           16         
    pushptroff                u64 1 0
    callfn         &mm_lib.genasmopnd u64 
    push           mm_lib.domcl_assem.pcode u64 
    push           40         
    pushptroff                i16 1 0
    callproc       &pc_libmcl.genmc 
    push           mm_lib.domcl_assem.pcode u64 
    push           45         
    pushptroff                u8 1 0
    push           pci_mcl.mccodex u64 
    push           25         
    popptroff                 u8 1 0
    push           mm_lib.domcl_assem.pcode u64 
    push           40         
    pushptroff                i16 1 0
    push           90         i64 
    casejumpeq     #13336     i64 0
    push           91         i64 
    casejumpeq     #13336     i64 0
    popstack                  i64 
    jump           #13337     
#13336: 
    push           mm_lib.domcl_assem.pcode u64 
    push           32         
    pushptroff                u64 1 0
    push           0          u64 
    jumpeq         #13338     u64 
    push           mm_lib.domcl_assem.pcode u64 
    push           32         
    pushptroff                u64 1 0
    pushptr                   u8 
    push           1          i64 
    jumpeq         #13339     i64 
#13338: 
    setargs                   2 0
    push           0          u64 
    push           "pcmpistr/no imm" u64 
    callproc       &mm_support.gerror 
#13339: 
    push           mm_lib.domcl_assem.pcode u64 
    push           32         
    pushptroff                u64 1 0
    push           16         
    pushptroff                i64 1 0
    push           pci_mcl.mccodex u64 
    push           26         
    popptroff                 u8 1 0
    jump           #13340     
#13337: 
#13340: 
#13335: 
    retproc                   
End


Proc mm_lib.genasmopnd: u64
    param          mm_lib.genasmopnd.p u64 
    local          mm_lib.genasmopnd.ax u64 
    local          mm_lib.genasmopnd.d u64 
    local          mm_lib.genasmopnd.offset i64 
    local          mm_lib.genasmopnd.labno i64 
    local          mm_lib.genasmopnd.a u64 
    local          mm_lib.genasmopnd.x u64 
    local          mm_lib.genasmopnd.y u64 
    local          mm_lib.genasmopnd.e u64 
    procentry                 
    push           mm_lib.genasmopnd.p u64 
    push           0          u64 
    jumpne         #13342     u64 
    push           0          u64 
    setret                    u64 
    jump           #13343     
#13342: 
    push           mm_lib.genasmopnd.p u64 
    pushptr                   u8 
    push           10         i64 
    casejumpeq     #13344     i64 0
    push           1          i64 
    casejumpeq     #13345     i64 0
    push           12         i64 
    casejumpeq     #13346     i64 0
    push           3          i64 
    casejumpeq     #13347     i64 0
    push           11         i64 
    casejumpeq     #13348     i64 0
    push           36         i64 
    casejumpeq     #13349     i64 0
    popstack                  i64 
    jump           #13350     
#13344: 
    setargs                   2 0
    push           mm_lib.genasmopnd.p u64 
    push           44         
    pushptroff                u8 1 0
    push           mm_lib.genasmopnd.p u64 
    push           40         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    pop            mm_lib.genasmopnd.ax u64 
    jump           #13351     
#13345: 
    setargs                   2 0
    push           8          i64 
    push           mm_lib.genasmopnd.p u64 
    push           16         
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenint u64 
    pop            mm_lib.genasmopnd.ax u64 
    jump           #13351     
#13346: 
    push           mm_lib.genasmopnd.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_lib.genasmopnd.a u64 
    push           0          u64 
    pop            mm_lib.genasmopnd.d u64 
    push           0          i64 
    store          mm_lib.genasmopnd.labno i64 
    pop            mm_lib.genasmopnd.offset i64 
    push           mm_lib.genasmopnd.a u64 
    jumpfalse      #13352     u64 
    push           mm_lib.genasmopnd.a u64 
    pushptr                   u8 
    push           1          i64 
    casejumpeq     #13353     i64 0
    push           3          i64 
    casejumpeq     #13354     i64 0
    push           36         i64 
    casejumpeq     #13355     i64 0
    push           37         i64 
    casejumpeq     #13356     i64 0
    push           98         i64 
    casejumpeq     #13357     i64 0
    popstack                  i64 
    jump           #13358     
#13353: 
    push           mm_lib.genasmopnd.a u64 
    push           16         
    pushptroff                i64 1 0
    pop            mm_lib.genasmopnd.offset i64 
    jump           #13359     
#13354: 
    push           mm_lib.genasmopnd.a u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_lib.genasmopnd.d u64 
    push           mm_lib.genasmopnd.d u64 
    push           78         
    pushptroff                u8 1 0
    push           17         i64 
    jumpne         #13360     i64 
    setargs                   1 0
    push           mm_lib.genasmopnd.d u64 
    callfn         &mm_lib.fixasmlabel i64 
    pop            mm_lib.genasmopnd.labno i64 
    push           0          u64 
    pop            mm_lib.genasmopnd.d u64 
#13360: 
    jump           #13359     
#13355: 
    push           mm_lib.genasmopnd.a u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_lib.genasmopnd.x u64 
    push           mm_lib.genasmopnd.a u64 
    push           24         
    pushptroff                u64 1 0
    pop            mm_lib.genasmopnd.y u64 
    push           mm_lib.genasmopnd.x u64 
    pushptr                   u8 
    push           3          i64 
    jumpne         #13361     i64 
    push           mm_lib.genasmopnd.y u64 
    pushptr                   u8 
    push           1          i64 
    jumpne         #13361     i64 
    push           mm_lib.genasmopnd.x u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_lib.genasmopnd.d u64 
    push           mm_lib.genasmopnd.d u64 
    push           78         
    pushptroff                u8 1 0
    push           17         i64 
    jumpne         #13362     i64 
    setargs                   1 0
    push           mm_lib.genasmopnd.d u64 
    callfn         &mm_lib.fixasmlabel i64 
    pop            mm_lib.genasmopnd.labno i64 
    push           0          u64 
    pop            mm_lib.genasmopnd.d u64 
#13362: 
    jump           #13363     
#13361: 
    jump           #13364     
#13363: 
    startmult                 
    push           mm_lib.genasmopnd.a u64 
    push           60         
    pushptroff                u8 1 0
    push           102        i64 
    setjumpeq      #13365     i64 
    push           126        i64 
    setjumpne      #13366     i64 
#13365: 
    push           mm_lib.genasmopnd.y u64 
    push           16         
    pushptroff                i64 1 0
    resetmult                 
    jump           #13367     
#13366: 
    push           mm_lib.genasmopnd.y u64 
    push           16         
    pushptroff                i64 1 0
    neg                       i64 
    endmult                   
#13367: 
    pop            mm_lib.genasmopnd.offset i64 
    jump           #13359     
#13356: 
    push           mm_lib.genasmopnd.a u64 
    push           60         
    pushptroff                u8 1 0
    push           129        i64 
    jumpeq         #13368     i64 
    setargs                   2 0
    push           ""         u64 
    push           "assume/unary" u64 
    callproc       &pc_libmcl.merror 
#13368: 
    push           mm_lib.genasmopnd.a u64 
    push           16         
    pushptroff                u64 1 0
    pushptr                   u8 
    push           1          i64 
    jumpeq         #13369     i64 
    setargs                   2 0
    push           0          u64 
    push           "-name"    u64 
    callproc       &mm_support.gerror 
#13369: 
    push           mm_lib.genasmopnd.a u64 
    push           16         
    pushptroff                u64 1 0
    push           16         
    pushptroff                i64 1 0
    neg                       i64 
    pop            mm_lib.genasmopnd.offset i64 
    jump           #13359     
#13357: 
    setargs                   2 0
    push           ""         u64 
    push           "ASSEM/SYSFN?" u64 
    callproc       &pc_libmcl.merror 
    jump           #13359     
#13358: 
!error::
#13364: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &mm_tables.jtagnames 
    push           mm_lib.genasmopnd.a u64 
    pushptr                   u8 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           0          u64 
    push           "Can't do memexpr" u64 
    callproc       &mm_support.gerror 
#13359: 
#13352: 
    setargs                   7 0
    setargs                   1 0
    push           mm_lib.genasmopnd.d u64 
    callfn         &mm_genpcl.getpst u64 
    push           mm_lib.genasmopnd.labno i64 
    push           &mm_decls.ttsize 
    push           mm_lib.genasmopnd.p u64 
    push           43         
    pushptroff                u8 1 0
    pushptroff                i32 4 0
    push           mm_lib.genasmopnd.offset i64 
    push           mm_lib.genasmopnd.p u64 
    push           42         
    pushptroff                u8 1 0
    push           mm_lib.genasmopnd.p u64 
    push           41         
    pushptroff                u8 1 0
    push           mm_lib.genasmopnd.p u64 
    push           40         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenindex u64 
    pop            mm_lib.genasmopnd.ax u64 
    jump           #13351     
#13347: 
    push           mm_lib.genasmopnd.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_lib.genasmopnd.d u64 
    push           mm_lib.genasmopnd.d u64 
    push           78         
    pushptroff                u8 1 0
    push           17         i64 
    jumpne         #13370     i64 
    setargs                   1 0
    push           mm_lib.genasmopnd.d u64 
    callfn         &mm_lib.fixasmlabel i64 
    pop            mm_lib.genasmopnd.labno i64 
    setargs                   1 0
    push           mm_lib.genasmopnd.labno i64 
    callfn         &pc_libmcl.mgenlabel u64 
    pop            mm_lib.genasmopnd.ax u64 
    jump           #13371     
#13370: 
    setargs                   1 0
    setargs                   1 0
    push           mm_lib.genasmopnd.d u64 
    callfn         &mm_genpcl.getpst u64 
    callfn         &pc_libmcl.mgenmemaddr u64 
    pop            mm_lib.genasmopnd.ax u64 
#13371: 
    jump           #13351     
#13348: 
    setargs                   2 0
    push           8          i64 
    push           mm_lib.genasmopnd.p u64 
    push           40         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenxreg u64 
    pop            mm_lib.genasmopnd.ax u64 
    jump           #13351     
#13349: 
    push           mm_lib.genasmopnd.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_lib.genasmopnd.x u64 
    push           mm_lib.genasmopnd.p u64 
    push           24         
    pushptroff                u64 1 0
    pop            mm_lib.genasmopnd.y u64 
    push           mm_lib.genasmopnd.x u64 
    pushptr                   u8 
    push           3          i64 
    jumpne         #13372     i64 
    push           mm_lib.genasmopnd.y u64 
    pushptr                   u8 
    push           1          i64 
    jumpne         #13372     i64 
    push           mm_lib.genasmopnd.x u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_lib.genasmopnd.d u64 
    startmult                 
    push           mm_lib.genasmopnd.p u64 
    push           60         
    pushptroff                u8 1 0
    push           102        i64 
    setjumpeq      #13373     i64 
    push           126        i64 
    setjumpne      #13374     i64 
#13373: 
    push           mm_lib.genasmopnd.y u64 
    push           16         
    pushptroff                i64 1 0
    resetmult                 
    jump           #13375     
#13374: 
    push           mm_lib.genasmopnd.y u64 
    push           16         
    pushptroff                i64 1 0
    neg                       i64 
    endmult                   
#13375: 
    pop            mm_lib.genasmopnd.offset i64 
    push           mm_lib.genasmopnd.d u64 
    push           78         
    pushptroff                u8 1 0
    push           17         i64 
    jumpne         #13376     i64 
    setargs                   1 0
    push           mm_lib.genasmopnd.d u64 
    callfn         &mm_lib.fixasmlabel i64 
    pop            mm_lib.genasmopnd.labno i64 
    setargs                   1 0
    push           mm_lib.genasmopnd.labno i64 
    callfn         &pc_libmcl.mgenlabel u64 
    pop            mm_lib.genasmopnd.ax u64 
    jump           #13377     
#13376: 
    setargs                   1 0
    setargs                   1 0
    push           mm_lib.genasmopnd.d u64 
    callfn         &mm_genpcl.getpst u64 
    callfn         &pc_libmcl.mgenmemaddr u64 
    pop            mm_lib.genasmopnd.ax u64 
#13377: 
    push           mm_lib.genasmopnd.offset i64 
    push           mm_lib.genasmopnd.ax u64 
    push           14         
    popptroff                 i32 1 0
    jump           #13378     
#13372: 
    setargs                   2 0
    push           0          u64 
    push           "ax:imm/add" u64 
    callproc       &mm_support.gerror 
#13378: 
    jump           #13351     
#13350: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &mm_tables.jtagnames 
    push           mm_lib.genasmopnd.p u64 
    pushptr                   u8 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           0          u64 
    push           "genasmopnd?" u64 
    callproc       &mm_support.gerror 
#13351: 
    push           mm_lib.genasmopnd.ax u64 
    setret                    u64 
    jump           #13343     
#13343: 
    retfn                     u64 
End


Proc mm_lib.fixasmlabel: i64
    param          mm_lib.fixasmlabel.d u64 
    procentry                 
    push           mm_lib.fixasmlabel.d u64 
    push           80         
    pushptroff                i32 1 0
    push           0          i64 
    jumpne         #13380     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "D.NAME="  u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_lib.fixasmlabel.d u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_lib.fixasmlabel.d u64 
    push           8          
    pushptroff                u64 1 0
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           0          u64 
    push           "FIXASMLABEL: zero" u64 
    callproc       &mm_support.gerror 
    jump           #13381     
#13380: 
    push           mm_lib.fixasmlabel.d u64 
    push           80         
    pushptroff                i32 1 0
    push           0          i64 
    jumple         #13382     i64 
    push           &pc_libpcl.labelmap 
    push           mm_lib.fixasmlabel.d u64 
    push           80         
    pushptroff                i32 1 0
    pushptroff                i32 4 -4
    neg                       i64 
    push           mm_lib.fixasmlabel.d u64 
    push           80         
    popptroff                 i32 1 0
#13382: 
#13381: 
    push           mm_lib.fixasmlabel.d u64 
    push           80         
    pushptroff                i32 1 0
    neg                       i64 
    setret                    i64 
    jump           #13383     
#13383: 
    retfn                     i64 
End


Proc mm_diags.printoverloads:
    param          mm_diags.printoverloads.f u64 
    local          mm_diags.printoverloads.p u64 
    local          mm_diags.printoverloads.av_1 i64 
    local          mm_diags.printoverloads.i i64 
    procentry                 
    setargs                   1 0
    push           mm_diags.printoverloads.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "OVERLOADS" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13385: 
    push           1          i64 
    pop            mm_diags.printoverloads.i i64 
    push           143        i64 
    pop            mm_diags.printoverloads.av_1 i64 
    push           mm_diags.printoverloads.av_1 i64 
    push           1          i64 
    jumplt         #13386     i64 
#13387: 
    push           &mm_decls.overloadtable 
    push           mm_diags.printoverloads.i i64 
    pushptroff                u64 8 0
    pop            mm_diags.printoverloads.p u64 
    push           mm_diags.printoverloads.p u64 
    jumpfalse      #13388     u64 
    jump           #13389     
#13390: 
    push           mm_diags.printoverloads.p u64 
    push           4          
    pushptroff                i32 1 0
    jumpfalse      #13391     i64 
    setargs                   1 0
    push           mm_diags.printoverloads.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "operator (#)(#,#)#" u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           &mm_tables.jtagnames 
    push           mm_diags.printoverloads.i i64 
    pushptroff                u64 8 0
    push           2          i64 
    addrefoff                 u64 1 0
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    setargs                   2 0
    push           1          i64 
    push           mm_diags.printoverloads.p u64 
    pushptr                   i32 
    callfn         &mm_lib.strmode u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    setargs                   2 0
    push           1          i64 
    push           mm_diags.printoverloads.p u64 
    push           4          
    pushptroff                i32 1 0
    callfn         &mm_lib.strmode u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    setargs                   2 0
    push           1          i64 
    push           mm_diags.printoverloads.p u64 
    push           8          
    pushptroff                i32 1 0
    callfn         &mm_lib.strmode u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13392     
#13391: 
    setargs                   1 0
    push           mm_diags.printoverloads.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "operator (#)(#)#" u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           &mm_tables.jtagnames 
    push           mm_diags.printoverloads.i i64 
    pushptroff                u64 8 0
    push           2          i64 
    addrefoff                 u64 1 0
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    setargs                   2 0
    push           1          i64 
    push           mm_diags.printoverloads.p u64 
    pushptr                   i32 
    callfn         &mm_lib.strmode u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    setargs                   2 0
    push           1          i64 
    push           mm_diags.printoverloads.p u64 
    push           8          
    pushptroff                i32 1 0
    callfn         &mm_lib.strmode u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13392: 
    push           mm_diags.printoverloads.p u64 
    push           16         
    pushptroff                u64 1 0
    jumpfalse      #13393     u64 
    setargs                   1 0
    push           mm_diags.printoverloads.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "="        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_diags.printoverloads.p u64 
    push           16         
    pushptroff                u64 1 0
    callproc       &msysp.m$print_ptr_nf 
    setargs                   1 0
    setargs                   1 0
    push           mm_diags.printoverloads.p u64 
    push           16         
    pushptroff                u64 1 0
    callfn         &mm_lib.strexpr u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13393: 
    setargs                   1 0
    push           mm_diags.printoverloads.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           mm_diags.printoverloads.p u64 
    push           24         
    pushptroff                u64 1 0
    pop            mm_diags.printoverloads.p u64 
#13389: 
    push           mm_diags.printoverloads.p u64 
    jumptrue       #13390     u64 
#13394: 
    setargs                   1 0
    push           mm_diags.printoverloads.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13388: 
#13395: 
    forup          #13387     i64 1
    opnd           mm_diags.printoverloads.i 
    opnd           mm_diags.printoverloads.av_1 
#13386: 
#13396: 
    retproc                   
End


Proc mm_diags.printst:
    param          mm_diags.printst.f u64 
    param          mm_diags.printst.p u64 
    param          mm_diags.printst.level i64 
    local          mm_diags.printst.q u64 
    procentry                 
    push           mm_diags.printst.p u64 
    push           77         
    pushptroff                u8 1 0
    push           79         i64 
    jumpeq         #13398     i64 
    setargs                   1 0
    push           "PRINTST not name" u64 
    callproc       &mm_support.mcerror 
#13398: 
    setargs                   3 0
    push           mm_diags.printst.level i64 
    push           mm_diags.printst.p u64 
    push           mm_diags.printst.f u64 
    callproc       &mm_diags.printstrec 
    push           mm_diags.printst.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_diags.printst.q u64 
    jump           #13399     
#13400: 
    setargs                   3 0
    push           mm_diags.printst.level i64 
    push           1          i64 
    add                       i64 
    push           mm_diags.printst.q u64 
    push           mm_diags.printst.f u64 
    callproc       &mm_diags.printst 
    push           mm_diags.printst.q u64 
    push           32         
    pushptroff                u64 1 0
    pop            mm_diags.printst.q u64 
#13399: 
    push           mm_diags.printst.q u64 
    push           0          u64 
    jumpne         #13400     u64 
#13401: 
#13402: 
    retproc                   
End


Proc mm_diags.printstrec:
    param          mm_diags.printstrec.f u64 
    param          mm_diags.printstrec.p u64 
    param          mm_diags.printstrec.level i64 
    local          mm_diags.printstrec.dd block:128 
    local          mm_diags.printstrec.q u64 
    local          mm_diags.printstrec.v block:16 
    local          mm_diags.printstrec.d u64 
    local          mm_diags.printstrec.col i64 
    local          mm_diags.printstrec.offset i64 
    local          mm_diags.printstrec.n i64 
    local          mm_diags.printstrec.str block:256 
    local          mm_diags.printstrec.av_1 i64 
    procentry                 
    push           &mm_diags.printstrec.v 
    pop            mm_diags.printstrec.d u64 
    setargs                   1 0
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_init 
    push           0          i64 
    pop            mm_diags.printstrec.offset i64 
#13404: 
    push           mm_diags.printstrec.level i64 
    pop            mm_diags.printstrec.av_1 i64 
    push           mm_diags.printstrec.av_1 i64 
    push           0          i64 
    jumple         #13405     i64 
#13406: 
    setargs                   2 0
    push           "    "     u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    push           &mm_diags.printstrec.offset 
    push           4          i64 
    addto                     i64 
#13407: 
    to             #13406     
    opnd           mm_diags.printstrec.av_1 
#13405: 
    setargs                   2 0
    push           ":"        u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    setargs                   4 0
    push           45         i64 
    push           28         i64 
    push           mm_diags.printstrec.offset i64 
    sub                       i64 
    push           mm_diags.printstrec.p u64 
    pushptr                   u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_leftstr 
    setargs                   4 0
    push           46         i64 
    push           12         i64 
    push           &mm_tables.namenames 
    push           mm_diags.printstrec.p u64 
    push           78         
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_leftstr 
    setargs                   1 0
    push           mm_diags.printstrec.d u64 
    callfn         &mlibp.gs_getcol i64 
    pop            mm_diags.printstrec.col i64 
    push           mm_diags.printstrec.p u64 
    pushptr                   block:128 
    pop            mm_diags.printstrec.dd block:128 
    setargs                   2 0
    push           "["        u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    push           mm_diags.printstrec.p u64 
    push           92         
    pushptroff                u16 1 0
    push           14         i64 
    dotindex                  i64 
    jumpfalse      #13408     u64 
    setargs                   2 0
    push           "Imp "     u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    jump           #13409     
#13408: 
    setargs                   2 0
    startmult                 
    push           mm_diags.printstrec.p u64 
    push           92         
    pushptroff                u16 1 0
    push           0          i64 
    push           1          i64 
    dotslice                  i64 
    switch         #13410     1 3
    opnd           #13411     
#13410: 
    switchlabel    #13412     
    switchlabel    #13413     
    switchlabel    #13414     
    endswitch                 
#13412: 
    push           "Prog "    u64 
    resetmult                 
    jump           #13415     
#13413: 
    push           "Exp "     u64 
    resetmult                 
    jump           #13415     
#13414: 
    push           "ExpQ "    u64 
    resetmult                 
    jump           #13415     
#13411: 
    push           "Loc "     u64 
    endmult                   
#13415: 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
#13409: 
    push           &mm_diags.printstrec.dd 
    push           92         
    pushptroff                u16 1 0
    push           2          i64 
    dotindex                  i64 
    jumpfalse      #13416     u64 
    setargs                   2 0
    push           "Stat"     u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
#13416: 
    push           &mm_diags.printstrec.dd 
    push           115        
    pushptroff                u8 1 0
    jumpfalse      #13417     i64 
    setargs                   2 0
    push           &mm_tables.fflangnames 
    push           &mm_diags.printstrec.dd 
    push           115        
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_strsp 
#13417: 
    push           &mm_diags.printstrec.dd 
    push           78         
    pushptroff                u8 1 0
    push           13         i64 
    jumpne         #13418     i64 
    push           &mm_diags.printstrec.dd 
    push           104        
    pushptroff                u8 1 0
    jumpfalse      #13418     i64 
    setargs                   2 0
    push           &mm_tables.parammodenames 
    push           &mm_diags.printstrec.dd 
    push           104        
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
#13418: 
    push           &mm_diags.printstrec.dd 
    push           117        
    pushptroff                u8 1 0
    jumpfalse      #13419     i64 
    setargs                   2 0
    push           "@@"       u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           &mm_diags.printstrec.dd 
    push           117        
    pushptroff                u8 1 0
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_strint 
    setargs                   2 0
    push           " maxalign:" u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           &mm_diags.printstrec.dd 
    push           122        
    pushptroff                i16 1 0
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_strint 
    setargs                   2 0
    push           " "        u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
#13419: 
    push           &mm_diags.printstrec.dd 
    push           105        
    pushptroff                u8 1 0
    jumpfalse      #13420     i64 
    setargs                   2 0
    push           "Opt "     u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
#13420: 
    push           &mm_diags.printstrec.dd 
    push           117        
    pushptroff                u8 1 0
    jumpfalse      #13421     i64 
    setargs                   2 0
    push           "Var:"     u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           &mm_diags.printstrec.dd 
    push           117        
    pushptroff                u8 1 0
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_strint 
    setargs                   2 0
    push           " "        u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
#13421: 
    push           &mm_diags.printstrec.dd 
    push           94         
    pushptroff                u8 1 0
    jumpfalse      #13422     i64 
    setargs                   1 0
    push           &mm_diags.printstrec.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "Modno#"   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           &mm_diags.printstrec.dd 
    push           94         
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           &mm_diags.printstrec.str 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
#13422: 
    push           &mm_diags.printstrec.dd 
    push           92         
    pushptroff                u16 1 0
    push           3          i64 
    dotindex                  i64 
    jumpfalse      #13423     u64 
    setargs                   2 0
    push           "U "       u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
#13423: 
    push           &mm_diags.printstrec.dd 
    push           118        
    pushptroff                u8 1 0
    jumpfalse      #13424     i64 
    setargs                   2 0
    push           "Threaded " u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
#13424: 
    setargs                   2 0
    push           "]"        u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    setargs                   3 0
    push           61         i64 
    push           mm_diags.printstrec.col i64 
    push           10         i64 
    add                       i64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_padto 
    push           mm_diags.printstrec.p u64 
    push           8          
    pushptroff                u64 1 0
    jumpfalse      #13425     u64 
    setargs                   1 0
    push           &mm_diags.printstrec.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "(#)"      u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           mm_diags.printstrec.p u64 
    push           8          
    pushptroff                u64 1 0
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   4 0
    push           45         i64 
    push           18         i64 
    push           &mm_diags.printstrec.str 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_leftstr 
    jump           #13426     
#13425: 
    setargs                   4 0
    push           45         i64 
    push           18         i64 
    push           "()"       u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_leftstr 
#13426: 
    push           mm_diags.printstrec.p u64 
    push           72         
    pushptroff                i32 1 0
    push           0          i64 
    casejumpeq     #13427     i64 0
    popstack                  i64 
    jump           #13428     
#13427: 
    setargs                   2 0
    push           "Void "    u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    jump           #13429     
#13428: 
    setargs                   2 0
    push           mm_diags.printstrec.p u64 
    push           72         
    pushptroff                i32 1 0
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_strint 
    setargs                   2 0
    push           ":"        u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    setargs                   2 0
    push           1          i64 
    push           mm_diags.printstrec.p u64 
    push           72         
    pushptroff                i32 1 0
    callfn         &mm_lib.strmode u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           " "        u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
#13429: 
    push           mm_diags.printstrec.p u64 
    push           78         
    pushptroff                u8 1 0
    push           14         i64 
    casejumpeq     #13430     i64 0
    push           13         i64 
    casejumpeq     #13430     i64 0
    push           15         i64 
    casejumpeq     #13431     i64 0
    push           5          i64 
    casejumpeq     #13432     i64 0
    push           8          i64 
    casejumpeq     #13432     i64 0
    push           6          i64 
    casejumpeq     #13433     i64 0
    push           11         i64 
    casejumpeq     #13434     i64 0
    push           12         i64 
    casejumpeq     #13435     i64 0
    push           10         i64 
    casejumpeq     #13436     i64 0
    push           4          i64 
    casejumpeq     #13437     i64 0
    push           16         i64 
    casejumpeq     #13438     i64 0
    push           3          i64 
    casejumpeq     #13439     i64 0
    popstack                  i64 
    jump           #13440     
#13430: 
    setargs                   2 0
    push           " Offset:" u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           mm_diags.printstrec.p u64 
    push           84         
    pushptroff                i32 1 0
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_strint 
    push           mm_diags.printstrec.p u64 
    push           72         
    pushptroff                i32 1 0
    push           30         i64 
    jumpne         #13441     i64 
    setargs                   2 0
    push           " Bitoffset:" u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           mm_diags.printstrec.p u64 
    push           118        
    pushptroff                u8 1 0
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_strint 
    setargs                   2 0
    push           ":"        u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           mm_diags.printstrec.p u64 
    push           116        
    pushptroff                u8 1 0
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_strint 
#13441: 
    setargs                   1 0
    push           &mm_diags.printstrec.str 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    push           "v"        u64 
    push           mm_diags.printstrec.p u64 
    push           111        
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64 
    setargs                   2 0
    push           ".*"       u64 
    push           mm_diags.printstrec.p u64 
    push           104        
    addrefoff                 u64 1 0
    callproc       &msysp.m$print_str 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           " UFLAGS:" u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           &mm_diags.printstrec.str 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           "-"        u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           mm_diags.printstrec.p u64 
    push           111        
    pushptroff                u8 1 0
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_strint 
    push           mm_diags.printstrec.p u64 
    push           64         
    pushptroff                u64 1 0
    jumpfalse      #13442     u64 
    setargs                   2 0
    push           "/:="      u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    setargs                   1 0
    push           mm_diags.printstrec.p u64 
    push           64         
    pushptroff                u64 1 0
    callfn         &mm_lib.strexpr u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_strvar 
#13442: 
    push           mm_diags.printstrec.p u64 
    push           78         
    pushptroff                u8 1 0
    push           13         i64 
    jumpne         #13443     i64 
    push           mm_diags.printstrec.p u64 
    push           106        
    pushptroff                u8 1 0
    jumpfalse      #13443     i64 
    setargs                   2 0
    push           "..."      u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
#13443: 
    jump           #13444     
#13431: 
    setargs                   2 0
    push           "Index:"   u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           mm_diags.printstrec.p u64 
    push           84         
    pushptroff                i32 1 0
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_strint 
    jump           #13444     
#13432: 
    setargs                   2 0
    push           "Index:"   u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           mm_diags.printstrec.p u64 
    push           80         
    pushptroff                i32 1 0
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_strint 
    setargs                   2 0
    push           " Nret:"   u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           mm_diags.printstrec.p u64 
    push           116        
    pushptroff                u8 1 0
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_strint 
    jump           #13444     
#13433: 
    setargs                   2 0
    push           "Index/PCaddr:" u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           mm_diags.printstrec.p u64 
    push           80         
    pushptroff                i32 1 0
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_strint 
    push           mm_diags.printstrec.p u64 
    push           96         
    pushptroff                u64 1 0
    jumpfalse      #13445     u64 
    setargs                   2 0
    push           " Truename:" u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           mm_diags.printstrec.p u64 
    push           96         
    pushptroff                u64 1 0
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
#13445: 
    jump           #13444     
#13434: 
    push           mm_diags.printstrec.p u64 
    push           64         
    pushptroff                u64 1 0
    jumpfalse      #13446     u64 
    setargs                   2 0
    push           "="        u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    setargs                   1 0
    push           mm_diags.printstrec.p u64 
    push           64         
    pushptroff                u64 1 0
    callfn         &mm_lib.strexpr u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_strvar 
#13446: 
    jump           #13444     
#13435: 
    push           mm_diags.printstrec.p u64 
    push           64         
    pushptroff                u64 1 0
    jumpfalse      #13447     u64 
    setargs                   2 0
    push           ":="       u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    setargs                   1 0
    push           mm_diags.printstrec.p u64 
    push           64         
    pushptroff                u64 1 0
    callfn         &mm_lib.strexpr u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_strvar 
#13447: 
    jump           #13444     
#13436: 
    setargs                   2 0
    push           "Const:"   u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    setargs                   1 0
    push           mm_diags.printstrec.p u64 
    push           64         
    pushptroff                u64 1 0
    callfn         &mm_lib.strexpr u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_strvar 
    jump           #13444     
#13437: 
    push           mm_diags.printstrec.p u64 
    push           112        
    pushptroff                i32 1 0
    jumpfalse      #13448     i64 
    setargs                   2 0
    push           "Baseclass:" u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           "<HAS BASECLASS>" u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
#13448: 
    jump           #13444     
#13438: 
    setargs                   2 0
    push           "Enum:"    u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           mm_diags.printstrec.p u64 
    push           80         
    pushptroff                i32 1 0
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_strint 
    jump           #13444     
#13439: 
    setargs                   2 0
    push           "DLL#:"    u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           mm_diags.printstrec.p u64 
    push           113        
    pushptroff                u8 1 0
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_strint 
    jump           #13444     
#13440: 
#13444: 
    push           mm_diags.printstrec.p u64 
    push           92         
    pushptroff                u16 1 0
    push           12         i64 
    dotindex                  i64 
    jumpfalse      #13449     u64 
    setargs                   2 0
    push           " @"       u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           mm_diags.printstrec.p u64 
    push           96         
    pushptroff                u64 1 0
    pushptr                   u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
#13449: 
    push           mm_diags.printstrec.p u64 
    push           92         
    pushptroff                u16 1 0
    push           13         i64 
    dotindex                  i64 
    jumpfalse      #13450     u64 
    setargs                   2 0
    setargs                   1 0
    push           mm_diags.printstrec.p u64 
    push           96         
    pushptroff                u64 1 0
    callfn         &mm_lib.strexpr u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_strvar 
#13450: 
    setargs                   2 0
    push           " Module# " u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           mm_diags.printstrec.p u64 
    push           94         
    pushptroff                u8 1 0
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_strint 
    setargs                   2 0
    push           " Lineno:" u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           mm_diags.printstrec.p u64 
    push           88         
    pushptroff                u32 1 0
    push           0          i64 
    push           23         i64 
    dotslice                  i64 
    push           16777215   i64 
    iand                      i64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_strint 
    setargs                   2 0
    push           mm_diags.printstrec.f u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_println 
    push           mm_diags.printstrec.p u64 
    push           78         
    pushptroff                u8 1 0
    push           10         i64 
    casejumpeq     #13451     i64 0
    push           12         i64 
    casejumpeq     #13451     i64 0
    push           11         i64 
    casejumpeq     #13451     i64 0
    push           20         i64 
    casejumpeq     #13451     i64 0
    popstack                  i64 
    jump           #13452     
#13451: 
    push           mm_diags.printstrec.p u64 
    push           64         
    pushptroff                u64 1 0
    jumpfalse      #13453     u64 
    setargs                   4 0
    push           mm_diags.printstrec.f u64 
    push           "*"        u64 
    push           0          i64 
    push           mm_diags.printstrec.p u64 
    push           64         
    pushptroff                u64 1 0
    callproc       &mm_diags.printunit 
#13453: 
    jump           #13454     
#13452: 
#13454: 
#13455: 
    retproc                   
End


Proc mm_diags.printstflat:
    param          mm_diags.printstflat.f u64 
    local          mm_diags.printstflat.i i64 
    local          mm_diags.printstflat.p u64 
    local          mm_diags.printstflat.av_1 i64 
    procentry                 
    setargs                   1 0
    push           mm_diags.printstflat.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "GLOBAL SYMBOL TABLE:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13457: 
    push           0          i64 
    pop            mm_diags.printstflat.i i64 
    push           32766      i64 
    pop            mm_diags.printstflat.av_1 i64 
    push           mm_diags.printstflat.av_1 i64 
    push           0          i64 
    jumplt         #13458     i64 
#13459: 
    push           &mm_lex.hashtable 
    push           mm_diags.printstflat.i i64 
    addrefoff                 block:128 128 0
    pop            mm_diags.printstflat.p u64 
    push           mm_diags.printstflat.p u64 
    pushptr                   u64 
    jumpfalse      #13460     u64 
    push           mm_diags.printstflat.p u64 
    push           77         
    pushptroff                u8 1 0
    push           79         i64 
    casejumpeq     #13461     i64 0
    popstack                  i64 
    jump           #13462     
#13461: 
    setargs                   1 0
    push           mm_diags.printstflat.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           mm_diags.printstflat.i i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           mm_diags.printstflat.p u64 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   1 0
    push           ":"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_diags.printstflat.p u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_tables.symbolnames 
    push           mm_diags.printstflat.p u64 
    push           77         
    pushptroff                u8 1 0
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_tables.namenames 
    push           mm_diags.printstflat.p u64 
    push           78         
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           mm_diags.printstflat.p u64 
    push           40         
    pushptroff                u64 1 0
    pop            mm_diags.printstflat.p u64 
    jump           #13463     
#13464: 
    setargs                   1 0
    push           mm_diags.printstflat.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "\t"       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_diags.printstflat.p u64 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   1 0
    push           mm_diags.printstflat.p u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_tables.symbolnames 
    push           mm_diags.printstflat.p u64 
    push           77         
    pushptroff                u8 1 0
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_tables.namenames 
    push           mm_diags.printstflat.p u64 
    push           78         
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "(From"    u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    startmult                 
    push           mm_diags.printstflat.p u64 
    push           8          
    pushptroff                u64 1 0
    jumpfalse      #13465     u64 
    push           mm_diags.printstflat.p u64 
    push           8          
    pushptroff                u64 1 0
    pushptr                   u64 
    resetmult                 
    jump           #13466     
#13465: 
    push           "-"        u64 
    endmult                   
#13466: 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           ")"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           mm_diags.printstflat.p u64 
    push           40         
    pushptroff                u64 1 0
    pop            mm_diags.printstflat.p u64 
#13463: 
    push           mm_diags.printstflat.p u64 
    jumptrue       #13464     u64 
#13467: 
    jump           #13468     
#13462: 
#13468: 
#13460: 
#13469: 
    forup          #13459     i64 1
    opnd           mm_diags.printstflat.i 
    opnd           mm_diags.printstflat.av_1 
#13458: 
#13470: 
    retproc                   
End


Proc mm_diags.printcode:
    param          mm_diags.printcode.f u64 
    param          mm_diags.printcode.caption u64 
    local          mm_diags.printcode.p u64 
    local          mm_diags.printcode.pp u64 
    procentry                 
    push           mm_decls.proclist u64 
    pop            mm_diags.printcode.pp u64 
    jump           #13472     
#13473: 
    push           mm_diags.printcode.pp u64 
    pushptr                   u64 
    pop            mm_diags.printcode.p u64 
    setargs                   1 0
    push           mm_diags.printcode.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           mm_diags.printcode.p u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           "="        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    startmult                 
    push           mm_diags.printcode.p u64 
    push           92         
    pushptroff                u16 1 0
    push           0          i64 
    push           1          i64 
    dotslice                  i64 
    switch         #13474     1 3
    opnd           #13475     
#13474: 
    switchlabel    #13476     
    switchlabel    #13477     
    switchlabel    #13478     
    endswitch                 
#13476: 
    push           "Global"   u64 
    resetmult                 
    jump           #13479     
#13477: 
    push           "Export"   u64 
    resetmult                 
    jump           #13479     
#13478: 
    push           "ExportQ"  u64 
    resetmult                 
    jump           #13479     
#13475: 
    push           "Local"    u64 
    endmult                   
#13479: 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           mm_diags.printcode.p u64 
    push           8          
    pushptroff                u64 1 0
    push           78         
    pushptroff                u8 1 0
    push           4          i64 
    jumpne         #13480     i64 
    setargs                   1 0
    push           mm_diags.printcode.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           " in record" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_diags.printcode.p u64 
    push           8          
    pushptroff                u64 1 0
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13480: 
    setargs                   1 0
    push           mm_diags.printcode.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   4 0
    push           mm_diags.printcode.f u64 
    push           "1"        u64 
    push           0          i64 
    push           mm_diags.printcode.p u64 
    push           64         
    pushptroff                u64 1 0
    callproc       &mm_diags.printunit 
    setargs                   1 0
    push           mm_diags.printcode.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           mm_diags.printcode.pp u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_diags.printcode.pp u64 
#13472: 
    push           mm_diags.printcode.pp u64 
    jumptrue       #13473     u64 
#13481: 
#13482: 
    retproc                   
End


Proc mm_diags.printunit:
    param          mm_diags.printunit.p u64 
    param          mm_diags.printunit.level i64 
    param          mm_diags.printunit.prefix u64 
    param          mm_diags.printunit.dev u64 
    local          mm_diags.printunit.q u64 
    local          mm_diags.printunit.d u64 
    local          mm_diags.printunit.t i64 
    local          mm_diags.printunit.idname u64 
    local          mm_diags.printunit.a i64 
    local          mm_diags.printunit.x32 r32 
    local          mm_diags.printunit.av_1 i64 
    local          mm_diags.printunit.i i64 
    procentry                 
    push           mm_diags.printunit.p u64 
    push           0          u64 
    jumpne         #13484     u64 
    jump           #13485     
#13484: 
    push           mm_diags.printunit.p u64 
    push           4          
    pushptroff                u32 1 0
    push           0          i64 
    push           23         i64 
    dotslice                  i64 
    jumpfalse      #13486     u64 
    push           mm_diags.printunit.p u64 
    push           4          
    pushptroff                u32 1 0
    push           0          i64 
    push           23         i64 
    dotslice                  i64 
    pop            mm_diags.currlineno i64 
    push           mm_diags.printunit.p u64 
    push           4          
    pushptroff                u32 1 0
    push           24         i64 
    push           31         i64 
    dotslice                  i64 
    pop            mm_diags.currfileno i64 
#13486: 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           mm_diags.printunit.p u64 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   1 0
    push           ":"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    setargs                   3 0
    push           mm_diags.printunit.p u64 
    push           mm_diags.printunit.prefix u64 
    push           mm_diags.printunit.level i64 
    callfn         &mm_diags.getprefix u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           &mm_tables.jtagnames 
    push           mm_diags.printunit.p u64 
    pushptr                   u8 
    pushptroff                u64 8 0
    push           2          i64 
    addrefoff                 u64 1 0
    pop            mm_diags.printunit.idname u64 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           mm_diags.printunit.idname u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           ": "       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           mm_diags.printunit.p u64 
    pushptr                   u8 
    push           3          i64 
    casejumpeq     #13487     i64 0
    push           109        i64 
    casejumpeq     #13488     i64 0
    push           1          i64 
    casejumpeq     #13489     i64 0
    push           7          i64 
    casejumpeq     #13490     i64 0
    push           65         i64 
    casejumpeq     #13491     i64 0
    push           72         i64 
    casejumpeq     #13492     i64 0
    push           61         i64 
    casejumpeq     #13493     i64 0
    push           64         i64 
    casejumpeq     #13493     i64 0
    push           19         i64 
    casejumpeq     #13494     i64 0
    push           25         i64 
    casejumpeq     #13494     i64 0
    push           51         i64 
    casejumpeq     #13495     i64 0
    push           48         i64 
    casejumpeq     #13496     i64 0
    push           57         i64 
    casejumpeq     #13496     i64 0
    push           113        i64 
    casejumpeq     #13497     i64 0
    push           111        i64 
    casejumpeq     #13497     i64 0
    push           110        i64 
    casejumpeq     #13497     i64 0
    push           112        i64 
    casejumpeq     #13497     i64 0
    push           98         i64 
    casejumpeq     #13498     i64 0
    push           8          i64 
    casejumpeq     #13499     i64 0
    push           10         i64 
    casejumpeq     #13500     i64 0
    push           11         i64 
    casejumpeq     #13501     i64 0
    push           12         i64 
    casejumpeq     #13502     i64 0
    push           21         i64 
    casejumpeq     #13503     i64 0
    push           35         i64 
    casejumpeq     #13504     i64 0
    popstack                  i64 
    jump           #13505     
#13487: 
    push           mm_diags.printunit.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_diags.printunit.d u64 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           mm_diags.printunit.d u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_tables.namenames 
    push           mm_diags.printunit.d u64 
    push           78         
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           mm_diags.printunit.d u64 
    push           64         
    pushptroff                u64 1 0
    jumpfalse      #13506     u64 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           " {"       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           &mm_tables.jtagnames 
    push           mm_diags.printunit.d u64 
    push           64         
    pushptroff                u64 1 0
    pushptr                   u8 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           "}"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13506: 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           " "        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    setargs                   1 0
    push           mm_diags.printunit.d u64 
    callfn         &mm_lib.getdottedname u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    startmult                 
    push           mm_diags.printunit.p u64 
    push           40         
    pushptroff                u8 1 0
    jumpfalse      #13507     i64 
    push           " {Dotted}" u64 
    resetmult                 
    jump           #13508     
#13507: 
    push           ""         u64 
    endmult                   
#13508: 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           mm_diags.printunit.p u64 
    push           32         
    pushptroff                u64 1 0
    jumpfalse      #13509     u64 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           " Lastcall:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_diags.printunit.p u64 
    push           32         
    pushptroff                u64 1 0
    callproc       &msysp.m$print_ptr_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13509: 
    push           mm_diags.printunit.p u64 
    push           40         
    pushptroff                u8 1 0
    jumpfalse      #13510     i64 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           " Addroffirst." u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13510: 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           " Moduleno:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_diags.printunit.p u64 
    push           56         
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           mm_diags.printunit.p u64 
    push           41         
    pushptroff                u8 1 0
    jumpfalse      #13511     i64 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           " AV:"     u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   2 0
    push           0          i64 
    push           mm_diags.printunit.p u64 
    push           41         
    pushptroff                u8 1 0
    truncate                  u64 u8 
    callproc       &msysp.m$print_c8 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13511: 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "P.INDEX=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_diags.printunit.p u64 
    push           40         
    pushptroff                i32 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13512     
#13488: 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           mm_diags.printunit.p u64 
    push           16         
    pushptroff                u64 1 0
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13512     
#13489: 
    push           mm_diags.printunit.p u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_diags.printunit.t i64 
    push           mm_diags.printunit.p u64 
    push           16         
    pushptroff                i64 1 0
    pop            mm_diags.printunit.a i64 
    push           mm_diags.printunit.t i64 
    push           10         i64 
    jumpne         #13513     i64 
    push           mm_diags.printunit.p u64 
    push           40         
    pushptroff                u32 1 0
    push           256        i64 
    jumple         #13514     i64 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "\""       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           "(LONGSTR)" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "\" *"     u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           mm_diags.printunit.p u64 
    push           40         
    pushptroff                u32 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13515     
#13514: 
    push           mm_diags.printunit.p u64 
    push           40         
    pushptroff                u32 1 0
    jumpfalse      #13516     i64 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "\""       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           mm_diags.printunit.p u64 
    push           16         
    pushptroff                u64 1 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           "\" *"     u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           mm_diags.printunit.p u64 
    push           40         
    pushptroff                u32 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13515     
#13516: 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "\"\""     u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13515: 
    jump           #13517     
#13513: 
    push           &mm_decls.ttbasetype 
    push           mm_diags.printunit.t i64 
    pushptroff                i32 4 0
    push           4          i64 
    casejumpeq     #13518     i64 0
    push           20         i64 
    casejumpeq     #13518     i64 0
    push           19         i64 
    casejumpeq     #13518     i64 0
    push           18         i64 
    casejumpeq     #13518     i64 0
    push           2          i64 
    casejumpeq     #13519     i64 0
    push           23         i64 
    casejumpeq     #13519     i64 0
    push           22         i64 
    casejumpeq     #13519     i64 0
    push           21         i64 
    casejumpeq     #13519     i64 0
    push           1          i64 
    casejumpeq     #13520     i64 0
    push           16         i64 
    casejumpeq     #13520     i64 0
    push           17         i64 
    casejumpeq     #13520     i64 0
    push           6          i64 
    casejumpeq     #13521     i64 0
    push           7          i64 
    casejumpeq     #13522     i64 0
    push           9          i64 
    casejumpeq     #13523     i64 0
    push           5          i64 
    casejumpeq     #13524     i64 0
    push           3          i64 
    casejumpeq     #13525     i64 0
    popstack                  i64 
    jump           #13526     
#13518: 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           mm_diags.printunit.a i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13527     
#13519: 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   2 0
    push           0          i64 
    push           mm_diags.printunit.a u64 
    callproc       &msysp.m$print_u64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13527     
#13520: 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    setargs                   1 0
    push           mm_diags.printunit.a i64 
    callfn         &mlibp.chr u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13527     
#13521: 
    push           mm_diags.printunit.p u64 
    push           16         
    pushptroff                r64 1 0
    fnarrow                   r32 r64 
    pop            mm_diags.printunit.x32 r32 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   2 0
    push           0          i64 
    push           mm_diags.printunit.x32 r32 
    fwiden                    r64 r32 
    callproc       &msysp.m$print_r64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13527     
#13522: 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   2 0
    push           0          i64 
    push           mm_diags.printunit.p u64 
    push           16         
    pushptroff                r64 1 0
    callproc       &msysp.m$print_r64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13527     
#13523: 
    push           mm_diags.printunit.p u64 
    push           16         
    pushptroff                i64 1 0
    jumpfalse      #13528     i64 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "#"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           mm_diags.printunit.p u64 
    push           16         
    pushptroff                i64 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           mm_diags.printunit.p u64 
    push           40         
    pushptroff                u32 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13529     
#13528: 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "NIL"      u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13529: 
    jump           #13527     
#13524: 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   3 0
    push           0          i64 
    push           mm_diags.printunit.p u64 
    push           16         
    pushptroff                i128 1 0
    callproc       &msysp.m$print_i128 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13527     
#13525: 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   3 0
    push           0          i64 
    push           mm_diags.printunit.p u64 
    push           16         
    pushptroff                u128 1 0
    callproc       &msysp.m$print_u128 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13527     
#13526: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "TYPENAME(T)=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    setargs                   1 0
    push           mm_diags.printunit.t i64 
    callfn         &mm_lib.typename u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    setargs                   1 0
    push           &mm_decls.ttbasetype 
    push           mm_diags.printunit.t i64 
    pushptroff                i32 4 0
    callfn         &mm_lib.typename u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "<PRINTUNIT BAD CONST PROBABLY VOID" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13527: 
#13517: 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           " "        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    setargs                   1 0
    push           mm_diags.printunit.t i64 
    callfn         &mm_lib.typename u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           mm_diags.printunit.p u64 
    push           44         
    pushptroff                u8 1 0
    jumpfalse      #13530     i64 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           " <isstr>" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13530: 
    push           mm_diags.printunit.p u64 
    push           40         
    pushptroff                i32 1 0
    jumpfalse      #13531     i64 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           " *L"      u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           mm_diags.printunit.p u64 
    push           40         
    pushptroff                i32 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13531: 
    jump           #13512     
#13490: 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           mm_diags.printunit.p u64 
    push           16         
    pushptroff                u64 1 0
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "Len:"     u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_diags.printunit.p u64 
    push           40         
    pushptroff                u32 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13512     
#13491: 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    setargs                   1 0
    push           mm_diags.printunit.p u64 
    push           48         
    pushptroff                i32 1 0
    callfn         &mm_lib.typename u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    setargs                   1 0
    push           mm_diags.printunit.p u64 
    push           16         
    pushptroff                i64 1 0
    callfn         &mm_lib.typename u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13512     
#13492: 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           &mm_tables.bitfieldnames 
    push           mm_diags.printunit.p u64 
    push           40         
    pushptroff                i16 1 0
    pushptroff                u64 8 -8
    push           3          i64 
    addrefoff                 u64 1 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13512     
#13493: 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           " Convmode:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    setargs                   2 0
    push           1          i64 
    push           mm_diags.printunit.p u64 
    push           52         
    pushptroff                i32 1 0
    callfn         &mm_lib.strmode u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13512     
#13494: 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "Len:"     u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_diags.printunit.p u64 
    push           40         
    pushptroff                u32 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           " Makeax:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_diags.printunit.p u64 
    push           40         
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13512     
#13495: 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "Offset:"  u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_diags.printunit.p u64 
    push           40         
    pushptroff                u32 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13512     
#13496: 
    jump           #13512     
#13497: 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "#"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           mm_diags.printunit.p u64 
    push           40         
    pushptroff                i32 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13512     
#13498: 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           &mm_tables.sysfnnames 
    push           mm_diags.printunit.p u64 
    push           40         
    pushptroff                i16 1 0
    pushptroff                u64 8 -8
    push           6          i64 
    addrefoff                 u64 1 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13512     
#13499: 
    jump           #13512     
#13500: 
    jump           #13512     
#13501: 
    jump           #13512     
#13502: 
    jump           #13512     
#13503: 
    jump           #13512     
#13504: 
#13532: 
    push           1          i64 
    pop            mm_diags.printunit.i i64 
    push           4          i64 
    pop            mm_diags.printunit.av_1 i64 
    push           mm_diags.printunit.av_1 i64 
    push           1          i64 
    jumplt         #13533     i64 
#13534: 
    push           mm_diags.printunit.p u64 
    push           40         
    addrefoff                 u64 1 0
    push           mm_diags.printunit.i i64 
    pushptroff                u8 1 -1
    push           0          i64 
    jumpne         #13535     i64 
    jump           #13533     
#13535: 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           &pc_tables.pclnames 
    push           mm_diags.printunit.p u64 
    push           40         
    addrefoff                 u64 1 0
    push           mm_diags.printunit.i i64 
    pushptroff                u8 1 -1
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           " "        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13536: 
    forup          #13534     i64 1
    opnd           mm_diags.printunit.i 
    opnd           mm_diags.printunit.av_1 
#13533: 
    jump           #13512     
#13505: 
#13512: 
    push           mm_diags.printunit.p u64 
    pushptr                   u8 
    push           3          i64 
    casejumpeq     #13537     i64 0
    push           57         i64 
    casejumpeq     #13537     i64 0
    push           48         i64 
    casejumpeq     #13537     i64 0
    push           51         i64 
    casejumpeq     #13537     i64 0
    push           96         i64 
    casejumpeq     #13537     i64 0
    push           31         i64 
    casejumpeq     #13537     i64 0
    push           29         i64 
    casejumpeq     #13537     i64 0
    popstack                  i64 
    jump           #13538     
#13537: 
    push           mm_diags.printunit.p u64 
    push           52         
    pushptroff                i32 1 0
    push           0          i64 
    jumpne         #13539     i64 
    jump           #13540     
#13539: 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           " WIDEN FROM:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    setargs                   2 0
    push           1          i64 
    push           mm_diags.printunit.p u64 
    push           52         
    pushptroff                i32 1 0
    callfn         &mm_lib.strmode u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13540: 
    jump           #13541     
#13538: 
#13541: 
    push           mm_diags.printunit.p u64 
    push           58         
    pushptroff                u8 1 0
    jumpfalse      #13542     i64 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           " Is const" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13542: 
    push           mm_diags.printunit.p u64 
    pushptr                   u8 
    push           36         i64 
    casejumpeq     #13543     i64 0
    push           38         i64 
    casejumpeq     #13543     i64 0
    push           37         i64 
    casejumpeq     #13543     i64 0
    push           39         i64 
    casejumpeq     #13543     i64 0
    push           34         i64 
    casejumpeq     #13543     i64 0
    push           40         i64 
    casejumpeq     #13543     i64 0
    push           61         i64 
    casejumpeq     #13543     i64 0
    push           14         i64 
    casejumpeq     #13543     i64 0
    push           15         i64 
    casejumpeq     #13543     i64 0
    push           17         i64 
    casejumpeq     #13543     i64 0
    push           18         i64 
    casejumpeq     #13543     i64 0
    popstack                  i64 
    jump           #13544     
#13543: 
    push           mm_diags.printunit.p u64 
    push           60         
    pushptroff                u8 1 0
    jumpfalse      #13545     i64 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           " Pcl<#:#>" u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           &pc_tables.pclnames 
    push           mm_diags.printunit.p u64 
    push           60         
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pc_tables.pstdnames 
    push           mm_diags.printunit.p u64 
    push           61         
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13546     
#13545: 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           " no-op"   u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13546: 
    jump           #13547     
#13544: 
#13547: 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           mm_diags.printunit.p u64 
    push           1          
    pushptroff                u8 1 0
    jumpfalse      #13548     i64 
    setargs                   4 0
    push           "1"        u64 
    push           mm_diags.printunit.level i64 
    push           1          i64 
    add                       i64 
    push           mm_diags.printunit.p u64 
    push           16         
    pushptroff                u64 1 0
    push           mm_diags.printunit.dev u64 
    callproc       &mm_diags.printunitlist 
#13548: 
    push           mm_diags.printunit.p u64 
    push           2          
    pushptroff                u8 1 0
    jumpfalse      #13549     i64 
    setargs                   4 0
    push           "2"        u64 
    push           mm_diags.printunit.level i64 
    push           1          i64 
    add                       i64 
    push           mm_diags.printunit.p u64 
    push           24         
    pushptroff                u64 1 0
    push           mm_diags.printunit.dev u64 
    callproc       &mm_diags.printunitlist 
#13549: 
    push           mm_diags.printunit.p u64 
    push           3          
    pushptroff                u8 1 0
    jumpfalse      #13550     i64 
    setargs                   4 0
    push           "3"        u64 
    push           mm_diags.printunit.level i64 
    push           1          i64 
    add                       i64 
    push           mm_diags.printunit.p u64 
    push           32         
    pushptroff                u64 1 0
    push           mm_diags.printunit.dev u64 
    callproc       &mm_diags.printunitlist 
#13550: 
#13485: 
    retproc                   
End


Proc mm_diags.printunitlist:
    param          mm_diags.printunitlist.dev u64 
    param          mm_diags.printunitlist.p u64 
    param          mm_diags.printunitlist.level i64 
    param          mm_diags.printunitlist.prefix u64 
    procentry                 
    push           mm_diags.printunitlist.p u64 
    push           0          u64 
    jumpne         #13552     u64 
    jump           #13553     
#13552: 
    jump           #13554     
#13555: 
    setargs                   4 0
    push           mm_diags.printunitlist.dev u64 
    push           mm_diags.printunitlist.prefix u64 
    push           mm_diags.printunitlist.level i64 
    push           mm_diags.printunitlist.p u64 
    callproc       &mm_diags.printunit 
    push           mm_diags.printunitlist.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_diags.printunitlist.p u64 
#13554: 
    push           mm_diags.printunitlist.p u64 
    jumptrue       #13555     u64 
#13556: 
#13553: 
    retproc                   
End


Proc mm_diags.getprefix: u64
    param          mm_diags.getprefix.level i64 
    param          mm_diags.getprefix.prefix u64 
    param          mm_diags.getprefix.p u64 
    local          mm_diags.getprefix.indentstr block:1024 
    local          mm_diags.getprefix.modestr block:16384 
    local          mm_diags.getprefix.isexpr u64 
    local          mm_diags.getprefix.av_1 i64 
    procentry                 
    push           0          u64 
    push           &mm_diags.getprefix.indentstr 
    push           1          i64 
    popptroff                 u8 1 -1
    push           mm_diags.getprefix.level i64 
    push           10         i64 
    jumple         #13558     i64 
    push           10         i64 
    pop            mm_diags.getprefix.level i64 
#13558: 
#13559: 
    push           mm_diags.getprefix.level i64 
    pop            mm_diags.getprefix.av_1 i64 
    push           mm_diags.getprefix.av_1 i64 
    push           0          i64 
    jumple         #13560     i64 
#13561: 
    setargs                   2 0
    push           "- "       u64 
    push           &mm_diags.getprefix.indentstr 
    callproc       &strcat    
#13562: 
    to             #13561     
    opnd           mm_diags.getprefix.av_1 
#13560: 
    push           "S"        u64 
    pop            mm_diags.getprefix.isexpr u64 
    push           &mm_tables.jisexpr 
    push           mm_diags.getprefix.p u64 
    pushptr                   u8 
    pushptroff                u8 1 0
    jumpfalse      #13563     i64 
    push           "E"        u64 
    pop            mm_diags.getprefix.isexpr u64 
#13563: 
    push           mm_diags.getprefix.p u64 
    pushptr                   u8 
    push           100        i64 
    casejumpeq     #13564     i64 0
    push           117        i64 
    casejumpeq     #13564     i64 0
    push           115        i64 
    casejumpeq     #13564     i64 0
    push           120        i64 
    casejumpeq     #13564     i64 0
    popstack                  i64 
    jump           #13565     
#13564: 
    push           mm_diags.getprefix.p u64 
    push           48         
    pushptroff                i32 1 0
    push           0          i64 
    jumpne         #13566     i64 
    push           "S"        u64 
    pop            mm_diags.getprefix.isexpr u64 
#13566: 
    jump           #13567     
#13565: 
#13567: 
    setargs                   1 0
    push           &mm_diags.getprefix.modestr 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "# #:#"    u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           mm_diags.getprefix.isexpr u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    startmult                 
    push           mm_diags.getprefix.p u64 
    push           59         
    pushptroff                u8 1 0
    jumpfalse      #13568     i64 
    push           "RES"      u64 
    resetmult                 
    jump           #13569     
#13568: 
    push           "---"      u64 
    endmult                   
#13569: 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    setargs                   2 0
    push           1          i64 
    push           mm_diags.getprefix.p u64 
    push           48         
    pushptroff                i32 1 0
    callfn         &mm_lib.strmode u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           0          u64 
    push           &mm_diags.getprefix.modestr 
    push           256        i64 
    popptroff                 u8 1 -1
    setargs                   2 0
    push           "-----------------------------" u64 
    push           &mm_diags.getprefix.modestr 
    callproc       &strcat    
    push           32         u64 
    push           &mm_diags.getprefix.modestr 
    push           17         i64 
    popptroff                 u8 1 -1
    push           0          u64 
    push           &mm_diags.getprefix.modestr 
    push           18         i64 
    popptroff                 u8 1 -1
    setargs                   2 0
    setargs                   0 0
    callfn         &mm_diags.getlineinfok u64 
    push           &mm_diags.getprefix.str 
    callproc       &strcpy    
    setargs                   2 0
    push           &mm_diags.getprefix.modestr 
    push           &mm_diags.getprefix.str 
    callproc       &strcat    
    setargs                   2 0
    push           &mm_diags.getprefix.indentstr 
    push           &mm_diags.getprefix.str 
    callproc       &strcat    
    setargs                   2 0
    push           mm_diags.getprefix.prefix u64 
    push           &mm_diags.getprefix.str 
    callproc       &strcat    
    push           mm_diags.getprefix.prefix u64 
    pushptr                   u8 
    jumpfalse      #13570     u64 
    setargs                   2 0
    push           " "        u64 
    push           &mm_diags.getprefix.str 
    callproc       &strcat    
#13570: 
    push           &mm_diags.getprefix.str 
    setret                    u64 
    jump           #13571     
#13571: 
    retfn                     u64 
End


Proc mm_diags.getlineinfok: u64
    procentry                 
    setargs                   1 0
    push           &mm_diags.getlineinfok.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "# # "     u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   2 0
    push           "Z2"       u64 
    push           mm_diags.currfileno i64 
    callproc       &msysp.m$print_i64 
    setargs                   2 0
    push           "z4"       u64 
    push           mm_diags.currlineno i64 
    callproc       &msysp.m$print_i64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           &mm_diags.getlineinfok.str 
    setret                    u64 
    jump           #13573     
#13573: 
    retfn                     u64 
End


Proc mm_diags.printmodelist:
    param          mm_diags.printmodelist.f u64 
    local          mm_diags.printmodelist.mbase i64 
    local          mm_diags.printmodelist.av_1 i64 
    local          mm_diags.printmodelist.m i64 
    local          mm_diags.printmodelist.i i64 
    procentry                 
    setargs                   1 0
    push           mm_diags.printmodelist.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "MODELIST" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_decls.ntypes i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13575: 
    push           0          i64 
    pop            mm_diags.printmodelist.m i64 
    push           mm_decls.ntypes i64 
    push           0          i64 
    jumplt         #13576     i64 
#13577: 
    setargs                   1 0
    push           mm_diags.printmodelist.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   2 0
    push           "4"        u64 
    push           mm_diags.printmodelist.m i64 
    callproc       &msysp.m$print_i64 
    setargs                   1 0
    setargs                   2 0
    push           1          i64 
    push           mm_diags.printmodelist.m i64 
    callfn         &mm_lib.strmode u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           &mm_decls.ttbasetype 
    push           mm_diags.printmodelist.m i64 
    pushptroff                i32 4 0
    pop            mm_diags.printmodelist.mbase i64 
    setargs                   1 0
    push           mm_diags.printmodelist.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           mm_diags.printmodelist.tab u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "Basetype:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_diags.printmodelist.mbase i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    setargs                   2 0
    push           1          i64 
    push           mm_diags.printmodelist.mbase i64 
    callfn         &mm_lib.strmode u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           mm_diags.printmodelist.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           mm_diags.printmodelist.tab u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "ttname:"  u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_decls.ttname 
    push           mm_diags.printmodelist.m i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           mm_diags.printmodelist.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           mm_diags.printmodelist.tab u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "ttnamedef:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_decls.ttnamedef 
    push           mm_diags.printmodelist.m i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_ptr_nf 
    setargs                   1 0
    startmult                 
    push           &mm_decls.ttnamedef 
    push           mm_diags.printmodelist.m i64 
    pushptroff                u64 8 0
    jumpfalse      #13578     u64 
    push           &mm_decls.ttnamedef 
    push           mm_diags.printmodelist.m i64 
    pushptroff                u64 8 0
    pushptr                   u64 
    resetmult                 
    jump           #13579     
#13578: 
    push           "-"        u64 
    endmult                   
#13579: 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           mm_diags.printmodelist.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           mm_diags.printmodelist.tab u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "Target:"  u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    setargs                   2 0
    push           1          i64 
    push           &mm_decls.tttarget 
    push           mm_diags.printmodelist.m i64 
    pushptroff                i32 4 0
    callfn         &mm_lib.strmode u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           mm_diags.printmodelist.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           mm_diags.printmodelist.tab u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "Code:"    u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   2 0
    push           "c"        u64 
    push           &mm_tables.stdcodes 
    push           mm_diags.printmodelist.mbase i64 
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           mm_diags.printmodelist.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           mm_diags.printmodelist.tab u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "Size:"    u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_decls.ttsize 
    push           mm_diags.printmodelist.m i64 
    pushptroff                i32 4 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           "Sizeset"  u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_decls.ttsizeset 
    push           mm_diags.printmodelist.m i64 
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           mm_diags.printmodelist.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "# Bounds: #..#  Length:#" u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           mm_diags.printmodelist.tab u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_decls.ttlower 
    push           mm_diags.printmodelist.m i64 
    pushptroff                i32 4 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           &mm_decls.ttlower 
    push           mm_diags.printmodelist.m i64 
    pushptroff                i32 4 0
    push           &mm_decls.ttlength 
    push           mm_diags.printmodelist.m i64 
    pushptroff                i32 4 0
    add                       i64 
    push           1          i64 
    sub                       i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           &mm_decls.ttlength 
    push           mm_diags.printmodelist.m i64 
    pushptroff                i32 4 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           mm_diags.printmodelist.mbase i64 
    push           31         i64 
    jumpne         #13580     i64 
    setargs                   1 0
    push           mm_diags.printmodelist.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           mm_diags.printmodelist.tab u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "Mult:"    u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13581: 
    push           1          i64 
    pop            mm_diags.printmodelist.i i64 
    push           &mm_decls.ttlength 
    push           mm_diags.printmodelist.m i64 
    pushptroff                i32 4 0
    pop            mm_diags.printmodelist.av_1 i64 
    push           mm_diags.printmodelist.av_1 i64 
    push           1          i64 
    jumplt         #13582     i64 
#13583: 
    setargs                   1 0
    push           mm_diags.printmodelist.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    setargs                   2 0
    push           1          i64 
    push           &mm_decls.ttmult 
    push           mm_diags.printmodelist.m i64 
    pushptroff                u64 8 0
    push           mm_diags.printmodelist.i i64 
    pushptroff                i32 4 -4
    callfn         &mm_lib.strmode u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           " "        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13584: 
    forup          #13583     i64 1
    opnd           mm_diags.printmodelist.i 
    opnd           mm_diags.printmodelist.av_1 
#13582: 
    setargs                   1 0
    push           mm_diags.printmodelist.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13580: 
    setargs                   1 0
    push           mm_diags.printmodelist.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           mm_diags.printmodelist.tab u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "Keytype:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    setargs                   2 0
    push           1          i64 
    push           &mm_decls.ttkeytype 
    push           mm_diags.printmodelist.m i64 
    pushptroff                i32 4 0
    callfn         &mm_lib.strmode u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           mm_diags.printmodelist.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           mm_diags.printmodelist.tab u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "Isint:"   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_decls.ttisint 
    push           mm_diags.printmodelist.m i64 
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           mm_diags.printmodelist.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           mm_diags.printmodelist.tab u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "Isword:"  u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_decls.ttisword 
    push           mm_diags.printmodelist.m i64 
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           mm_diags.printmodelist.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           mm_diags.printmodelist.tab u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "Isreal:"  u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_decls.ttisreal 
    push           mm_diags.printmodelist.m i64 
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           mm_diags.printmodelist.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           mm_diags.printmodelist.tab u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "Isinteger:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_decls.ttisinteger 
    push           mm_diags.printmodelist.m i64 
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           mm_diags.printmodelist.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           mm_diags.printmodelist.tab u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "Isallnum:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_decls.ttisallnum 
    push           mm_diags.printmodelist.m i64 
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           mm_diags.printmodelist.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           mm_diags.printmodelist.tab u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "Ismainnum:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_decls.ttismainnum 
    push           mm_diags.printmodelist.m i64 
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           mm_diags.printmodelist.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           mm_diags.printmodelist.tab u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "Isshort:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_decls.ttisshort 
    push           mm_diags.printmodelist.m i64 
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           mm_diags.printmodelist.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           mm_diags.printmodelist.tab u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "Isref:"   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_decls.ttisref 
    push           mm_diags.printmodelist.m i64 
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           mm_diags.printmodelist.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13585: 
    forup          #13577     i64 1
    opnd           mm_diags.printmodelist.m 
    opnd           mm_decls.ntypes 
#13576: 
#13586: 
    retproc                   
End


Proc pci_mcl.axerror:
    param          pci_mcl.axerror.mess u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "MCL Error: #" u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           pci_mcl.axerror.mess u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#13588: 
    retproc                   
End


Proc pc_genmcl.genmcl:
    param          pc_genmcl.genmcl.optim i64 
    procentry                 
    push           pc_libpcl.mcldone i64 
    jumpfalse      #13590     i64 
    jump           #13591     
#13590: 
    setargs                   0 0
    callproc       &pc_genmcl.inithandlers 
    push           pc_genmcl.genmcl.optim i64 
    pop            pc_decls.optimflag i64 
    setargs                   0 0
    callproc       &pc_libmcl.mclinit 
    push           pc_libpcl.pcstart u64 
    pop            pc_genmcl.currpcl u64 
    push           pc_libpcl.labelno i64 
    pop            pci_mcl.mlabelno i64 
    push           0          i64 
    pop            pci_mcl.mseqno i64 
    push           1          i64 
    pop            pci_mcl.passno i64 
#13592: 
    setargs                   1 0
    push           pc_genmcl.currpcl u64 
    callproc       &pc_genmcl.convertpcl 
    push           &pc_genmcl.currpcl 
    incr                      u64 32
#13593: 
    push           pc_genmcl.currpcl u64 
    push           1          
    pushptroff                u8 1 0
    push           11         i64 
    jumpne         #13592     i64 
#13594: 
    setargs                   0 0
    callproc       &pc_libmcl.genabsneg 
    setargs                   0 0
    callproc       &pc_libmcl.genstringtable 
    setargs                   0 0
    callproc       &pc_libmcl.genrealtable 
    setargs                   0 0
    callproc       &pc_libmcl.genrtsproctable 
    setargs                   0 0
    callproc       &pc_libmcl.genfunctiontable 
    setargs                   3 0
    push           0          u64 
    push           0          u64 
    push           10         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           0          u64 
    push           10         i64 
    callproc       &pc_libmcl.genmc 
    push           1          i64 
    pop            pc_libpcl.mcldone i64 
#13591: 
    retproc                   
End


Proc pc_genmcl.convertpcl:
    param          pc_genmcl.convertpcl.p u64 
    local          pc_genmcl.convertpcl.str block:1256 
    local          pc_genmcl.convertpcl.ss u64 
    local          pc_genmcl.convertpcl.m i64 
    procentry                 
    push           pc_genmcl.convertpcl.p u64 
    push           24         
    pushptroff                u32 1 0
    pop            pci_mcl.mseqno i64 
    setargs                   1 0
    push           pc_genmcl.convertpcl.p u64 
    push           &pc_genmcl.px_handlertable 
    push           pc_genmcl.convertpcl.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callprocptr               
#13596: 
    retproc                   
End


Proc pc_genmcl.inithandlers:
    local          pc_genmcl.inithandlers.name u64 
    local          pc_genmcl.inithandlers.n i64 
    local          pc_genmcl.inithandlers.av_1 i64 
    local          pc_genmcl.inithandlers.av_2 i64 
    local          pc_genmcl.inithandlers.i i64 
    local          pc_genmcl.inithandlers.k i64 
    procentry                 
    push           pc_genmcl.inithandlers.initdone u8 
    jumpfalse      #13598     i64 
    jump           #13599     
#13598: 
    getnprocs                 i64 
    pop            pc_genmcl.inithandlers.n i64 
#13600: 
    push           1          i64 
    pop            pc_genmcl.inithandlers.i i64 
    push           pc_genmcl.inithandlers.n i64 
    push           1          i64 
    jumplt         #13601     i64 
#13602: 
    push           pc_genmcl.inithandlers.i i64 
    getprocname               i64 
    pop            pc_genmcl.inithandlers.name u64 
    setargs                   3 0
    push           3          i64 
    push           "px_"      u64 
    push           pc_genmcl.inithandlers.name u64 
    callfn         &mlibp.eqbytes i64 
    jumpfalse      #13603     i64 
#13604: 
    push           0          i64 
    pop            pc_genmcl.inithandlers.k i64 
    push           218        i64 
    pop            pc_genmcl.inithandlers.av_1 i64 
    push           pc_genmcl.inithandlers.av_1 i64 
    push           0          i64 
    jumplt         #13605     i64 
#13606: 
    setargs                   2 0
    push           pc_genmcl.inithandlers.name u64 
    push           3          i64 
    addrefoff                 u64 1 0
    push           &pc_tables.pclnames 
    push           pc_genmcl.inithandlers.k i64 
    pushptroff                u64 8 0
    push           1          i64 
    addrefoff                 u64 1 0
    callfn         &mlibp.eqstring i64 
    jumpfalse      #13607     i64 
    push           pc_genmcl.inithandlers.i i64 
    getprocaddr               i64 
    push           &pc_genmcl.px_handlertable 
    push           pc_genmcl.inithandlers.k i64 
    popptroff                 u64 8 0
    jump           #13608     
#13607: 
#13609: 
    forup          #13606     i64 1
    opnd           pc_genmcl.inithandlers.k 
    opnd           pc_genmcl.inithandlers.av_1 
#13605: 
    setargs                   2 0
    push           pc_genmcl.inithandlers.name u64 
    push           "Invalid handler name:" u64 
    callproc       &pc_genmcl.gerrorc 
#13608: 
#13603: 
#13610: 
    forup          #13602     i64 1
    opnd           pc_genmcl.inithandlers.i 
    opnd           pc_genmcl.inithandlers.n 
#13601: 
#13611: 
    push           0          i64 
    pop            pc_genmcl.inithandlers.i i64 
    push           218        i64 
    pop            pc_genmcl.inithandlers.av_2 i64 
    push           pc_genmcl.inithandlers.av_2 i64 
    push           0          i64 
    jumplt         #13612     i64 
#13613: 
    push           &pc_genmcl.px_handlertable 
    push           pc_genmcl.inithandlers.i i64 
    pushptroff                u64 8 0
    jumptrue       #13614     u64 
    push           &pc_genmcl.unimpl 
    push           &pc_genmcl.px_handlertable 
    push           pc_genmcl.inithandlers.i i64 
    popptroff                 u64 8 0
#13614: 
#13615: 
    forup          #13613     i64 1
    opnd           pc_genmcl.inithandlers.i 
    opnd           pc_genmcl.inithandlers.av_2 
#13612: 
    push           1          i64 
    pop            pc_genmcl.inithandlers.initdone u8 
#13599: 
    retproc                   
End


Proc pc_genmcl.unimpl:
    param          pc_genmcl.unimpl.p u64 
    local          pc_genmcl.unimpl.str block:300 
    procentry                 
    setargs                   1 0
    push           &pc_genmcl.unimpl.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "Unimplemented Opcode:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pc_tables.pclnames 
    push           pc_genmcl.unimpl.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           &pc_genmcl.unimpl.str 
    callproc       &pc_libmcl.mgencomment 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Unimplemented Opcode:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pc_tables.pclnames 
    push           pc_genmcl.unimpl.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13617: 
    retproc                   
End


Proc pc_genmcl.gerrorc:
    param          pc_genmcl.gerrorc.mess u64 
    param          pc_genmcl.gerrorc.param u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "MCL Gen error:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_genmcl.gerrorc.mess u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           pc_genmcl.gerrorc.param u64 
    jumpfalse      #13619     u64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           ":"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_genmcl.gerrorc.param u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13619: 
    push           1          i64 
    stop                      
#13620: 
    retproc                   
End


Proc pc_genmcl.px_zero:
    param          pc_genmcl.px_zero.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_zero.p u64 
    callproc       &pc_genmcl.unimpl 
#13622: 
    retproc                   
End


Proc pc_genmcl.px_nop:
    param          pc_genmcl.px_nop.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_nop.p u64 
    callproc       &pc_genmcl.unimpl 
#13624: 
    retproc                   
End


Proc pc_genmcl.px_stop:
    param          pc_genmcl.px_stop.p u64 
    local          pc_genmcl.px_stop.d u64 
    procentry                 
    setargs                   2 0
    push           11         i64 
    push           1          i64 
    callproc       &pc_stackmcl.loadparam 
    setargs                   1 0
    push           "exit"     u64 
    callfn         &pc_libpcl.pcl_makesymbol u64 
    pop            pc_genmcl.px_stop.d u64 
    push           1          u64 
    push           pc_genmcl.px_stop.d u64 
    push           46         
    addrefoff                 u64 1 0
    push           1          i64 
    popdotindex               u16 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_stop.d u64 
    callfn         &pc_libmcl.mgenmemaddr u64 
    push           22         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#13626: 
    retproc                   
End


Proc pc_genmcl.px_comment:
    param          pc_genmcl.px_comment.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_comment.p u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &pc_libmcl.mgencomment 
#13628: 
    retproc                   
End


Proc pc_genmcl.px_importdll:
    param          pc_genmcl.px_importdll.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_importdll.p u64 
    callproc       &pc_genmcl.unimpl 
#13630: 
    retproc                   
End


Proc pc_genmcl.px_istatic:
    param          pc_genmcl.px_istatic.p u64 
    procentry                 
    setargs                   2 0
    push           pc_genmcl.px_istatic.p u64 
    push           16         
    pushptroff                i32 1 0
    push           73         i64 
    callproc       &pc_libmcl.setsegment 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_istatic.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmemaddr u64 
    push           6          i64 
    callproc       &pc_libmcl.genmc 
#13632: 
    retproc                   
End


Proc pc_genmcl.px_zstatic:
    param          pc_genmcl.px_zstatic.p u64 
    local          pc_genmcl.px_zstatic.d u64 
    procentry                 
    push           pc_genmcl.px_zstatic.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_genmcl.px_zstatic.d u64 
    setargs                   2 0
    push           pc_genmcl.px_zstatic.p u64 
    push           16         
    pushptroff                i32 1 0
    push           90         i64 
    callproc       &pc_libmcl.setsegment 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_zstatic.d u64 
    callfn         &pc_libmcl.mgenmemaddr u64 
    push           6          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_zstatic.p u64 
    push           4          
    pushptroff                i32 1 0
    callfn         &pc_libmcl.mgenint u64 
    push           124        i64 
    callproc       &pc_libmcl.genmc 
#13634: 
    retproc                   
End


Proc pc_genmcl.px_equiv:
    param          pc_genmcl.px_equiv.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_equiv.p u64 
    callproc       &pc_genmcl.unimpl 
#13636: 
    retproc                   
End


Proc pc_genmcl.px_procdef:
    param          pc_genmcl.px_procdef.p u64 
    local          pc_genmcl.px_procdef.name u64 
    procentry                 
    push           pc_genmcl.currpcl u64 
    pop            pci_mcl.procdefpcl u64 
    push           pc_genmcl.currpcl u64 
    push           8          
    pushptroff                u64 1 0
    pop            pci_mcl.procdef u64 
    push           pci_mcl.procdef u64 
    pushptr                   u64 
    pop            pc_genmcl.px_procdef.name u64 
    setargs                   2 0
    push           16         i64 
    push           67         i64 
    callproc       &pc_libmcl.setsegment 
    push           pci_mcl.passno i64 
    push           1          i64 
    jumpne         #13638     i64 
    setargs                   1 0
    push           "DUMMY"    u64 
    callproc       &pc_libmcl.mgencomment 
    push           pci_mcl.mccodex u64 
    pop            pc_genmcl.procdefmcl u64 
#13638: 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.procdef u64 
    callfn         &pc_libmcl.mgenmemaddr u64 
    push           1          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.procdef u64 
    callfn         &pc_libmcl.mgenmemaddr u64 
    push           6          i64 
    callproc       &pc_libmcl.genmc 
    push           0          i64 
    store          pci_mcl.nparams i64 
    pop            pci_mcl.nlocals i64 
#13639: 
    retproc                   
End


Proc pc_genmcl.px_threadedproc:
    param          pc_genmcl.px_threadedproc.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_threadedproc.p u64 
    callproc       &pc_genmcl.px_procdef 
#13641: 
    retproc                   
End


Proc pc_genmcl.px_procentry:
    param          pc_genmcl.px_procentry.p u64 
    local          pc_genmcl.px_procentry.np i64 
    local          pc_genmcl.px_procentry.regoffset i64 
    local          pc_genmcl.px_procentry.offset i64 
    local          pc_genmcl.px_procentry.dreg i64 
    local          pc_genmcl.px_procentry.xreg i64 
    local          pc_genmcl.px_procentry.nregparams i64 
    local          pc_genmcl.px_procentry.nspill i64 
    local          pc_genmcl.px_procentry.hasequiv i64 
    local          pc_genmcl.px_procentry.ax u64 
    local          pc_genmcl.px_procentry.d u64 
    local          pc_genmcl.px_procentry.i i64 
    procentry                 
    push           0          i64 
    pop            pci_mcl.framebytes i64 
    push           0          i64 
    pop            pci_mcl.frameoffset i64 
    push           0          i64 
    pop            pci_mcl.paramoffset i64 
    push           0          i64 
    pop            pci_mcl.needstackframe i64 
    push           0          i64 
    store          pci_mcl.nxsaveregs i64 
    pop            pci_mcl.ndsaveregs i64 
    push           0          i64 
    pop            pci_mcl.ndsavepush i64 
    push           0          i64 
    store          pc_genmcl.px_procentry.nspill i64 
    pop            pc_genmcl.px_procentry.nregparams i64 
    push           0          i64 
    pop            pci_mcl.needshadow48 i64 
    push           0          i64 
    pop            pci_mcl.needshadow32 i64 
    push           0          i64 
    pop            pc_genmcl.px_procentry.hasequiv i64 
    push           pci_mcl.inf_assem i64 
    jumpfalse      #13643     i64 
    jump           #13644     
#13643: 
    push           pci_mcl.passno i64 
    push           2          i64 
    jumpne         #13645     i64 
    push           pci_mcl.inf_leafproc i64 
    jumpfalse      #13645     i64 
    push           11         i64 
    pop            pc_genmcl.px_procentry.dreg i64 
    push           1          i64 
    pop            pc_genmcl.px_procentry.xreg i64 
#13646: 
    push           1          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.nparams i64 
    push           1          i64 
    jumplt         #13647     i64 
#13648: 
    push           pc_genmcl.px_procentry.i i64 
    push           4          i64 
    jumple         #13649     i64 
    jump           #13647     
#13649: 
    push           &pci_mcl.paramdefs 
    push           pc_genmcl.px_procentry.i i64 
    pushptroff                u64 8 -8
    pop            pc_genmcl.px_procentry.d u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_procentry.d u64 
    push           16         
    pushptroff                u64 1 0
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #13650     i64 0
    push           3          i64 
    casejumpeq     #13651     i64 0
    popstack                  i64 
    jump           #13652     
#13650: 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           2          i64 
    dotindex                  i64 
    jumptrue       #13653     u64 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           5          i64 
    dotindex                  i64 
    jumptrue       #13653     u64 
    push           pc_genmcl.px_procentry.d u64 
    push           48         
    pushptroff                i16 1 0
    jumpfalse      #13653     i64 
    push           pc_genmcl.px_procentry.dreg i64 
    push           pc_genmcl.px_procentry.d u64 
    push           50         
    popptroff                 u8 1 0
    push           1          i64 
    push           &pci_mcl.isregvar 
    push           pc_genmcl.px_procentry.dreg i64 
    popptroff                 u8 1 -1
    push           pc_genmcl.px_procentry.dreg i64 
    push           11         i64 
    jumpne         #13654     i64 
    push           1          i64 
    pop            pci_mcl.inf_r10used i64 
#13654: 
    push           pc_genmcl.px_procentry.dreg i64 
    push           12         i64 
    jumpne         #13655     i64 
    push           1          i64 
    pop            pci_mcl.inf_r11used i64 
#13655: 
    push           pc_genmcl.px_procentry.dreg i64 
    push           14         i64 
    jumpne         #13656     i64 
    push           1          i64 
    pop            pci_mcl.inf_r13used i64 
#13656: 
    push           &pc_genmcl.px_procentry.nregparams 
    incr                      i64 1
#13653: 
    jump           #13657     
#13651: 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           2          i64 
    dotindex                  i64 
    jumptrue       #13658     u64 
    push           pc_genmcl.px_procentry.d u64 
    push           48         
    pushptroff                i16 1 0
    jumpfalse      #13658     i64 
    push           pc_genmcl.px_procentry.xreg i64 
    push           pc_genmcl.px_procentry.d u64 
    push           50         
    popptroff                 u8 1 0
    push           1          i64 
    push           &pci_mcl.isxregvar 
    push           pc_genmcl.px_procentry.dreg i64 
    popptroff                 u8 1 -1
    push           &pc_genmcl.px_procentry.nregparams 
    incr                      i64 1
#13658: 
    jump           #13657     
#13652: 
#13657: 
    push           &pc_genmcl.px_procentry.dreg 
    incr                      i64 1
    push           &pc_genmcl.px_procentry.xreg 
    incr                      i64 1
#13659: 
    forup          #13648     i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.nparams 
#13647: 
#13645: 
    push           pci_mcl.passno i64 
    push           2          i64 
    jumpne         #13660     i64 
    push           10         i64 
    pop            pc_genmcl.px_procentry.dreg i64 
    push           16         i64 
    pop            pc_genmcl.px_procentry.xreg i64 
#13661: 
    push           1          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.nlocals i64 
    push           1          i64 
    jumplt         #13662     i64 
#13663: 
    push           &pci_mcl.localdefs 
    push           pc_genmcl.px_procentry.i i64 
    pushptroff                u64 8 -8
    pop            pc_genmcl.px_procentry.d u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_procentry.d u64 
    push           16         
    pushptroff                u64 1 0
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #13664     i64 0
    push           3          i64 
    casejumpeq     #13665     i64 0
    popstack                  i64 
    jump           #13666     
#13664: 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           2          i64 
    dotindex                  i64 
    jumptrue       #13667     u64 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           5          i64 
    dotindex                  i64 
    jumptrue       #13667     u64 
    push           pc_genmcl.px_procentry.d u64 
    push           48         
    pushptroff                i16 1 0
    jumpfalse      #13667     i64 
    push           pc_genmcl.px_procentry.dreg i64 
    push           pci_mcl.inf_highreg i64 
    jumple         #13668     i64 
    push           pc_genmcl.px_procentry.dreg i64 
    push           4          i64 
    jumpge         #13669     i64 
#13668: 
    jump           #13670     
#13669: 
    push           pc_genmcl.px_procentry.dreg i64 
    push           &pci_mcl.dsaveregs 
    push           &pci_mcl.ndsaveregs 
    incrload                  i64 1
    popptroff                 i64 8 -8
    push           pc_genmcl.px_procentry.dreg i64 
    push           pc_genmcl.px_procentry.d u64 
    push           50         
    popptroff                 u8 1 0
    push           1          i64 
    push           &pci_mcl.isregvar 
    push           pc_genmcl.px_procentry.dreg i64 
    popptroff                 u8 1 -1
    push           &pc_genmcl.px_procentry.dreg 
    decr                      i64 1
#13667: 
    jump           #13671     
#13665: 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           2          i64 
    dotindex                  i64 
    jumptrue       #13672     u64 
    push           pc_genmcl.px_procentry.d u64 
    push           48         
    pushptroff                i16 1 0
    jumpfalse      #13672     i64 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           5          i64 
    dotindex                  i64 
    jumptrue       #13672     u64 
    push           pc_genmcl.px_procentry.xreg i64 
    push           pci_mcl.inf_highxreg i64 
    jumple         #13673     i64 
    push           pc_genmcl.px_procentry.xreg i64 
    push           7          i64 
    jumpge         #13674     i64 
#13673: 
    jump           #13670     
#13674: 
    push           pc_genmcl.px_procentry.xreg i64 
    push           &pci_mcl.xsaveregs 
    push           &pci_mcl.nxsaveregs 
    incrload                  i64 1
    popptroff                 i64 8 -8
    push           pc_genmcl.px_procentry.xreg i64 
    push           pc_genmcl.px_procentry.d u64 
    push           50         
    popptroff                 u8 1 0
    push           1          i64 
    push           &pci_mcl.isxregvar 
    push           pc_genmcl.px_procentry.dreg i64 
    popptroff                 u8 1 -1
    push           &pc_genmcl.px_procentry.xreg 
    decr                      i64 1
#13672: 
    jump           #13671     
#13666: 
#13671: 
#13670: 
    forup          #13663     i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.nlocals 
#13662: 
    push           pci_mcl.inf_leafproc i64 
    jumptrue       #13675     i64 
#13676: 
    push           1          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.nparams i64 
    push           1          i64 
    jumplt         #13677     i64 
#13678: 
    push           pc_genmcl.px_procentry.i i64 
    push           4          i64 
    jumple         #13679     i64 
    jump           #13677     
#13679: 
    push           &pci_mcl.paramdefs 
    push           pc_genmcl.px_procentry.i i64 
    pushptroff                u64 8 -8
    pop            pc_genmcl.px_procentry.d u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_procentry.d u64 
    push           16         
    pushptroff                u64 1 0
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #13680     i64 0
    push           3          i64 
    casejumpeq     #13681     i64 0
    popstack                  i64 
    jump           #13682     
#13680: 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           2          i64 
    dotindex                  i64 
    jumptrue       #13683     u64 
    push           pc_genmcl.px_procentry.d u64 
    push           48         
    pushptroff                i16 1 0
    jumpfalse      #13683     i64 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           5          i64 
    dotindex                  i64 
    jumptrue       #13683     u64 
    push           pc_genmcl.px_procentry.dreg i64 
    push           pci_mcl.inf_highreg i64 
    jumple         #13684     i64 
    push           pc_genmcl.px_procentry.dreg i64 
    push           4          i64 
    jumpge         #13685     i64 
#13684: 
    jump           #13686     
#13685: 
    push           pc_genmcl.px_procentry.dreg i64 
    push           &pci_mcl.dsaveregs 
    push           &pci_mcl.ndsaveregs 
    incrload                  i64 1
    popptroff                 i64 8 -8
    push           pc_genmcl.px_procentry.dreg i64 
    push           pc_genmcl.px_procentry.d u64 
    push           50         
    popptroff                 u8 1 0
    push           1          i64 
    push           &pci_mcl.isregvar 
    push           pc_genmcl.px_procentry.dreg i64 
    popptroff                 u8 1 -1
    push           &pc_genmcl.px_procentry.dreg 
    decr                      i64 1
    push           &pc_genmcl.px_procentry.nregparams 
    incr                      i64 1
#13683: 
    jump           #13687     
#13681: 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           2          i64 
    dotindex                  i64 
    jumptrue       #13688     u64 
    push           pc_genmcl.px_procentry.d u64 
    push           48         
    pushptroff                i16 1 0
    jumpfalse      #13688     i64 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           5          i64 
    dotindex                  i64 
    jumptrue       #13688     u64 
    push           pc_genmcl.px_procentry.xreg i64 
    push           pci_mcl.inf_highxreg i64 
    jumple         #13689     i64 
    push           pc_genmcl.px_procentry.xreg i64 
    push           7          i64 
    jumpge         #13690     i64 
#13689: 
    jump           #13686     
#13690: 
    push           pc_genmcl.px_procentry.xreg i64 
    push           &pci_mcl.xsaveregs 
    push           &pci_mcl.nxsaveregs 
    incrload                  i64 1
    popptroff                 i64 8 -8
    push           pc_genmcl.px_procentry.xreg i64 
    push           pc_genmcl.px_procentry.d u64 
    push           50         
    popptroff                 u8 1 0
    push           1          i64 
    push           &pci_mcl.isxregvar 
    push           pc_genmcl.px_procentry.dreg i64 
    popptroff                 u8 1 -1
    push           &pc_genmcl.px_procentry.xreg 
    decr                      i64 1
    push           &pc_genmcl.px_procentry.nregparams 
    incr                      i64 1
#13688: 
    jump           #13687     
#13682: 
#13687: 
#13686: 
    forup          #13678     i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.nparams 
#13677: 
#13675: 
#13660: 
!skip::
#13644: 
#13691: 
    push           1          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.nparams i64 
    push           1          i64 
    jumplt         #13692     i64 
#13693: 
    push           &pci_mcl.paramdefs 
    push           pc_genmcl.px_procentry.i i64 
    pushptroff                u64 8 -8
    pop            pc_genmcl.px_procentry.d u64 
    push           pc_genmcl.px_procentry.d u64 
    push           50         
    pushptroff                u8 1 0
    jumptrue       #13694     i64 
    push           pc_genmcl.px_procentry.i i64 
    push           1          i64 
    jumple         #13695     i64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_procentry.d u64 
    push           16         
    pushptroff                u64 1 0
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #13695     i64 
    push           &pci_mcl.paramdefs 
    push           pc_genmcl.px_procentry.i i64 
    pushptroff                u64 8 -16
    push           pc_genmcl.px_procentry.d u64 
    jumpne         #13695     u64 
    jump           #13696     
#13695: 
    push           pci_mcl.paramoffset i64 
    push           16         i64 
    add                       i64 
    push           pc_genmcl.px_procentry.d u64 
    push           32         
    popptroff                 i32 1 0
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_procentry.d u64 
    push           32         
    pushptroff                i32 1 0
    callfn         &pc_libmcl.mgenint u64 
    setargs                   1 0
    setargs                   1 0
    push           pc_genmcl.px_procentry.d u64 
    callfn         &pc_libmcl.getfullname u64 
    callfn         &pc_libmcl.mgenname u64 
    push           7          i64 
    callproc       &pc_libmcl.genmc 
#13696: 
    jump           #13697     
#13694: 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_procentry.d u64 
    push           16         
    pushptroff                u64 1 0
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #13698     i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_procentry.d u64 
    push           50         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   1 0
    setargs                   1 0
    push           pc_genmcl.px_procentry.d u64 
    callfn         &pc_libmcl.getfullname u64 
    callfn         &pc_libmcl.mgenname u64 
    push           8          i64 
    callproc       &pc_libmcl.genmc 
    jump           #13697     
#13698: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_procentry.d u64 
    push           50         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenxreg u64 
    setargs                   1 0
    setargs                   1 0
    push           pc_genmcl.px_procentry.d u64 
    callfn         &pc_libmcl.getfullname u64 
    callfn         &pc_libmcl.mgenname u64 
    push           8          i64 
    callproc       &pc_libmcl.genmc 
#13697: 
    push           &pci_mcl.paramoffset 
    push           8          i64 
    addto                     i64 
#13699: 
    forup          #13693     i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.nparams 
#13692: 
#13700: 
    push           4          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.inf_highreg i64 
    push           4          i64 
    jumplt         #13701     i64 
#13702: 
    push           pc_genmcl.px_procentry.i i64 
    push           &pci_mcl.dsaveregs 
    push           &pci_mcl.ndsaveregs 
    incrload                  i64 1
    popptroff                 i64 8 -8
#13703: 
    forup          #13702     i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.inf_highreg 
#13701: 
#13704: 
    push           7          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.inf_highxreg i64 
    push           7          i64 
    jumplt         #13705     i64 
#13706: 
    push           pc_genmcl.px_procentry.i i64 
    push           &pci_mcl.xsaveregs 
    push           &pci_mcl.nxsaveregs 
    incrload                  i64 1
    popptroff                 i64 8 -8
#13707: 
    forup          #13706     i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.inf_highxreg 
#13705: 
    push           pci_mcl.nparams i64 
    push           4          i64 
    jumple         #13708     i64 
    push           1          i64 
    pop            pci_mcl.needstackframe i64 
    push           4          i64 
    push           pc_genmcl.px_procentry.nregparams i64 
    sub                       i64 
    pop            pc_genmcl.px_procentry.nspill i64 
    jump           #13709     
#13708: 
    push           pci_mcl.ndsaveregs i64 
    pop            pci_mcl.ndsavepush i64 
    push           0          i64 
    pop            pci_mcl.ndsaveregs i64 
    push           pci_mcl.nparams i64 
    push           pc_genmcl.px_procentry.nregparams i64 
    sub                       i64 
    pop            pc_genmcl.px_procentry.nspill i64 
    push           pc_genmcl.px_procentry.nspill i64 
    jumpfalse      #13710     i64 
    push           1          i64 
    pop            pci_mcl.needstackframe i64 
#13710: 
#13709: 
#13711: 
    push           1          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.nlocals i64 
    push           1          i64 
    jumplt         #13712     i64 
#13713: 
    push           &pci_mcl.localdefs 
    push           pc_genmcl.px_procentry.i i64 
    pushptroff                u64 8 -8
    pop            pc_genmcl.px_procentry.d u64 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           6          i64 
    dotindex                  i64 
    jumpfalse      #13714     u64 
    push           1          i64 
    pop            pc_genmcl.px_procentry.hasequiv i64 
    jump           #13715     
#13714: 
    push           pc_genmcl.px_procentry.d u64 
    push           50         
    pushptroff                u8 1 0
    jumptrue       #13716     i64 
    push           &pci_mcl.frameoffset 
    setargs                   1 0
    push           pc_genmcl.px_procentry.d u64 
    push           16         
    pushptroff                u64 1 0
    push           4          
    pushptroff                i32 1 0
    callfn         &pc_libmcl.roundsizetg i64 
    subto                     i64 
    push           pci_mcl.frameoffset i64 
    push           pc_genmcl.px_procentry.d u64 
    push           32         
    popptroff                 i32 1 0
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_procentry.d u64 
    push           32         
    pushptroff                i32 1 0
    callfn         &pc_libmcl.mgenint u64 
    setargs                   1 0
    setargs                   1 0
    push           pc_genmcl.px_procentry.d u64 
    callfn         &pc_libmcl.getfullname u64 
    callfn         &pc_libmcl.mgenname u64 
    push           7          i64 
    callproc       &pc_libmcl.genmc 
    jump           #13715     
#13716: 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_procentry.d u64 
    push           16         
    pushptroff                u64 1 0
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #13717     i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_procentry.d u64 
    push           50         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   1 0
    setargs                   1 0
    push           pc_genmcl.px_procentry.d u64 
    callfn         &pc_libmcl.getfullname u64 
    callfn         &pc_libmcl.mgenname u64 
    push           8          i64 
    callproc       &pc_libmcl.genmc 
    jump           #13715     
#13717: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_procentry.d u64 
    push           50         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenxreg u64 
    setargs                   1 0
    setargs                   1 0
    push           pc_genmcl.px_procentry.d u64 
    callfn         &pc_libmcl.getfullname u64 
    callfn         &pc_libmcl.mgenname u64 
    push           8          i64 
    callproc       &pc_libmcl.genmc 
#13715: 
#13718: 
    forup          #13713     i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.nlocals 
#13712: 
    push           pc_genmcl.px_procentry.hasequiv i64 
    jumpfalse      #13719     i64 
#13720: 
    push           1          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.nlocals i64 
    push           1          i64 
    jumplt         #13721     i64 
#13722: 
    push           &pci_mcl.localdefs 
    push           pc_genmcl.px_procentry.i i64 
    pushptroff                u64 8 -8
    pop            pc_genmcl.px_procentry.d u64 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           6          i64 
    dotindex                  i64 
    jumpfalse      #13723     u64 
    setargs                   2 0
    push           ""         u64 
    push           "D.ATVAR NOT READY" u64 
    callproc       &pc_libmcl.merror 
#13723: 
#13724: 
    forup          #13722     i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.nlocals 
#13721: 
#13719: 
    push           &pci_mcl.frameoffset 
    push           pci_mcl.ndsaveregs i64 
    push           8          i64 
    mul                       i64 
    subto                     i64 
    push           pci_mcl.frameoffset i64 
    pop            pci_mcl.dsaveoffset i64 
    push           &pci_mcl.frameoffset 
    push           pci_mcl.nxsaveregs i64 
    push           8          i64 
    mul                       i64 
    subto                     i64 
    push           pci_mcl.frameoffset i64 
    pop            pci_mcl.xsaveoffset i64 
    push           pci_mcl.frameoffset i64 
    neg                       i64 
    pop            pci_mcl.framebytes i64 
    push           pci_mcl.nlocals i64 
    jumptrue       #13725     i64 
    push           pci_mcl.nparams i64 
    jumpfalse      #13726     i64 
#13725: 
    push           pci_mcl.procdef u64 
    push           46         
    pushptroff                u16 1 0
    push           7          i64 
    dotindex                  i64 
    jumpfalse      #13726     u64 
    setargs                   2 0
    push           ""         u64 
    push           "params/locals in threaded?" u64 
    callproc       &pc_libmcl.merror 
#13726: 
    push           pci_mcl.framebytes i64 
    jumpfalse      #13727     i64 
    push           1          i64 
    pop            pci_mcl.needstackframe i64 
#13727: 
    jump           #13728     
#13729: 
    push           &pci_mcl.framebytes 
    incr                      i64 1
#13728: 
    push           pci_mcl.framebytes i64 
    push           15         i64 
    iand                      i64 
    jumptrue       #13729     i64 
#13730: 
    push           pci_mcl.needstackframe i64 
    jumpfalse      #13731     i64 
    push           pci_mcl.ndsavepush i64 
    push           0          i64 
    dotindex                  i64 
    jumpfalse      #13731     u64 
    push           &pci_mcl.framebytes 
    push           8          i64 
    addto                     i64 
#13731: 
    push           pci_mcl.needstackframe i64 
    jumpfalse      #13732     i64 
    push           pci_mcl.inf_leafproc i64 
    jumptrue       #13732     i64 
    push           &pci_mcl.framebytes 
    push           32         i64 
    addto                     i64 
#13732: 
    push           pci_mcl.needstackframe i64 
    jumpfalse      #13733     i64 
    push           pci_mcl.ndsavepush i64 
    jumpfalse      #13733     i64 
    push           1          i64 
    pop            pci_mcl.needshadow48 i64 
#13733: 
    push           pci_mcl.needstackframe i64 
    jumptrue       #13734     i64 
    push           pci_mcl.inf_leafproc i64 
    jumptrue       #13734     i64 
    push           pci_mcl.procdef u64 
    push           46         
    pushptroff                u16 1 0
    push           7          i64 
    dotindex                  i64 
    jumptrue       #13734     u64 
    startmult                 
    push           pci_mcl.ndsavepush i64 
    push           0          i64 
    dotindex                  i64 
    jumpfalse      #13735     u64 
    push           32         i64 
    resetmult                 
    jump           #13736     
#13735: 
    push           40         i64 
    endmult                   
#13736: 
    pop            pci_mcl.needshadow32 i64 
#13734: 
#13737: 
    push           1          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.ndsavepush i64 
    push           1          i64 
    jumplt         #13738     i64 
#13739: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           &pci_mcl.dsaveregs 
    push           pc_genmcl.px_procentry.i i64 
    pushptroff                i64 8 -8
    callfn         &pc_libmcl.mgenreg u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
#13740: 
    forup          #13739     i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.ndsavepush 
#13738: 
    push           pci_mcl.needshadow48 i64 
    jumpfalse      #13741     i64 
    setargs                   1 0
    push           48         i64 
    callproc       &pc_stackmcl.pushstack 
#13741: 
    push           pci_mcl.needstackframe i64 
    jumpfalse      #13742     i64 
    setargs                   3 0
    push           0          u64 
    push           pci_mcl.dframeopnd u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pci_mcl.dstackopnd u64 
    push           pci_mcl.dframeopnd u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           pci_mcl.framebytes i64 
    jumpfalse      #13743     i64 
    setargs                   1 0
    push           pci_mcl.framebytes i64 
    callproc       &pc_stackmcl.pushstack 
#13743: 
    jump           #13744     
#13742: 
    push           pci_mcl.needshadow32 i64 
    jumpfalse      #13745     i64 
    setargs                   1 0
    push           pci_mcl.needshadow32 i64 
    callproc       &pc_stackmcl.pushstack 
#13745: 
#13744: 
    push           pci_mcl.dsaveoffset i64 
    pop            pc_genmcl.px_procentry.offset i64 
#13746: 
    push           1          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.ndsaveregs i64 
    push           1          i64 
    jumplt         #13747     i64 
#13748: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           &pci_mcl.dsaveregs 
    push           pc_genmcl.px_procentry.i i64 
    pushptroff                i64 8 -8
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           8          i64 
    push           pc_genmcl.px_procentry.offset i64 
    push           1          i64 
    push           0          i64 
    push           15         i64 
    callfn         &pc_libmcl.mgenindex u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_genmcl.px_procentry.offset 
    push           8          i64 
    addto                     i64 
#13749: 
    forup          #13748     i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.ndsaveregs 
#13747: 
    push           pci_mcl.xsaveoffset i64 
    pop            pc_genmcl.px_procentry.offset i64 
#13750: 
    push           1          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.nxsaveregs i64 
    push           1          i64 
    jumplt         #13751     i64 
#13752: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           &pci_mcl.xsaveregs 
    push           pc_genmcl.px_procentry.i i64 
    pushptroff                i64 8 -8
    callfn         &pc_libmcl.mgenxreg u64 
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           8          i64 
    push           pc_genmcl.px_procentry.offset i64 
    push           1          i64 
    push           0          i64 
    push           15         i64 
    callfn         &pc_libmcl.mgenindex u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_genmcl.px_procentry.offset 
    push           8          i64 
    addto                     i64 
#13753: 
    forup          #13752     i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.nxsaveregs 
#13751: 
    push           16         i64 
    pop            pc_genmcl.px_procentry.offset i64 
    push           0          i64 
    pop            pc_genmcl.px_procentry.regoffset i64 
#13754: 
    push           1          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.nparams i64 
    push           1          i64 
    jumplt         #13755     i64 
#13756: 
    push           pc_genmcl.px_procentry.regoffset i64 
    push           3          i64 
    jumple         #13757     i64 
    jump           #13755     
#13757: 
    push           &pci_mcl.paramdefs 
    push           pc_genmcl.px_procentry.i i64 
    pushptroff                u64 8 -8
    pop            pc_genmcl.px_procentry.d u64 
    push           pc_genmcl.px_procentry.d u64 
    push           50         
    pushptroff                u8 1 0
    jumptrue       #13758     i64 
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           8          i64 
    push           pc_genmcl.px_procentry.offset i64 
    push           1          i64 
    push           0          i64 
    push           15         i64 
    callfn         &pc_libmcl.mgenindex u64 
    pop            pc_genmcl.px_procentry.ax u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_procentry.d u64 
    push           16         
    pushptroff                u64 1 0
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           3          i64 
    casejumpeq     #13759     i64 0
    push           2          i64 
    casejumpeq     #13760     i64 0
    popstack                  i64 
    jump           #13761     
#13759: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    push           pc_genmcl.px_procentry.regoffset i64 
    add                       i64 
    callfn         &pc_libmcl.mgenxreg u64 
    push           pc_genmcl.px_procentry.ax u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #13762     
#13760: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    push           pc_genmcl.px_procentry.regoffset i64 
    add                       i64 
    callfn         &pc_libmcl.mgenxreg u64 
    setargs                   2 0
    push           4          i64 
    push           pc_genmcl.px_procentry.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    jump           #13762     
#13761: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_procentry.regoffset i64 
    push           11         i64 
    add                       i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           pc_genmcl.px_procentry.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
#13762: 
    jump           #13763     
#13758: 
    push           pc_genmcl.px_procentry.d u64 
    push           50         
    pushptroff                u8 1 0
    jumpfalse      #13764     i64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_procentry.d u64 
    push           16         
    pushptroff                u64 1 0
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           3          i64 
    casejumpeq     #13765     i64 0
    push           1          i64 
    casejumpeq     #13766     i64 0
    popstack                  i64 
    jump           #13767     
#13765: 
    push           pc_genmcl.px_procentry.d u64 
    push           50         
    pushptroff                u8 1 0
    push           1          i64 
    push           pc_genmcl.px_procentry.regoffset i64 
    add                       i64 
    jumpeq         #13768     i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    push           pc_genmcl.px_procentry.regoffset i64 
    add                       i64 
    callfn         &pc_libmcl.mgenxreg u64 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_procentry.d u64 
    push           50         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenxreg u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
#13768: 
    jump           #13769     
#13766: 
    push           pc_genmcl.px_procentry.d u64 
    push           50         
    pushptroff                u8 1 0
    push           11         i64 
    push           pc_genmcl.px_procentry.regoffset i64 
    add                       i64 
    jumpeq         #13770     i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_procentry.regoffset i64 
    push           11         i64 
    add                       i64 
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_procentry.d u64 
    push           50         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
#13770: 
    jump           #13769     
#13767: 
#13769: 
#13764: 
#13763: 
    push           &pc_genmcl.px_procentry.offset 
    push           8          i64 
    addto                     i64 
    push           &pc_genmcl.px_procentry.regoffset 
    incr                      i64 1
#13771: 
    forup          #13756     i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.nparams 
#13755: 
#13772: 
    retproc                   
End


Proc pc_genmcl.px_endproc:
    param          pc_genmcl.px_endproc.p u64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    push           0          u64 
    push           2          i64 
    callproc       &pc_libmcl.genmc 
    push           pci_mcl.passno i64 
    push           1          i64 
    jumpne         #13774     i64 
    setargs                   0 0
    callproc       &pc_stackmcl.resetopnds1 
    push           pci_mcl.inf_assem i64 
    jumpfalse      #13775     i64 
    push           0          i64 
    pop            pci_mcl.inf_assem i64 
    setargs                   0 0
    callproc       &pc_stackmcl.resetopnds2 
    jump           #13776     
#13775: 
    push           pc_decls.optimflag i64 
    jumpfalse      #13777     i64 
    push           pci_mcl.inf_assem i64 
    jumptrue       #13777     i64 
    push           2          i64 
    pop            pci_mcl.passno i64 
    push           pci_mcl.procdefpcl u64 
    push           1          i64 
    subrefoff                 u64 32 0
    pop            pc_genmcl.currpcl u64 
    push           pc_genmcl.procdefmcl u64 
    pop            pci_mcl.mccodex u64 
    push           0          u64 
    push           pci_mcl.mccodex u64 
    push           0          
    popptroff                 u64 1 0
#13777: 
#13776: 
    jump           #13778     
#13774: 
    setargs                   0 0
    callproc       &pc_stackmcl.resetopnds2 
    push           1          i64 
    pop            pci_mcl.passno i64 
#13778: 
#13779: 
    retproc                   
End


Proc pc_genmcl.px_endprogram:
    param          pc_genmcl.px_endprogram.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_endprogram.p u64 
    callproc       &pc_genmcl.unimpl 
#13781: 
    retproc                   
End


Proc pc_genmcl.px_extproc:
    param          pc_genmcl.px_extproc.p u64 
    procentry                 
#13783: 
    retproc                   
End


Proc pc_genmcl.px_extparam:
    param          pc_genmcl.px_extparam.p u64 
    procentry                 
#13785: 
    retproc                   
End


Proc pc_genmcl.px_extvariadics:
    param          pc_genmcl.px_extvariadics.p u64 
    procentry                 
#13787: 
    retproc                   
End


Proc pc_genmcl.px_endextproc:
    param          pc_genmcl.px_endextproc.p u64 
    procentry                 
#13789: 
    retproc                   
End


Proc pc_genmcl.px_local:
    param          pc_genmcl.px_local.p u64 
    procentry                 
    push           pci_mcl.nlocals i64 
    push           256        i64 
    jumplt         #13791     i64 
    setargs                   2 0
    push           ""         u64 
    push           "Too many locals" u64 
    callproc       &pc_libmcl.merror 
#13791: 
    push           &pci_mcl.nlocals 
    incr                      i64 1
    push           &pc_tables.pcat 
    push           pc_genmcl.px_local.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #13792     i64 0
    push           3          i64 
    casejumpeq     #13793     i64 0
    popstack                  i64 
    jump           #13794     
#13792: 
    push           &pci_mcl.inf_proclocals 
    incr                      i64 1
    jump           #13795     
#13793: 
    push           &pci_mcl.inf_procxlocals 
    incr                      i64 1
    jump           #13795     
#13794: 
#13795: 
    push           pc_genmcl.px_local.p u64 
    push           8          
    pushptroff                u64 1 0
    push           &pci_mcl.localdefs 
    push           pci_mcl.nlocals i64 
    popptroff                 u64 8 -8
#13796: 
    retproc                   
End


Proc pc_genmcl.px_param:
    param          pc_genmcl.px_param.p u64 
    procentry                 
    push           pci_mcl.nparams i64 
    push           32         i64 
    jumplt         #13798     i64 
    setargs                   2 0
    push           ""         u64 
    push           "Too many params" u64 
    callproc       &pc_libmcl.merror 
#13798: 
    push           &pci_mcl.nparams 
    incr                      i64 1
    push           pc_genmcl.px_param.p u64 
    push           8          
    pushptroff                u64 1 0
    push           &pci_mcl.paramdefs 
    push           pci_mcl.nparams i64 
    popptroff                 u64 8 -8
    push           &pc_tables.pcat 
    push           pc_genmcl.px_param.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #13799     i64 
    push           &pci_mcl.nparams 
    incr                      i64 1
    push           pc_genmcl.px_param.p u64 
    push           8          
    pushptroff                u64 1 0
    push           &pci_mcl.paramdefs 
    push           pci_mcl.nparams i64 
    popptroff                 u64 8 -8
#13799: 
#13800: 
    retproc                   
End


Proc pc_genmcl.px_label:
    param          pc_genmcl.px_label.p u64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_label.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
#13802: 
    retproc                   
End


Proc pc_genmcl.px_labelname:
    param          pc_genmcl.px_labelname.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_labelname.p u64 
    callproc       &pc_genmcl.unimpl 
#13804: 
    retproc                   
End


Proc pc_genmcl.px_push:
    param          pc_genmcl.px_push.p u64 
    procentry                 
    push           pc_genmcl.px_push.p u64 
    pushptr                   u8 
    push           1          i64 
    casejumpeq     #13806     i64 0
    push           2          i64 
    casejumpeq     #13807     i64 0
    push           4          i64 
    casejumpeq     #13808     i64 0
    push           5          i64 
    casejumpeq     #13809     i64 0
    push           7          i64 
    casejumpeq     #13810     i64 0
    push           8          i64 
    casejumpeq     #13811     i64 0
    push           6          i64 
    casejumpeq     #13812     i64 0
    popstack                  i64 
    jump           #13813     
#13806: 
    setargs                   1 0
    push           pc_genmcl.px_push.p u64 
    callproc       &pc_stackmcl.addmem 
    jump           #13814     
#13807: 
    setargs                   1 0
    push           pc_genmcl.px_push.p u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &pc_stackmcl.addmemaddr 
    jump           #13814     
#13808: 
    setargs                   1 0
    push           pc_genmcl.px_push.p u64 
    push           8          
    pushptroff                i64 1 0
    callproc       &pc_stackmcl.addint 
    jump           #13814     
#13809: 
    setargs                   1 0
    push           pc_genmcl.px_push.p u64 
    push           8          
    pushptroff                r64 1 0
    callproc       &pc_stackmcl.addreal 
    jump           #13814     
#13810: 
    setargs                   1 0
    push           pc_genmcl.px_push.p u64 
    push           8          
    pushptroff                r32 1 0
    fwiden                    r64 r32 
    callproc       &pc_stackmcl.addreal32 
    jump           #13814     
#13811: 
    setargs                   1 0
    push           pc_genmcl.px_push.p u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &pc_stackmcl.addstring 
    jump           #13814     
#13812: 
    setargs                   1 0
    push           pc_genmcl.px_push.p u64 
    push           8          
    addrefoff                 u64 1 0
    callproc       &pc_stackmcl.addint128 
    jump           #13814     
#13813: 
    setargs                   2 0
    push           &pc_tables.opndnames 
    push           pc_genmcl.px_push.p u64 
    pushptr                   u8 
    pushptroff                u64 8 0
    push           "push"     u64 
    callproc       &pc_libmcl.merror 
#13814: 
#13815: 
    retproc                   
End


Proc pc_genmcl.px_pop:
    param          pc_genmcl.px_pop.p u64 
    local          pc_genmcl.px_pop.ax u64 
    local          pc_genmcl.px_pop.bx u64 
    local          pc_genmcl.px_pop.i i64 
    procentry                 
    push           pc_genmcl.px_pop.p u64 
    pushptr                   u8 
    push           1          i64 
    casejumpeq     #13817     i64 0
    popstack                  i64 
    jump           #13818     
#13817: 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_pop.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #13819     i64 0
    push           3          i64 
    casejumpeq     #13820     i64 0
    push           2          i64 
    casejumpeq     #13821     i64 0
    push           5          i64 
    casejumpeq     #13822     i64 0
    push           4          i64 
    casejumpeq     #13823     i64 0
    push           6          i64 
    casejumpeq     #13824     i64 0
    popstack                  i64 
    jump           #13825     
#13819: 
#13826: 
    push           1          i64 
    pop            pc_genmcl.px_pop.i i64 
    push           pci_mcl.noperands i64 
    push           1          i64 
    jumplt         #13827     i64 
#13828: 
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.px_pop.i i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           3          i64 
    casejumpeq     #13829     i64 0
    push           5          i64 
    casejumpeq     #13830     i64 0
    popstack                  i64 
    jump           #13831     
#13829: 
    jump           #13827     
    jump           #13832     
#13830: 
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.px_pop.i i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    push           pc_genmcl.px_pop.p u64 
    push           8          
    pushptroff                u64 1 0
    jumpne         #13833     u64 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_pop.i i64 
    callproc       &pc_stackmcl.genopnd_ld 
#13833: 
    jump           #13832     
#13831: 
#13832: 
#13834: 
    forup          #13828     i64 1
    opnd           pc_genmcl.px_pop.i 
    opnd           pci_mcl.noperands 
#13827: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    setargs                   1 0
    push           pc_genmcl.px_pop.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #13835     
#13820: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    setargs                   1 0
    push           pc_genmcl.px_pop.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #13835     
#13821: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    setargs                   1 0
    push           pc_genmcl.px_pop.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    jump           #13835     
#13822: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    setargs                   1 0
    push           pc_genmcl.px_pop.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_genmcl.px_pop.p u64 
    push           1          
    pushptroff                u8 1 0
    push           24         i64 
    jumpeq         #13836     i64 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#13836: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    setargs                   1 0
    push           pc_genmcl.px_pop.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmemhigh u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_genmcl.px_pop.p u64 
    push           1          
    pushptroff                u8 1 0
    push           24         i64 
    jumpeq         #13837     i64 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#13837: 
    jump           #13838     
    jump           #13835     
#13823: 
    setargs                   3 0
    setargs                   2 0
    push           pc_genmcl.px_pop.p u64 
    push           4          
    pushptroff                i32 1 0
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    setargs                   1 0
    push           pc_genmcl.px_pop.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #13835     
#13824: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.px_pop.bx u64 
    setargs                   1 0
    push           pc_genmcl.px_pop.p u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &pc_stackmcl.addmemaddr 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.px_pop.ax u64 
    setargs                   3 0
    push           pc_genmcl.px_pop.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_genmcl.px_pop.bx u64 
    push           pc_genmcl.px_pop.ax u64 
    callproc       &pc_libmcl.copyblock 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #13835     
#13825: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "POPMEM"   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_genmcl.px_pop.p u64 
    push           3          
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13835: 
    jump           #13839     
#13818: 
    setargs                   2 0
    push           pc_genmcl.px_pop.p u64 
    pushptr                   u8 
    push           "POP"      u64 
    callproc       &pc_libmcl.merroropnd 
#13839: 
    push           pc_genmcl.px_pop.p u64 
    push           1          
    pushptroff                u8 1 0
    push           24         i64 
    jumpeq         #13840     i64 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#13840: 
#13838: 
    retproc                   
End


Proc pc_genmcl.px_store:
    param          pc_genmcl.px_store.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_store.p u64 
    callproc       &pc_genmcl.px_pop 
#13842: 
    retproc                   
End


Proc pc_genmcl.px_pushnc:
    param          pc_genmcl.px_pushnc.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_pushnc.p u64 
    callproc       &pc_genmcl.unimpl 
#13844: 
    retproc                   
End


Proc pc_genmcl.px_opnd:
    param          pc_genmcl.px_opnd.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_opnd.p u64 
    callproc       &pc_genmcl.unimpl 
#13846: 
    retproc                   
End


Proc pc_genmcl.px_type:
    param          pc_genmcl.px_type.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_type.p u64 
    callproc       &pc_genmcl.unimpl 
#13848: 
    retproc                   
End


Proc pc_genmcl.px_pushptroff:
    param          pc_genmcl.px_pushptroff.p u64 
    local          pc_genmcl.px_pushptroff.ax u64 
    local          pc_genmcl.px_pushptroff.bx u64 
    local          pc_genmcl.px_pushptroff.cx u64 
    local          pc_genmcl.px_pushptroff.fx u64 
    local          pc_genmcl.px_pushptroff.m i64 
    procentry                 
    push           pc_genmcl.px_pushptroff.p u64 
    push           3          
    pushptroff                u8 1 0
    pop            pc_genmcl.px_pushptroff.m i64 
    setargs                   1 0
    push           pc_genmcl.px_pushptroff.p u64 
    callfn         &pc_genmcl.do_addrmode u64 
    pop            pc_genmcl.px_pushptroff.cx u64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #13850     i64 
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           1          
    popptroff                 u8 1 0
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
#13850: 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_pushptroff.ax u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_pushptroff.m i64 
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #13851     i64 0
    push           3          i64 
    casejumpeq     #13852     i64 0
    push           2          i64 
    casejumpeq     #13853     i64 0
    push           4          i64 
    casejumpeq     #13854     i64 0
    push           5          i64 
    casejumpeq     #13855     i64 0
    push           6          i64 
    casejumpeq     #13856     i64 0
    popstack                  i64 
    jump           #13857     
#13851: 
    setargs                   3 0
    push           pc_genmcl.px_pushptroff.cx u64 
    push           pc_genmcl.px_pushptroff.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #13858     
#13852: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_x64 
    setargs                   2 0
    push           3          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_pushptroff.fx u64 
    setargs                   3 0
    push           pc_genmcl.px_pushptroff.cx u64 
    push           pc_genmcl.px_pushptroff.fx u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #13858     
#13853: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_x32 
    setargs                   2 0
    push           3          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_pushptroff.fx u64 
    setargs                   3 0
    setargs                   2 0
    push           4          i64 
    push           pc_genmcl.px_pushptroff.cx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           pc_genmcl.px_pushptroff.fx u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #13858     
#13854: 
    push           pc_genmcl.px_pushptroff.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_genmcl.px_pushptroff.cx u64 
    push           8          
    popptroff                 u8 1 0
    setargs                   3 0
    push           pc_genmcl.px_pushptroff.cx u64 
    push           pc_genmcl.px_pushptroff.ax u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_genmcl.px_pushptroff.m i64 
    pushptroff                u8 1 0
    jumpfalse      #13859     i64 
    push           19         i64 
    resetmult                 
    jump           #13860     
#13859: 
    push           20         i64 
    endmult                   
#13860: 
    callproc       &pc_libmcl.genmc 
    jump           #13858     
#13855: 
    setargs                   0 0
    callfn         &pc_stackmcl.genopnd_d64 u64 
    pop            pc_genmcl.px_pushptroff.bx u64 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   2 0
    push           3          i64 
    push           2          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   3 0
    setargs                   3 0
    push           8          i64 
    push           8          i64 
    push           pc_genmcl.px_pushptroff.cx u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           pc_genmcl.px_pushptroff.bx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_pushptroff.cx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           pc_genmcl.px_pushptroff.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.setwideopnd 
    jump           #13861     
    jump           #13858     
#13856: 
    setargs                   3 0
    push           pc_genmcl.px_pushptroff.cx u64 
    push           pc_genmcl.px_pushptroff.ax u64 
    push           15         i64 
    callproc       &pc_libmcl.genmc 
    jump           #13858     
#13857: 
    setargs                   2 0
    push           pc_genmcl.px_pushptroff.m i64 
    push           "pushptroff" u64 
    callproc       &pc_libmcl.merrort 
#13858: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#13861: 
    retproc                   
End


Proc pc_genmcl.px_popptroff:
    param          pc_genmcl.px_popptroff.p u64 
    local          pc_genmcl.px_popptroff.ax u64 
    local          pc_genmcl.px_popptroff.bx u64 
    local          pc_genmcl.px_popptroff.cx u64 
    local          pc_genmcl.px_popptroff.px u64 
    local          pc_genmcl.px_popptroff.m i64 
    procentry                 
    push           pc_genmcl.px_popptroff.p u64 
    push           3          
    pushptroff                u8 1 0
    pop            pc_genmcl.px_popptroff.m i64 
    setargs                   1 0
    push           pc_genmcl.px_popptroff.p u64 
    callfn         &pc_genmcl.do_addrmode u64 
    pop            pc_genmcl.px_popptroff.px u64 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_popptroff.cx u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_popptroff.m i64 
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #13863     i64 0
    push           3          i64 
    casejumpeq     #13864     i64 0
    push           2          i64 
    casejumpeq     #13865     i64 0
    push           4          i64 
    casejumpeq     #13866     i64 0
    push           5          i64 
    casejumpeq     #13867     i64 0
    push           6          i64 
    casejumpeq     #13868     i64 0
    popstack                  i64 
    jump           #13869     
#13863: 
    setargs                   3 0
    push           pc_genmcl.px_popptroff.cx u64 
    push           pc_genmcl.px_popptroff.px u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #13870     
#13864: 
    setargs                   3 0
    push           pc_genmcl.px_popptroff.cx u64 
    push           pc_genmcl.px_popptroff.px u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #13870     
#13865: 
    setargs                   3 0
    push           pc_genmcl.px_popptroff.cx u64 
    setargs                   2 0
    push           4          i64 
    push           pc_genmcl.px_popptroff.px u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    jump           #13870     
#13866: 
    push           pc_genmcl.px_popptroff.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_genmcl.px_popptroff.px u64 
    push           8          
    popptroff                 u8 1 0
    setargs                   3 0
    setargs                   2 0
    push           pc_genmcl.px_popptroff.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_genmcl.px_popptroff.cx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           pc_genmcl.px_popptroff.px u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #13870     
#13867: 
    setargs                   3 0
    push           pc_genmcl.px_popptroff.cx u64 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_popptroff.px u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           4          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    setargs                   3 0
    push           8          i64 
    push           8          i64 
    push           pc_genmcl.px_popptroff.px u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #13870     
#13868: 
    setargs                   3 0
    push           pc_genmcl.px_popptroff.p u64 
    push           4          
    pushptroff                i32 1 0
    setargs                   2 0
    push           0          i64 
    push           pc_genmcl.px_popptroff.cx u64 
    callfn         &pc_libmcl.makeopndind u64 
    push           pc_genmcl.px_popptroff.px u64 
    callproc       &pc_libmcl.copyblock 
    jump           #13870     
#13869: 
    setargs                   2 0
    push           pc_genmcl.px_popptroff.m i64 
    push           "popptroff " u64 
    callproc       &pc_libmcl.merrort 
#13870: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    push           pc_genmcl.px_popptroff.p u64 
    push           1          
    pushptroff                u8 1 0
    push           32         i64 
    jumpne         #13871     i64 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_popptroff.m i64 
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #13872     i64 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#13872: 
#13871: 
#13873: 
    retproc                   
End


Proc pc_genmcl.px_storeptroff:
    param          pc_genmcl.px_storeptroff.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_storeptroff.p u64 
    callproc       &pc_genmcl.px_popptroff 
#13875: 
    retproc                   
End


Proc pc_genmcl.px_pushptr:
    param          pc_genmcl.px_pushptr.p u64 
    local          pc_genmcl.px_pushptr.ax u64 
    local          pc_genmcl.px_pushptr.px u64 
    local          pc_genmcl.px_pushptr.cx u64 
    local          pc_genmcl.px_pushptr.fx u64 
    local          pc_genmcl.px_pushptr.bx u64 
    local          pc_genmcl.px_pushptr.m i64 
    procentry                 
    push           pc_genmcl.px_pushptr.p u64 
    push           3          
    pushptroff                u8 1 0
    pop            pc_genmcl.px_pushptr.m i64 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.isregvaropnd i64 
    jumpfalse      #13877     i64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_pushptr.m i64 
    pushptroff                u8 1 0
    push           6          i64 
    jumpeq         #13877     i64 
    setargs                   3 0
    push           0          i64 
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenireg u64 
    pop            pc_genmcl.px_pushptr.cx u64 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_genmcl.makeregopnd u64 
    pop            pc_genmcl.px_pushptr.ax u64 
    jump           #13878     
#13877: 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           11         i64 
    jumpne         #13879     i64 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    pop            pc_genmcl.px_pushptr.cx u64 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_genmcl.makeregopnd u64 
    pop            pc_genmcl.px_pushptr.ax u64 
    jump           #13878     
#13879: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_pushptr.ax u64 
    setargs                   2 0
    push           0          i64 
    push           pc_genmcl.px_pushptr.ax u64 
    callfn         &pc_libmcl.makeopndind u64 
    pop            pc_genmcl.px_pushptr.cx u64 
#13878: 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_pushptr.m i64 
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #13880     i64 0
    push           4          i64 
    casejumpeq     #13881     i64 0
    push           3          i64 
    casejumpeq     #13882     i64 0
    push           2          i64 
    casejumpeq     #13883     i64 0
    push           5          i64 
    casejumpeq     #13884     i64 0
    push           6          i64 
    casejumpeq     #13885     i64 0
    popstack                  i64 
    jump           #13886     
#13880: 
    setargs                   3 0
    push           pc_genmcl.px_pushptr.cx u64 
    push           pc_genmcl.px_pushptr.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #13887     
#13881: 
    setargs                   3 0
    setargs                   2 0
    push           pc_genmcl.px_pushptr.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_genmcl.px_pushptr.cx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           pc_genmcl.px_pushptr.ax u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_genmcl.px_pushptr.m i64 
    pushptroff                u8 1 0
    jumpfalse      #13888     i64 
    push           19         i64 
    resetmult                 
    jump           #13889     
#13888: 
    push           20         i64 
    endmult                   
#13889: 
    callproc       &pc_libmcl.genmc 
    jump           #13887     
#13882: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_x64 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_pushptr.fx u64 
    setargs                   3 0
    push           pc_genmcl.px_pushptr.cx u64 
    push           pc_genmcl.px_pushptr.fx u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #13887     
#13883: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_x32 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_pushptr.fx u64 
    setargs                   3 0
    setargs                   2 0
    push           4          i64 
    push           pc_genmcl.px_pushptr.cx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           pc_genmcl.px_pushptr.fx u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #13887     
#13884: 
    setargs                   0 0
    callfn         &pc_stackmcl.genopnd_d64 u64 
    pop            pc_genmcl.px_pushptr.bx u64 
    setargs                   3 0
    push           pc_genmcl.px_pushptr.cx u64 
    push           pc_genmcl.px_pushptr.bx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   3 0
    push           0          i64 
    push           8          i64 
    push           pc_genmcl.px_pushptr.cx u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           pc_genmcl.px_pushptr.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.setwideopnd 
    jump           #13887     
#13885: 
    jump           #13887     
#13886: 
    setargs                   1 0
    push           "****PUSHPTR" u64 
    callproc       &pc_libmcl.mgencomment 
#13887: 
#13890: 
    retproc                   
End


Proc pc_genmcl.px_popptr:
    param          pc_genmcl.px_popptr.p u64 
    local          pc_genmcl.px_popptr.ax u64 
    local          pc_genmcl.px_popptr.bx u64 
    local          pc_genmcl.px_popptr.cx u64 
    local          pc_genmcl.px_popptr.px u64 
    local          pc_genmcl.px_popptr.m i64 
    procentry                 
    push           pc_genmcl.px_popptr.p u64 
    push           3          
    pushptroff                u8 1 0
    pop            pc_genmcl.px_popptr.m i64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_popptr.bx u64 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.isregvaropnd i64 
    jumpfalse      #13892     i64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_popptr.m i64 
    pushptroff                u8 1 0
    push           6          i64 
    jumpeq         #13892     i64 
    setargs                   3 0
    push           0          i64 
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenireg u64 
    pop            pc_genmcl.px_popptr.ax u64 
    jump           #13893     
#13892: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.px_popptr.ax u64 
#13893: 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_popptr.m i64 
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #13894     i64 0
    push           4          i64 
    casejumpeq     #13895     i64 0
    push           3          i64 
    casejumpeq     #13896     i64 0
    push           2          i64 
    casejumpeq     #13897     i64 0
    push           5          i64 
    casejumpeq     #13898     i64 0
    push           6          i64 
    casejumpeq     #13899     i64 0
    popstack                  i64 
    jump           #13900     
#13894: 
    setargs                   3 0
    push           pc_genmcl.px_popptr.bx u64 
    push           pc_genmcl.px_popptr.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #13901     
#13895: 
    setargs                   3 0
    setargs                   2 0
    push           &pc_tables.psize 
    push           pc_genmcl.px_popptr.m i64 
    pushptroff                u8 1 0
    push           pc_genmcl.px_popptr.bx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    setargs                   2 0
    push           &pc_tables.psize 
    push           pc_genmcl.px_popptr.m i64 
    pushptroff                u8 1 0
    push           pc_genmcl.px_popptr.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #13901     
#13896: 
    setargs                   3 0
    push           pc_genmcl.px_popptr.bx u64 
    push           pc_genmcl.px_popptr.ax u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #13901     
#13897: 
    setargs                   3 0
    push           pc_genmcl.px_popptr.bx u64 
    setargs                   2 0
    push           4          i64 
    push           pc_genmcl.px_popptr.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    jump           #13901     
#13898: 
    setargs                   3 0
    push           pc_genmcl.px_popptr.bx u64 
    push           pc_genmcl.px_popptr.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    setargs                   3 0
    push           0          i64 
    push           8          i64 
    push           pc_genmcl.px_popptr.ax u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #13901     
#13899: 
    setargs                   3 0
    push           pc_genmcl.px_popptr.p u64 
    push           4          
    pushptroff                i32 1 0
    setargs                   2 0
    push           0          i64 
    push           pc_genmcl.px_popptr.bx u64 
    callfn         &pc_libmcl.makeopndind u64 
    push           pc_genmcl.px_popptr.ax u64 
    callproc       &pc_libmcl.copyblock 
    jump           #13901     
#13900: 
    setargs                   2 0
    push           pc_genmcl.px_popptr.m i64 
    push           "popptr "  u64 
    callproc       &pc_libmcl.merrort 
#13901: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    push           pc_genmcl.px_popptr.p u64 
    push           1          
    pushptroff                u8 1 0
    push           35         i64 
    jumpne         #13902     i64 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_popptr.m i64 
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #13903     i64 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#13903: 
#13902: 
#13904: 
    retproc                   
End


Proc pc_genmcl.px_storeptr:
    param          pc_genmcl.px_storeptr.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_storeptr.p u64 
    callproc       &pc_genmcl.px_popptr 
#13906: 
    retproc                   
End


Proc pc_genmcl.px_dotindex:
    param          pc_genmcl.px_dotindex.p u64 
    local          pc_genmcl.px_dotindex.ax u64 
    local          pc_genmcl.px_dotindex.i i64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpeq         #13908     i64 
    setargs                   2 0
    push           ""         u64 
    push           "dotix i not imm" u64 
    callproc       &pc_libmcl.merror 
#13908: 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_dotindex.ax u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    pop            pc_genmcl.px_dotindex.i i64 
    push           pc_genmcl.px_dotindex.i i64 
    jumpfalse      #13909     i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_dotindex.i i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_dotindex.ax u64 
    push           46         i64 
    callproc       &pc_libmcl.genmc 
#13909: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_libmcl.mgenint u64 
    setargs                   2 0
    push           4          i64 
    push           pc_genmcl.px_dotindex.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           39         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#13910: 
    retproc                   
End


Proc pc_genmcl.px_popdotindex:
    param          pc_genmcl.px_popdotindex.p u64 
    local          pc_genmcl.px_popdotindex.ax u64 
    local          pc_genmcl.px_popdotindex.bx u64 
    local          pc_genmcl.px_popdotindex.cx u64 
    local          pc_genmcl.px_popdotindex.rx u64 
    local          pc_genmcl.px_popdotindex.mx u64 
    local          pc_genmcl.px_popdotindex.i i64 
    local          pc_genmcl.px_popdotindex.size i64 
    local          pc_genmcl.px_popdotindex.cxfmt i64 
    local          pc_genmcl.px_popdotindex.rhs i64 
    local          pc_genmcl.px_popdotindex.axoffset i64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           3          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #13912     i64 
    push           pci_mcl.pclstack u64 
    push           3          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    pop            pc_genmcl.px_popdotindex.rhs i64 
    push           0          u64 
    pop            pc_genmcl.px_popdotindex.cx u64 
    jump           #13913     
#13912: 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_popdotindex.cx u64 
#13913: 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpeq         #13914     i64 
    setargs                   2 0
    push           ""         u64 
    push           "popdotix i not imm" u64 
    callproc       &pc_libmcl.merror 
#13914: 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    pop            pc_genmcl.px_popdotindex.i i64 
    push           pc_genmcl.px_popdotindex.p u64 
    push           4          
    pushptroff                i32 1 0
    pop            pc_genmcl.px_popdotindex.size i64 
    push           2          i64 
    pop            pc_genmcl.px_popdotindex.axoffset i64 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_d64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_popdotindex.rx u64 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_d64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_popdotindex.mx u64 
    setargs                   2 0
    push           pc_genmcl.px_popdotindex.size i64 
    push           pc_genmcl.px_popdotindex.axoffset i64 
    push           2          i64 
    add                       i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.px_popdotindex.ax u64 
    setargs                   3 0
    push           pc_genmcl.px_popdotindex.ax u64 
    push           pc_genmcl.px_popdotindex.rx u64 
    startmult                 
    push           pc_genmcl.px_popdotindex.size i64 
    push           8          i64 
    jumpne         #13915     i64 
    push           12         i64 
    resetmult                 
    jump           #13916     
#13915: 
    push           20         i64 
    endmult                   
#13916: 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    push           pc_genmcl.px_popdotindex.i i64 
    shl                       i64 
    inot                      i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_popdotindex.mx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.px_popdotindex.mx u64 
    push           pc_genmcl.px_popdotindex.rx u64 
    push           39         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_genmcl.px_popdotindex.cx u64 
    jumpfalse      #13917     u64 
    push           pc_genmcl.px_popdotindex.i i64 
    jumpfalse      #13918     i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_popdotindex.i i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_popdotindex.cx u64 
    push           44         i64 
    callproc       &pc_libmcl.genmc 
#13918: 
    setargs                   3 0
    push           pc_genmcl.px_popdotindex.cx u64 
    push           pc_genmcl.px_popdotindex.rx u64 
    push           40         i64 
    callproc       &pc_libmcl.genmc 
    jump           #13919     
#13917: 
    push           pc_genmcl.px_popdotindex.rhs i64 
    push           0          i64 
    jumpeq         #13920     i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    push           pc_genmcl.px_popdotindex.i i64 
    shl                       i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_popdotindex.rx u64 
    push           40         i64 
    callproc       &pc_libmcl.genmc 
#13920: 
#13919: 
    setargs                   3 0
    setargs                   2 0
    push           pc_genmcl.px_popdotindex.size i64 
    push           pc_genmcl.px_popdotindex.rx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           pc_genmcl.px_popdotindex.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    push           pc_genmcl.px_popdotindex.p u64 
    push           1          
    pushptroff                u8 1 0
    push           38         i64 
    jumpne         #13921     i64 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#13921: 
#13922: 
    retproc                   
End


Proc pc_genmcl.px_storedotindex:
    param          pc_genmcl.px_storedotindex.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_storedotindex.p u64 
    callproc       &pc_genmcl.px_popdotindex 
#13924: 
    retproc                   
End


Proc pc_genmcl.px_dotslice:
    param          pc_genmcl.px_dotslice.p u64 
    local          pc_genmcl.px_dotslice.ax u64 
    local          pc_genmcl.px_dotslice.mx u64 
    local          pc_genmcl.px_dotslice.mx4 u64 
    local          pc_genmcl.px_dotslice.i i64 
    local          pc_genmcl.px_dotslice.j i64 
    local          pc_genmcl.px_dotslice.mask u64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #13926     i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpeq         #13927     i64 
#13926: 
    setargs                   2 0
    push           ""         u64 
    push           "dotslice i/j not imm" u64 
    callproc       &pc_libmcl.merror 
#13927: 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_dotslice.ax u64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    pop            pc_genmcl.px_dotslice.i i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    pop            pc_genmcl.px_dotslice.j i64 
    push           pc_genmcl.px_dotslice.i i64 
    jumpfalse      #13928     i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_dotslice.i i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_dotslice.ax u64 
    push           46         i64 
    callproc       &pc_libmcl.genmc 
#13928: 
    push           -1         u64 
    push           pc_genmcl.px_dotslice.j i64 
    push           pc_genmcl.px_dotslice.i i64 
    sub                       i64 
    push           1          i64 
    add                       i64 
    shl                       u64 
    inot                      u64 
    pop            pc_genmcl.px_dotslice.mask u64 
    push           pc_genmcl.px_dotslice.mask u64 
    push           2147483647 u64 
    jumpgt         #13929     u64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_dotslice.mask i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_dotslice.ax u64 
    push           39         i64 
    callproc       &pc_libmcl.genmc 
    jump           #13930     
#13929: 
    setargs                   1 0
    push           2          i64 
    callfn         &pc_genmcl.makeregopnd u64 
    pop            pc_genmcl.px_dotslice.mx u64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_dotslice.mask i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_dotslice.mx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.px_dotslice.mx u64 
    push           pc_genmcl.px_dotslice.ax u64 
    push           39         i64 
    callproc       &pc_libmcl.genmc 
#13930: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#13931: 
    retproc                   
End


Proc pc_genmcl.px_popdotslice:
    param          pc_genmcl.px_popdotslice.p u64 
    local          pc_genmcl.px_popdotslice.ax u64 
    local          pc_genmcl.px_popdotslice.rx u64 
    local          pc_genmcl.px_popdotslice.mx u64 
    local          pc_genmcl.px_popdotslice.mx4 u64 
    local          pc_genmcl.px_popdotslice.dx u64 
    local          pc_genmcl.px_popdotslice.i i64 
    local          pc_genmcl.px_popdotslice.j i64 
    local          pc_genmcl.px_popdotslice.size i64 
    local          pc_genmcl.px_popdotslice.mask u64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #13933     i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpeq         #13934     i64 
#13933: 
    setargs                   2 0
    push           ""         u64 
    push           "popdotslice i/j not imm" u64 
    callproc       &pc_libmcl.merror 
#13934: 
    setargs                   2 0
    push           8          i64 
    push           4          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_popdotslice.dx u64 
    push           pc_genmcl.px_popdotslice.p u64 
    push           4          
    pushptroff                i32 1 0
    pop            pc_genmcl.px_popdotslice.size i64 
    setargs                   2 0
    push           pc_genmcl.px_popdotslice.size i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.px_popdotslice.ax u64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    pop            pc_genmcl.px_popdotslice.i i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    pop            pc_genmcl.px_popdotslice.j i64 
    setargs                   1 0
    push           2          i64 
    callfn         &pc_genmcl.makeregopnd u64 
    pop            pc_genmcl.px_popdotslice.mx u64 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_genmcl.makeregopnd u64 
    pop            pc_genmcl.px_popdotslice.rx u64 
    setargs                   3 0
    push           pc_genmcl.px_popdotslice.p u64 
    push           3          
    pushptroff                u8 1 0
    push           pc_genmcl.px_popdotslice.ax u64 
    push           pc_genmcl.px_popdotslice.rx u64 
    callproc       &pc_genmcl.loadtoreg 
    push           -1         u64 
    push           pc_genmcl.px_popdotslice.j i64 
    push           pc_genmcl.px_popdotslice.i i64 
    sub                       i64 
    push           1          i64 
    add                       i64 
    shl                       u64 
    inot                      u64 
    push           pc_genmcl.px_popdotslice.i i64 
    shl                       u64 
    inot                      u64 
    pop            pc_genmcl.px_popdotslice.mask u64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_popdotslice.mask i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_popdotslice.mx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_genmcl.px_popdotslice.i i64 
    jumpfalse      #13935     i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_popdotslice.i i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_popdotslice.dx u64 
    push           44         i64 
    callproc       &pc_libmcl.genmc 
#13935: 
    setargs                   3 0
    push           pc_genmcl.px_popdotslice.mx u64 
    push           pc_genmcl.px_popdotslice.rx u64 
    push           39         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.px_popdotslice.dx u64 
    push           pc_genmcl.px_popdotslice.rx u64 
    push           40         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.px_popdotslice.size i64 
    push           pc_genmcl.px_popdotslice.rx u64 
    push           pc_genmcl.px_popdotslice.ax u64 
    callproc       &pc_genmcl.storefromreg 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    push           pc_genmcl.px_popdotslice.p u64 
    push           1          
    pushptroff                u8 1 0
    push           41         i64 
    jumpne         #13936     i64 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#13936: 
#13937: 
    retproc                   
End


Proc pc_genmcl.px_storedotslice:
    param          pc_genmcl.px_storedotslice.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_storedotslice.p u64 
    callproc       &pc_genmcl.px_popdotslice 
#13939: 
    retproc                   
End


Proc pc_genmcl.px_popstack:
    param          pc_genmcl.px_popstack.p u64 
    procentry                 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#13941: 
    retproc                   
End


Proc pc_genmcl.px_eval:
    param          pc_genmcl.px_eval.p u64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           4          
    pushptroff                u8 1 0
    push           76         i64 
    jumpne         #13943     i64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callproc       &pc_stackmcl.genopnd_ld 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callproc       &pc_stackmcl.genopnd_ld 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #13944     
#13943: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callproc       &pc_stackmcl.genopnd_ld 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#13944: 
#13945: 
    retproc                   
End


Proc pc_genmcl.px_callproc:
    param          pc_genmcl.px_callproc.p u64 
    local          pc_genmcl.px_callproc.nslots i64 
    local          pc_genmcl.px_callproc.nargs i64 
    local          pc_genmcl.px_callproc.av_1 i64 
    procentry                 
    push           &pci_mcl.callargs 
    push           pci_mcl.ncalldepth i64 
    pushptroff                u8 1 -1
    pop            pc_genmcl.px_callproc.nargs i64 
    setargs                   2 0
    push           0          i64 
    push           pc_genmcl.px_callproc.p u64 
    callfn         &pc_genmcl.do_pushparams i64 
    pop            pc_genmcl.px_callproc.nslots i64 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_callproc.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmemaddr u64 
    push           22         i64 
    callproc       &pc_libmcl.genmc 
#13947: 
    push           pc_genmcl.px_callproc.nargs i64 
    pop            pc_genmcl.px_callproc.av_1 i64 
    push           pc_genmcl.px_callproc.av_1 i64 
    push           0          i64 
    jumple         #13948     i64 
#13949: 
    setargs                   0 0
    callproc       &pc_stackmcl.poparg 
#13950: 
    to             #13949     
    opnd           pc_genmcl.px_callproc.av_1 
#13948: 
    setargs                   1 0
    push           pc_genmcl.px_callproc.nslots i64 
    callproc       &pc_stackmcl.popslots 
#13951: 
    retproc                   
End


Proc pc_genmcl.px_callprocptr:
    param          pc_genmcl.px_callprocptr.p u64 
    local          pc_genmcl.px_callprocptr.nslots i64 
    local          pc_genmcl.px_callprocptr.nargs i64 
    local          pc_genmcl.px_callprocptr.av_1 i64 
    procentry                 
    push           &pci_mcl.callargs 
    push           pci_mcl.ncalldepth i64 
    pushptroff                u8 1 -1
    pop            pc_genmcl.px_callprocptr.nargs i64 
    setargs                   2 0
    push           1          i64 
    push           pc_genmcl.px_callprocptr.p u64 
    callfn         &pc_genmcl.do_pushparams i64 
    pop            pc_genmcl.px_callprocptr.nslots i64 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    push           22         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#13953: 
    push           pc_genmcl.px_callprocptr.nargs i64 
    pop            pc_genmcl.px_callprocptr.av_1 i64 
    push           pc_genmcl.px_callprocptr.av_1 i64 
    push           0          i64 
    jumple         #13954     i64 
#13955: 
    setargs                   0 0
    callproc       &pc_stackmcl.poparg 
#13956: 
    to             #13955     
    opnd           pc_genmcl.px_callprocptr.av_1 
#13954: 
    setargs                   1 0
    push           pc_genmcl.px_callprocptr.nslots i64 
    callproc       &pc_stackmcl.popslots 
#13957: 
    retproc                   
End


Proc pc_genmcl.px_retproc:
    param          pc_genmcl.px_retproc.p u64 
    local          pc_genmcl.px_retproc.offset i64 
    local          pc_genmcl.px_retproc.i i64 
    procentry                 
    push           pci_mcl.dsaveoffset i64 
    pop            pc_genmcl.px_retproc.offset i64 
#13959: 
    push           1          i64 
    pop            pc_genmcl.px_retproc.i i64 
    push           pci_mcl.ndsaveregs i64 
    push           1          i64 
    jumplt         #13960     i64 
#13961: 
    setargs                   3 0
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           8          i64 
    push           pc_genmcl.px_retproc.offset i64 
    push           1          i64 
    push           0          i64 
    push           15         i64 
    callfn         &pc_libmcl.mgenindex u64 
    setargs                   2 0
    push           8          i64 
    push           &pci_mcl.dsaveregs 
    push           pc_genmcl.px_retproc.i i64 
    pushptroff                i64 8 -8
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_genmcl.px_retproc.offset 
    push           8          i64 
    addto                     i64 
#13962: 
    forup          #13961     i64 1
    opnd           pc_genmcl.px_retproc.i 
    opnd           pci_mcl.ndsaveregs 
#13960: 
    push           pci_mcl.xsaveoffset i64 
    pop            pc_genmcl.px_retproc.offset i64 
#13963: 
    push           1          i64 
    pop            pc_genmcl.px_retproc.i i64 
    push           pci_mcl.nxsaveregs i64 
    push           1          i64 
    jumplt         #13964     i64 
#13965: 
    setargs                   3 0
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           8          i64 
    push           pc_genmcl.px_retproc.offset i64 
    push           1          i64 
    push           0          i64 
    push           15         i64 
    callfn         &pc_libmcl.mgenindex u64 
    setargs                   2 0
    push           8          i64 
    push           &pci_mcl.xsaveregs 
    push           pc_genmcl.px_retproc.i i64 
    pushptroff                i64 8 -8
    callfn         &pc_libmcl.mgenxreg u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_genmcl.px_retproc.offset 
    push           8          i64 
    addto                     i64 
#13966: 
    forup          #13965     i64 1
    opnd           pc_genmcl.px_retproc.i 
    opnd           pci_mcl.nxsaveregs 
#13964: 
    push           pci_mcl.needstackframe i64 
    jumpfalse      #13967     i64 
    push           pci_mcl.framebytes i64 
    jumpfalse      #13968     i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.framebytes i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pci_mcl.dstackopnd u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
#13968: 
    setargs                   3 0
    push           0          u64 
    push           pci_mcl.dframeopnd u64 
    push           14         i64 
    callproc       &pc_libmcl.genmc 
    jump           #13969     
#13967: 
    push           pci_mcl.needshadow32 i64 
    jumpfalse      #13970     i64 
    setargs                   1 0
    push           pci_mcl.needshadow32 i64 
    callproc       &pc_stackmcl.popstack 
#13970: 
#13969: 
    push           pci_mcl.needshadow48 i64 
    jumpfalse      #13971     i64 
    setargs                   1 0
    push           48         i64 
    callproc       &pc_stackmcl.popstack 
#13971: 
#13972: 
    push           pci_mcl.ndsavepush i64 
    pop            pc_genmcl.px_retproc.i i64 
    push           pc_genmcl.px_retproc.i i64 
    push           1          i64 
    jumplt         #13973     i64 
#13974: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           &pci_mcl.dsaveregs 
    push           pc_genmcl.px_retproc.i i64 
    pushptroff                i64 8 -8
    callfn         &pc_libmcl.mgenreg u64 
    push           14         i64 
    callproc       &pc_libmcl.genmc 
#13975: 
    fordown        #13974     i64 1
    opnd           pc_genmcl.px_retproc.i 
    opnd           1          
#13973: 
    setargs                   3 0
    push           0          u64 
    push           0          u64 
    push           23         i64 
    callproc       &pc_libmcl.genmc 
#13976: 
    retproc                   
End


Proc pc_genmcl.px_callfn:
    param          pc_genmcl.px_callfn.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_callfn.p u64 
    callproc       &pc_genmcl.px_callproc 
    setargs                   1 0
    push           pc_genmcl.px_callfn.p u64 
    callproc       &pc_genmcl.dogetretvalue 
#13978: 
    retproc                   
End


Proc pc_genmcl.px_callfnptr:
    param          pc_genmcl.px_callfnptr.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_callfnptr.p u64 
    callproc       &pc_genmcl.px_callprocptr 
    setargs                   1 0
    push           pc_genmcl.px_callfnptr.p u64 
    callproc       &pc_genmcl.dogetretvalue 
#13980: 
    retproc                   
End


Proc pc_genmcl.px_retfn:
    param          pc_genmcl.px_retfn.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_retfn.p u64 
    callproc       &pc_genmcl.px_retproc 
#13982: 
    retproc                   
End


Proc pc_genmcl.px_jump:
    param          pc_genmcl.px_jump.p u64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_jump.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    push           26         i64 
    callproc       &pc_libmcl.genmc 
#13984: 
    retproc                   
End


Proc pc_genmcl.px_jumpptr:
    param          pc_genmcl.px_jumpptr.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_jumpptr.p u64 
    callproc       &pc_genmcl.unimpl 
#13986: 
    retproc                   
End


Proc pc_genmcl.px_jumpeq:
    param          pc_genmcl.px_jumpeq.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_jumpeq.p u64 
    callproc       &pc_genmcl.dojumpcc 
#13988: 
    retproc                   
End


Proc pc_genmcl.px_jumpne:
    param          pc_genmcl.px_jumpne.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_jumpne.p u64 
    callproc       &pc_genmcl.dojumpcc 
#13990: 
    retproc                   
End


Proc pc_genmcl.px_jumplt:
    param          pc_genmcl.px_jumplt.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_jumplt.p u64 
    callproc       &pc_genmcl.dojumpcc 
#13992: 
    retproc                   
End


Proc pc_genmcl.px_jumple:
    param          pc_genmcl.px_jumple.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_jumple.p u64 
    callproc       &pc_genmcl.dojumpcc 
#13994: 
    retproc                   
End


Proc pc_genmcl.px_jumpge:
    param          pc_genmcl.px_jumpge.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_jumpge.p u64 
    callproc       &pc_genmcl.dojumpcc 
#13996: 
    retproc                   
End


Proc pc_genmcl.px_jumpgt:
    param          pc_genmcl.px_jumpgt.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_jumpgt.p u64 
    callproc       &pc_genmcl.dojumpcc 
#13998: 
    retproc                   
End


Proc pc_genmcl.px_jumptrue:
    param          pc_genmcl.px_jumptrue.p u64 
    procentry                 
    setargs                   2 0
    push           5          i64 
    push           pc_genmcl.px_jumptrue.p u64 
    callproc       &pc_genmcl.dojumptruefalse 
#14000: 
    retproc                   
End


Proc pc_genmcl.px_jumpfalse:
    param          pc_genmcl.px_jumpfalse.p u64 
    procentry                 
    setargs                   2 0
    push           4          i64 
    push           pc_genmcl.px_jumpfalse.p u64 
    callproc       &pc_genmcl.dojumptruefalse 
#14002: 
    retproc                   
End


Proc pc_genmcl.px_jumpinrange:
    param          pc_genmcl.px_jumpinrange.p u64 
    local          pc_genmcl.px_jumpinrange.ax u64 
    local          pc_genmcl.px_jumpinrange.bx u64 
    local          pc_genmcl.px_jumpinrange.cx u64 
    local          pc_genmcl.px_jumpinrange.lx u64 
    local          pc_genmcl.px_jumpinrange.nolx u64 
    local          pc_genmcl.px_jumpinrange.nolab i64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_jumpinrange.ax u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_jumpinrange.bx u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_jumpinrange.cx u64 
    setargs                   1 0
    push           pc_genmcl.px_jumpinrange.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    pop            pc_genmcl.px_jumpinrange.lx u64 
    setargs                   3 0
    push           pc_genmcl.px_jumpinrange.bx u64 
    push           pc_genmcl.px_jumpinrange.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    setargs                   0 0
    callfn         &pc_libmcl.mcreatefwdlabel i64 
    store          pc_genmcl.px_jumpinrange.nolab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    pop            pc_genmcl.px_jumpinrange.nolx u64 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.px_jumpinrange.nolx u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_genmcl.px_jumpinrange.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #14004     i64 
    push           12         i64 
    resetmult                 
    jump           #14005     
#14004: 
    push           2          i64 
    endmult                   
#14005: 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.px_jumpinrange.cx u64 
    push           pc_genmcl.px_jumpinrange.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.px_jumpinrange.lx u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_genmcl.px_jumpinrange.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #14006     i64 
    push           14         i64 
    resetmult                 
    jump           #14007     
#14006: 
    push           6          i64 
    endmult                   
#14007: 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   1 0
    push           pc_genmcl.px_jumpinrange.nolab i64 
    callproc       &pc_libmcl.mdefinefwdlabel 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#14008: 
    retproc                   
End


Proc pc_genmcl.px_jumpnotinrange:
    param          pc_genmcl.px_jumpnotinrange.p u64 
    local          pc_genmcl.px_jumpnotinrange.ax u64 
    local          pc_genmcl.px_jumpnotinrange.bx u64 
    local          pc_genmcl.px_jumpnotinrange.cx u64 
    local          pc_genmcl.px_jumpnotinrange.lx u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_jumpnotinrange.ax u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_jumpnotinrange.bx u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_jumpnotinrange.cx u64 
    setargs                   1 0
    push           pc_genmcl.px_jumpnotinrange.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    pop            pc_genmcl.px_jumpnotinrange.lx u64 
    setargs                   3 0
    push           pc_genmcl.px_jumpnotinrange.bx u64 
    push           pc_genmcl.px_jumpnotinrange.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.px_jumpnotinrange.lx u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_genmcl.px_jumpnotinrange.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #14010     i64 
    push           12         i64 
    resetmult                 
    jump           #14011     
#14010: 
    push           2          i64 
    endmult                   
#14011: 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.px_jumpnotinrange.cx u64 
    push           pc_genmcl.px_jumpnotinrange.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.px_jumpnotinrange.lx u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_genmcl.px_jumpnotinrange.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #14012     i64 
    push           15         i64 
    resetmult                 
    jump           #14013     
#14012: 
    push           7          i64 
    endmult                   
#14013: 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#14014: 
    retproc                   
End


Proc pc_genmcl.px_setjumpeq:
    param          pc_genmcl.px_setjumpeq.p u64 
    procentry                 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_setjumpeq.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    push           4          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#14016: 
    retproc                   
End


Proc pc_genmcl.px_setjumpeqx:
    param          pc_genmcl.px_setjumpeqx.p u64 
    procentry                 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_setjumpeqx.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    push           4          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#14018: 
    retproc                   
End


Proc pc_genmcl.px_setjumpne:
    param          pc_genmcl.px_setjumpne.p u64 
    procentry                 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_setjumpne.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    push           5          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#14020: 
    retproc                   
End


Proc pc_genmcl.px_seteq:
    param          pc_genmcl.px_seteq.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_seteq.p u64 
    callproc       &pc_genmcl.dosetcc 
#14022: 
    retproc                   
End


Proc pc_genmcl.px_setne:
    param          pc_genmcl.px_setne.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_setne.p u64 
    callproc       &pc_genmcl.dosetcc 
#14024: 
    retproc                   
End


Proc pc_genmcl.px_setlt:
    param          pc_genmcl.px_setlt.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_setlt.p u64 
    callproc       &pc_genmcl.dosetcc 
#14026: 
    retproc                   
End


Proc pc_genmcl.px_setle:
    param          pc_genmcl.px_setle.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_setle.p u64 
    callproc       &pc_genmcl.dosetcc 
#14028: 
    retproc                   
End


Proc pc_genmcl.px_setge:
    param          pc_genmcl.px_setge.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_setge.p u64 
    callproc       &pc_genmcl.dosetcc 
#14030: 
    retproc                   
End


Proc pc_genmcl.px_setgt:
    param          pc_genmcl.px_setgt.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_setgt.p u64 
    callproc       &pc_genmcl.dosetcc 
#14032: 
    retproc                   
End


Proc pc_genmcl.px_casejumpeq:
    param          pc_genmcl.px_casejumpeq.p u64 
    procentry                 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_casejumpeq.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    push           4          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#14034: 
    retproc                   
End


Proc pc_genmcl.px_selecteq:
    param          pc_genmcl.px_selecteq.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_selecteq.p u64 
    callproc       &pc_genmcl.doselectcc 
#14036: 
    retproc                   
End


Proc pc_genmcl.px_selectne:
    param          pc_genmcl.px_selectne.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_selectne.p u64 
    callproc       &pc_genmcl.doselectcc 
#14038: 
    retproc                   
End


Proc pc_genmcl.px_selectlt:
    param          pc_genmcl.px_selectlt.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_selectlt.p u64 
    callproc       &pc_genmcl.doselectcc 
#14040: 
    retproc                   
End


Proc pc_genmcl.px_selectle:
    param          pc_genmcl.px_selectle.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_selectle.p u64 
    callproc       &pc_genmcl.doselectcc 
#14042: 
    retproc                   
End


Proc pc_genmcl.px_selectge:
    param          pc_genmcl.px_selectge.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_selectge.p u64 
    callproc       &pc_genmcl.doselectcc 
#14044: 
    retproc                   
End


Proc pc_genmcl.px_selectgt:
    param          pc_genmcl.px_selectgt.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_selectgt.p u64 
    callproc       &pc_genmcl.doselectcc 
#14046: 
    retproc                   
End


Proc pc_genmcl.px_selecttrue:
    param          pc_genmcl.px_selecttrue.p u64 
    local          pc_genmcl.px_selecttrue.ax u64 
    local          pc_genmcl.px_selecttrue.bx u64 
    local          pc_genmcl.px_selecttrue.cx u64 
    local          pc_genmcl.px_selecttrue.dx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_selecttrue.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #14048     i64 
    setargs                   2 0
    push           pc_genmcl.px_selecttrue.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "selecttrue" u64 
    callproc       &pc_libmcl.merrort 
#14048: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_selecttrue.ax u64 
    setargs                   3 0
    push           pc_genmcl.px_selecttrue.ax u64 
    push           pc_genmcl.px_selecttrue.ax u64 
    push           42         i64 
    callproc       &pc_libmcl.genmc 
    push           1          i64 
    pop            pci_mcl.noxorclear u8 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_selecttrue.dx u64 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_selecttrue.cx u64 
    push           0          i64 
    pop            pci_mcl.noxorclear u8 
    setargs                   4 0
    push           pc_genmcl.px_selecttrue.dx u64 
    push           pc_genmcl.px_selecttrue.cx u64 
    push           4          i64 
    push           16         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#14049: 
    retproc                   
End


Proc pc_genmcl.px_to:
    param          pc_genmcl.px_to.p u64 
    local          pc_genmcl.px_to.q u64 
    local          pc_genmcl.px_to.ax u64 
    procentry                 
    push           pc_genmcl.px_to.p u64 
    push           1          i64 
    addrefoff                 u64 32 0
    store          pc_genmcl.currpcl u64 
    pop            pc_genmcl.px_to.q u64 
    setargs                   1 0
    push           pc_genmcl.px_to.q u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    pop            pc_genmcl.px_to.ax u64 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.px_to.ax u64 
    push           54         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_to.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    push           5          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
#14051: 
    retproc                   
End


Proc pc_genmcl.px_forup:
    param          pc_genmcl.px_forup.p u64 
    procentry                 
    setargs                   4 0
    push           14         i64 
    push           29         i64 
    push           53         i64 
    push           pc_genmcl.px_forup.p u64 
    callproc       &pc_genmcl.do_for 
#14053: 
    retproc                   
End


Proc pc_genmcl.px_fordown:
    param          pc_genmcl.px_fordown.p u64 
    procentry                 
    setargs                   4 0
    push           13         i64 
    push           30         i64 
    push           54         i64 
    push           pc_genmcl.px_fordown.p u64 
    callproc       &pc_genmcl.do_for 
#14055: 
    retproc                   
End


Proc pc_genmcl.px_swap:
    param          pc_genmcl.px_swap.p u64 
    local          pc_genmcl.px_swap.ax u64 
    local          pc_genmcl.px_swap.bx u64 
    local          pc_genmcl.px_swap.px u64 
    local          pc_genmcl.px_swap.qx u64 
    procentry                 
    setargs                   2 0
    push           pc_genmcl.px_swap.p u64 
    push           4          
    pushptroff                i32 1 0
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.px_swap.px u64 
    setargs                   2 0
    push           pc_genmcl.px_swap.p u64 
    push           4          
    pushptroff                i32 1 0
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.px_swap.qx u64 
    setargs                   2 0
    push           pc_genmcl.px_swap.p u64 
    push           4          
    pushptroff                i32 1 0
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_genmcl.px_swap.ax u64 
    setargs                   2 0
    push           pc_genmcl.px_swap.p u64 
    push           4          
    pushptroff                i32 1 0
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_genmcl.px_swap.bx u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_swap.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #14057     i64 0
    push           4          i64 
    casejumpeq     #14057     i64 0
    popstack                  i64 
    jump           #14058     
#14057: 
    setargs                   3 0
    push           pc_genmcl.px_swap.px u64 
    push           pc_genmcl.px_swap.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.px_swap.qx u64 
    push           pc_genmcl.px_swap.bx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.px_swap.ax u64 
    push           pc_genmcl.px_swap.qx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.px_swap.bx u64 
    push           pc_genmcl.px_swap.px u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #14059     
#14058: 
    setargs                   2 0
    push           pc_genmcl.px_swap.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "swap"     u64 
    callproc       &pc_libmcl.merrort 
#14059: 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_genmcl.px_swap.ax u64 
    push           10         
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_genmcl.px_swap.ax u64 
    push           10         
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_genmcl.px_swap.bx u64 
    push           10         
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_genmcl.px_swap.bx u64 
    push           10         
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#14060: 
    retproc                   
End


Proc pc_genmcl.px_makeslice:
    param          pc_genmcl.px_makeslice.p u64 
    procentry                 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.setwideopnd 
#14062: 
    retproc                   
End


Proc pc_genmcl.px_switch:
    param          pc_genmcl.px_switch.p u64 
    local          pc_genmcl.px_switch.minlab i64 
    local          pc_genmcl.px_switch.maxlab i64 
    local          pc_genmcl.px_switch.jumplab i64 
    local          pc_genmcl.px_switch.elselab i64 
    local          pc_genmcl.px_switch.ax u64 
    procentry                 
    push           pc_genmcl.px_switch.p u64 
    push           16         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_switch.minlab i64 
    push           pc_genmcl.px_switch.p u64 
    push           20         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_switch.maxlab i64 
    push           pc_genmcl.px_switch.p u64 
    push           8          
    pushptroff                i64 1 0
    pop            pc_genmcl.px_switch.jumplab i64 
    push           pc_genmcl.px_switch.p u64 
    push           1          i64 
    addrefoff                 u64 32 0
    pop            pc_genmcl.currpcl u64 
    push           pc_genmcl.currpcl u64 
    push           8          
    pushptroff                i64 1 0
    pop            pc_genmcl.px_switch.elselab i64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_switch.ax u64 
    push           pc_genmcl.px_switch.minlab i64 
    push           0          i64 
    jumpeq         #14064     i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_switch.minlab i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_switch.ax u64 
    push           30         i64 
    callproc       &pc_libmcl.genmc 
#14064: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_switch.maxlab i64 
    push           pc_genmcl.px_switch.minlab i64 
    sub                       i64 
    push           1          i64 
    add                       i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_switch.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_switch.elselab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           3          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           0          u64 
    setargs                   7 0
    push           0          u64 
    push           pc_genmcl.px_switch.jumplab i64 
    push           0          i64 
    push           0          i64 
    push           8          i64 
    push           pc_genmcl.px_switch.ax u64 
    push           10         
    pushptroff                u8 1 0
    push           0          i64 
    callfn         &pc_libmcl.mgenindex u64 
    push           26         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   2 0
    push           1          i64 
    push           73         i64 
    callproc       &pc_libmcl.setsegment 
#14065: 
    retproc                   
End


Proc pc_genmcl.px_switchlabel:
    param          pc_genmcl.px_switchlabel.p u64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_switchlabel.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    push           117        i64 
    callproc       &pc_libmcl.genmc 
#14067: 
    retproc                   
End


Proc pc_genmcl.px_endswitch:
    param          pc_genmcl.px_endswitch.p u64 
    procentry                 
    setargs                   2 0
    push           1          i64 
    push           67         i64 
    callproc       &pc_libmcl.setsegment 
#14069: 
    retproc                   
End


Proc pc_genmcl.px_clear:
    param          pc_genmcl.px_clear.p u64 
    local          pc_genmcl.px_clear.ax u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.px_clear.ax u64 
    setargs                   2 0
    push           pc_genmcl.px_clear.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_genmcl.px_clear.ax u64 
    callproc       &pc_libmcl.clearblock 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#14071: 
    retproc                   
End


Proc pc_genmcl.px_csegment:
    param          pc_genmcl.px_csegment.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_csegment.p u64 
    callproc       &pc_genmcl.unimpl 
#14073: 
    retproc                   
End


Proc pc_genmcl.px_isegment:
    param          pc_genmcl.px_isegment.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_isegment.p u64 
    callproc       &pc_genmcl.unimpl 
#14075: 
    retproc                   
End


Proc pc_genmcl.px_zsegment:
    param          pc_genmcl.px_zsegment.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_zsegment.p u64 
    callproc       &pc_genmcl.unimpl 
#14077: 
    retproc                   
End


Proc pc_genmcl.px_rosegment:
    param          pc_genmcl.px_rosegment.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_rosegment.p u64 
    callproc       &pc_genmcl.unimpl 
#14079: 
    retproc                   
End


Proc pc_genmcl.px_data:
    param          pc_genmcl.px_data.p u64 
    local          pc_genmcl.px_data.ax u64 
    local          pc_genmcl.px_data.opc i64 
    procentry                 
    push           pc_genmcl.px_data.p u64 
    pushptr                   u8 
    push           4          i64 
    casejumpeq     #14081     i64 0
    push           5          i64 
    casejumpeq     #14082     i64 0
    push           7          i64 
    casejumpeq     #14082     i64 0
    push           8          i64 
    casejumpeq     #14083     i64 0
    push           2          i64 
    casejumpeq     #14084     i64 0
    popstack                  i64 
    jump           #14085     
#14081: 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_data.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenint u64 
    pop            pc_genmcl.px_data.ax u64 
    jump           #14086     
#14082: 
    setargs                   2 0
    push           pc_genmcl.px_data.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_genmcl.px_data.p u64 
    push           8          
    pushptroff                r64 1 0
    callfn         &pc_libmcl.mgenrealimm u64 
    pop            pc_genmcl.px_data.ax u64 
    jump           #14086     
#14083: 
    setargs                   1 0
    setargs                   1 0
    push           pc_genmcl.px_data.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.getstringindex i64 
    callfn         &pc_libmcl.mgenlabel u64 
    pop            pc_genmcl.px_data.ax u64 
    jump           #14086     
#14084: 
    setargs                   1 0
    push           pc_genmcl.px_data.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmemaddr u64 
    pop            pc_genmcl.px_data.ax u64 
    push           pc_genmcl.px_data.p u64 
    push           20         
    pushptroff                i32 1 0
    push           pc_genmcl.px_data.ax u64 
    push           14         
    popptroff                 i32 1 0
    jump           #14086     
#14085: 
    setargs                   2 0
    push           &pc_tables.opndnames 
    push           pc_genmcl.px_data.p u64 
    pushptr                   u8 
    pushptroff                u64 8 0
    push           "db/dq optype? #" u64 
    callproc       &pc_libmcl.merror 
#14086: 
    push           pc_genmcl.px_data.p u64 
    push           4          
    pushptroff                i32 1 0
    push           1          i64 
    casejumpeq     #14087     i64 0
    push           2          i64 
    casejumpeq     #14088     i64 0
    push           4          i64 
    casejumpeq     #14089     i64 0
    push           8          i64 
    casejumpeq     #14090     i64 0
    popstack                  i64 
    jump           #14091     
#14087: 
    push           114        i64 
    pop            pc_genmcl.px_data.opc i64 
    jump           #14092     
#14088: 
    push           115        i64 
    pop            pc_genmcl.px_data.opc i64 
    jump           #14092     
#14089: 
    push           116        i64 
    pop            pc_genmcl.px_data.opc i64 
    jump           #14092     
#14090: 
    push           117        i64 
    pop            pc_genmcl.px_data.opc i64 
    jump           #14092     
#14091: 
    setargs                   2 0
    push           ""         u64 
    push           "DATA/not 1248" u64 
    callproc       &pc_libmcl.merror 
#14092: 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.px_data.ax u64 
    push           pc_genmcl.px_data.opc i64 
    callproc       &pc_libmcl.genmc 
#14093: 
    retproc                   
End


Proc pc_genmcl.px_db:
    param          pc_genmcl.px_db.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_db.p u64 
    callproc       &pc_genmcl.unimpl 
#14095: 
    retproc                   
End


Proc pc_genmcl.px_dw:
    param          pc_genmcl.px_dw.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_dw.p u64 
    callproc       &pc_genmcl.unimpl 
#14097: 
    retproc                   
End


Proc pc_genmcl.px_dd:
    param          pc_genmcl.px_dd.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_dd.p u64 
    callproc       &pc_genmcl.unimpl 
#14099: 
    retproc                   
End


Proc pc_genmcl.px_dq:
    param          pc_genmcl.px_dq.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_dq.p u64 
    callproc       &pc_genmcl.unimpl 
#14101: 
    retproc                   
End


Proc pc_genmcl.px_dstring:
    param          pc_genmcl.px_dstring.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_dstring.p u64 
    callproc       &pc_genmcl.unimpl 
#14103: 
    retproc                   
End


Proc pc_genmcl.px_dstringz:
    param          pc_genmcl.px_dstringz.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_dstringz.p u64 
    callproc       &pc_genmcl.unimpl 
#14105: 
    retproc                   
End


Proc pc_genmcl.px_reserve:
    param          pc_genmcl.px_reserve.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_reserve.p u64 
    callproc       &pc_genmcl.unimpl 
#14107: 
    retproc                   
End


Proc pc_genmcl.px_assem:
    param          pc_genmcl.px_assem.p u64 
    procentry                 
    push           pci_mcl.hostasmhandler u64 
    jumpfalse      #14109     u64 
    setargs                   1 0
    push           pc_genmcl.px_assem.p u64 
    push           8          
    pushptroff                u64 1 0
    push           pci_mcl.hostasmhandler u64 
    callprocptr               
    jump           #14110     
#14109: 
    setargs                   1 0
    push           pc_genmcl.px_assem.p u64 
    callproc       &pc_genmcl.unimpl 
#14110: 
    push           pc_genmcl.px_assem.p u64 
    push           3          
    pushptroff                u8 1 0
    jumpfalse      #14111     i64 
    setargs                   1 0
    push           pc_genmcl.px_assem.p u64 
    callproc       &pc_genmcl.dogetretvalue 
#14111: 
#14112: 
    retproc                   
End


Proc pc_genmcl.px_add:
    param          pc_genmcl.px_add.p u64 
    local          pc_genmcl.px_add.ax u64 
    local          pc_genmcl.px_add.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_add.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #14114     i64 0
    push           3          i64 
    casejumpeq     #14115     i64 0
    push           2          i64 
    casejumpeq     #14116     i64 0
    push           5          i64 
    casejumpeq     #14117     i64 0
    popstack                  i64 
    jump           #14118     
#14114: 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_add.ax u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #14119     i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    push           1          i64 
    jumpne         #14119     i64 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.px_add.ax u64 
    push           53         i64 
    callproc       &pc_libmcl.genmc 
    jump           #14120     
#14119: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_add.bx u64 
    setargs                   3 0
    push           pc_genmcl.px_add.bx u64 
    push           pc_genmcl.px_add.ax u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
#14120: 
    jump           #14121     
#14115: 
    setargs                   1 0
    push           68         i64 
    callproc       &pc_genmcl.dobin_float 
    jump           #14121     
#14116: 
    setargs                   1 0
    push           64         i64 
    callproc       &pc_genmcl.dobin_float 
    jump           #14121     
#14117: 
    setargs                   3 0
    push           31         i64 
    push           29         i64 
    push           pc_genmcl.px_add.p u64 
    callproc       &pc_genmcl.dobin_i128 
    jump           #14122     
    jump           #14121     
#14118: 
    setargs                   2 0
    push           pc_genmcl.px_add.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "add:"     u64 
    callproc       &pc_libmcl.merrort 
#14121: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#14122: 
    retproc                   
End


Proc pc_genmcl.px_sub:
    param          pc_genmcl.px_sub.p u64 
    local          pc_genmcl.px_sub.ax u64 
    local          pc_genmcl.px_sub.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_sub.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #14124     i64 0
    push           3          i64 
    casejumpeq     #14125     i64 0
    push           2          i64 
    casejumpeq     #14126     i64 0
    push           5          i64 
    casejumpeq     #14127     i64 0
    popstack                  i64 
    jump           #14128     
#14124: 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_sub.ax u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #14129     i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    push           1          i64 
    jumpne         #14129     i64 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.px_sub.ax u64 
    push           54         i64 
    callproc       &pc_libmcl.genmc 
    jump           #14130     
#14129: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_sub.bx u64 
    setargs                   3 0
    push           pc_genmcl.px_sub.bx u64 
    push           pc_genmcl.px_sub.ax u64 
    push           30         i64 
    callproc       &pc_libmcl.genmc 
#14130: 
    jump           #14131     
#14125: 
    setargs                   1 0
    push           69         i64 
    callproc       &pc_genmcl.dobin_float 
    jump           #14131     
#14126: 
    setargs                   1 0
    push           65         i64 
    callproc       &pc_genmcl.dobin_float 
    jump           #14131     
#14127: 
    setargs                   3 0
    push           32         i64 
    push           30         i64 
    push           pc_genmcl.px_sub.p u64 
    callproc       &pc_genmcl.dobin_i128 
    jump           #14132     
    jump           #14131     
#14128: 
    setargs                   2 0
    push           pc_genmcl.px_sub.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "sub:"     u64 
    callproc       &pc_libmcl.merrort 
#14131: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#14132: 
    retproc                   
End


Proc pc_genmcl.px_mul:
    param          pc_genmcl.px_mul.p u64 
    local          pc_genmcl.px_mul.ax u64 
    local          pc_genmcl.px_mul.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_mul.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #14134     i64 0
    push           3          i64 
    casejumpeq     #14135     i64 0
    push           2          i64 
    casejumpeq     #14136     i64 0
    push           5          i64 
    casejumpeq     #14137     i64 0
    popstack                  i64 
    jump           #14138     
#14134: 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_mul.ax u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #14139     i64 
    setargs                   2 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    push           pc_genmcl.px_mul.ax u64 
    callproc       &pc_genmcl.mulimm 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #14140     
#14139: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_mul.bx u64 
    setargs                   3 0
    push           pc_genmcl.px_mul.bx u64 
    push           pc_genmcl.px_mul.ax u64 
    push           35         i64 
    callproc       &pc_libmcl.genmc 
    jump           #14141     
#14135: 
    setargs                   1 0
    push           70         i64 
    callproc       &pc_genmcl.dobin_float 
    jump           #14141     
#14136: 
    setargs                   1 0
    push           66         i64 
    callproc       &pc_genmcl.dobin_float 
    jump           #14141     
#14137: 
    setargs                   3 0
    push           5          i64 
    push           4          i64 
    push           4          i64 
    callproc       &pc_genmcl.do_syscall 
    jump           #14140     
    jump           #14141     
#14138: 
    setargs                   2 0
    push           pc_genmcl.px_mul.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "mul:"     u64 
    callproc       &pc_libmcl.merrort 
#14141: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#14140: 
    retproc                   
End


Proc pc_genmcl.px_div:
    param          pc_genmcl.px_div.p u64 
    local          pc_genmcl.px_div.ax u64 
    local          pc_genmcl.px_div.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_div.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           3          i64 
    casejumpeq     #14143     i64 0
    push           2          i64 
    casejumpeq     #14144     i64 0
    popstack                  i64 
    jump           #14145     
#14143: 
    setargs                   1 0
    push           71         i64 
    callproc       &pc_genmcl.dobin_float 
    jump           #14146     
#14144: 
    setargs                   1 0
    push           67         i64 
    callproc       &pc_genmcl.dobin_float 
    jump           #14146     
#14145: 
    setargs                   2 0
    push           pc_genmcl.px_div.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "div:"     u64 
    callproc       &pc_libmcl.merrort 
#14146: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#14147: 
    retproc                   
End


Proc pc_genmcl.px_idiv:
    param          pc_genmcl.px_idiv.p u64 
    procentry                 
    push           pc_genmcl.px_idiv.p u64 
    push           3          
    pushptroff                u8 1 0
    push           9          i64 
    casejumpeq     #14149     i64 0
    push           4          i64 
    casejumpeq     #14150     i64 0
    push           10         i64 
    casejumpeq     #14151     i64 0
    push           5          i64 
    casejumpeq     #14152     i64 0
    popstack                  i64 
    jump           #14153     
#14149: 
    setargs                   3 0
    push           1          i64 
    push           1          i64 
    push           pc_genmcl.px_idiv.p u64 
    callproc       &pc_genmcl.do_divrem 
    jump           #14154     
#14150: 
    setargs                   3 0
    push           1          i64 
    push           0          i64 
    push           pc_genmcl.px_idiv.p u64 
    callproc       &pc_genmcl.do_divrem 
    jump           #14154     
#14151: 
    setargs                   2 0
    push           3          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   2 0
    push           4          i64 
    push           2          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   3 0
    push           5          i64 
    push           4          i64 
    push           5          i64 
    callproc       &pc_genmcl.do_syscall 
    jump           #14154     
#14152: 
    setargs                   2 0
    push           3          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   2 0
    push           4          i64 
    push           2          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   3 0
    push           5          i64 
    push           4          i64 
    push           5          i64 
    callproc       &pc_genmcl.do_syscall 
    jump           #14154     
#14153: 
    setargs                   2 0
    push           pc_genmcl.px_idiv.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "idiv:"    u64 
    callproc       &pc_libmcl.merrort 
#14154: 
#14155: 
    retproc                   
End


Proc pc_genmcl.px_irem:
    param          pc_genmcl.px_irem.p u64 
    procentry                 
    push           pc_genmcl.px_irem.p u64 
    push           3          
    pushptroff                u8 1 0
    push           9          i64 
    casejumpeq     #14157     i64 0
    push           4          i64 
    casejumpeq     #14158     i64 0
    popstack                  i64 
    jump           #14159     
#14157: 
    setargs                   3 0
    push           0          i64 
    push           1          i64 
    push           pc_genmcl.px_irem.p u64 
    callproc       &pc_genmcl.do_divrem 
    jump           #14160     
#14158: 
    setargs                   3 0
    push           0          i64 
    push           0          i64 
    push           pc_genmcl.px_irem.p u64 
    callproc       &pc_genmcl.do_divrem 
    jump           #14160     
#14159: 
    setargs                   2 0
    push           pc_genmcl.px_irem.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "irem:"    u64 
    callproc       &pc_libmcl.merrort 
#14160: 
#14161: 
    retproc                   
End


Proc pc_genmcl.px_iand:
    param          pc_genmcl.px_iand.p u64 
    procentry                 
    setargs                   2 0
    push           39         i64 
    push           pc_genmcl.px_iand.p u64 
    callproc       &pc_genmcl.dobitwise 
#14163: 
    retproc                   
End


Proc pc_genmcl.px_ior:
    param          pc_genmcl.px_ior.p u64 
    procentry                 
    setargs                   2 0
    push           40         i64 
    push           pc_genmcl.px_ior.p u64 
    callproc       &pc_genmcl.dobitwise 
#14165: 
    retproc                   
End


Proc pc_genmcl.px_ixor:
    param          pc_genmcl.px_ixor.p u64 
    procentry                 
    setargs                   2 0
    push           41         i64 
    push           pc_genmcl.px_ixor.p u64 
    callproc       &pc_genmcl.dobitwise 
#14167: 
    retproc                   
End


Proc pc_genmcl.px_shl:
    param          pc_genmcl.px_shl.p u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_shl.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #14169     i64 0
    popstack                  i64 
    jump           #14170     
#14169: 
    setargs                   2 0
    push           44         i64 
    push           pc_genmcl.px_shl.p u64 
    callproc       &pc_genmcl.do_shift 
    jump           #14171     
#14170: 
    setargs                   2 0
    push           pc_genmcl.px_shl.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "shl:"     u64 
    callproc       &pc_libmcl.merrort 
#14171: 
#14172: 
    retproc                   
End


Proc pc_genmcl.px_shr:
    param          pc_genmcl.px_shr.p u64 
    procentry                 
    push           pc_genmcl.px_shr.p u64 
    push           3          
    pushptroff                u8 1 0
    push           9          i64 
    casejumpeq     #14174     i64 0
    push           4          i64 
    casejumpeq     #14175     i64 0
    popstack                  i64 
    jump           #14176     
#14174: 
    setargs                   2 0
    push           45         i64 
    push           pc_genmcl.px_shr.p u64 
    callproc       &pc_genmcl.do_shift 
    jump           #14177     
#14175: 
    setargs                   2 0
    push           46         i64 
    push           pc_genmcl.px_shr.p u64 
    callproc       &pc_genmcl.do_shift 
    jump           #14177     
#14176: 
    setargs                   2 0
    push           pc_genmcl.px_shr.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "shr:"     u64 
    callproc       &pc_libmcl.merrort 
#14177: 
#14178: 
    retproc                   
End


Proc pc_genmcl.px_in:
    param          pc_genmcl.px_in.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_in.p u64 
    callproc       &pc_genmcl.unimpl 
#14180: 
    retproc                   
End


Proc pc_genmcl.px_notin:
    param          pc_genmcl.px_notin.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_notin.p u64 
    callproc       &pc_genmcl.unimpl 
#14182: 
    retproc                   
End


Proc pc_genmcl.px_min:
    param          pc_genmcl.px_min.p u64 
    procentry                 
    push           pc_genmcl.px_min.p u64 
    push           3          
    pushptroff                u8 1 0
    push           9          i64 
    casejumpeq     #14184     i64 0
    push           4          i64 
    casejumpeq     #14185     i64 0
    push           12         i64 
    casejumpeq     #14186     i64 0
    push           11         i64 
    casejumpeq     #14187     i64 0
    popstack                  i64 
    jump           #14188     
#14184: 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genmcl.domax_int 
    jump           #14189     
#14185: 
    setargs                   1 0
    push           7          i64 
    callproc       &pc_genmcl.domax_int 
    jump           #14189     
#14186: 
    setargs                   1 0
    push           112        i64 
    callproc       &pc_genmcl.domax_float 
    jump           #14189     
#14187: 
    setargs                   1 0
    push           110        i64 
    callproc       &pc_genmcl.domax_float 
    jump           #14189     
#14188: 
    setargs                   2 0
    push           pc_genmcl.px_min.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "min:"     u64 
    callproc       &pc_libmcl.merrort 
#14189: 
#14190: 
    retproc                   
End


Proc pc_genmcl.px_max:
    param          pc_genmcl.px_max.p u64 
    procentry                 
    push           pc_genmcl.px_max.p u64 
    push           3          
    pushptroff                u8 1 0
    push           9          i64 
    casejumpeq     #14192     i64 0
    push           4          i64 
    casejumpeq     #14193     i64 0
    push           12         i64 
    casejumpeq     #14194     i64 0
    push           11         i64 
    casejumpeq     #14195     i64 0
    popstack                  i64 
    jump           #14196     
#14192: 
    setargs                   1 0
    push           12         i64 
    callproc       &pc_genmcl.domax_int 
    jump           #14197     
#14193: 
    setargs                   1 0
    push           2          i64 
    callproc       &pc_genmcl.domax_int 
    jump           #14197     
#14194: 
    setargs                   1 0
    push           113        i64 
    callproc       &pc_genmcl.domax_float 
    jump           #14197     
#14195: 
    setargs                   1 0
    push           111        i64 
    callproc       &pc_genmcl.domax_float 
    jump           #14197     
#14196: 
    setargs                   2 0
    push           pc_genmcl.px_max.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "max:"     u64 
    callproc       &pc_libmcl.merrort 
#14197: 
#14198: 
    retproc                   
End


Proc pc_genmcl.px_eq:
    param          pc_genmcl.px_eq.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_eq.p u64 
    callproc       &pc_genmcl.unimpl 
#14200: 
    retproc                   
End


Proc pc_genmcl.px_ne:
    param          pc_genmcl.px_ne.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_ne.p u64 
    callproc       &pc_genmcl.unimpl 
#14202: 
    retproc                   
End


Proc pc_genmcl.px_lt:
    param          pc_genmcl.px_lt.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_lt.p u64 
    callproc       &pc_genmcl.unimpl 
#14204: 
    retproc                   
End


Proc pc_genmcl.px_le:
    param          pc_genmcl.px_le.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_le.p u64 
    callproc       &pc_genmcl.unimpl 
#14206: 
    retproc                   
End


Proc pc_genmcl.px_ge:
    param          pc_genmcl.px_ge.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_ge.p u64 
    callproc       &pc_genmcl.unimpl 
#14208: 
    retproc                   
End


Proc pc_genmcl.px_gt:
    param          pc_genmcl.px_gt.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_gt.p u64 
    callproc       &pc_genmcl.unimpl 
#14210: 
    retproc                   
End


Proc pc_genmcl.px_same:
    param          pc_genmcl.px_same.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_same.p u64 
    callproc       &pc_genmcl.unimpl 
#14212: 
    retproc                   
End


Proc pc_genmcl.px_andl:
    param          pc_genmcl.px_andl.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_andl.p u64 
    callproc       &pc_genmcl.unimpl 
#14214: 
    retproc                   
End


Proc pc_genmcl.px_orl:
    param          pc_genmcl.px_orl.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_orl.p u64 
    callproc       &pc_genmcl.unimpl 
#14216: 
    retproc                   
End


Proc pc_genmcl.px_addrefoff:
    param          pc_genmcl.px_addrefoff.p u64 
    local          pc_genmcl.px_addrefoff.ax u64 
    local          pc_genmcl.px_addrefoff.cx u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_addrefoff.p u64 
    callfn         &pc_genmcl.do_addrmode u64 
    pop            pc_genmcl.px_addrefoff.cx u64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #14218     i64 
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           1          
    popptroff                 u8 1 0
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
#14218: 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_addrefoff.ax u64 
    setargs                   3 0
    push           pc_genmcl.px_addrefoff.cx u64 
    push           pc_genmcl.px_addrefoff.ax u64 
    push           15         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#14219: 
    retproc                   
End


Proc pc_genmcl.px_subref:
    param          pc_genmcl.px_subref.p u64 
    local          pc_genmcl.px_subref.ax u64 
    local          pc_genmcl.px_subref.bx u64 
    local          pc_genmcl.px_subref.n i64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_subref.ax u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_subref.bx u64 
    setargs                   3 0
    push           pc_genmcl.px_subref.bx u64 
    push           pc_genmcl.px_subref.ax u64 
    push           30         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_genmcl.px_subref.p u64 
    push           16         
    pushptroff                i32 1 0
    push           1          i64 
    jumple         #14221     i64 
    setargs                   1 0
    push           pc_genmcl.px_subref.p u64 
    push           16         
    pushptroff                i32 1 0
    callfn         &pc_libmcl.ispoweroftwo i64 
    pop            pc_genmcl.px_subref.n i64 
    push           pc_genmcl.px_subref.n i64 
    jumpfalse      #14222     i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_subref.n i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_subref.ax u64 
    push           46         i64 
    callproc       &pc_libmcl.genmc 
    jump           #14223     
#14222: 
    setargs                   2 0
    push           ""         u64 
    push           "SUB/REF NOT POWER OF TWO" u64 
    callproc       &pc_libmcl.merror 
#14223: 
#14221: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#14224: 
    retproc                   
End


Proc pc_genmcl.px_subrefoff:
    param          pc_genmcl.px_subrefoff.p u64 
    local          pc_genmcl.px_subrefoff.scale i64 
    local          pc_genmcl.px_subrefoff.extra i64 
    local          pc_genmcl.px_subrefoff.offset i64 
    local          pc_genmcl.px_subrefoff.ax u64 
    local          pc_genmcl.px_subrefoff.bx u64 
    procentry                 
    push           pc_genmcl.px_subrefoff.p u64 
    push           16         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_subrefoff.scale i64 
    push           pc_genmcl.px_subrefoff.p u64 
    push           20         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_subrefoff.extra i64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_subrefoff.ax u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #14226     i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    push           pc_genmcl.px_subrefoff.scale i64 
    mul                       i64 
    push           pc_genmcl.px_subrefoff.extra i64 
    add                       i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_subrefoff.ax u64 
    push           30         i64 
    callproc       &pc_libmcl.genmc 
    jump           #14227     
#14226: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_subrefoff.bx u64 
    setargs                   2 0
    push           pc_genmcl.px_subrefoff.scale i64 
    push           pc_genmcl.px_subrefoff.bx u64 
    callfn         &pc_genmcl.scaleindex i64 
    pop            pc_genmcl.px_subrefoff.scale i64 
    push           pc_genmcl.px_subrefoff.scale i64 
    push           1          i64 
    jumple         #14228     i64 
    setargs                   2 0
    push           pc_genmcl.px_subrefoff.scale i64 
    push           pc_genmcl.px_subrefoff.bx u64 
    callproc       &pc_genmcl.mulimm 
#14228: 
    setargs                   3 0
    push           pc_genmcl.px_subrefoff.bx u64 
    push           pc_genmcl.px_subrefoff.ax u64 
    push           30         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_genmcl.px_subrefoff.extra i64 
    jumpfalse      #14229     i64 
    setargs                   2 0
    push           ""         u64 
    push           "SUBREF/EXTRA" u64 
    callproc       &pc_libmcl.merror 
#14229: 
#14227: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#14230: 
    retproc                   
End


Proc pc_genmcl.px_neg:
    param          pc_genmcl.px_neg.p u64 
    local          pc_genmcl.px_neg.ax u64 
    local          pc_genmcl.px_neg.axlow u64 
    local          pc_genmcl.px_neg.axhigh u64 
    local          pc_genmcl.px_neg.bxlow u64 
    local          pc_genmcl.px_neg.bxhigh u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_neg.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #14232     i64 0
    push           3          i64 
    casejumpeq     #14233     i64 0
    push           2          i64 
    casejumpeq     #14234     i64 0
    push           5          i64 
    casejumpeq     #14235     i64 0
    popstack                  i64 
    jump           #14236     
#14232: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_neg.ax u64 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.px_neg.ax u64 
    push           51         i64 
    callproc       &pc_libmcl.genmc 
    jump           #14237     
#14233: 
    push           pci_mcl.labneg64 i64 
    jumptrue       #14238     i64 
    setargs                   0 0
    callfn         &pc_libmcl.mcreatefwdlabel i64 
    pop            pci_mcl.labneg64 i64 
#14238: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.labneg64 i64 
    callfn         &pc_libmcl.mgenlabelmem u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    push           74         i64 
    callproc       &pc_libmcl.genmc 
    jump           #14237     
#14234: 
    push           pci_mcl.labneg32 i64 
    jumptrue       #14239     i64 
    setargs                   0 0
    callfn         &pc_libmcl.mcreatefwdlabel i64 
    pop            pci_mcl.labneg32 i64 
#14239: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.labneg32 i64 
    callfn         &pc_libmcl.mgenlabelmem u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    push           75         i64 
    callproc       &pc_libmcl.genmc 
    jump           #14237     
#14235: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_neg.axlow u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_neg.axhigh u64 
    setargs                   0 0
    callfn         &pc_stackmcl.genopnd_d64 u64 
    pop            pc_genmcl.px_neg.bxhigh u64 
    setargs                   0 0
    callfn         &pc_stackmcl.genopnd_d64 u64 
    pop            pc_genmcl.px_neg.bxlow u64 
    setargs                   3 0
    push           pc_genmcl.px_neg.bxlow u64 
    push           pc_genmcl.px_neg.bxlow u64 
    push           41         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.px_neg.bxhigh u64 
    push           pc_genmcl.px_neg.bxhigh u64 
    push           41         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.px_neg.axlow u64 
    push           pc_genmcl.px_neg.bxlow u64 
    push           30         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.px_neg.axhigh u64 
    push           pc_genmcl.px_neg.bxhigh u64 
    push           32         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   2 0
    push           3          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   2 0
    push           4          i64 
    push           2          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #14237     
#14236: 
    setargs                   2 0
    push           pc_genmcl.px_neg.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "neg"      u64 
    callproc       &pc_libmcl.merrort 
#14237: 
#14240: 
    retproc                   
End


Proc pc_genmcl.px_abs:
    param          pc_genmcl.px_abs.p u64 
    local          pc_genmcl.px_abs.ax u64 
    local          pc_genmcl.px_abs.lx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_abs.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #14242     i64 0
    push           3          i64 
    casejumpeq     #14243     i64 0
    push           2          i64 
    casejumpeq     #14244     i64 0
    popstack                  i64 
    jump           #14245     
#14242: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_abs.ax u64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           0          i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_abs.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    callfn         &pc_libmcl.mgenlabel u64 
    store          pc_genmcl.px_abs.lx u64 
    push           13         i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.px_abs.ax u64 
    push           51         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.px_abs.lx u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    jump           #14246     
#14243: 
    push           pci_mcl.labneg64 i64 
    jumptrue       #14247     i64 
    setargs                   0 0
    callfn         &pc_libmcl.mcreatefwdlabel i64 
    pop            pci_mcl.labneg64 i64 
#14247: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.labneg64 i64 
    callfn         &pc_libmcl.mgenlabelmem u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    push           74         i64 
    callproc       &pc_libmcl.genmc 
    jump           #14246     
#14244: 
    push           pci_mcl.labneg32 i64 
    jumptrue       #14248     i64 
    setargs                   0 0
    callfn         &pc_libmcl.mcreatefwdlabel i64 
    pop            pci_mcl.labneg32 i64 
#14248: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.labneg32 i64 
    callfn         &pc_libmcl.mgenlabelmem u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    push           75         i64 
    callproc       &pc_libmcl.genmc 
    jump           #14246     
#14245: 
    setargs                   2 0
    push           pc_genmcl.px_abs.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "abs"      u64 
    callproc       &pc_libmcl.merrort 
#14246: 
#14249: 
    retproc                   
End


Proc pc_genmcl.px_inot:
    param          pc_genmcl.px_inot.p u64 
    local          pc_genmcl.px_inot.ax u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_inot.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #14251     i64 0
    popstack                  i64 
    jump           #14252     
#14251: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_inot.ax u64 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.px_inot.ax u64 
    push           52         i64 
    callproc       &pc_libmcl.genmc 
    jump           #14253     
#14252: 
    setargs                   2 0
    push           pc_genmcl.px_inot.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "inot"     u64 
    callproc       &pc_libmcl.merrort 
#14253: 
#14254: 
    retproc                   
End


Proc pc_genmcl.px_notl:
    param          pc_genmcl.px_notl.p u64 
    local          pc_genmcl.px_notl.ax u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_notl.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #14256     i64 0
    popstack                  i64 
    jump           #14257     
#14256: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_notl.ax u64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_notl.ax u64 
    push           41         i64 
    callproc       &pc_libmcl.genmc 
    jump           #14258     
#14257: 
    setargs                   2 0
    push           pc_genmcl.px_notl.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "notl"     u64 
    callproc       &pc_libmcl.merrort 
#14258: 
#14259: 
    retproc                   
End


Proc pc_genmcl.px_istruel:
    param          pc_genmcl.px_istruel.p u64 
    local          pc_genmcl.px_istruel.ax u64 
    local          pc_genmcl.px_istruel.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_istruel.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #14261     i64 0
    popstack                  i64 
    jump           #14262     
#14261: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_istruel.ax u64 
    setargs                   3 0
    push           pc_genmcl.px_istruel.ax u64 
    push           pc_genmcl.px_istruel.ax u64 
    push           42         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   2 0
    push           1          i64 
    push           pc_genmcl.px_istruel.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    store          pc_genmcl.px_istruel.bx u64 
    push           5          i64 
    push           59         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.px_istruel.bx u64 
    setargs                   2 0
    push           4          i64 
    push           pc_genmcl.px_istruel.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           20         i64 
    callproc       &pc_libmcl.genmc 
    jump           #14263     
#14262: 
    setargs                   2 0
    push           pc_genmcl.px_istruel.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "istruel"  u64 
    callproc       &pc_libmcl.merrort 
#14263: 
#14264: 
    retproc                   
End


Proc pc_genmcl.px_sqr:
    param          pc_genmcl.px_sqr.p u64 
    local          pc_genmcl.px_sqr.ax u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_sqr.ax u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_sqr.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #14266     i64 0
    push           3          i64 
    casejumpeq     #14267     i64 0
    push           2          i64 
    casejumpeq     #14268     i64 0
    popstack                  i64 
    jump           #14269     
#14266: 
    setargs                   3 0
    push           pc_genmcl.px_sqr.ax u64 
    push           pc_genmcl.px_sqr.ax u64 
    push           35         i64 
    callproc       &pc_libmcl.genmc 
    jump           #14270     
#14267: 
    setargs                   3 0
    push           pc_genmcl.px_sqr.ax u64 
    push           pc_genmcl.px_sqr.ax u64 
    push           70         i64 
    callproc       &pc_libmcl.genmc 
    jump           #14270     
#14268: 
    setargs                   3 0
    push           pc_genmcl.px_sqr.ax u64 
    push           pc_genmcl.px_sqr.ax u64 
    push           66         i64 
    callproc       &pc_libmcl.genmc 
    jump           #14270     
#14269: 
    setargs                   2 0
    push           pc_genmcl.px_sqr.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "sqr"      u64 
    callproc       &pc_libmcl.merrort 
#14270: 
#14271: 
    retproc                   
End


Proc pc_genmcl.px_sqrt:
    param          pc_genmcl.px_sqrt.p u64 
    local          pc_genmcl.px_sqrt.ax u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_sqrt.ax u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_sqrt.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           3          i64 
    casejumpeq     #14273     i64 0
    push           2          i64 
    casejumpeq     #14274     i64 0
    popstack                  i64 
    jump           #14275     
#14273: 
    setargs                   3 0
    push           pc_genmcl.px_sqrt.ax u64 
    push           pc_genmcl.px_sqrt.ax u64 
    push           62         i64 
    callproc       &pc_libmcl.genmc 
    jump           #14276     
#14274: 
    setargs                   3 0
    push           pc_genmcl.px_sqrt.ax u64 
    push           pc_genmcl.px_sqrt.ax u64 
    push           63         i64 
    callproc       &pc_libmcl.genmc 
    jump           #14276     
#14275: 
    setargs                   2 0
    push           pc_genmcl.px_sqrt.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "sqrt"     u64 
    callproc       &pc_libmcl.merrort 
#14276: 
#14277: 
    retproc                   
End


Proc pc_genmcl.px_sin:
    param          pc_genmcl.px_sin.p u64 
    procentry                 
    setargs                   2 0
    push           "sin*"     u64 
    push           pc_genmcl.px_sin.p u64 
    callproc       &pc_genmcl.domaths 
#14279: 
    retproc                   
End


Proc pc_genmcl.px_cos:
    param          pc_genmcl.px_cos.p u64 
    procentry                 
    setargs                   2 0
    push           "cos*"     u64 
    push           pc_genmcl.px_cos.p u64 
    callproc       &pc_genmcl.domaths 
#14281: 
    retproc                   
End


Proc pc_genmcl.px_tan:
    param          pc_genmcl.px_tan.p u64 
    procentry                 
    setargs                   2 0
    push           "tan*"     u64 
    push           pc_genmcl.px_tan.p u64 
    callproc       &pc_genmcl.domaths 
#14283: 
    retproc                   
End


Proc pc_genmcl.px_asin:
    param          pc_genmcl.px_asin.p u64 
    procentry                 
    setargs                   2 0
    push           "asin*"    u64 
    push           pc_genmcl.px_asin.p u64 
    callproc       &pc_genmcl.domaths 
#14285: 
    retproc                   
End


Proc pc_genmcl.px_acos:
    param          pc_genmcl.px_acos.p u64 
    procentry                 
    setargs                   2 0
    push           "acos*"    u64 
    push           pc_genmcl.px_acos.p u64 
    callproc       &pc_genmcl.domaths 
#14287: 
    retproc                   
End


Proc pc_genmcl.px_atan:
    param          pc_genmcl.px_atan.p u64 
    procentry                 
    setargs                   2 0
    push           "atan*"    u64 
    push           pc_genmcl.px_atan.p u64 
    callproc       &pc_genmcl.domaths 
#14289: 
    retproc                   
End


Proc pc_genmcl.px_ln:
    param          pc_genmcl.px_ln.p u64 
    procentry                 
    setargs                   2 0
    push           "log*"     u64 
    push           pc_genmcl.px_ln.p u64 
    callproc       &pc_genmcl.domaths 
#14291: 
    retproc                   
End


Proc pc_genmcl.px_log:
    param          pc_genmcl.px_log.p u64 
    procentry                 
    setargs                   2 0
    push           "log10*"   u64 
    push           pc_genmcl.px_log.p u64 
    callproc       &pc_genmcl.domaths 
#14293: 
    retproc                   
End


Proc pc_genmcl.px_exp:
    param          pc_genmcl.px_exp.p u64 
    procentry                 
    setargs                   2 0
    push           "exp*"     u64 
    push           pc_genmcl.px_exp.p u64 
    callproc       &pc_genmcl.domaths 
#14295: 
    retproc                   
End


Proc pc_genmcl.px_round:
    param          pc_genmcl.px_round.p u64 
    procentry                 
    setargs                   2 0
    push           "round*"   u64 
    push           pc_genmcl.px_round.p u64 
    callproc       &pc_genmcl.domaths 
#14297: 
    retproc                   
End


Proc pc_genmcl.px_floor:
    param          pc_genmcl.px_floor.p u64 
    procentry                 
    setargs                   2 0
    push           "floor*"   u64 
    push           pc_genmcl.px_floor.p u64 
    callproc       &pc_genmcl.domaths 
#14299: 
    retproc                   
End


Proc pc_genmcl.px_ceil:
    param          pc_genmcl.px_ceil.p u64 
    procentry                 
    setargs                   2 0
    push           "ceil*"    u64 
    push           pc_genmcl.px_ceil.p u64 
    callproc       &pc_genmcl.domaths 
#14301: 
    retproc                   
End


Proc pc_genmcl.px_fract:
    param          pc_genmcl.px_fract.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_fract.p u64 
    callproc       &pc_genmcl.unimpl 
#14303: 
    retproc                   
End


Proc pc_genmcl.px_sign:
    param          pc_genmcl.px_sign.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_sign.p u64 
    callproc       &pc_genmcl.unimpl 
#14305: 
    retproc                   
End


Proc pc_genmcl.px_atan2:
    param          pc_genmcl.px_atan2.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_atan2.p u64 
    callproc       &pc_genmcl.unimpl 
#14307: 
    retproc                   
End


Proc pc_genmcl.px_power:
    param          pc_genmcl.px_power.p u64 
    local          pc_genmcl.px_power.ax u64 
    local          pc_genmcl.px_power.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_power.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #14309     i64 0
    popstack                  i64 
    jump           #14310     
#14309: 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   3 0
    push           1          i64 
    push           2          i64 
    push           2          i64 
    callproc       &pc_genmcl.do_syscall 
    jump           #14311     
    jump           #14312     
#14310: 
    setargs                   2 0
    push           pc_genmcl.px_power.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "power:"   u64 
    callproc       &pc_libmcl.merrort 
#14312: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#14311: 
    retproc                   
End


Proc pc_genmcl.px_fmod:
    param          pc_genmcl.px_fmod.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_fmod.p u64 
    callproc       &pc_genmcl.unimpl 
#14314: 
    retproc                   
End


Proc pc_genmcl.px_incr:
    param          pc_genmcl.px_incr.p u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_incr.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #14316     i64 0
    push           4          i64 
    casejumpeq     #14316     i64 0
    popstack                  i64 
    jump           #14317     
#14316: 
    setargs                   3 0
    push           29         i64 
    push           53         i64 
    push           pc_genmcl.px_incr.p u64 
    callproc       &pc_genmcl.doincr 
    jump           #14318     
#14317: 
    setargs                   2 0
    push           pc_genmcl.px_incr.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "incr"     u64 
    callproc       &pc_libmcl.merrort 
#14318: 
#14319: 
    retproc                   
End


Proc pc_genmcl.px_decr:
    param          pc_genmcl.px_decr.p u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_decr.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #14321     i64 0
    push           4          i64 
    casejumpeq     #14321     i64 0
    popstack                  i64 
    jump           #14322     
#14321: 
    setargs                   3 0
    push           30         i64 
    push           54         i64 
    push           pc_genmcl.px_decr.p u64 
    callproc       &pc_genmcl.doincr 
    jump           #14323     
#14322: 
    setargs                   2 0
    push           pc_genmcl.px_decr.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "decr"     u64 
    callproc       &pc_libmcl.merrort 
#14323: 
#14324: 
    retproc                   
End


Proc pc_genmcl.px_incrload:
    param          pc_genmcl.px_incrload.p u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_incrload.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #14326     i64 0
    push           4          i64 
    casejumpeq     #14326     i64 0
    popstack                  i64 
    jump           #14327     
#14326: 
    setargs                   3 0
    push           29         i64 
    push           53         i64 
    push           pc_genmcl.px_incrload.p u64 
    callproc       &pc_genmcl.doincrload 
    jump           #14328     
#14327: 
    setargs                   2 0
    push           pc_genmcl.px_incrload.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "incrload" u64 
    callproc       &pc_libmcl.merrort 
#14328: 
#14329: 
    retproc                   
End


Proc pc_genmcl.px_decrload:
    param          pc_genmcl.px_decrload.p u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_decrload.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #14331     i64 0
    push           4          i64 
    casejumpeq     #14331     i64 0
    popstack                  i64 
    jump           #14332     
#14331: 
    setargs                   3 0
    push           30         i64 
    push           54         i64 
    push           pc_genmcl.px_decrload.p u64 
    callproc       &pc_genmcl.doincrload 
    jump           #14333     
#14332: 
    setargs                   2 0
    push           pc_genmcl.px_decrload.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "decrload" u64 
    callproc       &pc_libmcl.merrort 
#14333: 
#14334: 
    retproc                   
End


Proc pc_genmcl.px_loadincr:
    param          pc_genmcl.px_loadincr.p u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_loadincr.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #14336     i64 0
    push           4          i64 
    casejumpeq     #14336     i64 0
    popstack                  i64 
    jump           #14337     
#14336: 
    setargs                   3 0
    push           29         i64 
    push           53         i64 
    push           pc_genmcl.px_loadincr.p u64 
    callproc       &pc_genmcl.doloadincr 
    jump           #14338     
#14337: 
    setargs                   2 0
    push           pc_genmcl.px_loadincr.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "loadincr" u64 
    callproc       &pc_libmcl.merrort 
#14338: 
#14339: 
    retproc                   
End


Proc pc_genmcl.px_loaddecr:
    param          pc_genmcl.px_loaddecr.p u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_loaddecr.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #14341     i64 0
    push           4          i64 
    casejumpeq     #14341     i64 0
    popstack                  i64 
    jump           #14342     
#14341: 
    setargs                   3 0
    push           30         i64 
    push           54         i64 
    push           pc_genmcl.px_loaddecr.p u64 
    callproc       &pc_genmcl.doloadincr 
    jump           #14343     
#14342: 
    setargs                   2 0
    push           pc_genmcl.px_loaddecr.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "loaddecr" u64 
    callproc       &pc_libmcl.merrort 
#14343: 
#14344: 
    retproc                   
End


Proc pc_genmcl.px_addto:
    param          pc_genmcl.px_addto.p u64 
    local          pc_genmcl.px_addto.ax u64 
    local          pc_genmcl.px_addto.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_addto.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #14346     i64 0
    push           4          i64 
    casejumpeq     #14346     i64 0
    push           3          i64 
    casejumpeq     #14347     i64 0
    push           2          i64 
    casejumpeq     #14348     i64 0
    popstack                  i64 
    jump           #14349     
#14346: 
    setargs                   2 0
    push           29         i64 
    push           pc_genmcl.px_addto.p u64 
    callproc       &pc_genmcl.dobinto_int 
    jump           #14350     
#14347: 
    setargs                   2 0
    push           68         i64 
    push           pc_genmcl.px_addto.p u64 
    callproc       &pc_genmcl.dobinto_float 
    jump           #14350     
#14348: 
    setargs                   2 0
    push           64         i64 
    push           pc_genmcl.px_addto.p u64 
    callproc       &pc_genmcl.dobinto_float32 
    jump           #14350     
#14349: 
    setargs                   2 0
    push           pc_genmcl.px_addto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "addto:"   u64 
    callproc       &pc_libmcl.merrort 
#14350: 
#14351: 
    retproc                   
End


Proc pc_genmcl.px_subto:
    param          pc_genmcl.px_subto.p u64 
    local          pc_genmcl.px_subto.ax u64 
    local          pc_genmcl.px_subto.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_subto.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #14353     i64 0
    push           4          i64 
    casejumpeq     #14353     i64 0
    push           3          i64 
    casejumpeq     #14354     i64 0
    push           2          i64 
    casejumpeq     #14355     i64 0
    popstack                  i64 
    jump           #14356     
#14353: 
    setargs                   2 0
    push           30         i64 
    push           pc_genmcl.px_subto.p u64 
    callproc       &pc_genmcl.dobinto_int 
    jump           #14357     
#14354: 
    setargs                   2 0
    push           69         i64 
    push           pc_genmcl.px_subto.p u64 
    callproc       &pc_genmcl.dobinto_float 
    jump           #14357     
#14355: 
    setargs                   2 0
    push           65         i64 
    push           pc_genmcl.px_subto.p u64 
    callproc       &pc_genmcl.dobinto_float32 
    jump           #14357     
#14356: 
    setargs                   2 0
    push           pc_genmcl.px_subto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "subto:"   u64 
    callproc       &pc_libmcl.merrort 
#14357: 
#14358: 
    retproc                   
End


Proc pc_genmcl.px_multo:
    param          pc_genmcl.px_multo.p u64 
    local          pc_genmcl.px_multo.ax u64 
    local          pc_genmcl.px_multo.bx u64 
    local          pc_genmcl.px_multo.cx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_multo.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #14360     i64 0
    push           3          i64 
    casejumpeq     #14361     i64 0
    push           2          i64 
    casejumpeq     #14362     i64 0
    popstack                  i64 
    jump           #14363     
#14360: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_d64 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.px_multo.ax u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_multo.bx u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_multo.cx u64 
    setargs                   3 0
    push           pc_genmcl.px_multo.ax u64 
    push           pc_genmcl.px_multo.cx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #14364     i64 
    setargs                   2 0
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    push           pc_genmcl.px_multo.cx u64 
    callproc       &pc_genmcl.mulimm 
    jump           #14365     
#14364: 
    setargs                   3 0
    push           pc_genmcl.px_multo.bx u64 
    push           pc_genmcl.px_multo.cx u64 
    push           35         i64 
    callproc       &pc_libmcl.genmc 
#14365: 
    setargs                   3 0
    push           pc_genmcl.px_multo.cx u64 
    push           pc_genmcl.px_multo.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #14366     
#14361: 
    setargs                   2 0
    push           70         i64 
    push           pc_genmcl.px_multo.p u64 
    callproc       &pc_genmcl.dobinto_float 
    jump           #14366     
#14362: 
    setargs                   2 0
    push           66         i64 
    push           pc_genmcl.px_multo.p u64 
    callproc       &pc_genmcl.dobinto_float32 
    jump           #14366     
#14363: 
    setargs                   2 0
    push           pc_genmcl.px_multo.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "multo:"   u64 
    callproc       &pc_libmcl.merrort 
#14366: 
#14367: 
    retproc                   
End


Proc pc_genmcl.px_divto:
    param          pc_genmcl.px_divto.p u64 
    local          pc_genmcl.px_divto.ax u64 
    local          pc_genmcl.px_divto.bx u64 
    local          pc_genmcl.px_divto.cx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_divto.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           3          i64 
    casejumpeq     #14369     i64 0
    push           2          i64 
    casejumpeq     #14370     i64 0
    popstack                  i64 
    jump           #14371     
#14369: 
    setargs                   2 0
    push           71         i64 
    push           pc_genmcl.px_divto.p u64 
    callproc       &pc_genmcl.dobinto_float 
    jump           #14372     
#14370: 
    setargs                   2 0
    push           67         i64 
    push           pc_genmcl.px_divto.p u64 
    callproc       &pc_genmcl.dobinto_float32 
    jump           #14372     
#14371: 
    setargs                   2 0
    push           pc_genmcl.px_divto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "divto:"   u64 
    callproc       &pc_libmcl.merrort 
#14372: 
#14373: 
    retproc                   
End


Proc pc_genmcl.px_idivto:
    param          pc_genmcl.px_idivto.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_idivto.p u64 
    callproc       &pc_genmcl.unimpl 
#14375: 
    retproc                   
End


Proc pc_genmcl.px_iremto:
    param          pc_genmcl.px_iremto.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_iremto.p u64 
    callproc       &pc_genmcl.unimpl 
#14377: 
    retproc                   
End


Proc pc_genmcl.px_iandto:
    param          pc_genmcl.px_iandto.p u64 
    local          pc_genmcl.px_iandto.ax u64 
    local          pc_genmcl.px_iandto.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_iandto.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #14379     i64 0
    push           4          i64 
    casejumpeq     #14379     i64 0
    popstack                  i64 
    jump           #14380     
#14379: 
    setargs                   2 0
    push           39         i64 
    push           pc_genmcl.px_iandto.p u64 
    callproc       &pc_genmcl.dobinto_int 
    jump           #14381     
#14380: 
    setargs                   2 0
    push           pc_genmcl.px_iandto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "iandto:"  u64 
    callproc       &pc_libmcl.merrort 
#14381: 
#14382: 
    retproc                   
End


Proc pc_genmcl.px_iorto:
    param          pc_genmcl.px_iorto.p u64 
    local          pc_genmcl.px_iorto.ax u64 
    local          pc_genmcl.px_iorto.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_iorto.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #14384     i64 0
    push           4          i64 
    casejumpeq     #14384     i64 0
    popstack                  i64 
    jump           #14385     
#14384: 
    setargs                   2 0
    push           40         i64 
    push           pc_genmcl.px_iorto.p u64 
    callproc       &pc_genmcl.dobinto_int 
    jump           #14386     
#14385: 
    setargs                   2 0
    push           pc_genmcl.px_iorto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "iorto:"   u64 
    callproc       &pc_libmcl.merrort 
#14386: 
#14387: 
    retproc                   
End


Proc pc_genmcl.px_ixorto:
    param          pc_genmcl.px_ixorto.p u64 
    local          pc_genmcl.px_ixorto.ax u64 
    local          pc_genmcl.px_ixorto.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_ixorto.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #14389     i64 0
    push           4          i64 
    casejumpeq     #14389     i64 0
    popstack                  i64 
    jump           #14390     
#14389: 
    setargs                   2 0
    push           41         i64 
    push           pc_genmcl.px_ixorto.p u64 
    callproc       &pc_genmcl.dobinto_int 
    jump           #14391     
#14390: 
    setargs                   2 0
    push           pc_genmcl.px_ixorto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "ixorto:"  u64 
    callproc       &pc_libmcl.merrort 
#14391: 
#14392: 
    retproc                   
End


Proc pc_genmcl.px_shlto:
    param          pc_genmcl.px_shlto.p u64 
    procentry                 
    push           pc_genmcl.px_shlto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           9          i64 
    casejumpeq     #14394     i64 0
    push           4          i64 
    casejumpeq     #14394     i64 0
    popstack                  i64 
    jump           #14395     
#14394: 
    setargs                   2 0
    push           44         i64 
    push           pc_genmcl.px_shlto.p u64 
    callproc       &pc_genmcl.do_shiftnto 
    jump           #14396     
#14395: 
    setargs                   2 0
    push           pc_genmcl.px_shlto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "shlto:"   u64 
    callproc       &pc_libmcl.merrort 
#14396: 
#14397: 
    retproc                   
End


Proc pc_genmcl.px_shrto:
    param          pc_genmcl.px_shrto.p u64 
    procentry                 
    push           pc_genmcl.px_shrto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           9          i64 
    casejumpeq     #14399     i64 0
    push           4          i64 
    casejumpeq     #14400     i64 0
    popstack                  i64 
    jump           #14401     
#14399: 
    setargs                   2 0
    push           45         i64 
    push           pc_genmcl.px_shrto.p u64 
    callproc       &pc_genmcl.do_shiftnto 
    jump           #14402     
#14400: 
    setargs                   2 0
    push           46         i64 
    push           pc_genmcl.px_shrto.p u64 
    callproc       &pc_genmcl.do_shiftnto 
    jump           #14402     
#14401: 
    setargs                   2 0
    push           pc_genmcl.px_shrto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "shrto:"   u64 
    callproc       &pc_libmcl.merrort 
#14402: 
#14403: 
    retproc                   
End


Proc pc_genmcl.px_minto:
    param          pc_genmcl.px_minto.p u64 
    procentry                 
    push           pc_genmcl.px_minto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           9          i64 
    casejumpeq     #14405     i64 0
    push           4          i64 
    casejumpeq     #14406     i64 0
    push           12         i64 
    casejumpeq     #14407     i64 0
    push           11         i64 
    casejumpeq     #14408     i64 0
    popstack                  i64 
    jump           #14409     
#14405: 
    setargs                   1 0
    push           14         i64 
    callproc       &pc_genmcl.domaxto_int 
    jump           #14410     
#14406: 
    setargs                   1 0
    push           6          i64 
    callproc       &pc_genmcl.domaxto_int 
    jump           #14410     
#14407: 
    setargs                   1 0
    push           6          i64 
    callproc       &pc_genmcl.domaxto_r64 
    jump           #14410     
#14408: 
    setargs                   1 0
    push           6          i64 
    callproc       &pc_genmcl.domaxto_r32 
    jump           #14410     
#14409: 
    setargs                   2 0
    push           pc_genmcl.px_minto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "minto:"   u64 
    callproc       &pc_libmcl.merrort 
#14410: 
#14411: 
    retproc                   
End


Proc pc_genmcl.px_maxto:
    param          pc_genmcl.px_maxto.p u64 
    procentry                 
    push           pc_genmcl.px_maxto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           9          i64 
    casejumpeq     #14413     i64 0
    push           4          i64 
    casejumpeq     #14414     i64 0
    push           12         i64 
    casejumpeq     #14415     i64 0
    push           11         i64 
    casejumpeq     #14416     i64 0
    popstack                  i64 
    jump           #14417     
#14413: 
    setargs                   1 0
    push           13         i64 
    callproc       &pc_genmcl.domaxto_int 
    jump           #14418     
#14414: 
    setargs                   1 0
    push           3          i64 
    callproc       &pc_genmcl.domaxto_int 
    jump           #14418     
#14415: 
    setargs                   1 0
    push           3          i64 
    callproc       &pc_genmcl.domaxto_r64 
    jump           #14418     
#14416: 
    setargs                   1 0
    push           3          i64 
    callproc       &pc_genmcl.domaxto_r32 
    jump           #14418     
#14417: 
    setargs                   2 0
    push           pc_genmcl.px_maxto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "maxto:"   u64 
    callproc       &pc_libmcl.merrort 
#14418: 
#14419: 
    retproc                   
End


Proc pc_genmcl.px_andlto:
    param          pc_genmcl.px_andlto.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_andlto.p u64 
    callproc       &pc_genmcl.unimpl 
#14421: 
    retproc                   
End


Proc pc_genmcl.px_orlto:
    param          pc_genmcl.px_orlto.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_orlto.p u64 
    callproc       &pc_genmcl.unimpl 
#14423: 
    retproc                   
End


Proc pc_genmcl.px_addrefoffto:
    param          pc_genmcl.px_addrefoffto.p u64 
    local          pc_genmcl.px_addrefoffto.scale i64 
    local          pc_genmcl.px_addrefoffto.extra i64 
    local          pc_genmcl.px_addrefoffto.offset i64 
    local          pc_genmcl.px_addrefoffto.ax u64 
    local          pc_genmcl.px_addrefoffto.bx u64 
    local          pc_genmcl.px_addrefoffto.rx u64 
    local          pc_genmcl.px_addrefoffto.reg i64 
    local          pc_genmcl.px_addrefoffto.size i64 
    procentry                 
    push           pc_genmcl.px_addrefoffto.p u64 
    push           16         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_addrefoffto.scale i64 
    push           pc_genmcl.px_addrefoffto.p u64 
    push           20         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_addrefoffto.extra i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    push           pc_genmcl.px_addrefoffto.scale i64 
    mul                       i64 
    push           pc_genmcl.px_addrefoffto.extra i64 
    add                       i64 
    pop            pc_genmcl.px_addrefoffto.offset i64 
    setargs                   1 0
    push           2          i64 
    callfn         &pc_libmcl.ismemaddr i64 
    jumpfalse      #14425     i64 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    pop            pc_genmcl.px_addrefoffto.ax u64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    pop            pc_genmcl.px_addrefoffto.reg i64 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_addrefoffto.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_genmcl.px_addrefoffto.rx u64 
    setargs                   3 0
    push           pc_genmcl.px_addrefoffto.ax u64 
    push           pc_genmcl.px_addrefoffto.rx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #14426     i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_addrefoffto.offset i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_addrefoffto.rx u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
    jump           #14427     
#14426: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_addrefoffto.bx u64 
    setargs                   2 0
    push           pc_genmcl.px_addrefoffto.scale i64 
    push           pc_genmcl.px_addrefoffto.bx u64 
    callproc       &pc_genmcl.mulimm 
    setargs                   3 0
    push           pc_genmcl.px_addrefoffto.bx u64 
    push           pc_genmcl.px_addrefoffto.rx u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
#14427: 
    setargs                   3 0
    push           pc_genmcl.px_addrefoffto.rx u64 
    push           pc_genmcl.px_addrefoffto.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_genmcl.px_addrefoffto.reg i64 
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_genmcl.px_addrefoffto.reg i64 
    popptroff                 u8 1 -1
    jump           #14428     
#14425: 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.px_addrefoffto.ax u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #14429     i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_addrefoffto.offset i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_addrefoffto.ax u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
    jump           #14430     
#14429: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_addrefoffto.bx u64 
    setargs                   2 0
    push           pc_genmcl.px_addrefoffto.scale i64 
    push           pc_genmcl.px_addrefoffto.bx u64 
    callproc       &pc_genmcl.mulimm 
    setargs                   3 0
    push           pc_genmcl.px_addrefoffto.bx u64 
    push           pc_genmcl.px_addrefoffto.ax u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
#14430: 
#14428: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#14431: 
    retproc                   
End


Proc pc_genmcl.px_subrefoffto:
    param          pc_genmcl.px_subrefoffto.p u64 
    local          pc_genmcl.px_subrefoffto.scale i64 
    local          pc_genmcl.px_subrefoffto.extra i64 
    local          pc_genmcl.px_subrefoffto.ax u64 
    local          pc_genmcl.px_subrefoffto.bx u64 
    procentry                 
    push           pc_genmcl.px_subrefoffto.p u64 
    push           16         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_subrefoffto.scale i64 
    push           pc_genmcl.px_subrefoffto.p u64 
    push           20         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_subrefoffto.extra i64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.px_subrefoffto.ax u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #14433     i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    push           pc_genmcl.px_subrefoffto.scale i64 
    mul                       i64 
    push           pc_genmcl.px_subrefoffto.extra i64 
    add                       i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_subrefoffto.ax u64 
    push           30         i64 
    callproc       &pc_libmcl.genmc 
    jump           #14434     
#14433: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_subrefoffto.bx u64 
    setargs                   2 0
    push           pc_genmcl.px_subrefoffto.scale i64 
    push           pc_genmcl.px_subrefoffto.bx u64 
    callfn         &pc_genmcl.scaleindex i64 
    pop            pc_genmcl.px_subrefoffto.scale i64 
    push           pc_genmcl.px_subrefoffto.scale i64 
    push           1          i64 
    jumple         #14435     i64 
    setargs                   2 0
    push           pc_genmcl.px_subrefoffto.scale i64 
    push           pc_genmcl.px_subrefoffto.bx u64 
    callproc       &pc_genmcl.mulimm 
#14435: 
    setargs                   3 0
    push           pc_genmcl.px_subrefoffto.bx u64 
    push           pc_genmcl.px_subrefoffto.ax u64 
    push           30         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_genmcl.px_subrefoffto.extra i64 
    jumpfalse      #14436     i64 
    setargs                   2 0
    push           ""         u64 
    push           "SUBTOREF/EXTRA" u64 
    callproc       &pc_libmcl.merror 
#14436: 
#14434: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#14437: 
    retproc                   
End


Proc pc_genmcl.px_negto:
    param          pc_genmcl.px_negto.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_negto.p u64 
    callproc       &pc_genmcl.unimpl 
#14439: 
    retproc                   
End


Proc pc_genmcl.px_absto:
    param          pc_genmcl.px_absto.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_absto.p u64 
    callproc       &pc_genmcl.unimpl 
#14441: 
    retproc                   
End


Proc pc_genmcl.px_inotto:
    param          pc_genmcl.px_inotto.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_inotto.p u64 
    callproc       &pc_genmcl.unimpl 
#14443: 
    retproc                   
End


Proc pc_genmcl.px_notlto:
    param          pc_genmcl.px_notlto.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_notlto.p u64 
    callproc       &pc_genmcl.unimpl 
#14445: 
    retproc                   
End


Proc pc_genmcl.px_istruelto:
    param          pc_genmcl.px_istruelto.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_istruelto.p u64 
    callproc       &pc_genmcl.unimpl 
#14447: 
    retproc                   
End


Proc pc_genmcl.px_typepun:
    param          pc_genmcl.px_typepun.p u64 
    local          pc_genmcl.px_typepun.ax u64 
    local          pc_genmcl.px_typepun.bx u64 
    local          pc_genmcl.px_typepun.cx u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_typepun.bx u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_typepun.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #14449     i64 0
    push           3          i64 
    casejumpeq     #14450     i64 0
    push           4          i64 
    casejumpeq     #14451     i64 0
    popstack                  i64 
    jump           #14452     
#14449: 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           2          i64 
    casejumpeq     #14453     i64 0
    push           1          i64 
    casejumpeq     #14454     i64 0
    popstack                  i64 
    jump           #14455     
#14453: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_d64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_typepun.ax u64 
    setargs                   3 0
    push           pc_genmcl.px_typepun.bx u64 
    push           pc_genmcl.px_typepun.ax u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #14456     
#14454: 
    jump           #14456     
#14455: 
    jump           #14457     
#14456: 
    jump           #14458     
#14450: 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           1          i64 
    casejumpeq     #14459     i64 0
    popstack                  i64 
    jump           #14460     
#14459: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_x64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_typepun.ax u64 
    setargs                   3 0
    push           pc_genmcl.px_typepun.bx u64 
    push           pc_genmcl.px_typepun.ax u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #14461     
#14460: 
    jump           #14457     
#14461: 
    jump           #14458     
#14451: 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           3          i64 
    casejumpeq     #14462     i64 0
    push           1          i64 
    casejumpeq     #14463     i64 0
    popstack                  i64 
    jump           #14464     
#14462: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_d64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_typepun.ax u64 
    setargs                   2 0
    push           4          i64 
    push           pc_genmcl.px_typepun.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    pop            pc_genmcl.px_typepun.cx u64 
    setargs                   3 0
    push           pc_genmcl.px_typepun.bx u64 
    push           pc_genmcl.px_typepun.cx u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   3 0
    push           pc_genmcl.px_typepun.cx u64 
    push           pc_genmcl.px_typepun.ax u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_genmcl.px_typepun.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #14465     i64 
    push           19         i64 
    resetmult                 
    jump           #14466     
#14465: 
    push           20         i64 
    endmult                   
#14466: 
    callproc       &pc_libmcl.genmc 
    jump           #14467     
#14463: 
    jump           #14467     
#14464: 
    jump           #14457     
#14467: 
    jump           #14458     
#14452: 
!error::
#14457: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "PSTDNAMES[P.MODE]=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pc_tables.pstdnames 
    push           pc_genmcl.px_typepun.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "FMTNAMES[PCLSTACK[1].FMT]=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pci_mcl.fmtnames 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "TYPEPUN"  u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           ""         u64 
    push           "TYPEPUN"  u64 
    callproc       &pc_libmcl.merror 
#14458: 
#14468: 
    retproc                   
End


Proc pc_genmcl.px_softconv:
    param          pc_genmcl.px_softconv.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_softconv.p u64 
    callproc       &pc_genmcl.unimpl 
#14470: 
    retproc                   
End


Proc pc_genmcl.px_widen:
    param          pc_genmcl.px_widen.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_widen.p u64 
    callproc       &pc_genmcl.unimpl 
#14472: 
    retproc                   
End


Proc pc_genmcl.px_narrow:
    param          pc_genmcl.px_narrow.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_narrow.p u64 
    callproc       &pc_genmcl.unimpl 
#14474: 
    retproc                   
End


Proc pc_genmcl.px_float:
    param          pc_genmcl.px_float.p u64 
    local          pc_genmcl.px_float.ax u64 
    local          pc_genmcl.px_float.fx u64 
    local          pc_genmcl.px_float.lab i64 
    local          pc_genmcl.px_float.lab2 i64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_float.ax u64 
    push           pc_genmcl.px_float.p u64 
    push           16         
    pushptroff                i32 1 0
    push           9          i64 
    casejumpeq     #14476     i64 0
    push           4          i64 
    casejumpeq     #14477     i64 0
    popstack                  i64 
    jump           #14478     
#14476: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_x64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_float.fx u64 
    setargs                   3 0
    push           pc_genmcl.px_float.ax u64 
    push           pc_genmcl.px_float.fx u64 
    push           85         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    jump           #14479     
#14477: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_x64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_float.fx u64 
    setargs                   0 0
    callfn         &pc_libmcl.mcreatefwdlabel i64 
    pop            pc_genmcl.px_float.lab i64 
    setargs                   0 0
    callfn         &pc_libmcl.mcreatefwdlabel i64 
    pop            pc_genmcl.px_float.lab2 i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           0          i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_float.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_float.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           12         i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.px_float.ax u64 
    push           pc_genmcl.px_float.fx u64 
    push           85         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_float.lab2 i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           26         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           pc_genmcl.px_float.lab i64 
    callproc       &pc_libmcl.mdefinefwdlabel 
    push           pci_mcl.labmask63 i64 
    jumptrue       #14480     i64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pci_mcl.labmask63 i64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pci_mcl.laboffset64 i64 
#14480: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.labmask63 i64 
    callfn         &pc_libmcl.mgenlabelmem u64 
    push           pc_genmcl.px_float.ax u64 
    push           39         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.px_float.ax u64 
    push           pc_genmcl.px_float.fx u64 
    push           85         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.laboffset64 i64 
    callfn         &pc_libmcl.mgenlabelmem u64 
    push           pc_genmcl.px_float.fx u64 
    push           68         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           pc_genmcl.px_float.lab2 i64 
    callproc       &pc_libmcl.mdefinefwdlabel 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    jump           #14479     
#14478: 
    setargs                   2 0
    push           pc_genmcl.px_float.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "float"    u64 
    callproc       &pc_libmcl.merrort 
#14479: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#14481: 
    retproc                   
End


Proc pc_genmcl.px_fix:
    param          pc_genmcl.px_fix.p u64 
    local          pc_genmcl.px_fix.fx u64 
    local          pc_genmcl.px_fix.ax u64 
    local          pc_genmcl.px_fix.newmode i64 
    local          pc_genmcl.px_fix.oldmode i64 
    procentry                 
    push           pc_genmcl.px_fix.p u64 
    push           3          
    pushptroff                u8 1 0
    pop            pc_genmcl.px_fix.newmode i64 
    push           pc_genmcl.px_fix.p u64 
    push           16         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_fix.oldmode i64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_fix.newmode i64 
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #14483     i64 0
    popstack                  i64 
    jump           #14484     
#14483: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_fix.fx u64 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_d64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_fix.ax u64 
    setargs                   3 0
    push           pc_genmcl.px_fix.fx u64 
    push           pc_genmcl.px_fix.ax u64 
    startmult                 
    push           pc_genmcl.px_fix.oldmode i64 
    push           12         i64 
    jumpne         #14485     i64 
    push           83         i64 
    resetmult                 
    jump           #14486     
#14485: 
    push           82         i64 
    endmult                   
#14486: 
    callproc       &pc_libmcl.genmc 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #14487     
#14484: 
    setargs                   2 0
    push           pc_genmcl.px_fix.newmode i64 
    push           "fix->"    u64 
    callproc       &pc_libmcl.merrort 
#14487: 
#14488: 
    retproc                   
End


Proc pc_genmcl.px_truncate:
    param          pc_genmcl.px_truncate.p u64 
    local          pc_genmcl.px_truncate.ax u64 
    local          pc_genmcl.px_truncate.mask i64 
    procentry                 
    push           &pc_tables.psize 
    push           pc_genmcl.px_truncate.p u64 
    push           16         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #14490     i64 0
    push           2          i64 
    casejumpeq     #14491     i64 0
    push           4          i64 
    casejumpeq     #14492     i64 0
    popstack                  i64 
    jump           #14493     
#14490: 
    push           255        i64 
    pop            pc_genmcl.px_truncate.mask i64 
    jump           #14494     
#14491: 
    push           65535      i64 
    pop            pc_genmcl.px_truncate.mask i64 
    jump           #14494     
#14492: 
    push           4294967295 i64 
    pop            pc_genmcl.px_truncate.mask i64 
    jump           #14494     
#14493: 
#14494: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_truncate.ax u64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_truncate.mask i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_truncate.ax u64 
    push           39         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           &pc_tables.psize 
    push           pc_genmcl.px_truncate.p u64 
    push           16         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    push           pc_genmcl.px_truncate.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           pc_genmcl.px_truncate.ax u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_genmcl.px_truncate.p u64 
    push           16         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    jumpfalse      #14495     i64 
    push           19         i64 
    resetmult                 
    jump           #14496     
#14495: 
    push           20         i64 
    endmult                   
#14496: 
    callproc       &pc_libmcl.genmc 
#14497: 
    retproc                   
End


Proc pc_genmcl.px_fwiden:
    param          pc_genmcl.px_fwiden.p u64 
    local          pc_genmcl.px_fwiden.fx u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_fwiden.fx u64 
    setargs                   3 0
    push           pc_genmcl.px_fwiden.fx u64 
    push           pc_genmcl.px_fwiden.fx u64 
    push           87         i64 
    callproc       &pc_libmcl.genmc 
    push           2          i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
#14499: 
    retproc                   
End


Proc pc_genmcl.px_fnarrow:
    param          pc_genmcl.px_fnarrow.p u64 
    local          pc_genmcl.px_fnarrow.ax u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_fnarrow.ax u64 
    setargs                   3 0
    push           pc_genmcl.px_fnarrow.ax u64 
    push           pc_genmcl.px_fnarrow.ax u64 
    push           86         i64 
    callproc       &pc_libmcl.genmc 
    push           3          i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
#14501: 
    retproc                   
End


Proc pc_genmcl.px_softtruncw:
    param          pc_genmcl.px_softtruncw.p u64 
    local          pc_genmcl.px_softtruncw.ax u64 
    local          pc_genmcl.px_softtruncw.bx u64 
    local          pc_genmcl.px_softtruncw.bx2 u64 
    local          pc_genmcl.px_softtruncw.lx u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_softtruncw.ax u64 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.unsetwideopnd 
#14503: 
    retproc                   
End


Proc pc_genmcl.px_widenw:
    param          pc_genmcl.px_widenw.p u64 
    local          pc_genmcl.px_widenw.ax u64 
    local          pc_genmcl.px_widenw.bx u64 
    local          pc_genmcl.px_widenw.bx2 u64 
    local          pc_genmcl.px_widenw.lx u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_widenw.ax u64 
    setargs                   0 0
    callfn         &pc_stackmcl.genopnd_d64 u64 
    pop            pc_genmcl.px_widenw.bx u64 
    setargs                   2 0
    push           4          i64 
    push           pc_genmcl.px_widenw.bx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    pop            pc_genmcl.px_widenw.bx2 u64 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    push           &pc_tables.psigned 
    push           pc_genmcl.px_widenw.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #14505     i64 
    setargs                   3 0
    push           pc_genmcl.px_widenw.bx2 u64 
    push           pc_genmcl.px_widenw.bx2 u64 
    push           41         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           0          i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_widenw.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    callfn         &pc_libmcl.mgenlabel u64 
    store          pc_genmcl.px_widenw.lx u64 
    push           13         i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.px_widenw.bx u64 
    push           52         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.px_widenw.lx u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    jump           #14506     
#14505: 
    setargs                   3 0
    push           pc_genmcl.px_widenw.bx2 u64 
    push           pc_genmcl.px_widenw.bx2 u64 
    push           41         i64 
    callproc       &pc_libmcl.genmc 
#14506: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.setwideopnd 
#14507: 
    retproc                   
End


Proc pc_genmcl.px_len:
    param          pc_genmcl.px_len.p u64 
    procentry                 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.unsetwideopnd 
#14509: 
    retproc                   
End


Proc pc_genmcl.px_lwb:
    param          pc_genmcl.px_lwb.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_lwb.p u64 
    callproc       &pc_genmcl.unimpl 
#14511: 
    retproc                   
End


Proc pc_genmcl.px_upb:
    param          pc_genmcl.px_upb.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_upb.p u64 
    callproc       &pc_genmcl.unimpl 
#14513: 
    retproc                   
End


Proc pc_genmcl.px_bounds:
    param          pc_genmcl.px_bounds.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_bounds.p u64 
    callproc       &pc_genmcl.unimpl 
#14515: 
    retproc                   
End


Proc pc_genmcl.px_lenstr:
    param          pc_genmcl.px_lenstr.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_lenstr.p u64 
    callproc       &pc_genmcl.unimpl 
#14517: 
    retproc                   
End


Proc pc_genmcl.px_bitwidth:
    param          pc_genmcl.px_bitwidth.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_bitwidth.p u64 
    callproc       &pc_genmcl.unimpl 
#14519: 
    retproc                   
End


Proc pc_genmcl.px_bytesize:
    param          pc_genmcl.px_bytesize.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_bytesize.p u64 
    callproc       &pc_genmcl.unimpl 
#14521: 
    retproc                   
End


Proc pc_genmcl.px_bytes:
    param          pc_genmcl.px_bytes.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_bytes.p u64 
    callproc       &pc_genmcl.unimpl 
#14523: 
    retproc                   
End


Proc pc_genmcl.px_minvalue:
    param          pc_genmcl.px_minvalue.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_minvalue.p u64 
    callproc       &pc_genmcl.unimpl 
#14525: 
    retproc                   
End


Proc pc_genmcl.px_maxvalue:
    param          pc_genmcl.px_maxvalue.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_maxvalue.p u64 
    callproc       &pc_genmcl.unimpl 
#14527: 
    retproc                   
End


Proc pc_genmcl.px_typestr:
    param          pc_genmcl.px_typestr.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_typestr.p u64 
    callproc       &pc_genmcl.unimpl 
#14529: 
    retproc                   
End


Proc pc_genmcl.px_error:
    param          pc_genmcl.px_error.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_error.p u64 
    callproc       &pc_genmcl.unimpl 
#14531: 
    retproc                   
End


Proc pc_genmcl.px_arraytoslice:
    param          pc_genmcl.px_arraytoslice.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_arraytoslice.p u64 
    callproc       &pc_genmcl.unimpl 
#14533: 
    retproc                   
End


Proc pc_genmcl.px_ichartoslice:
    param          pc_genmcl.px_ichartoslice.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_ichartoslice.p u64 
    callproc       &pc_genmcl.unimpl 
#14535: 
    retproc                   
End


Proc pc_genmcl.px_softtruncshort:
    param          pc_genmcl.px_softtruncshort.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_softtruncshort.p u64 
    callproc       &pc_genmcl.unimpl 
#14537: 
    retproc                   
End


Proc pc_genmcl.px_charaxtoichar:
    param          pc_genmcl.px_charaxtoichar.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_charaxtoichar.p u64 
    callproc       &pc_genmcl.unimpl 
#14539: 
    retproc                   
End


Proc pc_genmcl.px_sliceptr:
    param          pc_genmcl.px_sliceptr.p u64 
    procentry                 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.unsetwideopnd 
#14541: 
    retproc                   
End


Proc pc_genmcl.px_startmult:
    param          pc_genmcl.px_startmult.p u64 
    procentry                 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.pushallopnds 
#14543: 
    retproc                   
End


Proc pc_genmcl.px_resetmult:
    param          pc_genmcl.px_resetmult.p u64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           3          
    pushptroff                u8 1 0
    jumpfalse      #14545     i64 
    setargs                   2 0
    push           ""         u64 
    push           "RESETMULT/XREG" u64 
    callproc       &pc_libmcl.merror 
    jump           #14546     
#14545: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.movetoreg 
#14546: 
    push           pc_genmcl.px_resetmult.p u64 
    push           1          
    pushptroff                u8 1 0
    push           193        i64 
    jumpne         #14547     i64 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#14547: 
#14548: 
    retproc                   
End


Proc pc_genmcl.px_endmult:
    param          pc_genmcl.px_endmult.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_endmult.p u64 
    callproc       &pc_genmcl.px_resetmult 
#14550: 
    retproc                   
End


Proc pc_genmcl.px_setret:
    param          pc_genmcl.px_setret.p u64 
    procentry                 
    setargs                   2 0
    push           1          i64 
    push           1          i64 
    callproc       &pc_genmcl.do_setret 
    push           0          i64 
    push           &pci_mcl.regset 
    push           1          i64 
    popptroff                 u8 1 -1
    push           0          i64 
    push           &pci_mcl.xregset 
    push           1          i64 
    popptroff                 u8 1 -1
#14552: 
    retproc                   
End


Proc pc_genmcl.px_setretmult:
    param          pc_genmcl.px_setretmult.p u64 
    local          pc_genmcl.px_setretmult.k i64 
    local          pc_genmcl.px_setretmult.wide i64 
    local          pc_genmcl.px_setretmult.av_1 i64 
    local          pc_genmcl.px_setretmult.i i64 
    procentry                 
    push           0          i64 
    pop            pc_genmcl.px_setretmult.k i64 
#14554: 
    push           1          i64 
    pop            pc_genmcl.px_setretmult.i i64 
    push           pc_genmcl.px_setretmult.p u64 
    push           16         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_setretmult.av_1 i64 
    push           pc_genmcl.px_setretmult.av_1 i64 
    push           1          i64 
    jumplt         #14555     i64 
#14556: 
    push           &pc_genmcl.px_setretmult.k 
    incr                      i64 1
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           4          
    pushptroff                u8 1 0
    pop            pc_genmcl.px_setretmult.wide i64 
    setargs                   2 0
    push           &pc_genmcl.multxregs 
    push           pc_genmcl.px_setretmult.k i64 
    pushptroff                i64 8 -8
    push           &pc_genmcl.multregs 
    push           pc_genmcl.px_setretmult.k i64 
    pushptroff                i64 8 -8
    callproc       &pc_genmcl.do_setret 
#14557: 
    forup          #14556     i64 1
    opnd           pc_genmcl.px_setretmult.i 
    opnd           pc_genmcl.px_setretmult.av_1 
#14555: 
#14558: 
    push           1          i64 
    pop            pc_genmcl.px_setretmult.i i64 
    push           pc_genmcl.px_setretmult.k i64 
    push           1          i64 
    jumplt         #14559     i64 
#14560: 
    push           0          i64 
    push           &pci_mcl.xregset 
    push           &pc_genmcl.multxregs 
    push           pc_genmcl.px_setretmult.i i64 
    pushptroff                i64 8 -8
    storeptroff               u8 1 -1
    push           &pci_mcl.regset 
    push           &pc_genmcl.multregs 
    push           pc_genmcl.px_setretmult.i i64 
    pushptroff                i64 8 -8
    popptroff                 u8 1 -1
#14561: 
    forup          #14560     i64 1
    opnd           pc_genmcl.px_setretmult.i 
    opnd           pc_genmcl.px_setretmult.k 
#14559: 
#14562: 
    retproc                   
End


Proc pc_genmcl.px_setargs:
    param          pc_genmcl.px_setargs.p u64 
    local          pc_genmcl.px_setargs.nslots i64 
    local          pc_genmcl.px_setargs.shadow i64 
    local          pc_genmcl.px_setargs.align i64 
    local          pc_genmcl.px_setargs.nargs i64 
    local          pc_genmcl.px_setargs.opcode i64 
    local          pc_genmcl.px_setargs.nvars i64 
    procentry                 
    push           pc_genmcl.px_setargs.p u64 
    jumpfalse      #14564     u64 
    push           pc_genmcl.px_setargs.p u64 
    push           16         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_setargs.nargs i64 
    push           pc_genmcl.px_setargs.p u64 
    push           20         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_setargs.nvars i64 
    push           pc_genmcl.px_setargs.p u64 
    push           1          
    pushptroff                u8 1 0
    pop            pc_genmcl.px_setargs.opcode i64 
    jump           #14565     
#14564: 
    push           pci_mcl.sa_nargs i64 
    pop            pc_genmcl.px_setargs.nargs i64 
    push           0          i64 
    pop            pc_genmcl.px_setargs.nvars i64 
    push           0          i64 
    pop            pc_genmcl.px_setargs.opcode i64 
#14565: 
    push           0          i64 
    pop            pc_genmcl.px_setargs.nslots i64 
    push           0          i64 
    pop            pc_genmcl.px_setargs.shadow i64 
    push           0          i64 
    pop            pc_genmcl.px_setargs.align i64 
    push           pc_genmcl.px_setargs.opcode i64 
    push           197        i64 
    casejumpeq     #14566     i64 0
    popstack                  i64 
    jump           #14567     
#14566: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.saveallopnds 
    jump           #14568     
#14567: 
    setargs                   1 0
    push           pc_genmcl.px_setargs.nargs i64 
    push           1          i64 
    add                       i64 
    callproc       &pc_stackmcl.saveallopnds 
#14568: 
    push           pc_genmcl.px_setargs.nargs i64 
    push           4          i64 
    jumpgt         #14569     i64 
    push           pci_mcl.mstackdepth i64 
    push           0          i64 
    jumpne         #14570     i64 
    jump           #14571     
#14570: 
    push           1          i64 
    pop            pc_genmcl.px_setargs.shadow i64 
    push           pci_mcl.mstackdepth i64 
    push           0          i64 
    dotindex                  i64 
    pop            pc_genmcl.px_setargs.align i64 
    push           4          i64 
    pop            pc_genmcl.px_setargs.nslots i64 
#14571: 
    jump           #14572     
#14569: 
    push           1          i64 
    pop            pc_genmcl.px_setargs.shadow i64 
    push           pc_genmcl.px_setargs.nargs i64 
    pop            pc_genmcl.px_setargs.nslots i64 
    push           pci_mcl.mstackdepth i64 
    push           pc_genmcl.px_setargs.nslots i64 
    add                       i64 
    push           0          i64 
    dotindex                  i64 
    pop            pc_genmcl.px_setargs.align i64 
#14572: 
    push           &pc_genmcl.px_setargs.nslots 
    push           pc_genmcl.px_setargs.align i64 
    addto                     i64 
    push           pc_genmcl.px_setargs.align i64 
    jumpfalse      #14573     i64 
    push           pc_genmcl.px_setargs.opcode i64 
    push           197        i64 
    jumpne         #14574     i64 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.pushslots 
    push           0          i64 
    pop            pc_genmcl.px_setargs.align i64 
#14574: 
#14573: 
    push           pci_mcl.ncalldepth i64 
    push           16         i64 
    jumplt         #14575     i64 
    setargs                   2 0
    push           ""         u64 
    push           "Too many nested calls" u64 
    callproc       &pc_libmcl.merror 
#14575: 
    push           &pci_mcl.ncalldepth 
    incr                      i64 1
    push           pci_mcl.ncalldepth i64 
    push           1          i64 
    jumpge         #14576     i64 
    setargs                   1 0
    push           "CALLDEPTH?" u64 
    callproc       &mlibp.abortprogram 
#14576: 
    push           pc_genmcl.px_setargs.nargs i64 
    push           &pci_mcl.callargs 
    push           pci_mcl.ncalldepth i64 
    popptroff                 u8 1 -1
    push           pc_genmcl.px_setargs.nvars i64 
    push           &pci_mcl.callnvars 
    push           pci_mcl.ncalldepth i64 
    popptroff                 u8 1 -1
    push           pc_genmcl.px_setargs.nslots i64 
    push           &pci_mcl.callslots 
    push           pci_mcl.ncalldepth i64 
    popptroff                 i64 8 -8
    push           pc_genmcl.px_setargs.shadow i64 
    push           &pci_mcl.callshadow 
    push           pci_mcl.ncalldepth i64 
    popptroff                 i64 8 -8
    push           pc_genmcl.px_setargs.align i64 
    push           &pci_mcl.callalign 
    push           pci_mcl.ncalldepth i64 
    popptroff                 u8 1 -1
#14577: 
    retproc                   
End


Proc pc_genmcl.px_duplstack:
    param          pc_genmcl.px_duplstack.p u64 
    local          pc_genmcl.px_duplstack.ax u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_duplstack.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           5          i64 
    jumplt         #14579     i64 
    setargs                   2 0
    push           pc_genmcl.px_duplstack.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "duplstack" u64 
    callproc       &pc_libmcl.merrort 
#14579: 
    setargs                   0 0
    callproc       &pc_stackmcl.duploperand 
#14580: 
    retproc                   
End


Proc pc_genmcl.px_swapstack:
    param          pc_genmcl.px_swapstack.p u64 
    procentry                 
    setargs                   2 0
    push           pc_genmcl.px_swapstack.p u64 
    push           16         
    pushptroff                i32 1 0
    push           1          i64 
    add                       i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
#14582: 
    retproc                   
End


Proc pc_genmcl.px_getnprocs:
    param          pc_genmcl.px_getnprocs.p u64 
    procentry                 
    setargs                   0 0
    callproc       &pc_genmcl.dosetfntable 
    setargs                   2 0
    push           0          i64 
    push           pci_mcl.lab_funcnprocs i64 
    callproc       &pc_stackmcl.addlabel 
#14584: 
    retproc                   
End


Proc pc_genmcl.px_getprocname:
    param          pc_genmcl.px_getprocname.p u64 
    local          pc_genmcl.px_getprocname.ax u64 
    procentry                 
    setargs                   0 0
    callproc       &pc_genmcl.dosetfntable 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_getprocname.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #14586     i64 0
    popstack                  i64 
    jump           #14587     
#14586: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_getprocname.ax u64 
    setargs                   3 0
    setargs                   7 0
    push           0          u64 
    push           pci_mcl.lab_funcnametable i64 
    push           0          i64 
    push           -8         i64 
    push           8          i64 
    push           pc_genmcl.px_getprocname.ax u64 
    push           10         
    pushptroff                u8 1 0
    push           0          i64 
    callfn         &pc_libmcl.mgenindex u64 
    push           pc_genmcl.px_getprocname.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #14588     
#14587: 
    setargs                   2 0
    push           pc_genmcl.px_getprocname.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "gpn"      u64 
    callproc       &pc_libmcl.merrort 
#14588: 
#14589: 
    retproc                   
End


Proc pc_genmcl.px_getprocaddr:
    param          pc_genmcl.px_getprocaddr.p u64 
    local          pc_genmcl.px_getprocaddr.ax u64 
    procentry                 
    setargs                   0 0
    callproc       &pc_genmcl.dosetfntable 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_getprocaddr.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #14591     i64 0
    popstack                  i64 
    jump           #14592     
#14591: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_getprocaddr.ax u64 
    setargs                   3 0
    setargs                   7 0
    push           0          u64 
    push           pci_mcl.lab_funcaddrtable i64 
    push           0          i64 
    push           -8         i64 
    push           8          i64 
    push           pc_genmcl.px_getprocaddr.ax u64 
    push           10         
    pushptroff                u8 1 0
    push           0          i64 
    callfn         &pc_libmcl.mgenindex u64 
    push           pc_genmcl.px_getprocaddr.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #14593     
#14592: 
    setargs                   2 0
    push           pc_genmcl.px_getprocaddr.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "gpa"      u64 
    callproc       &pc_libmcl.merrort 
#14593: 
#14594: 
    retproc                   
End


Proc pc_genmcl.px_last:
    param          pc_genmcl.px_last.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_last.p u64 
    callproc       &pc_genmcl.unimpl 
#14596: 
    retproc                   
End


Proc pc_genmcl.dobin_float:
    param          pc_genmcl.dobin_float.opc i64 
    local          pc_genmcl.dobin_float.ax u64 
    local          pc_genmcl.dobin_float.bx u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dobin_float.ax u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dobin_float.bx u64 
    setargs                   3 0
    push           pc_genmcl.dobin_float.bx u64 
    push           pc_genmcl.dobin_float.ax u64 
    push           pc_genmcl.dobin_float.opc i64 
    callproc       &pc_libmcl.genmc 
#14598: 
    retproc                   
End


Proc pc_genmcl.do_pushparams: i64
    param          pc_genmcl.do_pushparams.p u64 
    param          pc_genmcl.do_pushparams.isptr i64 
    local          pc_genmcl.do_pushparams.pushedslots i64 
    local          pc_genmcl.do_pushparams.nparams i64 
    local          pc_genmcl.do_pushparams.nvars i64 
    local          pc_genmcl.do_pushparams.nargs i64 
    procentry                 
    push           pc_genmcl.do_pushparams.p u64 
    jumpfalse      #14600     u64 
    push           &pci_mcl.callargs 
    push           pci_mcl.ncalldepth i64 
    pushptroff                u8 1 -1
    pop            pc_genmcl.do_pushparams.nargs i64 
    push           &pci_mcl.callnvars 
    push           pci_mcl.ncalldepth i64 
    pushptroff                u8 1 -1
    pop            pc_genmcl.do_pushparams.nvars i64 
    jump           #14601     
#14600: 
    push           pci_mcl.sa_nargs i64 
    pop            pc_genmcl.do_pushparams.nargs i64 
    push           0          i64 
    pop            pc_genmcl.do_pushparams.isptr i64 
    push           0          i64 
    pop            pc_genmcl.do_pushparams.nvars i64 
#14601: 
    push           pc_genmcl.do_pushparams.nargs i64 
    push           pci_mcl.inf_maxargs i64 
    jumple         #14602     i64 
    push           pc_genmcl.do_pushparams.nargs i64 
    push           4          i64 
    jumpgt         #14602     i64 
    push           pc_genmcl.do_pushparams.nargs i64 
    pop            pci_mcl.inf_maxargs i64 
#14602: 
    push           pc_genmcl.do_pushparams.nargs i64 
    pop            pc_genmcl.do_pushparams.nparams i64 
    push           pc_genmcl.do_pushparams.nparams i64 
    push           4          i64 
    jumple         #14603     i64 
    setargs                   1 0
    push           pc_genmcl.do_pushparams.isptr i64 
    push           4          i64 
    add                       i64 
    push           1          i64 
    add                       i64 
    callproc       &pc_stackmcl.pushallopnds 
#14603: 
    setargs                   3 0
    push           pc_genmcl.do_pushparams.isptr i64 
    push           pc_genmcl.do_pushparams.nvars i64 
    push           pc_genmcl.do_pushparams.nparams i64 
    callproc       &pc_genmcl.do_pushlowparams 
    push           &pci_mcl.callshadow 
    push           pci_mcl.ncalldepth i64 
    pushptroff                i64 8 -8
    jumpfalse      #14604     i64 
    setargs                   1 0
    push           &pci_mcl.callalign 
    push           pci_mcl.ncalldepth i64 
    pushptroff                u8 1 -1
    push           4          i64 
    add                       i64 
    callproc       &pc_stackmcl.pushslots 
#14604: 
    push           &pci_mcl.callslots 
    push           pci_mcl.ncalldepth i64 
    pushptroff                i64 8 -8
    pop            pc_genmcl.do_pushparams.pushedslots i64 
    push           &pci_mcl.ncalldepth 
    decr                      i64 1
    push           pc_genmcl.do_pushparams.pushedslots i64 
    setret                    i64 
    jump           #14605     
#14605: 
    retfn                     i64 
End


Proc pc_genmcl.do_pushlowparams:
    param          pc_genmcl.do_pushlowparams.nparams i64 
    param          pc_genmcl.do_pushlowparams.nvariadics i64 
    param          pc_genmcl.do_pushlowparams.isptr i64 
    local          pc_genmcl.do_pushlowparams.ireg i64 
    local          pc_genmcl.do_pushlowparams.xreg i64 
    local          pc_genmcl.do_pushlowparams.j i64 
    local          pc_genmcl.do_pushlowparams.i i64 
    procentry                 
    push           pc_genmcl.do_pushlowparams.nparams i64 
    push           0          i64 
    jumpne         #14607     i64 
    jump           #14608     
#14607: 
    push           &pc_genmcl.do_pushlowparams.nparams 
    push           4          i64 
    minto                     i64 
#14609: 
    push           1          i64 
    pop            pc_genmcl.do_pushlowparams.i i64 
    push           pc_genmcl.do_pushlowparams.nparams i64 
    push           1          i64 
    jumplt         #14610     i64 
#14611: 
    push           pc_genmcl.do_pushlowparams.i i64 
    push           pc_genmcl.do_pushlowparams.isptr i64 
    add                       i64 
    pop            pc_genmcl.do_pushlowparams.j i64 
    push           11         i64 
    push           pc_genmcl.do_pushlowparams.i i64 
    add                       i64 
    push           1          i64 
    sub                       i64 
    pop            pc_genmcl.do_pushlowparams.ireg i64 
    push           1          i64 
    push           pc_genmcl.do_pushlowparams.i i64 
    add                       i64 
    push           1          i64 
    sub                       i64 
    pop            pc_genmcl.do_pushlowparams.xreg i64 
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.do_pushlowparams.j i64 
    addrefoff                 block:15 15 -15
    push           3          
    pushptroff                u8 1 0
    jumpfalse      #14612     i64 
    push           pc_genmcl.do_pushlowparams.nvariadics i64 
    jumpfalse      #14613     i64 
    push           pc_genmcl.do_pushlowparams.i i64 
    push           pc_genmcl.do_pushlowparams.nvariadics i64 
    jumpge         #14614     i64 
#14613: 
    push           0          i64 
    pop            pc_genmcl.do_pushlowparams.ireg i64 
#14614: 
    jump           #14615     
#14612: 
    push           0          i64 
    pop            pc_genmcl.do_pushlowparams.xreg i64 
#14615: 
    push           pc_genmcl.do_pushlowparams.ireg i64 
    jumpfalse      #14616     i64 
    setargs                   2 0
    push           pc_genmcl.do_pushlowparams.ireg i64 
    push           pc_genmcl.do_pushlowparams.j i64 
    callproc       &pc_stackmcl.loadparam 
#14616: 
    push           pc_genmcl.do_pushlowparams.xreg i64 
    jumpfalse      #14617     i64 
    setargs                   2 0
    push           pc_genmcl.do_pushlowparams.xreg i64 
    push           pc_genmcl.do_pushlowparams.j i64 
    callproc       &pc_stackmcl.loadxparam 
#14617: 
#14618: 
    forup          #14611     i64 1
    opnd           pc_genmcl.do_pushlowparams.i 
    opnd           pc_genmcl.do_pushlowparams.nparams 
#14610: 
#14608: 
    retproc                   
End


Proc pc_genmcl.do_for:
    param          pc_genmcl.do_for.p u64 
    param          pc_genmcl.do_for.incop i64 
    param          pc_genmcl.do_for.addop i64 
    param          pc_genmcl.do_for.cond i64 
    local          pc_genmcl.do_for.q u64 
    local          pc_genmcl.do_for.r u64 
    local          pc_genmcl.do_for.ax u64 
    local          pc_genmcl.do_for.bx u64 
    local          pc_genmcl.do_for.cx u64 
    local          pc_genmcl.do_for.dx u64 
    local          pc_genmcl.do_for.mx u64 
    local          pc_genmcl.do_for.reg i64 
    procentry                 
    push           pc_genmcl.do_for.p u64 
    push           1          i64 
    addrefoff                 u64 32 0
    pop            pc_genmcl.do_for.q u64 
    push           pc_genmcl.do_for.q u64 
    push           1          i64 
    addrefoff                 u64 32 0
    store          pc_genmcl.currpcl u64 
    pop            pc_genmcl.do_for.r u64 
    setargs                   1 0
    push           pc_genmcl.do_for.q u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    pop            pc_genmcl.do_for.mx u64 
    push           pc_genmcl.do_for.q u64 
    push           8          
    pushptroff                u64 1 0
    push           50         
    pushptroff                u8 1 0
    jumpfalse      #14620     i64 
    push           pc_genmcl.do_for.p u64 
    push           16         
    pushptroff                i32 1 0
    push           1          i64 
    jumpne         #14621     i64 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.do_for.mx u64 
    push           pc_genmcl.do_for.incop i64 
    callproc       &pc_libmcl.genmc 
    jump           #14622     
#14621: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.do_for.p u64 
    push           16         
    pushptroff                i32 1 0
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.do_for.mx u64 
    push           pc_genmcl.do_for.addop i64 
    callproc       &pc_libmcl.genmc 
#14622: 
    push           pc_genmcl.do_for.mx u64 
    pop            pc_genmcl.do_for.ax u64 
    jump           #14623     
#14620: 
    setargs                   2 0
    push           8          i64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_genmcl.do_for.ax u64 
    setargs                   3 0
    push           pc_genmcl.do_for.mx u64 
    push           pc_genmcl.do_for.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_genmcl.do_for.p u64 
    push           16         
    pushptroff                i32 1 0
    push           1          i64 
    jumpne         #14624     i64 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.do_for.ax u64 
    push           pc_genmcl.do_for.incop i64 
    callproc       &pc_libmcl.genmc 
    jump           #14625     
#14624: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.do_for.p u64 
    push           16         
    pushptroff                i32 1 0
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.do_for.ax u64 
    push           pc_genmcl.do_for.addop i64 
    callproc       &pc_libmcl.genmc 
#14625: 
    setargs                   3 0
    push           pc_genmcl.do_for.ax u64 
    push           pc_genmcl.do_for.mx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
#14623: 
    push           pc_genmcl.do_for.r u64 
    pushptr                   u8 
    push           4          i64 
    jumpne         #14626     i64 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.do_for.r u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenint u64 
    pop            pc_genmcl.do_for.bx u64 
    jump           #14627     
#14626: 
    setargs                   1 0
    push           pc_genmcl.do_for.r u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    pop            pc_genmcl.do_for.bx u64 
#14627: 
    setargs                   3 0
    push           pc_genmcl.do_for.bx u64 
    push           pc_genmcl.do_for.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_genmcl.do_for.ax u64 
    push           10         
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_genmcl.do_for.ax u64 
    push           10         
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.do_for.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    push           pc_genmcl.do_for.cond i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
#14628: 
    retproc                   
End


Proc pc_genmcl.dojumpcc:
    param          pc_genmcl.dojumpcc.p u64 
    local          pc_genmcl.dojumpcc.m i64 
    local          pc_genmcl.dojumpcc.cond i64 
    local          pc_genmcl.dojumpcc.ax u64 
    local          pc_genmcl.dojumpcc.bx u64 
    procentry                 
    push           pc_genmcl.dojumpcc.p u64 
    push           3          
    pushptroff                u8 1 0
    pop            pc_genmcl.dojumpcc.m i64 
    push           pc_genmcl.dojumpcc.p u64 
    push           3          
    pushptroff                u8 1 0
    push           10         i64 
    setjumpeq      #14630     i64 
    push           5          i64 
    setjumpne      #14631     i64 
#14630: 
    setargs                   1 0
    push           pc_genmcl.dojumpcc.p u64 
    callproc       &pc_genmcl.dojumpcc_i128 
    jump           #14632     
#14631: 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dojumpcc.ax u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dojumpcc.bx u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.dojumpcc.m i64 
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #14633     i64 0
    push           2          i64 
    casejumpeq     #14634     i64 0
    push           3          i64 
    casejumpeq     #14635     i64 0
    popstack                  i64 
    jump           #14636     
#14633: 
    push           &pc_tables.psigned 
    push           pc_genmcl.dojumpcc.m i64 
    pushptroff                u8 1 0
    jumpfalse      #14637     i64 
    push           &pc_genmcl.scondcodes 
    push           pc_genmcl.dojumpcc.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u8 1 -53
    pop            pc_genmcl.dojumpcc.cond i64 
    jump           #14638     
#14637: 
    push           &pc_genmcl.ucondcodes 
    push           pc_genmcl.dojumpcc.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u8 1 -53
    pop            pc_genmcl.dojumpcc.cond i64 
#14638: 
    setargs                   3 0
    push           pc_genmcl.dojumpcc.bx u64 
    push           pc_genmcl.dojumpcc.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    jump           #14639     
#14634: 
    push           &pc_genmcl.ucondcodes 
    push           pc_genmcl.dojumpcc.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u8 1 -53
    pop            pc_genmcl.dojumpcc.cond i64 
    setargs                   3 0
    push           pc_genmcl.dojumpcc.bx u64 
    push           pc_genmcl.dojumpcc.ax u64 
    push           72         i64 
    callproc       &pc_libmcl.genmc 
    jump           #14639     
#14635: 
    push           &pc_genmcl.ucondcodes 
    push           pc_genmcl.dojumpcc.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u8 1 -53
    pop            pc_genmcl.dojumpcc.cond i64 
    setargs                   3 0
    push           pc_genmcl.dojumpcc.bx u64 
    push           pc_genmcl.dojumpcc.ax u64 
    push           73         i64 
    callproc       &pc_libmcl.genmc 
    jump           #14639     
#14636: 
    setargs                   2 0
    push           pc_genmcl.dojumpcc.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "jumpcc:"  u64 
    callproc       &pc_libmcl.merrort 
#14639: 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.dojumpcc.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    push           pc_genmcl.dojumpcc.cond i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#14632: 
    retproc                   
End


Proc pc_genmcl.dosetcc:
    param          pc_genmcl.dosetcc.p u64 
    local          pc_genmcl.dosetcc.m i64 
    local          pc_genmcl.dosetcc.cond i64 
    local          pc_genmcl.dosetcc.ax u64 
    local          pc_genmcl.dosetcc.bx u64 
    procentry                 
    push           pc_genmcl.dosetcc.p u64 
    push           3          
    pushptroff                u8 1 0
    pop            pc_genmcl.dosetcc.m i64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dosetcc.ax u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dosetcc.bx u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.dosetcc.m i64 
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #14641     i64 0
    push           2          i64 
    casejumpeq     #14642     i64 0
    push           3          i64 
    casejumpeq     #14643     i64 0
    popstack                  i64 
    jump           #14644     
#14641: 
    push           &pc_tables.psigned 
    push           pc_genmcl.dosetcc.m i64 
    pushptroff                u8 1 0
    jumpfalse      #14645     i64 
    push           &pc_genmcl.scondcodes 
    push           pc_genmcl.dosetcc.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u8 1 -66
    pop            pc_genmcl.dosetcc.cond i64 
    jump           #14646     
#14645: 
    push           &pc_genmcl.ucondcodes 
    push           pc_genmcl.dosetcc.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u8 1 -66
    pop            pc_genmcl.dosetcc.cond i64 
#14646: 
    setargs                   3 0
    push           pc_genmcl.dosetcc.bx u64 
    push           pc_genmcl.dosetcc.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    jump           #14647     
#14642: 
    push           &pc_genmcl.ucondcodes 
    push           pc_genmcl.dosetcc.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u8 1 -66
    pop            pc_genmcl.dosetcc.cond i64 
    setargs                   3 0
    push           pc_genmcl.dosetcc.bx u64 
    push           pc_genmcl.dosetcc.ax u64 
    push           72         i64 
    callproc       &pc_libmcl.genmc 
    jump           #14647     
#14643: 
    push           &pc_genmcl.ucondcodes 
    push           pc_genmcl.dosetcc.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u8 1 -66
    pop            pc_genmcl.dosetcc.cond i64 
    setargs                   3 0
    push           pc_genmcl.dosetcc.bx u64 
    push           pc_genmcl.dosetcc.ax u64 
    push           73         i64 
    callproc       &pc_libmcl.genmc 
    jump           #14647     
#14644: 
    setargs                   2 0
    push           pc_genmcl.dosetcc.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "setcc:"   u64 
    callproc       &pc_libmcl.merrort 
#14647: 
    setargs                   4 0
    push           0          u64 
    setargs                   2 0
    push           1          i64 
    push           pc_genmcl.dosetcc.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    store          pc_genmcl.dosetcc.bx u64 
    push           pc_genmcl.dosetcc.cond i64 
    push           59         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.dosetcc.bx u64 
    setargs                   2 0
    push           4          i64 
    push           pc_genmcl.dosetcc.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           20         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#14648: 
    retproc                   
End


Proc pc_genmcl.do_setretfloat:
    param          pc_genmcl.do_setretfloat.destreg i64 
    local          pc_genmcl.do_setretfloat.currreg i64 
    local          pc_genmcl.do_setretfloat.ax u64 
    local          pc_genmcl.do_setretfloat.rx u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.do_setretfloat.destreg i64 
    callfn         &pc_libmcl.mgenxreg u64 
    pop            pc_genmcl.do_setretfloat.rx u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.do_setretfloat.ax u64 
    push           pc_genmcl.do_setretfloat.ax u64 
    push           10         
    pushptroff                u8 1 0
    pop            pc_genmcl.do_setretfloat.currreg i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           2          i64 
    casejumpeq     #14650     i64 0
    popstack                  i64 
    jump           #14651     
#14650: 
    push           pc_genmcl.do_setretfloat.currreg i64 
    push           pc_genmcl.do_setretfloat.destreg i64 
    jumpeq         #14652     i64 
    push           &pci_mcl.regset 
    push           pc_genmcl.do_setretfloat.destreg i64 
    pushptroff                u8 1 -1
    jumpfalse      #14653     i64 
    setargs                   2 0
    push           ""         u64 
    push           "setretfloat/dest in use" u64 
    callproc       &pc_libmcl.merror 
    jump           #14654     
#14653: 
    setargs                   3 0
    push           pc_genmcl.do_setretfloat.ax u64 
    push           pc_genmcl.do_setretfloat.rx u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    push           1          i64 
    push           &pci_mcl.xregset 
    push           pc_genmcl.do_setretfloat.destreg i64 
    popptroff                 u8 1 -1
#14654: 
#14652: 
    jump           #14655     
#14651: 
    setargs                   2 0
    push           ""         u64 
    push           "setretf?" u64 
    callproc       &pc_libmcl.merror 
#14655: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#14656: 
    retproc                   
End


Proc pc_genmcl.do_setret:
    param          pc_genmcl.do_setret.destreg i64 
    param          pc_genmcl.do_setret.destxreg i64 
    local          pc_genmcl.do_setret.currreg i64 
    local          pc_genmcl.do_setret.ax u64 
    local          pc_genmcl.do_setret.rx u64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           3          
    pushptroff                u8 1 0
    jumpfalse      #14658     i64 
    setargs                   1 0
    push           pc_genmcl.do_setret.destxreg i64 
    callproc       &pc_genmcl.do_setretfloat 
    jump           #14659     
#14658: 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.do_setret.destreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_genmcl.do_setret.rx u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.do_setret.ax u64 
    push           pc_genmcl.do_setret.ax u64 
    push           10         
    pushptroff                u8 1 0
    pop            pc_genmcl.do_setret.currreg i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #14660     i64 0
    popstack                  i64 
    jump           #14661     
#14660: 
    push           pc_genmcl.do_setret.currreg i64 
    push           pc_genmcl.do_setret.destreg i64 
    jumpeq         #14662     i64 
    push           &pci_mcl.regset 
    push           pc_genmcl.do_setret.destreg i64 
    pushptroff                u8 1 -1
    jumpfalse      #14663     i64 
    setargs                   1 0
    push           pc_genmcl.do_setret.destreg i64 
    callproc       &pc_stackmcl.swapopndregs 
    setargs                   3 0
    push           pc_genmcl.do_setret.ax u64 
    push           pc_genmcl.do_setret.rx u64 
    push           28         i64 
    callproc       &pc_libmcl.genmc 
    jump           #14664     
#14663: 
    setargs                   3 0
    push           pc_genmcl.do_setret.ax u64 
    push           pc_genmcl.do_setret.rx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
#14664: 
#14662: 
    jump           #14665     
#14661: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "LOCNAMES[PCLSTACK[1].LOC]=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pci_mcl.locnames 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           ""         u64 
    push           "setret?"  u64 
    callproc       &pc_libmcl.merror 
#14665: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    push           1          i64 
    push           &pci_mcl.regset 
    push           pc_genmcl.do_setret.destreg i64 
    popptroff                 u8 1 -1
    push           0          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_genmcl.do_setret.destreg i64 
    popptroff                 u8 1 -1
#14659: 
    retproc                   
End


Proc pc_genmcl.dogetretvalue:
    param          pc_genmcl.dogetretvalue.p u64 
    local          pc_genmcl.dogetretvalue.reg i64 
    local          pc_genmcl.dogetretvalue.xreg i64 
    local          pc_genmcl.dogetretvalue.i i64 
    local          pc_genmcl.dogetretvalue.n i64 
    local          pc_genmcl.dogetretvalue.cats block:80 
    procentry                 
    push           pc_genmcl.dogetretvalue.p u64 
    push           1          i64 
    addrefoff                 u64 32 0
    push           1          
    pushptroff                u8 1 0
    push           28         i64 
    jumpne         #14667     i64 
    push           0          i64 
    pop            pc_genmcl.dogetretvalue.n i64 
    jump           #14668     
#14669: 
    push           &pc_tables.pcat 
    push           pc_genmcl.dogetretvalue.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           &pc_genmcl.dogetretvalue.cats 
    push           &pc_genmcl.dogetretvalue.n 
    incrload                  i64 1
    popptroff                 i64 8 -8
#14668: 
    push           &pc_genmcl.dogetretvalue.p 
    incrload                  u64 32
    push           1          
    pushptroff                u8 1 0
    push           28         i64 
    jumpeq         #14669     i64 
#14670: 
    push           pc_genmcl.dogetretvalue.p u64 
    push           1          i64 
    subrefoff                 u64 32 0
    pop            pc_genmcl.currpcl u64 
#14671: 
    push           pc_genmcl.dogetretvalue.n i64 
    pop            pc_genmcl.dogetretvalue.i i64 
    push           pc_genmcl.dogetretvalue.i i64 
    push           1          i64 
    jumplt         #14672     i64 
#14673: 
    push           &pc_genmcl.dogetretvalue.cats 
    push           pc_genmcl.dogetretvalue.i i64 
    pushptroff                i64 8 -8
    push           4          i64 
    casejumpeq     #14674     i64 0
    push           5          i64 
    casejumpeq     #14674     i64 0
    popstack                  i64 
    jump           #14675     
#14674: 
    setargs                   2 0
    push           ""         u64 
    push           "Short/wide mulret type" u64 
    callproc       &pc_libmcl.merror 
    jump           #14676     
#14675: 
#14676: 
    setargs                   3 0
    push           &pc_genmcl.dogetretvalue.cats 
    push           pc_genmcl.dogetretvalue.i i64 
    pushptroff                i64 8 -8
    push           &pc_genmcl.multxregs 
    push           pc_genmcl.dogetretvalue.i i64 
    pushptroff                i64 8 -8
    push           &pc_genmcl.multregs 
    push           pc_genmcl.dogetretvalue.i i64 
    pushptroff                i64 8 -8
    callproc       &pc_genmcl.dogetretvalue_n 
#14677: 
    fordown        #14673     i64 1
    opnd           pc_genmcl.dogetretvalue.i 
    opnd           1          
#14672: 
    jump           #14678     
#14667: 
    setargs                   3 0
    push           &pc_tables.pcat 
    push           pc_genmcl.dogetretvalue.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    push           1          i64 
    callproc       &pc_genmcl.dogetretvalue_n 
    push           &pc_tables.pcat 
    push           pc_genmcl.dogetretvalue.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           4          i64 
    jumpne         #14679     i64 
    setargs                   3 0
    setargs                   2 0
    push           pc_genmcl.dogetretvalue.p u64 
    push           4          
    pushptroff                i32 1 0
    push           1          i64 
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_libmcl.mgenreg u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_genmcl.dogetretvalue.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #14680     i64 
    push           19         i64 
    resetmult                 
    jump           #14681     
#14680: 
    push           20         i64 
    endmult                   
#14681: 
    callproc       &pc_libmcl.genmc 
#14679: 
#14678: 
#14682: 
    retproc                   
End


Proc pc_genmcl.dogetretvalue_n:
    param          pc_genmcl.dogetretvalue_n.reg i64 
    param          pc_genmcl.dogetretvalue_n.xreg i64 
    param          pc_genmcl.dogetretvalue_n.cat i64 
    procentry                 
    push           pc_genmcl.dogetretvalue_n.cat i64 
    push           1          i64 
    casejumpeq     #14684     i64 0
    push           4          i64 
    casejumpeq     #14684     i64 0
    push           3          i64 
    casejumpeq     #14685     i64 0
    push           2          i64 
    casejumpeq     #14686     i64 0
    push           5          i64 
    casejumpeq     #14687     i64 0
    popstack                  i64 
    jump           #14688     
#14684: 
    setargs                   1 0
    push           pc_genmcl.dogetretvalue_n.reg i64 
    callproc       &pc_stackmcl.addreg0 
    jump           #14689     
#14685: 
    setargs                   2 0
    push           2          i64 
    push           pc_genmcl.dogetretvalue_n.xreg i64 
    callproc       &pc_stackmcl.addxreg0 
    jump           #14689     
#14686: 
    setargs                   2 0
    push           3          i64 
    push           pc_genmcl.dogetretvalue_n.xreg i64 
    callproc       &pc_stackmcl.addxreg0 
    jump           #14689     
#14687: 
    setargs                   1 0
    push           pc_genmcl.dogetretvalue_n.reg i64 
    callproc       &pc_stackmcl.addwidereg0 
    jump           #14689     
#14688: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pc_tables.pstdnames 
    push           pc_genmcl.dogetretvalue_n.cat i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           ""         u64 
    push           "getretval/n?" u64 
    callproc       &pc_libmcl.merror 
#14689: 
#14690: 
    retproc                   
End


Proc pc_genmcl.do_shift:
    param          pc_genmcl.do_shift.p u64 
    param          pc_genmcl.do_shift.opc i64 
    local          pc_genmcl.do_shift.ax u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.do_shift.ax u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #14692     i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.do_shift.ax u64 
    push           pc_genmcl.do_shift.opc i64 
    callproc       &pc_libmcl.genmc 
    jump           #14693     
#14692: 
    push           pci_mcl.inf_r10used i64 
    jumpfalse      #14694     i64 
    setargs                   2 0
    push           ""         u64 
    push           "shift:cl in use" u64 
    callproc       &pc_libmcl.merror 
#14694: 
    setargs                   2 0
    push           11         i64 
    push           1          i64 
    callproc       &pc_stackmcl.loadparam 
    setargs                   3 0
    setargs                   2 0
    push           1          i64 
    push           11         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           pc_genmcl.do_shift.ax u64 
    push           pc_genmcl.do_shift.opc i64 
    callproc       &pc_libmcl.genmc 
#14693: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#14695: 
    retproc                   
End


Proc pc_genmcl.mulimm:
    param          pc_genmcl.mulimm.ax u64 
    param          pc_genmcl.mulimm.n i64 
    local          pc_genmcl.mulimm.shifts i64 
    local          pc_genmcl.mulimm.m i64 
    procentry                 
    push           pc_genmcl.mulimm.n i64 
    push           0          i64 
    casejumpeq     #14697     i64 0
    push           1          i64 
    casejumpeq     #14698     i64 0
    push           -1         i64 
    casejumpeq     #14699     i64 0
    popstack                  i64 
    jump           #14700     
#14697: 
    setargs                   3 0
    push           pc_genmcl.mulimm.ax u64 
    push           pc_genmcl.mulimm.ax u64 
    push           41         i64 
    callproc       &pc_libmcl.genmc 
    jump           #14701     
    jump           #14702     
#14698: 
    jump           #14701     
    jump           #14702     
#14699: 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.mulimm.ax u64 
    push           51         i64 
    callproc       &pc_libmcl.genmc 
    jump           #14701     
    jump           #14702     
#14700: 
#14702: 
    push           0          i64 
    pop            pc_genmcl.mulimm.shifts i64 
    push           pc_genmcl.mulimm.n i64 
    pop            pc_genmcl.mulimm.m i64 
    jump           #14703     
#14704: 
    push           &pc_genmcl.mulimm.m 
    push           1          i64 
    shrto                     i64 
    push           &pc_genmcl.mulimm.shifts 
    incr                      i64 1
#14703: 
    push           pc_genmcl.mulimm.m i64 
    push           0          i64 
    dotindex                  i64 
    jumpfalse      #14704     i64 
#14705: 
    push           pc_genmcl.mulimm.shifts i64 
    jumpfalse      #14706     i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.mulimm.shifts i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.mulimm.ax u64 
    push           44         i64 
    callproc       &pc_libmcl.genmc 
#14706: 
    push           pc_genmcl.mulimm.m i64 
    push           1          i64 
    casejumpeq     #14707     i64 0
    push           3          i64 
    casejumpeq     #14708     i64 0
    push           5          i64 
    casejumpeq     #14708     i64 0
    push           9          i64 
    casejumpeq     #14708     i64 0
    popstack                  i64 
    jump           #14709     
#14707: 
    jump           #14701     
    jump           #14710     
#14708: 
    setargs                   3 0
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           0          i64 
    push           0          i64 
    push           pc_genmcl.mulimm.m i64 
    push           1          i64 
    sub                       i64 
    push           pc_genmcl.mulimm.ax u64 
    push           10         
    pushptroff                u8 1 0
    push           pc_genmcl.mulimm.ax u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenindex u64 
    push           pc_genmcl.mulimm.ax u64 
    push           15         i64 
    callproc       &pc_libmcl.genmc 
    jump           #14710     
#14709: 
    push           pc_genmcl.mulimm.shifts i64 
    jumpfalse      #14711     i64 
    push           35         i64 
    push           pci_mcl.mccodex u64 
    push           24         
    popptroff                 u8 1 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.mulimm.n i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pci_mcl.mccodex u64 
    push           16         
    popptroff                 u64 1 0
    jump           #14712     
#14711: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.mulimm.n i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.mulimm.ax u64 
    push           35         i64 
    callproc       &pc_libmcl.genmc 
#14712: 
#14710: 
#14701: 
    retproc                   
End


Proc pc_genmcl.dojumptruefalse:
    param          pc_genmcl.dojumptruefalse.p u64 
    param          pc_genmcl.dojumptruefalse.cond i64 
    local          pc_genmcl.dojumptruefalse.ax u64 
    local          pc_genmcl.dojumptruefalse.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.dojumptruefalse.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #14714     i64 0
    popstack                  i64 
    jump           #14715     
#14714: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dojumptruefalse.ax u64 
    setargs                   3 0
    push           pc_genmcl.dojumptruefalse.ax u64 
    push           pc_genmcl.dojumptruefalse.ax u64 
    push           42         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.dojumptruefalse.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    push           pc_genmcl.dojumptruefalse.cond i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    jump           #14716     
#14715: 
    setargs                   2 0
    push           pc_genmcl.dojumptruefalse.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "jumptrue/false" u64 
    callproc       &pc_libmcl.merrort 
#14716: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#14717: 
    retproc                   
End


Proc pc_genmcl.dobitwise:
    param          pc_genmcl.dobitwise.p u64 
    param          pc_genmcl.dobitwise.opc i64 
    local          pc_genmcl.dobitwise.ax u64 
    local          pc_genmcl.dobitwise.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.dobitwise.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #14719     i64 0
    push           5          i64 
    casejumpeq     #14720     i64 0
    popstack                  i64 
    jump           #14721     
#14719: 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dobitwise.ax u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dobitwise.bx u64 
    setargs                   3 0
    push           pc_genmcl.dobitwise.bx u64 
    push           pc_genmcl.dobitwise.ax u64 
    push           pc_genmcl.dobitwise.opc i64 
    callproc       &pc_libmcl.genmc 
    jump           #14722     
#14720: 
    setargs                   3 0
    push           pc_genmcl.dobitwise.opc i64 
    push           pc_genmcl.dobitwise.opc i64 
    push           pc_genmcl.dobitwise.p u64 
    callproc       &pc_genmcl.dobin_i128 
    jump           #14723     
    jump           #14722     
#14721: 
    setargs                   2 0
    push           pc_genmcl.dobitwise.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "bitwise:" u64 
    callproc       &pc_libmcl.merrort 
#14722: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#14723: 
    retproc                   
End


Proc pc_genmcl.do_addrmode: u64
    param          pc_genmcl.do_addrmode.p u64 
    local          pc_genmcl.do_addrmode.px u64 
    local          pc_genmcl.do_addrmode.ax u64 
    local          pc_genmcl.do_addrmode.bx u64 
    local          pc_genmcl.do_addrmode.m i64 
    local          pc_genmcl.do_addrmode.scale i64 
    local          pc_genmcl.do_addrmode.extra i64 
    local          pc_genmcl.do_addrmode.offset i64 
    local          pc_genmcl.do_addrmode.reg i64 
    local          pc_genmcl.do_addrmode.regix i64 
    local          pc_genmcl.do_addrmode.d u64 
    procentry                 
    push           pc_genmcl.do_addrmode.p u64 
    push           16         
    pushptroff                i32 1 0
    pop            pc_genmcl.do_addrmode.scale i64 
    push           pc_genmcl.do_addrmode.p u64 
    push           20         
    pushptroff                i32 1 0
    pop            pc_genmcl.do_addrmode.extra i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    push           pc_genmcl.do_addrmode.scale i64 
    mul                       i64 
    push           pc_genmcl.do_addrmode.extra i64 
    add                       i64 
    pop            pc_genmcl.do_addrmode.offset i64 
    push           pc_genmcl.do_addrmode.p u64 
    push           3          
    pushptroff                u8 1 0
    pop            pc_genmcl.do_addrmode.m i64 
    push           0          u64 
    pop            pc_genmcl.do_addrmode.px u64 
    setargs                   1 0
    push           2          i64 
    callfn         &pc_libmcl.isregvaropnd i64 
    jumpfalse      #14725     i64 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.isregvaropnd i64 
    jumpfalse      #14726     i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_genmcl.do_addrmode.reg i64 
    setargs                   3 0
    push           1          i64 
    push           &pc_genmcl.do_addrmode.scale 
    push           pc_genmcl.do_addrmode.reg i64 
    callfn         &pc_genmcl.scaleregvar i64 
    pop            pc_genmcl.do_addrmode.regix i64 
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           0          i64 
    push           pc_genmcl.do_addrmode.extra i64 
    push           pc_genmcl.do_addrmode.scale i64 
    push           pc_genmcl.do_addrmode.regix i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenindex u64 
    pop            pc_genmcl.do_addrmode.px u64 
    jump           #14727     
#14726: 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.isimm64 i64 
    jumpfalse      #14728     i64 
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           0          i64 
    push           pc_genmcl.do_addrmode.offset i64 
    push           1          i64 
    push           0          i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenindex u64 
    pop            pc_genmcl.do_addrmode.px u64 
    jump           #14727     
#14728: 
    setargs                   2 0
    push           pc_genmcl.do_addrmode.scale i64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    store          pc_genmcl.do_addrmode.bx u64 
    callfn         &pc_genmcl.scaleindex i64 
    pop            pc_genmcl.do_addrmode.scale i64 
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           0          i64 
    push           pc_genmcl.do_addrmode.extra i64 
    push           pc_genmcl.do_addrmode.scale i64 
    push           pc_genmcl.do_addrmode.bx u64 
    push           10         
    pushptroff                u8 1 0
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenindex u64 
    pop            pc_genmcl.do_addrmode.px u64 
#14727: 
    jump           #14729     
#14725: 
    setargs                   1 0
    push           2          i64 
    callfn         &pc_libmcl.ismemaddr i64 
    jumpfalse      #14730     i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    pop            pc_genmcl.do_addrmode.d u64 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.isregvaropnd i64 
    jumpfalse      #14731     i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_genmcl.do_addrmode.reg i64 
    setargs                   3 0
    push           1          i64 
    push           &pc_genmcl.do_addrmode.scale 
    push           pc_genmcl.do_addrmode.reg i64 
    callfn         &pc_genmcl.scaleregvar i64 
    pop            pc_genmcl.do_addrmode.regix i64 
    setargs                   7 0
    push           pc_genmcl.do_addrmode.d u64 
    push           0          i64 
    push           0          i64 
    push           pc_genmcl.do_addrmode.extra i64 
    push           pc_genmcl.do_addrmode.scale i64 
    push           pc_genmcl.do_addrmode.regix i64 
    push           0          i64 
    callfn         &pc_libmcl.mgenindex u64 
    pop            pc_genmcl.do_addrmode.px u64 
    jump           #14732     
#14731: 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.isimm64 i64 
    jumpfalse      #14733     i64 
    setargs                   7 0
    push           pc_genmcl.do_addrmode.d u64 
    push           0          i64 
    push           0          i64 
    push           pc_genmcl.do_addrmode.offset i64 
    push           1          i64 
    push           0          i64 
    push           0          i64 
    callfn         &pc_libmcl.mgenindex u64 
    pop            pc_genmcl.do_addrmode.px u64 
    jump           #14732     
#14733: 
    setargs                   2 0
    push           pc_genmcl.do_addrmode.scale i64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    store          pc_genmcl.do_addrmode.bx u64 
    callfn         &pc_genmcl.scaleindex i64 
    pop            pc_genmcl.do_addrmode.scale i64 
    setargs                   7 0
    push           pc_genmcl.do_addrmode.d u64 
    push           0          i64 
    push           0          i64 
    push           pc_genmcl.do_addrmode.extra i64 
    push           pc_genmcl.do_addrmode.scale i64 
    push           pc_genmcl.do_addrmode.bx u64 
    push           10         
    pushptroff                u8 1 0
    push           0          i64 
    callfn         &pc_libmcl.mgenindex u64 
    pop            pc_genmcl.do_addrmode.px u64 
#14732: 
    jump           #14729     
#14730: 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.do_addrmode.ax u64 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.isregvaropnd i64 
    jumpfalse      #14734     i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_genmcl.do_addrmode.reg i64 
    setargs                   3 0
    push           1          i64 
    push           &pc_genmcl.do_addrmode.scale 
    push           pc_genmcl.do_addrmode.reg i64 
    callfn         &pc_genmcl.scaleregvar i64 
    pop            pc_genmcl.do_addrmode.regix i64 
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           0          i64 
    push           pc_genmcl.do_addrmode.extra i64 
    push           pc_genmcl.do_addrmode.scale i64 
    push           pc_genmcl.do_addrmode.regix i64 
    push           pc_genmcl.do_addrmode.ax u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenindex u64 
    pop            pc_genmcl.do_addrmode.px u64 
    jump           #14735     
#14734: 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.isimm64 i64 
    jumpfalse      #14736     i64 
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           0          i64 
    push           pc_genmcl.do_addrmode.offset i64 
    push           1          i64 
    push           0          i64 
    push           pc_genmcl.do_addrmode.ax u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenindex u64 
    pop            pc_genmcl.do_addrmode.px u64 
    jump           #14735     
#14736: 
    setargs                   2 0
    push           pc_genmcl.do_addrmode.scale i64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    store          pc_genmcl.do_addrmode.bx u64 
    callfn         &pc_genmcl.scaleindex i64 
    pop            pc_genmcl.do_addrmode.scale i64 
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           0          i64 
    push           pc_genmcl.do_addrmode.extra i64 
    push           pc_genmcl.do_addrmode.scale i64 
    push           pc_genmcl.do_addrmode.bx u64 
    push           10         
    pushptroff                u8 1 0
    push           pc_genmcl.do_addrmode.ax u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenindex u64 
    pop            pc_genmcl.do_addrmode.px u64 
#14735: 
#14729: 
    push           pc_genmcl.do_addrmode.px u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #14737     i64 
    push           pc_genmcl.do_addrmode.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_genmcl.do_addrmode.px u64 
    push           8          
    popptroff                 u8 1 0
#14737: 
    push           pc_genmcl.do_addrmode.px u64 
    setret                    u64 
    jump           #14738     
#14738: 
    retfn                     u64 
End


Proc pc_genmcl.scaleregvar: i64
    param          pc_genmcl.scaleregvar.reg i64 
    param          pc_genmcl.scaleregvar.scale u64 
    param          pc_genmcl.scaleregvar.n i64 
    local          pc_genmcl.scaleregvar.regix i64 
    local          pc_genmcl.scaleregvar.ax u64 
    procentry                 
    push           pc_genmcl.scaleregvar.scale u64 
    pushptr                   i64 
    push           1          i64 
    setjumpeq      #14740     i64 
    push           2          i64 
    setjumpeq      #14740     i64 
    push           4          i64 
    setjumpeq      #14740     i64 
    push           8          i64 
    setjumpne      #14741     i64 
#14740: 
    push           pc_genmcl.scaleregvar.reg i64 
    setret                    i64 
    jump           #14742     
#14741: 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    pop            pc_genmcl.scaleregvar.regix i64 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.scaleregvar.regix i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_genmcl.scaleregvar.ax u64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.scaleregvar.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           pc_genmcl.scaleregvar.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.scaleregvar.n i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.scaleregvar.n i64 
    addrefoff                 block:15 15 -15
    push           1          
    popptroff                 u8 1 0
    push           pc_genmcl.scaleregvar.regix i64 
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.scaleregvar.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    setargs                   2 0
    push           pc_genmcl.scaleregvar.scale u64 
    pushptr                   i64 
    push           pc_genmcl.scaleregvar.ax u64 
    callproc       &pc_genmcl.mulimm 
    push           1          i64 
    push           pc_genmcl.scaleregvar.scale u64 
    popptr                    i64 
    push           pc_genmcl.scaleregvar.regix i64 
    setret                    i64 
    jump           #14742     
#14742: 
    retfn                     i64 
End


Proc pc_genmcl.scaleindex: i64
    param          pc_genmcl.scaleindex.ax u64 
    param          pc_genmcl.scaleindex.scale i64 
    local          pc_genmcl.scaleindex.n i64 
    procentry                 
    push           pc_genmcl.scaleindex.scale i64 
    push           1          i64 
    setjumpeq      #14744     i64 
    push           2          i64 
    setjumpeq      #14744     i64 
    push           4          i64 
    setjumpeq      #14744     i64 
    push           8          i64 
    setjumpne      #14745     i64 
#14744: 
    push           pc_genmcl.scaleindex.scale i64 
    setret                    i64 
    jump           #14746     
#14745: 
    setargs                   2 0
    push           pc_genmcl.scaleindex.scale i64 
    push           pc_genmcl.scaleindex.ax u64 
    callproc       &pc_genmcl.mulimm 
    push           1          i64 
    setret                    i64 
    jump           #14746     
#14746: 
    retfn                     i64 
End


Proc pc_genmcl.makeregopnd: u64
    param          pc_genmcl.makeregopnd.n i64 
    local          pc_genmcl.makeregopnd.ax u64 
    procentry                 
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.makeregopnd.n i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.makeregopnd.n i64 
    addrefoff                 block:15 15 -15
    push           1          
    popptroff                 u8 1 0
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.makeregopnd.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.makeregopnd.n i64 
    callfn         &pc_stackmcl.genopnd u64 
    setret                    u64 
    jump           #14748     
#14748: 
    retfn                     u64 
End


Proc pc_genmcl.dobinto_int:
    param          pc_genmcl.dobinto_int.p u64 
    param          pc_genmcl.dobinto_int.opc i64 
    local          pc_genmcl.dobinto_int.ax u64 
    local          pc_genmcl.dobinto_int.bx u64 
    local          pc_genmcl.dobinto_int.rx u64 
    local          pc_genmcl.dobinto_int.reg i64 
    local          pc_genmcl.dobinto_int.size i64 
    procentry                 
    push           pc_genmcl.dobinto_int.p u64 
    push           4          
    pushptroff                i32 1 0
    pop            pc_genmcl.dobinto_int.size i64 
    push           pc_genmcl.dobinto_int.size i64 
    push           8          i64 
    jumpne         #14750     i64 
    setargs                   1 0
    push           2          i64 
    callfn         &pc_libmcl.ismemaddr i64 
    jumpfalse      #14750     i64 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    pop            pc_genmcl.dobinto_int.ax u64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    pop            pc_genmcl.dobinto_int.reg i64 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.dobinto_int.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_genmcl.dobinto_int.rx u64 
    setargs                   3 0
    push           pc_genmcl.dobinto_int.ax u64 
    push           pc_genmcl.dobinto_int.rx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dobinto_int.bx u64 
    setargs                   3 0
    push           pc_genmcl.dobinto_int.bx u64 
    push           pc_genmcl.dobinto_int.rx u64 
    push           pc_genmcl.dobinto_int.opc i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.dobinto_int.rx u64 
    push           pc_genmcl.dobinto_int.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_genmcl.dobinto_int.reg i64 
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_genmcl.dobinto_int.reg i64 
    popptroff                 u8 1 -1
    jump           #14751     
#14750: 
    setargs                   2 0
    push           pc_genmcl.dobinto_int.size i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.dobinto_int.ax u64 
    setargs                   2 0
    push           pc_genmcl.dobinto_int.size i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dobinto_int.bx u64 
    setargs                   3 0
    push           pc_genmcl.dobinto_int.bx u64 
    push           pc_genmcl.dobinto_int.ax u64 
    push           pc_genmcl.dobinto_int.opc i64 
    callproc       &pc_libmcl.genmc 
#14751: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#14752: 
    retproc                   
End


Proc pc_genmcl.dobinto_float:
    param          pc_genmcl.dobinto_float.p u64 
    param          pc_genmcl.dobinto_float.opc i64 
    local          pc_genmcl.dobinto_float.ax u64 
    local          pc_genmcl.dobinto_float.bx u64 
    local          pc_genmcl.dobinto_float.cx u64 
    procentry                 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_x64 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.dobinto_float.ax u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dobinto_float.bx u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dobinto_float.cx u64 
    setargs                   3 0
    push           pc_genmcl.dobinto_float.ax u64 
    push           pc_genmcl.dobinto_float.cx u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.dobinto_float.bx u64 
    push           pc_genmcl.dobinto_float.cx u64 
    push           pc_genmcl.dobinto_float.opc i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.dobinto_float.cx u64 
    push           pc_genmcl.dobinto_float.ax u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#14754: 
    retproc                   
End


Proc pc_genmcl.dobinto_float32:
    param          pc_genmcl.dobinto_float32.p u64 
    param          pc_genmcl.dobinto_float32.opc i64 
    local          pc_genmcl.dobinto_float32.ax u64 
    local          pc_genmcl.dobinto_float32.bx u64 
    local          pc_genmcl.dobinto_float32.cx u64 
    procentry                 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_x32 
    setargs                   2 0
    push           4          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.dobinto_float32.ax u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dobinto_float32.bx u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dobinto_float32.cx u64 
    setargs                   3 0
    push           pc_genmcl.dobinto_float32.ax u64 
    push           pc_genmcl.dobinto_float32.cx u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.dobinto_float32.bx u64 
    push           pc_genmcl.dobinto_float32.cx u64 
    push           pc_genmcl.dobinto_float32.opc i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.dobinto_float32.cx u64 
    push           pc_genmcl.dobinto_float32.ax u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#14756: 
    retproc                   
End


Proc pc_genmcl.doselectcc:
    param          pc_genmcl.doselectcc.p u64 
    local          pc_genmcl.doselectcc.ax u64 
    local          pc_genmcl.doselectcc.bx u64 
    local          pc_genmcl.doselectcc.cx u64 
    local          pc_genmcl.doselectcc.dx u64 
    local          pc_genmcl.doselectcc.cond i64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.doselectcc.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #14758     i64 
    setargs                   2 0
    push           pc_genmcl.doselectcc.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "selectcc" u64 
    callproc       &pc_libmcl.merrort 
#14758: 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.doselectcc.ax u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.doselectcc.bx u64 
    setargs                   3 0
    push           pc_genmcl.doselectcc.bx u64 
    push           pc_genmcl.doselectcc.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    push           1          i64 
    pop            pci_mcl.noxorclear u8 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.doselectcc.dx u64 
    setargs                   2 0
    push           8          i64 
    push           4          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.doselectcc.cx u64 
    push           0          i64 
    pop            pci_mcl.noxorclear u8 
    push           &pc_tables.psigned 
    push           pc_genmcl.doselectcc.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #14759     i64 
    push           &pc_genmcl.scondcodes 
    push           pc_genmcl.doselectcc.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u8 1 -73
    pop            pc_genmcl.doselectcc.cond i64 
    jump           #14760     
#14759: 
    push           &pc_genmcl.ucondcodes 
    push           pc_genmcl.doselectcc.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u8 1 -73
    pop            pc_genmcl.doselectcc.cond i64 
#14760: 
    setargs                   4 0
    push           pc_genmcl.doselectcc.dx u64 
    push           pc_genmcl.doselectcc.cx u64 
    setargs                   1 0
    push           pc_genmcl.doselectcc.cond i64 
    callfn         &pc_genmcl.reversemcond i64 
    push           16         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#14761: 
    retproc                   
End


Proc pc_genmcl.reversemcond: i64
    param          pc_genmcl.reversemcond.cond i64 
    procentry                 
    push           pc_genmcl.reversemcond.cond i64 
    push           4          i64 
    casejumpeq     #14763     i64 0
    push           5          i64 
    casejumpeq     #14764     i64 0
    push           12         i64 
    casejumpeq     #14765     i64 0
    push           14         i64 
    casejumpeq     #14766     i64 0
    push           13         i64 
    casejumpeq     #14767     i64 0
    push           15         i64 
    casejumpeq     #14768     i64 0
    push           2          i64 
    casejumpeq     #14769     i64 0
    push           6          i64 
    casejumpeq     #14770     i64 0
    push           3          i64 
    casejumpeq     #14771     i64 0
    push           7          i64 
    casejumpeq     #14772     i64 0
    popstack                  i64 
    jump           #14773     
#14763: 
    push           5          i64 
    setret                    i64 
    jump           #14774     
    jump           #14775     
#14764: 
    push           5          i64 
    setret                    i64 
    jump           #14774     
    jump           #14775     
#14765: 
    push           13         i64 
    setret                    i64 
    jump           #14774     
    jump           #14775     
#14766: 
    push           15         i64 
    setret                    i64 
    jump           #14774     
    jump           #14775     
#14767: 
    push           12         i64 
    setret                    i64 
    jump           #14774     
    jump           #14775     
#14768: 
    push           14         i64 
    setret                    i64 
    jump           #14774     
    jump           #14775     
#14769: 
    push           3          i64 
    setret                    i64 
    jump           #14774     
    jump           #14775     
#14770: 
    push           7          i64 
    setret                    i64 
    jump           #14774     
    jump           #14775     
#14771: 
    push           2          i64 
    setret                    i64 
    jump           #14774     
    jump           #14775     
#14772: 
    push           3          i64 
    setret                    i64 
    jump           #14774     
    jump           #14775     
#14773: 
#14775: 
    push           0          i64 
    setret                    i64 
    jump           #14774     
#14774: 
    retfn                     i64 
End


Proc pc_genmcl.do_divrem:
    param          pc_genmcl.do_divrem.p u64 
    param          pc_genmcl.do_divrem.issigned i64 
    param          pc_genmcl.do_divrem.isdiv i64 
    local          pc_genmcl.do_divrem.opc i64 
    local          pc_genmcl.do_divrem.n i64 
    local          pc_genmcl.do_divrem.shifts i64 
    procentry                 
    setargs                   2 0
    push           0          i64 
    push           2          i64 
    callproc       &pc_stackmcl.loadopnd 
    push           pc_genmcl.do_divrem.isdiv i64 
    jumpfalse      #14777     i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #14777     i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    pop            pc_genmcl.do_divrem.n i64 
    push           pc_genmcl.do_divrem.n i64 
    push           0          i64 
    casejumpeq     #14778     i64 0
    push           1          i64 
    casejumpeq     #14779     i64 0
    popstack                  i64 
    jump           #14780     
#14778: 
    setargs                   2 0
    push           ""         u64 
    push           "Divide by zero" u64 
    callproc       &pc_libmcl.merror 
    jump           #14781     
#14779: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #14782     
    jump           #14781     
#14780: 
    setargs                   1 0
    push           pc_genmcl.do_divrem.n i64 
    callfn         &pc_libmcl.ispoweroftwo i64 
    pop            pc_genmcl.do_divrem.shifts i64 
    push           pc_genmcl.do_divrem.shifts i64 
    jumpfalse      #14783     i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.do_divrem.shifts i64 
    callfn         &pc_libmcl.mgenint u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    startmult                 
    push           pc_genmcl.do_divrem.issigned i64 
    jumpfalse      #14784     i64 
    push           45         i64 
    resetmult                 
    jump           #14785     
#14784: 
    push           46         i64 
    endmult                   
#14785: 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #14782     
#14783: 
#14781: 
#14777: 
    setargs                   2 0
    push           0          i64 
    push           1          i64 
    callproc       &pc_stackmcl.loadopnd 
    setargs                   0 0
    callproc       &pc_genmcl.saverdx 
    setargs                   0 0
    callproc       &pc_genmcl.fixdivopnds 
    push           pc_genmcl.do_divrem.issigned i64 
    jumpfalse      #14786     i64 
    setargs                   3 0
    push           0          u64 
    push           0          u64 
    push           58         i64 
    callproc       &pc_libmcl.genmc 
    push           37         i64 
    pop            pc_genmcl.do_divrem.opc i64 
    jump           #14787     
#14786: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           12         i64 
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   2 0
    push           8          i64 
    push           12         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           41         i64 
    callproc       &pc_libmcl.genmc 
    push           38         i64 
    pop            pc_genmcl.do_divrem.opc i64 
#14787: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           pc_genmcl.do_divrem.p u64 
    push           4          
    pushptroff                i32 1 0
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    push           pc_genmcl.do_divrem.opc i64 
    callproc       &pc_libmcl.genmc 
    push           pc_genmcl.do_divrem.isdiv i64 
    jumptrue       #14788     i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           12         i64 
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           28         i64 
    callproc       &pc_libmcl.genmc 
#14788: 
    setargs                   0 0
    callproc       &pc_genmcl.restorerdx 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#14782: 
    retproc                   
End


Proc pc_genmcl.fixdivopnds:
    local          pc_genmcl.fixdivopnds.regx i64 
    local          pc_genmcl.fixdivopnds.regy i64 
    local          pc_genmcl.fixdivopnds.zop i64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_genmcl.fixdivopnds.regx i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_genmcl.fixdivopnds.regy i64 
    push           pc_genmcl.fixdivopnds.regx i64 
    push           1          i64 
    jumpne         #14790     i64 
    jump           #14791     
#14790: 
    push           pc_genmcl.fixdivopnds.regy i64 
    push           1          i64 
    jumpne         #14792     i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    push           28         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    jump           #14791     
#14792: 
    push           &pci_mcl.regset 
    push           1          i64 
    pushptroff                u8 1 -1
    push           0          i64 
    jumpne         #14793     i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           28         i64 
    callproc       &pc_libmcl.genmc 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_genmcl.fixdivopnds.regx i64 
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    push           1          i64 
    push           &pci_mcl.regset 
    push           1          i64 
    popptroff                 u8 1 -1
    jump           #14791     
#14793: 
#14794: 
    push           pci_mcl.noperands i64 
    pop            pc_genmcl.fixdivopnds.zop i64 
    push           pc_genmcl.fixdivopnds.zop i64 
    push           1          i64 
    jumplt         #14795     i64 
#14796: 
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.fixdivopnds.zop i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #14797     i64 
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.fixdivopnds.zop i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #14797     i64 
    jump           #14795     
#14797: 
#14798: 
    fordown        #14796     i64 1
    opnd           pc_genmcl.fixdivopnds.zop 
    opnd           1          
#14795: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           28         i64 
    callproc       &pc_libmcl.genmc 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    addrefoff                 u64 1 0
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.fixdivopnds.zop i64 
    addrefoff                 block:15 15 -15
    push           2          
    addrefoff                 u64 1 0
    swap                      u8 
#14791: 
    retproc                   
End


Proc pc_genmcl.saverdx:
    procentry                 
    push           pci_mcl.inf_r11used i64 
    jumpfalse      #14800     i64 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           12         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
#14800: 
#14801: 
    retproc                   
End


Proc pc_genmcl.restorerdx:
    procentry                 
    push           pci_mcl.inf_r11used i64 
    jumpfalse      #14803     i64 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           12         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           14         i64 
    callproc       &pc_libmcl.genmc 
#14803: 
#14804: 
    retproc                   
End


Proc pc_genmcl.doincr:
    param          pc_genmcl.doincr.p u64 
    param          pc_genmcl.doincr.incrop i64 
    param          pc_genmcl.doincr.addop i64 
    procentry                 
    push           pc_genmcl.doincr.p u64 
    push           16         
    pushptroff                i32 1 0
    push           1          i64 
    jumpne         #14806     i64 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.ismemaddr i64 
    jumpfalse      #14807     i64 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           pc_genmcl.doincr.incrop i64 
    callproc       &pc_libmcl.genmc 
    jump           #14808     
#14807: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    push           pc_genmcl.doincr.incrop i64 
    callproc       &pc_libmcl.genmc 
#14808: 
    jump           #14809     
#14806: 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.ismemaddr i64 
    jumpfalse      #14810     i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.doincr.p u64 
    push           16         
    pushptroff                i32 1 0
    callfn         &pc_libmcl.mgenint u64 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           pc_genmcl.doincr.addop i64 
    callproc       &pc_libmcl.genmc 
    jump           #14811     
#14810: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.doincr.p u64 
    push           16         
    pushptroff                i32 1 0
    callfn         &pc_libmcl.mgenint u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    push           pc_genmcl.doincr.addop i64 
    callproc       &pc_libmcl.genmc 
#14811: 
#14809: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#14812: 
    retproc                   
End


Proc pc_genmcl.doincrload:
    param          pc_genmcl.doincrload.p u64 
    param          pc_genmcl.doincrload.incrop i64 
    param          pc_genmcl.doincrload.addop i64 
    local          pc_genmcl.doincrload.ax u64 
    local          pc_genmcl.doincrload.mx u64 
    procentry                 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.ismemaddr i64 
    jumpfalse      #14814     i64 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    pop            pc_genmcl.doincrload.mx u64 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_genmcl.makeregopnd u64 
    pop            pc_genmcl.doincrload.ax u64 
    jump           #14815     
#14814: 
    setargs                   2 0
    push           pc_genmcl.doincrload.p u64 
    push           4          
    pushptroff                i32 1 0
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.doincrload.mx u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.doincrload.ax u64 
#14815: 
    push           pc_genmcl.doincrload.p u64 
    push           16         
    pushptroff                i32 1 0
    push           1          i64 
    jumpne         #14816     i64 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.doincrload.mx u64 
    push           pc_genmcl.doincrload.incrop i64 
    callproc       &pc_libmcl.genmc 
    jump           #14817     
#14816: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.doincrload.p u64 
    push           16         
    pushptroff                i32 1 0
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.doincrload.mx u64 
    push           pc_genmcl.doincrload.addop i64 
    callproc       &pc_libmcl.genmc 
#14817: 
    push           &pc_tables.pcat 
    push           pc_genmcl.doincrload.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           4          i64 
    jumpne         #14818     i64 
    setargs                   3 0
    push           pc_genmcl.doincrload.mx u64 
    push           pc_genmcl.doincrload.ax u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_genmcl.doincrload.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #14819     i64 
    push           19         i64 
    resetmult                 
    jump           #14820     
#14819: 
    push           20         i64 
    endmult                   
#14820: 
    callproc       &pc_libmcl.genmc 
    jump           #14821     
#14818: 
    setargs                   3 0
    push           pc_genmcl.doincrload.mx u64 
    push           pc_genmcl.doincrload.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
#14821: 
#14822: 
    retproc                   
End


Proc pc_genmcl.doloadincr:
    param          pc_genmcl.doloadincr.p u64 
    param          pc_genmcl.doloadincr.incrop i64 
    param          pc_genmcl.doloadincr.addop i64 
    local          pc_genmcl.doloadincr.ax u64 
    local          pc_genmcl.doloadincr.mx u64 
    procentry                 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.ismemaddr i64 
    jumpfalse      #14824     i64 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    pop            pc_genmcl.doloadincr.mx u64 
    jump           #14825     
#14824: 
    setargs                   2 0
    push           pc_genmcl.doloadincr.p u64 
    push           4          
    pushptroff                i32 1 0
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.doloadincr.mx u64 
#14825: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_d64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.doloadincr.ax u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.doloadincr.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           4          i64 
    jumpne         #14826     i64 
    setargs                   3 0
    push           pc_genmcl.doloadincr.mx u64 
    push           pc_genmcl.doloadincr.ax u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_genmcl.doloadincr.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #14827     i64 
    push           19         i64 
    resetmult                 
    jump           #14828     
#14827: 
    push           20         i64 
    endmult                   
#14828: 
    callproc       &pc_libmcl.genmc 
    jump           #14829     
#14826: 
    setargs                   3 0
    push           pc_genmcl.doloadincr.mx u64 
    push           pc_genmcl.doloadincr.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
#14829: 
    push           pc_genmcl.doloadincr.p u64 
    push           16         
    pushptroff                i32 1 0
    push           1          i64 
    jumpne         #14830     i64 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.doloadincr.mx u64 
    push           pc_genmcl.doloadincr.incrop i64 
    callproc       &pc_libmcl.genmc 
    jump           #14831     
#14830: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.doloadincr.p u64 
    push           16         
    pushptroff                i32 1 0
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.doloadincr.mx u64 
    push           pc_genmcl.doloadincr.addop i64 
    callproc       &pc_libmcl.genmc 
#14831: 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#14832: 
    retproc                   
End


Proc pc_genmcl.dobin_i128:
    param          pc_genmcl.dobin_i128.p u64 
    param          pc_genmcl.dobin_i128.opc1 i64 
    param          pc_genmcl.dobin_i128.opc2 i64 
    local          pc_genmcl.dobin_i128.axl u64 
    local          pc_genmcl.dobin_i128.axh u64 
    local          pc_genmcl.dobin_i128.bxl u64 
    local          pc_genmcl.dobin_i128.bxh u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dobin_i128.axl u64 
    setargs                   2 0
    push           8          i64 
    push           4          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dobin_i128.axh u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dobin_i128.bxl u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dobin_i128.bxh u64 
    setargs                   3 0
    push           pc_genmcl.dobin_i128.bxl u64 
    push           pc_genmcl.dobin_i128.axl u64 
    push           pc_genmcl.dobin_i128.opc1 i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.dobin_i128.bxh u64 
    push           pc_genmcl.dobin_i128.axh u64 
    push           pc_genmcl.dobin_i128.opc2 i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#14834: 
    retproc                   
End


Proc pc_genmcl.dojumpcc_i128:
    param          pc_genmcl.dojumpcc_i128.p u64 
    local          pc_genmcl.dojumpcc_i128.axlow u64 
    local          pc_genmcl.dojumpcc_i128.axhigh u64 
    local          pc_genmcl.dojumpcc_i128.bxlow u64 
    local          pc_genmcl.dojumpcc_i128.bxhigh u64 
    local          pc_genmcl.dojumpcc_i128.cx u64 
    local          pc_genmcl.dojumpcc_i128.dx u64 
    local          pc_genmcl.dojumpcc_i128.lxtrue u64 
    local          pc_genmcl.dojumpcc_i128.lxfalse u64 
    procentry                 
    push           pc_genmcl.dojumpcc_i128.p u64 
    push           3          
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #14836     i64 
    push           pc_genmcl.dojumpcc_i128.p u64 
    push           1          
    pushptroff                u8 1 0
    push           53         i64 
    setjumpeq      #14836     i64 
    push           54         i64 
    setjumpeqx     #14836     i64 
    setargs                   1 0
    push           pc_genmcl.dojumpcc_i128.p u64 
    callproc       &pc_genmcl.dojumpcc_u128 
    jump           #14837     
#14836: 
    setargs                   1 0
    push           pc_genmcl.dojumpcc_i128.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    pop            pc_genmcl.dojumpcc_i128.lxtrue u64 
    setargs                   2 0
    push           8          i64 
    push           4          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dojumpcc_i128.axhigh u64 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dojumpcc_i128.axlow u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dojumpcc_i128.bxhigh u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dojumpcc_i128.bxlow u64 
    push           pc_genmcl.dojumpcc_i128.p u64 
    push           1          
    pushptroff                u8 1 0
    push           53         i64 
    casejumpeq     #14838     i64 0
    push           54         i64 
    casejumpeq     #14839     i64 0
    popstack                  i64 
    jump           #14840     
#14838: 
    setargs                   3 0
    push           pc_genmcl.dojumpcc_i128.bxlow u64 
    push           pc_genmcl.dojumpcc_i128.axlow u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_libmcl.mgenlabel u64 
    store          pc_genmcl.dojumpcc_i128.lxfalse u64 
    push           5          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.dojumpcc_i128.bxhigh u64 
    push           pc_genmcl.dojumpcc_i128.axhigh u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_i128.lxtrue u64 
    push           4          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_i128.lxfalse u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    jump           #14841     
#14839: 
    setargs                   3 0
    push           pc_genmcl.dojumpcc_i128.bxlow u64 
    push           pc_genmcl.dojumpcc_i128.axlow u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_i128.lxtrue u64 
    push           5          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.dojumpcc_i128.bxhigh u64 
    push           pc_genmcl.dojumpcc_i128.axhigh u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_i128.lxtrue u64 
    push           5          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    jump           #14841     
#14840: 
    setargs                   3 0
    push           pc_genmcl.dojumpcc_i128.bxlow u64 
    push           pc_genmcl.dojumpcc_i128.axlow u64 
    push           30         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.dojumpcc_i128.bxhigh u64 
    push           pc_genmcl.dojumpcc_i128.axhigh u64 
    push           32         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pci_mcl.zero_opnd u64 
    push           pc_genmcl.dojumpcc_i128.axhigh u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_tables.psigned 
    push           pc_genmcl.dojumpcc_i128.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #14842     i64 
    push           pc_genmcl.dojumpcc_i128.p u64 
    push           1          
    pushptroff                u8 1 0
    push           55         i64 
    casejumpeq     #14843     i64 0
    push           56         i64 
    casejumpeq     #14844     i64 0
    push           58         i64 
    casejumpeq     #14845     i64 0
    push           57         i64 
    casejumpeq     #14846     i64 0
    popstack                  i64 
    jump           #14847     
#14843: 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_i128.lxtrue u64 
    push           12         i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    jump           #14848     
#14844: 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_i128.lxtrue u64 
    push           12         i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.dojumpcc_i128.axhigh u64 
    push           pc_genmcl.dojumpcc_i128.axlow u64 
    push           40         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_i128.lxtrue u64 
    push           4          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    jump           #14848     
#14845: 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_libmcl.mgenlabel u64 
    store          pc_genmcl.dojumpcc_i128.lxfalse u64 
    push           12         i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.dojumpcc_i128.axhigh u64 
    push           pc_genmcl.dojumpcc_i128.axlow u64 
    push           40         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_i128.lxtrue u64 
    push           5          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_i128.lxfalse u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    jump           #14848     
#14846: 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_i128.lxtrue u64 
    push           13         i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    jump           #14848     
#14847: 
#14848: 
    jump           #14849     
#14842: 
    setargs                   2 0
    push           pc_genmcl.dojumpcc_i128.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "jumpcc/rel" u64 
    callproc       &pc_libmcl.merrort 
#14849: 
#14841: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#14837: 
    retproc                   
End


Proc pc_genmcl.dojumpcc_u128:
    param          pc_genmcl.dojumpcc_u128.p u64 
    local          pc_genmcl.dojumpcc_u128.lxtrue u64 
    local          pc_genmcl.dojumpcc_u128.lxfalse u64 
    local          pc_genmcl.dojumpcc_u128.ax1 u64 
    local          pc_genmcl.dojumpcc_u128.bx1 u64 
    local          pc_genmcl.dojumpcc_u128.ax2 u64 
    local          pc_genmcl.dojumpcc_u128.bx2 u64 
    local          pc_genmcl.dojumpcc_u128.cond1 i64 
    local          pc_genmcl.dojumpcc_u128.cond2 i64 
    local          pc_genmcl.dojumpcc_u128.cond3 i64 
    procentry                 
    push           pc_genmcl.dojumpcc_u128.p u64 
    push           1          
    pushptroff                u8 1 0
    push           58         i64 
    casejumpeq     #14851     i64 0
    push           57         i64 
    casejumpeq     #14852     i64 0
    push           55         i64 
    casejumpeq     #14853     i64 0
    push           56         i64 
    casejumpeq     #14854     i64 0
    popstack                  i64 
    jump           #14855     
#14851: 
    push           7          i64 
    pop            pc_genmcl.dojumpcc_u128.cond1 i64 
    push           2          i64 
    pop            pc_genmcl.dojumpcc_u128.cond2 i64 
    push           7          i64 
    pop            pc_genmcl.dojumpcc_u128.cond3 i64 
    jump           #14856     
#14852: 
    push           7          i64 
    pop            pc_genmcl.dojumpcc_u128.cond1 i64 
    push           2          i64 
    pop            pc_genmcl.dojumpcc_u128.cond2 i64 
    push           3          i64 
    pop            pc_genmcl.dojumpcc_u128.cond3 i64 
    jump           #14856     
#14853: 
    push           2          i64 
    pop            pc_genmcl.dojumpcc_u128.cond1 i64 
    push           7          i64 
    pop            pc_genmcl.dojumpcc_u128.cond2 i64 
    push           2          i64 
    pop            pc_genmcl.dojumpcc_u128.cond3 i64 
    jump           #14856     
#14854: 
    push           2          i64 
    pop            pc_genmcl.dojumpcc_u128.cond1 i64 
    push           7          i64 
    pop            pc_genmcl.dojumpcc_u128.cond2 i64 
    push           6          i64 
    pop            pc_genmcl.dojumpcc_u128.cond3 i64 
    jump           #14856     
#14855: 
    setargs                   2 0
    push           ""         u64 
    push           "JCC/U128" u64 
    callproc       &pc_libmcl.merror 
#14856: 
    setargs                   1 0
    push           pc_genmcl.dojumpcc_u128.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    pop            pc_genmcl.dojumpcc_u128.lxtrue u64 
    setargs                   1 0
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    callfn         &pc_libmcl.mgenlabel u64 
    pop            pc_genmcl.dojumpcc_u128.lxfalse u64 
    setargs                   2 0
    push           8          i64 
    push           4          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dojumpcc_u128.ax2 u64 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dojumpcc_u128.ax1 u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dojumpcc_u128.bx2 u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dojumpcc_u128.bx1 u64 
    setargs                   3 0
    push           pc_genmcl.dojumpcc_u128.bx2 u64 
    push           pc_genmcl.dojumpcc_u128.ax2 u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_u128.lxtrue u64 
    push           pc_genmcl.dojumpcc_u128.cond1 i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_u128.lxfalse u64 
    push           pc_genmcl.dojumpcc_u128.cond2 i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.dojumpcc_u128.bx1 u64 
    push           pc_genmcl.dojumpcc_u128.ax1 u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_u128.lxtrue u64 
    push           pc_genmcl.dojumpcc_u128.cond3 i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_u128.lxfalse u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#14857: 
    retproc                   
End


Proc pc_genmcl.do_syscall:
    param          pc_genmcl.do_syscall.fnindex i64 
    param          pc_genmcl.do_syscall.nargs i64 
    param          pc_genmcl.do_syscall.retcat i64 
    local          pc_genmcl.do_syscall.nslots i64 
    local          pc_genmcl.do_syscall.av_1 i64 
    procentry                 
    push           pc_genmcl.do_syscall.nargs i64 
    pop            pci_mcl.sa_nargs i64 
    setargs                   1 0
    push           0          u64 
    callproc       &pc_genmcl.px_setargs 
    setargs                   2 0
    push           0          i64 
    push           0          u64 
    callfn         &pc_genmcl.do_pushparams i64 
    pop            pc_genmcl.do_syscall.nslots i64 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    setargs                   1 0
    push           pc_genmcl.do_syscall.fnindex i64 
    callfn         &pc_libmcl.getrtsproclabel i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           22         i64 
    callproc       &pc_libmcl.genmc 
    push           8          i64 
    push           pci_mcl.mccodex u64 
    push           8          
    pushptroff                u64 1 0
    push           8          
    popptroff                 u8 1 0
#14859: 
    push           pci_mcl.sa_nargs i64 
    pop            pc_genmcl.do_syscall.av_1 i64 
    push           pc_genmcl.do_syscall.av_1 i64 
    push           0          i64 
    jumple         #14860     i64 
#14861: 
    setargs                   0 0
    callproc       &pc_stackmcl.poparg 
#14862: 
    to             #14861     
    opnd           pc_genmcl.do_syscall.av_1 
#14860: 
    setargs                   1 0
    push           pc_genmcl.do_syscall.nslots i64 
    callproc       &pc_stackmcl.popslots 
    setargs                   1 0
    push           pc_genmcl.do_syscall.retcat i64 
    callproc       &pc_genmcl.getretvalue_bycat 
#14863: 
    retproc                   
End


Proc pc_genmcl.getretvalue_bycat:
    param          pc_genmcl.getretvalue_bycat.cat i64 
    procentry                 
    push           pc_genmcl.getretvalue_bycat.cat i64 
    push           0          i64 
    casejumpeq     #14865     i64 0
    push           1          i64 
    casejumpeq     #14866     i64 0
    push           3          i64 
    casejumpeq     #14867     i64 0
    push           2          i64 
    casejumpeq     #14868     i64 0
    push           5          i64 
    casejumpeq     #14869     i64 0
    popstack                  i64 
    jump           #14870     
#14865: 
    jump           #14871     
    jump           #14872     
#14866: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.addreg0 
    jump           #14872     
#14867: 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.addxreg0 
    jump           #14872     
#14868: 
    setargs                   2 0
    push           3          i64 
    push           1          i64 
    callproc       &pc_stackmcl.addxreg0 
    jump           #14872     
#14869: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.addwidereg0 
    jump           #14872     
#14870: 
    setargs                   2 0
    push           ""         u64 
    push           "getval bycat" u64 
    callproc       &pc_libmcl.merror 
#14872: 
#14871: 
    retproc                   
End


Proc pc_genmcl.px_pushlabel:
    param          pc_genmcl.px_pushlabel.p u64 
    procentry                 
    push           pc_genmcl.px_pushlabel.p u64 
    pushptr                   u8 
    push           3          i64 
    jumpeq         #14874     i64 
    setargs                   2 0
    push           ""         u64 
    push           "pushlabel" u64 
    callproc       &pc_libmcl.merror 
#14874: 
    setargs                   1 0
    push           pc_genmcl.px_pushlabel.p u64 
    push           8          
    pushptroff                i64 1 0
    callproc       &pc_stackmcl.addlabeladdr 
#14875: 
    retproc                   
End


Proc pc_genmcl.do_shiftnto:
    param          pc_genmcl.do_shiftnto.p u64 
    param          pc_genmcl.do_shiftnto.opc i64 
    local          pc_genmcl.do_shiftnto.px u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.do_shiftnto.px u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #14877     i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.do_shiftnto.px u64 
    push           pc_genmcl.do_shiftnto.opc i64 
    callproc       &pc_libmcl.genmc 
    jump           #14878     
#14877: 
    push           pci_mcl.inf_r10used i64 
    jumpfalse      #14879     i64 
    setargs                   2 0
    push           ""         u64 
    push           "shiftto:cl in use" u64 
    callproc       &pc_libmcl.merror 
#14879: 
    setargs                   2 0
    push           11         i64 
    push           1          i64 
    callproc       &pc_stackmcl.loadparam 
    setargs                   3 0
    setargs                   2 0
    push           1          i64 
    push           11         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           pc_genmcl.do_shiftnto.px u64 
    push           pc_genmcl.do_shiftnto.opc i64 
    callproc       &pc_libmcl.genmc 
#14878: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#14880: 
    retproc                   
End


Proc pc_genmcl.domax_float:
    param          pc_genmcl.domax_float.opc i64 
    local          pc_genmcl.domax_float.ax u64 
    local          pc_genmcl.domax_float.bx u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.domax_float.ax u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.domax_float.bx u64 
    setargs                   3 0
    push           pc_genmcl.domax_float.bx u64 
    push           pc_genmcl.domax_float.ax u64 
    push           pc_genmcl.domax_float.opc i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#14882: 
    retproc                   
End


Proc pc_genmcl.domax_int:
    param          pc_genmcl.domax_int.cond i64 
    local          pc_genmcl.domax_int.ax u64 
    local          pc_genmcl.domax_int.bx u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.domax_int.ax u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.domax_int.bx u64 
    setargs                   3 0
    push           pc_genmcl.domax_int.bx u64 
    push           pc_genmcl.domax_int.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           pc_genmcl.domax_int.bx u64 
    push           pc_genmcl.domax_int.ax u64 
    push           pc_genmcl.domax_int.cond i64 
    push           16         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#14884: 
    retproc                   
End


Proc pc_genmcl.domaxto_r64:
    param          pc_genmcl.domaxto_r64.cond i64 
    local          pc_genmcl.domaxto_r64.px u64 
    local          pc_genmcl.domaxto_r64.ax u64 
    local          pc_genmcl.domaxto_r64.bx u64 
    local          pc_genmcl.domaxto_r64.lx u64 
    local          pc_genmcl.domaxto_r64.lab i64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.domaxto_r64.px u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.domaxto_r64.bx u64 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_x64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.domaxto_r64.ax u64 
    setargs                   3 0
    push           pc_genmcl.domaxto_r64.px u64 
    push           pc_genmcl.domaxto_r64.ax u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.domaxto_r64.bx u64 
    push           pc_genmcl.domaxto_r64.ax u64 
    push           73         i64 
    callproc       &pc_libmcl.genmc 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pc_genmcl.domaxto_r64.lab i64 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.domaxto_r64.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    store          pc_genmcl.domaxto_r64.lx u64 
    push           pc_genmcl.domaxto_r64.cond i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.domaxto_r64.bx u64 
    push           pc_genmcl.domaxto_r64.px u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.domaxto_r64.lx u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#14886: 
    retproc                   
End


Proc pc_genmcl.domaxto_r32:
    param          pc_genmcl.domaxto_r32.cond i64 
    local          pc_genmcl.domaxto_r32.px u64 
    local          pc_genmcl.domaxto_r32.ax u64 
    local          pc_genmcl.domaxto_r32.bx u64 
    local          pc_genmcl.domaxto_r32.lx u64 
    local          pc_genmcl.domaxto_r32.lab i64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.domaxto_r32.px u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.domaxto_r32.bx u64 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_x32 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.domaxto_r32.ax u64 
    setargs                   3 0
    push           pc_genmcl.domaxto_r32.px u64 
    push           pc_genmcl.domaxto_r32.ax u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.domaxto_r32.bx u64 
    push           pc_genmcl.domaxto_r32.ax u64 
    push           72         i64 
    callproc       &pc_libmcl.genmc 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pc_genmcl.domaxto_r32.lab i64 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.domaxto_r32.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    store          pc_genmcl.domaxto_r32.lx u64 
    push           pc_genmcl.domaxto_r32.cond i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.domaxto_r32.bx u64 
    push           pc_genmcl.domaxto_r32.px u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.domaxto_r32.lx u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#14888: 
    retproc                   
End


Proc pc_genmcl.domaxto_int:
    param          pc_genmcl.domaxto_int.cond i64 
    local          pc_genmcl.domaxto_int.ax u64 
    local          pc_genmcl.domaxto_int.bx u64 
    local          pc_genmcl.domaxto_int.lx u64 
    local          pc_genmcl.domaxto_int.lab i64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.domaxto_int.ax u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.domaxto_int.bx u64 
    setargs                   3 0
    push           pc_genmcl.domaxto_int.bx u64 
    push           pc_genmcl.domaxto_int.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pc_genmcl.domaxto_int.lab i64 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.domaxto_int.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    store          pc_genmcl.domaxto_int.lx u64 
    push           pc_genmcl.domaxto_int.cond i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.domaxto_int.bx u64 
    push           pc_genmcl.domaxto_int.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.domaxto_int.lx u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#14890: 
    retproc                   
End


Proc pc_genmcl.dosetfntable:
    procentry                 
    push           pci_mcl.lab_funcnametable i64 
    push           0          i64 
    jumpne         #14892     i64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pci_mcl.lab_funcnametable i64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pci_mcl.lab_funcaddrtable i64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pci_mcl.lab_funcnprocs i64 
#14892: 
#14893: 
    retproc                   
End


Proc pc_genmcl.loadtoreg:
    param          pc_genmcl.loadtoreg.rx u64 
    param          pc_genmcl.loadtoreg.ax u64 
    param          pc_genmcl.loadtoreg.m i64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.loadtoreg.m i64 
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #14895     i64 
    setargs                   3 0
    push           pc_genmcl.loadtoreg.ax u64 
    push           pc_genmcl.loadtoreg.rx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #14896     
#14895: 
    push           &pc_tables.psigned 
    push           pc_genmcl.loadtoreg.m i64 
    pushptroff                u8 1 0
    jumpfalse      #14897     i64 
    setargs                   3 0
    push           pc_genmcl.loadtoreg.ax u64 
    push           pc_genmcl.loadtoreg.rx u64 
    push           19         i64 
    callproc       &pc_libmcl.genmc 
    jump           #14896     
#14897: 
    setargs                   3 0
    push           pc_genmcl.loadtoreg.ax u64 
    push           pc_genmcl.loadtoreg.rx u64 
    push           20         i64 
    callproc       &pc_libmcl.genmc 
#14896: 
#14898: 
    retproc                   
End


Proc pc_genmcl.storefromreg:
    param          pc_genmcl.storefromreg.ax u64 
    param          pc_genmcl.storefromreg.rx u64 
    param          pc_genmcl.storefromreg.size i64 
    procentry                 
    setargs                   3 0
    setargs                   2 0
    push           pc_genmcl.storefromreg.size i64 
    push           pc_genmcl.storefromreg.rx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           pc_genmcl.storefromreg.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
#14900: 
    retproc                   
End


Proc pc_genmcl.domaths:
    param          pc_genmcl.domaths.p u64 
    param          pc_genmcl.domaths.opname u64 
    local          pc_genmcl.domaths.nslots i64 
    procentry                 
    push           1          i64 
    push           pc_genmcl.domaths.p u64 
    push           16         
    popptroff                 i32 1 0
    setargs                   1 0
    push           pc_genmcl.domaths.p u64 
    callproc       &pc_genmcl.px_setargs 
    setargs                   2 0
    push           0          i64 
    push           pc_genmcl.domaths.p u64 
    callfn         &pc_genmcl.do_pushparams i64 
    pop            pc_genmcl.domaths.nslots i64 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.domaths.opname u64 
    callfn         &pc_libmcl.mgenextname u64 
    push           22         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.poparg 
    setargs                   1 0
    push           pc_genmcl.domaths.nslots i64 
    callproc       &pc_stackmcl.popslots 
    setargs                   1 0
    push           pc_genmcl.domaths.p u64 
    callproc       &pc_genmcl.dogetretvalue 
#14902: 
    retproc                   
End


Proc pc_libmcl.mclinit:
    local          pc_libmcl.mclinit.a u64 
    local          pc_libmcl.mclinit.r i64 
    local          pc_libmcl.mclinit.s i64 
    local          pc_libmcl.mclinit.av_1 i64 
    local          pc_libmcl.mclinit.i i64 
    procentry                 
#14904: 
    push           1          i64 
    pop            pc_libmcl.mclinit.r i64 
#14905: 
    setargs                   2 0
    push           1          i64 
    push           pc_libmcl.mclinit.r i64 
    callfn         &pc_libmcl.mgenreg0 u64 
    push           &pci_mcl.regtable 
    push           pc_libmcl.mclinit.r i64 
    addrefoff                 block:128 128 -128
    push           1          i64 
    popptroff                 u64 8 -8
    setargs                   2 0
    push           2          i64 
    push           pc_libmcl.mclinit.r i64 
    callfn         &pc_libmcl.mgenreg0 u64 
    push           &pci_mcl.regtable 
    push           pc_libmcl.mclinit.r i64 
    addrefoff                 block:128 128 -128
    push           2          i64 
    popptroff                 u64 8 -8
    setargs                   2 0
    push           4          i64 
    push           pc_libmcl.mclinit.r i64 
    callfn         &pc_libmcl.mgenreg0 u64 
    push           &pci_mcl.regtable 
    push           pc_libmcl.mclinit.r i64 
    addrefoff                 block:128 128 -128
    push           4          i64 
    popptroff                 u64 8 -8
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.mclinit.r i64 
    callfn         &pc_libmcl.mgenreg0 u64 
    push           &pci_mcl.regtable 
    push           pc_libmcl.mclinit.r i64 
    addrefoff                 block:128 128 -128
    push           8          i64 
    popptroff                 u64 8 -8
    setargs                   2 0
    push           16         i64 
    push           pc_libmcl.mclinit.r i64 
    callfn         &pc_libmcl.mgenreg0 u64 
    push           &pci_mcl.regtable 
    push           pc_libmcl.mclinit.r i64 
    addrefoff                 block:128 128 -128
    push           16         i64 
    popptroff                 u64 8 -8
    push           &pci_mcl.regtable 
    push           pc_libmcl.mclinit.r i64 
    addrefoff                 block:128 128 -128
    push           8          i64 
    pushptroff                u64 8 -8
    push           &pc_libmcl.rd 
    push           pc_libmcl.mclinit.r i64 
    popptroff                 u64 8 -16
#14906: 
    forup          #14905     i64 1
    opnd           pc_libmcl.mclinit.r 
    opnd           16         
#14907: 
    setargs                   2 0
    push           8          i64 
    push           0          i64 
    callfn         &pc_libmcl.mgenint0 u64 
    pop            pci_mcl.zero_opnd u64 
#14908: 
    push           0          i64 
    pop            pc_libmcl.mclinit.i i64 
#14909: 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.mclinit.i i64 
    callfn         &pc_libmcl.mgenint0 u64 
    push           &pci_mcl.smallinttable 
    push           pc_libmcl.mclinit.i i64 
    popptroff                 u64 8 0
#14910: 
    forup          #14909     i64 1
    opnd           pc_libmcl.mclinit.i 
    opnd           32         
#14911: 
#14912: 
    push           -128       i64 
    pop            pc_libmcl.mclinit.i i64 
    push           64         i64 
    pop            pc_libmcl.mclinit.av_1 i64 
    push           pc_libmcl.mclinit.av_1 i64 
    push           -128       i64 
    jumplt         #14913     i64 
#14914: 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mclinit.a u64 
    push           3          i64 
    push           pc_libmcl.mclinit.a u64 
    push           9          
    popptroff                 u8 1 0
    push           15         i64 
    push           pc_libmcl.mclinit.a u64 
    push           10         
    popptroff                 u8 1 0
    push           8          i64 
    push           pc_libmcl.mclinit.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mclinit.i i64 
    push           pc_libmcl.mclinit.a u64 
    push           14         
    popptroff                 i32 1 0
    push           pc_libmcl.mclinit.a u64 
    push           &pci_mcl.frameregtable 
    push           pc_libmcl.mclinit.i i64 
    popptroff                 u64 8 1024
#14915: 
    forup          #14914     i64 1
    opnd           pc_libmcl.mclinit.i 
    opnd           pc_libmcl.mclinit.av_1 
#14913: 
    setargs                   2 0
    push           8          i64 
    push           15         i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pci_mcl.dframeopnd u64 
    setargs                   2 0
    push           8          i64 
    push           16         i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pci_mcl.dstackopnd u64 
    setargs                   0 0
    callproc       &pc_libmcl.initmcdest 
    setargs                   2 0
    push           1          i64 
    push           67         i64 
    callproc       &pc_libmcl.setsegment 
    setargs                   1 0
    push           8192       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pci_mcl.stringtable u64 
    setargs                   1 0
    push           4096       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pci_mcl.stringlabtable u64 
    setargs                   1 0
    push           128        i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pci_mcl.realtable u64 
    setargs                   1 0
    push           64         i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pci_mcl.reallabtable u64 
    push           0          i64 
    pop            pci_mcl.nstrings i64 
    push           0          i64 
    pop            pci_mcl.nreals i64 
    push           1024       i64 
    pop            pci_mcl.stringtablesize i64 
    push           16         i64 
    pop            pci_mcl.realtablesize i64 
    push           &pci_mcl.pclopndstack 
    push           2985       
    addrefoff                 u8 1 0
    pop            pci_mcl.pclstack u64 
    push           0          i64 
    pop            pci_mcl.lab_funcnametable i64 
    push           0          i64 
    pop            pci_mcl.lab_funcaddrtable i64 
#14916: 
    retproc                   
End


Proc pc_libmcl.initmcdest:
    procentry                 
    push           0          u64 
    store          pci_mcl.mccodex u64 
    pop            pci_mcl.mccode u64 
    push           &pci_mcl.rtsproclabels 
    clear                     block:48 
#14918: 
    retproc                   
End


Proc pc_libmcl.genmc:
    param          pc_libmcl.genmc.opcode i64 
    param          pc_libmcl.genmc.a u64 
    param          pc_libmcl.genmc.b u64 
    local          pc_libmcl.genmc.m u64 
    local          pc_libmcl.genmc.oldm u64 
    local          pc_libmcl.genmc.labno i64 
    procentry                 
    setargs                   1 0
    push           59         i64 
    callfn         &mlibp.pcm_allocz u64 
    pop            pc_libmcl.genmc.m u64 
    push           pc_libmcl.genmc.opcode i64 
    push           pc_libmcl.genmc.m u64 
    push           24         
    popptroff                 u8 1 0
    push           pc_libmcl.genmc.a u64 
    push           pc_libmcl.genmc.m u64 
    push           8          
    popptroff                 u64 1 0
    push           pc_libmcl.genmc.b u64 
    push           pc_libmcl.genmc.m u64 
    push           16         
    popptroff                 u64 1 0
    push           pc_libmcl.genmc.opcode i64 
    push           22         i64 
    casejumpeq     #14920     i64 0
    push           15         i64 
    casejumpeq     #14921     i64 0
    push           9          i64 
    casejumpeq     #14922     i64 0
    popstack                  i64 
    jump           #14923     
#14920: 
    push           &pci_mcl.inf_proccalls 
    incr                      i64 1
    jump           #14924     
#14921: 
    push           pc_libmcl.genmc.b u64 
    jumpfalse      #14925     u64 
    push           pc_libmcl.genmc.b u64 
    push           12         
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #14925     i64 
    push           1          u64 
    push           pc_libmcl.genmc.b u64 
    pushptr                   u64 
    push           46         
    addrefoff                 u64 1 0
    push           2          i64 
    popdotindex               u16 
#14925: 
    jump           #14924     
#14922: 
    push           pc_libmcl.genmc.a u64 
    pushptr                   i64 
    pop            pc_libmcl.genmc.labno i64 
    push           pc_libmcl.genmc.labno i64 
    push           800000     i64 
    jumple         #14926     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "LABNO="   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libmcl.genmc.labno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           800000     i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           ""         u64 
    push           "Too many labels" u64 
    callproc       &pc_libmcl.merror 
#14926: 
    push           pc_libmcl.genmc.m u64 
    push           &pci_mcl.labeltable 
    push           pc_libmcl.genmc.labno i64 
    popptroff                 u64 8 -8
    jump           #14924     
#14923: 
#14924: 
    push           pci_mcl.mccode u64 
    jumpfalse      #14927     u64 
    push           pc_libmcl.genmc.m u64 
    push           pci_mcl.mccodex u64 
    push           0          
    popptroff                 u64 1 0
    push           pc_libmcl.genmc.m u64 
    pop            pci_mcl.mccodex u64 
    jump           #14928     
#14927: 
    push           pc_libmcl.genmc.m u64 
    store          pci_mcl.mccodex u64 
    pop            pci_mcl.mccode u64 
#14928: 
#14929: 
    retproc                   
End


Proc pc_libmcl.genmc_cond:
    param          pc_libmcl.genmc_cond.opcode i64 
    param          pc_libmcl.genmc_cond.cond i64 
    param          pc_libmcl.genmc_cond.a u64 
    param          pc_libmcl.genmc_cond.b u64 
    procentry                 
    setargs                   3 0
    push           pc_libmcl.genmc_cond.b u64 
    push           pc_libmcl.genmc_cond.a u64 
    push           pc_libmcl.genmc_cond.opcode i64 
    callproc       &pc_libmcl.genmc 
    push           pc_libmcl.genmc_cond.cond i64 
    push           pci_mcl.mccodex u64 
    push           25         
    popptroff                 u8 1 0
#14931: 
    retproc                   
End


Proc pc_libmcl.genmc_str:
    param          pc_libmcl.genmc_str.opcode i64 
    param          pc_libmcl.genmc_str.s u64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           -1         i64 
    push           pc_libmcl.genmc_str.s u64 
    callfn         &pc_libmcl.mgenstring u64 
    push           pc_libmcl.genmc_str.opcode i64 
    callproc       &pc_libmcl.genmc 
#14933: 
    retproc                   
End


Proc pc_libmcl.newmclopnd: u64
    local          pc_libmcl.newmclopnd.a u64 
    procentry                 
    setargs                   1 0
    push           19         i64 
    callfn         &mlibp.pcm_allocz u64 
    pop            pc_libmcl.newmclopnd.a u64 
    push           pc_libmcl.newmclopnd.a u64 
    setret                    u64 
    jump           #14935     
#14935: 
    retfn                     u64 
End


Proc pc_libmcl.duplopnd: u64
    param          pc_libmcl.duplopnd.a u64 
    local          pc_libmcl.duplopnd.b u64 
    procentry                 
    setargs                   1 0
    push           19         i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pc_libmcl.duplopnd.b u64 
    push           pc_libmcl.duplopnd.a u64 
    pushptr                   block:19 
    push           pc_libmcl.duplopnd.b u64 
    popptr                    block:19 
    push           pc_libmcl.duplopnd.b u64 
    setret                    u64 
    jump           #14937     
#14937: 
    retfn                     u64 
End


Proc pc_libmcl.mgenxreg: u64
    param          pc_libmcl.mgenxreg.xreg i64 
    param          pc_libmcl.mgenxreg.size i64 
    local          pc_libmcl.mgenxreg.a u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenxreg.a u64 
    push           5          i64 
    push           pc_libmcl.mgenxreg.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenxreg.xreg i64 
    push           pc_libmcl.mgenxreg.a u64 
    push           10         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenxreg.size i64 
    push           pc_libmcl.mgenxreg.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenxreg.a u64 
    setret                    u64 
    jump           #14939     
#14939: 
    retfn                     u64 
End


Proc pc_libmcl.mgenindex: u64
    param          pc_libmcl.mgenindex.areg i64 
    param          pc_libmcl.mgenindex.ireg i64 
    param          pc_libmcl.mgenindex.scale i64 
    param          pc_libmcl.mgenindex.offset i64 
    param          pc_libmcl.mgenindex.size i64 
    param          pc_libmcl.mgenindex.labno i64 
    param          pc_libmcl.mgenindex.def u64 
    local          pc_libmcl.mgenindex.a u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenindex.a u64 
    push           3          i64 
    push           pc_libmcl.mgenindex.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenindex.areg i64 
    push           pc_libmcl.mgenindex.a u64 
    push           10         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenindex.ireg i64 
    push           pc_libmcl.mgenindex.a u64 
    push           11         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenindex.scale i64 
    push           pc_libmcl.mgenindex.a u64 
    push           13         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenindex.size i64 
    push           pc_libmcl.mgenindex.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenindex.offset i64 
    push           pc_libmcl.mgenindex.a u64 
    push           14         
    popptroff                 i32 1 0
    push           pc_libmcl.mgenindex.labno i64 
    jumpfalse      #14941     i64 
    push           pc_libmcl.mgenindex.labno i64 
    push           pc_libmcl.mgenindex.a u64 
    push           0          
    popptroff                 i64 1 0
    push           7          i64 
    push           pc_libmcl.mgenindex.a u64 
    push           12         
    popptroff                 u8 1 0
    jump           #14942     
#14941: 
    push           pc_libmcl.mgenindex.def u64 
    jumpfalse      #14943     u64 
    push           pc_libmcl.mgenindex.def u64 
    push           pc_libmcl.mgenindex.a u64 
    push           0          
    popptroff                 u64 1 0
    push           pc_libmcl.mgenindex.def u64 
    push           48         
    addrefoff                 u64 1 0
    incr                      i16 1
    push           5          i64 
    push           pc_libmcl.mgenindex.a u64 
    push           12         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenindex.def u64 
    push           27         
    pushptroff                u8 1 0
    push           18         i64 
    setjumpeq      #14944     i64 
    push           19         i64 
    setjumpne      #14945     i64 
#14944: 
    push           15         i64 
    push           pc_libmcl.mgenindex.a u64 
    push           10         
    popptroff                 u8 1 0
#14945: 
#14943: 
#14942: 
    push           pc_libmcl.mgenindex.a u64 
    setret                    u64 
    jump           #14946     
#14946: 
    retfn                     u64 
End


Proc pc_libmcl.getmclstr: u64
    local          pc_libmcl.getmclstr.d u64 
    local          pc_libmcl.getmclstr.e u64 
    local          pc_libmcl.getmclstr.m u64 
    local          pc_libmcl.getmclstr.str2 block:32 
    local          pc_libmcl.getmclstr.str3 block:32 
    local          pc_libmcl.getmclstr.i i64 
    procentry                 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_init 
    push           pci_mcl.mccode u64 
    pop            pc_libmcl.getmclstr.m u64 
    push           1          i64 
    pop            pc_libmcl.getmclstr.i i64 
    jump           #14948     
#14949: 
    setargs                   2 0
    push           pc_libmcl.getmclstr.m u64 
    push           pc_libmcl.getmclstr.i i64 
    callproc       &pc_libmcl.writemcl 
    push           &pc_libmcl.getmclstr.i 
    incr                      i64 1
    push           pc_libmcl.getmclstr.m u64 
    pushptr                   u64 
    pop            pc_libmcl.getmclstr.m u64 
#14948: 
    push           pc_libmcl.getmclstr.m u64 
    jumptrue       #14949     u64 
#14950: 
    push           pci_mcl.dest u64 
    setret                    u64 
    jump           #14951     
#14951: 
    retfn                     u64 
End


Proc pc_libmcl.mgencomment:
    param          pc_libmcl.mgencomment.s u64 
    procentry                 
    push           pc_libmcl.mgencomment.s u64 
    push           0          u64 
    jumpeq         #14953     u64 
    push           pc_libmcl.mgencomment.s u64 
    pushptr                   u8 
    push           0          i64 
    jumpne         #14954     i64 
#14953: 
    setargs                   3 0
    push           0          u64 
    push           0          u64 
    push           4          i64 
    callproc       &pc_libmcl.genmc 
    jump           #14955     
#14954: 
    setargs                   2 0
    push           pc_libmcl.mgencomment.s u64 
    push           3          i64 
    callproc       &pc_libmcl.genmc_str 
#14955: 
#14956: 
    retproc                   
End


Proc pc_libmcl.mgenstring: u64
    param          pc_libmcl.mgenstring.s u64 
    param          pc_libmcl.mgenstring.length i64 
    local          pc_libmcl.mgenstring.a u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenstring.a u64 
    push           2          i64 
    push           pc_libmcl.mgenstring.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenstring.length i64 
    push           0          i64 
    jumpge         #14958     i64 
    setargs                   1 0
    push           pc_libmcl.mgenstring.s u64 
    callfn         &strlen    i64 
    pop            pc_libmcl.mgenstring.length i64 
#14958: 
    setargs                   1 0
    push           pc_libmcl.mgenstring.length i64 
    push           1          i64 
    add                       i64 
    callfn         &mlibp.pcm_alloc u64 
    push           pc_libmcl.mgenstring.a u64 
    push           0          
    popptroff                 u64 1 0
    setargs                   3 0
    push           pc_libmcl.mgenstring.length u64 
    push           pc_libmcl.mgenstring.s u64 
    push           pc_libmcl.mgenstring.a u64 
    pushptr                   u64 
    callproc       &memcpy    
    push           0          u64 
    push           pc_libmcl.mgenstring.a u64 
    pushptr                   u64 
    push           pc_libmcl.mgenstring.length i64 
    popptroff                 u8 1 0
    push           4          i64 
    push           pc_libmcl.mgenstring.a u64 
    push           12         
    popptroff                 u8 1 0
    push           8          i64 
    push           pc_libmcl.mgenstring.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenstring.a u64 
    setret                    u64 
    jump           #14959     
#14959: 
    retfn                     u64 
End


Proc pc_libmcl.mgenname: u64
    param          pc_libmcl.mgenname.s u64 
    local          pc_libmcl.mgenname.str block:64 
    local          pc_libmcl.mgenname.a u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenname.a u64 
    push           2          i64 
    push           pc_libmcl.mgenname.a u64 
    push           9          
    popptroff                 u8 1 0
    setargs                   1 0
    push           pc_libmcl.mgenname.s u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           pc_libmcl.mgenname.a u64 
    push           0          
    popptroff                 u64 1 0
    push           8          i64 
    push           pc_libmcl.mgenname.a u64 
    push           12         
    popptroff                 u8 1 0
    push           8          i64 
    push           pc_libmcl.mgenname.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenname.a u64 
    setret                    u64 
    jump           #14961     
#14961: 
    retfn                     u64 
End


Proc pc_libmcl.writemcl:
    param          pc_libmcl.writemcl.index i64 
    param          pc_libmcl.writemcl.mcl u64 
    procentry                 
    push           pc_libmcl.writemcl.mcl u64 
    push           24         
    pushptroff                u8 1 0
    push           5          i64 
    casejumpeq     #14963     i64 0
    popstack                  i64 
    jump           #14964     
#14963: 
    jump           #14965     
#14964: 
    setargs                   1 0
    push           pc_libmcl.writemcl.mcl u64 
    callproc       &pc_libmcl.strmcl 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_line 
#14965: 
#14966: 
    retproc                   
End


Proc pc_libmcl.strmcl:
    param          pc_libmcl.strmcl.mcl u64 
    local          pc_libmcl.strmcl.opcname block:128 
    local          pc_libmcl.strmcl.a u64 
    local          pc_libmcl.strmcl.b u64 
    local          pc_libmcl.strmcl.opcode i64 
    local          pc_libmcl.strmcl.cond i64 
    local          pc_libmcl.strmcl.sizepref i64 
    local          pc_libmcl.strmcl.s u64 
    local          pc_libmcl.strmcl.comment u64 
    local          pc_libmcl.strmcl.d u64 
    procentry                 
    push           pc_libmcl.strmcl.mcl u64 
    push           24         
    pushptroff                u8 1 0
    pop            pc_libmcl.strmcl.opcode i64 
    push           pc_libmcl.strmcl.mcl u64 
    push           25         
    pushptroff                u8 1 0
    pop            pc_libmcl.strmcl.cond i64 
    push           pc_libmcl.strmcl.mcl u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_libmcl.strmcl.a u64 
    push           pc_libmcl.strmcl.mcl u64 
    push           16         
    pushptroff                u64 1 0
    pop            pc_libmcl.strmcl.b u64 
    push           0          u64 
    pop            pc_libmcl.strmcl.comment u64 
    push           pc_libmcl.strmcl.opcode i64 
    push           1          i64 
    casejumpeq     #14968     i64 0
    push           2          i64 
    casejumpeq     #14969     i64 0
    push           4          i64 
    casejumpeq     #14970     i64 0
    push           3          i64 
    casejumpeq     #14971     i64 0
    push           5          i64 
    casejumpeq     #14972     i64 0
    push           6          i64 
    casejumpeq     #14973     i64 0
    push           9          i64 
    casejumpeq     #14974     i64 0
    push           7          i64 
    casejumpeq     #14975     i64 0
    push           8          i64 
    casejumpeq     #14976     i64 0
    popstack                  i64 
    jump           #14977     
#14968: 
    setargs                   1 0
    push           ";Proc "   u64 
    callproc       &pc_libmcl.asmstr 
    setargs                   1 0
    push           pc_libmcl.strmcl.a u64 
    pushptr                   u64 
    pushptr                   u64 
    callproc       &pc_libmcl.asmstr 
    push           pc_libmcl.strmcl.a u64 
    pushptr                   u64 
    pop            pci_mcl.currasmproc u64 
    jump           #14978     
    jump           #14979     
#14969: 
    setargs                   1 0
    push           ";End "    u64 
    callproc       &pc_libmcl.asmstr 
    push           0          u64 
    pop            pci_mcl.currasmproc u64 
    jump           #14978     
    jump           #14979     
#14970: 
    jump           #14978     
    jump           #14979     
#14971: 
    setargs                   1 0
    push           59         i64 
    callproc       &pc_libmcl.asmchar 
    setargs                   1 0
    push           pc_libmcl.strmcl.a u64 
    pushptr                   u64 
    callproc       &pc_libmcl.asmstr 
    jump           #14980     
    jump           #14978     
    jump           #14979     
#14972: 
    setargs                   1 0
    push           "; <deleted>" u64 
    callproc       &pc_libmcl.asmstr 
    jump           #14980     
    jump           #14978     
    jump           #14979     
#14973: 
    push           pc_libmcl.strmcl.a u64 
    pushptr                   u64 
    pop            pc_libmcl.strmcl.d u64 
    push           pc_libmcl.strmcl.a u64 
    push           12         
    pushptroff                u8 1 0
    push           5          i64 
    casejumpeq     #14981     i64 0
    push           4          i64 
    casejumpeq     #14982     i64 0
    popstack                  i64 
    jump           #14983     
#14981: 
    setargs                   1 0
    setargs                   1 0
    push           pc_libmcl.strmcl.d u64 
    callfn         &pc_libmcl.getfullname u64 
    callproc       &pc_libmcl.asmstr 
    jump           #14984     
#14982: 
    setargs                   1 0
    push           pc_libmcl.strmcl.a u64 
    pushptr                   u64 
    callproc       &pc_libmcl.asmstr 
    jump           #14978     
    jump           #14984     
#14983: 
    setargs                   2 0
    push           ""         u64 
    push           "strmcl/lab" u64 
    callproc       &pc_libmcl.merror 
#14984: 
    setargs                   1 0
    push           ":"        u64 
    callproc       &pc_libmcl.asmstr 
    push           pc_libmcl.strmcl.d u64 
    push           46         
    pushptroff                u16 1 0
    push           3          i64 
    dotindex                  i64 
    jumpfalse      #14985     u64 
    setargs                   1 0
    push           "\n"       u64 
    callproc       &pc_libmcl.asmstr 
    setargs                   1 0
    setargs                   1 0
    push           pc_libmcl.strmcl.d u64 
    pushptr                   u64 
    callfn         &pc_libpcl.getbasename u64 
    callproc       &pc_libmcl.asmstr 
    setargs                   1 0
    push           "::"       u64 
    callproc       &pc_libmcl.asmstr 
#14985: 
    jump           #14978     
    jump           #14979     
#14974: 
    setargs                   1 0
    push           &pc_libmcl.strmcl.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "L#:"      u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           pc_libmcl.strmcl.a u64 
    pushptr                   i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           &pc_libmcl.strmcl.str 
    callproc       &pc_libmcl.asmstr 
    jump           #14978     
    jump           #14979     
#14975: 
    setargs                   1 0
    push           "          " u64 
    callproc       &pc_libmcl.asmstr 
    setargs                   1 0
    push           pc_libmcl.strmcl.a u64 
    pushptr                   u64 
    callproc       &pc_libmcl.asmstr 
    setargs                   1 0
    push           " = "      u64 
    callproc       &pc_libmcl.asmstr 
    setargs                   3 0
    push           0          i64 
    push           0          i64 
    push           pc_libmcl.strmcl.b u64 
    callproc       &pc_libmcl.asmopnd 
    jump           #14978     
    jump           #14979     
#14976: 
    setargs                   1 0
    push           "          " u64 
    callproc       &pc_libmcl.asmstr 
    setargs                   1 0
    push           pc_libmcl.strmcl.a u64 
    pushptr                   u64 
    callproc       &pc_libmcl.asmstr 
    setargs                   1 0
    push           " = "      u64 
    callproc       &pc_libmcl.asmstr 
    push           pc_libmcl.strmcl.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #14986     i64 0
    popstack                  i64 
    jump           #14987     
#14986: 
    setargs                   1 0
    setargs                   2 0
    push           pc_libmcl.strmcl.b u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_libmcl.strmcl.b u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.getregname u64 
    callproc       &pc_libmcl.asmstr 
    jump           #14988     
#14987: 
    setargs                   1 0
    setargs                   2 0
    push           pc_libmcl.strmcl.b u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_libmcl.strmcl.b u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.fgetregname u64 
    callproc       &pc_libmcl.asmstr 
#14988: 
    jump           #14978     
    jump           #14979     
#14977: 
#14979: 
    push           pc_libmcl.strmcl.opcode i64 
    push           27         i64 
    casejumpeq     #14989     i64 0
    push           59         i64 
    casejumpeq     #14990     i64 0
    push           16         i64 
    casejumpeq     #14991     i64 0
    push           22         i64 
    casejumpeq     #14992     i64 0
    push           39         i64 
    casejumpeq     #14993     i64 0
    push           40         i64 
    casejumpeq     #14994     i64 0
    push           41         i64 
    casejumpeq     #14995     i64 0
    push           52         i64 
    casejumpeq     #14996     i64 0
    popstack                  i64 
    jump           #14997     
#14989: 
    setargs                   1 0
    push           &pc_libmcl.strmcl.opcname 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "j"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           &pci_mcl.asmcondnames 
    push           pc_libmcl.strmcl.cond i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #14998     
#14990: 
    setargs                   1 0
    push           &pc_libmcl.strmcl.opcname 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "set"      u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           &pci_mcl.asmcondnames 
    push           pc_libmcl.strmcl.cond i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #14998     
#14991: 
    setargs                   1 0
    push           &pc_libmcl.strmcl.opcname 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "cmov"     u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           &pci_mcl.asmcondnames 
    push           pc_libmcl.strmcl.cond i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #14998     
#14992: 
    setargs                   2 0
    push           "call"     u64 
    push           &pc_libmcl.strmcl.opcname 
    callproc       &strcpy    
    jump           #14998     
#14993: 
    setargs                   2 0
    push           "and"      u64 
    push           &pc_libmcl.strmcl.opcname 
    callproc       &strcpy    
    jump           #14998     
#14994: 
    setargs                   2 0
    push           "or"       u64 
    push           &pc_libmcl.strmcl.opcname 
    callproc       &strcpy    
    jump           #14998     
#14995: 
    setargs                   2 0
    push           "xor"      u64 
    push           &pc_libmcl.strmcl.opcname 
    callproc       &strcpy    
    jump           #14998     
#14996: 
    setargs                   2 0
    push           "not"      u64 
    push           &pc_libmcl.strmcl.opcname 
    callproc       &strcpy    
    jump           #14998     
#14997: 
    push           pc_libmcl.strmcl.opcode i64 
    push           148        i64 
    jumple         #14999     i64 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_libmcl.strmcl.opcode i64 
    callfn         &msysp.strint u64 
    push           &pc_libmcl.strmcl.opcname 
    callproc       &strcpy    
    jump           #15000     
#14999: 
    setargs                   2 0
    push           &pci_mcl.mclnames 
    push           pc_libmcl.strmcl.opcode i64 
    pushptroff                u64 8 -8
    push           2          i64 
    addrefoff                 u64 1 0
    push           &pc_libmcl.strmcl.opcname 
    callproc       &strcpy    
#15000: 
#14998: 
    setargs                   3 0
    push           " "        u64 
    push           10         i64 
    push           &pc_libmcl.strmcl.opcname 
    callproc       &mlibp.ipadstr 
    setargs                   2 0
    push           "  "       u64 
    push           &pc_libmcl.strmcl.str 
    callproc       &strcpy    
    setargs                   3 0
    push           " "        u64 
    push           10         i64 
    push           &pc_libmcl.strmcl.str 
    callproc       &mlibp.ipadstr 
    setargs                   2 0
    push           &pc_libmcl.strmcl.opcname 
    push           &pc_libmcl.strmcl.str 
    callproc       &strcat    
    setargs                   1 0
    push           &pc_libmcl.strmcl.str 
    callproc       &pc_libmcl.asmstr 
    push           pc_libmcl.strmcl.a u64 
    jumpfalse      #15001     u64 
    push           pc_libmcl.strmcl.b u64 
    jumpfalse      #15001     u64 
    setargs                   3 0
    push           pc_libmcl.strmcl.b u64 
    push           pc_libmcl.strmcl.a u64 
    push           pc_libmcl.strmcl.opcode i64 
    callfn         &pc_libmcl.needsizeprefix i64 
    pop            pc_libmcl.strmcl.sizepref i64 
    setargs                   3 0
    push           0          i64 
    push           pc_libmcl.strmcl.sizepref i64 
    push           pc_libmcl.strmcl.a u64 
    callproc       &pc_libmcl.asmopnd 
    setargs                   1 0
    push           ",\t"      u64 
    callproc       &pc_libmcl.asmstr 
    setargs                   3 0
    push           0          i64 
    push           pc_libmcl.strmcl.sizepref i64 
    push           pc_libmcl.strmcl.b u64 
    callproc       &pc_libmcl.asmopnd 
    jump           #15002     
#15001: 
    push           pc_libmcl.strmcl.a u64 
    jumpfalse      #15003     u64 
    push           pc_libmcl.strmcl.a u64 
    push           9          
    pushptroff                u8 1 0
    jumpfalse      #15003     i64 
    push           pc_libmcl.strmcl.opcode i64 
    push           22         i64 
    jumpne         #15004     i64 
    setargs                   3 0
    push           0          i64 
    push           0          i64 
    push           pc_libmcl.strmcl.a u64 
    callproc       &pc_libmcl.asmopnd 
    jump           #15005     
#15004: 
    setargs                   3 0
    push           0          i64 
    push           1          i64 
    push           pc_libmcl.strmcl.a u64 
    callproc       &pc_libmcl.asmopnd 
#15005: 
#15003: 
#15002: 
!docomments::
#14980: 
#14978: 
    retproc                   
End


Proc pc_libmcl.asmopnd:
    param          pc_libmcl.asmopnd.a u64 
    param          pc_libmcl.asmopnd.sizeprefix i64 
    param          pc_libmcl.asmopnd.debug i64 
    procentry                 
    setargs                   1 0
    setargs                   3 0
    push           pc_libmcl.asmopnd.debug i64 
    push           pc_libmcl.asmopnd.sizeprefix i64 
    push           pc_libmcl.asmopnd.a u64 
    callfn         &pc_libmcl.stropnd u64 
    callproc       &pc_libmcl.asmstr 
#15007: 
    retproc                   
End


Proc pc_libmcl.setsegment:
    param          pc_libmcl.setsegment.seg i64 
    param          pc_libmcl.setsegment.align i64 
    local          pc_libmcl.setsegment.opc i64 
    local          pc_libmcl.setsegment.oldalign i64 
    procentry                 
    push           pc_libmcl.setsegment.seg i64 
    push           pci_mcl.currsegment i64 
    jumpeq         #15009     i64 
    push           pc_libmcl.setsegment.seg i64 
    push           73         i64 
    casejumpeq     #15010     i64 0
    push           90         i64 
    casejumpeq     #15011     i64 0
    push           67         i64 
    casejumpeq     #15012     i64 0
    push           82         i64 
    casejumpeq     #15013     i64 0
    popstack                  i64 
    jump           #15014     
#15010: 
    push           120        i64 
    pop            pc_libmcl.setsegment.opc i64 
    jump           #15015     
#15011: 
    push           121        i64 
    pop            pc_libmcl.setsegment.opc i64 
    jump           #15015     
#15012: 
    push           122        i64 
    pop            pc_libmcl.setsegment.opc i64 
    jump           #15015     
#15013: 
    setargs                   2 0
    push           ""         u64 
    push           "CAN'T DO RODATA SEG" u64 
    callproc       &pc_libmcl.merror 
    jump           #15015     
#15014: 
    setargs                   2 0
    push           ""         u64 
    push           "BAD SEG CODE" u64 
    callproc       &pc_libmcl.merror 
#15015: 
    push           pci_mcl.mccodex u64 
    jumpfalse      #15016     u64 
    push           pci_mcl.mccodex u64 
    push           24         
    pushptroff                u8 1 0
    push           120        i64 
    setjumpeq      #15017     i64 
    push           121        i64 
    setjumpeq      #15017     i64 
    push           122        i64 
    setjumpne      #15016     i64 
#15017: 
    push           pc_libmcl.setsegment.opc i64 
    push           pci_mcl.mccodex u64 
    push           24         
    popptroff                 u8 1 0
    jump           #15018     
#15016: 
    setargs                   3 0
    push           0          u64 
    push           0          u64 
    push           pc_libmcl.setsegment.opc i64 
    callproc       &pc_libmcl.genmc 
#15018: 
    push           pc_libmcl.setsegment.seg i64 
    pop            pci_mcl.currsegment i64 
#15009: 
    push           pc_libmcl.setsegment.align i64 
    push           1          i64 
    jumple         #15019     i64 
    push           pci_mcl.mccodex u64 
    push           24         
    pushptroff                u8 1 0
    push           123        i64 
    jumpne         #15020     i64 
    push           pci_mcl.mccodex u64 
    push           8          
    pushptroff                u64 1 0
    pushptr                   i64 
    pop            pc_libmcl.setsegment.oldalign i64 
    push           pc_libmcl.setsegment.oldalign i64 
    push           pc_libmcl.setsegment.align i64 
    jumplt         #15021     i64 
    jump           #15022     
#15021: 
#15020: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.setsegment.align i64 
    callfn         &pc_libmcl.mgenint u64 
    push           123        i64 
    callproc       &pc_libmcl.genmc 
#15019: 
#15022: 
    retproc                   
End


Proc pc_libmcl.getsizeprefix: u64
    param          pc_libmcl.getsizeprefix.size i64 
    param          pc_libmcl.getsizeprefix.enable i64 
    procentry                 
    push           pc_libmcl.getsizeprefix.enable i64 
    jumptrue       #15024     i64 
    push           ""         u64 
    setret                    u64 
    jump           #15025     
#15024: 
    push           pc_libmcl.getsizeprefix.size i64 
    push           1          i64 
    casejumpeq     #15026     i64 0
    push           2          i64 
    casejumpeq     #15027     i64 0
    push           4          i64 
    casejumpeq     #15028     i64 0
    push           8          i64 
    casejumpeq     #15029     i64 0
    push           16         i64 
    casejumpeq     #15030     i64 0
    popstack                  i64 
    jump           #15031     
#15026: 
    push           "byte "    u64 
    setret                    u64 
    jump           #15025     
    jump           #15032     
#15027: 
    push           "word16 "  u64 
    setret                    u64 
    jump           #15025     
    jump           #15032     
#15028: 
    push           "word32 "  u64 
    setret                    u64 
    jump           #15025     
    jump           #15032     
#15029: 
    push           "word64 "  u64 
    setret                    u64 
    jump           #15025     
    jump           #15032     
#15030: 
    push           "word128 " u64 
    setret                    u64 
    jump           #15025     
    jump           #15032     
#15031: 
#15032: 
    push           ""         u64 
    setret                    u64 
    jump           #15025     
#15025: 
    retfn                     u64 
End


Proc pc_libmcl.needsizeprefix: i64
    param          pc_libmcl.needsizeprefix.opcode i64 
    param          pc_libmcl.needsizeprefix.a u64 
    param          pc_libmcl.needsizeprefix.b u64 
    procentry                 
    push           pc_libmcl.needsizeprefix.opcode i64 
    push           19         i64 
    casejumpeq     #15034     i64 0
    push           20         i64 
    casejumpeq     #15034     i64 0
    push           84         i64 
    casejumpeq     #15034     i64 0
    push           85         i64 
    casejumpeq     #15034     i64 0
    push           80         i64 
    casejumpeq     #15035     i64 0
    push           81         i64 
    casejumpeq     #15035     i64 0
    push           82         i64 
    casejumpeq     #15035     i64 0
    push           83         i64 
    casejumpeq     #15035     i64 0
    push           44         i64 
    casejumpeq     #15036     i64 0
    push           46         i64 
    casejumpeq     #15036     i64 0
    push           45         i64 
    casejumpeq     #15036     i64 0
    popstack                  i64 
    jump           #15037     
#15034: 
    push           1          i64 
    setret                    i64 
    jump           #15038     
    jump           #15039     
#15035: 
    push           1          i64 
    setret                    i64 
    jump           #15038     
    jump           #15039     
#15036: 
    push           pc_libmcl.needsizeprefix.a u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #15040     i64 
    push           1          i64 
    setret                    i64 
    jump           #15038     
#15040: 
    push           0          i64 
    setret                    i64 
    jump           #15038     
    jump           #15039     
#15037: 
#15039: 
    push           pc_libmcl.needsizeprefix.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #15041     i64 
    push           pc_libmcl.needsizeprefix.a u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpeq         #15041     i64 
    push           pc_libmcl.needsizeprefix.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #15041     i64 
    push           pc_libmcl.needsizeprefix.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #15042     i64 
#15041: 
    push           0          i64 
    setret                    i64 
    jump           #15038     
#15042: 
    push           1          i64 
    setret                    i64 
    jump           #15038     
#15038: 
    retfn                     i64 
End


Proc pc_libmcl.changeopndsize: u64
    param          pc_libmcl.changeopndsize.a u64 
    param          pc_libmcl.changeopndsize.size i64 
    local          pc_libmcl.changeopndsize.b u64 
    procentry                 
    push           pc_libmcl.changeopndsize.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_libmcl.changeopndsize.size i64 
    jumpeq         #15044     i64 
    push           pc_libmcl.changeopndsize.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #15045     i64 
    push           &pci_mcl.regtable 
    push           pc_libmcl.changeopndsize.a u64 
    push           10         
    pushptroff                u8 1 0
    addrefoff                 block:128 128 -128
    push           pc_libmcl.changeopndsize.size i64 
    pushptroff                u64 8 -8
    pop            pc_libmcl.changeopndsize.b u64 
    jump           #15046     
#15045: 
    setargs                   1 0
    push           pc_libmcl.changeopndsize.a u64 
    callfn         &pc_libmcl.duplopnd u64 
    pop            pc_libmcl.changeopndsize.b u64 
    push           pc_libmcl.changeopndsize.size i64 
    push           pc_libmcl.changeopndsize.b u64 
    push           8          
    popptroff                 u8 1 0
#15046: 
    push           pc_libmcl.changeopndsize.b u64 
    setret                    u64 
    jump           #15047     
#15044: 
    push           pc_libmcl.changeopndsize.a u64 
    setret                    u64 
    jump           #15047     
#15047: 
    retfn                     u64 
End


Proc pc_libmcl.makeopndind: u64
    param          pc_libmcl.makeopndind.a u64 
    param          pc_libmcl.makeopndind.size i64 
    local          pc_libmcl.makeopndind.b u64 
    procentry                 
    push           pc_libmcl.makeopndind.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #15049     i64 
    setargs                   2 0
    push           ""         u64 
    push           "makeopndind" u64 
    callproc       &pc_libmcl.merror 
#15049: 
    setargs                   3 0
    push           0          i64 
    push           pc_libmcl.makeopndind.size i64 
    push           pc_libmcl.makeopndind.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenireg u64 
    setret                    u64 
    jump           #15050     
#15050: 
    retfn                     u64 
End


Proc pc_libmcl.applyoffset: u64
    param          pc_libmcl.applyoffset.a u64 
    param          pc_libmcl.applyoffset.offset i64 
    param          pc_libmcl.applyoffset.size i64 
    local          pc_libmcl.applyoffset.b u64 
    procentry                 
    push           pc_libmcl.applyoffset.offset i64 
    push           0          i64 
    jumpne         #15052     i64 
    push           pc_libmcl.applyoffset.size i64 
    push           0          i64 
    jumpne         #15052     i64 
    push           pc_libmcl.applyoffset.a u64 
    setret                    u64 
    jump           #15053     
#15052: 
    setargs                   1 0
    push           pc_libmcl.applyoffset.a u64 
    callfn         &pc_libmcl.duplopnd u64 
    pop            pc_libmcl.applyoffset.b u64 
    push           pc_libmcl.applyoffset.b u64 
    push           14         
    addrefoff                 u64 1 0
    push           pc_libmcl.applyoffset.offset i64 
    addto                     i32 
    push           pc_libmcl.applyoffset.size i64 
    jumpfalse      #15054     i64 
    push           pc_libmcl.applyoffset.size i64 
    push           pc_libmcl.applyoffset.b u64 
    push           8          
    popptroff                 u8 1 0
#15054: 
    push           pc_libmcl.applyoffset.b u64 
    setret                    u64 
    jump           #15053     
#15053: 
    retfn                     u64 
End


Proc pc_libmcl.mgenint: u64
    param          pc_libmcl.mgenint.x i64 
    param          pc_libmcl.mgenint.size i64 
    procentry                 
    push           pc_libmcl.mgenint.x i64 
    push           0          i64 
    push           32         i64 
    jumpnotinrange #15056     i64 
    push           pc_libmcl.mgenint.size i64 
    push           8          i64 
    jumpne         #15056     i64 
    push           &pci_mcl.smallinttable 
    push           pc_libmcl.mgenint.x i64 
    pushptroff                u64 8 0
    setret                    u64 
    jump           #15057     
#15056: 
    setargs                   2 0
    push           pc_libmcl.mgenint.size i64 
    push           pc_libmcl.mgenint.x i64 
    callfn         &pc_libmcl.mgenint0 u64 
    setret                    u64 
    jump           #15057     
#15057: 
    retfn                     u64 
End


Proc pc_libmcl.mgenint0: u64
    param          pc_libmcl.mgenint0.x i64 
    param          pc_libmcl.mgenint0.size i64 
    local          pc_libmcl.mgenint0.a u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenint0.a u64 
    push           2          i64 
    push           pc_libmcl.mgenint0.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenint0.x i64 
    push           pc_libmcl.mgenint0.a u64 
    push           0          
    popptroff                 i64 1 0
    push           1          i64 
    push           pc_libmcl.mgenint0.a u64 
    push           12         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenint0.size i64 
    push           pc_libmcl.mgenint0.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenint0.a u64 
    setret                    u64 
    jump           #15059     
#15059: 
    retfn                     u64 
End


Proc pc_libmcl.mgenrealmem: u64
    param          pc_libmcl.mgenrealmem.x r64 
    param          pc_libmcl.mgenrealmem.size i64 
    local          pc_libmcl.mgenrealmem.a u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenrealmem.a u64 
    push           3          i64 
    push           pc_libmcl.mgenrealmem.a u64 
    push           9          
    popptroff                 u8 1 0
    setargs                   2 0
    push           pc_libmcl.mgenrealmem.size i64 
    push           pc_libmcl.mgenrealmem.x r64 
    callfn         &pc_libmcl.getrealindex i64 
    push           pc_libmcl.mgenrealmem.a u64 
    push           0          
    popptroff                 i64 1 0
    push           7          i64 
    push           pc_libmcl.mgenrealmem.a u64 
    push           12         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenrealmem.size i64 
    push           pc_libmcl.mgenrealmem.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenrealmem.a u64 
    setret                    u64 
    jump           #15061     
#15061: 
    retfn                     u64 
End


Proc pc_libmcl.mgenrealimm: u64
    param          pc_libmcl.mgenrealimm.x r64 
    param          pc_libmcl.mgenrealimm.size i64 
    local          pc_libmcl.mgenrealimm.a u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenrealimm.a u64 
    push           2          i64 
    push           pc_libmcl.mgenrealimm.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenrealimm.x r64 
    push           pc_libmcl.mgenrealimm.a u64 
    push           0          
    popptroff                 r64 1 0
    push           2          i64 
    push           pc_libmcl.mgenrealimm.a u64 
    push           12         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenrealimm.size i64 
    push           pc_libmcl.mgenrealimm.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenrealimm.a u64 
    setret                    u64 
    jump           #15063     
#15063: 
    retfn                     u64 
End


Proc pc_libmcl.mgenlabel: u64
    param          pc_libmcl.mgenlabel.x i64 
    local          pc_libmcl.mgenlabel.a u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenlabel.a u64 
    push           2          i64 
    push           pc_libmcl.mgenlabel.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenlabel.x i64 
    push           0          i64 
    jumpne         #15065     i64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pc_libmcl.mgenlabel.x i64 
#15065: 
    push           pc_libmcl.mgenlabel.x i64 
    push           pc_libmcl.mgenlabel.a u64 
    push           0          
    popptroff                 i64 1 0
    push           7          i64 
    push           pc_libmcl.mgenlabel.a u64 
    push           12         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenlabel.a u64 
    setret                    u64 
    jump           #15066     
#15066: 
    retfn                     u64 
End


Proc pc_libmcl.mgenlabelmem: u64
    param          pc_libmcl.mgenlabelmem.x i64 
    local          pc_libmcl.mgenlabelmem.a u64 
    procentry                 
    setargs                   1 0
    push           pc_libmcl.mgenlabelmem.x i64 
    callfn         &pc_libmcl.mgenlabel u64 
    pop            pc_libmcl.mgenlabelmem.a u64 
    push           3          i64 
    push           pc_libmcl.mgenlabelmem.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenlabelmem.a u64 
    setret                    u64 
    jump           #15068     
#15068: 
    retfn                     u64 
End


Proc pc_libmcl.mgenregvar: u64
    param          pc_libmcl.mgenregvar.d u64 
    local          pc_libmcl.mgenregvar.a u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.mgenregvar.d u64 
    push           50         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_libmcl.mgenregvar.a u64 
    push           1          i64 
    push           &pci_mcl.isregvar 
    push           pc_libmcl.mgenregvar.d u64 
    push           50         
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    push           pc_libmcl.mgenregvar.a u64 
    setret                    u64 
    jump           #15070     
#15070: 
    retfn                     u64 
End


Proc pc_libmcl.mgenxregvar: u64
    param          pc_libmcl.mgenxregvar.d u64 
    local          pc_libmcl.mgenxregvar.a u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.mgenxregvar.d u64 
    push           50         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenxreg u64 
    pop            pc_libmcl.mgenxregvar.a u64 
    push           1          i64 
    push           &pci_mcl.isxregvar 
    push           pc_libmcl.mgenxregvar.d u64 
    push           50         
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    push           pc_libmcl.mgenxregvar.a u64 
    setret                    u64 
    jump           #15072     
#15072: 
    retfn                     u64 
End


Proc pc_libmcl.mgenmem: u64
    param          pc_libmcl.mgenmem.d u64 
    local          pc_libmcl.mgenmem.a u64 
    local          pc_libmcl.mgenmem.p u64 
    local          pc_libmcl.mgenmem.reg i64 
    procentry                 
    push           pc_libmcl.mgenmem.d u64 
    push           16         
    pushptroff                u64 1 0
    pop            pc_libmcl.mgenmem.p u64 
    push           pc_libmcl.mgenmem.d u64 
    push           50         
    pushptroff                u8 1 0
    jumpfalse      #15074     i64 
    push           &pc_tables.pfloat 
    push           pc_libmcl.mgenmem.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #15075     i64 
    setargs                   1 0
    push           pc_libmcl.mgenmem.d u64 
    callfn         &pc_libmcl.mgenxregvar u64 
    setret                    u64 
    jump           #15076     
    jump           #15077     
#15075: 
    setargs                   1 0
    push           pc_libmcl.mgenmem.d u64 
    callfn         &pc_libmcl.mgenregvar u64 
    setret                    u64 
    jump           #15076     
#15077: 
#15074: 
    push           0          i64 
    pop            pc_libmcl.mgenmem.reg i64 
    push           pc_libmcl.mgenmem.d u64 
    push           27         
    pushptroff                u8 1 0
    push           18         i64 
    setjumpeq      #15078     i64 
    push           19         i64 
    setjumpne      #15079     i64 
#15078: 
    push           pc_decls.optimflag i64 
    jumptrue       #15080     i64 
    push           pc_libmcl.mgenmem.d u64 
    push           32         
    pushptroff                i32 1 0
    push           -128       i64 
    push           64         i64 
    jumpnotinrange #15080     i64 
    push           pc_libmcl.mgenmem.p u64 
    push           4          
    pushptroff                i32 1 0
    push           8          i64 
    jumpne         #15080     i64 
    push           &pci_mcl.frameregtable 
    push           pc_libmcl.mgenmem.d u64 
    push           32         
    pushptroff                i32 1 0
    pushptroff                u64 8 1024
    setret                    u64 
    jump           #15076     
#15080: 
    push           15         i64 
    pop            pc_libmcl.mgenmem.reg i64 
#15079: 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenmem.a u64 
    push           3          i64 
    push           pc_libmcl.mgenmem.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenmem.reg i64 
    push           pc_libmcl.mgenmem.a u64 
    push           10         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenmem.d u64 
    push           pc_libmcl.mgenmem.a u64 
    push           0          
    popptroff                 u64 1 0
    push           pc_libmcl.mgenmem.d u64 
    push           48         
    addrefoff                 u64 1 0
    incr                      i16 1
    push           5          i64 
    push           pc_libmcl.mgenmem.a u64 
    push           12         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenmem.p u64 
    push           4          
    pushptroff                i32 1 0
    push           8          i64 
    min                       i64 
    push           pc_libmcl.mgenmem.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenmem.a u64 
    setret                    u64 
    jump           #15076     
#15076: 
    retfn                     u64 
End


Proc pc_libmcl.mgenmemhigh: u64
    param          pc_libmcl.mgenmemhigh.d u64 
    local          pc_libmcl.mgenmemhigh.a u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenmemhigh.a u64 
    push           3          i64 
    push           pc_libmcl.mgenmemhigh.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenmemhigh.d u64 
    push           27         
    pushptroff                u8 1 0
    push           18         i64 
    setjumpeq      #15082     i64 
    push           19         i64 
    setjumpne      #15083     i64 
#15082: 
    push           15         i64 
    push           pc_libmcl.mgenmemhigh.a u64 
    push           10         
    popptroff                 u8 1 0
#15083: 
    push           pc_libmcl.mgenmemhigh.d u64 
    push           48         
    addrefoff                 u64 1 0
    incr                      i16 1
    push           pc_libmcl.mgenmemhigh.d u64 
    push           pc_libmcl.mgenmemhigh.a u64 
    push           0          
    popptroff                 u64 1 0
    push           5          i64 
    push           pc_libmcl.mgenmemhigh.a u64 
    push           12         
    popptroff                 u8 1 0
    push           8          i64 
    push           pc_libmcl.mgenmemhigh.a u64 
    push           14         
    popptroff                 i32 1 0
    push           8          i64 
    push           pc_libmcl.mgenmemhigh.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenmemhigh.a u64 
    setret                    u64 
    jump           #15084     
#15084: 
    retfn                     u64 
End


Proc pc_libmcl.mgenmemaddr: u64
    param          pc_libmcl.mgenmemaddr.d u64 
    local          pc_libmcl.mgenmemaddr.a u64 
    procentry                 
    push           1          u64 
    push           pc_libmcl.mgenmemaddr.d u64 
    push           46         
    addrefoff                 u64 1 0
    push           2          i64 
    popdotindex               u16 
    push           pc_libmcl.mgenmemaddr.d u64 
    push           48         
    addrefoff                 u64 1 0
    incr                      i16 1
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenmemaddr.a u64 
    push           2          i64 
    push           pc_libmcl.mgenmemaddr.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenmemaddr.d u64 
    push           pc_libmcl.mgenmemaddr.a u64 
    push           0          
    popptroff                 u64 1 0
    push           pc_libmcl.mgenmemaddr.d u64 
    push           48         
    addrefoff                 u64 1 0
    incr                      i16 1
    push           5          i64 
    push           pc_libmcl.mgenmemaddr.a u64 
    push           12         
    popptroff                 u8 1 0
    push           8          i64 
    push           pc_libmcl.mgenmemaddr.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenmemaddr.a u64 
    setret                    u64 
    jump           #15086     
#15086: 
    retfn                     u64 
End


Proc pc_libmcl.mgenreg: u64
    param          pc_libmcl.mgenreg.reg i64 
    param          pc_libmcl.mgenreg.size i64 
    procentry                 
    push           &pci_mcl.regtable 
    push           pc_libmcl.mgenreg.reg i64 
    addrefoff                 block:128 128 -128
    push           pc_libmcl.mgenreg.size i64 
    pushptroff                u64 8 -8
    setret                    u64 
    jump           #15088     
    setargs                   2 0
    push           pc_libmcl.mgenreg.size i64 
    push           pc_libmcl.mgenreg.reg i64 
    callfn         &pc_libmcl.mgenreg0 u64 
    setret                    u64 
    jump           #15088     
#15088: 
    retfn                     u64 
End


Proc pc_libmcl.mgenreg0: u64
    param          pc_libmcl.mgenreg0.reg i64 
    param          pc_libmcl.mgenreg0.size i64 
    local          pc_libmcl.mgenreg0.a u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenreg0.a u64 
    push           1          i64 
    push           pc_libmcl.mgenreg0.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenreg0.reg i64 
    push           pc_libmcl.mgenreg0.a u64 
    push           10         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenreg0.size i64 
    push           pc_libmcl.mgenreg0.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenreg0.a u64 
    setret                    u64 
    jump           #15090     
#15090: 
    retfn                     u64 
End


Proc pc_libmcl.mgenireg: u64
    param          pc_libmcl.mgenireg.reg i64 
    param          pc_libmcl.mgenireg.size i64 
    param          pc_libmcl.mgenireg.offset i64 
    local          pc_libmcl.mgenireg.a u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenireg.a u64 
    push           3          i64 
    push           pc_libmcl.mgenireg.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenireg.reg i64 
    push           pc_libmcl.mgenireg.a u64 
    push           10         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenireg.size i64 
    push           pc_libmcl.mgenireg.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenireg.offset i64 
    push           pc_libmcl.mgenireg.a u64 
    push           14         
    popptroff                 i32 1 0
    push           pc_libmcl.mgenireg.a u64 
    setret                    u64 
    jump           #15092     
#15092: 
    retfn                     u64 
End


Proc pc_libmcl.roundsizetg: i64
    param          pc_libmcl.roundsizetg.size i64 
    procentry                 
    jump           #15094     
#15095: 
    push           &pc_libmcl.roundsizetg.size 
    incr                      i64 1
#15094: 
    push           pc_libmcl.roundsizetg.size i64 
    push           7          i64 
    iand                      i64 
    jumptrue       #15095     i64 
#15096: 
    push           pc_libmcl.roundsizetg.size i64 
    setret                    i64 
    jump           #15097     
#15097: 
    retfn                     i64 
End


Proc pc_libmcl.getregname: u64
    param          pc_libmcl.getregname.reg i64 
    param          pc_libmcl.getregname.size i64 
    local          pc_libmcl.getregname.str2 block:16 
    local          pc_libmcl.getregname.rs u64 
    local          pc_libmcl.getregname.size2 i64 
    procentry                 
    push           pc_libmcl.getregname.size i64 
    pop            pc_libmcl.getregname.size2 i64 
    push           pc_libmcl.getregname.size2 i64 
    push           16         i64 
    jumple         #15099     i64 
    push           17         i64 
    pop            pc_libmcl.getregname.size2 i64 
#15099: 
    push           pc_libmcl.getregname.reg i64 
    push           0          i64 
    casejumpeq     #15100     i64 0
    push           15         i64 
    casejumpeq     #15101     i64 0
    push           16         i64 
    casejumpeq     #15102     i64 0
    popstack                  i64 
    jump           #15103     
#15100: 
    push           "-"        u64 
    setret                    u64 
    jump           #15104     
    jump           #15105     
#15101: 
    push           "frame"    u64 
    pop            pc_libmcl.getregname.rs u64 
    jump           #15105     
#15102: 
    push           "stack"    u64 
    pop            pc_libmcl.getregname.rs u64 
    jump           #15105     
#15103: 
    setargs                   2 0
    push           &pc_libmcl.getregname.str2 
    push           pc_libmcl.getregname.reg i64 
    push           1          i64 
    sub                       i64 
    callproc       &msysp.getstrint 
    push           &pc_libmcl.getregname.str2 
    pop            pc_libmcl.getregname.rs u64 
#15105: 
    setargs                   1 0
    push           &pc_libmcl.getregname.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           &pc_libmcl.getregname.prefix 
    push           pc_libmcl.getregname.size2 i64 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           pc_libmcl.getregname.rs u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           &pc_libmcl.getregname.str 
    setret                    u64 
    jump           #15104     
#15104: 
    retfn                     u64 
End


Proc pc_libmcl.fgetregname: u64
    param          pc_libmcl.fgetregname.reg i64 
    param          pc_libmcl.fgetregname.size i64 
    procentry                 
    push           pc_libmcl.fgetregname.reg i64 
    push           0          i64 
    jumpne         #15107     i64 
    push           "-"        u64 
    setret                    u64 
    jump           #15108     
#15107: 
    setargs                   1 0
    push           &pc_libmcl.fgetregname.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "XMM"      u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           pc_libmcl.fgetregname.reg i64 
    push           1          i64 
    sub                       i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           &pc_libmcl.fgetregname.str 
    setret                    u64 
    jump           #15108     
#15108: 
    retfn                     u64 
End


Proc pc_libmcl.sameoperand: i64
    param          pc_libmcl.sameoperand.a u64 
    param          pc_libmcl.sameoperand.b u64 
    procentry                 
    setargs                   3 0
    push           8          u64 
    push           pc_libmcl.sameoperand.b u64 
    push           pc_libmcl.sameoperand.a u64 
    callfn         &memcmp    i32 
    push           0          i64 
    seteq                     i64 
    setret                    i64 
    jump           #15110     
#15110: 
    retfn                     i64 
End


Proc pc_libmcl.sameregopnd: i64
    param          pc_libmcl.sameregopnd.a u64 
    param          pc_libmcl.sameregopnd.b u64 
    procentry                 
    push           pc_libmcl.sameregopnd.a u64 
    push           9          
    pushptroff                u8 1 0
    push           pc_libmcl.sameregopnd.b u64 
    push           9          
    pushptroff                u8 1 0
    jumpne         #15112     i64 
    push           pc_libmcl.sameregopnd.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #15113     i64 
#15112: 
    push           0          i64 
    setret                    i64 
    jump           #15114     
#15113: 
    push           pc_libmcl.sameregopnd.a u64 
    push           10         
    pushptroff                u8 1 0
    push           pc_libmcl.sameregopnd.b u64 
    push           10         
    pushptroff                u8 1 0
    seteq                     i64 
    setret                    i64 
    jump           #15114     
#15114: 
    retfn                     i64 
End


Proc pc_libmcl.getstringindex: i64
    param          pc_libmcl.getstringindex.s u64 
    procentry                 
    push           pc_libmcl.getstringindex.s u64 
    push           0          u64 
    jumpne         #15116     u64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pci_mcl.kk0used i64 
    push           pci_mcl.kk0used i64 
    setret                    i64 
    jump           #15117     
#15116: 
    push           pci_mcl.nstrings i64 
    push           pci_mcl.stringtablesize i64 
    jumplt         #15118     i64 
    setargs                   0 0
    callproc       &pc_libmcl.extendstringtable 
#15118: 
    push           pci_mcl.nstrings i64 
    jumpfalse      #15119     i64 
    setargs                   2 0
    push           pc_libmcl.getstringindex.s u64 
    push           pci_mcl.stringtable u64 
    push           pci_mcl.nstrings i64 
    pushptroff                u64 8 -8
    callfn         &mlibp.eqstring i64 
    jumpfalse      #15119     i64 
    push           pci_mcl.stringlabtable u64 
    push           pci_mcl.nstrings i64 
    pushptroff                i32 4 -4
    setret                    i64 
    jump           #15117     
#15119: 
    push           pc_libmcl.getstringindex.s u64 
    push           pci_mcl.stringtable u64 
    push           &pci_mcl.nstrings 
    incrload                  i64 1
    popptroff                 u64 8 -8
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    push           pci_mcl.stringlabtable u64 
    push           pci_mcl.nstrings i64 
    popptroff                 i32 4 -4
    push           pci_mcl.mlabelno i64 
    setret                    i64 
    jump           #15117     
#15117: 
    retfn                     i64 
End


Proc pc_libmcl.getrealindex: i64
    param          pc_libmcl.getrealindex.x r64 
    param          pc_libmcl.getrealindex.size i64 
    procentry                 
    push           pci_mcl.nreals i64 
    push           pci_mcl.realtablesize i64 
    jumplt         #15121     i64 
    setargs                   0 0
    callproc       &pc_libmcl.extendrealtable 
#15121: 
    push           pc_libmcl.getrealindex.x r64 
    push           pci_mcl.realtable u64 
    push           &pci_mcl.nreals 
    incrload                  i64 1
    popptroff                 r64 8 -8
    push           &pci_mcl.mlabelno 
    incr                      i64 1
    startmult                 
    push           pc_libmcl.getrealindex.size i64 
    push           8          i64 
    jumpne         #15122     i64 
    push           pci_mcl.mlabelno i64 
    resetmult                 
    jump           #15123     
#15122: 
    push           pci_mcl.mlabelno i64 
    neg                       i64 
    endmult                   
#15123: 
    push           pci_mcl.reallabtable u64 
    push           pci_mcl.nreals i64 
    popptroff                 i32 4 -4
    push           pci_mcl.mlabelno i64 
    setret                    i64 
    jump           #15124     
#15124: 
    retfn                     i64 
End


Proc pc_libmcl.extendstringtable:
    local          pc_libmcl.extendstringtable.oldstringtable u64 
    local          pc_libmcl.extendstringtable.oldstringlabtable u64 
    local          pc_libmcl.extendstringtable.oldstringtablesize i64 
    local          pc_libmcl.extendstringtable.i i64 
    procentry                 
    push           pci_mcl.stringtablesize i64 
    pop            pc_libmcl.extendstringtable.oldstringtablesize i64 
    push           pci_mcl.stringtable u64 
    pop            pc_libmcl.extendstringtable.oldstringtable u64 
    push           pci_mcl.stringlabtable u64 
    pop            pc_libmcl.extendstringtable.oldstringlabtable u64 
    push           &pci_mcl.stringtablesize 
    push           2          i64 
    multo                     i64 
    setargs                   1 0
    push           8          i64 
    push           pci_mcl.stringtablesize i64 
    mul                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pci_mcl.stringtable u64 
    setargs                   1 0
    push           4          i64 
    push           pci_mcl.stringtablesize i64 
    mul                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pci_mcl.stringlabtable u64 
#15126: 
    push           1          i64 
    pop            pc_libmcl.extendstringtable.i i64 
    push           pci_mcl.nstrings i64 
    push           1          i64 
    jumplt         #15127     i64 
#15128: 
    push           pc_libmcl.extendstringtable.oldstringtable u64 
    push           pc_libmcl.extendstringtable.i i64 
    pushptroff                u64 8 -8
    push           pci_mcl.stringtable u64 
    push           pc_libmcl.extendstringtable.i i64 
    popptroff                 u64 8 -8
    push           pc_libmcl.extendstringtable.oldstringlabtable u64 
    push           pc_libmcl.extendstringtable.i i64 
    pushptroff                i32 4 -4
    push           pci_mcl.stringlabtable u64 
    push           pc_libmcl.extendstringtable.i i64 
    popptroff                 i32 4 -4
#15129: 
    forup          #15128     i64 1
    opnd           pc_libmcl.extendstringtable.i 
    opnd           pci_mcl.nstrings 
#15127: 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.extendstringtable.oldstringtablesize i64 
    mul                       i64 
    push           pc_libmcl.extendstringtable.oldstringtable u64 
    callproc       &mlibp.pcm_free 
    setargs                   2 0
    push           4          i64 
    push           pc_libmcl.extendstringtable.oldstringtablesize i64 
    mul                       i64 
    push           pc_libmcl.extendstringtable.oldstringlabtable u64 
    callproc       &mlibp.pcm_free 
#15130: 
    retproc                   
End


Proc pc_libmcl.extendrealtable:
    local          pc_libmcl.extendrealtable.oldrealtable u64 
    local          pc_libmcl.extendrealtable.oldreallabtable u64 
    local          pc_libmcl.extendrealtable.oldrealtablesize i64 
    local          pc_libmcl.extendrealtable.i i64 
    procentry                 
    push           pci_mcl.realtablesize i64 
    pop            pc_libmcl.extendrealtable.oldrealtablesize i64 
    push           pci_mcl.realtable u64 
    pop            pc_libmcl.extendrealtable.oldrealtable u64 
    push           pci_mcl.reallabtable u64 
    pop            pc_libmcl.extendrealtable.oldreallabtable u64 
    push           &pci_mcl.realtablesize 
    push           2          i64 
    multo                     i64 
    setargs                   1 0
    push           8          i64 
    push           pci_mcl.realtablesize i64 
    mul                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pci_mcl.realtable u64 
    setargs                   1 0
    push           4          i64 
    push           pci_mcl.realtablesize i64 
    mul                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pci_mcl.reallabtable u64 
#15132: 
    push           1          i64 
    pop            pc_libmcl.extendrealtable.i i64 
    push           pci_mcl.nreals i64 
    push           1          i64 
    jumplt         #15133     i64 
#15134: 
    push           pc_libmcl.extendrealtable.oldrealtable u64 
    push           pc_libmcl.extendrealtable.i i64 
    pushptroff                r64 8 -8
    push           pci_mcl.realtable u64 
    push           pc_libmcl.extendrealtable.i i64 
    popptroff                 r64 8 -8
    push           pc_libmcl.extendrealtable.oldreallabtable u64 
    push           pc_libmcl.extendrealtable.i i64 
    pushptroff                i32 4 -4
    push           pci_mcl.reallabtable u64 
    push           pc_libmcl.extendrealtable.i i64 
    popptroff                 i32 4 -4
#15135: 
    forup          #15134     i64 1
    opnd           pc_libmcl.extendrealtable.i 
    opnd           pci_mcl.nreals 
#15133: 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.extendrealtable.oldrealtablesize i64 
    mul                       i64 
    push           pc_libmcl.extendrealtable.oldrealtable u64 
    callproc       &mlibp.pcm_free 
    setargs                   2 0
    push           4          i64 
    push           pc_libmcl.extendrealtable.oldrealtablesize i64 
    mul                       i64 
    push           pc_libmcl.extendrealtable.oldreallabtable u64 
    callproc       &mlibp.pcm_free 
#15136: 
    retproc                   
End


Proc pc_libmcl.asmstr:
    param          pc_libmcl.asmstr.s u64 
    procentry                 
    setargs                   2 0
    push           pc_libmcl.asmstr.s u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
#15138: 
    retproc                   
End


Proc pc_libmcl.asmchar:
    param          pc_libmcl.asmchar.c i64 
    procentry                 
    setargs                   2 0
    push           pc_libmcl.asmchar.c i64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_char 
#15140: 
    retproc                   
End


Proc pc_libmcl.getfullname: u64
    param          pc_libmcl.getfullname.d u64 
    local          pc_libmcl.getfullname.name u64 
    procentry                 
    push           pc_libmcl.getfullname.d u64 
    pushptr                   u64 
    pop            pc_libmcl.getfullname.name u64 
    push           pc_libmcl.getfullname.d u64 
    push           50         
    pushptroff                u8 1 0
    jumpfalse      #15142     i64 
    setargs                   1 0
    push           &pc_libmcl.getfullname.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "#.#"      u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    startmult                 
    push           pc_libmcl.getfullname.d u64 
    push           46         
    pushptroff                u16 1 0
    push           4          i64 
    dotindex                  i64 
    jumpfalse      #15143     u64 
    push           "X"        u64 
    resetmult                 
    jump           #15144     
#15143: 
    push           "R"        u64 
    endmult                   
#15144: 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libmcl.getfullname.name u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           &pc_libmcl.getfullname.str 
    setret                    u64 
    jump           #15145     
#15142: 
    startmult                 
    push           pc_libmcl.getfullname.d u64 
    push           46         
    pushptroff                u16 1 0
    push           8          i64 
    dotindex                  i64 
    jumpfalse      #15146     u64 
    push           pc_libmcl.getfullname.d u64 
    push           46         
    pushptroff                u16 1 0
    push           1          i64 
    dotindex                  i64 
    jumpfalse      #15146     u64 
    setargs                   2 0
    push           "`"        u64 
    push           &pc_libmcl.getfullname.str 
    callproc       &strcpy    
    setargs                   2 0
    push           pc_libmcl.getfullname.name u64 
    push           &pc_libmcl.getfullname.str 
    callproc       &strcat    
    setargs                   2 0
    push           "*"        u64 
    push           &pc_libmcl.getfullname.str 
    callfn         &strcat    u64 
    resetmult                 
    jump           #15147     
#15146: 
    push           pc_libmcl.getfullname.d u64 
    push           46         
    pushptroff                u16 1 0
    push           1          i64 
    dotindex                  i64 
    jumpfalse      #15148     u64 
    setargs                   2 0
    push           pc_libmcl.getfullname.name u64 
    push           &pc_libmcl.getfullname.str 
    callproc       &strcpy    
    setargs                   2 0
    push           "*"        u64 
    push           &pc_libmcl.getfullname.str 
    callfn         &strcat    u64 
    resetmult                 
    jump           #15147     
#15148: 
    push           pc_libmcl.getfullname.name u64 
    endmult                   
#15147: 
    setret                    u64 
    jump           #15145     
#15145: 
    retfn                     u64 
End


Proc pc_libmcl.getfulltempname: u64
    param          pc_libmcl.getfulltempname.tempno i64 
    procentry                 
    push           "TEMP"     u64 
    setret                    u64 
    jump           #15150     
#15150: 
    retfn                     u64 
End


Proc pc_libmcl.merror:
    param          pc_libmcl.merror.mess u64 
    param          pc_libmcl.merror.param u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "MCL Error: # (#) [#]" u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           pc_libmcl.merror.mess u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libmcl.merror.param u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.mseqno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#15152: 
    retproc                   
End


Proc pc_libmcl.merrort:
    param          pc_libmcl.merrort.mess u64 
    param          pc_libmcl.merrort.t i64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "MCL Type not supported: # (#) [#]" u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           pc_libmcl.merrort.mess u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pc_tables.pstdnames 
    push           pc_libmcl.merrort.t i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.mseqno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#15154: 
    retproc                   
End


Proc pc_libmcl.merroropnd:
    param          pc_libmcl.merroropnd.mess u64 
    param          pc_libmcl.merroropnd.opndtype i64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "MCL Opnd not supported: # (#) [#]" u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           pc_libmcl.merroropnd.mess u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pc_tables.opndnames 
    push           pc_libmcl.merroropnd.opndtype i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.mseqno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#15156: 
    retproc                   
End


Proc pc_libmcl.genstringtable:
    local          pc_libmcl.genstringtable.col i64 
    local          pc_libmcl.genstringtable.i i64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           73         i64 
    callproc       &pc_libmcl.setsegment 
    push           pci_mcl.kk0used i64 
    jumpfalse      #15158     i64 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.kk0used i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_libmcl.gendb 
#15158: 
    push           pci_mcl.nstrings i64 
    jumptrue       #15159     i64 
    jump           #15160     
#15159: 
#15161: 
    push           1          i64 
    pop            pc_libmcl.genstringtable.i i64 
    push           pci_mcl.nstrings i64 
    push           1          i64 
    jumplt         #15162     i64 
#15163: 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.stringlabtable u64 
    push           pc_libmcl.genstringtable.i i64 
    pushptroff                i32 4 -4
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   2 0
    push           1          i64 
    push           pci_mcl.stringtable u64 
    push           pc_libmcl.genstringtable.i i64 
    pushptroff                u64 8 -8
    callproc       &pc_libmcl.genstring 
#15164: 
    forup          #15163     i64 1
    opnd           pc_libmcl.genstringtable.i 
    opnd           pci_mcl.nstrings 
#15162: 
#15160: 
    retproc                   
End


Proc pc_libmcl.genstring:
    param          pc_libmcl.genstring.s u64 
    param          pc_libmcl.genstring.doterm i64 
    local          pc_libmcl.genstring.i i64 
    local          pc_libmcl.genstring.c i64 
    local          pc_libmcl.genstring.seqlen i64 
    local          pc_libmcl.genstring.length i64 
    local          pc_libmcl.genstring.seq u64 
    local          pc_libmcl.genstring.av_1 i64 
    procentry                 
    setargs                   1 0
    push           pc_libmcl.genstring.s u64 
    callfn         &strlen    i64 
    pop            pc_libmcl.genstring.length i64 
    push           pc_libmcl.genstring.length i64 
    push           0          i64 
    jumpne         #15166     i64 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_libmcl.gendb 
    jump           #15167     
#15166: 
    push           0          i64 
    pop            pc_libmcl.genstring.seqlen i64 
#15168: 
    push           pc_libmcl.genstring.length i64 
    pop            pc_libmcl.genstring.av_1 i64 
    push           pc_libmcl.genstring.av_1 i64 
    push           0          i64 
    jumple         #15169     i64 
#15170: 
    push           &pc_libmcl.genstring.s 
    loadincr                  u64 1
    pushptr                   u8 
    pop            pc_libmcl.genstring.c i64 
    push           pc_libmcl.genstring.c i64 
    push           32         i64 
    jumplt         #15171     i64 
    push           pc_libmcl.genstring.c i64 
    push           127        i64 
    jumpge         #15171     i64 
    push           pc_libmcl.genstring.c i64 
    push           34         i64 
    jumpne         #15172     i64 
#15171: 
    push           pc_libmcl.genstring.seqlen i64 
    jumpfalse      #15173     i64 
    setargs                   2 0
    push           pc_libmcl.genstring.seqlen i64 
    push           pc_libmcl.genstring.seq u64 
    callproc       &pc_libmcl.gendbstring 
    push           0          i64 
    pop            pc_libmcl.genstring.seqlen i64 
#15173: 
    setargs                   1 0
    push           pc_libmcl.genstring.c i64 
    callproc       &pc_libmcl.gendb 
    jump           #15174     
#15172: 
    push           pc_libmcl.genstring.seqlen i64 
    push           0          i64 
    jumpne         #15175     i64 
    push           1          i64 
    pop            pc_libmcl.genstring.seqlen i64 
    push           pc_libmcl.genstring.s u64 
    push           1          i64 
    subrefoff                 u64 1 0
    pop            pc_libmcl.genstring.seq u64 
    jump           #15176     
#15175: 
    push           &pc_libmcl.genstring.seqlen 
    incr                      i64 1
#15176: 
#15174: 
#15177: 
    to             #15170     
    opnd           pc_libmcl.genstring.av_1 
#15169: 
    push           pc_libmcl.genstring.seqlen i64 
    jumpfalse      #15178     i64 
    setargs                   2 0
    push           pc_libmcl.genstring.seqlen i64 
    push           pc_libmcl.genstring.seq u64 
    callproc       &pc_libmcl.gendbstring 
#15178: 
    push           pc_libmcl.genstring.doterm i64 
    jumpfalse      #15179     i64 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_libmcl.gendb 
#15179: 
#15167: 
    retproc                   
End


Proc pc_libmcl.gendb:
    param          pc_libmcl.gendb.a i64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.gendb.a i64 
    callfn         &pc_libmcl.mgenint u64 
    push           114        i64 
    callproc       &pc_libmcl.genmc 
#15181: 
    retproc                   
End


Proc pc_libmcl.gendbstring:
    param          pc_libmcl.gendbstring.s u64 
    param          pc_libmcl.gendbstring.length i64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           pc_libmcl.gendbstring.length i64 
    push           pc_libmcl.gendbstring.s u64 
    callfn         &pc_libmcl.mgenstring u64 
    push           114        i64 
    callproc       &pc_libmcl.genmc 
#15183: 
    retproc                   
End


Proc pc_libmcl.gendq:
    param          pc_libmcl.gendq.a i64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.gendq.a i64 
    callfn         &pc_libmcl.mgenint u64 
    push           117        i64 
    callproc       &pc_libmcl.genmc 
#15185: 
    retproc                   
End


Proc pc_libmcl.gendqname:
    param          pc_libmcl.gendqname.d u64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.gendqname.d u64 
    callfn         &pc_libmcl.mgenmemaddr u64 
    push           117        i64 
    callproc       &pc_libmcl.genmc 
#15187: 
    retproc                   
End


Proc pc_libmcl.gendqlabel:
    param          pc_libmcl.gendqlabel.lab i64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.gendqlabel.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           117        i64 
    callproc       &pc_libmcl.genmc 
#15189: 
    retproc                   
End


Proc pc_libmcl.genrealtable:
    local          pc_libmcl.genrealtable.x r64 
    local          pc_libmcl.genrealtable.i i64 
    procentry                 
    push           pci_mcl.nreals i64 
    jumptrue       #15191     i64 
    jump           #15192     
#15191: 
    setargs                   1 0
    push           "Real Table" u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   2 0
    push           8          i64 
    push           73         i64 
    callproc       &pc_libmcl.setsegment 
#15193: 
    push           1          i64 
    pop            pc_libmcl.genrealtable.i i64 
    push           pci_mcl.nreals i64 
    push           1          i64 
    jumplt         #15194     i64 
#15195: 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.reallabtable u64 
    push           pc_libmcl.genrealtable.i i64 
    pushptroff                i32 4 -4
    abs                       i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    push           pci_mcl.realtable u64 
    push           pc_libmcl.genrealtable.i i64 
    pushptroff                r64 8 -8
    pop            pc_libmcl.genrealtable.x r64 
    push           pci_mcl.reallabtable u64 
    push           pc_libmcl.genrealtable.i i64 
    pushptroff                i32 4 -4
    push           0          i64 
    jumple         #15196     i64 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.genrealtable.x r64 
    callfn         &pc_libmcl.mgenrealimm u64 
    push           117        i64 
    callproc       &pc_libmcl.genmc 
    jump           #15197     
#15196: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           4          i64 
    push           pc_libmcl.genrealtable.x r64 
    callfn         &pc_libmcl.mgenrealimm u64 
    push           116        i64 
    callproc       &pc_libmcl.genmc 
#15197: 
#15198: 
    forup          #15195     i64 1
    opnd           pc_libmcl.genrealtable.i 
    opnd           pci_mcl.nreals 
#15194: 
#15192: 
    retproc                   
End


Proc pc_libmcl.genabsneg:
    procentry                 
    setargs                   2 0
    push           16         i64 
    push           73         i64 
    callproc       &pc_libmcl.setsegment 
    push           pci_mcl.lababs32 i64 
    jumpfalse      #15200     i64 
    setargs                   1 0
    push           "lababs32" u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.lababs32 i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           9223372034707292159 i64 
    callproc       &pc_libmcl.gendq 
    setargs                   1 0
    push           9223372034707292159 i64 
    callproc       &pc_libmcl.gendq 
#15200: 
    push           pci_mcl.lababs64 i64 
    jumpfalse      #15201     i64 
    setargs                   1 0
    push           "lababs64" u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.lababs64 i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           9223372036854775807 i64 
    callproc       &pc_libmcl.gendq 
    setargs                   1 0
    push           9223372036854775807 i64 
    callproc       &pc_libmcl.gendq 
#15201: 
    push           pci_mcl.labneg32 i64 
    jumpfalse      #15202     i64 
    setargs                   1 0
    push           "labneg32" u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.labneg32 i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           -9223372034707292160 i64 
    callproc       &pc_libmcl.gendq 
    setargs                   1 0
    push           -9223372034707292160 i64 
    callproc       &pc_libmcl.gendq 
#15202: 
    push           pci_mcl.labneg64 i64 
    jumpfalse      #15203     i64 
    setargs                   1 0
    push           "labneg64" u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.labneg64 i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           -9223372036854775808 i64 
    callproc       &pc_libmcl.gendq 
    setargs                   1 0
    push           -9223372036854775808 i64 
    callproc       &pc_libmcl.gendq 
#15203: 
    push           pci_mcl.labzero i64 
    jumpfalse      #15204     i64 
    setargs                   1 0
    push           "labzero"  u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.labzero i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_libmcl.gendq 
#15204: 
    push           pci_mcl.labmask63 i64 
    jumpfalse      #15205     i64 
    setargs                   1 0
    push           "mask63/offset64" u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.labmask63 i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           9223372036854775807 i64 
    callproc       &pc_libmcl.gendq 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.laboffset64 i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           4890909195324358656 i64 
    callproc       &pc_libmcl.gendq 
#15205: 
#15206: 
    retproc                   
End


Proc pc_libmcl.mdefinelabel: i64
    procentry                 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    push           pci_mcl.mlabelno i64 
    setret                    i64 
    jump           #15208     
#15208: 
    retfn                     i64 
End


Proc pc_libmcl.mcreatefwdlabel: i64
    procentry                 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    setret                    i64 
    jump           #15210     
#15210: 
    retfn                     i64 
End


Proc pc_libmcl.mdefinefwdlabel:
    param          pc_libmcl.mdefinefwdlabel.lab i64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.mdefinefwdlabel.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
#15212: 
    retproc                   
End


Proc pc_libmcl.stropnd: u64
    param          pc_libmcl.stropnd.a u64 
    param          pc_libmcl.stropnd.sizeprefix i64 
    param          pc_libmcl.stropnd.debug i64 
    local          pc_libmcl.stropnd.str2 block:128 
    local          pc_libmcl.stropnd.plus u64 
    local          pc_libmcl.stropnd.t u64 
    local          pc_libmcl.stropnd.offset i64 
    local          pc_libmcl.stropnd.tc i64 
    procentry                 
    push           0          u64 
    push           &pc_libmcl.stropnd.str 
    push           1          i64 
    popptroff                 u8 1 -1
    push           pc_libmcl.stropnd.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #15214     i64 0
    push           2          i64 
    casejumpeq     #15215     i64 0
    push           3          i64 
    casejumpeq     #15216     i64 0
    push           5          i64 
    casejumpeq     #15217     i64 0
    popstack                  i64 
    jump           #15218     
#15214: 
    setargs                   2 0
    push           pc_libmcl.stropnd.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_libmcl.stropnd.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.strreg u64 
    setret                    u64 
    jump           #15219     
    jump           #15220     
#15215: 
    setargs                   2 0
    setargs                   1 0
    push           pc_libmcl.stropnd.a u64 
    callfn         &pc_libmcl.strvalue u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcpy    
    jump           #15220     
#15216: 
    push           pc_libmcl.stropnd.a u64 
    push           12         
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #15221     i64 0
    push           2          i64 
    casejumpeq     #15222     i64 0
    push           3          i64 
    casejumpeq     #15223     i64 0
    popstack                  i64 
    jump           #15224     
#15221: 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_libmcl.stropnd.a u64 
    pushptr                   i64 
    callfn         &msysp.strint u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcpy    
    jump           #15225     
#15222: 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_libmcl.stropnd.a u64 
    pushptr                   r64 
    callfn         &msysp.strreal u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcpy    
    jump           #15225     
#15223: 
    setargs                   1 0
    push           &pc_libmcl.stropnd.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "M#"       u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   2 0
    push           0          i64 
    push           pc_libmcl.stropnd.a u64 
    pushptr                   r64 
    callproc       &msysp.m$print_r64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #15225     
#15224: 
#15225: 
    setargs                   2 0
    setargs                   2 0
    push           pc_libmcl.stropnd.sizeprefix i64 
    push           pc_libmcl.stropnd.a u64 
    push           8          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.getsizeprefix u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcat    
    setargs                   2 0
    push           "["        u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcat    
    push           ""         u64 
    pop            pc_libmcl.stropnd.plus u64 
    push           pc_libmcl.stropnd.a u64 
    push           10         
    pushptroff                u8 1 0
    jumpfalse      #15226     i64 
    setargs                   2 0
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.stropnd.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.strreg u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcat    
    push           "+"        u64 
    pop            pc_libmcl.stropnd.plus u64 
#15226: 
    push           pc_libmcl.stropnd.a u64 
    push           11         
    pushptroff                u8 1 0
    jumpfalse      #15227     i64 
    setargs                   2 0
    push           pc_libmcl.stropnd.plus u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcat    
    setargs                   2 0
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.stropnd.a u64 
    push           11         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.strreg u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcat    
    push           "+"        u64 
    pop            pc_libmcl.stropnd.plus u64 
    push           pc_libmcl.stropnd.a u64 
    push           13         
    pushptroff                u8 1 0
    push           1          i64 
    jumple         #15228     i64 
    setargs                   2 0
    push           "*"        u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcat    
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_libmcl.stropnd.a u64 
    push           13         
    pushptroff                u8 1 0
    callfn         &msysp.strint u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcat    
#15228: 
#15227: 
    push           pc_libmcl.stropnd.a u64 
    push           12         
    pushptroff                u8 1 0
    push           5          i64 
    setjumpeq      #15229     i64 
    push           7          i64 
    setjumpeq      #15229     i64 
    push           6          i64 
    setjumpne      #15230     i64 
#15229: 
    push           pc_libmcl.stropnd.plus u64 
    pushptr                   u8 
    push           43         u64 
    jumpne         #15231     u64 
    setargs                   2 0
    push           pc_libmcl.stropnd.plus u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcat    
#15231: 
    setargs                   2 0
    setargs                   1 0
    push           pc_libmcl.stropnd.a u64 
    callfn         &pc_libmcl.strvalue u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcat    
    jump           #15232     
#15230: 
    push           pc_libmcl.stropnd.a u64 
    push           14         
    pushptroff                i32 1 0
    store          pc_libmcl.stropnd.offset i64 
    jumpfalse      #15233     i64 
    setargs                   1 0
    push           &pc_libmcl.stropnd.str2 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    push           "+"        u64 
    push           pc_libmcl.stropnd.offset i64 
    callproc       &msysp.m$print_i64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           &pc_libmcl.stropnd.str2 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcat    
#15233: 
#15232: 
    setargs                   2 0
    push           "]"        u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcat    
    jump           #15220     
#15217: 
    setargs                   2 0
    push           pc_libmcl.stropnd.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_libmcl.stropnd.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.strxreg u64 
    setret                    u64 
    jump           #15219     
    jump           #15220     
#15218: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "BAD OPND" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libmcl.stropnd.a u64 
    push           9          
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           "<BAD OPND>" u64 
    setret                    u64 
    jump           #15219     
#15220: 
    push           &pc_libmcl.stropnd.str 
    setret                    u64 
    jump           #15219     
#15219: 
    retfn                     u64 
End


Proc pc_libmcl.strreg: u64
    param          pc_libmcl.strreg.reg i64 
    param          pc_libmcl.strreg.size i64 
    local          pc_libmcl.strreg.d u64 
    procentry                 
    setargs                   2 0
    push           0          i64 
    push           pc_libmcl.strreg.reg i64 
    callfn         &pc_libmcl.checkregvar u64 
    pop            pc_libmcl.strreg.d u64 
    startmult                 
    push           pc_libmcl.strreg.size i64 
    push           8          i64 
    jumpne         #15235     i64 
    push           pc_libmcl.strreg.d u64 
    jumpfalse      #15235     u64 
    setargs                   1 0
    push           pc_libmcl.strreg.d u64 
    callfn         &pc_libmcl.getfullname u64 
    resetmult                 
    jump           #15236     
#15235: 
    setargs                   2 0
    push           pc_libmcl.strreg.size i64 
    push           pc_libmcl.strreg.reg i64 
    callfn         &pc_libmcl.getregname u64 
    endmult                   
#15236: 
    setret                    u64 
    jump           #15237     
#15237: 
    retfn                     u64 
End


Proc pc_libmcl.checkregvar: u64
    param          pc_libmcl.checkregvar.reg i64 
    param          pc_libmcl.checkregvar.isfloat i64 
    local          pc_libmcl.checkregvar.d u64 
    local          pc_libmcl.checkregvar.p u64 
    procentry                 
    push           pci_mcl.currasmproc u64 
    push           0          u64 
    jumpne         #15239     u64 
    push           0          u64 
    setret                    u64 
    jump           #15240     
#15239: 
    push           pci_mcl.currasmproc u64 
    push           16         
    pushptroff                u64 1 0
    push           1          i64 
    addrefoff                 u64 32 0
    pop            pc_libmcl.checkregvar.p u64 
    jump           #15241     
#15242: 
    push           pc_libmcl.checkregvar.p u64 
    push           1          
    pushptroff                u8 1 0
    push           18         i64 
    setjumpeq      #15243     i64 
    push           19         i64 
    setjumpne      #15244     i64 
#15243: 
    push           pc_libmcl.checkregvar.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_libmcl.checkregvar.d u64 
    push           pc_libmcl.checkregvar.d u64 
    push           50         
    pushptroff                u8 1 0
    push           pc_libmcl.checkregvar.reg i64 
    jumpne         #15245     i64 
    push           pc_libmcl.checkregvar.isfloat i64 
    jumpfalse      #15246     i64 
    push           &pc_tables.pfloat 
    push           pc_libmcl.checkregvar.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #15246     i64 
    push           pc_libmcl.checkregvar.d u64 
    setret                    u64 
    jump           #15240     
#15246: 
    push           pc_libmcl.checkregvar.isfloat i64 
    jumptrue       #15247     i64 
    push           &pc_tables.pfloat 
    push           pc_libmcl.checkregvar.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumptrue       #15247     i64 
    push           pc_libmcl.checkregvar.d u64 
    setret                    u64 
    jump           #15240     
#15247: 
#15245: 
#15244: 
#15248: 
    push           &pc_libmcl.checkregvar.p 
    incr                      u64 32
#15241: 
    push           pc_libmcl.checkregvar.p u64 
    push           1          
    pushptroff                u8 1 0
    push           10         i64 
    jumpne         #15242     i64 
#15249: 
    push           0          u64 
    setret                    u64 
    jump           #15240     
#15240: 
    retfn                     u64 
End


Proc pc_libmcl.strxreg: u64
    param          pc_libmcl.strxreg.reg i64 
    param          pc_libmcl.strxreg.size i64 
    local          pc_libmcl.strxreg.d u64 
    procentry                 
    setargs                   2 0
    push           1          i64 
    push           pc_libmcl.strxreg.reg i64 
    callfn         &pc_libmcl.checkregvar u64 
    pop            pc_libmcl.strxreg.d u64 
    startmult                 
    push           pc_libmcl.strxreg.size i64 
    push           8          i64 
    jumpne         #15251     i64 
    push           pc_libmcl.strxreg.d u64 
    jumpfalse      #15251     u64 
    setargs                   1 0
    push           pc_libmcl.strxreg.d u64 
    callfn         &pc_libmcl.getfullname u64 
    resetmult                 
    jump           #15252     
#15251: 
    setargs                   2 0
    push           pc_libmcl.strxreg.size i64 
    push           pc_libmcl.strxreg.reg i64 
    callfn         &pc_libmcl.fgetregname u64 
    endmult                   
#15252: 
    setret                    u64 
    jump           #15253     
#15253: 
    retfn                     u64 
End


Proc pc_libmcl.strvalue: u64
    param          pc_libmcl.strvalue.a u64 
    local          pc_libmcl.strvalue.str2 block:128 
    local          pc_libmcl.strvalue.def u64 
    local          pc_libmcl.strvalue.value i64 
    local          pc_libmcl.strvalue.offset i64 
    local          pc_libmcl.strvalue.length i64 
    local          pc_libmcl.strvalue.ss u64 
    procentry                 
    push           pc_libmcl.strvalue.a u64 
    pushptr                   u64 
    pop            pc_libmcl.strvalue.def u64 
    push           pc_libmcl.strvalue.a u64 
    pushptr                   i64 
    pop            pc_libmcl.strvalue.value i64 
    setargs                   2 0
    push           ""         u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcpy    
    push           pc_libmcl.strvalue.a u64 
    push           12         
    pushptroff                u8 1 0
    push           5          i64 
    casejumpeq     #15255     i64 0
    push           6          i64 
    casejumpeq     #15256     i64 0
    push           1          i64 
    casejumpeq     #15257     i64 0
    push           2          i64 
    casejumpeq     #15258     i64 0
    push           3          i64 
    casejumpeq     #15259     i64 0
    push           4          i64 
    casejumpeq     #15260     i64 0
    push           8          i64 
    casejumpeq     #15261     i64 0
    push           9          i64 
    casejumpeq     #15262     i64 0
    push           7          i64 
    casejumpeq     #15263     i64 0
    popstack                  i64 
    jump           #15264     
#15255: 
    setargs                   2 0
    setargs                   1 0
    push           pc_libmcl.strvalue.def u64 
    callfn         &pc_libmcl.getfullname u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
!addoffset::
#15265: 
    push           pc_libmcl.strvalue.a u64 
    push           14         
    pushptroff                i32 1 0
    store          pc_libmcl.strvalue.offset i64 
    jumpfalse      #15266     i64 
    setargs                   1 0
    push           &pc_libmcl.strvalue.str2 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    startmult                 
    push           pc_libmcl.strvalue.offset i64 
    push           0          i64 
    jumple         #15267     i64 
    push           "+"        u64 
    resetmult                 
    jump           #15268     
#15267: 
    push           ""         u64 
    endmult                   
#15268: 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           pc_libmcl.strvalue.offset i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           &pc_libmcl.strvalue.str2 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
#15266: 
    jump           #15269     
#15256: 
    setargs                   2 0
    setargs                   1 0
    push           pc_libmcl.strvalue.a u64 
    pushptr                   i64 
    callfn         &pc_libmcl.getfulltempname u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
    jump           #15269     
#15257: 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_libmcl.strvalue.value i64 
    callfn         &msysp.strint u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
    jump           #15269     
#15258: 
    setargs                   1 0
    push           &pc_libmcl.strvalue.str 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    push           "20.20"    u64 
    push           pc_libmcl.strvalue.a u64 
    pushptr                   r64 
    callproc       &msysp.m$print_r64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #15269     
#15259: 
    setargs                   2 0
    push           "M"        u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_libmcl.strvalue.a u64 
    pushptr                   r64 
    callfn         &msysp.strreal u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
    jump           #15269     
#15260: 
    setargs                   2 0
    push           "\""       u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
    setargs                   2 0
    push           pc_libmcl.strvalue.a u64 
    pushptr                   u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
    setargs                   2 0
    push           "\""       u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
    jump           #15269     
#15261: 
    setargs                   2 0
    push           pc_libmcl.strvalue.a u64 
    pushptr                   u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
    jump           #15269     
#15262: 
    setargs                   2 0
    push           "XXX"      u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
    jump           #15269     
#15263: 
    setargs                   2 0
    push           "L"        u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_libmcl.strvalue.a u64 
    pushptr                   i64 
    callfn         &msysp.strint u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
    jump           #15265     
    jump           #15269     
#15264: 
#15269: 
    push           &pc_libmcl.strvalue.str 
    setret                    u64 
    jump           #15270     
#15270: 
    retfn                     u64 
End


Proc pc_libmcl.writegsfile:
    param          pc_libmcl.writegsfile.filename u64 
    param          pc_libmcl.writegsfile.d u64 
    local          pc_libmcl.writegsfile.f u64 
    procentry                 
    setargs                   2 0
    push           "w"        u64 
    push           pc_libmcl.writegsfile.filename u64 
    callfn         &fopen     u64 
    pop            pc_libmcl.writegsfile.f u64 
    setargs                   2 0
    push           pc_libmcl.writegsfile.f u64 
    push           pc_libmcl.writegsfile.d u64 
    callproc       &mlibp.gs_println 
    setargs                   1 0
    push           pc_libmcl.writegsfile.f u64 
    callproc       &fclose    
#15272: 
    retproc                   
End


Proc pc_libmcl.ismemaddr: i64
    param          pc_libmcl.ismemaddr.n i64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           pc_libmcl.ismemaddr.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           11         i64 
    jumpne         #15274     i64 
    push           1          i64 
    setret                    i64 
    jump           #15275     
#15274: 
    push           0          i64 
    setret                    i64 
    jump           #15275     
#15275: 
    retfn                     i64 
End


Proc pc_libmcl.isimm64: i64
    param          pc_libmcl.isimm64.n i64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           pc_libmcl.isimm64.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #15277     i64 
    push           1          i64 
    setret                    i64 
    jump           #15278     
#15277: 
    push           0          i64 
    setret                    i64 
    jump           #15278     
#15278: 
    retfn                     i64 
End


Proc pc_libmcl.isregvaropnd: i64
    param          pc_libmcl.isregvaropnd.n i64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           pc_libmcl.isregvaropnd.n i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           7          i64 
    jumpne         #15280     i64 
    push           1          i64 
    setret                    i64 
    jump           #15281     
#15280: 
    push           0          i64 
    setret                    i64 
    jump           #15281     
#15281: 
    retfn                     i64 
End


Proc pc_libmcl.copyblock:
    param          pc_libmcl.copyblock.ax u64 
    param          pc_libmcl.copyblock.bx u64 
    param          pc_libmcl.copyblock.n i64 
    local          pc_libmcl.copyblock.rx u64 
    local          pc_libmcl.copyblock.rcount u64 
    local          pc_libmcl.copyblock.nwords i64 
    local          pc_libmcl.copyblock.lab i64 
    local          pc_libmcl.copyblock.oddbytes i64 
    local          pc_libmcl.copyblock.offset i64 
    local          pc_libmcl.copyblock.workreg i64 
    local          pc_libmcl.copyblock.countreg i64 
    local          pc_libmcl.copyblock.av_1 i64 
    procentry                 
    push           pc_libmcl.copyblock.n i64 
    push           8          i64 
    irem                      i64 
    pop            pc_libmcl.copyblock.oddbytes i64 
    push           &pc_libmcl.copyblock.n 
    push           pc_libmcl.copyblock.oddbytes i64 
    subto                     i64 
    push           pc_libmcl.copyblock.n i64 
    push           8          i64 
    idiv                      i64 
    pop            pc_libmcl.copyblock.nwords i64 
    setargs                   2 0
    push           8          i64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    store          pc_libmcl.copyblock.workreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_libmcl.copyblock.rx u64 
    push           0          i64 
    pop            pc_libmcl.copyblock.offset i64 
    push           1          i64 
    push           pc_libmcl.copyblock.nwords i64 
    jumpgt         #15283     i64 
    push           pc_libmcl.copyblock.nwords i64 
    push           4          i64 
    jumpgt         #15283     i64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.copyblock.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    pop            pc_libmcl.copyblock.ax u64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.copyblock.bx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    pop            pc_libmcl.copyblock.bx u64 
#15284: 
    push           pc_libmcl.copyblock.nwords i64 
    pop            pc_libmcl.copyblock.av_1 i64 
    push           pc_libmcl.copyblock.av_1 i64 
    push           0          i64 
    jumple         #15285     i64 
#15286: 
    setargs                   3 0
    setargs                   3 0
    push           0          i64 
    push           pc_libmcl.copyblock.offset i64 
    push           pc_libmcl.copyblock.bx u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           pc_libmcl.copyblock.rx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_libmcl.copyblock.rx u64 
    setargs                   3 0
    push           0          i64 
    push           pc_libmcl.copyblock.offset i64 
    push           pc_libmcl.copyblock.ax u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_libmcl.copyblock.offset 
    push           8          i64 
    addto                     i64 
#15287: 
    to             #15286     
    opnd           pc_libmcl.copyblock.av_1 
#15285: 
    jump           #15288     
#15283: 
    push           pc_libmcl.copyblock.nwords i64 
    push           0          i64 
    jumpeq         #15289     i64 
    setargs                   2 0
    push           8          i64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    store          pc_libmcl.copyblock.countreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_libmcl.copyblock.rcount u64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pc_libmcl.copyblock.lab i64 
    setargs                   1 0
    push           pc_libmcl.copyblock.ax u64 
    callfn         &pc_libmcl.makesimpleaddr u64 
    pop            pc_libmcl.copyblock.ax u64 
    setargs                   1 0
    push           pc_libmcl.copyblock.bx u64 
    callfn         &pc_libmcl.makesimpleaddr u64 
    pop            pc_libmcl.copyblock.bx u64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.copyblock.nwords i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_libmcl.copyblock.rcount u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.copyblock.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_libmcl.copyblock.bx u64 
    push           pc_libmcl.copyblock.rx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_libmcl.copyblock.rx u64 
    push           pc_libmcl.copyblock.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           8          i64 
    callfn         &pc_libmcl.mgenint u64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.copyblock.ax u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           8          i64 
    callfn         &pc_libmcl.mgenint u64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.copyblock.bx u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           pc_libmcl.copyblock.rcount u64 
    push           54         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.copyblock.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           5          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    push           0          i64 
    pop            pc_libmcl.copyblock.offset i64 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_libmcl.copyblock.countreg i64 
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_libmcl.copyblock.countreg i64 
    popptroff                 u8 1 -1
#15289: 
#15288: 
    push           pc_libmcl.copyblock.oddbytes i64 
    jumpfalse      #15290     i64 
    push           pc_libmcl.copyblock.oddbytes i64 
    pop            pc_libmcl.copyblock.n i64 
    push           pc_libmcl.copyblock.n i64 
    push           4          i64 
    jumplt         #15291     i64 
    setargs                   2 0
    push           4          i64 
    push           pc_libmcl.copyblock.rx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    pop            pc_libmcl.copyblock.rx u64 
    setargs                   3 0
    setargs                   3 0
    push           4          i64 
    push           pc_libmcl.copyblock.offset i64 
    push           pc_libmcl.copyblock.bx u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           pc_libmcl.copyblock.rx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_libmcl.copyblock.rx u64 
    setargs                   3 0
    push           4          i64 
    push           pc_libmcl.copyblock.offset i64 
    push           pc_libmcl.copyblock.ax u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_libmcl.copyblock.n 
    push           4          i64 
    subto                     i64 
    push           &pc_libmcl.copyblock.offset 
    push           4          i64 
    addto                     i64 
#15291: 
    push           pc_libmcl.copyblock.n i64 
    push           2          i64 
    jumplt         #15292     i64 
    setargs                   2 0
    push           2          i64 
    push           pc_libmcl.copyblock.rx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    pop            pc_libmcl.copyblock.rx u64 
    setargs                   3 0
    setargs                   3 0
    push           2          i64 
    push           pc_libmcl.copyblock.offset i64 
    push           pc_libmcl.copyblock.bx u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           pc_libmcl.copyblock.rx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_libmcl.copyblock.rx u64 
    setargs                   3 0
    push           2          i64 
    push           pc_libmcl.copyblock.offset i64 
    push           pc_libmcl.copyblock.ax u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_libmcl.copyblock.n 
    push           2          i64 
    subto                     i64 
    push           &pc_libmcl.copyblock.offset 
    push           2          i64 
    addto                     i64 
#15292: 
    push           pc_libmcl.copyblock.n i64 
    push           1          i64 
    jumpne         #15293     i64 
    setargs                   2 0
    push           1          i64 
    push           pc_libmcl.copyblock.rx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    pop            pc_libmcl.copyblock.rx u64 
    setargs                   3 0
    setargs                   3 0
    push           1          i64 
    push           pc_libmcl.copyblock.offset i64 
    push           pc_libmcl.copyblock.bx u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           pc_libmcl.copyblock.rx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_libmcl.copyblock.rx u64 
    setargs                   3 0
    push           1          i64 
    push           pc_libmcl.copyblock.offset i64 
    push           pc_libmcl.copyblock.ax u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
#15293: 
#15290: 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_libmcl.copyblock.workreg i64 
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_libmcl.copyblock.workreg i64 
    popptroff                 u8 1 -1
#15294: 
    retproc                   
End


Proc pc_libmcl.makesimpleaddr: u64
    param          pc_libmcl.makesimpleaddr.ax u64 
    local          pc_libmcl.makesimpleaddr.bx u64 
    local          pc_libmcl.makesimpleaddr.newreg i64 
    procentry                 
    push           pc_libmcl.makesimpleaddr.ax u64 
    push           10         
    pushptroff                u8 1 0
    jumpfalse      #15296     i64 
    push           pc_libmcl.makesimpleaddr.ax u64 
    push           11         
    pushptroff                u8 1 0
    jumptrue       #15296     i64 
    push           pc_libmcl.makesimpleaddr.ax u64 
    setret                    u64 
    jump           #15297     
#15296: 
    startmult                 
    push           pc_libmcl.makesimpleaddr.ax u64 
    push           10         
    pushptroff                u8 1 0
    jumpfalse      #15298     i64 
    push           pc_libmcl.makesimpleaddr.ax u64 
    push           10         
    pushptroff                u8 1 0
    resetmult                 
    jump           #15299     
#15298: 
    startmult                 
    push           pc_libmcl.makesimpleaddr.ax u64 
    push           11         
    pushptroff                u8 1 0
    jumpfalse      #15300     i64 
    push           pc_libmcl.makesimpleaddr.ax u64 
    push           11         
    pushptroff                u8 1 0
    resetmult                 
    jump           #15301     
#15300: 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    endmult                   
#15301: 
    endmult                   
#15299: 
    pop            pc_libmcl.makesimpleaddr.newreg i64 
    setargs                   3 0
    push           0          i64 
    push           8          i64 
    push           pc_libmcl.makesimpleaddr.newreg i64 
    callfn         &pc_libmcl.mgenireg u64 
    pop            pc_libmcl.makesimpleaddr.bx u64 
    setargs                   3 0
    push           pc_libmcl.makesimpleaddr.ax u64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.makesimpleaddr.newreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           15         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_libmcl.makesimpleaddr.bx u64 
    setret                    u64 
    jump           #15297     
#15297: 
    retfn                     u64 
End


Proc pc_libmcl.ispoweroftwo: i64
    param          pc_libmcl.ispoweroftwo.x i64 
    local          pc_libmcl.ispoweroftwo.a i64 
    local          pc_libmcl.ispoweroftwo.n i64 
    local          pc_libmcl.ispoweroftwo.av_1 i64 
    procentry                 
    push           1          i64 
    pop            pc_libmcl.ispoweroftwo.a i64 
    push           0          i64 
    pop            pc_libmcl.ispoweroftwo.n i64 
#15303: 
    push           60         i64 
    pop            pc_libmcl.ispoweroftwo.av_1 i64 
#15304: 
    push           &pc_libmcl.ispoweroftwo.n 
    incr                      i64 1
    push           pc_libmcl.ispoweroftwo.a i64 
    push           1          i64 
    shl                       i64 
    pop            pc_libmcl.ispoweroftwo.a i64 
    push           pc_libmcl.ispoweroftwo.a i64 
    push           pc_libmcl.ispoweroftwo.x i64 
    jumpne         #15305     i64 
    push           pc_libmcl.ispoweroftwo.n i64 
    setret                    i64 
    jump           #15306     
#15305: 
#15307: 
    to             #15304     
    opnd           pc_libmcl.ispoweroftwo.av_1 
#15308: 
    push           0          i64 
    setret                    i64 
    jump           #15306     
#15306: 
    retfn                     i64 
End


Proc pc_libmcl.getrtsproclabel: i64
    param          pc_libmcl.getrtsproclabel.fnindex i64 
    procentry                 
    push           &pci_mcl.rtsproclabels 
    push           pc_libmcl.getrtsproclabel.fnindex i64 
    pushptroff                i64 8 -8
    push           0          i64 
    jumpne         #15310     i64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    push           &pci_mcl.rtsproclabels 
    push           pc_libmcl.getrtsproclabel.fnindex i64 
    popptroff                 i64 8 -8
    push           pci_mcl.mlabelno i64 
    setret                    i64 
    jump           #15311     
#15310: 
    push           &pci_mcl.rtsproclabels 
    push           pc_libmcl.getrtsproclabel.fnindex i64 
    pushptroff                i64 8 -8
    setret                    i64 
    jump           #15311     
#15311: 
    retfn                     i64 
End


Proc pc_libmcl.genrtsproctable:
    local          pc_libmcl.genrtsproctable.str block:256 
    local          pc_libmcl.genrtsproctable.proclab i64 
    local          pc_libmcl.genrtsproctable.d u64 
    local          pc_libmcl.genrtsproctable.av_1 i64 
    local          pc_libmcl.genrtsproctable.i i64 
    procentry                 
    setargs                   2 0
    push           16         i64 
    push           67         i64 
    callproc       &pc_libmcl.setsegment 
#15313: 
    push           1          i64 
    pop            pc_libmcl.genrtsproctable.i i64 
    push           6          i64 
    pop            pc_libmcl.genrtsproctable.av_1 i64 
    push           pc_libmcl.genrtsproctable.av_1 i64 
    push           1          i64 
    jumplt         #15314     i64 
#15315: 
    push           &pci_mcl.rtsproclabels 
    push           pc_libmcl.genrtsproctable.i i64 
    pushptroff                i64 8 -8
    jumpfalse      #15316     i64 
    setargs                   1 0
    push           &pc_libmcl.genrtsproctable.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "Generating code for" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pc_tables.rtsnames 
    push           pc_libmcl.genrtsproctable.i i64 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           &pc_libmcl.genrtsproctable.str 
    callproc       &pc_libmcl.mgencomment 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           &pci_mcl.rtsproclabels 
    push           pc_libmcl.genrtsproctable.i i64 
    pushptroff                i64 8 -8
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_decls.rtsproctable 
    push           pc_libmcl.genrtsproctable.i i64 
    pushptroff                u64 8 -8
    jumptrue       #15317     u64 
    push           pc_libmcl.genrtsproctable.i i64 
    push           4          i64 
    casejumpeq     #15318     i64 0
    push           5          i64 
    casejumpeq     #15319     i64 0
    popstack                  i64 
    jump           #15320     
#15318: 
    setargs                   0 0
    callproc       &pc_libmcl.genrts_mul_i128 
    jump           #15321     
#15319: 
    setargs                   0 0
    callproc       &pc_libmcl.genrts_div_i128 
    jump           #15321     
#15320: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pc_tables.rtsnames 
    push           pc_libmcl.genrtsproctable.i i64 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           ""         u64 
    push           "RTS fn not defined" u64 
    callproc       &pc_libmcl.merror 
#15321: 
    setargs                   1 0
    push           ""         u64 
    callproc       &pc_libmcl.mgencomment 
    jump           #15322     
#15317: 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           &pc_decls.rtsproctable 
    push           pc_libmcl.genrtsproctable.i i64 
    pushptroff                u64 8 -8
    callfn         &pc_libmcl.mgenmemaddr u64 
    push           26         i64 
    callproc       &pc_libmcl.genmc 
#15322: 
#15316: 
#15323: 
    forup          #15315     i64 1
    opnd           pc_libmcl.genrtsproctable.i 
    opnd           pc_libmcl.genrtsproctable.av_1 
#15314: 
#15324: 
    retproc                   
End


Proc pc_libmcl.genrts_mul_i128:
    procentry                 
    setargs                   1 0
    push           "<code for mul-i128>" u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   0 0
    callproc       &pc_libmcl.genrtsentry 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           7          i64 
    pushptroff                u64 8 -16
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           8          i64 
    pushptroff                u64 8 -16
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           10         i64 
    pushptroff                u64 8 -16
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           12         i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           10         i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           11         i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           1          i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           14         i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           1          i64 
    pushptroff                u64 8 -16
    push           35         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           1          i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           7          i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           10         i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           1          i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           13         i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           1          i64 
    pushptroff                u64 8 -16
    push           35         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           1          i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           8          i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           11         i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           1          i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           13         i64 
    pushptroff                u64 8 -16
    push           33         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           7          i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           12         i64 
    pushptroff                u64 8 -16
    push           29         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           8          i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           12         i64 
    pushptroff                u64 8 -16
    push           29         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           12         i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           2          i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           10         i64 
    pushptroff                u64 8 -16
    push           14         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           8          i64 
    pushptroff                u64 8 -16
    push           14         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           7          i64 
    pushptroff                u64 8 -16
    push           14         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_libmcl.genrtsexit 
#15326: 
    retproc                   
End


Proc pc_libmcl.genrts_div_i128:
    procentry                 
    setargs                   1 0
    push           "<code for div-i128>" u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   0 0
    callproc       &pc_libmcl.genrtsentry 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           4          i64 
    pushptroff                u64 8 -16
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           12         i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           4          i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           4          i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           1          i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           12         i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           12         i64 
    pushptroff                u64 8 -16
    push           41         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           13         i64 
    pushptroff                u64 8 -16
    push           38         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           1          i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           2          i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           13         i64 
    pushptroff                u64 8 -16
    push           34         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           1          i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           4          i64 
    pushptroff                u64 8 -16
    push           30         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           11         i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           1          i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           4          i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           12         i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           13         i64 
    pushptroff                u64 8 -16
    push           38         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           4          i64 
    pushptroff                u64 8 -16
    push           14         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_libmcl.genrtsexit 
#15328: 
    retproc                   
End


Proc pc_libmcl.genrtsentry:
    procentry                 
    setargs                   3 0
    push           0          u64 
    push           pci_mcl.dframeopnd u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pci_mcl.dstackopnd u64 
    push           pci_mcl.dframeopnd u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           32         i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pci_mcl.dstackopnd u64 
    push           30         i64 
    callproc       &pc_libmcl.genmc 
#15330: 
    retproc                   
End


Proc pc_libmcl.genrtsexit:
    procentry                 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           32         i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pci_mcl.dstackopnd u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           pci_mcl.dframeopnd u64 
    push           14         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           0          u64 
    push           23         i64 
    callproc       &pc_libmcl.genmc 
#15332: 
    retproc                   
End


Proc pc_libmcl.clearblock:
    param          pc_libmcl.clearblock.ax u64 
    param          pc_libmcl.clearblock.n i64 
    local          pc_libmcl.clearblock.rx u64 
    local          pc_libmcl.clearblock.rcount u64 
    local          pc_libmcl.clearblock.nwords i64 
    local          pc_libmcl.clearblock.lab i64 
    local          pc_libmcl.clearblock.oddbytes i64 
    local          pc_libmcl.clearblock.offset i64 
    local          pc_libmcl.clearblock.workreg i64 
    local          pc_libmcl.clearblock.countreg i64 
    local          pc_libmcl.clearblock.av_1 i64 
    local          pc_libmcl.clearblock.i i64 
    procentry                 
    push           pc_libmcl.clearblock.n i64 
    push           8          i64 
    irem                      i64 
    pop            pc_libmcl.clearblock.oddbytes i64 
    push           &pc_libmcl.clearblock.n 
    push           pc_libmcl.clearblock.oddbytes i64 
    subto                     i64 
    push           pc_libmcl.clearblock.n i64 
    push           8          i64 
    idiv                      i64 
    pop            pc_libmcl.clearblock.nwords i64 
    setargs                   2 0
    push           8          i64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    store          pc_libmcl.clearblock.workreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_libmcl.clearblock.rx u64 
    setargs                   3 0
    push           pc_libmcl.clearblock.rx u64 
    push           pc_libmcl.clearblock.rx u64 
    push           41         i64 
    callproc       &pc_libmcl.genmc 
    push           0          i64 
    pop            pc_libmcl.clearblock.offset i64 
    push           1          i64 
    push           pc_libmcl.clearblock.nwords i64 
    jumpgt         #15334     i64 
    push           pc_libmcl.clearblock.nwords i64 
    push           8          i64 
    jumpgt         #15334     i64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.clearblock.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    pop            pc_libmcl.clearblock.ax u64 
#15335: 
    push           pc_libmcl.clearblock.nwords i64 
    pop            pc_libmcl.clearblock.av_1 i64 
    push           pc_libmcl.clearblock.av_1 i64 
    push           0          i64 
    jumple         #15336     i64 
#15337: 
    setargs                   3 0
    push           pc_libmcl.clearblock.rx u64 
    setargs                   3 0
    push           0          i64 
    push           pc_libmcl.clearblock.offset i64 
    push           pc_libmcl.clearblock.ax u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_libmcl.clearblock.offset 
    push           8          i64 
    addto                     i64 
#15338: 
    to             #15337     
    opnd           pc_libmcl.clearblock.av_1 
#15336: 
    jump           #15339     
#15334: 
    push           pc_libmcl.clearblock.nwords i64 
    push           0          i64 
    jumpeq         #15340     i64 
    push           pc_libmcl.clearblock.nwords i64 
    push           3          i64 
    iand                      i64 
    jumpfalse      #15341     i64 
    setargs                   2 0
    push           8          i64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    store          pc_libmcl.clearblock.countreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_libmcl.clearblock.rcount u64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pc_libmcl.clearblock.lab i64 
    setargs                   1 0
    push           pc_libmcl.clearblock.ax u64 
    callfn         &pc_libmcl.makesimpleaddr u64 
    pop            pc_libmcl.clearblock.ax u64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.clearblock.nwords i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_libmcl.clearblock.rcount u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.clearblock.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_libmcl.clearblock.rx u64 
    push           pc_libmcl.clearblock.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           8          i64 
    callfn         &pc_libmcl.mgenint u64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.clearblock.ax u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           pc_libmcl.clearblock.rcount u64 
    push           54         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.clearblock.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           5          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    push           0          i64 
    pop            pc_libmcl.clearblock.offset i64 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_libmcl.clearblock.countreg i64 
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_libmcl.clearblock.countreg i64 
    popptroff                 u8 1 -1
    jump           #15342     
#15341: 
    setargs                   2 0
    push           8          i64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    store          pc_libmcl.clearblock.countreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_libmcl.clearblock.rcount u64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pc_libmcl.clearblock.lab i64 
    setargs                   1 0
    push           pc_libmcl.clearblock.ax u64 
    callfn         &pc_libmcl.makesimpleaddr u64 
    pop            pc_libmcl.clearblock.ax u64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.clearblock.nwords i64 
    push           4          i64 
    idiv                      i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_libmcl.clearblock.rcount u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.clearblock.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
#15343: 
    push           1          i64 
    pop            pc_libmcl.clearblock.i i64 
#15344: 
    setargs                   3 0
    push           pc_libmcl.clearblock.rx u64 
    setargs                   3 0
    push           0          i64 
    push           pc_libmcl.clearblock.offset i64 
    push           pc_libmcl.clearblock.ax u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_libmcl.clearblock.offset 
    push           8          i64 
    addto                     i64 
#15345: 
    forup          #15344     i64 1
    opnd           pc_libmcl.clearblock.i 
    opnd           4          
#15346: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           32         i64 
    callfn         &pc_libmcl.mgenint u64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.clearblock.ax u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           pc_libmcl.clearblock.rcount u64 
    push           54         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.clearblock.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           5          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    push           0          i64 
    pop            pc_libmcl.clearblock.offset i64 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_libmcl.clearblock.countreg i64 
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_libmcl.clearblock.countreg i64 
    popptroff                 u8 1 -1
#15342: 
#15340: 
#15339: 
    push           pc_libmcl.clearblock.oddbytes i64 
    jumpfalse      #15347     i64 
    push           pc_libmcl.clearblock.oddbytes i64 
    pop            pc_libmcl.clearblock.n i64 
    push           pc_libmcl.clearblock.n i64 
    push           4          i64 
    jumplt         #15348     i64 
    setargs                   2 0
    push           4          i64 
    push           pc_libmcl.clearblock.rx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    pop            pc_libmcl.clearblock.rx u64 
    setargs                   3 0
    push           pc_libmcl.clearblock.rx u64 
    setargs                   3 0
    push           4          i64 
    push           pc_libmcl.clearblock.offset i64 
    push           pc_libmcl.clearblock.ax u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_libmcl.clearblock.n 
    push           4          i64 
    subto                     i64 
    push           &pc_libmcl.clearblock.offset 
    push           4          i64 
    addto                     i64 
#15348: 
    push           pc_libmcl.clearblock.n i64 
    push           2          i64 
    jumplt         #15349     i64 
    setargs                   2 0
    push           2          i64 
    push           pc_libmcl.clearblock.rx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    pop            pc_libmcl.clearblock.rx u64 
    setargs                   3 0
    push           pc_libmcl.clearblock.rx u64 
    setargs                   3 0
    push           2          i64 
    push           pc_libmcl.clearblock.offset i64 
    push           pc_libmcl.clearblock.ax u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_libmcl.clearblock.n 
    push           2          i64 
    subto                     i64 
    push           &pc_libmcl.clearblock.offset 
    push           2          i64 
    addto                     i64 
#15349: 
    push           pc_libmcl.clearblock.n i64 
    push           1          i64 
    jumpne         #15350     i64 
    setargs                   2 0
    push           1          i64 
    push           pc_libmcl.clearblock.rx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    pop            pc_libmcl.clearblock.rx u64 
    setargs                   3 0
    push           pc_libmcl.clearblock.rx u64 
    setargs                   3 0
    push           1          i64 
    push           pc_libmcl.clearblock.offset i64 
    push           pc_libmcl.clearblock.ax u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
#15350: 
#15347: 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_libmcl.clearblock.workreg i64 
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_libmcl.clearblock.workreg i64 
    popptroff                 u8 1 -1
#15351: 
    retproc                   
End


Proc pc_libmcl.genfunctiontable:
    local          pc_libmcl.genfunctiontable.str block:256 
    local          pc_libmcl.genfunctiontable.s u64 
    local          pc_libmcl.genfunctiontable.t u64 
    local          pc_libmcl.genfunctiontable.currpcl u64 
    local          pc_libmcl.genfunctiontable.firststringlab i64 
    local          pc_libmcl.genfunctiontable.nextlab i64 
    local          pc_libmcl.genfunctiontable.nprocs i64 
    procentry                 
    push           pci_mcl.lab_funcaddrtable i64 
    push           0          i64 
    jumpne         #15353     i64 
    jump           #15354     
#15353: 
    setargs                   1 0
    push           "Function Table" u64 
    callproc       &pc_libmcl.mgencomment 
    push           0          i64 
    pop            pc_libmcl.genfunctiontable.nprocs i64 
    setargs                   2 0
    push           16         i64 
    push           67         i64 
    callproc       &pc_libmcl.setsegment 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.lab_funcaddrtable i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    push           pc_libpcl.pcstart u64 
    pop            pc_libmcl.genfunctiontable.currpcl u64 
#15355: 
    push           pc_libmcl.genfunctiontable.currpcl u64 
    push           1          
    pushptroff                u8 1 0
    push           8          i64 
    setjumpeq      #15356     i64 
    push           16         i64 
    setjumpne      #15357     i64 
#15356: 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.genfunctiontable.currpcl u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmemaddr u64 
    push           117        i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_libmcl.genfunctiontable.nprocs 
    incr                      i64 1
#15357: 
    push           &pc_libmcl.genfunctiontable.currpcl 
    incr                      u64 32
#15358: 
    push           pc_libmcl.genfunctiontable.currpcl u64 
    push           1          
    pushptroff                u8 1 0
    push           11         i64 
    jumpne         #15355     i64 
#15359: 
    push           0          i64 
    pop            pc_libmcl.genfunctiontable.firststringlab i64 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.lab_funcnametable i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    push           pc_libpcl.pcstart u64 
    pop            pc_libmcl.genfunctiontable.currpcl u64 
#15360: 
    push           pc_libmcl.genfunctiontable.currpcl u64 
    push           1          
    pushptroff                u8 1 0
    push           8          i64 
    setjumpeq      #15361     i64 
    push           16         i64 
    setjumpne      #15362     i64 
#15361: 
    push           pc_libmcl.genfunctiontable.firststringlab i64 
    push           0          i64 
    jumpne         #15363     i64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    store          pc_libmcl.genfunctiontable.nextlab i64 
    pop            pc_libmcl.genfunctiontable.firststringlab i64 
    jump           #15364     
#15363: 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pc_libmcl.genfunctiontable.nextlab i64 
#15364: 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.genfunctiontable.nextlab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           117        i64 
    callproc       &pc_libmcl.genmc 
#15362: 
    push           &pc_libmcl.genfunctiontable.currpcl 
    incr                      u64 32
#15365: 
    push           pc_libmcl.genfunctiontable.currpcl u64 
    push           1          
    pushptroff                u8 1 0
    push           11         i64 
    jumpne         #15360     i64 
#15366: 
    push           pc_libmcl.genfunctiontable.firststringlab i64 
    pop            pc_libmcl.genfunctiontable.nextlab i64 
    push           pc_libpcl.pcstart u64 
    pop            pc_libmcl.genfunctiontable.currpcl u64 
#15367: 
    push           pc_libmcl.genfunctiontable.currpcl u64 
    push           1          
    pushptroff                u8 1 0
    push           8          i64 
    setjumpeq      #15368     i64 
    push           16         i64 
    setjumpne      #15369     i64 
#15368: 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.genfunctiontable.nextlab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    push           pc_libmcl.genfunctiontable.currpcl u64 
    push           8          
    pushptroff                u64 1 0
    pushptr                   u64 
    pop            pc_libmcl.genfunctiontable.s u64 
    push           pc_libmcl.genfunctiontable.s u64 
    pop            pc_libmcl.genfunctiontable.t u64 
    jump           #15370     
#15371: 
    push           pc_libmcl.genfunctiontable.s u64 
    pushptr                   u8 
    push           46         u64 
    jumpne         #15372     u64 
    push           pc_libmcl.genfunctiontable.s u64 
    push           1          i64 
    addrefoff                 u64 1 0
    pop            pc_libmcl.genfunctiontable.t u64 
#15372: 
    push           &pc_libmcl.genfunctiontable.s 
    incr                      u64 1
#15370: 
    push           pc_libmcl.genfunctiontable.s u64 
    pushptr                   u8 
    jumptrue       #15371     u64 
#15373: 
    setargs                   2 0
    push           1          i64 
    push           pc_libmcl.genfunctiontable.t u64 
    callproc       &pc_libmcl.genstring 
    push           &pc_libmcl.genfunctiontable.nextlab 
    incr                      i64 1
#15369: 
    push           &pc_libmcl.genfunctiontable.currpcl 
    incr                      u64 32
#15374: 
    push           pc_libmcl.genfunctiontable.currpcl u64 
    push           1          
    pushptroff                u8 1 0
    push           11         i64 
    jumpne         #15367     i64 
#15375: 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.lab_funcnprocs i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.genfunctiontable.nprocs i64 
    callfn         &pc_libmcl.mgenint u64 
    push           117        i64 
    callproc       &pc_libmcl.genmc 
#15354: 
    retproc                   
End


Proc pc_libmcl.mgenextname: u64
    param          pc_libmcl.mgenextname.s u64 
    local          pc_libmcl.mgenextname.str block:64 
    local          pc_libmcl.mgenextname.d u64 
    procentry                 
    setargs                   2 0
    push           pc_libmcl.mgenextname.s u64 
    push           &pc_libmcl.mgenextname.str 
    callproc       &strcpy    
    push           0          u64 
    push           &pc_libmcl.mgenextname.str 
    setargs                   1 0
    push           pc_libmcl.mgenextname.s u64 
    callfn         &strlen    i64 
    popptroff                 u8 1 -1
    setargs                   1 0
    push           64         i64 
    callfn         &mlibp.pcm_allocz u64 
    pop            pc_libmcl.mgenextname.d u64 
    setargs                   1 0
    push           &pc_libmcl.mgenextname.str 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           pc_libmcl.mgenextname.d u64 
    push           0          
    popptroff                 u64 1 0
    push           1          u64 
    push           pc_libmcl.mgenextname.d u64 
    push           46         
    addrefoff                 u64 1 0
    push           1          i64 
    popdotindex               u16 
    setargs                   1 0
    push           pc_libmcl.mgenextname.d u64 
    callfn         &pc_libmcl.mgenmemaddr u64 
    setret                    u64 
    jump           #15377     
#15377: 
    retfn                     u64 
End


Proc pc_libmcl.pcl_setasmhandler::
    param          pc_libmcl.pcl_setasmhandler.fnaddr u64 
    procentry                 
    push           pc_libmcl.pcl_setasmhandler.fnaddr u64 
    pop            pci_mcl.hostasmhandler u64 
#15379: 
    retproc                   
End


Proc pc_libmcl.mgeninfo:
    param          pc_libmcl.mgeninfo.s u64 
    param          pc_libmcl.mgeninfo.value i64 
    local          pc_libmcl.mgeninfo.str block:256 
    procentry                 
    setargs                   1 0
    push           &pc_libmcl.mgeninfo.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "# #"      u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           pc_libmcl.mgeninfo.s u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libmcl.mgeninfo.value i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           &pc_libmcl.mgeninfo.str 
    push           3          i64 
    callproc       &pc_libmcl.genmc_str 
#15381: 
    retproc                   
End


Proc pc_libmcl.mgeninfos:
    param          pc_libmcl.mgeninfos.s u64 
    param          pc_libmcl.mgeninfos.svalue u64 
    local          pc_libmcl.mgeninfos.str block:256 
    procentry                 
    setargs                   1 0
    push           &pc_libmcl.mgeninfos.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "# #"      u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           pc_libmcl.mgeninfos.s u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libmcl.mgeninfos.svalue u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           &pc_libmcl.mgeninfos.str 
    push           3          i64 
    callproc       &pc_libmcl.genmc_str 
#15383: 
    retproc                   
End


Proc pc_stackmcl.resetopnds1:
    local          pc_stackmcl.resetopnds1.av_1 i64 
    local          pc_stackmcl.resetopnds1.i i64 
    procentry                 
    push           pci_mcl.mstackdepth i64 
    jumpfalse      #15385     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "1:HW stack not empty" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.procdef u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "MSTACKDEPTH=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.mstackdepth i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           0          i64 
    pop            pci_mcl.mstackdepth i64 
#15385: 
    push           pci_mcl.noperands i64 
    jumpfalse      #15386     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "1:Reset:pcl stack not empty:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.procdef u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "NOPERANDS=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.noperands i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           0          i64 
    pop            pci_mcl.noperands i64 
#15386: 
#15387: 
    push           1          i64 
    pop            pc_stackmcl.resetopnds1.i i64 
    push           16         i64 
    pop            pc_stackmcl.resetopnds1.av_1 i64 
    push           pc_stackmcl.resetopnds1.av_1 i64 
    push           1          i64 
    jumplt         #15388     i64 
#15389: 
    push           &pci_mcl.regset 
    push           pc_stackmcl.resetopnds1.i i64 
    pushptroff                u8 1 -1
    jumptrue       #15390     i64 
    push           &pci_mcl.xregset 
    push           pc_stackmcl.resetopnds1.i i64 
    pushptroff                u8 1 -1
    jumpfalse      #15391     i64 
#15390: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Reset: reg flag set" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.procdef u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #15388     
#15391: 
#15392: 
    forup          #15389     i64 1
    opnd           pc_stackmcl.resetopnds1.i 
    opnd           pc_stackmcl.resetopnds1.av_1 
#15388: 
    push           pci_mcl.inf_proccalls i64 
    push           0          i64 
    jumpne         #15393     i64 
    push           1          i64 
    pop            pci_mcl.inf_leafproc i64 
#15393: 
    push           &pci_mcl.regset 
    clear                     block:16 
    push           &pci_mcl.xregset 
    clear                     block:16 
    push           &pci_mcl.isregvar 
    clear                     block:16 
    push           &pci_mcl.isxregvar 
    clear                     block:16 
    push           pc_decls.optimflag i64 
    jumptrue       #15394     i64 
    push           0          i64 
    pop            pci_mcl.inf_proccalls i64 
    push           0          i64 
    pop            pci_mcl.inf_maxargs i64 
    push           0          i64 
    pop            pci_mcl.inf_proclocals i64 
    push           0          i64 
    pop            pci_mcl.inf_procxlocals i64 
    push           0          i64 
    pop            pci_mcl.inf_leafproc i64 
    push           0          i64 
    store          pci_mcl.inf_highxreg i64 
    pop            pci_mcl.inf_highreg i64 
    push           0          i64 
    pop            pci_mcl.inf_assem i64 
    jump           #15395     
#15394: 
    push           0          i64 
    pop            pci_mcl.inf_proccalls i64 
    push           0          i64 
    pop            pci_mcl.inf_maxargs i64 
    push           0          i64 
    pop            pci_mcl.inf_proclocals i64 
    push           0          i64 
    pop            pci_mcl.inf_procxlocals i64 
#15395: 
#15396: 
    retproc                   
End


Proc pc_stackmcl.resetopnds2:
    local          pc_stackmcl.resetopnds2.av_1 i64 
    local          pc_stackmcl.resetopnds2.i i64 
    procentry                 
    push           pci_mcl.mstackdepth i64 
    jumpfalse      #15398     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "2:HW stack not empty" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.procdef u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "MSTACKDEPTH=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.mstackdepth i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#15398: 
    push           pci_mcl.noperands i64 
    jumpfalse      #15399     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "2:Reset:pcl stack not empty:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.procdef u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "NOPERANDS=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.noperands i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           0          i64 
    pop            pci_mcl.noperands i64 
#15399: 
#15400: 
    push           1          i64 
    pop            pc_stackmcl.resetopnds2.i i64 
    push           16         i64 
    pop            pc_stackmcl.resetopnds2.av_1 i64 
    push           pc_stackmcl.resetopnds2.av_1 i64 
    push           1          i64 
    jumplt         #15401     i64 
#15402: 
    push           &pci_mcl.regset 
    push           pc_stackmcl.resetopnds2.i i64 
    pushptroff                u8 1 -1
    jumptrue       #15403     i64 
    push           &pci_mcl.xregset 
    push           pc_stackmcl.resetopnds2.i i64 
    pushptroff                u8 1 -1
    jumpfalse      #15404     i64 
#15403: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "2:Reset: reg flag set" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pci_mcl.regnames 
    push           pc_stackmcl.resetopnds2.i i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.procdef u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #15401     
#15404: 
#15405: 
    forup          #15402     i64 1
    opnd           pc_stackmcl.resetopnds2.i 
    opnd           pc_stackmcl.resetopnds2.av_1 
#15401: 
    push           0          i64 
    pop            pci_mcl.inf_proccalls i64 
    push           0          i64 
    pop            pci_mcl.inf_maxargs i64 
    push           0          i64 
    pop            pci_mcl.inf_proclocals i64 
    push           0          i64 
    pop            pci_mcl.inf_procxlocals i64 
    push           0          i64 
    pop            pci_mcl.inf_leafproc i64 
    push           0          i64 
    store          pci_mcl.inf_highxreg i64 
    pop            pci_mcl.inf_highreg i64 
    push           0          i64 
    pop            pci_mcl.inf_assem i64 
    push           0          i64 
    store          pci_mcl.inf_r13used i64 
    store          pci_mcl.inf_r11used i64 
    pop            pci_mcl.inf_r10used i64 
    push           &pci_mcl.regset 
    clear                     block:16 
    push           &pci_mcl.xregset 
    clear                     block:16 
    push           &pci_mcl.isregvar 
    clear                     block:16 
    push           &pci_mcl.isxregvar 
    clear                     block:16 
#15406: 
    retproc                   
End


Proc pc_stackmcl.newopnd:
    param          pc_stackmcl.newopnd.fmt i64 
    procentry                 
    push           pci_mcl.noperands i64 
    push           200        i64 
    jumplt         #15408     i64 
    setargs                   2 0
    push           ""         u64 
    push           "PCL stack overflow" u64 
    callproc       &pc_libmcl.merror 
#15408: 
    push           &pci_mcl.noperands 
    incr                      i64 1
    push           pci_mcl.pclstack u64 
    push           0          i64 
    addrefoff                 block:15 15 -15
    pop            pci_mcl.pclstack u64 
    push           pci_mcl.pclstackzero block:15 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    popptroff                 block:15 15 -15
    push           pc_stackmcl.newopnd.fmt i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
    push           &pci_mcl.loccodes 
    push           pc_stackmcl.newopnd.fmt i64 
    pushptroff                u8 1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           1          
    popptroff                 u8 1 0
    push           0          i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    push           &pci_mcl.floatloc 
    push           pc_stackmcl.newopnd.fmt i64 
    pushptroff                u8 1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           3          
    popptroff                 u8 1 0
#15409: 
    retproc                   
End


Proc pc_stackmcl.duploperand:
    local          pc_stackmcl.duploperand.reg i64 
    procentry                 
    push           &pci_mcl.noperands 
    incr                      i64 1
    push           pci_mcl.pclstack u64 
    push           0          i64 
    addrefoff                 block:15 15 -15
    pop            pci_mcl.pclstack u64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    pushptroff                block:15 15 -15
    push           pci_mcl.pclstack u64 
    push           1          i64 
    popptroff                 block:15 15 -15
    push           &pci_mcl.loccodes 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u8 1 0
    push           4          i64 
    casejumpeq     #15411     i64 0
    push           5          i64 
    casejumpeq     #15412     i64 0
    push           7          i64 
    casejumpeq     #15413     i64 0
    push           1          i64 
    casejumpeq     #15414     i64 0
    push           2          i64 
    casejumpeq     #15415     i64 0
    push           3          i64 
    casejumpeq     #15416     i64 0
    popstack                  i64 
    jump           #15417     
#15411: 
    jump           #15418     
#15412: 
    jump           #15418     
#15413: 
    jump           #15418     
#15414: 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    pop            pc_stackmcl.duploperand.reg i64 
    push           pc_stackmcl.duploperand.reg i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.duploperand.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15418     
#15415: 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextxreg i64 
    pop            pc_stackmcl.duploperand.reg i64 
    push           pc_stackmcl.duploperand.reg i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.duploperand.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenxreg u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15418     
#15416: 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    pop            pc_stackmcl.duploperand.reg i64 
    setargs                   3 0
    push           pci_mcl.dstackopnd u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.duploperand.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.duploperand.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15418     
#15417: 
#15418: 
#15419: 
    retproc                   
End


Proc pc_stackmcl.addint:
    param          pc_stackmcl.addint.a i64 
    procentry                 
    setargs                   1 0
    push           7          i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addint.a i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    popptroff                 i64 1 0
#15421: 
    retproc                   
End


Proc pc_stackmcl.addint128:
    param          pc_stackmcl.addint128.p u64 
    procentry                 
    setargs                   1 0
    push           7          i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addint128.p u64 
    push           1          i64 
    pushptroff                i64 8 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    popptroff                 i64 1 0
    setargs                   1 0
    push           7          i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addint128.p u64 
    pushptr                   i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    popptroff                 i64 1 0
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.setwideopnd 
#15423: 
    retproc                   
End


Proc pc_stackmcl.addreal:
    param          pc_stackmcl.addreal.x r64 
    procentry                 
    setargs                   1 0
    push           8          i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addreal.x r64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    popptroff                 r64 1 0
#15425: 
    retproc                   
End


Proc pc_stackmcl.addreal32:
    param          pc_stackmcl.addreal32.x r64 
    procentry                 
    setargs                   1 0
    push           9          i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addreal32.x r64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    popptroff                 r64 1 0
#15427: 
    retproc                   
End


Proc pc_stackmcl.addstring:
    param          pc_stackmcl.addstring.s u64 
    procentry                 
    setargs                   1 0
    push           10         i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addstring.s u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    popptroff                 u64 1 0
#15429: 
    retproc                   
End


Proc pc_stackmcl.addmem:
    param          pc_stackmcl.addmem.p u64 
    local          pc_stackmcl.addmem.ax u64 
    local          pc_stackmcl.addmem.d u64 
    procentry                 
    push           pc_stackmcl.addmem.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_stackmcl.addmem.d u64 
    push           &pc_tables.pcat 
    push           pc_stackmcl.addmem.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #15431     i64 0
    push           3          i64 
    casejumpeq     #15432     i64 0
    push           2          i64 
    casejumpeq     #15433     i64 0
    push           5          i64 
    casejumpeq     #15434     i64 0
    push           6          i64 
    casejumpeq     #15435     i64 0
    push           4          i64 
    casejumpeq     #15436     i64 0
    popstack                  i64 
    jump           #15437     
#15431: 
    push           pc_stackmcl.addmem.d u64 
    push           50         
    pushptroff                u8 1 0
    jumpfalse      #15438     i64 
    setargs                   1 0
    push           18         i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addmem.d u64 
    push           50         
    pushptroff                u8 1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    jump           #15439     
#15438: 
    setargs                   1 0
    push           14         i64 
    callproc       &pc_stackmcl.newopnd 
#15439: 
    jump           #15440     
#15432: 
    push           pc_stackmcl.addmem.d u64 
    push           50         
    pushptroff                u8 1 0
    jumpfalse      #15441     i64 
    setargs                   1 0
    push           19         i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addmem.d u64 
    push           50         
    pushptroff                u8 1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    jump           #15442     
#15441: 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_stackmcl.newopnd 
#15442: 
    jump           #15440     
#15433: 
    setargs                   1 0
    push           16         i64 
    callproc       &pc_stackmcl.newopnd 
    jump           #15440     
#15434: 
    setargs                   1 0
    push           17         i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addmem.d u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    popptroff                 u64 1 0
    push           72         i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           4          
    popptroff                 u8 1 0
    setargs                   1 0
    push           14         i64 
    callproc       &pc_stackmcl.newopnd 
    push           76         i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           4          
    popptroff                 u8 1 0
    jump           #15440     
#15435: 
    setargs                   1 0
    push           11         i64 
    callproc       &pc_stackmcl.newopnd 
    jump           #15440     
#15436: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_d64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_stackmcl.addmem.ax u64 
    setargs                   3 0
    setargs                   1 0
    push           pc_stackmcl.addmem.d u64 
    callfn         &pc_libmcl.mgenmem u64 
    push           pc_stackmcl.addmem.ax u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_stackmcl.addmem.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #15443     i64 
    push           19         i64 
    resetmult                 
    jump           #15444     
#15443: 
    push           20         i64 
    endmult                   
#15444: 
    callproc       &pc_libmcl.genmc 
    jump           #15445     
    jump           #15440     
#15437: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_d64 
    setargs                   2 0
    push           ""         u64 
    push           "ADDMEM?"  u64 
    callproc       &pc_libmcl.merror 
#15440: 
    push           pc_stackmcl.addmem.d u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    popptroff                 u64 1 0
#15445: 
    retproc                   
End


Proc pc_stackmcl.addmemaddr:
    param          pc_stackmcl.addmemaddr.d u64 
    procentry                 
    setargs                   1 0
    push           11         i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addmemaddr.d u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    popptroff                 u64 1 0
#15447: 
    retproc                   
End


Proc pc_stackmcl.addlabeladdr:
    param          pc_stackmcl.addlabeladdr.lab i64 
    procentry                 
    setargs                   1 0
    push           13         i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addlabeladdr.lab i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    popptroff                 i64 1 0
#15449: 
    retproc                   
End


Proc pc_stackmcl.addlabel:
    param          pc_stackmcl.addlabel.lab i64 
    param          pc_stackmcl.addlabel.offset i64 
    procentry                 
    setargs                   1 0
    push           12         i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addlabel.lab i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    popptroff                 i64 1 0
    push           pc_stackmcl.addlabel.offset i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           5          
    popptroff                 i16 1 0
#15451: 
    retproc                   
End


Proc pc_stackmcl.addreg0:
    param          pc_stackmcl.addreg0.reg i64 
    procentry                 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addreg0.reg i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    push           &pci_mcl.regset 
    push           pc_stackmcl.addreg0.reg i64 
    pushptroff                u8 1 -1
    jumpfalse      #15453     i64 
    setargs                   2 0
    push           ""         u64 
    push           "addreg0/reg in use" u64 
    callproc       &pc_libmcl.merror 
#15453: 
    push           1          i64 
    push           &pci_mcl.regset 
    push           pc_stackmcl.addreg0.reg i64 
    popptroff                 u8 1 -1
#15454: 
    retproc                   
End


Proc pc_stackmcl.addwidereg0:
    param          pc_stackmcl.addwidereg0.reg i64 
    local          pc_stackmcl.addwidereg0.reg2 i64 
    procentry                 
    push           pc_stackmcl.addwidereg0.reg i64 
    push           1          i64 
    add                       i64 
    pop            pc_stackmcl.addwidereg0.reg2 i64 
    push           pc_stackmcl.addwidereg0.reg2 i64 
    push           4          i64 
    jumpne         #15456     i64 
    push           11         i64 
    pop            pc_stackmcl.addwidereg0.reg2 i64 
#15456: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.newopnd 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addwidereg0.reg2 i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    push           pc_stackmcl.addwidereg0.reg i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    push           &pci_mcl.regset 
    push           pc_stackmcl.addwidereg0.reg i64 
    pushptroff                u8 1 -1
    jumpfalse      #15457     i64 
    setargs                   2 0
    push           ""         u64 
    push           "addwidereg/reg(s) in use" u64 
    callproc       &pc_libmcl.merror 
#15457: 
    push           1          i64 
    push           &pci_mcl.regset 
    push           pc_stackmcl.addwidereg0.reg i64 
    popptroff                 u8 1 -1
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.setwideopnd 
#15458: 
    retproc                   
End


Proc pc_stackmcl.addxreg0:
    param          pc_stackmcl.addxreg0.reg i64 
    param          pc_stackmcl.addxreg0.fmt i64 
    procentry                 
    setargs                   1 0
    push           pc_stackmcl.addxreg0.fmt i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addxreg0.reg i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    push           &pci_mcl.xregset 
    push           pc_stackmcl.addxreg0.reg i64 
    pushptroff                u8 1 -1
    jumpfalse      #15460     i64 
    setargs                   2 0
    push           ""         u64 
    push           "addxreg0/reg in use" u64 
    callproc       &pc_libmcl.merror 
#15460: 
    push           1          i64 
    push           &pci_mcl.xregset 
    push           pc_stackmcl.addxreg0.reg i64 
    popptroff                 u8 1 -1
#15461: 
    retproc                   
End


Proc pc_stackmcl.addreg_d64:
    procentry                 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.newopnd 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
#15463: 
    retproc                   
End


Proc pc_stackmcl.addreg_x64:
    procentry                 
    setargs                   1 0
    push           2          i64 
    callproc       &pc_stackmcl.newopnd 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextxreg i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
#15465: 
    retproc                   
End


Proc pc_stackmcl.addreg_x32:
    procentry                 
    setargs                   1 0
    push           3          i64 
    callproc       &pc_stackmcl.newopnd 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextxreg i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
#15467: 
    retproc                   
End


Proc pc_stackmcl.stropndstack: u64
    param          pc_stackmcl.stropndstack.indent i64 
    local          pc_stackmcl.stropndstack.str2 block:512 
    local          pc_stackmcl.stropndstack.s u64 
    local          pc_stackmcl.stropndstack.t u64 
    local          pc_stackmcl.stropndstack.pc block:15 
    local          pc_stackmcl.stropndstack.i i64 
    local          pc_stackmcl.stropndstack.r i64 
    procentry                 
    push           &pc_stackmcl.stropndstack.str 
    pop            pc_stackmcl.stropndstack.s u64 
    push           pc_stackmcl.stropndstack.indent i64 
    jumpfalse      #15469     i64 
    setargs                   1 0
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "                                     (" u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #15470     
#15469: 
    setargs                   1 0
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "("        u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#15470: 
#15471: 
    push           pci_mcl.noperands i64 
    pop            pc_stackmcl.stropndstack.i i64 
    push           pc_stackmcl.stropndstack.i i64 
    push           1          i64 
    jumplt         #15472     i64 
#15473: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.stropndstack.i i64 
    pushptroff                block:15 15 -15
    pop            pc_stackmcl.stropndstack.pc block:15 
    push           &pc_stackmcl.stropndstack.pc 
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #15474     i64 0
    push           7          i64 
    casejumpeq     #15475     i64 0
    push           2          i64 
    casejumpeq     #15476     i64 0
    push           8          i64 
    casejumpeq     #15477     i64 0
    push           3          i64 
    casejumpeq     #15478     i64 0
    push           5          i64 
    casejumpeq     #15479     i64 0
    popstack                  i64 
    jump           #15480     
#15474: 
    setargs                   2 0
    push           &pci_mcl.regnames 
    push           &pc_stackmcl.stropndstack.pc 
    push           2          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #15481     
#15475: 
    setargs                   2 0
    push           &pci_mcl.regnames 
    push           &pc_stackmcl.stropndstack.pc 
    push           2          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           "="        u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           &pc_stackmcl.stropndstack.pc 
    push           7          
    pushptroff                u64 1 0
    pushptr                   u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #15481     
#15476: 
    setargs                   2 0
    push           &pci_mcl.xregnames 
    push           &pc_stackmcl.stropndstack.pc 
    push           2          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           ":"        u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           &pci_mcl.fmtnames 
    push           &pc_stackmcl.stropndstack.pc 
    pushptr                   u8 
    pushptroff                u64 8 0
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #15481     
#15477: 
    setargs                   2 0
    push           &pci_mcl.xregnames 
    push           &pc_stackmcl.stropndstack.pc 
    push           2          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           "="        u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           &pc_stackmcl.stropndstack.pc 
    push           7          
    pushptroff                u64 1 0
    pushptr                   u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #15481     
#15478: 
    setargs                   2 0
    push           "T"        u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #15481     
#15479: 
    setargs                   2 0
    push           "M:"       u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           &pc_stackmcl.stropndstack.pc 
    push           7          
    pushptroff                u64 1 0
    pushptr                   u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #15481     
#15480: 
    push           &pc_stackmcl.stropndstack.pc 
    pushptr                   u8 
    push           7          i64 
    casejumpeq     #15482     i64 0
    push           8          i64 
    casejumpeq     #15483     i64 0
    push           10         i64 
    casejumpeq     #15484     i64 0
    push           11         i64 
    casejumpeq     #15485     i64 0
    push           13         i64 
    casejumpeq     #15486     i64 0
    push           12         i64 
    casejumpeq     #15487     i64 0
    popstack                  i64 
    jump           #15488     
#15482: 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           &pc_stackmcl.stropndstack.pc 
    push           7          
    pushptroff                i64 1 0
    callfn         &msysp.strint u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #15489     
#15483: 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           &pc_stackmcl.stropndstack.pc 
    push           7          
    pushptroff                r64 1 0
    callfn         &msysp.strreal u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #15489     
#15484: 
    push           &pc_stackmcl.stropndstack.pc 
    push           7          
    pushptroff                u64 1 0
    pop            pc_stackmcl.stropndstack.t u64 
    setargs                   1 0
    push           pc_stackmcl.stropndstack.t u64 
    callfn         &strlen    i64 
    push           20         i64 
    jumple         #15490     i64 
    setargs                   2 0
    push           "LONG STR" u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #15491     
#15490: 
    setargs                   2 0
    push           "\""       u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           pc_stackmcl.stropndstack.s u64 
    setargs                   1 0
    push           pc_stackmcl.stropndstack.s u64 
    callfn         &strlen    i64 
    addrefoff                 u64 1 0
    push           pc_stackmcl.stropndstack.t u64 
    callproc       &pc_libpcl.convertstring 
    setargs                   2 0
    push           "\""       u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
#15491: 
    jump           #15489     
#15485: 
    setargs                   2 0
    push           "&"        u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           &pc_stackmcl.stropndstack.pc 
    push           7          
    pushptroff                u64 1 0
    pushptr                   u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #15489     
#15486: 
    setargs                   2 0
    push           "&#"       u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           &pc_stackmcl.stropndstack.pc 
    push           7          
    pushptroff                i64 1 0
    callfn         &msysp.strint u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #15489     
#15487: 
    setargs                   2 0
    push           "#"        u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           &pc_stackmcl.stropndstack.pc 
    push           7          
    pushptroff                i64 1 0
    callfn         &msysp.strint u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #15489     
#15488: 
    setargs                   2 0
    push           &pci_mcl.fmtnames 
    push           &pc_stackmcl.stropndstack.pc 
    pushptr                   u8 
    pushptroff                u64 8 0
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
#15489: 
#15481: 
    push           &pc_stackmcl.stropndstack.pc 
    push           4          
    pushptroff                u8 1 0
    jumpfalse      #15492     i64 
    setargs                   2 0
    startmult                 
    push           &pc_stackmcl.stropndstack.pc 
    push           4          
    pushptroff                u8 1 0
    push           72         i64 
    jumpne         #15493     i64 
    push           "(H)"      u64 
    resetmult                 
    jump           #15494     
#15493: 
    push           "(L)"      u64 
    endmult                   
#15494: 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
#15492: 
    push           pc_stackmcl.stropndstack.i i64 
    push           1          i64 
    jumple         #15495     i64 
    setargs                   2 0
    push           ","        u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
#15495: 
#15496: 
    fordown        #15473     i64 1
    opnd           pc_stackmcl.stropndstack.i 
    opnd           1          
#15472: 
    setargs                   2 0
    push           ") ("      u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
#15497: 
    push           1          i64 
    pop            pc_stackmcl.stropndstack.r i64 
#15498: 
    setargs                   2 0
    startmult                 
    push           &pci_mcl.regset 
    push           pc_stackmcl.stropndstack.r i64 
    pushptroff                u8 1 -1
    jumpfalse      #15499     i64 
    push           "1 "       u64 
    resetmult                 
    jump           #15500     
#15499: 
    push           "0 "       u64 
    endmult                   
#15500: 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
#15501: 
    forup          #15498     i64 1
    opnd           pc_stackmcl.stropndstack.r 
    opnd           10         
#15502: 
    setargs                   2 0
    push           ") ("      u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
#15503: 
    push           1          i64 
    pop            pc_stackmcl.stropndstack.r i64 
#15504: 
    setargs                   2 0
    startmult                 
    push           &pci_mcl.xregset 
    push           pc_stackmcl.stropndstack.r i64 
    pushptroff                u8 1 -1
    jumpfalse      #15505     i64 
    push           "1 "       u64 
    resetmult                 
    jump           #15506     
#15505: 
    push           "0 "       u64 
    endmult                   
#15506: 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
#15507: 
    forup          #15504     i64 1
    opnd           pc_stackmcl.stropndstack.r 
    opnd           7          
#15508: 
    setargs                   2 0
    push           ") hwstack:" u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pci_mcl.mstackdepth i64 
    callfn         &msysp.strint u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           " noperands:" u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pci_mcl.noperands i64 
    callfn         &msysp.strint u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           " ncalldepth:" u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pci_mcl.ncalldepth i64 
    callfn         &msysp.strint u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           " callslots[]:" u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           &pci_mcl.callslots 
    push           pci_mcl.ncalldepth i64 
    pushptroff                i64 8 -8
    callfn         &msysp.strint u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    push           pc_stackmcl.stropndstack.s u64 
    setret                    u64 
    jump           #15509     
#15509: 
    retfn                     u64 
End


Proc pc_stackmcl.loadopnd:
    param          pc_stackmcl.loadopnd.n i64 
    param          pc_stackmcl.loadopnd.nvreg i64 
    local          pc_stackmcl.loadopnd.reg i64 
    local          pc_stackmcl.loadopnd.value i64 
    local          pc_stackmcl.loadopnd.ax u64 
    procentry                 
    push           pc_stackmcl.loadopnd.n i64 
    push           pci_mcl.noperands i64 
    jumple         #15511     i64 
    setargs                   1 0
    push           "UNDERFLOW" u64 
    callproc       &pc_libmcl.mgencomment 
    jump           #15512     
    setargs                   2 0
    push           ""         u64 
    push           "loadopnd/underflow" u64 
    callproc       &pc_libmcl.merror 
#15511: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #15513     i64 
    jump           #15512     
#15513: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #15514     i64 
    jump           #15512     
#15514: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           3          
    pushptroff                u8 1 0
    jumpfalse      #15515     i64 
    setargs                   1 0
    push           pc_stackmcl.loadopnd.nvreg i64 
    callfn         &pc_stackmcl.getnextxreg i64 
    pop            pc_stackmcl.loadopnd.reg i64 
    jump           #15516     
#15515: 
    setargs                   1 0
    push           pc_stackmcl.loadopnd.nvreg i64 
    callfn         &pc_stackmcl.getnextreg i64 
    pop            pc_stackmcl.loadopnd.reg i64 
#15516: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           2          i64 
    casejumpeq     #15517     i64 0
    popstack                  i64 
    jump           #15518     
#15517: 
    setargs                   2 0
    push           ""         u64 
    push           "LOADOPND/XREG" u64 
    callproc       &pc_libmcl.merror 
    jump           #15519     
#15518: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    casejumpeq     #15520     i64 0
    push           8          i64 
    casejumpeq     #15521     i64 0
    push           9          i64 
    casejumpeq     #15522     i64 0
    push           10         i64 
    casejumpeq     #15523     i64 0
    push           13         i64 
    casejumpeq     #15524     i64 0
    push           12         i64 
    casejumpeq     #15525     i64 0
    push           14         i64 
    casejumpeq     #15526     i64 0
    push           15         i64 
    casejumpeq     #15527     i64 0
    push           16         i64 
    casejumpeq     #15528     i64 0
    push           17         i64 
    casejumpeq     #15529     i64 0
    push           18         i64 
    casejumpeq     #15530     i64 0
    push           19         i64 
    casejumpeq     #15531     i64 0
    push           4          i64 
    casejumpeq     #15532     i64 0
    push           5          i64 
    casejumpeq     #15533     i64 0
    push           6          i64 
    casejumpeq     #15534     i64 0
    push           11         i64 
    casejumpeq     #15535     i64 0
    popstack                  i64 
    jump           #15536     
#15520: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    pop            pc_stackmcl.loadopnd.value i64 
    push           pc_stackmcl.loadopnd.value i64 
    push           0          i64 
    jumpne         #15537     i64 
    push           pci_mcl.noxorclear u8 
    jumptrue       #15537     i64 
    setargs                   2 0
    push           4          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_stackmcl.loadopnd.ax u64 
    setargs                   3 0
    push           pc_stackmcl.loadopnd.ax u64 
    push           pc_stackmcl.loadopnd.ax u64 
    push           41         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15538     
#15537: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenint u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
#15538: 
    jump           #15539     
#15521: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                r64 1 0
    callfn         &pc_libmcl.mgenrealmem u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenxreg u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15539     
#15522: 
    setargs                   3 0
    setargs                   2 0
    push           4          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                r64 1 0
    callfn         &pc_libmcl.mgenrealmem u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenxreg u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15539     
#15523: 
    setargs                   3 0
    setargs                   1 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.getstringindex i64 
    callfn         &pc_libmcl.mgenlabel u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15539     
#15524: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15539     
#15525: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabelmem u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           5          
    pushptroff                i16 1 0
    push           pci_mcl.mccodex u64 
    push           16         
    pushptroff                u64 1 0
    push           14         
    popptroff                 i32 1 0
    jump           #15539     
#15526: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15539     
#15527: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenxreg u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15539     
#15528: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenxreg u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15539     
#15529: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmemhigh u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15539     
#15530: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenregvar u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15539     
#15531: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenxregvar u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenxreg u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15539     
#15532: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           14         i64 
    callproc       &pc_libmcl.genmc 
    push           &pci_mcl.mstackdepth 
    decr                      i64 1
    jump           #15539     
#15533: 
    push           pci_mcl.inf_r13used i64 
    jumpfalse      #15540     i64 
    setargs                   2 0
    push           ""         u64 
    push           "R13 in use" u64 
    callproc       &pc_libmcl.merror 
#15540: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           14         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           14         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           14         i64 
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenxreg u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    push           &pci_mcl.mstackdepth 
    decr                      i64 1
    jump           #15539     
#15534: 
    push           pci_mcl.inf_r13used i64 
    jumpfalse      #15541     i64 
    setargs                   2 0
    push           ""         u64 
    push           "R13 in use" u64 
    callproc       &pc_libmcl.merror 
#15541: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           14         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           14         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           4          i64 
    push           14         i64 
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenxreg u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    push           &pci_mcl.mstackdepth 
    decr                      i64 1
    jump           #15539     
#15535: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           15         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15539     
#15536: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.stropndstack u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           &pci_mcl.fmtnames 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u64 8 0
    push           "LOADOPND??" u64 
    callproc       &pc_libmcl.merror 
#15539: 
#15519: 
    push           pc_stackmcl.loadopnd.reg i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    push           &pci_mcl.loadfmt 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u8 1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
    push           &pci_mcl.loccodes 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u8 1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           1          
    popptroff                 u8 1 0
#15512: 
    retproc                   
End


Proc pc_stackmcl.loadparam:
    param          pc_stackmcl.loadparam.n i64 
    param          pc_stackmcl.loadparam.reg i64 
    local          pc_stackmcl.loadparam.oldreg i64 
    local          pc_stackmcl.loadparam.value i64 
    local          pc_stackmcl.loadparam.ax u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadparam.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_stackmcl.loadparam.ax u64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_stackmcl.loadparam.oldreg i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           1          i64 
    casejumpeq     #15543     i64 0
    push           18         i64 
    casejumpeq     #15543     i64 0
    push           2          i64 
    casejumpeq     #15544     i64 0
    push           19         i64 
    casejumpeq     #15544     i64 0
    push           3          i64 
    casejumpeq     #15545     i64 0
    push           7          i64 
    casejumpeq     #15546     i64 0
    push           8          i64 
    casejumpeq     #15547     i64 0
    push           10         i64 
    casejumpeq     #15548     i64 0
    push           14         i64 
    casejumpeq     #15549     i64 0
    push           17         i64 
    casejumpeq     #15550     i64 0
    push           11         i64 
    casejumpeq     #15551     i64 0
    push           15         i64 
    casejumpeq     #15552     i64 0
    push           4          i64 
    casejumpeq     #15553     i64 0
    popstack                  i64 
    jump           #15554     
#15543: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadparam.oldreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           pc_stackmcl.loadparam.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_stackmcl.loadparam.oldreg i64 
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_stackmcl.loadparam.oldreg i64 
    popptroff                 u8 1 -1
    jump           #15555     
#15544: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadparam.oldreg i64 
    callfn         &pc_libmcl.mgenxreg u64 
    push           pc_stackmcl.loadparam.ax u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15556     
    jump           #15555     
#15545: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadparam.oldreg i64 
    callfn         &pc_libmcl.mgenxreg u64 
    setargs                   2 0
    push           4          i64 
    push           pc_stackmcl.loadparam.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15556     
    jump           #15555     
#15546: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    pop            pc_stackmcl.loadparam.value i64 
    push           pc_stackmcl.loadparam.value i64 
    push           0          i64 
    jumpne         #15557     i64 
    setargs                   2 0
    push           4          i64 
    push           pc_stackmcl.loadparam.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_stackmcl.loadparam.ax u64 
    setargs                   3 0
    push           pc_stackmcl.loadparam.ax u64 
    push           pc_stackmcl.loadparam.ax u64 
    push           41         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15558     
#15557: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenint u64 
    push           pc_stackmcl.loadparam.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
#15558: 
    jump           #15555     
#15547: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                r64 1 0
    callfn         &pc_libmcl.mgenrealmem u64 
    push           pc_stackmcl.loadparam.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15555     
#15548: 
    setargs                   3 0
    setargs                   1 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.getstringindex i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           pc_stackmcl.loadparam.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15555     
#15549: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           pc_stackmcl.loadparam.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15555     
#15550: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmemhigh u64 
    push           pc_stackmcl.loadparam.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15555     
#15551: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           pc_stackmcl.loadparam.ax u64 
    push           15         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15555     
#15552: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           pc_stackmcl.loadparam.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15555     
#15553: 
    setargs                   3 0
    push           0          u64 
    push           pc_stackmcl.loadparam.ax u64 
    push           14         i64 
    callproc       &pc_libmcl.genmc 
    push           &pci_mcl.mstackdepth 
    decr                      i64 1
    jump           #15555     
#15554: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "LOADPARAM:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pci_mcl.fmtnames 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "****LOADPARAM??" u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   2 0
    push           &pci_mcl.fmtnames 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u64 8 0
    push           "LOADPARAM??" u64 
    callproc       &pc_libmcl.merror 
#15555: 
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    push           1          
    popptroff                 u8 1 0
    push           pc_stackmcl.loadparam.reg i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
#15556: 
    retproc                   
End


Proc pc_stackmcl.loadxparam:
    param          pc_stackmcl.loadxparam.n i64 
    param          pc_stackmcl.loadxparam.reg i64 
    local          pc_stackmcl.loadxparam.ax u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadxparam.reg i64 
    callfn         &pc_libmcl.mgenxreg u64 
    pop            pc_stackmcl.loadxparam.ax u64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadxparam.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           1          i64 
    casejumpeq     #15560     i64 0
    push           18         i64 
    casejumpeq     #15560     i64 0
    push           2          i64 
    casejumpeq     #15561     i64 0
    push           19         i64 
    casejumpeq     #15561     i64 0
    push           3          i64 
    casejumpeq     #15562     i64 0
    push           8          i64 
    casejumpeq     #15563     i64 0
    push           9          i64 
    casejumpeq     #15564     i64 0
    push           14         i64 
    casejumpeq     #15565     i64 0
    push           15         i64 
    casejumpeq     #15565     i64 0
    push           16         i64 
    casejumpeq     #15566     i64 0
    popstack                  i64 
    jump           #15567     
#15560: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadxparam.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    push           pc_stackmcl.loadxparam.ax u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15568     
#15561: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadxparam.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenxreg u64 
    push           pc_stackmcl.loadxparam.ax u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15568     
#15562: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadxparam.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenxreg u64 
    push           pc_stackmcl.loadxparam.ax u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15568     
#15563: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadxparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                r64 1 0
    callfn         &pc_libmcl.mgenrealmem u64 
    push           pc_stackmcl.loadxparam.ax u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15568     
#15564: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadxparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                r64 1 0
    callfn         &pc_libmcl.mgenrealmem u64 
    push           pc_stackmcl.loadxparam.ax u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15568     
#15565: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadxparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           pc_stackmcl.loadxparam.ax u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15568     
#15566: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadxparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           pc_stackmcl.loadxparam.ax u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15568     
#15567: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "??LOADXPARAM" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_stackmcl.loadxparam.n i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           pci_mcl.noperands i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "****LOADXPARAM??" u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   2 0
    push           &pci_mcl.fmtnames 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadxparam.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u64 8 0
    push           "LOADXPARAM??" u64 
    callproc       &pc_libmcl.merror 
#15568: 
#15569: 
    retproc                   
End


Proc pc_stackmcl.genopnd: u64
    param          pc_stackmcl.genopnd.index i64 
    param          pc_stackmcl.genopnd.size i64 
    local          pc_stackmcl.genopnd.ax u64 
    local          pc_stackmcl.genopnd.reg i64 
    local          pc_stackmcl.genopnd.value i64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #15571     i64 0
    push           7          i64 
    casejumpeq     #15572     i64 0
    push           2          i64 
    casejumpeq     #15573     i64 0
    push           8          i64 
    casejumpeq     #15574     i64 0
    popstack                  i64 
    jump           #15575     
#15571: 
    setargs                   2 0
    push           pc_stackmcl.genopnd.size i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    setret                    u64 
    jump           #15576     
    jump           #15577     
#15572: 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenregvar u64 
    setret                    u64 
    jump           #15576     
    jump           #15577     
#15573: 
    setargs                   2 0
    push           pc_stackmcl.genopnd.size i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenxreg u64 
    setret                    u64 
    jump           #15576     
    jump           #15577     
#15574: 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenxregvar u64 
    setret                    u64 
    jump           #15576     
    jump           #15577     
#15575: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           14         i64 
    casejumpeq     #15578     i64 0
    push           15         i64 
    casejumpeq     #15578     i64 0
    push           16         i64 
    casejumpeq     #15578     i64 0
    push           17         i64 
    casejumpeq     #15579     i64 0
    push           7          i64 
    casejumpeq     #15580     i64 0
    push           8          i64 
    casejumpeq     #15581     i64 0
    push           9          i64 
    casejumpeq     #15582     i64 0
    push           11         i64 
    casejumpeq     #15583     i64 0
    push           10         i64 
    casejumpeq     #15584     i64 0
    popstack                  i64 
    jump           #15585     
#15578: 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    setret                    u64 
    jump           #15576     
    jump           #15586     
#15579: 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmemhigh u64 
    setret                    u64 
    jump           #15576     
    jump           #15586     
#15580: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    pop            pc_stackmcl.genopnd.value i64 
    push           -2147483648 i64 
    push           pc_stackmcl.genopnd.value i64 
    jumpgt         #15587     i64 
    push           pc_stackmcl.genopnd.value i64 
    push           2147483647 i64 
    jumpgt         #15587     i64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.genopnd.value i64 
    callfn         &pc_libmcl.mgenint u64 
    setret                    u64 
    jump           #15576     
#15587: 
    setargs                   2 0
    push           8          i64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_stackmcl.genopnd.ax u64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.genopnd.value i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_stackmcl.genopnd.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_stackmcl.genopnd.ax u64 
    push           10         
    pushptroff                u8 1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           1          
    popptroff                 u8 1 0
    push           pc_stackmcl.genopnd.ax u64 
    setret                    u64 
    jump           #15576     
    jump           #15586     
#15581: 
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                r64 1 0
    callfn         &pc_libmcl.mgenrealmem u64 
    setret                    u64 
    jump           #15576     
    jump           #15586     
#15582: 
    setargs                   2 0
    push           4          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                r64 1 0
    callfn         &pc_libmcl.mgenrealmem u64 
    setret                    u64 
    jump           #15576     
    jump           #15586     
#15583: 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    pop            pc_stackmcl.genopnd.reg i64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.genopnd.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_stackmcl.genopnd.ax u64 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           pc_stackmcl.genopnd.ax u64 
    push           15         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_stackmcl.genopnd.ax u64 
    push           10         
    pushptroff                u8 1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           1          
    popptroff                 u8 1 0
    push           pc_stackmcl.genopnd.ax u64 
    setret                    u64 
    jump           #15576     
    jump           #15586     
#15584: 
    setargs                   3 0
    setargs                   1 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.getstringindex i64 
    callfn         &pc_libmcl.mgenlabel u64 
    setargs                   2 0
    push           8          i64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    store          pc_stackmcl.genopnd.ax u64 
    push           15         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_stackmcl.genopnd.ax u64 
    push           10         
    pushptroff                u8 1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           1          
    popptroff                 u8 1 0
    push           pc_stackmcl.genopnd.ax u64 
    setret                    u64 
    jump           #15576     
    jump           #15586     
#15585: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "LOCNAMES[PCLSTACK[INDEX].LOC]=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pci_mcl.locnames 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "FMTNAMES[PCLSTACK[INDEX].FMT]=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pci_mcl.fmtnames 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "GENOPND??" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "****GENOPND??" u64 
    callproc       &pc_libmcl.mgencomment 
#15586: 
#15577: 
    push           0          u64 
    setret                    u64 
    jump           #15576     
#15576: 
    retfn                     u64 
End


Proc pc_stackmcl.genopnd_ld: u64
    param          pc_stackmcl.genopnd_ld.index i64 
    param          pc_stackmcl.genopnd_ld.size i64 
    procentry                 
    setargs                   2 0
    push           0          i64 
    push           pc_stackmcl.genopnd_ld.index i64 
    callproc       &pc_stackmcl.loadopnd 
    setargs                   2 0
    push           pc_stackmcl.genopnd_ld.size i64 
    push           pc_stackmcl.genopnd_ld.index i64 
    callfn         &pc_stackmcl.genopnd u64 
    setret                    u64 
    jump           #15589     
#15589: 
    retfn                     u64 
End


Proc pc_stackmcl.genopnd_ind: u64
    param          pc_stackmcl.genopnd_ind.index i64 
    param          pc_stackmcl.genopnd_ind.size i64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd_ind.index i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #15591     i64 0
    popstack                  i64 
    jump           #15592     
#15591: 
    setargs                   3 0
    push           0          i64 
    push           pc_stackmcl.genopnd_ind.size i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd_ind.index i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenireg u64 
    setret                    u64 
    jump           #15593     
    setargs                   3 0
    push           0          i64 
    push           pc_stackmcl.genopnd_ind.size i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd_ind.index i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenireg u64 
    setret                    u64 
    jump           #15593     
    setargs                   3 0
    push           0          i64 
    push           pc_stackmcl.genopnd_ind.size i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd_ind.index i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenireg u64 
    setret                    u64 
    jump           #15593     
    jump           #15594     
#15592: 
#15594: 
    setargs                   2 0
    push           0          i64 
    push           pc_stackmcl.genopnd_ind.index i64 
    callproc       &pc_stackmcl.loadopnd 
    setargs                   2 0
    push           pc_stackmcl.genopnd_ind.size i64 
    push           pc_stackmcl.genopnd_ind.index i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    setret                    u64 
    jump           #15593     
#15593: 
    retfn                     u64 
End


Proc pc_stackmcl.genopnd_d64: u64
    procentry                 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_d64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    setret                    u64 
    jump           #15596     
#15596: 
    retfn                     u64 
End


Proc pc_stackmcl.setwideopnd:
    param          pc_stackmcl.setwideopnd.n i64 
    procentry                 
    push           76         i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.setwideopnd.n i64 
    addrefoff                 block:15 15 -15
    push           4          
    popptroff                 u8 1 0
    push           72         i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.setwideopnd.n i64 
    addrefoff                 block:15 15 0
    push           4          
    popptroff                 u8 1 0
#15598: 
    retproc                   
End


Proc pc_stackmcl.unsetwideopnd:
    param          pc_stackmcl.unsetwideopnd.n i64 
    procentry                 
    push           0          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.unsetwideopnd.n i64 
    addrefoff                 block:15 15 -15
    push           4          
    popptroff                 u8 1 0
#15600: 
    retproc                   
End


Proc pc_stackmcl.getnextreg: i64
    param          pc_stackmcl.getnextreg.nvreg i64 
    local          pc_stackmcl.getnextreg.reg i64 
    local          pc_stackmcl.getnextreg.firstreg i64 
    local          pc_stackmcl.getnextreg.r i64 
    local          pc_stackmcl.getnextreg.i i64 
    procentry                 
    startmult                 
    push           pc_stackmcl.getnextreg.nvreg i64 
    jumpfalse      #15602     i64 
    push           4          i64 
    resetmult                 
    jump           #15603     
#15602: 
    push           1          i64 
    endmult                   
#15603: 
    pop            pc_stackmcl.getnextreg.firstreg i64 
#15604: 
    push           pc_stackmcl.getnextreg.firstreg i64 
    pop            pc_stackmcl.getnextreg.r i64 
    push           pc_stackmcl.getnextreg.r i64 
    push           10         i64 
    jumpgt         #15605     i64 
#15606: 
    push           &pci_mcl.regset 
    push           pc_stackmcl.getnextreg.r i64 
    pushptroff                u8 1 -1
    push           0          i64 
    jumpne         #15607     i64 
    push           1          i64 
    push           &pci_mcl.regset 
    push           pc_stackmcl.getnextreg.r i64 
    popptroff                 u8 1 -1
    push           &pci_mcl.inf_highreg 
    push           pc_stackmcl.getnextreg.r i64 
    maxto                     i64 
    push           pc_stackmcl.getnextreg.r i64 
    setret                    i64 
    jump           #15608     
#15607: 
#15609: 
    forup          #15606     i64 1
    opnd           pc_stackmcl.getnextreg.r 
    opnd           10         
#15605: 
#15610: 
    push           pci_mcl.noperands i64 
    pop            pc_stackmcl.getnextreg.i i64 
    push           pc_stackmcl.getnextreg.i i64 
    push           1          i64 
    jumplt         #15611     i64 
#15612: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.getnextreg.i i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #15613     i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.getnextreg.i i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_stackmcl.getnextreg.reg i64 
    push           pc_stackmcl.getnextreg.reg i64 
    push           pc_stackmcl.getnextreg.firstreg i64 
    jumplt         #15614     i64 
    setargs                   1 0
    push           pc_stackmcl.getnextreg.i i64 
    callproc       &pc_stackmcl.pushopnd 
    setargs                   1 0
    push           pc_stackmcl.getnextreg.nvreg i64 
    callfn         &pc_stackmcl.getnextreg i64 
    setret                    i64 
    jump           #15608     
#15614: 
#15613: 
#15615: 
    fordown        #15612     i64 1
    opnd           pc_stackmcl.getnextreg.i 
    opnd           1          
#15611: 
    setargs                   2 0
    push           ""         u64 
    push           "NO FREE REGS" u64 
    callproc       &pc_libmcl.merror 
    push           0          i64 
    setret                    i64 
    jump           #15608     
#15608: 
    retfn                     i64 
End


Proc pc_stackmcl.getnextxreg: i64
    param          pc_stackmcl.getnextxreg.nvreg i64 
    local          pc_stackmcl.getnextxreg.reg i64 
    local          pc_stackmcl.getnextxreg.firstreg i64 
    local          pc_stackmcl.getnextxreg.r i64 
    local          pc_stackmcl.getnextxreg.i i64 
    procentry                 
    startmult                 
    push           pc_stackmcl.getnextxreg.nvreg i64 
    jumpfalse      #15617     i64 
    push           7          i64 
    resetmult                 
    jump           #15618     
#15617: 
    push           5          i64 
    endmult                   
#15618: 
    pop            pc_stackmcl.getnextxreg.firstreg i64 
#15619: 
    push           pc_stackmcl.getnextxreg.firstreg i64 
    pop            pc_stackmcl.getnextxreg.r i64 
    push           pc_stackmcl.getnextxreg.r i64 
    push           10         i64 
    jumpgt         #15620     i64 
#15621: 
    push           &pci_mcl.xregset 
    push           pc_stackmcl.getnextxreg.r i64 
    pushptroff                u8 1 -1
    push           0          i64 
    jumpne         #15622     i64 
    push           1          i64 
    push           &pci_mcl.xregset 
    push           pc_stackmcl.getnextxreg.r i64 
    popptroff                 u8 1 -1
    push           &pci_mcl.inf_highxreg 
    push           pc_stackmcl.getnextxreg.r i64 
    maxto                     i64 
    push           pc_stackmcl.getnextxreg.r i64 
    setret                    i64 
    jump           #15623     
#15622: 
#15624: 
    forup          #15621     i64 1
    opnd           pc_stackmcl.getnextxreg.r 
    opnd           10         
#15620: 
#15625: 
    push           pci_mcl.noperands i64 
    pop            pc_stackmcl.getnextxreg.i i64 
    push           pc_stackmcl.getnextxreg.i i64 
    push           1          i64 
    jumplt         #15626     i64 
#15627: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.getnextxreg.i i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #15628     i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.getnextxreg.i i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_stackmcl.getnextxreg.reg i64 
    push           pc_stackmcl.getnextxreg.reg i64 
    push           pc_stackmcl.getnextxreg.firstreg i64 
    jumplt         #15629     i64 
    setargs                   1 0
    push           pc_stackmcl.getnextxreg.i i64 
    callproc       &pc_stackmcl.pushopnd 
    setargs                   1 0
    push           pc_stackmcl.getnextxreg.nvreg i64 
    callfn         &pc_stackmcl.getnextxreg i64 
    setret                    i64 
    jump           #15623     
#15629: 
#15628: 
#15630: 
    fordown        #15627     i64 1
    opnd           pc_stackmcl.getnextxreg.i 
    opnd           1          
#15626: 
    setargs                   2 0
    push           ""         u64 
    push           "NO FREE XREGS" u64 
    callproc       &pc_libmcl.merror 
    push           0          i64 
    setret                    i64 
    jump           #15623     
#15623: 
    retfn                     i64 
End


Proc pc_stackmcl.delopnd:
    procentry                 
    push           pci_mcl.noperands i64 
    push           0          i64 
    jumpgt         #15632     i64 
    setargs                   1 0
    push           "****DELND/UNDERFLOW" u64 
    callproc       &pc_libmcl.mgencomment 
    jump           #15633     
#15632: 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #15634     i64 0
    push           7          i64 
    casejumpeq     #15634     i64 0
    push           2          i64 
    casejumpeq     #15635     i64 0
    push           8          i64 
    casejumpeq     #15635     i64 0
    push           5          i64 
    casejumpeq     #15636     i64 0
    push           4          i64 
    casejumpeq     #15637     i64 0
    popstack                  i64 
    jump           #15638     
#15634: 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    jump           #15639     
#15635: 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callproc       &pc_stackmcl.freexreg 
    jump           #15639     
#15636: 
    jump           #15639     
#15637: 
    jump           #15639     
#15638: 
    setargs                   2 0
    push           &pci_mcl.locnames 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    push           "Can't pop opnd: #" u64 
    callproc       &pc_libmcl.merror 
#15639: 
    push           &pci_mcl.noperands 
    decr                      i64 1
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    pop            pci_mcl.pclstack u64 
#15633: 
    retproc                   
End


Proc pc_stackmcl.freexreg:
    param          pc_stackmcl.freexreg.xr i64 
    procentry                 
    push           0          i64 
    push           &pci_mcl.xregset 
    push           pc_stackmcl.freexreg.xr i64 
    popptroff                 u8 1 -1
#15641: 
    retproc                   
End


Proc pc_stackmcl.pushopnd:
    param          pc_stackmcl.pushopnd.n i64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #15643     i64 0
    push           7          i64 
    casejumpeq     #15644     i64 0
    push           2          i64 
    casejumpeq     #15645     i64 0
    push           3          i64 
    casejumpeq     #15646     i64 0
    popstack                  i64 
    jump           #15647     
#15643: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    jump           #15648     
#15644: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15648     
#15645: 
    push           pci_mcl.inf_r13used i64 
    jumpfalse      #15649     i64 
    setargs                   2 0
    push           ""         u64 
    push           "2:R13 in use" u64 
    callproc       &pc_libmcl.merror 
#15649: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenxreg u64 
    setargs                   2 0
    push           8          i64 
    push           14         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           14         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callproc       &pc_stackmcl.freexreg 
    jump           #15648     
#15646: 
    jump           #15650     
    jump           #15648     
#15647: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           17         i64 
    casejumpeq     #15651     i64 0
    push           14         i64 
    casejumpeq     #15652     i64 0
    push           15         i64 
    casejumpeq     #15652     i64 0
    push           16         i64 
    casejumpeq     #15653     i64 0
    push           7          i64 
    casejumpeq     #15654     i64 0
    push           8          i64 
    casejumpeq     #15655     i64 0
    push           10         i64 
    casejumpeq     #15656     i64 0
    push           11         i64 
    casejumpeq     #15657     i64 0
    popstack                  i64 
    jump           #15658     
#15651: 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmemhigh u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15659     
#15652: 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15659     
#15653: 
    push           pci_mcl.inf_r13used i64 
    jumpfalse      #15660     i64 
    setargs                   2 0
    push           ""         u64 
    push           "4:R13 in use" u64 
    callproc       &pc_libmcl.merror 
#15660: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    setargs                   2 0
    push           4          i64 
    push           14         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           14         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15659     
#15654: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenint u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15659     
#15655: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                r64 1 0
    callfn         &pc_libmcl.mgenrealmem u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15659     
#15656: 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.getstringindex i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15659     
#15657: 
    push           pci_mcl.inf_r13used i64 
    jumpfalse      #15661     i64 
    setargs                   2 0
    push           ""         u64 
    push           "3:R13 in use" u64 
    callproc       &pc_libmcl.merror 
#15661: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    setargs                   2 0
    push           8          i64 
    push           14         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           15         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           14         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15659     
#15658: 
    setargs                   2 0
    push           &pci_mcl.fmtnames 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u64 8 0
    push           "Can't push opnd: #" u64 
    callproc       &pc_libmcl.merror 
#15659: 
#15648: 
    push           3          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           1          
    popptroff                 u8 1 0
    push           &pci_mcl.pushfmt 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u8 1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
    push           &pci_mcl.mstackdepth 
    incr                      i64 1
#15650: 
    retproc                   
End


Proc pc_stackmcl.pushallopnds:
    param          pc_stackmcl.pushallopnds.n i64 
    local          pc_stackmcl.pushallopnds.i i64 
    procentry                 
#15663: 
    push           pci_mcl.noperands i64 
    pop            pc_stackmcl.pushallopnds.i i64 
    push           pc_stackmcl.pushallopnds.i i64 
    push           pc_stackmcl.pushallopnds.n i64 
    jumplt         #15664     i64 
#15665: 
    setargs                   1 0
    push           pc_stackmcl.pushallopnds.i i64 
    callproc       &pc_stackmcl.pushopnd 
#15666: 
    fordown        #15665     i64 1
    opnd           pc_stackmcl.pushallopnds.i 
    opnd           pc_stackmcl.pushallopnds.n 
#15664: 
#15667: 
    retproc                   
End


Proc pc_stackmcl.poparg:
    procentry                 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #15669     i64 0
    push           2          i64 
    casejumpeq     #15670     i64 0
    push           3          i64 
    casejumpeq     #15671     i64 0
    push           4          i64 
    casejumpeq     #15672     i64 0
    push           5          i64 
    casejumpeq     #15673     i64 0
    push           7          i64 
    casejumpeq     #15674     i64 0
    push           8          i64 
    casejumpeq     #15675     i64 0
    popstack                  i64 
    jump           #15676     
#15669: 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    jump           #15677     
#15670: 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callproc       &pc_stackmcl.freexreg 
    jump           #15677     
#15671: 
    jump           #15677     
#15672: 
    jump           #15677     
#15673: 
    jump           #15677     
#15674: 
    jump           #15677     
#15675: 
    jump           #15677     
#15676: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "POPARG:"  u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pci_mcl.locnames 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "****POPARG?" u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   2 0
    push           &pci_mcl.locnames 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    push           "poparg? #" u64 
    callproc       &pc_libmcl.merror 
#15677: 
    push           &pci_mcl.noperands 
    decr                      i64 1
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    pop            pci_mcl.pclstack u64 
#15678: 
    retproc                   
End


Proc pc_stackmcl.pushslots:
    param          pc_stackmcl.pushslots.nslots i64 
    procentry                 
    setargs                   1 0
    push           pc_stackmcl.pushslots.nslots i64 
    push           8          i64 
    mul                       i64 
    callproc       &pc_stackmcl.pushstack 
    push           &pci_mcl.mstackdepth 
    push           pc_stackmcl.pushslots.nslots i64 
    addto                     i64 
#15680: 
    retproc                   
End


Proc pc_stackmcl.popslots:
    param          pc_stackmcl.popslots.nslots i64 
    procentry                 
    setargs                   1 0
    push           pc_stackmcl.popslots.nslots i64 
    push           8          i64 
    mul                       i64 
    callproc       &pc_stackmcl.popstack 
    push           &pci_mcl.mstackdepth 
    push           pc_stackmcl.popslots.nslots i64 
    subto                     i64 
#15682: 
    retproc                   
End


Proc pc_stackmcl.pushstack:
    param          pc_stackmcl.pushstack.n i64 
    procentry                 
    push           pc_stackmcl.pushstack.n i64 
    jumpfalse      #15684     i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.pushstack.n i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pci_mcl.dstackopnd u64 
    push           30         i64 
    callproc       &pc_libmcl.genmc 
#15684: 
#15685: 
    retproc                   
End


Proc pc_stackmcl.popstack:
    param          pc_stackmcl.popstack.n i64 
    procentry                 
    push           pc_stackmcl.popstack.n i64 
    jumpfalse      #15687     i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.popstack.n i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pci_mcl.dstackopnd u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
#15687: 
#15688: 
    retproc                   
End


Proc pc_stackmcl.saveopnd:
    param          pc_stackmcl.saveopnd.n i64 
    local          pc_stackmcl.saveopnd.reg i64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.saveopnd.n i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #15690     i64 0
    push           2          i64 
    casejumpeq     #15691     i64 0
    push           3          i64 
    casejumpeq     #15692     i64 0
    push           7          i64 
    casejumpeq     #15693     i64 0
    push           8          i64 
    casejumpeq     #15693     i64 0
    push           4          i64 
    casejumpeq     #15694     i64 0
    popstack                  i64 
    jump           #15695     
#15690: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.saveopnd.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_stackmcl.saveopnd.reg i64 
    push           pc_stackmcl.saveopnd.reg i64 
    push           1          i64 
    push           3          i64 
    jumpnotinrange #15696     i64 
    setargs                   1 0
    push           pc_stackmcl.saveopnd.n i64 
    callproc       &pc_stackmcl.pushopnd 
#15696: 
    jump           #15697     
#15691: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.saveopnd.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_stackmcl.saveopnd.reg i64 
    push           pc_stackmcl.saveopnd.reg i64 
    push           1          i64 
    push           6          i64 
    jumpnotinrange #15698     i64 
    setargs                   1 0
    push           pc_stackmcl.saveopnd.n i64 
    callproc       &pc_stackmcl.pushopnd 
#15698: 
    jump           #15697     
#15692: 
    jump           #15697     
#15693: 
    jump           #15697     
#15694: 
    setargs                   1 0
    push           pc_stackmcl.saveopnd.n i64 
    callproc       &pc_stackmcl.pushopnd 
    jump           #15697     
#15695: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.saveopnd.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           17         i64 
    casejumpeq     #15699     i64 0
    push           14         i64 
    casejumpeq     #15700     i64 0
    push           15         i64 
    casejumpeq     #15700     i64 0
    push           16         i64 
    casejumpeq     #15700     i64 0
    popstack                  i64 
    jump           #15701     
#15699: 
    setargs                   1 0
    push           pc_stackmcl.saveopnd.n i64 
    callproc       &pc_stackmcl.pushopnd 
    jump           #15702     
#15700: 
    setargs                   1 0
    push           pc_stackmcl.saveopnd.n i64 
    callproc       &pc_stackmcl.pushopnd 
    jump           #15702     
#15701: 
    setargs                   2 0
    push           &pci_mcl.fmtnames 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.saveopnd.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u64 8 0
    push           "Can't save opnd: #" u64 
    callproc       &pc_libmcl.merror 
#15702: 
#15697: 
#15703: 
    retproc                   
End


Proc pc_stackmcl.saveallopnds:
    param          pc_stackmcl.saveallopnds.n i64 
    local          pc_stackmcl.saveallopnds.i i64 
    procentry                 
#15705: 
    push           pci_mcl.noperands i64 
    pop            pc_stackmcl.saveallopnds.i i64 
    push           pc_stackmcl.saveallopnds.i i64 
    push           pc_stackmcl.saveallopnds.n i64 
    jumplt         #15706     i64 
#15707: 
    setargs                   1 0
    push           pc_stackmcl.saveallopnds.i i64 
    callproc       &pc_stackmcl.saveopnd 
#15708: 
    fordown        #15707     i64 1
    opnd           pc_stackmcl.saveallopnds.i 
    opnd           pc_stackmcl.saveallopnds.n 
#15706: 
#15709: 
    retproc                   
End


Proc pc_stackmcl.movetoreg:
    param          pc_stackmcl.movetoreg.newreg i64 
    local          pc_stackmcl.movetoreg.oldreg i64 
    procentry                 
    setargs                   2 0
    push           0          i64 
    push           1          i64 
    callproc       &pc_stackmcl.loadopnd 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_stackmcl.movetoreg.oldreg i64 
    push           pc_stackmcl.movetoreg.oldreg i64 
    push           pc_stackmcl.movetoreg.newreg i64 
    jumpne         #15711     i64 
    jump           #15712     
#15711: 
    push           &pci_mcl.regset 
    push           pc_stackmcl.movetoreg.newreg i64 
    pushptroff                u8 1 -1
    jumpfalse      #15713     i64 
    setargs                   2 0
    push           ""         u64 
    push           "movereg/reg in use" u64 
    callproc       &pc_libmcl.merror 
#15713: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.movetoreg.oldreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.movetoreg.newreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_stackmcl.movetoreg.oldreg i64 
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_stackmcl.movetoreg.oldreg i64 
    popptroff                 u8 1 -1
    push           pc_stackmcl.movetoreg.newreg i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    push           1          i64 
    push           &pci_mcl.regset 
    push           pc_stackmcl.movetoreg.newreg i64 
    popptroff                 u8 1 -1
    push           pc_stackmcl.movetoreg.newreg i64 
    push           11         i64 
    jumplt         #15714     i64 
    push           &pci_mcl.inf_highreg 
    push           pc_stackmcl.movetoreg.newreg i64 
    maxto                     i64 
#15714: 
#15712: 
    retproc                   
End


Proc pc_stackmcl.swapopnds:
    param          pc_stackmcl.swapopnds.m i64 
    param          pc_stackmcl.swapopnds.n i64 
    local          pc_stackmcl.swapopnds.t block:15 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.swapopnds.m i64 
    pushptroff                block:15 15 -15
    pop            pc_stackmcl.swapopnds.t block:15 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.swapopnds.n i64 
    pushptroff                block:15 15 -15
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.swapopnds.m i64 
    popptroff                 block:15 15 -15
    push           pc_stackmcl.swapopnds.t block:15 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.swapopnds.n i64 
    popptroff                 block:15 15 -15
#15716: 
    retproc                   
End


Proc pc_stackmcl.swapopndregs:
    param          pc_stackmcl.swapopndregs.reg2 i64 
    local          pc_stackmcl.swapopndregs.reg1 i64 
    local          pc_stackmcl.swapopndregs.i i64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_stackmcl.swapopndregs.reg1 i64 
#15718: 
    push           2          i64 
    pop            pc_stackmcl.swapopndregs.i i64 
    push           pci_mcl.noperands i64 
    push           2          i64 
    jumplt         #15719     i64 
#15720: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.swapopndregs.i i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #15721     i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.swapopndregs.i i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    push           pc_stackmcl.swapopndregs.reg2 i64 
    jumpne         #15721     i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    addrefoff                 u64 1 0
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    addrefoff                 u64 1 0
    swap                      u8 
    jump           #15722     
#15721: 
#15723: 
    forup          #15720     i64 1
    opnd           pc_stackmcl.swapopndregs.i 
    opnd           pci_mcl.noperands 
#15719: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           pci_mcl.procdef u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           ""         u64 
    push           "swapopndregs/reg not found" u64 
    callproc       &pc_libmcl.merror 
#15724: 
#15722: 
    retproc                   
End


Proc pc_stackmcl.showopndstack:
    procentry                 
    setargs                   1 0
    setargs                   1 0
    push           1          i64 
    callfn         &pc_stackmcl.stropndstack u64 
    callproc       &pc_libmcl.mgencomment 
#15726: 
    retproc                   
End


Proc pc_genss.genss:
    local          pc_genss.genss.index i64 
    local          pc_genss.genss.m u64 
    procentry                 
    setargs                   1 0
    push           pci_mcl.mlabelno i64 
    callproc       &pc_genss.initlib 
    push           0          i64 
    pop            pci_mcl.ss_zdatalen i64 
    setargs                   1 0
    push           1024       i64 
    callfn         &pc_genss.buffercreate u64 
    pop            pci_mcl.ss_zdata u64 
    setargs                   1 0
    push           1024       i64 
    callfn         &pc_genss.buffercreate u64 
    pop            pci_mcl.ss_idata u64 
    setargs                   1 0
    push           1024       i64 
    callfn         &pc_genss.buffercreate u64 
    pop            pci_mcl.ss_code u64 
    push           0          u64 
    pop            pci_mcl.ss_idatarelocs u64 
    push           0          u64 
    pop            pci_mcl.ss_coderelocs u64 
    push           0          i64 
    pop            pci_mcl.ss_nsymbols i64 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_genss.switchseg 
    push           9999       i64 
    pop            pci_mcl.alineno i64 
    push           0          u64 
    pop            pc_genss.extraparam u64 
    setargs                   0 0
    callproc       &pc_genss.fixregvar 
    push           pci_mcl.mccode u64 
    pop            pc_genss.genss.m u64 
    push           0          i64 
    pop            pc_genss.genss.index i64 
    jump           #15728     
#15729: 
    setargs                   2 0
    push           &pc_genss.genss.index 
    incrload                  i64 1
    push           pc_genss.genss.m u64 
    callproc       &pc_genss.doinstr 
    push           pc_genss.genss.m u64 
    pushptr                   u64 
    pop            pc_genss.genss.m u64 
#15728: 
    push           pc_genss.genss.m u64 
    jumptrue       #15729     u64 
#15730: 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_genss.switchseg 
    setargs                   1 0
    push           pci_mcl.ss_zdata u64 
    callfn         &pc_genss.bufferlength i64 
    jumpfalse      #15731     i64 
    setargs                   1 0
    push           "Zdata contains code or data" u64 
    callproc       &pci_mcl.axerror 
#15731: 
#15732: 
    retproc                   
End


Proc pc_genss.doinstr:
    param          pc_genss.doinstr.m u64 
    param          pc_genss.doinstr.index i64 
    local          pc_genss.doinstr.a u64 
    local          pc_genss.doinstr.b u64 
    local          pc_genss.doinstr.d u64 
    local          pc_genss.doinstr.e u64 
    local          pc_genss.doinstr.x i64 
    local          pc_genss.doinstr.offset i64 
    local          pc_genss.doinstr.shortjmp i64 
    local          pc_genss.doinstr.n i64 
    local          pc_genss.doinstr.av_1 i64 
    local          pc_genss.doinstr.av_2 i64 
    procentry                 
    setargs                   2 0
    push           1024       i64 
    push           pc_genss.currdata u64 
    callproc       &pc_genss.buffercheck 
    push           0          i64 
    store          pc_genss.f3override i64 
    store          pc_genss.f2override i64 
    store          pc_genss.addroverride i64 
    store          pc_genss.sizeoverride i64 
    pop            pc_genss.rex i64 
    push           pc_genss.doinstr.m u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_genss.doinstr.a u64 
    push           pc_genss.doinstr.m u64 
    push           16         
    pushptroff                u64 1 0
    pop            pc_genss.doinstr.b u64 
    push           &pc_genss.instrno 
    incr                      i64 1
    push           pc_genss.instrno i64 
    pop            pci_mcl.alineno i64 
    push           pc_genss.doinstr.m u64 
    pop            pc_genss.currmcl u64 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    switch         #15734     1 148
    opnd           #15735     
#15734: 
    switchlabel    #15736     
    switchlabel    #15737     
    switchlabel    #15738     
    switchlabel    #15739     
    switchlabel    #15740     
    switchlabel    #15741     
    switchlabel    #15742     
    switchlabel    #15743     
    switchlabel    #15744     
    switchlabel    #15745     
    switchlabel    #15746     
    switchlabel    #15747     
    switchlabel    #15748     
    switchlabel    #15749     
    switchlabel    #15750     
    switchlabel    #15751     
    switchlabel    #15752     
    switchlabel    #15753     
    switchlabel    #15754     
    switchlabel    #15755     
    switchlabel    #15756     
    switchlabel    #15757     
    switchlabel    #15758     
    switchlabel    #15735     
    switchlabel    #15759     
    switchlabel    #15760     
    switchlabel    #15761     
    switchlabel    #15762     
    switchlabel    #15763     
    switchlabel    #15763     
    switchlabel    #15763     
    switchlabel    #15763     
    switchlabel    #15764     
    switchlabel    #15764     
    switchlabel    #15765     
    switchlabel    #15735     
    switchlabel    #15764     
    switchlabel    #15764     
    switchlabel    #15763     
    switchlabel    #15763     
    switchlabel    #15763     
    switchlabel    #15766     
    switchlabel    #15763     
    switchlabel    #15767     
    switchlabel    #15767     
    switchlabel    #15767     
    switchlabel    #15767     
    switchlabel    #15767     
    switchlabel    #15767     
    switchlabel    #15767     
    switchlabel    #15764     
    switchlabel    #15764     
    switchlabel    #15768     
    switchlabel    #15768     
    switchlabel    #15769     
    switchlabel    #15770     
    switchlabel    #15771     
    switchlabel    #15772     
    switchlabel    #15773     
    switchlabel    #15774     
    switchlabel    #15774     
    switchlabel    #15775     
    switchlabel    #15776     
    switchlabel    #15776     
    switchlabel    #15776     
    switchlabel    #15776     
    switchlabel    #15776     
    switchlabel    #15775     
    switchlabel    #15775     
    switchlabel    #15775     
    switchlabel    #15775     
    switchlabel    #15777     
    switchlabel    #15778     
    switchlabel    #15779     
    switchlabel    #15780     
    switchlabel    #15779     
    switchlabel    #15780     
    switchlabel    #15779     
    switchlabel    #15779     
    switchlabel    #15781     
    switchlabel    #15782     
    switchlabel    #15783     
    switchlabel    #15784     
    switchlabel    #15785     
    switchlabel    #15786     
    switchlabel    #15787     
    switchlabel    #15788     
    switchlabel    #15789     
    switchlabel    #15789     
    switchlabel    #15735     
    switchlabel    #15735     
    switchlabel    #15790     
    switchlabel    #15790     
    switchlabel    #15790     
    switchlabel    #15791     
    switchlabel    #15791     
    switchlabel    #15791     
    switchlabel    #15792     
    switchlabel    #15792     
    switchlabel    #15792     
    switchlabel    #15792     
    switchlabel    #15793     
    switchlabel    #15793     
    switchlabel    #15793     
    switchlabel    #15793     
    switchlabel    #15793     
    switchlabel    #15793     
    switchlabel    #15793     
    switchlabel    #15793     
    switchlabel    #15776     
    switchlabel    #15776     
    switchlabel    #15775     
    switchlabel    #15775     
    switchlabel    #15794     
    switchlabel    #15795     
    switchlabel    #15796     
    switchlabel    #15797     
    switchlabel    #15798     
    switchlabel    #15799     
    switchlabel    #15800     
    switchlabel    #15801     
    switchlabel    #15802     
    switchlabel    #15803     
    switchlabel    #15804     
    switchlabel    #15804     
    switchlabel    #15804     
    switchlabel    #15804     
    switchlabel    #15805     
    switchlabel    #15806     
    switchlabel    #15806     
    switchlabel    #15806     
    switchlabel    #15807     
    switchlabel    #15808     
    switchlabel    #15809     
    switchlabel    #15810     
    switchlabel    #15811     
    switchlabel    #15812     
    switchlabel    #15813     
    switchlabel    #15814     
    switchlabel    #15815     
    switchlabel    #15816     
    switchlabel    #15816     
    switchlabel    #15816     
    switchlabel    #15816     
    switchlabel    #15816     
    switchlabel    #15816     
    switchlabel    #15816     
    switchlabel    #15745     
    endswitch                 
#15736: 
    push           pc_genss.doinstr.m u64 
    push           8          
    pushptroff                u64 1 0
    pushptr                   u64 
    pop            pci_mcl.currasmproc u64 
    jump           #15817     
#15737: 
    jump           #15817     
#15742: 
    jump           #15817     
#15743: 
    jump           #15817     
#15740: 
    jump           #15817     
#15741: 
    push           pc_genss.doinstr.a u64 
    push           12         
    pushptroff                u8 1 0
    push           4          i64 
    casejumpeq     #15818     i64 0
    push           5          i64 
    casejumpeq     #15819     i64 0
    popstack                  i64 
    jump           #15820     
#15818: 
    jump           #15821     
#15819: 
    push           pc_genss.doinstr.a u64 
    pushptr                   u64 
    pop            pc_genss.doinstr.d u64 
    push           2          i64 
    push           pc_genss.doinstr.d u64 
    push           29         
    popptroff                 u8 1 0
    push           pc_genss.currseg i64 
    push           pc_genss.doinstr.d u64 
    push           30         
    popptroff                 u8 1 0
    setargs                   1 0
    push           6          i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           pc_genss.doinstr.d u64 
    push           32         
    popptroff                 i32 1 0
    push           pc_genss.doinstr.d u64 
    push           46         
    pushptroff                u16 1 0
    push           3          i64 
    dotindex                  i64 
    jumpfalse      #15822     u64 
    setargs                   1 0
    push           pc_genss.doinstr.d u64 
    callproc       &pc_genss.getstindex 
#15822: 
    setargs                   1 0
    push           pc_genss.doinstr.d u64 
    callproc       &pc_genss.dofwdrefs 
    jump           #15821     
#15820: 
#15821: 
    jump           #15817     
#15744: 
    push           pci_mcl.labeldeftable u64 
    push           pc_genss.doinstr.a u64 
    pushptr                   i64 
    pushptroff                u64 8 -8
    pop            pc_genss.doinstr.d u64 
    push           2          i64 
    push           pc_genss.doinstr.d u64 
    push           29         
    popptroff                 u8 1 0
    push           pc_genss.currseg i64 
    push           pc_genss.doinstr.d u64 
    push           30         
    popptroff                 u8 1 0
    setargs                   1 0
    push           6          i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           pc_genss.doinstr.d u64 
    push           32         
    popptroff                 i32 1 0
    setargs                   1 0
    push           pc_genss.doinstr.d u64 
    callproc       &pc_genss.dofwdrefs 
    jump           #15817     
#15757: 
    setargs                   1 0
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_call 
    jump           #15817     
#15760: 
    setargs                   2 0
    push           pc_genss.doinstr.m u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_jmp 
    jump           #15817     
#15761: 
    setargs                   2 0
    push           1          i64 
    push           pc_genss.doinstr.a u64 
    callfn         &pc_genss.getdef u64 
    pop            pc_genss.doinstr.d u64 
    setargs                   2 0
    setargs                   1 0
    push           7          i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           1          i64 
    add                       i64 
    push           pc_genss.doinstr.d u64 
    callfn         &pc_genss.getrel32 i64 
    pop            pc_genss.doinstr.offset i64 
    push           pc_genss.doinstr.offset i64 
    push           0          i64 
    jumpge         #15823     i64 
    push           pc_genss.doinstr.offset i64 
    push           -126       i64 
    jumpge         #15824     i64 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           128        i64 
    push           pc_genss.doinstr.m u64 
    push           25         
    pushptroff                u8 1 0
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.doinstr.offset i64 
    push           4          i64 
    sub                       i64 
    callproc       &pc_genss.gendword 
    jump           #15825     
#15824: 
    setargs                   1 0
    push           112        i64 
    push           pc_genss.doinstr.m u64 
    push           25         
    pushptroff                u8 1 0
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.doinstr.offset i64 
    callproc       &pc_genss.genbyte 
#15825: 
    jump           #15826     
#15823: 
    setargs                   2 0
    push           pc_genss.doinstr.d u64 
    push           pc_genss.doinstr.m u64 
    callfn         &pc_genss.checkshortjump i64 
    pop            pc_genss.doinstr.shortjmp i64 
    push           pc_genss.doinstr.shortjmp i64 
    jumptrue       #15827     i64 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           128        i64 
    push           pc_genss.doinstr.m u64 
    push           25         
    pushptroff                u8 1 0
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.genrel32 
    jump           #15828     
#15827: 
    setargs                   1 0
    push           112        i64 
    push           pc_genss.doinstr.m u64 
    push           25         
    pushptroff                u8 1 0
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.genrel8 
#15828: 
#15826: 
    jump           #15817     
#15794: 
    setargs                   2 0
    push           1          i64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.genopnd 
    jump           #15817     
#15795: 
    setargs                   2 0
    push           2          i64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.genopnd 
    jump           #15817     
#15796: 
    setargs                   2 0
    push           4          i64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.genopnd 
    jump           #15817     
#15797: 
    setargs                   2 0
    push           8          i64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.genopnd 
    jump           #15817     
#15798: 
    setargs                   1 0
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.genrel32 
    jump           #15817     
#15799: 
    setargs                   1 0
    push           pc_genss.doinstr.a u64 
    pushptr                   i64 
    callproc       &pc_genss.switchseg 
    jump           #15817     
#15802: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_genss.switchseg 
    jump           #15817     
#15800: 
    setargs                   1 0
    push           2          i64 
    callproc       &pc_genss.switchseg 
    jump           #15817     
#15801: 
    setargs                   1 0
    push           3          i64 
    callproc       &pc_genss.switchseg 
    jump           #15817     
#15745: 
    setargs                   1 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    callproc       &pc_genss.genbyte 
    jump           #15817     
#15769: 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           152        i64 
    callproc       &pc_genss.genbyte 
    jump           #15817     
#15770: 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           153        i64 
    callproc       &pc_genss.genbyte 
    jump           #15817     
#15771: 
    setargs                   1 0
    push           153        i64 
    callproc       &pc_genss.genbyte 
    jump           #15817     
#15772: 
    setargs                   1 0
    push           72         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           153        i64 
    callproc       &pc_genss.genbyte 
    jump           #15817     
#15758: 
    setargs                   1 0
    push           195        i64 
    callproc       &pc_genss.genbyte 
    jump           #15817     
#15759: 
    push           pc_genss.doinstr.a u64 
    push           9          
    pushptroff                u8 1 0
    push           2          i64 
    jumpeq         #15829     i64 
    setargs                   1 0
    push           "retn?"    u64 
    callproc       &pci_mcl.axerror 
#15829: 
    setargs                   1 0
    push           194        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.doinstr.a u64 
    pushptr                   i64 
    callproc       &pc_genss.genword 
    jump           #15817     
#15748: 
    setargs                   1 0
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_push 
    jump           #15817     
#15749: 
    setargs                   1 0
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_pop 
    jump           #15817     
#15768: 
    setargs                   2 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_inc 
    jump           #15817     
#15764: 
    setargs                   2 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_neg 
    jump           #15817     
#15763: 
    setargs                   3 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_arith 
    jump           #15817     
#15747: 
    setargs                   2 0
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_mov 
    jump           #15817     
#15750: 
    setargs                   2 0
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_lea 
    jump           #15817     
#15754: 
    setargs                   3 0
    push           190        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_movsx 
    jump           #15817     
#15755: 
    setargs                   3 0
    push           182        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_movsx 
    jump           #15817     
#15756: 
    setargs                   2 0
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_movsxd 
    jump           #15817     
#15762: 
    setargs                   2 0
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_exch 
    jump           #15817     
#15765: 
    setargs                   2 0
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_imul2 
    jump           #15817     
#15804: 
    push           pc_genss.doinstr.a u64 
    push           9          
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #15830     i64 
    push           pc_genss.doinstr.a u64 
    pushptr                   i64 
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    mul                       i64 
    pop            pc_genss.doinstr.n i64 
    push           pc_genss.currseg i64 
    push           1          i64 
    casejumpeq     #15831     i64 0
    push           2          i64 
    casejumpeq     #15832     i64 0
    popstack                  i64 
    jump           #15833     
#15831: 
#15834: 
    push           pc_genss.doinstr.n i64 
    pop            pc_genss.doinstr.av_1 i64 
    push           pc_genss.doinstr.av_1 i64 
    push           0          i64 
    jumple         #15835     i64 
#15836: 
    setargs                   1 0
    push           144        i64 
    callproc       &pc_genss.genbyte 
#15837: 
    to             #15836     
    opnd           pc_genss.doinstr.av_1 
#15835: 
    jump           #15838     
#15832: 
#15839: 
    push           pc_genss.doinstr.n i64 
    pop            pc_genss.doinstr.av_2 i64 
    push           pc_genss.doinstr.av_2 i64 
    push           0          i64 
    jumple         #15840     i64 
#15841: 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_genss.genbyte 
#15842: 
    to             #15841     
    opnd           pc_genss.doinstr.av_2 
#15840: 
    jump           #15838     
#15833: 
    push           &pci_mcl.ss_zdatalen 
    push           pc_genss.doinstr.n i64 
    addto                     i64 
#15838: 
    jump           #15843     
#15830: 
    setargs                   1 0
    push           "resb?"    u64 
    callproc       &pci_mcl.axerror 
#15843: 
    jump           #15817     
#15803: 
    push           pc_genss.doinstr.a u64 
    push           9          
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #15844     i64 
    push           pc_genss.doinstr.a u64 
    pushptr                   i64 
    pop            pc_genss.doinstr.x i64 
    push           pc_genss.doinstr.x i64 
    push           1          i64 
    jumplt         #15845     i64 
    push           pc_genss.doinstr.x i64 
    push           16384      i64 
    jumple         #15846     i64 
#15845: 
    setargs                   1 0
    push           "align2"   u64 
    callproc       &pci_mcl.axerror 
#15846: 
    push           pc_genss.currseg i64 
    push           3          i64 
    jumpeq         #15847     i64 
    jump           #15848     
#15849: 
    setargs                   1 0
    startmult                 
    push           pc_genss.currseg i64 
    push           1          i64 
    jumpne         #15850     i64 
    push           144        i64 
    resetmult                 
    jump           #15851     
#15850: 
    push           0          i64 
    endmult                   
#15851: 
    callproc       &pc_genss.genbyte 
#15848: 
    setargs                   1 0
    push           pc_genss.currdata u64 
    callfn         &pc_genss.bufferlength i64 
    push           pc_genss.doinstr.x i64 
    irem                      i64 
    jumptrue       #15849     i64 
#15852: 
    jump           #15853     
#15847: 
    jump           #15854     
#15855: 
    push           &pci_mcl.ss_zdatalen 
    incr                      i64 1
#15854: 
    push           pci_mcl.ss_zdatalen i64 
    push           pc_genss.doinstr.x i64 
    irem                      i64 
    jumptrue       #15855     i64 
#15856: 
#15853: 
    jump           #15857     
#15844: 
    setargs                   1 0
    push           "align?"   u64 
    callproc       &pci_mcl.axerror 
#15857: 
    jump           #15817     
#15767: 
    setargs                   3 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_shift 
    jump           #15817     
#15766: 
    setargs                   2 0
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_test 
    jump           #15817     
#15806: 
    setargs                   2 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_loop 
    jump           #15817     
#15807: 
    setargs                   2 0
    push           4          i64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_jcxz 
    jump           #15817     
#15808: 
    setargs                   2 0
    push           8          i64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_jcxz 
    jump           #15817     
#15805: 
    setargs                   1 0
    push           215        i64 
    callproc       &pc_genss.genbyte 
    jump           #15817     
#15773: 
    setargs                   2 0
    push           pc_genss.doinstr.a u64 
    push           pc_genss.doinstr.m u64 
    push           25         
    pushptroff                u8 1 0
    callproc       &pc_genss.do_setcc 
    jump           #15817     
#15752: 
    setargs                   3 0
    push           4          i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_movxmm 
    jump           #15817     
#15753: 
    setargs                   3 0
    push           8          i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_movxmm 
    jump           #15817     
#15776: 
    setargs                   4 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           243        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_arithxmm 
    jump           #15817     
#15775: 
    setargs                   4 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           242        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_arithxmm 
    jump           #15817     
#15780: 
    setargs                   4 0
    push           4          i64 
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_logicxmm 
    jump           #15817     
#15779: 
    setargs                   4 0
    push           8          i64 
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_logicxmm 
    jump           #15817     
#15777: 
    setargs                   4 0
    push           47         i64 
    push           0          i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_arithxmm 
    jump           #15817     
#15778: 
    setargs                   4 0
    push           47         i64 
    push           102        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_arithxmm 
    jump           #15817     
#15788: 
    setargs                   3 0
    push           243        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_convertfloat 
    jump           #15817     
#15787: 
    setargs                   3 0
    push           242        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_convertfloat 
    jump           #15817     
#15781: 
    setargs                   4 0
    push           45         i64 
    push           243        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_fix 
    jump           #15817     
#15782: 
    setargs                   4 0
    push           45         i64 
    push           242        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_fix 
    jump           #15817     
#15783: 
    setargs                   4 0
    push           44         i64 
    push           243        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_fix 
    jump           #15817     
#15784: 
    setargs                   4 0
    push           44         i64 
    push           242        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_fix 
    jump           #15817     
#15785: 
    setargs                   3 0
    push           243        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_float 
    jump           #15817     
#15786: 
    setargs                   3 0
    push           242        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_float 
    jump           #15817     
#15746: 
    push           pc_genss.doinstr.a u64 
    pop            pc_genss.extraparam u64 
    jump           #15817     
#15751: 
    setargs                   3 0
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    push           pc_genss.doinstr.m u64 
    push           25         
    pushptroff                u8 1 0
    callproc       &pc_genss.do_cmovcc 
    jump           #15817     
#15793: 
    setargs                   1 0
    push           217        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    callproc       &pc_genss.genbyte 
    jump           #15817     
#15790: 
    setargs                   3 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           1          i64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_fmem 
    jump           #15817     
#15791: 
    setargs                   3 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           0          i64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_fmem 
    jump           #15817     
#15792: 
    setargs                   1 0
    push           222        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    callproc       &pc_genss.genbyte 
    jump           #15817     
#15809: 
    setargs                   1 0
    push           166        i64 
    callproc       &pc_genss.genbyte 
    jump           #15817     
#15810: 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           167        i64 
    callproc       &pc_genss.genbyte 
    jump           #15817     
#15811: 
    setargs                   1 0
    push           167        i64 
    callproc       &pc_genss.genbyte 
    jump           #15817     
#15812: 
    setargs                   1 0
    push           72         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           167        i64 
    callproc       &pc_genss.genbyte 
    jump           #15817     
#15813: 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    callproc       &pc_genss.genbyte 
    jump           #15817     
#15789: 
    setargs                   3 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_movdqx 
    jump           #15817     
#15815: 
    setargs                   1 0
    push           219        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           227        i64 
    callproc       &pc_genss.genbyte 
    jump           #15817     
#15816: 
    setargs                   1 0
    push           217        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    callproc       &pc_genss.genbyte 
    jump           #15817     
#15814: 
    setargs                   2 0
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_popcnt 
    jump           #15817     
#15774: 
    setargs                   3 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_bsf 
    jump           #15817     
#15738: 
    jump           #15817     
#15739: 
    jump           #15817     
#15735: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "*** Can't do opcode" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pci_mcl.mclnames 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "line"     u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.alineno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           "M.OPCODE=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           "M_HALT="  u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           148        i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "STOPPING" u64 
    callproc       &pci_mcl.axerror 
#15817: 
#15858: 
    retproc                   
End


Proc pc_genss.genbyte:
    param          pc_genss.genbyte.x i64 
    procentry                 
    push           pc_genss.genbyte.x i64 
    push           pc_genss.currdata u64 
    push           8          
    addrefoff                 u64 1 0
    loadincr                  u64 1
    popptr                    u8 
#15860: 
    retproc                   
End


Proc pc_genss.genword:
    param          pc_genss.genword.x i64 
    procentry                 
    setargs                   2 0
    push           pc_genss.genword.x i64 
    push           pc_genss.currdata u64 
    callproc       &pc_genss.addword 
#15862: 
    retproc                   
End


Proc pc_genss.gendword:
    param          pc_genss.gendword.x i64 
    procentry                 
    setargs                   2 0
    push           pc_genss.gendword.x i64 
    push           pc_genss.currdata u64 
    callproc       &pc_genss.adddword 
#15864: 
    retproc                   
End


Proc pc_genss.genqword:
    param          pc_genss.genqword.x i64 
    procentry                 
    setargs                   2 0
    push           pc_genss.genqword.x i64 
    push           pc_genss.currdata u64 
    callproc       &pc_genss.addqword 
#15866: 
    retproc                   
End


Proc pc_genss.genopnd:
    param          pc_genss.genopnd.a u64 
    param          pc_genss.genopnd.size i64 
    local          pc_genss.genopnd.s u64 
    local          pc_genss.genopnd.x i64 
    local          pc_genss.genopnd.length i64 
    local          pc_genss.genopnd.x32 r32 
    procentry                 
    push           pc_genss.genopnd.size i64 
    push           0          i64 
    jumpne         #15868     i64 
    push           pc_genss.genopnd.a u64 
    push           8          
    pushptroff                u8 1 0
    pop            pc_genss.genopnd.size i64 
#15868: 
    push           pc_genss.genopnd.a u64 
    push           12         
    pushptroff                u8 1 0
    push           4          i64 
    casejumpeq     #15869     i64 0
    push           8          i64 
    casejumpeq     #15870     i64 0
    popstack                  i64 
    jump           #15871     
#15869: 
    push           pc_genss.genopnd.a u64 
    pushptr                   u64 
    pop            pc_genss.genopnd.s u64 
    setargs                   1 0
    push           pc_genss.genopnd.s u64 
    callfn         &strlen    i64 
    pop            pc_genss.genopnd.length i64 
    push           pc_genss.genopnd.length i64 
    push           100        i64 
    jumple         #15872     i64 
    setargs                   2 0
    push           1024       i64 
    push           pc_genss.genopnd.length i64 
    push           1          i64 
    add                       i64 
    max                       i64 
    push           pc_genss.currdata u64 
    callproc       &pc_genss.buffercheck 
#15872: 
    jump           #15873     
#15874: 
    setargs                   1 0
    push           &pc_genss.genopnd.s 
    loadincr                  u64 1
    pushptr                   u8 
    callproc       &pc_genss.genbyte 
#15873: 
    push           pc_genss.genopnd.s u64 
    pushptr                   u8 
    jumptrue       #15874     u64 
#15875: 
    jump           #15876     
    jump           #15877     
#15870: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "GENSS/NAME OPND" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #15877     
#15871: 
#15877: 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.genopnd.a u64 
    callfn         &pc_genss.getdef u64 
    jumpfalse      #15878     u64 
    push           pc_genss.genopnd.size i64 
    push           2          i64 
    jumpgt         #15878     i64 
    setargs                   1 0
    push           "8/16-BIT RELOC" u64 
    callproc       &pci_mcl.axerror 
#15878: 
    push           pc_genss.genopnd.size i64 
    push           1          i64 
    casejumpeq     #15879     i64 0
    push           2          i64 
    casejumpeq     #15880     i64 0
    push           4          i64 
    casejumpeq     #15881     i64 0
    push           8          i64 
    casejumpeq     #15882     i64 0
    popstack                  i64 
    jump           #15883     
#15879: 
    setargs                   1 0
    push           pc_genss.genopnd.a u64 
    pushptr                   i64 
    callproc       &pc_genss.genbyte 
    jump           #15884     
#15880: 
    setargs                   1 0
    push           pc_genss.genopnd.a u64 
    pushptr                   i64 
    callproc       &pc_genss.genword 
    jump           #15884     
#15881: 
    push           pc_genss.genopnd.a u64 
    push           12         
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #15885     i64 0
    push           2          i64 
    casejumpeq     #15886     i64 0
    push           3          i64 
    casejumpeq     #15887     i64 0
    push           4          i64 
    casejumpeq     #15888     i64 0
    push           5          i64 
    casejumpeq     #15889     i64 0
    push           7          i64 
    casejumpeq     #15889     i64 0
    push           8          i64 
    casejumpeq     #15890     i64 0
    popstack                  i64 
    jump           #15891     
#15885: 
    setargs                   1 0
    push           pc_genss.genopnd.a u64 
    pushptr                   i64 
    callproc       &pc_genss.gendword 
    jump           #15892     
#15886: 
    push           pc_genss.genopnd.a u64 
    pushptr                   r64 
    fnarrow                   r32 r64 
    pop            pc_genss.genopnd.x32 r32 
    setargs                   1 0
    push           pc_genss.genopnd.x32 r32 
    typepun                   i32 void 0
    callproc       &pc_genss.gendword 
    jump           #15892     
#15887: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\t\tOPND/REALMEM4" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #15892     
#15888: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\t\tOPND/STRINGIMM4" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #15892     
#15889: 
    setargs                   1 0
    push           pc_genss.genopnd.a u64 
    callproc       &pc_genss.genabs32 
    jump           #15892     
#15890: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\t\tOPND/NAME4" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #15892     
#15891: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pci_mcl.valtypenames 
    push           pc_genss.genopnd.a u64 
    push           12         
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "OPND/4/VALTYPE?" u64 
    callproc       &pci_mcl.axerror 
#15892: 
    jump           #15884     
#15882: 
    push           pc_genss.genopnd.a u64 
    push           12         
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #15893     i64 0
    push           2          i64 
    casejumpeq     #15894     i64 0
    push           3          i64 
    casejumpeq     #15895     i64 0
    push           4          i64 
    casejumpeq     #15896     i64 0
    push           5          i64 
    casejumpeq     #15897     i64 0
    push           7          i64 
    casejumpeq     #15897     i64 0
    push           8          i64 
    casejumpeq     #15898     i64 0
    popstack                  i64 
    jump           #15899     
#15893: 
    setargs                   1 0
    push           pc_genss.genopnd.a u64 
    pushptr                   i64 
    callproc       &pc_genss.genqword 
    jump           #15900     
#15894: 
    setargs                   1 0
    push           pc_genss.genopnd.a u64 
    pushptr                   r64 
    typepun                   i64 void 0
    callproc       &pc_genss.genqword 
    jump           #15900     
#15895: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\t\tOPND/REALMEM8" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.alineno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #15900     
#15896: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\t\tOPND/STRINGIMM8" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #15900     
#15897: 
    setargs                   1 0
    push           pc_genss.genopnd.a u64 
    callproc       &pc_genss.genabs64 
    jump           #15900     
#15898: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\t\tOPND/NAME8" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #15900     
#15899: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "HERE"     u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pci_mcl.valtypenames 
    push           pc_genss.genopnd.a u64 
    push           12         
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "OPND/8/VALTYPE?" u64 
    callproc       &pci_mcl.axerror 
#15900: 
    jump           #15884     
#15883: 
#15884: 
#15876: 
    retproc                   
End


Proc pc_genss.addrelocitem:
    param          pc_genss.addrelocitem.reloctype i64 
    param          pc_genss.addrelocitem.d u64 
    local          pc_genss.addrelocitem.r u64 
    local          pc_genss.addrelocitem.stindex i64 
    local          pc_genss.addrelocitem.adjust i64 
    procentry                 
    setargs                   1 0
    push           pc_genss.addrelocitem.d u64 
    callfn         &pc_genss.getstindex i64 
    pop            pc_genss.addrelocitem.stindex i64 
    push           4          i64 
    pop            pc_genss.addrelocitem.adjust i64 
    push           pc_genss.addrelocitem.reloctype i64 
    push           1          i64 
    jumpne         #15902     i64 
    push           8          i64 
    pop            pc_genss.addrelocitem.adjust i64 
#15902: 
    setargs                   1 0
    push           32         i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pc_genss.addrelocitem.r u64 
    push           pc_genss.currrelocs u64 
    push           pc_genss.addrelocitem.r u64 
    push           0          
    popptroff                 u64 1 0
    push           pc_genss.addrelocitem.reloctype i64 
    push           pc_genss.addrelocitem.r u64 
    push           8          
    popptroff                 i64 1 0
    setargs                   1 0
    push           1          i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           pc_genss.addrelocitem.adjust i64 
    sub                       i64 
    push           pc_genss.addrelocitem.r u64 
    push           16         
    popptroff                 i64 1 0
    push           pc_genss.addrelocitem.stindex i64 
    push           pc_genss.addrelocitem.r u64 
    push           24         
    popptroff                 i64 1 0
    push           &pc_genss.nrelocs 
    incr                      i64 1
    push           pc_genss.addrelocitem.r u64 
    pop            pc_genss.currrelocs u64 
#15903: 
    retproc                   
End


Proc pc_genss.getstindex: i64
    param          pc_genss.getstindex.d u64 
    procentry                 
    push           pc_genss.getstindex.d u64 
    push           36         
    pushptroff                i32 1 0
    push           0          i64 
    jumpne         #15905     i64 
    push           pci_mcl.ss_nsymbols i64 
    push           pci_mcl.ss_symboltablesize i64 
    jumplt         #15906     i64 
    setargs                   0 0
    callproc       &pc_genss.extendsymboltable 
#15906: 
    push           &pci_mcl.ss_nsymbols 
    incrload                  i64 1
    push           pc_genss.getstindex.d u64 
    push           36         
    popptroff                 i32 1 0
    push           pc_genss.getstindex.d u64 
    push           pci_mcl.ss_symboltable u64 
    push           pc_genss.getstindex.d u64 
    push           36         
    pushptroff                i32 1 0
    popptroff                 u64 8 -8
    push           pc_genss.getstindex.d u64 
    push           30         
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #15907     i64 
    push           pc_genss.getstindex.d u64 
    push           46         
    pushptroff                u16 1 0
    push           1          i64 
    dotindex                  i64 
    jumpfalse      #15908     u64 
    push           1          i64 
    push           pc_genss.getstindex.d u64 
    push           30         
    popptroff                 u8 1 0
#15908: 
#15907: 
#15905: 
    push           pc_genss.getstindex.d u64 
    push           36         
    pushptroff                i32 1 0
    setret                    i64 
    jump           #15909     
#15909: 
    retfn                     i64 
End


Proc pc_genss.genrel32:
    param          pc_genss.genrel32.a u64 
    local          pc_genss.genrel32.d u64 
    procentry                 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.genrel32.a u64 
    callfn         &pc_genss.getdef u64 
    pop            pc_genss.genrel32.d u64 
    push           pc_genss.genrel32.d u64 
    push           0          u64 
    jumpne         #15911     u64 
    setargs                   1 0
    push           pc_genss.genrel32.a u64 
    pushptr                   i64 
    callproc       &pc_genss.gendword 
    jump           #15912     
#15911: 
    push           pc_genss.genrel32.d u64 
    push           29         
    pushptroff                u8 1 0
    push           2          i64 
    casejumpeq     #15913     i64 0
    push           1          i64 
    casejumpeq     #15914     i64 0
    popstack                  i64 
    jump           #15915     
#15913: 
    push           pc_genss.genrel32.d u64 
    push           30         
    pushptroff                u8 1 0
    push           pc_genss.currseg i64 
    jumpeq         #15916     i64 
    setargs                   1 0
    push           "Rel label across segments" u64 
    callproc       &pci_mcl.axerror 
#15916: 
    setargs                   1 0
    push           pc_genss.genrel32.d u64 
    push           32         
    pushptroff                i32 1 0
    setargs                   1 0
    push           2          i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           4          i64 
    add                       i64 
    sub                       i64 
    push           pc_genss.genrel32.a u64 
    push           14         
    pushptroff                i32 1 0
    add                       i64 
    callproc       &pc_genss.gendword 
    jump           #15917     
#15914: 
    setargs                   4 0
    push           0          i64 
    push           4          i64 
    setargs                   1 0
    push           3          i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           pc_genss.genrel32.d u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_genss.addfwdref u64 
    push           pc_genss.genrel32.d u64 
    push           8          
    popptroff                 u64 1 0
    setargs                   1 0
    push           pc_genss.genrel32.a u64 
    push           14         
    pushptroff                i32 1 0
    callproc       &pc_genss.gendword 
    jump           #15917     
#15915: 
    setargs                   1 0
    push           pc_genss.genrel32.a u64 
    push           14         
    pushptroff                i32 1 0
    callproc       &pc_genss.gendword 
    setargs                   2 0
    push           pc_genss.genrel32.d u64 
    push           4          i64 
    callproc       &pc_genss.addrelocitem 
#15917: 
#15912: 
    retproc                   
End


Proc pc_genss.getdef: u64
    param          pc_genss.getdef.a u64 
    param          pc_genss.getdef.dneeded i64 
    local          pc_genss.getdef.d u64 
    procentry                 
    push           pc_genss.getdef.a u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    setjumpeq      #15919     i64 
    push           2          i64 
    setjumpne      #15920     i64 
#15919: 
    push           pc_genss.getdef.a u64 
    push           12         
    pushptroff                u8 1 0
    push           7          i64 
    casejumpeq     #15921     i64 0
    push           5          i64 
    casejumpeq     #15922     i64 0
    popstack                  i64 
    jump           #15923     
#15921: 
    push           pci_mcl.labeldeftable u64 
    push           pc_genss.getdef.a u64 
    pushptr                   i64 
    pushptroff                u64 8 -8
    setret                    u64 
    jump           #15924     
    jump           #15925     
#15922: 
    push           pc_genss.getdef.a u64 
    pushptr                   u64 
    pop            pc_genss.getdef.d u64 
    push           pc_genss.getdef.d u64 
    push           29         
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #15926     i64 
    push           pc_genss.getdef.d u64 
    push           46         
    pushptroff                u16 1 0
    push           1          i64 
    dotindex                  i64 
    jumptrue       #15927     u64 
    push           1          i64 
    push           pc_genss.getdef.d u64 
    push           29         
    popptroff                 u8 1 0
#15927: 
#15926: 
    push           pc_genss.getdef.d u64 
    setret                    u64 
    jump           #15924     
    jump           #15925     
#15923: 
#15925: 
#15920: 
    push           pc_genss.getdef.dneeded i64 
    jumpfalse      #15928     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pci_mcl.opndnames_ma 
    push           pc_genss.getdef.a u64 
    push           9          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pci_mcl.valtypenames 
    push           pc_genss.getdef.a u64 
    push           12         
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "getdef/no def" u64 
    callproc       &pci_mcl.axerror 
#15928: 
    push           0          u64 
    setret                    u64 
    jump           #15924     
#15924: 
    retfn                     u64 
End


Proc pc_genss.genabs32:
    param          pc_genss.genabs32.a u64 
    local          pc_genss.genabs32.d u64 
    procentry                 
    setargs                   2 0
    push           1          i64 
    push           pc_genss.genabs32.a u64 
    callfn         &pc_genss.getdef u64 
    pop            pc_genss.genabs32.d u64 
    push           pc_genss.genabs32.d u64 
    push           29         
    pushptroff                u8 1 0
    push           2          i64 
    casejumpeq     #15930     i64 0
    push           1          i64 
    casejumpeq     #15931     i64 0
    popstack                  i64 
    jump           #15932     
#15930: 
    setargs                   1 0
    push           pc_genss.genabs32.d u64 
    push           32         
    pushptroff                i32 1 0
    push           pc_genss.genabs32.a u64 
    push           14         
    pushptroff                i32 1 0
    add                       i64 
    callproc       &pc_genss.gendword 
    setargs                   2 0
    push           pc_genss.genabs32.d u64 
    push           2          i64 
    callproc       &pc_genss.addrelocitem 
    jump           #15933     
#15931: 
    setargs                   4 0
    push           pc_genss.currseg i64 
    push           2          i64 
    setargs                   1 0
    push           4          i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           pc_genss.genabs32.d u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_genss.addfwdref u64 
    push           pc_genss.genabs32.d u64 
    push           8          
    popptroff                 u64 1 0
    push           pc_genss.genabs32.d u64 
    push           16         
    pushptroff                u64 1 0
    jumpfalse      #15934     u64 
    push           pc_genss.genabs32.d u64 
    push           16         
    pushptroff                u64 1 0
    push           1          
    pushptroff                u8 1 0
    push           18         i64 
    setjumpeq      #15935     i64 
    push           19         i64 
    setjumpne      #15934     i64 
#15935: 
    setargs                   1 0
    push           pc_genss.genabs32.d u64 
    push           32         
    pushptroff                i32 1 0
    push           pc_genss.genabs32.a u64 
    push           14         
    pushptroff                i32 1 0
    add                       i64 
    callproc       &pc_genss.gendword 
    jump           #15936     
#15934: 
    setargs                   1 0
    push           pc_genss.genabs32.a u64 
    push           14         
    pushptroff                i32 1 0
    callproc       &pc_genss.gendword 
    setargs                   2 0
    push           pc_genss.genabs32.d u64 
    push           2          i64 
    callproc       &pc_genss.addrelocitem 
#15936: 
    jump           #15933     
#15932: 
    setargs                   1 0
    push           pc_genss.genabs32.a u64 
    push           14         
    pushptroff                i32 1 0
    callproc       &pc_genss.gendword 
    setargs                   2 0
    push           pc_genss.genabs32.d u64 
    push           2          i64 
    callproc       &pc_genss.addrelocitem 
#15933: 
#15937: 
    retproc                   
End


Proc pc_genss.genabs64:
    param          pc_genss.genabs64.a u64 
    local          pc_genss.genabs64.d u64 
    procentry                 
    setargs                   2 0
    push           1          i64 
    push           pc_genss.genabs64.a u64 
    callfn         &pc_genss.getdef u64 
    pop            pc_genss.genabs64.d u64 
    push           pc_genss.genabs64.d u64 
    push           29         
    pushptroff                u8 1 0
    push           2          i64 
    casejumpeq     #15939     i64 0
    push           1          i64 
    casejumpeq     #15940     i64 0
    popstack                  i64 
    jump           #15941     
#15939: 
    setargs                   1 0
    push           pc_genss.genabs64.d u64 
    push           32         
    pushptroff                i32 1 0
    push           pc_genss.genabs64.a u64 
    push           14         
    pushptroff                i32 1 0
    add                       i64 
    callproc       &pc_genss.genqword 
    setargs                   2 0
    push           pc_genss.genabs64.d u64 
    push           1          i64 
    callproc       &pc_genss.addrelocitem 
    jump           #15942     
#15940: 
    setargs                   4 0
    push           pc_genss.currseg i64 
    push           1          i64 
    setargs                   1 0
    push           5          i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           pc_genss.genabs64.d u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_genss.addfwdref u64 
    push           pc_genss.genabs64.d u64 
    push           8          
    popptroff                 u64 1 0
    push           pc_genss.genabs64.d u64 
    push           16         
    pushptroff                u64 1 0
    jumpfalse      #15943     u64 
    push           pc_genss.genabs64.d u64 
    push           16         
    pushptroff                u64 1 0
    push           1          
    pushptroff                u8 1 0
    push           18         i64 
    setjumpeq      #15944     i64 
    push           19         i64 
    setjumpne      #15943     i64 
#15944: 
    setargs                   1 0
    push           pc_genss.genabs64.d u64 
    push           32         
    pushptroff                i32 1 0
    push           pc_genss.genabs64.a u64 
    push           14         
    pushptroff                i32 1 0
    add                       i64 
    callproc       &pc_genss.genqword 
    jump           #15945     
#15943: 
    setargs                   1 0
    push           pc_genss.genabs64.a u64 
    push           14         
    pushptroff                i32 1 0
    callproc       &pc_genss.genqword 
    setargs                   2 0
    push           pc_genss.genabs64.d u64 
    push           1          i64 
    callproc       &pc_genss.addrelocitem 
#15945: 
    jump           #15942     
#15941: 
    setargs                   1 0
    push           pc_genss.genabs64.a u64 
    push           14         
    pushptroff                i32 1 0
    callproc       &pc_genss.genqword 
    setargs                   2 0
    push           pc_genss.genabs64.d u64 
    push           1          i64 
    callproc       &pc_genss.addrelocitem 
#15942: 
#15946: 
    retproc                   
End


Proc pc_genss.getrel32: i64
    param          pc_genss.getrel32.d u64 
    param          pc_genss.getrel32.offset i64 
    procentry                 
    startmult                 
    push           pc_genss.getrel32.d u64 
    push           29         
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #15948     i64 
    push           pc_genss.getrel32.d u64 
    push           30         
    pushptroff                u8 1 0
    push           pc_genss.currseg i64 
    jumpeq         #15949     i64 
    setargs                   1 0
    push           "Rel label across segments2" u64 
    callproc       &pci_mcl.axerror 
#15949: 
    push           pc_genss.getrel32.d u64 
    push           32         
    pushptroff                i32 1 0
    push           pc_genss.getrel32.offset i64 
    push           1          i64 
    add                       i64 
    sub                       i64 
    resetmult                 
    jump           #15950     
#15948: 
    push           2147483647 i64 
    endmult                   
#15950: 
    setret                    i64 
    jump           #15951     
#15951: 
    retfn                     i64 
End


Proc pc_genss.dofwdrefs:
    param          pc_genss.dofwdrefs.d u64 
    local          pc_genss.dofwdrefs.f u64 
    local          pc_genss.dofwdrefs.offset i64 
    local          pc_genss.dofwdrefs.seg i64 
    local          pc_genss.dofwdrefs.p8 u64 
    local          pc_genss.dofwdrefs.p32 u64 
    local          pc_genss.dofwdrefs.p64 u64 
    local          pc_genss.dofwdrefs.data u64 
    procentry                 
    push           pc_genss.dofwdrefs.d u64 
    push           8          
    pushptroff                u64 1 0
    push           0          u64 
    jumpne         #15953     u64 
    jump           #15954     
#15953: 
    push           pc_genss.dofwdrefs.d u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_genss.dofwdrefs.f u64 
    jump           #15955     
#15956: 
    push           pc_genss.dofwdrefs.f u64 
    push           8          
    pushptroff                i32 1 0
    pop            pc_genss.dofwdrefs.offset i64 
    push           pc_genss.dofwdrefs.f u64 
    push           12         
    pushptroff                i16 1 0
    push           4          i64 
    casejumpeq     #15957     i64 0
    push           2          i64 
    casejumpeq     #15958     i64 0
    push           1          i64 
    casejumpeq     #15958     i64 0
    push           6          i64 
    casejumpeq     #15959     i64 0
    popstack                  i64 
    jump           #15960     
#15957: 
    setargs                   2 0
    push           pc_genss.dofwdrefs.offset i64 
    push           pc_genss.currdata u64 
    callfn         &pc_genss.bufferelemptr u64 
    pop            pc_genss.dofwdrefs.p32 u64 
    push           pc_genss.dofwdrefs.d u64 
    push           32         
    pushptroff                i32 1 0
    push           pc_genss.dofwdrefs.offset i64 
    sub                       i64 
    push           4          i64 
    sub                       i64 
    push           pc_genss.dofwdrefs.p32 u64 
    popptr                    i32 
    jump           #15961     
#15958: 
    push           pc_genss.dofwdrefs.f u64 
    push           14         
    pushptroff                i16 1 0
    push           1          i64 
    casejumpeq     #15962     i64 0
    push           3          i64 
    casejumpeq     #15963     i64 0
    push           2          i64 
    casejumpeq     #15964     i64 0
    popstack                  i64 
    jump           #15965     
#15962: 
    push           pci_mcl.ss_code u64 
    pop            pc_genss.dofwdrefs.data u64 
    jump           #15966     
#15963: 
    setargs                   1 0
    push           "Fwd ref in zdata" u64 
    callproc       &pci_mcl.axerror 
    jump           #15966     
#15964: 
    push           pci_mcl.ss_idata u64 
    pop            pc_genss.dofwdrefs.data u64 
    jump           #15966     
#15965: 
#15966: 
    setargs                   2 0
    push           pc_genss.dofwdrefs.offset i64 
    push           pc_genss.dofwdrefs.data u64 
    callfn         &pc_genss.bufferelemptr u64 
    pop            pc_genss.dofwdrefs.p32 u64 
    push           pc_genss.dofwdrefs.f u64 
    push           12         
    pushptroff                i16 1 0
    push           2          i64 
    jumpne         #15967     i64 
    push           pc_genss.dofwdrefs.p32 u64 
    pushptr                   i32 
    push           pc_genss.dofwdrefs.d u64 
    push           32         
    pushptroff                i32 1 0
    add                       i64 
    push           pc_genss.dofwdrefs.p32 u64 
    popptr                    i32 
    jump           #15968     
#15967: 
    push           pc_genss.dofwdrefs.p32 u64 
    pop            pc_genss.dofwdrefs.p64 u64 
    push           pc_genss.dofwdrefs.p64 u64 
    pushptr                   i64 
    push           pc_genss.dofwdrefs.d u64 
    push           32         
    pushptroff                i32 1 0
    add                       i64 
    push           pc_genss.dofwdrefs.p64 u64 
    popptr                    i64 
#15968: 
    jump           #15961     
#15959: 
    setargs                   2 0
    push           pc_genss.dofwdrefs.offset i64 
    push           pc_genss.currdata u64 
    callfn         &pc_genss.bufferelemptr u64 
    pop            pc_genss.dofwdrefs.p8 u64 
    push           pc_genss.dofwdrefs.d u64 
    push           32         
    pushptroff                i32 1 0
    push           pc_genss.dofwdrefs.offset i64 
    sub                       i64 
    push           1          i64 
    sub                       i64 
    push           pc_genss.dofwdrefs.p8 u64 
    popptr                    u8 
    jump           #15961     
#15960: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pc_objdecls.relocnames 
    push           pc_genss.dofwdrefs.f u64 
    push           12         
    pushptroff                i16 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_genss.dofwdrefs.d u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "DOFWDREFS/CAN'T DO RELTYPE" u64 
    callproc       &pci_mcl.axerror 
#15961: 
    push           pc_genss.dofwdrefs.f u64 
    pushptr                   u64 
    pop            pc_genss.dofwdrefs.f u64 
#15955: 
    push           pc_genss.dofwdrefs.f u64 
    jumptrue       #15956     u64 
#15969: 
#15954: 
    retproc                   
End


Proc pc_genss.genrex:
    procentry                 
    push           pc_genss.sizeoverride i64 
    jumpfalse      #15971     i64 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
#15971: 
    push           pc_genss.addroverride i64 
    jumpfalse      #15972     i64 
    setargs                   1 0
    push           103        i64 
    callproc       &pc_genss.genbyte 
#15972: 
    push           pc_genss.rex i64 
    jumpfalse      #15973     i64 
    push           pc_genss.rex i64 
    push           64         i64 
    jumpge         #15974     i64 
    setargs                   1 0
    push           64         i64 
    push           pc_genss.rex i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    jump           #15975     
#15974: 
    setargs                   1 0
    push           pc_genss.rex i64 
    callproc       &pc_genss.genbyte 
#15975: 
#15973: 
#15976: 
    retproc                   
End


Proc pc_genss.isbytesized: i64
    param          pc_genss.isbytesized.x i64 
    procentry                 
    startmult                 
    push           -128       i64 
    push           pc_genss.isbytesized.x i64 
    jumpgt         #15978     i64 
    push           pc_genss.isbytesized.x i64 
    push           127        i64 
    jumpgt         #15978     i64 
    push           1          
    resetmult                 
    jump           #15979     
#15978: 
    push           0          
    endmult                   
#15979: 
    setret                    i64 
    jump           #15980     
#15980: 
    retfn                     i64 
End


Proc pc_genss.isdwordsized: i64
    param          pc_genss.isdwordsized.x i64 
    procentry                 
    startmult                 
    push           -2147483648 i64 
    push           pc_genss.isdwordsized.x i64 
    jumpgt         #15982     i64 
    push           pc_genss.isdwordsized.x i64 
    push           2147483647 i64 
    jumpgt         #15982     i64 
    push           1          
    resetmult                 
    jump           #15983     
#15982: 
    push           0          
    endmult                   
#15983: 
    setret                    i64 
    jump           #15984     
#15984: 
    retfn                     i64 
End


Proc pc_genss.do_push:
    param          pc_genss.do_push.a u64 
    local          pc_genss.do_push.code i64 
    local          pc_genss.do_push.am i64 
    procentry                 
    push           pc_genss.do_push.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #15986     i64 0
    push           2          i64 
    casejumpeq     #15987     i64 0
    push           3          i64 
    casejumpeq     #15988     i64 0
    popstack                  i64 
    jump           #15989     
#15986: 
    push           pc_genss.do_push.a u64 
    push           8          
    pushptroff                u8 1 0
    push           8          i64 
    jumpeq         #15990     i64 
    setargs                   1 0
    push           "pushreg not 64-bit" u64 
    callproc       &pci_mcl.axerror 
#15990: 
    push           &pci_mcl.regcodes 
    push           pc_genss.do_push.a u64 
    push           10         
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    pop            pc_genss.do_push.code i64 
    push           pc_genss.do_push.code i64 
    push           8          i64 
    jumplt         #15991     i64 
    push           1          i64 
    pop            pc_genss.rex i64 
    push           &pc_genss.do_push.code 
    push           7          i64 
    iandto                    i64 
#15991: 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           80         i64 
    push           pc_genss.do_push.code i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    jump           #15992     
#15987: 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_push.a u64 
    callfn         &pc_genss.getdef u64 
    jumpfalse      #15993     u64 
    setargs                   1 0
    push           104        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           4          i64 
    push           pc_genss.do_push.a u64 
    callproc       &pc_genss.genopnd 
    jump           #15994     
#15993: 
    setargs                   1 0
    push           pc_genss.do_push.a u64 
    pushptr                   i64 
    callfn         &pc_genss.isbytesized i64 
    jumpfalse      #15995     i64 
    setargs                   1 0
    push           106        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_push.a u64 
    pushptr                   i64 
    callproc       &pc_genss.genbyte 
    jump           #15994     
#15995: 
    setargs                   1 0
    push           pc_genss.do_push.a u64 
    pushptr                   i64 
    callfn         &pc_genss.isdwordsized i64 
    jumpfalse      #15996     i64 
    setargs                   1 0
    push           104        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_push.a u64 
    pushptr                   i64 
    callproc       &pc_genss.gendword 
    jump           #15994     
#15996: 
    setargs                   1 0
    push           "push imm value too large" u64 
    callproc       &pci_mcl.axerror 
#15994: 
    jump           #15992     
#15988: 
    push           pc_genss.do_push.a u64 
    push           8          
    pushptroff                u8 1 0
    push           8          i64 
    jumpeq         #15997     i64 
    setargs                   1 0
    push           "push not 64-bit" u64 
    callproc       &pci_mcl.axerror 
#15997: 
    setargs                   2 0
    push           6          i64 
    push           pc_genss.do_push.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_push.am i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           255        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_push.am i64 
    push           pc_genss.do_push.a u64 
    callproc       &pc_genss.genamode 
    jump           #15992     
#15989: 
    setargs                   1 0
    push           "push opnd?" u64 
    callproc       &pci_mcl.axerror 
#15992: 
#15998: 
    retproc                   
End


Proc pc_genss.do_pop:
    param          pc_genss.do_pop.a u64 
    local          pc_genss.do_pop.code i64 
    local          pc_genss.do_pop.am i64 
    procentry                 
    push           pc_genss.do_pop.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #16000     i64 0
    push           3          i64 
    casejumpeq     #16001     i64 0
    popstack                  i64 
    jump           #16002     
#16000: 
    push           pc_genss.do_pop.a u64 
    push           8          
    pushptroff                u8 1 0
    push           8          i64 
    jumpeq         #16003     i64 
    setargs                   1 0
    push           "popreg not 64-bit" u64 
    callproc       &pci_mcl.axerror 
#16003: 
    push           &pci_mcl.regcodes 
    push           pc_genss.do_pop.a u64 
    push           10         
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    pop            pc_genss.do_pop.code i64 
    push           pc_genss.do_pop.code i64 
    push           8          i64 
    jumplt         #16004     i64 
    push           1          i64 
    pop            pc_genss.rex i64 
    push           &pc_genss.do_pop.code 
    push           7          i64 
    iandto                    i64 
#16004: 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           88         i64 
    push           pc_genss.do_pop.code i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    jump           #16005     
#16001: 
    push           pc_genss.do_pop.a u64 
    push           8          
    pushptroff                u8 1 0
    push           8          i64 
    jumpeq         #16006     i64 
    setargs                   1 0
    push           "pop not 64-bit" u64 
    callproc       &pci_mcl.axerror 
#16006: 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_pop.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_pop.am i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           143        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_pop.am i64 
    push           pc_genss.do_pop.a u64 
    callproc       &pc_genss.genamode 
    jump           #16005     
#16002: 
    setargs                   1 0
    push           "pop opnd?" u64 
    callproc       &pci_mcl.axerror 
#16005: 
#16007: 
    retproc                   
End


Proc pc_genss.do_inc:
    param          pc_genss.do_inc.a u64 
    param          pc_genss.do_inc.code i64 
    local          pc_genss.do_inc.opc i64 
    local          pc_genss.do_inc.am i64 
    procentry                 
    startmult                 
    push           pc_genss.do_inc.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #16009     i64 
    push           254        i64 
    resetmult                 
    jump           #16010     
#16009: 
    push           255        i64 
    endmult                   
#16010: 
    pop            pc_genss.do_inc.opc i64 
    push           pc_genss.do_inc.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #16011     i64 0
    push           3          i64 
    casejumpeq     #16011     i64 0
    popstack                  i64 
    jump           #16012     
#16011: 
    setargs                   2 0
    push           pc_genss.do_inc.code i64 
    push           pc_genss.do_inc.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_inc.am i64 
    setargs                   1 0
    push           pc_genss.do_inc.a u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_inc.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           pc_genss.do_inc.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_inc.am i64 
    push           pc_genss.do_inc.a u64 
    callproc       &pc_genss.genamode 
    jump           #16013     
#16012: 
    setargs                   1 0
    push           "inc/opnd?" u64 
    callproc       &pci_mcl.axerror 
#16013: 
#16014: 
    retproc                   
End


Proc pc_genss.do_neg:
    param          pc_genss.do_neg.a u64 
    param          pc_genss.do_neg.code i64 
    local          pc_genss.do_neg.opc i64 
    local          pc_genss.do_neg.am i64 
    procentry                 
    startmult                 
    push           pc_genss.do_neg.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #16016     i64 
    push           246        i64 
    resetmult                 
    jump           #16017     
#16016: 
    push           247        i64 
    endmult                   
#16017: 
    pop            pc_genss.do_neg.opc i64 
    push           pc_genss.do_neg.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #16018     i64 0
    push           3          i64 
    casejumpeq     #16018     i64 0
    popstack                  i64 
    jump           #16019     
#16018: 
    setargs                   2 0
    push           pc_genss.do_neg.code i64 
    push           pc_genss.do_neg.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_neg.am i64 
    setargs                   1 0
    push           pc_genss.do_neg.a u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_neg.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           pc_genss.do_neg.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_neg.am i64 
    push           pc_genss.do_neg.a u64 
    callproc       &pc_genss.genamode 
    jump           #16020     
#16019: 
    setargs                   1 0
    push           "neg/div/etc opnd?" u64 
    callproc       &pci_mcl.axerror 
#16020: 
#16021: 
    retproc                   
End


Proc pc_genss.genamode:
    param          pc_genss.genamode.a u64 
    param          pc_genss.genamode.am i64 
    local          pc_genss.genamode.sib i64 
    local          pc_genss.genamode.mode i64 
    local          pc_genss.genamode.dispsize i64 
    local          pc_genss.genamode.offset i64 
    local          pc_genss.genamode.d u64 
    procentry                 
    push           pc_genss.genamode.am i64 
    push           16         i64 
    shr                       i64 
    pop            pc_genss.genamode.sib i64 
    push           pc_genss.genamode.am i64 
    push           8          i64 
    shr                       i64 
    push           255        i64 
    iand                      i64 
    pop            pc_genss.genamode.mode i64 
    push           pc_genss.genamode.am i64 
    push           255        i64 
    iand                      i64 
    pop            pc_genss.genamode.dispsize i64 
    setargs                   1 0
    push           pc_genss.genamode.mode i64 
    callproc       &pc_genss.genbyte 
    push           pc_genss.genamode.sib i64 
    push           0          i64 
    jumplt         #16023     i64 
    setargs                   1 0
    push           pc_genss.genamode.sib i64 
    callproc       &pc_genss.genbyte 
#16023: 
    push           pc_genss.genamode.dispsize i64 
    push           0          i64 
    casejumpeq     #16024     i64 0
    push           1          i64 
    casejumpeq     #16025     i64 0
    push           4          i64 
    casejumpeq     #16026     i64 0
    popstack                  i64 
    jump           #16027     
#16024: 
    jump           #16028     
#16025: 
    setargs                   2 0
    push           &pc_genss.genamode.offset 
    push           pc_genss.genamode.a u64 
    callproc       &pc_genss.getdispsize 
    setargs                   1 0
    push           pc_genss.genamode.offset i64 
    callproc       &pc_genss.genbyte 
    jump           #16028     
#16026: 
    push           pc_genss.genamode.a u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    casejumpeq     #16029     i64 0
    popstack                  i64 
    jump           #16030     
#16029: 
    push           pc_genss.genamode.a u64 
    push           12         
    pushptroff                u8 1 0
    push           5          i64 
    casejumpeq     #16031     i64 0
    push           7          i64 
    casejumpeq     #16031     i64 0
    push           0          i64 
    casejumpeq     #16032     i64 0
    popstack                  i64 
    jump           #16033     
#16031: 
    setargs                   1 0
    push           pc_genss.genamode.a u64 
    callproc       &pc_genss.genabs32 
    jump           #16034     
#16032: 
    setargs                   2 0
    push           &pc_genss.genamode.offset 
    push           pc_genss.genamode.a u64 
    callproc       &pc_genss.getdispsize 
    setargs                   1 0
    push           pc_genss.genamode.offset i64 
    callproc       &pc_genss.gendword 
    jump           #16034     
#16033: 
    setargs                   1 0
    push           "genam/3"  u64 
    callproc       &pci_mcl.axerror 
#16034: 
    jump           #16035     
#16030: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pci_mcl.opndnames_ma 
    push           pc_genss.genamode.a u64 
    push           9          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "GENAMODE/MODE?" u64 
    callproc       &pci_mcl.axerror 
#16035: 
    jump           #16028     
#16027: 
    setargs                   1 0
    push           "genamode size 2/8" u64 
    callproc       &pci_mcl.axerror 
#16028: 
#16036: 
    retproc                   
End


Proc pc_genss.makemodrm: i64
    param          pc_genss.makemodrm.mode i64 
    param          pc_genss.makemodrm.opc i64 
    param          pc_genss.makemodrm.rm i64 
    procentry                 
    push           pc_genss.makemodrm.mode i64 
    push           6          i64 
    shl                       i64 
    push           pc_genss.makemodrm.opc i64 
    push           3          i64 
    shl                       i64 
    add                       i64 
    push           pc_genss.makemodrm.rm i64 
    add                       i64 
    setret                    i64 
    jump           #16038     
#16038: 
    retfn                     i64 
End


Proc pc_genss.setopsize:
    param          pc_genss.setopsize.a u64 
    procentry                 
    push           pc_genss.setopsize.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #16040     i64 0
    push           2          i64 
    casejumpeq     #16041     i64 0
    push           8          i64 
    casejumpeq     #16042     i64 0
    push           4          i64 
    casejumpeq     #16043     i64 0
    popstack                  i64 
    jump           #16044     
#16040: 
    jump           #16045     
#16041: 
    push           1          i64 
    pop            pc_genss.sizeoverride i64 
    jump           #16045     
#16042: 
    push           &pc_genss.rex 
    push           8          i64 
    iorto                     i64 
    jump           #16045     
#16043: 
    jump           #16045     
#16044: 
    setargs                   1 0
    push           "Operand size not set" u64 
    callproc       &pci_mcl.axerror 
#16045: 
#16046: 
    retproc                   
End


Proc pc_genss.setaddrsize:
    param          pc_genss.setaddrsize.a u64 
    procentry                 
    push           pc_genss.setaddrsize.a u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #16048     i64 
    push           pc_genss.setaddrsize.a u64 
    push           18         
    pushptroff                u8 1 0
    push           4          i64 
    jumpne         #16048     i64 
    push           1          i64 
    pop            pc_genss.addroverride i64 
#16048: 
#16049: 
    retproc                   
End


Proc pc_genss.getdispsize: i64
    param          pc_genss.getdispsize.a u64 
    param          pc_genss.getdispsize.offset u64 
    local          pc_genss.getdispsize.d u64 
    procentry                 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.getdispsize.a u64 
    callfn         &pc_genss.getdef u64 
    pop            pc_genss.getdispsize.d u64 
    push           pc_genss.getdispsize.a u64 
    push           14         
    pushptroff                i32 1 0
    push           pc_genss.getdispsize.offset u64 
    popptr                    i64 
    push           pc_genss.getdispsize.d u64 
    jumpfalse      #16051     u64 
    push           pc_genss.getdispsize.d u64 
    push           16         
    pushptroff                u64 1 0
    jumpfalse      #16052     u64 
    push           pc_genss.getdispsize.d u64 
    push           16         
    pushptroff                u64 1 0
    push           1          
    pushptroff                u8 1 0
    push           18         i64 
    setjumpeq      #16053     i64 
    push           19         i64 
    setjumpne      #16052     i64 
#16053: 
    push           pc_genss.getdispsize.offset u64 
    push           pc_genss.getdispsize.d u64 
    push           32         
    pushptroff                i32 1 0
    addto                     i64 
    jump           #16054     
#16052: 
    push           4          i64 
    setret                    i64 
    jump           #16055     
#16054: 
#16051: 
    startmult                 
    push           pc_genss.getdispsize.offset u64 
    pushptr                   i64 
    jumpfalse      #16056     i64 
    startmult                 
    setargs                   1 0
    push           pc_genss.getdispsize.offset u64 
    pushptr                   i64 
    callfn         &pc_genss.isbytesized i64 
    jumpfalse      #16057     i64 
    push           1          i64 
    resetmult                 
    jump           #16058     
#16057: 
    push           4          i64 
    endmult                   
#16058: 
    resetmult                 
    jump           #16059     
#16056: 
    push           0          i64 
    endmult                   
#16059: 
    setret                    i64 
    jump           #16055     
#16055: 
    retfn                     i64 
End


Proc pc_genss.genrm: i64
    param          pc_genss.genrm.a u64 
    param          pc_genss.genrm.opc i64 
    local          pc_genss.genrm.mode i64 
    local          pc_genss.genrm.rm i64 
    local          pc_genss.genrm.scale i64 
    local          pc_genss.genrm.dispsize i64 
    local          pc_genss.genrm.sib i64 
    local          pc_genss.genrm.index i64 
    local          pc_genss.genrm.base i64 
    local          pc_genss.genrm.reg i64 
    local          pc_genss.genrm.regix i64 
    local          pc_genss.genrm.code i64 
    local          pc_genss.genrm.offset i64 
    procentry                 
    push           0          i64 
    store          pc_genss.genrm.rm i64 
    pop            pc_genss.genrm.mode i64 
    push           0          i64 
    pop            pc_genss.genrm.scale i64 
    push           0          i64 
    pop            pc_genss.genrm.dispsize i64 
    push           -1         i64 
    pop            pc_genss.genrm.sib i64 
    push           pc_genss.genrm.a u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #16061     i64 
    push           pc_genss.genrm.a u64 
    push           18         
    pushptroff                u8 1 0
    push           4          i64 
    jumpne         #16061     i64 
    push           1          i64 
    pop            pc_genss.addroverride i64 
#16061: 
    push           pc_genss.genrm.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #16062     i64 0
    push           3          i64 
    casejumpeq     #16063     i64 0
    push           5          i64 
    casejumpeq     #16064     i64 0
    popstack                  i64 
    jump           #16065     
#16062: 
    setargs                   1 0
    push           pc_genss.genrm.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcodeb i64 
    pop            pc_genss.genrm.code i64 
    setargs                   3 0
    push           pc_genss.genrm.dispsize i64 
    push           pc_genss.genrm.sib i64 
    setargs                   3 0
    push           pc_genss.genrm.code i64 
    push           pc_genss.genrm.opc i64 
    push           3          i64 
    callfn         &pc_genss.makemodrm i64 
    callfn         &pc_genss.makeam i64 
    setret                    i64 
    jump           #16066     
    jump           #16067     
#16063: 
    jump           #16067     
#16064: 
    setargs                   1 0
    push           pc_genss.genrm.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcodebx i64 
    pop            pc_genss.genrm.code i64 
    setargs                   3 0
    push           pc_genss.genrm.dispsize i64 
    push           pc_genss.genrm.sib i64 
    setargs                   3 0
    push           pc_genss.genrm.code i64 
    push           pc_genss.genrm.opc i64 
    push           3          i64 
    callfn         &pc_genss.makemodrm i64 
    callfn         &pc_genss.makeam i64 
    setret                    i64 
    jump           #16066     
    jump           #16067     
#16065: 
    setargs                   1 0
    push           "genrm not mem" u64 
    callproc       &pci_mcl.axerror 
#16067: 
    push           pc_genss.genrm.a u64 
    push           10         
    pushptroff                u8 1 0
    pop            pc_genss.genrm.reg i64 
    push           pc_genss.genrm.a u64 
    push           11         
    pushptroff                u8 1 0
    pop            pc_genss.genrm.regix i64 
    push           pc_genss.genrm.reg i64 
    push           pc_genss.genrm.regix i64 
    jumpne         #16068     i64 
    push           pc_genss.genrm.regix i64 
    push           0          i64 
    jumpne         #16068     i64 
    push           0          i64 
    pop            pc_genss.genrm.mode i64 
    push           4          i64 
    pop            pc_genss.genrm.rm i64 
    push           1          i64 
    pop            pc_genss.genrm.scale i64 
    push           4          i64 
    pop            pc_genss.genrm.index i64 
    push           5          i64 
    pop            pc_genss.genrm.base i64 
    push           4          i64 
    pop            pc_genss.genrm.dispsize i64 
    jump           #16069     
#16068: 
    push           pc_genss.genrm.a u64 
    push           13         
    pushptroff                u8 1 0
    push           1          i64 
    jumpgt         #16070     i64 
    push           pc_genss.genrm.regix i64 
    push           0          i64 
    jumpne         #16070     i64 
    setargs                   2 0
    push           &pc_genss.genrm.offset 
    push           pc_genss.genrm.a u64 
    callfn         &pc_genss.getdispsize i64 
    pop            pc_genss.genrm.dispsize i64 
    push           pc_genss.genrm.dispsize i64 
    jumpfalse      #16071     i64 
    startmult                 
    push           pc_genss.genrm.dispsize i64 
    push           1          i64 
    jumpne         #16072     i64 
    push           1          i64 
    resetmult                 
    jump           #16073     
#16072: 
    push           2          i64 
    endmult                   
#16073: 
    pop            pc_genss.genrm.mode i64 
#16071: 
    push           &pci_mcl.regcodes 
    push           pc_genss.genrm.reg i64 
    pushptroff                u8 1 0
    pop            pc_genss.genrm.rm i64 
    push           pc_genss.genrm.rm i64 
    push           4          i64 
    jumpeq         #16074     i64 
    push           pc_genss.genrm.rm i64 
    push           12         i64 
    jumpeq         #16074     i64 
    push           pc_genss.genrm.rm i64 
    pop            pc_genss.genrm.base i64 
    push           pc_genss.genrm.rm i64 
    push           5          i64 
    jumpeq         #16075     i64 
    push           pc_genss.genrm.rm i64 
    push           13         i64 
    jumpne         #16076     i64 
#16075: 
    push           pc_genss.genrm.dispsize i64 
    push           0          i64 
    jumpne         #16076     i64 
    push           1          i64 
    pop            pc_genss.genrm.mode i64 
    push           1          i64 
    pop            pc_genss.genrm.dispsize i64 
#16076: 
    push           0          i64 
    pop            pc_genss.genrm.index i64 
    jump           #16077     
#16074: 
    push           4          i64 
    pop            pc_genss.genrm.index i64 
    push           pc_genss.genrm.rm i64 
    pop            pc_genss.genrm.base i64 
    push           1          i64 
    pop            pc_genss.genrm.scale i64 
#16077: 
    jump           #16069     
#16070: 
    push           pc_genss.genrm.regix i64 
    jumpfalse      #16078     i64 
    push           pc_genss.genrm.reg i64 
    push           0          i64 
    jumpne         #16078     i64 
    push           4          i64 
    pop            pc_genss.genrm.dispsize i64 
    push           0          i64 
    pop            pc_genss.genrm.mode i64 
    push           4          i64 
    pop            pc_genss.genrm.rm i64 
    startmult                 
    push           pc_genss.genrm.a u64 
    push           13         
    pushptroff                u8 1 0
    jumpfalse      #16079     i64 
    push           pc_genss.genrm.a u64 
    push           13         
    pushptroff                u8 1 0
    resetmult                 
    jump           #16080     
#16079: 
    push           1          i64 
    endmult                   
#16080: 
    pop            pc_genss.genrm.scale i64 
    push           5          i64 
    pop            pc_genss.genrm.base i64 
    push           &pci_mcl.regcodes 
    push           pc_genss.genrm.regix i64 
    pushptroff                u8 1 0
    pop            pc_genss.genrm.index i64 
    push           pc_genss.genrm.regix i64 
    push           16         i64 
    jumpne         #16081     i64 
    setargs                   1 0
    push           "Scaled rstack?" u64 
    callproc       &pci_mcl.axerror 
#16081: 
    jump           #16069     
#16078: 
    setargs                   2 0
    push           &pc_genss.genrm.offset 
    push           pc_genss.genrm.a u64 
    callfn         &pc_genss.getdispsize i64 
    pop            pc_genss.genrm.dispsize i64 
    push           pc_genss.genrm.dispsize i64 
    jumpfalse      #16082     i64 
    startmult                 
    push           pc_genss.genrm.dispsize i64 
    push           1          i64 
    jumpne         #16083     i64 
    push           1          i64 
    resetmult                 
    jump           #16084     
#16083: 
    push           2          i64 
    endmult                   
#16084: 
    pop            pc_genss.genrm.mode i64 
#16082: 
    push           4          i64 
    pop            pc_genss.genrm.rm i64 
    startmult                 
    push           pc_genss.genrm.a u64 
    push           13         
    pushptroff                u8 1 0
    jumpfalse      #16085     i64 
    push           pc_genss.genrm.a u64 
    push           13         
    pushptroff                u8 1 0
    resetmult                 
    jump           #16086     
#16085: 
    push           1          i64 
    endmult                   
#16086: 
    pop            pc_genss.genrm.scale i64 
    push           pc_genss.genrm.reg i64 
    push           0          i64 
    jumpne         #16087     i64 
    push           5          i64 
    pop            pc_genss.genrm.base i64 
    jump           #16088     
#16087: 
    push           pc_genss.genrm.reg i64 
    push           15         i64 
    setjumpeq      #16089     i64 
    push           8          i64 
    setjumpne      #16090     i64 
#16089: 
    push           pc_genss.genrm.dispsize i64 
    push           0          i64 
    jumpne         #16090     i64 
    push           1          i64 
    pop            pc_genss.genrm.mode i64 
    push           1          i64 
    pop            pc_genss.genrm.dispsize i64 
#16090: 
    push           &pci_mcl.regcodes 
    push           pc_genss.genrm.reg i64 
    pushptroff                u8 1 0
    pop            pc_genss.genrm.base i64 
#16088: 
    push           pc_genss.genrm.regix i64 
    push           0          i64 
    jumpne         #16091     i64 
    push           4          i64 
    pop            pc_genss.genrm.index i64 
    jump           #16092     
#16091: 
    push           &pci_mcl.regcodes 
    push           pc_genss.genrm.regix i64 
    pushptroff                u8 1 0
    pop            pc_genss.genrm.index i64 
#16092: 
    push           pc_genss.genrm.regix i64 
    jumpfalse      #16093     i64 
    push           pc_genss.genrm.reg i64 
    jumptrue       #16093     i64 
    push           4          i64 
    pop            pc_genss.genrm.dispsize i64 
#16093: 
    push           pc_genss.genrm.regix i64 
    push           16         i64 
    jumpne         #16094     i64 
    push           pc_genss.genrm.scale i64 
    push           1          i64 
    jumple         #16094     i64 
    setargs                   1 0
    push           "Can't scale rstack" u64 
    callproc       &pci_mcl.axerror 
#16094: 
#16069: 
    push           pc_genss.genrm.index i64 
    push           8          i64 
    jumplt         #16095     i64 
    push           &pc_genss.rex 
    push           2          i64 
    iorto                     i64 
    push           &pc_genss.genrm.index 
    push           7          i64 
    iandto                    i64 
#16095: 
    push           pc_genss.genrm.base i64 
    push           8          i64 
    jumplt         #16096     i64 
    push           &pc_genss.rex 
    push           1          i64 
    iorto                     i64 
    push           &pc_genss.genrm.base 
    push           7          i64 
    iandto                    i64 
#16096: 
    push           pc_genss.genrm.scale i64 
    jumpfalse      #16097     i64 
    push           &pc_genss.genrm.scaletable 
    push           pc_genss.genrm.scale i64 
    pushptroff                i64 8 -8
    push           6          i64 
    shl                       i64 
    push           pc_genss.genrm.index i64 
    push           3          i64 
    shl                       i64 
    add                       i64 
    push           pc_genss.genrm.base i64 
    add                       i64 
    pop            pc_genss.genrm.sib i64 
#16097: 
    push           &pc_genss.genrm.rm 
    push           7          i64 
    iandto                    i64 
    setargs                   3 0
    push           pc_genss.genrm.dispsize i64 
    push           pc_genss.genrm.sib i64 
    setargs                   3 0
    push           pc_genss.genrm.rm i64 
    push           pc_genss.genrm.opc i64 
    push           pc_genss.genrm.mode i64 
    callfn         &pc_genss.makemodrm i64 
    callfn         &pc_genss.makeam i64 
    setret                    i64 
    jump           #16066     
#16066: 
    retfn                     i64 
End


Proc pc_genss.makeam: i64
    param          pc_genss.makeam.m i64 
    param          pc_genss.makeam.s i64 
    param          pc_genss.makeam.d i64 
    procentry                 
    push           pc_genss.makeam.s i64 
    push           16         i64 
    shl                       i64 
    push           pc_genss.makeam.m i64 
    push           8          i64 
    shl                       i64 
    add                       i64 
    push           pc_genss.makeam.d i64 
    add                       i64 
    setret                    i64 
    jump           #16099     
#16099: 
    retfn                     i64 
End


Proc pc_genss.do_arith:
    param          pc_genss.do_arith.a u64 
    param          pc_genss.do_arith.b u64 
    param          pc_genss.do_arith.code i64 
    local          pc_genss.do_arith.am i64 
    local          pc_genss.do_arith.regcode i64 
    local          pc_genss.do_arith.opc i64 
    local          pc_genss.do_arith.dispsize i64 
    local          pc_genss.do_arith.x i64 
    procentry                 
    push           pc_genss.do_arith.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #16101     i64 0
    push           3          i64 
    casejumpeq     #16102     i64 0
    popstack                  i64 
    jump           #16103     
#16101: 
    push           pc_genss.do_arith.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #16104     i64 0
    push           3          i64 
    casejumpeq     #16104     i64 0
    push           2          i64 
    casejumpeq     #16105     i64 0
    popstack                  i64 
    jump           #16106     
#16104: 
    setargs                   1 0
    push           pc_genss.do_arith.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_arith.regcode i64 
    setargs                   2 0
    push           pc_genss.do_arith.regcode i64 
    push           pc_genss.do_arith.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_arith.am i64 
    setargs                   1 0
    push           pc_genss.do_arith.a u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_arith.b u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_arith.a u64 
    callproc       &pc_genss.setopsize 
    push           pc_genss.do_arith.code i64 
    push           3          i64 
    shl                       i64 
    startmult                 
    push           pc_genss.do_arith.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #16107     i64 
    push           2          i64 
    resetmult                 
    jump           #16108     
#16107: 
    push           3          i64 
    endmult                   
#16108: 
    ior                       i64 
    pop            pc_genss.do_arith.opc i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           pc_genss.do_arith.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_arith.am i64 
    push           pc_genss.do_arith.b u64 
    callproc       &pc_genss.genamode 
    jump           #16109     
#16105: 
!doregimm::
#16110: 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_arith.b u64 
    callfn         &pc_genss.getdef u64 
    jumpfalse      #16111     u64 
    push           pc_genss.do_arith.code i64 
    push           0          i64 
    jumplt         #16112     i64 
    push           pc_genss.do_arith.code i64 
    push           7          i64 
    jumple         #16113     i64 
#16112: 
    setargs                   1 0
    push           "non-add arith/label" u64 
    callproc       &pci_mcl.axerror 
#16113: 
    push           pc_genss.do_arith.a u64 
    push           8          
    pushptroff                u8 1 0
    push           4          i64 
    jumpge         #16114     i64 
    setargs                   1 0
    push           "add imm/size" u64 
    callproc       &pci_mcl.axerror 
#16114: 
    setargs                   2 0
    push           pc_genss.do_arith.code i64 
    push           pc_genss.do_arith.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_arith.am i64 
    setargs                   1 0
    push           pc_genss.do_arith.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           129        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_arith.am i64 
    push           pc_genss.do_arith.a u64 
    callproc       &pc_genss.genamode 
    setargs                   2 0
    push           4          i64 
    push           pc_genss.do_arith.b u64 
    callproc       &pc_genss.genopnd 
    jump           #16115     
#16111: 
    push           pc_genss.do_arith.b u64 
    pushptr                   i64 
    pop            pc_genss.do_arith.x i64 
    push           1          i64 
    pop            pc_genss.do_arith.dispsize i64 
    push           pc_genss.do_arith.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #16116     i64 
    push           128        i64 
    pop            pc_genss.do_arith.opc i64 
    jump           #16117     
#16116: 
    push           -128       i64 
    push           pc_genss.do_arith.x i64 
    jumpgt         #16118     i64 
    push           pc_genss.do_arith.x i64 
    push           127        i64 
    jumpgt         #16118     i64 
    push           131        i64 
    pop            pc_genss.do_arith.opc i64 
    jump           #16117     
#16118: 
    push           -2147483648 i64 
    push           pc_genss.do_arith.x i64 
    jumpgt         #16119     i64 
    push           pc_genss.do_arith.x i64 
    push           4294967295 i64 
    jumple         #16120     i64 
#16119: 
    setargs                   1 0
    push           "3:exceeding word32 value" u64 
    callproc       &pci_mcl.axerror 
#16120: 
    push           129        i64 
    pop            pc_genss.do_arith.opc i64 
    startmult                 
    push           pc_genss.do_arith.a u64 
    push           8          
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #16121     i64 
    push           2          i64 
    resetmult                 
    jump           #16122     
#16121: 
    push           4          i64 
    endmult                   
#16122: 
    pop            pc_genss.do_arith.dispsize i64 
#16117: 
    setargs                   2 0
    push           pc_genss.do_arith.code i64 
    push           pc_genss.do_arith.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_arith.am i64 
    setargs                   1 0
    push           pc_genss.do_arith.a u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_arith.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           pc_genss.do_arith.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_arith.am i64 
    push           pc_genss.do_arith.a u64 
    callproc       &pc_genss.genamode 
    push           pc_genss.do_arith.dispsize i64 
    push           1          i64 
    casejumpeq     #16123     i64 0
    push           2          i64 
    casejumpeq     #16124     i64 0
    push           4          i64 
    casejumpeq     #16125     i64 0
    popstack                  i64 
    jump           #16126     
#16123: 
    setargs                   1 0
    push           pc_genss.do_arith.x i64 
    callproc       &pc_genss.genbyte 
    jump           #16127     
#16124: 
    setargs                   1 0
    push           pc_genss.do_arith.x i64 
    callproc       &pc_genss.genword 
    jump           #16127     
#16125: 
    setargs                   1 0
    push           pc_genss.do_arith.x i64 
    callproc       &pc_genss.gendword 
    jump           #16127     
#16126: 
#16127: 
    jump           #16109     
#16106: 
    setargs                   1 0
    push           "ADD reg,???" u64 
    callproc       &pci_mcl.axerror 
#16109: 
    jump           #16128     
#16102: 
    push           pc_genss.do_arith.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #16129     i64 0
    push           2          i64 
    casejumpeq     #16130     i64 0
    popstack                  i64 
    jump           #16131     
#16129: 
    setargs                   1 0
    push           pc_genss.do_arith.b u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_arith.regcode i64 
    setargs                   2 0
    push           pc_genss.do_arith.regcode i64 
    push           pc_genss.do_arith.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_arith.am i64 
    setargs                   1 0
    push           pc_genss.do_arith.b u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_arith.b u64 
    callproc       &pc_genss.setopsize 
    push           pc_genss.do_arith.code i64 
    push           3          i64 
    shl                       i64 
    startmult                 
    push           pc_genss.do_arith.b u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #16132     i64 
    push           0          i64 
    resetmult                 
    jump           #16133     
#16132: 
    push           1          i64 
    endmult                   
#16133: 
    ior                       i64 
    pop            pc_genss.do_arith.opc i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           pc_genss.do_arith.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_arith.am i64 
    push           pc_genss.do_arith.a u64 
    callproc       &pc_genss.genamode 
    jump           #16134     
#16130: 
    jump           #16110     
    jump           #16134     
#16131: 
    setargs                   1 0
    push           "ADD mem,???" u64 
    callproc       &pci_mcl.axerror 
#16134: 
    jump           #16128     
#16103: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pci_mcl.opndnames_ma 
    push           pc_genss.do_arith.a u64 
    push           9          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Can't add to this opnd" u64 
    callproc       &pci_mcl.axerror 
#16128: 
#16115: 
    retproc                   
End


Proc pc_genss.do_mov:
    param          pc_genss.do_mov.a u64 
    param          pc_genss.do_mov.b u64 
    local          pc_genss.do_mov.regcode i64 
    local          pc_genss.do_mov.am i64 
    local          pc_genss.do_mov.value i64 
    procentry                 
    push           pc_genss.do_mov.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #16136     i64 0
    push           3          i64 
    casejumpeq     #16137     i64 0
    popstack                  i64 
    jump           #16138     
#16136: 
    push           pc_genss.do_mov.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #16139     i64 0
    push           3          i64 
    casejumpeq     #16139     i64 0
    push           2          i64 
    casejumpeq     #16140     i64 0
    popstack                  i64 
    jump           #16141     
#16139: 
    push           pc_genss.do_mov.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_mov.b u64 
    push           8          
    pushptroff                u8 1 0
    jumpeq         #16142     i64 
    push           pc_genss.do_mov.b u64 
    push           8          
    pushptroff                u8 1 0
    jumpfalse      #16142     i64 
    setargs                   1 0
    push           "1:Opnd size mismatch" u64 
    callproc       &pci_mcl.axerror 
#16142: 
    setargs                   1 0
    push           pc_genss.do_mov.a u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_mov.b u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_mov.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_mov.regcode i64 
    setargs                   2 0
    push           pc_genss.do_mov.regcode i64 
    push           pc_genss.do_mov.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_mov.am i64 
    setargs                   1 0
    push           pc_genss.do_mov.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    startmult                 
    push           pc_genss.do_mov.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #16143     i64 
    push           138        i64 
    resetmult                 
    jump           #16144     
#16143: 
    push           139        i64 
    endmult                   
#16144: 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_mov.am i64 
    push           pc_genss.do_mov.b u64 
    callproc       &pc_genss.genamode 
    jump           #16145     
#16140: 
    push           pc_genss.do_mov.b u64 
    pushptr                   i64 
    pop            pc_genss.do_mov.value i64 
    setargs                   1 0
    push           pc_genss.do_mov.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcodeb i64 
    pop            pc_genss.do_mov.regcode i64 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_mov.b u64 
    callfn         &pc_genss.getdef u64 
    jumpfalse      #16146     u64 
    push           pc_genss.do_mov.a u64 
    push           8          
    pushptroff                u8 1 0
    push           2          i64 
    jumpgt         #16146     i64 
    setargs                   1 0
    push           "mov imm?" u64 
    callproc       &pci_mcl.axerror 
#16146: 
    push           pc_genss.do_mov.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #16147     i64 0
    push           2          i64 
    casejumpeq     #16148     i64 0
    push           4          i64 
    casejumpeq     #16149     i64 0
    popstack                  i64 
    jump           #16150     
#16147: 
    setargs                   1 0
    push           pc_genss.do_mov.a u64 
    callproc       &pc_genss.checkhighreg 
    push           pc_genss.do_mov.a u64 
    push           10         
    pushptroff                u8 1 0
    push           6          i64 
    casejumpeq     #16151     i64 0
    push           4          i64 
    casejumpeq     #16151     i64 0
    push           15         i64 
    casejumpeq     #16151     i64 0
    push           16         i64 
    casejumpeq     #16151     i64 0
    popstack                  i64 
    jump           #16152     
#16151: 
    push           &pc_genss.rex 
    push           64         i64 
    iorto                     i64 
    jump           #16153     
#16152: 
#16153: 
    push           -128       i64 
    push           pc_genss.do_mov.value i64 
    jumpgt         #16154     i64 
    push           pc_genss.do_mov.value i64 
    push           255        i64 
    jumple         #16155     i64 
#16154: 
    setargs                   1 0
    push           "exceeding byte value" u64 
    callproc       &pci_mcl.axerror 
#16155: 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           176        i64 
    push           pc_genss.do_mov.regcode i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_mov.value i64 
    callproc       &pc_genss.genbyte 
    jump           #16156     
#16148: 
    push           -32768     i64 
    push           pc_genss.do_mov.value i64 
    jumpgt         #16157     i64 
    push           pc_genss.do_mov.value i64 
    push           65535      i64 
    jumple         #16158     i64 
#16157: 
    setargs                   1 0
    push           "exceeding word16 value" u64 
    callproc       &pci_mcl.axerror 
#16158: 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           184        i64 
    push           pc_genss.do_mov.regcode i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_mov.value i64 
    callproc       &pc_genss.genword 
    jump           #16156     
#16149: 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_mov.b u64 
    callfn         &pc_genss.getdef u64 
    jumpfalse      #16159     u64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           184        i64 
    push           pc_genss.do_mov.regcode i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           4          i64 
    push           pc_genss.do_mov.b u64 
    callproc       &pc_genss.genopnd 
    jump           #16160     
#16159: 
    push           -2147483648 i64 
    push           pc_genss.do_mov.value i64 
    jumpgt         #16161     i64 
    push           pc_genss.do_mov.value i64 
    push           4294967295 i64 
    truncate                  i64 u32 
    jumple         #16162     i64 
#16161: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           pc_genss.do_mov.value i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           pc_genss.do_mov.value u64 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "1:exceeding word32 value" u64 
    callproc       &pci_mcl.axerror 
#16162: 
!doreg32::
#16163: 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           184        i64 
    push           pc_genss.do_mov.regcode i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_mov.value i64 
    callproc       &pc_genss.gendword 
#16160: 
    jump           #16156     
#16150: 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_mov.b u64 
    callfn         &pc_genss.getdef u64 
    jumpfalse      #16164     u64 
    push           &pc_genss.rex 
    push           8          i64 
    iorto                     i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           184        i64 
    push           pc_genss.do_mov.regcode i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           8          i64 
    push           pc_genss.do_mov.b u64 
    callproc       &pc_genss.genopnd 
    jump           #16165     
#16164: 
    push           pc_genss.do_mov.value i64 
    push           0          i64 
    jumplt         #16166     i64 
    push           pc_genss.do_mov.value i64 
    push           4294967295 i64 
    jumpgt         #16166     i64 
    jump           #16163     
#16166: 
    push           &pc_genss.rex 
    push           8          i64 
    iorto                     i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           184        i64 
    push           pc_genss.do_mov.regcode i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_mov.value i64 
    callproc       &pc_genss.genqword 
#16165: 
#16156: 
    jump           #16145     
#16141: 
    setargs                   1 0
    push           "MOV REG/??" u64 
    callproc       &pci_mcl.axerror 
#16145: 
    jump           #16167     
#16137: 
    push           pc_genss.do_mov.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #16168     i64 0
    push           2          i64 
    casejumpeq     #16169     i64 0
    popstack                  i64 
    jump           #16170     
#16168: 
    push           pc_genss.do_mov.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_mov.b u64 
    push           8          
    pushptroff                u8 1 0
    jumpeq         #16171     i64 
    push           pc_genss.do_mov.a u64 
    push           8          
    pushptroff                u8 1 0
    jumpfalse      #16171     i64 
    setargs                   1 0
    push           "2:Opnd size mismatch" u64 
    callproc       &pci_mcl.axerror 
#16171: 
    setargs                   1 0
    push           pc_genss.do_mov.b u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_mov.regcode i64 
    setargs                   1 0
    push           pc_genss.do_mov.b u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   2 0
    push           pc_genss.do_mov.regcode i64 
    push           pc_genss.do_mov.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_mov.am i64 
    setargs                   1 0
    push           pc_genss.do_mov.b u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    startmult                 
    push           pc_genss.do_mov.b u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #16172     i64 
    push           136        i64 
    resetmult                 
    jump           #16173     
#16172: 
    push           137        i64 
    endmult                   
#16173: 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_mov.am i64 
    push           pc_genss.do_mov.a u64 
    callproc       &pc_genss.genamode 
    jump           #16174     
#16169: 
    push           pc_genss.do_mov.b u64 
    pushptr                   i64 
    pop            pc_genss.do_mov.value i64 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_mov.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_mov.am i64 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_mov.b u64 
    callfn         &pc_genss.getdef u64 
    jumpfalse      #16175     u64 
    push           pc_genss.do_mov.a u64 
    push           8          
    pushptroff                u8 1 0
    push           2          i64 
    jumpgt         #16175     i64 
    setargs                   1 0
    push           "mov imm?" u64 
    callproc       &pci_mcl.axerror 
#16175: 
    push           pc_genss.do_mov.a u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #16176     i64 
    push           1          i64 
    push           pc_genss.do_mov.a u64 
    push           8          
    popptroff                 u8 1 0
#16176: 
    push           pc_genss.do_mov.a u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    casejumpeq     #16177     i64 0
    push           1          i64 
    casejumpeq     #16177     i64 0
    push           2          i64 
    casejumpeq     #16178     i64 0
    push           4          i64 
    casejumpeq     #16179     i64 0
    push           8          i64 
    casejumpeq     #16179     i64 0
    popstack                  i64 
    jump           #16180     
#16177: 
    push           -128       i64 
    push           pc_genss.do_mov.value i64 
    jumpgt         #16181     i64 
    push           pc_genss.do_mov.value i64 
    push           255        i64 
    jumple         #16182     i64 
#16181: 
    setargs                   1 0
    push           "exceeding byte value" u64 
    callproc       &pci_mcl.axerror 
#16182: 
    setargs                   1 0
    push           pc_genss.do_mov.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           198        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_mov.am i64 
    push           pc_genss.do_mov.a u64 
    callproc       &pc_genss.genamode 
    setargs                   1 0
    push           pc_genss.do_mov.value i64 
    callproc       &pc_genss.genbyte 
    jump           #16183     
#16178: 
    push           -32768     i64 
    push           pc_genss.do_mov.value i64 
    jumpgt         #16184     i64 
    push           pc_genss.do_mov.value i64 
    push           65535      i64 
    jumple         #16185     i64 
#16184: 
    setargs                   1 0
    push           "exceeding word16 value" u64 
    callproc       &pci_mcl.axerror 
#16185: 
    setargs                   1 0
    push           pc_genss.do_mov.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           199        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_mov.am i64 
    push           pc_genss.do_mov.a u64 
    callproc       &pc_genss.genamode 
    setargs                   1 0
    push           pc_genss.do_mov.value i64 
    callproc       &pc_genss.genword 
    jump           #16183     
#16179: 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_mov.b u64 
    callfn         &pc_genss.getdef u64 
    jumptrue       #16186     u64 
    push           -2147483648 i64 
    push           pc_genss.do_mov.value i64 
    jumpgt         #16187     i64 
    push           pc_genss.do_mov.value i64 
    push           4294967295 i64 
    jumple         #16188     i64 
#16187: 
    setargs                   1 0
    push           "2:exceeding word32 value" u64 
    callproc       &pci_mcl.axerror 
#16188: 
#16186: 
    setargs                   1 0
    push           pc_genss.do_mov.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           199        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_mov.am i64 
    push           pc_genss.do_mov.a u64 
    callproc       &pc_genss.genamode 
    setargs                   2 0
    push           4          i64 
    push           pc_genss.do_mov.b u64 
    callproc       &pc_genss.genopnd 
    jump           #16183     
#16180: 
#16183: 
    jump           #16174     
#16170: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pci_mcl.opndnames_ma 
    push           pc_genss.do_mov.a u64 
    push           9          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pci_mcl.opndnames_ma 
    push           pc_genss.do_mov.b u64 
    push           9          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "MOV MEM/?" u64 
    callproc       &pci_mcl.axerror 
#16174: 
    jump           #16167     
#16138: 
    setargs                   1 0
    push           "MOV ?/.." u64 
    callproc       &pci_mcl.axerror 
#16167: 
#16189: 
    retproc                   
End


Proc pc_genss.getregcoder: i64
    param          pc_genss.getregcoder.reg i64 
    local          pc_genss.getregcoder.regcode i64 
    procentry                 
    push           &pci_mcl.regcodes 
    push           pc_genss.getregcoder.reg i64 
    pushptroff                u8 1 0
    pop            pc_genss.getregcoder.regcode i64 
    push           pc_genss.getregcoder.regcode i64 
    push           8          i64 
    jumplt         #16191     i64 
    push           &pc_genss.getregcoder.regcode 
    push           8          i64 
    subto                     i64 
    push           &pc_genss.rex 
    push           4          i64 
    iorto                     i64 
#16191: 
    push           pc_genss.getregcoder.regcode i64 
    setret                    i64 
    jump           #16192     
#16192: 
    retfn                     i64 
End


Proc pc_genss.getregcodeb: i64
    param          pc_genss.getregcodeb.reg i64 
    local          pc_genss.getregcodeb.regcode i64 
    procentry                 
    push           &pci_mcl.regcodes 
    push           pc_genss.getregcodeb.reg i64 
    pushptroff                u8 1 0
    pop            pc_genss.getregcodeb.regcode i64 
    push           pc_genss.getregcodeb.regcode i64 
    push           8          i64 
    jumplt         #16194     i64 
    push           &pc_genss.getregcodeb.regcode 
    push           8          i64 
    subto                     i64 
    push           &pc_genss.rex 
    push           1          i64 
    iorto                     i64 
#16194: 
    push           pc_genss.getregcodeb.regcode i64 
    setret                    i64 
    jump           #16195     
#16195: 
    retfn                     i64 
End


Proc pc_genss.getregcodebx: i64
    param          pc_genss.getregcodebx.reg i64 
    local          pc_genss.getregcodebx.regcode i64 
    procentry                 
    push           pc_genss.getregcodebx.reg i64 
    push           1          i64 
    sub                       i64 
    pop            pc_genss.getregcodebx.regcode i64 
    push           pc_genss.getregcodebx.regcode i64 
    push           8          i64 
    jumplt         #16197     i64 
    push           &pc_genss.getregcodebx.regcode 
    push           8          i64 
    subto                     i64 
    push           &pc_genss.rex 
    push           1          i64 
    iorto                     i64 
#16197: 
    push           pc_genss.getregcodebx.regcode i64 
    setret                    i64 
    jump           #16198     
#16198: 
    retfn                     i64 
End


Proc pc_genss.getregcoderx: i64
    param          pc_genss.getregcoderx.reg i64 
    local          pc_genss.getregcoderx.regcode i64 
    procentry                 
    push           pc_genss.getregcoderx.reg i64 
    push           1          i64 
    sub                       i64 
    pop            pc_genss.getregcoderx.regcode i64 
    push           pc_genss.getregcoderx.regcode i64 
    push           8          i64 
    jumplt         #16200     i64 
    push           &pc_genss.getregcoderx.regcode 
    push           8          i64 
    subto                     i64 
    push           &pc_genss.rex 
    push           4          i64 
    iorto                     i64 
#16200: 
    push           pc_genss.getregcoderx.regcode i64 
    setret                    i64 
    jump           #16201     
#16201: 
    retfn                     i64 
End


Proc pc_genss.do_lea:
    param          pc_genss.do_lea.a u64 
    param          pc_genss.do_lea.b u64 
    local          pc_genss.do_lea.regcode i64 
    local          pc_genss.do_lea.am i64 
    procentry                 
    push           pc_genss.do_lea.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #16203     i64 
    push           pc_genss.do_lea.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpeq         #16204     i64 
#16203: 
    setargs                   1 0
    push           "LEA not reg/mem" u64 
    callproc       &pci_mcl.axerror 
#16204: 
    push           pc_genss.do_lea.a u64 
    push           8          
    pushptroff                u8 1 0
    push           4          i64 
    jumpge         #16205     i64 
    setargs                   1 0
    push           "LEA size error" u64 
    callproc       &pci_mcl.axerror 
#16205: 
    setargs                   1 0
    push           pc_genss.do_lea.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_lea.regcode i64 
    setargs                   2 0
    push           pc_genss.do_lea.regcode i64 
    push           pc_genss.do_lea.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_lea.am i64 
    setargs                   1 0
    push           pc_genss.do_lea.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           141        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_lea.am i64 
    push           pc_genss.do_lea.b u64 
    callproc       &pc_genss.genamode 
#16206: 
    retproc                   
End


Proc pc_genss.do_movsx:
    param          pc_genss.do_movsx.a u64 
    param          pc_genss.do_movsx.b u64 
    param          pc_genss.do_movsx.opc i64 
    local          pc_genss.do_movsx.am i64 
    local          pc_genss.do_movsx.regcode i64 
    procentry                 
    push           pc_genss.do_movsx.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #16208     i64 
    setargs                   1 0
    push           "movsx not reg" u64 
    callproc       &pci_mcl.axerror 
#16208: 
    push           pc_genss.do_movsx.a u64 
    push           8          
    pushptroff                u8 1 0
    push           8          i64 
    jumpne         #16209     i64 
    push           pc_genss.do_movsx.b u64 
    push           8          
    pushptroff                u8 1 0
    push           4          i64 
    jumpne         #16209     i64 
    push           pc_genss.do_movsx.opc i64 
    push           190        i64 
    jumpne         #16210     i64 
    setargs                   2 0
    push           pc_genss.do_movsx.b u64 
    push           pc_genss.do_movsx.a u64 
    callproc       &pc_genss.do_movsxd 
    jump           #16211     
#16210: 
    push           &pci_mcl.regtable 
    push           pc_genss.do_movsx.a u64 
    push           10         
    pushptroff                u8 1 0
    addrefoff                 block:128 128 -128
    push           4          i64 
    pushptroff                u64 8 -8
    pop            pc_genss.do_movsx.a u64 
    setargs                   2 0
    push           pc_genss.do_movsx.b u64 
    push           pc_genss.do_movsx.a u64 
    callproc       &pc_genss.do_mov 
#16211: 
    jump           #16212     
#16209: 
    push           pc_genss.do_movsx.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #16213     i64 
    push           pc_genss.do_movsx.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_movsx.b u64 
    push           8          
    pushptroff                u8 1 0
    jumpgt         #16214     i64 
#16213: 
    setargs                   1 0
    push           "movsx size error" u64 
    callproc       &pci_mcl.axerror 
#16214: 
    push           pc_genss.do_movsx.opc i64 
    push           182        i64 
    jumpne         #16215     i64 
    push           pc_genss.do_movsx.b u64 
    push           8          
    pushptroff                u8 1 0
    push           4          i64 
    jumpne         #16215     i64 
    setargs                   1 0
    push           "movsx 4=>8 bytes?" u64 
    callproc       &pci_mcl.axerror 
#16215: 
    push           pc_genss.do_movsx.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #16216     i64 0
    push           3          i64 
    casejumpeq     #16217     i64 0
    popstack                  i64 
    jump           #16218     
#16216: 
    jump           #16219     
#16217: 
    push           pc_genss.do_movsx.b u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #16220     i64 
    setargs                   1 0
    push           "movsx need size prefix" u64 
    callproc       &pci_mcl.axerror 
#16220: 
    push           pc_genss.do_movsx.b u64 
    push           8          
    pushptroff                u8 1 0
    push           8          i64 
    jumpne         #16221     i64 
    setargs                   1 0
    push           "movsx size 8" u64 
    callproc       &pci_mcl.axerror 
#16221: 
    jump           #16219     
#16218: 
    setargs                   1 0
    push           "movsx not reg/mem" u64 
    callproc       &pci_mcl.axerror 
#16219: 
    setargs                   1 0
    push           pc_genss.do_movsx.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_movsx.regcode i64 
    setargs                   2 0
    push           pc_genss.do_movsx.regcode i64 
    push           pc_genss.do_movsx.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_movsx.am i64 
    setargs                   1 0
    push           pc_genss.do_movsx.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   1 0
    push           pc_genss.do_movsx.b u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    startmult                 
    push           pc_genss.do_movsx.b u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #16222     i64 
    push           pc_genss.do_movsx.opc i64 
    resetmult                 
    jump           #16223     
#16222: 
    push           pc_genss.do_movsx.opc i64 
    push           1          i64 
    add                       i64 
    endmult                   
#16223: 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_movsx.am i64 
    push           pc_genss.do_movsx.b u64 
    callproc       &pc_genss.genamode 
#16212: 
    retproc                   
End


Proc pc_genss.checkhighreg:
    param          pc_genss.checkhighreg.a u64 
    procentry                 
    push           pc_genss.checkhighreg.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #16225     i64 
    push           pc_genss.checkhighreg.a u64 
    push           10         
    pushptroff                u8 1 0
    push           6          i64 
    casejumpeq     #16226     i64 0
    push           4          i64 
    casejumpeq     #16226     i64 0
    push           15         i64 
    casejumpeq     #16226     i64 0
    push           16         i64 
    casejumpeq     #16226     i64 0
    popstack                  i64 
    jump           #16227     
#16226: 
    push           &pc_genss.rex 
    push           64         i64 
    iorto                     i64 
    jump           #16228     
#16227: 
#16228: 
#16225: 
#16229: 
    retproc                   
End


Proc pc_genss.do_exch:
    param          pc_genss.do_exch.a u64 
    param          pc_genss.do_exch.b u64 
    local          pc_genss.do_exch.regcode i64 
    local          pc_genss.do_exch.am i64 
    procentry                 
    push           pc_genss.do_exch.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #16231     i64 
    push           pc_genss.do_exch.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #16231     i64 
    push           pc_genss.do_exch.a u64 
    push           10         
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #16232     i64 
    push           pc_genss.do_exch.b u64 
    push           10         
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #16231     i64 
#16232: 
    push           pc_genss.do_exch.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #16231     i64 
    push           pc_genss.do_exch.a u64 
    push           10         
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #16233     i64 
    push           &pc_genss.do_exch.a 
    push           &pc_genss.do_exch.b 
    swap                      u64 
#16233: 
    push           pc_genss.do_exch.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_exch.b u64 
    push           8          
    pushptroff                u8 1 0
    jumpeq         #16234     i64 
    setargs                   1 0
    push           "exch size" u64 
    callproc       &pci_mcl.axerror 
#16234: 
    setargs                   1 0
    push           pc_genss.do_exch.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   1 0
    push           pc_genss.do_exch.b u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcodeb i64 
    pop            pc_genss.do_exch.regcode i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           144        i64 
    push           pc_genss.do_exch.regcode i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    jump           #16235     
#16231: 
    push           pc_genss.do_exch.a u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #16236     i64 
    push           &pc_genss.do_exch.a 
    push           &pc_genss.do_exch.b 
    swap                      u64 
#16236: 
    push           pc_genss.do_exch.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #16237     i64 
    push           pc_genss.do_exch.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #16238     i64 
    push           pc_genss.do_exch.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpeq         #16238     i64 
#16237: 
    setargs                   1 0
    push           "exch opnds" u64 
    callproc       &pci_mcl.axerror 
#16238: 
    push           pc_genss.do_exch.b u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #16239     i64 
    push           pc_genss.do_exch.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #16239     i64 
    push           pc_genss.do_exch.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_exch.b u64 
    push           8          
    popptroff                 u8 1 0
#16239: 
    push           pc_genss.do_exch.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_exch.b u64 
    push           8          
    pushptroff                u8 1 0
    jumpeq         #16240     i64 
    setargs                   1 0
    push           "exch size" u64 
    callproc       &pci_mcl.axerror 
#16240: 
    push           pc_genss.do_exch.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #16241     i64 
    setargs                   1 0
    push           pc_genss.do_exch.a u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_exch.b u64 
    callproc       &pc_genss.checkhighreg 
#16241: 
    setargs                   1 0
    push           pc_genss.do_exch.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_exch.regcode i64 
    setargs                   2 0
    push           pc_genss.do_exch.regcode i64 
    push           pc_genss.do_exch.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_exch.am i64 
    setargs                   1 0
    push           pc_genss.do_exch.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    startmult                 
    push           pc_genss.do_exch.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #16242     i64 
    push           134        i64 
    resetmult                 
    jump           #16243     
#16242: 
    push           135        i64 
    endmult                   
#16243: 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_exch.am i64 
    push           pc_genss.do_exch.b u64 
    callproc       &pc_genss.genamode 
#16235: 
    retproc                   
End


Proc pc_genss.do_movsxd:
    param          pc_genss.do_movsxd.a u64 
    param          pc_genss.do_movsxd.b u64 
    local          pc_genss.do_movsxd.regcode i64 
    local          pc_genss.do_movsxd.am i64 
    procentry                 
    push           pc_genss.do_movsxd.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #16245     i64 
    push           pc_genss.do_movsxd.b u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #16245     i64 
    push           4          i64 
    push           pc_genss.do_movsxd.b u64 
    push           8          
    popptroff                 u8 1 0
#16245: 
    push           pc_genss.do_movsxd.a u64 
    push           8          
    pushptroff                u8 1 0
    push           8          i64 
    jumpne         #16246     i64 
    push           pc_genss.do_movsxd.b u64 
    push           8          
    pushptroff                u8 1 0
    push           4          i64 
    jumple         #16247     i64 
#16246: 
    setargs                   1 0
    push           "movsxd size" u64 
    callproc       &pci_mcl.axerror 
#16247: 
    push           pc_genss.do_movsxd.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #16248     i64 
    push           pc_genss.do_movsxd.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #16249     i64 
    push           pc_genss.do_movsxd.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpeq         #16249     i64 
#16248: 
    setargs                   1 0
    push           "movsxd opnds" u64 
    callproc       &pci_mcl.axerror 
#16249: 
    setargs                   1 0
    push           pc_genss.do_movsxd.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_movsxd.regcode i64 
    setargs                   2 0
    push           pc_genss.do_movsxd.regcode i64 
    push           pc_genss.do_movsxd.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_movsxd.am i64 
    setargs                   1 0
    push           pc_genss.do_movsxd.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           99         i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_movsxd.am i64 
    push           pc_genss.do_movsxd.b u64 
    callproc       &pc_genss.genamode 
#16250: 
    retproc                   
End


Proc pc_genss.do_imul2:
    param          pc_genss.do_imul2.a u64 
    param          pc_genss.do_imul2.b u64 
    local          pc_genss.do_imul2.regcode i64 
    local          pc_genss.do_imul2.am i64 
    local          pc_genss.do_imul2.opc i64 
    local          pc_genss.do_imul2.value i64 
    procentry                 
    push           pc_genss.do_imul2.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #16252     i64 
    setargs                   1 0
    push           "imul2 opnds" u64 
    callproc       &pci_mcl.axerror 
#16252: 
    push           pc_genss.do_imul2.b u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #16253     i64 
    push           pc_genss.do_imul2.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_imul2.b u64 
    push           8          
    popptroff                 u8 1 0
#16253: 
    push           pc_genss.do_imul2.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #16254     i64 
    setargs                   1 0
    push           "imul2 byte" u64 
    callproc       &pci_mcl.axerror 
#16254: 
    push           pc_genss.do_imul2.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #16255     i64 0
    push           3          i64 
    casejumpeq     #16255     i64 0
    push           2          i64 
    casejumpeq     #16256     i64 0
    popstack                  i64 
    jump           #16257     
#16255: 
    push           pc_genss.do_imul2.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_imul2.b u64 
    push           8          
    pushptroff                u8 1 0
    jumpeq         #16258     i64 
    setargs                   1 0
    push           "imul2 size" u64 
    callproc       &pci_mcl.axerror 
#16258: 
    setargs                   1 0
    push           pc_genss.do_imul2.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_imul2.regcode i64 
    setargs                   2 0
    push           pc_genss.do_imul2.regcode i64 
    push           pc_genss.do_imul2.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_imul2.am i64 
    setargs                   1 0
    push           pc_genss.do_imul2.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           175        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_imul2.am i64 
    push           pc_genss.do_imul2.b u64 
    callproc       &pc_genss.genamode 
    jump           #16259     
#16256: 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_imul2.b u64 
    callfn         &pc_genss.getdef u64 
    jumpfalse      #16260     u64 
    setargs                   1 0
    push           "mul/label" u64 
    callproc       &pci_mcl.axerror 
#16260: 
    push           pc_genss.do_imul2.b u64 
    pushptr                   i64 
    pop            pc_genss.do_imul2.value i64 
    setargs                   1 0
    push           pc_genss.do_imul2.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_imul2.regcode i64 
    setargs                   1 0
    push           pc_genss.do_imul2.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcodeb i64 
    pop            pc_genss.do_imul2.regcode i64 
    push           192        i64 
    push           pc_genss.do_imul2.regcode i64 
    push           3          i64 
    shl                       i64 
    add                       i64 
    push           pc_genss.do_imul2.regcode i64 
    add                       i64 
    pop            pc_genss.do_imul2.opc i64 
    setargs                   1 0
    push           pc_genss.do_imul2.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    push           -128       i64 
    push           pc_genss.do_imul2.value i64 
    jumpgt         #16261     i64 
    push           pc_genss.do_imul2.value i64 
    push           127        i64 
    jumpgt         #16261     i64 
    setargs                   1 0
    push           107        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_imul2.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_imul2.value i64 
    callproc       &pc_genss.genbyte 
    jump           #16262     
#16261: 
    push           pc_genss.do_imul2.a u64 
    push           8          
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #16263     i64 
    setargs                   1 0
    push           105        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_imul2.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_imul2.value i64 
    callproc       &pc_genss.genword 
    jump           #16262     
#16263: 
    setargs                   1 0
    push           105        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_imul2.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_imul2.value i64 
    callproc       &pc_genss.gendword 
#16262: 
    jump           #16259     
#16257: 
    setargs                   1 0
    push           "imul2 opnds" u64 
    callproc       &pci_mcl.axerror 
#16259: 
#16264: 
    retproc                   
End


Proc pc_genss.do_shift:
    param          pc_genss.do_shift.a u64 
    param          pc_genss.do_shift.b u64 
    param          pc_genss.do_shift.opc i64 
    local          pc_genss.do_shift.am i64 
    local          pc_genss.do_shift.w i64 
    procentry                 
    push           pc_genss.do_shift.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #16266     i64 
    push           pc_genss.do_shift.a u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpeq         #16266     i64 
    setargs                   1 0
    push           "shift opnds1?" u64 
    callproc       &pci_mcl.axerror 
#16266: 
    setargs                   2 0
    push           pc_genss.do_shift.opc i64 
    push           pc_genss.do_shift.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_shift.am i64 
    setargs                   1 0
    push           pc_genss.do_shift.a u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_shift.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    startmult                 
    push           pc_genss.do_shift.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #16267     i64 
    push           0          i64 
    resetmult                 
    jump           #16268     
#16267: 
    push           1          i64 
    endmult                   
#16268: 
    pop            pc_genss.do_shift.w i64 
    push           pc_genss.do_shift.b u64 
    push           9          
    pushptroff                u8 1 0
    push           2          i64 
    casejumpeq     #16269     i64 0
    push           1          i64 
    casejumpeq     #16270     i64 0
    popstack                  i64 
    jump           #16271     
#16269: 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_shift.b u64 
    callfn         &pc_genss.getdef u64 
    jumpfalse      #16272     u64 
    setargs                   1 0
    push           "shift/label" u64 
    callproc       &pci_mcl.axerror 
#16272: 
    push           pc_genss.do_shift.b u64 
    pushptr                   i64 
    push           1          i64 
    jumpne         #16273     i64 
    setargs                   1 0
    push           208        i64 
    push           pc_genss.do_shift.w i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_shift.am i64 
    push           pc_genss.do_shift.a u64 
    callproc       &pc_genss.genamode 
    jump           #16274     
#16273: 
    setargs                   1 0
    push           192        i64 
    push           pc_genss.do_shift.w i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_shift.am i64 
    push           pc_genss.do_shift.a u64 
    callproc       &pc_genss.genamode 
    setargs                   1 0
    push           pc_genss.do_shift.b u64 
    pushptr                   i64 
    callproc       &pc_genss.genbyte 
#16274: 
    jump           #16275     
#16270: 
    push           pc_genss.do_shift.b u64 
    push           10         
    pushptroff                u8 1 0
    push           11         i64 
    jumpne         #16276     i64 
    push           pc_genss.do_shift.b u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #16277     i64 
#16276: 
    setargs                   1 0
    push           "cl or b10 needed" u64 
    callproc       &pci_mcl.axerror 
#16277: 
    setargs                   1 0
    push           210        i64 
    push           pc_genss.do_shift.w i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_shift.am i64 
    push           pc_genss.do_shift.a u64 
    callproc       &pc_genss.genamode 
    jump           #16275     
#16271: 
    setargs                   1 0
    push           "shift opnds2?" u64 
    callproc       &pci_mcl.axerror 
#16275: 
#16278: 
    retproc                   
End


Proc pc_genss.do_test:
    param          pc_genss.do_test.a u64 
    param          pc_genss.do_test.b u64 
    local          pc_genss.do_test.value i64 
    local          pc_genss.do_test.opc i64 
    local          pc_genss.do_test.am i64 
    local          pc_genss.do_test.regcode i64 
    procentry                 
    push           pc_genss.do_test.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #16280     i64 
    push           pc_genss.do_test.a u64 
    push           10         
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #16280     i64 
    push           pc_genss.do_test.b u64 
    push           9          
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #16280     i64 
    push           pc_genss.do_test.b u64 
    pushptr                   i64 
    pop            pc_genss.do_test.value i64 
    push           pc_genss.do_test.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #16281     i64 0
    push           2          i64 
    casejumpeq     #16282     i64 0
    push           4          i64 
    casejumpeq     #16283     i64 0
    popstack                  i64 
    jump           #16284     
#16281: 
    setargs                   1 0
    push           168        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_test.value i64 
    callproc       &pc_genss.genbyte 
    jump           #16285     
#16282: 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           169        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_test.value i64 
    callproc       &pc_genss.genword 
    jump           #16285     
#16283: 
    setargs                   1 0
    push           169        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_test.value i64 
    callproc       &pc_genss.gendword 
    jump           #16285     
#16284: 
    setargs                   1 0
    push           72         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           169        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_test.value i64 
    callproc       &pc_genss.gendword 
#16285: 
    jump           #16286     
#16280: 
    push           pc_genss.do_test.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #16287     i64 
    push           pc_genss.do_test.a u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #16288     i64 
#16287: 
    push           pc_genss.do_test.b u64 
    push           9          
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #16288     i64 
    startmult                 
    push           pc_genss.do_test.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #16289     i64 
    push           246        i64 
    resetmult                 
    jump           #16290     
#16289: 
    push           247        i64 
    endmult                   
#16290: 
    pop            pc_genss.do_test.opc i64 
    push           pc_genss.do_test.b u64 
    pushptr                   i64 
    pop            pc_genss.do_test.value i64 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_test.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_test.am i64 
    setargs                   1 0
    push           pc_genss.do_test.a u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_test.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           pc_genss.do_test.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_test.am i64 
    push           pc_genss.do_test.a u64 
    callproc       &pc_genss.genamode 
    push           pc_genss.do_test.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #16291     i64 0
    push           2          i64 
    casejumpeq     #16292     i64 0
    popstack                  i64 
    jump           #16293     
#16291: 
    setargs                   1 0
    push           pc_genss.do_test.value i64 
    callproc       &pc_genss.genbyte 
    jump           #16294     
#16292: 
    setargs                   1 0
    push           pc_genss.do_test.value i64 
    callproc       &pc_genss.genword 
    jump           #16294     
#16293: 
    setargs                   1 0
    push           pc_genss.do_test.value i64 
    callproc       &pc_genss.gendword 
#16294: 
    jump           #16286     
#16288: 
    push           pc_genss.do_test.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #16295     i64 
    push           pc_genss.do_test.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #16296     i64 
    push           pc_genss.do_test.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #16295     i64 
#16296: 
!doregmem::
#16297: 
    setargs                   1 0
    push           pc_genss.do_test.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_test.regcode i64 
    setargs                   2 0
    push           pc_genss.do_test.regcode i64 
    push           pc_genss.do_test.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_test.am i64 
    setargs                   1 0
    push           pc_genss.do_test.a u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_test.b u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_test.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    startmult                 
    push           pc_genss.do_test.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #16298     i64 
    push           132        i64 
    resetmult                 
    jump           #16299     
#16298: 
    push           133        i64 
    endmult                   
#16299: 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_test.am i64 
    push           pc_genss.do_test.b u64 
    callproc       &pc_genss.genamode 
    jump           #16286     
#16295: 
    push           pc_genss.do_test.a u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #16300     i64 
    push           pc_genss.do_test.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #16300     i64 
    push           &pc_genss.do_test.a 
    push           &pc_genss.do_test.b 
    swap                      u64 
    jump           #16297     
    jump           #16286     
#16300: 
    setargs                   1 0
    push           "test opnds" u64 
    callproc       &pci_mcl.axerror 
#16286: 
#16301: 
    retproc                   
End


Proc pc_genss.do_loop:
    param          pc_genss.do_loop.a u64 
    param          pc_genss.do_loop.opc i64 
    local          pc_genss.do_loop.offset i64 
    procentry                 
    setargs                   2 0
    setargs                   1 0
    push           9          i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           1          i64 
    add                       i64 
    setargs                   2 0
    push           1          i64 
    push           pc_genss.do_loop.a u64 
    callfn         &pc_genss.getdef u64 
    callfn         &pc_genss.getrel32 i64 
    pop            pc_genss.do_loop.offset i64 
    push           pc_genss.do_loop.offset i64 
    push           0          i64 
    jumpge         #16303     i64 
    push           pc_genss.do_loop.offset i64 
    push           -126       i64 
    jumpge         #16304     i64 
    setargs                   1 0
    push           "loop jmp out of range" u64 
    callproc       &pci_mcl.axerror 
#16304: 
    setargs                   1 0
    push           pc_genss.do_loop.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_loop.offset i64 
    callproc       &pc_genss.genbyte 
    jump           #16305     
#16303: 
    setargs                   1 0
    push           "Can't do loopxx fwd jump" u64 
    callproc       &pci_mcl.axerror 
#16305: 
#16306: 
    retproc                   
End


Proc pc_genss.do_jcxz:
    param          pc_genss.do_jcxz.a u64 
    param          pc_genss.do_jcxz.opsize i64 
    local          pc_genss.do_jcxz.offset i64 
    procentry                 
    setargs                   2 0
    setargs                   1 0
    push           10         i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           1          i64 
    add                       i64 
    setargs                   2 0
    push           1          i64 
    push           pc_genss.do_jcxz.a u64 
    callfn         &pc_genss.getdef u64 
    callfn         &pc_genss.getrel32 i64 
    pop            pc_genss.do_jcxz.offset i64 
    push           pc_genss.do_jcxz.offset i64 
    push           0          i64 
    jumpge         #16308     i64 
    push           pc_genss.do_jcxz.offset i64 
    push           -126       i64 
    jumpge         #16309     i64 
    setargs                   1 0
    push           "jcxz jmp out of range" u64 
    callproc       &pci_mcl.axerror 
#16309: 
    push           pc_genss.do_jcxz.opsize i64 
    push           4          i64 
    jumpne         #16310     i64 
    setargs                   1 0
    push           103        i64 
    callproc       &pc_genss.genbyte 
#16310: 
    setargs                   1 0
    push           227        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_jcxz.offset i64 
    callproc       &pc_genss.genbyte 
    jump           #16311     
#16308: 
    setargs                   1 0
    push           "Can't do jcxz fwd jump" u64 
    callproc       &pci_mcl.axerror 
#16311: 
#16312: 
    retproc                   
End


Proc pc_genss.do_setcc:
    param          pc_genss.do_setcc.cond i64 
    param          pc_genss.do_setcc.a u64 
    local          pc_genss.do_setcc.am i64 
    procentry                 
    push           pc_genss.do_setcc.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #16314     i64 
    push           pc_genss.do_setcc.a u64 
    push           10         
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #16315     i64 
#16314: 
    push           pc_genss.do_setcc.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumple         #16316     i64 
#16315: 
    setargs                   1 0
    push           "setcc opnd/size" u64 
    callproc       &pci_mcl.axerror 
#16316: 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_setcc.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_setcc.am i64 
    setargs                   1 0
    push           pc_genss.do_setcc.a u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           144        i64 
    push           pc_genss.do_setcc.cond i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_setcc.am i64 
    push           pc_genss.do_setcc.a u64 
    callproc       &pc_genss.genamode 
#16317: 
    retproc                   
End


Proc pc_genss.do_movxmm:
    param          pc_genss.do_movxmm.a u64 
    param          pc_genss.do_movxmm.b u64 
    param          pc_genss.do_movxmm.size i64 
    local          pc_genss.do_movxmm.am i64 
    local          pc_genss.do_movxmm.regcode i64 
    local          pc_genss.do_movxmm.regcode1 i64 
    local          pc_genss.do_movxmm.regcode2 i64 
    procentry                 
    push           pc_genss.do_movxmm.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #16319     i64 0
    push           5          i64 
    casejumpeq     #16320     i64 0
    push           3          i64 
    casejumpeq     #16321     i64 0
    popstack                  i64 
    jump           #16322     
#16319: 
    push           pc_genss.do_movxmm.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    casejumpeq     #16323     i64 0
    popstack                  i64 
    jump           #16324     
#16323: 
    push           pc_genss.do_movxmm.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_movxmm.size i64 
    jumpeq         #16325     i64 
    setargs                   1 0
    push           "1:movdq size" u64 
    callproc       &pci_mcl.axerror 
#16325: 
    setargs                   1 0
    push           pc_genss.do_movxmm.b u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_movxmm.regcode i64 
    setargs                   2 0
    push           pc_genss.do_movxmm.regcode i64 
    push           pc_genss.do_movxmm.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_movxmm.am i64 
    setargs                   1 0
    push           pc_genss.do_movxmm.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           126        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_movxmm.am i64 
    push           pc_genss.do_movxmm.b u64 
    callproc       &pc_genss.genamode 
    jump           #16326     
#16324: 
    setargs                   1 0
    push           "movdq reg,?" u64 
    callproc       &pci_mcl.axerror 
#16326: 
    jump           #16327     
#16320: 
    push           pc_genss.do_movxmm.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #16328     i64 0
    push           5          i64 
    casejumpeq     #16329     i64 0
    push           3          i64 
    casejumpeq     #16330     i64 0
    popstack                  i64 
    jump           #16331     
#16328: 
    push           pc_genss.do_movxmm.b u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_movxmm.size i64 
    jumpeq         #16332     i64 
    setargs                   1 0
    push           "3:movdq size" u64 
    callproc       &pci_mcl.axerror 
#16332: 
    setargs                   1 0
    push           pc_genss.do_movxmm.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_movxmm.regcode i64 
    setargs                   2 0
    push           pc_genss.do_movxmm.regcode i64 
    push           pc_genss.do_movxmm.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_movxmm.am i64 
    setargs                   1 0
    push           pc_genss.do_movxmm.b u64 
    callproc       &pc_genss.setopsize 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           110        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_movxmm.am i64 
    push           pc_genss.do_movxmm.a u64 
    callproc       &pc_genss.genamode 
    jump           #16333     
#16329: 
    setargs                   1 0
    push           pc_genss.do_movxmm.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_movxmm.regcode1 i64 
    setargs                   1 0
    push           pc_genss.do_movxmm.b u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcodebx i64 
    pop            pc_genss.do_movxmm.regcode2 i64 
    setargs                   1 0
    push           243        i64 
    callproc       &pc_genss.genbyte 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           126        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           192        i64 
    push           pc_genss.do_movxmm.regcode1 i64 
    push           3          i64 
    shl                       i64 
    add                       i64 
    push           pc_genss.do_movxmm.regcode2 i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    jump           #16333     
#16330: 
    push           pc_genss.do_movxmm.b u64 
    push           8          
    pushptroff                u8 1 0
    jumpfalse      #16334     i64 
    push           pc_genss.do_movxmm.b u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_movxmm.size i64 
    jumpeq         #16334     i64 
    setargs                   1 0
    push           "4:movdq size" u64 
    callproc       &pci_mcl.axerror 
#16334: 
    setargs                   1 0
    push           pc_genss.do_movxmm.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_movxmm.regcode i64 
    setargs                   2 0
    push           pc_genss.do_movxmm.regcode i64 
    push           pc_genss.do_movxmm.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_movxmm.am i64 
    push           pc_genss.do_movxmm.size i64 
    push           4          i64 
    jumpne         #16335     i64 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           110        i64 
    callproc       &pc_genss.genbyte 
    jump           #16336     
#16335: 
    setargs                   1 0
    push           243        i64 
    callproc       &pc_genss.genbyte 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           126        i64 
    callproc       &pc_genss.genbyte 
#16336: 
    setargs                   2 0
    push           pc_genss.do_movxmm.am i64 
    push           pc_genss.do_movxmm.b u64 
    callproc       &pc_genss.genamode 
    jump           #16333     
#16331: 
    setargs                   1 0
    push           "movdq xreg,?" u64 
    callproc       &pci_mcl.axerror 
#16333: 
    jump           #16327     
#16321: 
    push           pc_genss.do_movxmm.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    casejumpeq     #16337     i64 0
    popstack                  i64 
    jump           #16338     
#16337: 
    push           pc_genss.do_movxmm.a u64 
    push           8          
    pushptroff                u8 1 0
    jumpfalse      #16339     i64 
    push           pc_genss.do_movxmm.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_movxmm.size i64 
    jumpeq         #16339     i64 
    setargs                   1 0
    push           "5:movdq size" u64 
    callproc       &pci_mcl.axerror 
#16339: 
    setargs                   1 0
    push           pc_genss.do_movxmm.b u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_movxmm.regcode i64 
    setargs                   2 0
    push           pc_genss.do_movxmm.regcode i64 
    push           pc_genss.do_movxmm.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_movxmm.am i64 
    push           pc_genss.do_movxmm.size i64 
    push           4          i64 
    jumpne         #16340     i64 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           126        i64 
    callproc       &pc_genss.genbyte 
    jump           #16341     
#16340: 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           214        i64 
    callproc       &pc_genss.genbyte 
#16341: 
    setargs                   2 0
    push           pc_genss.do_movxmm.am i64 
    push           pc_genss.do_movxmm.a u64 
    callproc       &pc_genss.genamode 
    jump           #16342     
#16338: 
    setargs                   1 0
    push           "movdq mem,?" u64 
    callproc       &pci_mcl.axerror 
#16342: 
    jump           #16327     
#16322: 
    setargs                   1 0
    push           "movdq opnds" u64 
    callproc       &pci_mcl.axerror 
#16327: 
#16343: 
    retproc                   
End


Proc pc_genss.do_arithxmm:
    param          pc_genss.do_arithxmm.a u64 
    param          pc_genss.do_arithxmm.b u64 
    param          pc_genss.do_arithxmm.prefix i64 
    param          pc_genss.do_arithxmm.opc i64 
    local          pc_genss.do_arithxmm.am i64 
    local          pc_genss.do_arithxmm.regcode i64 
    procentry                 
    push           pc_genss.do_arithxmm.a u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #16345     i64 
    push           pc_genss.do_arithxmm.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpeq         #16346     i64 
    push           pc_genss.do_arithxmm.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpeq         #16346     i64 
#16345: 
    setargs                   1 0
    push           "arithxmm opnds" u64 
    callproc       &pci_mcl.axerror 
#16346: 
    push           pc_genss.do_arithxmm.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #16347     i64 
    setargs                   1 0
    push           pc_genss.do_arithxmm.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_arithxmm.regcode i64 
    setargs                   2 0
    push           pc_genss.do_arithxmm.regcode i64 
    push           pc_genss.do_arithxmm.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_arithxmm.am i64 
    push           pc_genss.do_arithxmm.prefix i64 
    jumpfalse      #16348     i64 
    setargs                   1 0
    push           pc_genss.do_arithxmm.prefix i64 
    callproc       &pc_genss.genbyte 
#16348: 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_arithxmm.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_arithxmm.am i64 
    push           pc_genss.do_arithxmm.a u64 
    callproc       &pc_genss.genamode 
    jump           #16349     
#16347: 
    setargs                   1 0
    push           pc_genss.do_arithxmm.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_arithxmm.regcode i64 
    setargs                   2 0
    push           pc_genss.do_arithxmm.regcode i64 
    push           pc_genss.do_arithxmm.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_arithxmm.am i64 
    push           pc_genss.do_arithxmm.prefix i64 
    jumpfalse      #16350     i64 
    setargs                   1 0
    push           pc_genss.do_arithxmm.prefix i64 
    callproc       &pc_genss.genbyte 
#16350: 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_arithxmm.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_arithxmm.am i64 
    push           pc_genss.do_arithxmm.b u64 
    callproc       &pc_genss.genamode 
#16349: 
#16351: 
    retproc                   
End


Proc pc_genss.do_logicxmm:
    param          pc_genss.do_logicxmm.a u64 
    param          pc_genss.do_logicxmm.b u64 
    param          pc_genss.do_logicxmm.opc i64 
    param          pc_genss.do_logicxmm.size i64 
    local          pc_genss.do_logicxmm.am i64 
    local          pc_genss.do_logicxmm.regcode i64 
    procentry                 
    push           pc_genss.do_logicxmm.a u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #16353     i64 
    push           pc_genss.do_logicxmm.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpeq         #16354     i64 
    push           pc_genss.do_logicxmm.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpeq         #16354     i64 
#16353: 
    setargs                   1 0
    push           "logicxmm opnds" u64 
    callproc       &pci_mcl.axerror 
#16354: 
    push           pc_genss.do_logicxmm.size i64 
    push           8          i64 
    jumpne         #16355     i64 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
#16355: 
    push           pc_genss.do_logicxmm.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #16356     i64 
    setargs                   1 0
    push           pc_genss.do_logicxmm.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_logicxmm.regcode i64 
    setargs                   2 0
    push           pc_genss.do_logicxmm.regcode i64 
    push           pc_genss.do_logicxmm.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_logicxmm.am i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_logicxmm.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_logicxmm.am i64 
    push           pc_genss.do_logicxmm.b u64 
    callproc       &pc_genss.genamode 
    jump           #16357     
#16356: 
    setargs                   1 0
    push           pc_genss.do_logicxmm.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_logicxmm.regcode i64 
    setargs                   2 0
    push           pc_genss.do_logicxmm.regcode i64 
    push           pc_genss.do_logicxmm.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_logicxmm.am i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_logicxmm.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_logicxmm.am i64 
    push           pc_genss.do_logicxmm.b u64 
    callproc       &pc_genss.genamode 
#16357: 
#16358: 
    retproc                   
End


Proc pc_genss.do_convertfloat:
    param          pc_genss.do_convertfloat.a u64 
    param          pc_genss.do_convertfloat.b u64 
    param          pc_genss.do_convertfloat.prefix i64 
    local          pc_genss.do_convertfloat.am i64 
    local          pc_genss.do_convertfloat.regcode i64 
    procentry                 
    push           pc_genss.do_convertfloat.a u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #16360     i64 
    push           pc_genss.do_convertfloat.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpeq         #16361     i64 
    push           pc_genss.do_convertfloat.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpeq         #16361     i64 
#16360: 
    setargs                   1 0
    push           "convertfloat opnds" u64 
    callproc       &pci_mcl.axerror 
#16361: 
    setargs                   1 0
    push           pc_genss.do_convertfloat.prefix i64 
    callproc       &pc_genss.genbyte 
    push           pc_genss.do_convertfloat.a u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #16362     i64 
    setargs                   1 0
    push           pc_genss.do_convertfloat.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_convertfloat.regcode i64 
    setargs                   2 0
    push           pc_genss.do_convertfloat.regcode i64 
    push           pc_genss.do_convertfloat.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_convertfloat.am i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           90         i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_convertfloat.am i64 
    push           pc_genss.do_convertfloat.b u64 
    callproc       &pc_genss.genamode 
    jump           #16363     
#16362: 
    setargs                   1 0
    push           pc_genss.do_convertfloat.b u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_convertfloat.regcode i64 
    setargs                   2 0
    push           pc_genss.do_convertfloat.regcode i64 
    push           pc_genss.do_convertfloat.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_convertfloat.am i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           90         i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_convertfloat.am i64 
    push           pc_genss.do_convertfloat.b u64 
    callproc       &pc_genss.genamode 
#16363: 
#16364: 
    retproc                   
End


Proc pc_genss.do_fix:
    param          pc_genss.do_fix.a u64 
    param          pc_genss.do_fix.b u64 
    param          pc_genss.do_fix.prefix i64 
    param          pc_genss.do_fix.opc i64 
    local          pc_genss.do_fix.am i64 
    local          pc_genss.do_fix.regcode i64 
    procentry                 
    push           pc_genss.do_fix.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #16366     i64 
    push           pc_genss.do_fix.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpeq         #16367     i64 
    push           pc_genss.do_fix.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpeq         #16367     i64 
#16366: 
    setargs                   1 0
    push           "fix opnds" u64 
    callproc       &pci_mcl.axerror 
#16367: 
    setargs                   1 0
    push           pc_genss.do_fix.prefix i64 
    callproc       &pc_genss.genbyte 
    push           pc_genss.do_fix.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #16368     i64 
    setargs                   1 0
    push           pc_genss.do_fix.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_fix.regcode i64 
    setargs                   2 0
    push           pc_genss.do_fix.regcode i64 
    push           pc_genss.do_fix.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_fix.am i64 
    setargs                   1 0
    push           pc_genss.do_fix.a u64 
    callproc       &pc_genss.setopsize 
    jump           #16369     
#16368: 
    setargs                   1 0
    push           pc_genss.do_fix.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_fix.regcode i64 
    setargs                   2 0
    push           pc_genss.do_fix.regcode i64 
    push           pc_genss.do_fix.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_fix.am i64 
    setargs                   1 0
    push           pc_genss.do_fix.a u64 
    callproc       &pc_genss.setopsize 
#16369: 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_fix.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_fix.am i64 
    push           pc_genss.do_fix.b u64 
    callproc       &pc_genss.genamode 
#16370: 
    retproc                   
End


Proc pc_genss.do_float:
    param          pc_genss.do_float.a u64 
    param          pc_genss.do_float.b u64 
    param          pc_genss.do_float.prefix i64 
    local          pc_genss.do_float.am i64 
    local          pc_genss.do_float.regcode i64 
    procentry                 
    push           pc_genss.do_float.a u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #16372     i64 
    push           pc_genss.do_float.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #16373     i64 
    push           pc_genss.do_float.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpeq         #16373     i64 
#16372: 
    setargs                   1 0
    push           "float opnds" u64 
    callproc       &pci_mcl.axerror 
#16373: 
    push           pc_genss.do_float.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #16374     i64 
    push           pc_genss.do_float.b u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #16375     i64 
    push           4          i64 
    push           pc_genss.do_float.b u64 
    push           8          
    popptroff                 u8 1 0
#16375: 
    push           pc_genss.do_float.b u64 
    push           8          
    pushptroff                u8 1 0
    push           4          i64 
    jumpeq         #16376     i64 
    push           pc_genss.do_float.b u64 
    push           8          
    pushptroff                u8 1 0
    push           8          i64 
    jumpeq         #16376     i64 
    setargs                   1 0
    push           "float size" u64 
    callproc       &pci_mcl.axerror 
#16376: 
#16374: 
    setargs                   1 0
    push           pc_genss.do_float.prefix i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_float.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_float.regcode i64 
    setargs                   2 0
    push           pc_genss.do_float.regcode i64 
    push           pc_genss.do_float.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_float.am i64 
    setargs                   1 0
    push           pc_genss.do_float.b u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           42         i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_float.am i64 
    push           pc_genss.do_float.b u64 
    callproc       &pc_genss.genamode 
#16377: 
    retproc                   
End


Proc pc_genss.do_call:
    param          pc_genss.do_call.a u64 
    local          pc_genss.do_call.am i64 
    local          pc_genss.do_call.regcode i64 
    procentry                 
    push           pc_genss.do_call.a u64 
    push           9          
    pushptroff                u8 1 0
    push           2          i64 
    casejumpeq     #16379     i64 0
    popstack                  i64 
    jump           #16380     
#16379: 
    setargs                   1 0
    push           232        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_call.a u64 
    callproc       &pc_genss.genrel32 
    jump           #16381     
#16380: 
    push           pc_genss.do_call.a u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    casejumpeq     #16382     i64 0
    push           1          i64 
    casejumpeq     #16383     i64 0
    push           2          i64 
    casejumpeq     #16383     i64 0
    push           4          i64 
    casejumpeq     #16383     i64 0
    popstack                  i64 
    jump           #16384     
#16382: 
    push           8          i64 
    push           pc_genss.do_call.a u64 
    push           8          
    popptroff                 u8 1 0
    jump           #16385     
#16383: 
    setargs                   1 0
    push           "call[]size" u64 
    callproc       &pci_mcl.axerror 
    jump           #16385     
#16384: 
#16385: 
    setargs                   2 0
    push           2          i64 
    push           pc_genss.do_call.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_call.am i64 
    setargs                   1 0
    push           pc_genss.do_call.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   1 0
    push           pc_genss.do_call.a u64 
    callproc       &pc_genss.setaddrsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           255        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_call.am i64 
    push           pc_genss.do_call.a u64 
    callproc       &pc_genss.genamode 
#16381: 
#16386: 
    retproc                   
End


Proc pc_genss.do_jmp:
    param          pc_genss.do_jmp.a u64 
    param          pc_genss.do_jmp.m u64 
    local          pc_genss.do_jmp.am i64 
    local          pc_genss.do_jmp.regcode i64 
    local          pc_genss.do_jmp.offset i64 
    local          pc_genss.do_jmp.shortjmp i64 
    local          pc_genss.do_jmp.d u64 
    procentry                 
    push           pc_genss.do_jmp.a u64 
    push           9          
    pushptroff                u8 1 0
    push           2          i64 
    casejumpeq     #16388     i64 0
    popstack                  i64 
    jump           #16389     
#16388: 
    push           pc_genss.do_jmp.a u64 
    push           12         
    pushptroff                u8 1 0
    push           7          i64 
    casejumpeq     #16390     i64 0
    push           5          i64 
    casejumpeq     #16390     i64 0
    popstack                  i64 
    jump           #16391     
#16390: 
    setargs                   2 0
    push           1          i64 
    push           pc_genss.do_jmp.a u64 
    callfn         &pc_genss.getdef u64 
    pop            pc_genss.do_jmp.d u64 
    setargs                   2 0
    setargs                   1 0
    push           11         i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           1          i64 
    add                       i64 
    push           pc_genss.do_jmp.d u64 
    callfn         &pc_genss.getrel32 i64 
    push           pc_genss.do_jmp.a u64 
    push           14         
    pushptroff                i32 1 0
    add                       i64 
    pop            pc_genss.do_jmp.offset i64 
    push           pc_genss.do_jmp.offset i64 
    push           0          i64 
    jumpge         #16392     i64 
    push           pc_genss.do_jmp.offset i64 
    push           -126       i64 
    jumple         #16392     i64 
    setargs                   1 0
    push           235        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_jmp.offset i64 
    callproc       &pc_genss.genbyte 
    jump           #16393     
#16392: 
    push           0          i64 
    pop            pc_genss.do_jmp.shortjmp i64 
    push           pc_genss.do_jmp.offset i64 
    push           0          i64 
    jumple         #16394     i64 
    setargs                   2 0
    push           pc_genss.do_jmp.d u64 
    push           pc_genss.do_jmp.m u64 
    callfn         &pc_genss.checkshortjump i64 
    pop            pc_genss.do_jmp.shortjmp i64 
#16394: 
    push           pc_genss.do_jmp.shortjmp i64 
    jumptrue       #16395     i64 
    setargs                   1 0
    push           233        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_jmp.a u64 
    callproc       &pc_genss.genrel32 
    jump           #16396     
#16395: 
    setargs                   1 0
    push           235        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_jmp.a u64 
    callproc       &pc_genss.genrel8 
#16396: 
#16393: 
    jump           #16397     
#16391: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pci_mcl.valtypenames 
    push           pc_genss.do_jmp.a u64 
    push           12         
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "JMP/IMM NOT LABELNO" u64 
    callproc       &pci_mcl.axerror 
#16397: 
    jump           #16398     
#16389: 
    push           pc_genss.do_jmp.a u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    casejumpeq     #16399     i64 0
    push           1          i64 
    casejumpeq     #16400     i64 0
    push           2          i64 
    casejumpeq     #16400     i64 0
    push           4          i64 
    casejumpeq     #16400     i64 0
    popstack                  i64 
    jump           #16401     
#16399: 
    push           8          i64 
    push           pc_genss.do_jmp.a u64 
    push           8          
    popptroff                 u8 1 0
    jump           #16402     
#16400: 
    setargs                   1 0
    push           "jmp[]size" u64 
    callproc       &pci_mcl.axerror 
    jump           #16402     
#16401: 
#16402: 
    setargs                   2 0
    push           4          i64 
    push           pc_genss.do_jmp.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_jmp.am i64 
    setargs                   1 0
    push           pc_genss.do_jmp.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   1 0
    push           pc_genss.do_jmp.a u64 
    callproc       &pc_genss.setaddrsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           255        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_jmp.am i64 
    push           pc_genss.do_jmp.a u64 
    callproc       &pc_genss.genamode 
#16398: 
#16403: 
    retproc                   
End


Proc pc_genss.getcurrdatalen: i64
    param          pc_genss.getcurrdatalen.id i64 
    procentry                 
    push           pc_genss.currseg i64 
    push           3          i64 
    jumpne         #16405     i64 
    push           pci_mcl.ss_zdatalen i64 
    setret                    i64 
    jump           #16406     
#16405: 
    setargs                   1 0
    push           pc_genss.currdata u64 
    callfn         &pc_genss.bufferlength i64 
    setret                    i64 
    jump           #16406     
#16406: 
    retfn                     i64 
End


Proc pc_genss.do_cmovcc:
    param          pc_genss.do_cmovcc.cond i64 
    param          pc_genss.do_cmovcc.a u64 
    param          pc_genss.do_cmovcc.b u64 
    local          pc_genss.do_cmovcc.am i64 
    local          pc_genss.do_cmovcc.regcode i64 
    procentry                 
    push           pc_genss.do_cmovcc.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_cmovcc.b u64 
    push           8          
    pushptroff                u8 1 0
    jumpeq         #16408     i64 
    push           pc_genss.do_cmovcc.b u64 
    push           8          
    pushptroff                u8 1 0
    jumpfalse      #16408     i64 
    setargs                   1 0
    push           "3:Opnd size mismatch" u64 
    callproc       &pci_mcl.axerror 
#16408: 
    push           pc_genss.do_cmovcc.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #16409     i64 
    setargs                   1 0
    push           "cmov/byte" u64 
    callproc       &pci_mcl.axerror 
#16409: 
    setargs                   1 0
    push           pc_genss.do_cmovcc.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_cmovcc.regcode i64 
    setargs                   2 0
    push           pc_genss.do_cmovcc.regcode i64 
    push           pc_genss.do_cmovcc.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_cmovcc.am i64 
    setargs                   1 0
    push           pc_genss.do_cmovcc.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           64         i64 
    push           pc_genss.do_cmovcc.cond i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_cmovcc.am i64 
    push           pc_genss.do_cmovcc.b u64 
    callproc       &pc_genss.genamode 
#16410: 
    retproc                   
End


Proc pc_genss.do_fmem:
    param          pc_genss.do_fmem.a u64 
    param          pc_genss.do_fmem.freal i64 
    param          pc_genss.do_fmem.code i64 
    local          pc_genss.do_fmem.am i64 
    local          pc_genss.do_fmem.regcode i64 
    local          pc_genss.do_fmem.mf i64 
    procentry                 
    push           pc_genss.do_fmem.a u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpeq         #16412     i64 
    setargs                   1 0
    push           "fmem/not mem" u64 
    callproc       &pci_mcl.axerror 
#16412: 
    push           pc_genss.do_fmem.freal i64 
    jumpfalse      #16413     i64 
    push           pc_genss.do_fmem.a u64 
    push           8          
    pushptroff                u8 1 0
    push           4          i64 
    casejumpeq     #16414     i64 0
    push           8          i64 
    casejumpeq     #16415     i64 0
    push           16         i64 
    casejumpeq     #16416     i64 0
    popstack                  i64 
    jump           #16417     
#16414: 
    push           0          i64 
    pop            pc_genss.do_fmem.mf i64 
    jump           #16418     
#16415: 
    push           2          i64 
    pop            pc_genss.do_fmem.mf i64 
    jump           #16418     
#16416: 
    push           1          i64 
    pop            pc_genss.do_fmem.mf i64 
    push           pc_genss.do_fmem.code i64 
    push           0          i64 
    casejumpeq     #16419     i64 0
    push           3          i64 
    casejumpeq     #16420     i64 0
    popstack                  i64 
    jump           #16421     
#16419: 
    push           5          i64 
    pop            pc_genss.do_fmem.code i64 
    jump           #16422     
#16420: 
    push           7          i64 
    pop            pc_genss.do_fmem.code i64 
    jump           #16422     
#16421: 
    setargs                   1 0
    push           "r80 not allowed" u64 
    callproc       &pci_mcl.axerror 
#16422: 
    jump           #16418     
#16417: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "SIZE="    u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_genss.do_fmem.a u64 
    push           8          
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "fmem size" u64 
    callproc       &pci_mcl.axerror 
#16418: 
    jump           #16423     
#16413: 
    push           pc_genss.do_fmem.a u64 
    push           8          
    pushptroff                u8 1 0
    push           2          i64 
    casejumpeq     #16424     i64 0
    push           4          i64 
    casejumpeq     #16425     i64 0
    push           8          i64 
    casejumpeq     #16426     i64 0
    popstack                  i64 
    jump           #16427     
#16424: 
    push           3          i64 
    pop            pc_genss.do_fmem.mf i64 
    jump           #16428     
#16425: 
    push           1          i64 
    pop            pc_genss.do_fmem.mf i64 
    jump           #16428     
#16426: 
    push           3          i64 
    pop            pc_genss.do_fmem.mf i64 
    push           pc_genss.do_fmem.code i64 
    push           0          i64 
    casejumpeq     #16429     i64 0
    push           3          i64 
    casejumpeq     #16430     i64 0
    popstack                  i64 
    jump           #16431     
#16429: 
    push           5          i64 
    pop            pc_genss.do_fmem.code i64 
    jump           #16432     
#16430: 
    push           7          i64 
    pop            pc_genss.do_fmem.code i64 
    jump           #16432     
#16431: 
    setargs                   1 0
    push           "fst i64?" u64 
    callproc       &pci_mcl.axerror 
#16432: 
    jump           #16428     
#16427: 
    setargs                   1 0
    push           "fmem int size" u64 
    callproc       &pci_mcl.axerror 
#16428: 
#16423: 
    setargs                   2 0
    push           pc_genss.do_fmem.code i64 
    push           pc_genss.do_fmem.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_fmem.am i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           217        i64 
    push           pc_genss.do_fmem.mf i64 
    push           1          i64 
    shl                       i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_fmem.am i64 
    push           pc_genss.do_fmem.a u64 
    callproc       &pc_genss.genamode 
#16433: 
    retproc                   
End


Proc pc_genss.genrel8:
    param          pc_genss.genrel8.a u64 
    local          pc_genss.genrel8.d u64 
    procentry                 
    setargs                   2 0
    push           1          i64 
    push           pc_genss.genrel8.a u64 
    callfn         &pc_genss.getdef u64 
    pop            pc_genss.genrel8.d u64 
    push           pc_genss.genrel8.d u64 
    push           29         
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #16435     i64 
    setargs                   4 0
    push           0          i64 
    push           6          i64 
    setargs                   1 0
    push           3          i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           pc_genss.genrel8.d u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_genss.addfwdref u64 
    push           pc_genss.genrel8.d u64 
    push           8          
    popptroff                 u64 1 0
    setargs                   1 0
    push           0          i64 
    callproc       &pc_genss.genbyte 
    jump           #16436     
#16435: 
    setargs                   1 0
    push           "genrel8"  u64 
    callproc       &pci_mcl.axerror 
#16436: 
#16437: 
    retproc                   
End


Proc pc_genss.checkshortjump: i64
    param          pc_genss.checkshortjump.m u64 
    param          pc_genss.checkshortjump.d u64 
    local          pc_genss.checkshortjump.n i64 
    procentry                 
    push           0          i64 
    pop            pc_genss.checkshortjump.n i64 
    push           pc_genss.checkshortjump.m u64 
    pushptr                   u64 
    pop            pc_genss.checkshortjump.m u64 
    jump           #16439     
#16440: 
    push           pc_genss.checkshortjump.m u64 
    push           24         
    pushptroff                u8 1 0
    push           9          i64 
    casejumpeq     #16441     i64 0
    push           3          i64 
    casejumpeq     #16442     i64 0
    push           4          i64 
    casejumpeq     #16442     i64 0
    popstack                  i64 
    jump           #16443     
#16441: 
    push           pc_genss.checkshortjump.m u64 
    push           8          
    pushptroff                u64 1 0
    pushptr                   i64 
    push           pc_genss.checkshortjump.d u64 
    push           40         
    pushptroff                i32 1 0
    jumpne         #16444     i64 
    push           1          i64 
    setret                    i64 
    jump           #16445     
#16444: 
    jump           #16446     
#16442: 
    jump           #16446     
#16443: 
    push           &pc_genss.checkshortjump.n 
    incr                      i64 1
#16446: 
    push           pc_genss.checkshortjump.m u64 
    pushptr                   u64 
    pop            pc_genss.checkshortjump.m u64 
#16439: 
    push           pc_genss.checkshortjump.m u64 
    jumpfalse      #16447     u64 
    push           pc_genss.checkshortjump.n i64 
    push           8          i64 
    jumple         #16440     i64 
#16447: 
#16448: 
    push           0          i64 
    setret                    i64 
    jump           #16445     
#16445: 
    retfn                     i64 
End


Proc pc_genss.addfwdref: u64
    param          pc_genss.addfwdref.p u64 
    param          pc_genss.addfwdref.offset i64 
    param          pc_genss.addfwdref.reltype i64 
    param          pc_genss.addfwdref.seg i64 
    local          pc_genss.addfwdref.q u64 
    procentry                 
    setargs                   1 0
    push           16         i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pc_genss.addfwdref.q u64 
    push           pc_genss.addfwdref.p u64 
    push           pc_genss.addfwdref.q u64 
    push           0          
    popptroff                 u64 1 0
    push           pc_genss.addfwdref.offset i64 
    push           pc_genss.addfwdref.q u64 
    push           8          
    popptroff                 i32 1 0
    push           pc_genss.addfwdref.reltype i64 
    push           pc_genss.addfwdref.q u64 
    push           12         
    popptroff                 i16 1 0
    push           pc_genss.addfwdref.seg i64 
    push           pc_genss.addfwdref.q u64 
    push           14         
    popptroff                 i16 1 0
    push           pc_genss.addfwdref.q u64 
    setret                    u64 
    jump           #16450     
#16450: 
    retfn                     u64 
End


Proc pc_genss.switchseg:
    param          pc_genss.switchseg.newseg i64 
    procentry                 
    push           pc_genss.switchseg.newseg i64 
    push           pc_genss.currseg i64 
    jumpne         #16452     i64 
    jump           #16453     
#16452: 
    push           pc_genss.currseg i64 
    push           1          i64 
    casejumpeq     #16454     i64 0
    push           2          i64 
    casejumpeq     #16455     i64 0
    popstack                  i64 
    jump           #16456     
#16454: 
    push           pc_genss.currrelocs u64 
    pop            pci_mcl.ss_coderelocs u64 
    push           pc_genss.nrelocs i64 
    pop            pci_mcl.ss_ncoderelocs i64 
    jump           #16457     
#16455: 
    push           pc_genss.currrelocs u64 
    pop            pci_mcl.ss_idatarelocs u64 
    push           pc_genss.nrelocs i64 
    pop            pci_mcl.ss_nidatarelocs i64 
    jump           #16457     
#16456: 
#16457: 
    push           pc_genss.switchseg.newseg i64 
    pop            pc_genss.currseg i64 
    push           pc_genss.currseg i64 
    push           1          i64 
    casejumpeq     #16458     i64 0
    push           2          i64 
    casejumpeq     #16459     i64 0
    push           3          i64 
    casejumpeq     #16460     i64 0
    popstack                  i64 
    jump           #16461     
#16458: 
    push           pci_mcl.ss_code u64 
    pop            pc_genss.currdata u64 
    push           pci_mcl.ss_coderelocs u64 
    pop            pc_genss.currrelocs u64 
    push           pci_mcl.ss_ncoderelocs i64 
    pop            pc_genss.nrelocs i64 
    jump           #16462     
#16459: 
    push           pci_mcl.ss_idata u64 
    pop            pc_genss.currdata u64 
    push           pci_mcl.ss_idatarelocs u64 
    pop            pc_genss.currrelocs u64 
    push           pci_mcl.ss_nidatarelocs i64 
    pop            pc_genss.nrelocs i64 
    jump           #16462     
#16460: 
    push           pci_mcl.ss_zdata u64 
    pop            pc_genss.currdata u64 
    jump           #16462     
#16461: 
#16462: 
#16453: 
    retproc                   
End


Proc pc_genss.do_movdqx:
    param          pc_genss.do_movdqx.a u64 
    param          pc_genss.do_movdqx.b u64 
    param          pc_genss.do_movdqx.opc i64 
    local          pc_genss.do_movdqx.am i64 
    local          pc_genss.do_movdqx.regcode i64 
    procentry                 
    push           pc_genss.do_movdqx.a u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    casejumpeq     #16464     i64 0
    push           3          i64 
    casejumpeq     #16465     i64 0
    popstack                  i64 
    jump           #16466     
#16464: 
    push           pc_genss.do_movdqx.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    casejumpeq     #16467     i64 0
    push           3          i64 
    casejumpeq     #16468     i64 0
    popstack                  i64 
    jump           #16469     
#16467: 
    setargs                   1 0
    push           pc_genss.do_movdqx.b u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcodebx i64 
    pop            pc_genss.do_movdqx.regcode i64 
    setargs                   2 0
    push           pc_genss.do_movdqx.regcode i64 
    push           pc_genss.do_movdqx.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_movdqx.am i64 
    setargs                   1 0
    push           pc_genss.do_movdqx.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           111        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_movdqx.am i64 
    push           pc_genss.do_movdqx.a u64 
    callproc       &pc_genss.genamode 
    jump           #16470     
#16468: 
    setargs                   1 0
    push           pc_genss.do_movdqx.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_movdqx.regcode i64 
    setargs                   2 0
    push           pc_genss.do_movdqx.regcode i64 
    push           pc_genss.do_movdqx.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_movdqx.am i64 
    setargs                   1 0
    push           pc_genss.do_movdqx.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           111        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_movdqx.am i64 
    push           pc_genss.do_movdqx.b u64 
    callproc       &pc_genss.genamode 
    jump           #16470     
#16469: 
    setargs                   1 0
    push           "movdqx?"  u64 
    callproc       &pci_mcl.axerror 
#16470: 
    jump           #16471     
#16465: 
    push           pc_genss.do_movdqx.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    casejumpeq     #16472     i64 0
    popstack                  i64 
    jump           #16473     
#16472: 
    setargs                   1 0
    push           pc_genss.do_movdqx.b u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_movdqx.regcode i64 
    setargs                   2 0
    push           pc_genss.do_movdqx.regcode i64 
    push           pc_genss.do_movdqx.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_movdqx.am i64 
    setargs                   1 0
    push           pc_genss.do_movdqx.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           127        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_movdqx.am i64 
    push           pc_genss.do_movdqx.a u64 
    callproc       &pc_genss.genamode 
    jump           #16474     
#16473: 
    setargs                   1 0
    push           "movdqx"   u64 
    callproc       &pci_mcl.axerror 
#16474: 
    jump           #16471     
#16466: 
    setargs                   1 0
    push           "movdqx"   u64 
    callproc       &pci_mcl.axerror 
#16471: 
#16475: 
    retproc                   
End


Proc pc_genss.do_popcnt:
    param          pc_genss.do_popcnt.a u64 
    param          pc_genss.do_popcnt.b u64 
    local          pc_genss.do_popcnt.am i64 
    local          pc_genss.do_popcnt.regcode i64 
    procentry                 
    push           pc_genss.do_popcnt.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #16477     i64 
    push           pc_genss.do_popcnt.b u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #16478     i64 
    push           8          i64 
    push           pc_genss.do_popcnt.b u64 
    push           8          
    popptroff                 u8 1 0
#16478: 
#16477: 
    setargs                   1 0
    push           243        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_popcnt.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcodebx i64 
    pop            pc_genss.do_popcnt.regcode i64 
    setargs                   2 0
    push           pc_genss.do_popcnt.regcode i64 
    push           pc_genss.do_popcnt.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_popcnt.am i64 
    setargs                   1 0
    push           pc_genss.do_popcnt.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           184        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_popcnt.am i64 
    push           pc_genss.do_popcnt.b u64 
    callproc       &pc_genss.genamode 
#16479: 
    retproc                   
End


Proc pc_genss.do_bsf:
    param          pc_genss.do_bsf.a u64 
    param          pc_genss.do_bsf.b u64 
    param          pc_genss.do_bsf.opc i64 
    local          pc_genss.do_bsf.am i64 
    local          pc_genss.do_bsf.regcode i64 
    procentry                 
    push           pc_genss.do_bsf.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #16481     i64 
    push           pc_genss.do_bsf.b u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #16482     i64 
    push           8          i64 
    push           pc_genss.do_bsf.b u64 
    push           8          
    popptroff                 u8 1 0
#16482: 
#16481: 
    push           pc_genss.do_bsf.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_bsf.b u64 
    push           8          
    pushptroff                u8 1 0
    jumpeq         #16483     i64 
    setargs                   1 0
    push           "bsf size" u64 
    callproc       &pci_mcl.axerror 
#16483: 
    setargs                   1 0
    push           pc_genss.do_bsf.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcodebx i64 
    pop            pc_genss.do_bsf.regcode i64 
    setargs                   2 0
    push           pc_genss.do_bsf.regcode i64 
    push           pc_genss.do_bsf.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_bsf.am i64 
    setargs                   1 0
    push           pc_genss.do_bsf.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_bsf.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_bsf.am i64 
    push           pc_genss.do_bsf.b u64 
    callproc       &pc_genss.genamode 
#16484: 
    retproc                   
End


Proc pc_genss.extendsymboltable:
    local          pc_genss.extendsymboltable.oldsymboltable u64 
    local          pc_genss.extendsymboltable.oldsymboltablesize i64 
    local          pc_genss.extendsymboltable.i i64 
    procentry                 
    push           pci_mcl.ss_symboltablesize i64 
    pop            pc_genss.extendsymboltable.oldsymboltablesize i64 
    push           pci_mcl.ss_symboltable u64 
    pop            pc_genss.extendsymboltable.oldsymboltable u64 
    push           &pci_mcl.ss_symboltablesize 
    push           2          i64 
    multo                     i64 
    setargs                   1 0
    push           8          i64 
    push           pci_mcl.ss_symboltablesize i64 
    mul                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pci_mcl.ss_symboltable u64 
#16486: 
    push           1          i64 
    pop            pc_genss.extendsymboltable.i i64 
    push           pci_mcl.ss_nsymbols i64 
    push           1          i64 
    jumplt         #16487     i64 
#16488: 
    push           pc_genss.extendsymboltable.oldsymboltable u64 
    push           pc_genss.extendsymboltable.i i64 
    pushptroff                u64 8 -8
    push           pci_mcl.ss_symboltable u64 
    push           pc_genss.extendsymboltable.i i64 
    popptroff                 u64 8 -8
#16489: 
    forup          #16488     i64 1
    opnd           pc_genss.extendsymboltable.i 
    opnd           pci_mcl.ss_nsymbols 
#16487: 
    setargs                   2 0
    push           8          i64 
    push           pc_genss.extendsymboltable.oldsymboltablesize i64 
    mul                       i64 
    push           pc_genss.extendsymboltable.oldsymboltable u64 
    callproc       &mlibp.pcm_free 
#16490: 
    retproc                   
End


Proc pc_genss.fixregvar:
    local          pc_genss.fixregvar.m u64 
    procentry                 
    push           pci_mcl.mccode u64 
    pop            pc_genss.fixregvar.m u64 
#16492: 
    retproc                   
End


Proc pc_genss.initlib:
    param          pc_genss.initlib.nlabels i64 
    local          pc_genss.initlib.str block:256 
    local          pc_genss.initlib.i i64 
    procentry                 
    setargs                   1 0
    push           262144     i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pci_mcl.ss_symboltable u64 
    push           32768      i64 
    pop            pci_mcl.ss_symboltablesize i64 
    push           0          i64 
    pop            pci_mcl.ss_nsymbols i64 
    setargs                   1 0
    push           pc_genss.initlib.nlabels i64 
    push           8          i64 
    mul                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pci_mcl.labeldeftable u64 
#16494: 
    push           1          i64 
    pop            pc_genss.initlib.i i64 
    push           pc_genss.initlib.nlabels i64 
    push           1          i64 
    jumplt         #16495     i64 
#16496: 
    setargs                   1 0
    push           64         i64 
    callfn         &mlibp.pcm_allocz u64 
    push           pci_mcl.labeldeftable u64 
    push           pc_genss.initlib.i i64 
    popptroff                 u64 8 -8
    push           pc_genss.initlib.i i64 
    push           pci_mcl.labeldeftable u64 
    push           pc_genss.initlib.i i64 
    pushptroff                u64 8 -8
    push           40         
    popptroff                 i32 1 0
    setargs                   1 0
    push           &pc_genss.initlib.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "(L#)"     u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           pc_genss.initlib.i i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           &pc_genss.initlib.str 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           pci_mcl.labeldeftable u64 
    push           pc_genss.initlib.i i64 
    pushptroff                u64 8 -8
    push           0          
    popptroff                 u64 1 0
    push           1          i64 
    push           pci_mcl.labeldeftable u64 
    push           pc_genss.initlib.i i64 
    pushptroff                u64 8 -8
    push           29         
    popptroff                 u8 1 0
#16497: 
    forup          #16496     i64 1
    opnd           pc_genss.initlib.i 
    opnd           pc_genss.initlib.nlabels 
#16495: 
#16498: 
    retproc                   
End


Proc pc_genss.buffercreate: u64
    param          pc_genss.buffercreate.size i64 
    local          pc_genss.buffercreate.a u64 
    procentry                 
    setargs                   1 0
    push           32         i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pc_genss.buffercreate.a u64 
    push           pc_genss.buffercreate.size i64 
    push           pc_genss.buffercreate.a u64 
    push           24         
    popptroff                 i64 1 0
    setargs                   1 0
    push           pc_genss.buffercreate.a u64 
    push           24         
    pushptroff                i64 1 0
    callfn         &mlibp.pcm_alloc u64 
    push           pc_genss.buffercreate.a u64 
    push           8          
    storeptroff               u64 1 0
    push           pc_genss.buffercreate.a u64 
    push           0          
    popptroff                 u64 1 0
    push           pc_genss.buffercreate.a u64 
    pushptr                   u64 
    push           pc_genss.buffercreate.a u64 
    push           24         
    pushptroff                i64 1 0
    addrefoff                 u64 1 0
    push           pc_genss.buffercreate.a u64 
    push           16         
    popptroff                 u64 1 0
    push           pc_genss.buffercreate.a u64 
    setret                    u64 
    jump           #16500     
#16500: 
    retfn                     u64 
End


Proc pc_genss.bufferexpand:
    param          pc_genss.bufferexpand.a u64 
    local          pc_genss.bufferexpand.newalloc i64 
    local          pc_genss.bufferexpand.usedbytes i64 
    local          pc_genss.bufferexpand.p u64 
    procentry                 
    push           pc_genss.bufferexpand.a u64 
    push           24         
    pushptroff                i64 1 0
    push           2          i64 
    mul                       i64 
    pop            pc_genss.bufferexpand.newalloc i64 
    push           pc_genss.bufferexpand.a u64 
    push           8          
    pushptroff                u64 1 0
    push           pc_genss.bufferexpand.a u64 
    pushptr                   u64 
    subref                    i64 1
    pop            pc_genss.bufferexpand.usedbytes i64 
    push           pc_genss.bufferexpand.usedbytes i64 
    push           pc_genss.bufferexpand.a u64 
    push           24         
    pushptroff                i64 1 0
    jumple         #16502     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "dbuffer error" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           0          
    stop                      
#16502: 
    setargs                   1 0
    push           pc_genss.bufferexpand.newalloc i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pc_genss.bufferexpand.p u64 
    setargs                   3 0
    push           pc_genss.bufferexpand.usedbytes u64 
    push           pc_genss.bufferexpand.a u64 
    pushptr                   u64 
    push           pc_genss.bufferexpand.p u64 
    callproc       &memcpy    
    push           pc_genss.bufferexpand.p u64 
    push           pc_genss.bufferexpand.a u64 
    push           0          
    popptroff                 u64 1 0
    push           pc_genss.bufferexpand.p u64 
    push           pc_genss.bufferexpand.usedbytes i64 
    addrefoff                 u64 1 0
    push           pc_genss.bufferexpand.a u64 
    push           8          
    popptroff                 u64 1 0
    push           pc_genss.bufferexpand.newalloc i64 
    push           pc_genss.bufferexpand.a u64 
    push           24         
    popptroff                 i64 1 0
    push           pc_genss.bufferexpand.p u64 
    push           pc_genss.bufferexpand.newalloc i64 
    addrefoff                 u64 1 0
    push           pc_genss.bufferexpand.a u64 
    push           16         
    popptroff                 u64 1 0
#16503: 
    retproc                   
End


Proc pc_genss.buffercheck:
    param          pc_genss.buffercheck.a u64 
    param          pc_genss.buffercheck.n i64 
    procentry                 
    jump           #16505     
#16506: 
    setargs                   1 0
    push           pc_genss.buffercheck.a u64 
    callproc       &pc_genss.bufferexpand 
#16505: 
    push           pc_genss.buffercheck.a u64 
    push           16         
    pushptroff                u64 1 0
    push           pc_genss.buffercheck.a u64 
    push           8          
    pushptroff                u64 1 0
    subref                    i64 1
    push           pc_genss.buffercheck.n i64 
    jumplt         #16506     i64 
#16507: 
#16508: 
    retproc                   
End


Proc pc_genss.bufferlength: i64
    param          pc_genss.bufferlength.a u64 
    procentry                 
    push           pc_genss.bufferlength.a u64 
    push           8          
    pushptroff                u64 1 0
    push           pc_genss.bufferlength.a u64 
    pushptr                   u64 
    subref                    i64 1
    setret                    i64 
    jump           #16510     
#16510: 
    retfn                     i64 
End


Proc pc_genss.bufferelemptr: u64
    param          pc_genss.bufferelemptr.a u64 
    param          pc_genss.bufferelemptr.offset i64 
    procentry                 
    push           pc_genss.bufferelemptr.a u64 
    pushptr                   u64 
    push           pc_genss.bufferelemptr.offset i64 
    addrefoff                 u64 1 0
    setret                    u64 
    jump           #16512     
#16512: 
    retfn                     u64 
End


Proc pc_genss.addword:
    param          pc_genss.addword.a u64 
    param          pc_genss.addword.x i64 
    procentry                 
    push           pc_genss.addword.x i64 
    push           pc_genss.addword.a u64 
    push           8          
    pushptroff                u64 1 0
    popptr                    u16 
    push           pc_genss.addword.a u64 
    push           8          
    addrefoff                 u64 1 0
    incr                      u64 2
#16514: 
    retproc                   
End


Proc pc_genss.adddword:
    param          pc_genss.adddword.a u64 
    param          pc_genss.adddword.x i64 
    procentry                 
    push           pc_genss.adddword.x i64 
    push           pc_genss.adddword.a u64 
    push           8          
    pushptroff                u64 1 0
    popptr                    u32 
    push           pc_genss.adddword.a u64 
    push           8          
    addrefoff                 u64 1 0
    incr                      u64 4
#16516: 
    retproc                   
End


Proc pc_genss.addqword:
    param          pc_genss.addqword.a u64 
    param          pc_genss.addqword.x i64 
    procentry                 
    push           pc_genss.addqword.x u64 
    push           pc_genss.addqword.a u64 
    push           8          
    pushptroff                u64 1 0
    popptr                    u64 
    push           pc_genss.addqword.a u64 
    push           8          
    addrefoff                 u64 1 0
    incr                      u64 8
#16518: 
    retproc                   
End


Proc mm_genpcl.codegen_pcl: i64
    param          mm_genpcl.codegen_pcl.rts i64 
    local          mm_genpcl.codegen_pcl.d u64 
    local          mm_genpcl.codegen_pcl.e u64 
    local          mm_genpcl.codegen_pcl.pp u64 
    procentry                 
    setargs                   1 0
    push           mm_decls.nunits i64 
    callproc       &pc_libpcl.pcl_start 
    setargs                   1 0
    push           mm_decls.stprogram u64 
    callproc       &mm_genpcl.scansymbol 
    push           mm_decls.staticlist u64 
    pop            mm_genpcl.codegen_pcl.pp u64 
    jump           #16520     
#16521: 
    push           mm_genpcl.codegen_pcl.pp u64 
    pushptr                   u64 
    pop            mm_genpcl.codegen_pcl.d u64 
    setargs                   1 0
    push           mm_genpcl.codegen_pcl.d u64 
    callproc       &mm_genpcl.dostaticvar 
    push           mm_genpcl.codegen_pcl.pp u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_genpcl.codegen_pcl.pp u64 
#16520: 
    push           mm_genpcl.codegen_pcl.pp u64 
    jumptrue       #16521     u64 
#16522: 
    setargs                   1 0
    push           ""         u64 
    callproc       &pc_libpcl.pcl_gencomment 
    push           mm_decls.proclist u64 
    pop            mm_genpcl.codegen_pcl.pp u64 
    jump           #16523     
#16524: 
    push           mm_genpcl.codegen_pcl.pp u64 
    pushptr                   u64 
    pop            mm_genpcl.codegen_pcl.d u64 
    setargs                   1 0
    push           mm_genpcl.codegen_pcl.d u64 
    store          mm_decls.currproc u64 
    callproc       &mm_genpcl.genprocdef 
    push           mm_genpcl.codegen_pcl.pp u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_genpcl.codegen_pcl.pp u64 
#16523: 
    push           mm_genpcl.codegen_pcl.pp u64 
    jumptrue       #16524     u64 
#16525: 
    setargs                   2 0
    push           mm_genpcl.codegen_pcl.rts i64 
    push           0          i64 
    callproc       &pc_win64.pcl_endprog 
    push           1          i64 
    setret                    i64 
    jump           #16526     
#16526: 
    retfn                     i64 
End


Proc mm_genpcl.genprocdef:
    param          mm_genpcl.genprocdef.p u64 
    local          mm_genpcl.genprocdef.str block:1256 
    local          mm_genpcl.genprocdef.name block:1256 
    local          mm_genpcl.genprocdef.paramoffset i64 
    local          mm_genpcl.genprocdef.nparams i64 
    local          mm_genpcl.genprocdef.retaddrbytes i64 
    local          mm_genpcl.genprocdef.d u64 
    local          mm_genpcl.genprocdef.n i64 
    local          mm_genpcl.genprocdef.lab i64 
    local          mm_genpcl.genprocdef.np i64 
    local          mm_genpcl.genprocdef.offset i64 
    local          mm_genpcl.genprocdef.reg i64 
    local          mm_genpcl.genprocdef.i i64 
    local          mm_genpcl.genprocdef.xreg i64 
    local          mm_genpcl.genprocdef.isstart i64 
    local          mm_genpcl.genprocdef.structret i64 
    local          mm_genpcl.genprocdef.isfloat i64 
    local          mm_genpcl.genprocdef.hasparams i64 
    local          mm_genpcl.genprocdef.hasequiv i64 
    local          mm_genpcl.genprocdef.q u64 
    local          mm_genpcl.genprocdef.pcproc u64 
    local          mm_genpcl.genprocdef.oldpccode u64 
    local          mm_genpcl.genprocdef.oldpccurr u64 
    local          mm_genpcl.genprocdef.pp u64 
    local          mm_genpcl.genprocdef.qq u64 
    procentry                 
    push           mm_genpcl.genprocdef.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_genpcl.genprocdef.d u64 
    push           0          i64 
    pop            mm_genpcl.genprocdef.isstart i64 
    push           mm_genpcl.genprocdef.p u64 
    push           92         
    pushptroff                u16 1 0
    push           0          i64 
    push           1          i64 
    dotslice                  i64 
    jumpfalse      #16528     u64 
    setargs                   2 0
    push           "start"    u64 
    push           mm_genpcl.genprocdef.p u64 
    pushptr                   u64 
    callfn         &mlibp.eqstring i64 
    jumptrue       #16529     i64 
    setargs                   2 0
    push           "main"     u64 
    push           mm_genpcl.genprocdef.p u64 
    pushptr                   u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #16528     i64 
#16529: 
    push           1          i64 
    pop            mm_genpcl.genprocdef.isstart i64 
    push           pc_libpcl.labelno i64 
    push           mm_genpcl.genprocdef.p u64 
    push           80         
    popptroff                 i32 1 0
#16528: 
    push           1          i64 
    pop            mm_genpcl.retpending i64 
    push           mm_genpcl.genprocdef.p u64 
    push           88         
    pushptroff                u32 1 0
    pop            mm_tables.mlineno i64 
    setargs                   2 0
    setargs                   1 0
    push           mm_genpcl.genprocdef.p u64 
    callfn         &mm_genpcl.genmem_d u64 
    startmult                 
    push           mm_genpcl.genprocdef.p u64 
    push           118        
    pushptroff                u8 1 0
    jumpfalse      #16530     i64 
    push           16         i64 
    resetmult                 
    jump           #16531     
#16530: 
    push           8          i64 
    endmult                   
#16531: 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_genpcl.genprocdef.p u64 
    push           72         
    pushptroff                i32 1 0
    callproc       &mm_genpcl.setmode 
    push           mm_genpcl.genprocdef.p u64 
    push           92         
    pushptroff                u16 1 0
    push           0          i64 
    push           1          i64 
    dotslice                  i64 
    push           2          i64 
    jumpne         #16532     i64 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_libpcl.pcl_setexported 
#16532: 
    push           mm_genpcl.genprocdef.p u64 
    pushptr                   u64 
    pushptr                   u8 
    push           36         u64 
    jumpne         #16533     u64 
    setargs                   0 0
    callproc       &pc_libpcl.pcl_setrtsproc 
#16533: 
    push           pc_libpcl.pccurr u64 
    pop            mm_genpcl.genprocdef.pcproc u64 
    push           mm_genpcl.genprocdef.pcproc u64 
    pop            mm_genpcl.pclastframe u64 
    push           0          i64 
    pop            mm_genpcl.pcltempindex i64 
    push           mm_genpcl.genprocdef.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_genpcl.genprocdef.d u64 
    jump           #16534     
#16535: 
    push           mm_genpcl.genprocdef.d u64 
    push           88         
    pushptroff                u32 1 0
    pop            mm_tables.mlineno i64 
    push           mm_genpcl.genprocdef.d u64 
    push           78         
    pushptroff                u8 1 0
    push           12         i64 
    casejumpeq     #16536     i64 0
    push           13         i64 
    casejumpeq     #16537     i64 0
    popstack                  i64 
    jump           #16538     
#16536: 
    push           mm_genpcl.genprocdef.d u64 
    push           92         
    pushptroff                u16 1 0
    push           13         i64 
    dotindex                  i64 
    jumptrue       #16539     u64 
    setargs                   2 0
    setargs                   1 0
    push           mm_genpcl.genprocdef.d u64 
    callfn         &mm_genpcl.genmem_d u64 
    push           18         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_genpcl.genprocdef.d u64 
    push           72         
    pushptroff                i32 1 0
    callproc       &mm_genpcl.setmode 
    push           pc_libpcl.pccurr u64 
    pop            mm_genpcl.pclastframe u64 
#16539: 
    jump           #16540     
#16537: 
    setargs                   2 0
    setargs                   1 0
    push           mm_genpcl.genprocdef.d u64 
    callfn         &mm_genpcl.genmem_d u64 
    push           19         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_genpcl.genprocdef.d u64 
    push           72         
    pushptroff                i32 1 0
    callproc       &mm_genpcl.setmode 
    jump           #16540     
#16538: 
#16540: 
    push           mm_genpcl.genprocdef.d u64 
    push           32         
    pushptroff                u64 1 0
    pop            mm_genpcl.genprocdef.d u64 
#16534: 
    push           mm_genpcl.genprocdef.d u64 
    jumptrue       #16535     u64 
#16541: 
    setargs                   1 0
    push           mm_genpcl.genprocdef.isstart i64 
    callproc       &mm_genpcl.genprocentry 
    push           mm_genpcl.genprocdef.isstart i64 
    jumpfalse      #16542     i64 
    push           mm_decls.msyslevel i64 
    push           2          i64 
    jumpne         #16542     i64 
    setargs                   5 0
    push           0          i64 
    push           0          u64 
    push           0          u64 
    push           0          u64 
    push           1          i64 
    callproc       &mm_genpcl.pcl_gen_sysproc 
#16542: 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    store          mm_genpcl.genprocdef.lab i64 
    pop            mm_genpcl.retindex i64 
    push           mm_genpcl.genprocdef.isstart i64 
    jumpfalse      #16543     i64 
#16544: 
    push           mm_decls.nmodules i64 
    pop            mm_genpcl.genprocdef.i i64 
    push           mm_genpcl.genprocdef.i i64 
    push           1          i64 
    jumplt         #16545     i64 
#16546: 
    push           &mm_decls.moduletable 
    push           mm_genpcl.genprocdef.i i64 
    addrefoff                 block:456 456 0
    push           440        
    pushptroff                u64 1 0
    pop            mm_genpcl.genprocdef.d u64 
    push           mm_genpcl.genprocdef.d u64 
    jumpfalse      #16547     u64 
    setargs                   2 0
    push           0          u64 
    push           197        i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   2 0
    setargs                   1 0
    push           mm_genpcl.genprocdef.d u64 
    callfn         &mm_genpcl.genmemaddr_d u64 
    push           45         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           4          i64 
    callproc       &mm_genpcl.setmode 
#16547: 
#16548: 
    fordown        #16546     i64 1
    opnd           mm_genpcl.genprocdef.i 
    opnd           1          
#16545: 
#16543: 
    setargs                   1 0
    push           mm_genpcl.genprocdef.p u64 
    push           64         
    pushptroff                u64 1 0
    callproc       &mm_blockpcl.evalunit 
    setargs                   1 0
    push           mm_genpcl.retindex i64 
    callproc       &mm_genpcl.definefwdlabel 
    push           mm_genpcl.genprocdef.isstart i64 
    jumpfalse      #16549     i64 
    setargs                   2 0
    setargs                   2 0
    push           9          i64 
    push           0          i64 
    callfn         &pc_libpcl.pcl_genint u64 
    push           22         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   2 0
    push           0          u64 
    push           2          i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   0 0
    callproc       &mm_genpcl.genreturn 
    jump           #16550     
#16549: 
    setargs                   0 0
    callproc       &mm_genpcl.genreturn 
#16550: 
    push           mm_genpcl.genprocdef.p u64 
    push           72         
    pushptroff                i32 1 0
    push           0          i64 
    jumpeq         #16551     i64 
    setargs                   1 0
    push           mm_genpcl.genprocdef.p u64 
    push           64         
    pushptroff                u64 1 0
    callfn         &mm_lib.checkblockreturn i64 
    jumptrue       #16552     i64 
    setargs                   3 0
    push           0          u64 
    push           mm_genpcl.genprocdef.p u64 
    pushptr                   u64 
    push           "Function needs explicit return: " u64 
    callproc       &mm_support.gerror_s 
#16552: 
#16551: 
    setargs                   2 0
    push           0          u64 
    push           10         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           ""         u64 
    callproc       &pc_libpcl.pcl_gencomment 
#16553: 
    retproc                   
End


Proc mm_genpcl.genprocentry:
    param          mm_genpcl.genprocentry.isstart i64 
    procentry                 
    setargs                   2 0
    push           0          u64 
    push           9          i64 
    callproc       &pc_libpcl.pcl_gen 
#16555: 
    retproc                   
End


Proc mm_genpcl.dostaticvar:
    param          mm_genpcl.dostaticvar.d u64 
    local          mm_genpcl.dostaticvar.p u64 
    procentry                 
    push           mm_genpcl.dostaticvar.d u64 
    push           92         
    pushptroff                u16 1 0
    push           14         i64 
    dotindex                  i64 
    jumpfalse      #16557     u64 
    jump           #16558     
#16557: 
    push           mm_genpcl.dostaticvar.d u64 
    push           92         
    pushptroff                u16 1 0
    push           13         i64 
    dotindex                  i64 
    push           1          i64 
    jumpne         #16559     i64 
    jump           #16560     
#16559: 
    push           mm_genpcl.dostaticvar.d u64 
    push           64         
    pushptroff                u64 1 0
    jumpfalse      #16561     u64 
    setargs                   2 0
    setargs                   1 0
    push           mm_genpcl.dostaticvar.d u64 
    callfn         &mm_genpcl.genmem_d u64 
    push           5          i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_genpcl.dostaticvar.d u64 
    push           72         
    pushptroff                i32 1 0
    callproc       &mm_genpcl.setmode 
    setargs                   1 0
    setargs                   1 0
    push           mm_genpcl.dostaticvar.d u64 
    push           72         
    pushptroff                i32 1 0
    callfn         &mm_lib.getalignment i64 
    callproc       &pc_libpcl.pcl_setalign 
    setargs                   4 0
    push           0          i64 
    push           65         i64 
    push           1          i64 
    push           mm_genpcl.dostaticvar.d u64 
    push           64         
    pushptroff                u64 1 0
    callproc       &mm_genpcl.genidata 
    jump           #16560     
#16561: 
!dozstatic::
#16562: 
    setargs                   2 0
    setargs                   1 0
    push           mm_genpcl.dostaticvar.d u64 
    callfn         &mm_genpcl.genmem_d u64 
    push           6          i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_genpcl.dostaticvar.d u64 
    push           72         
    pushptroff                i32 1 0
    callproc       &mm_genpcl.setmode 
    setargs                   1 0
    setargs                   1 0
    push           mm_genpcl.dostaticvar.d u64 
    push           72         
    pushptroff                i32 1 0
    callfn         &mm_lib.getalignment i64 
    callproc       &pc_libpcl.pcl_setalign 
#16560: 
#16558: 
    retproc                   
End


Proc mm_genpcl.genidata:
    param          mm_genpcl.genidata.p u64 
    param          mm_genpcl.genidata.doterm i64 
    param          mm_genpcl.genidata.am i64 
    param          mm_genpcl.genidata.offset i64 
    local          mm_genpcl.genidata.t i64 
    local          mm_genpcl.genidata.length i64 
    local          mm_genpcl.genidata.n i64 
    local          mm_genpcl.genidata.i i64 
    local          mm_genpcl.genidata.j i64 
    local          mm_genpcl.genidata.nwords i64 
    local          mm_genpcl.genidata.offset1 i64 
    local          mm_genpcl.genidata.offset2 i64 
    local          mm_genpcl.genidata.size i64 
    local          mm_genpcl.genidata.padding i64 
    local          mm_genpcl.genidata.isunion i64 
    local          mm_genpcl.genidata.tbase i64 
    local          mm_genpcl.genidata.q u64 
    local          mm_genpcl.genidata.a u64 
    local          mm_genpcl.genidata.b u64 
    local          mm_genpcl.genidata.d u64 
    local          mm_genpcl.genidata.sx r32 
    procentry                 
    push           mm_genpcl.genidata.p u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_genpcl.genidata.t i64 
    push           mm_genpcl.genidata.p u64 
    push           4          
    pushptroff                u32 1 0
    push           0          i64 
    push           23         i64 
    dotslice                  i64 
    pop            mm_tables.mlineno i64 
    push           &mm_decls.ttbasetype 
    push           mm_genpcl.genidata.t i64 
    pushptroff                i32 4 0
    pop            mm_genpcl.genidata.tbase i64 
    push           mm_genpcl.genidata.p u64 
    pushptr                   u8 
    push           1          i64 
    casejumpeq     #16564     i64 0
    push           19         i64 
    casejumpeq     #16565     i64 0
    push           3          i64 
    casejumpeq     #16566     i64 0
    push           61         i64 
    casejumpeq     #16567     i64 0
    push           62         i64 
    casejumpeq     #16568     i64 0
    push           59         i64 
    casejumpeq     #16569     i64 0
    push           60         i64 
    casejumpeq     #16569     i64 0
    popstack                  i64 
    jump           #16570     
#16564: 
    push           &mm_decls.ttisref 
    push           mm_genpcl.genidata.p u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    jumpfalse      #16571     i64 
    push           mm_genpcl.genidata.p u64 
    push           48         
    pushptroff                i32 1 0
    push           10         i64 
    jumpne         #16572     i64 
    push           mm_genpcl.genidata.p u64 
    push           16         
    pushptroff                u64 1 0
    jumpfalse      #16573     u64 
    setargs                   2 0
    setargs                   1 0
    push           mm_genpcl.genidata.p u64 
    push           16         
    pushptroff                u64 1 0
    callfn         &pc_libpcl.pcl_genstring u64 
    push           97         i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #16574     
#16573: 
    setargs                   2 0
    setargs                   2 0
    push           9          i64 
    push           0          i64 
    callfn         &pc_libpcl.pcl_genint u64 
    push           97         i64 
    callproc       &pc_libpcl.pcl_gen 
#16574: 
    jump           #16575     
#16572: 
    setargs                   2 0
    setargs                   2 0
    push           9          i64 
    push           mm_genpcl.genidata.p u64 
    push           16         
    pushptroff                i64 1 0
    callfn         &pc_libpcl.pcl_genint u64 
    push           97         i64 
    callproc       &pc_libpcl.pcl_gen 
#16575: 
    jump           #16576     
#16571: 
    push           &mm_decls.ttisreal 
    push           mm_genpcl.genidata.p u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    jumpfalse      #16577     i64 
    push           &mm_decls.ttsize 
    push           mm_genpcl.genidata.p u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           4          i64 
    casejumpeq     #16578     i64 0
    push           8          i64 
    casejumpeq     #16579     i64 0
    popstack                  i64 
    jump           #16580     
#16578: 
    setargs                   2 0
    setargs                   1 0
    push           mm_genpcl.genidata.p u64 
    push           16         
    pushptroff                r64 1 0
    callfn         &pc_libpcl.pcl_genreal32 u64 
    push           96         i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #16581     
#16579: 
    setargs                   2 0
    setargs                   1 0
    push           mm_genpcl.genidata.p u64 
    push           16         
    pushptroff                r64 1 0
    callfn         &pc_libpcl.pcl_genreal u64 
    push           97         i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #16581     
#16580: 
    setargs                   3 0
    push           mm_genpcl.genidata.p u64 
    setargs                   2 0
    push           1          i64 
    push           mm_genpcl.genidata.p u64 
    push           48         
    pushptroff                i32 1 0
    callfn         &mm_lib.strmode u64 
    push           "IDATA/REAL:" u64 
    callproc       &mm_support.gerror_s 
#16581: 
    jump           #16576     
#16577: 
    push           &mm_decls.ttsize 
    startmult                 
    push           mm_genpcl.genidata.p u64 
    push           52         
    pushptroff                i32 1 0
    jumpfalse      #16582     i64 
    push           mm_genpcl.genidata.p u64 
    push           52         
    pushptroff                i32 1 0
    resetmult                 
    jump           #16583     
#16582: 
    push           mm_genpcl.genidata.p u64 
    push           48         
    pushptroff                i32 1 0
    endmult                   
#16583: 
    pushptroff                i32 4 0
    push           1          i64 
    casejumpeq     #16584     i64 0
    push           2          i64 
    casejumpeq     #16585     i64 0
    push           4          i64 
    casejumpeq     #16586     i64 0
    push           8          i64 
    casejumpeq     #16587     i64 0
    push           16         i64 
    casejumpeq     #16588     i64 0
    popstack                  i64 
    jump           #16589     
#16584: 
    setargs                   2 0
    setargs                   2 0
    push           9          i64 
    push           mm_genpcl.genidata.p u64 
    push           16         
    pushptroff                i64 1 0
    callfn         &pc_libpcl.pcl_genint u64 
    push           94         i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #16590     
#16585: 
    setargs                   2 0
    setargs                   2 0
    push           9          i64 
    push           mm_genpcl.genidata.p u64 
    push           16         
    pushptroff                i64 1 0
    callfn         &pc_libpcl.pcl_genint u64 
    push           95         i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #16590     
#16586: 
    setargs                   2 0
    setargs                   2 0
    push           9          i64 
    push           mm_genpcl.genidata.p u64 
    push           16         
    pushptroff                i64 1 0
    callfn         &pc_libpcl.pcl_genint u64 
    push           96         i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #16590     
#16587: 
    setargs                   2 0
    setargs                   2 0
    push           9          i64 
    push           mm_genpcl.genidata.p u64 
    push           16         
    pushptroff                i64 1 0
    callfn         &pc_libpcl.pcl_genint u64 
    push           97         i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #16590     
#16588: 
    setargs                   2 0
    setargs                   2 0
    push           9          i64 
    push           mm_genpcl.genidata.p u64 
    push           16         
    pushptroff                i64 1 0
    callfn         &pc_libpcl.pcl_genint u64 
    push           97         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   2 0
    setargs                   2 0
    push           9          i64 
    push           mm_genpcl.genidata.p u64 
    push           24         
    pushptroff                i64 1 0
    callfn         &pc_libpcl.pcl_genint u64 
    push           97         i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #16590     
#16589: 
    setargs                   3 0
    push           mm_genpcl.genidata.p u64 
    setargs                   2 0
    push           1          i64 
    push           mm_genpcl.genidata.p u64 
    push           48         
    pushptroff                i32 1 0
    callfn         &mm_lib.strmode u64 
    push           "IDATA/INT:" u64 
    callproc       &mm_support.gerror_s 
#16590: 
#16576: 
    jump           #16591     
#16565: 
    push           mm_genpcl.genidata.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_genpcl.genidata.q u64 
    jump           #16592     
#16593: 
    setargs                   4 0
    push           0          i64 
    push           65         i64 
    push           1          i64 
    push           mm_genpcl.genidata.q u64 
    callproc       &mm_genpcl.genidata 
    push           mm_genpcl.genidata.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_genpcl.genidata.q u64 
#16592: 
    push           mm_genpcl.genidata.q u64 
    jumptrue       #16593     u64 
#16594: 
    jump           #16591     
#16566: 
    push           mm_genpcl.genidata.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_genpcl.genidata.d u64 
    push           mm_genpcl.genidata.d u64 
    push           78         
    pushptroff                u8 1 0
    push           11         i64 
    casejumpeq     #16595     i64 0
    push           5          i64 
    casejumpeq     #16595     i64 0
    push           6          i64 
    casejumpeq     #16595     i64 0
    popstack                  i64 
    jump           #16596     
#16595: 
    setargs                   2 0
    setargs                   1 0
    push           mm_genpcl.genidata.d u64 
    callfn         &mm_genpcl.genmemaddr_d u64 
    startmult                 
    push           mm_genpcl.genidata.am i64 
    push           80         i64 
    jumpeq         #16597     i64 
    push           &mm_decls.ttsize 
    push           mm_genpcl.genidata.p u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           8          i64 
    jumpne         #16598     i64 
#16597: 
    push           97         i64 
    resetmult                 
    jump           #16599     
#16598: 
    push           96         i64 
    endmult                   
#16599: 
    callproc       &pc_libpcl.pcl_gen 
    push           mm_genpcl.genidata.offset i64 
    jumpfalse      #16600     i64 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_libpcl.pcl_setscale 
    setargs                   1 0
    push           mm_genpcl.genidata.offset i64 
    callproc       &pc_libpcl.pcl_setoffset 
#16600: 
    jump           #16601     
#16596: 
    setargs                   2 0
    push           0          u64 
    push           "Idata &frameXXX" u64 
    callproc       &mm_support.gerror 
#16601: 
    jump           #16602     
    jump           #16591     
#16567: 
    setargs                   4 0
    push           0          i64 
    push           65         i64 
    push           1          i64 
    push           mm_genpcl.genidata.p u64 
    push           16         
    pushptroff                u64 1 0
    callproc       &mm_genpcl.genidata 
    jump           #16591     
#16568: 
    push           mm_genpcl.genidata.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_genpcl.genidata.a u64 
    push           &mm_decls.ttsize 
    push           mm_genpcl.genidata.p u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           1          i64 
    casejumpeq     #16603     i64 0
    push           2          i64 
    casejumpeq     #16604     i64 0
    push           4          i64 
    casejumpeq     #16605     i64 0
    popstack                  i64 
    jump           #16606     
#16603: 
    setargs                   2 0
    setargs                   2 0
    push           9          i64 
    push           mm_genpcl.genidata.a u64 
    push           16         
    pushptroff                i64 1 0
    callfn         &pc_libpcl.pcl_genint u64 
    push           94         i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #16607     
#16604: 
    setargs                   2 0
    setargs                   2 0
    push           9          i64 
    push           mm_genpcl.genidata.a u64 
    push           16         
    pushptroff                i64 1 0
    callfn         &pc_libpcl.pcl_genint u64 
    push           95         i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #16607     
#16605: 
    setargs                   2 0
    setargs                   2 0
    push           9          i64 
    push           mm_genpcl.genidata.a u64 
    push           16         
    pushptroff                i64 1 0
    callfn         &pc_libpcl.pcl_genint u64 
    push           96         i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #16607     
#16606: 
    setargs                   3 0
    push           mm_genpcl.genidata.p u64 
    setargs                   2 0
    push           1          i64 
    push           mm_genpcl.genidata.p u64 
    push           48         
    pushptroff                i32 1 0
    callfn         &mm_lib.strmode u64 
    push           "IDATA/SHORTEN:" u64 
    callproc       &mm_support.gerror_s 
#16607: 
    jump           #16591     
#16569: 
    setargs                   4 0
    startmult                 
    push           mm_genpcl.genidata.p u64 
    push           24         
    pushptroff                u64 1 0
    jumpfalse      #16608     u64 
    push           mm_genpcl.genidata.p u64 
    push           24         
    pushptroff                u64 1 0
    push           16         
    pushptroff                i64 1 0
    resetmult                 
    jump           #16609     
#16608: 
    push           0          i64 
    endmult                   
#16609: 
    push           80         i64 
    push           1          i64 
    push           mm_genpcl.genidata.p u64 
    push           16         
    pushptroff                u64 1 0
    callproc       &mm_genpcl.genidata 
    jump           #16591     
#16570: 
    setargs                   3 0
    push           mm_genpcl.genidata.p u64 
    push           &mm_tables.jtagnames 
    push           mm_genpcl.genidata.p u64 
    pushptr                   u8 
    pushptroff                u64 8 0
    push           "IDATA: "  u64 
    callproc       &mm_support.gerror_s 
#16591: 
#16602: 
    retproc                   
End


Proc mm_genpcl.genmem_u: u64
    param          mm_genpcl.genmem_u.p u64 
    procentry                 
    setargs                   1 0
    setargs                   1 0
    push           mm_genpcl.genmem_u.p u64 
    push           16         
    pushptroff                u64 1 0
    callfn         &mm_genpcl.getpst u64 
    callfn         &pc_libpcl.pcl_genmem u64 
    setret                    u64 
    jump           #16611     
#16611: 
    retfn                     u64 
End


Proc mm_genpcl.genmem_d: u64
    param          mm_genpcl.genmem_d.d u64 
    procentry                 
    setargs                   1 0
    setargs                   1 0
    push           mm_genpcl.genmem_d.d u64 
    callfn         &mm_genpcl.getpst u64 
    callfn         &pc_libpcl.pcl_genmem u64 
    setret                    u64 
    jump           #16613     
#16613: 
    retfn                     u64 
End


Proc mm_genpcl.genpushmem_d:
    param          mm_genpcl.genpushmem_d.d u64 
    procentry                 
    setargs                   2 0
    setargs                   1 0
    setargs                   1 0
    push           mm_genpcl.genpushmem_d.d u64 
    callfn         &mm_genpcl.getpst u64 
    callfn         &pc_libpcl.pcl_genmem u64 
    push           22         i64 
    callproc       &pc_libpcl.pcl_gen 
#16615: 
    retproc                   
End


Proc mm_genpcl.genmemaddr_d: u64
    param          mm_genpcl.genmemaddr_d.d u64 
    procentry                 
    setargs                   1 0
    setargs                   1 0
    push           mm_genpcl.genmemaddr_d.d u64 
    callfn         &mm_genpcl.getpst u64 
    callfn         &pc_libpcl.pcl_genmemaddr u64 
    setret                    u64 
    jump           #16617     
#16617: 
    retfn                     u64 
End


Proc mm_genpcl.genpushmemaddr_d:
    param          mm_genpcl.genpushmemaddr_d.d u64 
    procentry                 
    setargs                   2 0
    setargs                   1 0
    setargs                   1 0
    push           mm_genpcl.genpushmemaddr_d.d u64 
    callfn         &mm_genpcl.getpst u64 
    callfn         &pc_libpcl.pcl_genmemaddr u64 
    push           22         i64 
    callproc       &pc_libpcl.pcl_gen 
#16619: 
    retproc                   
End


Proc mm_genpcl.setmode:
    param          mm_genpcl.setmode.m i64 
    procentry                 
    setargs                   2 0
    push           &mm_decls.ttsize 
    push           mm_genpcl.setmode.m i64 
    pushptroff                i32 4 0
    setargs                   1 0
    push           mm_genpcl.setmode.m i64 
    callfn         &mm_lib.getpclmode i64 
    callproc       &pc_libpcl.pcl_settype 
#16621: 
    retproc                   
End


Proc mm_genpcl.setmode_u:
    param          mm_genpcl.setmode_u.p u64 
    procentry                 
    setargs                   2 0
    push           &mm_decls.ttsize 
    push           mm_genpcl.setmode_u.p u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    setargs                   1 0
    push           mm_genpcl.setmode_u.p u64 
    push           48         
    pushptroff                i32 1 0
    callfn         &mm_lib.getpclmode i64 
    callproc       &pc_libpcl.pcl_settype 
#16623: 
    retproc                   
End


Proc mm_genpcl.definelabel: i64
    procentry                 
    setargs                   2 0
    setargs                   1 0
    push           &pc_libpcl.labelno 
    incrload                  i64 1
    callfn         &pc_libpcl.pcl_genlabel u64 
    push           20         i64 
    callproc       &pc_libpcl.pcl_gen 
    push           pc_libpcl.labelno i64 
    setret                    i64 
    jump           #16625     
#16625: 
    retfn                     i64 
End


Proc mm_genpcl.createfwdlabel: i64
    procentry                 
    push           &pc_libpcl.labelno 
    incrload                  i64 1
    setret                    i64 
    jump           #16627     
#16627: 
    retfn                     i64 
End


Proc mm_genpcl.definefwdlabel:
    param          mm_genpcl.definefwdlabel.lab i64 
    procentry                 
    setargs                   2 0
    setargs                   1 0
    push           mm_genpcl.definefwdlabel.lab i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    push           20         i64 
    callproc       &pc_libpcl.pcl_gen 
#16629: 
    retproc                   
End


Proc mm_genpcl.genreturn:
    procentry                 
    push           mm_decls.currproc u64 
    push           116        
    pushptroff                u8 1 0
    push           0          i64 
    casejumpeq     #16631     i64 0
    push           1          i64 
    casejumpeq     #16632     i64 0
    popstack                  i64 
    jump           #16633     
#16631: 
    setargs                   2 0
    push           0          u64 
    push           47         i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #16634     
#16632: 
    setargs                   2 0
    push           0          u64 
    push           50         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_decls.currproc u64 
    push           72         
    pushptroff                i32 1 0
    callproc       &mm_genpcl.setmode 
    jump           #16634     
#16633: 
    setargs                   3 0
    push           0          u64 
    push           mm_decls.currproc u64 
    push           116        
    pushptroff                u8 1 0
    push           50         i64 
    callproc       &pc_libpcl.pcl_genx 
#16634: 
#16635: 
    retproc                   
End


Proc mm_genpcl.reversecond: i64
    param          mm_genpcl.reversecond.pclop i64 
    procentry                 
    push           mm_genpcl.reversecond.pclop i64 
    push           117        i64 
    casejumpeq     #16637     i64 0
    push           118        i64 
    casejumpeq     #16638     i64 0
    push           119        i64 
    casejumpeq     #16639     i64 0
    push           120        i64 
    casejumpeq     #16640     i64 0
    push           121        i64 
    casejumpeq     #16641     i64 0
    push           122        i64 
    casejumpeq     #16642     i64 0
    popstack                  i64 
    jump           #16643     
#16637: 
    push           118        i64 
    pop            mm_genpcl.reversecond.pclop i64 
    jump           #16644     
#16638: 
    push           117        i64 
    pop            mm_genpcl.reversecond.pclop i64 
    jump           #16644     
#16639: 
    push           121        i64 
    pop            mm_genpcl.reversecond.pclop i64 
    jump           #16644     
#16640: 
    push           122        i64 
    pop            mm_genpcl.reversecond.pclop i64 
    jump           #16644     
#16641: 
    push           119        i64 
    pop            mm_genpcl.reversecond.pclop i64 
    jump           #16644     
#16642: 
    push           120        i64 
    pop            mm_genpcl.reversecond.pclop i64 
    jump           #16644     
#16643: 
#16644: 
    push           mm_genpcl.reversecond.pclop i64 
    setret                    i64 
    jump           #16645     
#16645: 
    retfn                     i64 
End


Proc mm_genpcl.stacklooplabels:
    param          mm_genpcl.stacklooplabels.a i64 
    param          mm_genpcl.stacklooplabels.b i64 
    param          mm_genpcl.stacklooplabels.c i64 
    param          mm_genpcl.stacklooplabels.d i64 
    procentry                 
    push           &mm_genpcl.loopindex 
    incr                      i64 1
    push           mm_genpcl.loopindex i64 
    push           50         i64 
    jumple         #16647     i64 
    setargs                   2 0
    push           0          u64 
    push           "Too many nested loops" u64 
    callproc       &mm_support.gerror 
#16647: 
    push           mm_genpcl.stacklooplabels.a i64 
    push           &mm_genpcl.loopstack 
    push           mm_genpcl.loopindex i64 
    addrefoff                 block:32 32 -32
    push           1          i64 
    popptroff                 i64 8 -8
    push           mm_genpcl.stacklooplabels.b i64 
    push           &mm_genpcl.loopstack 
    push           mm_genpcl.loopindex i64 
    addrefoff                 block:32 32 -32
    push           2          i64 
    popptroff                 i64 8 -8
    push           mm_genpcl.stacklooplabels.c i64 
    push           &mm_genpcl.loopstack 
    push           mm_genpcl.loopindex i64 
    addrefoff                 block:32 32 -32
    push           3          i64 
    popptroff                 i64 8 -8
    push           mm_genpcl.stacklooplabels.d i64 
    push           &mm_genpcl.loopstack 
    push           mm_genpcl.loopindex i64 
    addrefoff                 block:32 32 -32
    push           4          i64 
    popptroff                 i64 8 -8
#16648: 
    retproc                   
End


Proc mm_genpcl.findlooplabel: i64
    param          mm_genpcl.findlooplabel.k i64 
    param          mm_genpcl.findlooplabel.n i64 
    local          mm_genpcl.findlooplabel.i i64 
    procentry                 
    push           mm_genpcl.loopindex i64 
    push           mm_genpcl.findlooplabel.n i64 
    push           1          i64 
    sub                       i64 
    sub                       i64 
    pop            mm_genpcl.findlooplabel.i i64 
    push           mm_genpcl.findlooplabel.i i64 
    push           1          i64 
    jumplt         #16650     i64 
    push           mm_genpcl.findlooplabel.i i64 
    push           mm_genpcl.loopindex i64 
    jumple         #16651     i64 
#16650: 
    setargs                   2 0
    push           0          u64 
    push           "Bad loop index" u64 
    callproc       &mm_support.gerror 
#16651: 
    push           &mm_genpcl.loopstack 
    push           mm_genpcl.findlooplabel.i i64 
    addrefoff                 block:32 32 -32
    push           mm_genpcl.findlooplabel.k i64 
    pushptroff                i64 8 -8
    setret                    i64 
    jump           #16652     
#16652: 
    retfn                     i64 
End


Proc mm_genpcl.pcl_gen_sysfn:
    param          mm_genpcl.pcl_gen_sysfn.fnindex i64 
    param          mm_genpcl.pcl_gen_sysfn.a u64 
    param          mm_genpcl.pcl_gen_sysfn.b u64 
    param          mm_genpcl.pcl_gen_sysfn.c u64 
    procentry                 
    setargs                   5 0
    push           1          i64 
    push           mm_genpcl.pcl_gen_sysfn.c u64 
    push           mm_genpcl.pcl_gen_sysfn.b u64 
    push           mm_genpcl.pcl_gen_sysfn.a u64 
    push           mm_genpcl.pcl_gen_sysfn.fnindex i64 
    callproc       &mm_genpcl.pcl_gen_sysproc 
#16654: 
    retproc                   
End


Proc mm_genpcl.getslots: i64
    param          mm_genpcl.getslots.p u64 
    procentry                 
    push           &mm_decls.ttbasetype 
    push           mm_genpcl.getslots.p u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           5          i64 
    setjumpeq      #16656     i64 
    push           3          i64 
    setjumpeq      #16656     i64 
    push           12         i64 
    setjumpne      #16657     i64 
#16656: 
    push           2          i64 
    setret                    i64 
    jump           #16658     
#16657: 
    push           1          i64 
    setret                    i64 
    jump           #16658     
#16658: 
    retfn                     i64 
End


Proc mm_genpcl.pcl_gen_sysproc:
    param          mm_genpcl.pcl_gen_sysproc.fnindex i64 
    param          mm_genpcl.pcl_gen_sysproc.a u64 
    param          mm_genpcl.pcl_gen_sysproc.b u64 
    param          mm_genpcl.pcl_gen_sysproc.c u64 
    param          mm_genpcl.pcl_gen_sysproc.asfunc i64 
    local          mm_genpcl.pcl_gen_sysproc.nargs i64 
    local          mm_genpcl.pcl_gen_sysproc.opc i64 
    local          mm_genpcl.pcl_gen_sysproc.p u64 
    procentry                 
    push           0          i64 
    pop            mm_genpcl.pcl_gen_sysproc.nargs i64 
    push           0          i64 
    pop            mm_genpcl.pcl_gen_sysproc.opc i64 
    setargs                   2 0
    push           0          u64 
    push           197        i64 
    callproc       &pc_libpcl.pcl_gen 
    push           pc_libpcl.pccurr u64 
    pop            mm_genpcl.pcl_gen_sysproc.p u64 
    push           mm_genpcl.pcl_gen_sysproc.c u64 
    jumpfalse      #16660     u64 
    setargs                   1 0
    push           mm_genpcl.pcl_gen_sysproc.c u64 
    callproc       &mm_blockpcl.evalunit 
    push           &mm_genpcl.pcl_gen_sysproc.nargs 
    setargs                   1 0
    push           mm_genpcl.pcl_gen_sysproc.c u64 
    callfn         &mm_genpcl.getslots i64 
    addto                     i64 
#16660: 
    push           mm_genpcl.pcl_gen_sysproc.b u64 
    jumpfalse      #16661     u64 
    setargs                   1 0
    push           mm_genpcl.pcl_gen_sysproc.b u64 
    callproc       &mm_blockpcl.evalunit 
    push           &mm_genpcl.pcl_gen_sysproc.nargs 
    setargs                   1 0
    push           mm_genpcl.pcl_gen_sysproc.b u64 
    callfn         &mm_genpcl.getslots i64 
    addto                     i64 
#16661: 
    push           mm_genpcl.pcl_gen_sysproc.a u64 
    jumpfalse      #16662     u64 
    setargs                   1 0
    push           mm_genpcl.pcl_gen_sysproc.a u64 
    callproc       &mm_blockpcl.evalunit 
    push           &mm_genpcl.pcl_gen_sysproc.nargs 
    setargs                   1 0
    push           mm_genpcl.pcl_gen_sysproc.a u64 
    callfn         &mm_genpcl.getslots i64 
    addto                     i64 
#16662: 
    push           mm_genpcl.pcl_gen_sysproc.nargs i64 
    push           mm_genpcl.pcl_gen_sysproc.p u64 
    push           16         
    popptroff                 i32 1 0
    setargs                   2 0
    setargs                   1 0
    setargs                   1 0
    push           mm_genpcl.pcl_gen_sysproc.fnindex i64 
    callfn         &mm_genpcl.getsysfnhandler u64 
    callfn         &pc_libpcl.pcl_genmemaddr u64 
    startmult                 
    push           mm_genpcl.pcl_gen_sysproc.asfunc i64 
    jumpfalse      #16663     i64 
    push           48         i64 
    resetmult                 
    jump           #16664     
#16663: 
    push           45         i64 
    endmult                   
#16664: 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_genpcl.pcl_gen_sysproc.nargs i64 
    callproc       &pc_libpcl.pcl_setnargs 
#16665: 
    retproc                   
End


Proc mm_genpcl.$init:
    procentry                 
    push           1          i64 
    push           &mm_genpcl.zero_unit 
    push           0          
    popptroff                 u8 1 0
    push           4          i64 
    push           &mm_genpcl.zero_unit 
    push           48         
    popptroff                 i32 1 0
    push           0          i64 
    push           &mm_genpcl.zero_unit 
    push           16         
    popptroff                 i64 1 0
    push           1          i64 
    push           &mm_genpcl.zero_unit 
    push           59         
    popptroff                 u8 1 0
#16667: 
    retproc                   
End


Proc mm_genpcl.newframetemp: u64
    param          mm_genpcl.newframetemp.owner u64 
    param          mm_genpcl.newframetemp.size i64 
    local          mm_genpcl.newframetemp.d u64 
    local          mm_genpcl.newframetemp.str block:32 
    procentry                 
    setargs                   1 0
    push           &mm_genpcl.newframetemp.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "$T#"      u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           &mm_genpcl.pcltempindex 
    incrload                  i64 1
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           128        i64 
    callfn         &mlibp.pcm_allocz u64 
    pop            mm_genpcl.newframetemp.d u64 
    setargs                   1 0
    push           &mm_genpcl.newframetemp.str 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           mm_genpcl.newframetemp.d u64 
    push           0          
    popptroff                 u64 1 0
    push           mm_genpcl.newframetemp.owner u64 
    push           mm_genpcl.newframetemp.d u64 
    push           8          
    popptroff                 u64 1 0
    push           12         i64 
    push           mm_genpcl.newframetemp.d u64 
    push           78         
    popptroff                 u8 1 0
    push           mm_genpcl.newframetemp.d u64 
    setret                    u64 
    jump           #16669     
#16669: 
    retfn                     u64 
End


Proc mm_genpcl.addframetemp:
    param          mm_genpcl.addframetemp.d u64 
    local          mm_genpcl.addframetemp.oldpccurr u64 
    local          mm_genpcl.addframetemp.pnew u64 
    local          mm_genpcl.addframetemp.pnext u64 
    procentry                 
    push           pc_libpcl.pccurr u64 
    pop            mm_genpcl.addframetemp.oldpccurr u64 
    setargs                   2 0
    setargs                   1 0
    setargs                   1 0
    push           mm_genpcl.addframetemp.d u64 
    callfn         &mm_genpcl.getpst u64 
    callfn         &pc_libpcl.pcl_genmem u64 
    push           18         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_genpcl.addframetemp.d u64 
    push           72         
    pushptroff                i32 1 0
    callproc       &mm_genpcl.setmode 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "ADDING NEW TEMPS" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#16671: 
    retproc                   
End


Proc mm_genpcl.getfullname:
    param          mm_genpcl.getfullname.d u64 
    param          mm_genpcl.getfullname.dest u64 
    procentry                 
    push           mm_genpcl.getfullname.d u64 
    push           8          
    pushptroff                u64 1 0
    jumpfalse      #16673     u64 
    push           mm_genpcl.getfullname.d u64 
    push           8          
    pushptroff                u64 1 0
    push           78         
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #16673     i64 
    setargs                   2 0
    push           mm_genpcl.getfullname.dest u64 
    push           mm_genpcl.getfullname.d u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &mm_genpcl.getfullname 
    setargs                   2 0
    push           "."        u64 
    push           mm_genpcl.getfullname.dest u64 
    callproc       &strcat    
#16673: 
    setargs                   2 0
    push           mm_genpcl.getfullname.d u64 
    pushptr                   u64 
    push           mm_genpcl.getfullname.dest u64 
    callproc       &strcat    
#16674: 
    retproc                   
End


Proc mm_genpcl.getpst: u64
    param          mm_genpcl.getpst.d u64 
    local          mm_genpcl.getpst.p u64 
    local          mm_genpcl.getpst.str block:300 
    local          mm_genpcl.getpst.e u64 
    local          mm_genpcl.getpst.av_1 i64 
    local          mm_genpcl.getpst.i i64 
    procentry                 
    push           mm_genpcl.getpst.d u64 
    push           0          u64 
    jumpne         #16676     u64 
    push           0          u64 
    setret                    u64 
    jump           #16677     
#16676: 
    push           mm_genpcl.getpst.d u64 
    push           56         
    pushptroff                u64 1 0
    jumpfalse      #16678     u64 
    push           mm_genpcl.getpst.d u64 
    push           56         
    pushptroff                u64 1 0
    setret                    u64 
    jump           #16677     
#16678: 
    push           0          u64 
    push           &mm_genpcl.getpst.str 
    push           1          i64 
    popptroff                 u8 1 -1
    push           mm_genpcl.getpst.d u64 
    pushptr                   u64 
    pushptr                   u8 
    push           109        u64 
    jumpne         #16679     u64 
    push           mm_genpcl.getpst.d u64 
    pushptr                   u64 
    push           1          i64 
    pushptroff                u8 1 0
    push           36         u64 
    jumpne         #16679     u64 
#16680: 
    push           1          i64 
    pop            mm_genpcl.getpst.i i64 
    push           32         i64 
    pop            mm_genpcl.getpst.av_1 i64 
    push           mm_genpcl.getpst.av_1 i64 
    push           1          i64 
    jumplt         #16681     i64 
#16682: 
    setargs                   2 0
    push           &mm_tables.sysfnnames 
    push           mm_genpcl.getpst.i i64 
    pushptroff                u64 8 -8
    push           6          i64 
    addrefoff                 u64 1 0
    push           mm_genpcl.getpst.d u64 
    pushptr                   u64 
    push           2          i64 
    addrefoff                 u64 1 0
    callfn         &mlibp.eqstring i64 
    jumpfalse      #16683     i64 
    push           &mm_tables.sysfnhandlers 
    push           mm_genpcl.getpst.i i64 
    pushptroff                u64 8 -8
    jumpfalse      #16684     u64 
    push           &mm_tables.sysfnhandlers 
    push           mm_genpcl.getpst.i i64 
    pushptroff                u64 8 -8
    push           mm_genpcl.getpst.d u64 
    push           56         
    storeptroff               u64 1 0
    setret                    u64 
    jump           #16677     
#16684: 
    setargs                   1 0
    push           64         i64 
    callfn         &mlibp.pcm_allocz u64 
    store          mm_genpcl.getpst.p u64 
    push           mm_genpcl.getpst.d u64 
    push           56         
    popptroff                 u64 1 0
    setargs                   2 0
    push           &mm_genpcl.getpst.str 
    push           mm_genpcl.getpst.d u64 
    callproc       &mm_genpcl.getfullname 
    setargs                   1 0
    push           &mm_genpcl.getpst.str 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           mm_genpcl.getpst.p u64 
    push           0          
    popptroff                 u64 1 0
    push           79         i64 
    push           mm_genpcl.getpst.p u64 
    push           24         
    popptroff                 u8 1 0
    push           mm_genpcl.getpst.p u64 
    push           &mm_tables.sysfnhandlers 
    push           mm_genpcl.getpst.i i64 
    popptroff                 u64 8 -8
    push           mm_genpcl.getpst.p u64 
    setret                    u64 
    jump           #16677     
#16683: 
#16685: 
    forup          #16682     i64 1
    opnd           mm_genpcl.getpst.i 
    opnd           mm_genpcl.getpst.av_1 
#16681: 
#16679: 
    setargs                   1 0
    push           64         i64 
    callfn         &mlibp.pcm_allocz u64 
    store          mm_genpcl.getpst.p u64 
    push           mm_genpcl.getpst.d u64 
    push           56         
    popptroff                 u64 1 0
    push           mm_genpcl.getpst.d u64 
    push           92         
    pushptroff                u16 1 0
    push           13         i64 
    dotindex                  i64 
    jumpfalse      #16686     u64 
    push           mm_genpcl.getpst.d u64 
    push           96         
    pushptroff                u64 1 0
    jumpfalse      #16686     u64 
    setargs                   1 0
    push           mm_genpcl.getpst.d u64 
    push           96         
    pushptroff                u64 1 0
    push           16         
    pushptroff                u64 1 0
    store          mm_genpcl.getpst.e u64 
    callfn         &mm_genpcl.getpst u64 
    pop            mm_genpcl.getpst.p u64 
    push           mm_genpcl.getpst.e u64 
    push           56         
    pushptroff                u64 1 0
    push           mm_genpcl.getpst.d u64 
    push           56         
    popptroff                 u64 1 0
    push           mm_genpcl.getpst.p u64 
    setret                    u64 
    jump           #16677     
#16686: 
    push           mm_genpcl.getpst.d u64 
    push           78         
    pushptroff                u8 1 0
    push           6          i64 
    jumpne         #16687     i64 
    push           mm_genpcl.getpst.d u64 
    push           96         
    pushptroff                u64 1 0
    jumpfalse      #16688     u64 
    setargs                   2 0
    push           mm_genpcl.getpst.d u64 
    push           96         
    pushptroff                u64 1 0
    push           &mm_genpcl.getpst.str 
    callproc       &strcpy    
    push           1          u64 
    push           mm_genpcl.getpst.p u64 
    push           46         
    addrefoff                 u64 1 0
    push           8          i64 
    popdotindex               u16 
    jump           #16689     
#16688: 
    setargs                   2 0
    push           mm_genpcl.getpst.d u64 
    pushptr                   u64 
    push           &mm_genpcl.getpst.str 
    callproc       &strcpy    
#16689: 
    jump           #16690     
#16687: 
    setargs                   2 0
    push           &mm_genpcl.getpst.str 
    push           mm_genpcl.getpst.d u64 
    callproc       &mm_genpcl.getfullname 
#16690: 
    setargs                   1 0
    push           &mm_genpcl.getpst.str 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           mm_genpcl.getpst.p u64 
    push           0          
    popptroff                 u64 1 0
    push           79         i64 
    push           mm_genpcl.getpst.p u64 
    push           24         
    popptroff                 u8 1 0
    push           mm_genpcl.getpst.p u64 
    setret                    u64 
    jump           #16677     
#16677: 
    retfn                     u64 
End


Proc mm_genpcl.getsysfnhandler: u64
    param          mm_genpcl.getsysfnhandler.fn i64 
    local          mm_genpcl.getsysfnhandler.p u64 
    local          mm_genpcl.getsysfnhandler.str block:300 
    procentry                 
    push           &mm_tables.sysfnhandlers 
    push           mm_genpcl.getsysfnhandler.fn i64 
    pushptroff                u64 8 -8
    jumpfalse      #16692     u64 
    push           &mm_tables.sysfnhandlers 
    push           mm_genpcl.getsysfnhandler.fn i64 
    pushptroff                u64 8 -8
    setret                    u64 
    jump           #16693     
#16692: 
    setargs                   1 0
    push           64         i64 
    callfn         &mlibp.pcm_allocz u64 
    store          mm_genpcl.getsysfnhandler.p u64 
    push           &mm_tables.sysfnhandlers 
    push           mm_genpcl.getsysfnhandler.fn i64 
    popptroff                 u64 8 -8
    push           mm_decls.msyslevel i64 
    push           1          i64 
    jumpne         #16694     i64 
    setargs                   2 0
    push           "msystemp.m$" u64 
    push           &mm_genpcl.getsysfnhandler.str 
    callproc       &strcpy    
    jump           #16695     
#16694: 
    setargs                   2 0
    push           "msysp.m$" u64 
    push           &mm_genpcl.getsysfnhandler.str 
    callproc       &strcpy    
#16695: 
    setargs                   2 0
    push           &mm_tables.sysfnnames 
    push           mm_genpcl.getsysfnhandler.fn i64 
    pushptroff                u64 8 -8
    push           6          i64 
    addrefoff                 u64 1 0
    push           &mm_genpcl.getsysfnhandler.str 
    callproc       &strcat    
    setargs                   1 0
    push           &mm_genpcl.getsysfnhandler.str 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           mm_genpcl.getsysfnhandler.p u64 
    push           0          
    popptroff                 u64 1 0
    push           79         i64 
    push           mm_genpcl.getsysfnhandler.p u64 
    push           24         
    popptroff                 u8 1 0
    push           mm_genpcl.getsysfnhandler.p u64 
    setret                    u64 
    jump           #16693     
#16693: 
    retfn                     u64 
End


Proc mm_genpcl.doimportedproc:
    param          mm_genpcl.doimportedproc.d u64 
    local          mm_genpcl.doimportedproc.e u64 
    procentry                 
    setargs                   2 0
    setargs                   1 0
    push           mm_genpcl.doimportedproc.d u64 
    callfn         &mm_genpcl.genmem_d u64 
    push           12         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_genpcl.doimportedproc.d u64 
    push           72         
    pushptroff                i32 1 0
    callproc       &mm_genpcl.setmode 
    push           mm_genpcl.doimportedproc.d u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_genpcl.doimportedproc.e u64 
    jump           #16697     
#16698: 
    push           mm_genpcl.doimportedproc.e u64 
    push           78         
    pushptroff                u8 1 0
    push           13         i64 
    jumpne         #16699     i64 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           mm_genpcl.doimportedproc.e u64 
    push           72         
    pushptroff                i32 1 0
    callfn         &mm_lib.getpclmode i64 
    push           13         i64 
    callproc       &pc_libpcl.pcl_gent 
#16699: 
#16700: 
    push           mm_genpcl.doimportedproc.e u64 
    push           32         
    pushptroff                u64 1 0
    pop            mm_genpcl.doimportedproc.e u64 
#16697: 
    push           mm_genpcl.doimportedproc.e u64 
    jumptrue       #16698     u64 
#16701: 
    push           mm_genpcl.doimportedproc.d u64 
    push           117        
    pushptroff                u8 1 0
    jumpfalse      #16702     i64 
    setargs                   4 0
    push           0          u64 
    push           0          i64 
    push           mm_genpcl.doimportedproc.d u64 
    push           117        
    pushptroff                u8 1 0
    push           14         i64 
    callproc       &pc_libpcl.pcl_genxy 
#16702: 
    setargs                   2 0
    push           0          u64 
    push           15         i64 
    callproc       &pc_libpcl.pcl_gen 
#16703: 
    retproc                   
End


Proc mm_genpcl.scansymbol:
    param          mm_genpcl.scansymbol.d u64 
    local          mm_genpcl.scansymbol.e u64 
    procentry                 
    push           mm_genpcl.scansymbol.d u64 
    push           78         
    pushptroff                u8 1 0
    push           6          i64 
    jumpne         #16705     i64 
    push           mm_genpcl.scansymbol.d u64 
    push           92         
    pushptroff                u16 1 0
    push           3          i64 
    dotindex                  i64 
    jumpfalse      #16705     u64 
    setargs                   1 0
    push           mm_genpcl.scansymbol.d u64 
    callproc       &mm_genpcl.doimportedproc 
#16705: 
    push           mm_genpcl.scansymbol.d u64 
    push           78         
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #16706     i64 0
    push           2          i64 
    casejumpeq     #16706     i64 0
    popstack                  i64 
    jump           #16707     
#16706: 
    jump           #16708     
#16707: 
    jump           #16709     
#16708: 
    push           mm_genpcl.scansymbol.d u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_genpcl.scansymbol.e u64 
    jump           #16710     
#16711: 
    setargs                   1 0
    push           mm_genpcl.scansymbol.e u64 
    callproc       &mm_genpcl.scansymbol 
#16712: 
    push           mm_genpcl.scansymbol.e u64 
    push           32         
    pushptroff                u64 1 0
    pop            mm_genpcl.scansymbol.e u64 
#16710: 
    push           mm_genpcl.scansymbol.e u64 
    jumptrue       #16711     u64 
#16713: 
#16709: 
    retproc                   
End


Proc mm_genpcl.genpushint:
    param          mm_genpcl.genpushint.a i64 
    param          mm_genpcl.genpushint.mode i64 
    procentry                 
    setargs                   2 0
    setargs                   2 0
    push           mm_genpcl.genpushint.mode i64 
    push           mm_genpcl.genpushint.a i64 
    callfn         &pc_libpcl.pcl_genint u64 
    push           22         i64 
    callproc       &pc_libpcl.pcl_gen 
#16715: 
    retproc                   
End


Proc mm_genpcl.genpushreal:
    param          mm_genpcl.genpushreal.x r64 
    procentry                 
    setargs                   2 0
    setargs                   1 0
    push           mm_genpcl.genpushreal.x r64 
    callfn         &pc_libpcl.pcl_genreal u64 
    push           22         i64 
    callproc       &pc_libpcl.pcl_gen 
#16717: 
    retproc                   
End


Proc mm_genpcl.genpushreal32:
    param          mm_genpcl.genpushreal32.x r64 
    procentry                 
    setargs                   2 0
    setargs                   1 0
    push           mm_genpcl.genpushreal32.x r64 
    callfn         &pc_libpcl.pcl_genreal32 u64 
    push           22         i64 
    callproc       &pc_libpcl.pcl_gen 
#16719: 
    retproc                   
End


Proc mm_genpcl.genpushstring:
    param          mm_genpcl.genpushstring.s u64 
    procentry                 
    setargs                   2 0
    setargs                   1 0
    push           mm_genpcl.genpushstring.s u64 
    callfn         &pc_libpcl.pcl_genstring u64 
    push           22         i64 
    callproc       &pc_libpcl.pcl_gen 
#16721: 
    retproc                   
End


Proc mm_blockpcl.evalunit:
    param          mm_blockpcl.evalunit.p u64 
    local          mm_blockpcl.evalunit.a u64 
    local          mm_blockpcl.evalunit.b u64 
    local          mm_blockpcl.evalunit.d u64 
    local          mm_blockpcl.evalunit.pmult u64 
    procentry                 
    push           mm_blockpcl.evalunit.p u64 
    push           0          u64 
    jumpne         #16723     u64 
    jump           #16724     
#16723: 
    push           mm_blockpcl.evalunit.p u64 
    push           4          
    pushptroff                u32 1 0
    pop            mm_tables.mlineno i64 
    push           mm_blockpcl.evalunit.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    push           24         
    pushptroff                u64 1 0
    pop            mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.p u64 
    pushptr                   u8 
    switch         #16725     1 142
    opnd           #16726     
#16725: 
    switchlabel    #16727     
    switchlabel    #16728     
    switchlabel    #16729     
    switchlabel    #16726     
    switchlabel    #16730     
    switchlabel    #16730     
    switchlabel    #16726     
    switchlabel    #16731     
    switchlabel    #16726     
    switchlabel    #16726     
    switchlabel    #16726     
    switchlabel    #16726     
    switchlabel    #16726     
    switchlabel    #16732     
    switchlabel    #16733     
    switchlabel    #16726     
    switchlabel    #16734     
    switchlabel    #16735     
    switchlabel    #16726     
    switchlabel    #16736     
    switchlabel    #16726     
    switchlabel    #16726     
    switchlabel    #16737     
    switchlabel    #16726     
    switchlabel    #16726     
    switchlabel    #16738     
    switchlabel    #16726     
    switchlabel    #16726     
    switchlabel    #16739     
    switchlabel    #16726     
    switchlabel    #16740     
    switchlabel    #16726     
    switchlabel    #16726     
    switchlabel    #16741     
    switchlabel    #16742     
    switchlabel    #16743     
    switchlabel    #16744     
    switchlabel    #16745     
    switchlabel    #16746     
    switchlabel    #16747     
    switchlabel    #16726     
    switchlabel    #16726     
    switchlabel    #16726     
    switchlabel    #16726     
    switchlabel    #16726     
    switchlabel    #16726     
    switchlabel    #16726     
    switchlabel    #16748     
    switchlabel    #16726     
    switchlabel    #16749     
    switchlabel    #16750     
    switchlabel    #16726     
    switchlabel    #16751     
    switchlabel    #16752     
    switchlabel    #16726     
    switchlabel    #16726     
    switchlabel    #16753     
    switchlabel    #16726     
    switchlabel    #16754     
    switchlabel    #16755     
    switchlabel    #16756     
    switchlabel    #16757     
    switchlabel    #16726     
    switchlabel    #16758     
    switchlabel    #16759     
    switchlabel    #16726     
    switchlabel    #16726     
    switchlabel    #16726     
    switchlabel    #16726     
    switchlabel    #16726     
    switchlabel    #16726     
    switchlabel    #16726     
    switchlabel    #16726     
    switchlabel    #16726     
    switchlabel    #16760     
    switchlabel    #16726     
    switchlabel    #16726     
    switchlabel    #16726     
    switchlabel    #16726     
    switchlabel    #16726     
    switchlabel    #16726     
    switchlabel    #16726     
    switchlabel    #16726     
    switchlabel    #16726     
    switchlabel    #16726     
    switchlabel    #16726     
    switchlabel    #16726     
    switchlabel    #16726     
    switchlabel    #16726     
    switchlabel    #16726     
    switchlabel    #16726     
    switchlabel    #16726     
    switchlabel    #16726     
    switchlabel    #16726     
    switchlabel    #16726     
    switchlabel    #16761     
    switchlabel    #16762     
    switchlabel    #16763     
    switchlabel    #16764     
    switchlabel    #16765     
    switchlabel    #16766     
    switchlabel    #16767     
    switchlabel    #16768     
    switchlabel    #16769     
    switchlabel    #16770     
    switchlabel    #16771     
    switchlabel    #16772     
    switchlabel    #16773     
    switchlabel    #16774     
    switchlabel    #16775     
    switchlabel    #16776     
    switchlabel    #16777     
    switchlabel    #16778     
    switchlabel    #16779     
    switchlabel    #16780     
    switchlabel    #16781     
    switchlabel    #16782     
    switchlabel    #16783     
    switchlabel    #16784     
    switchlabel    #16785     
    switchlabel    #16786     
    switchlabel    #16787     
    switchlabel    #16787     
    switchlabel    #16788     
    switchlabel    #16788     
    switchlabel    #16788     
    switchlabel    #16788     
    switchlabel    #16726     
    switchlabel    #16726     
    switchlabel    #16789     
    switchlabel    #16790     
    switchlabel    #16726     
    switchlabel    #16726     
    switchlabel    #16791     
    switchlabel    #16726     
    switchlabel    #16726     
    switchlabel    #16726     
    switchlabel    #16726     
    switchlabel    #16792     
    switchlabel    #16726     
    switchlabel    #16726     
    switchlabel    #16793     
    endswitch                 
#16727: 
    setargs                   1 0
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_const 
    jump           #16794     
#16728: 
    jump           #16794     
#16729: 
    setargs                   1 0
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_name 
    jump           #16794     
#16730: 
    setargs                   1 0
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_block 
    jump           #16794     
#16761: 
    setargs                   4 0
    push           0          i64 
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_callproc 
    jump           #16794     
#16762: 
    setargs                   2 0
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_return 
    jump           #16794     
#16738: 
    setargs                   2 0
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_returnmult 
    jump           #16794     
#16739: 
    setargs                   3 0
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_assign 
    jump           #16794     
#16764: 
    setargs                   3 0
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_to 
    jump           #16794     
#16765: 
    setargs                   5 0
    push           0          i64 
    push           mm_blockpcl.evalunit.p u64 
    push           32         
    pushptroff                u64 1 0
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_if 
    jump           #16794     
#16766: 
    setargs                   4 0
    push           0          i64 
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_longif 
    jump           #16794     
#16767: 
    setargs                   5 0
    push           0          i64 
    push           mm_blockpcl.evalunit.p u64 
    push           32         
    pushptroff                u64 1 0
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_for 
    jump           #16794     
#16768: 
    setargs                   5 0
    push           1          i64 
    push           mm_blockpcl.evalunit.p u64 
    push           32         
    pushptroff                u64 1 0
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_for 
    jump           #16794     
#16769: 
    setargs                   5 0
    push           0          i64 
    push           mm_blockpcl.evalunit.p u64 
    push           32         
    pushptroff                u64 1 0
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_forall 
    jump           #16794     
#16770: 
    setargs                   5 0
    push           1          i64 
    push           mm_blockpcl.evalunit.p u64 
    push           32         
    pushptroff                u64 1 0
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_forall 
    jump           #16794     
#16771: 
    setargs                   4 0
    push           mm_blockpcl.evalunit.p u64 
    push           32         
    pushptroff                u64 1 0
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_while 
    jump           #16794     
#16772: 
    setargs                   3 0
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_repeat 
    jump           #16794     
#16773: 
    setargs                   1 0
    push           mm_blockpcl.evalunit.a u64 
    callproc       &mm_blockpcl.do_goto 
    jump           #16794     
#16774: 
    setargs                   1 0
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_labeldef 
    jump           #16794     
#16775: 
    setargs                   2 0
    push           1          i64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_exit 
    jump           #16794     
#16776: 
    setargs                   2 0
    push           2          i64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_exit 
    jump           #16794     
#16777: 
    setargs                   2 0
    push           3          i64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_exit 
    jump           #16794     
#16778: 
    setargs                   2 0
    push           4          i64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_exit 
    jump           #16794     
#16779: 
    setargs                   3 0
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_do 
    jump           #16794     
#16780: 
    setargs                   6 0
    push           0          i64 
    push           0          i64 
    push           mm_blockpcl.evalunit.p u64 
    push           32         
    pushptroff                u64 1 0
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_case 
    jump           #16794     
#16781: 
    setargs                   6 0
    push           0          i64 
    push           1          i64 
    push           mm_blockpcl.evalunit.p u64 
    push           32         
    pushptroff                u64 1 0
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_case 
    jump           #16794     
#16782: 
    setargs                   6 0
    push           0          i64 
    push           0          i64 
    push           mm_blockpcl.evalunit.p u64 
    push           32         
    pushptroff                u64 1 0
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_switch 
    jump           #16794     
#16783: 
    setargs                   6 0
    push           0          i64 
    push           1          i64 
    push           mm_blockpcl.evalunit.p u64 
    push           32         
    pushptroff                u64 1 0
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_switch 
    jump           #16794     
#16786: 
    setargs                   2 0
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_recase 
    jump           #16794     
#16784: 
    setargs                   3 0
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_swap 
    jump           #16794     
#16785: 
    setargs                   5 0
    push           0          i64 
    push           mm_blockpcl.evalunit.p u64 
    push           32         
    pushptroff                u64 1 0
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_select 
    jump           #16794     
#16787: 
    setargs                   3 0
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_print 
    jump           #16794     
#16788: 
    setargs                   3 0
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_print 
    jump           #16794     
#16789: 
    setargs                   2 0
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_read 
    jump           #16794     
#16790: 
    setargs                   1 0
    push           mm_blockpcl.evalunit.a u64 
    callproc       &mm_blockpcl.do_readln 
    jump           #16794     
#16791: 
    setargs                   2 0
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_stop 
    jump           #16794     
#16792: 
    setargs                   1 0
    push           mm_blockpcl.evalunit.a u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    push           0          u64 
    push           44         i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #16794     
#16732: 
    setargs                   3 0
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_andl 
    jump           #16794     
#16733: 
    setargs                   3 0
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_orl 
    jump           #16794     
#16736: 
    setargs                   1 0
    push           "MAKERANGE" u64 
    callproc       &pc_libpcl.pcl_gencomment 
    jump           #16794     
#16740: 
    setargs                   4 0
    push           1          i64 
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_callproc 
    jump           #16794     
#16741: 
    setargs                   3 0
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_setcc 
    jump           #16794     
#16742: 
    setargs                   2 0
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_setccchain 
    jump           #16794     
#16743: 
    setargs                   3 0
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_bin 
    jump           #16794     
#16748: 
    setargs                   3 0
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_index 
    jump           #16794     
#16749: 
    setargs                   3 0
    push           0          i64 
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    callproc       &mm_blockpcl.do_slice 
    jump           #16794     
#16737: 
    setargs                   1 0
    push           mm_blockpcl.evalunit.b u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   1 0
    push           mm_blockpcl.evalunit.a u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    push           0          u64 
    push           84         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           3          i64 
    callproc       &mm_genpcl.setmode 
    jump           #16794     
#16751: 
    setargs                   3 0
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_dotindex 
    jump           #16794     
#16752: 
    setargs                   3 0
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_dotslice 
    jump           #16794     
#16750: 
    setargs                   1 0
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_dot 
    jump           #16794     
#16753: 
    setargs                   2 0
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_ptr 
    jump           #16794     
#16754: 
    setargs                   2 0
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    callproc       &mm_blockpcl.evalref 
    jump           #16794     
#16755: 
    setargs                   2 0
    push           0          u64 
    push           mm_blockpcl.evalunit.a u64 
    callproc       &mm_blockpcl.evalref 
    jump           #16794     
#16756: 
    setargs                   2 0
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_convert 
    jump           #16794     
#16758: 
    setargs                   2 0
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_typepun 
    jump           #16794     
#16757: 
    setargs                   2 0
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_shorten 
    jump           #16794     
#16759: 
    setargs                   1 0
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_typeconst 
    jump           #16794     
#16744: 
    setargs                   2 0
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_unary 
    jump           #16794     
#16734: 
    setargs                   2 0
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_notl 
    jump           #16794     
#16735: 
    setargs                   2 0
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_istruel 
    jump           #16794     
#16747: 
    push           mm_blockpcl.evalunit.p u64 
    push           60         
    pushptroff                u8 1 0
    push           153        i64 
    setjumpeq      #16795     i64 
    push           154        i64 
    setjumpne      #16796     i64 
#16795: 
    setargs                   2 0
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_incr 
    jump           #16797     
#16796: 
    setargs                   2 0
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_incrload 
#16797: 
    jump           #16794     
#16745: 
    setargs                   3 0
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_binto 
    jump           #16794     
#16746: 
    setargs                   2 0
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_unaryto 
    jump           #16794     
#16763: 
    setargs                   2 0
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_syscall 
    jump           #16794     
#16731: 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.evalunit.p u64 
    callfn         &pc_libpcl.pcl_genassem u64 
    push           101        i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_genpcl.setmode_u 
    jump           #16794     
#16760: 
    setargs                   2 0
    setargs                   2 0
    push           9          i64 
    push           mm_blockpcl.evalunit.p u64 
    push           4          
    pushptroff                u32 1 0
    push           0          i64 
    push           23         i64 
    dotslice                  i64 
    push           16777215   i64 
    iand                      i64 
    callfn         &pc_libpcl.pcl_genint u64 
    push           22         i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #16794     
#16793: 
    setargs                   2 0
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_empty 
    jump           #16794     
#16726: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "UNSUPPORTED TAG: " u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_tables.jtagnames 
    push           mm_blockpcl.evalunit.p u64 
    pushptr                   u8 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_tables.mlineno i64 
    push           16777215   i64 
    iand                      i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           &mm_decls.sourcefilenames 
    push           mm_tables.mlineno i64 
    push           24         i64 
    shr                       i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Unimplemented:" u64 
    callproc       &pc_libpcl.pcl_gencomment 
    setargs                   1 0
    push           &mm_tables.jtagnames 
    push           mm_blockpcl.evalunit.p u64 
    pushptr                   u8 
    pushptroff                u64 8 0
    callproc       &pc_libpcl.pcl_gencomment 
    jump           #16724     
#16794: 
    push           mm_blockpcl.evalunit.p u64 
    push           48         
    pushptroff                i32 1 0
    push           0          i64 
    jumpeq         #16798     i64 
    push           mm_blockpcl.evalunit.p u64 
    push           59         
    pushptroff                u8 1 0
    jumptrue       #16798     i64 
    push           mm_blockpcl.evalunit.p u64 
    pushptr                   u8 
    push           29         i64 
    casejumpeq     #16799     i64 0
    push           96         i64 
    casejumpeq     #16799     i64 0
    push           98         i64 
    casejumpeq     #16799     i64 0
    popstack                  i64 
    jump           #16800     
#16799: 
    jump           #16801     
#16800: 
    setargs                   2 0
    push           0          u64 
    push           43         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_genpcl.setmode_u 
#16801: 
#16798: 
#16724: 
    retproc                   
End


Proc mm_blockpcl.evalref:
    param          mm_blockpcl.evalref.p u64 
    param          mm_blockpcl.evalref.q u64 
    local          mm_blockpcl.evalref.a u64 
    local          mm_blockpcl.evalref.b u64 
    local          mm_blockpcl.evalref.c u64 
    procentry                 
    push           mm_blockpcl.evalref.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_blockpcl.evalref.a u64 
    push           mm_blockpcl.evalref.p u64 
    push           24         
    pushptroff                u64 1 0
    pop            mm_blockpcl.evalref.b u64 
    push           mm_blockpcl.evalref.p u64 
    push           32         
    pushptroff                u64 1 0
    pop            mm_blockpcl.evalref.c u64 
    push           mm_blockpcl.evalref.p u64 
    push           4          
    pushptroff                u32 1 0
    pop            mm_tables.mlineno i64 
    push           mm_blockpcl.evalref.p u64 
    pushptr                   u8 
    switch         #16803     3 57
    opnd           #16804     
#16803: 
    switchlabel    #16805     
    switchlabel    #16804     
    switchlabel    #16804     
    switchlabel    #16804     
    switchlabel    #16804     
    switchlabel    #16804     
    switchlabel    #16804     
    switchlabel    #16804     
    switchlabel    #16804     
    switchlabel    #16804     
    switchlabel    #16804     
    switchlabel    #16804     
    switchlabel    #16804     
    switchlabel    #16804     
    switchlabel    #16804     
    switchlabel    #16804     
    switchlabel    #16804     
    switchlabel    #16804     
    switchlabel    #16804     
    switchlabel    #16804     
    switchlabel    #16804     
    switchlabel    #16804     
    switchlabel    #16804     
    switchlabel    #16804     
    switchlabel    #16804     
    switchlabel    #16804     
    switchlabel    #16804     
    switchlabel    #16804     
    switchlabel    #16804     
    switchlabel    #16804     
    switchlabel    #16804     
    switchlabel    #16804     
    switchlabel    #16804     
    switchlabel    #16804     
    switchlabel    #16804     
    switchlabel    #16804     
    switchlabel    #16804     
    switchlabel    #16804     
    switchlabel    #16804     
    switchlabel    #16804     
    switchlabel    #16804     
    switchlabel    #16804     
    switchlabel    #16804     
    switchlabel    #16804     
    switchlabel    #16804     
    switchlabel    #16806     
    switchlabel    #16804     
    switchlabel    #16804     
    switchlabel    #16807     
    switchlabel    #16804     
    switchlabel    #16804     
    switchlabel    #16804     
    switchlabel    #16804     
    switchlabel    #16804     
    switchlabel    #16808     
    endswitch                 
#16805: 
    setargs                   1 0
    push           mm_blockpcl.evalref.p u64 
    push           16         
    pushptroff                u64 1 0
    callproc       &mm_genpcl.genpushmemaddr_d 
    push           mm_blockpcl.evalref.q u64 
    jumpfalse      #16809     u64 
    setargs                   2 0
    push           9          i64 
    push           mm_blockpcl.evalref.q u64 
    push           16         
    pushptroff                i64 1 0
    callproc       &mm_genpcl.genpushint 
    setargs                   2 0
    push           0          u64 
    push           126        i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_libpcl.pcl_setscale 
    setargs                   1 0
    push           21         i64 
    callproc       &mm_genpcl.setmode 
#16809: 
    jump           #16810     
#16806: 
    setargs                   2 0
    push           mm_blockpcl.evalref.b u64 
    push           mm_blockpcl.evalref.a u64 
    callproc       &mm_blockpcl.do_indexref 
    jump           #16810     
#16807: 
    setargs                   1 0
    push           mm_blockpcl.evalref.p u64 
    callproc       &mm_blockpcl.do_dotref 
    jump           #16810     
#16808: 
    setargs                   1 0
    push           mm_blockpcl.evalref.p u64 
    push           16         
    pushptroff                u64 1 0
    callproc       &mm_blockpcl.evalunit 
    jump           #16810     
#16804: 
    push           mm_blockpcl.evalref.p u64 
    pushptr                   u8 
    push           100        i64 
    casejumpeq     #16811     i64 0
    push           101        i64 
    casejumpeq     #16812     i64 0
    popstack                  i64 
    jump           #16813     
#16811: 
    setargs                   5 0
    push           1          i64 
    push           mm_blockpcl.evalref.c u64 
    push           mm_blockpcl.evalref.b u64 
    push           mm_blockpcl.evalref.a u64 
    push           mm_blockpcl.evalref.p u64 
    callproc       &mm_blockpcl.do_if 
    jump           #16814     
#16812: 
    setargs                   4 0
    push           1          i64 
    push           mm_blockpcl.evalref.b u64 
    push           mm_blockpcl.evalref.a u64 
    push           mm_blockpcl.evalref.p u64 
    callproc       &mm_blockpcl.do_longif 
    jump           #16814     
#16813: 
    setargs                   4 0
    push           0          u64 
    push           "*"        u64 
    push           0          i64 
    push           mm_blockpcl.evalref.p u64 
    callproc       &mm_diags.printunit 
    setargs                   2 0
    push           0          u64 
    push           "evalref"  u64 
    callproc       &mm_support.gerror 
#16814: 
#16810: 
#16815: 
    retproc                   
End


Proc mm_blockpcl.evallv:
    param          mm_blockpcl.evallv.p u64 
    procentry                 
    setargs                   2 0
    push           0          u64 
    push           mm_blockpcl.evallv.p u64 
    callproc       &mm_blockpcl.evalref 
#16817: 
    retproc                   
End


Proc mm_blockpcl.evalunitx:
    param          mm_blockpcl.evalunitx.p u64 
    param          mm_blockpcl.evalunitx.isref i64 
    procentry                 
    push           mm_blockpcl.evalunitx.isref i64 
    jumpfalse      #16819     i64 
    setargs                   2 0
    push           0          u64 
    push           mm_blockpcl.evalunitx.p u64 
    callproc       &mm_blockpcl.evalref 
    jump           #16820     
#16819: 
    setargs                   1 0
    push           mm_blockpcl.evalunitx.p u64 
    callproc       &mm_blockpcl.evalunit 
#16820: 
#16821: 
    retproc                   
End


Proc mm_blockpcl.evalblock:
    param          mm_blockpcl.evalblock.p u64 
    procentry                 
    setargs                   1 0
    push           mm_blockpcl.evalblock.p u64 
    callproc       &mm_blockpcl.evalunit 
#16823: 
    retproc                   
End


Proc mm_blockpcl.evalarray:
    param          mm_blockpcl.evalarray.p u64 
    procentry                 
    push           &mm_decls.ttbasetype 
    push           mm_blockpcl.evalarray.p u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           12         i64 
    jumpne         #16825     i64 
    setargs                   1 0
    push           mm_blockpcl.evalarray.p u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    push           0          u64 
    push           217        i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           2          i64 
    callproc       &mm_genpcl.setmode 
    jump           #16826     
#16825: 
    push           mm_blockpcl.evalarray.p u64 
    push           48         
    pushptroff                i32 1 0
    push           10         i64 
    jumpne         #16827     i64 
    setargs                   1 0
    push           mm_blockpcl.evalarray.p u64 
    callproc       &mm_blockpcl.evalunit 
    jump           #16826     
#16827: 
    setargs                   2 0
    push           0          u64 
    push           mm_blockpcl.evalarray.p u64 
    callproc       &mm_blockpcl.evalref 
#16826: 
#16828: 
    retproc                   
End


Proc mm_blockpcl.do_block:
    param          mm_blockpcl.do_block.p u64 
    local          mm_blockpcl.do_block.a u64 
    procentry                 
    push           mm_blockpcl.do_block.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_block.a u64 
    jump           #16830     
#16831: 
    setargs                   1 0
    push           mm_blockpcl.do_block.a u64 
    callproc       &mm_blockpcl.evalunit 
    push           mm_blockpcl.do_block.a u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_block.a u64 
#16830: 
    push           mm_blockpcl.do_block.a u64 
    jumptrue       #16831     u64 
#16832: 
#16833: 
    retproc                   
End


Proc mm_blockpcl.genjumpcond:
    param          mm_blockpcl.genjumpcond.opc i64 
    param          mm_blockpcl.genjumpcond.p u64 
    param          mm_blockpcl.genjumpcond.lab i64 
    local          mm_blockpcl.genjumpcond.q u64 
    local          mm_blockpcl.genjumpcond.r u64 
    local          mm_blockpcl.genjumpcond.s u64 
    local          mm_blockpcl.genjumpcond.lab2 i64 
    local          mm_blockpcl.genjumpcond.i i64 
    procentry                 
    push           mm_blockpcl.genjumpcond.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_blockpcl.genjumpcond.q u64 
    push           mm_blockpcl.genjumpcond.p u64 
    push           24         
    pushptroff                u64 1 0
    pop            mm_blockpcl.genjumpcond.r u64 
    push           mm_blockpcl.genjumpcond.p u64 
    pushptr                   u8 
    switch         #16835     5 43
    opnd           #16836     
#16835: 
    switchlabel    #16837     
    switchlabel    #16836     
    switchlabel    #16836     
    switchlabel    #16836     
    switchlabel    #16836     
    switchlabel    #16836     
    switchlabel    #16836     
    switchlabel    #16836     
    switchlabel    #16836     
    switchlabel    #16838     
    switchlabel    #16839     
    switchlabel    #16836     
    switchlabel    #16840     
    switchlabel    #16841     
    switchlabel    #16836     
    switchlabel    #16836     
    switchlabel    #16836     
    switchlabel    #16836     
    switchlabel    #16836     
    switchlabel    #16836     
    switchlabel    #16836     
    switchlabel    #16836     
    switchlabel    #16836     
    switchlabel    #16836     
    switchlabel    #16836     
    switchlabel    #16836     
    switchlabel    #16836     
    switchlabel    #16836     
    switchlabel    #16836     
    switchlabel    #16842     
    switchlabel    #16843     
    switchlabel    #16836     
    switchlabel    #16836     
    switchlabel    #16836     
    switchlabel    #16836     
    switchlabel    #16836     
    switchlabel    #16836     
    switchlabel    #16844     
    switchlabel    #16845     
    endswitch                 
#16838: 
    push           mm_blockpcl.genjumpcond.opc i64 
    push           0          i64 
    casejumpeq     #16846     i64 0
    push           1          i64 
    casejumpeq     #16847     i64 0
    popstack                  i64 
    jump           #16848     
#16846: 
    setargs                   3 0
    push           mm_blockpcl.genjumpcond.lab i64 
    push           mm_blockpcl.genjumpcond.q u64 
    push           0          i64 
    callproc       &mm_blockpcl.genjumpcond 
    setargs                   3 0
    push           mm_blockpcl.genjumpcond.lab i64 
    push           mm_blockpcl.genjumpcond.r u64 
    push           0          i64 
    callproc       &mm_blockpcl.genjumpcond 
    jump           #16849     
#16847: 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.genjumpcond.lab2 i64 
    setargs                   3 0
    push           mm_blockpcl.genjumpcond.lab2 i64 
    push           mm_blockpcl.genjumpcond.q u64 
    push           0          i64 
    callproc       &mm_blockpcl.genjumpcond 
    setargs                   3 0
    push           mm_blockpcl.genjumpcond.lab i64 
    push           mm_blockpcl.genjumpcond.r u64 
    push           1          i64 
    callproc       &mm_blockpcl.genjumpcond 
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.lab2 i64 
    callproc       &mm_genpcl.definefwdlabel 
    jump           #16849     
#16848: 
#16849: 
    jump           #16850     
#16839: 
    push           mm_blockpcl.genjumpcond.opc i64 
    push           0          i64 
    casejumpeq     #16851     i64 0
    push           1          i64 
    casejumpeq     #16852     i64 0
    popstack                  i64 
    jump           #16853     
#16851: 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.genjumpcond.lab2 i64 
    setargs                   3 0
    push           mm_blockpcl.genjumpcond.lab2 i64 
    push           mm_blockpcl.genjumpcond.q u64 
    push           1          i64 
    callproc       &mm_blockpcl.genjumpcond 
    setargs                   3 0
    push           mm_blockpcl.genjumpcond.lab i64 
    push           mm_blockpcl.genjumpcond.r u64 
    push           0          i64 
    callproc       &mm_blockpcl.genjumpcond 
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.lab2 i64 
    callproc       &mm_genpcl.definefwdlabel 
    jump           #16854     
#16852: 
    setargs                   3 0
    push           mm_blockpcl.genjumpcond.lab i64 
    push           mm_blockpcl.genjumpcond.q u64 
    push           1          i64 
    callproc       &mm_blockpcl.genjumpcond 
    setargs                   3 0
    push           mm_blockpcl.genjumpcond.lab i64 
    push           mm_blockpcl.genjumpcond.r u64 
    push           1          i64 
    callproc       &mm_blockpcl.genjumpcond 
    jump           #16854     
#16853: 
#16854: 
    jump           #16850     
#16840: 
    push           mm_blockpcl.genjumpcond.opc i64 
    push           0          i64 
    casejumpeq     #16855     i64 0
    push           1          i64 
    casejumpeq     #16856     i64 0
    popstack                  i64 
    jump           #16857     
#16855: 
    setargs                   3 0
    push           mm_blockpcl.genjumpcond.lab i64 
    push           mm_blockpcl.genjumpcond.q u64 
    push           1          i64 
    callproc       &mm_blockpcl.genjumpcond 
    jump           #16858     
#16856: 
    setargs                   3 0
    push           mm_blockpcl.genjumpcond.lab i64 
    push           mm_blockpcl.genjumpcond.q u64 
    push           0          i64 
    callproc       &mm_blockpcl.genjumpcond 
    jump           #16858     
#16857: 
#16858: 
    jump           #16850     
#16841: 
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.q u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.lab i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    startmult                 
    push           mm_blockpcl.genjumpcond.opc i64 
    push           1          i64 
    jumpne         #16859     i64 
    push           59         i64 
    resetmult                 
    jump           #16860     
#16859: 
    push           60         i64 
    endmult                   
#16860: 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.q u64 
    callproc       &mm_genpcl.setmode_u 
    jump           #16850     
#16837: 
    jump           #16861     
#16862: 
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.q u64 
    callproc       &mm_blockpcl.evalunit 
    push           mm_blockpcl.genjumpcond.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.genjumpcond.q u64 
#16861: 
    push           mm_blockpcl.genjumpcond.q u64 
    jumpfalse      #16863     u64 
    push           mm_blockpcl.genjumpcond.q u64 
    push           8          
    pushptroff                u64 1 0
    jumptrue       #16862     u64 
#16863: 
#16864: 
    setargs                   3 0
    push           mm_blockpcl.genjumpcond.lab i64 
    push           mm_blockpcl.genjumpcond.q u64 
    push           mm_blockpcl.genjumpcond.opc i64 
    callproc       &mm_blockpcl.genjumpcond 
    jump           #16850     
#16842: 
    setargs                   5 0
    push           mm_blockpcl.genjumpcond.lab i64 
    push           mm_blockpcl.genjumpcond.r u64 
    push           mm_blockpcl.genjumpcond.q u64 
    push           mm_blockpcl.genjumpcond.p u64 
    push           60         
    pushptroff                u8 1 0
    push           mm_blockpcl.genjumpcond.opc i64 
    callproc       &mm_blockpcl.gcomparejump 
    jump           #16850     
#16844: 
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.q u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.r u64 
    push           16         
    pushptroff                u64 1 0
    callproc       &mm_blockpcl.evalunit 
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.r u64 
    push           24         
    pushptroff                u64 1 0
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.lab i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    startmult                 
    push           mm_blockpcl.genjumpcond.opc i64 
    push           0          i64 
    jumpne         #16865     i64 
    push           62         i64 
    resetmult                 
    jump           #16866     
#16865: 
    push           61         i64 
    endmult                   
#16866: 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.q u64 
    callproc       &mm_genpcl.setmode_u 
    jump           #16850     
#16845: 
    push           mm_blockpcl.genjumpcond.r u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_blockpcl.genjumpcond.s u64 
    push           mm_blockpcl.genjumpcond.s u64 
    push           0          u64 
    jumpne         #16867     u64 
    setargs                   2 0
    push           0          u64 
    push           "empty set" u64 
    callproc       &mm_support.gerror 
#16867: 
    push           mm_blockpcl.genjumpcond.opc i64 
    push           0          i64 
    jumpne         #16868     i64 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.genjumpcond.lab2 i64 
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.q u64 
    callproc       &mm_blockpcl.evalunit 
    jump           #16869     
#16870: 
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.s u64 
    callproc       &mm_blockpcl.evalunit 
    push           mm_blockpcl.genjumpcond.s u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.genjumpcond.s u64 
    push           mm_blockpcl.genjumpcond.s u64 
    jumpfalse      #16871     u64 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.lab2 i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    push           63         i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #16872     
#16871: 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.lab i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    push           65         i64 
    callproc       &pc_libpcl.pcl_gen 
#16872: 
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.q u64 
    callproc       &mm_genpcl.setmode_u 
#16869: 
    push           mm_blockpcl.genjumpcond.s u64 
    jumptrue       #16870     u64 
#16873: 
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.lab2 i64 
    callproc       &mm_genpcl.definefwdlabel 
    jump           #16874     
#16868: 
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.q u64 
    callproc       &mm_blockpcl.evalunit 
    jump           #16875     
#16876: 
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.s u64 
    callproc       &mm_blockpcl.evalunit 
    push           mm_blockpcl.genjumpcond.s u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.genjumpcond.s u64 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.lab i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    startmult                 
    push           mm_blockpcl.genjumpcond.s u64 
    jumpfalse      #16877     u64 
    push           63         i64 
    resetmult                 
    jump           #16878     
#16877: 
    push           64         i64 
    endmult                   
#16878: 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.q u64 
    callproc       &mm_genpcl.setmode_u 
#16875: 
    push           mm_blockpcl.genjumpcond.s u64 
    jumptrue       #16876     u64 
#16879: 
#16874: 
    jump           #16850     
#16843: 
    push           mm_blockpcl.genjumpcond.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.genjumpcond.r u64 
    push           1          i64 
    pop            mm_blockpcl.genjumpcond.i i64 
    push           mm_blockpcl.genjumpcond.opc i64 
    push           0          i64 
    jumpne         #16880     i64 
    jump           #16881     
#16882: 
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.q u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.r u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.lab i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    setargs                   2 0
    push           53         i64 
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.p u64 
    push           40         
    addrefoff                 u64 1 0
    push           mm_blockpcl.genjumpcond.i i64 
    pushptroff                u8 1 -1
    callfn         &mm_genpcl.reversecond i64 
    callfn         &mm_blockpcl.condtopclop i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.q u64 
    callproc       &mm_genpcl.setmode_u 
    push           &mm_blockpcl.genjumpcond.i 
    incr                      i64 1
    push           mm_blockpcl.genjumpcond.r u64 
    pop            mm_blockpcl.genjumpcond.q u64 
    push           mm_blockpcl.genjumpcond.r u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.genjumpcond.r u64 
#16881: 
    push           mm_blockpcl.genjumpcond.r u64 
    jumptrue       #16882     u64 
#16883: 
    jump           #16884     
#16880: 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.genjumpcond.lab2 i64 
    jump           #16885     
#16886: 
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.q u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.r u64 
    callproc       &mm_blockpcl.evalunit 
    push           mm_blockpcl.genjumpcond.r u64 
    push           8          
    pushptroff                u64 1 0
    jumpfalse      #16887     u64 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.lab2 i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    setargs                   2 0
    push           53         i64 
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.p u64 
    push           40         
    addrefoff                 u64 1 0
    push           mm_blockpcl.genjumpcond.i i64 
    pushptroff                u8 1 -1
    callfn         &mm_genpcl.reversecond i64 
    callfn         &mm_blockpcl.condtopclop i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #16888     
#16887: 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.lab i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    setargs                   2 0
    push           53         i64 
    push           mm_blockpcl.genjumpcond.p u64 
    push           40         
    addrefoff                 u64 1 0
    push           mm_blockpcl.genjumpcond.i i64 
    pushptroff                u8 1 -1
    callfn         &mm_blockpcl.condtopclop i64 
    callproc       &pc_libpcl.pcl_gen 
#16888: 
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.q u64 
    callproc       &mm_genpcl.setmode_u 
    push           &mm_blockpcl.genjumpcond.i 
    incr                      i64 1
    push           mm_blockpcl.genjumpcond.r u64 
    pop            mm_blockpcl.genjumpcond.q u64 
    push           mm_blockpcl.genjumpcond.r u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.genjumpcond.r u64 
#16885: 
    push           mm_blockpcl.genjumpcond.r u64 
    jumptrue       #16886     u64 
#16889: 
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.lab2 i64 
    callproc       &mm_genpcl.definefwdlabel 
#16884: 
    jump           #16850     
#16836: 
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.p u64 
    callproc       &mm_blockpcl.evalunit 
    push           mm_blockpcl.genjumpcond.p u64 
    push           48         
    pushptroff                i32 1 0
    push           4          i64 
    setjumpeq      #16890     i64 
    push           2          i64 
    setjumpeqx     #16890     i64 
    setargs                   2 0
    push           0          u64 
    push           "jumptrue/not i64" u64 
    callproc       &mm_support.gerror 
#16890: 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.lab i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    startmult                 
    push           mm_blockpcl.genjumpcond.opc i64 
    push           1          i64 
    jumpne         #16891     i64 
    push           59         i64 
    resetmult                 
    jump           #16892     
#16891: 
    push           60         i64 
    endmult                   
#16892: 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           4          i64 
    callproc       &mm_genpcl.setmode 
#16850: 
#16893: 
    retproc                   
End


Proc mm_blockpcl.gcomparejump:
    param          mm_blockpcl.gcomparejump.jumpopc i64 
    param          mm_blockpcl.gcomparejump.cond i64 
    param          mm_blockpcl.gcomparejump.lhs u64 
    param          mm_blockpcl.gcomparejump.rhs u64 
    param          mm_blockpcl.gcomparejump.lab i64 
    local          mm_blockpcl.gcomparejump.opc i64 
    procentry                 
    push           mm_blockpcl.gcomparejump.jumpopc i64 
    push           0          i64 
    jumpne         #16895     i64 
    setargs                   1 0
    push           mm_blockpcl.gcomparejump.cond i64 
    callfn         &mm_genpcl.reversecond i64 
    pop            mm_blockpcl.gcomparejump.cond i64 
#16895: 
    setargs                   1 0
    push           mm_blockpcl.gcomparejump.lhs u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   1 0
    push           mm_blockpcl.gcomparejump.rhs u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.gcomparejump.lab i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    setargs                   2 0
    push           53         i64 
    push           mm_blockpcl.gcomparejump.cond i64 
    callfn         &mm_blockpcl.condtopclop i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.gcomparejump.lhs u64 
    callproc       &mm_genpcl.setmode_u 
#16896: 
    retproc                   
End


Proc mm_blockpcl.genjumpl:
    param          mm_blockpcl.genjumpl.lab i64 
    procentry                 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.genjumpl.lab i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    push           51         i64 
    callproc       &pc_libpcl.pcl_gen 
#16898: 
    retproc                   
End


Proc mm_blockpcl.unimpl:
    param          mm_blockpcl.unimpl.mess u64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    push           mm_blockpcl.unimpl.mess u64 
    push           "Unimplemented: #" u64 
    callproc       &mm_support.gerror_s 
#16900: 
    retproc                   
End


Proc mm_blockpcl.do_const:
    param          mm_blockpcl.do_const.p u64 
    local          mm_blockpcl.do_const.mode i64 
    procentry                 
    push           mm_blockpcl.do_const.p u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_blockpcl.do_const.mode i64 
    push           &mm_decls.ttisinteger 
    push           mm_blockpcl.do_const.mode i64 
    pushptroff                u8 1 0
    jumpfalse      #16902     i64 
    push           &mm_decls.ttsize 
    push           mm_blockpcl.do_const.mode i64 
    pushptroff                i32 4 0
    push           16         i64 
    jumpge         #16903     i64 
    setargs                   2 0
    push           mm_blockpcl.do_const.mode i64 
    push           mm_blockpcl.do_const.p u64 
    push           16         
    pushptroff                i64 1 0
    callproc       &mm_genpcl.genpushint 
    jump           #16904     
#16903: 
    setargs                   2 0
    setargs                   3 0
    push           mm_blockpcl.do_const.mode i64 
    push           mm_blockpcl.do_const.p u64 
    push           16         
    pushptroff                i128 1 0
    callfn         &pc_libpcl.pcl_genint128 u64 
    push           22         i64 
    callproc       &pc_libpcl.pcl_gen 
#16904: 
    jump           #16905     
#16902: 
    push           &mm_decls.ttisreal 
    push           mm_blockpcl.do_const.mode i64 
    pushptroff                u8 1 0
    jumpfalse      #16906     i64 
    push           &mm_decls.ttsize 
    push           mm_blockpcl.do_const.mode i64 
    pushptroff                i32 4 0
    push           4          i64 
    jumpne         #16907     i64 
    setargs                   1 0
    push           mm_blockpcl.do_const.p u64 
    push           16         
    pushptroff                r64 1 0
    callproc       &mm_genpcl.genpushreal32 
    jump           #16908     
#16907: 
    setargs                   1 0
    push           mm_blockpcl.do_const.p u64 
    push           16         
    pushptroff                r64 1 0
    callproc       &mm_genpcl.genpushreal 
#16908: 
    jump           #16905     
#16906: 
    push           &mm_decls.ttisref 
    push           mm_blockpcl.do_const.mode i64 
    pushptroff                u8 1 0
    jumpfalse      #16909     i64 
    push           mm_blockpcl.do_const.p u64 
    push           44         
    pushptroff                u8 1 0
    jumpfalse      #16910     i64 
    setargs                   1 0
    push           mm_blockpcl.do_const.p u64 
    push           16         
    pushptroff                u64 1 0
    callproc       &mm_genpcl.genpushstring 
    jump           #16911     
#16910: 
    setargs                   2 0
    push           9          i64 
    push           mm_blockpcl.do_const.p u64 
    push           16         
    pushptroff                i64 1 0
    callproc       &mm_genpcl.genpushint 
#16911: 
    jump           #16905     
#16909: 
    setargs                   2 0
    push           0          u64 
    push           "do_const" u64 
    callproc       &mm_support.gerror 
#16905: 
    setargs                   1 0
    push           mm_blockpcl.do_const.mode i64 
    callproc       &mm_genpcl.setmode 
#16912: 
    retproc                   
End


Proc mm_blockpcl.do_name:
    param          mm_blockpcl.do_name.p u64 
    local          mm_blockpcl.do_name.d u64 
    procentry                 
    push           mm_blockpcl.do_name.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_name.d u64 
    push           mm_blockpcl.do_name.d u64 
    push           78         
    pushptroff                u8 1 0
    push           5          i64 
    casejumpeq     #16914     i64 0
    push           6          i64 
    casejumpeq     #16914     i64 0
    push           17         i64 
    casejumpeq     #16915     i64 0
    push           14         i64 
    casejumpeq     #16916     i64 0
    popstack                  i64 
    jump           #16917     
#16914: 
    setargs                   1 0
    push           mm_blockpcl.do_name.d u64 
    callproc       &mm_genpcl.genpushmemaddr_d 
    jump           #16918     
#16915: 
    push           mm_blockpcl.do_name.d u64 
    push           80         
    pushptroff                i32 1 0
    push           0          i64 
    jumpne         #16919     i64 
    push           &pc_libpcl.labelno 
    incrload                  i64 1
    push           mm_blockpcl.do_name.d u64 
    push           80         
    popptroff                 i32 1 0
#16919: 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.do_name.d u64 
    push           80         
    pushptroff                i32 1 0
    callfn         &pc_libpcl.pcl_genlabel u64 
    push           51         i64 
    callproc       &pc_libpcl.pcl_gen 
    push           0          i64 
    push           mm_blockpcl.do_name.p u64 
    push           59         
    popptroff                 u8 1 0
    push           0          i64 
    push           mm_blockpcl.do_name.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #16918     
#16916: 
    setargs                   2 0
    push           4          i64 
    push           mm_blockpcl.do_name.d u64 
    push           84         
    pushptroff                i32 1 0
    callproc       &mm_genpcl.genpushint 
    jump           #16918     
#16917: 
    setargs                   1 0
    push           mm_blockpcl.do_name.d u64 
    callproc       &mm_genpcl.genpushmem_d 
    setargs                   1 0
    startmult                 
    push           mm_blockpcl.do_name.p u64 
    push           52         
    pushptroff                i32 1 0
    jumpfalse      #16920     i64 
    push           mm_blockpcl.do_name.p u64 
    push           52         
    pushptroff                i32 1 0
    resetmult                 
    jump           #16921     
#16920: 
    push           mm_blockpcl.do_name.p u64 
    push           48         
    pushptroff                i32 1 0
    endmult                   
#16921: 
    callfn         &mm_lib.getpclmode i64 
    push           pc_libpcl.pccurr u64 
    push           3          
    popptroff                 u8 1 0
    push           &mm_decls.ttsize 
    push           mm_blockpcl.do_name.p u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           pc_libpcl.pccurr u64 
    push           4          
    popptroff                 i32 1 0
#16918: 
#16922: 
    retproc                   
End


Proc mm_blockpcl.do_stop:
    param          mm_blockpcl.do_stop.p u64 
    param          mm_blockpcl.do_stop.a u64 
    procentry                 
    push           mm_blockpcl.do_stop.a u64 
    jumpfalse      #16924     u64 
    setargs                   1 0
    push           mm_blockpcl.do_stop.a u64 
    callproc       &mm_blockpcl.evalunit 
    jump           #16925     
#16924: 
    setargs                   2 0
    setargs                   2 0
    push           9          i64 
    push           0          i64 
    callfn         &pc_libpcl.pcl_genint u64 
    push           22         i64 
    callproc       &pc_libpcl.pcl_gen 
#16925: 
    setargs                   2 0
    push           0          u64 
    push           2          i64 
    callproc       &pc_libpcl.pcl_gen 
#16926: 
    retproc                   
End


Proc mm_blockpcl.do_andl:
    param          mm_blockpcl.do_andl.p u64 
    param          mm_blockpcl.do_andl.a u64 
    param          mm_blockpcl.do_andl.b u64 
    local          mm_blockpcl.do_andl.labfalse i64 
    local          mm_blockpcl.do_andl.labend i64 
    procentry                 
    setargs                   2 0
    push           0          u64 
    push           192        i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_andl.labfalse i64 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_andl.labend i64 
    setargs                   3 0
    push           mm_blockpcl.do_andl.labfalse i64 
    push           mm_blockpcl.do_andl.a u64 
    push           0          i64 
    callproc       &mm_blockpcl.genjumpcond 
    setargs                   3 0
    push           mm_blockpcl.do_andl.labfalse i64 
    push           mm_blockpcl.do_andl.b u64 
    push           0          i64 
    callproc       &mm_blockpcl.genjumpcond 
    setargs                   2 0
    push           9          i64 
    push           1          i64 
    callproc       &mm_genpcl.genpushint 
    setargs                   2 0
    push           0          u64 
    push           193        i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.do_andl.labend i64 
    callproc       &mm_blockpcl.genjumpl 
    setargs                   1 0
    push           mm_blockpcl.do_andl.labfalse i64 
    callproc       &mm_genpcl.definefwdlabel 
    setargs                   2 0
    push           9          i64 
    push           0          i64 
    callproc       &mm_genpcl.genpushint 
    setargs                   2 0
    push           0          u64 
    push           194        i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.do_andl.labend i64 
    callproc       &mm_genpcl.definefwdlabel 
#16928: 
    retproc                   
End


Proc mm_blockpcl.do_orl:
    param          mm_blockpcl.do_orl.p u64 
    param          mm_blockpcl.do_orl.a u64 
    param          mm_blockpcl.do_orl.b u64 
    local          mm_blockpcl.do_orl.labtrue i64 
    local          mm_blockpcl.do_orl.labfalse i64 
    local          mm_blockpcl.do_orl.labend i64 
    procentry                 
    setargs                   2 0
    push           0          u64 
    push           192        i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_orl.labtrue i64 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_orl.labfalse i64 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_orl.labend i64 
    setargs                   3 0
    push           mm_blockpcl.do_orl.labtrue i64 
    push           mm_blockpcl.do_orl.a u64 
    push           1          i64 
    callproc       &mm_blockpcl.genjumpcond 
    setargs                   3 0
    push           mm_blockpcl.do_orl.labfalse i64 
    push           mm_blockpcl.do_orl.b u64 
    push           0          i64 
    callproc       &mm_blockpcl.genjumpcond 
    setargs                   1 0
    push           mm_blockpcl.do_orl.labtrue i64 
    callproc       &mm_genpcl.definefwdlabel 
    setargs                   2 0
    push           9          i64 
    push           1          i64 
    callproc       &mm_genpcl.genpushint 
    setargs                   2 0
    push           0          u64 
    push           193        i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.do_orl.labend i64 
    callproc       &mm_blockpcl.genjumpl 
    setargs                   1 0
    push           mm_blockpcl.do_orl.labfalse i64 
    callproc       &mm_genpcl.definefwdlabel 
    setargs                   2 0
    push           9          i64 
    push           0          i64 
    callproc       &mm_genpcl.genpushint 
    setargs                   2 0
    push           0          u64 
    push           194        i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.do_orl.labend i64 
    callproc       &mm_genpcl.definefwdlabel 
#16930: 
    retproc                   
End


Proc mm_blockpcl.do_notl:
    param          mm_blockpcl.do_notl.p u64 
    param          mm_blockpcl.do_notl.a u64 
    procentry                 
    setargs                   1 0
    push           mm_blockpcl.do_notl.a u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    push           0          u64 
    push           mm_blockpcl.do_notl.p u64 
    push           60         
    pushptroff                u8 1 0
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           4          i64 
    callproc       &mm_genpcl.setmode 
#16932: 
    retproc                   
End


Proc mm_blockpcl.do_istruel:
    param          mm_blockpcl.do_istruel.p u64 
    param          mm_blockpcl.do_istruel.a u64 
    procentry                 
    setargs                   1 0
    push           mm_blockpcl.do_istruel.a u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   1 0
    push           mm_blockpcl.do_istruel.a u64 
    callfn         &mm_blockpcl.islogical i64 
    jumpfalse      #16934     i64 
    jump           #16935     
#16934: 
    setargs                   2 0
    push           0          u64 
    push           mm_blockpcl.do_istruel.p u64 
    push           60         
    pushptroff                u8 1 0
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           4          i64 
    callproc       &mm_genpcl.setmode 
#16935: 
    retproc                   
End


Proc mm_blockpcl.do_typepun:
    param          mm_blockpcl.do_typepun.p u64 
    param          mm_blockpcl.do_typepun.a u64 
    procentry                 
    setargs                   1 0
    push           mm_blockpcl.do_typepun.a u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   1 0
    push           mm_blockpcl.do_typepun.a u64 
    callproc       &mm_genpcl.setmode_u 
    push           mm_blockpcl.do_typepun.a u64 
    push           48         
    pushptroff                i32 1 0
    push           mm_blockpcl.do_typepun.p u64 
    push           48         
    pushptroff                i32 1 0
    jumpne         #16937     i64 
    jump           #16938     
#16937: 
    setargs                   2 0
    push           0          u64 
    push           181        i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.do_typepun.p u64 
    push           52         
    pushptroff                i32 1 0
    callproc       &mm_genpcl.setmode 
#16938: 
    retproc                   
End


Proc mm_blockpcl.do_shorten:
    param          mm_blockpcl.do_shorten.p u64 
    param          mm_blockpcl.do_shorten.a u64 
    procentry                 
    setargs                   1 0
    push           mm_blockpcl.do_shorten.a u64 
    callproc       &mm_blockpcl.evalunit 
#16940: 
    retproc                   
End


Proc mm_blockpcl.islogical: i64
    param          mm_blockpcl.islogical.p u64 
    procentry                 
    push           mm_blockpcl.islogical.p u64 
    pushptr                   u8 
    push           18         i64 
    casejumpeq     #16942     i64 0
    push           17         i64 
    casejumpeq     #16942     i64 0
    push           14         i64 
    casejumpeq     #16942     i64 0
    push           15         i64 
    casejumpeq     #16942     i64 0
    push           16         i64 
    casejumpeq     #16942     i64 0
    popstack                  i64 
    jump           #16943     
#16942: 
    push           1          i64 
    setret                    i64 
    jump           #16944     
    jump           #16945     
#16943: 
#16945: 
    push           0          i64 
    setret                    i64 
    jump           #16944     
#16944: 
    retfn                     i64 
End


Proc mm_blockpcl.do_assign:
    param          mm_blockpcl.do_assign.p u64 
    param          mm_blockpcl.do_assign.a u64 
    param          mm_blockpcl.do_assign.b u64 
    local          mm_blockpcl.do_assign.c u64 
    local          mm_blockpcl.do_assign.d u64 
    local          mm_blockpcl.do_assign.offset i64 
    procentry                 
    push           mm_blockpcl.do_assign.a u64 
    pushptr                   u8 
    push           19         i64 
    jumpeq         #16947     i64 
    push           mm_blockpcl.do_assign.b u64 
    pushptr                   u8 
    push           19         i64 
    jumpne         #16947     i64 
    push           mm_blockpcl.do_assign.p u64 
    push           59         
    pushptroff                u8 1 0
    jumptrue       #16948     i64 
    setargs                   3 0
    push           mm_blockpcl.do_assign.b u64 
    push           mm_blockpcl.do_assign.a u64 
    push           mm_blockpcl.do_assign.p u64 
    callproc       &mm_blockpcl.do_assignblock 
    jump           #16949     
#16948: 
#16947: 
    push           mm_blockpcl.do_assign.a u64 
    pushptr                   u8 
    push           19         i64 
    jumpne         #16950     i64 
    push           mm_blockpcl.do_assign.p u64 
    push           59         
    pushptroff                u8 1 0
    jumpfalse      #16951     i64 
    setargs                   2 0
    push           0          u64 
    push           "multass/store" u64 
    callproc       &mm_support.gerror 
#16951: 
    setargs                   2 0
    push           mm_blockpcl.do_assign.b u64 
    push           mm_blockpcl.do_assign.a u64 
    callproc       &mm_blockpcl.do_multassign 
    jump           #16949     
    jump           #16952     
#16950: 
    push           mm_blockpcl.do_assign.b u64 
    pushptr                   u8 
    push           31         i64 
    jumpne         #16953     i64 
    push           &mm_decls.ttbasetype 
    push           mm_blockpcl.do_assign.b u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           31         i64 
    jumpne         #16953     i64 
    setargs                   2 0
    push           mm_blockpcl.do_assign.b u64 
    push           mm_blockpcl.do_assign.a u64 
    callproc       &mm_blockpcl.do_multassign 
    jump           #16949     
#16953: 
#16952: 
    push           mm_blockpcl.do_assign.a u64 
    pushptr                   u8 
    push           48         i64 
    casejumpeq     #16954     i64 0
    push           50         i64 
    casejumpeq     #16955     i64 0
    push           51         i64 
    casejumpeq     #16956     i64 0
    popstack                  i64 
    jump           #16957     
#16954: 
    setargs                   4 0
    push           mm_blockpcl.do_assign.b u64 
    push           mm_blockpcl.do_assign.a u64 
    push           24         
    pushptroff                u64 1 0
    push           mm_blockpcl.do_assign.a u64 
    push           16         
    pushptroff                u64 1 0
    push           mm_blockpcl.do_assign.p u64 
    callproc       &mm_blockpcl.do_storeindex 
    jump           #16949     
    jump           #16958     
#16955: 
    setargs                   2 0
    push           0          u64 
    push           "ASS/SLICE" u64 
    callproc       &mm_support.gerror 
    jump           #16958     
#16956: 
    setargs                   3 0
    push           mm_blockpcl.do_assign.b u64 
    push           mm_blockpcl.do_assign.a u64 
    push           24         
    pushptroff                u64 1 0
    push           mm_blockpcl.do_assign.a u64 
    callproc       &mm_blockpcl.do_storedot 
    jump           #16949     
    jump           #16958     
#16957: 
#16958: 
    push           mm_blockpcl.do_assign.a u64 
    pushptr                   u8 
    switch         #16959     3 57
    opnd           #16960     
#16959: 
    switchlabel    #16961     
    switchlabel    #16960     
    switchlabel    #16960     
    switchlabel    #16960     
    switchlabel    #16960     
    switchlabel    #16960     
    switchlabel    #16960     
    switchlabel    #16960     
    switchlabel    #16960     
    switchlabel    #16960     
    switchlabel    #16960     
    switchlabel    #16960     
    switchlabel    #16960     
    switchlabel    #16960     
    switchlabel    #16960     
    switchlabel    #16960     
    switchlabel    #16960     
    switchlabel    #16960     
    switchlabel    #16960     
    switchlabel    #16960     
    switchlabel    #16960     
    switchlabel    #16960     
    switchlabel    #16960     
    switchlabel    #16960     
    switchlabel    #16960     
    switchlabel    #16960     
    switchlabel    #16960     
    switchlabel    #16960     
    switchlabel    #16960     
    switchlabel    #16960     
    switchlabel    #16960     
    switchlabel    #16960     
    switchlabel    #16960     
    switchlabel    #16960     
    switchlabel    #16960     
    switchlabel    #16960     
    switchlabel    #16960     
    switchlabel    #16960     
    switchlabel    #16960     
    switchlabel    #16960     
    switchlabel    #16960     
    switchlabel    #16960     
    switchlabel    #16960     
    switchlabel    #16960     
    switchlabel    #16960     
    switchlabel    #16960     
    switchlabel    #16960     
    switchlabel    #16960     
    switchlabel    #16960     
    switchlabel    #16960     
    switchlabel    #16962     
    switchlabel    #16963     
    switchlabel    #16960     
    switchlabel    #16960     
    switchlabel    #16964     
    endswitch                 
#16961: 
    setargs                   1 0
    push           mm_blockpcl.do_assign.b u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.do_assign.a u64 
    callfn         &mm_genpcl.genmem_u u64 
    startmult                 
    push           mm_blockpcl.do_assign.p u64 
    push           59         
    pushptroff                u8 1 0
    jumpfalse      #16965     i64 
    push           24         i64 
    resetmult                 
    jump           #16966     
#16965: 
    push           23         i64 
    endmult                   
#16966: 
    callproc       &pc_libpcl.pcl_gen 
    jump           #16967     
#16964: 
    setargs                   1 0
    push           mm_blockpcl.do_assign.b u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    push           0          u64 
    push           mm_blockpcl.do_assign.a u64 
    callproc       &mm_blockpcl.evalref 
    setargs                   0 0
    callfn         &pc_libpcl.pcl_getopcode i64 
    push           126        i64 
    jumpne         #16968     i64 
    setargs                   1 0
    startmult                 
    push           mm_blockpcl.do_assign.p u64 
    push           59         
    pushptroff                u8 1 0
    jumpfalse      #16969     i64 
    push           33         i64 
    resetmult                 
    jump           #16970     
#16969: 
    push           32         i64 
    endmult                   
#16970: 
    callproc       &pc_libpcl.pcl_setopcode 
    jump           #16971     
#16968: 
    setargs                   2 0
    push           0          u64 
    startmult                 
    push           mm_blockpcl.do_assign.p u64 
    push           59         
    pushptroff                u8 1 0
    jumpfalse      #16972     i64 
    push           36         i64 
    resetmult                 
    jump           #16973     
#16972: 
    push           35         i64 
    endmult                   
#16973: 
    callproc       &pc_libpcl.pcl_gen 
#16971: 
    setargs                   1 0
    startmult                 
    push           mm_blockpcl.do_assign.a u64 
    push           52         
    pushptroff                i32 1 0
    jumpfalse      #16974     i64 
    push           mm_blockpcl.do_assign.a u64 
    push           52         
    pushptroff                i32 1 0
    resetmult                 
    jump           #16975     
#16974: 
    push           mm_blockpcl.do_assign.a u64 
    push           48         
    pushptroff                i32 1 0
    endmult                   
#16975: 
    callproc       &mm_genpcl.setmode 
    jump           #16967     
#16962: 
    setargs                   1 0
    push           mm_blockpcl.do_assign.b u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    push           0          u64 
    push           mm_blockpcl.do_assign.a u64 
    push           16         
    pushptroff                u64 1 0
    callproc       &mm_blockpcl.evalref 
    setargs                   1 0
    push           mm_blockpcl.do_assign.a u64 
    push           24         
    pushptroff                u64 1 0
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    push           0          u64 
    startmult                 
    push           mm_blockpcl.do_assign.p u64 
    push           59         
    pushptroff                u8 1 0
    jumpfalse      #16976     i64 
    push           39         i64 
    resetmult                 
    jump           #16977     
#16976: 
    push           38         i64 
    endmult                   
#16977: 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.do_assign.a u64 
    push           16         
    pushptroff                u64 1 0
    callproc       &mm_genpcl.setmode_u 
    jump           #16949     
    jump           #16967     
#16963: 
    setargs                   1 0
    push           mm_blockpcl.do_assign.b u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    push           0          u64 
    push           mm_blockpcl.do_assign.a u64 
    push           16         
    pushptroff                u64 1 0
    callproc       &mm_blockpcl.evalref 
    setargs                   1 0
    push           mm_blockpcl.do_assign.a u64 
    push           24         
    pushptroff                u64 1 0
    push           16         
    pushptroff                u64 1 0
    callproc       &mm_blockpcl.evalunit 
    setargs                   1 0
    push           mm_blockpcl.do_assign.a u64 
    push           24         
    pushptroff                u64 1 0
    push           24         
    pushptroff                u64 1 0
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    push           0          u64 
    startmult                 
    push           mm_blockpcl.do_assign.p u64 
    push           59         
    pushptroff                u8 1 0
    jumpfalse      #16978     i64 
    push           42         i64 
    resetmult                 
    jump           #16979     
#16978: 
    push           41         i64 
    endmult                   
#16979: 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.do_assign.a u64 
    push           16         
    pushptroff                u64 1 0
    callproc       &mm_genpcl.setmode_u 
    jump           #16949     
    jump           #16967     
#16960: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &mm_tables.jtagnames 
    push           mm_blockpcl.do_assign.a u64 
    pushptr                   u8 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           0          u64 
    push           "Can't assign" u64 
    callproc       &mm_support.gerror 
#16967: 
    setargs                   1 0
    push           mm_blockpcl.do_assign.a u64 
    callproc       &mm_genpcl.setmode_u 
#16949: 
    retproc                   
End


Proc mm_blockpcl.do_bin:
    param          mm_blockpcl.do_bin.p u64 
    param          mm_blockpcl.do_bin.a u64 
    param          mm_blockpcl.do_bin.b u64 
    local          mm_blockpcl.do_bin.offset i64 
    procentry                 
    setargs                   1 0
    push           mm_blockpcl.do_bin.a u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   0 0
    callfn         &pc_libpcl.pcl_getopcode i64 
    push           126        i64 
    jumpne         #16981     i64 
    push           mm_blockpcl.do_bin.p u64 
    push           60         
    pushptroff                u8 1 0
    push           126        i64 
    setjumpeq      #16982     i64 
    push           127        i64 
    setjumpne      #16981     i64 
#16982: 
    push           &mm_decls.ttisref 
    push           mm_blockpcl.do_bin.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    jumpfalse      #16981     i64 
    push           &mm_decls.ttisinteger 
    push           mm_blockpcl.do_bin.b u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    jumpfalse      #16981     i64 
    push           mm_blockpcl.do_bin.b u64 
    pushptr                   u8 
    push           1          i64 
    jumpne         #16981     i64 
    push           &mm_decls.ttsize 
    push           &mm_decls.tttarget 
    push           mm_blockpcl.do_bin.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    pushptroff                i32 4 0
    push           mm_blockpcl.do_bin.b u64 
    push           16         
    pushptroff                i64 1 0
    mul                       i64 
    pop            mm_blockpcl.do_bin.offset i64 
    push           mm_blockpcl.do_bin.p u64 
    push           60         
    pushptroff                u8 1 0
    push           126        i64 
    jumpne         #16983     i64 
    setargs                   1 0
    push           mm_blockpcl.do_bin.offset i64 
    callproc       &pc_libpcl.pcl_addoffset 
    jump           #16984     
#16983: 
    setargs                   1 0
    push           mm_blockpcl.do_bin.offset i64 
    neg                       i64 
    callproc       &pc_libpcl.pcl_addoffset 
#16984: 
    jump           #16985     
#16981: 
    setargs                   1 0
    push           mm_blockpcl.do_bin.b u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    push           0          u64 
    push           mm_blockpcl.do_bin.p u64 
    push           60         
    pushptroff                u8 1 0
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.do_bin.p u64 
    callproc       &mm_genpcl.setmode_u 
    push           &mm_decls.ttisref 
    push           mm_blockpcl.do_bin.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    jumpfalse      #16986     i64 
    push           &mm_decls.ttisinteger 
    push           mm_blockpcl.do_bin.b u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    jumpfalse      #16986     i64 
    setargs                   1 0
    push           &mm_decls.ttsize 
    push           &mm_decls.tttarget 
    push           mm_blockpcl.do_bin.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    pushptroff                i32 4 0
    callproc       &pc_libpcl.pcl_setscale 
#16986: 
    push           mm_blockpcl.do_bin.p u64 
    push           60         
    pushptroff                u8 1 0
    push           128        i64 
    jumpne         #16987     i64 
    push           &mm_decls.ttisref 
    push           mm_blockpcl.do_bin.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    jumpfalse      #16987     i64 
    setargs                   1 0
    push           &mm_decls.ttsize 
    push           &mm_decls.tttarget 
    push           mm_blockpcl.do_bin.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    pushptroff                i32 4 0
    callproc       &pc_libpcl.pcl_setscale 
#16987: 
#16985: 
    retproc                   
End


Proc mm_blockpcl.do_setcc:
    param          mm_blockpcl.do_setcc.p u64 
    param          mm_blockpcl.do_setcc.a u64 
    param          mm_blockpcl.do_setcc.b u64 
    procentry                 
    setargs                   1 0
    push           mm_blockpcl.do_setcc.a u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   1 0
    push           mm_blockpcl.do_setcc.b u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    push           0          u64 
    setargs                   2 0
    push           66         i64 
    push           mm_blockpcl.do_setcc.p u64 
    push           60         
    pushptroff                u8 1 0
    callfn         &mm_blockpcl.condtopclop i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.do_setcc.a u64 
    callproc       &mm_genpcl.setmode_u 
#16989: 
    retproc                   
End


Proc mm_blockpcl.do_setccchain:
    param          mm_blockpcl.do_setccchain.p u64 
    param          mm_blockpcl.do_setccchain.q u64 
    local          mm_blockpcl.do_setccchain.lab1 i64 
    local          mm_blockpcl.do_setccchain.lab2 i64 
    local          mm_blockpcl.do_setccchain.i i64 
    local          mm_blockpcl.do_setccchain.r u64 
    procentry                 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_setccchain.lab1 i64 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_setccchain.lab2 i64 
    push           mm_blockpcl.do_setccchain.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_setccchain.r u64 
    push           1          i64 
    pop            mm_blockpcl.do_setccchain.i i64 
    setargs                   2 0
    push           0          u64 
    push           192        i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #16991     
#16992: 
    setargs                   1 0
    push           mm_blockpcl.do_setccchain.q u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   1 0
    push           mm_blockpcl.do_setccchain.r u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.do_setccchain.lab1 i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    setargs                   2 0
    push           53         i64 
    setargs                   1 0
    push           mm_blockpcl.do_setccchain.p u64 
    push           40         
    addrefoff                 u64 1 0
    push           mm_blockpcl.do_setccchain.i i64 
    pushptroff                u8 1 -1
    callfn         &mm_genpcl.reversecond i64 
    callfn         &mm_blockpcl.condtopclop i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.do_setccchain.q u64 
    callproc       &mm_genpcl.setmode_u 
    push           &mm_blockpcl.do_setccchain.i 
    incr                      i64 1
    push           mm_blockpcl.do_setccchain.r u64 
    pop            mm_blockpcl.do_setccchain.q u64 
    push           mm_blockpcl.do_setccchain.r u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_setccchain.r u64 
#16991: 
    push           mm_blockpcl.do_setccchain.r u64 
    jumptrue       #16992     u64 
#16993: 
    setargs                   2 0
    push           9          i64 
    push           1          i64 
    callproc       &mm_genpcl.genpushint 
    setargs                   2 0
    push           0          u64 
    push           193        i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.do_setccchain.lab2 i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    push           51         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.do_setccchain.lab1 i64 
    callproc       &mm_genpcl.definefwdlabel 
    setargs                   2 0
    push           9          i64 
    push           0          i64 
    callproc       &mm_genpcl.genpushint 
    setargs                   2 0
    push           0          u64 
    push           194        i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.do_setccchain.lab2 i64 
    callproc       &mm_genpcl.definefwdlabel 
#16994: 
    retproc                   
End


Proc mm_blockpcl.do_binto:
    param          mm_blockpcl.do_binto.p u64 
    param          mm_blockpcl.do_binto.a u64 
    param          mm_blockpcl.do_binto.b u64 
    procentry                 
    setargs                   1 0
    push           mm_blockpcl.do_binto.a u64 
    callproc       &mm_blockpcl.evallv 
    setargs                   1 0
    push           mm_blockpcl.do_binto.b u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    push           0          u64 
    push           mm_blockpcl.do_binto.p u64 
    push           60         
    pushptroff                u8 1 0
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.do_binto.a u64 
    callproc       &mm_genpcl.setmode_u 
    push           &mm_decls.ttisref 
    push           mm_blockpcl.do_binto.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    jumpfalse      #16996     i64 
    push           &mm_decls.ttisinteger 
    push           mm_blockpcl.do_binto.b u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    jumpfalse      #16996     i64 
    setargs                   1 0
    push           &mm_decls.ttsize 
    push           &mm_decls.tttarget 
    push           mm_blockpcl.do_binto.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    pushptroff                i32 4 0
    callproc       &pc_libpcl.pcl_setscale 
#16996: 
#16997: 
    retproc                   
End


Proc mm_blockpcl.do_unary:
    param          mm_blockpcl.do_unary.p u64 
    param          mm_blockpcl.do_unary.a u64 
    procentry                 
    setargs                   1 0
    push           mm_blockpcl.do_unary.a u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    push           0          u64 
    push           mm_blockpcl.do_unary.p u64 
    push           60         
    pushptroff                u8 1 0
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.do_unary.p u64 
    callproc       &mm_genpcl.setmode_u 
    push           mm_blockpcl.do_unary.p u64 
    push           60         
    pushptroff                u8 1 0
    push           203        i64 
    jumpne         #16999     i64 
    push           &mm_decls.ttbasetype 
    push           mm_blockpcl.do_unary.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           12         i64 
    jumpne         #16999     i64 
    setargs                   2 0
    push           0          i64 
    push           &mm_decls.ttlower 
    push           mm_blockpcl.do_unary.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    callproc       &pc_libpcl.pcl_setxy 
#16999: 
#17000: 
    retproc                   
End


Proc mm_blockpcl.do_unaryto:
    param          mm_blockpcl.do_unaryto.p u64 
    param          mm_blockpcl.do_unaryto.a u64 
    procentry                 
    setargs                   1 0
    push           mm_blockpcl.do_unaryto.a u64 
    callproc       &mm_blockpcl.evallv 
    setargs                   2 0
    push           0          u64 
    push           mm_blockpcl.do_unaryto.p u64 
    push           60         
    pushptroff                u8 1 0
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.do_unaryto.a u64 
    callproc       &mm_genpcl.setmode_u 
#17002: 
    retproc                   
End


Proc mm_blockpcl.do_ptr:
    param          mm_blockpcl.do_ptr.p u64 
    param          mm_blockpcl.do_ptr.a u64 
    procentry                 
    setargs                   1 0
    push           mm_blockpcl.do_ptr.a u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   0 0
    callfn         &pc_libpcl.pcl_getopcode i64 
    push           126        i64 
    jumpne         #17004     i64 
    setargs                   1 0
    push           31         i64 
    callproc       &pc_libpcl.pcl_setopcode 
    jump           #17005     
#17004: 
    setargs                   2 0
    push           0          u64 
    push           34         i64 
    callproc       &pc_libpcl.pcl_gen 
#17005: 
    setargs                   1 0
    startmult                 
    push           mm_blockpcl.do_ptr.p u64 
    push           52         
    pushptroff                i32 1 0
    jumpfalse      #17006     i64 
    push           mm_blockpcl.do_ptr.p u64 
    push           52         
    pushptroff                i32 1 0
    resetmult                 
    jump           #17007     
#17006: 
    push           mm_blockpcl.do_ptr.p u64 
    push           48         
    pushptroff                i32 1 0
    endmult                   
#17007: 
    callproc       &mm_genpcl.setmode 
#17008: 
    retproc                   
End


Proc mm_blockpcl.do_labeldef:
    param          mm_blockpcl.do_labeldef.p u64 
    local          mm_blockpcl.do_labeldef.d u64 
    local          mm_blockpcl.do_labeldef.str block:256 
    procentry                 
    push           mm_blockpcl.do_labeldef.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_labeldef.d u64 
    push           mm_blockpcl.do_labeldef.d u64 
    push           80         
    pushptroff                i32 1 0
    push           0          i64 
    jumpne         #17010     i64 
    push           &pc_libpcl.labelno 
    incrload                  i64 1
    push           mm_blockpcl.do_labeldef.d u64 
    push           80         
    popptroff                 i32 1 0
#17010: 
    setargs                   1 0
    push           &mm_blockpcl.do_labeldef.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           mm_blockpcl.do_labeldef.d u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           "::"       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           &mm_blockpcl.do_labeldef.str 
    callproc       &pc_libpcl.pcl_gencomment 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.do_labeldef.d u64 
    push           80         
    pushptroff                i32 1 0
    callfn         &pc_libpcl.pcl_genlabel u64 
    push           20         i64 
    callproc       &pc_libpcl.pcl_gen 
#17011: 
    retproc                   
End


Proc mm_blockpcl.do_goto:
    param          mm_blockpcl.do_goto.a u64 
    local          mm_blockpcl.do_goto.d u64 
    procentry                 
    push           mm_blockpcl.do_goto.a u64 
    pushptr                   u8 
    push           3          i64 
    casejumpeq     #17013     i64 0
    popstack                  i64 
    jump           #17014     
#17013: 
    push           mm_blockpcl.do_goto.a u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_goto.d u64 
    push           mm_blockpcl.do_goto.d u64 
    push           80         
    pushptroff                i32 1 0
    push           0          i64 
    jumpne         #17015     i64 
    push           &pc_libpcl.labelno 
    incrload                  i64 1
    push           mm_blockpcl.do_goto.d u64 
    push           80         
    popptroff                 i32 1 0
#17015: 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.do_goto.d u64 
    push           80         
    pushptroff                i32 1 0
    callfn         &pc_libpcl.pcl_genlabel u64 
    push           51         i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #17016     
#17014: 
    setargs                   2 0
    push           0          u64 
    push           "goto ptr?" u64 
    callproc       &mm_support.gerror 
#17016: 
#17017: 
    retproc                   
End


Proc mm_blockpcl.do_do:
    param          mm_blockpcl.do_do.p u64 
    param          mm_blockpcl.do_do.a u64 
    param          mm_blockpcl.do_do.b u64 
    local          mm_blockpcl.do_do.lab_abc i64 
    local          mm_blockpcl.do_do.lab_d i64 
    procentry                 
    setargs                   0 0
    callfn         &mm_genpcl.definelabel i64 
    pop            mm_blockpcl.do_do.lab_abc i64 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_do.lab_d i64 
    setargs                   4 0
    push           mm_blockpcl.do_do.lab_d i64 
    push           mm_blockpcl.do_do.lab_abc i64 
    push           mm_blockpcl.do_do.lab_abc i64 
    push           mm_blockpcl.do_do.lab_abc i64 
    callproc       &mm_genpcl.stacklooplabels 
    setargs                   1 0
    push           mm_blockpcl.do_do.a u64 
    callproc       &mm_blockpcl.evalblock 
    setargs                   1 0
    push           mm_blockpcl.do_do.lab_abc i64 
    callproc       &mm_blockpcl.genjumpl 
    setargs                   1 0
    push           mm_blockpcl.do_do.lab_d i64 
    callproc       &mm_genpcl.definefwdlabel 
    push           &mm_genpcl.loopindex 
    decr                      i64 1
#17019: 
    retproc                   
End


Proc mm_blockpcl.do_to:
    param          mm_blockpcl.do_to.p u64 
    param          mm_blockpcl.do_to.a u64 
    param          mm_blockpcl.do_to.b u64 
    local          mm_blockpcl.do_to.cvar u64 
    local          mm_blockpcl.do_to.lab_a i64 
    local          mm_blockpcl.do_to.lab_b i64 
    local          mm_blockpcl.do_to.lab_c i64 
    local          mm_blockpcl.do_to.lab_d i64 
    local          mm_blockpcl.do_to.count i64 
    procentry                 
    push           mm_blockpcl.do_to.p u64 
    push           32         
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_to.cvar u64 
    setargs                   0 0
    callfn         &mm_genpcl.definelabel i64 
    pop            mm_blockpcl.do_to.lab_a i64 
    push           4          i64 
    push           mm_blockpcl.do_to.a u64 
    push           48         
    popptroff                 i32 1 0
    setargs                   1 0
    push           mm_blockpcl.do_to.a u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.do_to.cvar u64 
    callfn         &mm_genpcl.genmem_u u64 
    push           23         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           4          i64 
    callproc       &mm_genpcl.setmode 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_to.lab_b i64 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_to.lab_c i64 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_to.lab_d i64 
    setargs                   4 0
    push           mm_blockpcl.do_to.lab_d i64 
    push           mm_blockpcl.do_to.lab_c i64 
    push           mm_blockpcl.do_to.lab_b i64 
    push           mm_blockpcl.do_to.lab_a i64 
    callproc       &mm_genpcl.stacklooplabels 
    push           mm_blockpcl.do_to.a u64 
    pushptr                   u8 
    push           1          i64 
    jumpeq         #17021     i64 
    setargs                   1 0
    push           mm_blockpcl.do_to.cvar u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   1 0
    push           mm_genpcl.pzero u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.do_to.lab_d i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    push           56         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           4          i64 
    callproc       &mm_genpcl.setmode 
    jump           #17022     
#17021: 
    push           mm_blockpcl.do_to.a u64 
    push           16         
    pushptroff                i64 1 0
    pop            mm_blockpcl.do_to.count i64 
    push           mm_blockpcl.do_to.count i64 
    push           0          i64 
    jumpgt         #17023     i64 
    setargs                   1 0
    push           mm_blockpcl.do_to.lab_d i64 
    callproc       &mm_blockpcl.genjumpl 
#17023: 
#17022: 
    setargs                   1 0
    push           mm_blockpcl.do_to.lab_b i64 
    callproc       &mm_genpcl.definefwdlabel 
    setargs                   1 0
    push           mm_blockpcl.do_to.b u64 
    callproc       &mm_blockpcl.evalblock 
    setargs                   1 0
    push           mm_blockpcl.do_to.lab_c i64 
    callproc       &mm_genpcl.definefwdlabel 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.do_to.lab_b i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    push           80         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.do_to.cvar u64 
    callfn         &mm_genpcl.genmem_u u64 
    push           27         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.do_to.lab_d i64 
    callproc       &mm_genpcl.definefwdlabel 
    push           &mm_genpcl.loopindex 
    decr                      i64 1
#17024: 
    retproc                   
End


Proc mm_blockpcl.do_while:
    param          mm_blockpcl.do_while.p u64 
    param          mm_blockpcl.do_while.pcond u64 
    param          mm_blockpcl.do_while.pbody u64 
    param          mm_blockpcl.do_while.pincr u64 
    local          mm_blockpcl.do_while.lab_b i64 
    local          mm_blockpcl.do_while.lab_c i64 
    local          mm_blockpcl.do_while.lab_d i64 
    local          mm_blockpcl.do_while.lab_incr i64 
    procentry                 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_while.lab_b i64 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_while.lab_c i64 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_while.lab_d i64 
    push           mm_blockpcl.do_while.pincr u64 
    jumpfalse      #17026     u64 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_while.lab_incr i64 
    jump           #17027     
#17026: 
    push           mm_blockpcl.do_while.lab_c i64 
    pop            mm_blockpcl.do_while.lab_incr i64 
#17027: 
    setargs                   4 0
    push           mm_blockpcl.do_while.lab_d i64 
    push           mm_blockpcl.do_while.lab_c i64 
    push           mm_blockpcl.do_while.lab_b i64 
    push           mm_blockpcl.do_while.lab_c i64 
    callproc       &mm_genpcl.stacklooplabels 
    setargs                   1 0
    push           mm_blockpcl.do_while.lab_incr i64 
    callproc       &mm_blockpcl.genjumpl 
    setargs                   1 0
    push           mm_blockpcl.do_while.lab_b i64 
    callproc       &mm_genpcl.definefwdlabel 
    setargs                   1 0
    push           mm_blockpcl.do_while.pbody u64 
    callproc       &mm_blockpcl.evalblock 
    setargs                   1 0
    push           mm_blockpcl.do_while.lab_c i64 
    callproc       &mm_genpcl.definefwdlabel 
    push           mm_blockpcl.do_while.pincr u64 
    jumpfalse      #17028     u64 
    setargs                   1 0
    push           mm_blockpcl.do_while.pincr u64 
    callproc       &mm_blockpcl.evalblock 
    setargs                   1 0
    push           mm_blockpcl.do_while.lab_incr i64 
    callproc       &mm_genpcl.definefwdlabel 
#17028: 
    setargs                   3 0
    push           mm_blockpcl.do_while.lab_b i64 
    push           mm_blockpcl.do_while.pcond u64 
    push           1          i64 
    callproc       &mm_blockpcl.docond 
    setargs                   1 0
    push           mm_blockpcl.do_while.lab_d i64 
    callproc       &mm_genpcl.definefwdlabel 
    push           &mm_genpcl.loopindex 
    decr                      i64 1
#17029: 
    retproc                   
End


Proc mm_blockpcl.do_repeat:
    param          mm_blockpcl.do_repeat.p u64 
    param          mm_blockpcl.do_repeat.a u64 
    param          mm_blockpcl.do_repeat.b u64 
    local          mm_blockpcl.do_repeat.lab_ab i64 
    local          mm_blockpcl.do_repeat.lab_c i64 
    local          mm_blockpcl.do_repeat.lab_d i64 
    procentry                 
    setargs                   0 0
    callfn         &mm_genpcl.definelabel i64 
    pop            mm_blockpcl.do_repeat.lab_ab i64 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_repeat.lab_c i64 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_repeat.lab_d i64 
    setargs                   4 0
    push           mm_blockpcl.do_repeat.lab_d i64 
    push           mm_blockpcl.do_repeat.lab_c i64 
    push           mm_blockpcl.do_repeat.lab_ab i64 
    push           mm_blockpcl.do_repeat.lab_ab i64 
    callproc       &mm_genpcl.stacklooplabels 
    setargs                   1 0
    push           mm_blockpcl.do_repeat.a u64 
    callproc       &mm_blockpcl.evalblock 
    setargs                   1 0
    push           mm_blockpcl.do_repeat.lab_c i64 
    callproc       &mm_genpcl.definefwdlabel 
    push           mm_blockpcl.do_repeat.b u64 
    pushptr                   u8 
    push           1          i64 
    jumpne         #17031     i64 
    push           mm_blockpcl.do_repeat.b u64 
    push           16         
    pushptroff                i64 1 0
    push           0          i64 
    jumpeq         #17032     i64 
#17031: 
    setargs                   3 0
    push           mm_blockpcl.do_repeat.lab_ab i64 
    push           mm_blockpcl.do_repeat.b u64 
    push           0          i64 
    callproc       &mm_blockpcl.docond 
#17032: 
    setargs                   1 0
    push           mm_blockpcl.do_repeat.lab_d i64 
    callproc       &mm_genpcl.definefwdlabel 
    push           &mm_genpcl.loopindex 
    decr                      i64 1
#17033: 
    retproc                   
End


Proc mm_blockpcl.do_exit:
    param          mm_blockpcl.do_exit.p u64 
    param          mm_blockpcl.do_exit.k i64 
    local          mm_blockpcl.do_exit.n i64 
    local          mm_blockpcl.do_exit.index i64 
    procentry                 
    push           mm_blockpcl.do_exit.p u64 
    push           40         
    pushptroff                i32 1 0
    pop            mm_blockpcl.do_exit.index i64 
    push           mm_blockpcl.do_exit.index i64 
    push           0          i64 
    jumpne         #17035     i64 
    push           mm_genpcl.loopindex i64 
    pop            mm_blockpcl.do_exit.index i64 
#17035: 
    setargs                   2 0
    push           mm_blockpcl.do_exit.index i64 
    push           mm_blockpcl.do_exit.k i64 
    callfn         &mm_genpcl.findlooplabel i64 
    pop            mm_blockpcl.do_exit.n i64 
    push           mm_blockpcl.do_exit.n i64 
    push           0          i64 
    jumpne         #17036     i64 
    setargs                   2 0
    push           mm_blockpcl.do_exit.p u64 
    push           "Bad exit/loop index" u64 
    callproc       &mm_support.gerror 
    jump           #17037     
#17036: 
    setargs                   1 0
    push           mm_blockpcl.do_exit.n i64 
    callproc       &mm_blockpcl.genjumpl 
#17037: 
#17038: 
    retproc                   
End


Proc mm_blockpcl.do_if:
    param          mm_blockpcl.do_if.p u64 
    param          mm_blockpcl.do_if.a u64 
    param          mm_blockpcl.do_if.b u64 
    param          mm_blockpcl.do_if.c u64 
    param          mm_blockpcl.do_if.isref i64 
    local          mm_blockpcl.do_if.lab1 i64 
    local          mm_blockpcl.do_if.lab2 i64 
    local          mm_blockpcl.do_if.ismult i64 
    procentry                 
    push           mm_blockpcl.do_if.p u64 
    push           48         
    pushptroff                i32 1 0
    push           0          i64 
    setne                     i64 
    pop            mm_blockpcl.do_if.ismult i64 
    push           mm_blockpcl.do_if.ismult i64 
    jumpfalse      #17040     i64 
    setargs                   2 0
    push           0          u64 
    push           192        i64 
    callproc       &pc_libpcl.pcl_gen 
#17040: 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_if.lab1 i64 
    setargs                   3 0
    push           mm_blockpcl.do_if.lab1 i64 
    push           mm_blockpcl.do_if.a u64 
    push           0          i64 
    callproc       &mm_blockpcl.docond 
    setargs                   2 0
    push           mm_blockpcl.do_if.isref i64 
    push           mm_blockpcl.do_if.b u64 
    callproc       &mm_blockpcl.evalunitx 
    push           mm_blockpcl.do_if.ismult i64 
    jumpfalse      #17041     i64 
    setargs                   2 0
    push           0          u64 
    push           193        i64 
    callproc       &pc_libpcl.pcl_gen 
#17041: 
    push           mm_blockpcl.do_if.c u64 
    jumpfalse      #17042     u64 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_if.lab2 i64 
    setargs                   1 0
    push           mm_blockpcl.do_if.lab2 i64 
    callproc       &mm_blockpcl.genjumpl 
    setargs                   1 0
    push           mm_blockpcl.do_if.lab1 i64 
    callproc       &mm_genpcl.definefwdlabel 
    setargs                   2 0
    push           mm_blockpcl.do_if.isref i64 
    push           mm_blockpcl.do_if.c u64 
    callproc       &mm_blockpcl.evalunitx 
    push           mm_blockpcl.do_if.ismult i64 
    jumpfalse      #17043     i64 
    setargs                   2 0
    push           0          u64 
    push           194        i64 
    callproc       &pc_libpcl.pcl_gen 
#17043: 
    setargs                   1 0
    push           mm_blockpcl.do_if.lab2 i64 
    callproc       &mm_genpcl.definefwdlabel 
    jump           #17044     
#17042: 
    setargs                   1 0
    push           mm_blockpcl.do_if.lab1 i64 
    callproc       &mm_genpcl.definefwdlabel 
#17044: 
#17045: 
    retproc                   
End


Proc mm_blockpcl.do_longif:
    param          mm_blockpcl.do_longif.p u64 
    param          mm_blockpcl.do_longif.a u64 
    param          mm_blockpcl.do_longif.b u64 
    param          mm_blockpcl.do_longif.isref i64 
    local          mm_blockpcl.do_longif.labend i64 
    local          mm_blockpcl.do_longif.i i64 
    local          mm_blockpcl.do_longif.lab2 i64 
    local          mm_blockpcl.do_longif.ismult i64 
    local          mm_blockpcl.do_longif.pcond u64 
    procentry                 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_longif.labend i64 
    push           mm_blockpcl.do_longif.p u64 
    push           48         
    pushptroff                i32 1 0
    push           0          i64 
    setne                     i64 
    pop            mm_blockpcl.do_longif.ismult i64 
    push           mm_blockpcl.do_longif.a u64 
    pop            mm_blockpcl.do_longif.pcond u64 
    push           0          i64 
    pop            mm_blockpcl.do_longif.i i64 
    push           mm_blockpcl.do_longif.ismult i64 
    jumpfalse      #17047     i64 
    setargs                   2 0
    push           0          u64 
    push           192        i64 
    callproc       &pc_libpcl.pcl_gen 
#17047: 
    jump           #17048     
#17049: 
    push           &mm_blockpcl.do_longif.i 
    incr                      i64 1
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_longif.lab2 i64 
    setargs                   3 0
    push           mm_blockpcl.do_longif.lab2 i64 
    push           mm_blockpcl.do_longif.pcond u64 
    push           16         
    pushptroff                u64 1 0
    push           0          i64 
    callproc       &mm_blockpcl.docond 
    setargs                   2 0
    push           mm_blockpcl.do_longif.isref i64 
    push           mm_blockpcl.do_longif.pcond u64 
    push           24         
    pushptroff                u64 1 0
    callproc       &mm_blockpcl.evalunitx 
    push           mm_blockpcl.do_longif.ismult i64 
    jumpfalse      #17050     i64 
    setargs                   2 0
    push           0          u64 
    push           193        i64 
    callproc       &pc_libpcl.pcl_gen 
#17050: 
    push           mm_blockpcl.do_longif.pcond u64 
    push           8          
    pushptroff                u64 1 0
    jumptrue       #17051     u64 
    push           mm_blockpcl.do_longif.b u64 
    jumpfalse      #17052     u64 
#17051: 
    setargs                   1 0
    push           mm_blockpcl.do_longif.labend i64 
    callproc       &mm_blockpcl.genjumpl 
#17052: 
    setargs                   1 0
    push           mm_blockpcl.do_longif.lab2 i64 
    callproc       &mm_genpcl.definefwdlabel 
    push           mm_blockpcl.do_longif.pcond u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_longif.pcond u64 
#17048: 
    push           mm_blockpcl.do_longif.pcond u64 
    jumptrue       #17049     u64 
#17053: 
    push           mm_blockpcl.do_longif.b u64 
    jumpfalse      #17054     u64 
    setargs                   2 0
    push           mm_blockpcl.do_longif.isref i64 
    push           mm_blockpcl.do_longif.b u64 
    callproc       &mm_blockpcl.evalunitx 
    push           mm_blockpcl.do_longif.ismult i64 
    jumpfalse      #17055     i64 
    setargs                   2 0
    push           0          u64 
    push           194        i64 
    callproc       &pc_libpcl.pcl_gen 
#17055: 
#17054: 
    setargs                   1 0
    push           mm_blockpcl.do_longif.labend i64 
    callproc       &mm_genpcl.definefwdlabel 
#17056: 
    retproc                   
End


Proc mm_blockpcl.do_return:
    param          mm_blockpcl.do_return.p u64 
    param          mm_blockpcl.do_return.a u64 
    procentry                 
    push           mm_blockpcl.do_return.a u64 
    jumpfalse      #17058     u64 
    setargs                   1 0
    push           mm_blockpcl.do_return.a u64 
    callproc       &mm_blockpcl.evalunit 
    push           &mm_decls.ttbasetype 
    push           mm_blockpcl.do_return.p u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           12         i64 
    setjumpeq      #17059     i64 
    push           5          i64 
    setjumpeq      #17059     i64 
    push           3          i64 
    setjumpne      #17060     i64 
#17059: 
    setargs                   3 0
    push           0          u64 
    push           2          i64 
    push           196        i64 
    callproc       &pc_libpcl.pcl_genx 
    jump           #17061     
#17060: 
    setargs                   2 0
    push           0          u64 
    push           195        i64 
    callproc       &pc_libpcl.pcl_gen 
#17061: 
    setargs                   1 0
    push           mm_blockpcl.do_return.a u64 
    callproc       &mm_genpcl.setmode_u 
#17058: 
    setargs                   1 0
    push           mm_genpcl.retindex i64 
    callproc       &mm_blockpcl.genjumpl 
#17062: 
    retproc                   
End


Proc mm_blockpcl.do_returnmult:
    param          mm_blockpcl.do_returnmult.p u64 
    param          mm_blockpcl.do_returnmult.a u64 
    local          mm_blockpcl.do_returnmult.params block:800 
    local          mm_blockpcl.do_returnmult.q u64 
    local          mm_blockpcl.do_returnmult.nparams i64 
    local          mm_blockpcl.do_returnmult.i i64 
    procentry                 
    push           mm_blockpcl.do_returnmult.a u64 
    pop            mm_blockpcl.do_returnmult.q u64 
    push           0          i64 
    pop            mm_blockpcl.do_returnmult.nparams i64 
    jump           #17064     
#17065: 
    push           mm_blockpcl.do_returnmult.nparams i64 
    push           100        i64 
    jumplt         #17066     i64 
    setargs                   2 0
    push           0          u64 
    push           "Mult?"    u64 
    callproc       &mm_support.gerror 
#17066: 
    push           mm_blockpcl.do_returnmult.q u64 
    push           &mm_blockpcl.do_returnmult.params 
    push           &mm_blockpcl.do_returnmult.nparams 
    incrload                  i64 1
    popptroff                 u64 8 -8
    push           mm_blockpcl.do_returnmult.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_returnmult.q u64 
#17064: 
    push           mm_blockpcl.do_returnmult.q u64 
    jumptrue       #17065     u64 
#17067: 
#17068: 
    push           mm_blockpcl.do_returnmult.nparams i64 
    pop            mm_blockpcl.do_returnmult.i i64 
    push           mm_blockpcl.do_returnmult.i i64 
    push           1          i64 
    jumplt         #17069     i64 
#17070: 
    setargs                   1 0
    push           &mm_blockpcl.do_returnmult.params 
    push           mm_blockpcl.do_returnmult.i i64 
    pushptroff                u64 8 -8
    callproc       &mm_blockpcl.evalunit 
#17071: 
    fordown        #17070     i64 1
    opnd           mm_blockpcl.do_returnmult.i 
    opnd           1          
#17069: 
    setargs                   3 0
    push           0          u64 
    push           mm_blockpcl.do_returnmult.nparams i64 
    push           196        i64 
    callproc       &pc_libpcl.pcl_genx 
    setargs                   1 0
    push           mm_genpcl.retindex i64 
    callproc       &mm_blockpcl.genjumpl 
    push           1          i64 
    push           mm_blockpcl.do_returnmult.p u64 
    push           59         
    popptroff                 u8 1 0
#17072: 
    retproc                   
End


Proc mm_blockpcl.do_callproc:
    param          mm_blockpcl.do_callproc.p u64 
    param          mm_blockpcl.do_callproc.a u64 
    param          mm_blockpcl.do_callproc.b u64 
    param          mm_blockpcl.do_callproc.isfn i64 
    local          mm_blockpcl.do_callproc.paramlist block:800 
    local          mm_blockpcl.do_callproc.nparams i64 
    local          mm_blockpcl.do_callproc.nmult i64 
    local          mm_blockpcl.do_callproc.ffi i64 
    local          mm_blockpcl.do_callproc.isptr i64 
    local          mm_blockpcl.do_callproc.nslots i64 
    local          mm_blockpcl.do_callproc.nvariadics i64 
    local          mm_blockpcl.do_callproc.blockret i64 
    local          mm_blockpcl.do_callproc.nret i64 
    local          mm_blockpcl.do_callproc.d u64 
    local          mm_blockpcl.do_callproc.dtemp u64 
    local          mm_blockpcl.do_callproc.pmult u64 
    local          mm_blockpcl.do_callproc.q u64 
    local          mm_blockpcl.do_callproc.i i64 
    procentry                 
    push           0          i64 
    pop            mm_blockpcl.do_callproc.isptr i64 
    push           mm_blockpcl.do_callproc.a u64 
    pushptr                   u8 
    push           3          i64 
    casejumpeq     #17074     i64 0
    push           57         i64 
    casejumpeq     #17075     i64 0
    popstack                  i64 
    jump           #17076     
#17074: 
    push           mm_blockpcl.do_callproc.a u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_callproc.d u64 
    jump           #17077     
#17075: 
    push           &mm_decls.ttnamedef 
    push           mm_blockpcl.do_callproc.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                u64 8 0
    pop            mm_blockpcl.do_callproc.d u64 
    push           1          i64 
    pop            mm_blockpcl.do_callproc.isptr i64 
    jump           #17077     
#17076: 
    setargs                   2 0
    push           0          u64 
    push           "call/not ptr" u64 
    callproc       &mm_support.gerror 
#17077: 
    push           0          i64 
    pop            mm_blockpcl.do_callproc.nparams i64 
    push           0          i64 
    pop            mm_blockpcl.do_callproc.nslots i64 
    push           0          i64 
    pop            mm_blockpcl.do_callproc.nvariadics i64 
    push           0          i64 
    pop            mm_blockpcl.do_callproc.blockret i64 
    push           0          i64 
    pop            mm_blockpcl.do_callproc.ffi i64 
    push           mm_blockpcl.do_callproc.d u64 
    push           115        
    pushptroff                u8 1 0
    push           2          i64 
    setjumpeq      #17078     i64 
    push           1          i64 
    setjumpne      #17079     i64 
#17078: 
    push           1          i64 
    pop            mm_blockpcl.do_callproc.ffi i64 
#17079: 
    push           mm_blockpcl.do_callproc.b u64 
    pop            mm_blockpcl.do_callproc.q u64 
    jump           #17080     
#17081: 
    push           &mm_blockpcl.do_callproc.nslots 
    incr                      i64 1
    push           mm_blockpcl.do_callproc.nparams i64 
    push           100        i64 
    jumplt         #17082     i64 
    setargs                   2 0
    push           0          u64 
    push           "maxparams" u64 
    callproc       &mm_support.gerror 
#17082: 
    push           mm_blockpcl.do_callproc.q u64 
    push           &mm_blockpcl.do_callproc.paramlist 
    push           &mm_blockpcl.do_callproc.nparams 
    incrload                  i64 1
    popptroff                 u64 8 -8
    push           mm_blockpcl.do_callproc.ffi i64 
    jumpfalse      #17083     i64 
    push           mm_blockpcl.do_callproc.d u64 
    push           117        
    pushptroff                u8 1 0
    jumpfalse      #17083     i64 
    push           mm_blockpcl.do_callproc.nparams i64 
    push           mm_blockpcl.do_callproc.d u64 
    push           117        
    pushptroff                u8 1 0
    jumplt         #17083     i64 
    push           mm_blockpcl.do_callproc.nparams i64 
    push           4          i64 
    jumpgt         #17083     i64 
    push           mm_blockpcl.do_callproc.nvariadics i64 
    push           0          i64 
    jumpne         #17083     i64 
    push           mm_blockpcl.do_callproc.nparams i64 
    pop            mm_blockpcl.do_callproc.nvariadics i64 
#17083: 
    push           &mm_decls.ttbasetype 
    push           mm_blockpcl.do_callproc.q u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           12         i64 
    setjumpeq      #17084     i64 
    push           5          i64 
    setjumpeq      #17084     i64 
    push           3          i64 
    setjumpne      #17085     i64 
#17084: 
    push           &mm_blockpcl.do_callproc.nslots 
    incr                      i64 1
#17085: 
    push           mm_blockpcl.do_callproc.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_callproc.q u64 
#17080: 
    push           mm_blockpcl.do_callproc.q u64 
    jumptrue       #17081     u64 
#17086: 
    setargs                   2 0
    push           0          u64 
    push           197        i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.do_callproc.nslots i64 
    callproc       &pc_libpcl.pcl_setnargs 
    setargs                   1 0
    push           mm_blockpcl.do_callproc.nvariadics i64 
    callproc       &pc_libpcl.pcl_setnvariadics 
#17087: 
    push           mm_blockpcl.do_callproc.nparams i64 
    pop            mm_blockpcl.do_callproc.i i64 
    push           mm_blockpcl.do_callproc.i i64 
    push           1          i64 
    jumplt         #17088     i64 
#17089: 
    setargs                   1 0
    push           &mm_blockpcl.do_callproc.paramlist 
    push           mm_blockpcl.do_callproc.i i64 
    pushptroff                u64 8 -8
    callproc       &mm_blockpcl.evalunit 
#17090: 
    fordown        #17089     i64 1
    opnd           mm_blockpcl.do_callproc.i 
    opnd           1          
#17088: 
    push           mm_blockpcl.do_callproc.isptr i64 
    jumptrue       #17091     i64 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.do_callproc.d u64 
    callfn         &mm_genpcl.genmemaddr_d u64 
    startmult                 
    push           mm_blockpcl.do_callproc.isfn i64 
    jumpfalse      #17092     i64 
    push           48         i64 
    resetmult                 
    jump           #17093     
#17092: 
    push           45         i64 
    endmult                   
#17093: 
    callproc       &pc_libpcl.pcl_gen 
    jump           #17094     
#17091: 
    setargs                   1 0
    push           mm_blockpcl.do_callproc.a u64 
    push           16         
    pushptroff                u64 1 0
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    push           0          u64 
    startmult                 
    push           mm_blockpcl.do_callproc.isfn i64 
    jumpfalse      #17095     i64 
    push           49         i64 
    resetmult                 
    jump           #17096     
#17095: 
    push           46         i64 
    endmult                   
#17096: 
    callproc       &pc_libpcl.pcl_gen 
#17094: 
    push           mm_blockpcl.do_callproc.isfn i64 
    jumpfalse      #17097     i64 
    setargs                   1 0
    startmult                 
    push           mm_blockpcl.do_callproc.p u64 
    push           52         
    pushptroff                i32 1 0
    jumpfalse      #17098     i64 
    push           mm_blockpcl.do_callproc.p u64 
    push           52         
    pushptroff                i32 1 0
    resetmult                 
    jump           #17099     
#17098: 
    push           mm_blockpcl.do_callproc.p u64 
    push           48         
    pushptroff                i32 1 0
    endmult                   
#17099: 
    callproc       &mm_genpcl.setmode 
#17097: 
    push           mm_blockpcl.do_callproc.d u64 
    push           116        
    pushptroff                u8 1 0
    push           1          i64 
    jumple         #17100     i64 
    push           mm_blockpcl.do_callproc.d u64 
    push           116        
    pushptroff                u8 1 0
    pop            mm_blockpcl.do_callproc.nret i64 
    push           &mm_decls.ttmult 
    push           mm_blockpcl.do_callproc.d u64 
    push           72         
    pushptroff                i32 1 0
    pushptroff                u64 8 0
    pop            mm_blockpcl.do_callproc.pmult u64 
#17101: 
    push           1          i64 
    pop            mm_blockpcl.do_callproc.i i64 
    push           mm_blockpcl.do_callproc.nret i64 
    push           1          i64 
    jumplt         #17102     i64 
#17103: 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           mm_blockpcl.do_callproc.pmult u64 
    push           mm_blockpcl.do_callproc.i i64 
    pushptroff                i32 4 -4
    callfn         &mm_lib.getpclmode i64 
    push           28         i64 
    callproc       &pc_libpcl.pcl_gent 
#17104: 
    forup          #17103     i64 1
    opnd           mm_blockpcl.do_callproc.i 
    opnd           mm_blockpcl.do_callproc.nret 
#17102: 
#17100: 
#17105: 
    retproc                   
End


Proc mm_blockpcl.do_print:
    param          mm_blockpcl.do_print.p u64 
    param          mm_blockpcl.do_print.a u64 
    param          mm_blockpcl.do_print.b u64 
    local          mm_blockpcl.do_print.q u64 
    local          mm_blockpcl.do_print.r u64 
    local          mm_blockpcl.do_print.fmt u64 
    local          mm_blockpcl.do_print.m i64 
    local          mm_blockpcl.do_print.fn i64 
    local          mm_blockpcl.do_print.needprintend i64 
    procentry                 
    push           mm_blockpcl.do_print.a u64 
    jumpfalse      #17107     u64 
    push           1          i64 
    pop            mm_blockpcl.do_print.needprintend i64 
    push           &mm_decls.ttbasetype 
    push           mm_blockpcl.do_print.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           9          i64 
    jumpeq         #17108     i64 
    setargs                   2 0
    push           0          u64 
    push           "@dev no ref" u64 
    callproc       &mm_support.gerror 
#17108: 
    push           &mm_decls.ttbasetype 
    push           &mm_decls.tttarget 
    push           mm_blockpcl.do_print.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    pushptroff                i32 4 0
    push           0          i64 
    casejumpeq     #17109     i64 0
    push           16         i64 
    casejumpeq     #17110     i64 0
    push           9          i64 
    casejumpeq     #17111     i64 0
    popstack                  i64 
    jump           #17112     
#17109: 
    setargs                   5 0
    push           0          i64 
    push           0          u64 
    push           0          u64 
    push           mm_blockpcl.do_print.a u64 
    push           2          i64 
    callproc       &mm_genpcl.pcl_gen_sysproc 
    jump           #17113     
#17110: 
    setargs                   5 0
    push           0          i64 
    push           0          u64 
    push           0          u64 
    push           mm_blockpcl.do_print.a u64 
    push           3          i64 
    callproc       &mm_genpcl.pcl_gen_sysproc 
    jump           #17113     
#17111: 
    setargs                   5 0
    push           0          i64 
    push           0          u64 
    push           0          u64 
    push           mm_blockpcl.do_print.a u64 
    push           4          i64 
    callproc       &mm_genpcl.pcl_gen_sysproc 
    jump           #17113     
#17112: 
    setargs                   2 0
    push           0          u64 
    push           "@dev?"    u64 
    callproc       &mm_support.gerror 
#17113: 
    jump           #17114     
#17107: 
    push           1          i64 
    pop            mm_blockpcl.do_print.needprintend i64 
    setargs                   5 0
    push           0          i64 
    push           0          u64 
    push           0          u64 
    push           0          u64 
    push           5          i64 
    callproc       &mm_genpcl.pcl_gen_sysproc 
#17114: 
    push           mm_blockpcl.do_print.b u64 
    pop            mm_blockpcl.do_print.q u64 
    push           mm_blockpcl.do_print.p u64 
    pushptr                   u8 
    push           124        i64 
    casejumpeq     #17115     i64 0
    push           125        i64 
    casejumpeq     #17115     i64 0
    popstack                  i64 
    jump           #17116     
#17115: 
    push           &mm_decls.ttbasetype 
    push           mm_blockpcl.do_print.q u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           9          i64 
    jumpne         #17117     i64 
    push           &mm_decls.ttbasetype 
    push           &mm_decls.tttarget 
    push           mm_blockpcl.do_print.q u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    pushptroff                i32 4 0
    push           16         i64 
    jumpeq         #17118     i64 
#17117: 
    setargs                   2 0
    push           0          u64 
    push           "string expected" u64 
    callproc       &mm_support.gerror 
#17118: 
    setargs                   5 0
    push           0          i64 
    push           0          u64 
    push           0          u64 
    push           mm_blockpcl.do_print.q u64 
    push           6          i64 
    callproc       &mm_genpcl.pcl_gen_sysproc 
    push           mm_blockpcl.do_print.p u64 
    push           32         
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_print.q u64 
    jump           #17119     
#17116: 
#17119: 
    jump           #17120     
#17121: 
    push           mm_blockpcl.do_print.q u64 
    pushptr                   u8 
    push           93         i64 
    casejumpeq     #17122     i64 0
    push           94         i64 
    casejumpeq     #17123     i64 0
    push           95         i64 
    casejumpeq     #17124     i64 0
    popstack                  i64 
    jump           #17125     
#17122: 
    push           mm_blockpcl.do_print.q u64 
    push           24         
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_print.fmt u64 
    push           mm_blockpcl.do_print.q u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_print.r u64 
    push           mm_blockpcl.do_print.r u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_blockpcl.do_print.m i64 
    jump           #17126     
#17123: 
    setargs                   5 0
    push           0          i64 
    push           0          u64 
    push           0          u64 
    push           0          u64 
    push           7          i64 
    callproc       &mm_genpcl.pcl_gen_sysproc 
    push           mm_blockpcl.do_print.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_print.q u64 
    jump           #17120     
    jump           #17126     
#17124: 
    setargs                   5 0
    push           0          i64 
    push           0          u64 
    push           0          u64 
    push           0          u64 
    push           8          i64 
    callproc       &mm_genpcl.pcl_gen_sysproc 
    push           mm_blockpcl.do_print.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_print.q u64 
    jump           #17120     
    jump           #17126     
#17125: 
    push           0          u64 
    pop            mm_blockpcl.do_print.fmt u64 
    push           mm_blockpcl.do_print.q u64 
    pop            mm_blockpcl.do_print.r u64 
    push           mm_blockpcl.do_print.q u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_blockpcl.do_print.m i64 
#17126: 
    push           &mm_decls.ttbasetype 
    push           mm_blockpcl.do_print.m i64 
    pushptroff                i32 4 0
    switch         #17127     1 13
    opnd           #17128     
#17127: 
    switchlabel    #17129     
    switchlabel    #17130     
    switchlabel    #17131     
    switchlabel    #17132     
    switchlabel    #17133     
    switchlabel    #17134     
    switchlabel    #17135     
    switchlabel    #17128     
    switchlabel    #17136     
    switchlabel    #17128     
    switchlabel    #17137     
    switchlabel    #17138     
    switchlabel    #17139     
    endswitch                 
#17132: 
    push           9          i64 
    pop            mm_blockpcl.do_print.fn i64 
    push           mm_blockpcl.do_print.fmt u64 
    jumptrue       #17140     u64 
    push           10         i64 
    pop            mm_blockpcl.do_print.fn i64 
#17140: 
    jump           #17141     
#17130: 
    push           11         i64 
    pop            mm_blockpcl.do_print.fn i64 
    jump           #17141     
#17134: 
    push           13         i64 
    pop            mm_blockpcl.do_print.fn i64 
    jump           #17141     
#17135: 
    push           12         i64 
    pop            mm_blockpcl.do_print.fn i64 
    jump           #17141     
#17133: 
    push           14         i64 
    pop            mm_blockpcl.do_print.fn i64 
    jump           #17141     
#17131: 
    push           15         i64 
    pop            mm_blockpcl.do_print.fn i64 
    jump           #17141     
#17136: 
    push           &mm_decls.tttarget 
    push           mm_blockpcl.do_print.m i64 
    pushptroff                i32 4 0
    push           16         i64 
    jumpeq         #17142     i64 
    push           &mm_decls.tttarget 
    push           mm_blockpcl.do_print.m i64 
    pushptroff                i32 4 0
    push           11         i64 
    jumpne         #17143     i64 
    push           &mm_decls.tttarget 
    push           &mm_decls.tttarget 
    push           mm_blockpcl.do_print.m i64 
    pushptroff                i32 4 0
    pushptroff                i32 4 0
    push           16         i64 
    jumpne         #17143     i64 
#17142: 
    push           16         i64 
    pop            mm_blockpcl.do_print.fn i64 
    push           mm_blockpcl.do_print.fmt u64 
    jumptrue       #17144     u64 
    push           17         i64 
    pop            mm_blockpcl.do_print.fn i64 
#17144: 
    jump           #17145     
#17143: 
    push           19         i64 
    pop            mm_blockpcl.do_print.fn i64 
    push           mm_blockpcl.do_print.fmt u64 
    jumptrue       #17146     u64 
    push           20         i64 
    pop            mm_blockpcl.do_print.fn i64 
#17146: 
#17145: 
    jump           #17141     
#17137: 
    setargs                   2 0
    push           0          u64 
    push           "PRINTARRAY" u64 
    callproc       &mm_support.gerror 
    push           mm_blockpcl.do_print.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_print.q u64 
    jump           #17141     
#17139: 
    setargs                   2 0
    push           0          u64 
    push           "PRINTRECORD" u64 
    callproc       &mm_support.gerror 
    jump           #17141     
#17138: 
    push           &mm_decls.tttarget 
    push           mm_blockpcl.do_print.m i64 
    pushptroff                i32 4 0
    push           16         i64 
    jumpne         #17147     i64 
    push           18         i64 
    pop            mm_blockpcl.do_print.fn i64 
    jump           #17148     
#17147: 
    setargs                   2 0
    push           0          u64 
    push           "PRINTSLICE" u64 
    callproc       &mm_support.gerror 
#17148: 
    jump           #17141     
#17129: 
    push           21         i64 
    pop            mm_blockpcl.do_print.fn i64 
    jump           #17141     
#17128: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           1          i64 
    push           mm_blockpcl.do_print.m i64 
    callfn         &mm_lib.strmode u64 
    push           "PRINT/T=#" u64 
    callproc       &mm_support.gerror_s 
#17141: 
    push           mm_blockpcl.do_print.fn i64 
    push           10         i64 
    casejumpeq     #17149     i64 0
    push           17         i64 
    casejumpeq     #17149     i64 0
    push           20         i64 
    casejumpeq     #17149     i64 0
    popstack                  i64 
    jump           #17150     
#17149: 
    setargs                   5 0
    push           0          i64 
    push           0          u64 
    push           0          u64 
    push           mm_blockpcl.do_print.r u64 
    push           mm_blockpcl.do_print.fn i64 
    callproc       &mm_genpcl.pcl_gen_sysproc 
    jump           #17151     
#17150: 
    setargs                   5 0
    push           0          i64 
    push           0          u64 
    startmult                 
    push           mm_blockpcl.do_print.fmt u64 
    jumpfalse      #17152     u64 
    push           mm_blockpcl.do_print.fmt u64 
    resetmult                 
    jump           #17153     
#17152: 
    push           mm_genpcl.pzero u64 
    endmult                   
#17153: 
    push           mm_blockpcl.do_print.r u64 
    push           mm_blockpcl.do_print.fn i64 
    callproc       &mm_genpcl.pcl_gen_sysproc 
#17151: 
    push           mm_blockpcl.do_print.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_print.q u64 
#17120: 
    push           mm_blockpcl.do_print.q u64 
    jumptrue       #17121     u64 
#17154: 
    push           mm_blockpcl.do_print.p u64 
    pushptr                   u8 
    push           123        i64 
    casejumpeq     #17155     i64 0
    push           125        i64 
    casejumpeq     #17155     i64 0
    popstack                  i64 
    jump           #17156     
#17155: 
    setargs                   5 0
    push           0          i64 
    push           0          u64 
    push           0          u64 
    push           0          u64 
    push           22         i64 
    callproc       &mm_genpcl.pcl_gen_sysproc 
    jump           #17157     
#17156: 
#17157: 
    push           mm_blockpcl.do_print.needprintend i64 
    jumpfalse      #17158     i64 
    setargs                   5 0
    push           0          i64 
    push           0          u64 
    push           0          u64 
    push           0          u64 
    push           23         i64 
    callproc       &mm_genpcl.pcl_gen_sysproc 
#17158: 
#17159: 
    retproc                   
End


Proc mm_blockpcl.do_incr:
    param          mm_blockpcl.do_incr.p u64 
    param          mm_blockpcl.do_incr.a u64 
    procentry                 
    setargs                   1 0
    push           mm_blockpcl.do_incr.a u64 
    callproc       &mm_blockpcl.evallv 
    setargs                   2 0
    push           0          u64 
    push           mm_blockpcl.do_incr.p u64 
    push           60         
    pushptroff                u8 1 0
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.do_incr.a u64 
    callproc       &mm_genpcl.setmode_u 
    setargs                   1 0
    push           mm_blockpcl.do_incr.a u64 
    push           48         
    pushptroff                i32 1 0
    callproc       &mm_blockpcl.setincrstep 
#17161: 
    retproc                   
End


Proc mm_blockpcl.setincrstep:
    param          mm_blockpcl.setincrstep.m i64 
    procentry                 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_libpcl.pcl_setincr 
    push           &mm_decls.ttisref 
    push           mm_blockpcl.setincrstep.m i64 
    pushptroff                u8 1 0
    jumpfalse      #17163     i64 
    setargs                   1 0
    push           &mm_decls.ttsize 
    push           &mm_decls.tttarget 
    push           mm_blockpcl.setincrstep.m i64 
    pushptroff                i32 4 0
    pushptroff                i32 4 0
    callproc       &pc_libpcl.pcl_setincr 
#17163: 
#17164: 
    retproc                   
End


Proc mm_blockpcl.do_incrload:
    param          mm_blockpcl.do_incrload.p u64 
    param          mm_blockpcl.do_incrload.a u64 
    procentry                 
    setargs                   1 0
    push           mm_blockpcl.do_incrload.a u64 
    callproc       &mm_blockpcl.evallv 
    setargs                   2 0
    push           0          u64 
    push           mm_blockpcl.do_incrload.p u64 
    push           60         
    pushptroff                u8 1 0
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.do_incrload.a u64 
    callproc       &mm_genpcl.setmode_u 
    setargs                   1 0
    push           mm_blockpcl.do_incrload.a u64 
    push           48         
    pushptroff                i32 1 0
    callproc       &mm_blockpcl.setincrstep 
#17166: 
    retproc                   
End


Proc mm_blockpcl.do_for:
    param          mm_blockpcl.do_for.p u64 
    param          mm_blockpcl.do_for.pindex u64 
    param          mm_blockpcl.do_for.pfrom u64 
    param          mm_blockpcl.do_for.pbody u64 
    param          mm_blockpcl.do_for.down i64 
    local          mm_blockpcl.do_for.pto u64 
    local          mm_blockpcl.do_for.pstep u64 
    local          mm_blockpcl.do_for.pelse u64 
    local          mm_blockpcl.do_for.px u64 
    local          mm_blockpcl.do_for.plimit u64 
    local          mm_blockpcl.do_for.ptoinit u64 
    local          mm_blockpcl.do_for.lab_a i64 
    local          mm_blockpcl.do_for.lab_b i64 
    local          mm_blockpcl.do_for.lab_c i64 
    local          mm_blockpcl.do_for.lab_d i64 
    local          mm_blockpcl.do_for.lab_e i64 
    local          mm_blockpcl.do_for.a i64 
    local          mm_blockpcl.do_for.b i64 
    local          mm_blockpcl.do_for.stepx i64 
    local          mm_blockpcl.do_for.d u64 
    procentry                 
    push           mm_blockpcl.do_for.pfrom u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_for.pto u64 
    push           mm_blockpcl.do_for.pto u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_for.pstep u64 
    push           mm_blockpcl.do_for.pbody u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_for.pelse u64 
    push           mm_blockpcl.do_for.pindex u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_for.ptoinit u64 
    push           mm_blockpcl.do_for.pto u64 
    pushptr                   u8 
    push           57         i64 
    jumpne         #17168     i64 
    push           mm_blockpcl.do_for.pto u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_for.px u64 
    push           mm_blockpcl.do_for.px u64 
    pushptr                   u8 
    push           3          i64 
    jumpne         #17169     i64 
    push           mm_blockpcl.do_for.px u64 
    push           16         
    pushptroff                u64 1 0
    store          mm_blockpcl.do_for.d u64 
    push           78         
    pushptroff                u8 1 0
    push           13         i64 
    jumpne         #17169     i64 
    push           mm_blockpcl.do_for.d u64 
    push           104        
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #17169     i64 
    setargs                   2 0
    push           0          u64 
    push           "Possibly using &param as for-loop limit" u64 
    callproc       &mm_support.gerror 
#17169: 
#17168: 
    setargs                   0 0
    callfn         &mm_genpcl.definelabel i64 
    pop            mm_blockpcl.do_for.lab_a i64 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_for.lab_b i64 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_for.lab_c i64 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_for.lab_d i64 
    push           mm_blockpcl.do_for.pelse u64 
    jumpfalse      #17170     u64 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_for.lab_e i64 
    jump           #17171     
#17170: 
    push           mm_blockpcl.do_for.lab_d i64 
    pop            mm_blockpcl.do_for.lab_e i64 
#17171: 
    setargs                   4 0
    push           mm_blockpcl.do_for.lab_d i64 
    push           mm_blockpcl.do_for.lab_c i64 
    push           mm_blockpcl.do_for.lab_b i64 
    push           mm_blockpcl.do_for.lab_a i64 
    callproc       &mm_genpcl.stacklooplabels 
    setargs                   1 0
    push           mm_blockpcl.do_for.pfrom u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.do_for.pindex u64 
    callfn         &mm_genpcl.genmem_u u64 
    push           23         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.do_for.pindex u64 
    callproc       &mm_genpcl.setmode_u 
    push           mm_blockpcl.do_for.ptoinit u64 
    jumpfalse      #17172     u64 
    push           0          i64 
    push           mm_blockpcl.do_for.ptoinit u64 
    push           59         
    popptroff                 u8 1 0
    setargs                   1 0
    push           mm_blockpcl.do_for.ptoinit u64 
    callproc       &mm_blockpcl.evalunit 
#17172: 
    push           mm_blockpcl.do_for.pfrom u64 
    pushptr                   u8 
    push           1          i64 
    jumpne         #17173     i64 
    push           mm_blockpcl.do_for.pto u64 
    pushptr                   u8 
    push           1          i64 
    jumpne         #17173     i64 
    push           mm_blockpcl.do_for.pfrom u64 
    push           16         
    pushptroff                i64 1 0
    pop            mm_blockpcl.do_for.a i64 
    push           mm_blockpcl.do_for.pto u64 
    push           16         
    pushptroff                i64 1 0
    pop            mm_blockpcl.do_for.b i64 
    push           mm_blockpcl.do_for.down i64 
    jumpfalse      #17174     i64 
    push           mm_blockpcl.do_for.a i64 
    push           mm_blockpcl.do_for.b i64 
    jumpge         #17175     i64 
#17174: 
    push           mm_blockpcl.do_for.down i64 
    jumptrue       #17176     i64 
    push           mm_blockpcl.do_for.a i64 
    push           mm_blockpcl.do_for.b i64 
    jumpgt         #17176     i64 
#17175: 
    jump           #17177     
#17176: 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.do_for.lab_e i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    push           51         i64 
    callproc       &pc_libpcl.pcl_gen 
#17177: 
    jump           #17178     
#17173: 
    push           mm_blockpcl.do_for.pfrom u64 
    pushptr                   u8 
    push           1          i64 
    jumpne         #17179     i64 
    setargs                   1 0
    push           mm_blockpcl.do_for.pto u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   1 0
    push           mm_blockpcl.do_for.pfrom u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.do_for.lab_e i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    startmult                 
    push           mm_blockpcl.do_for.down i64 
    jumpfalse      #17180     i64 
    push           58         i64 
    resetmult                 
    jump           #17181     
#17180: 
    push           55         i64 
    endmult                   
#17181: 
    callproc       &pc_libpcl.pcl_gen 
    jump           #17182     
#17179: 
    setargs                   1 0
    push           mm_blockpcl.do_for.pindex u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   1 0
    push           mm_blockpcl.do_for.pto u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.do_for.lab_e i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    startmult                 
    push           mm_blockpcl.do_for.down i64 
    jumpfalse      #17183     i64 
    push           55         i64 
    resetmult                 
    jump           #17184     
#17183: 
    push           58         i64 
    endmult                   
#17184: 
    callproc       &pc_libpcl.pcl_gen 
#17182: 
    setargs                   1 0
    push           mm_blockpcl.do_for.pindex u64 
    callproc       &mm_genpcl.setmode_u 
#17178: 
    setargs                   1 0
    push           mm_blockpcl.do_for.lab_b i64 
    callproc       &mm_genpcl.definefwdlabel 
    setargs                   1 0
    push           mm_blockpcl.do_for.pbody u64 
    callproc       &mm_blockpcl.evalblock 
    setargs                   1 0
    push           mm_blockpcl.do_for.lab_c i64 
    callproc       &mm_genpcl.definefwdlabel 
    push           mm_blockpcl.do_for.pstep u64 
    jumpfalse      #17185     u64 
    push           mm_blockpcl.do_for.pstep u64 
    pushptr                   u8 
    push           1          i64 
    jumpeq         #17186     i64 
    setargs                   2 0
    push           0          u64 
    push           "for/step non-const not ready" u64 
    callproc       &mm_support.gerror 
#17186: 
    push           mm_blockpcl.do_for.pstep u64 
    push           16         
    pushptroff                i64 1 0
    pop            mm_blockpcl.do_for.stepx i64 
    push           mm_blockpcl.do_for.stepx i64 
    push           0          i64 
    jumpgt         #17187     i64 
    setargs                   2 0
    push           0          u64 
    push           "Bad for-step" u64 
    callproc       &mm_support.gerror 
#17187: 
    setargs                   3 0
    setargs                   1 0
    push           mm_blockpcl.do_for.lab_b i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    push           mm_blockpcl.do_for.stepx i64 
    startmult                 
    push           mm_blockpcl.do_for.down i64 
    jumpfalse      #17188     i64 
    push           82         i64 
    resetmult                 
    jump           #17189     
#17188: 
    push           81         i64 
    endmult                   
#17189: 
    callproc       &pc_libpcl.pcl_genx 
    setargs                   1 0
    push           mm_blockpcl.do_for.pindex u64 
    callproc       &mm_genpcl.setmode_u 
    jump           #17190     
#17185: 
    setargs                   3 0
    setargs                   1 0
    push           mm_blockpcl.do_for.lab_b i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    push           1          i64 
    startmult                 
    push           mm_blockpcl.do_for.down i64 
    jumpfalse      #17191     i64 
    push           82         i64 
    resetmult                 
    jump           #17192     
#17191: 
    push           81         i64 
    endmult                   
#17192: 
    callproc       &pc_libpcl.pcl_genx 
    setargs                   1 0
    push           mm_blockpcl.do_for.pindex u64 
    callproc       &mm_genpcl.setmode_u 
#17190: 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.do_for.pindex u64 
    callfn         &mm_genpcl.genmem_u u64 
    push           27         i64 
    callproc       &pc_libpcl.pcl_gen 
    push           mm_blockpcl.do_for.pto u64 
    pushptr                   u8 
    push           1          i64 
    jumpne         #17193     i64 
    setargs                   2 0
    setargs                   2 0
    push           9          i64 
    push           mm_blockpcl.do_for.pto u64 
    push           16         
    pushptroff                i64 1 0
    callfn         &pc_libpcl.pcl_genint u64 
    push           27         i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #17194     
#17193: 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.do_for.pto u64 
    callfn         &mm_genpcl.genmem_u u64 
    push           27         i64 
    callproc       &pc_libpcl.pcl_gen 
#17194: 
    push           mm_blockpcl.do_for.pelse u64 
    jumpfalse      #17195     u64 
    setargs                   1 0
    push           mm_blockpcl.do_for.lab_e i64 
    callproc       &mm_genpcl.definefwdlabel 
    setargs                   1 0
    push           mm_blockpcl.do_for.pelse u64 
    callproc       &mm_blockpcl.evalblock 
#17195: 
    setargs                   1 0
    push           mm_blockpcl.do_for.lab_d i64 
    callproc       &mm_genpcl.definefwdlabel 
    push           &mm_genpcl.loopindex 
    decr                      i64 1
#17196: 
    retproc                   
End


Proc mm_blockpcl.do_forall:
    param          mm_blockpcl.do_forall.p u64 
    param          mm_blockpcl.do_forall.pindex u64 
    param          mm_blockpcl.do_forall.plist u64 
    param          mm_blockpcl.do_forall.pbody u64 
    param          mm_blockpcl.do_forall.down i64 
    local          mm_blockpcl.do_forall.plocal u64 
    local          mm_blockpcl.do_forall.pfrom u64 
    local          mm_blockpcl.do_forall.pto u64 
    local          mm_blockpcl.do_forall.pelse u64 
    local          mm_blockpcl.do_forall.px u64 
    local          mm_blockpcl.do_forall.plimit u64 
    local          mm_blockpcl.do_forall.passign u64 
    local          mm_blockpcl.do_forall.lab_a i64 
    local          mm_blockpcl.do_forall.lab_b i64 
    local          mm_blockpcl.do_forall.lab_c i64 
    local          mm_blockpcl.do_forall.lab_d i64 
    local          mm_blockpcl.do_forall.lab_e i64 
    local          mm_blockpcl.do_forall.a i64 
    local          mm_blockpcl.do_forall.b i64 
    local          mm_blockpcl.do_forall.stepx i64 
    procentry                 
    push           mm_blockpcl.do_forall.pindex u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_forall.plocal u64 
    push           mm_blockpcl.do_forall.plocal u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_forall.pfrom u64 
    push           mm_blockpcl.do_forall.pfrom u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_forall.pto u64 
    push           mm_blockpcl.do_forall.plist u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_forall.passign u64 
    push           mm_blockpcl.do_forall.pbody u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_forall.pelse u64 
    setargs                   0 0
    callfn         &mm_genpcl.definelabel i64 
    pop            mm_blockpcl.do_forall.lab_a i64 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_forall.lab_b i64 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_forall.lab_c i64 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_forall.lab_d i64 
    push           mm_blockpcl.do_forall.pelse u64 
    jumpfalse      #17198     u64 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_forall.lab_e i64 
    jump           #17199     
#17198: 
    push           mm_blockpcl.do_forall.lab_d i64 
    pop            mm_blockpcl.do_forall.lab_e i64 
#17199: 
    setargs                   4 0
    push           mm_blockpcl.do_forall.lab_d i64 
    push           mm_blockpcl.do_forall.lab_c i64 
    push           mm_blockpcl.do_forall.lab_b i64 
    push           mm_blockpcl.do_forall.lab_a i64 
    callproc       &mm_genpcl.stacklooplabels 
    setargs                   1 0
    push           mm_blockpcl.do_forall.pfrom u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.do_forall.pindex u64 
    callfn         &mm_genpcl.genmem_u u64 
    push           23         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.do_forall.pindex u64 
    callproc       &mm_genpcl.setmode_u 
    push           mm_blockpcl.do_forall.pfrom u64 
    pushptr                   u8 
    push           1          i64 
    jumpne         #17200     i64 
    push           mm_blockpcl.do_forall.pto u64 
    pushptr                   u8 
    push           1          i64 
    jumpne         #17200     i64 
    push           mm_blockpcl.do_forall.pfrom u64 
    push           16         
    pushptroff                i64 1 0
    pop            mm_blockpcl.do_forall.a i64 
    push           mm_blockpcl.do_forall.pto u64 
    push           16         
    pushptroff                i64 1 0
    pop            mm_blockpcl.do_forall.b i64 
    push           mm_blockpcl.do_forall.down i64 
    jumpfalse      #17201     i64 
    push           mm_blockpcl.do_forall.a i64 
    push           mm_blockpcl.do_forall.b i64 
    jumpge         #17202     i64 
#17201: 
    push           mm_blockpcl.do_forall.down i64 
    jumptrue       #17203     i64 
    push           mm_blockpcl.do_forall.a i64 
    push           mm_blockpcl.do_forall.b i64 
    jumpgt         #17203     i64 
#17202: 
    jump           #17204     
#17203: 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.do_forall.lab_e i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    push           51         i64 
    callproc       &pc_libpcl.pcl_gen 
#17204: 
    jump           #17205     
#17200: 
    push           mm_blockpcl.do_forall.pfrom u64 
    pushptr                   u8 
    push           1          i64 
    jumpne         #17206     i64 
    setargs                   1 0
    push           mm_blockpcl.do_forall.pfrom u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   1 0
    push           mm_blockpcl.do_forall.pto u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.do_forall.lab_e i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    startmult                 
    push           mm_blockpcl.do_forall.down i64 
    jumpfalse      #17207     i64 
    push           58         i64 
    resetmult                 
    jump           #17208     
#17207: 
    push           55         i64 
    endmult                   
#17208: 
    callproc       &pc_libpcl.pcl_gen 
    jump           #17209     
#17206: 
    setargs                   1 0
    push           mm_blockpcl.do_forall.pfrom u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   1 0
    push           mm_blockpcl.do_forall.pto u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.do_forall.lab_e i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    startmult                 
    push           mm_blockpcl.do_forall.down i64 
    jumpfalse      #17210     i64 
    push           55         i64 
    resetmult                 
    jump           #17211     
#17210: 
    push           58         i64 
    endmult                   
#17211: 
    callproc       &pc_libpcl.pcl_gen 
#17209: 
    setargs                   1 0
    push           mm_blockpcl.do_forall.pindex u64 
    callproc       &mm_genpcl.setmode_u 
#17205: 
    setargs                   1 0
    push           mm_blockpcl.do_forall.lab_b i64 
    callproc       &mm_genpcl.definefwdlabel 
    push           0          i64 
    push           mm_blockpcl.do_forall.passign u64 
    push           59         
    popptroff                 u8 1 0
    setargs                   1 0
    push           mm_blockpcl.do_forall.passign u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   1 0
    push           mm_blockpcl.do_forall.pbody u64 
    callproc       &mm_blockpcl.evalblock 
    setargs                   1 0
    push           mm_blockpcl.do_forall.lab_c i64 
    callproc       &mm_genpcl.definefwdlabel 
    setargs                   3 0
    setargs                   1 0
    push           mm_blockpcl.do_forall.lab_b i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    push           1          i64 
    startmult                 
    push           mm_blockpcl.do_forall.down i64 
    jumpfalse      #17212     i64 
    push           82         i64 
    resetmult                 
    jump           #17213     
#17212: 
    push           81         i64 
    endmult                   
#17213: 
    callproc       &pc_libpcl.pcl_genx 
    setargs                   1 0
    push           mm_blockpcl.do_forall.pindex u64 
    callproc       &mm_genpcl.setmode_u 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.do_forall.pindex u64 
    callfn         &mm_genpcl.genmem_u u64 
    push           27         i64 
    callproc       &pc_libpcl.pcl_gen 
    push           mm_blockpcl.do_forall.pto u64 
    pushptr                   u8 
    push           1          i64 
    jumpne         #17214     i64 
    setargs                   2 0
    setargs                   2 0
    push           9          i64 
    push           mm_blockpcl.do_forall.pto u64 
    push           16         
    pushptroff                i64 1 0
    callfn         &pc_libpcl.pcl_genint u64 
    push           27         i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #17215     
#17214: 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.do_forall.pto u64 
    callfn         &mm_genpcl.genmem_u u64 
    push           27         i64 
    callproc       &pc_libpcl.pcl_gen 
#17215: 
    jump           #17216     
    push           mm_blockpcl.do_forall.pelse u64 
    jumpfalse      #17217     u64 
    setargs                   1 0
    push           mm_blockpcl.do_forall.lab_e i64 
    callproc       &mm_genpcl.definefwdlabel 
    setargs                   1 0
    push           mm_blockpcl.do_forall.pelse u64 
    callproc       &mm_blockpcl.evalblock 
#17217: 
    setargs                   1 0
    push           mm_blockpcl.do_forall.lab_d i64 
    callproc       &mm_genpcl.definefwdlabel 
    push           &mm_genpcl.loopindex 
    decr                      i64 1
#17216: 
    retproc                   
End


Proc mm_blockpcl.do_swap:
    param          mm_blockpcl.do_swap.p u64 
    param          mm_blockpcl.do_swap.a u64 
    param          mm_blockpcl.do_swap.b u64 
    procentry                 
    setargs                   1 0
    push           mm_blockpcl.do_swap.a u64 
    callproc       &mm_blockpcl.evallv 
    setargs                   1 0
    push           mm_blockpcl.do_swap.b u64 
    callproc       &mm_blockpcl.evallv 
    setargs                   2 0
    push           0          u64 
    push           83         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.do_swap.a u64 
    callproc       &mm_genpcl.setmode_u 
#17219: 
    retproc                   
End


Proc mm_blockpcl.do_convert:
    param          mm_blockpcl.do_convert.p u64 
    param          mm_blockpcl.do_convert.a u64 
    local          mm_blockpcl.do_convert.opc i64 
    procentry                 
    push           mm_blockpcl.do_convert.p u64 
    pushptr                   u8 
    push           19         i64 
    casejumpeq     #17221     i64 0
    push           21         i64 
    casejumpeq     #17221     i64 0
    popstack                  i64 
    jump           #17222     
#17221: 
    jump           #17223     
#17222: 
    push           mm_blockpcl.do_convert.p u64 
    push           60         
    pushptroff                u8 1 0
    push           182        i64 
    casejumpeq     #17224     i64 0
    push           212        i64 
    casejumpeq     #17225     i64 0
    popstack                  i64 
    jump           #17226     
#17224: 
    setargs                   2 0
    push           0          u64 
    push           "CONV/SOFTCONV" u64 
    callproc       &mm_support.gerror 
    jump           #17227     
#17225: 
    setargs                   2 0
    push           0          u64 
    push           "CONV/ERROR" u64 
    callproc       &mm_support.gerror 
    jump           #17227     
#17226: 
    setargs                   1 0
    push           mm_blockpcl.do_convert.a u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    push           0          u64 
    push           mm_blockpcl.do_convert.p u64 
    push           60         
    pushptroff                u8 1 0
    callproc       &pc_libpcl.pcl_gen 
#17227: 
    setargs                   1 0
    push           mm_blockpcl.do_convert.p u64 
    callproc       &mm_genpcl.setmode_u 
    setargs                   1 0
    setargs                   1 0
    push           mm_blockpcl.do_convert.p u64 
    push           52         
    pushptroff                i32 1 0
    callfn         &mm_lib.getpclmode i64 
    callproc       &pc_libpcl.pcl_setoldtype 
#17223: 
#17228: 
    retproc                   
End


Proc mm_blockpcl.do_dot:
    param          mm_blockpcl.do_dot.pdot u64 
    local          mm_blockpcl.do_dot.offset i64 
    local          mm_blockpcl.do_dot.a u64 
    local          mm_blockpcl.do_dot.pname u64 
    procentry                 
    push           mm_blockpcl.do_dot.pdot u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_dot.a u64 
    push           0          u64 
    pop            mm_blockpcl.do_dot.pname u64 
    setargs                   2 0
    push           &mm_blockpcl.do_dot.pname 
    push           mm_blockpcl.do_dot.a u64 
    callfn         &mm_blockpcl.checkdotchain i64 
    pop            mm_blockpcl.do_dot.offset i64 
    push           &mm_blockpcl.do_dot.offset 
    push           mm_blockpcl.do_dot.pdot u64 
    push           40         
    pushptroff                u32 1 0
    addto                     i64 
    push           mm_blockpcl.do_dot.pname u64 
    pop            mm_blockpcl.do_dot.a u64 
    setargs                   2 0
    push           0          u64 
    push           mm_blockpcl.do_dot.a u64 
    callproc       &mm_blockpcl.evalref 
    push           mm_blockpcl.do_dot.offset i64 
    jumpfalse      #17230     i64 
    setargs                   2 0
    push           9          i64 
    push           mm_blockpcl.do_dot.offset i64 
    callproc       &mm_genpcl.genpushint 
    setargs                   2 0
    push           0          u64 
    push           31         i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #17231     
#17230: 
    setargs                   2 0
    push           0          u64 
    push           34         i64 
    callproc       &pc_libpcl.pcl_gen 
#17231: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_libpcl.pcl_setscale 
    setargs                   1 0
    startmult                 
    push           mm_blockpcl.do_dot.pdot u64 
    push           52         
    pushptroff                i32 1 0
    jumpfalse      #17232     i64 
    push           mm_blockpcl.do_dot.pdot u64 
    push           52         
    pushptroff                i32 1 0
    resetmult                 
    jump           #17233     
#17232: 
    push           mm_blockpcl.do_dot.pdot u64 
    push           48         
    pushptroff                i32 1 0
    endmult                   
#17233: 
    callproc       &mm_genpcl.setmode 
#17234: 
    retproc                   
End


Proc mm_blockpcl.checkdotchain: i64
    param          mm_blockpcl.checkdotchain.p u64 
    param          mm_blockpcl.checkdotchain.pname u64 
    local          mm_blockpcl.checkdotchain.offset i64 
    local          mm_blockpcl.checkdotchain.axmode i64 
    procentry                 
    push           mm_blockpcl.checkdotchain.p u64 
    pushptr                   u8 
    push           51         i64 
    casejumpeq     #17236     i64 0
    popstack                  i64 
    jump           #17237     
#17236: 
    setargs                   2 0
    push           mm_blockpcl.checkdotchain.pname u64 
    push           mm_blockpcl.checkdotchain.p u64 
    push           16         
    pushptroff                u64 1 0
    callfn         &mm_blockpcl.checkdotchain i64 
    pop            mm_blockpcl.checkdotchain.offset i64 
    push           mm_blockpcl.checkdotchain.p u64 
    push           40         
    pushptroff                u32 1 0
    push           mm_blockpcl.checkdotchain.offset i64 
    add                       i64 
    setret                    i64 
    jump           #17238     
    jump           #17239     
#17237: 
    push           mm_blockpcl.checkdotchain.p u64 
    push           mm_blockpcl.checkdotchain.pname u64 
    popptr                    u64 
    push           0          i64 
    setret                    i64 
    jump           #17238     
#17239: 
    push           0          i64 
    setret                    i64 
    jump           #17238     
#17238: 
    retfn                     i64 
End


Proc mm_blockpcl.do_dotref:
    param          mm_blockpcl.do_dotref.pdot u64 
    local          mm_blockpcl.do_dotref.imode i64 
    local          mm_blockpcl.do_dotref.offset i64 
    local          mm_blockpcl.do_dotref.a u64 
    local          mm_blockpcl.do_dotref.pname u64 
    procentry                 
    setargs                   3 0
    push           0          i64 
    push           mm_blockpcl.do_dotref.pdot u64 
    push           48         
    pushptroff                i32 1 0
    push           0          u64 
    callfn         &mm_lib.createrefmode i64 
    pop            mm_blockpcl.do_dotref.imode i64 
    push           mm_blockpcl.do_dotref.pdot u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_dotref.a u64 
    push           0          u64 
    pop            mm_blockpcl.do_dotref.pname u64 
    setargs                   2 0
    push           &mm_blockpcl.do_dotref.pname 
    push           mm_blockpcl.do_dotref.a u64 
    callfn         &mm_blockpcl.checkdotchain i64 
    pop            mm_blockpcl.do_dotref.offset i64 
    push           &mm_blockpcl.do_dotref.offset 
    push           mm_blockpcl.do_dotref.pdot u64 
    push           40         
    pushptroff                u32 1 0
    addto                     i64 
    push           mm_blockpcl.do_dotref.pname u64 
    pop            mm_blockpcl.do_dotref.a u64 
    setargs                   2 0
    push           0          u64 
    push           mm_blockpcl.do_dotref.a u64 
    callproc       &mm_blockpcl.evalref 
    push           mm_blockpcl.do_dotref.offset i64 
    jumpfalse      #17241     i64 
    setargs                   2 0
    push           9          i64 
    push           mm_blockpcl.do_dotref.offset i64 
    callproc       &mm_genpcl.genpushint 
    setargs                   2 0
    push           0          u64 
    push           126        i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_libpcl.pcl_setscale 
#17241: 
    setargs                   1 0
    push           mm_blockpcl.do_dotref.imode i64 
    callproc       &mm_genpcl.setmode 
#17242: 
    retproc                   
End


Proc mm_blockpcl.do_storedot:
    param          mm_blockpcl.do_storedot.pdot u64 
    param          mm_blockpcl.do_storedot.pfield u64 
    param          mm_blockpcl.do_storedot.rhs u64 
    local          mm_blockpcl.do_storedot.offset i64 
    local          mm_blockpcl.do_storedot.a u64 
    local          mm_blockpcl.do_storedot.pname u64 
    procentry                 
    setargs                   1 0
    push           mm_blockpcl.do_storedot.rhs u64 
    callproc       &mm_blockpcl.evalunit 
    push           mm_blockpcl.do_storedot.pdot u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_storedot.a u64 
    push           0          u64 
    pop            mm_blockpcl.do_storedot.pname u64 
    setargs                   2 0
    push           &mm_blockpcl.do_storedot.pname 
    push           mm_blockpcl.do_storedot.a u64 
    callfn         &mm_blockpcl.checkdotchain i64 
    pop            mm_blockpcl.do_storedot.offset i64 
    push           &mm_blockpcl.do_storedot.offset 
    push           mm_blockpcl.do_storedot.pdot u64 
    push           40         
    pushptroff                u32 1 0
    addto                     i64 
    push           mm_blockpcl.do_storedot.pname u64 
    pop            mm_blockpcl.do_storedot.a u64 
    setargs                   2 0
    push           0          u64 
    push           mm_blockpcl.do_storedot.a u64 
    callproc       &mm_blockpcl.evalref 
    setargs                   2 0
    push           9          i64 
    push           mm_blockpcl.do_storedot.offset i64 
    callproc       &mm_genpcl.genpushint 
    setargs                   2 0
    push           0          u64 
    startmult                 
    push           mm_blockpcl.do_storedot.pdot u64 
    push           59         
    pushptroff                u8 1 0
    jumpfalse      #17244     i64 
    push           33         i64 
    resetmult                 
    jump           #17245     
#17244: 
    push           32         i64 
    endmult                   
#17245: 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_libpcl.pcl_setscale 
    setargs                   1 0
    push           mm_blockpcl.do_storedot.pdot u64 
    callproc       &mm_genpcl.setmode_u 
#17246: 
    retproc                   
End


Proc mm_blockpcl.do_index:
    param          mm_blockpcl.do_index.p u64 
    param          mm_blockpcl.do_index.parray u64 
    param          mm_blockpcl.do_index.pindex u64 
    local          mm_blockpcl.do_index.addoffset i64 
    local          mm_blockpcl.do_index.scale i64 
    procentry                 
    push           &mm_decls.ttbasetype 
    push           mm_blockpcl.do_index.p u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           11         i64 
    setjumpeq      #17248     i64 
    push           14         i64 
    setjumpne      #17249     i64 
#17248: 
    setargs                   2 0
    push           mm_blockpcl.do_index.pindex u64 
    push           mm_blockpcl.do_index.parray u64 
    callproc       &mm_blockpcl.do_indexref 
    jump           #17250     
#17249: 
    setargs                   1 0
    push           &mm_blockpcl.do_index.pindex 
    callfn         &mm_blockpcl.getindexoffset i64 
    pop            mm_blockpcl.do_index.addoffset i64 
    setargs                   1 0
    push           mm_blockpcl.do_index.parray u64 
    callproc       &mm_blockpcl.evalarray 
    setargs                   1 0
    push           mm_blockpcl.do_index.pindex u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    push           0          u64 
    push           31         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    startmult                 
    push           mm_blockpcl.do_index.p u64 
    push           52         
    pushptroff                i32 1 0
    jumpfalse      #17251     i64 
    push           mm_blockpcl.do_index.p u64 
    push           52         
    pushptroff                i32 1 0
    resetmult                 
    jump           #17252     
#17251: 
    push           mm_blockpcl.do_index.p u64 
    push           48         
    pushptroff                i32 1 0
    endmult                   
#17252: 
    callproc       &mm_genpcl.setmode 
    setargs                   1 0
    push           &mm_decls.ttsize 
    push           &mm_decls.tttarget 
    push           mm_blockpcl.do_index.parray u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    pushptroff                i32 4 0
    store          mm_blockpcl.do_index.scale i64 
    callproc       &pc_libpcl.pcl_setscale 
    setargs                   1 0
    push           &mm_decls.ttlower 
    push           mm_blockpcl.do_index.parray u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    neg                       i64 
    push           mm_blockpcl.do_index.scale i64 
    mul                       i64 
    push           mm_blockpcl.do_index.addoffset i64 
    push           mm_blockpcl.do_index.scale i64 
    mul                       i64 
    add                       i64 
    callproc       &pc_libpcl.pcl_setoffset 
#17250: 
    retproc                   
End


Proc mm_blockpcl.do_storeindex:
    param          mm_blockpcl.do_storeindex.p u64 
    param          mm_blockpcl.do_storeindex.parray u64 
    param          mm_blockpcl.do_storeindex.pindex u64 
    param          mm_blockpcl.do_storeindex.rhs u64 
    local          mm_blockpcl.do_storeindex.addoffset i64 
    local          mm_blockpcl.do_storeindex.scale i64 
    procentry                 
    setargs                   1 0
    push           &mm_blockpcl.do_storeindex.pindex 
    callfn         &mm_blockpcl.getindexoffset i64 
    pop            mm_blockpcl.do_storeindex.addoffset i64 
    setargs                   1 0
    push           mm_blockpcl.do_storeindex.rhs u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   1 0
    push           mm_blockpcl.do_storeindex.parray u64 
    callproc       &mm_blockpcl.evalarray 
    setargs                   1 0
    push           mm_blockpcl.do_storeindex.pindex u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    push           0          u64 
    startmult                 
    push           mm_blockpcl.do_storeindex.p u64 
    push           59         
    pushptroff                u8 1 0
    jumpfalse      #17254     i64 
    push           33         i64 
    resetmult                 
    jump           #17255     
#17254: 
    push           32         i64 
    endmult                   
#17255: 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.do_storeindex.p u64 
    push           16         
    pushptroff                u64 1 0
    callproc       &mm_genpcl.setmode_u 
    setargs                   1 0
    push           &mm_decls.ttsize 
    push           &mm_decls.tttarget 
    push           mm_blockpcl.do_storeindex.parray u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    pushptroff                i32 4 0
    store          mm_blockpcl.do_storeindex.scale i64 
    callproc       &pc_libpcl.pcl_setscale 
    setargs                   1 0
    push           &mm_decls.ttlower 
    push           mm_blockpcl.do_storeindex.parray u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    neg                       i64 
    push           mm_blockpcl.do_storeindex.scale i64 
    mul                       i64 
    push           mm_blockpcl.do_storeindex.addoffset i64 
    push           mm_blockpcl.do_storeindex.scale i64 
    mul                       i64 
    add                       i64 
    callproc       &pc_libpcl.pcl_setoffset 
#17256: 
    retproc                   
End


Proc mm_blockpcl.do_indexref:
    param          mm_blockpcl.do_indexref.parray u64 
    param          mm_blockpcl.do_indexref.pindex u64 
    local          mm_blockpcl.do_indexref.addoffset i64 
    local          mm_blockpcl.do_indexref.scale i64 
    procentry                 
    setargs                   1 0
    push           &mm_blockpcl.do_indexref.pindex 
    callfn         &mm_blockpcl.getindexoffset i64 
    pop            mm_blockpcl.do_indexref.addoffset i64 
    setargs                   1 0
    push           mm_blockpcl.do_indexref.parray u64 
    callproc       &mm_blockpcl.evalarray 
    setargs                   1 0
    push           mm_blockpcl.do_indexref.pindex u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    push           0          u64 
    push           126        i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           &mm_decls.tttarget 
    push           mm_blockpcl.do_indexref.parray u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    callproc       &mm_genpcl.setmode 
    setargs                   1 0
    push           &mm_decls.ttsize 
    push           &mm_decls.tttarget 
    push           mm_blockpcl.do_indexref.parray u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    pushptroff                i32 4 0
    store          mm_blockpcl.do_indexref.scale i64 
    callproc       &pc_libpcl.pcl_setscale 
    setargs                   1 0
    push           &mm_decls.ttlower 
    push           mm_blockpcl.do_indexref.parray u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    neg                       i64 
    push           mm_blockpcl.do_indexref.scale i64 
    mul                       i64 
    push           mm_blockpcl.do_indexref.addoffset i64 
    push           mm_blockpcl.do_indexref.scale i64 
    mul                       i64 
    add                       i64 
    callproc       &pc_libpcl.pcl_setoffset 
#17258: 
    retproc                   
End


Proc mm_blockpcl.getindexoffset: i64
    param          mm_blockpcl.getindexoffset.pindex u64 
    local          mm_blockpcl.getindexoffset.offset i64 
    local          mm_blockpcl.getindexoffset.addoffset i64 
    procentry                 
    push           0          i64 
    pop            mm_blockpcl.getindexoffset.addoffset i64 
    push           mm_blockpcl.getindexoffset.pindex u64 
    pushptr                   u64 
    pushptr                   u8 
    push           36         i64 
    jumpne         #17260     i64 
    push           mm_blockpcl.getindexoffset.pindex u64 
    pushptr                   u64 
    push           60         
    pushptroff                u8 1 0
    push           102        i64 
    setjumpeq      #17261     i64 
    push           103        i64 
    setjumpne      #17260     i64 
#17261: 
    push           mm_blockpcl.getindexoffset.pindex u64 
    pushptr                   u64 
    push           24         
    pushptroff                u64 1 0
    pushptr                   u8 
    push           1          i64 
    jumpne         #17262     i64 
    startmult                 
    push           mm_blockpcl.getindexoffset.pindex u64 
    pushptr                   u64 
    push           60         
    pushptroff                u8 1 0
    push           102        i64 
    jumpne         #17263     i64 
    push           mm_blockpcl.getindexoffset.pindex u64 
    pushptr                   u64 
    push           24         
    pushptroff                u64 1 0
    push           16         
    pushptroff                i64 1 0
    resetmult                 
    jump           #17264     
#17263: 
    push           mm_blockpcl.getindexoffset.pindex u64 
    pushptr                   u64 
    push           24         
    pushptroff                u64 1 0
    push           16         
    pushptroff                i64 1 0
    neg                       i64 
    endmult                   
#17264: 
    pop            mm_blockpcl.getindexoffset.addoffset i64 
    push           mm_blockpcl.getindexoffset.pindex u64 
    pushptr                   u64 
    push           16         
    pushptroff                u64 1 0
    push           mm_blockpcl.getindexoffset.pindex u64 
    popptr                    u64 
#17262: 
#17260: 
    push           mm_blockpcl.getindexoffset.addoffset i64 
    setret                    i64 
    jump           #17265     
#17265: 
    retfn                     i64 
End


Proc mm_blockpcl.do_switch:
    param          mm_blockpcl.do_switch.p u64 
    param          mm_blockpcl.do_switch.pindex u64 
    param          mm_blockpcl.do_switch.pwhenthen u64 
    param          mm_blockpcl.do_switch.pelse u64 
    param          mm_blockpcl.do_switch.loopsw i64 
    param          mm_blockpcl.do_switch.isref i64 
    local          mm_blockpcl.do_switch.minlab i64 
    local          mm_blockpcl.do_switch.maxlab i64 
    local          mm_blockpcl.do_switch.n i64 
    local          mm_blockpcl.do_switch.iscomplex i64 
    local          mm_blockpcl.do_switch.i i64 
    local          mm_blockpcl.do_switch.lab_a i64 
    local          mm_blockpcl.do_switch.lab_b i64 
    local          mm_blockpcl.do_switch.lab_d i64 
    local          mm_blockpcl.do_switch.labjump i64 
    local          mm_blockpcl.do_switch.elselab i64 
    local          mm_blockpcl.do_switch.labstmt i64 
    local          mm_blockpcl.do_switch.ax i64 
    local          mm_blockpcl.do_switch.bx i64 
    local          mm_blockpcl.do_switch.ismult i64 
    local          mm_blockpcl.do_switch.labels block:8008 
    local          mm_blockpcl.do_switch.w u64 
    local          mm_blockpcl.do_switch.wt u64 
    procentry                 
    startmult                 
    push           mm_blockpcl.do_switch.p u64 
    push           48         
    pushptroff                i32 1 0
    push           0          i64 
    jumpeq         #17267     i64 
    push           mm_blockpcl.do_switch.loopsw i64 
    jumptrue       #17267     i64 
    push           1          
    resetmult                 
    jump           #17268     
#17267: 
    push           0          
    endmult                   
#17268: 
    pop            mm_blockpcl.do_switch.ismult i64 
    push           1000000    i64 
    pop            mm_blockpcl.do_switch.minlab i64 
    push           -1000000   i64 
    pop            mm_blockpcl.do_switch.maxlab i64 
    push           0          i64 
    pop            mm_blockpcl.do_switch.n i64 
    push           0          i64 
    pop            mm_blockpcl.do_switch.iscomplex i64 
    push           mm_blockpcl.do_switch.pwhenthen u64 
    pop            mm_blockpcl.do_switch.wt u64 
    jump           #17269     
#17270: 
    push           mm_blockpcl.do_switch.wt u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_switch.w u64 
    jump           #17271     
#17272: 
    push           mm_blockpcl.do_switch.w u64 
    pushptr                   u8 
    push           20         i64 
    casejumpeq     #17273     i64 0
    push           1          i64 
    casejumpeq     #17274     i64 0
    popstack                  i64 
    jump           #17275     
#17273: 
    push           mm_blockpcl.do_switch.w u64 
    push           16         
    pushptroff                u64 1 0
    push           16         
    pushptroff                i64 1 0
    pop            mm_blockpcl.do_switch.ax i64 
    push           mm_blockpcl.do_switch.w u64 
    push           24         
    pushptroff                u64 1 0
    push           16         
    pushptroff                i64 1 0
    pop            mm_blockpcl.do_switch.bx i64 
!dorange::
#17276: 
#17277: 
    push           mm_blockpcl.do_switch.ax i64 
    pop            mm_blockpcl.do_switch.i i64 
    push           mm_blockpcl.do_switch.i i64 
    push           mm_blockpcl.do_switch.bx i64 
    jumpgt         #17278     i64 
#17279: 
    push           mm_blockpcl.do_switch.i i64 
    push           mm_blockpcl.do_switch.minlab i64 
    min                       i64 
    pop            mm_blockpcl.do_switch.minlab i64 
    push           mm_blockpcl.do_switch.i i64 
    push           mm_blockpcl.do_switch.maxlab i64 
    max                       i64 
    pop            mm_blockpcl.do_switch.maxlab i64 
#17280: 
    forup          #17279     i64 1
    opnd           mm_blockpcl.do_switch.i 
    opnd           mm_blockpcl.do_switch.bx 
#17278: 
    jump           #17281     
#17274: 
    push           mm_blockpcl.do_switch.w u64 
    push           16         
    pushptroff                i64 1 0
    store          mm_blockpcl.do_switch.bx i64 
    pop            mm_blockpcl.do_switch.ax i64 
    jump           #17276     
    jump           #17281     
#17275: 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           mm_blockpcl.do_switch.w u64 
    callfn         &mm_lib.strexpr u64 
    pushptr                   u64 
    push           "Switch when2: not const: #" u64 
    callproc       &mm_support.gerror_s 
#17281: 
    push           mm_blockpcl.do_switch.w u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_switch.w u64 
#17271: 
    push           mm_blockpcl.do_switch.w u64 
    jumptrue       #17272     u64 
#17282: 
    push           mm_blockpcl.do_switch.wt u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_switch.wt u64 
#17269: 
    push           mm_blockpcl.do_switch.wt u64 
    jumptrue       #17270     u64 
#17283: 
    push           mm_blockpcl.do_switch.maxlab i64 
    push           mm_blockpcl.do_switch.minlab i64 
    sub                       i64 
    push           1          i64 
    add                       i64 
    pop            mm_blockpcl.do_switch.n i64 
    push           mm_blockpcl.do_switch.n i64 
    push           1000       i64 
    jumple         #17284     i64 
    setargs                   2 0
    push           0          u64 
    push           "Switch too big" u64 
    callproc       &mm_support.gerror 
#17284: 
    push           mm_blockpcl.do_switch.loopsw i64 
    jumpfalse      #17285     i64 
    setargs                   0 0
    callfn         &mm_genpcl.definelabel i64 
    pop            mm_blockpcl.do_switch.lab_a i64 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_switch.lab_d i64 
    setargs                   4 0
    push           mm_blockpcl.do_switch.lab_d i64 
    push           mm_blockpcl.do_switch.lab_a i64 
    push           mm_blockpcl.do_switch.lab_a i64 
    push           mm_blockpcl.do_switch.lab_a i64 
    callproc       &mm_genpcl.stacklooplabels 
    jump           #17286     
#17285: 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_switch.lab_d i64 
#17286: 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_switch.labjump i64 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_switch.elselab i64 
    push           mm_blockpcl.do_switch.ismult i64 
    jumpfalse      #17287     i64 
    setargs                   2 0
    push           0          u64 
    push           192        i64 
    callproc       &pc_libpcl.pcl_gen 
#17287: 
    setargs                   1 0
    push           mm_blockpcl.do_switch.pindex u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   4 0
    setargs                   1 0
    push           mm_blockpcl.do_switch.labjump i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    push           mm_blockpcl.do_switch.maxlab i64 
    push           mm_blockpcl.do_switch.minlab i64 
    push           85         i64 
    callproc       &pc_libpcl.pcl_genxy 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.do_switch.elselab i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    push           27         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.do_switch.labjump i64 
    callproc       &mm_genpcl.definefwdlabel 
#17288: 
    push           mm_blockpcl.do_switch.minlab i64 
    pop            mm_blockpcl.do_switch.i i64 
    push           mm_blockpcl.do_switch.i i64 
    push           mm_blockpcl.do_switch.maxlab i64 
    jumpgt         #17289     i64 
#17290: 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.do_switch.elselab i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    push           86         i64 
    callproc       &pc_libpcl.pcl_gen 
    push           pc_libpcl.pccurr u64 
    push           &mm_blockpcl.do_switch.labels 
    push           mm_blockpcl.do_switch.i i64 
    popptroff                 u64 8 0
#17291: 
    forup          #17290     i64 1
    opnd           mm_blockpcl.do_switch.i 
    opnd           mm_blockpcl.do_switch.maxlab 
#17289: 
    setargs                   2 0
    push           0          u64 
    push           87         i64 
    callproc       &pc_libpcl.pcl_gen 
    push           mm_blockpcl.do_switch.pwhenthen u64 
    pop            mm_blockpcl.do_switch.wt u64 
    jump           #17292     
#17293: 
    setargs                   0 0
    callfn         &mm_genpcl.definelabel i64 
    pop            mm_blockpcl.do_switch.labstmt i64 
    push           mm_blockpcl.do_switch.wt u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_switch.w u64 
    jump           #17294     
#17295: 
    push           mm_blockpcl.do_switch.w u64 
    pushptr                   u8 
    push           20         i64 
    casejumpeq     #17296     i64 0
    push           1          i64 
    casejumpeq     #17297     i64 0
    popstack                  i64 
    jump           #17298     
#17296: 
    push           mm_blockpcl.do_switch.w u64 
    push           16         
    pushptroff                u64 1 0
    push           16         
    pushptroff                i64 1 0
    pop            mm_blockpcl.do_switch.ax i64 
    push           mm_blockpcl.do_switch.w u64 
    push           24         
    pushptroff                u64 1 0
    push           16         
    pushptroff                i64 1 0
    pop            mm_blockpcl.do_switch.bx i64 
    jump           #17299     
#17297: 
    push           mm_blockpcl.do_switch.w u64 
    push           16         
    pushptroff                i64 1 0
    store          mm_blockpcl.do_switch.bx i64 
    pop            mm_blockpcl.do_switch.ax i64 
    jump           #17299     
#17298: 
#17299: 
#17300: 
    push           mm_blockpcl.do_switch.ax i64 
    pop            mm_blockpcl.do_switch.i i64 
    push           mm_blockpcl.do_switch.i i64 
    push           mm_blockpcl.do_switch.bx i64 
    jumpgt         #17301     i64 
#17302: 
    push           mm_blockpcl.do_switch.labstmt i64 
    push           &mm_blockpcl.do_switch.labels 
    push           mm_blockpcl.do_switch.i i64 
    pushptroff                u64 8 0
    push           8          
    popptroff                 i64 1 0
#17303: 
    forup          #17302     i64 1
    opnd           mm_blockpcl.do_switch.i 
    opnd           mm_blockpcl.do_switch.bx 
#17301: 
    push           mm_blockpcl.do_switch.w u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_switch.w u64 
#17294: 
    push           mm_blockpcl.do_switch.w u64 
    jumptrue       #17295     u64 
#17304: 
    setargs                   2 0
    push           mm_blockpcl.do_switch.isref i64 
    push           mm_blockpcl.do_switch.wt u64 
    push           24         
    pushptroff                u64 1 0
    callproc       &mm_blockpcl.evalunitx 
    push           mm_blockpcl.do_switch.ismult i64 
    jumpfalse      #17305     i64 
    setargs                   2 0
    push           0          u64 
    push           193        i64 
    callproc       &pc_libpcl.pcl_gen 
#17305: 
    setargs                   1 0
    startmult                 
    push           mm_blockpcl.do_switch.loopsw i64 
    jumpfalse      #17306     i64 
    push           mm_blockpcl.do_switch.lab_a i64 
    resetmult                 
    jump           #17307     
#17306: 
    push           mm_blockpcl.do_switch.lab_d i64 
    endmult                   
#17307: 
    callproc       &mm_blockpcl.genjumpl 
    push           mm_blockpcl.do_switch.wt u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_switch.wt u64 
#17292: 
    push           mm_blockpcl.do_switch.wt u64 
    jumptrue       #17293     u64 
#17308: 
    setargs                   1 0
    push           mm_blockpcl.do_switch.elselab i64 
    callproc       &mm_genpcl.definefwdlabel 
    push           mm_blockpcl.do_switch.pelse u64 
    jumpfalse      #17309     u64 
    setargs                   2 0
    push           mm_blockpcl.do_switch.isref i64 
    push           mm_blockpcl.do_switch.pelse u64 
    callproc       &mm_blockpcl.evalunitx 
    push           mm_blockpcl.do_switch.ismult i64 
    jumpfalse      #17310     i64 
    setargs                   2 0
    push           0          u64 
    push           194        i64 
    callproc       &pc_libpcl.pcl_gen 
#17310: 
#17309: 
    push           mm_blockpcl.do_switch.loopsw i64 
    jumpfalse      #17311     i64 
    setargs                   1 0
    push           mm_blockpcl.do_switch.lab_a i64 
    callproc       &mm_blockpcl.genjumpl 
    setargs                   1 0
    push           mm_blockpcl.do_switch.lab_d i64 
    callproc       &mm_genpcl.definefwdlabel 
    push           &mm_genpcl.loopindex 
    decr                      i64 1
    jump           #17312     
#17311: 
    setargs                   1 0
    push           mm_blockpcl.do_switch.lab_d i64 
    callproc       &mm_genpcl.definefwdlabel 
#17312: 
#17313: 
    retproc                   
End


Proc mm_blockpcl.do_select:
    param          mm_blockpcl.do_select.p u64 
    param          mm_blockpcl.do_select.a u64 
    param          mm_blockpcl.do_select.b u64 
    param          mm_blockpcl.do_select.c u64 
    param          mm_blockpcl.do_select.isref i64 
    local          mm_blockpcl.do_select.labels block:2048 
    local          mm_blockpcl.do_select.labend i64 
    local          mm_blockpcl.do_select.labjump i64 
    local          mm_blockpcl.do_select.n i64 
    local          mm_blockpcl.do_select.i i64 
    local          mm_blockpcl.do_select.elselab i64 
    local          mm_blockpcl.do_select.labstmt i64 
    local          mm_blockpcl.do_select.ismult i64 
    local          mm_blockpcl.do_select.q u64 
    procentry                 
    startmult                 
    push           mm_blockpcl.do_select.p u64 
    push           48         
    pushptroff                i32 1 0
    push           0          i64 
    jumpeq         #17315     i64 
    push           mm_blockpcl.do_select.p u64 
    push           59         
    pushptroff                u8 1 0
    jumpfalse      #17315     i64 
    push           1          
    resetmult                 
    jump           #17316     
#17315: 
    push           0          
    endmult                   
#17316: 
    pop            mm_blockpcl.do_select.ismult i64 
    push           mm_blockpcl.do_select.b u64 
    pop            mm_blockpcl.do_select.q u64 
    push           0          i64 
    pop            mm_blockpcl.do_select.n i64 
    jump           #17317     
#17318: 
    push           mm_blockpcl.do_select.n i64 
    push           256        i64 
    jumplt         #17319     i64 
    setargs                   2 0
    push           0          u64 
    push           "selectx: too many labels" u64 
    callproc       &mm_support.gerror 
#17319: 
    push           &mm_blockpcl.do_select.n 
    incr                      i64 1
    push           mm_blockpcl.do_select.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_select.q u64 
#17317: 
    push           mm_blockpcl.do_select.q u64 
    jumptrue       #17318     u64 
#17320: 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_select.labend i64 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_select.labjump i64 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_select.elselab i64 
    push           mm_blockpcl.do_select.ismult i64 
    jumpfalse      #17321     i64 
    setargs                   2 0
    push           0          u64 
    push           192        i64 
    callproc       &pc_libpcl.pcl_gen 
#17321: 
    setargs                   1 0
    push           mm_blockpcl.do_select.a u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   4 0
    setargs                   1 0
    push           mm_blockpcl.do_select.labjump i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    push           mm_blockpcl.do_select.n i64 
    push           1          i64 
    push           85         i64 
    callproc       &pc_libpcl.pcl_genxy 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.do_select.elselab i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    push           27         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.do_select.labjump i64 
    callproc       &mm_genpcl.definefwdlabel 
    push           mm_blockpcl.do_select.b u64 
    pop            mm_blockpcl.do_select.q u64 
    push           0          i64 
    pop            mm_blockpcl.do_select.i i64 
#17322: 
    push           1          i64 
    pop            mm_blockpcl.do_select.i i64 
    push           mm_blockpcl.do_select.n i64 
    push           1          i64 
    jumplt         #17323     i64 
#17324: 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.do_select.elselab i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    push           86         i64 
    callproc       &pc_libpcl.pcl_gen 
    push           pc_libpcl.pccurr u64 
    push           &mm_blockpcl.do_select.labels 
    push           mm_blockpcl.do_select.i i64 
    popptroff                 u64 8 -8
#17325: 
    forup          #17324     i64 1
    opnd           mm_blockpcl.do_select.i 
    opnd           mm_blockpcl.do_select.n 
#17323: 
    setargs                   2 0
    push           0          u64 
    push           87         i64 
    callproc       &pc_libpcl.pcl_gen 
    push           mm_blockpcl.do_select.b u64 
    pop            mm_blockpcl.do_select.q u64 
    push           0          i64 
    pop            mm_blockpcl.do_select.i i64 
    jump           #17326     
#17327: 
    setargs                   0 0
    callfn         &mm_genpcl.definelabel i64 
    pop            mm_blockpcl.do_select.labstmt i64 
    push           &mm_blockpcl.do_select.i 
    incr                      i64 1
    push           mm_blockpcl.do_select.labstmt i64 
    push           &mm_blockpcl.do_select.labels 
    push           mm_blockpcl.do_select.i i64 
    pushptroff                u64 8 -8
    push           8          
    popptroff                 i64 1 0
    setargs                   2 0
    push           mm_blockpcl.do_select.isref i64 
    push           mm_blockpcl.do_select.q u64 
    callproc       &mm_blockpcl.evalunitx 
    push           mm_blockpcl.do_select.ismult i64 
    jumpfalse      #17328     i64 
    setargs                   2 0
    push           0          u64 
    push           193        i64 
    callproc       &pc_libpcl.pcl_gen 
#17328: 
    setargs                   1 0
    push           mm_blockpcl.do_select.labend i64 
    callproc       &mm_blockpcl.genjumpl 
    push           mm_blockpcl.do_select.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_select.q u64 
#17326: 
    push           mm_blockpcl.do_select.q u64 
    jumptrue       #17327     u64 
#17329: 
    setargs                   1 0
    push           mm_blockpcl.do_select.elselab i64 
    callproc       &mm_genpcl.definefwdlabel 
    setargs                   2 0
    push           mm_blockpcl.do_select.isref i64 
    push           mm_blockpcl.do_select.c u64 
    callproc       &mm_blockpcl.evalunitx 
    push           mm_blockpcl.do_select.ismult i64 
    jumpfalse      #17330     i64 
    setargs                   2 0
    push           0          u64 
    push           194        i64 
    callproc       &pc_libpcl.pcl_gen 
#17330: 
    setargs                   1 0
    push           mm_blockpcl.do_select.labend i64 
    callproc       &mm_genpcl.definefwdlabel 
#17331: 
    retproc                   
End


Proc mm_blockpcl.do_case:
    param          mm_blockpcl.do_case.p u64 
    param          mm_blockpcl.do_case.pindex u64 
    param          mm_blockpcl.do_case.pwhenthen u64 
    param          mm_blockpcl.do_case.pelse u64 
    param          mm_blockpcl.do_case.loopsw i64 
    param          mm_blockpcl.do_case.isref i64 
    local          mm_blockpcl.do_case.labtable block:2048 
    local          mm_blockpcl.do_case.unittable block:2048 
    local          mm_blockpcl.do_case.ncases i64 
    local          mm_blockpcl.do_case.opc i64 
    local          mm_blockpcl.do_case.ismult i64 
    local          mm_blockpcl.do_case.lab_abc i64 
    local          mm_blockpcl.do_case.lab_d i64 
    local          mm_blockpcl.do_case.fmult i64 
    local          mm_blockpcl.do_case.labnextwhen i64 
    local          mm_blockpcl.do_case.labstmtstart i64 
    local          mm_blockpcl.do_case.labelse i64 
    local          mm_blockpcl.do_case.w u64 
    local          mm_blockpcl.do_case.wt u64 
    local          mm_blockpcl.do_case.i i64 
    procentry                 
    push           mm_blockpcl.do_case.pindex u64 
    push           0          u64 
    jumpne         #17333     u64 
    setargs                   2 0
    push           0          u64 
    push           "EMPTY CASE NOT DONE" u64 
    callproc       &mm_support.gerror 
#17333: 
    startmult                 
    push           mm_blockpcl.do_case.p u64 
    push           48         
    pushptroff                i32 1 0
    push           0          i64 
    jumpeq         #17334     i64 
    push           mm_blockpcl.do_case.loopsw i64 
    jumptrue       #17334     i64 
    push           1          
    resetmult                 
    jump           #17335     
#17334: 
    push           0          
    endmult                   
#17335: 
    pop            mm_blockpcl.do_case.ismult i64 
    push           mm_blockpcl.do_case.loopsw i64 
    jumpfalse      #17336     i64 
    setargs                   0 0
    callfn         &mm_genpcl.definelabel i64 
    pop            mm_blockpcl.do_case.lab_abc i64 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_case.lab_d i64 
    setargs                   4 0
    push           mm_blockpcl.do_case.lab_d i64 
    push           mm_blockpcl.do_case.lab_abc i64 
    push           mm_blockpcl.do_case.lab_abc i64 
    push           mm_blockpcl.do_case.lab_abc i64 
    callproc       &mm_genpcl.stacklooplabels 
    jump           #17337     
#17336: 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_case.lab_d i64 
#17337: 
    push           mm_blockpcl.do_case.ismult i64 
    jumpfalse      #17338     i64 
    setargs                   2 0
    push           0          u64 
    push           192        i64 
    callproc       &pc_libpcl.pcl_gen 
#17338: 
    setargs                   1 0
    push           mm_blockpcl.do_case.pindex u64 
    callproc       &mm_blockpcl.evalunit 
    push           mm_blockpcl.casedepth i64 
    push           20         i64 
    jumplt         #17339     i64 
    setargs                   2 0
    push           0          u64 
    push           "case nested too deeply" u64 
    callproc       &mm_support.gerror 
#17339: 
    push           mm_blockpcl.do_case.p u64 
    push           &mm_blockpcl.casestmt 
    push           &mm_blockpcl.casedepth 
    incrload                  i64 1
    popptroff                 u64 8 -8
    push           0          i64 
    pop            mm_blockpcl.do_case.ncases i64 
    push           mm_blockpcl.do_case.pwhenthen u64 
    pop            mm_blockpcl.do_case.wt u64 
    jump           #17340     
#17341: 
    push           mm_blockpcl.do_case.wt u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_case.w u64 
    push           mm_blockpcl.do_case.ncases i64 
    push           256        i64 
    jumplt         #17342     i64 
    setargs                   2 0
    push           0          u64 
    push           "too many cases" u64 
    callproc       &mm_support.gerror 
#17342: 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    push           &mm_blockpcl.do_case.labtable 
    push           &mm_blockpcl.do_case.ncases 
    incrload                  i64 1
    popptroff                 i64 8 -8
    push           mm_blockpcl.do_case.wt u64 
    push           24         
    pushptroff                u64 1 0
    push           &mm_blockpcl.do_case.unittable 
    push           mm_blockpcl.do_case.ncases i64 
    popptroff                 u64 8 -8
    jump           #17343     
#17344: 
    setargs                   1 0
    push           mm_blockpcl.do_case.w u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    setargs                   1 0
    push           &mm_blockpcl.do_case.labtable 
    push           mm_blockpcl.do_case.ncases i64 
    pushptroff                i64 8 -8
    push           mm_blockpcl.do_case.w u64 
    push           40         
    storeptroff               i32 1 0
    callfn         &pc_libpcl.pcl_genlabel u64 
    push           72         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.do_case.w u64 
    callproc       &mm_genpcl.setmode_u 
    push           mm_blockpcl.do_case.w u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_case.w u64 
#17343: 
    push           mm_blockpcl.do_case.w u64 
    jumptrue       #17344     u64 
#17345: 
    push           mm_blockpcl.do_case.wt u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_case.wt u64 
#17340: 
    push           mm_blockpcl.do_case.wt u64 
    jumptrue       #17341     u64 
#17346: 
    setargs                   2 0
    push           0          u64 
    push           43         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.do_case.pindex u64 
    callproc       &mm_genpcl.setmode_u 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_case.labelse i64 
    push           mm_blockpcl.do_case.labelse i64 
    push           &mm_blockpcl.caseelse 
    push           mm_blockpcl.casedepth i64 
    popptroff                 i64 8 -8
    setargs                   1 0
    push           mm_blockpcl.do_case.labelse i64 
    callproc       &mm_blockpcl.genjumpl 
#17347: 
    push           1          i64 
    pop            mm_blockpcl.do_case.i i64 
    push           mm_blockpcl.do_case.ncases i64 
    push           1          i64 
    jumplt         #17348     i64 
#17349: 
    setargs                   1 0
    push           &mm_blockpcl.do_case.labtable 
    push           mm_blockpcl.do_case.i i64 
    pushptroff                i64 8 -8
    callproc       &mm_genpcl.definefwdlabel 
    setargs                   2 0
    push           mm_blockpcl.do_case.isref i64 
    push           &mm_blockpcl.do_case.unittable 
    push           mm_blockpcl.do_case.i i64 
    pushptroff                u64 8 -8
    callproc       &mm_blockpcl.evalunitx 
    push           mm_blockpcl.do_case.ismult i64 
    jumpfalse      #17350     i64 
    setargs                   2 0
    push           0          u64 
    push           193        i64 
    callproc       &pc_libpcl.pcl_gen 
#17350: 
    push           mm_blockpcl.do_case.loopsw i64 
    jumpfalse      #17351     i64 
    setargs                   1 0
    push           mm_blockpcl.do_case.lab_abc i64 
    callproc       &mm_blockpcl.genjumpl 
    jump           #17352     
#17351: 
    setargs                   1 0
    push           mm_blockpcl.do_case.lab_d i64 
    callproc       &mm_blockpcl.genjumpl 
#17352: 
#17353: 
    forup          #17349     i64 1
    opnd           mm_blockpcl.do_case.i 
    opnd           mm_blockpcl.do_case.ncases 
#17348: 
    setargs                   1 0
    push           mm_blockpcl.do_case.labelse i64 
    callproc       &mm_genpcl.definefwdlabel 
    push           mm_blockpcl.do_case.pelse u64 
    jumpfalse      #17354     u64 
    setargs                   2 0
    push           mm_blockpcl.do_case.isref i64 
    push           mm_blockpcl.do_case.pelse u64 
    callproc       &mm_blockpcl.evalunitx 
    push           mm_blockpcl.do_case.ismult i64 
    jumpfalse      #17355     i64 
    setargs                   2 0
    push           0          u64 
    push           194        i64 
    callproc       &pc_libpcl.pcl_gen 
#17355: 
#17354: 
    push           mm_blockpcl.do_case.loopsw i64 
    jumpfalse      #17356     i64 
    setargs                   1 0
    push           mm_blockpcl.do_case.lab_abc i64 
    callproc       &mm_blockpcl.genjumpl 
    setargs                   1 0
    push           mm_blockpcl.do_case.lab_d i64 
    callproc       &mm_genpcl.definefwdlabel 
    push           &mm_genpcl.loopindex 
    decr                      i64 1
    jump           #17357     
#17356: 
    setargs                   1 0
    push           mm_blockpcl.do_case.lab_d i64 
    callproc       &mm_genpcl.definefwdlabel 
#17357: 
    push           &mm_blockpcl.casedepth 
    decr                      i64 1
#17358: 
    retproc                   
End


Proc mm_blockpcl.do_dotindex:
    param          mm_blockpcl.do_dotindex.p u64 
    param          mm_blockpcl.do_dotindex.a u64 
    param          mm_blockpcl.do_dotindex.b u64 
    procentry                 
    setargs                   1 0
    push           mm_blockpcl.do_dotindex.a u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   1 0
    push           mm_blockpcl.do_dotindex.b u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    push           0          u64 
    push           37         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           4          i64 
    callproc       &mm_genpcl.setmode 
#17360: 
    retproc                   
End


Proc mm_blockpcl.do_dotslice:
    param          mm_blockpcl.do_dotslice.p u64 
    param          mm_blockpcl.do_dotslice.a u64 
    param          mm_blockpcl.do_dotslice.b u64 
    procentry                 
    setargs                   1 0
    push           mm_blockpcl.do_dotslice.a u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   1 0
    push           mm_blockpcl.do_dotslice.b u64 
    push           16         
    pushptroff                u64 1 0
    callproc       &mm_blockpcl.evalunit 
    setargs                   1 0
    push           mm_blockpcl.do_dotslice.b u64 
    push           24         
    pushptroff                u64 1 0
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    push           0          u64 
    push           40         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           4          i64 
    callproc       &mm_genpcl.setmode 
#17362: 
    retproc                   
End


Proc mm_blockpcl.do_read:
    param          mm_blockpcl.do_read.p u64 
    param          mm_blockpcl.do_read.a u64 
    local          mm_blockpcl.do_read.m i64 
    procentry                 
    push           mm_blockpcl.do_read.p u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_blockpcl.do_read.m i64 
    push           mm_blockpcl.do_read.a u64 
    push           0          u64 
    jumpne         #17364     u64 
    push           mm_genpcl.pzero u64 
    pop            mm_blockpcl.do_read.a u64 
#17364: 
    push           &mm_decls.ttisinteger 
    push           mm_blockpcl.do_read.m i64 
    pushptroff                u8 1 0
    jumpfalse      #17365     i64 
    setargs                   4 0
    push           0          u64 
    push           0          u64 
    push           mm_blockpcl.do_read.a u64 
    push           24         i64 
    callproc       &mm_genpcl.pcl_gen_sysfn 
    jump           #17366     
#17365: 
    push           &mm_decls.ttisreal 
    push           mm_blockpcl.do_read.m i64 
    pushptroff                u8 1 0
    jumpfalse      #17367     i64 
    push           &mm_decls.ttsize 
    push           mm_blockpcl.do_read.m i64 
    pushptroff                i32 4 0
    push           8          i64 
    jumpne         #17367     i64 
    setargs                   4 0
    push           0          u64 
    push           0          u64 
    push           mm_blockpcl.do_read.a u64 
    push           25         i64 
    callproc       &mm_genpcl.pcl_gen_sysfn 
    jump           #17366     
#17367: 
    push           mm_blockpcl.do_read.m i64 
    push           10         i64 
    jumpne         #17368     i64 
    setargs                   4 0
    push           0          u64 
    push           0          u64 
    push           mm_blockpcl.do_read.a u64 
    push           26         i64 
    callproc       &mm_genpcl.pcl_gen_sysfn 
    jump           #17366     
#17368: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "STRMODE(M)=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    setargs                   2 0
    push           1          i64 
    push           mm_blockpcl.do_read.m i64 
    callfn         &mm_lib.strmode u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           0          u64 
    push           "CAN'T READ THIS ITEM" u64 
    callproc       &mm_support.gerror 
#17366: 
    setargs                   1 0
    push           mm_blockpcl.do_read.p u64 
    callproc       &mm_genpcl.setmode_u 
#17369: 
    retproc                   
End


Proc mm_blockpcl.do_readln:
    param          mm_blockpcl.do_readln.a u64 
    procentry                 
    push           mm_blockpcl.do_readln.a u64 
    jumpfalse      #17371     u64 
    push           &mm_decls.ttbasetype 
    push           mm_blockpcl.do_readln.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           9          i64 
    jumpeq         #17372     i64 
    setargs                   2 0
    push           0          u64 
    push           "@dev no ref" u64 
    callproc       &mm_support.gerror 
#17372: 
    push           &mm_decls.ttbasetype 
    push           &mm_decls.tttarget 
    push           mm_blockpcl.do_readln.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    pushptroff                i32 4 0
    push           0          i64 
    casejumpeq     #17373     i64 0
    push           21         i64 
    casejumpeq     #17374     i64 0
    push           16         i64 
    casejumpeq     #17374     i64 0
    popstack                  i64 
    jump           #17375     
#17373: 
    setargs                   5 0
    push           0          i64 
    push           0          u64 
    push           0          u64 
    push           mm_blockpcl.do_readln.a u64 
    push           27         i64 
    callproc       &mm_genpcl.pcl_gen_sysproc 
    jump           #17376     
#17374: 
    setargs                   5 0
    push           0          i64 
    push           0          u64 
    push           0          u64 
    push           mm_blockpcl.do_readln.a u64 
    push           28         i64 
    callproc       &mm_genpcl.pcl_gen_sysproc 
    jump           #17376     
#17375: 
    setargs                   2 0
    push           0          u64 
    push           "rd@dev?"  u64 
    callproc       &mm_support.gerror 
#17376: 
    jump           #17377     
#17371: 
    setargs                   5 0
    push           0          i64 
    push           0          u64 
    push           0          u64 
    push           0          u64 
    push           29         i64 
    callproc       &mm_genpcl.pcl_gen_sysproc 
#17377: 
#17378: 
    retproc                   
End


Proc mm_blockpcl.docond:
    param          mm_blockpcl.docond.opc i64 
    param          mm_blockpcl.docond.p u64 
    param          mm_blockpcl.docond.lab i64 
    procentry                 
    setargs                   3 0
    push           mm_blockpcl.docond.lab i64 
    push           mm_blockpcl.docond.p u64 
    push           mm_blockpcl.docond.opc i64 
    callproc       &mm_blockpcl.genjumpcond 
#17380: 
    retproc                   
End


Proc mm_blockpcl.do_syscall:
    param          mm_blockpcl.do_syscall.p u64 
    param          mm_blockpcl.do_syscall.a u64 
    procentry                 
    push           mm_blockpcl.do_syscall.p u64 
    push           40         
    pushptroff                i16 1 0
    push           30         i64 
    casejumpeq     #17382     i64 0
    push           31         i64 
    casejumpeq     #17383     i64 0
    push           32         i64 
    casejumpeq     #17384     i64 0
    popstack                  i64 
    jump           #17385     
#17382: 
    setargs                   2 0
    push           0          u64 
    push           198        i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #17386     
#17383: 
    setargs                   1 0
    push           mm_blockpcl.do_syscall.a u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    push           0          u64 
    push           199        i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #17386     
#17384: 
    setargs                   1 0
    push           mm_blockpcl.do_syscall.a u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    push           0          u64 
    push           200        i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #17386     
#17385: 
#17386: 
    setargs                   1 0
    push           4          i64 
    callproc       &mm_genpcl.setmode 
#17387: 
    retproc                   
End


Proc mm_blockpcl.do_slice:
    param          mm_blockpcl.do_slice.a u64 
    param          mm_blockpcl.do_slice.b u64 
    param          mm_blockpcl.do_slice.doref i64 
    procentry                 
    push           mm_blockpcl.do_slice.doref i64 
    jumpfalse      #17389     i64 
    setargs                   2 0
    push           0          u64 
    push           "DOSLICE/REF?" u64 
    callproc       &mm_support.gerror 
#17389: 
    push           mm_blockpcl.do_slice.b u64 
    push           0          u64 
    jumpne         #17390     u64 
    push           mm_blockpcl.do_slice.a u64 
    pushptr                   u8 
    push           1          i64 
    jumpne         #17391     i64 
    setargs                   2 0
    push           9          i64 
    setargs                   1 0
    push           mm_blockpcl.do_slice.a u64 
    push           16         
    pushptroff                u64 1 0
    callfn         &strlen    i64 
    callproc       &mm_genpcl.genpushint 
    jump           #17392     
#17391: 
    setargs                   2 0
    push           9          i64 
    push           &mm_decls.ttlength 
    push           mm_blockpcl.do_slice.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    callproc       &mm_genpcl.genpushint 
#17392: 
    setargs                   1 0
    push           mm_blockpcl.do_slice.a u64 
    callproc       &mm_blockpcl.evalarray 
    jump           #17393     
#17390: 
    push           mm_blockpcl.do_slice.b u64 
    push           16         
    pushptroff                u64 1 0
    pushptr                   u8 
    push           mm_blockpcl.do_slice.b u64 
    push           24         
    pushptroff                u64 1 0
    pushptr                   u8 
    jumpne         #17394     i64 
    push           mm_blockpcl.do_slice.b u64 
    push           24         
    pushptroff                u64 1 0
    pushptr                   u8 
    push           1          i64 
    jumpne         #17394     i64 
    setargs                   2 0
    push           9          i64 
    push           mm_blockpcl.do_slice.b u64 
    push           24         
    pushptroff                u64 1 0
    push           16         
    pushptroff                i64 1 0
    push           mm_blockpcl.do_slice.b u64 
    push           16         
    pushptroff                u64 1 0
    push           16         
    pushptroff                i64 1 0
    sub                       i64 
    push           1          i64 
    add                       i64 
    callproc       &mm_genpcl.genpushint 
    jump           #17395     
#17394: 
    setargs                   1 0
    push           mm_blockpcl.do_slice.b u64 
    push           24         
    pushptroff                u64 1 0
    callproc       &mm_blockpcl.evalunit 
    setargs                   1 0
    push           mm_blockpcl.do_slice.b u64 
    push           16         
    pushptroff                u64 1 0
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    push           0          u64 
    push           103        i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           4          i64 
    callproc       &mm_genpcl.setmode 
    setargs                   2 0
    push           9          i64 
    push           1          i64 
    callproc       &mm_genpcl.genpushint 
    setargs                   2 0
    push           0          u64 
    push           102        i64 
    callproc       &pc_libpcl.pcl_gen 
#17395: 
    setargs                   1 0
    push           4          i64 
    callproc       &mm_genpcl.setmode 
    setargs                   2 0
    push           mm_blockpcl.do_slice.b u64 
    push           16         
    pushptroff                u64 1 0
    push           mm_blockpcl.do_slice.a u64 
    callproc       &mm_blockpcl.do_indexref 
#17393: 
    setargs                   2 0
    push           0          u64 
    push           84         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           3          i64 
    callproc       &mm_genpcl.setmode 
#17396: 
    retproc                   
End


Proc mm_blockpcl.do_assignblock:
    param          mm_blockpcl.do_assignblock.p u64 
    param          mm_blockpcl.do_assignblock.a u64 
    param          mm_blockpcl.do_assignblock.b u64 
    procentry                 
    push           mm_blockpcl.do_assignblock.b u64 
    pushptr                   u8 
    push           19         i64 
    jumpne         #17398     i64 
    push           &mm_decls.ttbasetype 
    push           mm_blockpcl.do_assignblock.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           11         i64 
    jumpne         #17399     i64 
    setargs                   2 0
    push           mm_blockpcl.do_assignblock.b u64 
    push           mm_blockpcl.do_assignblock.a u64 
    callproc       &mm_blockpcl.do_assignarray 
    jump           #17400     
#17399: 
    setargs                   2 0
    push           mm_blockpcl.do_assignblock.b u64 
    push           mm_blockpcl.do_assignblock.a u64 
    callproc       &mm_blockpcl.do_assignrecord 
#17400: 
    jump           #17401     
#17398: 
    setargs                   2 0
    push           0          u64 
    push           "ASSIGN BLOCK" u64 
    callproc       &mm_support.gerror 
#17401: 
#17402: 
    retproc                   
End


Proc mm_blockpcl.do_assignarray:
    param          mm_blockpcl.do_assignarray.a u64 
    param          mm_blockpcl.do_assignarray.b u64 
    local          mm_blockpcl.do_assignarray.passign u64 
    local          mm_blockpcl.do_assignarray.pindex u64 
    local          mm_blockpcl.do_assignarray.pconst u64 
    local          mm_blockpcl.do_assignarray.q u64 
    local          mm_blockpcl.do_assignarray.index i64 
    procentry                 
    push           &mm_decls.ttbasetype 
    push           &mm_decls.tttarget 
    push           mm_blockpcl.do_assignarray.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    pushptroff                i32 4 0
    push           16         i64 
    jumpne         #17404     i64 
    setargs                   2 0
    push           0          u64 
    push           "Assignment not suitable for []char type" u64 
    callproc       &mm_support.gerror 
#17404: 
    setargs                   2 0
    push           4          i64 
    push           1          u64 
    callfn         &mm_lib.createconstunit u64 
    pop            mm_blockpcl.do_assignarray.pconst u64 
    setargs                   3 0
    push           mm_blockpcl.do_assignarray.pconst u64 
    push           mm_blockpcl.do_assignarray.a u64 
    push           48         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_blockpcl.do_assignarray.pindex u64 
    setargs                   3 0
    push           mm_blockpcl.do_assignarray.b u64 
    push           16         
    pushptroff                u64 1 0
    push           mm_blockpcl.do_assignarray.pindex u64 
    push           29         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_blockpcl.do_assignarray.passign u64 
    push           &mm_decls.tttarget 
    push           mm_blockpcl.do_assignarray.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           mm_blockpcl.do_assignarray.pindex u64 
    push           48         
    storeptroff               i32 1 0
    push           mm_blockpcl.do_assignarray.passign u64 
    push           48         
    popptroff                 i32 1 0
    push           &mm_decls.ttlower 
    push           mm_blockpcl.do_assignarray.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    pop            mm_blockpcl.do_assignarray.index i64 
    push           mm_blockpcl.do_assignarray.b u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_assignarray.q u64 
    jump           #17405     
#17406: 
    push           mm_blockpcl.do_assignarray.index i64 
    push           mm_blockpcl.do_assignarray.pconst u64 
    push           16         
    popptroff                 i64 1 0
    push           1          i64 
    push           mm_blockpcl.do_assignarray.pconst u64 
    push           59         
    popptroff                 u8 1 0
    push           mm_blockpcl.do_assignarray.q u64 
    push           mm_blockpcl.do_assignarray.passign u64 
    push           24         
    popptroff                 u64 1 0
    setargs                   1 0
    push           mm_blockpcl.do_assignarray.passign u64 
    callproc       &mm_blockpcl.evalunit 
    push           &mm_blockpcl.do_assignarray.index 
    incr                      i64 1
    push           mm_blockpcl.do_assignarray.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_assignarray.q u64 
#17405: 
    push           mm_blockpcl.do_assignarray.q u64 
    jumptrue       #17406     u64 
#17407: 
#17408: 
    retproc                   
End


Proc mm_blockpcl.do_assignrecord:
    param          mm_blockpcl.do_assignrecord.a u64 
    param          mm_blockpcl.do_assignrecord.b u64 
    local          mm_blockpcl.do_assignrecord.passign u64 
    local          mm_blockpcl.do_assignrecord.pdot u64 
    local          mm_blockpcl.do_assignrecord.pfield u64 
    local          mm_blockpcl.do_assignrecord.q u64 
    local          mm_blockpcl.do_assignrecord.m i64 
    local          mm_blockpcl.do_assignrecord.fieldtype i64 
    local          mm_blockpcl.do_assignrecord.d u64 
    local          mm_blockpcl.do_assignrecord.e u64 
    procentry                 
    setargs                   1 0
    push           3          i64 
    callfn         &mm_lib.createunit0 u64 
    pop            mm_blockpcl.do_assignrecord.pfield u64 
    setargs                   3 0
    push           mm_blockpcl.do_assignrecord.pfield u64 
    push           mm_blockpcl.do_assignrecord.a u64 
    push           51         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_blockpcl.do_assignrecord.pdot u64 
    setargs                   3 0
    push           mm_blockpcl.do_assignrecord.b u64 
    push           16         
    pushptroff                u64 1 0
    push           mm_blockpcl.do_assignrecord.pdot u64 
    push           29         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_blockpcl.do_assignrecord.passign u64 
    push           &mm_decls.tttarget 
    push           mm_blockpcl.do_assignrecord.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           mm_blockpcl.do_assignrecord.pdot u64 
    push           48         
    storeptroff               i32 1 0
    push           mm_blockpcl.do_assignrecord.passign u64 
    push           48         
    popptroff                 i32 1 0
    push           mm_blockpcl.do_assignrecord.a u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_blockpcl.do_assignrecord.m i64 
    push           &mm_decls.ttnamedef 
    push           mm_blockpcl.do_assignrecord.m i64 
    pushptroff                u64 8 0
    pop            mm_blockpcl.do_assignrecord.d u64 
    push           mm_blockpcl.do_assignrecord.d u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_assignrecord.e u64 
    push           mm_blockpcl.do_assignrecord.b u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_assignrecord.q u64 
    jump           #17410     
#17411: 
    push           mm_blockpcl.do_assignrecord.e u64 
    push           78         
    pushptroff                u8 1 0
    push           14         i64 
    jumpne         #17412     i64 
    push           mm_blockpcl.do_assignrecord.e u64 
    push           72         
    pushptroff                i32 1 0
    push           30         i64 
    jumpeq         #17412     i64 
    push           mm_blockpcl.do_assignrecord.e u64 
    push           72         
    pushptroff                i32 1 0
    pop            mm_blockpcl.do_assignrecord.fieldtype i64 
    push           mm_blockpcl.do_assignrecord.e u64 
    push           mm_blockpcl.do_assignrecord.pfield u64 
    push           16         
    popptroff                 u64 1 0
    push           mm_blockpcl.do_assignrecord.fieldtype i64 
    push           mm_blockpcl.do_assignrecord.pdot u64 
    push           48         
    storeptroff               i32 1 0
    push           mm_blockpcl.do_assignrecord.pfield u64 
    push           48         
    storeptroff               i32 1 0
    push           mm_blockpcl.do_assignrecord.passign u64 
    push           48         
    popptroff                 i32 1 0
    push           mm_blockpcl.do_assignrecord.q u64 
    push           mm_blockpcl.do_assignrecord.passign u64 
    push           24         
    popptroff                 u64 1 0
    push           mm_blockpcl.do_assignrecord.e u64 
    push           84         
    pushptroff                i32 1 0
    push           mm_blockpcl.do_assignrecord.pdot u64 
    push           40         
    popptroff                 u32 1 0
    setargs                   1 0
    push           mm_blockpcl.do_assignrecord.passign u64 
    callproc       &mm_blockpcl.evalunit 
    push           mm_blockpcl.do_assignrecord.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_assignrecord.q u64 
#17412: 
    push           mm_blockpcl.do_assignrecord.e u64 
    push           32         
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_assignrecord.e u64 
#17410: 
    push           mm_blockpcl.do_assignrecord.e u64 
    jumptrue       #17411     u64 
#17413: 
#17414: 
    retproc                   
End


Proc mm_blockpcl.pushrhs:
    param          mm_blockpcl.pushrhs.a u64 
    procentry                 
    push           mm_blockpcl.pushrhs.a u64 
    push           0          u64 
    jumpne         #17416     u64 
    jump           #17417     
#17416: 
    setargs                   1 0
    push           mm_blockpcl.pushrhs.a u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &mm_blockpcl.pushrhs 
    setargs                   1 0
    push           mm_blockpcl.pushrhs.a u64 
    callproc       &mm_blockpcl.evalunit 
#17417: 
    retproc                   
End


Proc mm_blockpcl.do_multassign:
    param          mm_blockpcl.do_multassign.a u64 
    param          mm_blockpcl.do_multassign.b u64 
    local          mm_blockpcl.do_multassign.p u64 
    local          mm_blockpcl.do_multassign.nlhs i64 
    local          mm_blockpcl.do_multassign.nrhs i64 
    local          mm_blockpcl.do_multassign.d u64 
    local          mm_blockpcl.do_multassign.i i64 
    procentry                 
    push           mm_blockpcl.do_multassign.a u64 
    push           40         
    pushptroff                u32 1 0
    pop            mm_blockpcl.do_multassign.nlhs i64 
    push           mm_blockpcl.do_multassign.b u64 
    pushptr                   u8 
    push           31         i64 
    jumpne         #17419     i64 
    setargs                   1 0
    push           mm_blockpcl.do_multassign.b u64 
    callproc       &mm_blockpcl.evalunit 
    push           mm_blockpcl.do_multassign.b u64 
    push           16         
    pushptroff                u64 1 0
    pushptr                   u8 
    push           3          i64 
    jumpeq         #17420     i64 
    setargs                   2 0
    push           0          u64 
    push           "multassign from fn: not simple fn" u64 
    callproc       &mm_support.gerror 
#17420: 
    push           mm_blockpcl.do_multassign.b u64 
    push           16         
    pushptroff                u64 1 0
    push           16         
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_multassign.d u64 
    push           mm_blockpcl.do_multassign.d u64 
    push           116        
    pushptroff                u8 1 0
    pop            mm_blockpcl.do_multassign.nrhs i64 
    push           mm_blockpcl.do_multassign.a u64 
    pushptr                   u8 
    push           19         i64 
    jumpeq         #17421     i64 
    push           mm_blockpcl.do_multassign.a u64 
    push           8          
    pushptroff                u64 1 0
    jumpfalse      #17422     u64 
    setargs                   2 0
    push           0          u64 
    push           "MULTASS?" u64 
    callproc       &mm_support.gerror 
#17422: 
    push           1          i64 
    pop            mm_blockpcl.do_multassign.nlhs i64 
    jump           #17423     
#17421: 
    push           mm_blockpcl.do_multassign.a u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_multassign.a u64 
#17423: 
    jump           #17424     
#17419: 
    push           mm_blockpcl.do_multassign.b u64 
    push           40         
    pushptroff                u32 1 0
    pop            mm_blockpcl.do_multassign.nrhs i64 
    setargs                   1 0
    push           mm_blockpcl.do_multassign.b u64 
    push           16         
    pushptroff                u64 1 0
    callproc       &mm_blockpcl.pushrhs 
    push           mm_blockpcl.do_multassign.a u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_multassign.a u64 
#17424: 
#17425: 
    push           mm_blockpcl.do_multassign.a u64 
    pushptr                   u8 
    switch         #17426     3 120
    opnd           #17427     
#17426: 
    switchlabel    #17428     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17429     
    switchlabel    #17427     
    switchlabel    #17429     
    switchlabel    #17429     
    switchlabel    #17427     
    switchlabel    #17430     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17431     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17432     
    switchlabel    #17432     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17432     
    switchlabel    #17427     
    switchlabel    #17432     
    switchlabel    #17427     
    switchlabel    #17427     
    switchlabel    #17432     
    endswitch                 
#17428: 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.do_multassign.a u64 
    callfn         &mm_genpcl.genmem_u u64 
    push           23         i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #17433     
#17429: 
    setargs                   2 0
    push           0          u64 
    push           mm_blockpcl.do_multassign.a u64 
    callproc       &mm_blockpcl.evalref 
    setargs                   2 0
    setargs                   2 0
    push           9          i64 
    push           0          i64 
    callfn         &pc_libpcl.pcl_genint u64 
    push           35         i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #17433     
#17431: 
    setargs                   1 0
    push           mm_blockpcl.do_multassign.a u64 
    push           16         
    pushptroff                u64 1 0
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    setargs                   2 0
    push           9          i64 
    push           0          i64 
    callfn         &pc_libpcl.pcl_genint u64 
    push           35         i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #17433     
#17432: 
    setargs                   2 0
    push           0          u64 
    push           mm_blockpcl.do_multassign.a u64 
    callproc       &mm_blockpcl.evalref 
    setargs                   2 0
    setargs                   2 0
    push           9          i64 
    push           0          i64 
    callfn         &pc_libpcl.pcl_genint u64 
    push           35         i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #17433     
#17430: 
    setargs                   2 0
    push           0          u64 
    push           mm_blockpcl.do_multassign.a u64 
    push           16         
    pushptroff                u64 1 0
    callproc       &mm_blockpcl.evalref 
    setargs                   1 0
    push           mm_blockpcl.do_multassign.a u64 
    push           24         
    pushptroff                u64 1 0
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    push           0          u64 
    push           38         i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #17433     
#17427: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &mm_tables.jtagnames 
    push           mm_blockpcl.do_multassign.a u64 
    pushptr                   u8 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           0          u64 
    push           "Bad mult assign element" u64 
    callproc       &mm_support.gerror 
#17433: 
    setargs                   1 0
    push           mm_blockpcl.do_multassign.a u64 
    callproc       &mm_genpcl.setmode_u 
    push           mm_blockpcl.do_multassign.a u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_multassign.a u64 
#17434: 
    push           mm_blockpcl.do_multassign.a u64 
    push           0          u64 
    jumpne         #17425     u64 
#17435: 
    setargs                   1 0
    push           mm_blockpcl.do_multassign.b u64 
    callfn         &mm_lib.getprocretmodes u64 
    pop            mm_blockpcl.do_multassign.d u64 
#17436: 
    push           mm_blockpcl.do_multassign.nlhs i64 
    push           1          i64 
    add                       i64 
    pop            mm_blockpcl.do_multassign.i i64 
    push           mm_blockpcl.do_multassign.i i64 
    push           mm_blockpcl.do_multassign.nrhs i64 
    jumpgt         #17437     i64 
#17438: 
    setargs                   2 0
    push           0          u64 
    push           43         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           &mm_decls.ttmult 
    push           mm_blockpcl.do_multassign.d u64 
    push           72         
    pushptroff                i32 1 0
    pushptroff                u64 8 0
    push           mm_blockpcl.do_multassign.i i64 
    pushptroff                i32 4 -4
    callproc       &mm_genpcl.setmode 
#17439: 
    forup          #17438     i64 1
    opnd           mm_blockpcl.do_multassign.i 
    opnd           mm_blockpcl.do_multassign.nrhs 
#17437: 
#17440: 
    retproc                   
End


Proc mm_blockpcl.do_recase:
    param          mm_blockpcl.do_recase.p u64 
    param          mm_blockpcl.do_recase.a u64 
    local          mm_blockpcl.do_recase.q u64 
    local          mm_blockpcl.do_recase.wt u64 
    local          mm_blockpcl.do_recase.w u64 
    local          mm_blockpcl.do_recase.destlab i64 
    local          mm_blockpcl.do_recase.casevalue i64 
    procentry                 
    push           mm_blockpcl.casedepth i64 
    push           0          i64 
    jumpne         #17442     i64 
    setargs                   2 0
    push           0          u64 
    push           "recase outside case stmt" u64 
    callproc       &mm_support.gerror 
#17442: 
    push           mm_blockpcl.do_recase.a u64 
    jumpfalse      #17443     u64 
    push           mm_blockpcl.do_recase.a u64 
    push           16         
    pushptroff                i64 1 0
    pop            mm_blockpcl.do_recase.casevalue i64 
    jump           #17444     
#17443: 
    setargs                   1 0
    push           &mm_blockpcl.caseelse 
    push           mm_blockpcl.casedepth i64 
    pushptroff                i64 8 -8
    callproc       &mm_blockpcl.genjumpl 
#17444: 
    push           &mm_blockpcl.casestmt 
    push           mm_blockpcl.casedepth i64 
    pushptroff                u64 8 -8
    pop            mm_blockpcl.do_recase.q u64 
    push           0          i64 
    pop            mm_blockpcl.do_recase.destlab i64 
    push           mm_blockpcl.do_recase.q u64 
    push           24         
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_recase.wt u64 
    jump           #17445     
#17446: 
    push           mm_blockpcl.do_recase.wt u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_recase.w u64 
    jump           #17447     
#17448: 
    push           mm_blockpcl.do_recase.w u64 
    pushptr                   u8 
    push           1          i64 
    jumpne         #17449     i64 
    push           &mm_decls.ttisinteger 
    push           mm_blockpcl.do_recase.w u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    jumpfalse      #17449     i64 
    push           mm_blockpcl.do_recase.w u64 
    push           16         
    pushptroff                i64 1 0
    push           mm_blockpcl.do_recase.casevalue i64 
    jumpne         #17449     i64 
    push           mm_blockpcl.do_recase.w u64 
    push           40         
    pushptroff                i32 1 0
    pop            mm_blockpcl.do_recase.destlab i64 
    jump           #17450     
#17449: 
    push           mm_blockpcl.do_recase.w u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_recase.w u64 
#17447: 
    push           mm_blockpcl.do_recase.w u64 
    jumptrue       #17448     u64 
#17451: 
    push           mm_blockpcl.do_recase.wt u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_recase.wt u64 
#17445: 
    push           mm_blockpcl.do_recase.wt u64 
    jumptrue       #17446     u64 
#17450: 
    push           mm_blockpcl.do_recase.destlab i64 
    push           0          i64 
    jumpne         #17452     i64 
    setargs                   1 0
    push           &mm_blockpcl.caseelse 
    push           mm_blockpcl.casedepth i64 
    pushptroff                i64 8 -8
    callproc       &mm_blockpcl.genjumpl 
    jump           #17453     
#17452: 
    setargs                   1 0
    push           mm_blockpcl.do_recase.destlab i64 
    callproc       &mm_blockpcl.genjumpl 
#17453: 
#17454: 
    retproc                   
End


Proc mm_blockpcl.do_empty:
    param          mm_blockpcl.do_empty.p u64 
    param          mm_blockpcl.do_empty.a u64 
    procentry                 
    setargs                   1 0
    push           mm_blockpcl.do_empty.a u64 
    callproc       &mm_blockpcl.evallv 
    setargs                   2 0
    push           0          u64 
    push           88         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.do_empty.a u64 
    callproc       &mm_genpcl.setmode_u 
#17456: 
    retproc                   
End


Proc mm_blockpcl.do_typeconst:
    param          mm_blockpcl.do_typeconst.p u64 
    procentry                 
    setargs                   2 0
    push           4          i64 
    push           mm_blockpcl.do_typeconst.p u64 
    push           16         
    pushptroff                i64 1 0
    callproc       &mm_genpcl.genpushint 
#17458: 
    retproc                   
End


Proc mm_blockpcl.condtopclop: i64
    param          mm_blockpcl.condtopclop.cond i64 
    param          mm_blockpcl.condtopclop.baseop i64 
    procentry                 
    push           mm_blockpcl.condtopclop.baseop i64 
    push           mm_blockpcl.condtopclop.cond i64 
    push           117        i64 
    sub                       i64 
    add                       i64 
    setret                    i64 
    jump           #17460     
#17460: 
    retfn                     i64 
End


Proc pc_win64.pcl_genmcl:: i64
    param          pc_win64.pcl_genmcl.optim i64 
    procentry                 
    setargs                   0 0
    callproc       &pc_libpcl.fixuppcl 
    setargs                   1 0
    push           pc_win64.pcl_genmcl.optim i64 
    callproc       &pc_genmcl.genmcl 
    push           1          i64 
    setret                    i64 
    jump           #17462     
#17462: 
    retfn                     i64 
End


Proc pc_win64.pcl_writeasmfile:: i64
    param          pc_win64.pcl_writeasmfile.filename u64 
    param          pc_win64.pcl_writeasmfile.optim i64 
    procentry                 
    setargs                   1 0
    push           pc_win64.pcl_writeasmfile.optim i64 
    callproc       &pc_win64.pcl_genmcl 
    setargs                   1 0
    push           pc_win64.pcl_writeasmfile.filename u64 
    callproc       &pc_win64.writeasmfile 
    push           1          i64 
    setret                    i64 
    jump           #17464     
#17464: 
    retfn                     i64 
End


Proc pc_win64.pcl_getasmstring:: u64
    param          pc_win64.pcl_getasmstring.optim i64 
    local          pc_win64.pcl_getasmstring.asmstr u64 
    procentry                 
    setargs                   1 0
    push           pc_win64.pcl_getasmstring.optim i64 
    callproc       &pc_win64.pcl_genmcl 
    setargs                   0 0
    callfn         &pc_libmcl.getmclstr u64 
    pop            pc_win64.pcl_getasmstring.asmstr u64 
    push           pc_win64.pcl_getasmstring.asmstr u64 
    pushptr                   u64 
    setret                    u64 
    jump           #17466     
#17466: 
    retfn                     u64 
End


Proc pc_win64.pcl_writeexefile:: i64
    param          pc_win64.pcl_writeexefile.filename u64 
    param          pc_win64.pcl_writeexefile.optim i64 
    procentry                 
    setargs                   1 0
    push           pc_win64.pcl_writeexefile.optim i64 
    callproc       &pc_win64.pcl_genmcl 
    setargs                   3 0
    push           0          i64 
    push           pc_win64.pcl_writeexefile.optim i64 
    push           pc_win64.pcl_writeexefile.filename u64 
    callfn         &pc_win64.writeexefile i64 
    setret                    i64 
    jump           #17468     
#17468: 
    retfn                     i64 
End


Proc pc_win64.pcl_writedllfile:: i64
    param          pc_win64.pcl_writedllfile.filename u64 
    param          pc_win64.pcl_writedllfile.optim i64 
    procentry                 
    setargs                   1 0
    push           pc_win64.pcl_writedllfile.optim i64 
    callproc       &pc_win64.pcl_genmcl 
    setargs                   3 0
    push           1          i64 
    push           pc_win64.pcl_writedllfile.optim i64 
    push           pc_win64.pcl_writedllfile.filename u64 
    callfn         &pc_win64.writeexefile i64 
    setret                    i64 
    jump           #17470     
#17470: 
    retfn                     i64 
End


Proc pc_win64.writeexefile: i64
    param          pc_win64.writeexefile.filename u64 
    param          pc_win64.writeexefile.optim i64 
    param          pc_win64.writeexefile.gendll i64 
    local          pc_win64.writeexefile.asmfilename block:300 
    local          pc_win64.writeexefile.str block:300 
    procentry                 
    setargs                   0 0
    callproc       &pc_genss.genss 
    setargs                   0 0
    callproc       &pc_writeexe.initsectiontable 
    setargs                   3 0
    push           pc_win64.writeexefile.gendll i64 
    push           pc_win64.writeexefile.filename u64 
    push           0          u64 
    callproc       &pc_writeexe.genexe 
    setargs                   2 0
    push           pc_win64.writeexefile.gendll i64 
    push           pc_win64.writeexefile.filename u64 
    callproc       &pc_writeexe.writeexe 
    push           1          i64 
    setret                    i64 
    jump           #17472     
#17472: 
    retfn                     i64 
End


Proc pc_win64.writeasmfile:
    param          pc_win64.writeasmfile.filename u64 
    local          pc_win64.writeasmfile.asmstr u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.getmclstr u64 
    pop            pc_win64.writeasmfile.asmstr u64 
    setargs                   2 0
    push           pc_win64.writeasmfile.asmstr u64 
    push           pc_win64.writeasmfile.filename u64 
    callproc       &pc_libmcl.writegsfile 
    setargs                   1 0
    push           pc_win64.writeasmfile.asmstr u64 
    callproc       &mlibp.gs_free 
#17474: 
    retproc                   
End


Proc pc_win64.pcl_readrts:: i64
    param          pc_win64.pcl_readrts.filename u64 
    procentry                 
    push           pc_libpcl.maxuserlabel i64 
    jumpfalse      #17476     i64 
    push           pc_libpcl.maxuserlabel i64 
    pop            pc_libpcl.labelnooffset i64 
    jump           #17477     
#17476: 
    push           &pc_libpcl.labelno 
    incrload                  i64 1
    pop            pc_libpcl.labelnooffset i64 
#17477: 
    setargs                   0 0
    callfn         &pc_parse.parse_readrts i64 
    jumptrue       #17478     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "No RTS file found" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           0          i64 
    setret                    i64 
    jump           #17479     
#17478: 
    push           1          i64 
    setret                    i64 
    jump           #17479     
#17479: 
    retfn                     i64 
End


Proc pc_win64.pcl_endprog::
    param          pc_win64.pcl_endprog.fixup i64 
    param          pc_win64.pcl_endprog.dorts i64 
    procentry                 
    push           pc_win64.pcl_endprog.dorts i64 
    jumpfalse      #17481     i64 
    setargs                   1 0
    push           "rts.pcl"  u64 
    callproc       &pc_win64.pcl_readrts 
#17481: 
    setargs                   1 0
    push           pc_win64.pcl_endprog.fixup i64 
    callproc       &pc_libpcl.pcl_end 
#17482: 
    retproc                   
End


Proc pc_win64.pcl_showss::
    param          pc_win64.pcl_showss.filename u64 
    param          pc_win64.pcl_showss.fexe i64 
    local          pc_win64.pcl_showss.ssstr u64 
    procentry                 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_init 
    setargs                   1 0
    push           pc_win64.pcl_showss.fexe i64 
    callfn         &pc_writess.writessdata u64 
    pop            pc_win64.pcl_showss.ssstr u64 
    setargs                   2 0
    push           pc_win64.pcl_showss.ssstr u64 
    push           pc_win64.pcl_showss.filename u64 
    callproc       &pc_libmcl.writegsfile 
#17484: 
    retproc                   
End


Proc pc_win64.pcl_writeclangfile::
    param          pc_win64.pcl_writeclangfile.filename u64 
    procentry                 
#17486: 
    retproc                   
End


Proc pc_writeexe.writeexe:
    param          pc_writeexe.writeexe.outfile u64 
    param          pc_writeexe.writeexe.dodll i64 
    local          pc_writeexe.writeexe.header block:20 
    local          pc_writeexe.writeexe.optheader block:240 
    local          pc_writeexe.writeexe.offset i64 
    local          pc_writeexe.writeexe.i i64 
    local          pc_writeexe.writeexe.aa i64 
    procentry                 
    push           pc_writeexe.writeexe.outfile u64 
    pop            pc_writeexe.dllfilename u64 
    push           pc_writeexe.writeexe.dodll i64 
    pop            pc_writeexe.isdll i64 
    setargs                   1 0
    push           pc_writeexe.filesize i64 
    callfn         &mlibp.pcm_allocz u64 
    store          pc_writeexe.dataptr u64 
    pop            pc_writeexe.datastart u64 
    setargs                   0 0
    callproc       &pc_writeexe.writedosstub 
    setargs                   0 0
    callproc       &pc_writeexe.writepesig 
    setargs                   0 0
    callproc       &pc_writeexe.writefileheader 
    setargs                   0 0
    callproc       &pc_writeexe.writeoptheader 
#17488: 
    push           1          i64 
    pop            pc_writeexe.writeexe.i i64 
    push           pc_writeexe.nsections i64 
    push           1          i64 
    jumplt         #17489     i64 
#17490: 
    setargs                   1 0
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.writeexe.i i64 
    addrefoff                 block:72 72 -72
    callproc       &pc_writeexe.writesectionheader 
#17491: 
    forup          #17490     i64 1
    opnd           pc_writeexe.writeexe.i 
    opnd           pc_writeexe.nsections 
#17489: 
    setargs                   1 0
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           32         
    pushptroff                i64 1 0
    callproc       &pc_writeexe.writepadding 
#17492: 
    push           1          i64 
    pop            pc_writeexe.writeexe.i i64 
    push           pc_writeexe.nsections i64 
    push           1          i64 
    jumplt         #17493     i64 
#17494: 
    setargs                   1 0
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.writeexe.i i64 
    addrefoff                 block:72 72 -72
    callproc       &pc_writeexe.writesectiondata 
#17495: 
    forup          #17494     i64 1
    opnd           pc_writeexe.writeexe.i 
    opnd           pc_writeexe.nsections 
#17493: 
    setargs                   3 0
    push           pc_writeexe.dataptr u64 
    push           pc_writeexe.datastart u64 
    subref                    i64 1
    push           pc_writeexe.datastart u64 
    push           pc_writeexe.writeexe.outfile u64 
    callfn         &mlibp.writefile i64 
    push           0          i64 
    jumpne         #17496     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Error writing exe file (possibly still running)" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#17496: 
#17497: 
    retproc                   
End


Proc pc_writeexe.genexe:
    param          pc_writeexe.genexe.entrypoint u64 
    param          pc_writeexe.genexe.outfile u64 
    param          pc_writeexe.genexe.dodll i64 
    procentry                 
    push           pc_writeexe.genexe.outfile u64 
    pop            pc_writeexe.dllfilename u64 
    push           pc_writeexe.genexe.dodll i64 
    pop            pc_writeexe.isdll i64 
    setargs                   0 0
    callproc       &pc_writeexe.setuplibfiles 
    startmult                 
    push           pc_writeexe.isdll i64 
    jumpfalse      #17499     i64 
    push           1713635328 i64 
    resetmult                 
    jump           #17500     
#17499: 
    push           4194304    i64 
    endmult                   
#17500: 
    pop            pc_writeexe.imagebase i64 
    push           pc_writeexe.genexe.entrypoint u64 
    pop            pc_writeexe.userentrypoint u64 
    setargs                   0 0
    callproc       &pc_writeexe.loadlibs 
    setargs                   0 0
    callproc       &pc_writeexe.scanst 
    setargs                   0 0
    callproc       &pc_writeexe.getoffsets 
    setargs                   1 0
    push           &pc_writeexe.sectiontable 
    push           0          
    addrefoff                 u8 1 0
    callproc       &pc_writeexe.relocdata 
    setargs                   1 0
    push           &pc_writeexe.sectiontable 
    push           72         
    addrefoff                 u8 1 0
    callproc       &pc_writeexe.relocdata 
#17501: 
    retproc                   
End


Proc pc_writeexe.loadlibs:
    local          pc_writeexe.loadlibs.i i64 
    local          pc_writeexe.loadlibs.hinst i64 
    local          pc_writeexe.loadlibs.file u64 
    local          pc_writeexe.loadlibs.filename block:300 
    procentry                 
#17503: 
    push           1          i64 
    pop            pc_writeexe.loadlibs.i i64 
    push           pci_mcl.npsearchlibs i64 
    push           1          i64 
    jumplt         #17504     i64 
#17505: 
    setargs                   2 0
    push           &pci_mcl.psearchlibs 
    push           pc_writeexe.loadlibs.i i64 
    pushptroff                u64 8 -8
    push           &pc_writeexe.loadlibs.filename 
    callproc       &strcpy    
    setargs                   1 0
    push           &pc_writeexe.loadlibs.filename 
    callfn         &mwindowsp.os_getdllinst i64 
    pop            pc_writeexe.loadlibs.hinst i64 
    push           pc_writeexe.loadlibs.hinst i64 
    push           0          i64 
    jumpne         #17506     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "File:"    u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pc_writeexe.loadlibs.filename 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Can't load search lib" u64 
    callproc       &pci_mcl.axerror 
#17506: 
    push           pc_writeexe.loadlibs.hinst i64 
    push           &pc_writeexe.libinsttable 
    push           pc_writeexe.loadlibs.i i64 
    popptroff                 i64 8 -8
    setargs                   1 0
    push           &pc_writeexe.loadlibs.filename 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &pc_writeexe.libinstnames 
    push           pc_writeexe.loadlibs.i i64 
    popptroff                 u64 8 -8
#17507: 
    forup          #17505     i64 1
    opnd           pc_writeexe.loadlibs.i 
    opnd           pci_mcl.npsearchlibs 
#17504: 
#17508: 
    retproc                   
End


Proc pc_writeexe.initsectiontable:
    procentry                 
    push           ".text"    u64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           8          
    popptroff                 u64 1 0
    push           1          i64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           16         
    popptroff                 i64 1 0
    push           pci_mcl.ss_code u64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           0          
    popptroff                 u64 1 0
    setargs                   1 0
    push           pci_mcl.ss_code u64 
    callfn         &pc_genss.bufferlength i64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           40         
    popptroff                 i64 1 0
    setargs                   1 0
    push           pci_mcl.ss_idata u64 
    callfn         &pc_genss.bufferlength i64 
    push           0          i64 
    jumpne         #17510     i64 
    setargs                   2 0
    push           0          i64 
    push           pci_mcl.ss_idata u64 
    callproc       &pc_genss.addqword 
#17510: 
    push           ".data"    u64 
    push           &pc_writeexe.sectiontable 
    push           2          i64 
    addrefoff                 block:72 72 -72
    push           8          
    popptroff                 u64 1 0
    push           2          i64 
    push           &pc_writeexe.sectiontable 
    push           2          i64 
    addrefoff                 block:72 72 -72
    push           16         
    popptroff                 i64 1 0
    push           pci_mcl.ss_idata u64 
    push           &pc_writeexe.sectiontable 
    push           2          i64 
    addrefoff                 block:72 72 -72
    push           0          
    popptroff                 u64 1 0
    setargs                   1 0
    push           pci_mcl.ss_idata u64 
    callfn         &pc_genss.bufferlength i64 
    push           &pc_writeexe.sectiontable 
    push           2          i64 
    addrefoff                 block:72 72 -72
    push           40         
    popptroff                 i64 1 0
    setargs                   2 0
    push           512        i64 
    push           &pc_writeexe.sectiontable 
    push           2          i64 
    addrefoff                 block:72 72 -72
    push           40         
    pushptroff                i64 1 0
    callfn         &pc_writeexe.roundtoblock i64 
    push           &pc_writeexe.sectiontable 
    push           2          i64 
    addrefoff                 block:72 72 -72
    push           24         
    popptroff                 i64 1 0
    push           pci_mcl.ss_nidatarelocs i64 
    push           &pc_writeexe.sectiontable 
    push           2          i64 
    addrefoff                 block:72 72 -72
    push           64         
    popptroff                 i64 1 0
    push           pci_mcl.ss_idatarelocs u64 
    push           &pc_writeexe.sectiontable 
    push           2          i64 
    addrefoff                 block:72 72 -72
    push           56         
    popptroff                 u64 1 0
    push           pci_mcl.ss_zdatalen i64 
    push           0          i64 
    jumpne         #17511     i64 
    push           16         i64 
    pop            pci_mcl.ss_zdatalen i64 
#17511: 
    push           ".bss"     u64 
    push           &pc_writeexe.sectiontable 
    push           3          i64 
    addrefoff                 block:72 72 -72
    push           8          
    popptroff                 u64 1 0
    push           3          i64 
    push           &pc_writeexe.sectiontable 
    push           3          i64 
    addrefoff                 block:72 72 -72
    push           16         
    popptroff                 i64 1 0
    push           pci_mcl.ss_zdatalen i64 
    push           &pc_writeexe.sectiontable 
    push           3          i64 
    addrefoff                 block:72 72 -72
    push           40         
    popptroff                 i64 1 0
    setargs                   2 0
    push           512        i64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           40         
    pushptroff                i64 1 0
    callfn         &pc_writeexe.roundtoblock i64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           24         
    popptroff                 i64 1 0
    push           pci_mcl.ss_ncoderelocs i64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           64         
    popptroff                 i64 1 0
    push           pci_mcl.ss_coderelocs u64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           56         
    popptroff                 u64 1 0
    push           ".idata"   u64 
    push           &pc_writeexe.sectiontable 
    push           4          i64 
    addrefoff                 block:72 72 -72
    push           8          
    popptroff                 u64 1 0
    push           5          i64 
    push           &pc_writeexe.sectiontable 
    push           4          i64 
    addrefoff                 block:72 72 -72
    push           16         
    popptroff                 i64 1 0
    push           0          i64 
    push           &pc_writeexe.sectiontable 
    push           4          i64 
    addrefoff                 block:72 72 -72
    push           40         
    popptroff                 i64 1 0
    push           0          i64 
    push           &pc_writeexe.sectiontable 
    push           4          i64 
    addrefoff                 block:72 72 -72
    push           24         
    popptroff                 i64 1 0
    push           4          i64 
    pop            pc_writeexe.nsections i64 
#17512: 
    retproc                   
End


Proc pc_writeexe.roundtoblock: i64
    param          pc_writeexe.roundtoblock.n i64 
    param          pc_writeexe.roundtoblock.align i64 
    procentry                 
    push           pc_writeexe.roundtoblock.n i64 
    push           pc_writeexe.roundtoblock.align i64 
    push           1          i64 
    sub                       i64 
    iand                      i64 
    push           0          i64 
    jumpne         #17514     i64 
    push           pc_writeexe.roundtoblock.n i64 
    setret                    i64 
    jump           #17515     
#17514: 
    push           pc_writeexe.roundtoblock.n i64 
    push           pc_writeexe.roundtoblock.align i64 
    push           pc_writeexe.roundtoblock.n i64 
    push           pc_writeexe.roundtoblock.align i64 
    push           1          i64 
    sub                       i64 
    iand                      i64 
    sub                       i64 
    add                       i64 
    setret                    i64 
    jump           #17515     
#17515: 
    retfn                     i64 
End


Proc pc_writeexe.extractlibname: u64
    param          pc_writeexe.extractlibname.name u64 
    param          pc_writeexe.extractlibname.libno u64 
    param          pc_writeexe.extractlibname.moduleno i64 
    local          pc_writeexe.extractlibname.s u64 
    local          pc_writeexe.extractlibname.name2 u64 
    local          pc_writeexe.extractlibname.str block:256 
    local          pc_writeexe.extractlibname.str2 block:256 
    local          pc_writeexe.extractlibname.i i64 
    local          pc_writeexe.extractlibname.n i64 
    procentry                 
    push           0          u64 
    pop            pc_writeexe.extractlibname.name2 u64 
!reenter::
#17517: 
    push           pc_writeexe.extractlibname.name u64 
    pop            pc_writeexe.extractlibname.s u64 
    push           0          i64 
    push           pc_writeexe.extractlibname.libno u64 
    popptr                    i64 
    jump           #17518     
#17519: 
    push           pc_writeexe.extractlibname.s u64 
    pushptr                   u8 
    push           46         u64 
    jumpne         #17520     u64 
    setargs                   3 0
    push           pc_writeexe.extractlibname.s u64 
    push           pc_writeexe.extractlibname.name u64 
    subref                    u64 1
    push           pc_writeexe.extractlibname.name u64 
    push           &pc_writeexe.extractlibname.str 
    callproc       &memcpy    
    push           0          u64 
    push           &pc_writeexe.extractlibname.str 
    push           pc_writeexe.extractlibname.s u64 
    push           pc_writeexe.extractlibname.name u64 
    subref                    i64 1
    popptroff                 u8 1 0
    setargs                   2 0
    push           ".dll"     u64 
    push           &pc_writeexe.extractlibname.str 
    callproc       &strcat    
#17521: 
    push           1          i64 
    pop            pc_writeexe.extractlibname.i i64 
    push           pc_writeexe.ndlls i64 
    push           1          i64 
    jumplt         #17522     i64 
#17523: 
    setargs                   2 0
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.extractlibname.i i64 
    addrefoff                 block:48 48 -48
    pushptr                   u64 
    push           &pc_writeexe.extractlibname.str 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #17524     i64 
    push           pc_writeexe.extractlibname.i i64 
    push           pc_writeexe.extractlibname.libno u64 
    popptr                    i64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.extractlibname.libno u64 
    pushptr                   i64 
    addrefoff                 block:48 48 -48
    push           8          
    addrefoff                 u64 1 0
    incr                      i64 1
    startmult                 
    push           pc_writeexe.extractlibname.name2 u64 
    jumpfalse      #17525     u64 
    push           pc_writeexe.extractlibname.name2 u64 
    resetmult                 
    jump           #17526     
#17525: 
    push           pc_writeexe.extractlibname.s u64 
    push           1          i64 
    addrefoff                 u64 1 0
    endmult                   
#17526: 
    setret                    u64 
    jump           #17527     
#17524: 
#17528: 
    forup          #17523     i64 1
    opnd           pc_writeexe.extractlibname.i 
    opnd           pc_writeexe.ndlls 
#17522: 
    push           pc_writeexe.ndlls i64 
    push           50         i64 
    jumplt         #17529     i64 
    setargs                   1 0
    push           "Too many libs" u64 
    callproc       &pci_mcl.axerror 
#17529: 
    push           &pc_writeexe.ndlls 
    incrload                  i64 1
    push           pc_writeexe.extractlibname.libno u64 
    popptr                    i64 
    setargs                   1 0
    push           &pc_writeexe.extractlibname.str 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.extractlibname.libno u64 
    pushptr                   i64 
    addrefoff                 block:48 48 -48
    push           0          
    popptroff                 u64 1 0
    push           1          i64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.extractlibname.libno u64 
    pushptr                   i64 
    addrefoff                 block:48 48 -48
    push           8          
    popptroff                 i64 1 0
    startmult                 
    push           pc_writeexe.extractlibname.name2 u64 
    jumpfalse      #17530     u64 
    push           pc_writeexe.extractlibname.name2 u64 
    resetmult                 
    jump           #17531     
#17530: 
    push           pc_writeexe.extractlibname.s u64 
    push           1          i64 
    addrefoff                 u64 1 0
    endmult                   
#17531: 
    setret                    u64 
    jump           #17527     
#17520: 
    push           &pc_writeexe.extractlibname.s 
    incr                      u64 1
#17518: 
    push           pc_writeexe.extractlibname.s u64 
    pushptr                   u8 
    jumptrue       #17519     u64 
#17532: 
#17533: 
    push           1          i64 
    pop            pc_writeexe.extractlibname.i i64 
    push           pci_mcl.npsearchlibs i64 
    push           1          i64 
    jumplt         #17534     i64 
#17535: 
    setargs                   2 0
    push           pc_writeexe.extractlibname.name u64 
    push           &pc_writeexe.libinsttable 
    push           pc_writeexe.extractlibname.i i64 
    pushptroff                i64 8 -8
    callfn         &mwindowsp.os_getdllprocaddr u64 
    jumpfalse      #17536     u64 
    push           pc_writeexe.extractlibname.i i64 
    pop            pc_writeexe.extractlibname.n i64 
    jump           #17537     
#17536: 
#17538: 
    forup          #17535     i64 1
    opnd           pc_writeexe.extractlibname.i 
    opnd           pci_mcl.npsearchlibs 
#17534: 
    setargs                   1 0
    push           "Can't find external function" u64 
    callproc       &pci_mcl.axerror 
#17537: 
    push           &pc_writeexe.libnotable 
    push           pc_writeexe.extractlibname.n i64 
    pushptroff                i64 8 -8
    push           pc_writeexe.extractlibname.libno u64 
    storeptr                  i64 
    jumpfalse      #17539     i64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.extractlibname.libno u64 
    pushptr                   i64 
    addrefoff                 block:48 48 -48
    push           8          
    addrefoff                 u64 1 0
    incr                      i64 1
    push           pc_writeexe.extractlibname.name u64 
    setret                    u64 
    jump           #17527     
#17539: 
    setargs                   2 0
    push           &pci_mcl.psearchlibs 
    push           pc_writeexe.extractlibname.n i64 
    pushptroff                u64 8 -8
    push           &pc_writeexe.extractlibname.str 
    callproc       &strcpy    
    setargs                   2 0
    push           ".dll"     u64 
    push           &pc_writeexe.extractlibname.str 
    callproc       &strcat    
    push           pc_writeexe.ndlls i64 
    push           50         i64 
    jumplt         #17540     i64 
    setargs                   1 0
    push           "2:Too many libs" u64 
    callproc       &pci_mcl.axerror 
#17540: 
    push           &pc_writeexe.ndlls 
    incrload                  i64 1
    push           pc_writeexe.extractlibname.libno u64 
    popptr                    i64 
    setargs                   1 0
    push           &pc_writeexe.extractlibname.str 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.extractlibname.libno u64 
    pushptr                   i64 
    addrefoff                 block:48 48 -48
    push           0          
    popptroff                 u64 1 0
    push           1          i64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.extractlibname.libno u64 
    pushptr                   i64 
    addrefoff                 block:48 48 -48
    push           8          
    popptroff                 i64 1 0
    push           pc_writeexe.extractlibname.libno u64 
    pushptr                   i64 
    push           &pc_writeexe.libnotable 
    push           pc_writeexe.extractlibname.n i64 
    popptroff                 i64 8 -8
    push           pc_writeexe.extractlibname.name u64 
    setret                    u64 
    jump           #17527     
#17527: 
    retfn                     u64 
End


Proc pc_writeexe.scanst:
    local          pc_writeexe.scanst.i i64 
    local          pc_writeexe.scanst.libno i64 
    local          pc_writeexe.scanst.d u64 
    local          pc_writeexe.scanst.name u64 
    local          pc_writeexe.scanst.libname u64 
    local          pc_writeexe.scanst.dname u64 
    local          pc_writeexe.scanst.basename u64 
    procentry                 
#17542: 
    push           1          i64 
    pop            pc_writeexe.scanst.i i64 
    push           pci_mcl.ss_nsymbols i64 
    push           1          i64 
    jumplt         #17543     i64 
#17544: 
    push           pci_mcl.ss_symboltable u64 
    push           pc_writeexe.scanst.i i64 
    pushptroff                u64 8 -8
    pop            pc_writeexe.scanst.d u64 
    push           pc_writeexe.scanst.d u64 
    push           46         
    pushptroff                u16 1 0
    push           1          i64 
    dotindex                  i64 
    jumpfalse      #17545     u64 
    push           pc_writeexe.nimports i64 
    push           3000       i64 
    jumplt         #17546     i64 
    setargs                   1 0
    push           "genexe: Too many imports" u64 
    callproc       &pci_mcl.axerror 
#17546: 
    push           &pc_writeexe.nimports 
    incr                      i64 1
    push           pc_writeexe.scanst.d u64 
    pushptr                   u64 
    pop            pc_writeexe.scanst.dname u64 
    setargs                   3 0
    push           1          i64 
    push           &pc_writeexe.scanst.libno 
    push           pc_writeexe.scanst.dname u64 
    callfn         &pc_writeexe.extractlibname u64 
    pop            pc_writeexe.scanst.name u64 
    push           pc_writeexe.scanst.libno i64 
    push           &pc_writeexe.importtable 
    push           pc_writeexe.nimports i64 
    addrefoff                 block:48 48 -48
    push           8          
    popptroff                 i64 1 0
    push           pc_writeexe.scanst.name u64 
    push           &pc_writeexe.importtable 
    push           pc_writeexe.nimports i64 
    addrefoff                 block:48 48 -48
    push           16         
    popptroff                 u64 1 0
    push           pc_writeexe.scanst.d u64 
    push           &pc_writeexe.importtable 
    push           pc_writeexe.nimports i64 
    addrefoff                 block:48 48 -48
    push           0          
    popptroff                 u64 1 0
    push           pc_writeexe.nimports i64 
    push           pc_writeexe.scanst.d u64 
    push           44         
    popptroff                 i16 1 0
    jump           #17547     
#17545: 
    push           pc_writeexe.scanst.d u64 
    push           46         
    pushptroff                u16 1 0
    push           3          i64 
    dotindex                  i64 
    jumpfalse      #17548     u64 
    setargs                   1 0
    push           pc_writeexe.scanst.d u64 
    pushptr                   u64 
    callfn         &pc_libpcl.getbasename u64 
    pop            pc_writeexe.scanst.basename u64 
    push           pc_writeexe.userentrypoint u64 
    jumpfalse      #17549     u64 
    setargs                   2 0
    push           pc_writeexe.userentrypoint u64 
    push           pc_writeexe.scanst.basename u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #17550     i64 
    push           pc_writeexe.scanst.d u64 
    pop            pc_writeexe.stentrypoint u64 
#17550: 
    jump           #17551     
#17549: 
    setargs                   2 0
    push           "main"     u64 
    push           pc_writeexe.scanst.basename u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #17552     i64 
    push           pc_writeexe.isdll i64 
    jumptrue       #17552     i64 
    push           pc_writeexe.scanst.d u64 
    pop            pc_writeexe.stentrypoint u64 
    jump           #17553     
#17552: 
    setargs                   2 0
    push           "start"    u64 
    push           pc_writeexe.scanst.basename u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #17554     i64 
    push           pc_writeexe.isdll i64 
    jumptrue       #17554     i64 
    push           pc_writeexe.scanst.d u64 
    pop            pc_writeexe.stentrypoint2 u64 
    jump           #17553     
#17554: 
    setargs                   2 0
    push           "dllmain"  u64 
    push           pc_writeexe.scanst.basename u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #17555     i64 
    push           pc_writeexe.isdll i64 
    jumpfalse      #17555     i64 
    push           pc_writeexe.scanst.d u64 
    pop            pc_writeexe.stentrypoint u64 
#17555: 
#17553: 
#17551: 
    push           pc_writeexe.nexports i64 
    push           1000       i64 
    jumplt         #17556     i64 
    setargs                   1 0
    push           "gendll: Too many exports" u64 
    callproc       &pci_mcl.axerror 
#17556: 
    push           &pc_writeexe.nexports 
    incr                      i64 1
    push           pc_writeexe.scanst.d u64 
    push           &pc_writeexe.exporttable 
    push           pc_writeexe.nexports i64 
    addrefoff                 block:16 16 -16
    push           0          
    popptroff                 u64 1 0
    push           pc_writeexe.scanst.dname u64 
    push           &pc_writeexe.exporttable 
    push           pc_writeexe.nexports i64 
    addrefoff                 block:16 16 -16
    push           8          
    popptroff                 u64 1 0
#17548: 
#17547: 
#17557: 
    forup          #17544     i64 1
    opnd           pc_writeexe.scanst.i 
    opnd           pci_mcl.ss_nsymbols 
#17543: 
#17558: 
    retproc                   
End


Proc pc_writeexe.relocdata:
    param          pc_writeexe.relocdata.s u64 
    local          pc_writeexe.relocdata.u u64 
    local          pc_writeexe.relocdata.r u64 
    local          pc_writeexe.relocdata.p u64 
    local          pc_writeexe.relocdata.p32 u64 
    local          pc_writeexe.relocdata.p64 u64 
    local          pc_writeexe.relocdata.d u64 
    local          pc_writeexe.relocdata.offset i64 
    local          pc_writeexe.relocdata.index i64 
    local          pc_writeexe.relocdata.thunkoffset i64 
    local          pc_writeexe.relocdata.iatoffset i64 
    procentry                 
    setargs                   2 0
    push           0          i64 
    push           pc_writeexe.relocdata.s u64 
    pushptr                   u64 
    callfn         &pc_genss.bufferelemptr u64 
    pop            pc_writeexe.relocdata.p u64 
    push           pc_writeexe.relocdata.s u64 
    push           56         
    pushptroff                u64 1 0
    pop            pc_writeexe.relocdata.r u64 
    jump           #17560     
#17561: 
    push           pci_mcl.ss_symboltable u64 
    push           pc_writeexe.relocdata.r u64 
    push           24         
    pushptroff                i64 1 0
    pushptroff                u64 8 -8
    pop            pc_writeexe.relocdata.d u64 
    push           pc_writeexe.relocdata.d u64 
    push           44         
    pushptroff                i16 1 0
    pop            pc_writeexe.relocdata.index i64 
    push           &pc_writeexe.importtable 
    push           pc_writeexe.relocdata.index i64 
    addrefoff                 block:48 48 -48
    push           40         
    pushptroff                i64 1 0
    pop            pc_writeexe.relocdata.thunkoffset i64 
    push           pc_writeexe.relocdata.r u64 
    push           8          
    pushptroff                i64 1 0
    push           4          i64 
    casejumpeq     #17562     i64 0
    push           2          i64 
    casejumpeq     #17563     i64 0
    push           1          i64 
    casejumpeq     #17563     i64 0
    popstack                  i64 
    jump           #17564     
#17562: 
    push           pc_writeexe.relocdata.d u64 
    push           46         
    pushptroff                u16 1 0
    push           1          i64 
    dotindex                  i64 
    jumptrue       #17565     u64 
    setargs                   1 0
    push           "rel32/not imported" u64 
    callproc       &pci_mcl.axerror 
#17565: 
    push           pc_writeexe.relocdata.thunkoffset i64 
    push           pc_writeexe.relocdata.r u64 
    push           16         
    pushptroff                i64 1 0
    sub                       i64 
    push           4          i64 
    sub                       i64 
    push           pc_writeexe.relocdata.p u64 
    push           pc_writeexe.relocdata.r u64 
    push           16         
    pushptroff                i64 1 0
    popptroff                 u32 1 0
    jump           #17566     
#17563: 
    push           pc_writeexe.relocdata.d u64 
    push           46         
    pushptroff                u16 1 0
    push           1          i64 
    dotindex                  i64 
    jumpfalse      #17567     u64 
    push           pc_writeexe.imagebase i64 
    push           pc_writeexe.relocdata.thunkoffset i64 
    add                       i64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           48         
    pushptroff                i64 1 0
    add                       i64 
    push           pc_writeexe.relocdata.p u64 
    push           pc_writeexe.relocdata.r u64 
    push           16         
    pushptroff                i64 1 0
    popptroff                 u32 1 0
    jump           #17568     
#17567: 
    push           0          u64 
    pop            pc_writeexe.relocdata.u u64 
    push           pc_writeexe.relocdata.d u64 
    push           30         
    pushptroff                u8 1 0
    push           3          i64 
    casejumpeq     #17569     i64 0
    push           2          i64 
    casejumpeq     #17570     i64 0
    push           1          i64 
    casejumpeq     #17571     i64 0
    popstack                  i64 
    jump           #17572     
#17569: 
    push           &pc_writeexe.sectiontable 
    push           144        
    addrefoff                 u8 1 0
    pop            pc_writeexe.relocdata.u u64 
    jump           #17573     
#17570: 
    push           &pc_writeexe.sectiontable 
    push           72         
    addrefoff                 u8 1 0
    pop            pc_writeexe.relocdata.u u64 
    jump           #17573     
#17571: 
    push           &pc_writeexe.sectiontable 
    push           0          
    addrefoff                 u8 1 0
    pop            pc_writeexe.relocdata.u u64 
    jump           #17573     
#17572: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           pc_writeexe.relocdata.d u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_writeexe.relocdata.d u64 
    push           30         
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "RELOCDATA/SEG?" u64 
    callproc       &pci_mcl.axerror 
#17573: 
    push           pc_writeexe.relocdata.p u64 
    push           pc_writeexe.relocdata.r u64 
    push           16         
    pushptroff                i64 1 0
    addrefoff                 u64 1 0
    pop            pc_writeexe.relocdata.p32 u64 
    push           pc_writeexe.relocdata.r u64 
    push           8          
    pushptroff                i64 1 0
    push           2          i64 
    jumpne         #17574     i64 
    push           pc_writeexe.relocdata.p32 u64 
    pushptr                   u32 
    push           pc_writeexe.relocdata.u u64 
    push           48         
    pushptroff                i64 1 0
    add                       i64 
    push           pc_writeexe.imagebase i64 
    add                       i64 
    push           pc_writeexe.relocdata.p32 u64 
    popptr                    u32 
    jump           #17575     
#17574: 
    push           pc_writeexe.relocdata.p32 u64 
    pop            pc_writeexe.relocdata.p64 u64 
    push           pc_writeexe.relocdata.p64 u64 
    pushptr                   i64 
    push           pc_writeexe.relocdata.u u64 
    push           48         
    pushptroff                i64 1 0
    add                       i64 
    push           pc_writeexe.imagebase i64 
    add                       u64 
    push           pc_writeexe.relocdata.p64 u64 
    popptr                    u64 
#17575: 
#17568: 
    jump           #17566     
#17564: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pc_objdecls.relocnames 
    push           pc_writeexe.relocdata.r u64 
    push           8          
    pushptroff                i64 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Can't do this rel type" u64 
    callproc       &pci_mcl.axerror 
#17566: 
    push           pc_writeexe.relocdata.r u64 
    pushptr                   u64 
    pop            pc_writeexe.relocdata.r u64 
#17560: 
    push           pc_writeexe.relocdata.r u64 
    jumptrue       #17561     u64 
#17576: 
#17577: 
    retproc                   
End


Proc pc_writeexe.getbaserelocs:
    param          pc_writeexe.getbaserelocs.s u64 
    local          pc_writeexe.getbaserelocs.u u64 
    local          pc_writeexe.getbaserelocs.r u64 
    local          pc_writeexe.getbaserelocs.p u64 
    local          pc_writeexe.getbaserelocs.d u64 
    local          pc_writeexe.getbaserelocs.index i64 
    procentry                 
    setargs                   2 0
    push           0          i64 
    push           pc_writeexe.getbaserelocs.s u64 
    pushptr                   u64 
    callfn         &pc_genss.bufferelemptr u64 
    pop            pc_writeexe.getbaserelocs.p u64 
    push           pc_writeexe.getbaserelocs.s u64 
    push           56         
    pushptroff                u64 1 0
    pop            pc_writeexe.getbaserelocs.r u64 
    jump           #17579     
#17580: 
    push           pci_mcl.ss_symboltable u64 
    push           pc_writeexe.getbaserelocs.r u64 
    push           24         
    pushptroff                i64 1 0
    pushptroff                u64 8 -8
    pop            pc_writeexe.getbaserelocs.d u64 
    push           pc_writeexe.getbaserelocs.r u64 
    push           8          
    pushptroff                i64 1 0
    push           2          i64 
    casejumpeq     #17581     i64 0
    push           1          i64 
    casejumpeq     #17581     i64 0
    popstack                  i64 
    jump           #17582     
#17581: 
    push           pc_writeexe.getbaserelocs.d u64 
    push           46         
    pushptroff                u16 1 0
    push           1          i64 
    dotindex                  i64 
    jumpfalse      #17583     u64 
    jump           #17584     
#17583: 
    push           pc_writeexe.getbaserelocs.d u64 
    push           30         
    pushptroff                u8 1 0
    push           3          i64 
    casejumpeq     #17585     i64 0
    push           2          i64 
    casejumpeq     #17586     i64 0
    push           1          i64 
    casejumpeq     #17587     i64 0
    popstack                  i64 
    jump           #17588     
#17585: 
    push           &pc_writeexe.sectiontable 
    push           144        
    addrefoff                 u8 1 0
    pop            pc_writeexe.getbaserelocs.u u64 
    jump           #17589     
#17586: 
    push           &pc_writeexe.sectiontable 
    push           72         
    addrefoff                 u8 1 0
    pop            pc_writeexe.getbaserelocs.u u64 
    jump           #17589     
#17587: 
    push           &pc_writeexe.sectiontable 
    push           0          
    addrefoff                 u8 1 0
    pop            pc_writeexe.getbaserelocs.u u64 
    jump           #17589     
#17588: 
#17589: 
    setargs                   2 0
    push           pc_writeexe.getbaserelocs.r u64 
    push           8          
    pushptroff                i64 1 0
    push           pc_writeexe.getbaserelocs.u u64 
    push           48         
    pushptroff                i64 1 0
    push           pc_writeexe.getbaserelocs.r u64 
    push           16         
    pushptroff                i64 1 0
    add                       i64 
    callproc       &pc_writeexe.newbasereloc 
#17584: 
    jump           #17590     
#17582: 
#17590: 
    push           pc_writeexe.getbaserelocs.r u64 
    pushptr                   u64 
    pop            pc_writeexe.getbaserelocs.r u64 
#17579: 
    push           pc_writeexe.getbaserelocs.r u64 
    jumptrue       #17580     u64 
#17591: 
#17592: 
    retproc                   
End


Proc pc_writeexe.writerecordx:
    param          pc_writeexe.writerecordx.r u64 
    param          pc_writeexe.writerecordx.length i64 
    procentry                 
    setargs                   3 0
    push           pc_writeexe.writerecordx.length u64 
    push           pc_writeexe.writerecordx.r u64 
    push           pc_writeexe.dataptr u64 
    callproc       &memcpy    
    push           &pc_writeexe.dataptr 
    push           pc_writeexe.writerecordx.length i64 
    addrefoffto               u64 1 0
#17594: 
    retproc                   
End


Proc pc_writeexe.writedosstub:
    procentry                 
    setargs                   2 0
    push           128        i64 
    push           &pc_writeexe.writedosstub.stubdata 
    callproc       &pc_writeexe.writerecordx 
#17596: 
    retproc                   
End


Proc pc_writeexe.writepesig:
    procentry                 
    push           80         i64 
    push           &pc_writeexe.dataptr 
    loadincr                  u64 1
    popptr                    u8 
    push           69         i64 
    push           &pc_writeexe.dataptr 
    loadincr                  u64 1
    popptr                    u8 
    push           0          i64 
    push           &pc_writeexe.dataptr 
    loadincr                  u64 1
    popptr                    u8 
    push           0          i64 
    push           &pc_writeexe.dataptr 
    loadincr                  u64 1
    popptr                    u8 
#17598: 
    retproc                   
End


Proc pc_writeexe.writepadding:
    param          pc_writeexe.writepadding.offset i64 
    procentry                 
    push           pc_writeexe.datastart u64 
    push           pc_writeexe.writepadding.offset i64 
    addrefoff                 u64 1 0
    pop            pc_writeexe.dataptr u64 
#17600: 
    retproc                   
End


Proc pc_writeexe.writefileheader:
    local          pc_writeexe.writefileheader.header block:20 
    procentry                 
    push           &pc_writeexe.writefileheader.header 
    clear                     block:20 
    push           34404      i64 
    push           &pc_writeexe.writefileheader.header 
    push           0          
    popptroff                 u16 1 0
    push           pc_writeexe.nsections i64 
    push           &pc_writeexe.writefileheader.header 
    push           2          
    popptroff                 u16 1 0
    push           240        i64 
    push           &pc_writeexe.writefileheader.header 
    push           16         
    popptroff                 u16 1 0
    push           559        i64 
    push           &pc_writeexe.writefileheader.header 
    push           18         
    popptroff                 u16 1 0
    setargs                   2 0
    push           20         i64 
    push           &pc_writeexe.writefileheader.header 
    callproc       &pc_writeexe.writerecordx 
#17602: 
    retproc                   
End


Proc pc_writeexe.writeoptheader:
    local          pc_writeexe.writeoptheader.header block:240 
    procentry                 
    push           &pc_writeexe.writeoptheader.header 
    clear                     block:240 
    push           523        i64 
    push           &pc_writeexe.writeoptheader.header 
    push           0          
    popptroff                 u16 1 0
    push           1          i64 
    push           &pc_writeexe.writeoptheader.header 
    push           2          
    popptroff                 u8 1 0
    push           0          i64 
    push           &pc_writeexe.writeoptheader.header 
    push           3          
    popptroff                 u8 1 0
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           24         
    pushptroff                i64 1 0
    push           &pc_writeexe.writeoptheader.header 
    push           4          
    popptroff                 u32 1 0
    push           &pc_writeexe.sectiontable 
    push           2          i64 
    addrefoff                 block:72 72 -72
    push           24         
    pushptroff                i64 1 0
    push           &pc_writeexe.sectiontable 
    push           4          i64 
    addrefoff                 block:72 72 -72
    push           24         
    pushptroff                i64 1 0
    add                       i64 
    push           &pc_writeexe.writeoptheader.header 
    push           8          
    popptroff                 u32 1 0
    setargs                   2 0
    push           512        i64 
    push           &pc_writeexe.sectiontable 
    push           3          i64 
    addrefoff                 block:72 72 -72
    push           40         
    pushptroff                i64 1 0
    callfn         &pc_writeexe.roundtoblock i64 
    push           &pc_writeexe.writeoptheader.header 
    push           12         
    popptroff                 u32 1 0
    push           pc_writeexe.stentrypoint u64 
    push           0          u64 
    jumpne         #17604     u64 
    push           pc_writeexe.stentrypoint2 u64 
    pop            pc_writeexe.stentrypoint u64 
#17604: 
    push           pc_writeexe.stentrypoint u64 
    push           0          u64 
    jumpne         #17605     u64 
    push           pc_writeexe.userentrypoint u64 
    jumpfalse      #17606     u64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           pc_writeexe.userentrypoint u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "User entry point not found" u64 
    callproc       &pci_mcl.axerror 
    jump           #17607     
#17606: 
    push           pc_writeexe.isdll i64 
    jumptrue       #17608     i64 
    setargs                   1 0
    push           "Entry point not found: main or start" u64 
    callproc       &pci_mcl.axerror 
#17608: 
#17607: 
    jump           #17609     
#17605: 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           48         
    pushptroff                i64 1 0
    push           pc_writeexe.stentrypoint u64 
    push           32         
    pushptroff                i32 1 0
    add                       i64 
    push           &pc_writeexe.writeoptheader.header 
    push           16         
    popptroff                 u32 1 0
#17609: 
    push           4096       i64 
    push           &pc_writeexe.writeoptheader.header 
    push           20         
    popptroff                 u32 1 0
    push           pc_writeexe.imagebase u64 
    push           &pc_writeexe.writeoptheader.header 
    push           24         
    popptroff                 u64 1 0
    push           4096       i64 
    push           &pc_writeexe.writeoptheader.header 
    push           32         
    popptroff                 u32 1 0
    push           512        i64 
    push           &pc_writeexe.writeoptheader.header 
    push           36         
    popptroff                 u32 1 0
    push           4          i64 
    push           &pc_writeexe.writeoptheader.header 
    push           40         
    popptroff                 u16 1 0
    push           0          i64 
    push           &pc_writeexe.writeoptheader.header 
    push           42         
    popptroff                 u16 1 0
    push           5          i64 
    push           &pc_writeexe.writeoptheader.header 
    push           48         
    popptroff                 u16 1 0
    push           2          i64 
    push           &pc_writeexe.writeoptheader.header 
    push           50         
    popptroff                 u16 1 0
    push           pc_writeexe.imagesize i64 
    push           &pc_writeexe.writeoptheader.header 
    push           56         
    popptroff                 u32 1 0
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           32         
    pushptroff                i64 1 0
    push           &pc_writeexe.writeoptheader.header 
    push           60         
    popptroff                 u32 1 0
    push           3          i64 
    push           &pc_writeexe.writeoptheader.header 
    push           68         
    popptroff                 u16 1 0
    push           4194304    u64 
    push           &pc_writeexe.writeoptheader.header 
    push           72         
    popptroff                 u64 1 0
    push           2097152    u64 
    push           &pc_writeexe.writeoptheader.header 
    push           80         
    popptroff                 u64 1 0
    push           1048576    u64 
    push           &pc_writeexe.writeoptheader.header 
    push           88         
    popptroff                 u64 1 0
    push           4096       u64 
    push           &pc_writeexe.writeoptheader.header 
    push           96         
    popptroff                 u64 1 0
    push           16         i64 
    push           &pc_writeexe.writeoptheader.header 
    push           108        
    popptroff                 u32 1 0
    push           &pc_writeexe.sectiontable 
    push           4          i64 
    addrefoff                 block:72 72 -72
    push           48         
    pushptroff                i64 1 0
    push           &pc_writeexe.writeoptheader.header 
    push           120        
    popptroff                 u32 1 0
    push           &pc_writeexe.sectiontable 
    push           4          i64 
    addrefoff                 block:72 72 -72
    push           40         
    pushptroff                i64 1 0
    push           pc_writeexe.exportdirvirtsize i64 
    sub                       i64 
    push           pc_writeexe.blockdirvirtsize i64 
    sub                       i64 
    push           &pc_writeexe.writeoptheader.header 
    push           124        
    popptroff                 u32 1 0
    push           pc_writeexe.isdll i64 
    jumpfalse      #17610     i64 
    push           64         i64 
    push           &pc_writeexe.writeoptheader.header 
    push           70         
    popptroff                 u16 1 0
    push           pc_writeexe.exportdirvirtaddr i64 
    push           &pc_writeexe.writeoptheader.header 
    push           112        
    popptroff                 u32 1 0
    push           pc_writeexe.exportdirvirtsize i64 
    push           &pc_writeexe.writeoptheader.header 
    push           116        
    popptroff                 u32 1 0
    push           pc_writeexe.blockdirvirtaddr i64 
    push           &pc_writeexe.writeoptheader.header 
    push           152        
    popptroff                 u32 1 0
    push           pc_writeexe.blockdirvirtsize i64 
    push           &pc_writeexe.writeoptheader.header 
    push           156        
    popptroff                 u32 1 0
#17610: 
    push           pc_writeexe.fileiatoffset i64 
    push           &pc_writeexe.writeoptheader.header 
    push           208        
    popptroff                 u32 1 0
    push           pc_writeexe.fileiatsize i64 
    push           &pc_writeexe.writeoptheader.header 
    push           212        
    popptroff                 u32 1 0
    setargs                   2 0
    push           240        i64 
    push           &pc_writeexe.writeoptheader.header 
    callproc       &pc_writeexe.writerecordx 
#17611: 
    retproc                   
End


Proc pc_writeexe.writesectionheader:
    param          pc_writeexe.writesectionheader.s u64 
    local          pc_writeexe.writesectionheader.sheader block:40 
    local          pc_writeexe.writesectionheader.aa i64 
    procentry                 
    push           &pc_writeexe.writesectionheader.sheader 
    clear                     block:40 
    setargs                   2 0
    push           pc_writeexe.writesectionheader.s u64 
    push           8          
    pushptroff                u64 1 0
    push           &pc_writeexe.writesectionheader.sheader 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcpy    
    push           pc_writeexe.writesectionheader.s u64 
    push           40         
    pushptroff                i64 1 0
    push           &pc_writeexe.writesectionheader.sheader 
    push           8          
    popptroff                 u32 1 0
    push           pc_writeexe.writesectionheader.s u64 
    push           48         
    pushptroff                i64 1 0
    push           &pc_writeexe.writesectionheader.sheader 
    push           12         
    popptroff                 u32 1 0
    push           pc_writeexe.writesectionheader.s u64 
    push           32         
    pushptroff                i64 1 0
    push           &pc_writeexe.writesectionheader.sheader 
    push           20         
    popptroff                 u32 1 0
    push           pc_writeexe.writesectionheader.s u64 
    push           24         
    pushptroff                i64 1 0
    push           &pc_writeexe.writesectionheader.sheader 
    push           16         
    popptroff                 u32 1 0
    push           pc_writeexe.writesectionheader.s u64 
    push           16         
    pushptroff                i64 1 0
    push           3          i64 
    casejumpeq     #17613     i64 0
    push           2          i64 
    casejumpeq     #17614     i64 0
    push           1          i64 
    casejumpeq     #17615     i64 0
    push           5          i64 
    casejumpeq     #17616     i64 0
    popstack                  i64 
    jump           #17617     
#17613: 
    push           3226468480 i64 
    pop            pc_writeexe.writesectionheader.aa i64 
    push           pc_writeexe.writesectionheader.aa i64 
    push           &pc_writeexe.writesectionheader.sheader 
    push           36         
    popptroff                 u32 1 0
    jump           #17618     
#17614: 
    push           3226468416 i64 
    pop            pc_writeexe.writesectionheader.aa i64 
    push           pc_writeexe.writesectionheader.aa i64 
    push           &pc_writeexe.writesectionheader.sheader 
    push           36         
    popptroff                 u32 1 0
    jump           #17618     
#17615: 
    push           1615855648 i64 
    pop            pc_writeexe.writesectionheader.aa i64 
    push           pc_writeexe.writesectionheader.aa i64 
    push           &pc_writeexe.writesectionheader.sheader 
    push           36         
    popptroff                 u32 1 0
    jump           #17618     
#17616: 
    push           3224371264 i64 
    pop            pc_writeexe.writesectionheader.aa i64 
    push           pc_writeexe.writesectionheader.aa i64 
    push           &pc_writeexe.writesectionheader.sheader 
    push           36         
    popptroff                 u32 1 0
    jump           #17618     
#17617: 
#17618: 
    setargs                   2 0
    push           40         i64 
    push           &pc_writeexe.writesectionheader.sheader 
    callproc       &pc_writeexe.writerecordx 
#17619: 
    retproc                   
End


Proc pc_writeexe.writesectiondata:
    param          pc_writeexe.writesectiondata.s u64 
    procentry                 
    push           pc_writeexe.writesectiondata.s u64 
    push           16         
    pushptroff                i64 1 0
    push           5          i64 
    casejumpeq     #17621     i64 0
    push           3          i64 
    casejumpeq     #17622     i64 0
    popstack                  i64 
    jump           #17623     
#17621: 
    setargs                   2 0
    push           pc_writeexe.writesectiondata.s u64 
    push           40         
    pushptroff                i64 1 0
    push           pc_writeexe.writesectiondata.s u64 
    pushptr                   u64 
    callproc       &pc_writeexe.writerecordx 
    push           pc_writeexe.writesectiondata.s u64 
    push           24         
    pushptroff                i64 1 0
    push           pc_writeexe.writesectiondata.s u64 
    push           40         
    pushptroff                i64 1 0
    jumple         #17624     i64 
    push           &pc_writeexe.dataptr 
    push           pc_writeexe.writesectiondata.s u64 
    push           24         
    pushptroff                i64 1 0
    push           pc_writeexe.writesectiondata.s u64 
    push           40         
    pushptroff                i64 1 0
    sub                       i64 
    addrefoffto               u64 1 0
#17624: 
    jump           #17625     
#17622: 
    jump           #17625     
#17623: 
    setargs                   2 0
    push           pc_writeexe.writesectiondata.s u64 
    push           24         
    pushptroff                i64 1 0
    setargs                   2 0
    push           0          i64 
    push           pc_writeexe.writesectiondata.s u64 
    pushptr                   u64 
    callfn         &pc_genss.bufferelemptr u64 
    callproc       &pc_writeexe.writerecordx 
#17625: 
#17626: 
    retproc                   
End


Proc pc_writeexe.getoffsets:
    local          pc_writeexe.getoffsets.fileoffset i64 
    local          pc_writeexe.getoffsets.imageoffset i64 
    local          pc_writeexe.getoffsets.i i64 
    local          pc_writeexe.getoffsets.diroffset i64 
    local          pc_writeexe.getoffsets.impdirno i64 
    local          pc_writeexe.getoffsets.hinttableoffset i64 
    local          pc_writeexe.getoffsets.j i64 
    local          pc_writeexe.getoffsets.n i64 
    local          pc_writeexe.getoffsets.codesize i64 
    local          pc_writeexe.getoffsets.length i64 
    local          pc_writeexe.getoffsets.thunkoffset i64 
    local          pc_writeexe.getoffsets.offset i64 
    local          pc_writeexe.getoffsets.dirstartoffset i64 
    local          pc_writeexe.getoffsets.pcode u64 
    local          pc_writeexe.getoffsets.pimpdir u64 
    local          pc_writeexe.getoffsets.pdir u64 
    local          pc_writeexe.getoffsets.paddr u64 
    local          pc_writeexe.getoffsets.pname u64 
    local          pc_writeexe.getoffsets.iatoffset i64 
    local          pc_writeexe.getoffsets.phint u64 
    local          pc_writeexe.getoffsets.pextra u64 
    local          pc_writeexe.getoffsets.xxx i64 
    local          pc_writeexe.getoffsets.av_1 i64 
    local          pc_writeexe.getoffsets.thunkptr u64 
    local          pc_writeexe.getoffsets.codebase u64 
    local          pc_writeexe.getoffsets.thunkaddr i64 
    procentry                 
    push           392        i64 
    pop            pc_writeexe.getoffsets.fileoffset i64 
    push           &pc_writeexe.getoffsets.fileoffset 
    push           40         i64 
    push           pc_writeexe.nsections i64 
    mul                       i64 
    addto                     i64 
    setargs                   2 0
    push           512        i64 
    push           pc_writeexe.getoffsets.fileoffset i64 
    callfn         &pc_writeexe.roundtoblock i64 
    pop            pc_writeexe.getoffsets.fileoffset i64 
    push           4096       i64 
    pop            pc_writeexe.getoffsets.imageoffset i64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           40         
    pushptroff                i64 1 0
    pop            pc_writeexe.getoffsets.codesize i64 
    setargs                   2 0
    push           pc_writeexe.getoffsets.codesize i64 
    push           pci_mcl.ss_code u64 
    callfn         &pc_genss.bufferelemptr u64 
    pop            pc_writeexe.getoffsets.pcode u64 
    jump           #17628     
#17629: 
    push           144        i64 
    push           &pc_writeexe.getoffsets.pcode 
    loadincr                  u64 1
    popptr                    u8 
    push           &pc_writeexe.getoffsets.codesize 
    incr                      i64 1
#17628: 
    push           pc_writeexe.getoffsets.codesize i64 
    push           7          i64 
    iand                      i64 
    jumptrue       #17629     i64 
#17630: 
    push           pc_writeexe.getoffsets.codesize i64 
    pop            pc_writeexe.getoffsets.thunkoffset i64 
    push           &pc_writeexe.getoffsets.codesize 
    push           pc_writeexe.nimports i64 
    push           8          i64 
    mul                       i64 
    addto                     i64 
    push           pc_writeexe.getoffsets.codesize i64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           40         
    popptroff                 i64 1 0
    setargs                   2 0
    push           512        i64 
    push           pc_writeexe.getoffsets.codesize i64 
    callfn         &pc_writeexe.roundtoblock i64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           24         
    popptroff                 i64 1 0
    setargs                   2 0
    push           pc_writeexe.getoffsets.codesize i64 
    push           pc_writeexe.getoffsets.thunkoffset i64 
    sub                       i64 
    push           16         i64 
    add                       i64 
    push           pci_mcl.ss_code u64 
    callproc       &pc_genss.buffercheck 
#17631: 
    push           1          i64 
    pop            pc_writeexe.getoffsets.i i64 
    push           pc_writeexe.nsections i64 
    push           1          i64 
    jumplt         #17632     i64 
#17633: 
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:72 72 -72
    push           16         
    pushptroff                i64 1 0
    push           3          i64 
    jumpeq         #17634     i64 
    push           pc_writeexe.getoffsets.fileoffset i64 
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:72 72 -72
    push           32         
    popptroff                 i64 1 0
#17634: 
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:72 72 -72
    push           16         
    pushptroff                i64 1 0
    push           3          i64 
    jumpeq         #17635     i64 
    setargs                   2 0
    push           512        i64 
    push           pc_writeexe.getoffsets.fileoffset i64 
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:72 72 -72
    push           40         
    pushptroff                i64 1 0
    add                       i64 
    callfn         &pc_writeexe.roundtoblock i64 
    pop            pc_writeexe.getoffsets.fileoffset i64 
#17635: 
    push           pc_writeexe.getoffsets.imageoffset i64 
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:72 72 -72
    push           48         
    popptroff                 i64 1 0
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:72 72 -72
    push           16         
    pushptroff                i64 1 0
    push           5          i64 
    jumpne         #17636     i64 
    push           pc_writeexe.getoffsets.imageoffset i64 
    pop            pc_writeexe.getoffsets.diroffset i64 
    push           pc_writeexe.getoffsets.i i64 
    pop            pc_writeexe.getoffsets.impdirno i64 
#17636: 
    setargs                   2 0
    push           4096       i64 
    push           pc_writeexe.getoffsets.imageoffset i64 
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:72 72 -72
    push           40         
    pushptroff                i64 1 0
    add                       i64 
    callfn         &pc_writeexe.roundtoblock i64 
    pop            pc_writeexe.getoffsets.imageoffset i64 
#17637: 
    forup          #17633     i64 1
    opnd           pc_writeexe.getoffsets.i 
    opnd           pc_writeexe.nsections 
#17632: 
    push           pc_writeexe.isdll i64 
    jumpfalse      #17638     i64 
    setargs                   1 0
    push           &pc_writeexe.sectiontable 
    push           0          
    addrefoff                 u8 1 0
    callproc       &pc_writeexe.getbaserelocs 
    setargs                   1 0
    push           &pc_writeexe.sectiontable 
    push           72         
    addrefoff                 u8 1 0
    callproc       &pc_writeexe.getbaserelocs 
#17638: 
    push           &pc_writeexe.getoffsets.diroffset 
    push           pc_writeexe.ndlls i64 
    push           1          i64 
    add                       i64 
    push           20         i64 
    mul                       i64 
    addto                     i64 
#17639: 
    push           1          i64 
    pop            pc_writeexe.getoffsets.i i64 
    push           pc_writeexe.ndlls i64 
    push           1          i64 
    jumplt         #17640     i64 
#17641: 
    push           pc_writeexe.getoffsets.diroffset i64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           16         
    popptroff                 i64 1 0
    push           &pc_writeexe.getoffsets.diroffset 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           8          
    pushptroff                i64 1 0
    push           1          i64 
    add                       i64 
    push           8          i64 
    mul                       i64 
    addto                     i64 
#17642: 
    forup          #17641     i64 1
    opnd           pc_writeexe.getoffsets.i 
    opnd           pc_writeexe.ndlls 
#17640: 
    push           pc_writeexe.getoffsets.diroffset i64 
    pop            pc_writeexe.fileiatoffset i64 
#17643: 
    push           1          i64 
    pop            pc_writeexe.getoffsets.i i64 
    push           pc_writeexe.ndlls i64 
    push           1          i64 
    jumplt         #17644     i64 
#17645: 
    push           pc_writeexe.getoffsets.diroffset i64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           24         
    popptroff                 i64 1 0
    push           &pc_writeexe.getoffsets.diroffset 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           8          
    pushptroff                i64 1 0
    push           1          i64 
    add                       i64 
    push           8          i64 
    mul                       i64 
    addto                     i64 
#17646: 
    forup          #17645     i64 1
    opnd           pc_writeexe.getoffsets.i 
    opnd           pc_writeexe.ndlls 
#17644: 
    push           pc_writeexe.getoffsets.diroffset i64 
    push           pc_writeexe.fileiatoffset i64 
    sub                       i64 
    pop            pc_writeexe.fileiatsize i64 
    push           pc_writeexe.getoffsets.diroffset i64 
    pop            pc_writeexe.getoffsets.hinttableoffset i64 
#17647: 
    push           1          i64 
    pop            pc_writeexe.getoffsets.i i64 
    push           pc_writeexe.nimports i64 
    push           1          i64 
    jumplt         #17648     i64 
#17649: 
    setargs                   1 0
    push           &pc_writeexe.importtable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           16         
    pushptroff                u64 1 0
    callfn         &strlen    i64 
    push           3          i64 
    add                       i64 
    pop            pc_writeexe.getoffsets.length i64 
    push           pc_writeexe.getoffsets.length i64 
    push           1          i64 
    iand                      i64 
    jumpfalse      #17650     i64 
    push           &pc_writeexe.getoffsets.length 
    incr                      i64 1
#17650: 
    push           pc_writeexe.getoffsets.diroffset i64 
    push           &pc_writeexe.importtable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           24         
    popptroff                 i64 1 0
    push           &pc_writeexe.getoffsets.diroffset 
    push           pc_writeexe.getoffsets.length i64 
    addto                     i64 
#17651: 
    forup          #17649     i64 1
    opnd           pc_writeexe.getoffsets.i 
    opnd           pc_writeexe.nimports 
#17648: 
    setargs                   2 0
    push           4          i64 
    push           pc_writeexe.getoffsets.diroffset i64 
    callfn         &pc_writeexe.roundtoblock i64 
    pop            pc_writeexe.getoffsets.diroffset i64 
#17652: 
    push           1          i64 
    pop            pc_writeexe.getoffsets.i i64 
    push           pc_writeexe.ndlls i64 
    push           1          i64 
    jumplt         #17653     i64 
#17654: 
    setargs                   1 0
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    pushptr                   u64 
    callfn         &strlen    i64 
    push           1          i64 
    add                       i64 
    pop            pc_writeexe.getoffsets.length i64 
    push           pc_writeexe.getoffsets.length i64 
    push           1          i64 
    iand                      i64 
    jumpfalse      #17655     i64 
    push           &pc_writeexe.getoffsets.length 
    incr                      i64 1
#17655: 
    push           pc_writeexe.getoffsets.diroffset i64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           40         
    popptroff                 i64 1 0
    push           &pc_writeexe.getoffsets.diroffset 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           8          
    pushptroff                i64 1 0
    push           4          i64 
    mul                       i64 
    addto                     i64 
    push           pc_writeexe.getoffsets.diroffset i64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           32         
    popptroff                 i64 1 0
    push           &pc_writeexe.getoffsets.diroffset 
    push           pc_writeexe.getoffsets.length i64 
    addto                     i64 
#17656: 
    forup          #17654     i64 1
    opnd           pc_writeexe.getoffsets.i 
    opnd           pc_writeexe.ndlls 
#17653: 
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.getoffsets.impdirno i64 
    addrefoff                 block:72 72 -72
    push           48         
    pushptroff                i64 1 0
    pop            pc_writeexe.getoffsets.dirstartoffset i64 
    push           pc_writeexe.isdll i64 
    jumpfalse      #17657     i64 
    push           pc_writeexe.getoffsets.diroffset i64 
    pop            pc_writeexe.exportdirvirtaddr i64 
    push           pc_writeexe.getoffsets.diroffset i64 
    push           pc_writeexe.getoffsets.dirstartoffset i64 
    sub                       i64 
    pop            pc_writeexe.exportdiroffset i64 
    setargs                   0 0
    callfn         &pc_writeexe.getexporttablesize i64 
    pop            pc_writeexe.exportdirvirtsize i64 
    push           &pc_writeexe.getoffsets.diroffset 
    push           pc_writeexe.exportdirvirtsize i64 
    addto                     i64 
    setargs                   0 0
    callproc       &pc_writeexe.scanbaserelocs 
    push           pc_writeexe.getoffsets.diroffset i64 
    pop            pc_writeexe.blockdirvirtaddr i64 
    push           pc_writeexe.getoffsets.diroffset i64 
    push           pc_writeexe.getoffsets.dirstartoffset i64 
    sub                       i64 
    pop            pc_writeexe.blockdiroffset i64 
    push           pc_writeexe.basetablesize i64 
    pop            pc_writeexe.blockdirvirtsize i64 
    push           &pc_writeexe.getoffsets.diroffset 
    push           pc_writeexe.blockdirvirtsize i64 
    addto                     i64 
#17657: 
    push           pc_writeexe.getoffsets.diroffset i64 
    push           pc_writeexe.getoffsets.dirstartoffset i64 
    sub                       i64 
    pop            pc_writeexe.getoffsets.offset i64 
    push           pc_writeexe.getoffsets.offset i64 
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.getoffsets.impdirno i64 
    addrefoff                 block:72 72 -72
    push           40         
    popptroff                 i64 1 0
    setargs                   2 0
    push           512        i64 
    push           pc_writeexe.getoffsets.offset i64 
    callfn         &pc_writeexe.roundtoblock i64 
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.getoffsets.impdirno i64 
    addrefoff                 block:72 72 -72
    push           24         
    popptroff                 i64 1 0
    setargs                   2 0
    push           512        i64 
    push           pc_writeexe.getoffsets.fileoffset i64 
    push           pc_writeexe.getoffsets.offset i64 
    add                       i64 
    callfn         &pc_writeexe.roundtoblock i64 
    pop            pc_writeexe.filesize i64 
    setargs                   2 0
    push           4096       i64 
    push           pc_writeexe.getoffsets.imageoffset i64 
    push           pc_writeexe.getoffsets.diroffset i64 
    push           pc_writeexe.getoffsets.dirstartoffset i64 
    sub                       i64 
    add                       i64 
    callfn         &pc_writeexe.roundtoblock i64 
    pop            pc_writeexe.imagesize i64 
    setargs                   1 0
    push           pc_writeexe.getoffsets.offset i64 
    callfn         &mlibp.pcm_allocz u64 
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.getoffsets.impdirno i64 
    addrefoff                 block:72 72 -72
    push           0          
    storeptroff               u64 1 0
    pop            pc_writeexe.getoffsets.pimpdir u64 
    push           pc_writeexe.getoffsets.pimpdir u64 
    pop            pc_writeexe.getoffsets.pdir u64 
#17658: 
    push           1          i64 
    pop            pc_writeexe.getoffsets.i i64 
    push           pc_writeexe.ndlls i64 
    push           1          i64 
    jumplt         #17659     i64 
#17660: 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           16         
    pushptroff                i64 1 0
    push           pc_writeexe.getoffsets.pdir u64 
    push           0          
    popptroff                 u32 1 0
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           24         
    pushptroff                i64 1 0
    push           pc_writeexe.getoffsets.pdir u64 
    push           16         
    popptroff                 u32 1 0
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           32         
    pushptroff                i64 1 0
    push           pc_writeexe.getoffsets.pdir u64 
    push           12         
    popptroff                 u32 1 0
    push           &pc_writeexe.getoffsets.pdir 
    incr                      u64 20
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           24         
    pushptroff                i64 1 0
    pop            pc_writeexe.getoffsets.iatoffset i64 
    push           pc_writeexe.getoffsets.pimpdir u64 
    push           pc_writeexe.getoffsets.iatoffset i64 
    addrefoff                 u64 1 0
    push           pc_writeexe.getoffsets.dirstartoffset i64 
    subrefoff                 u64 1 0
    pop            pc_writeexe.getoffsets.paddr u64 
    push           pc_writeexe.getoffsets.pimpdir u64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           16         
    pushptroff                i64 1 0
    addrefoff                 u64 1 0
    push           pc_writeexe.getoffsets.dirstartoffset i64 
    subrefoff                 u64 1 0
    pop            pc_writeexe.getoffsets.pname u64 
#17661: 
    push           1          i64 
    pop            pc_writeexe.getoffsets.j i64 
    push           pc_writeexe.nimports i64 
    push           1          i64 
    jumplt         #17662     i64 
#17663: 
    push           &pc_writeexe.importtable 
    push           pc_writeexe.getoffsets.j i64 
    addrefoff                 block:48 48 -48
    push           8          
    pushptroff                i64 1 0
    push           pc_writeexe.getoffsets.i i64 
    jumpne         #17664     i64 
    push           &pc_writeexe.importtable 
    push           pc_writeexe.getoffsets.j i64 
    addrefoff                 block:48 48 -48
    push           24         
    pushptroff                i64 1 0
    push           pc_writeexe.getoffsets.paddr u64 
    storeptr                  i64 
    push           pc_writeexe.getoffsets.pname u64 
    popptr                    i64 
    push           pc_writeexe.getoffsets.iatoffset i64 
    push           &pc_writeexe.importtable 
    push           pc_writeexe.getoffsets.j i64 
    addrefoff                 block:48 48 -48
    push           32         
    popptroff                 i64 1 0
    push           &pc_writeexe.getoffsets.iatoffset 
    push           8          i64 
    addto                     i64 
    push           &pc_writeexe.getoffsets.pname 
    incr                      u64 8
    push           &pc_writeexe.getoffsets.paddr 
    incr                      u64 8
#17664: 
#17665: 
    forup          #17663     i64 1
    opnd           pc_writeexe.getoffsets.j 
    opnd           pc_writeexe.nimports 
#17662: 
#17666: 
    forup          #17660     i64 1
    opnd           pc_writeexe.getoffsets.i 
    opnd           pc_writeexe.ndlls 
#17659: 
#17667: 
    push           1          i64 
    pop            pc_writeexe.getoffsets.i i64 
    push           pc_writeexe.nimports i64 
    push           1          i64 
    jumplt         #17668     i64 
#17669: 
    push           pc_writeexe.getoffsets.pimpdir u64 
    push           &pc_writeexe.importtable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           24         
    pushptroff                i64 1 0
    addrefoff                 u64 1 0
    push           pc_writeexe.getoffsets.dirstartoffset i64 
    subrefoff                 u64 1 0
    pop            pc_writeexe.getoffsets.phint u64 
    push           &pc_writeexe.getoffsets.phint 
    push           2          i64 
    addrefoffto               u64 1 0
    setargs                   2 0
    push           &pc_writeexe.importtable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           16         
    pushptroff                u64 1 0
    push           pc_writeexe.getoffsets.phint u64 
    callproc       &strcpy    
#17670: 
    forup          #17669     i64 1
    opnd           pc_writeexe.getoffsets.i 
    opnd           pc_writeexe.nimports 
#17668: 
    push           pc_writeexe.getoffsets.dirstartoffset i64 
    pop            pc_writeexe.getoffsets.xxx i64 
#17671: 
    push           1          i64 
    pop            pc_writeexe.getoffsets.i i64 
    push           pc_writeexe.ndlls i64 
    push           1          i64 
    jumplt         #17672     i64 
#17673: 
    push           pc_writeexe.getoffsets.pimpdir u64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           40         
    pushptroff                i64 1 0
    addrefoff                 u64 1 0
    push           pc_writeexe.getoffsets.dirstartoffset i64 
    subrefoff                 u64 1 0
    pop            pc_writeexe.getoffsets.pextra u64 
#17674: 
    push           1          i64 
    pop            pc_writeexe.getoffsets.j i64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           8          
    pushptroff                i64 1 0
    pop            pc_writeexe.getoffsets.av_1 i64 
    push           pc_writeexe.getoffsets.av_1 i64 
    push           1          i64 
    jumplt         #17675     i64 
#17676: 
    push           pc_writeexe.getoffsets.xxx i64 
    push           pc_writeexe.getoffsets.pextra u64 
    popptr                    u32 
    push           &pc_writeexe.getoffsets.pextra 
    incr                      u64 4
#17677: 
    forup          #17676     i64 1
    opnd           pc_writeexe.getoffsets.j 
    opnd           pc_writeexe.getoffsets.av_1 
#17675: 
    push           &pc_writeexe.getoffsets.xxx 
    push           20         i64 
    addto                     i64 
    push           pc_writeexe.getoffsets.pimpdir u64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           32         
    pushptroff                i64 1 0
    addrefoff                 u64 1 0
    push           pc_writeexe.getoffsets.dirstartoffset i64 
    subrefoff                 u64 1 0
    pop            pc_writeexe.getoffsets.phint u64 
    setargs                   2 0
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    pushptr                   u64 
    push           pc_writeexe.getoffsets.phint u64 
    callproc       &strcpy    
#17678: 
    forup          #17673     i64 1
    opnd           pc_writeexe.getoffsets.i 
    opnd           pc_writeexe.ndlls 
#17672: 
    push           pc_writeexe.isdll i64 
    jumpfalse      #17679     i64 
    setargs                   1 0
    push           pc_writeexe.getoffsets.pimpdir u64 
    push           pc_writeexe.exportdiroffset i64 
    addrefoff                 u64 1 0
    callproc       &pc_writeexe.writeexporttable 
    setargs                   1 0
    push           pc_writeexe.getoffsets.pimpdir u64 
    push           pc_writeexe.blockdiroffset i64 
    addrefoff                 u64 1 0
    callproc       &pc_writeexe.writebasereloctable 
#17679: 
    setargs                   2 0
    push           pc_writeexe.getoffsets.thunkoffset i64 
    push           pci_mcl.ss_code u64 
    callfn         &pc_genss.bufferelemptr u64 
    pop            pc_writeexe.getoffsets.thunkptr u64 
    setargs                   2 0
    push           0          i64 
    push           pci_mcl.ss_code u64 
    callfn         &pc_genss.bufferelemptr u64 
    pop            pc_writeexe.getoffsets.codebase u64 
#17680: 
    push           1          i64 
    pop            pc_writeexe.getoffsets.i i64 
    push           pc_writeexe.nimports i64 
    push           1          i64 
    jumplt         #17681     i64 
#17682: 
    push           pc_writeexe.getoffsets.thunkptr u64 
    push           pc_writeexe.getoffsets.codebase u64 
    subref                    i64 1
    push           &pc_writeexe.importtable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           40         
    popptroff                 i64 1 0
    push           72         i64 
    push           &pc_writeexe.getoffsets.thunkptr 
    loadincr                  u64 1
    popptr                    u8 
    push           255        i64 
    push           &pc_writeexe.getoffsets.thunkptr 
    loadincr                  u64 1
    popptr                    u8 
    push           36         i64 
    push           &pc_writeexe.getoffsets.thunkptr 
    loadincr                  u64 1
    popptr                    u8 
    push           37         i64 
    push           &pc_writeexe.getoffsets.thunkptr 
    loadincr                  u64 1
    popptr                    u8 
    push           pc_writeexe.imagebase i64 
    push           &pc_writeexe.importtable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           32         
    pushptroff                i64 1 0
    add                       i64 
    pop            pc_writeexe.getoffsets.thunkaddr i64 
    push           pc_writeexe.getoffsets.thunkaddr i64 
    push           pc_writeexe.getoffsets.thunkptr u64 
    popptr                    i32 
    push           &pc_writeexe.getoffsets.thunkptr 
    push           4          i64 
    addrefoffto               u64 1 0
#17683: 
    forup          #17682     i64 1
    opnd           pc_writeexe.getoffsets.i 
    opnd           pc_writeexe.nimports 
#17681: 
#17684: 
    retproc                   
End


Proc pc_writeexe.addsearchlib:
    param          pc_writeexe.addsearchlib.name u64 
    local          pc_writeexe.addsearchlib.i i64 
    procentry                 
    setargs                   2 0
    push           ""         u64 
    push           pc_writeexe.addsearchlib.name u64 
    callfn         &mlibp.changeext u64 
    pop            pc_writeexe.addsearchlib.name u64 
#17686: 
    push           1          i64 
    pop            pc_writeexe.addsearchlib.i i64 
    push           pci_mcl.npsearchlibs i64 
    push           1          i64 
    jumplt         #17687     i64 
#17688: 
    setargs                   2 0
    push           pc_writeexe.addsearchlib.name u64 
    push           &pci_mcl.psearchlibs 
    push           pc_writeexe.addsearchlib.i i64 
    pushptroff                u64 8 -8
    callfn         &mlibp.eqstring i64 
    jumpfalse      #17689     i64 
    jump           #17690     
#17689: 
#17691: 
    forup          #17688     i64 1
    opnd           pc_writeexe.addsearchlib.i 
    opnd           pci_mcl.npsearchlibs 
#17687: 
    push           pci_mcl.npsearchlibs i64 
    push           30         i64 
    jumplt         #17692     i64 
    setargs                   1 0
    push           "Too many LIB files" u64 
    callproc       &pci_mcl.axerror 
#17692: 
    setargs                   1 0
    push           pc_writeexe.addsearchlib.name u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &pci_mcl.psearchlibs 
    push           &pci_mcl.npsearchlibs 
    incrload                  i64 1
    popptroff                 u64 8 -8
#17690: 
    retproc                   
End


Proc pc_writeexe.setuplibfiles:
    local          pc_writeexe.setuplibfiles.i i64 
    procentry                 
    push           0          i64 
    pop            pci_mcl.npsearchlibs i64 
    push           "msvcrt"   u64 
    push           &pci_mcl.psearchlibs 
    push           1          i64 
    popptroff                 u64 8 -8
    push           "gdi32"    u64 
    push           &pci_mcl.psearchlibs 
    push           2          i64 
    popptroff                 u64 8 -8
    push           "user32"   u64 
    push           &pci_mcl.psearchlibs 
    push           3          i64 
    popptroff                 u64 8 -8
    push           "kernel32" u64 
    push           &pci_mcl.psearchlibs 
    push           4          i64 
    popptroff                 u64 8 -8
    push           4          i64 
    pop            pci_mcl.npsearchlibs i64 
#17694: 
    push           1          i64 
    pop            pc_writeexe.setuplibfiles.i i64 
    push           pci_mcl.nplibfiles i64 
    push           1          i64 
    jumplt         #17695     i64 
#17696: 
    setargs                   1 0
    push           &pci_mcl.plibfiles 
    push           pc_writeexe.setuplibfiles.i i64 
    pushptroff                u64 8 0
    callproc       &pc_writeexe.addsearchlib 
#17697: 
    forup          #17696     i64 1
    opnd           pc_writeexe.setuplibfiles.i 
    opnd           pci_mcl.nplibfiles 
#17695: 
#17698: 
    push           1          i64 
    pop            pc_writeexe.setuplibfiles.i i64 
    push           pc_decls.npdllnametable i64 
    push           1          i64 
    jumplt         #17699     i64 
#17700: 
    push           &pc_decls.pdllnametable 
    push           pc_writeexe.setuplibfiles.i i64 
    pushptroff                u64 8 -8
    pushptr                   u8 
    push           36         u64 
    jumpeq         #17701     u64 
    setargs                   1 0
    push           &pc_decls.pdllnametable 
    push           pc_writeexe.setuplibfiles.i i64 
    pushptroff                u64 8 -8
    callproc       &pc_writeexe.addsearchlib 
#17701: 
#17702: 
    forup          #17700     i64 1
    opnd           pc_writeexe.setuplibfiles.i 
    opnd           pc_decls.npdllnametable 
#17699: 
#17703: 
    retproc                   
End


Proc pc_writeexe.writeexporttable:
    param          pc_writeexe.writeexporttable.pstart u64 
    local          pc_writeexe.writeexporttable.sortindex block:16000 
    local          pc_writeexe.writeexporttable.phdr u64 
    local          pc_writeexe.writeexporttable.paddrtable u64 
    local          pc_writeexe.writeexporttable.pnametable u64 
    local          pc_writeexe.writeexporttable.pordtable u64 
    local          pc_writeexe.writeexporttable.pdllname u64 
    local          pc_writeexe.writeexporttable.pnames u64 
    local          pc_writeexe.writeexporttable.addrtableoffset i64 
    local          pc_writeexe.writeexporttable.nametableoffset i64 
    local          pc_writeexe.writeexporttable.ordtableoffset i64 
    local          pc_writeexe.writeexporttable.dllnameoffset i64 
    local          pc_writeexe.writeexporttable.namesoffset i64 
    local          pc_writeexe.writeexporttable.virtoffset i64 
    local          pc_writeexe.writeexporttable.sectionno i64 
    local          pc_writeexe.writeexporttable.d u64 
    local          pc_writeexe.writeexporttable.i i64 
    procentry                 
    push           pc_writeexe.writeexporttable.pstart u64 
    pop            pc_writeexe.writeexporttable.phdr u64 
    push           1602876664 i64 
    push           pc_writeexe.writeexporttable.phdr u64 
    push           4          
    popptroff                 u32 1 0
    push           1          i64 
    push           pc_writeexe.writeexporttable.phdr u64 
    push           16         
    popptroff                 u32 1 0
    push           pc_writeexe.nexports i64 
    push           pc_writeexe.writeexporttable.phdr u64 
    push           20         
    popptroff                 u32 1 0
    push           pc_writeexe.nexports i64 
    push           pc_writeexe.writeexporttable.phdr u64 
    push           24         
    popptroff                 u32 1 0
    push           40         i64 
    pop            pc_writeexe.writeexporttable.addrtableoffset i64 
    push           pc_writeexe.writeexporttable.addrtableoffset i64 
    push           pc_writeexe.nexports i64 
    push           4          i64 
    mul                       i64 
    add                       i64 
    pop            pc_writeexe.writeexporttable.nametableoffset i64 
    push           pc_writeexe.writeexporttable.nametableoffset i64 
    push           pc_writeexe.nexports i64 
    push           4          i64 
    mul                       i64 
    add                       i64 
    pop            pc_writeexe.writeexporttable.ordtableoffset i64 
    push           pc_writeexe.writeexporttable.ordtableoffset i64 
    push           pc_writeexe.nexports i64 
    push           2          i64 
    mul                       i64 
    add                       i64 
    pop            pc_writeexe.writeexporttable.dllnameoffset i64 
    push           pc_writeexe.writeexporttable.dllnameoffset i64 
    setargs                   1 0
    push           pc_writeexe.dllfilename u64 
    callfn         &strlen    i64 
    add                       i64 
    push           1          i64 
    add                       i64 
    pop            pc_writeexe.writeexporttable.namesoffset i64 
    push           &pc_writeexe.sectiontable 
    push           4          i64 
    addrefoff                 block:72 72 -72
    push           48         
    pushptroff                i64 1 0
    push           pc_writeexe.exportdiroffset i64 
    add                       i64 
    pop            pc_writeexe.writeexporttable.virtoffset i64 
    push           pc_writeexe.writeexporttable.pstart u64 
    push           pc_writeexe.writeexporttable.addrtableoffset i64 
    addrefoff                 u64 1 0
    pop            pc_writeexe.writeexporttable.paddrtable u64 
    push           pc_writeexe.writeexporttable.pstart u64 
    push           pc_writeexe.writeexporttable.nametableoffset i64 
    addrefoff                 u64 1 0
    pop            pc_writeexe.writeexporttable.pnametable u64 
    push           pc_writeexe.writeexporttable.pstart u64 
    push           pc_writeexe.writeexporttable.ordtableoffset i64 
    addrefoff                 u64 1 0
    pop            pc_writeexe.writeexporttable.pordtable u64 
    push           pc_writeexe.writeexporttable.pstart u64 
    push           pc_writeexe.writeexporttable.dllnameoffset i64 
    addrefoff                 u64 1 0
    pop            pc_writeexe.writeexporttable.pdllname u64 
    push           pc_writeexe.writeexporttable.pstart u64 
    push           pc_writeexe.writeexporttable.namesoffset i64 
    addrefoff                 u64 1 0
    pop            pc_writeexe.writeexporttable.pnames u64 
    push           pc_writeexe.writeexporttable.dllnameoffset i64 
    push           pc_writeexe.writeexporttable.virtoffset i64 
    add                       i64 
    push           pc_writeexe.writeexporttable.phdr u64 
    push           12         
    popptroff                 u32 1 0
    push           pc_writeexe.writeexporttable.addrtableoffset i64 
    push           pc_writeexe.writeexporttable.virtoffset i64 
    add                       i64 
    push           pc_writeexe.writeexporttable.phdr u64 
    push           28         
    popptroff                 u32 1 0
    push           pc_writeexe.writeexporttable.nametableoffset i64 
    push           pc_writeexe.writeexporttable.virtoffset i64 
    add                       i64 
    push           pc_writeexe.writeexporttable.phdr u64 
    push           32         
    popptroff                 u32 1 0
    push           pc_writeexe.writeexporttable.ordtableoffset i64 
    push           pc_writeexe.writeexporttable.virtoffset i64 
    add                       i64 
    push           pc_writeexe.writeexporttable.phdr u64 
    push           36         
    popptroff                 u32 1 0
    setargs                   2 0
    push           pc_writeexe.dllfilename u64 
    push           pc_writeexe.writeexporttable.pdllname u64 
    callproc       &strcpy    
    push           pc_writeexe.nexports i64 
    push           2000       i64 
    jumple         #17705     i64 
    setargs                   1 0
    push           "Too many exports - can't sort" u64 
    callproc       &pci_mcl.axerror 
#17705: 
    setargs                   1 0
    push           &pc_writeexe.writeexporttable.sortindex 
    callproc       &pc_writeexe.sortexports 
#17706: 
    push           1          i64 
    pop            pc_writeexe.writeexporttable.i i64 
    push           pc_writeexe.nexports i64 
    push           1          i64 
    jumplt         #17707     i64 
#17708: 
    push           &pc_writeexe.exporttable 
    push           &pc_writeexe.writeexporttable.sortindex 
    push           pc_writeexe.writeexporttable.i i64 
    pushptroff                i64 8 -8
    addrefoff                 block:16 16 -16
    pushptr                   u64 
    pop            pc_writeexe.writeexporttable.d u64 
    setargs                   1 0
    push           pc_writeexe.writeexporttable.d u64 
    push           30         
    pushptroff                u8 1 0
    callfn         &pc_writeexe.getsectionno i64 
    pop            pc_writeexe.writeexporttable.sectionno i64 
    setargs                   2 0
    push           pc_writeexe.writeexporttable.d u64 
    pushptr                   u64 
    push           pc_writeexe.writeexporttable.pnames u64 
    callproc       &strcpy    
    push           pc_writeexe.writeexporttable.namesoffset i64 
    push           pc_writeexe.writeexporttable.virtoffset i64 
    add                       i64 
    push           pc_writeexe.writeexporttable.pnametable u64 
    popptr                    u32 
    push           &pc_writeexe.writeexporttable.pnametable 
    incr                      u64 4
    push           &pc_writeexe.writeexporttable.namesoffset 
    setargs                   1 0
    push           pc_writeexe.writeexporttable.d u64 
    pushptr                   u64 
    callfn         &strlen    i64 
    push           1          i64 
    add                       i64 
    addto                     i64 
    push           &pc_writeexe.writeexporttable.pnames 
    setargs                   1 0
    push           pc_writeexe.writeexporttable.d u64 
    pushptr                   u64 
    callfn         &strlen    i64 
    push           1          i64 
    add                       i64 
    addrefoffto               u64 1 0
    push           pc_writeexe.writeexporttable.d u64 
    push           32         
    pushptroff                i32 1 0
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.writeexporttable.sectionno i64 
    addrefoff                 block:72 72 -72
    push           48         
    pushptroff                i64 1 0
    add                       i64 
    push           pc_writeexe.writeexporttable.paddrtable u64 
    popptr                    u32 
    push           &pc_writeexe.writeexporttable.paddrtable 
    incr                      u64 4
    push           pc_writeexe.writeexporttable.i i64 
    push           1          i64 
    sub                       i64 
    push           pc_writeexe.writeexporttable.pordtable u64 
    popptr                    u16 
    push           &pc_writeexe.writeexporttable.pordtable 
    incr                      u64 2
#17709: 
    forup          #17708     i64 1
    opnd           pc_writeexe.writeexporttable.i 
    opnd           pc_writeexe.nexports 
#17707: 
#17710: 
    retproc                   
End


Proc pc_writeexe.getexporttablesize: i64
    local          pc_writeexe.getexporttablesize.size i64 
    local          pc_writeexe.getexporttablesize.i i64 
    procentry                 
    push           40         i64 
    pop            pc_writeexe.getexporttablesize.size i64 
    push           &pc_writeexe.getexporttablesize.size 
    push           pc_writeexe.nexports i64 
    push           4          i64 
    mul                       i64 
    addto                     i64 
    push           &pc_writeexe.getexporttablesize.size 
    push           pc_writeexe.nexports i64 
    push           4          i64 
    mul                       i64 
    addto                     i64 
    push           &pc_writeexe.getexporttablesize.size 
    push           pc_writeexe.nexports i64 
    push           2          i64 
    mul                       i64 
    addto                     i64 
    push           &pc_writeexe.getexporttablesize.size 
    setargs                   1 0
    push           pc_writeexe.dllfilename u64 
    callfn         &strlen    i64 
    push           1          i64 
    add                       i64 
    addto                     i64 
#17712: 
    push           1          i64 
    pop            pc_writeexe.getexporttablesize.i i64 
    push           pc_writeexe.nexports i64 
    push           1          i64 
    jumplt         #17713     i64 
#17714: 
    push           &pc_writeexe.getexporttablesize.size 
    setargs                   1 0
    push           &pc_writeexe.exporttable 
    push           pc_writeexe.getexporttablesize.i i64 
    addrefoff                 block:16 16 -16
    pushptr                   u64 
    pushptr                   u64 
    callfn         &strlen    i64 
    push           1          i64 
    add                       i64 
    addto                     i64 
#17715: 
    forup          #17714     i64 1
    opnd           pc_writeexe.getexporttablesize.i 
    opnd           pc_writeexe.nexports 
#17713: 
    push           pc_writeexe.getexporttablesize.size i64 
    setret                    i64 
    jump           #17716     
#17716: 
    retfn                     i64 
End


Proc pc_writeexe.newbasereloc:
    param          pc_writeexe.newbasereloc.addr i64 
    param          pc_writeexe.newbasereloc.reltype i64 
    local          pc_writeexe.newbasereloc.p u64 
    procentry                 
    setargs                   1 0
    push           16         i64 
    callfn         &mlibp.pcm_allocz u64 
    pop            pc_writeexe.newbasereloc.p u64 
    push           pc_writeexe.newbasereloc.addr i64 
    push           pc_writeexe.newbasereloc.p u64 
    push           8          
    popptroff                 u32 1 0
    push           pc_writeexe.newbasereloc.reltype i64 
    push           pc_writeexe.newbasereloc.p u64 
    push           12         
    popptroff                 i32 1 0
    push           pc_writeexe.basereloclist u64 
    push           pc_writeexe.newbasereloc.p u64 
    push           0          
    popptroff                 u64 1 0
    push           pc_writeexe.newbasereloc.p u64 
    pop            pc_writeexe.basereloclist u64 
    push           &pc_writeexe.nbaserelocs 
    incr                      i64 1
    push           &pc_writeexe.maxrelocaddr 
    push           pc_writeexe.newbasereloc.addr i64 
    maxto                     i64 
#17718: 
    retproc                   
End


Proc pc_writeexe.scanbaserelocs:
    local          pc_writeexe.scanbaserelocs.baseaddr i64 
    local          pc_writeexe.scanbaserelocs.addr i64 
    local          pc_writeexe.scanbaserelocs.nextblock i64 
    local          pc_writeexe.scanbaserelocs.p u64 
    local          pc_writeexe.scanbaserelocs.i i64 
    procentry                 
    push           4096       i64 
    pop            pc_writeexe.scanbaserelocs.baseaddr i64 
    push           0          i64 
    pop            pc_writeexe.nbaseblocks i64 
#17720: 
    push           pc_writeexe.scanbaserelocs.baseaddr i64 
    push           4096       i64 
    add                       i64 
    pop            pc_writeexe.scanbaserelocs.nextblock i64 
    push           pc_writeexe.nbaseblocks i64 
    push           500        i64 
    jumplt         #17721     i64 
    setargs                   1 0
    push           "Too many blocks" u64 
    callproc       &pci_mcl.axerror 
#17721: 
    push           &pc_writeexe.nbaseblocks 
    incr                      i64 1
    push           pc_writeexe.scanbaserelocs.baseaddr i64 
    push           &pc_writeexe.blockbases 
    push           pc_writeexe.nbaseblocks i64 
    popptroff                 i64 8 -8
    push           0          i64 
    push           &pc_writeexe.blockcounts 
    push           pc_writeexe.nbaseblocks i64 
    popptroff                 i32 4 -4
    push           pc_writeexe.basereloclist u64 
    pop            pc_writeexe.scanbaserelocs.p u64 
    jump           #17722     
#17723: 
    push           pc_writeexe.scanbaserelocs.p u64 
    push           8          
    pushptroff                u32 1 0
    pop            pc_writeexe.scanbaserelocs.addr i64 
    push           pc_writeexe.scanbaserelocs.addr i64 
    push           pc_writeexe.scanbaserelocs.baseaddr i64 
    jumplt         #17724     i64 
    push           pc_writeexe.scanbaserelocs.addr i64 
    push           pc_writeexe.scanbaserelocs.nextblock i64 
    jumpge         #17724     i64 
    push           &pc_writeexe.blockcounts 
    push           pc_writeexe.nbaseblocks i64 
    addrefoff                 i32 4 -4
    incr                      i32 1
#17724: 
    push           pc_writeexe.scanbaserelocs.p u64 
    pushptr                   u64 
    pop            pc_writeexe.scanbaserelocs.p u64 
#17722: 
    push           pc_writeexe.scanbaserelocs.p u64 
    jumptrue       #17723     u64 
#17725: 
    push           pc_writeexe.scanbaserelocs.nextblock i64 
    pop            pc_writeexe.scanbaserelocs.baseaddr i64 
#17726: 
    push           pc_writeexe.scanbaserelocs.baseaddr i64 
    push           pc_writeexe.maxrelocaddr i64 
    jumple         #17720     i64 
#17727: 
#17728: 
    push           1          i64 
    pop            pc_writeexe.scanbaserelocs.i i64 
    push           pc_writeexe.nbaseblocks i64 
    push           1          i64 
    jumplt         #17729     i64 
#17730: 
    push           &pc_writeexe.blockcounts 
    push           pc_writeexe.scanbaserelocs.i i64 
    pushptroff                i32 4 -4
    jumpfalse      #17731     i64 
    push           &pc_writeexe.blockcounts 
    push           pc_writeexe.scanbaserelocs.i i64 
    pushptroff                i32 4 -4
    push           0          i64 
    dotindex                  i64 
    jumpfalse      #17732     u64 
    push           &pc_writeexe.blockcounts 
    push           pc_writeexe.scanbaserelocs.i i64 
    addrefoff                 i32 4 -4
    incr                      i32 1
    push           &pc_writeexe.blockpadding 
    push           pc_writeexe.scanbaserelocs.i i64 
    addrefoff                 u8 1 -1
    incr                      u8 1
#17732: 
    push           &pc_writeexe.blockcounts 
    push           pc_writeexe.scanbaserelocs.i i64 
    pushptroff                i32 4 -4
    push           2          i64 
    mul                       i64 
    push           8          i64 
    add                       i64 
    push           &pc_writeexe.blockbytes 
    push           pc_writeexe.scanbaserelocs.i i64 
    popptroff                 i32 4 -4
    push           &pc_writeexe.basetablesize 
    push           &pc_writeexe.blockbytes 
    push           pc_writeexe.scanbaserelocs.i i64 
    pushptroff                i32 4 -4
    addto                     i64 
#17731: 
#17733: 
    forup          #17730     i64 1
    opnd           pc_writeexe.scanbaserelocs.i 
    opnd           pc_writeexe.nbaseblocks 
#17729: 
#17734: 
    retproc                   
End


Proc pc_writeexe.writebasereloctable:
    param          pc_writeexe.writebasereloctable.pstart u64 
    local          pc_writeexe.writebasereloctable.p32 u64 
    local          pc_writeexe.writebasereloctable.p16 u64 
    local          pc_writeexe.writebasereloctable.baseaddr i64 
    local          pc_writeexe.writebasereloctable.addr i64 
    local          pc_writeexe.writebasereloctable.nextblock i64 
    local          pc_writeexe.writebasereloctable.q u64 
    local          pc_writeexe.writebasereloctable.i i64 
    procentry                 
    push           pc_writeexe.writebasereloctable.pstart u64 
    pop            pc_writeexe.writebasereloctable.p32 u64 
#17736: 
    push           1          i64 
    pop            pc_writeexe.writebasereloctable.i i64 
    push           pc_writeexe.nbaseblocks i64 
    push           1          i64 
    jumplt         #17737     i64 
#17738: 
    push           &pc_writeexe.blockcounts 
    push           pc_writeexe.writebasereloctable.i i64 
    pushptroff                i32 4 -4
    jumpfalse      #17739     i64 
    push           &pc_writeexe.blockbases 
    push           pc_writeexe.writebasereloctable.i i64 
    pushptroff                i64 8 -8
    push           pc_writeexe.writebasereloctable.p32 u64 
    popptr                    u32 
    push           &pc_writeexe.writebasereloctable.p32 
    incr                      u64 4
    push           &pc_writeexe.blockbytes 
    push           pc_writeexe.writebasereloctable.i i64 
    pushptroff                i32 4 -4
    push           pc_writeexe.writebasereloctable.p32 u64 
    popptr                    u32 
    push           &pc_writeexe.writebasereloctable.p32 
    incr                      u64 4
    push           pc_writeexe.writebasereloctable.p32 u64 
    pop            pc_writeexe.writebasereloctable.p16 u64 
    push           pc_writeexe.basereloclist u64 
    pop            pc_writeexe.writebasereloctable.q u64 
    push           &pc_writeexe.blockbases 
    push           pc_writeexe.writebasereloctable.i i64 
    pushptroff                i64 8 -8
    pop            pc_writeexe.writebasereloctable.baseaddr i64 
    push           pc_writeexe.writebasereloctable.baseaddr i64 
    push           4096       i64 
    add                       i64 
    pop            pc_writeexe.writebasereloctable.nextblock i64 
    jump           #17740     
#17741: 
    push           pc_writeexe.writebasereloctable.q u64 
    push           8          
    pushptroff                u32 1 0
    pop            pc_writeexe.writebasereloctable.addr i64 
    push           pc_writeexe.writebasereloctable.addr i64 
    push           pc_writeexe.writebasereloctable.baseaddr i64 
    jumplt         #17742     i64 
    push           pc_writeexe.writebasereloctable.addr i64 
    push           pc_writeexe.writebasereloctable.nextblock i64 
    jumpge         #17742     i64 
    push           pc_writeexe.writebasereloctable.addr i64 
    push           pc_writeexe.writebasereloctable.baseaddr i64 
    sub                       i64 
    startmult                 
    push           pc_writeexe.writebasereloctable.q u64 
    push           12         
    pushptroff                i32 1 0
    push           2          i64 
    jumpne         #17743     i64 
    push           3          i64 
    resetmult                 
    jump           #17744     
#17743: 
    push           10         i64 
    endmult                   
#17744: 
    push           12         i64 
    shl                       i64 
    add                       i64 
    push           pc_writeexe.writebasereloctable.p16 u64 
    popptr                    u16 
    push           &pc_writeexe.writebasereloctable.p16 
    incr                      u64 2
#17742: 
    push           pc_writeexe.writebasereloctable.q u64 
    pushptr                   u64 
    pop            pc_writeexe.writebasereloctable.q u64 
#17740: 
    push           pc_writeexe.writebasereloctable.q u64 
    jumptrue       #17741     u64 
#17745: 
    push           &pc_writeexe.blockpadding 
    push           pc_writeexe.writebasereloctable.i i64 
    pushptroff                u8 1 -1
    jumpfalse      #17746     i64 
    push           0          i64 
    push           &pc_writeexe.writebasereloctable.p16 
    loadincr                  u64 2
    popptr                    u16 
#17746: 
    push           pc_writeexe.writebasereloctable.p16 u64 
    pop            pc_writeexe.writebasereloctable.p32 u64 
#17739: 
#17747: 
    forup          #17738     i64 1
    opnd           pc_writeexe.writebasereloctable.i 
    opnd           pc_writeexe.nbaseblocks 
#17737: 
#17748: 
    retproc                   
End


Proc pc_writeexe.sortexports:
    param          pc_writeexe.sortexports.sortindex u64 
    local          pc_writeexe.sortexports.d u64 
    local          pc_writeexe.sortexports.e u64 
    local          pc_writeexe.sortexports.swapped i64 
    local          pc_writeexe.sortexports.av_1 i64 
    local          pc_writeexe.sortexports.i i64 
    procentry                 
#17750: 
    push           1          i64 
    pop            pc_writeexe.sortexports.i i64 
    push           pc_writeexe.nexports i64 
    push           1          i64 
    jumplt         #17751     i64 
#17752: 
    push           pc_writeexe.sortexports.i i64 
    push           pc_writeexe.sortexports.sortindex u64 
    push           pc_writeexe.sortexports.i i64 
    popptroff                 i64 8 -8
#17753: 
    forup          #17752     i64 1
    opnd           pc_writeexe.sortexports.i 
    opnd           pc_writeexe.nexports 
#17751: 
#17754: 
    push           0          i64 
    pop            pc_writeexe.sortexports.swapped i64 
#17755: 
    push           1          i64 
    pop            pc_writeexe.sortexports.i i64 
    push           pc_writeexe.nexports i64 
    push           1          i64 
    sub                       i64 
    pop            pc_writeexe.sortexports.av_1 i64 
    push           pc_writeexe.sortexports.av_1 i64 
    push           1          i64 
    jumplt         #17756     i64 
#17757: 
    push           &pc_writeexe.exporttable 
    push           pc_writeexe.sortexports.sortindex u64 
    push           pc_writeexe.sortexports.i i64 
    pushptroff                i64 8 -8
    addrefoff                 block:16 16 -16
    pushptr                   u64 
    pop            pc_writeexe.sortexports.d u64 
    push           &pc_writeexe.exporttable 
    push           pc_writeexe.sortexports.sortindex u64 
    push           pc_writeexe.sortexports.i i64 
    pushptroff                i64 8 0
    addrefoff                 block:16 16 -16
    pushptr                   u64 
    pop            pc_writeexe.sortexports.e u64 
    setargs                   2 0
    push           pc_writeexe.sortexports.e u64 
    pushptr                   u64 
    push           pc_writeexe.sortexports.d u64 
    pushptr                   u64 
    callfn         &strcmp    i32 
    push           0          i64 
    jumple         #17758     i64 
    push           1          i64 
    pop            pc_writeexe.sortexports.swapped i64 
    push           pc_writeexe.sortexports.sortindex u64 
    push           pc_writeexe.sortexports.i i64 
    addrefoff                 i64 8 -8
    push           pc_writeexe.sortexports.sortindex u64 
    push           pc_writeexe.sortexports.i i64 
    addrefoff                 i64 8 0
    swap                      i64 
#17758: 
#17759: 
    forup          #17757     i64 1
    opnd           pc_writeexe.sortexports.i 
    opnd           pc_writeexe.sortexports.av_1 
#17756: 
#17760: 
    push           pc_writeexe.sortexports.swapped i64 
    jumptrue       #17754     i64 
#17761: 
#17762: 
    retproc                   
End


Proc pc_writeexe.getsectionno: i64
    param          pc_writeexe.getsectionno.segment i64 
    procentry                 
    startmult                 
    push           pc_writeexe.getsectionno.segment i64 
    push           3          i64 
    casejumpeq     #17764     i64 0
    push           2          i64 
    casejumpeq     #17765     i64 0
    push           1          i64 
    casejumpeq     #17766     i64 0
    popstack                  i64 
    jump           #17767     
#17764: 
    push           3          i64 
    resetmult                 
    jump           #17768     
#17765: 
    push           2          i64 
    resetmult                 
    jump           #17768     
#17766: 
    push           1          i64 
    resetmult                 
    jump           #17768     
#17767: 
    setargs                   1 0
    push           "GSN"      u64 
    callproc       &pci_mcl.axerror 
    push           0          i64 
    endmult                   
#17768: 
    setret                    i64 
    jump           #17769     
#17769: 
    retfn                     i64 
End


Proc pc_writess.writessdata: u64
    param          pc_writess.writessdata.fexe i64 
    procentry                 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_init 
    setargs                   1 0
    push           pc_writess.writessdata.fexe i64 
    callproc       &pc_writess.showssdata 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_line 
    push           pci_mcl.dest u64 
    setret                    u64 
    jump           #17771     
#17771: 
    retfn                     u64 
End


Proc pc_writess.showssdata:
    param          pc_writess.showssdata.fexe i64 
    procentry                 
    setargs                   2 0
    startmult                 
    push           pc_writess.showssdata.fexe i64 
    jumpfalse      #17773     i64 
    push           "EXE FORMAT" u64 
    resetmult                 
    jump           #17774     
#17773: 
    push           "AFTER GENSS" u64 
    endmult                   
#17774: 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_strln 
    setargs                   0 0
    callproc       &pc_writess.showsections 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_line 
    setargs                   3 0
    push           pci_mcl.ss_nidatarelocs i64 
    push           pci_mcl.ss_idatarelocs u64 
    push           "Idata"    u64 
    callproc       &pc_writess.showsectionrelocs2 
    setargs                   3 0
    push           pci_mcl.ss_ncoderelocs i64 
    push           pci_mcl.ss_coderelocs u64 
    push           "Code"     u64 
    callproc       &pc_writess.showsectionrelocs2 
    setargs                   2 0
    push           "proc Section Zdata: " u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           pci_mcl.ss_zdatalen i64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_strint 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_line 
    setargs                   1 0
    push           &pc_writeexe.sectiontable 
    push           72         
    addrefoff                 u8 1 0
    callproc       &pc_writess.showsectiondata 
    setargs                   1 0
    push           &pc_writeexe.sectiontable 
    push           0          
    addrefoff                 u8 1 0
    callproc       &pc_writess.showsectioncode 
    push           pc_writess.showssdata.fexe i64 
    jumpfalse      #17775     i64 
    setargs                   1 0
    push           &pc_writeexe.sectiontable 
    push           216        
    addrefoff                 u8 1 0
    callproc       &pc_writess.showsectiondata 
#17775: 
    setargs                   0 0
    callproc       &pc_writess.showsymboltable2 
    setargs                   0 0
    callproc       &pc_writess.showimporttable 
    setargs                   2 0
    push           "END OF GENSS" u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_strln 
#17776: 
    retproc                   
End


Proc pc_writess.showsectiondata:
    param          pc_writess.showsectiondata.d u64 
    local          pc_writess.showsectiondata.i i64 
    local          pc_writess.showsectiondata.k i64 
    local          pc_writess.showsectiondata.length i64 
    local          pc_writess.showsectiondata.bb i64 
    local          pc_writess.showsectiondata.str block:128 
    local          pc_writess.showsectiondata.str2 block:128 
    local          pc_writess.showsectiondata.p u64 
    local          pc_writess.showsectiondata.baseaddr u64 
    local          pc_writess.showsectiondata.av_1 i64 
    procentry                 
    setargs                   2 0
    push           "proc Section " u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           pc_writess.showsectiondata.d u64 
    push           8          
    pushptroff                u64 1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           " Size:"   u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           pc_writess.showsectiondata.d u64 
    push           40         
    pushptroff                i64 1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_strint 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_line 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_line 
    push           0          i64 
    pop            pc_writess.showsectiondata.k i64 
    push           pc_writess.showsectiondata.d u64 
    push           16         
    pushptroff                i64 1 0
    push           5          i64 
    jumpeq         #17778     i64 
    setargs                   2 0
    push           0          i64 
    push           pc_writess.showsectiondata.d u64 
    pushptr                   u64 
    callfn         &pc_genss.bufferelemptr u64 
    pop            pc_writess.showsectiondata.p u64 
    jump           #17779     
#17778: 
    push           pc_writess.showsectiondata.d u64 
    pushptr                   u64 
    pop            pc_writess.showsectiondata.p u64 
#17779: 
    push           pc_writess.showsectiondata.d u64 
    push           40         
    pushptroff                i64 1 0
    pop            pc_writess.showsectiondata.length i64 
    push           0          u64 
    push           &pc_writess.showsectiondata.str 
    push           1          i64 
    popptroff                 u8 1 -1
    push           pc_writeexe.imagebase i64 
    push           pc_writess.showsectiondata.d u64 
    push           48         
    pushptroff                i64 1 0
    add                       u64 
    pop            pc_writess.showsectiondata.baseaddr u64 
    setargs                   1 0
    push           &pc_writess.showsectiondata.str2 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    push           "Z8H"      u64 
    push           pc_writess.showsectiondata.baseaddr u64 
    callproc       &msysp.m$print_ptr 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           ": "       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           &pc_writess.showsectiondata.str2 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
#17780: 
    push           1          i64 
    pop            pc_writess.showsectiondata.i i64 
    push           pc_writess.showsectiondata.length i64 
    push           1          i64 
    jumplt         #17781     i64 
#17782: 
    push           &pc_writess.showsectiondata.p 
    loadincr                  u64 1
    pushptr                   u8 
    pop            pc_writess.showsectiondata.bb i64 
    setargs                   1 0
    push           &pc_writess.showsectiondata.str2 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    push           "z2H"      u64 
    push           pc_writess.showsectiondata.bb i64 
    callproc       &msysp.m$print_i64 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           " "        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           &pc_writess.showsectiondata.str2 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    push           32         i64 
    push           pc_writess.showsectiondata.bb i64 
    jumpgt         #17783     i64 
    push           pc_writess.showsectiondata.bb i64 
    push           127        i64 
    jumpgt         #17783     i64 
    push           pc_writess.showsectiondata.bb u64 
    push           &pc_writess.showsectiondata.str2 
    push           1          i64 
    popptroff                 u8 1 -1
    push           0          u64 
    push           &pc_writess.showsectiondata.str2 
    push           2          i64 
    popptroff                 u8 1 -1
    setargs                   2 0
    push           &pc_writess.showsectiondata.str2 
    push           &pc_writess.showsectiondata.str 
    callproc       &strcat    
    jump           #17784     
#17783: 
    setargs                   2 0
    push           "."        u64 
    push           &pc_writess.showsectiondata.str 
    callproc       &strcat    
#17784: 
    push           &pc_writess.showsectiondata.k 
    incrload                  i64 1
    push           16         i64 
    jumpeq         #17785     i64 
    push           pc_writess.showsectiondata.i i64 
    push           pc_writess.showsectiondata.length i64 
    jumpne         #17786     i64 
#17785: 
    push           pc_writess.showsectiondata.k i64 
    push           16         i64 
    jumpge         #17787     i64 
#17788: 
    push           16         i64 
    push           pc_writess.showsectiondata.k i64 
    sub                       i64 
    pop            pc_writess.showsectiondata.av_1 i64 
    push           pc_writess.showsectiondata.av_1 i64 
    push           0          i64 
    jumple         #17789     i64 
#17790: 
    setargs                   2 0
    push           "   "      u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           " "        u64 
    push           &pc_writess.showsectiondata.str 
    callproc       &strcat    
#17791: 
    to             #17790     
    opnd           pc_writess.showsectiondata.av_1 
#17789: 
#17787: 
    setargs                   2 0
    push           "\t["      u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           &pc_writess.showsectiondata.str 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           "]"        u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_strln 
    push           0          i64 
    pop            pc_writess.showsectiondata.k i64 
    push           0          u64 
    push           &pc_writess.showsectiondata.str 
    push           1          i64 
    popptroff                 u8 1 -1
    push           &pc_writess.showsectiondata.baseaddr 
    push           16         i64 
    addrefoffto               u64 1 0
    setargs                   1 0
    push           &pc_writess.showsectiondata.str2 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    push           "z8h"      u64 
    push           pc_writess.showsectiondata.baseaddr u64 
    callproc       &msysp.m$print_ptr 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           ": "       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           &pc_writess.showsectiondata.str2 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
#17786: 
#17792: 
    forup          #17782     i64 1
    opnd           pc_writess.showsectiondata.i 
    opnd           pc_writess.showsectiondata.length 
#17781: 
    push           pc_writess.showsectiondata.k i64 
    push           0          i64 
    jumpne         #17793     i64 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_line 
#17793: 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_line 
    push           pc_writess.showsectiondata.k i64 
    jumpfalse      #17794     i64 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_line 
#17794: 
#17795: 
    retproc                   
End


Proc pc_writess.showsectioncode:
    param          pc_writess.showsectioncode.p u64 
    local          pc_writess.showsectioncode.codeptr u64 
    local          pc_writess.showsectioncode.codeend u64 
    local          pc_writess.showsectioncode.codestart u64 
    local          pc_writess.showsectioncode.length i64 
    local          pc_writess.showsectioncode.offset i64 
    local          pc_writess.showsectioncode.s u64 
    local          pc_writess.showsectioncode.str block:16 
    local          pc_writess.showsectioncode.baseaddr u64 
    procentry                 
    setargs                   2 0
    push           "proc Section Code" u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_strln 
    push           pc_writess.showsectioncode.p u64 
    push           40         
    pushptroff                i64 1 0
    pop            pc_writess.showsectioncode.length i64 
    setargs                   2 0
    push           0          i64 
    push           pc_writess.showsectioncode.p u64 
    pushptr                   u64 
    callfn         &pc_genss.bufferelemptr u64 
    store          pc_writess.showsectioncode.codeptr u64 
    pop            pc_writess.showsectioncode.codestart u64 
    push           pc_writess.showsectioncode.codeptr u64 
    push           pc_writess.showsectioncode.length i64 
    addrefoff                 u64 1 0
    pop            pc_writess.showsectioncode.codeend u64 
    push           pc_writeexe.imagebase i64 
    push           pc_writess.showsectioncode.p u64 
    push           48         
    pushptroff                i64 1 0
    add                       u64 
    pop            pc_writess.showsectioncode.baseaddr u64 
    jump           #17797     
#17798: 
    push           pc_writess.showsectioncode.codeptr u64 
    push           pc_writess.showsectioncode.codestart u64 
    subref                    i64 1
    pop            pc_writess.showsectioncode.offset i64 
    setargs                   2 0
    push           pc_writess.showsectioncode.baseaddr u64 
    push           pc_writess.showsectioncode.offset i64 
    addrefoff                 u64 1 0
    push           &pc_writess.showsectioncode.codeptr 
    callfn         &pc_disasm.decodeinstr u64 
    pop            pc_writess.showsectioncode.s u64 
    push           pc_writess.showsectioncode.s u64 
    push           0          u64 
    jumpne         #17799     u64 
    jump           #17800     
#17799: 
    setargs                   1 0
    push           &pc_writess.showsectioncode.str 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    push           "4"        u64 
    push           pc_writess.showsectioncode.offset i64 
    callproc       &msysp.m$print_i64 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           " "        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           &pc_writess.showsectioncode.str 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           pc_writess.showsectioncode.s u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_strln 
#17797: 
    push           pc_writess.showsectioncode.codeptr u64 
    push           pc_writess.showsectioncode.codeend u64 
    jumplt         #17798     u64 
#17800: 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_line 
#17801: 
    retproc                   
End


Proc pc_writess.showsectionrelocs2:
    param          pc_writess.showsectionrelocs2.caption u64 
    param          pc_writess.showsectionrelocs2.relocs u64 
    param          pc_writess.showsectionrelocs2.nrelocs i64 
    local          pc_writess.showsectionrelocs2.r u64 
    procentry                 
    setargs                   2 0
    push           "proc Section Relocs: " u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           pc_writess.showsectionrelocs2.caption u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           " "        u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           pc_writess.showsectionrelocs2.nrelocs i64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_strint 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_line 
    push           pc_writess.showsectionrelocs2.relocs u64 
    pop            pc_writess.showsectionrelocs2.r u64 
    jump           #17803     
#17804: 
    setargs                   2 0
    push           "Reloc: "  u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           &pc_objdecls.relocnames 
    push           pc_writess.showsectionrelocs2.r u64 
    push           8          
    pushptroff                i64 1 0
    pushptroff                u64 8 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           " Offset: " u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           pc_writess.showsectionrelocs2.r u64 
    push           16         
    pushptroff                i64 1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_strint 
    setargs                   2 0
    push           " ST Index: " u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           pc_writess.showsectionrelocs2.r u64 
    push           24         
    pushptroff                i64 1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_strint 
    setargs                   2 0
    push           " "        u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           pci_mcl.ss_symboltable u64 
    push           pc_writess.showsectionrelocs2.r u64 
    push           24         
    pushptroff                i64 1 0
    pushptroff                u64 8 -8
    pushptr                   u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_line 
    push           pc_writess.showsectionrelocs2.r u64 
    pushptr                   u64 
    pop            pc_writess.showsectionrelocs2.r u64 
#17803: 
    push           pc_writess.showsectionrelocs2.r u64 
    jumptrue       #17804     u64 
#17805: 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_line 
#17806: 
    retproc                   
End


Proc pc_writess.gs_value:
    param          pc_writess.gs_value.caption u64 
    param          pc_writess.gs_value.value i64 
    local          pc_writess.gs_value.str block:256 
    procentry                 
    setargs                   2 0
    push           pc_writess.gs_value.caption u64 
    push           &pc_writess.gs_value.str 
    callproc       &strcpy    
    setargs                   2 0
    push           ":"        u64 
    push           &pc_writess.gs_value.str 
    callproc       &strcat    
    setargs                   3 0
    push           " "        u64 
    push           20         i64 
    push           &pc_writess.gs_value.str 
    callproc       &mlibp.ipadstr 
    setargs                   2 0
    push           &pc_writess.gs_value.str 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   1 0
    push           &pc_writess.gs_value.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "0x# #"    u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   2 0
    push           "H"        u64 
    push           pc_writess.gs_value.value i64 
    callproc       &msysp.m$print_i64 
    setargs                   1 0
    push           pc_writess.gs_value.value i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           &pc_writess.gs_value.str 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_strln 
#17808: 
    retproc                   
End


Proc pc_writess.showsymboltable2:
    local          pc_writess.showsymboltable2.i i64 
    procentry                 
    setargs                   2 0
    push           "Proc Symbol Table" u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_strln 
#17810: 
    push           1          i64 
    pop            pc_writess.showsymboltable2.i i64 
    push           pci_mcl.ss_nsymbols i64 
    push           1          i64 
    jumplt         #17811     i64 
#17812: 
    setargs                   2 0
    push           pc_writess.showsymboltable2.i i64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_strint 
    setargs                   2 0
    push           ": "       u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           pci_mcl.ss_symboltable u64 
    push           pc_writess.showsymboltable2.i i64 
    pushptroff                u64 8 -8
    pushptr                   u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_strln 
#17813: 
    forup          #17812     i64 1
    opnd           pc_writess.showsymboltable2.i 
    opnd           pci_mcl.ss_nsymbols 
#17811: 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_line 
#17814: 
    retproc                   
End


Proc pc_writess.showimporttable:
    local          pc_writess.showimporttable.str block:256 
    local          pc_writess.showimporttable.d block:48 
    local          pc_writess.showimporttable.p block:48 
    local          pc_writess.showimporttable.i i64 
    procentry                 
    setargs                   2 0
    push           "Proc Dll List" u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_strln 
#17816: 
    push           1          i64 
    pop            pc_writess.showimporttable.i i64 
    push           pc_writeexe.ndlls i64 
    push           1          i64 
    jumplt         #17817     i64 
#17818: 
    setargs                   2 0
    push           pc_writess.showimporttable.i i64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_strint 
    setargs                   2 0
    push           ": "       u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           &pc_writeexe.dlltable 
    push           pc_writess.showimporttable.i i64 
    addrefoff                 block:48 48 -48
    pushptr                   u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           " "        u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           &pc_writeexe.dlltable 
    push           pc_writess.showimporttable.i i64 
    addrefoff                 block:48 48 -48
    push           8          
    pushptroff                i64 1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_strint 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_line 
    setargs                   2 0
    push           &pc_writeexe.dlltable 
    push           pc_writess.showimporttable.i i64 
    addrefoff                 block:48 48 -48
    push           16         
    pushptroff                i64 1 0
    push           "\t\tName Table Offset" u64 
    callproc       &pc_writess.gs_value 
    setargs                   2 0
    push           &pc_writeexe.dlltable 
    push           pc_writess.showimporttable.i i64 
    addrefoff                 block:48 48 -48
    push           24         
    pushptroff                i64 1 0
    push           "\t\tAddr Table Offset" u64 
    callproc       &pc_writess.gs_value 
    setargs                   2 0
    push           &pc_writeexe.dlltable 
    push           pc_writess.showimporttable.i i64 
    addrefoff                 block:48 48 -48
    push           32         
    pushptroff                i64 1 0
    push           "\t\tDLL Name Offset  " u64 
    callproc       &pc_writess.gs_value 
#17819: 
    forup          #17818     i64 1
    opnd           pc_writess.showimporttable.i 
    opnd           pc_writeexe.ndlls 
#17817: 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_line 
    setargs                   2 0
    push           "Proc Import List" u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_strln 
#17820: 
    push           1          i64 
    pop            pc_writess.showimporttable.i i64 
    push           pc_writeexe.nimports i64 
    push           1          i64 
    jumplt         #17821     i64 
#17822: 
    push           &pc_writeexe.importtable 
    push           pc_writess.showimporttable.i i64 
    pushptroff                block:48 48 -48
    pop            pc_writess.showimporttable.p block:48 
    setargs                   2 0
    push           pc_writess.showimporttable.i i64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_strint 
    setargs                   2 0
    push           ": "       u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    push           &pc_writess.showimporttable.p 
    push           8          
    pushptroff                i64 1 0
    jumpfalse      #17823     i64 
    setargs                   2 0
    push           &pc_writess.showimporttable.p 
    push           16         
    pushptroff                u64 1 0
    push           &pc_writess.showimporttable.str 
    callproc       &strcpy    
    setargs                   3 0
    push           " "        u64 
    push           16         i64 
    push           &pc_writess.showimporttable.str 
    callproc       &mlibp.ipadstr 
    setargs                   2 0
    push           &pc_writess.showimporttable.str 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           " ("       u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           &pc_writeexe.dlltable 
    push           &pc_writess.showimporttable.p 
    push           8          
    pushptroff                i64 1 0
    addrefoff                 block:48 48 -48
    pushptr                   u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           ")"        u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_strln 
    setargs                   2 0
    push           &pc_writess.showimporttable.p 
    push           32         
    pushptroff                i64 1 0
    push           "\tIAT Offset        " u64 
    callproc       &pc_writess.gs_value 
    setargs                   2 0
    push           &pc_writess.showimporttable.p 
    push           40         
    pushptroff                i64 1 0
    push           "\tThunk Offset      " u64 
    callproc       &pc_writess.gs_value 
    setargs                   2 0
    push           &pc_writess.showimporttable.p 
    push           24         
    pushptroff                i64 1 0
    push           "\tHint/Name Offset  " u64 
    callproc       &pc_writess.gs_value 
    jump           #17824     
#17823: 
    setargs                   2 0
    push           &pc_writess.showimporttable.p 
    push           16         
    pushptroff                u64 1 0
    push           &pc_writess.showimporttable.str 
    callproc       &strcpy    
    setargs                   3 0
    push           " "        u64 
    push           20         i64 
    push           &pc_writess.showimporttable.str 
    callproc       &mlibp.ipadstr 
    setargs                   2 0
    push           &pc_writess.showimporttable.str 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           " (---)"   u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_strln 
#17824: 
#17825: 
    forup          #17822     i64 1
    opnd           pc_writess.showimporttable.i 
    opnd           pc_writeexe.nimports 
#17821: 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_line 
#17826: 
    retproc                   
End


Proc pc_writess.showsections:
    local          pc_writess.showsections.s block:72 
    local          pc_writess.showsections.i i64 
    procentry                 
    setargs                   2 0
    push           "proc Section Headersxxx" u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_strln 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_line 
#17828: 
    push           1          i64 
    pop            pc_writess.showsections.i i64 
    push           pc_writeexe.nsections i64 
    push           1          i64 
    jumplt         #17829     i64 
#17830: 
    push           &pc_writeexe.sectiontable 
    push           pc_writess.showsections.i i64 
    pushptroff                block:72 72 -72
    pop            pc_writess.showsections.s block:72 
    setargs                   2 0
    push           "Section " u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           pc_writess.showsections.i i64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_strint 
    setargs                   2 0
    push           ": "       u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           &pc_writess.showsections.s 
    push           8          
    pushptroff                u64 1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           "  ("      u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           &pci_mcl.segmentnames 
    push           &pc_writess.showsections.s 
    push           16         
    pushptroff                i64 1 0
    pushptroff                u64 8 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           ")"        u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_strln 
    setargs                   2 0
    push           &pc_writess.showsections.s 
    push           32         
    pushptroff                i64 1 0
    push           "    Raw Offset" u64 
    callproc       &pc_writess.gs_value 
    setargs                   2 0
    push           &pc_writess.showsections.s 
    push           24         
    pushptroff                i64 1 0
    push           "    Raw Size" u64 
    callproc       &pc_writess.gs_value 
    setargs                   2 0
    push           &pc_writess.showsections.s 
    push           48         
    pushptroff                i64 1 0
    push           "    Virtual Offset" u64 
    callproc       &pc_writess.gs_value 
    setargs                   2 0
    push           &pc_writess.showsections.s 
    push           40         
    pushptroff                i64 1 0
    push           "    Virtual Size" u64 
    callproc       &pc_writess.gs_value 
    setargs                   2 0
    push           &pc_writess.showsections.s 
    push           64         
    pushptroff                i64 1 0
    push           "    Nrelocs" u64 
    callproc       &pc_writess.gs_value 
    setargs                   2 0
    push           &pc_writess.showsections.s 
    pushptr                   i64 
    push           "    Data" u64 
    callproc       &pc_writess.gs_value 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_line 
#17831: 
    forup          #17830     i64 1
    opnd           pc_writess.showsections.i 
    opnd           pc_writeexe.nsections 
#17829: 
#17832: 
    retproc                   
End


Proc pc_disasm.decodeinstr: u64
    param          pc_disasm.decodeinstr.cptr u64 
    param          pc_disasm.decodeinstr.baseaddr u64 
    local          pc_disasm.decodeinstr.n i64 
    local          pc_disasm.decodeinstr.w i64 
    local          pc_disasm.decodeinstr.opc i64 
    local          pc_disasm.decodeinstr.reg i64 
    local          pc_disasm.decodeinstr.op i64 
    local          pc_disasm.decodeinstr.xxx i64 
    local          pc_disasm.decodeinstr.oldopsize i64 
    local          pc_disasm.decodeinstr.dispsize i64 
    local          pc_disasm.decodeinstr.pstart u64 
    local          pc_disasm.decodeinstr.str2 block:128 
    local          pc_disasm.decodeinstr.s u64 
    local          pc_disasm.decodeinstr.av_1 i64 
    local          pc_disasm.decodeinstr.av_2 i64 
    procentry                 
    push           0          u64 
    push           &pc_disasm.deststr 
    push           1          i64 
    popptroff                 u8 1 -1
    push           pc_disasm.decodeinstr.cptr u64 
    pushptr                   u64 
    store          pc_disasm.codeptr u64 
    pop            pc_disasm.decodeinstr.pstart u64 
    push           0          i64 
    pop            pc_disasm.rex i64 
    push           1          i64 
    pop            pc_disasm.opsize i64 
    push           0          i64 
    store          pc_disasm.addroverride i64 
    store          pc_disasm.sizeoverride i64 
    store          pc_disasm.f3override i64 
    pop            pc_disasm.f2override i64 
    push           0          i64 
    store          pc_disasm.offset i64 
    store          pc_disasm.indexreg i64 
    pop            pc_disasm.basereg i64 
!retry::
#17834: 
    push           &pc_disasm.codeptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          pc_disasm.decodeinstr.opc i64 
    switch         #17835     0 255
    opnd           #17836     
#17835: 
    switchlabel    #17837     
    switchlabel    #17837     
    switchlabel    #17838     
    switchlabel    #17838     
    switchlabel    #17839     
    switchlabel    #17839     
    switchlabel    #17836     
    switchlabel    #17836     
    switchlabel    #17837     
    switchlabel    #17837     
    switchlabel    #17838     
    switchlabel    #17838     
    switchlabel    #17839     
    switchlabel    #17839     
    switchlabel    #17836     
    switchlabel    #17840     
    switchlabel    #17837     
    switchlabel    #17837     
    switchlabel    #17838     
    switchlabel    #17838     
    switchlabel    #17839     
    switchlabel    #17839     
    switchlabel    #17836     
    switchlabel    #17836     
    switchlabel    #17837     
    switchlabel    #17837     
    switchlabel    #17838     
    switchlabel    #17838     
    switchlabel    #17839     
    switchlabel    #17839     
    switchlabel    #17836     
    switchlabel    #17836     
    switchlabel    #17837     
    switchlabel    #17837     
    switchlabel    #17838     
    switchlabel    #17838     
    switchlabel    #17839     
    switchlabel    #17839     
    switchlabel    #17836     
    switchlabel    #17836     
    switchlabel    #17837     
    switchlabel    #17837     
    switchlabel    #17838     
    switchlabel    #17838     
    switchlabel    #17839     
    switchlabel    #17839     
    switchlabel    #17836     
    switchlabel    #17836     
    switchlabel    #17837     
    switchlabel    #17837     
    switchlabel    #17838     
    switchlabel    #17838     
    switchlabel    #17839     
    switchlabel    #17839     
    switchlabel    #17836     
    switchlabel    #17836     
    switchlabel    #17837     
    switchlabel    #17837     
    switchlabel    #17838     
    switchlabel    #17838     
    switchlabel    #17839     
    switchlabel    #17839     
    switchlabel    #17836     
    switchlabel    #17836     
    switchlabel    #17841     
    switchlabel    #17841     
    switchlabel    #17841     
    switchlabel    #17841     
    switchlabel    #17841     
    switchlabel    #17841     
    switchlabel    #17841     
    switchlabel    #17841     
    switchlabel    #17841     
    switchlabel    #17841     
    switchlabel    #17841     
    switchlabel    #17841     
    switchlabel    #17841     
    switchlabel    #17841     
    switchlabel    #17841     
    switchlabel    #17841     
    switchlabel    #17842     
    switchlabel    #17842     
    switchlabel    #17842     
    switchlabel    #17842     
    switchlabel    #17842     
    switchlabel    #17842     
    switchlabel    #17842     
    switchlabel    #17842     
    switchlabel    #17843     
    switchlabel    #17843     
    switchlabel    #17843     
    switchlabel    #17843     
    switchlabel    #17843     
    switchlabel    #17843     
    switchlabel    #17843     
    switchlabel    #17843     
    switchlabel    #17836     
    switchlabel    #17836     
    switchlabel    #17836     
    switchlabel    #17844     
    switchlabel    #17836     
    switchlabel    #17836     
    switchlabel    #17845     
    switchlabel    #17846     
    switchlabel    #17847     
    switchlabel    #17848     
    switchlabel    #17849     
    switchlabel    #17848     
    switchlabel    #17836     
    switchlabel    #17836     
    switchlabel    #17836     
    switchlabel    #17836     
    switchlabel    #17850     
    switchlabel    #17850     
    switchlabel    #17850     
    switchlabel    #17850     
    switchlabel    #17850     
    switchlabel    #17850     
    switchlabel    #17850     
    switchlabel    #17850     
    switchlabel    #17850     
    switchlabel    #17850     
    switchlabel    #17850     
    switchlabel    #17850     
    switchlabel    #17850     
    switchlabel    #17850     
    switchlabel    #17850     
    switchlabel    #17850     
    switchlabel    #17851     
    switchlabel    #17851     
    switchlabel    #17851     
    switchlabel    #17851     
    switchlabel    #17852     
    switchlabel    #17852     
    switchlabel    #17853     
    switchlabel    #17853     
    switchlabel    #17854     
    switchlabel    #17854     
    switchlabel    #17855     
    switchlabel    #17855     
    switchlabel    #17836     
    switchlabel    #17856     
    switchlabel    #17836     
    switchlabel    #17857     
    switchlabel    #17858     
    switchlabel    #17859     
    switchlabel    #17859     
    switchlabel    #17859     
    switchlabel    #17859     
    switchlabel    #17859     
    switchlabel    #17859     
    switchlabel    #17859     
    switchlabel    #17860     
    switchlabel    #17861     
    switchlabel    #17836     
    switchlabel    #17862     
    switchlabel    #17863     
    switchlabel    #17864     
    switchlabel    #17865     
    switchlabel    #17866     
    switchlabel    #17836     
    switchlabel    #17836     
    switchlabel    #17836     
    switchlabel    #17836     
    switchlabel    #17867     
    switchlabel    #17867     
    switchlabel    #17867     
    switchlabel    #17867     
    switchlabel    #17868     
    switchlabel    #17868     
    switchlabel    #17867     
    switchlabel    #17867     
    switchlabel    #17867     
    switchlabel    #17867     
    switchlabel    #17867     
    switchlabel    #17867     
    switchlabel    #17869     
    switchlabel    #17869     
    switchlabel    #17869     
    switchlabel    #17869     
    switchlabel    #17869     
    switchlabel    #17869     
    switchlabel    #17869     
    switchlabel    #17869     
    switchlabel    #17869     
    switchlabel    #17869     
    switchlabel    #17869     
    switchlabel    #17869     
    switchlabel    #17869     
    switchlabel    #17869     
    switchlabel    #17869     
    switchlabel    #17869     
    switchlabel    #17870     
    switchlabel    #17870     
    switchlabel    #17871     
    switchlabel    #17872     
    switchlabel    #17836     
    switchlabel    #17836     
    switchlabel    #17873     
    switchlabel    #17873     
    switchlabel    #17836     
    switchlabel    #17836     
    switchlabel    #17836     
    switchlabel    #17836     
    switchlabel    #17836     
    switchlabel    #17836     
    switchlabel    #17836     
    switchlabel    #17836     
    switchlabel    #17870     
    switchlabel    #17870     
    switchlabel    #17870     
    switchlabel    #17870     
    switchlabel    #17836     
    switchlabel    #17836     
    switchlabel    #17836     
    switchlabel    #17874     
    switchlabel    #17875     
    switchlabel    #17875     
    switchlabel    #17875     
    switchlabel    #17875     
    switchlabel    #17875     
    switchlabel    #17875     
    switchlabel    #17875     
    switchlabel    #17875     
    switchlabel    #17876     
    switchlabel    #17877     
    switchlabel    #17878     
    switchlabel    #17879     
    switchlabel    #17836     
    switchlabel    #17836     
    switchlabel    #17836     
    switchlabel    #17836     
    switchlabel    #17880     
    switchlabel    #17881     
    switchlabel    #17836     
    switchlabel    #17882     
    switchlabel    #17836     
    switchlabel    #17836     
    switchlabel    #17836     
    switchlabel    #17836     
    switchlabel    #17836     
    switchlabel    #17836     
    switchlabel    #17883     
    switchlabel    #17884     
    switchlabel    #17885     
    switchlabel    #17836     
    switchlabel    #17886     
    switchlabel    #17886     
    switchlabel    #17836     
    switchlabel    #17836     
    switchlabel    #17836     
    switchlabel    #17836     
    switchlabel    #17836     
    switchlabel    #17836     
    switchlabel    #17887     
    switchlabel    #17888     
    endswitch                 
#17837: 
    push           pc_disasm.decodeinstr.opc i64 
    push           3          i64 
    shr                       i64 
    pop            pc_disasm.decodeinstr.op i64 
    setargs                   1 0
    push           pc_disasm.decodeinstr.opc i64 
    push           1          i64 
    iand                      i64 
    callproc       &pc_disasm.decodeaddr 
    setargs                   1 0
    push           &pc_disasm.basereg 
    callproc       &pc_disasm.getsilx 
    setargs                   1 0
    push           &pc_disasm.rmreg 
    callproc       &pc_disasm.getsil 
    setargs                   1 0
    push           &pc_disasm.opnames 
    push           pc_disasm.decodeinstr.op i64 
    pushptroff                u64 8 0
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_disasm.printaddrmode 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   2 0
    push           pc_disasm.opsize i64 
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strreg u64 
    callproc       &pc_disasm.genstr 
    jump           #17889     
#17838: 
    push           pc_disasm.decodeinstr.opc i64 
    push           3          i64 
    shr                       i64 
    pop            pc_disasm.decodeinstr.op i64 
    setargs                   1 0
    push           pc_disasm.decodeinstr.opc i64 
    push           1          i64 
    iand                      i64 
    callproc       &pc_disasm.decodeaddr 
    setargs                   1 0
    push           &pc_disasm.opnames 
    push           pc_disasm.decodeinstr.op i64 
    pushptroff                u64 8 0
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           &pc_disasm.rmreg 
    callproc       &pc_disasm.getsil 
    setargs                   1 0
    setargs                   2 0
    push           pc_disasm.opsize i64 
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strreg u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_disasm.printaddrmode 
    jump           #17889     
#17839: 
    setargs                   1 0
    push           &pc_disasm.opnames 
    push           pc_disasm.decodeinstr.opc i64 
    push           3          i64 
    shr                       i64 
    pushptroff                u64 8 0
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_disasm.genstr 
    push           pc_disasm.decodeinstr.opc i64 
    push           1          i64 
    iand                      i64 
    jumpfalse      #17890     i64 
    push           4          i64 
    pop            pc_disasm.opsize i64 
    push           pc_disasm.sizeoverride i64 
    jumpfalse      #17891     i64 
    push           2          i64 
    pop            pc_disasm.opsize i64 
#17891: 
    push           pc_disasm.rex i64 
    push           8          i64 
    iand                      i64 
    jumpfalse      #17892     i64 
    push           8          i64 
    pop            pc_disasm.opsize i64 
#17892: 
#17890: 
    setargs                   1 0
    setargs                   2 0
    push           pc_disasm.opsize i64 
    push           1          i64 
    callfn         &pc_disasm.strreg u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   0 0
    callfn         &pc_disasm.readimm i64 
    callproc       &pc_disasm.genintd 
    jump           #17889     
#17840: 
    setargs                   0 0
    callproc       &pc_disasm.decodetwobyteinstr 
    jump           #17889     
#17841: 
    push           pc_disasm.decodeinstr.opc i64 
    pop            pc_disasm.rex i64 
    jump           #17834     
    jump           #17889     
#17842: 
    setargs                   2 0
    push           pc_disasm.rex i64 
    push           1          i64 
    iand                      i64 
    push           pc_disasm.decodeinstr.opc i64 
    push           7          i64 
    iand                      i64 
    callfn         &pc_disasm.getreg i64 
    pop            pc_disasm.decodeinstr.reg i64 
    setargs                   1 0
    push           "push "    u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   2 0
    push           8          i64 
    push           pc_disasm.decodeinstr.reg i64 
    callfn         &pc_disasm.strreg u64 
    callproc       &pc_disasm.genstr 
    jump           #17889     
#17843: 
    setargs                   2 0
    push           pc_disasm.rex i64 
    push           1          i64 
    iand                      i64 
    push           pc_disasm.decodeinstr.opc i64 
    push           7          i64 
    iand                      i64 
    callfn         &pc_disasm.getreg i64 
    pop            pc_disasm.decodeinstr.reg i64 
    setargs                   1 0
    push           "pop "     u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   2 0
    push           8          i64 
    push           pc_disasm.decodeinstr.reg i64 
    callfn         &pc_disasm.strreg u64 
    callproc       &pc_disasm.genstr 
    jump           #17889     
#17844: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.decodeaddr 
    setargs                   1 0
    push           "movsxd "  u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   2 0
    push           pc_disasm.opsize i64 
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strreg u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    push           4          i64 
    pop            pc_disasm.opsize i64 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_disasm.printaddrmode 
    jump           #17889     
#17845: 
    push           1          i64 
    pop            pc_disasm.sizeoverride i64 
    jump           #17834     
    jump           #17889     
#17846: 
    push           1          i64 
    pop            pc_disasm.addroverride i64 
    jump           #17834     
    jump           #17889     
#17847: 
    setargs                   1 0
    push           "push "    u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   0 0
    callfn         &pc_disasm.readint32 i64 
    callproc       &pc_disasm.genintd 
    jump           #17889     
#17849: 
    setargs                   1 0
    push           "push "    u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   0 0
    callfn         &pc_disasm.readsbyte i64 
    callproc       &pc_disasm.genintd 
    jump           #17889     
#17848: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.decodeaddr 
    push           pc_disasm.basereg i64 
    push           pc_disasm.rmreg i64 
    jumpeq         #17893     i64 
    setargs                   1 0
    push           "imul3"    u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   2 0
    push           pc_disasm.opsize i64 
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strreg u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    jump           #17894     
#17893: 
    setargs                   1 0
    push           "imul2"    u64 
    callproc       &pc_disasm.genstr 
#17894: 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_disasm.printaddrmode 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    startmult                 
    push           pc_disasm.decodeinstr.opc i64 
    push           2          i64 
    iand                      i64 
    jumpfalse      #17895     i64 
    push           1          i64 
    resetmult                 
    jump           #17896     
#17895: 
    push           pc_disasm.opsize i64 
    endmult                   
#17896: 
    pop            pc_disasm.opsize i64 
    setargs                   1 0
    setargs                   0 0
    callfn         &pc_disasm.readimm i64 
    callproc       &pc_disasm.genintd 
    jump           #17889     
#17850: 
    setargs                   1 0
    push           "j"        u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           &pc_disasm.condnames 
    push           pc_disasm.decodeinstr.opc i64 
    push           15         i64 
    iand                      i64 
    pushptroff                u64 8 0
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   0 0
    callfn         &pc_disasm.readsbyte i64 
    callproc       &pc_disasm.genintd 
    jump           #17889     
#17851: 
    setargs                   1 0
    push           pc_disasm.decodeinstr.opc i64 
    push           1          i64 
    iand                      i64 
    callproc       &pc_disasm.decodeaddr 
    setargs                   1 0
    push           &pc_disasm.opnames 
    push           pc_disasm.rmopc i64 
    pushptroff                u64 8 0
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           &pc_disasm.basereg 
    callproc       &pc_disasm.getsilx 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_disasm.printaddrmode 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    push           pc_disasm.decodeinstr.opc i64 
    push           131        i64 
    jumpeq         #17897     i64 
    setargs                   1 0
    setargs                   0 0
    callfn         &pc_disasm.readimm i64 
    callproc       &pc_disasm.genintd 
    jump           #17898     
#17897: 
    setargs                   1 0
    setargs                   0 0
    callfn         &pc_disasm.readsbyte i64 
    callproc       &pc_disasm.genintd 
#17898: 
    jump           #17889     
#17852: 
    setargs                   1 0
    push           pc_disasm.decodeinstr.opc i64 
    push           1          i64 
    iand                      i64 
    callproc       &pc_disasm.decodeaddr 
    setargs                   1 0
    push           &pc_disasm.basereg 
    callproc       &pc_disasm.getsilx 
    setargs                   1 0
    push           &pc_disasm.rmreg 
    callproc       &pc_disasm.getsil 
    setargs                   1 0
    push           "test "    u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_disasm.printaddrmode 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   2 0
    push           pc_disasm.opsize i64 
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strreg u64 
    callproc       &pc_disasm.genstr 
    jump           #17889     
#17853: 
    setargs                   1 0
    push           pc_disasm.decodeinstr.opc i64 
    push           1          i64 
    iand                      i64 
    callproc       &pc_disasm.decodeaddr 
    setargs                   1 0
    push           "exch2 "   u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           &pc_disasm.basereg 
    callproc       &pc_disasm.getsilx 
    setargs                   1 0
    push           &pc_disasm.rmreg 
    callproc       &pc_disasm.getsil 
    setargs                   1 0
    setargs                   2 0
    push           pc_disasm.opsize i64 
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strreg u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           ","        u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_disasm.printaddrmode 
    jump           #17889     
#17854: 
    setargs                   1 0
    push           pc_disasm.decodeinstr.opc i64 
    push           1          i64 
    iand                      i64 
    callproc       &pc_disasm.decodeaddr 
    setargs                   1 0
    push           "mov"      u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           &pc_disasm.basereg 
    callproc       &pc_disasm.getsilx 
    setargs                   1 0
    push           &pc_disasm.rmreg 
    callproc       &pc_disasm.getsil 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_disasm.printaddrmode 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   2 0
    push           pc_disasm.opsize i64 
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strreg u64 
    callproc       &pc_disasm.genstr 
    jump           #17889     
#17855: 
    setargs                   1 0
    push           pc_disasm.decodeinstr.opc i64 
    push           1          i64 
    iand                      i64 
    callproc       &pc_disasm.decodeaddr 
    setargs                   1 0
    push           "mov "     u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           &pc_disasm.basereg 
    callproc       &pc_disasm.getsilx 
    setargs                   1 0
    push           &pc_disasm.rmreg 
    callproc       &pc_disasm.getsil 
    setargs                   1 0
    setargs                   2 0
    push           pc_disasm.opsize i64 
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strreg u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_disasm.printaddrmode 
    jump           #17889     
#17856: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.decodeaddr 
    setargs                   1 0
    push           "lea "     u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   2 0
    push           pc_disasm.opsize i64 
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strreg u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_disasm.printaddrmode 
    jump           #17889     
#17857: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.decodeaddr 
    push           1          i64 
    pop            pc_disasm.opsize i64 
    setargs                   1 0
    push           "pop"      u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_disasm.printaddrmode 
    jump           #17889     
#17858: 
    push           pc_disasm.rex i64 
    jumpfalse      #17899     i64 
    jump           #17900     
#17899: 
    setargs                   1 0
    push           "nop"      u64 
    callproc       &pc_disasm.genstr 
    jump           #17889     
#17859: 
!doexch::
#17900: 
    push           pc_disasm.decodeinstr.opc i64 
    push           7          i64 
    iand                      i64 
    push           1          i64 
    add                       i64 
    pop            pc_disasm.decodeinstr.reg i64 
    push           pc_disasm.rex i64 
    push           1          i64 
    iand                      i64 
    jumpfalse      #17901     i64 
    push           &pc_disasm.decodeinstr.reg 
    push           8          i64 
    addto                     i64 
#17901: 
    startmult                 
    push           pc_disasm.sizeoverride i64 
    jumpfalse      #17902     i64 
    push           2          i64 
    resetmult                 
    jump           #17903     
#17902: 
    push           4          i64 
    endmult                   
#17903: 
    pop            pc_disasm.opsize i64 
    push           pc_disasm.rex i64 
    push           8          i64 
    iand                      i64 
    jumpfalse      #17904     i64 
    push           8          i64 
    pop            pc_disasm.opsize i64 
#17904: 
    setargs                   1 0
    push           "xchg "    u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   2 0
    push           pc_disasm.opsize i64 
    push           1          i64 
    callfn         &pc_disasm.strreg u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   2 0
    push           pc_disasm.opsize i64 
    push           pc_disasm.decodeinstr.reg i64 
    callfn         &pc_disasm.strreg u64 
    callproc       &pc_disasm.genstr 
    jump           #17889     
#17860: 
    push           pc_disasm.sizeoverride i64 
    jumpfalse      #17905     i64 
    setargs                   1 0
    push           "cbw"      u64 
    callproc       &pc_disasm.genstr 
    jump           #17906     
#17905: 
    setargs                   1 0
    push           "cbw???"   u64 
    callproc       &pc_disasm.genstr 
#17906: 
    jump           #17889     
#17861: 
    push           pc_disasm.sizeoverride i64 
    jumpfalse      #17907     i64 
    setargs                   1 0
    push           "cwd"      u64 
    callproc       &pc_disasm.genstr 
    jump           #17908     
#17907: 
    push           pc_disasm.rex i64 
    push           8          i64 
    iand                      i64 
    jumpfalse      #17909     i64 
    setargs                   1 0
    push           "cqo"      u64 
    callproc       &pc_disasm.genstr 
    jump           #17908     
#17909: 
    setargs                   1 0
    push           "cdq"      u64 
    callproc       &pc_disasm.genstr 
#17908: 
    jump           #17889     
#17862: 
    setargs                   1 0
    push           "wait"     u64 
    callproc       &pc_disasm.genstr 
    jump           #17889     
#17863: 
    setargs                   1 0
    push           "pushf"    u64 
    callproc       &pc_disasm.genstr 
    jump           #17889     
#17864: 
    setargs                   1 0
    push           "popf"     u64 
    callproc       &pc_disasm.genstr 
    jump           #17889     
#17865: 
    setargs                   1 0
    push           "sahf"     u64 
    callproc       &pc_disasm.genstr 
    jump           #17889     
#17866: 
    setargs                   1 0
    push           "lahf"     u64 
    callproc       &pc_disasm.genstr 
    jump           #17889     
#17867: 
    setargs                   1 0
    startmult                 
    push           pc_disasm.decodeinstr.opc i64 
    push           1          i64 
    shr                       i64 
    push           7          i64 
    iand                      i64 
    switch         #17910     1 7
    opnd           #17911     
#17910: 
    switchlabel    #17912     
    switchlabel    #17913     
    switchlabel    #17914     
    switchlabel    #17915     
    switchlabel    #17916     
    switchlabel    #17917     
    switchlabel    #17918     
    endswitch                 
#17912: 
    push           "?"        u64 
    resetmult                 
    jump           #17919     
#17913: 
    push           "movs"     u64 
    resetmult                 
    jump           #17919     
#17914: 
    push           "cmps"     u64 
    resetmult                 
    jump           #17919     
#17915: 
    push           "?"        u64 
    resetmult                 
    jump           #17919     
#17916: 
    push           "stos"     u64 
    resetmult                 
    jump           #17919     
#17917: 
    push           "lods"     u64 
    resetmult                 
    jump           #17919     
#17918: 
    push           "scas"     u64 
    resetmult                 
    jump           #17919     
#17911: 
    push           "?"        u64 
    endmult                   
#17919: 
    callproc       &pc_disasm.genstr 
    push           pc_disasm.decodeinstr.opc i64 
    push           1          i64 
    iand                      i64 
    push           0          i64 
    jumpne         #17920     i64 
    setargs                   1 0
    push           "b"        u64 
    callproc       &pc_disasm.genstr 
    jump           #17921     
#17920: 
    push           pc_disasm.rex i64 
    push           8          i64 
    iand                      i64 
    jumpfalse      #17922     i64 
    setargs                   1 0
    push           "q"        u64 
    callproc       &pc_disasm.genstr 
    jump           #17923     
#17922: 
    push           pc_disasm.sizeoverride i64 
    jumpfalse      #17924     i64 
    setargs                   1 0
    push           "w"        u64 
    callproc       &pc_disasm.genstr 
    jump           #17923     
#17924: 
    setargs                   1 0
    push           "d"        u64 
    callproc       &pc_disasm.genstr 
#17923: 
#17921: 
    jump           #17889     
#17868: 
    setargs                   1 0
    push           "test "    u64 
    callproc       &pc_disasm.genstr 
    push           pc_disasm.decodeinstr.opc i64 
    push           1          i64 
    iand                      i64 
    jumpfalse      #17925     i64 
    startmult                 
    push           pc_disasm.sizeoverride i64 
    jumpfalse      #17926     i64 
    push           2          i64 
    resetmult                 
    jump           #17927     
#17926: 
    push           4          i64 
    endmult                   
#17927: 
    pop            pc_disasm.opsize i64 
    push           pc_disasm.rex i64 
    push           8          i64 
    iand                      i64 
    jumpfalse      #17928     i64 
    push           8          i64 
    pop            pc_disasm.opsize i64 
#17928: 
#17925: 
    setargs                   1 0
    setargs                   2 0
    push           pc_disasm.opsize i64 
    push           1          i64 
    callfn         &pc_disasm.strreg u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   0 0
    callfn         &pc_disasm.readimm i64 
    callproc       &pc_disasm.genintd 
    jump           #17889     
#17869: 
    push           pc_disasm.decodeinstr.opc i64 
    push           7          i64 
    iand                      i64 
    push           1          i64 
    add                       i64 
    pop            pc_disasm.decodeinstr.reg i64 
    push           pc_disasm.rex i64 
    push           1          i64 
    iand                      i64 
    jumpfalse      #17929     i64 
    push           &pc_disasm.decodeinstr.reg 
    push           8          i64 
    addto                     i64 
#17929: 
    push           pc_disasm.decodeinstr.opc i64 
    push           8          i64 
    iand                      i64 
    jumpfalse      #17930     i64 
    startmult                 
    push           pc_disasm.sizeoverride i64 
    jumpfalse      #17931     i64 
    push           2          i64 
    resetmult                 
    jump           #17932     
#17931: 
    push           4          i64 
    endmult                   
#17932: 
    pop            pc_disasm.opsize i64 
    push           pc_disasm.rex i64 
    push           8          i64 
    iand                      i64 
    jumpfalse      #17933     i64 
    push           8          i64 
    pop            pc_disasm.opsize i64 
#17933: 
#17930: 
    setargs                   1 0
    push           "mov "     u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           &pc_disasm.decodeinstr.reg 
    callproc       &pc_disasm.getsil 
    setargs                   1 0
    setargs                   2 0
    push           pc_disasm.opsize i64 
    push           pc_disasm.decodeinstr.reg i64 
    callfn         &pc_disasm.strreg u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   0 0
    callfn         &pc_disasm.readimm8 i64 
    callproc       &pc_disasm.genintd 
    jump           #17889     
#17870: 
    setargs                   1 0
    push           pc_disasm.decodeinstr.opc i64 
    push           1          i64 
    iand                      i64 
    callproc       &pc_disasm.decodeaddr 
    setargs                   1 0
    push           &pc_disasm.basereg 
    callproc       &pc_disasm.getsilx 
    setargs                   1 0
    startmult                 
    push           pc_disasm.rmopc i64 
    push           1          i64 
    add                       i64 
    switch         #17934     1 8
    opnd           #17935     
#17934: 
    switchlabel    #17936     
    switchlabel    #17937     
    switchlabel    #17938     
    switchlabel    #17939     
    switchlabel    #17940     
    switchlabel    #17941     
    switchlabel    #17942     
    switchlabel    #17943     
    endswitch                 
#17936: 
    push           "rol"      u64 
    resetmult                 
    jump           #17944     
#17937: 
    push           "ror"      u64 
    resetmult                 
    jump           #17944     
#17938: 
    push           "rcl"      u64 
    resetmult                 
    jump           #17944     
#17939: 
    push           "rcr"      u64 
    resetmult                 
    jump           #17944     
#17940: 
    push           "shl"      u64 
    resetmult                 
    jump           #17944     
#17941: 
    push           "shr"      u64 
    resetmult                 
    jump           #17944     
#17942: 
    push           "?"        u64 
    resetmult                 
    jump           #17944     
#17943: 
    push           "sar"      u64 
    resetmult                 
    jump           #17944     
#17935: 
    push           "?"        u64 
    endmult                   
#17944: 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_disasm.printaddrmode 
    push           pc_disasm.decodeinstr.opc i64 
    push           193        i64 
    jumpgt         #17945     i64 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   0 0
    callfn         &pc_disasm.readbyte i64 
    callproc       &pc_disasm.genintd 
    jump           #17946     
#17945: 
    setargs                   1 0
    startmult                 
    push           pc_disasm.decodeinstr.opc i64 
    push           2          i64 
    iand                      i64 
    jumpfalse      #17947     i64 
    push           ", cl"     u64 
    resetmult                 
    jump           #17948     
#17947: 
    push           ", 1"      u64 
    endmult                   
#17948: 
    callproc       &pc_disasm.genstr 
#17946: 
    jump           #17889     
#17871: 
    setargs                   1 0
    push           "retn "    u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   0 0
    callfn         &pc_disasm.readword16 i64 
    callproc       &pc_disasm.genintd 
    jump           #17889     
#17872: 
    setargs                   1 0
    push           "ret"      u64 
    callproc       &pc_disasm.genstr 
    jump           #17889     
#17873: 
    setargs                   1 0
    push           pc_disasm.decodeinstr.opc i64 
    push           1          i64 
    iand                      i64 
    callproc       &pc_disasm.decodeaddr 
    setargs                   1 0
    push           "mov"      u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_disasm.printaddrmode 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   0 0
    callfn         &pc_disasm.readimm i64 
    callproc       &pc_disasm.genintd 
    jump           #17889     
#17874: 
    setargs                   1 0
    push           "xlat"     u64 
    callproc       &pc_disasm.genstr 
    jump           #17889     
#17875: 
    setargs                   1 0
    push           pc_disasm.decodeinstr.opc i64 
    push           7          i64 
    iand                      i64 
    callproc       &pc_disasm.decode8087 
    jump           #17889     
#17876: 
    setargs                   1 0
    push           "loopnz "  u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   0 0
    callfn         &pc_disasm.readsbyte i64 
    callproc       &pc_disasm.genintd 
    jump           #17889     
#17877: 
    setargs                   1 0
    push           "loopz "   u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   0 0
    callfn         &pc_disasm.readsbyte i64 
    callproc       &pc_disasm.genintd 
    jump           #17889     
#17878: 
    setargs                   1 0
    push           "loop "    u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   0 0
    callfn         &pc_disasm.readsbyte i64 
    callproc       &pc_disasm.genintd 
    jump           #17889     
#17879: 
    push           pc_disasm.addroverride i64 
    jumpfalse      #17949     i64 
    setargs                   1 0
    push           "jecxz "   u64 
    callproc       &pc_disasm.genstr 
    jump           #17950     
#17949: 
    setargs                   1 0
    push           "jrcxz "   u64 
    callproc       &pc_disasm.genstr 
#17950: 
    setargs                   1 0
    setargs                   0 0
    callfn         &pc_disasm.readsbyte i64 
    callproc       &pc_disasm.genintd 
    jump           #17889     
#17880: 
    setargs                   1 0
    push           "call "    u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   0 0
    callfn         &pc_disasm.readint32 i64 
    callproc       &pc_disasm.genintd 
    jump           #17889     
#17881: 
    setargs                   1 0
    push           "[4] jmp " u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   0 0
    callfn         &pc_disasm.readint32 i64 
    callproc       &pc_disasm.genintd 
    jump           #17889     
#17882: 
    setargs                   1 0
    push           "jmp "     u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   0 0
    callfn         &pc_disasm.readsbyte i64 
    callproc       &pc_disasm.genintd 
    jump           #17889     
#17883: 
    push           pc_disasm.codeptr u64 
    pushptr                   u8 
    push           15         i64 
    jumpeq         #17951     i64 
    push           pc_disasm.codeptr u64 
    pushptr                   u8 
    push           64         i64 
    jumpge         #17951     i64 
    push           pc_disasm.codeptr u64 
    pushptr                   u8 
    push           79         i64 
    jumple         #17951     i64 
    setargs                   1 0
    push           "repne"    u64 
    callproc       &pc_disasm.genstr 
    jump           #17952     
#17951: 
    push           1          i64 
    pop            pc_disasm.f2override i64 
    jump           #17834     
#17952: 
    jump           #17889     
#17884: 
    push           pc_disasm.codeptr u64 
    pushptr                   u8 
    push           15         i64 
    jumpeq         #17953     i64 
    push           pc_disasm.codeptr u64 
    pushptr                   u8 
    push           64         i64 
    jumpge         #17953     i64 
    push           pc_disasm.codeptr u64 
    pushptr                   u8 
    push           79         i64 
    jumple         #17953     i64 
    setargs                   1 0
    push           "repe"     u64 
    callproc       &pc_disasm.genstr 
    jump           #17954     
#17953: 
    push           1          i64 
    pop            pc_disasm.f3override i64 
    jump           #17834     
#17954: 
    jump           #17889     
#17885: 
    push           0          u64 
    setret                    u64 
    jump           #17955     
    jump           #17889     
#17886: 
    setargs                   1 0
    push           pc_disasm.decodeinstr.opc i64 
    push           1          i64 
    iand                      i64 
    callproc       &pc_disasm.decodeaddr 
    setargs                   1 0
    push           &pc_disasm.basereg 
    callproc       &pc_disasm.getsilx 
    setargs                   1 0
    startmult                 
    push           pc_disasm.rmopc i64 
    push           1          i64 
    add                       i64 
    switch         #17956     1 8
    opnd           #17957     
#17956: 
    switchlabel    #17958     
    switchlabel    #17959     
    switchlabel    #17960     
    switchlabel    #17961     
    switchlabel    #17962     
    switchlabel    #17963     
    switchlabel    #17964     
    switchlabel    #17965     
    endswitch                 
#17958: 
    push           "test"     u64 
    resetmult                 
    jump           #17966     
#17959: 
    push           "?"        u64 
    resetmult                 
    jump           #17966     
#17960: 
    push           "not"      u64 
    resetmult                 
    jump           #17966     
#17961: 
    push           "neg"      u64 
    resetmult                 
    jump           #17966     
#17962: 
    push           "mul"      u64 
    resetmult                 
    jump           #17966     
#17963: 
    push           "imul"     u64 
    resetmult                 
    jump           #17966     
#17964: 
    push           "div"      u64 
    resetmult                 
    jump           #17966     
#17965: 
    push           "idiv"     u64 
    resetmult                 
    jump           #17966     
#17957: 
    push           "?"        u64 
    endmult                   
#17966: 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_disasm.printaddrmode 
    push           pc_disasm.rmopc i64 
    push           0          i64 
    jumpne         #17967     i64 
    push           pc_disasm.opsize i64 
    push           8          i64 
    jumpne         #17968     i64 
    push           4          i64 
    pop            pc_disasm.opsize i64 
#17968: 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   0 0
    callfn         &pc_disasm.readimm i64 
    callproc       &pc_disasm.genintd 
#17967: 
    jump           #17889     
#17887: 
    push           0          i64 
    pop            pc_disasm.decodeinstr.w i64 
    jump           #17969     
    jump           #17889     
#17888: 
    push           1          i64 
    pop            pc_disasm.decodeinstr.w i64 
!doff::
#17969: 
    setargs                   1 0
    push           pc_disasm.decodeinstr.w i64 
    callproc       &pc_disasm.decodeaddr 
    push           pc_disasm.rmopc i64 
    push           0          i64 
    casejumpeq     #17970     i64 0
    push           1          i64 
    casejumpeq     #17971     i64 0
    push           2          i64 
    casejumpeq     #17972     i64 0
    push           4          i64 
    casejumpeq     #17973     i64 0
    push           6          i64 
    casejumpeq     #17974     i64 0
    popstack                  i64 
    jump           #17975     
#17970: 
    setargs                   1 0
    push           &pc_disasm.basereg 
    callproc       &pc_disasm.getsilx 
    setargs                   1 0
    push           "inc"      u64 
    callproc       &pc_disasm.genstr 
    jump           #17976     
#17971: 
    setargs                   1 0
    push           &pc_disasm.basereg 
    callproc       &pc_disasm.getsilx 
    setargs                   1 0
    push           "dec"      u64 
    callproc       &pc_disasm.genstr 
    jump           #17976     
#17972: 
    push           8          i64 
    pop            pc_disasm.opsize i64 
    setargs                   1 0
    push           "icall"    u64 
    callproc       &pc_disasm.genstr 
    jump           #17976     
#17973: 
    push           8          i64 
    pop            pc_disasm.opsize i64 
    setargs                   1 0
    push           "jmp"      u64 
    callproc       &pc_disasm.genstr 
    jump           #17976     
#17974: 
    push           8          i64 
    pop            pc_disasm.opsize i64 
    setargs                   1 0
    push           "push"     u64 
    callproc       &pc_disasm.genstr 
    jump           #17976     
#17975: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "FFxx?"    u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#17976: 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_disasm.printaddrmode 
    jump           #17889     
#17836: 
    setargs                   1 0
    push           "Unknown opcode: " u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           pc_disasm.decodeinstr.opc i64 
    callproc       &pc_disasm.genhex 
#17889: 
    push           pc_disasm.decodeinstr.baseaddr u64 
    jumpfalse      #17977     u64 
    setargs                   1 0
    push           &pc_disasm.decodeinstr.str 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    push           "z6h"      u64 
    push           pc_disasm.decodeinstr.baseaddr u64 
    callproc       &msysp.m$print_ptr 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           ": "       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #17978     
#17977: 
    setargs                   1 0
    push           &pc_disasm.decodeinstr.str 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    push           "z6h"      u64 
    push           pc_disasm.decodeinstr.pstart u64 
    callproc       &msysp.m$print_ptr 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           ": "       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#17978: 
    push           pc_disasm.codeptr u64 
    push           pc_disasm.decodeinstr.pstart u64 
    subref                    i64 1
    pop            pc_disasm.decodeinstr.n i64 
#17979: 
    push           pc_disasm.decodeinstr.n i64 
    pop            pc_disasm.decodeinstr.av_1 i64 
    push           pc_disasm.decodeinstr.av_1 i64 
    push           0          i64 
    jumple         #17980     i64 
#17981: 
    setargs                   1 0
    push           &pc_disasm.decodeinstr.str2 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    push           "z2H"      u64 
    push           &pc_disasm.decodeinstr.pstart 
    loadincr                  u64 1
    pushptr                   u8 
    callproc       &msysp.m$print_i64 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           " "        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           &pc_disasm.decodeinstr.str2 
    push           &pc_disasm.decodeinstr.str 
    callproc       &strcat    
#17982: 
    to             #17981     
    opnd           pc_disasm.decodeinstr.av_1 
#17980: 
#17983: 
    push           14         i64 
    push           pc_disasm.decodeinstr.n i64 
    sub                       i64 
    pop            pc_disasm.decodeinstr.av_2 i64 
    push           pc_disasm.decodeinstr.av_2 i64 
    push           0          i64 
    jumple         #17984     i64 
#17985: 
    setargs                   2 0
    push           "-- "      u64 
    push           &pc_disasm.decodeinstr.str 
    callproc       &strcat    
#17986: 
    to             #17985     
    opnd           pc_disasm.decodeinstr.av_2 
#17984: 
    setargs                   2 0
    push           &pc_disasm.deststr 
    push           &pc_disasm.decodeinstr.str 
    callproc       &strcat    
    push           pc_disasm.codeptr u64 
    push           pc_disasm.decodeinstr.cptr u64 
    popptr                    u64 
    push           &pc_disasm.decodeinstr.str 
    setret                    u64 
    jump           #17955     
#17955: 
    retfn                     u64 
End


Proc pc_disasm.decodetwobyteinstr:
    local          pc_disasm.decodetwobyteinstr.opc i64 
    local          pc_disasm.decodetwobyteinstr.rhssize i64 
    local          pc_disasm.decodetwobyteinstr.third i64 
    local          pc_disasm.decodetwobyteinstr.imm i64 
    local          pc_disasm.decodetwobyteinstr.opcstr u64 
    procentry                 
    push           &pc_disasm.codeptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          pc_disasm.decodetwobyteinstr.opc i64 
    switch         #17988     42 239
    opnd           #17989     
#17988: 
    switchlabel    #17990     
    switchlabel    #17989     
    switchlabel    #17991     
    switchlabel    #17992     
    switchlabel    #17989     
    switchlabel    #17993     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17994     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17995     
    switchlabel    #17995     
    switchlabel    #17995     
    switchlabel    #17995     
    switchlabel    #17995     
    switchlabel    #17995     
    switchlabel    #17995     
    switchlabel    #17995     
    switchlabel    #17995     
    switchlabel    #17995     
    switchlabel    #17995     
    switchlabel    #17995     
    switchlabel    #17995     
    switchlabel    #17995     
    switchlabel    #17995     
    switchlabel    #17995     
    switchlabel    #17989     
    switchlabel    #17996     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17997     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17998     
    switchlabel    #17999     
    switchlabel    #18000     
    switchlabel    #18001     
    switchlabel    #17989     
    switchlabel    #18002     
    switchlabel    #18003     
    switchlabel    #18004     
    switchlabel    #18005     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #18006     
    switchlabel    #18007     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #18008     
    switchlabel    #18009     
    switchlabel    #18010     
    switchlabel    #18010     
    switchlabel    #18010     
    switchlabel    #18010     
    switchlabel    #18010     
    switchlabel    #18010     
    switchlabel    #18010     
    switchlabel    #18010     
    switchlabel    #18010     
    switchlabel    #18010     
    switchlabel    #18010     
    switchlabel    #18010     
    switchlabel    #18010     
    switchlabel    #18010     
    switchlabel    #18010     
    switchlabel    #18010     
    switchlabel    #18011     
    switchlabel    #18011     
    switchlabel    #18011     
    switchlabel    #18011     
    switchlabel    #18011     
    switchlabel    #18011     
    switchlabel    #18011     
    switchlabel    #18011     
    switchlabel    #18011     
    switchlabel    #18011     
    switchlabel    #18011     
    switchlabel    #18011     
    switchlabel    #18011     
    switchlabel    #18011     
    switchlabel    #18011     
    switchlabel    #18011     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #18012     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #18013     
    switchlabel    #18013     
    switchlabel    #18014     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #18015     
    switchlabel    #18015     
    switchlabel    #18013     
    switchlabel    #18013     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #18016     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #18017     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #17989     
    switchlabel    #18018     
    endswitch                 
#17990: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.decodeaddr 
    push           pc_disasm.f3override i64 
    jumpfalse      #18019     i64 
    setargs                   1 0
    push           "cvtsi2ss " u64 
    callproc       &pc_disasm.genstr 
    jump           #18020     
#18019: 
    setargs                   1 0
    push           "cvtsi2sd " u64 
    callproc       &pc_disasm.genstr 
#18020: 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strxmm u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_disasm.printaddrmode 
    jump           #18021     
#17991: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.decodeaddr 
    push           pc_disasm.f3override i64 
    jumpfalse      #18022     i64 
    setargs                   1 0
    push           "cvttss2si " u64 
    callproc       &pc_disasm.genstr 
    push           4          i64 
    pop            pc_disasm.decodetwobyteinstr.rhssize i64 
    jump           #18023     
#18022: 
    setargs                   1 0
    push           "cvttsd2si " u64 
    callproc       &pc_disasm.genstr 
    push           8          i64 
    pop            pc_disasm.decodetwobyteinstr.rhssize i64 
#18023: 
    push           pc_disasm.rex i64 
    push           8          i64 
    iand                      i64 
    jumpfalse      #18024     i64 
    setargs                   1 0
    setargs                   2 0
    push           8          i64 
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strreg u64 
    callproc       &pc_disasm.genstr 
    jump           #18025     
#18024: 
    setargs                   1 0
    setargs                   2 0
    push           4          i64 
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strreg u64 
    callproc       &pc_disasm.genstr 
#18025: 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    push           pc_disasm.decodetwobyteinstr.rhssize i64 
    pop            pc_disasm.opsize i64 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.printaddrmode 
    jump           #18021     
#17992: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.decodeaddr 
    push           pc_disasm.f3override i64 
    jumpfalse      #18026     i64 
    setargs                   1 0
    push           "cvtss2si " u64 
    callproc       &pc_disasm.genstr 
    push           4          i64 
    pop            pc_disasm.decodetwobyteinstr.rhssize i64 
    jump           #18027     
#18026: 
    setargs                   1 0
    push           "cvtsd2si " u64 
    callproc       &pc_disasm.genstr 
    push           8          i64 
    pop            pc_disasm.decodetwobyteinstr.rhssize i64 
#18027: 
    push           pc_disasm.rex i64 
    push           8          i64 
    iand                      i64 
    jumpfalse      #18028     i64 
    setargs                   1 0
    setargs                   2 0
    push           8          i64 
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strreg u64 
    callproc       &pc_disasm.genstr 
    jump           #18029     
#18028: 
    setargs                   1 0
    setargs                   2 0
    push           4          i64 
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strreg u64 
    callproc       &pc_disasm.genstr 
#18029: 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    push           pc_disasm.decodetwobyteinstr.rhssize i64 
    pop            pc_disasm.opsize i64 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.printaddrmode 
    jump           #18021     
#17993: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.decodeaddr 
    push           pc_disasm.sizeoverride i64 
    jumpfalse      #18030     i64 
    push           8          i64 
    pop            pc_disasm.opsize i64 
    setargs                   1 0
    push           "comisd "  u64 
    callproc       &pc_disasm.genstr 
    jump           #18031     
#18030: 
    push           4          i64 
    pop            pc_disasm.opsize i64 
    setargs                   1 0
    push           "comiss "  u64 
    callproc       &pc_disasm.genstr 
#18031: 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strxmm u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.printaddrmode 
    jump           #18021     
#17994: 
    push           &pc_disasm.codeptr 
    loadincr                  u64 1
    pushptr                   u8 
    pop            pc_disasm.decodetwobyteinstr.third i64 
    push           pc_disasm.decodetwobyteinstr.third i64 
    push           99         i64 
    casejumpeq     #18032     i64 0
    push           98         i64 
    casejumpeq     #18033     i64 0
    popstack                  i64 
    jump           #18034     
#18032: 
    setargs                   1 0
    push           "pcmpistri " u64 
    callproc       &pc_disasm.genstr 
    jump           #18035     
#18033: 
    setargs                   1 0
    push           "pcmpistrm " u64 
    callproc       &pc_disasm.genstr 
    jump           #18035     
#18034: 
    setargs                   1 0
    push           "Unknown opcode 2-byte opcode: 0F " u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           pc_disasm.decodetwobyteinstr.opc i64 
    callproc       &pc_disasm.genhex 
    jump           #18036     
#18035: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.decodeaddr 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strxmm u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.printaddrmode 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    push           &pc_disasm.codeptr 
    loadincr                  u64 1
    pushptr                   u8 
    pop            pc_disasm.decodetwobyteinstr.imm i64 
    setargs                   1 0
    push           pc_disasm.decodetwobyteinstr.imm i64 
    callproc       &pc_disasm.genintd 
    jump           #18021     
#17995: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.decodeaddr 
    setargs                   1 0
    push           "cmov"     u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           &pc_disasm.condnames 
    push           pc_disasm.decodetwobyteinstr.opc i64 
    push           15         i64 
    iand                      i64 
    pushptroff                u64 8 0
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   2 0
    push           pc_disasm.opsize i64 
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strreg u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_disasm.printaddrmode 
    jump           #18021     
#17996: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.decodeaddr 
    startmult                 
    push           pc_disasm.f3override i64 
    jumpfalse      #18037     i64 
    push           4          i64 
    resetmult                 
    jump           #18038     
#18037: 
    push           8          i64 
    endmult                   
#18038: 
    pop            pc_disasm.opsize i64 
    setargs                   1 0
    startmult                 
    push           pc_disasm.opsize i64 
    push           4          i64 
    jumpne         #18039     i64 
    push           "sqrtss "  u64 
    resetmult                 
    jump           #18040     
#18039: 
    push           "sqrtsd "  u64 
    endmult                   
#18040: 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strxmm u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.printaddrmode 
    jump           #18021     
#17997: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.decodeaddr 
    setargs                   1 0
    startmult                 
    push           pc_disasm.sizeoverride i64 
    jumpfalse      #18041     i64 
    push           "andpd "   u64 
    resetmult                 
    jump           #18042     
#18041: 
    push           "andps "   u64 
    endmult                   
#18042: 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strxmm u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    startmult                 
    push           pc_disasm.sizeoverride i64 
    jumpfalse      #18043     i64 
    push           8          i64 
    resetmult                 
    jump           #18044     
#18043: 
    push           4          i64 
    endmult                   
#18044: 
    pop            pc_disasm.opsize i64 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.printaddrmode 
    jump           #18021     
#17998: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.decodeaddr 
    setargs                   1 0
    startmult                 
    push           pc_disasm.sizeoverride i64 
    jumpfalse      #18045     i64 
    push           "xorpd "   u64 
    resetmult                 
    jump           #18046     
#18045: 
    push           "xorps "   u64 
    endmult                   
#18046: 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strxmm u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    startmult                 
    push           pc_disasm.sizeoverride i64 
    jumpfalse      #18047     i64 
    push           8          i64 
    resetmult                 
    jump           #18048     
#18047: 
    push           4          i64 
    endmult                   
#18048: 
    pop            pc_disasm.opsize i64 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.printaddrmode 
    jump           #18021     
#17999: 
    push           "adds"     u64 
    pop            pc_disasm.decodetwobyteinstr.opcstr u64 
!doarith::
#18049: 
    setargs                   1 0
    push           pc_disasm.decodetwobyteinstr.opcstr u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.decodeaddr 
    push           pc_disasm.f2override i64 
    jumpfalse      #18050     i64 
    push           8          i64 
    pop            pc_disasm.opsize i64 
    setargs                   1 0
    push           "d "       u64 
    callproc       &pc_disasm.genstr 
    jump           #18051     
#18050: 
    push           4          i64 
    pop            pc_disasm.opsize i64 
    setargs                   1 0
    push           "s "       u64 
    callproc       &pc_disasm.genstr 
#18051: 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strxmm u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.printaddrmode 
    jump           #18021     
#18000: 
    push           "muls"     u64 
    pop            pc_disasm.decodetwobyteinstr.opcstr u64 
    jump           #18049     
    jump           #18021     
#18001: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.decodeaddr 
    push           pc_disasm.f3override i64 
    jumpfalse      #18052     i64 
    setargs                   1 0
    push           "cvtss2sd " u64 
    callproc       &pc_disasm.genstr 
    push           4          i64 
    pop            pc_disasm.decodetwobyteinstr.rhssize i64 
    jump           #18053     
#18052: 
    setargs                   1 0
    push           "cvtsd2ss " u64 
    callproc       &pc_disasm.genstr 
    push           8          i64 
    pop            pc_disasm.decodetwobyteinstr.rhssize i64 
#18053: 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strxmm u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    push           pc_disasm.decodetwobyteinstr.rhssize i64 
    pop            pc_disasm.opsize i64 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.printaddrmode 
    jump           #18021     
#18002: 
    push           "subs"     u64 
    pop            pc_disasm.decodetwobyteinstr.opcstr u64 
    jump           #18049     
    jump           #18021     
#18003: 
    push           "mins"     u64 
    pop            pc_disasm.decodetwobyteinstr.opcstr u64 
    jump           #18049     
    jump           #18021     
#18004: 
    push           "divs"     u64 
    pop            pc_disasm.decodetwobyteinstr.opcstr u64 
    jump           #18049     
    jump           #18021     
#18005: 
    push           "maxs"     u64 
    pop            pc_disasm.decodetwobyteinstr.opcstr u64 
    jump           #18049     
    jump           #18021     
#18006: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.decodeaddr 
    startmult                 
    push           pc_disasm.rex i64 
    push           8          i64 
    iand                      i64 
    jumpfalse      #18054     i64 
    push           8          i64 
    resetmult                 
    jump           #18055     
#18054: 
    push           4          i64 
    endmult                   
#18055: 
    pop            pc_disasm.opsize i64 
    setargs                   1 0
    startmult                 
    push           pc_disasm.opsize i64 
    push           4          i64 
    jumpne         #18056     i64 
    push           "movd "    u64 
    resetmult                 
    jump           #18057     
#18056: 
    push           "movq "    u64 
    endmult                   
#18057: 
    callproc       &pc_disasm.genstr 
    push           pc_disasm.sizeoverride i64 
    jumpfalse      #18058     i64 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strxmm u64 
    callproc       &pc_disasm.genstr 
    jump           #18059     
#18058: 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strmmx u64 
    callproc       &pc_disasm.genstr 
#18059: 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_disasm.printaddrmode 
    jump           #18021     
#18007: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.decodeaddr 
    push           16         i64 
    pop            pc_disasm.opsize i64 
    push           pc_disasm.sizeoverride i64 
    jumpfalse      #18060     i64 
    setargs                   1 0
    push           "movdqa "  u64 
    callproc       &pc_disasm.genstr 
    jump           #18061     
#18060: 
    push           pc_disasm.f3override i64 
    jumpfalse      #18062     i64 
    setargs                   1 0
    push           "movdqu "  u64 
    callproc       &pc_disasm.genstr 
    jump           #18061     
#18062: 
    setargs                   1 0
    push           "No 66/F3 " u64 
    callproc       &pc_disasm.genstr 
#18061: 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strxmm u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.printaddrmode 
    jump           #18021     
#18008: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.decodeaddr 
    push           pc_disasm.f3override i64 
    jumpfalse      #18063     i64 
    push           8          i64 
    pop            pc_disasm.opsize i64 
    setargs                   1 0
    push           "movq "    u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strxmm u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.printaddrmode 
    jump           #18064     
#18063: 
    push           pc_disasm.rex i64 
    push           8          i64 
    iand                      i64 
    jumpfalse      #18065     i64 
    push           8          i64 
    pop            pc_disasm.opsize i64 
    setargs                   1 0
    push           "movq "    u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_disasm.printaddrmode 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strxmm u64 
    callproc       &pc_disasm.genstr 
    jump           #18064     
#18065: 
    push           4          i64 
    pop            pc_disasm.opsize i64 
    setargs                   1 0
    push           "movd "    u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_disasm.printaddrmode 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    push           pc_disasm.sizeoverride i64 
    jumpfalse      #18066     i64 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strxmm u64 
    callproc       &pc_disasm.genstr 
    jump           #18067     
#18066: 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strmmx u64 
    callproc       &pc_disasm.genstr 
#18067: 
#18064: 
    jump           #18021     
#18009: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.decodeaddr 
    push           16         i64 
    pop            pc_disasm.opsize i64 
    push           pc_disasm.sizeoverride i64 
    jumpfalse      #18068     i64 
    setargs                   1 0
    push           "movdqa "  u64 
    callproc       &pc_disasm.genstr 
    jump           #18069     
#18068: 
    push           pc_disasm.f3override i64 
    jumpfalse      #18070     i64 
    setargs                   1 0
    push           "movdqu "  u64 
    callproc       &pc_disasm.genstr 
    jump           #18069     
#18070: 
    setargs                   1 0
    push           "No 66/F3 " u64 
    callproc       &pc_disasm.genstr 
#18069: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.printaddrmode 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strxmm u64 
    callproc       &pc_disasm.genstr 
    jump           #18021     
#18010: 
    setargs                   1 0
    push           "[long] j" u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           &pc_disasm.condnames 
    push           pc_disasm.decodetwobyteinstr.opc i64 
    push           15         i64 
    iand                      i64 
    pushptroff                u64 8 0
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_disasm.genstr 
    push           pc_disasm.sizeoverride i64 
    jumpfalse      #18071     i64 
    setargs                   1 0
    setargs                   0 0
    callfn         &pc_disasm.readint16 i64 
    callproc       &pc_disasm.genintd 
    jump           #18072     
#18071: 
    setargs                   1 0
    setargs                   0 0
    callfn         &pc_disasm.readint32 i64 
    callproc       &pc_disasm.genintd 
#18072: 
    jump           #18021     
#18011: 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_disasm.decodeaddr 
    setargs                   1 0
    push           "set"      u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           &pc_disasm.condnames 
    push           pc_disasm.decodetwobyteinstr.opc i64 
    push           15         i64 
    iand                      i64 
    pushptroff                u64 8 0
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           &pc_disasm.basereg 
    callproc       &pc_disasm.getsilx 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_disasm.printaddrmode 
    jump           #18021     
#18012: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.decodeaddr 
    setargs                   1 0
    push           "imul "    u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   2 0
    push           pc_disasm.opsize i64 
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strreg u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_disasm.printaddrmode 
    jump           #18021     
#18013: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.decodeaddr 
    setargs                   1 0
    startmult                 
    push           pc_disasm.decodetwobyteinstr.opc i64 
    push           190        i64 
    jumpge         #18073     i64 
    push           "movzx "   u64 
    resetmult                 
    jump           #18074     
#18073: 
    push           "movsx "   u64 
    endmult                   
#18074: 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   2 0
    push           pc_disasm.opsize i64 
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strreg u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    startmult                 
    push           pc_disasm.decodetwobyteinstr.opc i64 
    push           1          i64 
    iand                      i64 
    jumpfalse      #18075     i64 
    push           2          i64 
    resetmult                 
    jump           #18076     
#18075: 
    push           1          i64 
    endmult                   
#18076: 
    pop            pc_disasm.opsize i64 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_disasm.printaddrmode 
    jump           #18021     
#18014: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.decodeaddr 
    setargs                   1 0
    push           "popcnt "  u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   2 0
    push           pc_disasm.opsize i64 
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strreg u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_disasm.printaddrmode 
    jump           #18021     
#18015: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.decodeaddr 
    setargs                   1 0
    startmult                 
    push           pc_disasm.decodetwobyteinstr.opc i64 
    push           188        i64 
    jumpne         #18077     i64 
    push           "bsf "     u64 
    resetmult                 
    jump           #18078     
#18077: 
    push           "bsr "     u64 
    endmult                   
#18078: 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   2 0
    push           pc_disasm.opsize i64 
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strreg u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_disasm.printaddrmode 
    jump           #18021     
#18016: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.decodeaddr 
    push           8          i64 
    pop            pc_disasm.opsize i64 
    setargs                   1 0
    push           "movq "    u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.printaddrmode 
    setargs                   1 0
    push           ","        u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strxmm u64 
    callproc       &pc_disasm.genstr 
    jump           #18021     
#18017: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.decodeaddr 
    setargs                   1 0
    push           "pand "    u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strxmm u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    push           8          i64 
    pop            pc_disasm.opsize i64 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.printaddrmode 
    jump           #18021     
#18018: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.decodeaddr 
    setargs                   1 0
    push           "pxor "    u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strxmm u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    push           8          i64 
    pop            pc_disasm.opsize i64 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.printaddrmode 
    jump           #18021     
#17989: 
!error::
#18079: 
    setargs                   1 0
    push           "Unknown opcode 2-byte opcode: 0F " u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           pc_disasm.decodetwobyteinstr.opc i64 
    callproc       &pc_disasm.genhex 
#18021: 
#18036: 
    retproc                   
End


Proc pc_disasm.decodeaddr:
    param          pc_disasm.decodeaddr.w i64 
    local          pc_disasm.decodeaddr.modrm i64 
    local          pc_disasm.decodeaddr.xxx i64 
    local          pc_disasm.decodeaddr.mode i64 
    local          pc_disasm.decodeaddr.sib i64 
    local          pc_disasm.decodeaddr.rm i64 
    procentry                 
    push           0          i64 
    store          pc_disasm.indexreg i64 
    pop            pc_disasm.basereg i64 
    push           1          i64 
    pop            pc_disasm.scale i64 
    push           0          i64 
    pop            pc_disasm.offset i64 
    push           pc_disasm.decodeaddr.w i64 
    jumpfalse      #18081     i64 
    startmult                 
    push           pc_disasm.sizeoverride i64 
    jumpfalse      #18082     i64 
    push           2          i64 
    resetmult                 
    jump           #18083     
#18082: 
    push           4          i64 
    endmult                   
#18083: 
    pop            pc_disasm.opsize i64 
    push           pc_disasm.rex i64 
    push           8          i64 
    iand                      i64 
    jumpfalse      #18084     i64 
    push           8          i64 
    pop            pc_disasm.opsize i64 
#18084: 
    jump           #18085     
#18081: 
    push           1          i64 
    pop            pc_disasm.opsize i64 
#18085: 
    push           &pc_disasm.codeptr 
    loadincr                  u64 1
    pushptr                   u8 
    pop            pc_disasm.decodeaddr.modrm i64 
    push           pc_disasm.decodeaddr.modrm i64 
    push           6          i64 
    shr                       i64 
    pop            pc_disasm.decodeaddr.mode i64 
    push           pc_disasm.decodeaddr.modrm i64 
    push           3          i64 
    shr                       i64 
    push           7          i64 
    iand                      i64 
    pop            pc_disasm.decodeaddr.xxx i64 
    push           pc_disasm.decodeaddr.modrm i64 
    push           7          i64 
    iand                      i64 
    pop            pc_disasm.decodeaddr.rm i64 
    push           pc_disasm.decodeaddr.mode i64 
    push           3          i64 
    jumpne         #18086     i64 
    push           pc_disasm.decodeaddr.rm i64 
    push           1          i64 
    add                       i64 
    pop            pc_disasm.basereg i64 
    push           1          i64 
    pop            pc_disasm.addrmode i64 
    jump           #18087     
#18086: 
    push           pc_disasm.decodeaddr.rm i64 
    push           4          i64 
    jumpeq         #18088     i64 
    push           pc_disasm.decodeaddr.mode i64 
    push           0          i64 
    jumpne         #18089     i64 
    push           pc_disasm.decodeaddr.rm i64 
    push           5          i64 
    jumpne         #18089     i64 
    setargs                   0 0
    callfn         &pc_disasm.readint32 i64 
    pop            pc_disasm.offset i64 
    push           2          i64 
    pop            pc_disasm.addrmode i64 
    jump           #18090     
#18089: 
    push           pc_disasm.decodeaddr.rm i64 
    push           1          i64 
    add                       i64 
    pop            pc_disasm.basereg i64 
    push           2          i64 
    pop            pc_disasm.addrmode i64 
    push           pc_disasm.decodeaddr.mode i64 
    push           1          i64 
    casejumpeq     #18091     i64 0
    push           2          i64 
    casejumpeq     #18092     i64 0
    popstack                  i64 
    jump           #18093     
#18091: 
    setargs                   0 0
    callfn         &pc_disasm.readsbyte i64 
    pop            pc_disasm.offset i64 
    jump           #18094     
#18092: 
    setargs                   0 0
    callfn         &pc_disasm.readint32 i64 
    pop            pc_disasm.offset i64 
    jump           #18094     
#18093: 
#18094: 
#18090: 
    jump           #18087     
#18088: 
    push           2          i64 
    pop            pc_disasm.addrmode i64 
    setargs                   0 0
    callfn         &pc_disasm.readbyte i64 
    pop            pc_disasm.decodeaddr.sib i64 
    push           pc_disasm.decodeaddr.sib i64 
    push           3          i64 
    shr                       i64 
    push           7          i64 
    iand                      i64 
    push           1          i64 
    add                       i64 
    pop            pc_disasm.indexreg i64 
    push           pc_disasm.decodeaddr.sib i64 
    push           7          i64 
    iand                      i64 
    push           1          i64 
    add                       i64 
    pop            pc_disasm.basereg i64 
    startmult                 
    push           pc_disasm.decodeaddr.sib i64 
    push           6          i64 
    shr                       i64 
    push           1          i64 
    add                       i64 
    switch         #18095     1 4
    opnd           #18096     
#18095: 
    switchlabel    #18097     
    switchlabel    #18098     
    switchlabel    #18099     
    switchlabel    #18100     
    endswitch                 
#18097: 
    push           1          i64 
    resetmult                 
    jump           #18101     
#18098: 
    push           2          i64 
    resetmult                 
    jump           #18101     
#18099: 
    push           4          i64 
    resetmult                 
    jump           #18101     
#18100: 
    push           8          i64 
    resetmult                 
    jump           #18101     
#18096: 
    push           0          i64 
    endmult                   
#18101: 
    pop            pc_disasm.scale i64 
    push           pc_disasm.decodeaddr.mode i64 
    push           0          i64 
    jumpne         #18102     i64 
    push           pc_disasm.basereg i64 
    push           6          i64 
    jumpne         #18102     i64 
    push           pc_disasm.indexreg i64 
    push           5          i64 
    jumpne         #18102     i64 
    push           0          i64 
    store          pc_disasm.basereg i64 
    pop            pc_disasm.indexreg i64 
    setargs                   0 0
    callfn         &pc_disasm.readint32 i64 
    pop            pc_disasm.offset i64 
    jump           #18103     
#18102: 
    push           pc_disasm.decodeaddr.mode i64 
    push           0          i64 
    jumpne         #18104     i64 
    push           pc_disasm.basereg i64 
    push           6          i64 
    jumpne         #18104     i64 
    push           0          i64 
    pop            pc_disasm.basereg i64 
    setargs                   0 0
    callfn         &pc_disasm.readint32 i64 
    pop            pc_disasm.offset i64 
    jump           #18103     
#18104: 
    push           pc_disasm.decodeaddr.mode i64 
    push           0          i64 
    jumpne         #18105     i64 
    push           pc_disasm.indexreg i64 
    push           5          i64 
    jumpne         #18105     i64 
    push           0          i64 
    pop            pc_disasm.indexreg i64 
    jump           #18103     
#18105: 
    push           pc_disasm.decodeaddr.mode i64 
    push           1          i64 
    casejumpeq     #18106     i64 0
    push           2          i64 
    casejumpeq     #18107     i64 0
    popstack                  i64 
    jump           #18108     
#18106: 
    setargs                   0 0
    callfn         &pc_disasm.readsbyte i64 
    pop            pc_disasm.offset i64 
    jump           #18109     
#18107: 
    setargs                   0 0
    callfn         &pc_disasm.readint32 i64 
    pop            pc_disasm.offset i64 
    jump           #18109     
#18108: 
#18109: 
    push           pc_disasm.indexreg i64 
    push           5          i64 
    jumpne         #18110     i64 
    push           0          i64 
    pop            pc_disasm.indexreg i64 
#18110: 
#18103: 
#18087: 
    push           pc_disasm.basereg i64 
    jumpfalse      #18111     i64 
    push           pc_disasm.rex i64 
    push           1          i64 
    iand                      i64 
    jumpfalse      #18111     i64 
    push           &pc_disasm.basereg 
    push           8          i64 
    addto                     i64 
#18111: 
    push           pc_disasm.indexreg i64 
    jumpfalse      #18112     i64 
    push           pc_disasm.rex i64 
    push           2          i64 
    iand                      i64 
    jumpfalse      #18112     i64 
    push           &pc_disasm.indexreg 
    push           8          i64 
    addto                     i64 
#18112: 
    push           pc_disasm.decodeaddr.xxx i64 
    push           1          i64 
    add                       i64 
    pop            pc_disasm.rmreg i64 
    push           pc_disasm.rex i64 
    push           4          i64 
    iand                      i64 
    jumpfalse      #18113     i64 
    push           &pc_disasm.rmreg 
    push           8          i64 
    addto                     i64 
#18113: 
    push           pc_disasm.decodeaddr.xxx i64 
    pop            pc_disasm.rmopc i64 
#18114: 
    retproc                   
End


Proc pc_disasm.readbyte: i64
    procentry                 
    push           &pc_disasm.codeptr 
    loadincr                  u64 1
    pushptr                   u8 
    setret                    i64 
    jump           #18116     
#18116: 
    retfn                     i64 
End


Proc pc_disasm.readsbyte: i64
    procentry                 
    push           &pc_disasm.codeptr 
    loadincr                  u64 1
    pushptr                   i8 
    setret                    i64 
    jump           #18118     
#18118: 
    retfn                     i64 
End


Proc pc_disasm.readword16: u64
    local          pc_disasm.readword16.a u64 
    procentry                 
    push           pc_disasm.codeptr u64 
    pushptr                   u16 
    pop            pc_disasm.readword16.a u64 
    push           &pc_disasm.codeptr 
    push           2          i64 
    addrefoffto               u64 1 0
    push           pc_disasm.readword16.a u64 
    setret                    u64 
    jump           #18120     
#18120: 
    retfn                     u64 
End


Proc pc_disasm.readint16: i64
    local          pc_disasm.readint16.a i64 
    procentry                 
    push           pc_disasm.codeptr u64 
    pushptr                   i16 
    pop            pc_disasm.readint16.a i64 
    push           &pc_disasm.codeptr 
    push           2          i64 
    addrefoffto               u64 1 0
    push           pc_disasm.readint16.a i64 
    setret                    i64 
    jump           #18122     
#18122: 
    retfn                     i64 
End


Proc pc_disasm.readword32: u64
    local          pc_disasm.readword32.a u64 
    procentry                 
    push           pc_disasm.codeptr u64 
    pushptr                   u32 
    pop            pc_disasm.readword32.a u64 
    push           &pc_disasm.codeptr 
    push           4          i64 
    addrefoffto               u64 1 0
    push           pc_disasm.readword32.a u64 
    setret                    u64 
    jump           #18124     
#18124: 
    retfn                     u64 
End


Proc pc_disasm.readint32: i64
    local          pc_disasm.readint32.a i64 
    procentry                 
    push           pc_disasm.codeptr u64 
    pushptr                   i32 
    pop            pc_disasm.readint32.a i64 
    push           &pc_disasm.codeptr 
    push           4          i64 
    addrefoffto               u64 1 0
    push           pc_disasm.readint32.a i64 
    setret                    i64 
    jump           #18126     
#18126: 
    retfn                     i64 
End


Proc pc_disasm.readint64: i64
    local          pc_disasm.readint64.a i64 
    procentry                 
    push           pc_disasm.codeptr u64 
    pushptr                   i64 
    pop            pc_disasm.readint64.a i64 
    push           &pc_disasm.codeptr 
    push           8          i64 
    addrefoffto               u64 1 0
    push           pc_disasm.readint64.a i64 
    setret                    i64 
    jump           #18128     
#18128: 
    retfn                     i64 
End


Proc pc_disasm.getreg: i64
    param          pc_disasm.getreg.regcode i64 
    param          pc_disasm.getreg.upper i64 
    procentry                 
    push           pc_disasm.getreg.upper i64 
    jumpfalse      #18130     i64 
    push           pc_disasm.getreg.regcode i64 
    push           8          i64 
    add                       i64 
    push           1          i64 
    add                       i64 
    setret                    i64 
    jump           #18131     
#18130: 
    push           pc_disasm.getreg.regcode i64 
    push           1          i64 
    add                       i64 
    setret                    i64 
    jump           #18131     
#18131: 
    retfn                     i64 
End


Proc pc_disasm.strreg: u64
    param          pc_disasm.strreg.reg i64 
    param          pc_disasm.strreg.opsize i64 
    procentry                 
    push           pc_disasm.strreg.reg i64 
    push           0          i64 
    jumpne         #18133     i64 
    push           "<>"       u64 
    setret                    u64 
    jump           #18134     
#18133: 
    push           pc_disasm.strreg.opsize i64 
    push           1          i64 
    casejumpeq     #18135     i64 0
    push           2          i64 
    casejumpeq     #18136     i64 0
    push           4          i64 
    casejumpeq     #18137     i64 0
    push           8          i64 
    casejumpeq     #18138     i64 0
    popstack                  i64 
    jump           #18139     
#18135: 
    push           &pc_disasm.strreg.regnames8 
    push           pc_disasm.strreg.reg i64 
    pushptroff                u64 8 -8
    setret                    u64 
    jump           #18134     
    jump           #18140     
#18136: 
    push           &pc_disasm.strreg.regnames16 
    push           pc_disasm.strreg.reg i64 
    pushptroff                u64 8 -8
    setret                    u64 
    jump           #18134     
    jump           #18140     
#18137: 
    push           &pc_disasm.strreg.regnames32 
    push           pc_disasm.strreg.reg i64 
    pushptroff                u64 8 -8
    setret                    u64 
    jump           #18134     
    jump           #18140     
#18138: 
    push           &pc_disasm.strreg.regnames64 
    push           pc_disasm.strreg.reg i64 
    pushptroff                u64 8 -8
    setret                    u64 
    jump           #18134     
    jump           #18140     
#18139: 
#18140: 
    push           ""         u64 
    setret                    u64 
    jump           #18134     
#18134: 
    retfn                     u64 
End


Proc pc_disasm.strfreg: u64
    param          pc_disasm.strfreg.freg i64 
    procentry                 
    push           &pc_disasm.strfreg.fregnames 
    push           pc_disasm.strfreg.freg i64 
    pushptroff                u64 8 -8
    setret                    u64 
    jump           #18142     
#18142: 
    retfn                     u64 
End


Proc pc_disasm.printaddrmode:
    param          pc_disasm.printaddrmode.xmm i64 
    local          pc_disasm.printaddrmode.plus u64 
    local          pc_disasm.printaddrmode.addrsize i64 
    procentry                 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_disasm.genstr 
    push           pc_disasm.addrmode i64 
    push           1          i64 
    casejumpeq     #18144     i64 0
    popstack                  i64 
    jump           #18145     
#18144: 
    push           pc_disasm.printaddrmode.xmm i64 
    jumpfalse      #18146     i64 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.basereg i64 
    callfn         &pc_disasm.strxmm u64 
    callproc       &pc_disasm.genstr 
    jump           #18147     
#18146: 
    setargs                   1 0
    push           &pc_disasm.basereg 
    callproc       &pc_disasm.getsilx 
    setargs                   1 0
    setargs                   2 0
    push           pc_disasm.opsize i64 
    push           pc_disasm.basereg i64 
    callfn         &pc_disasm.strreg u64 
    callproc       &pc_disasm.genstr 
#18147: 
    jump           #18148     
    jump           #18149     
#18145: 
#18149: 
    push           pc_disasm.opsize i64 
    push           1          i64 
    casejumpeq     #18150     i64 0
    push           2          i64 
    casejumpeq     #18151     i64 0
    push           4          i64 
    casejumpeq     #18152     i64 0
    push           8          i64 
    casejumpeq     #18153     i64 0
    push           10         i64 
    casejumpeq     #18154     i64 0
    push           16         i64 
    casejumpeq     #18155     i64 0
    popstack                  i64 
    jump           #18156     
#18150: 
    setargs                   1 0
    push           "byte "    u64 
    callproc       &pc_disasm.genstr 
    jump           #18157     
#18151: 
    setargs                   1 0
    push           "word "    u64 
    callproc       &pc_disasm.genstr 
    jump           #18157     
#18152: 
    setargs                   1 0
    push           "dword "   u64 
    callproc       &pc_disasm.genstr 
    jump           #18157     
#18153: 
    setargs                   1 0
    push           "qword "   u64 
    callproc       &pc_disasm.genstr 
    jump           #18157     
#18154: 
    setargs                   1 0
    push           "tword "   u64 
    callproc       &pc_disasm.genstr 
    jump           #18157     
#18155: 
    setargs                   1 0
    push           "oword "   u64 
    callproc       &pc_disasm.genstr 
    jump           #18157     
#18156: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "///OPSIZE" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_disasm.opsize i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#18157: 
    setargs                   1 0
    push           "["        u64 
    callproc       &pc_disasm.genstr 
    push           ""         u64 
    pop            pc_disasm.printaddrmode.plus u64 
    startmult                 
    push           pc_disasm.addroverride i64 
    jumpfalse      #18158     i64 
    push           4          i64 
    resetmult                 
    jump           #18159     
#18158: 
    push           8          i64 
    endmult                   
#18159: 
    pop            pc_disasm.printaddrmode.addrsize i64 
    push           pc_disasm.basereg i64 
    jumpfalse      #18160     i64 
    setargs                   1 0
    setargs                   2 0
    push           pc_disasm.printaddrmode.addrsize i64 
    push           pc_disasm.basereg i64 
    callfn         &pc_disasm.strreg u64 
    callproc       &pc_disasm.genstr 
    push           "+"        u64 
    pop            pc_disasm.printaddrmode.plus u64 
#18160: 
    push           pc_disasm.indexreg i64 
    jumpfalse      #18161     i64 
    setargs                   1 0
    push           pc_disasm.printaddrmode.plus u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   2 0
    push           pc_disasm.printaddrmode.addrsize i64 
    push           pc_disasm.indexreg i64 
    callfn         &pc_disasm.strreg u64 
    callproc       &pc_disasm.genstr 
    push           pc_disasm.scale i64 
    push           1          i64 
    jumple         #18162     i64 
    setargs                   1 0
    push           "*"        u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           pc_disasm.scale i64 
    callproc       &pc_disasm.genintd 
#18162: 
    push           "+"        u64 
    pop            pc_disasm.printaddrmode.plus u64 
#18161: 
    push           pc_disasm.offset i64 
    jumptrue       #18163     i64 
    push           pc_disasm.basereg i64 
    push           0          i64 
    jumpne         #18164     i64 
    push           pc_disasm.indexreg i64 
    push           0          i64 
    jumpne         #18164     i64 
#18163: 
    push           pc_disasm.basereg i64 
    push           0          i64 
    jumpne         #18165     i64 
    push           pc_disasm.indexreg i64 
    push           0          i64 
    jumpne         #18165     i64 
    setargs                   1 0
    push           pc_disasm.offset i64 
    callproc       &pc_disasm.genhex 
    jump           #18166     
#18165: 
    push           pc_disasm.offset i64 
    push           0          i64 
    jumple         #18167     i64 
    setargs                   1 0
    push           pc_disasm.printaddrmode.plus u64 
    callproc       &pc_disasm.genstr 
#18167: 
    setargs                   1 0
    push           pc_disasm.offset i64 
    callproc       &pc_disasm.genintd 
#18166: 
#18164: 
    setargs                   1 0
    push           "]"        u64 
    callproc       &pc_disasm.genstr 
    push           pc_disasm.addrmode i64 
    push           3          i64 
    jumpne         #18168     i64 
    setargs                   1 0
    push           "+RIP"     u64 
    callproc       &pc_disasm.genstr 
#18168: 
#18148: 
    retproc                   
End


Proc pc_disasm.genstr:
    param          pc_disasm.genstr.s u64 
    procentry                 
    setargs                   2 0
    push           pc_disasm.genstr.s u64 
    push           &pc_disasm.deststr 
    callproc       &strcat    
#18170: 
    retproc                   
End


Proc pc_disasm.genintd:
    param          pc_disasm.genintd.a i64 
    procentry                 
    setargs                   1 0
    setargs                   2 0
    push           0          u64 
    push           pc_disasm.genintd.a i64 
    callfn         &msysp.strint u64 
    callproc       &pc_disasm.genstr 
#18172: 
    retproc                   
End


Proc pc_disasm.genhex:
    param          pc_disasm.genhex.a i64 
    procentry                 
    setargs                   1 0
    setargs                   2 0
    push           "h"        u64 
    push           pc_disasm.genhex.a i64 
    callfn         &msysp.strint u64 
    callproc       &pc_disasm.genstr 
#18174: 
    retproc                   
End


Proc pc_disasm.readimm: i64
    procentry                 
    push           pc_disasm.opsize i64 
    push           1          i64 
    casejumpeq     #18176     i64 0
    push           2          i64 
    casejumpeq     #18177     i64 0
    push           4          i64 
    casejumpeq     #18178     i64 0
    push           8          i64 
    casejumpeq     #18178     i64 0
    popstack                  i64 
    jump           #18179     
#18176: 
    setargs                   0 0
    callfn         &pc_disasm.readsbyte i64 
    setret                    i64 
    jump           #18180     
    jump           #18181     
#18177: 
    setargs                   0 0
    callfn         &pc_disasm.readint16 i64 
    setret                    i64 
    jump           #18180     
    jump           #18181     
#18178: 
    setargs                   0 0
    callfn         &pc_disasm.readint32 i64 
    setret                    i64 
    jump           #18180     
    jump           #18181     
#18179: 
#18181: 
    push           0          i64 
    setret                    i64 
    jump           #18180     
#18180: 
    retfn                     i64 
End


Proc pc_disasm.readimm8: i64
    procentry                 
    push           pc_disasm.opsize i64 
    push           8          i64 
    jumpge         #18183     i64 
    setargs                   0 0
    callfn         &pc_disasm.readimm i64 
    setret                    i64 
    jump           #18184     
#18183: 
    setargs                   0 0
    callfn         &pc_disasm.readint64 i64 
    setret                    i64 
    jump           #18184     
#18184: 
    retfn                     i64 
End


Proc pc_disasm.strxmm: u64
    param          pc_disasm.strxmm.reg i64 
    procentry                 
    setargs                   1 0
    push           &pc_disasm.strxmm.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "xmm"      u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           pc_disasm.strxmm.reg i64 
    push           1          i64 
    sub                       i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           &pc_disasm.strxmm.str 
    setret                    u64 
    jump           #18186     
#18186: 
    retfn                     u64 
End


Proc pc_disasm.strmmx: u64
    param          pc_disasm.strmmx.reg i64 
    procentry                 
    setargs                   1 0
    push           &pc_disasm.strmmx.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "mmx"      u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           pc_disasm.strmmx.reg i64 
    push           1          i64 
    sub                       i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           &pc_disasm.strmmx.str 
    setret                    u64 
    jump           #18188     
#18188: 
    retfn                     u64 
End


Proc pc_disasm.decode8087:
    param          pc_disasm.decode8087.ttt i64 
    local          pc_disasm.decode8087.bb u8 
    local          pc_disasm.decode8087.longopc i64 
    local          pc_disasm.decode8087.freg i64 
    local          pc_disasm.decode8087.shortopc i64 
    local          pc_disasm.decode8087.code i64 
    procentry                 
    push           &pc_disasm.codeptr 
    loadincr                  u64 1
    pushptr                   u8 
    pop            pc_disasm.decode8087.bb u8 
    push           pc_disasm.decode8087.ttt i64 
    push           8          i64 
    shl                       i64 
    push           pc_disasm.decode8087.bb u8 
    add                       i64 
    pop            pc_disasm.decode8087.longopc i64 
    push           pc_disasm.decode8087.bb u8 
    push           7          i64 
    iand                      i64 
    push           1          i64 
    add                       i64 
    pop            pc_disasm.decode8087.freg i64 
    push           pc_disasm.decode8087.longopc i64 
    push           1753       i64 
    casejumpeq     #18190     i64 0
    push           484        i64 
    casejumpeq     #18191     i64 0
    push           485        i64 
    casejumpeq     #18192     i64 0
    push           494        i64 
    casejumpeq     #18193     i64 0
    push           488        i64 
    casejumpeq     #18194     i64 0
    push           491        i64 
    casejumpeq     #18195     i64 0
    push           489        i64 
    casejumpeq     #18196     i64 0
    push           490        i64 
    casejumpeq     #18197     i64 0
    push           492        i64 
    casejumpeq     #18198     i64 0
    push           493        i64 
    casejumpeq     #18199     i64 0
    push           506        i64 
    casejumpeq     #18200     i64 0
    push           510        i64 
    casejumpeq     #18201     i64 0
    push           511        i64 
    casejumpeq     #18202     i64 0
    push           507        i64 
    casejumpeq     #18203     i64 0
    push           509        i64 
    casejumpeq     #18204     i64 0
    push           504        i64 
    casejumpeq     #18205     i64 0
    push           508        i64 
    casejumpeq     #18206     i64 0
    push           500        i64 
    casejumpeq     #18207     i64 0
    push           481        i64 
    casejumpeq     #18208     i64 0
    push           480        i64 
    casejumpeq     #18209     i64 0
    push           498        i64 
    casejumpeq     #18210     i64 0
    push           499        i64 
    casejumpeq     #18211     i64 0
    push           496        i64 
    casejumpeq     #18212     i64 0
    push           497        i64 
    casejumpeq     #18213     i64 0
    push           505        i64 
    casejumpeq     #18214     i64 0
    push           995        i64 
    casejumpeq     #18215     i64 0
    push           992        i64 
    casejumpeq     #18216     i64 0
    push           993        i64 
    casejumpeq     #18217     i64 0
    push           994        i64 
    casejumpeq     #18218     i64 0
    push           503        i64 
    casejumpeq     #18219     i64 0
    push           502        i64 
    casejumpeq     #18220     i64 0
    push           464        i64 
    casejumpeq     #18221     i64 0
    popstack                  i64 
    jump           #18222     
#18190: 
    setargs                   1 0
    push           "fcompp"   u64 
    callproc       &pc_disasm.genstr 
    jump           #18223     
#18191: 
    setargs                   1 0
    push           "ftst"     u64 
    callproc       &pc_disasm.genstr 
    jump           #18223     
#18192: 
    setargs                   1 0
    push           "fxam"     u64 
    callproc       &pc_disasm.genstr 
    jump           #18223     
#18193: 
    setargs                   1 0
    push           "fldz"     u64 
    callproc       &pc_disasm.genstr 
    jump           #18223     
#18194: 
    setargs                   1 0
    push           "fld1"     u64 
    callproc       &pc_disasm.genstr 
    jump           #18223     
#18195: 
    setargs                   1 0
    push           "fldpi"    u64 
    callproc       &pc_disasm.genstr 
    jump           #18223     
#18196: 
    setargs                   1 0
    push           "fldl2t"   u64 
    callproc       &pc_disasm.genstr 
    jump           #18223     
#18197: 
    setargs                   1 0
    push           "fldl2e"   u64 
    callproc       &pc_disasm.genstr 
    jump           #18223     
#18198: 
    setargs                   1 0
    push           "fldlg2"   u64 
    callproc       &pc_disasm.genstr 
    jump           #18223     
#18199: 
    setargs                   1 0
    push           "fldln2"   u64 
    callproc       &pc_disasm.genstr 
    jump           #18223     
#18200: 
    setargs                   1 0
    push           "fsqrt"    u64 
    callproc       &pc_disasm.genstr 
    jump           #18223     
#18201: 
    setargs                   1 0
    push           "fsin"     u64 
    callproc       &pc_disasm.genstr 
    jump           #18223     
#18202: 
    setargs                   1 0
    push           "fcos"     u64 
    callproc       &pc_disasm.genstr 
    jump           #18223     
#18203: 
    setargs                   1 0
    push           "fsincos"  u64 
    callproc       &pc_disasm.genstr 
    jump           #18223     
#18204: 
    setargs                   1 0
    push           "fscale"   u64 
    callproc       &pc_disasm.genstr 
    jump           #18223     
#18205: 
    setargs                   1 0
    push           "fprem"    u64 
    callproc       &pc_disasm.genstr 
    jump           #18223     
#18206: 
    setargs                   1 0
    push           "frndint"  u64 
    callproc       &pc_disasm.genstr 
    jump           #18223     
#18207: 
    setargs                   1 0
    push           "fxtract"  u64 
    callproc       &pc_disasm.genstr 
    jump           #18223     
#18208: 
    setargs                   1 0
    push           "fabs"     u64 
    callproc       &pc_disasm.genstr 
    jump           #18223     
#18209: 
    setargs                   1 0
    push           "fchs"     u64 
    callproc       &pc_disasm.genstr 
    jump           #18223     
#18210: 
    setargs                   1 0
    push           "fptan"    u64 
    callproc       &pc_disasm.genstr 
    jump           #18223     
#18211: 
    setargs                   1 0
    push           "fpatan"   u64 
    callproc       &pc_disasm.genstr 
    jump           #18223     
#18212: 
    setargs                   1 0
    push           "f2xm1"    u64 
    callproc       &pc_disasm.genstr 
    jump           #18223     
#18213: 
    setargs                   1 0
    push           "fyl2x"    u64 
    callproc       &pc_disasm.genstr 
    jump           #18223     
#18214: 
    setargs                   1 0
    push           "fyl2xp1"  u64 
    callproc       &pc_disasm.genstr 
    jump           #18223     
#18215: 
    setargs                   1 0
    push           "finit"    u64 
    callproc       &pc_disasm.genstr 
    jump           #18223     
#18216: 
    setargs                   1 0
    push           "feni"     u64 
    callproc       &pc_disasm.genstr 
    jump           #18223     
#18217: 
    setargs                   1 0
    push           "fdisi"    u64 
    callproc       &pc_disasm.genstr 
    jump           #18223     
#18218: 
    setargs                   1 0
    push           "fclex"    u64 
    callproc       &pc_disasm.genstr 
    jump           #18223     
#18219: 
    setargs                   1 0
    push           "fincstp"  u64 
    callproc       &pc_disasm.genstr 
    jump           #18223     
#18220: 
    setargs                   1 0
    push           "fdecstp"  u64 
    callproc       &pc_disasm.genstr 
    jump           #18223     
#18221: 
    setargs                   1 0
    push           "fnop"     u64 
    callproc       &pc_disasm.genstr 
    jump           #18223     
#18222: 
    push           pc_disasm.decode8087.longopc i64 
    push           2040       i64 
    iand                      i64 
    push           448        i64 
    casejumpeq     #18224     i64 0
    push           1488       i64 
    casejumpeq     #18225     i64 0
    push           1496       i64 
    casejumpeq     #18226     i64 0
    push           456        i64 
    casejumpeq     #18227     i64 0
    push           208        i64 
    casejumpeq     #18228     i64 0
    push           216        i64 
    casejumpeq     #18229     i64 0
    push           1472       i64 
    casejumpeq     #18230     i64 0
    popstack                  i64 
    jump           #18231     
#18224: 
    setargs                   1 0
    push           "fld "     u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.decode8087.freg i64 
    callfn         &pc_disasm.strfreg u64 
    callproc       &pc_disasm.genstr 
    jump           #18232     
#18225: 
    setargs                   1 0
    push           "fst "     u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.decode8087.freg i64 
    callfn         &pc_disasm.strfreg u64 
    callproc       &pc_disasm.genstr 
    jump           #18232     
#18226: 
    setargs                   1 0
    push           "fstp "    u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.decode8087.freg i64 
    callfn         &pc_disasm.strfreg u64 
    callproc       &pc_disasm.genstr 
    jump           #18232     
#18227: 
    setargs                   1 0
    push           "fxch "    u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.decode8087.freg i64 
    callfn         &pc_disasm.strfreg u64 
    callproc       &pc_disasm.genstr 
    jump           #18232     
#18228: 
    setargs                   1 0
    push           "fcom "    u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.decode8087.freg i64 
    callfn         &pc_disasm.strfreg u64 
    callproc       &pc_disasm.genstr 
    jump           #18232     
#18229: 
    setargs                   1 0
    push           "fcomp "   u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.decode8087.freg i64 
    callfn         &pc_disasm.strfreg u64 
    callproc       &pc_disasm.genstr 
    jump           #18232     
#18230: 
    setargs                   1 0
    push           "ffree "   u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.decode8087.freg i64 
    callfn         &pc_disasm.strfreg u64 
    callproc       &pc_disasm.genstr 
    jump           #18232     
#18231: 
    push           pc_disasm.decode8087.longopc i64 
    push           504        i64 
    iand                      i64 
    push           192        i64 
    casejumpeq     #18233     i64 0
    push           224        i64 
    casejumpeq     #18234     i64 0
    push           232        i64 
    casejumpeq     #18235     i64 0
    push           200        i64 
    casejumpeq     #18236     i64 0
    push           240        i64 
    casejumpeq     #18237     i64 0
    push           248        i64 
    casejumpeq     #18238     i64 0
    popstack                  i64 
    jump           #18239     
#18233: 
    setargs                   3 0
    push           pc_disasm.decode8087.freg i64 
    push           pc_disasm.decode8087.ttt i64 
    push           "fadd"     u64 
    callproc       &pc_disasm.do87arith 
    jump           #18240     
#18234: 
    setargs                   3 0
    push           pc_disasm.decode8087.freg i64 
    push           pc_disasm.decode8087.ttt i64 
    push           "fsub"     u64 
    callproc       &pc_disasm.do87arith 
    jump           #18240     
#18235: 
    setargs                   3 0
    push           pc_disasm.decode8087.freg i64 
    push           pc_disasm.decode8087.ttt i64 
    push           "fsubr"    u64 
    callproc       &pc_disasm.do87arith 
    jump           #18240     
#18236: 
    setargs                   3 0
    push           pc_disasm.decode8087.freg i64 
    push           pc_disasm.decode8087.ttt i64 
    push           "fmul"     u64 
    callproc       &pc_disasm.do87arith 
    jump           #18240     
#18237: 
    setargs                   3 0
    push           pc_disasm.decode8087.freg i64 
    push           pc_disasm.decode8087.ttt i64 
    push           "fdiv"     u64 
    callproc       &pc_disasm.do87arith 
    jump           #18240     
#18238: 
    setargs                   3 0
    push           pc_disasm.decode8087.freg i64 
    push           pc_disasm.decode8087.ttt i64 
    push           "fdivr"    u64 
    callproc       &pc_disasm.do87arith 
    jump           #18240     
#18239: 
    push           &pc_disasm.codeptr 
    decr                      u64 1
    setargs                   1 0
    push           0          i64 
    callproc       &pc_disasm.decodeaddr 
    push           pc_disasm.decode8087.ttt i64 
    push           3          i64 
    shl                       i64 
    push           pc_disasm.rmopc i64 
    add                       i64 
    pop            pc_disasm.decode8087.shortopc i64 
    push           pc_disasm.decode8087.shortopc i64 
    push           61         i64 
    casejumpeq     #18241     i64 0
    push           29         i64 
    casejumpeq     #18242     i64 0
    push           60         i64 
    casejumpeq     #18243     i64 0
    push           63         i64 
    casejumpeq     #18244     i64 0
    push           31         i64 
    casejumpeq     #18245     i64 0
    push           62         i64 
    casejumpeq     #18246     i64 0
    push           13         i64 
    casejumpeq     #18247     i64 0
    push           15         i64 
    casejumpeq     #18248     i64 0
    push           47         i64 
    casejumpeq     #18249     i64 0
    push           14         i64 
    casejumpeq     #18250     i64 0
    push           12         i64 
    casejumpeq     #18251     i64 0
    push           46         i64 
    casejumpeq     #18252     i64 0
    push           44         i64 
    casejumpeq     #18253     i64 0
    popstack                  i64 
    jump           #18254     
#18241: 
    setargs                   2 0
    push           4          i64 
    push           "fld"      u64 
    callproc       &pc_disasm.do87mem 
    jump           #18255     
#18242: 
    setargs                   2 0
    push           5          i64 
    push           "fld"      u64 
    callproc       &pc_disasm.do87mem 
    jump           #18255     
#18243: 
    setargs                   2 0
    push           -1         i64 
    push           "fldbcd"   u64 
    callproc       &pc_disasm.do87mem 
    jump           #18255     
#18244: 
    setargs                   2 0
    push           4          i64 
    push           "fstp"     u64 
    callproc       &pc_disasm.do87mem 
    jump           #18255     
#18245: 
    setargs                   2 0
    push           5          i64 
    push           "fstp"     u64 
    callproc       &pc_disasm.do87mem 
    jump           #18255     
#18246: 
    setargs                   2 0
    push           -1         i64 
    push           "fstpbcd"  u64 
    callproc       &pc_disasm.do87mem 
    jump           #18255     
#18247: 
    setargs                   2 0
    push           -1         i64 
    push           "fldcw"    u64 
    callproc       &pc_disasm.do87mem 
    jump           #18255     
#18248: 
    setargs                   2 0
    push           -1         i64 
    push           "fstcw"    u64 
    callproc       &pc_disasm.do87mem 
    jump           #18255     
#18249: 
    setargs                   2 0
    push           -1         i64 
    push           "fstsw"    u64 
    callproc       &pc_disasm.do87mem 
    jump           #18255     
#18250: 
    setargs                   2 0
    push           -1         i64 
    push           "fstenv"   u64 
    callproc       &pc_disasm.do87mem 
    jump           #18255     
#18251: 
    setargs                   2 0
    push           -1         i64 
    push           "fldenv"   u64 
    callproc       &pc_disasm.do87mem 
    jump           #18255     
#18252: 
    setargs                   2 0
    push           -1         i64 
    push           "fsave"    u64 
    callproc       &pc_disasm.do87mem 
    jump           #18255     
#18253: 
    setargs                   2 0
    push           -1         i64 
    push           "frstor"   u64 
    callproc       &pc_disasm.do87mem 
    jump           #18255     
#18254: 
    push           pc_disasm.decode8087.shortopc i64 
    push           15         i64 
    iand                      i64 
    push           8          i64 
    casejumpeq     #18256     i64 0
    push           10         i64 
    casejumpeq     #18257     i64 0
    push           11         i64 
    casejumpeq     #18258     i64 0
    push           2          i64 
    casejumpeq     #18259     i64 0
    push           3          i64 
    casejumpeq     #18260     i64 0
    push           0          i64 
    casejumpeq     #18261     i64 0
    push           4          i64 
    casejumpeq     #18262     i64 0
    push           5          i64 
    casejumpeq     #18263     i64 0
    push           1          i64 
    casejumpeq     #18264     i64 0
    push           6          i64 
    casejumpeq     #18265     i64 0
    push           7          i64 
    casejumpeq     #18266     i64 0
    popstack                  i64 
    jump           #18267     
#18256: 
    setargs                   2 0
    push           pc_disasm.decode8087.ttt i64 
    push           1          i64 
    shr                       i64 
    push           "fld"      u64 
    callproc       &pc_disasm.do87mem 
    jump           #18268     
#18257: 
    setargs                   2 0
    push           pc_disasm.decode8087.ttt i64 
    push           1          i64 
    shr                       i64 
    push           "fst"      u64 
    callproc       &pc_disasm.do87mem 
    jump           #18268     
#18258: 
    setargs                   2 0
    push           pc_disasm.decode8087.ttt i64 
    push           1          i64 
    shr                       i64 
    push           "fstp"     u64 
    callproc       &pc_disasm.do87mem 
    jump           #18268     
#18259: 
    setargs                   2 0
    push           pc_disasm.decode8087.ttt i64 
    push           1          i64 
    shr                       i64 
    push           "fcom"     u64 
    callproc       &pc_disasm.do87mem 
    jump           #18268     
#18260: 
    setargs                   2 0
    push           pc_disasm.decode8087.ttt i64 
    push           1          i64 
    shr                       i64 
    push           "fcomp"    u64 
    callproc       &pc_disasm.do87mem 
    jump           #18268     
#18261: 
    setargs                   2 0
    push           pc_disasm.decode8087.ttt i64 
    push           1          i64 
    shr                       i64 
    push           "fadd"     u64 
    callproc       &pc_disasm.do87mem 
    jump           #18268     
#18262: 
    setargs                   2 0
    push           pc_disasm.decode8087.ttt i64 
    push           1          i64 
    shr                       i64 
    push           "fsub"     u64 
    callproc       &pc_disasm.do87mem 
    jump           #18268     
#18263: 
    setargs                   2 0
    push           pc_disasm.decode8087.ttt i64 
    push           1          i64 
    shr                       i64 
    push           "fsubr"    u64 
    callproc       &pc_disasm.do87mem 
    jump           #18268     
#18264: 
    setargs                   2 0
    push           pc_disasm.decode8087.ttt i64 
    push           1          i64 
    shr                       i64 
    push           "fmul"     u64 
    callproc       &pc_disasm.do87mem 
    jump           #18268     
#18265: 
    setargs                   2 0
    push           pc_disasm.decode8087.ttt i64 
    push           1          i64 
    shr                       i64 
    push           "fdiv"     u64 
    callproc       &pc_disasm.do87mem 
    jump           #18268     
#18266: 
    setargs                   2 0
    push           pc_disasm.decode8087.ttt i64 
    push           1          i64 
    shr                       i64 
    push           "fdivr"    u64 
    callproc       &pc_disasm.do87mem 
    jump           #18268     
#18267: 
    setargs                   1 0
    push           "UNKNOWN x87 OPCODE" u64 
    callproc       &pc_disasm.genstr 
#18268: 
#18255: 
#18240: 
#18232: 
#18223: 
#18269: 
    retproc                   
End


Proc pc_disasm.do87arith:
    param          pc_disasm.do87arith.opcstr u64 
    param          pc_disasm.do87arith.ttt i64 
    param          pc_disasm.do87arith.freg i64 
    local          pc_disasm.do87arith.d i64 
    local          pc_disasm.do87arith.p i64 
    procentry                 
    push           pc_disasm.do87arith.ttt i64 
    push           4          i64 
    iand                      i64 
    pop            pc_disasm.do87arith.d i64 
    push           pc_disasm.do87arith.ttt i64 
    push           2          i64 
    iand                      i64 
    pop            pc_disasm.do87arith.p i64 
    setargs                   1 0
    push           pc_disasm.do87arith.opcstr u64 
    callproc       &pc_disasm.genstr 
    push           pc_disasm.do87arith.p i64 
    jumpfalse      #18271     i64 
    setargs                   1 0
    push           "p"        u64 
    callproc       &pc_disasm.genstr 
#18271: 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_disasm.genstr 
    push           pc_disasm.do87arith.d i64 
    push           0          i64 
    jumpne         #18272     i64 
    setargs                   1 0
    push           "st0, "    u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.do87arith.freg i64 
    callfn         &pc_disasm.strfreg u64 
    callproc       &pc_disasm.genstr 
    jump           #18273     
#18272: 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.do87arith.freg i64 
    callfn         &pc_disasm.strfreg u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           ", st0"    u64 
    callproc       &pc_disasm.genstr 
#18273: 
#18274: 
    retproc                   
End


Proc pc_disasm.do87mem:
    param          pc_disasm.do87mem.opcstr u64 
    param          pc_disasm.do87mem.mf i64 
    procentry                 
    setargs                   1 0
    push           "f"        u64 
    callproc       &pc_disasm.genstr 
    push           pc_disasm.do87mem.mf i64 
    push           0          i64 
    casejumpeq     #18276     i64 0
    push           1          i64 
    casejumpeq     #18277     i64 0
    push           2          i64 
    casejumpeq     #18278     i64 0
    push           3          i64 
    casejumpeq     #18279     i64 0
    push           4          i64 
    casejumpeq     #18280     i64 0
    push           5          i64 
    casejumpeq     #18281     i64 0
    popstack                  i64 
    jump           #18282     
#18276: 
    push           4          i64 
    pop            pc_disasm.opsize i64 
    jump           #18283     
#18277: 
    setargs                   1 0
    push           "i"        u64 
    callproc       &pc_disasm.genstr 
    push           4          i64 
    pop            pc_disasm.opsize i64 
    jump           #18283     
#18278: 
    push           8          i64 
    pop            pc_disasm.opsize i64 
    jump           #18283     
#18279: 
    setargs                   1 0
    push           "i"        u64 
    callproc       &pc_disasm.genstr 
    push           2          i64 
    pop            pc_disasm.opsize i64 
    jump           #18283     
#18280: 
    setargs                   1 0
    push           "i"        u64 
    callproc       &pc_disasm.genstr 
    push           8          i64 
    pop            pc_disasm.opsize i64 
    jump           #18283     
#18281: 
    push           10         i64 
    pop            pc_disasm.opsize i64 
    jump           #18283     
#18282: 
#18283: 
    setargs                   1 0
    push           pc_disasm.do87mem.opcstr u64 
    push           1          i64 
    addrefoff                 u64 1 0
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_disasm.printaddrmode 
#18284: 
    retproc                   
End


Proc pc_disasm.getsil:
    param          pc_disasm.getsil.reg u64 
    procentry                 
    push           pc_disasm.opsize i64 
    push           1          i64 
    jumpne         #18286     i64 
    push           pc_disasm.rex i64 
    jumptrue       #18286     i64 
    push           pc_disasm.getsil.reg u64 
    pushptr                   i64 
    push           5          i64 
    jumplt         #18286     i64 
    push           pc_disasm.getsil.reg u64 
    pushptr                   i64 
    push           8          i64 
    jumpgt         #18286     i64 
    push           pc_disasm.getsil.reg u64 
    push           12         i64 
    addto                     i64 
#18286: 
#18287: 
    retproc                   
End


Proc pc_disasm.getsilx:
    param          pc_disasm.getsilx.reg u64 
    procentry                 
    push           pc_disasm.addrmode i64 
    push           1          i64 
    jumpne         #18289     i64 
    push           pc_disasm.opsize i64 
    push           1          i64 
    jumpne         #18289     i64 
    push           pc_disasm.rex i64 
    push           0          i64 
    jumpne         #18289     i64 
    push           pc_disasm.getsilx.reg u64 
    pushptr                   i64 
    push           5          i64 
    jumplt         #18289     i64 
    push           pc_disasm.getsilx.reg u64 
    pushptr                   i64 
    push           8          i64 
    jumpgt         #18289     i64 
    push           pc_disasm.getsilx.reg u64 
    push           12         i64 
    addto                     i64 
#18289: 
#18290: 
    retproc                   
End


Proc mm_libsources_dummy.findstdlib: u64
    param          mm_libsources_dummy.findstdlib.name u64 
    procentry                 
    push           0          u64 
    setret                    u64 
    jump           #18292     
#18292: 
    retfn                     u64 
End


Proc mm_parse.parsemodule: i64
    param          mm_parse.parsemodule.n i64 
    local          mm_parse.parsemodule.m block:456 
    local          mm_parse.parsemodule.p u64 
    local          mm_parse.parsemodule.owner u64 
    local          mm_parse.parsemodule.globalflag i64 
    local          mm_parse.parsemodule.status i64 
    procentry                 
    setargs                   0 0
    callproc       &mm_parse.initparser 
    push           &mm_decls.moduletable 
    push           mm_parse.parsemodule.n i64 
    pushptroff                block:456 456 0
    pop            mm_parse.parsemodule.m block:456 
    push           mm_parse.parsemodule.n i64 
    pop            mm_decls.currmoduleno i64 
    push           &mm_decls.moduletable 
    push           mm_parse.parsemodule.n i64 
    addrefoff                 block:456 456 0
    push           8          
    pushptroff                u64 1 0
    pop            mm_decls.stmodule u64 
    push           mm_decls.stmodule u64 
    pop            mm_decls.currproc u64 
    setargs                   2 0
    push           mm_parse.parsemodule.n i64 
    push           "PARSEMODULE" u64 
    callproc       &mm_lex.startlex 
    push           mm_decls.stmodule u64 
    pop            mm_parse.parsemodule.owner u64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           mm_parse.parsemodule.owner u64 
    callfn         &mm_parse.readmoduledefs i64 
    pop            mm_parse.parsemodule.status i64 
    push           mm_parse.parsemodule.status i64 
    jumptrue       #18294     i64 
    push           0          i64 
    setret                    i64 
    jump           #18295     
#18294: 
    push           mm_parse.parsemodule.status i64 
    setret                    i64 
    jump           #18295     
#18295: 
    retfn                     i64 
End


Proc mm_parse.readmoduledefs: i64
    param          mm_parse.readmoduledefs.owner u64 
    local          mm_parse.readmoduledefs.p u64 
    local          mm_parse.readmoduledefs.dimport u64 
    local          mm_parse.readmoduledefs.stimport u64 
    local          mm_parse.readmoduledefs.globalflag i64 
    local          mm_parse.readmoduledefs.i i64 
    local          mm_parse.readmoduledefs.callbackflag i64 
    local          mm_parse.readmoduledefs.name u64 
    procentry                 
    push           0          i64 
    pop            mm_parse.readmoduledefs.globalflag i64 
    push           0          i64 
    pop            mm_parse.readmoduledefs.callbackflag i64 
#18297: 
    push           &mm_decls.lx 
    pushptr                   u8 
    switch         #18298     2 170
    opnd           #18299     
#18298: 
    switchlabel    #18300     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18301     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18302     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18303     
    switchlabel    #18299     
    switchlabel    #18304     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18302     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18302     
    switchlabel    #18299     
    switchlabel    #18302     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18302     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18305     
    switchlabel    #18305     
    switchlabel    #18299     
    switchlabel    #18306     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18307     
    switchlabel    #18308     
    switchlabel    #18309     
    switchlabel    #18310     
    switchlabel    #18311     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18302     
    switchlabel    #18312     
    switchlabel    #18313     
    switchlabel    #18302     
    switchlabel    #18299     
    switchlabel    #18302     
    switchlabel    #18314     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18315     
    switchlabel    #18316     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18306     
    switchlabel    #18317     
    switchlabel    #18318     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18299     
    switchlabel    #18319     
    endswitch                 
#18318: 
    push           mm_parse.readmoduledefs.globalflag i64 
    jumpfalse      #18320     i64 
    setargs                   1 0
    push           "global global?" u64 
    callproc       &mm_support.serror 
#18320: 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    pop            mm_parse.readmoduledefs.globalflag i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #18321     
#18305: 
    setargs                   3 0
    push           mm_parse.readmoduledefs.callbackflag i64 
    push           mm_parse.readmoduledefs.globalflag i64 
    push           mm_parse.readmoduledefs.owner u64 
    callproc       &mm_parse.readprocdef 
    push           0          i64 
    pop            mm_parse.readmoduledefs.callbackflag i64 
    push           0          i64 
    pop            mm_parse.readmoduledefs.globalflag i64 
    jump           #18321     
#18302: 
    setargs                   5 0
    push           0          i64 
    push           11         i64 
    push           0          i64 
    push           mm_parse.readmoduledefs.globalflag i64 
    push           mm_parse.readmoduledefs.owner u64 
    callproc       &mm_parse.readvardef 
    push           0          i64 
    pop            mm_parse.readmoduledefs.globalflag i64 
    jump           #18321     
#18312: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   5 0
    push           143        i64 
    push           11         i64 
    push           0          i64 
    push           mm_parse.readmoduledefs.globalflag i64 
    push           mm_parse.readmoduledefs.owner u64 
    callproc       &mm_parse.readvardef 
    push           0          i64 
    pop            mm_parse.readmoduledefs.globalflag i64 
    jump           #18321     
#18313: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   5 0
    push           144        i64 
    push           11         i64 
    push           0          i64 
    push           mm_parse.readmoduledefs.globalflag i64 
    push           mm_parse.readmoduledefs.owner u64 
    callproc       &mm_parse.readvardef 
    push           0          i64 
    pop            mm_parse.readmoduledefs.globalflag i64 
    jump           #18321     
#18308: 
    setargs                   1 0
    push           mm_parse.readmoduledefs.owner u64 
    callproc       &mm_parse.readimportmodule 
    jump           #18321     
#18309: 
    setargs                   1 0
    push           75         i64 
    callproc       &mm_parse.lexchecksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #18321     
#18310: 
#18322: 
    setargs                   0 0
    callproc       &mm_lex.lex 
#18323: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           6          i64 
    setjumpeq      #18324     i64 
    push           66         i64 
    setjumpne      #18322     i64 
#18324: 
#18325: 
    jump           #18321     
#18311: 
    setargs                   2 0
    push           mm_parse.readmoduledefs.globalflag i64 
    push           mm_parse.readmoduledefs.owner u64 
    callproc       &mm_parse.readtypedef 
    push           0          i64 
    pop            mm_parse.readmoduledefs.globalflag i64 
    jump           #18321     
#18315: 
    setargs                   2 0
    push           mm_parse.readmoduledefs.globalflag i64 
    push           mm_parse.readmoduledefs.owner u64 
    callproc       &mm_parse.readconstdef 
    push           0          i64 
    pop            mm_parse.readmoduledefs.globalflag i64 
    jump           #18321     
#18306: 
    setargs                   2 0
    push           mm_parse.readmoduledefs.globalflag i64 
    push           mm_parse.readmoduledefs.owner u64 
    callproc       &mm_parse.readclassdef 
    push           0          i64 
    pop            mm_parse.readmoduledefs.globalflag i64 
    jump           #18321     
#18316: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   3 0
    push           mm_parse.readmoduledefs.globalflag i64 
    push           0          i64 
    push           mm_parse.readmoduledefs.owner u64 
    callproc       &mm_parse.readenumtype 
    push           0          i64 
    pop            mm_parse.readmoduledefs.globalflag i64 
    jump           #18321     
#18319: 
    setargs                   2 0
    push           mm_parse.readmoduledefs.globalflag i64 
    push           mm_parse.readmoduledefs.owner u64 
    callproc       &mm_parse.readtabledef 
    push           0          i64 
    pop            mm_parse.readmoduledefs.globalflag i64 
    jump           #18321     
#18304: 
    setargs                   1 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    callproc       &mm_parse.adddocstring 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #18321     
#18307: 
    push           mm_parse.readmoduledefs.globalflag i64 
    jumpfalse      #18326     i64 
    setargs                   1 0
    push           "glob/import?" u64 
    callproc       &mm_support.serror 
#18326: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           32         i64 
    jumpne         #18327     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
#18327: 
    setargs                   1 0
    push           79         i64 
    callproc       &mm_parse.checksymbol 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    pop            mm_parse.readmoduledefs.dimport u64 
    setargs                   1 0
    push           mm_parse.readmoduledefs.dimport u64 
    pushptr                   u64 
    callfn         &mm_support.mapimport u64 
    pop            mm_parse.readmoduledefs.name u64 
#18328: 
    push           1          i64 
    pop            mm_parse.readmoduledefs.i i64 
    push           mm_decls.nmodules i64 
    push           1          i64 
    jumplt         #18329     i64 
#18330: 
    setargs                   2 0
    push           &mm_decls.moduletable 
    push           mm_parse.readmoduledefs.i i64 
    addrefoff                 block:456 456 0
    pushptr                   u64 
    push           mm_parse.readmoduledefs.name u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #18331     i64 
    push           &mm_decls.moduletable 
    push           mm_parse.readmoduledefs.i i64 
    addrefoff                 block:456 456 0
    push           8          
    pushptroff                u64 1 0
    pop            mm_parse.readmoduledefs.stimport u64 
    jump           #18332     
#18331: 
#18333: 
    forup          #18330     i64 1
    opnd           mm_parse.readmoduledefs.i 
    opnd           mm_decls.nmodules 
#18329: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Import stmt out of position?" u64 
    callproc       &mm_support.serror 
#18332: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    push           mm_parse.readmoduledefs.stimport u64 
    push           mm_parse.readmoduledefs.dimport u64 
    callproc       &mm_parse.domappedalias 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           79         i64 
    jumpne         #18334     i64 
    setargs                   2 0
    push           "as"       u64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    pushptr                   u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #18334     i64 
    setargs                   1 0
    push           mm_parse.readmoduledefs.dimport u64 
    callproc       &mm_parse.readimportalias 
#18334: 
    jump           #18321     
#18301: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #18321     
#18303: 
    jump           #18335     
    jump           #18321     
#18317: 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    push           4          i64 
    jumpne         #18336     i64 
    push           4          i64 
    pop            mm_parse.readmoduledefs.callbackflag i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #18337     
#18336: 
    jump           #18338     
#18337: 
    jump           #18321     
#18314: 
    setargs                   2 0
    push           mm_parse.readmoduledefs.globalflag i64 
    push           mm_parse.readmoduledefs.owner u64 
    callproc       &mm_parse.readmacrodef 
    push           0          i64 
    pop            mm_parse.readmoduledefs.globalflag i64 
    jump           #18321     
#18300: 
    setargs                   1 0
    push           "MODULE/DOT" u64 
    callproc       &mm_support.serror 
    jump           #18321     
#18299: 
!error::
#18338: 
    setargs                   1 0
    push           "symbol"   u64 
    callproc       &mm_lex.ps 
    setargs                   1 0
    push           "Not allowed at module level" u64 
    callproc       &mm_support.serror 
#18321: 
    jump           #18297     
#18335: 
    push           1          i64 
    setret                    i64 
    jump           #18339     
#18339: 
    retfn                     i64 
End


Proc mm_parse.initparser:
    local          mm_parse.initparser.tabledataname u64 
    procentry                 
    push           mm_decls.nullunit u64 
    jumptrue       #18341     u64 
    setargs                   1 0
    push           2          i64 
    callfn         &mm_lib.createunit0 u64 
    pop            mm_decls.nullunit u64 
#18341: 
    push           0          i64 
    pop            mm_parse.try_level i64 
    push           0          u64 
    pop            mm_decls.currproc u64 
    push           0          i64 
    pop            mm_parse.varattribs i64 
    push           0          i64 
    pop            mm_parse.intabledata i64 
    push           0          i64 
    pop            mm_parse.inreadprint i64 
    push           0          i64 
    pop            mm_parse.inparamlist i64 
    push           0          i64 
    pop            mm_parse.inrecordbody i64 
    push           0          i64 
    pop            mm_parse.inimportmodule i64 
    push           ""         u64 
    pop            mm_parse.initparser.tabledataname u64 
    push           0          i64 
    pop            mm_parse.labelseen i64 
    push           0          i64 
    pop            mm_parse.ndollar i64 
#18342: 
    retproc                   
End


Proc mm_parse.skipsemi:
    procentry                 
    jump           #18344     
#18345: 
    setargs                   0 0
    callproc       &mm_lex.lex 
#18344: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           6          i64 
    jumpeq         #18345     i64 
#18346: 
#18347: 
    retproc                   
End


Proc mm_parse.makeblock: u64
    param          mm_parse.makeblock.p u64 
    procentry                 
    setargs                   2 0
    push           mm_parse.makeblock.p u64 
    push           5          i64 
    callfn         &mm_lib.createunit1 u64 
    setret                    u64 
    jump           #18349     
#18349: 
    retfn                     u64 
End


Proc mm_parse.makestmtblock: u64
    param          mm_parse.makestmtblock.p u64 
    procentry                 
    setargs                   2 0
    push           mm_parse.makestmtblock.p u64 
    push           6          i64 
    callfn         &mm_lib.createunit1 u64 
    setret                    u64 
    jump           #18351     
#18351: 
    retfn                     u64 
End


Proc mm_parse.checkequals:
    procentry                 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           46         i64 
    jumpeq         #18353     i64 
    setargs                   1 0
    push           "\"=\" expected" u64 
    callproc       &mm_support.serror 
#18353: 
#18354: 
    retproc                   
End


Proc mm_parse.getcurrline: i64
    procentry                 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    setret                    i64 
    jump           #18356     
#18356: 
    retfn                     i64 
End


Proc mm_parse.checkbegin: i64
    param          mm_parse.checkbegin.fbrack i64 
    local          mm_parse.checkbegin.closesym i64 
    procentry                 
    setargs                   0 0
    callproc       &mm_parse.skipsemi 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           12         i64 
    jumpne         #18358     i64 
    push           mm_parse.checkbegin.fbrack i64 
    jumpfalse      #18358     i64 
    push           13         i64 
    pop            mm_parse.checkbegin.closesym i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #18359     
#18358: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           16         i64 
    jumpne         #18360     i64 
    push           17         i64 
    pop            mm_parse.checkbegin.closesym i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #18359     
#18360: 
    push           104        i64 
    pop            mm_parse.checkbegin.closesym i64 
#18359: 
    push           mm_parse.checkbegin.closesym i64 
    setret                    i64 
    jump           #18361     
#18361: 
    retfn                     i64 
End


Proc mm_parse.checkbeginend:
    param          mm_parse.checkbeginend.closesym i64 
    param          mm_parse.checkbeginend.kwd i64 
    param          mm_parse.checkbeginend.startline i64 
    procentry                 
    setargs                   0 0
    callproc       &mm_parse.skipsemi 
    push           mm_parse.checkbeginend.closesym i64 
    push           13         i64 
    jumpeq         #18363     i64 
    push           mm_parse.checkbeginend.closesym i64 
    push           17         i64 
    jumpne         #18364     i64 
#18363: 
    setargs                   1 0
    push           mm_parse.checkbeginend.closesym i64 
    callproc       &mm_parse.checksymbol 
    jump           #18365     
#18364: 
    setargs                   4 0
    push           mm_parse.checkbeginend.startline i64 
    push           0          i64 
    push           mm_parse.checkbeginend.kwd i64 
    push           mm_parse.checkbeginend.closesym i64 
    callproc       &mm_parse.checkend 
#18365: 
    setargs                   0 0
    callproc       &mm_lex.lex 
#18366: 
    retproc                   
End


Proc mm_parse.checkend:
    param          mm_parse.checkend.endsym i64 
    param          mm_parse.checkend.endkwd1 i64 
    param          mm_parse.checkend.endkwd2 i64 
    param          mm_parse.checkend.startline i64 
    local          mm_parse.checkend.str block:100 
    procentry                 
    push           mm_parse.checkend.endsym i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    jumpne         #18368     i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           13         i64 
    jumpne         #18368     i64 
    jump           #18369     
#18368: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           104        i64 
    jumpeq         #18370     i64 
    setargs                   2 0
    push           "Bad 'end' " u64 
    push           &mm_parse.checkend.str 
    callproc       &strcpy    
!error::
#18371: 
    push           mm_parse.checkend.startline i64 
    jumpfalse      #18372     i64 
    setargs                   1 0
    push           &mm_parse.checkend.str 
    setargs                   1 0
    push           &mm_parse.checkend.str 
    callfn         &strlen    i64 
    addrefoff                 u64 1 0
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           " (from line #)" u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           mm_parse.checkend.startline i64 
    push           16777215   i64 
    iand                      i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#18372: 
    setargs                   1 0
    push           &mm_parse.checkend.str 
    callproc       &mm_support.serror 
#18370: 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #18373     i64 
    jump           #18369     
#18373: 
    push           mm_parse.checkend.endkwd1 i64 
    jumpfalse      #18374     i64 
    push           mm_parse.checkend.endkwd1 i64 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    jumpeq         #18375     i64 
#18374: 
    push           mm_parse.checkend.endkwd2 i64 
    jumpfalse      #18376     i64 
    push           mm_parse.checkend.endkwd2 i64 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    jumpeq         #18375     i64 
#18376: 
    setargs                   2 0
    push           "Mismatched 'end'" u64 
    push           &mm_parse.checkend.str 
    callproc       &strcpy    
    jump           #18371     
#18375: 
#18369: 
    retproc                   
End


Proc mm_parse.readvardef: u64
    param          mm_parse.readvardef.owner u64 
    param          mm_parse.readvardef.isglobal i64 
    param          mm_parse.readvardef.isstatic i64 
    param          mm_parse.readvardef.varid i64 
    param          mm_parse.readvardef.k i64 
    local          mm_parse.readvardef.ulist u64 
    local          mm_parse.readvardef.ulistx u64 
    local          mm_parse.readvardef.p u64 
    local          mm_parse.readvardef.nvars i64 
    local          mm_parse.readvardef.m i64 
    local          mm_parse.readvardef.stname u64 
    procentry                 
    push           0          u64 
    store          mm_parse.readvardef.ulistx u64 
    pop            mm_parse.readvardef.ulist u64 
    setargs                   0 0
    callfn         &mm_parse.istypestarter i64 
    jumpfalse      #18378     i64 
    setargs                   2 0
    push           0          i64 
    push           mm_parse.readvardef.owner u64 
    callfn         &mm_parse.readtypespec i64 
    pop            mm_parse.readvardef.m i64 
    jump           #18379     
#18378: 
    push           mm_parse.readvardef.k i64 
    jumpfalse      #18380     i64 
    push           25         i64 
    pop            mm_parse.readvardef.m i64 
    jump           #18379     
#18380: 
    setargs                   1 0
    push           "Readvar?" u64 
    callproc       &mm_support.serror 
#18379: 
    push           0          i64 
    pop            mm_parse.readvardef.nvars i64 
    jump           #18381     
#18382: 
    push           &mm_parse.readvardef.nvars 
    incr                      i64 1
    setargs                   3 0
    push           mm_parse.readvardef.varid i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           mm_parse.readvardef.owner u64 
    callfn         &mm_lib.getduplnameptr u64 
    pop            mm_parse.readvardef.stname u64 
    push           mm_parse.readvardef.isglobal u64 
    push           mm_parse.readvardef.stname u64 
    push           92         
    addrefoff                 u64 1 0
    push           0          i64 
    push           1          i64 
    popdotslice               u16 
    push           mm_parse.readvardef.isstatic u64 
    push           mm_parse.readvardef.stname u64 
    push           92         
    addrefoff                 u64 1 0
    push           2          i64 
    popdotindex               u16 
    push           mm_parse.readvardef.k i64 
    push           144        i64 
    seteq                     i64 
    push           mm_parse.readvardef.stname u64 
    push           92         
    addrefoff                 u64 1 0
    push           6          i64 
    popdotindex               u16 
    push           mm_parse.readvardef.varid i64 
    push           7          i64 
    jumpne         #18383     i64 
    push           1          u64 
    push           mm_parse.readvardef.stname u64 
    push           92         
    addrefoff                 u64 1 0
    push           14         i64 
    popdotindex               u16 
#18383: 
    setargs                   2 0
    push           mm_parse.readvardef.stname u64 
    push           mm_parse.readvardef.owner u64 
    callproc       &mm_lib.adddef 
    push           mm_parse.readvardef.varid i64 
    push           11         i64 
    jumpne         #18384     i64 
    setargs                   1 0
    push           mm_parse.readvardef.stname u64 
    callproc       &mm_lib.addstatic 
#18384: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           7          i64 
    jumpne         #18385     i64 
    push           mm_parse.readvardef.m i64 
    push           25         i64 
    jumpeq         #18386     i64 
    setargs                   1 0
    push           "Mixed var T x:T" u64 
    callproc       &mm_support.serror 
#18386: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    push           0          i64 
    push           mm_parse.readvardef.owner u64 
    callfn         &mm_parse.readtypespec i64 
    pop            mm_parse.readvardef.m i64 
#18385: 
    setargs                   3 0
    push           mm_parse.readvardef.stname u64 
    push           72         
    addrefoff                 u64 1 0
    push           mm_parse.readvardef.m i64 
    push           mm_parse.readvardef.owner u64 
    callproc       &mm_lib.storemode 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           9          i64 
    setjumpeq      #18387     i64 
    push           46         i64 
    setjumpne      #18388     i64 
#18387: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           9          i64 
    jumpne         #18389     i64 
    push           mm_parse.readvardef.varid i64 
    push           11         i64 
    jumpne         #18390     i64 
    setargs                   1 0
    push           "Need = on static not :=" u64 
    callproc       &mm_support.serror 
#18390: 
    jump           #18391     
#18389: 
    push           mm_parse.readvardef.varid i64 
    push           12         i64 
    jumpne         #18392     i64 
    setargs                   1 0
    push           "Need 'static' for '='" u64 
    callproc       &mm_support.serror 
    setargs                   1 0
    push           mm_parse.readvardef.stname u64 
    callproc       &mm_lib.addstatic 
#18392: 
#18391: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           177        i64 
    jumpne         #18393     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.readvardef.varid i64 
    push           12         i64 
    jumpeq         #18394     i64 
    setargs                   1 0
    push           "empty: not frame" u64 
    callproc       &mm_support.serror 
#18394: 
    setargs                   2 0
    setargs                   1 0
    push           mm_parse.readvardef.stname u64 
    callfn         &mm_lib.createname u64 
    push           142        i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readvardef.p u64 
    setargs                   3 0
    push           mm_parse.readvardef.p u64 
    push           &mm_parse.readvardef.ulistx 
    push           &mm_parse.readvardef.ulist 
    callproc       &mm_lib.addlistunit 
    jump           #18395     
#18393: 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    push           mm_parse.readvardef.stname u64 
    push           64         
    popptroff                 u64 1 0
    push           1          u64 
    push           mm_parse.readvardef.stname u64 
    push           92         
    addrefoff                 u64 1 0
    push           10         i64 
    popdotindex               u16 
    push           mm_parse.readvardef.varid i64 
    push           12         i64 
    jumpne         #18396     i64 
    setargs                   3 0
    push           mm_parse.readvardef.stname u64 
    push           64         
    pushptroff                u64 1 0
    setargs                   1 0
    push           mm_parse.readvardef.stname u64 
    callfn         &mm_lib.createname u64 
    push           29         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readvardef.p u64 
    push           1          i64 
    push           mm_parse.readvardef.p u64 
    push           57         
    popptroff                 u8 1 0
    setargs                   3 0
    push           mm_parse.readvardef.p u64 
    push           &mm_parse.readvardef.ulistx 
    push           &mm_parse.readvardef.ulist 
    callproc       &mm_lib.addlistunit 
#18396: 
#18395: 
    jump           #18397     
#18388: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           21         i64 
    jumpne         #18398     i64 
    push           mm_parse.readvardef.k i64 
    push           144        i64 
    jumpne         #18399     i64 
    setargs                   1 0
    push           "let@"     u64 
    callproc       &mm_support.serror 
#18399: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           1          u64 
    push           mm_parse.readvardef.stname u64 
    push           92         
    addrefoff                 u64 1 0
    push           13         i64 
    popdotindex               u16 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    push           mm_parse.readvardef.stname u64 
    push           96         
    popptroff                 u64 1 0
    jump           #18397     
#18398: 
    push           mm_parse.readvardef.k i64 
    push           144        i64 
    jumpne         #18400     i64 
    setargs                   1 0
    push           "let needs :=/=" u64 
    callproc       &mm_support.serror 
#18400: 
#18397: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpeq         #18401     i64 
    jump           #18402     
#18401: 
    setargs                   0 0
    callproc       &mm_lex.lex 
#18381: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           79         i64 
    jumpeq         #18382     i64 
#18402: 
    push           mm_parse.readvardef.nvars i64 
    push           0          i64 
    jumpne         #18403     i64 
    setargs                   1 0
    push           "No vars declared" u64 
    callproc       &mm_support.serror 
#18403: 
    push           mm_parse.readvardef.ulist u64 
    setret                    u64 
    jump           #18404     
#18404: 
    retfn                     u64 
End


Proc mm_parse.readconstdef:
    param          mm_parse.readconstdef.owner u64 
    param          mm_parse.readconstdef.isglobal i64 
    local          mm_parse.readconstdef.nconsts i64 
    local          mm_parse.readconstdef.deft i64 
    local          mm_parse.readconstdef.m i64 
    local          mm_parse.readconstdef.stname u64 
    procentry                 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           0          i64 
    pop            mm_parse.readconstdef.nconsts i64 
    setargs                   0 0
    callfn         &mm_parse.istypestarter i64 
    jumpfalse      #18406     i64 
    setargs                   2 0
    push           0          i64 
    push           mm_parse.readconstdef.owner u64 
    callfn         &mm_parse.readtypespec i64 
    pop            mm_parse.readconstdef.deft i64 
    jump           #18407     
#18406: 
    push           25         i64 
    pop            mm_parse.readconstdef.deft i64 
#18407: 
    jump           #18408     
#18409: 
    setargs                   3 0
    push           10         i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           mm_parse.readconstdef.owner u64 
    callfn         &mm_lib.getduplnameptr u64 
    pop            mm_parse.readconstdef.stname u64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callproc       &mm_parse.checkequals 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           1          i64 
    callfn         &mm_parse.readconstexpr u64 
    push           mm_parse.readconstdef.stname u64 
    push           64         
    popptroff                 u64 1 0
    push           mm_parse.readconstdef.deft i64 
    pop            mm_parse.readconstdef.m i64 
    setargs                   3 0
    push           mm_parse.readconstdef.stname u64 
    push           72         
    addrefoff                 u64 1 0
    push           mm_parse.readconstdef.m i64 
    push           mm_parse.readconstdef.owner u64 
    callproc       &mm_lib.storemode 
    push           &mm_parse.readconstdef.nconsts 
    incr                      i64 1
    push           mm_parse.readconstdef.isglobal u64 
    push           mm_parse.readconstdef.stname u64 
    push           92         
    addrefoff                 u64 1 0
    push           0          i64 
    push           1          i64 
    popdotslice               u16 
    setargs                   2 0
    push           mm_parse.readconstdef.stname u64 
    push           mm_parse.readconstdef.owner u64 
    callproc       &mm_lib.adddef 
    push           mm_parse.readconstdef.isglobal i64 
    push           2          i64 
    jumpne         #18410     i64 
    setargs                   1 0
    push           mm_parse.readconstdef.stname u64 
    callproc       &mm_lib.addconst 
#18410: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpeq         #18411     i64 
    jump           #18412     
#18411: 
    setargs                   0 0
    callproc       &mm_lex.lex 
#18408: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           79         i64 
    jumpeq         #18409     i64 
#18412: 
    push           mm_parse.readconstdef.nconsts i64 
    push           0          i64 
    jumpne         #18413     i64 
    setargs                   1 0
    push           "No consts declared" u64 
    callproc       &mm_support.serror 
#18413: 
#18414: 
    retproc                   
End


Proc mm_parse.readlbrack: u64
    local          mm_parse.readlbrack.ulist u64 
    local          mm_parse.readlbrack.ulistx u64 
    local          mm_parse.readlbrack.p u64 
    local          mm_parse.readlbrack.q u64 
    local          mm_parse.readlbrack.r u64 
    local          mm_parse.readlbrack.plower u64 
    local          mm_parse.readlbrack.oldirp i64 
    local          mm_parse.readlbrack.length i64 
    procentry                 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           0          u64 
    store          mm_parse.readlbrack.ulistx u64 
    pop            mm_parse.readlbrack.ulist u64 
    push           0          u64 
    pop            mm_parse.readlbrack.plower u64 
    push           0          i64 
    pop            mm_parse.readlbrack.length i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           21         i64 
    jumpne         #18416     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.inreadprint i64 
    pop            mm_parse.readlbrack.oldirp i64 
    push           1          i64 
    pop            mm_parse.inreadprint i64 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readlbrack.plower u64 
    push           mm_parse.readlbrack.oldirp i64 
    pop            mm_parse.inreadprint i64 
    setargs                   1 0
    push           7          i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #18417     
#18416: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           70         i64 
    jumpne         #18418     i64 
    push           &mm_decls.nextlx 
    pushptr                   u8 
    push           7          i64 
    jumpne         #18418     i64 
    setargs                   2 0
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    callfn         &mm_lib.createconstunit u64 
    pop            mm_parse.readlbrack.plower u64 
    push           1          i64 
    push           mm_parse.readlbrack.plower u64 
    push           62         
    popptroff                 u8 1 0
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #18417     
#18418: 
    push           &mm_tables.symboloptypes 
    push           &mm_decls.lx 
    pushptr                   u8 
    pushptroff                u8 1 -1
    push           1          i64 
    jumpne         #18419     i64 
    push           &mm_decls.nextlx 
    pushptr                   u8 
    push           13         i64 
    jumpne         #18419     i64 
    setargs                   1 0
    push           66         i64 
    callfn         &mm_lib.createunit0 u64 
    pop            mm_parse.readlbrack.p u64 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    push           mm_parse.readlbrack.p u64 
    push           40         
    popptroff                 i16 1 0
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.readlbrack.p u64 
    setret                    u64 
    jump           #18420     
    jump           #18417     
#18419: 
    push           &mm_tables.symboloptypes 
    push           &mm_decls.lx 
    pushptr                   u8 
    pushptroff                u8 1 -1
    push           1          i64 
    jumpne         #18421     i64 
    push           &mm_decls.nextlx 
    pushptr                   u8 
    push           9          i64 
    jumpne         #18421     i64 
    setargs                   1 0
    push           66         i64 
    callfn         &mm_lib.createunit0 u64 
    pop            mm_parse.readlbrack.p u64 
    push           &mm_tables.symbolgentoops 
    push           &mm_decls.lx 
    pushptr                   u8 
    pushptroff                u8 1 -1
    push           mm_parse.readlbrack.p u64 
    push           60         
    popptroff                 u8 1 0
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           13         i64 
    callproc       &mm_parse.lexchecksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.readlbrack.p u64 
    setret                    u64 
    jump           #18420     
    jump           #18417     
#18421: 
    setargs                   0 0
    callfn         &mm_parse.istypestarter i64 
    jumpfalse      #18422     i64 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readlbrack.p u64 
    setargs                   1 0
    push           13         i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.readlbrack.p u64 
    setret                    u64 
    jump           #18420     
#18422: 
#18417: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           13         i64 
    casejumpeq     #18423     i64 0
    popstack                  i64 
    jump           #18424     
#18423: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           19         i64 
    callfn         &mm_lib.createunit0 u64 
    pop            mm_parse.readlbrack.p u64 
    push           mm_parse.readlbrack.plower u64 
    push           mm_parse.readlbrack.p u64 
    push           24         
    popptroff                 u64 1 0
    push           0          i64 
    push           mm_parse.readlbrack.p u64 
    push           40         
    popptroff                 u32 1 0
    push           mm_parse.readlbrack.p u64 
    setret                    u64 
    jump           #18420     
    jump           #18425     
#18424: 
    setargs                   0 0
    callfn         &mm_parse.readxunit u64 
    pop            mm_parse.readlbrack.p u64 
#18425: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           13         i64 
    casejumpeq     #18426     i64 0
    push           5          i64 
    casejumpeq     #18427     i64 0
    push           19         i64 
    casejumpeq     #18428     i64 0
    popstack                  i64 
    jump           #18429     
#18426: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.readlbrack.p u64 
    setret                    u64 
    jump           #18420     
    jump           #18430     
#18427: 
    push           1          i64 
    pop            mm_parse.readlbrack.length i64 
    push           &mm_decls.nextlx 
    pushptr                   u8 
    push           13         i64 
    jumpne         #18431     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    push           mm_parse.readlbrack.p u64 
    push           19         i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readlbrack.p u64 
    push           mm_parse.readlbrack.length i64 
    push           mm_parse.readlbrack.p u64 
    push           40         
    popptroff                 u32 1 0
    push           mm_parse.readlbrack.plower u64 
    push           mm_parse.readlbrack.p u64 
    push           24         
    popptroff                 u64 1 0
    push           mm_parse.readlbrack.p u64 
    setret                    u64 
    jump           #18420     
#18431: 
    push           mm_parse.readlbrack.p u64 
    store          mm_parse.readlbrack.ulistx u64 
    pop            mm_parse.readlbrack.ulist u64 
#18432: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           13         i64 
    jumpne         #18433     i64 
    jump           #18434     
#18433: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpne         #18435     i64 
    setargs                   1 0
    push           ",, null expr not allowed" u64 
    callproc       &mm_support.serror 
#18435: 
    setargs                   3 0
    setargs                   0 0
    callfn         &mm_parse.readxunit u64 
    push           &mm_parse.readlbrack.ulistx 
    push           &mm_parse.readlbrack.ulist 
    callproc       &mm_lib.addlistunit 
    push           &mm_parse.readlbrack.length 
    incr                      i64 1
    setargs                   0 0
    callproc       &mm_parse.skipsemi 
#18436: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpeq         #18432     i64 
#18434: 
    setargs                   1 0
    push           13         i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    push           mm_parse.readlbrack.ulist u64 
    push           19         i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readlbrack.p u64 
    push           mm_parse.readlbrack.length i64 
    push           mm_parse.readlbrack.p u64 
    push           40         
    popptroff                 u32 1 0
    push           mm_parse.readlbrack.plower u64 
    push           mm_parse.readlbrack.p u64 
    push           24         
    popptroff                 u64 1 0
    push           mm_parse.readlbrack.p u64 
    setret                    u64 
    jump           #18420     
    jump           #18430     
#18428: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.readxunit u64 
    pop            mm_parse.readlbrack.q u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           19         i64 
    casejumpeq     #18437     i64 0
    push           13         i64 
    casejumpeq     #18438     i64 0
    popstack                  i64 
    jump           #18439     
#18437: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           0          i64 
    callfn         &mm_parse.readsunit u64 
    pop            mm_parse.readlbrack.r u64 
    setargs                   1 0
    push           13         i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   4 0
    push           mm_parse.readlbrack.r u64 
    push           mm_parse.readlbrack.q u64 
    setargs                   1 0
    push           mm_parse.readlbrack.p u64 
    callfn         &mm_parse.fixcond u64 
    push           100        i64 
    callfn         &mm_lib.createunit3 u64 
    setret                    u64 
    jump           #18420     
    jump           #18440     
#18438: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   4 0
    push           0          u64 
    push           mm_parse.readlbrack.q u64 
    setargs                   1 0
    push           mm_parse.readlbrack.p u64 
    callfn         &mm_parse.fixcond u64 
    push           100        i64 
    callfn         &mm_lib.createunit3 u64 
    setret                    u64 
    jump           #18420     
    jump           #18440     
#18439: 
#18440: 
    setargs                   3 0
    push           mm_parse.readlbrack.q u64 
    push           &mm_parse.readlbrack.ulistx 
    push           &mm_parse.readlbrack.ulist 
    callproc       &mm_lib.addlistunit 
    setargs                   1 0
    push           5          i64 
    callproc       &mm_parse.checksymbol 
    push           &mm_decls.nextlx 
    pushptr                   u8 
    push           19         i64 
    jumpeq         #18441     i64 
#18442: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   3 0
    setargs                   0 0
    callfn         &mm_parse.readxunit u64 
    push           &mm_parse.readlbrack.ulistx 
    push           &mm_parse.readlbrack.ulist 
    callproc       &mm_lib.addlistunit 
#18443: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpeq         #18442     i64 
#18444: 
    setargs                   1 0
    push           19         i64 
    callproc       &mm_parse.checksymbol 
    jump           #18445     
#18441: 
    setargs                   0 0
    callproc       &mm_lex.lex 
#18445: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.readxunit u64 
    pop            mm_parse.readlbrack.r u64 
    setargs                   1 0
    push           13         i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   4 0
    push           mm_parse.readlbrack.r u64 
    push           mm_parse.readlbrack.ulist u64 
    push           mm_parse.readlbrack.p u64 
    push           120        i64 
    callfn         &mm_lib.createunit3 u64 
    setret                    u64 
    jump           #18420     
    jump           #18430     
#18429: 
    setargs                   1 0
    push           "(x ..."   u64 
    callproc       &mm_support.serror 
#18430: 
    push           0          u64 
    setret                    u64 
    jump           #18420     
#18420: 
    retfn                     u64 
End


Proc mm_parse.addlistparam:
    param          mm_parse.addlistparam.ulist u64 
    param          mm_parse.addlistparam.ulistx u64 
    param          mm_parse.addlistparam.p u64 
    procentry                 
    push           mm_parse.addlistparam.ulist u64 
    pushptr                   u64 
    push           0          u64 
    jumpne         #18447     u64 
    push           mm_parse.addlistparam.p u64 
    push           mm_parse.addlistparam.ulistx u64 
    storeptr                  u64 
    push           mm_parse.addlistparam.ulist u64 
    popptr                    u64 
    jump           #18448     
#18447: 
    push           mm_parse.addlistparam.p u64 
    push           mm_parse.addlistparam.ulistx u64 
    pushptr                   u64 
    push           96         
    popptroff                 u64 1 0
#18448: 
    push           mm_parse.addlistparam.p u64 
    push           mm_parse.addlistparam.ulistx u64 
    popptr                    u64 
#18449: 
    retproc                   
End


Proc mm_parse.readcast: u64
    local          mm_parse.readcast.p u64 
    local          mm_parse.readcast.opc i64 
    local          mm_parse.readcast.t i64 
    procentry                 
    setargs                   2 0
    push           0          i64 
    push           mm_decls.currproc u64 
    callfn         &mm_parse.readtypespec i64 
    pop            mm_parse.readcast.t i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           13         i64 
    casejumpeq     #18451     i64 0
    push           21         i64 
    casejumpeq     #18452     i64 0
    push           2          i64 
    casejumpeq     #18453     i64 0
    popstack                  i64 
    jump           #18454     
#18451: 
    setargs                   1 0
    push           65         i64 
    callfn         &mm_lib.createunit0 u64 
    pop            mm_parse.readcast.p u64 
    push           29         i64 
    push           mm_parse.readcast.p u64 
    push           48         
    popptroff                 i32 1 0
    push           mm_parse.readcast.p u64 
    setret                    u64 
    jump           #18455     
    jump           #18456     
#18452: 
    push           64         i64 
    pop            mm_parse.readcast.opc i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #18456     
#18453: 
    push           &mm_decls.nextlx 
    pushptr                   u8 
    push           139        i64 
    jumpne         #18457     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           65         i64 
    callfn         &mm_lib.createunit0 u64 
    pop            mm_parse.readcast.p u64 
    push           mm_parse.readcast.t i64 
    push           mm_parse.readcast.p u64 
    push           16         
    popptroff                 i64 1 0
    push           29         i64 
    push           mm_parse.readcast.p u64 
    push           48         
    popptroff                 i32 1 0
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #18458     
#18457: 
    setargs                   1 0
    push           65         i64 
    callfn         &mm_lib.createunit0 u64 
    pop            mm_parse.readcast.p u64 
    push           mm_parse.readcast.t i64 
    push           mm_parse.readcast.p u64 
    push           16         
    popptroff                 i64 1 0
#18458: 
    push           mm_parse.readcast.p u64 
    setret                    u64 
    jump           #18455     
    jump           #18456     
#18454: 
    push           61         i64 
    pop            mm_parse.readcast.opc i64 
#18456: 
    setargs                   1 0
    push           12         i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readcast.p u64 
    setargs                   1 0
    push           13         i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    push           mm_parse.readcast.p u64 
    push           mm_parse.readcast.opc i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readcast.p u64 
    setargs                   3 0
    push           mm_parse.readcast.p u64 
    push           52         
    addrefoff                 u64 1 0
    push           mm_parse.readcast.t i64 
    push           mm_decls.currproc u64 
    callproc       &mm_lib.storemode 
    push           mm_parse.readcast.p u64 
    setret                    u64 
    jump           #18455     
#18455: 
    retfn                     u64 
End


Proc mm_parse.readopc: u64
    local          mm_parse.readopc.p u64 
    local          mm_parse.readopc.q u64 
    local          mm_parse.readopc.r u64 
    local          mm_parse.readopc.tag i64 
    local          mm_parse.readopc.opc i64 
    local          mm_parse.readopc.firstsym i64 
    procentry                 
    push           &mm_decls.lx 
    pushptr                   u8 
    pop            mm_parse.readopc.firstsym i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           62         i64 
    casejumpeq     #18460     i64 0
    push           63         i64 
    casejumpeq     #18461     i64 0
    popstack                  i64 
    jump           #18462     
#18460: 
    push           37         i64 
    pop            mm_parse.readopc.tag i64 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    pop            mm_parse.readopc.opc i64 
    jump           #18463     
#18461: 
    push           36         i64 
    pop            mm_parse.readopc.tag i64 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    pop            mm_parse.readopc.opc i64 
    jump           #18463     
#18462: 
    push           37         i64 
    pop            mm_parse.readopc.tag i64 
    push           &mm_tables.symbolgenops 
    push           mm_parse.readopc.firstsym i64 
    pushptroff                u8 1 -1
    pop            mm_parse.readopc.opc i64 
#18463: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.readopc.firstsym i64 
    push           30         i64 
    casejumpeq     #18464     i64 0
    push           31         i64 
    casejumpeq     #18465     i64 0
    push           41         i64 
    casejumpeq     #18466     i64 0
    push           42         i64 
    casejumpeq     #18466     i64 0
    push           63         i64 
    casejumpeq     #18466     i64 0
    popstack                  i64 
    jump           #18467     
#18464: 
    setargs                   0 0
    callfn         &mm_parse.readterm2 u64 
    setret                    u64 
    jump           #18468     
    jump           #18469     
#18465: 
    push           129        i64 
    pop            mm_parse.readopc.opc i64 
    jump           #18469     
#18466: 
    setargs                   0 0
    callfn         &mm_parse.readterm2 u64 
    pop            mm_parse.readopc.p u64 
    push           mm_parse.readopc.p u64 
    pushptr                   u8 
    push           19         i64 
    jumpne         #18470     i64 
    push           mm_parse.readopc.p u64 
    push           40         
    pushptroff                u32 1 0
    push           2          i64 
    jumpeq         #18471     i64 
    setargs                   1 0
    push           "Needs (x,y)" u64 
    callproc       &mm_support.serror 
#18471: 
    push           mm_parse.readopc.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_parse.readopc.q u64 
    push           mm_parse.readopc.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_parse.readopc.r u64 
    push           0          u64 
    push           mm_parse.readopc.q u64 
    push           8          
    popptroff                 u64 1 0
    setargs                   3 0
    push           mm_parse.readopc.r u64 
    push           mm_parse.readopc.q u64 
    push           36         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readopc.p u64 
    push           mm_parse.readopc.opc i64 
    push           mm_parse.readopc.p u64 
    push           60         
    popptroff                 u8 1 0
    push           mm_parse.readopc.p u64 
    setret                    u64 
    jump           #18468     
    jump           #18472     
#18470: 
    setargs                   1 0
    push           "READOPC/SINGLE OPND?" u64 
    callproc       &mm_support.serror 
    setargs                   2 0
    push           mm_parse.readopc.p u64 
    push           mm_parse.readopc.opc i64 
    callfn         &mm_lib.createunit1 u64 
    setret                    u64 
    jump           #18468     
#18472: 
    jump           #18469     
#18467: 
    push           &mm_tables.symboloptypes 
    push           mm_parse.readopc.firstsym i64 
    pushptroff                u8 1 -1
    push           1          i64 
    jumpne         #18473     i64 
    setargs                   1 0
    push           "Can't be used as unary op" u64 
    callproc       &mm_support.serror 
#18473: 
#18469: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           9          i64 
    jumpne         #18474     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           39         i64 
    pop            mm_parse.readopc.tag i64 
    push           mm_parse.readopc.firstsym i64 
    push           31         i64 
    casejumpeq     #18475     i64 0
    popstack                  i64 
    jump           #18476     
#18475: 
    push           176        i64 
    pop            mm_parse.readopc.opc i64 
    jump           #18477     
#18476: 
    push           &mm_tables.symbolgentoops 
    push           mm_parse.readopc.firstsym i64 
    pushptroff                u8 1 -1
    pop            mm_parse.readopc.opc i64 
    push           mm_parse.readopc.opc i64 
    push           0          i64 
    jumpne         #18478     i64 
    setargs                   1 0
    push           "op:= not available" u64 
    callproc       &mm_support.serror 
#18478: 
#18477: 
#18474: 
    setargs                   2 0
    setargs                   0 0
    callfn         &mm_parse.readterm2 u64 
    store          mm_parse.readopc.q u64 
    push           mm_parse.readopc.tag i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readopc.p u64 
    push           mm_parse.readopc.opc i64 
    push           mm_parse.readopc.p u64 
    push           60         
    popptroff                 u8 1 0
    push           mm_parse.readopc.q u64 
    pushptr                   u8 
    push           19         i64 
    jumpne         #18479     i64 
    setargs                   1 0
    push           "Too many opnds" u64 
    callproc       &mm_support.serror 
#18479: 
    push           mm_parse.readopc.p u64 
    setret                    u64 
    jump           #18468     
#18468: 
    retfn                     u64 
End


Proc mm_parse.readsprint: u64
    local          mm_parse.readsprint.oldinreadprint i64 
    local          mm_parse.readsprint.opc i64 
    local          mm_parse.readsprint.isfprint i64 
    local          mm_parse.readsprint.pformat u64 
    local          mm_parse.readsprint.pdev u64 
    local          mm_parse.readsprint.printlist u64 
    local          mm_parse.readsprint.printlistx u64 
    local          mm_parse.readsprint.p u64 
    procentry                 
    push           mm_parse.inreadprint i64 
    pop            mm_parse.readsprint.oldinreadprint i64 
    push           1          i64 
    pop            mm_parse.inreadprint i64 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    pop            mm_parse.readsprint.opc i64 
    setargs                   1 0
    push           12         i64 
    callproc       &mm_parse.lexchecksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.readsprint.opc i64 
    push           129        i64 
    casejumpeq     #18481     i64 0
    push           126        i64 
    casejumpeq     #18481     i64 0
    popstack                  i64 
    jump           #18482     
#18481: 
    push           1          i64 
    pop            mm_parse.readsprint.isfprint i64 
    jump           #18483     
#18482: 
    push           0          i64 
    pop            mm_parse.readsprint.isfprint i64 
#18483: 
    push           0          u64 
    store          mm_parse.readsprint.printlistx u64 
    pop            mm_parse.readsprint.printlist u64 
    push           0          u64 
    store          mm_parse.readsprint.pdev u64 
    pop            mm_parse.readsprint.pformat u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           21         i64 
    jumpne         #18484     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readsprint.pdev u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpne         #18485     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #18486     
#18485: 
    jump           #18487     
#18486: 
#18484: 
    push           mm_parse.readsprint.isfprint i64 
    jumpfalse      #18488     i64 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readsprint.pformat u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpne         #18489     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #18490     
#18489: 
    jump           #18487     
#18490: 
#18488: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           13         i64 
    jumpne         #18491     i64 
    jump           #18487     
#18491: 
#18492: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpne         #18493     i64 
    setargs                   3 0
    setargs                   1 0
    push           94         i64 
    callfn         &mm_lib.createunit0 u64 
    push           &mm_parse.readsprint.printlistx 
    push           &mm_parse.readsprint.printlist 
    callproc       &mm_lib.addlistunit 
    jump           #18494     
#18493: 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readsprint.p u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           7          i64 
    jumpne         #18495     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   3 0
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    push           mm_parse.readsprint.p u64 
    push           93         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readsprint.p u64 
#18495: 
    setargs                   3 0
    push           mm_parse.readsprint.p u64 
    push           &mm_parse.readsprint.printlistx 
    push           &mm_parse.readsprint.printlist 
    callproc       &mm_lib.addlistunit 
#18494: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpeq         #18496     i64 
    jump           #18497     
#18496: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #18492     
#18497: 
    setargs                   1 0
    push           13         i64 
    callproc       &mm_parse.checksymbol 
!finish::
#18487: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.readsprint.oldinreadprint i64 
    pop            mm_parse.inreadprint i64 
    push           mm_parse.readsprint.opc i64 
    push           122        i64 
    jumpeq         #18498     i64 
    push           mm_parse.readsprint.opc i64 
    push           124        i64 
    jumpne         #18499     i64 
#18498: 
    push           mm_parse.readsprint.printlist u64 
    push           0          u64 
    jumpne         #18499     u64 
    setargs                   1 0
    push           "No print items" u64 
    callproc       &mm_support.serror 
#18499: 
    startmult                 
    push           mm_parse.readsprint.isfprint i64 
    jumpfalse      #18500     i64 
    push           mm_parse.readsprint.pformat u64 
    pushptr                   u8 
    push           2          i64 
    jumpne         #18501     i64 
    setargs                   1 0
    push           "No fmt str" u64 
    callproc       &mm_support.serror 
#18501: 
    setargs                   4 0
    push           mm_parse.readsprint.printlist u64 
    push           mm_parse.readsprint.pformat u64 
    push           mm_parse.readsprint.pdev u64 
    push           mm_parse.readsprint.opc i64 
    callfn         &mm_lib.createunit3 u64 
    resetmult                 
    jump           #18502     
#18500: 
    setargs                   3 0
    push           mm_parse.readsprint.printlist u64 
    push           mm_parse.readsprint.pdev u64 
    push           mm_parse.readsprint.opc i64 
    callfn         &mm_lib.createunit2 u64 
    endmult                   
#18502: 
    setret                    u64 
    jump           #18503     
#18503: 
    retfn                     u64 
End


Proc mm_parse.readsread: u64
    local          mm_parse.readsread.oldinreadprint i64 
    local          mm_parse.readsread.opc i64 
    local          mm_parse.readsread.pformat u64 
    local          mm_parse.readsread.pdev u64 
    local          mm_parse.readsread.p u64 
    local          mm_parse.readsread.readlist u64 
    local          mm_parse.readsread.readlistx u64 
    procentry                 
    push           mm_parse.inreadprint i64 
    pop            mm_parse.readsread.oldinreadprint i64 
    push           1          i64 
    pop            mm_parse.inreadprint i64 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    pop            mm_parse.readsread.opc i64 
    setargs                   1 0
    push           12         i64 
    callproc       &mm_parse.lexchecksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           0          u64 
    store          mm_parse.readsread.readlistx u64 
    pop            mm_parse.readsread.readlist u64 
    push           0          u64 
    store          mm_parse.readsread.pdev u64 
    pop            mm_parse.readsread.pformat u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           21         i64 
    jumpne         #18505     i64 
    push           mm_parse.readsread.opc i64 
    push           130        i64 
    jumpne         #18506     i64 
    setargs                   1 0
    push           "@ on read" u64 
    callproc       &mm_support.serror 
#18506: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readsread.pdev u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpne         #18507     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #18508     
#18507: 
    jump           #18509     
#18508: 
#18505: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           13         i64 
    jumpne         #18510     i64 
    jump           #18509     
#18510: 
#18511: 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readsread.p u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           7          i64 
    jumpne         #18512     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   3 0
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    push           mm_parse.readsread.p u64 
    push           93         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readsread.p u64 
#18512: 
    setargs                   3 0
    push           mm_parse.readsread.p u64 
    push           &mm_parse.readsread.readlistx 
    push           &mm_parse.readsread.readlist 
    callproc       &mm_lib.addlistunit 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpeq         #18513     i64 
    jump           #18514     
#18513: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #18511     
#18514: 
    setargs                   1 0
    push           13         i64 
    callproc       &mm_parse.checksymbol 
!finish::
#18509: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.readsread.oldinreadprint i64 
    pop            mm_parse.inreadprint i64 
    push           mm_parse.readsread.opc i64 
    push           130        i64 
    jumpne         #18515     i64 
    push           mm_parse.readsread.readlist u64 
    push           0          u64 
    jumpne         #18515     u64 
    setargs                   1 0
    push           "No read items" u64 
    callproc       &mm_support.serror 
#18515: 
    setargs                   3 0
    push           mm_parse.readsread.readlist u64 
    push           mm_parse.readsread.pdev u64 
    push           mm_parse.readsread.opc i64 
    callfn         &mm_lib.createunit2 u64 
    setret                    u64 
    jump           #18516     
#18516: 
    retfn                     u64 
End


Proc mm_parse.readcompilervar: u64
    local          mm_parse.readcompilervar.str block:100 
    local          mm_parse.readcompilervar.tm block:16 
    local          mm_parse.readcompilervar.p u64 
    local          mm_parse.readcompilervar.currmodule u64 
    procentry                 
    push           &mm_decls.moduletable 
    push           mm_decls.currmoduleno i64 
    addrefoff                 block:456 456 0
    pop            mm_parse.readcompilervar.currmodule u64 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    switch         #18518     75 90
    opnd           #18519     
#18518: 
    switchlabel    #18520     
    switchlabel    #18521     
    switchlabel    #18522     
    switchlabel    #18523     
    switchlabel    #18524     
    switchlabel    #18525     
    switchlabel    #18526     
    switchlabel    #18527     
    switchlabel    #18519     
    switchlabel    #18528     
    switchlabel    #18529     
    switchlabel    #18530     
    switchlabel    #18531     
    switchlabel    #18532     
    switchlabel    #18533     
    switchlabel    #18533     
    endswitch                 
#18531: 
    setargs                   2 0
    push           9          i64 
    push           0          u64 
    callfn         &mm_lib.createconstunit u64 
    pop            mm_parse.readcompilervar.p u64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.readcompilervar.p u64 
    setret                    u64 
    jump           #18534     
    jump           #18535     
#18532: 
    setargs                   2 0
    push           7          i64 
    push           3.1415926535897931e+000 r64 
    typepun                   i64 void 0
    callfn         &mm_lib.createconstunit u64 
    pop            mm_parse.readcompilervar.p u64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.readcompilervar.p u64 
    setret                    u64 
    jump           #18534     
    jump           #18535     
#18520: 
    setargs                   1 0
    push           75         i64 
    callfn         &mm_lib.createunit0 u64 
    pop            mm_parse.readcompilervar.p u64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.readcompilervar.p u64 
    setret                    u64 
    jump           #18534     
    jump           #18535     
#18521: 
    setargs                   2 0
    push           &mm_parse.readcompilervar.str 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    push           0          i64 
    push           23         i64 
    dotslice                  i64 
    callproc       &msysp.getstrint 
    jump           #18535     
#18522: 
    setargs                   2 0
    push           mm_decls.stmodule u64 
    pushptr                   u64 
    push           &mm_parse.readcompilervar.str 
    callproc       &strcpy    
    jump           #18535     
#18523: 
    setargs                   2 0
    push           &mm_decls.sourcefilepaths 
    push           mm_parse.readcompilervar.currmodule u64 
    push           16         
    pushptroff                i64 1 0
    pushptroff                u64 8 0
    push           &mm_parse.readcompilervar.str 
    callproc       &strcpy    
    jump           #18535     
#18524: 
    setargs                   2 0
    push           mm_decls.currproc u64 
    pushptr                   u64 
    push           &mm_parse.readcompilervar.str 
    callproc       &strcpy    
    jump           #18535     
#18525: 
    setargs                   1 0
    push           &mm_parse.readcompilervar.tm 
    callproc       &mwindowsp.os_getsystime 
    setargs                   1 0
    push           &mm_parse.readcompilervar.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "#-#-#"    u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           &mm_parse.readcompilervar.tm 
    push           6          
    pushptroff                u16 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           &mm_parse.readcompilervar.monthnames 
    push           &mm_parse.readcompilervar.tm 
    push           2          
    pushptroff                u16 1 0
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   2 0
    push           "4"        u64 
    push           &mm_parse.readcompilervar.tm 
    pushptr                   u16 
    callproc       &msysp.m$print_i64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #18535     
#18526: 
    setargs                   1 0
    push           &mm_parse.readcompilervar.tm 
    callproc       &mwindowsp.os_getsystime 
    setargs                   1 0
    push           &mm_parse.readcompilervar.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "#:#:#"    u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   2 0
    push           "z2"       u64 
    push           &mm_parse.readcompilervar.tm 
    push           8          
    pushptroff                u16 1 0
    callproc       &msysp.m$print_i64 
    setargs                   2 0
    push           "z2"       u64 
    push           &mm_parse.readcompilervar.tm 
    push           10         
    pushptroff                u16 1 0
    callproc       &msysp.m$print_i64 
    setargs                   2 0
    push           "z2"       u64 
    push           &mm_parse.readcompilervar.tm 
    push           12         
    pushptroff                u16 1 0
    callproc       &msysp.m$print_i64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #18535     
#18528: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    push           4          i64 
    push           mm_decls.targetbits u64 
    callfn         &mm_lib.createconstunit u64 
    setret                    u64 
    jump           #18534     
    jump           #18535     
#18529: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    push           4          i64 
    push           mm_decls.targetsize u64 
    callfn         &mm_lib.createconstunit u64 
    setret                    u64 
    jump           #18534     
    jump           #18535     
#18530: 
    setargs                   2 0
    push           "wx64"     u64 
    push           &mm_parse.readcompilervar.str 
    callproc       &strcpy    
    jump           #18535     
#18527: 
    setargs                   2 0
    push           "Compiler:BX Experimental" u64 
    push           &mm_parse.readcompilervar.str 
    callproc       &strcpy    
    jump           #18535     
#18533: 
    setargs                   2 0
    push           4          i64 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    push           89         i64 
    seteq                     i64 
    callfn         &mm_lib.createconstunit u64 
    pop            mm_parse.readcompilervar.p u64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.readcompilervar.p u64 
    setret                    u64 
    jump           #18534     
    jump           #18535     
#18519: 
    setargs                   2 0
    push           &mm_tables.jtagnames 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    push           "compiler var not impl: #" u64 
    callproc       &mm_support.serror_s 
#18535: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    push           -1         i64 
    setargs                   1 0
    push           &mm_parse.readcompilervar.str 
    callfn         &mlibp.pcm_copyheapstring u64 
    callfn         &mm_lib.createstringconstunit u64 
    setret                    u64 
    jump           #18534     
#18534: 
    retfn                     u64 
End


Proc mm_parse.readcastx: u64
    local          mm_parse.readcastx.opc i64 
    local          mm_parse.readcastx.m i64 
    local          mm_parse.readcastx.p u64 
    procentry                 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           61         i64 
    pop            mm_parse.readcastx.opc i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           21         i64 
    jumpne         #18537     i64 
    push           64         i64 
    pop            mm_parse.readcastx.opc i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
#18537: 
    setargs                   1 0
    push           12         i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           0          i64 
    pop            mm_parse.readcastx.m i64 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readcastx.p u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpeq         #18538     i64 
    push           mm_parse.readcastx.opc i64 
    push           64         i64 
    jumpne         #18539     i64 
    setargs                   1 0
    push           "@ type missing" u64 
    callproc       &mm_support.serror 
#18539: 
    push           63         i64 
    pop            mm_parse.readcastx.opc i64 
    jump           #18540     
#18538: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    push           0          i64 
    push           mm_decls.currproc u64 
    callfn         &mm_parse.readtypespec i64 
    pop            mm_parse.readcastx.m i64 
#18540: 
    setargs                   1 0
    push           13         i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    push           mm_parse.readcastx.p u64 
    push           mm_parse.readcastx.opc i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readcastx.p u64 
    setargs                   3 0
    push           mm_parse.readcastx.p u64 
    push           52         
    addrefoff                 u64 1 0
    push           mm_parse.readcastx.m i64 
    push           mm_decls.currproc u64 
    callproc       &mm_lib.storemode 
    push           mm_parse.readcastx.p u64 
    setret                    u64 
    jump           #18541     
#18541: 
    retfn                     u64 
End


Proc mm_parse.checksymbol:
    param          mm_parse.checksymbol.symbol i64 
    local          mm_parse.checksymbol.str block:100 
    procentry                 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           mm_parse.checksymbol.symbol i64 
    jumpeq         #18543     i64 
    setargs                   1 0
    push           &mm_parse.checksymbol.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "# expected, not #" u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           &mm_tables.symbolnames 
    push           mm_parse.checksymbol.symbol i64 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_tables.symbolnames 
    push           &mm_decls.lx 
    pushptr                   u8 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           &mm_parse.checksymbol.str 
    callproc       &mm_support.serror 
#18543: 
#18544: 
    retproc                   
End


Proc mm_parse.lexchecksymbol:
    param          mm_parse.lexchecksymbol.symbol i64 
    procentry                 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           mm_parse.lexchecksymbol.symbol i64 
    callproc       &mm_parse.checksymbol 
#18546: 
    retproc                   
End


Proc mm_parse.readtypespec: i64
    param          mm_parse.readtypespec.owner u64 
    param          mm_parse.readtypespec.typedefx i64 
    local          mm_parse.readtypespec.d u64 
    local          mm_parse.readtypespec.e u64 
    local          mm_parse.readtypespec.t i64 
    local          mm_parse.readtypespec.kwd i64 
    local          mm_parse.readtypespec.fflang i64 
    local          mm_parse.readtypespec.sltype i64 
    local          mm_parse.readtypespec.w i64 
    local          mm_parse.readtypespec.x u64 
    local          mm_parse.readtypespec.pupper u64 
    local          mm_parse.readtypespec.plx u64 
    local          mm_parse.readtypespec.dim u64 
    local          mm_parse.readtypespec.length u64 
    local          mm_parse.readtypespec.dims block:240 
    local          mm_parse.readtypespec.ndims i64 
    local          mm_parse.readtypespec.i i64 
    local          mm_parse.readtypespec.n i64 
    local          mm_parse.readtypespec.k i64 
    procentry                 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           14         i64 
    casejumpeq     #18548     i64 0
    push           91         i64 
    casejumpeq     #18549     i64 0
    push           79         i64 
    casejumpeq     #18550     i64 0
    push           152        i64 
    casejumpeq     #18551     i64 0
    push           12         i64 
    casejumpeq     #18552     i64 0
    push           132        i64 
    casejumpeq     #18553     i64 0
    push           133        i64 
    casejumpeq     #18553     i64 0
    push           134        i64 
    casejumpeq     #18554     i64 0
    push           142        i64 
    casejumpeq     #18555     i64 0
    push           96         i64 
    casejumpeq     #18556     i64 0
    push           93         i64 
    casejumpeq     #18557     i64 0
    push           145        i64 
    casejumpeq     #18558     i64 0
    popstack                  i64 
    jump           #18559     
#18548: 
!arraybounds::
#18560: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           0          i64 
    pop            mm_parse.readtypespec.ndims i64 
    push           1          i64 
    pop            mm_parse.inreadprint i64 
#18561: 
    push           0          u64 
    pop            mm_parse.readtypespec.length u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           15         i64 
    jumpeq         #18562     i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpne         #18563     i64 
#18562: 
    push           0          u64 
    pop            mm_parse.readtypespec.dim u64 
    jump           #18564     
#18563: 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readtypespec.dim u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           15         i64 
    casejumpeq     #18565     i64 0
    push           5          i64 
    casejumpeq     #18565     i64 0
    push           7          i64 
    casejumpeq     #18566     i64 0
    popstack                  i64 
    jump           #18567     
#18565: 
    jump           #18568     
#18566: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpeq         #18569     i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           15         i64 
    jumpeq         #18569     i64 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readtypespec.length u64 
    setargs                   3 0
    push           mm_parse.readtypespec.length u64 
    push           mm_parse.readtypespec.dim u64 
    push           28         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readtypespec.dim u64 
    jump           #18570     
#18569: 
    setargs                   2 0
    push           mm_parse.readtypespec.dim u64 
    push           28         i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readtypespec.dim u64 
#18570: 
    jump           #18568     
#18567: 
#18568: 
#18564: 
    push           mm_parse.readtypespec.ndims i64 
    push           30         i64 
    jumplt         #18571     i64 
    setargs                   1 0
    push           "Too many array dims" u64 
    callproc       &mm_support.serror 
#18571: 
    push           mm_parse.readtypespec.dim u64 
    push           &mm_parse.readtypespec.dims 
    push           &mm_parse.readtypespec.ndims 
    incrload                  i64 1
    popptroff                 u64 8 -8
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpeq         #18572     i64 
    jump           #18573     
#18572: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #18561     
#18573: 
    push           0          i64 
    pop            mm_parse.inreadprint i64 
    setargs                   1 0
    push           15         i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    push           0          i64 
    push           mm_parse.readtypespec.owner u64 
    callfn         &mm_parse.readtypespec i64 
    pop            mm_parse.readtypespec.t i64 
#18574: 
    push           mm_parse.readtypespec.ndims i64 
    pop            mm_parse.readtypespec.i i64 
    push           mm_parse.readtypespec.i i64 
    push           1          i64 
    jumplt         #18575     i64 
#18576: 
    setargs                   4 0
    startmult                 
    push           mm_parse.readtypespec.i i64 
    push           1          i64 
    jumpne         #18577     i64 
    push           mm_parse.readtypespec.typedefx i64 
    resetmult                 
    jump           #18578     
#18577: 
    push           0          i64 
    endmult                   
#18578: 
    push           &mm_parse.readtypespec.dims 
    push           mm_parse.readtypespec.i i64 
    pushptroff                u64 8 -8
    push           mm_parse.readtypespec.t i64 
    push           mm_parse.readtypespec.owner u64 
    callfn         &mm_lib.createarraymode i64 
    pop            mm_parse.readtypespec.t i64 
#18579: 
    fordown        #18576     i64 1
    opnd           mm_parse.readtypespec.i 
    opnd           1          
#18575: 
    push           mm_parse.readtypespec.t i64 
    setret                    i64 
    jump           #18580     
    jump           #18581     
#18549: 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    pop            mm_parse.readtypespec.t i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #18581     
#18550: 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    pop            mm_parse.readtypespec.d u64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           2          i64 
    jumpne         #18582     i64 
    setargs                   1 0
    push           79         i64 
    callproc       &mm_parse.lexchecksymbol 
    setargs                   2 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           mm_parse.readtypespec.d u64 
    callfn         &mm_lib.newtypename i64 
    pop            mm_parse.readtypespec.t i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #18583     
#18582: 
    setargs                   2 0
    push           mm_parse.readtypespec.d u64 
    push           0          u64 
    callfn         &mm_lib.newtypename i64 
    pop            mm_parse.readtypespec.t i64 
#18583: 
    jump           #18581     
#18551: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   3 0
    push           0          i64 
    push           mm_parse.readtypespec.typedefx i64 
    push           mm_parse.readtypespec.owner u64 
    callfn         &mm_parse.readenumtype i64 
    pop            mm_parse.readtypespec.t i64 
    jump           #18581     
#18552: 
    setargs                   3 0
    push           0          i64 
    push           mm_parse.readtypespec.typedefx i64 
    push           mm_parse.readtypespec.owner u64 
    callfn         &mm_parse.readenumtype i64 
    pop            mm_parse.readtypespec.t i64 
    jump           #18581     
#18553: 
    setargs                   1 0
    push           "Use 'record name =' syntax" u64 
    callproc       &mm_support.serror 
    jump           #18581     
#18554: 
    setargs                   1 0
    push           "Top-level union not allowed" u64 
    callproc       &mm_support.serror 
    jump           #18581     
#18555: 
    push           0          i64 
    pop            mm_parse.readtypespec.fflang i64 
!retry::
#18584: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           111        i64 
    jumpne         #18585     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
#18585: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           129        i64 
    casejumpeq     #18586     i64 0
    push           130        i64 
    casejumpeq     #18586     i64 0
    push           157        i64 
    casejumpeq     #18587     i64 0
    popstack                  i64 
    jump           #18588     
#18586: 
    setargs                   3 0
    push           mm_parse.readtypespec.fflang i64 
    push           mm_parse.readtypespec.typedefx i64 
    push           mm_parse.readtypespec.owner u64 
    callfn         &mm_parse.readrefproc i64 
    pop            mm_parse.readtypespec.t i64 
    jump           #18589     
#18587: 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    pop            mm_parse.readtypespec.fflang i64 
    jump           #18584     
    jump           #18589     
#18588: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           91         i64 
    jumpne         #18590     i64 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    push           16         i64 
    casejumpeq     #18591     i64 0
    popstack                  i64 
    jump           #18592     
#18591: 
    push           10         i64 
    pop            mm_parse.readtypespec.t i64 
    push           mm_parse.readtypespec.typedefx i64 
    jumpfalse      #18593     i64 
    push           16         i64 
    push           &mm_decls.tttarget 
    push           mm_parse.readtypespec.typedefx i64 
    popptroff                 i32 4 0
#18593: 
    jump           #18594     
#18592: 
    jump           #18595     
#18594: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #18596     
#18590: 
!readtarget::
#18595: 
    setargs                   2 0
    push           0          i64 
    push           mm_parse.readtypespec.owner u64 
    callfn         &mm_parse.readtypespec i64 
    pop            mm_parse.readtypespec.t i64 
    setargs                   3 0
    push           mm_parse.readtypespec.typedefx i64 
    push           mm_parse.readtypespec.t i64 
    push           mm_parse.readtypespec.owner u64 
    callfn         &mm_lib.createrefmode i64 
    pop            mm_parse.readtypespec.t i64 
#18596: 
#18589: 
    jump           #18581     
#18556: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           10         i64 
    pop            mm_parse.readtypespec.t i64 
    push           mm_parse.readtypespec.typedefx i64 
    jumpfalse      #18597     i64 
    push           16         i64 
    push           &mm_decls.tttarget 
    push           mm_parse.readtypespec.typedefx i64 
    popptroff                 i32 4 0
#18597: 
    jump           #18581     
#18557: 
    setargs                   1 0
    push           12         i64 
    callproc       &mm_parse.lexchecksymbol 
    setargs                   1 0
    push           79         i64 
    callproc       &mm_parse.lexchecksymbol 
    setargs                   2 0
    push           0          u64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    callfn         &mm_lib.newtypename i64 
    pop            mm_parse.readtypespec.t i64 
    setargs                   1 0
    push           13         i64 
    callproc       &mm_parse.lexchecksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #18581     
#18558: 
    setargs                   3 0
    push           mm_parse.readtypespec.typedefx i64 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    push           mm_parse.readtypespec.owner u64 
    callfn         &mm_parse.readslicetype i64 
    pop            mm_parse.readtypespec.t i64 
    jump           #18581     
#18559: 
    setargs                   1 0
    push           "Bad type starter" u64 
    callproc       &mm_support.serror 
#18581: 
    push           mm_parse.readtypespec.typedefx i64 
    jumpfalse      #18598     i64 
    push           &mm_decls.ttbasetype 
    push           mm_parse.readtypespec.t i64 
    pushptroff                i32 4 0
    push           &mm_decls.ttbasetype 
    push           mm_parse.readtypespec.typedefx i64 
    popptroff                 i32 4 0
#18598: 
    push           mm_parse.readtypespec.t i64 
    setret                    i64 
    jump           #18580     
#18580: 
    retfn                     i64 
End


Proc mm_parse.readslicetype: i64
    param          mm_parse.readslicetype.owner u64 
    param          mm_parse.readslicetype.slicetype i64 
    param          mm_parse.readslicetype.typedefx i64 
    local          mm_parse.readslicetype.plower u64 
    local          mm_parse.readslicetype.t i64 
    procentry                 
    setargs                   1 0
    push           14         i64 
    callproc       &mm_parse.lexchecksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           15         i64 
    jumpeq         #18600     i64 
    push           1          i64 
    pop            mm_parse.inreadprint i64 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readslicetype.plower u64 
    push           0          i64 
    pop            mm_parse.inreadprint i64 
    setargs                   1 0
    push           7          i64 
    callproc       &mm_parse.checksymbol 
    setargs                   1 0
    push           15         i64 
    callproc       &mm_parse.lexchecksymbol 
    jump           #18601     
#18600: 
    push           0          u64 
    pop            mm_parse.readslicetype.plower u64 
#18601: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    push           mm_parse.readslicetype.typedefx i64 
    push           mm_parse.readslicetype.owner u64 
    callfn         &mm_parse.readtypespec i64 
    pop            mm_parse.readslicetype.t i64 
    setargs                   5 0
    push           mm_parse.readslicetype.typedefx i64 
    push           mm_parse.readslicetype.plower u64 
    push           mm_parse.readslicetype.t i64 
    push           mm_parse.readslicetype.slicetype i64 
    push           mm_parse.readslicetype.owner u64 
    callfn         &mm_lib.createslicemode i64 
    setret                    i64 
    jump           #18602     
#18602: 
    retfn                     i64 
End


Proc mm_parse.readslist: u64
    param          mm_parse.readslist.iscall i64 
    param          mm_parse.readslist.donulls i64 
    local          mm_parse.readslist.ulist u64 
    local          mm_parse.readslist.ulistx u64 
    local          mm_parse.readslist.oldinparamlist i64 
    procentry                 
    push           0          u64 
    store          mm_parse.readslist.ulistx u64 
    pop            mm_parse.readslist.ulist u64 
    setargs                   0 0
    callproc       &mm_parse.skipsemi 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           13         i64 
    jumpne         #18604     i64 
    push           mm_parse.readslist.ulist u64 
    setret                    u64 
    jump           #18605     
#18604: 
    push           mm_parse.inparamlist i64 
    pop            mm_parse.readslist.oldinparamlist i64 
    push           mm_parse.readslist.iscall i64 
    pop            mm_parse.inparamlist i64 
#18606: 
    setargs                   0 0
    callproc       &mm_parse.skipsemi 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    casejumpeq     #18607     i64 0
    push           13         i64 
    casejumpeq     #18608     i64 0
    popstack                  i64 
    jump           #18609     
#18607: 
    push           mm_parse.readslist.donulls i64 
    jumpfalse      #18610     i64 
    setargs                   3 0
    setargs                   1 0
    push           2          i64 
    callfn         &mm_lib.createunit0 u64 
    push           &mm_parse.readslist.ulistx 
    push           &mm_parse.readslist.ulist 
    callproc       &mm_lib.addlistunit 
    jump           #18611     
#18610: 
    setargs                   1 0
    push           "null comma expr not allowed" u64 
    callproc       &mm_support.serror 
#18611: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #18612     
#18608: 
    push           mm_parse.readslist.donulls i64 
    jumpfalse      #18613     i64 
    setargs                   3 0
    push           mm_decls.nullunit u64 
    push           &mm_parse.readslist.ulistx 
    push           &mm_parse.readslist.ulist 
    callproc       &mm_lib.addlistunit 
#18613: 
    jump           #18614     
    jump           #18612     
#18609: 
    setargs                   3 0
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    push           &mm_parse.readslist.ulistx 
    push           &mm_parse.readslist.ulist 
    callproc       &mm_lib.addlistunit 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    setjumpeq      #18615     i64 
    push           6          i64 
    setjumpne      #18616     i64 
#18615: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           13         i64 
    jumpne         #18617     i64 
    jump           #18614     
#18617: 
    jump           #18618     
#18616: 
    setargs                   0 0
    callproc       &mm_parse.skipsemi 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           13         i64 
    jumpne         #18619     i64 
    jump           #18614     
#18619: 
    setargs                   1 0
    push           "SLIST?"   u64 
    callproc       &mm_support.serror 
#18618: 
#18612: 
    jump           #18606     
#18614: 
    push           mm_parse.readslist.oldinparamlist i64 
    pop            mm_parse.inparamlist i64 
    push           mm_parse.readslist.ulist u64 
    setret                    u64 
    jump           #18605     
#18605: 
    retfn                     u64 
End


Proc mm_parse.readindex: u64
    param          mm_parse.readindex.p u64 
    param          mm_parse.readindex.dot i64 
    local          mm_parse.readindex.q u64 
    local          mm_parse.readindex.plower u64 
    local          mm_parse.readindex.pupper u64 
    procentry                 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.readindex.dot i64 
    jumptrue       #18621     i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           15         i64 
    casejumpeq     #18622     i64 0
    push           27         i64 
    casejumpeq     #18623     i64 0
    push           7          i64 
    casejumpeq     #18623     i64 0
    popstack                  i64 
    jump           #18624     
#18622: 
!fullslice::
#18625: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    setargs                   2 0
    push           0          i64 
    push           mm_parse.readindex.p u64 
    callfn         &mm_lib.duplunit u64 
    push           37         i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readindex.plower u64 
    push           202        i64 
    push           mm_parse.readindex.plower u64 
    push           60         
    popptroff                 u8 1 0
    setargs                   2 0
    setargs                   2 0
    push           0          i64 
    push           mm_parse.readindex.p u64 
    callfn         &mm_lib.duplunit u64 
    push           37         i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readindex.pupper u64 
    push           203        i64 
    push           mm_parse.readindex.pupper u64 
    push           60         
    popptroff                 u8 1 0
    setargs                   3 0
    setargs                   3 0
    push           mm_parse.readindex.pupper u64 
    push           mm_parse.readindex.plower u64 
    push           20         i64 
    callfn         &mm_lib.createunit2 u64 
    push           mm_parse.readindex.p u64 
    push           50         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readindex.p u64 
    push           mm_parse.readindex.p u64 
    setret                    u64 
    jump           #18626     
    jump           #18627     
#18623: 
    setargs                   1 0
    push           15         i64 
    callproc       &mm_parse.lexchecksymbol 
    jump           #18625     
    jump           #18627     
#18624: 
#18627: 
#18621: 
#18628: 
    push           mm_parse.ndollar i64 
    push           10         i64 
    jumplt         #18629     i64 
    setargs                   1 0
    push           "Too many nested a[$]" u64 
    callproc       &mm_support.serror 
#18629: 
    push           mm_parse.readindex.p u64 
    push           &mm_parse.dollarstack 
    push           &mm_parse.ndollar 
    incrload                  i64 1
    popptroff                 u64 8 -8
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readindex.q u64 
    push           &mm_parse.ndollar 
    decr                      i64 1
    push           mm_parse.readindex.q u64 
    pushptr                   u8 
    push           20         i64 
    jumpne         #18630     i64 
    setargs                   3 0
    push           mm_parse.readindex.q u64 
    push           mm_parse.readindex.p u64 
    startmult                 
    push           mm_parse.readindex.dot i64 
    jumpfalse      #18631     i64 
    push           54         i64 
    resetmult                 
    jump           #18632     
#18631: 
    push           50         i64 
    endmult                   
#18632: 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readindex.p u64 
    jump           #18633     
#18630: 
    setargs                   3 0
    push           mm_parse.readindex.q u64 
    push           mm_parse.readindex.p u64 
    startmult                 
    push           mm_parse.readindex.dot i64 
    jumpfalse      #18634     i64 
    push           53         i64 
    resetmult                 
    jump           #18635     
#18634: 
    push           48         i64 
    endmult                   
#18635: 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readindex.p u64 
#18633: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpeq         #18636     i64 
    jump           #18637     
#18636: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #18628     
#18637: 
    setargs                   1 0
    push           15         i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.readindex.p u64 
    setret                    u64 
    jump           #18626     
#18626: 
    retfn                     u64 
End


Proc mm_parse.readdotsuffix: u64
    param          mm_parse.readdotsuffix.p u64 
    local          mm_parse.readdotsuffix.q u64 
    local          mm_parse.readdotsuffix.t i64 
    procentry                 
    jump           #18639     
#18640: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    switch         #18641     14 139
    opnd           #18642     
#18641: 
    switchlabel    #18643     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18644     
    switchlabel    #18645     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18646     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18647     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18648     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18649     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18642     
    switchlabel    #18650     
    endswitch                 
#18643: 
    setargs                   2 0
    push           1          i64 
    push           mm_parse.readdotsuffix.p u64 
    callfn         &mm_parse.readindex u64 
    pop            mm_parse.readdotsuffix.p u64 
    jump           #18651     
#18648: 
    setargs                   3 0
    setargs                   1 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    callfn         &mm_lib.createname u64 
    push           mm_parse.readdotsuffix.p u64 
    push           51         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readdotsuffix.p u64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #18651     
#18646: 
!doprop::
#18652: 
    setargs                   2 0
    push           mm_parse.readdotsuffix.p u64 
    push           37         i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readdotsuffix.p u64 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    push           mm_parse.readdotsuffix.p u64 
    push           60         
    popptroff                 u8 1 0
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #18651     
#18647: 
    setargs                   2 0
    push           mm_parse.readdotsuffix.p u64 
    push           72         i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readdotsuffix.p u64 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    push           mm_parse.readdotsuffix.p u64 
    push           40         
    popptroff                 i16 1 0
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #18651     
#18650: 
    push           mm_parse.readdotsuffix.p u64 
    pushptr                   u8 
    push           65         i64 
    casejumpeq     #18653     i64 0
    popstack                  i64 
    jump           #18654     
#18653: 
    jump           #18655     
#18654: 
    setargs                   2 0
    push           mm_parse.readdotsuffix.p u64 
    push           70         i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readdotsuffix.p u64 
#18655: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #18651     
#18645: 
    push           210        i64 
    push           &mm_decls.lx 
    push           1          
    popptroff                 u8 1 0
    jump           #18652     
    jump           #18651     
#18644: 
    push           209        i64 
    push           &mm_decls.lx 
    push           1          
    popptroff                 u8 1 0
    jump           #18652     
    jump           #18651     
#18649: 
    push           mm_parse.readdotsuffix.p u64 
    pushptr                   u8 
    push           65         i64 
    jumpne         #18656     i64 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    push           8          i64 
    jumpne         #18656     i64 
    setargs                   3 0
    setargs                   2 0
    push           mm_parse.readdotsuffix.p u64 
    push           37         i64 
    callfn         &mm_lib.createunit1 u64 
    setargs                   2 0
    push           mm_parse.readdotsuffix.p u64 
    push           37         i64 
    callfn         &mm_lib.createunit1 u64 
    push           20         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readdotsuffix.q u64 
    push           209        i64 
    push           mm_parse.readdotsuffix.q u64 
    push           16         
    pushptroff                u64 1 0
    push           60         
    popptroff                 u8 1 0
    push           210        i64 
    push           mm_parse.readdotsuffix.q u64 
    push           24         
    pushptroff                u64 1 0
    push           60         
    popptroff                 u8 1 0
    jump           #18657     
#18656: 
    jump           #18658     
#18657: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.readdotsuffix.q u64 
    pop            mm_parse.readdotsuffix.p u64 
    jump           #18651     
#18642: 
!error::
#18658: 
    setargs                   1 0
    push           "Unknown dot suffix" u64 
    callproc       &mm_support.serror 
#18651: 
#18639: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           2          i64 
    jumpeq         #18640     i64 
#18659: 
    push           mm_parse.readdotsuffix.p u64 
    setret                    u64 
    jump           #18660     
#18660: 
    retfn                     u64 
End


Proc mm_parse.readconstexpr: u64
    param          mm_parse.readconstexpr.needconst i64 
    procentry                 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    setret                    u64 
    jump           #18662     
#18662: 
    retfn                     u64 
End


Proc mm_parse.readconstint: i64
    local          mm_parse.readconstint.x i64 
    procentry                 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           70         i64 
    jumpne         #18664     i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                i64 1 0
    pop            mm_parse.readconstint.x i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.readconstint.x i64 
    setret                    i64 
    jump           #18665     
    jump           #18666     
#18664: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           31         i64 
    jumpne         #18667     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           70         i64 
    jumpne         #18668     i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                i64 1 0
    pop            mm_parse.readconstint.x i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.readconstint.x i64 
    neg                       i64 
    setret                    i64 
    jump           #18665     
#18668: 
#18667: 
#18666: 
    setargs                   1 0
    push           "Can't do complex expr" u64 
    callproc       &mm_support.serror 
    push           0          i64 
    setret                    i64 
    jump           #18665     
#18665: 
    retfn                     i64 
End


Proc mm_parse.readprocdef:
    param          mm_parse.readprocdef.procowner u64 
    param          mm_parse.readprocdef.isglobal i64 
    param          mm_parse.readprocdef.fflang i64 
    local          mm_parse.readprocdef.kwd i64 
    local          mm_parse.readprocdef.startline i64 
    local          mm_parse.readprocdef.closesym i64 
    local          mm_parse.readprocdef.stproc u64 
    local          mm_parse.readprocdef.q u64 
    local          mm_parse.readprocdef.stname u64 
    local          mm_parse.readprocdef.i i64 
    procentry                 
    push           &mm_decls.lx 
    pushptr                   u8 
    pop            mm_parse.readprocdef.kwd i64 
    push           0          i64 
    pop            mm_parse.yieldseen i64 
    push           0          i64 
    pop            mm_parse.nforloops i64 
    setargs                   3 0
    push           mm_parse.readprocdef.fflang i64 
    push           mm_parse.readprocdef.isglobal i64 
    push           mm_parse.readprocdef.procowner u64 
    callfn         &mm_parse.readprocdecl u64 
    pop            mm_parse.readprocdef.stproc u64 
    setargs                   0 0
    callproc       &mm_parse.checkequals 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.getcurrline i64 
    pop            mm_parse.readprocdef.startline i64 
    setargs                   1 0
    push           0          i64 
    callfn         &mm_parse.checkbegin i64 
    pop            mm_parse.readprocdef.closesym i64 
    setargs                   1 0
    push           mm_parse.readprocdef.stproc u64 
    callproc       &mm_parse.pushproc 
    push           0          i64 
    pop            mm_lib.nextavindex i64 
    push           mm_parse.dretvar u64 
    jumpfalse      #18670     u64 
    setargs                   3 0
    push           12         i64 
    push           mm_parse.dretvar u64 
    push           mm_parse.readprocdef.stproc u64 
    callfn         &mm_lib.getduplnameptr u64 
    pop            mm_parse.readprocdef.stname u64 
    setargs                   3 0
    push           mm_parse.readprocdef.stname u64 
    push           72         
    addrefoff                 u64 1 0
    push           mm_parse.readprocdef.stproc u64 
    push           72         
    pushptroff                i32 1 0
    push           mm_parse.readprocdef.procowner u64 
    callproc       &mm_lib.storemode 
    setargs                   2 0
    push           mm_parse.readprocdef.stname u64 
    push           mm_parse.readprocdef.stproc u64 
    callproc       &mm_lib.adddef 
#18670: 
    setargs                   1 0
    push           mm_parse.readprocdef.stproc u64 
    callproc       &mm_lib.addtoproclist 
    setargs                   1 0
    push           0          i64 
    callfn         &mm_parse.readsunit u64 
    push           mm_parse.readprocdef.stproc u64 
    push           64         
    popptroff                 u64 1 0
    setargs                   3 0
    push           mm_parse.readprocdef.startline i64 
    push           mm_parse.readprocdef.kwd i64 
    push           mm_parse.readprocdef.closesym i64 
    callproc       &mm_parse.checkbeginend 
    push           mm_parse.yieldseen i64 
    jumpfalse      #18671     i64 
    push           9          i64 
    push           mm_parse.readprocdef.stproc u64 
    push           78         
    popptroff                 u8 1 0
#18671: 
    push           mm_decls.ndocstrings i64 
    jumpfalse      #18672     i64 
    push           mm_parse.docfile u64 
    jumpfalse      #18672     u64 
    push           mm_parse.readprocdef.stproc u64 
    push           92         
    pushptroff                u16 1 0
    push           0          i64 
    push           1          i64 
    dotslice                  i64 
    push           2          i64 
    jumpne         #18672     i64 
    setargs                   1 0
    push           mm_parse.docfile u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "proc"     u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_parse.readprocdef.stproc u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#18673: 
    push           1          i64 
    pop            mm_parse.readprocdef.i i64 
    push           mm_decls.ndocstrings i64 
    push           1          i64 
    jumplt         #18674     i64 
#18675: 
    setargs                   1 0
    push           mm_parse.docfile u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           &mm_decls.docstrings 
    push           mm_parse.readprocdef.i i64 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    setargs                   1 0
    push           &mm_decls.docstrings 
    push           mm_parse.readprocdef.i i64 
    pushptroff                u64 8 -8
    push           1          i64 
    addrefoff                 u64 1 0
    callfn         &strlen    i64 
    push           &mm_decls.docstrings 
    push           mm_parse.readprocdef.i i64 
    pushptroff                u64 8 -8
    callproc       &mlibp.pcm_free 
#18676: 
    forup          #18675     i64 1
    opnd           mm_parse.readprocdef.i 
    opnd           mm_decls.ndocstrings 
#18674: 
    setargs                   1 0
    push           mm_parse.docfile u64 
    callproc       &msysp.m$print_startfile 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           0          i64 
    pop            mm_decls.ndocstrings i64 
#18672: 
    setargs                   0 0
    callproc       &mm_parse.popproc 
#18677: 
    retproc                   
End


Proc mm_parse.readprocdecl: u64
    param          mm_parse.readprocdecl.procowner u64 
    param          mm_parse.readprocdecl.isglobal i64 
    param          mm_parse.readprocdecl.fflang i64 
    local          mm_parse.readprocdecl.kwd i64 
    local          mm_parse.readprocdecl.varparams i64 
    local          mm_parse.readprocdecl.try_level i64 
    local          mm_parse.readprocdecl.nparams i64 
    local          mm_parse.readprocdecl.nretvalues i64 
    local          mm_parse.readprocdecl.isthreaded i64 
    local          mm_parse.readprocdecl.retmodes block:32 
    local          mm_parse.readprocdecl.metadata u64 
    local          mm_parse.readprocdecl.truename u64 
    local          mm_parse.readprocdecl.pequiv u64 
    local          mm_parse.readprocdecl.stproc u64 
    local          mm_parse.readprocdecl.owner u64 
    local          mm_parse.readprocdecl.paramlist u64 
    local          mm_parse.readprocdecl.nameptr u64 
    procentry                 
    push           &mm_decls.lx 
    pushptr                   u8 
    pop            mm_parse.readprocdecl.kwd i64 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    pop            mm_parse.readprocdecl.isthreaded i64 
    push           0          u64 
    pop            mm_parse.readprocdecl.pequiv u64 
    push           ""         u64 
    pop            mm_parse.readprocdecl.metadata u64 
    push           0          u64 
    pop            mm_parse.readprocdecl.truename u64 
    push           0          i64 
    pop            mm_parse.readprocdecl.varparams i64 
    push           0          i64 
    pop            mm_parse.readprocdecl.try_level i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           75         i64 
    jumpne         #18679     i64 
    setargs                   1 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    callfn         &mlibp.pcm_copyheapstring u64 
    pop            mm_parse.readprocdecl.truename u64 
    setargs                   1 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    callproc       &mlibp.convlcstring 
    setargs                   1 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    callfn         &mm_lex.addnamestr u64 
    push           &mm_decls.lx 
    push           8          
    popptroff                 u64 1 0
    jump           #18680     
#18679: 
    setargs                   1 0
    push           79         i64 
    callproc       &mm_parse.checksymbol 
#18680: 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    pop            mm_parse.readprocdecl.nameptr u64 
    setargs                   3 0
    startmult                 
    push           mm_parse.insidedllimport i64 
    jumpfalse      #18681     i64 
    push           6          i64 
    resetmult                 
    jump           #18682     
#18681: 
    push           5          i64 
    endmult                   
#18682: 
    push           mm_parse.readprocdecl.nameptr u64 
    push           mm_parse.readprocdecl.procowner u64 
    callfn         &mm_lib.getduplnameptr u64 
    pop            mm_parse.readprocdecl.stproc u64 
    push           mm_parse.insidedllimport i64 
    jumpfalse      #18683     i64 
    push           1          i64 
    pop            mm_parse.readprocdecl.isglobal i64 
#18683: 
    push           mm_parse.readprocdecl.isthreaded i64 
    push           mm_parse.readprocdecl.stproc u64 
    push           118        
    popptroff                 u8 1 0
    push           mm_parse.readprocdecl.truename u64 
    jumpfalse      #18684     u64 
    push           mm_parse.readprocdecl.truename u64 
    push           mm_parse.readprocdecl.stproc u64 
    push           96         
    popptroff                 u64 1 0
#18684: 
    push           mm_parse.readprocdecl.stproc u64 
    pushptr                   u64 
    pushptr                   u8 
    push           36         u64 
    jumpne         #18685     u64 
    setargs                   2 0
    push           "$init"    u64 
    push           mm_parse.readprocdecl.stproc u64 
    pushptr                   u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #18685     i64 
    push           mm_parse.readprocdecl.stproc u64 
    push           &mm_decls.moduletable 
    push           mm_decls.stmodule u64 
    push           94         
    pushptroff                u8 1 0
    addrefoff                 block:456 456 0
    push           440        
    popptroff                 u64 1 0
#18685: 
    setargs                   2 0
    push           mm_parse.readprocdecl.stproc u64 
    push           mm_parse.readprocdecl.procowner u64 
    callproc       &mm_lib.adddef 
    push           mm_parse.readprocdecl.stproc u64 
    push           78         
    pushptroff                u8 1 0
    push           6          i64 
    jumpne         #18686     i64 
    push           1          u64 
    push           mm_parse.readprocdecl.stproc u64 
    push           92         
    addrefoff                 u64 1 0
    push           14         i64 
    popdotindex               u16 
#18686: 
    push           mm_parse.readprocdecl.stproc u64 
    pop            mm_parse.readprocdecl.owner u64 
    setargs                   1 0
    push           mm_parse.readprocdecl.stproc u64 
    callproc       &mm_parse.pushproc 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           0          u64 
    pop            mm_parse.readprocdecl.paramlist u64 
    push           0          i64 
    pop            mm_parse.readprocdecl.retmodes i64 
    push           0          i64 
    pop            mm_parse.readprocdecl.nparams i64 
    push           0          i64 
    pop            mm_parse.readprocdecl.nretvalues i64 
    push           0          i64 
    pop            mm_parse.readprocdecl.nretvalues i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           12         i64 
    jumpne         #18687     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           13         i64 
    jumpeq         #18688     i64 
    setargs                   5 0
    push           &mm_parse.readprocdecl.nparams 
    push           &mm_parse.readprocdecl.varparams 
    push           mm_parse.readprocdecl.fflang i64 
    push           mm_parse.readprocdecl.stproc u64 
    push           mm_parse.readprocdecl.procowner u64 
    callfn         &mm_parse.readparams u64 
    pop            mm_parse.readprocdecl.paramlist u64 
    setargs                   1 0
    push           13         i64 
    callproc       &mm_parse.checksymbol 
#18688: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           7          i64 
    jumpeq         #18689     i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           11         i64 
    jumpne         #18690     i64 
#18689: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    push           &mm_parse.readprocdecl.retmodes 
    push           mm_parse.readprocdecl.owner u64 
    callfn         &mm_parse.readreturntype i64 
    pop            mm_parse.readprocdecl.nretvalues i64 
    jump           #18691     
#18690: 
    push           &mm_decls.typestarterset 
    push           &mm_decls.lx 
    pushptr                   u8 
    pushptroff                u8 1 0
    jumptrue       #18692     i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           79         i64 
    jumpne         #18693     i64 
#18692: 
    setargs                   2 0
    push           &mm_parse.readprocdecl.retmodes 
    push           mm_parse.readprocdecl.owner u64 
    callfn         &mm_parse.readreturntype i64 
    pop            mm_parse.readprocdecl.nretvalues i64 
#18693: 
#18691: 
    jump           #18694     
#18687: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           7          i64 
    jumpeq         #18695     i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           11         i64 
    jumpne         #18696     i64 
#18695: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    push           &mm_parse.readprocdecl.retmodes 
    push           mm_parse.readprocdecl.owner u64 
    callfn         &mm_parse.readreturntype i64 
    pop            mm_parse.readprocdecl.nretvalues i64 
#18696: 
#18694: 
    push           0          u64 
    pop            mm_parse.dretvar u64 
    push           mm_parse.readprocdecl.nretvalues i64 
    push           1          i64 
    jumpne         #18697     i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           79         i64 
    jumpne         #18698     i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    pop            mm_parse.dretvar u64 
    setargs                   0 0
    callproc       &mm_lex.lex 
#18698: 
#18697: 
    push           mm_parse.readprocdecl.nretvalues i64 
    jumptrue       #18699     i64 
    push           mm_parse.readprocdecl.kwd i64 
    push           130        i64 
    jumpne         #18699     i64 
    setargs                   1 0
    push           "Function needs ret type" u64 
    callproc       &mm_support.serror 
#18699: 
    push           mm_parse.readprocdecl.nretvalues i64 
    jumpfalse      #18700     i64 
    push           mm_parse.readprocdecl.kwd i64 
    push           130        i64 
    jumpeq         #18700     i64 
    setargs                   1 0
    push           "Proc can't return value" u64 
    callproc       &mm_support.serror 
#18700: 
    push           mm_parse.readprocdecl.paramlist u64 
    push           mm_parse.readprocdecl.stproc u64 
    push           104        
    popptroff                 u64 1 0
    push           mm_parse.readprocdecl.nretvalues i64 
    push           mm_parse.readprocdecl.stproc u64 
    push           116        
    popptroff                 u8 1 0
    push           mm_parse.readprocdecl.nretvalues i64 
    push           0          i64 
    casejumpeq     #18701     i64 0
    push           1          i64 
    casejumpeq     #18702     i64 0
    popstack                  i64 
    jump           #18703     
#18701: 
    push           0          i64 
    push           mm_parse.readprocdecl.stproc u64 
    push           72         
    popptroff                 i32 1 0
    jump           #18704     
#18702: 
    setargs                   3 0
    push           mm_parse.readprocdecl.stproc u64 
    push           72         
    addrefoff                 u64 1 0
    push           &mm_parse.readprocdecl.retmodes 
    push           1          i64 
    pushptroff                i64 8 -8
    push           mm_parse.readprocdecl.procowner u64 
    callproc       &mm_lib.storemode 
    jump           #18704     
#18703: 
    setargs                   4 0
    push           0          i64 
    push           mm_parse.readprocdecl.nretvalues i64 
    push           &mm_parse.readprocdecl.retmodes 
    makeslice                 u128 
    push           mm_parse.readprocdecl.procowner u64 
    callfn         &mm_lib.createtuplemode i64 
    push           mm_parse.readprocdecl.stproc u64 
    push           72         
    popptroff                 i32 1 0
#18704: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           21         i64 
    jumpne         #18705     i64 
    setargs                   1 0
    push           79         i64 
    callproc       &mm_parse.lexchecksymbol 
    setargs                   1 0
    push           "READPROCDEF @" u64 
    callproc       &mm_support.serror 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           1          u64 
    push           mm_parse.readprocdecl.stproc u64 
    push           92         
    addrefoff                 u64 1 0
    push           13         i64 
    popdotindex               u16 
#18705: 
    push           0          u64 
    push           mm_parse.readprocdecl.stproc u64 
    push           64         
    popptroff                 u64 1 0
    push           mm_parse.readprocdecl.fflang i64 
    push           2          i64 
    casejumpeq     #18706     i64 0
    push           1          i64 
    casejumpeq     #18706     i64 0
    popstack                  i64 
    jump           #18707     
#18706: 
    jump           #18708     
#18707: 
    push           mm_parse.readprocdecl.procowner u64 
    push           78         
    pushptroff                u8 1 0
    push           2          i64 
    casejumpeq     #18709     i64 0
    push           3          i64 
    casejumpeq     #18710     i64 0
    popstack                  i64 
    jump           #18711     
#18709: 
    jump           #18712     
#18710: 
    setargs                   1 0
    push           "Need FF specifier" u64 
    callproc       &mm_support.serror 
    jump           #18712     
#18711: 
#18712: 
#18708: 
    push           mm_parse.readprocdecl.isglobal u64 
    push           mm_parse.readprocdecl.stproc u64 
    push           92         
    addrefoff                 u64 1 0
    push           0          i64 
    push           1          i64 
    popdotslice               u16 
    push           mm_parse.readprocdecl.varparams i64 
    push           mm_parse.readprocdecl.stproc u64 
    push           117        
    popptroff                 u8 1 0
    push           mm_parse.readprocdecl.fflang i64 
    push           mm_parse.readprocdecl.stproc u64 
    push           115        
    popptroff                 u8 1 0
    push           mm_parse.readprocdecl.procowner u64 
    push           mm_decls.stmodule u64 
    jumpne         #18713     u64 
    push           mm_parse.readprocdecl.stproc u64 
    push           76         
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #18714     i64 
    setargs                   2 0
    push           "start"    u64 
    push           mm_parse.readprocdecl.stproc u64 
    pushptr                   u64 
    callfn         &mlibp.eqstring i64 
    jumptrue       #18715     i64 
#18714: 
#18713: 
    push           mm_parse.readprocdecl.stproc u64 
    push           76         
    pushptroff                u8 1 0
    push           4          i64 
    jumpne         #18716     i64 
    setargs                   2 0
    push           "main"     u64 
    push           mm_parse.readprocdecl.stproc u64 
    pushptr                   u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #18716     i64 
#18715: 
    push           2          u64 
    push           mm_parse.readprocdecl.stproc u64 
    push           92         
    addrefoff                 u64 1 0
    push           0          i64 
    push           1          i64 
    popdotslice               u16 
#18716: 
    setargs                   0 0
    callproc       &mm_parse.popproc 
    push           mm_parse.readprocdecl.stproc u64 
    setret                    u64 
    jump           #18717     
#18717: 
    retfn                     u64 
End


Proc mm_parse.readparams: u64
    param          mm_parse.readparams.procowner u64 
    param          mm_parse.readparams.owner u64 
    param          mm_parse.readparams.fflang i64 
    param          mm_parse.readparams.varparams u64 
    param          mm_parse.readparams.nparams u64 
    local          mm_parse.readparams.stlist u64 
    local          mm_parse.readparams.stlistx u64 
    local          mm_parse.readparams.stname u64 
    local          mm_parse.readparams.d u64 
    local          mm_parse.readparams.parammode i64 
    local          mm_parse.readparams.pmode i64 
    local          mm_parse.readparams.m i64 
    local          mm_parse.readparams.pmprefix i64 
    local          mm_parse.readparams.str block:30 
    procentry                 
    push           0          u64 
    store          mm_parse.readparams.stlistx u64 
    pop            mm_parse.readparams.stlist u64 
    push           0          i64 
    pop            mm_parse.readparams.pmode i64 
    push           0          i64 
    push           mm_parse.readparams.nparams u64 
    popptr                    i64 
    push           0          i64 
    pop            mm_parse.readparams.pmprefix i64 
    push           0          i64 
    pop            mm_parse.readparams.parammode i64 
    push           mm_parse.readparams.fflang i64 
    push           0          i64 
    jumpne         #18719     i64 
    push           3          i64 
    pop            mm_parse.readparams.fflang i64 
#18719: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           95         i64 
    setjumpeq      #18720     i64 
    push           24         i64 
    setjumpne      #18721     i64 
#18720: 
    push           2          i64 
    pop            mm_parse.readparams.parammode i64 
    push           1          i64 
    pop            mm_parse.readparams.pmprefix i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #18722     
#18721: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           50         i64 
    jumpne         #18723     i64 
    push           1          i64 
    pop            mm_parse.readparams.parammode i64 
    push           1          i64 
    pop            mm_parse.readparams.pmprefix i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
#18723: 
#18722: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           79         i64 
    jumpne         #18724     i64 
    push           &mm_decls.nextlx 
    pushptr                   u8 
    push           5          i64 
    setjumpeq      #18725     i64 
    push           13         i64 
    setjumpne      #18724     i64 
#18725: 
    setargs                   2 0
    push           0          i64 
    push           mm_parse.readparams.procowner u64 
    callfn         &mm_parse.readtypespec i64 
    pop            mm_parse.readparams.pmode i64 
!typesonly::
#18726: 
    setargs                   7 0
    push           mm_parse.readparams.parammode i64 
    push           mm_parse.readparams.pmode i64 
    push           mm_parse.readparams.nparams u64 
    push           mm_parse.readparams.varparams u64 
    push           mm_parse.readparams.fflang i64 
    push           mm_parse.readparams.owner u64 
    push           mm_parse.readparams.procowner u64 
    callfn         &mm_parse.readparams_types u64 
    setret                    u64 
    jump           #18727     
    jump           #18728     
#18724: 
    setargs                   2 0
    push           0          i64 
    push           mm_parse.readparams.procowner u64 
    callfn         &mm_parse.readtypespec i64 
    pop            mm_parse.readparams.pmode i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    setjumpeq      #18729     i64 
    push           13         i64 
    setjumpne      #18730     i64 
#18729: 
    jump           #18726     
#18730: 
#18728: 
    push           mm_parse.readparams.pmprefix i64 
    jumpfalse      #18731     i64 
    setargs                   1 0
    push           "&/out must be applied to param name" u64 
    callproc       &mm_support.serror 
#18731: 
    jump           #18732     
#18733: 
    setargs                   0 0
    callfn         &mm_parse.istypestarter i64 
    jumpfalse      #18734     i64 
    setargs                   2 0
    push           0          i64 
    push           mm_parse.readparams.procowner u64 
    callfn         &mm_parse.readtypespec i64 
    pop            mm_parse.readparams.pmode i64 
#18734: 
!gotmode::
#18732: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           50         i64 
    casejumpeq     #18735     i64 0
    push           95         i64 
    casejumpeq     #18736     i64 0
    push           24         i64 
    casejumpeq     #18736     i64 0
    popstack                  i64 
    jump           #18737     
#18735: 
    push           1          i64 
    pop            mm_parse.readparams.parammode i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           7          i64 
    jumpne         #18738     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
#18738: 
    jump           #18739     
#18736: 
    push           2          i64 
    pop            mm_parse.readparams.parammode i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           7          i64 
    jumpne         #18740     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
#18740: 
    jump           #18739     
#18737: 
#18739: 
    setargs                   1 0
    push           79         i64 
    callproc       &mm_parse.checksymbol 
    push           mm_parse.readparams.nparams u64 
    incr                      i64 1
    setargs                   3 0
    push           13         i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           mm_parse.readparams.owner u64 
    callfn         &mm_lib.getduplnameptr u64 
    pop            mm_parse.readparams.stname u64 
    setargs                   2 0
    push           mm_parse.readparams.stname u64 
    push           mm_parse.readparams.owner u64 
    callproc       &mm_lib.adddef 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.readparams.parammode i64 
    push           2          i64 
    jumpne         #18741     i64 
    setargs                   3 0
    push           0          i64 
    push           mm_parse.readparams.pmode i64 
    push           mm_parse.readparams.procowner u64 
    callfn         &mm_lib.createrefmode i64 
    pop            mm_parse.readparams.m i64 
    jump           #18742     
#18741: 
    push           mm_parse.readparams.pmode i64 
    pop            mm_parse.readparams.m i64 
#18742: 
    setargs                   3 0
    push           mm_parse.readparams.stname u64 
    push           72         
    addrefoff                 u64 1 0
    push           mm_parse.readparams.m i64 
    push           mm_parse.readparams.owner u64 
    callproc       &mm_lib.storemode 
    push           mm_parse.readparams.parammode i64 
    push           mm_parse.readparams.stname u64 
    push           104        
    popptroff                 u8 1 0
    setargs                   3 0
    push           mm_parse.readparams.stname u64 
    push           &mm_parse.readparams.stlistx 
    push           &mm_parse.readparams.stlist 
    callproc       &mm_parse.addlistparam 
    push           0          i64 
    pop            mm_parse.readparams.parammode i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           9          i64 
    casejumpeq     #18743     i64 0
    push           46         i64 
    casejumpeq     #18744     i64 0
    popstack                  i64 
    jump           #18745     
#18743: 
    setargs                   0 0
    callproc       &mm_lex.lex 
!dodefvalue::
#18746: 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    push           mm_parse.readparams.stname u64 
    push           64         
    popptroff                 u64 1 0
    push           1          u64 
    push           mm_parse.readparams.stname u64 
    push           92         
    addrefoff                 u64 1 0
    push           10         i64 
    popdotindex               u16 
    push           1          i64 
    push           mm_parse.readparams.stname u64 
    push           105        
    popptroff                 u8 1 0
    jump           #18747     
#18744: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #18746     
    jump           #18747     
#18745: 
#18747: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    casejumpeq     #18748     i64 0
    push           13         i64 
    casejumpeq     #18749     i64 0
    popstack                  i64 
    jump           #18750     
#18748: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #18751     
#18749: 
    jump           #18752     
    jump           #18751     
#18750: 
    setargs                   1 0
    push           "nameparams1" u64 
    callproc       &mm_support.serror 
#18751: 
    jump           #18733     
#18752: 
    push           mm_parse.readparams.stlist u64 
    setret                    u64 
    jump           #18727     
#18727: 
    retfn                     u64 
End


Proc mm_parse.readparams_types: u64
    param          mm_parse.readparams_types.procowner u64 
    param          mm_parse.readparams_types.owner u64 
    param          mm_parse.readparams_types.fflang i64 
    param          mm_parse.readparams_types.varparams u64 
    param          mm_parse.readparams_types.nparams u64 
    param          mm_parse.readparams_types.pmode i64 
    param          mm_parse.readparams_types.parammode i64 
    local          mm_parse.readparams_types.stlist u64 
    local          mm_parse.readparams_types.stlistx u64 
    local          mm_parse.readparams_types.stname u64 
    local          mm_parse.readparams_types.firstparam i64 
    local          mm_parse.readparams_types.m i64 
    local          mm_parse.readparams_types.str block:30 
    procentry                 
    push           0          u64 
    store          mm_parse.readparams_types.stlistx u64 
    pop            mm_parse.readparams_types.stlist u64 
    push           0          u64 
    pop            mm_parse.readparams_types.stname u64 
    push           0          i64 
    push           mm_parse.readparams_types.nparams u64 
    popptr                    i64 
    jump           #18754     
#18755: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           28         i64 
    jumpne         #18756     i64 
    push           mm_parse.readparams_types.nparams u64 
    pushptr                   i64 
    push           1          i64 
    add                       i64 
    push           mm_parse.readparams_types.varparams u64 
    popptr                    i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           13         i64 
    callproc       &mm_parse.checksymbol 
    jump           #18757     
#18756: 
    setargs                   2 0
    push           0          i64 
    push           mm_parse.readparams_types.procowner u64 
    callfn         &mm_parse.readtypespec i64 
    pop            mm_parse.readparams_types.pmode i64 
!gotmode::
#18754: 
    push           mm_parse.readparams_types.nparams u64 
    incr                      i64 1
    setargs                   1 0
    push           &mm_parse.readparams_types.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "$"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           mm_parse.readparams_types.nparams u64 
    pushptr                   i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   3 0
    push           13         i64 
    setargs                   1 0
    push           &mm_parse.readparams_types.str 
    callfn         &mm_lex.addnamestr u64 
    push           mm_parse.readparams_types.owner u64 
    callfn         &mm_lib.getduplnameptr u64 
    pop            mm_parse.readparams_types.stname u64 
    setargs                   2 0
    push           mm_parse.readparams_types.stname u64 
    push           mm_parse.readparams_types.owner u64 
    callproc       &mm_lib.adddef 
    push           mm_parse.readparams_types.parammode i64 
    push           2          i64 
    jumpne         #18758     i64 
    setargs                   3 0
    push           0          i64 
    push           mm_parse.readparams_types.pmode i64 
    push           mm_parse.readparams_types.procowner u64 
    callfn         &mm_lib.createrefmode i64 
    pop            mm_parse.readparams_types.m i64 
    jump           #18759     
#18758: 
    push           mm_parse.readparams_types.pmode i64 
    pop            mm_parse.readparams_types.m i64 
#18759: 
    setargs                   3 0
    push           mm_parse.readparams_types.stname u64 
    push           72         
    addrefoff                 u64 1 0
    push           mm_parse.readparams_types.m i64 
    push           mm_parse.readparams_types.owner u64 
    callproc       &mm_lib.storemode 
    push           mm_parse.readparams_types.parammode i64 
    push           mm_parse.readparams_types.stname u64 
    push           104        
    popptroff                 u8 1 0
    setargs                   3 0
    push           mm_parse.readparams_types.stname u64 
    push           &mm_parse.readparams_types.stlistx 
    push           &mm_parse.readparams_types.stlist 
    callproc       &mm_parse.addlistparam 
    push           0          i64 
    pop            mm_parse.readparams_types.parammode i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           9          i64 
    casejumpeq     #18760     i64 0
    push           46         i64 
    casejumpeq     #18760     i64 0
    push           79         i64 
    casejumpeq     #18761     i64 0
    popstack                  i64 
    jump           #18762     
#18760: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    push           mm_parse.readparams_types.stname u64 
    push           64         
    popptroff                 u64 1 0
    push           1          u64 
    push           mm_parse.readparams_types.stname u64 
    push           92         
    addrefoff                 u64 1 0
    push           10         i64 
    popdotindex               u16 
    jump           #18763     
#18761: 
    setargs                   1 0
    push           "Can't mixed unnamed/named params" u64 
    callproc       &mm_support.serror 
    jump           #18763     
#18762: 
#18763: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    casejumpeq     #18764     i64 0
    push           13         i64 
    casejumpeq     #18765     i64 0
    popstack                  i64 
    jump           #18766     
#18764: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           24         i64 
    jumpne         #18767     i64 
    push           2          i64 
    pop            mm_parse.readparams_types.parammode i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
#18767: 
    jump           #18768     
#18765: 
    jump           #18757     
    jump           #18768     
#18766: 
    setargs                   1 0
    push           "typeparams3" u64 
    callproc       &mm_support.serror 
#18768: 
    jump           #18755     
#18757: 
    push           mm_parse.readparams_types.stlist u64 
    setret                    u64 
    jump           #18769     
#18769: 
    retfn                     u64 
End


Proc mm_parse.readcondsuffix: u64
    param          mm_parse.readcondsuffix.p u64 
    local          mm_parse.readcondsuffix.q u64 
    procentry                 
    startmult                 
    push           &mm_decls.lx 
    pushptr                   u8 
    switch         #18771     105 109
    opnd           #18772     
#18771: 
    switchlabel    #18773     
    switchlabel    #18772     
    switchlabel    #18772     
    switchlabel    #18772     
    switchlabel    #18774     
    endswitch                 
#18774: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   3 0
    setargs                   2 0
    push           mm_parse.readcondsuffix.p u64 
    push           5          i64 
    callfn         &mm_lib.createunit1 u64 
    setargs                   1 0
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    callfn         &mm_parse.fixcond u64 
    push           100        i64 
    callfn         &mm_lib.createunit2 u64 
    resetmult                 
    jump           #18775     
#18773: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    setargs                   1 0
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    callfn         &mm_parse.fixcond u64 
    push           17         i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readcondsuffix.q u64 
    push           132        i64 
    push           mm_parse.readcondsuffix.q u64 
    push           60         
    popptroff                 u8 1 0
    setargs                   3 0
    setargs                   2 0
    push           mm_parse.readcondsuffix.p u64 
    push           5          i64 
    callfn         &mm_lib.createunit1 u64 
    push           mm_parse.readcondsuffix.q u64 
    push           100        i64 
    callfn         &mm_lib.createunit2 u64 
    resetmult                 
    jump           #18775     
#18772: 
    push           mm_parse.readcondsuffix.p u64 
    endmult                   
#18775: 
    setret                    u64 
    jump           #18776     
#18776: 
    retfn                     u64 
End


Proc mm_parse.readif: u64
    local          mm_parse.readif.pos1 i64 
    local          mm_parse.readif.kwd i64 
    local          mm_parse.readif.pos2 i64 
    local          mm_parse.readif.pthen u64 
    local          mm_parse.readif.pcond u64 
    local          mm_parse.readif.plist u64 
    local          mm_parse.readif.plistx u64 
    local          mm_parse.readif.pelse u64 
    local          mm_parse.readif.p u64 
    local          mm_parse.readif.pelsif u64 
    procentry                 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    pop            mm_parse.readif.pos1 i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    pop            mm_parse.readif.kwd i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    setargs                   1 0
    push           0          i64 
    callfn         &mm_parse.readsunit u64 
    callfn         &mm_parse.fixcond u64 
    pop            mm_parse.readif.pcond u64 
    setargs                   0 0
    callproc       &mm_parse.skipsemi 
    setargs                   1 0
    push           98         i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           0          i64 
    callfn         &mm_parse.readsunit u64 
    pop            mm_parse.readif.pthen u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           99         i64 
    jumpne         #18778     i64 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    pop            mm_parse.readif.pos2 i64 
    setargs                   3 0
    push           mm_parse.readif.pthen u64 
    push           mm_parse.readif.pcond u64 
    push           92         i64 
    callfn         &mm_lib.createunit2 u64 
    store          mm_parse.readif.plistx u64 
    pop            mm_parse.readif.plist u64 
    jump           #18779     
#18780: 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    pop            mm_parse.readif.pos2 i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    callfn         &mm_parse.fixcond u64 
    pop            mm_parse.readif.pcond u64 
    setargs                   1 0
    push           98         i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           0          i64 
    callfn         &mm_parse.readsunit u64 
    pop            mm_parse.readif.pthen u64 
    setargs                   3 0
    push           mm_parse.readif.pthen u64 
    push           mm_parse.readif.pcond u64 
    push           92         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readif.pelsif u64 
    push           mm_parse.readif.pos2 i64 
    push           mm_parse.readif.pelsif u64 
    push           4          
    popptroff                 u32 1 0
    setargs                   3 0
    push           mm_parse.readif.pelsif u64 
    push           &mm_parse.readif.plistx 
    push           &mm_parse.readif.plist 
    callproc       &mm_lib.addlistunit 
#18779: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           99         i64 
    jumpeq         #18780     i64 
#18781: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           100        i64 
    casejumpeq     #18782     i64 0
    push           101        i64 
    casejumpeq     #18783     i64 0
    push           102        i64 
    casejumpeq     #18783     i64 0
    popstack                  i64 
    jump           #18784     
#18782: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           0          i64 
    callfn         &mm_parse.readsunit u64 
    pop            mm_parse.readif.pelse u64 
    setargs                   4 0
    push           0          i64 
    push           0          i64 
    push           mm_parse.readif.kwd i64 
    push           104        i64 
    callproc       &mm_parse.checkend 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #18785     
#18783: 
    push           mm_parse.readif.kwd i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    setargs                   1 0
    setargs                   0 0
    callfn         &mm_parse.readswitchcase u64 
    callfn         &mm_parse.makeblock u64 
    pop            mm_parse.readif.pelse u64 
    jump           #18785     
#18784: 
    push           0          u64 
    pop            mm_parse.readif.pelse u64 
    setargs                   4 0
    push           0          i64 
    push           0          i64 
    push           mm_parse.readif.kwd i64 
    push           104        i64 
    callproc       &mm_parse.checkend 
    setargs                   0 0
    callproc       &mm_lex.lex 
#18785: 
    setargs                   3 0
    push           mm_parse.readif.pelse u64 
    push           mm_parse.readif.plist u64 
    push           101        i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readif.p u64 
    push           mm_parse.readif.pos1 i64 
    push           mm_parse.readif.p u64 
    push           4          
    popptroff                 u32 1 0
    push           mm_parse.readif.p u64 
    setret                    u64 
    jump           #18786     
#18778: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           100        i64 
    casejumpeq     #18787     i64 0
    push           101        i64 
    casejumpeq     #18788     i64 0
    push           102        i64 
    casejumpeq     #18788     i64 0
    popstack                  i64 
    jump           #18789     
#18787: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           0          i64 
    callfn         &mm_parse.readsunit u64 
    pop            mm_parse.readif.pelse u64 
    setargs                   4 0
    push           0          i64 
    push           0          i64 
    push           mm_parse.readif.kwd i64 
    push           104        i64 
    callproc       &mm_parse.checkend 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #18790     
#18788: 
    push           mm_parse.readif.kwd i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    setargs                   1 0
    setargs                   0 0
    callfn         &mm_parse.readswitchcase u64 
    callfn         &mm_parse.makeblock u64 
    pop            mm_parse.readif.pelse u64 
    jump           #18790     
#18789: 
    push           0          u64 
    pop            mm_parse.readif.pelse u64 
    setargs                   4 0
    push           0          i64 
    push           0          i64 
    push           mm_parse.readif.kwd i64 
    push           104        i64 
    callproc       &mm_parse.checkend 
    setargs                   0 0
    callproc       &mm_lex.lex 
#18790: 
    setargs                   4 0
    push           mm_parse.readif.pelse u64 
    push           mm_parse.readif.pthen u64 
    push           mm_parse.readif.pcond u64 
    push           100        i64 
    callfn         &mm_lib.createunit3 u64 
    pop            mm_parse.readif.p u64 
    push           mm_parse.readif.pos1 i64 
    push           mm_parse.readif.p u64 
    push           4          
    popptroff                 u32 1 0
    push           mm_parse.readif.p u64 
    setret                    u64 
    jump           #18786     
#18786: 
    retfn                     u64 
End


Proc mm_parse.readgoto: u64
    param          mm_parse.readgoto.gototag i64 
    local          mm_parse.readgoto.d u64 
    local          mm_parse.readgoto.p u64 
    procentry                 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #18792     i64 
    setargs                   1 0
    push           111        i64 
    callproc       &mm_parse.lexchecksymbol 
#18792: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           79         i64 
    jumpne         #18793     i64 
    push           &mm_decls.nextlx 
    pushptr                   u8 
    push           18         i64 
    jumpeq         #18793     i64 
    push           &mm_decls.nextlx 
    pushptr                   u8 
    push           14         i64 
    jumpeq         #18793     i64 
    push           &mm_decls.nextlx 
    pushptr                   u8 
    push           2          i64 
    jumpeq         #18793     i64 
    setargs                   1 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    callfn         &mm_lib.createname u64 
    pop            mm_parse.readgoto.p u64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #18794     
#18793: 
    setargs                   1 0
    push           "GOTO LABEL EXPR" u64 
    callproc       &mm_support.serror 
#18794: 
    setargs                   1 0
    setargs                   2 0
    push           mm_parse.readgoto.p u64 
    push           mm_parse.readgoto.gototag i64 
    callfn         &mm_lib.createunit1 u64 
    callfn         &mm_parse.readcondsuffix u64 
    setret                    u64 
    jump           #18795     
#18795: 
    retfn                     u64 
End


Proc mm_parse.readunless: u64
    local          mm_parse.readunless.pos i64 
    local          mm_parse.readunless.pcond u64 
    local          mm_parse.readunless.pthen u64 
    local          mm_parse.readunless.pelse u64 
    local          mm_parse.readunless.p u64 
    local          mm_parse.readunless.q u64 
    procentry                 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    pop            mm_parse.readunless.pos i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    setargs                   1 0
    push           0          i64 
    callfn         &mm_parse.readsunit u64 
    callfn         &mm_parse.fixcond u64 
    pop            mm_parse.readunless.pcond u64 
    setargs                   1 0
    push           98         i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           0          i64 
    callfn         &mm_parse.readsunit u64 
    pop            mm_parse.readunless.pthen u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           100        i64 
    jumpne         #18797     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           0          i64 
    callfn         &mm_parse.readsunit u64 
    pop            mm_parse.readunless.pelse u64 
    jump           #18798     
#18797: 
    push           0          u64 
    pop            mm_parse.readunless.pelse u64 
#18798: 
    setargs                   4 0
    push           0          i64 
    push           0          i64 
    push           105        i64 
    push           104        i64 
    callproc       &mm_parse.checkend 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   4 0
    push           mm_parse.readunless.pelse u64 
    push           mm_parse.readunless.pthen u64 
    setargs                   2 0
    push           mm_parse.readunless.pcond u64 
    push           17         i64 
    callfn         &mm_lib.createunit1 u64 
    store          mm_parse.readunless.q u64 
    push           100        i64 
    callfn         &mm_lib.createunit3 u64 
    pop            mm_parse.readunless.p u64 
    push           132        i64 
    push           mm_parse.readunless.q u64 
    push           60         
    popptroff                 u8 1 0
    push           mm_parse.readunless.pos i64 
    push           mm_parse.readunless.p u64 
    push           4          
    popptroff                 u32 1 0
    push           mm_parse.readunless.p u64 
    setret                    u64 
    jump           #18799     
#18799: 
    retfn                     u64 
End


Proc mm_parse.readswitchcase: u64
    local          mm_parse.readswitchcase.pos1 i64 
    local          mm_parse.readswitchcase.kwd i64 
    local          mm_parse.readswitchcase.opc i64 
    local          mm_parse.readswitchcase.pos2 i64 
    local          mm_parse.readswitchcase.rangeused i64 
    local          mm_parse.readswitchcase.nwhen i64 
    local          mm_parse.readswitchcase.pexpr u64 
    local          mm_parse.readswitchcase.pwhenlist u64 
    local          mm_parse.readswitchcase.pwhenlistx u64 
    local          mm_parse.readswitchcase.pwhen u64 
    local          mm_parse.readswitchcase.pwhenx u64 
    local          mm_parse.readswitchcase.pelse u64 
    local          mm_parse.readswitchcase.p u64 
    local          mm_parse.readswitchcase.pthen u64 
    local          mm_parse.readswitchcase.pwhenthen u64 
    local          mm_parse.readswitchcase.q u64 
    procentry                 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    pop            mm_parse.readswitchcase.pos1 i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    pop            mm_parse.readswitchcase.kwd i64 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    pop            mm_parse.readswitchcase.opc i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callproc       &mm_parse.skipsemi 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           109        i64 
    jumpne         #18801     i64 
    push           mm_parse.readswitchcase.kwd i64 
    push           122        i64 
    jumpne         #18802     i64 
    setargs                   1 0
    push           "switch expr missing" u64 
    callproc       &mm_support.serror 
#18802: 
    push           0          u64 
    pop            mm_parse.readswitchcase.pexpr u64 
    jump           #18803     
#18801: 
    setargs                   1 0
    push           0          i64 
    callfn         &mm_parse.readsunit u64 
    pop            mm_parse.readswitchcase.pexpr u64 
#18803: 
    push           0          u64 
    store          mm_parse.readswitchcase.pwhenlistx u64 
    pop            mm_parse.readswitchcase.pwhenlist u64 
    push           0          i64 
    pop            mm_parse.readswitchcase.rangeused i64 
    push           0          i64 
    pop            mm_parse.readswitchcase.nwhen i64 
    setargs                   0 0
    callproc       &mm_parse.skipsemi 
    jump           #18804     
#18805: 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    pop            mm_parse.readswitchcase.pos2 i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           0          u64 
    store          mm_parse.readswitchcase.pwhenx u64 
    pop            mm_parse.readswitchcase.pwhen u64 
#18806: 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readswitchcase.p u64 
    push           &mm_parse.readswitchcase.nwhen 
    incr                      i64 1
    push           mm_parse.readswitchcase.pos2 i64 
    push           mm_parse.readswitchcase.p u64 
    push           4          
    popptroff                 u32 1 0
    push           mm_parse.readswitchcase.p u64 
    pushptr                   u8 
    push           20         i64 
    jumpne         #18807     i64 
    push           1          i64 
    pop            mm_parse.readswitchcase.rangeused i64 
#18807: 
    setargs                   3 0
    push           mm_parse.readswitchcase.p u64 
    push           &mm_parse.readswitchcase.pwhenx 
    push           &mm_parse.readswitchcase.pwhen 
    callproc       &mm_lib.addlistunit 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpeq         #18808     i64 
    jump           #18809     
#18808: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #18806     
#18809: 
    setargs                   1 0
    push           98         i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           0          i64 
    callfn         &mm_parse.readsunit u64 
    pop            mm_parse.readswitchcase.pthen u64 
    setargs                   3 0
    push           mm_parse.readswitchcase.pthen u64 
    push           mm_parse.readswitchcase.pwhen u64 
    push           91         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readswitchcase.pwhenthen u64 
    push           mm_parse.readswitchcase.pos2 i64 
    push           mm_parse.readswitchcase.pwhenthen u64 
    push           4          
    popptroff                 u32 1 0
    setargs                   3 0
    push           mm_parse.readswitchcase.pwhenthen u64 
    push           &mm_parse.readswitchcase.pwhenlistx 
    push           &mm_parse.readswitchcase.pwhenlist 
    callproc       &mm_lib.addlistunit 
#18804: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           109        i64 
    jumpeq         #18805     i64 
#18810: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           100        i64 
    casejumpeq     #18811     i64 0
    push           99         i64 
    casejumpeq     #18812     i64 0
    push           101        i64 
    casejumpeq     #18813     i64 0
    push           102        i64 
    casejumpeq     #18813     i64 0
    popstack                  i64 
    jump           #18814     
#18811: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           0          i64 
    callfn         &mm_parse.readsunit u64 
    pop            mm_parse.readswitchcase.pelse u64 
    setargs                   4 0
    push           0          i64 
    push           0          i64 
    push           mm_parse.readswitchcase.kwd i64 
    push           104        i64 
    callproc       &mm_parse.checkend 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #18815     
#18812: 
    push           mm_parse.readswitchcase.kwd i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    setargs                   1 0
    setargs                   0 0
    callfn         &mm_parse.readif u64 
    callfn         &mm_parse.makeblock u64 
    pop            mm_parse.readswitchcase.pelse u64 
    jump           #18815     
#18813: 
    push           mm_parse.readswitchcase.kwd i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    setargs                   1 0
    setargs                   0 0
    callfn         &mm_parse.readswitchcase u64 
    callfn         &mm_parse.makeblock u64 
    pop            mm_parse.readswitchcase.pelse u64 
    jump           #18815     
#18814: 
    push           0          u64 
    pop            mm_parse.readswitchcase.pelse u64 
    setargs                   4 0
    push           0          i64 
    push           0          i64 
    push           mm_parse.readswitchcase.kwd i64 
    push           104        i64 
    callproc       &mm_parse.checkend 
    setargs                   0 0
    callproc       &mm_lex.lex 
#18815: 
    setargs                   4 0
    push           mm_parse.readswitchcase.pelse u64 
    push           mm_parse.readswitchcase.pwhenlist u64 
    push           mm_parse.readswitchcase.pexpr u64 
    push           mm_parse.readswitchcase.opc i64 
    callfn         &mm_lib.createunit3 u64 
    pop            mm_parse.readswitchcase.p u64 
    push           mm_parse.readswitchcase.pos1 i64 
    push           mm_parse.readswitchcase.p u64 
    push           4          
    popptroff                 u32 1 0
    push           mm_parse.readswitchcase.p u64 
    setret                    u64 
    jump           #18816     
#18816: 
    retfn                     u64 
End


Proc mm_parse.readstop: u64
    local          mm_parse.readstop.p u64 
    local          mm_parse.readstop.i i64 
    procentry                 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_tables.exprstarter 
    push           &mm_decls.lx 
    pushptr                   u8 
    pushptroff                u8 1 -1
    jumpfalse      #18818     i64 
    setargs                   2 0
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    push           134        i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readstop.p u64 
    jump           #18819     
#18818: 
    setargs                   1 0
    push           134        i64 
    callfn         &mm_lib.createunit0 u64 
    pop            mm_parse.readstop.p u64 
#18819: 
    setargs                   1 0
    push           mm_parse.readstop.p u64 
    callfn         &mm_parse.readcondsuffix u64 
    setret                    u64 
    jump           #18820     
#18820: 
    retfn                     u64 
End


Proc mm_parse.readreturn: u64
    local          mm_parse.readreturn.p u64 
    local          mm_parse.readreturn.q u64 
    local          mm_parse.readreturn.r u64 
    procentry                 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_tables.exprstarter 
    push           &mm_decls.lx 
    pushptr                   u8 
    pushptroff                u8 1 -1
    jumpfalse      #18822     i64 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readreturn.q u64 
    setargs                   2 0
    push           mm_parse.readreturn.q u64 
    push           97         i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readreturn.p u64 
    push           1          i64 
    push           mm_parse.readreturn.p u64 
    push           40         
    popptroff                 u32 1 0
    jump           #18823     
#18822: 
    setargs                   1 0
    push           97         i64 
    callfn         &mm_lib.createunit0 u64 
    pop            mm_parse.readreturn.p u64 
    push           0          i64 
    push           mm_parse.readreturn.p u64 
    push           40         
    popptroff                 u32 1 0
#18823: 
    setargs                   1 0
    push           mm_parse.readreturn.p u64 
    callfn         &mm_parse.readcondsuffix u64 
    setret                    u64 
    jump           #18824     
#18824: 
    retfn                     u64 
End


Proc mm_parse.readdo: u64
    local          mm_parse.readdo.p u64 
    local          mm_parse.readdo.pos i64 
    procentry                 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    pop            mm_parse.readdo.pos i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           0          i64 
    callfn         &mm_parse.readsunit u64 
    pop            mm_parse.readdo.p u64 
    setargs                   4 0
    push           0          i64 
    push           0          i64 
    push           113        i64 
    push           104        i64 
    callproc       &mm_parse.checkend 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    push           mm_parse.readdo.p u64 
    push           114        i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readdo.p u64 
    push           mm_parse.readdo.pos i64 
    push           mm_parse.readdo.p u64 
    push           4          
    popptroff                 u32 1 0
    push           mm_parse.readdo.p u64 
    setret                    u64 
    jump           #18826     
#18826: 
    retfn                     u64 
End


Proc mm_parse.readto: u64
    local          mm_parse.readto.pos i64 
    local          mm_parse.readto.id i64 
    local          mm_parse.readto.p u64 
    local          mm_parse.readto.pcount u64 
    local          mm_parse.readto.pbody u64 
    procentry                 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    pop            mm_parse.readto.pos i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readto.pcount u64 
    setargs                   1 0
    push           113        i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           0          i64 
    callfn         &mm_parse.readsunit u64 
    pop            mm_parse.readto.pbody u64 
    setargs                   4 0
    push           0          i64 
    push           113        i64 
    push           111        i64 
    push           104        i64 
    callproc       &mm_parse.checkend 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           12         i64 
    pop            mm_parse.readto.id i64 
    push           mm_decls.currproc u64 
    push           78         
    pushptroff                u8 1 0
    push           5          i64 
    jumpeq         #18828     i64 
    push           11         i64 
    pop            mm_parse.readto.id i64 
#18828: 
    setargs                   4 0
    setargs                   1 0
    setargs                   2 0
    push           mm_parse.readto.id i64 
    push           mm_decls.currproc u64 
    callfn         &mm_lib.getavname u64 
    callfn         &mm_lib.createname u64 
    push           mm_parse.readto.pbody u64 
    push           mm_parse.readto.pcount u64 
    push           99         i64 
    callfn         &mm_lib.createunit3 u64 
    pop            mm_parse.readto.p u64 
    push           mm_parse.readto.pos i64 
    push           mm_parse.readto.p u64 
    push           4          
    popptroff                 u32 1 0
    push           mm_parse.readto.p u64 
    setret                    u64 
    jump           #18829     
#18829: 
    retfn                     u64 
End


Proc mm_parse.readwhile: u64
    local          mm_parse.readwhile.pos i64 
    local          mm_parse.readwhile.pcond u64 
    local          mm_parse.readwhile.pbody u64 
    local          mm_parse.readwhile.pincr u64 
    local          mm_parse.readwhile.p u64 
    procentry                 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    pop            mm_parse.readwhile.pos i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    setargs                   1 0
    push           1          i64 
    callfn         &mm_parse.readsunit u64 
    callfn         &mm_parse.fixcond u64 
    pop            mm_parse.readwhile.pcond u64 
    push           0          u64 
    pop            mm_parse.readwhile.pincr u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpne         #18831     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           1          i64 
    callfn         &mm_parse.readsunit u64 
    pop            mm_parse.readwhile.pincr u64 
#18831: 
    setargs                   1 0
    push           113        i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           0          i64 
    callfn         &mm_parse.readsunit u64 
    pop            mm_parse.readwhile.pbody u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           120        i64 
    jumpne         #18832     i64 
    push           mm_parse.readwhile.pincr u64 
    jumpfalse      #18833     u64 
    setargs                   1 0
    push           "Double incr" u64 
    callproc       &mm_support.serror 
#18833: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           0          i64 
    callfn         &mm_parse.readsunit u64 
    pop            mm_parse.readwhile.pincr u64 
#18832: 
    setargs                   4 0
    push           0          i64 
    push           113        i64 
    push           114        i64 
    push           104        i64 
    callproc       &mm_parse.checkend 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   4 0
    push           mm_parse.readwhile.pincr u64 
    push           mm_parse.readwhile.pbody u64 
    push           mm_parse.readwhile.pcond u64 
    push           106        i64 
    callfn         &mm_lib.createunit3 u64 
    pop            mm_parse.readwhile.p u64 
    push           mm_parse.readwhile.pos i64 
    push           mm_parse.readwhile.p u64 
    push           4          
    popptroff                 u32 1 0
    push           mm_parse.readwhile.p u64 
    setret                    u64 
    jump           #18834     
#18834: 
    retfn                     u64 
End


Proc mm_parse.readrepeat: u64
    local          mm_parse.readrepeat.pos i64 
    local          mm_parse.readrepeat.pbody u64 
    local          mm_parse.readrepeat.pcond u64 
    local          mm_parse.readrepeat.p u64 
    procentry                 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    pop            mm_parse.readrepeat.pos i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           0          i64 
    callfn         &mm_parse.readsunit u64 
    pop            mm_parse.readrepeat.pbody u64 
    setargs                   1 0
    push           116        i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    callfn         &mm_parse.fixcond u64 
    pop            mm_parse.readrepeat.pcond u64 
    setargs                   3 0
    push           mm_parse.readrepeat.pcond u64 
    push           mm_parse.readrepeat.pbody u64 
    push           107        i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readrepeat.p u64 
    push           mm_parse.readrepeat.pos i64 
    push           mm_parse.readrepeat.p u64 
    push           4          
    popptroff                 u32 1 0
    push           mm_parse.readrepeat.p u64 
    setret                    u64 
    jump           #18836     
#18836: 
    retfn                     u64 
End


Proc mm_parse.readloopcontrol: u64
    local          mm_parse.readloopcontrol.opc i64 
    local          mm_parse.readloopcontrol.p u64 
    procentry                 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    pop            mm_parse.readloopcontrol.opc i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           79         i64 
    jumpne         #18838     i64 
    setargs                   2 0
    push           "all"      u64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    pushptr                   u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #18838     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    setargs                   2 0
    push           4          i64 
    push           0          u64 
    callfn         &mm_lib.createconstunit u64 
    push           mm_parse.readloopcontrol.opc i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readloopcontrol.p u64 
    jump           #18839     
#18838: 
    push           &mm_tables.exprstarter 
    push           &mm_decls.lx 
    pushptr                   u8 
    pushptroff                u8 1 -1
    jumpfalse      #18840     i64 
    setargs                   2 0
    setargs                   1 0
    push           1          i64 
    callfn         &mm_parse.readconstexpr u64 
    push           mm_parse.readloopcontrol.opc i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readloopcontrol.p u64 
    jump           #18839     
#18840: 
    setargs                   2 0
    setargs                   2 0
    push           4          i64 
    push           1          u64 
    callfn         &mm_lib.createconstunit u64 
    push           mm_parse.readloopcontrol.opc i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readloopcontrol.p u64 
#18839: 
    setargs                   1 0
    push           mm_parse.readloopcontrol.p u64 
    callfn         &mm_parse.readcondsuffix u64 
    setret                    u64 
    jump           #18841     
#18841: 
    retfn                     u64 
End


Proc mm_parse.readprint: u64
    local          mm_parse.readprint.oldinreadprint i64 
    local          mm_parse.readprint.opc i64 
    local          mm_parse.readprint.isfprint i64 
    local          mm_parse.readprint.fshowname i64 
    local          mm_parse.readprint.length i64 
    local          mm_parse.readprint.pformat u64 
    local          mm_parse.readprint.pdev u64 
    local          mm_parse.readprint.printlist u64 
    local          mm_parse.readprint.printlistx u64 
    local          mm_parse.readprint.p u64 
    local          mm_parse.readprint.q u64 
    local          mm_parse.readprint.expr u64 
    local          mm_parse.readprint.s u64 
    procentry                 
    push           mm_parse.inreadprint i64 
    pop            mm_parse.readprint.oldinreadprint i64 
    push           1          i64 
    pop            mm_parse.inreadprint i64 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    pop            mm_parse.readprint.opc i64 
    push           mm_parse.readprint.opc i64 
    push           124        i64 
    casejumpeq     #18843     i64 0
    push           125        i64 
    casejumpeq     #18843     i64 0
    push           126        i64 
    casejumpeq     #18843     i64 0
    push           127        i64 
    casejumpeq     #18843     i64 0
    popstack                  i64 
    jump           #18844     
#18843: 
    push           1          i64 
    pop            mm_parse.readprint.isfprint i64 
    jump           #18845     
#18844: 
    push           0          i64 
    pop            mm_parse.readprint.isfprint i64 
#18845: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           0          u64 
    store          mm_parse.readprint.printlistx u64 
    pop            mm_parse.readprint.printlist u64 
    push           0          u64 
    store          mm_parse.readprint.pdev u64 
    pop            mm_parse.readprint.pformat u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           21         i64 
    jumpne         #18846     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readprint.pdev u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpne         #18847     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #18848     
#18847: 
    jump           #18849     
#18848: 
#18846: 
    push           mm_parse.readprint.isfprint i64 
    jumpfalse      #18850     i64 
    push           &mm_tables.exprstarter 
    push           &mm_decls.lx 
    pushptr                   u8 
    pushptroff                u8 1 -1
    jumptrue       #18851     i64 
    push           mm_parse.readprint.opc i64 
    push           127        i64 
    jumpne         #18851     i64 
    jump           #18849     
#18851: 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readprint.pformat u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpne         #18852     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #18853     
#18852: 
    jump           #18849     
#18853: 
#18850: 
    push           &mm_tables.exprstarter 
    push           &mm_decls.lx 
    pushptr                   u8 
    pushptroff                u8 1 -1
    jumptrue       #18854     i64 
    jump           #18849     
#18854: 
#18855: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    casejumpeq     #18856     i64 0
    push           168        i64 
    casejumpeq     #18857     i64 0
    popstack                  i64 
    jump           #18858     
#18856: 
    setargs                   3 0
    setargs                   1 0
    push           94         i64 
    callfn         &mm_lib.createunit0 u64 
    push           &mm_parse.readprint.printlistx 
    push           &mm_parse.readprint.printlist 
    callproc       &mm_lib.addlistunit 
    jump           #18859     
#18857: 
    setargs                   3 0
    setargs                   1 0
    push           95         i64 
    callfn         &mm_lib.createunit0 u64 
    push           &mm_parse.readprint.printlistx 
    push           &mm_parse.readprint.printlist 
    callproc       &mm_lib.addlistunit 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #18859     
#18858: 
    push           0          i64 
    pop            mm_parse.readprint.fshowname i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           46         i64 
    jumpne         #18860     i64 
    push           1          i64 
    pop            mm_parse.readprint.fshowname i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
#18860: 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readprint.p u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           7          i64 
    jumpne         #18861     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   3 0
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    push           mm_parse.readprint.p u64 
    push           93         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readprint.p u64 
#18861: 
    push           mm_parse.readprint.fshowname i64 
    jumpfalse      #18862     i64 
    setargs                   1 0
    push           mm_parse.readprint.p u64 
    callfn         &mm_lib.strexpr u64 
    pop            mm_parse.readprint.expr u64 
    setargs                   3 0
    push           -1         i64 
    push           "="        u64 
    push           mm_parse.readprint.expr u64 
    callproc       &mlibp.strbuffer_add 
    push           mm_parse.readprint.expr u64 
    pushptr                   u64 
    pop            mm_parse.readprint.s u64 
    setargs                   2 0
    push           mm_parse.readprint.expr u64 
    push           8          
    pushptroff                i32 1 0
    push           mm_parse.readprint.expr u64 
    pushptr                   u64 
    callproc       &mlibp.iconvucn 
    setargs                   3 0
    setargs                   2 0
    push           mm_parse.readprint.expr u64 
    push           8          
    pushptroff                i32 1 0
    push           mm_parse.readprint.s u64 
    callfn         &mm_lib.createstringconstunit u64 
    store          mm_parse.readprint.q u64 
    push           &mm_parse.readprint.printlistx 
    push           &mm_parse.readprint.printlist 
    callproc       &mm_lib.addlistunit 
#18862: 
    setargs                   3 0
    push           mm_parse.readprint.p u64 
    push           &mm_parse.readprint.printlistx 
    push           &mm_parse.readprint.printlist 
    callproc       &mm_lib.addlistunit 
#18859: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpeq         #18863     i64 
    jump           #18864     
#18863: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #18855     
#18864: 
!finish::
#18849: 
    push           mm_parse.readprint.oldinreadprint i64 
    pop            mm_parse.inreadprint i64 
    push           mm_parse.readprint.opc i64 
    push           122        i64 
    jumpne         #18865     i64 
    push           mm_parse.readprint.printlist u64 
    push           0          u64 
    jumpne         #18865     u64 
    setargs                   1 0
    push           "No print items" u64 
    callproc       &mm_support.serror 
#18865: 
    push           mm_parse.readprint.opc i64 
    push           124        i64 
    jumpne         #18866     i64 
    push           mm_parse.readprint.printlist u64 
    push           0          u64 
    jumpne         #18866     u64 
    push           mm_parse.readprint.pformat u64 
    push           0          u64 
    jumpne         #18866     u64 
    setargs                   1 0
    push           "No print items" u64 
    callproc       &mm_support.serror 
#18866: 
    push           mm_parse.readprint.opc i64 
    push           126        i64 
    jumpne         #18867     i64 
    push           mm_parse.readprint.printlist u64 
    push           0          u64 
    jumpne         #18867     u64 
    push           mm_parse.readprint.pformat u64 
    push           0          u64 
    jumpne         #18867     u64 
    setargs                   1 0
    push           "No cprint items" u64 
    callproc       &mm_support.serror 
#18867: 
    startmult                 
    push           mm_parse.readprint.isfprint i64 
    jumpfalse      #18868     i64 
    push           mm_parse.readprint.pformat u64 
    push           0          u64 
    jumpne         #18869     u64 
    push           mm_parse.readprint.opc i64 
    push           127        i64 
    jumpeq         #18869     i64 
    setargs                   1 0
    push           "No fmt str" u64 
    callproc       &mm_support.serror 
#18869: 
    setargs                   4 0
    push           mm_parse.readprint.printlist u64 
    push           mm_parse.readprint.pformat u64 
    push           mm_parse.readprint.pdev u64 
    push           mm_parse.readprint.opc i64 
    callfn         &mm_lib.createunit3 u64 
    resetmult                 
    jump           #18870     
#18868: 
    setargs                   3 0
    push           mm_parse.readprint.printlist u64 
    push           mm_parse.readprint.pdev u64 
    push           mm_parse.readprint.opc i64 
    callfn         &mm_lib.createunit2 u64 
    endmult                   
#18870: 
    setret                    u64 
    jump           #18871     
#18871: 
    retfn                     u64 
End


Proc mm_parse.readread: u64
    local          mm_parse.readread.oldinreadprint i64 
    local          mm_parse.readread.opc i64 
    local          mm_parse.readread.pformat u64 
    local          mm_parse.readread.pdev u64 
    local          mm_parse.readread.readlist u64 
    local          mm_parse.readread.readlistx u64 
    local          mm_parse.readread.p u64 
    local          mm_parse.readread.pread u64 
    procentry                 
    push           mm_parse.inreadprint i64 
    pop            mm_parse.readread.oldinreadprint i64 
    push           1          i64 
    pop            mm_parse.inreadprint i64 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    pop            mm_parse.readread.opc i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           0          u64 
    store          mm_parse.readread.readlistx u64 
    pop            mm_parse.readread.readlist u64 
    push           0          u64 
    store          mm_parse.readread.pdev u64 
    pop            mm_parse.readread.pformat u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           21         i64 
    jumpne         #18873     i64 
    push           mm_parse.readread.opc i64 
    push           130        i64 
    jumpne         #18874     i64 
    setargs                   1 0
    push           "@ on read" u64 
    callproc       &mm_support.serror 
#18874: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readread.pdev u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpne         #18875     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
#18875: 
#18873: 
    push           mm_parse.readread.opc i64 
    push           131        i64 
    jumpne         #18876     i64 
    setargs                   3 0
    setargs                   2 0
    push           mm_parse.readread.pdev u64 
    push           131        i64 
    callfn         &mm_lib.createunit1 u64 
    push           &mm_parse.readread.readlistx 
    push           &mm_parse.readread.readlist 
    callproc       &mm_lib.addlistunit 
#18876: 
    push           &mm_tables.exprstarter 
    push           &mm_decls.lx 
    pushptr                   u8 
    pushptroff                u8 1 -1
    jumptrue       #18877     i64 
    jump           #18878     
#18877: 
#18879: 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readread.p u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           7          i64 
    jumpne         #18880     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readread.pformat u64 
    jump           #18881     
#18880: 
    push           0          u64 
    pop            mm_parse.readread.pformat u64 
#18881: 
    setargs                   2 0
    push           mm_parse.readread.pformat u64 
    push           130        i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readread.pread u64 
    setargs                   3 0
    push           mm_parse.readread.pread u64 
    push           mm_parse.readread.p u64 
    push           29         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readread.p u64 
    setargs                   3 0
    push           mm_parse.readread.p u64 
    push           &mm_parse.readread.readlistx 
    push           &mm_parse.readread.readlist 
    callproc       &mm_lib.addlistunit 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpeq         #18882     i64 
    jump           #18883     
#18882: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #18879     
#18883: 
!finish::
#18878: 
    push           mm_parse.readread.oldinreadprint i64 
    pop            mm_parse.inreadprint i64 
    push           mm_parse.readread.opc i64 
    push           130        i64 
    jumpne         #18884     i64 
    push           mm_parse.readread.readlist u64 
    push           0          u64 
    jumpne         #18884     u64 
    setargs                   1 0
    push           "No read items" u64 
    callproc       &mm_support.serror 
#18884: 
    setargs                   1 0
    push           mm_parse.readread.readlist u64 
    callfn         &mm_parse.makestmtblock u64 
    setret                    u64 
    jump           #18885     
#18885: 
    retfn                     u64 
End


Proc mm_parse.readtry: u64
    local          mm_parse.readtry.ptry u64 
    local          mm_parse.readtry.pexceptlist u64 
    local          mm_parse.readtry.pexceptlistx u64 
    local          mm_parse.readtry.px u64 
    local          mm_parse.readtry.q u64 
    local          mm_parse.readtry.exlist u64 
    local          mm_parse.readtry.exlistx u64 
    procentry                 
    push           &mm_parse.try_level 
    incr                      i64 1
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           0          i64 
    callfn         &mm_parse.readsunit u64 
    pop            mm_parse.readtry.ptry u64 
    push           0          u64 
    store          mm_parse.readtry.pexceptlistx u64 
    pop            mm_parse.readtry.pexceptlist u64 
    jump           #18887     
#18888: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           0          u64 
    store          mm_parse.readtry.exlistx u64 
    pop            mm_parse.readtry.exlist u64 
#18889: 
    setargs                   3 0
    setargs                   1 0
    push           1          i64 
    callfn         &mm_parse.readconstexpr u64 
    push           &mm_parse.readtry.exlistx 
    push           &mm_parse.readtry.exlist 
    callproc       &mm_lib.addlistunit 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpeq         #18890     i64 
    jump           #18891     
#18890: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #18889     
#18891: 
    setargs                   1 0
    push           98         i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           0          i64 
    callfn         &mm_parse.readsunit u64 
    pop            mm_parse.readtry.px u64 
    setargs                   3 0
    setargs                   3 0
    push           mm_parse.readtry.px u64 
    push           mm_parse.readtry.exlist u64 
    push           136        i64 
    callfn         &mm_lib.createunit2 u64 
    push           &mm_parse.readtry.pexceptlistx 
    push           &mm_parse.readtry.pexceptlist 
    callproc       &mm_lib.addlistunit 
#18887: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           161        i64 
    jumpeq         #18888     i64 
#18892: 
    setargs                   4 0
    push           0          i64 
    push           0          i64 
    push           160        i64 
    push           104        i64 
    callproc       &mm_parse.checkend 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_parse.try_level 
    decr                      i64 1
    setargs                   3 0
    push           mm_parse.readtry.pexceptlist u64 
    push           mm_parse.readtry.ptry u64 
    push           135        i64 
    callfn         &mm_lib.createunit2 u64 
    setret                    u64 
    jump           #18893     
#18893: 
    retfn                     u64 
End


Proc mm_parse.readraise: u64
    local          mm_parse.readraise.p u64 
    procentry                 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readraise.p u64 
    setargs                   2 0
    push           mm_parse.readraise.p u64 
    push           138        i64 
    callfn         &mm_lib.createunit1 u64 
    setret                    u64 
    jump           #18895     
#18895: 
    retfn                     u64 
End


Proc mm_parse.readfor: u64
    local          mm_parse.readfor.pos i64 
    local          mm_parse.readfor.opc i64 
    local          mm_parse.readfor.kwd i64 
    local          mm_parse.readfor.pindex u64 
    local          mm_parse.readfor.plocal u64 
    local          mm_parse.readfor.pfrom u64 
    local          mm_parse.readfor.pto u64 
    local          mm_parse.readfor.pstep u64 
    local          mm_parse.readfor.ptoinit u64 
    local          mm_parse.readfor.plist u64 
    local          mm_parse.readfor.passign u64 
    local          mm_parse.readfor.pcond u64 
    local          mm_parse.readfor.pbody u64 
    local          mm_parse.readfor.pelse u64 
    local          mm_parse.readfor.p u64 
    local          mm_parse.readfor.i i64 
    procentry                 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    pop            mm_parse.readfor.pos i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           0          u64 
    pop            mm_parse.readfor.plocal u64 
    push           0          u64 
    pop            mm_parse.readfor.ptoinit u64 
    setargs                   0 0
    callfn         &mm_parse.readname u64 
    pop            mm_parse.readfor.pindex u64 
    push           mm_parse.nforloops i64 
    push           10         i64 
    jumplt         #18897     i64 
    setargs                   1 0
    push           "Too many for-loops" u64 
    callproc       &mm_support.serror 
#18897: 
#18898: 
    push           1          i64 
    pop            mm_parse.readfor.i i64 
    push           mm_parse.nforloops i64 
    push           1          i64 
    jumplt         #18899     i64 
#18900: 
    push           &mm_parse.forindexvars 
    push           mm_parse.readfor.i i64 
    pushptroff                u64 8 -8
    push           mm_parse.readfor.pindex u64 
    push           16         
    pushptroff                u64 1 0
    jumpne         #18901     u64 
    setargs                   1 0
    push           "Re-using nested loop index" u64 
    callproc       &mm_support.serror 
#18901: 
#18902: 
    forup          #18900     i64 1
    opnd           mm_parse.readfor.i 
    opnd           mm_parse.nforloops 
#18899: 
    push           mm_parse.readfor.pindex u64 
    push           16         
    pushptroff                u64 1 0
    push           &mm_parse.forindexvars 
    push           &mm_parse.nforloops 
    incrload                  i64 1
    popptroff                 u64 8 -8
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpne         #18903     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.readname u64 
    pop            mm_parse.readfor.plocal u64 
#18903: 
    push           102        i64 
    pop            mm_parse.readfor.opc i64 
    push           0          u64 
    pop            mm_parse.readfor.pstep u64 
    push           0          u64 
    pop            mm_parse.readfor.pcond u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           50         i64 
    setjumpeq      #18904     i64 
    push           52         i64 
    setjumpne      #18905     i64 
#18904: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           41         i64 
    jumpne         #18906     i64 
    push           103        i64 
    pop            mm_parse.readfor.opc i64 
#18906: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readfor.plist u64 
    push           mm_parse.readfor.plist u64 
    pushptr                   u8 
    push           37         i64 
    jumpne         #18907     i64 
    push           mm_parse.readfor.plist u64 
    push           60         
    pushptroff                u8 1 0
    push           204        i64 
    jumpne         #18907     i64 
    setargs                   1 0
    push           mm_parse.readfor.plist u64 
    push           16         
    pushptroff                u64 1 0
    callfn         &mm_lib.getrangelwbunit u64 
    pop            mm_parse.readfor.pfrom u64 
    setargs                   1 0
    push           mm_parse.readfor.plist u64 
    push           16         
    pushptroff                u64 1 0
    callfn         &mm_lib.getrangeupbunit u64 
    pop            mm_parse.readfor.pto u64 
    jump           #18908     
#18907: 
    push           mm_parse.readfor.plist u64 
    pushptr                   u8 
    push           20         i64 
    jumpne         #18909     i64 
    push           mm_parse.readfor.plist u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_parse.readfor.pfrom u64 
    push           mm_parse.readfor.plist u64 
    push           24         
    pushptroff                u64 1 0
    pop            mm_parse.readfor.pto u64 
    jump           #18908     
#18909: 
    startmult                 
    push           mm_parse.readfor.opc i64 
    push           102        i64 
    jumpne         #18910     i64 
    push           104        i64 
    resetmult                 
    jump           #18911     
#18910: 
    push           105        i64 
    endmult                   
#18911: 
    pop            mm_parse.readfor.opc i64 
    setargs                   1 0
    setargs                   2 0
    push           0          i64 
    push           mm_parse.readfor.plist u64 
    callfn         &mm_lib.duplunit u64 
    callfn         &mm_lib.getrangelwbunit u64 
    pop            mm_parse.readfor.pfrom u64 
    setargs                   1 0
    setargs                   2 0
    push           0          i64 
    push           mm_parse.readfor.plist u64 
    callfn         &mm_lib.duplunit u64 
    callfn         &mm_lib.getrangeupbunit u64 
    pop            mm_parse.readfor.pto u64 
#18908: 
    jump           #18912     
#18905: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           9          i64 
    jumpne         #18913     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readfor.pfrom u64 
    jump           #18914     
#18913: 
    setargs                   2 0
    push           4          i64 
    push           1          u64 
    callfn         &mm_lib.createconstunit u64 
    pop            mm_parse.readfor.pfrom u64 
#18914: 
    setargs                   1 0
    push           111        i64 
    callproc       &mm_parse.checksymbol 
    startmult                 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #18915     i64 
    push           103        i64 
    resetmult                 
    jump           #18916     
#18915: 
    push           102        i64 
    endmult                   
#18916: 
    pop            mm_parse.readfor.opc i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readfor.pto u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           112        i64 
    jumpne         #18917     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           0          i64 
    callfn         &mm_parse.readconstexpr u64 
    pop            mm_parse.readfor.pstep u64 
    push           mm_parse.readfor.pstep u64 
    pushptr                   u8 
    push           1          i64 
    jumpne         #18918     i64 
    push           mm_parse.readfor.pstep u64 
    push           16         
    pushptroff                i64 1 0
    push           1          i64 
    jumpne         #18919     i64 
    push           0          u64 
    pop            mm_parse.readfor.pstep u64 
#18919: 
#18918: 
#18917: 
#18912: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           109        i64 
    jumpne         #18920     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    callfn         &mm_parse.fixcond u64 
    pop            mm_parse.readfor.pcond u64 
#18920: 
    setargs                   1 0
    push           113        i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           0          i64 
    callfn         &mm_parse.readsunit u64 
    pop            mm_parse.readfor.pbody u64 
    push           0          u64 
    pop            mm_parse.readfor.pelse u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           100        i64 
    jumpne         #18921     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           0          i64 
    callfn         &mm_parse.readsunit u64 
    pop            mm_parse.readfor.pelse u64 
#18921: 
    setargs                   4 0
    push           0          i64 
    push           113        i64 
    push           110        i64 
    push           104        i64 
    callproc       &mm_parse.checkend 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.readfor.pcond u64 
    push           0          u64 
    jumpeq         #18922     u64 
    setargs                   1 0
    setargs                   3 0
    push           mm_parse.readfor.pbody u64 
    push           mm_parse.readfor.pcond u64 
    push           100        i64 
    callfn         &mm_lib.createunit2 u64 
    callfn         &mm_parse.makeblock u64 
    pop            mm_parse.readfor.pbody u64 
#18922: 
    push           mm_parse.readfor.pelse u64 
    push           mm_parse.readfor.pbody u64 
    push           8          
    popptroff                 u64 1 0
    push           mm_parse.readfor.opc i64 
    push           102        i64 
    casejumpeq     #18923     i64 0
    push           103        i64 
    casejumpeq     #18923     i64 0
    popstack                  i64 
    jump           #18924     
#18923: 
    push           mm_parse.readfor.plocal u64 
    jumpfalse      #18925     u64 
    setargs                   1 0
    push           "for i,x?" u64 
    callproc       &mm_support.serror 
#18925: 
    push           73         i64 
    push           mm_parse.readfor.pindex u64 
    push           41         
    popptroff                 u8 1 0
    push           mm_parse.readfor.pto u64 
    pushptr                   u8 
    push           1          i64 
    setjumpeq      #18926     i64 
    push           3          i64 
    setjumpeqx     #18926     i64 
    setargs                   1 0
    setargs                   2 0
    push           12         i64 
    push           mm_decls.currproc u64 
    callfn         &mm_lib.getavname u64 
    callfn         &mm_lib.createname u64 
    pop            mm_parse.readfor.plocal u64 
    push           73         i64 
    push           mm_parse.readfor.plocal u64 
    push           41         
    popptroff                 u8 1 0
    setargs                   3 0
    push           mm_parse.readfor.pto u64 
    push           mm_parse.readfor.plocal u64 
    push           29         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readfor.ptoinit u64 
    push           mm_parse.readfor.ptoinit u64 
    push           mm_parse.readfor.pindex u64 
    push           8          
    popptroff                 u64 1 0
    push           mm_parse.readfor.plocal u64 
    pop            mm_parse.readfor.pto u64 
#18926: 
    push           mm_parse.readfor.pto u64 
    push           mm_parse.readfor.pfrom u64 
    push           8          
    popptroff                 u64 1 0
    push           mm_parse.readfor.pstep u64 
    push           mm_parse.readfor.pto u64 
    push           8          
    popptroff                 u64 1 0
    setargs                   4 0
    push           mm_parse.readfor.pbody u64 
    push           mm_parse.readfor.pfrom u64 
    push           mm_parse.readfor.pindex u64 
    push           mm_parse.readfor.opc i64 
    callfn         &mm_lib.createunit3 u64 
    pop            mm_parse.readfor.p u64 
    jump           #18927     
#18924: 
    push           mm_parse.readfor.plocal u64 
    push           0          u64 
    jumpne         #18928     u64 
    push           mm_parse.readfor.pindex u64 
    pop            mm_parse.readfor.plocal u64 
    setargs                   1 0
    setargs                   2 0
    push           12         i64 
    push           mm_decls.currproc u64 
    callfn         &mm_lib.getavname u64 
    callfn         &mm_lib.createname u64 
    pop            mm_parse.readfor.pindex u64 
#18928: 
    push           73         i64 
    push           mm_parse.readfor.pindex u64 
    push           41         
    popptroff                 u8 1 0
    push           76         i64 
    push           mm_parse.readfor.plocal u64 
    push           41         
    popptroff                 u8 1 0
    push           mm_parse.readfor.plocal u64 
    push           mm_parse.readfor.pindex u64 
    push           8          
    popptroff                 u64 1 0
    push           mm_parse.readfor.pfrom u64 
    push           mm_parse.readfor.plocal u64 
    push           8          
    popptroff                 u64 1 0
    push           mm_parse.readfor.pto u64 
    push           mm_parse.readfor.pfrom u64 
    push           8          
    popptroff                 u64 1 0
    setargs                   3 0
    setargs                   3 0
    setargs                   2 0
    push           0          i64 
    push           mm_parse.readfor.pindex u64 
    callfn         &mm_lib.duplunit u64 
    setargs                   2 0
    push           0          i64 
    push           mm_parse.readfor.plist u64 
    callfn         &mm_lib.duplunit u64 
    push           48         i64 
    callfn         &mm_lib.createunit2 u64 
    setargs                   2 0
    push           0          i64 
    push           mm_parse.readfor.plocal u64 
    callfn         &mm_lib.duplunit u64 
    push           29         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readfor.passign u64 
    push           mm_parse.readfor.passign u64 
    push           mm_parse.readfor.plist u64 
    push           8          
    popptroff                 u64 1 0
    setargs                   4 0
    push           mm_parse.readfor.pbody u64 
    push           mm_parse.readfor.plist u64 
    push           mm_parse.readfor.pindex u64 
    push           mm_parse.readfor.opc i64 
    callfn         &mm_lib.createunit3 u64 
    pop            mm_parse.readfor.p u64 
#18927: 
    push           mm_parse.readfor.pos i64 
    push           mm_parse.readfor.p u64 
    push           4          
    popptroff                 u32 1 0
    push           &mm_parse.nforloops 
    decr                      i64 1
    push           mm_parse.readfor.p u64 
    setret                    u64 
    jump           #18929     
#18929: 
    retfn                     u64 
End


Proc mm_parse.readname: u64
    local          mm_parse.readname.p u64 
    procentry                 
    setargs                   0 0
    callfn         &mm_parse.readterm2 u64 
    pop            mm_parse.readname.p u64 
    push           mm_parse.readname.p u64 
    pushptr                   u8 
    push           3          i64 
    jumpeq         #18931     i64 
    setargs                   1 0
    push           "Name expected" u64 
    callproc       &mm_support.serror 
#18931: 
    push           mm_parse.readname.p u64 
    setret                    u64 
    jump           #18932     
#18932: 
    retfn                     u64 
End


Proc mm_parse.readtypedef:
    param          mm_parse.readtypedef.owner u64 
    param          mm_parse.readtypedef.isglobal i64 
    local          mm_parse.readtypedef.sttype u64 
    local          mm_parse.readtypedef.stname u64 
    local          mm_parse.readtypedef.t i64 
    local          mm_parse.readtypedef.m i64 
    procentry                 
    setargs                   1 0
    push           79         i64 
    callproc       &mm_parse.lexchecksymbol 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    pop            mm_parse.readtypedef.stname u64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callproc       &mm_parse.checkequals 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   3 0
    push           4          i64 
    push           mm_parse.readtypedef.stname u64 
    push           mm_parse.readtypedef.owner u64 
    callfn         &mm_lib.getduplnameptr u64 
    pop            mm_parse.readtypedef.sttype u64 
    setargs                   2 0
    push           mm_parse.readtypedef.sttype u64 
    push           mm_parse.readtypedef.owner u64 
    callproc       &mm_lib.adddef 
    setargs                   1 0
    push           mm_parse.readtypedef.sttype u64 
    callfn         &mm_lib.createusertype i64 
    pop            mm_parse.readtypedef.m i64 
    push           1          i64 
    push           &mm_decls.ttusercat 
    push           mm_parse.readtypedef.m i64 
    popptroff                 u8 1 0
    setargs                   2 0
    push           mm_parse.readtypedef.m i64 
    push           mm_parse.readtypedef.sttype u64 
    callfn         &mm_parse.readtypespec i64 
    pop            mm_parse.readtypedef.t i64 
    push           mm_parse.readtypedef.isglobal u64 
    push           mm_parse.readtypedef.sttype u64 
    push           92         
    addrefoff                 u64 1 0
    push           0          i64 
    push           1          i64 
    popdotslice               u16 
    setargs                   3 0
    push           mm_parse.readtypedef.sttype u64 
    push           72         
    addrefoff                 u64 1 0
    push           mm_parse.readtypedef.t i64 
    push           mm_parse.readtypedef.owner u64 
    callproc       &mm_lib.storemode 
    push           mm_parse.readtypedef.t i64 
    push           0          i64 
    jumplt         #18934     i64 
    push           &mm_decls.ttisallnum 
    push           mm_parse.readtypedef.t i64 
    pushptroff                u8 1 0
    jumpfalse      #18935     i64 
    push           mm_parse.readtypedef.t i64 
    push           &mm_decls.tttarget 
    push           mm_parse.readtypedef.m i64 
    popptroff                 i32 4 0
    jump           #18936     
#18935: 
    push           &mm_decls.ttisref 
    push           mm_parse.readtypedef.t i64 
    pushptroff                u8 1 0
    jumpfalse      #18937     i64 
    jump           #18936     
#18937: 
    push           &mm_decls.ttbasetype 
    push           mm_parse.readtypedef.t i64 
    pushptroff                i32 4 0
    push           11         i64 
    casejumpeq     #18938     i64 0
    push           12         i64 
    casejumpeq     #18939     i64 0
    push           13         i64 
    casejumpeq     #18940     i64 0
    push           24         i64 
    casejumpeq     #18941     i64 0
    popstack                  i64 
    jump           #18942     
#18938: 
    jump           #18943     
#18939: 
    jump           #18943     
#18940: 
    jump           #18943     
#18941: 
    jump           #18943     
#18942: 
    push           mm_parse.readtypedef.t i64 
    push           &mm_decls.tttarget 
    push           mm_parse.readtypedef.m i64 
    popptroff                 i32 4 0
#18943: 
#18936: 
    jump           #18944     
#18934: 
    setargs                   3 0
    push           &mm_decls.tttarget 
    push           mm_parse.readtypedef.m i64 
    addrefoff                 i32 4 0
    push           mm_parse.readtypedef.t i64 
    push           mm_parse.readtypedef.owner u64 
    callproc       &mm_lib.storemode 
#18944: 
    push           mm_parse.readtypedef.t i64 
    push           0          i64 
    jumplt         #18945     i64 
    setargs                   2 0
    push           mm_parse.readtypedef.t i64 
    push           mm_parse.readtypedef.m i64 
    callproc       &mm_lib.copyttvalues 
    jump           #18946     
#18945: 
    push           32         i64 
    push           &mm_decls.ttbasetype 
    push           mm_parse.readtypedef.m i64 
    popptroff                 i32 4 0
#18946: 
#18947: 
    retproc                   
End


Proc mm_parse.readrecordfields:
    param          mm_parse.readrecordfields.owner u64 
    param          mm_parse.readrecordfields.m i64 
    local          mm_parse.readrecordfields.nvars i64 
    local          mm_parse.readrecordfields.stname u64 
    local          mm_parse.readrecordfields.stbitfield u64 
    procentry                 
    push           0          i64 
    pop            mm_parse.readrecordfields.nvars i64 
    jump           #18949     
#18950: 
    setargs                   3 0
    push           14         i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           mm_parse.readrecordfields.owner u64 
    callfn         &mm_lib.getduplnameptr u64 
    pop            mm_parse.readrecordfields.stname u64 
    setargs                   3 0
    push           mm_parse.readrecordfields.stname u64 
    push           72         
    addrefoff                 u64 1 0
    push           mm_parse.readrecordfields.m i64 
    push           mm_parse.readrecordfields.owner u64 
    callproc       &mm_lib.storemode 
    push           &mm_parse.readrecordfields.nvars 
    incr                      i64 1
    push           &mm_parse.unionpend 
    push           7          
    pushptroff                u8 1 0
    jumpfalse      #18951     i64 
    setargs                   2 0
    push           &mm_parse.unionpend 
    push           mm_parse.readrecordfields.stname u64 
    push           104        
    addrefoff                 u64 1 0
    callproc       &mm_lib.unionstr_copy 
    setargs                   2 0
    push           &mm_parse.unionpend 
    push           &mm_parse.unionstring 
    callproc       &mm_lib.unionstr_concat 
    setargs                   1 0
    push           &mm_parse.unionpend 
    callproc       &mm_lib.unionstr_clear 
    jump           #18952     
#18951: 
    setargs                   1 0
    push           mm_parse.readrecordfields.stname u64 
    push           104        
    addrefoff                 u64 1 0
    callproc       &mm_lib.unionstr_clear 
#18952: 
    push           mm_parse.readrecordfields.stname u64 
    pop            mm_parse.unionlastvar u64 
    setargs                   2 0
    push           mm_parse.readrecordfields.stname u64 
    push           mm_parse.readrecordfields.owner u64 
    callproc       &mm_lib.adddef 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           21         i64 
    casejumpeq     #18953     i64 0
    push           22         i64 
    casejumpeq     #18954     i64 0
    push           7          i64 
    casejumpeq     #18955     i64 0
    popstack                  i64 
    jump           #18956     
#18953: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           1          u64 
    push           mm_parse.readrecordfields.stname u64 
    push           92         
    addrefoff                 u64 1 0
    push           12         i64 
    popdotindex               u16 
    setargs                   1 0
    push           mm_parse.readrecordfields.owner u64 
    callfn         &mm_parse.readequivfield u64 
    push           mm_parse.readrecordfields.stname u64 
    push           96         
    popptroff                 u64 1 0
    jump           #18957     
#18954: 
    setargs                   1 0
    push           70         i64 
    callproc       &mm_parse.lexchecksymbol 
    push           &mm_decls.lx 
    push           8          
    pushptroff                i64 1 0
    push           1          i64 
    casejumpeq     #18958     i64 0
    push           2          i64 
    casejumpeq     #18958     i64 0
    push           4          i64 
    casejumpeq     #18958     i64 0
    push           8          i64 
    casejumpeq     #18958     i64 0
    push           16         i64 
    casejumpeq     #18958     i64 0
    push           0          i64 
    casejumpeq     #18959     i64 0
    popstack                  i64 
    jump           #18960     
#18958: 
    push           &mm_decls.lx 
    push           8          
    pushptroff                i64 1 0
    push           mm_parse.readrecordfields.stname u64 
    push           117        
    popptroff                 u8 1 0
    jump           #18961     
#18959: 
    push           255        i64 
    push           mm_parse.readrecordfields.stname u64 
    push           117        
    popptroff                 u8 1 0
    jump           #18961     
#18960: 
    setargs                   1 0
    push           "@@ bad align" u64 
    callproc       &mm_support.serror 
#18961: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #18957     
#18955: 
    setargs                   1 0
    push           12         i64 
    callproc       &mm_parse.lexchecksymbol 
#18962: 
    setargs                   1 0
    push           79         i64 
    callproc       &mm_parse.lexchecksymbol 
    setargs                   3 0
    push           14         i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           mm_parse.readrecordfields.owner u64 
    callfn         &mm_lib.getduplnameptr u64 
    pop            mm_parse.readrecordfields.stbitfield u64 
    push           30         i64 
    push           mm_parse.readrecordfields.stbitfield u64 
    push           72         
    popptroff                 i32 1 0
    setargs                   2 0
    push           mm_parse.readrecordfields.stbitfield u64 
    push           mm_parse.readrecordfields.owner u64 
    callproc       &mm_lib.adddef 
    push           1          u64 
    push           mm_parse.readrecordfields.stbitfield u64 
    push           92         
    addrefoff                 u64 1 0
    push           12         i64 
    popdotindex               u16 
    push           mm_parse.readrecordfields.stname u64 
    push           mm_parse.readrecordfields.stbitfield u64 
    push           96         
    popptroff                 u64 1 0
    setargs                   1 0
    push           7          i64 
    callproc       &mm_parse.lexchecksymbol 
    setargs                   1 0
    push           70         i64 
    callproc       &mm_parse.lexchecksymbol 
    push           &mm_decls.lx 
    push           8          
    pushptroff                i64 1 0
    push           mm_parse.readrecordfields.stbitfield u64 
    push           116        
    popptroff                 u8 1 0
    setargs                   0 0
    callproc       &mm_lex.lex 
#18963: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpeq         #18962     i64 
#18964: 
    setargs                   1 0
    push           13         i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #18957     
#18956: 
#18957: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpeq         #18965     i64 
    jump           #18966     
#18965: 
    setargs                   0 0
    callproc       &mm_lex.lex 
#18949: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           79         i64 
    jumpeq         #18950     i64 
#18966: 
    push           mm_parse.readrecordfields.nvars i64 
    push           0          i64 
    jumpne         #18967     i64 
    setargs                   1 0
    push           "No fields declared" u64 
    callproc       &mm_support.serror 
#18967: 
#18968: 
    retproc                   
End


Proc mm_parse.readtabledef:
    param          mm_parse.readtabledef.owner u64 
    param          mm_parse.readtabledef.isglobal i64 
    local          mm_parse.readtabledef.i i64 
    local          mm_parse.readtabledef.ncols i64 
    local          mm_parse.readtabledef.nrows i64 
    local          mm_parse.readtabledef.enums i64 
    local          mm_parse.readtabledef.nextenumvalue i64 
    local          mm_parse.readtabledef.firstval i64 
    local          mm_parse.readtabledef.lastval i64 
    local          mm_parse.readtabledef.startline i64 
    local          mm_parse.readtabledef.closesym i64 
    local          mm_parse.readtabledef.ltype i64 
    local          mm_parse.readtabledef.plower u64 
    local          mm_parse.readtabledef.enumtypename u64 
    local          mm_parse.readtabledef.stvar u64 
    local          mm_parse.readtabledef.stenum u64 
    local          mm_parse.readtabledef.stgen u64 
    local          mm_parse.readtabledef.varnameptrs block:160 
    local          mm_parse.readtabledef.varlisttypes block:160 
    local          mm_parse.readtabledef.plist block:160 
    local          mm_parse.readtabledef.plistx block:160 
    local          mm_parse.readtabledef.enumvalues block:4000 
    procentry                 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           0          i64 
    pop            mm_parse.readtabledef.enums i64 
    push           0          u64 
    pop            mm_parse.readtabledef.enumtypename u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           12         i64 
    jumpne         #18970     i64 
    push           1          i64 
    pop            mm_parse.readtabledef.enums i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           79         i64 
    jumpne         #18971     i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    pushptr                   u64 
    pop            mm_parse.readtabledef.enumtypename u64 
    setargs                   0 0
    callproc       &mm_lex.lex 
#18971: 
    setargs                   1 0
    push           13         i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
#18970: 
    push           1          i64 
    pop            mm_parse.readtabledef.nextenumvalue i64 
    push           0          i64 
    pop            mm_parse.readtabledef.nrows i64 
    push           0          i64 
    pop            mm_parse.readtabledef.ncols i64 
    jump           #18972     
#18973: 
    setargs                   2 0
    push           0          i64 
    push           mm_parse.readtabledef.owner u64 
    callfn         &mm_parse.readtypespec i64 
    pop            mm_parse.readtabledef.ltype i64 
    setargs                   1 0
    push           79         i64 
    callproc       &mm_parse.checksymbol 
    push           &mm_parse.readtabledef.ncols 
    incrload                  i64 1
    push           20         i64 
    jumple         #18974     i64 
    setargs                   1 0
    push           "tabledata/too many columns" u64 
    callproc       &mm_support.serror 
#18974: 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           &mm_parse.readtabledef.varnameptrs 
    push           mm_parse.readtabledef.ncols i64 
    popptroff                 u64 8 -8
    push           mm_parse.readtabledef.ltype i64 
    push           &mm_parse.readtabledef.varlisttypes 
    push           mm_parse.readtabledef.ncols i64 
    popptroff                 i64 8 -8
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpne         #18975     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #18976     
#18975: 
    jump           #18977     
#18976: 
#18972: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           46         i64 
    jumpne         #18973     i64 
#18977: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callproc       &mm_parse.skipsemi 
    setargs                   0 0
    callfn         &mm_parse.getcurrline i64 
    pop            mm_parse.readtabledef.startline i64 
    setargs                   1 0
    push           0          i64 
    callfn         &mm_parse.checkbegin i64 
    pop            mm_parse.readtabledef.closesym i64 
    setargs                   0 0
    callproc       &mm_parse.skipsemi 
    push           0          i64 
    store          mm_parse.readtabledef.lastval i64 
    pop            mm_parse.readtabledef.firstval i64 
#18978: 
    push           1          i64 
    pop            mm_parse.readtabledef.i i64 
    push           mm_parse.readtabledef.ncols i64 
    push           1          i64 
    jumplt         #18979     i64 
#18980: 
    push           0          u64 
    push           &mm_parse.readtabledef.plistx 
    push           mm_parse.readtabledef.i i64 
    storeptroff               u64 8 -8
    push           &mm_parse.readtabledef.plist 
    push           mm_parse.readtabledef.i i64 
    popptroff                 u64 8 -8
#18981: 
    forup          #18980     i64 1
    opnd           mm_parse.readtabledef.i 
    opnd           mm_parse.readtabledef.ncols 
#18979: 
    push           1          i64 
    pop            mm_parse.intabledata i64 
#18982: 
    setargs                   0 0
    callproc       &mm_parse.skipsemi 
    setargs                   1 0
    push           12         i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_parse.readtabledef.nrows 
    incrload                  i64 1
    push           500        i64 
    jumple         #18983     i64 
    setargs                   1 0
    push           "tabledata:too many rows" u64 
    callproc       &mm_support.serror 
#18983: 
    push           mm_parse.readtabledef.enums i64 
    jumpfalse      #18984     i64 
    setargs                   1 0
    push           79         i64 
    callproc       &mm_parse.checksymbol 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    pop            mm_parse.readtabledef.stgen u64 
    push           mm_parse.readtabledef.stgen u64 
    pushptr                   u64 
    pop            mm_parse.tabledataname u64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           46         i64 
    jumpne         #18985     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.readconstint i64 
    pop            mm_parse.readtabledef.nextenumvalue i64 
#18985: 
    push           mm_parse.readtabledef.nextenumvalue i64 
    push           &mm_parse.readtabledef.enumvalues 
    push           mm_parse.readtabledef.nrows i64 
    popptroff                 i64 8 -8
    setargs                   3 0
    push           10         i64 
    push           mm_parse.readtabledef.stgen u64 
    push           mm_parse.readtabledef.owner u64 
    callfn         &mm_lib.getduplnameptr u64 
    pop            mm_parse.readtabledef.stenum u64 
    push           4          i64 
    push           mm_parse.readtabledef.stenum u64 
    push           72         
    popptroff                 i32 1 0
    setargs                   2 0
    push           4          i64 
    push           mm_parse.readtabledef.nextenumvalue u64 
    callfn         &mm_lib.createconstunit u64 
    push           mm_parse.readtabledef.stenum u64 
    push           64         
    popptroff                 u64 1 0
    push           mm_parse.readtabledef.isglobal u64 
    push           mm_parse.readtabledef.stenum u64 
    push           92         
    addrefoff                 u64 1 0
    push           0          i64 
    push           1          i64 
    popdotslice               u16 
    setargs                   2 0
    push           mm_parse.readtabledef.stenum u64 
    push           mm_parse.readtabledef.owner u64 
    callproc       &mm_lib.adddef 
    push           mm_parse.readtabledef.nrows i64 
    push           1          i64 
    jumpne         #18986     i64 
    push           mm_parse.readtabledef.nextenumvalue i64 
    pop            mm_parse.readtabledef.firstval i64 
#18986: 
    push           mm_parse.readtabledef.nextenumvalue i64 
    pop            mm_parse.readtabledef.lastval i64 
    push           &mm_parse.readtabledef.nextenumvalue 
    incr                      i64 1
    push           mm_parse.readtabledef.ncols i64 
    jumpfalse      #18987     i64 
    setargs                   1 0
    push           5          i64 
    callproc       &mm_parse.checksymbol 
#18987: 
    setargs                   0 0
    callproc       &mm_lex.lex 
#18984: 
#18988: 
    push           1          i64 
    pop            mm_parse.readtabledef.i i64 
    push           mm_parse.readtabledef.ncols i64 
    push           1          i64 
    jumplt         #18989     i64 
#18990: 
    setargs                   3 0
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    push           &mm_parse.readtabledef.plistx 
    push           mm_parse.readtabledef.i i64 
    addrefoff                 u64 8 -8
    push           &mm_parse.readtabledef.plist 
    push           mm_parse.readtabledef.i i64 
    addrefoff                 u64 8 -8
    callproc       &mm_lib.addlistunit 
    push           mm_parse.readtabledef.i i64 
    push           mm_parse.readtabledef.ncols i64 
    jumpne         #18991     i64 
    setargs                   1 0
    push           13         i64 
    callproc       &mm_parse.checksymbol 
    jump           #18992     
#18991: 
    setargs                   1 0
    push           5          i64 
    callproc       &mm_parse.checksymbol 
#18992: 
    setargs                   0 0
    callproc       &mm_lex.lex 
#18993: 
    forup          #18990     i64 1
    opnd           mm_parse.readtabledef.i 
    opnd           mm_parse.readtabledef.ncols 
#18989: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpeq         #18994     i64 
    jump           #18995     
#18994: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           mm_parse.readtabledef.closesym i64 
    jumpne         #18996     i64 
    jump           #18995     
#18996: 
    jump           #18982     
#18995: 
    push           0          i64 
    pop            mm_parse.intabledata i64 
    setargs                   0 0
    callproc       &mm_parse.skipsemi 
    setargs                   3 0
    push           mm_parse.readtabledef.startline i64 
    push           170        i64 
    push           mm_parse.readtabledef.closesym i64 
    callproc       &mm_parse.checkbeginend 
    push           mm_parse.readtabledef.nrows i64 
    push           0          i64 
    jumpne         #18997     i64 
    setargs                   1 0
    push           "No table data" u64 
    callproc       &mm_support.serror 
#18997: 
#18998: 
    push           1          i64 
    pop            mm_parse.readtabledef.i i64 
    push           mm_parse.readtabledef.ncols i64 
    push           1          i64 
    jumplt         #18999     i64 
#19000: 
    setargs                   3 0
    push           11         i64 
    push           &mm_parse.readtabledef.varnameptrs 
    push           mm_parse.readtabledef.i i64 
    pushptroff                u64 8 -8
    push           mm_parse.readtabledef.owner u64 
    callfn         &mm_lib.getduplnameptr u64 
    pop            mm_parse.readtabledef.stvar u64 
    setargs                   2 0
    push           &mm_parse.readtabledef.plist 
    push           mm_parse.readtabledef.i i64 
    pushptroff                u64 8 -8
    push           19         i64 
    callfn         &mm_lib.createunit1 u64 
    push           mm_parse.readtabledef.stvar u64 
    push           64         
    popptroff                 u64 1 0
    push           mm_parse.readtabledef.nrows i64 
    push           mm_parse.readtabledef.stvar u64 
    push           64         
    pushptroff                u64 1 0
    push           40         
    popptroff                 u32 1 0
    setargs                   3 0
    push           mm_parse.readtabledef.stvar u64 
    push           72         
    addrefoff                 u64 1 0
    push           &mm_parse.readtabledef.varlisttypes 
    push           mm_parse.readtabledef.i i64 
    pushptroff                i64 8 -8
    push           mm_parse.readtabledef.owner u64 
    callproc       &mm_lib.storemode 
    push           mm_parse.readtabledef.isglobal u64 
    push           mm_parse.readtabledef.stvar u64 
    push           92         
    addrefoff                 u64 1 0
    push           0          i64 
    push           1          i64 
    popdotslice               u16 
    setargs                   2 0
    push           mm_parse.readtabledef.stvar u64 
    push           mm_parse.readtabledef.owner u64 
    callproc       &mm_lib.adddef 
    setargs                   1 0
    push           mm_parse.readtabledef.stvar u64 
    callproc       &mm_lib.addstatic 
#19001: 
    forup          #19000     i64 1
    opnd           mm_parse.readtabledef.i 
    opnd           mm_parse.readtabledef.ncols 
#18999: 
#19002: 
    retproc                   
End


Proc mm_parse.readclassdef:
    param          mm_parse.readclassdef.owner u64 
    param          mm_parse.readclassdef.isglobal i64 
    local          mm_parse.readclassdef.kwd i64 
    local          mm_parse.readclassdef.baseclass i64 
    local          mm_parse.readclassdef.m i64 
    local          mm_parse.readclassdef.startline i64 
    local          mm_parse.readclassdef.closesym i64 
    local          mm_parse.readclassdef.mrec i64 
    local          mm_parse.readclassdef.normalexit i64 
    local          mm_parse.readclassdef.isrecord i64 
    local          mm_parse.readclassdef.align i64 
    local          mm_parse.readclassdef.nameptr u64 
    local          mm_parse.readclassdef.sttype u64 
    local          mm_parse.readclassdef.newd u64 
    local          mm_parse.readclassdef.d u64 
    local          mm_parse.readclassdef.e u64 
    procentry                 
    push           &mm_decls.lx 
    pushptr                   u8 
    pop            mm_parse.readclassdef.kwd i64 
    push           mm_parse.readclassdef.kwd i64 
    push           132        i64 
    seteq                     i64 
    pop            mm_parse.readclassdef.isrecord i64 
    setargs                   1 0
    push           79         i64 
    callproc       &mm_parse.lexchecksymbol 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    pop            mm_parse.readclassdef.nameptr u64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           0          i64 
    pop            mm_parse.readclassdef.baseclass i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           12         i64 
    jumpne         #19004     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    push           0          i64 
    push           mm_parse.readclassdef.owner u64 
    callfn         &mm_parse.readtypespec i64 
    pop            mm_parse.readclassdef.baseclass i64 
    setargs                   1 0
    push           13         i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
#19004: 
    setargs                   0 0
    callproc       &mm_parse.checkequals 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           0          i64 
    pop            mm_parse.readclassdef.align i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           21         i64 
    jumpne         #19005     i64 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #19006     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.readconstint i64 
    pop            mm_parse.readclassdef.align i64 
    jump           #19007     
#19006: 
    setargs                   0 0
    callproc       &mm_lex.lex 
#19007: 
    push           1          i64 
    pop            mm_parse.readclassdef.align i64 
#19005: 
    setargs                   3 0
    push           4          i64 
    push           mm_parse.readclassdef.nameptr u64 
    push           mm_parse.readclassdef.owner u64 
    callfn         &mm_lib.getduplnameptr u64 
    pop            mm_parse.readclassdef.sttype u64 
    setargs                   2 0
    push           mm_parse.readclassdef.sttype u64 
    push           mm_parse.readclassdef.owner u64 
    callproc       &mm_lib.adddef 
    setargs                   1 0
    push           mm_parse.readclassdef.sttype u64 
    callfn         &mm_lib.createusertype i64 
    pop            mm_parse.readclassdef.m i64 
    setargs                   2 0
    push           mm_parse.readclassdef.m i64 
    push           mm_parse.readclassdef.owner u64 
    callfn         &mm_lib.createrecordmode i64 
    pop            mm_parse.readclassdef.mrec i64 
    setargs                   3 0
    push           mm_parse.readclassdef.sttype u64 
    push           72         
    addrefoff                 u64 1 0
    push           mm_parse.readclassdef.mrec i64 
    push           mm_parse.readclassdef.owner u64 
    callproc       &mm_lib.storemode 
    setargs                   3 0
    push           mm_parse.readclassdef.sttype u64 
    push           112        
    addrefoff                 u64 1 0
    push           mm_parse.readclassdef.baseclass i64 
    push           mm_parse.readclassdef.owner u64 
    callproc       &mm_lib.storemode 
    push           mm_parse.readclassdef.align i64 
    push           mm_parse.readclassdef.sttype u64 
    push           117        
    popptroff                 u8 1 0
    setargs                   1 0
    push           1          i64 
    callfn         &mm_parse.checkbegin i64 
    pop            mm_parse.readclassdef.closesym i64 
    setargs                   0 0
    callfn         &mm_parse.getcurrline i64 
    pop            mm_parse.readclassdef.startline i64 
    setargs                   2 0
    push           mm_parse.readclassdef.kwd i64 
    push           mm_parse.readclassdef.sttype u64 
    callproc       &mm_parse.readclassbody 
    setargs                   3 0
    push           mm_parse.readclassdef.startline i64 
    push           mm_parse.readclassdef.kwd i64 
    push           mm_parse.readclassdef.closesym i64 
    callproc       &mm_parse.checkbeginend 
    push           mm_parse.readclassdef.isglobal u64 
    push           mm_parse.readclassdef.sttype u64 
    push           92         
    addrefoff                 u64 1 0
    push           0          i64 
    push           1          i64 
    popdotslice               u16 
#19008: 
    retproc                   
End


Proc mm_parse.readclassbody:
    param          mm_parse.readclassbody.owner u64 
    param          mm_parse.readclassbody.classkwd i64 
    local          mm_parse.readclassbody.kwd i64 
    local          mm_parse.readclassbody.t i64 
    local          mm_parse.readclassbody.d u64 
    procentry                 
    setargs                   1 0
    push           &mm_parse.unionstring 
    callproc       &mm_lib.unionstr_clear 
    setargs                   1 0
    push           &mm_parse.unionpend 
    callproc       &mm_lib.unionstr_clear 
#19010: 
    push           &mm_decls.lx 
    pushptr                   u8 
    switch         #19011     6 170
    opnd           #19012     
#19011: 
    switchlabel    #19013     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19014     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19014     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19015     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19014     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19016     
    switchlabel    #19016     
    switchlabel    #19012     
    switchlabel    #19017     
    switchlabel    #19018     
    switchlabel    #19018     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19019     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19020     
    switchlabel    #19021     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19022     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19023     
    switchlabel    #19024     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19017     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19012     
    switchlabel    #19025     
    endswitch                 
#19023: 
    setargs                   2 0
    push           0          i64 
    push           mm_parse.readclassbody.owner u64 
    callproc       &mm_parse.readconstdef 
    jump           #19010     
#19016: 
    push           &mm_decls.lx 
    pushptr                   u8 
    pop            mm_parse.readclassbody.kwd i64 
    push           mm_parse.readclassbody.owner u64 
    push           92         
    pushptroff                u16 1 0
    push           14         i64 
    dotindex                  i64 
    jumpfalse      #19026     u64 
    setargs                   3 0
    push           0          i64 
    push           0          i64 
    push           mm_parse.readclassbody.owner u64 
    callproc       &mm_parse.readprocdecl 
    jump           #19027     
#19026: 
    setargs                   3 0
    push           0          i64 
    push           0          i64 
    push           mm_parse.readclassbody.owner u64 
    callproc       &mm_parse.readprocdef 
#19027: 
    jump           #19010     
#19017: 
    setargs                   2 0
    push           0          i64 
    push           mm_parse.readclassbody.owner u64 
    callproc       &mm_parse.readclassdef 
    jump           #19010     
#19019: 
    setargs                   2 0
    push           0          i64 
    push           mm_parse.readclassbody.owner u64 
    callproc       &mm_parse.readtypedef 
    jump           #19010     
#19015: 
    setargs                   1 0
    push           "Class eof?" u64 
    callproc       &mm_support.serror 
    jump           #19028     
    jump           #19010     
#19013: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #19010     
#19024: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   3 0
    push           0          i64 
    push           0          i64 
    push           mm_parse.readclassbody.owner u64 
    callproc       &mm_parse.readenumtype 
    jump           #19010     
#19025: 
    setargs                   2 0
    push           0          i64 
    push           mm_parse.readclassbody.owner u64 
    callproc       &mm_parse.readtabledef 
    jump           #19010     
#19022: 
    setargs                   2 0
    push           0          i64 
    push           mm_parse.readclassbody.owner u64 
    callproc       &mm_parse.readmacrodef 
    jump           #19010     
#19018: 
    setargs                   2 0
    startmult                 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           133        i64 
    jumpne         #19029     i64 
    push           83         i64 
    resetmult                 
    jump           #19030     
#19029: 
    push           85         i64 
    endmult                   
#19030: 
    push           &mm_parse.unionpend 
    callproc       &mm_lib.unionstr_append 
    push           0          u64 
    pop            mm_parse.unionlastvar u64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #19010     
#19014: 
    push           &mm_parse.unionstring 
    push           7          
    pushptroff                u8 1 0
    jumpfalse      #19031     i64 
    setargs                   4 0
    push           0          i64 
    push           0          i64 
    startmult                 
    setargs                   1 0
    push           &mm_parse.unionstring 
    callfn         &mm_lib.unionstr_last i64 
    push           83         i64 
    jumpne         #19032     i64 
    push           133        i64 
    resetmult                 
    jump           #19033     
#19032: 
    push           134        i64 
    endmult                   
#19033: 
    push           104        i64 
    callproc       &mm_parse.checkend 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.unionlastvar u64 
    push           0          u64 
    jumpeq         #19034     u64 
    push           &mm_parse.unionpend 
    push           7          
    pushptroff                u8 1 0
    jumpfalse      #19035     i64 
#19034: 
    setargs                   1 0
    push           "Empty union group" u64 
    callproc       &mm_support.serror 
#19035: 
    setargs                   1 0
    push           mm_parse.unionlastvar u64 
    push           104        
    addrefoff                 u64 1 0
    callfn         &mm_lib.unionstr_last i64 
    push           69         i64 
    casejumpeq     #19036     i64 0
    push           42         i64 
    casejumpeq     #19036     i64 0
    popstack                  i64 
    jump           #19037     
#19036: 
    jump           #19038     
#19037: 
    setargs                   2 0
    push           42         i64 
    push           mm_parse.unionlastvar u64 
    push           104        
    addrefoff                 u64 1 0
    callproc       &mm_lib.unionstr_append 
#19038: 
    setargs                   2 0
    push           69         i64 
    push           mm_parse.unionlastvar u64 
    push           104        
    addrefoff                 u64 1 0
    callproc       &mm_lib.unionstr_append 
    push           &mm_parse.unionstring 
    push           7          
    addrefoff                 u64 1 0
    decr                      u8 1
    jump           #19039     
#19031: 
    jump           #19028     
#19039: 
    jump           #19010     
#19020: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.istypestarter i64 
    jumpfalse      #19040     i64 
!readmut::
#19041: 
    push           &mm_parse.insiderecord 
    incr                      i64 1
    setargs                   2 0
    push           0          i64 
    push           mm_parse.readclassbody.owner u64 
    callfn         &mm_parse.readtypespec i64 
    pop            mm_parse.readclassbody.t i64 
    push           &mm_parse.insiderecord 
    decr                      i64 1
    jump           #19042     
#19040: 
    setargs                   1 0
    push           "need type" u64 
    callproc       &mm_support.serror 
#19042: 
    setargs                   2 0
    push           mm_parse.readclassbody.t i64 
    push           mm_parse.readclassbody.owner u64 
    callproc       &mm_parse.readrecordfields 
    jump           #19010     
#19021: 
    setargs                   1 0
    push           "Let not allowed" u64 
    callproc       &mm_support.serror 
    jump           #19010     
#19012: 
    setargs                   0 0
    callfn         &mm_parse.istypestarter i64 
    jumpfalse      #19043     i64 
    jump           #19041     
    jump           #19044     
#19043: 
    jump           #19028     
#19044: 
    jump           #19010     
#19028: 
#19045: 
    retproc                   
End


Proc mm_parse.readenumtype: i64
    param          mm_parse.readenumtype.owner u64 
    param          mm_parse.readenumtype.typedefx i64 
    param          mm_parse.readenumtype.isglobal i64 
    local          mm_parse.readenumtype.enumowner u64 
    local          mm_parse.readenumtype.stname u64 
    local          mm_parse.readenumtype.nameptr u64 
    local          mm_parse.readenumtype.isanon i64 
    local          mm_parse.readenumtype.index i64 
    local          mm_parse.readenumtype.startline i64 
    local          mm_parse.readenumtype.closesym i64 
    local          mm_parse.readenumtype.knownindex i64 
    local          mm_parse.readenumtype.pone u64 
    local          mm_parse.readenumtype.pindex u64 
    procentry                 
    push           mm_parse.readenumtype.owner u64 
    pop            mm_parse.readenumtype.enumowner u64 
    push           0          i64 
    pop            mm_parse.readenumtype.isanon i64 
    push           mm_parse.readenumtype.typedefx i64 
    jumptrue       #19047     i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           79         i64 
    jumpne         #19048     i64 
    setargs                   3 0
    push           4          i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           mm_parse.readenumtype.owner u64 
    callfn         &mm_lib.getduplnameptr u64 
    pop            mm_parse.readenumtype.stname u64 
    push           mm_parse.readenumtype.stname u64 
    pop            mm_parse.readenumtype.owner u64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callproc       &mm_parse.checkequals 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    push           mm_parse.readenumtype.owner u64 
    push           mm_parse.readenumtype.enumowner u64 
    callproc       &mm_lib.adddef 
    jump           #19049     
#19048: 
    push           1          i64 
    pop            mm_parse.readenumtype.isanon i64 
#19049: 
    setargs                   1 0
    push           12         i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #19050     
#19047: 
    push           &mm_decls.ttnamedef 
    push           mm_parse.readenumtype.typedefx i64 
    pushptroff                u64 8 0
    pop            mm_parse.readenumtype.owner u64 
    setargs                   0 0
    callfn         &mm_parse.getcurrline i64 
    pop            mm_parse.readenumtype.startline i64 
    setargs                   1 0
    push           1          i64 
    callfn         &mm_parse.checkbegin i64 
    pop            mm_parse.readenumtype.closesym i64 
#19050: 
    setargs                   2 0
    push           4          i64 
    push           1          u64 
    callfn         &mm_lib.createconstunit u64 
    pop            mm_parse.readenumtype.pone u64 
    push           mm_parse.readenumtype.pone u64 
    pop            mm_parse.readenumtype.pindex u64 
    push           1          i64 
    pop            mm_parse.readenumtype.knownindex i64 
    push           1          i64 
    pop            mm_parse.readenumtype.index i64 
    jump           #19051     
#19052: 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    pop            mm_parse.readenumtype.nameptr u64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           46         i64 
    jumpne         #19053     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readenumtype.pindex u64 
    push           0          i64 
    pop            mm_parse.readenumtype.knownindex i64 
    push           mm_parse.readenumtype.pindex u64 
    pushptr                   u8 
    push           1          i64 
    jumpne         #19054     i64 
    push           1          i64 
    pop            mm_parse.readenumtype.knownindex i64 
    push           mm_parse.readenumtype.pindex u64 
    push           16         
    pushptroff                i64 1 0
    pop            mm_parse.readenumtype.index i64 
#19054: 
#19053: 
    push           mm_parse.readenumtype.isanon i64 
    jumptrue       #19055     i64 
    setargs                   3 0
    push           16         i64 
    push           mm_parse.readenumtype.nameptr u64 
    push           mm_parse.readenumtype.owner u64 
    callfn         &mm_lib.getduplnameptr u64 
    pop            mm_parse.readenumtype.stname u64 
    jump           #19056     
#19055: 
    setargs                   3 0
    push           10         i64 
    push           mm_parse.readenumtype.nameptr u64 
    push           mm_parse.readenumtype.enumowner u64 
    callfn         &mm_lib.getduplnameptr u64 
    pop            mm_parse.readenumtype.stname u64 
#19056: 
    push           mm_parse.readenumtype.knownindex i64 
    jumpfalse      #19057     i64 
    setargs                   2 0
    push           4          i64 
    push           mm_parse.readenumtype.index u64 
    callfn         &mm_lib.createconstunit u64 
    pop            mm_parse.readenumtype.pindex u64 
    push           mm_parse.readenumtype.pindex u64 
    push           mm_parse.readenumtype.stname u64 
    push           64         
    popptroff                 u64 1 0
    push           &mm_parse.readenumtype.index 
    incr                      i64 1
    jump           #19058     
#19057: 
    push           mm_parse.readenumtype.pindex u64 
    push           mm_parse.readenumtype.stname u64 
    push           64         
    popptroff                 u64 1 0
    setargs                   3 0
    push           mm_parse.readenumtype.pone u64 
    push           mm_parse.readenumtype.pindex u64 
    push           36         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readenumtype.pindex u64 
    push           102        i64 
    push           mm_parse.readenumtype.pindex u64 
    push           60         
    popptroff                 u8 1 0
#19058: 
    push           4          i64 
    push           mm_parse.readenumtype.stname u64 
    push           72         
    popptroff                 i32 1 0
    push           mm_parse.readenumtype.isanon i64 
    jumptrue       #19059     i64 
    setargs                   2 0
    push           mm_parse.readenumtype.stname u64 
    push           mm_parse.readenumtype.owner u64 
    callproc       &mm_lib.adddef 
    jump           #19060     
#19059: 
    setargs                   2 0
    push           mm_parse.readenumtype.stname u64 
    push           mm_parse.readenumtype.enumowner u64 
    callproc       &mm_lib.adddef 
#19060: 
    push           mm_parse.readenumtype.isglobal u64 
    push           mm_parse.readenumtype.stname u64 
    push           92         
    addrefoff                 u64 1 0
    push           0          i64 
    push           1          i64 
    popdotslice               u16 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpeq         #19061     i64 
    jump           #19062     
#19061: 
    setargs                   0 0
    callproc       &mm_lex.lex 
#19051: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           79         i64 
    jumpeq         #19052     i64 
#19062: 
    push           mm_parse.readenumtype.typedefx i64 
    jumptrue       #19063     i64 
    setargs                   1 0
    push           13         i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #19064     
#19063: 
    setargs                   3 0
    push           mm_parse.readenumtype.startline i64 
    push           152        i64 
    push           mm_parse.readenumtype.closesym i64 
    callproc       &mm_parse.checkbeginend 
#19064: 
    startmult                 
    push           mm_parse.readenumtype.isanon i64 
    jumptrue       #19065     i64 
    setargs                   2 0
    push           mm_parse.readenumtype.typedefx i64 
    push           mm_parse.readenumtype.owner u64 
    callfn         &mm_lib.createenummode i64 
    pop            mm_parse.readenumtype.typedefx i64 
    push           mm_parse.readenumtype.typedefx i64 
    resetmult                 
    jump           #19066     
#19065: 
    push           0          i64 
    endmult                   
#19066: 
    setret                    i64 
    jump           #19067     
#19067: 
    retfn                     i64 
End


Proc mm_parse.readimportmodule:
    param          mm_parse.readimportmodule.owner u64 
    local          mm_parse.readimportmodule.isnew i64 
    local          mm_parse.readimportmodule.startline i64 
    local          mm_parse.readimportmodule.closesym i64 
    local          mm_parse.readimportmodule.d u64 
    local          mm_parse.readimportmodule.stname u64 
    local          mm_parse.readimportmodule.stname0 u64 
    procentry                 
    push           mm_parse.insidedllimport i64 
    jumpfalse      #19069     i64 
    setargs                   1 0
    push           "nested importdll" u64 
    callproc       &mm_support.serror 
#19069: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           75         i64 
    jumpne         #19070     i64 
    setargs                   1 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    callfn         &mm_lex.addnamestr u64 
    pop            mm_parse.readimportmodule.stname u64 
    jump           #19071     
#19070: 
    setargs                   1 0
    push           79         i64 
    callproc       &mm_parse.checksymbol 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    pop            mm_parse.readimportmodule.stname u64 
#19071: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callproc       &mm_parse.checkequals 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           1          i64 
    pop            mm_parse.readimportmodule.isnew i64 
    push           mm_parse.readimportmodule.stname u64 
    push           40         
    pushptroff                u64 1 0
    pop            mm_parse.readimportmodule.d u64 
    jump           #19072     
#19073: 
    push           mm_parse.readimportmodule.d u64 
    push           78         
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #19074     i64 
    push           mm_parse.readimportmodule.d u64 
    pop            mm_parse.readimportmodule.stname u64 
    push           0          i64 
    pop            mm_parse.readimportmodule.isnew i64 
    jump           #19075     
#19074: 
    push           mm_parse.readimportmodule.d u64 
    push           40         
    pushptroff                u64 1 0
    pop            mm_parse.readimportmodule.d u64 
#19072: 
    push           mm_parse.readimportmodule.d u64 
    jumptrue       #19073     u64 
#19075: 
    push           mm_parse.readimportmodule.isnew i64 
    jumpfalse      #19076     i64 
    setargs                   3 0
    push           3          i64 
    push           mm_parse.readimportmodule.stname u64 
    push           mm_decls.stmodule u64 
    callfn         &mm_lib.getduplnameptr u64 
    pop            mm_parse.readimportmodule.stname u64 
    setargs                   2 0
    push           "sys"      u64 
    push           mm_parse.readimportmodule.stname u64 
    pushptr                   u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #19077     i64 
    push           mm_parse.readimportmodule.stname u64 
    pop            mm_decls.stsysmodule u64 
#19077: 
    setargs                   2 0
    push           mm_parse.readimportmodule.stname u64 
    push           mm_decls.stmodule u64 
    callproc       &mm_lib.adddef 
    push           mm_decls.ndllnametable i64 
    push           50         i64 
    jumplt         #19078     i64 
    setargs                   1 0
    push           "Too many DLL libs" u64 
    callproc       &mm_support.serror 
#19078: 
    push           mm_parse.readimportmodule.stname u64 
    pushptr                   u64 
    push           &mm_decls.dllnametable 
    push           &mm_decls.ndllnametable 
    incrload                  i64 1
    popptroff                 u64 8 -8
    push           mm_decls.ndllnametable i64 
    push           mm_parse.readimportmodule.stname u64 
    push           113        
    popptroff                 u8 1 0
#19076: 
    setargs                   0 0
    callfn         &mm_parse.getcurrline i64 
    pop            mm_parse.readimportmodule.startline i64 
    setargs                   1 0
    push           0          i64 
    callfn         &mm_parse.checkbegin i64 
    pop            mm_parse.readimportmodule.closesym i64 
    push           1          i64 
    pop            mm_parse.insidedllimport i64 
    setargs                   1 0
    push           mm_parse.readimportmodule.owner u64 
    callproc       &mm_parse.readimportbody 
    push           0          i64 
    pop            mm_parse.insidedllimport i64 
    setargs                   3 0
    push           mm_parse.readimportmodule.startline i64 
    push           136        i64 
    push           mm_parse.readimportmodule.closesym i64 
    callproc       &mm_parse.checkbeginend 
#19079: 
    retproc                   
End


Proc mm_parse.readimportbody:
    param          mm_parse.readimportbody.owner u64 
    local          mm_parse.readimportbody.pos i64 
    local          mm_parse.readimportbody.fflang i64 
    procentry                 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    pop            mm_parse.readimportbody.pos i64 
#19081: 
    setargs                   0 0
    callproc       &mm_parse.skipsemi 
    push           &mm_decls.lx 
    pushptr                   u8 
    switch         #19082     66 157
    opnd           #19083     
#19082: 
    switchlabel    #19084     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19085     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19086     
    switchlabel    #19086     
    switchlabel    #19083     
    switchlabel    #19087     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19088     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19089     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19090     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19083     
    switchlabel    #19087     
    switchlabel    #19091     
    endswitch                 
#19091: 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    pop            mm_parse.readimportbody.fflang i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           129        i64 
    casejumpeq     #19092     i64 0
    push           130        i64 
    casejumpeq     #19092     i64 0
    popstack                  i64 
    jump           #19093     
#19092: 
    setargs                   3 0
    push           mm_parse.readimportbody.fflang i64 
    push           0          i64 
    push           mm_parse.readimportbody.owner u64 
    callproc       &mm_parse.readprocdecl 
    jump           #19094     
#19093: 
#19094: 
    jump           #19095     
#19086: 
    setargs                   3 0
    push           0          i64 
    push           0          i64 
    push           mm_parse.readimportbody.owner u64 
    callproc       &mm_parse.readprocdecl 
    jump           #19095     
#19088: 
    setargs                   2 0
    push           1          i64 
    push           mm_parse.readimportbody.owner u64 
    callproc       &mm_parse.readtypedef 
    jump           #19095     
#19090: 
    setargs                   2 0
    push           1          i64 
    push           mm_parse.readimportbody.owner u64 
    callproc       &mm_parse.readconstdef 
    jump           #19095     
#19087: 
    setargs                   2 0
    push           1          i64 
    push           mm_parse.readimportbody.owner u64 
    callproc       &mm_parse.readclassdef 
    jump           #19095     
#19089: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   5 0
    push           143        i64 
    push           7          i64 
    push           0          i64 
    push           1          i64 
    push           mm_parse.readimportbody.owner u64 
    callproc       &mm_parse.readvardef 
    jump           #19095     
#19084: 
    jump           #19096     
    jump           #19095     
#19085: 
    jump           #19096     
    jump           #19095     
#19083: 
    setargs                   1 0
    push           "symbol"   u64 
    callproc       &mm_lex.ps 
    setargs                   1 0
    push           "Not allowed in importmodule" u64 
    callproc       &mm_support.serror 
#19095: 
    jump           #19081     
#19096: 
#19097: 
    retproc                   
End


Proc mm_parse.readequivfield: u64
    param          mm_parse.readequivfield.owner u64 
    local          mm_parse.readequivfield.p u64 
    local          mm_parse.readequivfield.d u64 
    procentry                 
    setargs                   1 0
    push           79         i64 
    callproc       &mm_parse.checksymbol 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    pop            mm_parse.readequivfield.d u64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.readequivfield.owner u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_parse.readequivfield.p u64 
    jump           #19099     
#19100: 
    setargs                   2 0
    push           mm_parse.readequivfield.d u64 
    pushptr                   u64 
    push           mm_parse.readequivfield.p u64 
    pushptr                   u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #19101     i64 
    push           mm_parse.readequivfield.p u64 
    setret                    u64 
    jump           #19102     
#19101: 
    push           mm_parse.readequivfield.p u64 
    push           32         
    pushptroff                u64 1 0
    pop            mm_parse.readequivfield.p u64 
#19099: 
    push           mm_parse.readequivfield.p u64 
    jumptrue       #19100     u64 
#19103: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mm_parse.readequivfield.d u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Can't find @ field" u64 
    callproc       &mm_support.serror 
    push           0          u64 
    setret                    u64 
    jump           #19102     
#19102: 
    retfn                     u64 
End


Proc mm_parse.readrefproc: i64
    param          mm_parse.readrefproc.owner u64 
    param          mm_parse.readrefproc.typedefx i64 
    param          mm_parse.readrefproc.fflang i64 
    local          mm_parse.readrefproc.kwd i64 
    local          mm_parse.readrefproc.prettype i64 
    local          mm_parse.readrefproc.m i64 
    local          mm_parse.readrefproc.varparams i64 
    local          mm_parse.readrefproc.nparams i64 
    local          mm_parse.readrefproc.retmodes block:32 
    local          mm_parse.readrefproc.paramlist u64 
    local          mm_parse.readrefproc.stproc u64 
    local          mm_parse.readrefproc.rettype2 i64 
    local          mm_parse.readrefproc.rettype3 i64 
    local          mm_parse.readrefproc.nretvalues i64 
    local          mm_parse.readrefproc.name u64 
    procentry                 
    push           &mm_decls.lx 
    pushptr                   u8 
    pop            mm_parse.readrefproc.kwd i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           0          u64 
    pop            mm_parse.readrefproc.paramlist u64 
    push           0          i64 
    pop            mm_parse.readrefproc.prettype i64 
    push           0          i64 
    pop            mm_parse.readrefproc.nretvalues i64 
    setargs                   0 0
    callfn         &mm_lib.nextautotype u64 
    pop            mm_parse.readrefproc.name u64 
    setargs                   3 0
    push           4          i64 
    setargs                   1 0
    push           mm_parse.readrefproc.name u64 
    callfn         &mm_lex.addnamestr u64 
    push           mm_decls.stmodule u64 
    callfn         &mm_lib.getduplnameptr u64 
    pop            mm_parse.readrefproc.stproc u64 
    setargs                   2 0
    push           mm_parse.readrefproc.stproc u64 
    push           mm_decls.stmodule u64 
    callproc       &mm_lib.adddef 
    push           0          i64 
    push           &mm_parse.readrefproc.retmodes 
    push           1          i64 
    popptroff                 i64 8 -8
    push           mm_parse.readrefproc.kwd i64 
    push           130        i64 
    jumpne         #19105     i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           12         i64 
    jumpne         #19106     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           13         i64 
    jumpeq         #19107     i64 
    setargs                   5 0
    push           &mm_parse.readrefproc.nparams 
    push           &mm_parse.readrefproc.varparams 
    push           0          i64 
    push           mm_parse.readrefproc.stproc u64 
    push           mm_parse.readrefproc.owner u64 
    callfn         &mm_parse.readparams u64 
    pop            mm_parse.readrefproc.paramlist u64 
    setargs                   1 0
    push           13         i64 
    callproc       &mm_parse.checksymbol 
#19107: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           7          i64 
    jumpeq         #19108     i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           11         i64 
    jumpne         #19109     i64 
#19108: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    push           &mm_parse.readrefproc.retmodes 
    push           mm_parse.readrefproc.stproc u64 
    callfn         &mm_parse.readreturntype i64 
    pop            mm_parse.readrefproc.nretvalues i64 
    jump           #19110     
#19109: 
    push           &mm_decls.typestarterset 
    push           &mm_decls.lx 
    pushptr                   u8 
    pushptroff                u8 1 0
    jumptrue       #19111     i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           79         i64 
    jumpne         #19112     i64 
#19111: 
    setargs                   2 0
    push           &mm_parse.readrefproc.retmodes 
    push           mm_parse.readrefproc.stproc u64 
    callfn         &mm_parse.readreturntype i64 
    pop            mm_parse.readrefproc.nretvalues i64 
#19112: 
#19110: 
    jump           #19113     
#19106: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           7          i64 
    jumpeq         #19114     i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           11         i64 
    jumpne         #19115     i64 
#19114: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    push           &mm_parse.readrefproc.retmodes 
    push           mm_parse.readrefproc.stproc u64 
    callfn         &mm_parse.readreturntype i64 
    pop            mm_parse.readrefproc.nretvalues i64 
#19115: 
#19113: 
    push           mm_parse.readrefproc.nretvalues i64 
    push           0          i64 
    jumpne         #19116     i64 
    setargs                   1 0
    push           "Function needs return type" u64 
    callproc       &mm_support.serror 
#19116: 
    push           mm_parse.readrefproc.nretvalues i64 
    jumpfalse      #19117     i64 
    push           mm_parse.readrefproc.kwd i64 
    push           129        i64 
    jumpne         #19117     i64 
    setargs                   1 0
    push           "Proc can't return value" u64 
    callproc       &mm_support.serror 
#19117: 
    jump           #19118     
#19105: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           12         i64 
    jumpne         #19119     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           13         i64 
    jumpeq         #19120     i64 
    setargs                   5 0
    push           &mm_parse.readrefproc.nparams 
    push           &mm_parse.readrefproc.varparams 
    push           0          i64 
    push           mm_parse.readrefproc.stproc u64 
    push           mm_parse.readrefproc.owner u64 
    callfn         &mm_parse.readparams u64 
    pop            mm_parse.readrefproc.paramlist u64 
    setargs                   1 0
    push           13         i64 
    callproc       &mm_parse.checksymbol 
#19120: 
    setargs                   0 0
    callproc       &mm_lex.lex 
#19119: 
    push           &mm_decls.typestarterset 
    push           &mm_decls.lx 
    pushptr                   u8 
    pushptroff                u8 1 0
    jumptrue       #19121     i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           7          i64 
    jumpeq         #19121     i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           11         i64 
    jumpne         #19122     i64 
#19121: 
    setargs                   1 0
    push           "proc can't have ret value" u64 
    callproc       &mm_support.serror 
#19122: 
#19118: 
    setargs                   6 0
    push           mm_parse.readrefproc.typedefx i64 
    push           mm_parse.readrefproc.prettype i64 
    push           mm_parse.readrefproc.kwd i64 
    push           mm_parse.readrefproc.paramlist u64 
    push           mm_parse.readrefproc.stproc u64 
    push           mm_parse.readrefproc.owner u64 
    callfn         &mm_lib.createrefprocmode i64 
    pop            mm_parse.readrefproc.m i64 
    setargs                   3 0
    push           mm_parse.readrefproc.stproc u64 
    push           72         
    addrefoff                 u64 1 0
    push           &mm_parse.readrefproc.retmodes 
    push           1          i64 
    pushptroff                i64 8 -8
    push           mm_parse.readrefproc.owner u64 
    callproc       &mm_lib.storemode 
    push           mm_parse.readrefproc.nretvalues i64 
    push           mm_parse.readrefproc.stproc u64 
    push           116        
    popptroff                 u8 1 0
    push           mm_parse.readrefproc.stproc u64 
    push           &mm_decls.ttnamedef 
    push           mm_parse.readrefproc.m i64 
    popptroff                 u64 8 0
    push           mm_parse.readrefproc.fflang i64 
    push           mm_parse.readrefproc.stproc u64 
    push           115        
    popptroff                 u8 1 0
    push           mm_parse.readrefproc.m i64 
    setret                    i64 
    jump           #19123     
#19123: 
    retfn                     i64 
End


Proc mm_parse.pushproc:
    param          mm_parse.pushproc.p u64 
    procentry                 
    push           mm_parse.nprocstack i64 
    push           10         i64 
    jumplt         #19125     i64 
    setargs                   1 0
    push           "Too many nested proc" u64 
    callproc       &mm_support.serror 
#19125: 
    push           mm_decls.currproc u64 
    push           &mm_parse.procstack 
    push           &mm_parse.nprocstack 
    incrload                  i64 1
    popptroff                 u64 8 -8
    push           mm_parse.pushproc.p u64 
    pop            mm_decls.currproc u64 
#19126: 
    retproc                   
End


Proc mm_parse.popproc:
    procentry                 
    push           mm_parse.nprocstack i64 
    jumpfalse      #19128     i64 
    push           &mm_parse.procstack 
    push           &mm_parse.nprocstack 
    loaddecr                  i64 1
    pushptroff                u64 8 -8
    pop            mm_decls.currproc u64 
    jump           #19129     
#19128: 
    push           mm_decls.stmodule u64 
    pop            mm_decls.currproc u64 
#19129: 
#19130: 
    retproc                   
End


Proc mm_parse.readassemline: u64
    procentry                 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           1          i64 
    callfn         &mm_parse.assembleline u64 
    setret                    u64 
    jump           #19132     
#19132: 
    retfn                     u64 
End


Proc mm_parse.readassemblock: u64
    local          mm_parse.readassemblock.ulist u64 
    local          mm_parse.readassemblock.ulistx u64 
    local          mm_parse.readassemblock.u u64 
    procentry                 
    push           0          u64 
    store          mm_parse.readassemblock.ulistx u64 
    pop            mm_parse.readassemblock.ulist u64 
#19134: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           66         i64 
    casejumpeq     #19135     i64 0
    push           104        i64 
    casejumpeq     #19136     i64 0
    push           6          i64 
    casejumpeq     #19137     i64 0
    popstack                  i64 
    jump           #19138     
#19135: 
    setargs                   1 0
    push           "EOF: 'End' missing in Assembler code" u64 
    callproc       &mm_support.serror 
    jump           #19139     
#19136: 
    setargs                   4 0
    push           0          i64 
    push           0          i64 
    push           175        i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    callproc       &mm_parse.checkend 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #19140     
    jump           #19139     
#19137: 
    jump           #19139     
#19138: 
    setargs                   1 0
    push           0          i64 
    callfn         &mm_parse.assembleline u64 
    pop            mm_parse.readassemblock.u u64 
    setargs                   3 0
    push           mm_parse.readassemblock.u u64 
    push           &mm_parse.readassemblock.ulistx 
    push           &mm_parse.readassemblock.ulist 
    callproc       &mm_lib.addlistunit 
#19139: 
    jump           #19134     
#19140: 
    setargs                   1 0
    push           mm_parse.readassemblock.ulist u64 
    callfn         &mm_parse.makeblock u64 
    setret                    u64 
    jump           #19141     
#19141: 
    retfn                     u64 
End


Proc mm_parse.assembleline: u64
    param          mm_parse.assembleline.oneline i64 
    local          mm_parse.assembleline.dlist u64 
    local          mm_parse.assembleline.dlistx u64 
    local          mm_parse.assembleline.p u64 
    local          mm_parse.assembleline.pname u64 
    local          mm_parse.assembleline.q u64 
    local          mm_parse.assembleline.name u64 
    local          mm_parse.assembleline.opc i64 
    local          mm_parse.assembleline.noperands i64 
    local          mm_parse.assembleline.stname u64 
    procentry                 
    push           0          u64 
    store          mm_parse.assembleline.dlistx u64 
    pop            mm_parse.assembleline.dlist u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           79         i64 
    jumpne         #19143     i64 
    push           &mm_decls.nextlx 
    pushptr                   u8 
    push           7          i64 
    setjumpeq      #19144     i64 
    push           8          i64 
    setjumpne      #19143     i64 
#19144: 
    setargs                   1 0
    push           109        i64 
    callfn         &mm_lib.createunit0 u64 
    pop            mm_parse.assembleline.p u64 
    setargs                   3 0
    push           17         i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           mm_decls.currproc u64 
    callfn         &mm_lib.getduplnameptr u64 
    pop            mm_parse.assembleline.stname u64 
    push           mm_parse.assembleline.stname u64 
    push           mm_parse.assembleline.p u64 
    push           16         
    popptroff                 u64 1 0
    setargs                   2 0
    push           mm_parse.assembleline.stname u64 
    push           mm_decls.currproc u64 
    callproc       &mm_lib.adddef 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.assembleline.oneline i64 
    jumpfalse      #19145     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
#19145: 
    push           mm_parse.assembleline.p u64 
    setret                    u64 
    jump           #19146     
    jump           #19147     
#19143: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           32         i64 
    jumpne         #19148     i64 
    setargs                   1 0
    push           79         i64 
    callproc       &mm_parse.lexchecksymbol 
    setargs                   1 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    callfn         &mm_lib.createname u64 
    pop            mm_parse.assembleline.pname u64 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    push           mm_parse.assembleline.pname u64 
    push           4          
    popptroff                 u32 1 0
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           6          i64 
    jumpeq         #19149     i64 
#19150: 
    setargs                   3 0
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    push           &mm_parse.assembleline.dlistx 
    push           &mm_parse.assembleline.dlist 
    callproc       &mm_lib.addlistunit 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpne         #19151     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
#19151: 
#19152: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           6          i64 
    setjumpeq      #19153     i64 
    push           66         i64 
    setjumpne      #19150     i64 
#19153: 
#19154: 
#19149: 
    setargs                   3 0
    push           mm_parse.assembleline.dlist u64 
    push           mm_parse.assembleline.pname u64 
    push           9          i64 
    callfn         &mm_lib.createunit2 u64 
    setret                    u64 
    jump           #19146     
#19148: 
#19147: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           43         i64 
    casejumpeq     #19155     i64 0
    push           44         i64 
    casejumpeq     #19156     i64 0
    push           45         i64 
    casejumpeq     #19157     i64 0
    push           54         i64 
    casejumpeq     #19158     i64 0
    popstack                  i64 
    jump           #19159     
#19155: 
    push           39         i64 
    pop            mm_parse.assembleline.opc i64 
!doop::
#19160: 
    setargs                   1 0
    push           8          i64 
    callfn         &mm_lib.createunit0 u64 
    pop            mm_parse.assembleline.p u64 
    push           mm_parse.assembleline.opc i64 
    push           mm_parse.assembleline.p u64 
    push           40         
    popptroff                 i16 1 0
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #19161     
#19156: 
    push           40         i64 
    pop            mm_parse.assembleline.opc i64 
    jump           #19160     
    jump           #19161     
#19157: 
    push           41         i64 
    pop            mm_parse.assembleline.opc i64 
    jump           #19160     
    jump           #19161     
#19158: 
    push           52         i64 
    pop            mm_parse.assembleline.opc i64 
    jump           #19160     
    jump           #19161     
#19159: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           79         i64 
    jumpne         #19162     i64 
    setargs                   1 0
    push           8          i64 
    callfn         &mm_lib.createunit0 u64 
    pop            mm_parse.assembleline.p u64 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    push           90         i64 
    casejumpeq     #19163     i64 0
    push           86         i64 
    casejumpeq     #19164     i64 0
    push           87         i64 
    casejumpeq     #19165     i64 0
    push           88         i64 
    casejumpeq     #19166     i64 0
    popstack                  i64 
    jump           #19167     
#19163: 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           80         
    pushptroff                i32 1 0
    push           mm_parse.assembleline.p u64 
    push           40         
    popptroff                 i16 1 0
    jump           #19168     
#19164: 
    push           27         i64 
    push           mm_parse.assembleline.p u64 
    push           40         
    popptroff                 i16 1 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           80         
    pushptroff                i32 1 0
    push           mm_parse.assembleline.p u64 
    push           45         
    popptroff                 u8 1 0
    jump           #19168     
#19165: 
    push           59         i64 
    push           mm_parse.assembleline.p u64 
    push           40         
    popptroff                 i16 1 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           80         
    pushptroff                i32 1 0
    push           mm_parse.assembleline.p u64 
    push           45         
    popptroff                 u8 1 0
    jump           #19168     
#19166: 
    push           16         i64 
    push           mm_parse.assembleline.p u64 
    push           40         
    popptroff                 i16 1 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           80         
    pushptroff                i32 1 0
    push           mm_parse.assembleline.p u64 
    push           45         
    popptroff                 u8 1 0
    jump           #19168     
#19167: 
    setargs                   1 0
    push           "ASM"      u64 
    callproc       &mm_lex.ps 
    setargs                   1 0
    push           "x64 op expected" u64 
    callproc       &mm_support.serror 
#19168: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #19169     
#19162: 
    setargs                   1 0
    push           "ASM"      u64 
    callproc       &mm_lex.ps 
    setargs                   1 0
    push           "ASM???"   u64 
    callproc       &mm_support.serror 
#19169: 
#19161: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           6          i64 
    setjumpeq      #19170     i64 
    push           66         i64 
    setjumpeqx     #19170     i64 
    push           0          i64 
    pop            mm_parse.assembleline.noperands i64 
#19171: 
    setargs                   0 0
    callfn         &mm_parse.readassemopnd u64 
    pop            mm_parse.assembleline.q u64 
    push           &mm_parse.assembleline.noperands 
    incr                      i64 1
    push           mm_parse.assembleline.noperands i64 
    push           1          i64 
    casejumpeq     #19172     i64 0
    push           2          i64 
    casejumpeq     #19173     i64 0
    push           3          i64 
    casejumpeq     #19174     i64 0
    popstack                  i64 
    jump           #19175     
#19172: 
    push           mm_parse.assembleline.q u64 
    push           mm_parse.assembleline.p u64 
    push           16         
    popptroff                 u64 1 0
    push           1          i64 
    push           mm_parse.assembleline.p u64 
    push           1          
    popptroff                 u8 1 0
    jump           #19176     
#19173: 
    push           mm_parse.assembleline.q u64 
    push           mm_parse.assembleline.p u64 
    push           24         
    popptroff                 u64 1 0
    push           1          i64 
    push           mm_parse.assembleline.p u64 
    push           2          
    popptroff                 u8 1 0
    jump           #19176     
#19174: 
    push           mm_parse.assembleline.q u64 
    push           mm_parse.assembleline.p u64 
    push           32         
    popptroff                 u64 1 0
    push           1          i64 
    push           mm_parse.assembleline.p u64 
    push           3          
    popptroff                 u8 1 0
    jump           #19176     
#19175: 
    setargs                   1 0
    push           "Too many asm opnds" u64 
    callproc       &mm_support.serror 
#19176: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpeq         #19177     i64 
    jump           #19178     
    jump           #19179     
#19177: 
    setargs                   0 0
    callproc       &mm_lex.lex 
#19179: 
    jump           #19171     
#19178: 
#19170: 
    setargs                   1 0
    push           6          i64 
    callproc       &mm_parse.checksymbol 
    push           mm_parse.assembleline.p u64 
    setret                    u64 
    jump           #19146     
#19146: 
    retfn                     u64 
End


Proc mm_parse.readassemopnd: u64
    local          mm_parse.readassemopnd.p u64 
    local          mm_parse.readassemopnd.reg i64 
    local          mm_parse.readassemopnd.regix i64 
    local          mm_parse.readassemopnd.scale i64 
    local          mm_parse.readassemopnd.prefixmode i64 
    local          mm_parse.readassemopnd.pcode u64 
    procentry                 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           70         i64 
    casejumpeq     #19181     i64 0
    push           72         i64 
    casejumpeq     #19181     i64 0
    push           79         i64 
    casejumpeq     #19182     i64 0
    push           30         i64 
    casejumpeq     #19183     i64 0
    push           31         i64 
    casejumpeq     #19183     i64 0
    push           91         i64 
    casejumpeq     #19184     i64 0
    push           14         i64 
    casejumpeq     #19185     i64 0
    popstack                  i64 
    jump           #19186     
#19181: 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    setret                    u64 
    jump           #19187     
    jump           #19188     
#19182: 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           79         
    pushptroff                u8 1 0
    push           82         i64 
    casejumpeq     #19189     i64 0
    push           83         i64 
    casejumpeq     #19190     i64 0
    popstack                  i64 
    jump           #19191     
#19189: 
    setargs                   1 0
    push           10         i64 
    callfn         &mm_lib.createunit0 u64 
    pop            mm_parse.readassemopnd.p u64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           80         
    pushptroff                i32 1 0
    push           mm_parse.readassemopnd.p u64 
    push           40         
    popptroff                 i32 1 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           122        
    pushptroff                i16 1 0
    push           mm_parse.readassemopnd.p u64 
    push           44         
    popptroff                 u8 1 0
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.readassemopnd.p u64 
    setret                    u64 
    jump           #19187     
    jump           #19192     
#19190: 
    setargs                   1 0
    push           11         i64 
    callfn         &mm_lib.createunit0 u64 
    pop            mm_parse.readassemopnd.p u64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           80         
    pushptroff                i32 1 0
    push           mm_parse.readassemopnd.p u64 
    push           40         
    popptroff                 i32 1 0
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.readassemopnd.p u64 
    setret                    u64 
    jump           #19187     
    jump           #19192     
#19191: 
#19192: 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    setret                    u64 
    jump           #19187     
    jump           #19188     
#19183: 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    setret                    u64 
    jump           #19187     
    jump           #19188     
#19184: 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    push           21         i64 
    casejumpeq     #19193     i64 0
    push           22         i64 
    casejumpeq     #19193     i64 0
    push           23         i64 
    casejumpeq     #19193     i64 0
    push           2          i64 
    casejumpeq     #19193     i64 0
    popstack                  i64 
    jump           #19194     
#19193: 
    jump           #19195     
#19194: 
    setargs                   1 0
    push           "Bad prefix" u64 
    callproc       &mm_support.serror 
#19195: 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    pop            mm_parse.readassemopnd.prefixmode i64 
    setargs                   1 0
    push           14         i64 
    callproc       &mm_parse.lexchecksymbol 
    jump           #19196     
    jump           #19188     
#19185: 
    push           0          i64 
    pop            mm_parse.readassemopnd.prefixmode i64 
!gotprefix::
#19196: 
    push           0          i64 
    store          mm_parse.readassemopnd.regix i64 
    pop            mm_parse.readassemopnd.reg i64 
    push           0          u64 
    pop            mm_parse.readassemopnd.pcode u64 
    push           1          i64 
    pop            mm_parse.readassemopnd.scale i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           79         i64 
    jumpne         #19197     i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           79         
    pushptroff                u8 1 0
    push           82         i64 
    jumpne         #19197     i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           80         
    pushptroff                i32 1 0
    pop            mm_parse.readassemopnd.reg i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
#19197: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           30         i64 
    jumpne         #19198     i64 
    push           &mm_decls.nextlx 
    pushptr                   u8 
    push           79         i64 
    jumpne         #19198     i64 
    push           &mm_decls.nextlx 
    push           8          
    pushptroff                u64 1 0
    push           79         
    pushptroff                u8 1 0
    push           82         i64 
    jumpne         #19198     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
#19198: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           79         i64 
    jumpne         #19199     i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           79         
    pushptroff                u8 1 0
    push           82         i64 
    jumpne         #19199     i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           80         
    pushptroff                i32 1 0
    pop            mm_parse.readassemopnd.regix i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
#19199: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           32         i64 
    jumpne         #19200     i64 
    setargs                   1 0
    push           70         i64 
    callproc       &mm_parse.lexchecksymbol 
    push           &mm_decls.lx 
    push           8          
    pushptroff                i64 1 0
    store          mm_parse.readassemopnd.scale i64 
    push           1          i64 
    casejumpeq     #19201     i64 0
    push           2          i64 
    casejumpeq     #19201     i64 0
    push           4          i64 
    casejumpeq     #19201     i64 0
    push           8          i64 
    casejumpeq     #19201     i64 0
    popstack                  i64 
    jump           #19202     
#19201: 
    jump           #19203     
#19202: 
    setargs                   1 0
    push           "Bad scale" u64 
    callproc       &mm_support.serror 
#19203: 
    setargs                   0 0
    callproc       &mm_lex.lex 
#19200: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           30         i64 
    casejumpeq     #19204     i64 0
    push           31         i64 
    casejumpeq     #19204     i64 0
    push           70         i64 
    casejumpeq     #19204     i64 0
    push           79         i64 
    casejumpeq     #19204     i64 0
    push           12         i64 
    casejumpeq     #19204     i64 0
    push           176        i64 
    casejumpeq     #19204     i64 0
    popstack                  i64 
    jump           #19205     
#19204: 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readassemopnd.pcode u64 
    jump           #19206     
#19205: 
#19206: 
    setargs                   1 0
    push           15         i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    push           mm_parse.readassemopnd.pcode u64 
    push           12         i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readassemopnd.p u64 
    push           mm_parse.readassemopnd.regix i64 
    push           0          i64 
    jumpne         #19207     i64 
    push           mm_parse.readassemopnd.scale i64 
    push           1          i64 
    jumple         #19207     i64 
    push           mm_parse.readassemopnd.reg i64 
    pop            mm_parse.readassemopnd.regix i64 
    push           0          i64 
    pop            mm_parse.readassemopnd.reg i64 
#19207: 
    push           mm_parse.readassemopnd.pcode u64 
    push           0          u64 
    jumpne         #19208     u64 
    push           mm_parse.readassemopnd.reg i64 
    push           mm_parse.readassemopnd.regix i64 
    add                       i64 
    push           0          i64 
    jumpne         #19208     i64 
    setargs                   1 0
    push           "Empty []" u64 
    callproc       &mm_support.serror 
#19208: 
    push           mm_parse.readassemopnd.reg i64 
    push           mm_parse.readassemopnd.p u64 
    push           40         
    popptroff                 u8 1 0
    push           mm_parse.readassemopnd.regix i64 
    push           mm_parse.readassemopnd.p u64 
    push           41         
    popptroff                 u8 1 0
    push           mm_parse.readassemopnd.scale i64 
    push           mm_parse.readassemopnd.p u64 
    push           42         
    popptroff                 u8 1 0
    push           mm_parse.readassemopnd.prefixmode i64 
    push           mm_parse.readassemopnd.p u64 
    push           43         
    popptroff                 u8 1 0
    push           mm_parse.readassemopnd.p u64 
    setret                    u64 
    jump           #19187     
    jump           #19188     
#19186: 
    setargs                   1 0
    push           "BAD OPND" u64 
    callproc       &mm_lex.ps 
    setargs                   1 0
    push           "ASM: Bad operand?" u64 
    callproc       &mm_support.serror 
#19188: 
    push           0          u64 
    setret                    u64 
    jump           #19187     
#19187: 
    retfn                     u64 
End


Proc mm_parse.makeastring: u64
    local          mm_parse.makeastring.ulist u64 
    local          mm_parse.makeastring.ulistx u64 
    local          mm_parse.makeastring.p u64 
    local          mm_parse.makeastring.pconst u64 
    local          mm_parse.makeastring.s u64 
    local          mm_parse.makeastring.length i64 
    local          mm_parse.makeastring.av_1 i64 
    procentry                 
    push           0          u64 
    store          mm_parse.makeastring.ulistx u64 
    pop            mm_parse.makeastring.ulist u64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    pop            mm_parse.makeastring.s u64 
    push           mm_lex.astringlength i64 
    pop            mm_parse.makeastring.length i64 
#19210: 
    push           mm_lex.astringlength i64 
    pop            mm_parse.makeastring.av_1 i64 
    push           mm_parse.makeastring.av_1 i64 
    push           0          i64 
    jumple         #19211     i64 
#19212: 
    setargs                   2 0
    push           4          i64 
    push           mm_parse.makeastring.s u64 
    pushptr                   u8 
    callfn         &mm_lib.createconstunit u64 
    pop            mm_parse.makeastring.pconst u64 
    setargs                   3 0
    push           mm_parse.makeastring.pconst u64 
    push           &mm_parse.makeastring.ulistx 
    push           &mm_parse.makeastring.ulist 
    callproc       &mm_lib.addlistunit 
    push           &mm_parse.makeastring.s 
    incr                      u64 1
#19213: 
    to             #19212     
    opnd           mm_parse.makeastring.av_1 
#19211: 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    push           90         i64 
    jumpne         #19214     i64 
    setargs                   2 0
    push           4          i64 
    push           0          u64 
    callfn         &mm_lib.createconstunit u64 
    pop            mm_parse.makeastring.pconst u64 
    setargs                   3 0
    push           mm_parse.makeastring.pconst u64 
    push           &mm_parse.makeastring.ulistx 
    push           &mm_parse.makeastring.ulist 
    callproc       &mm_lib.addlistunit 
    push           &mm_parse.makeastring.length 
    incr                      i64 1
#19214: 
    setargs                   2 0
    push           mm_parse.makeastring.ulist u64 
    push           19         i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.makeastring.p u64 
    push           mm_parse.makeastring.length i64 
    push           mm_parse.makeastring.p u64 
    push           40         
    popptroff                 u32 1 0
    push           mm_parse.makeastring.p u64 
    setret                    u64 
    jump           #19215     
#19215: 
    retfn                     u64 
End


Proc mm_parse.readreturntype: i64
    param          mm_parse.readreturntype.owner u64 
    param          mm_parse.readreturntype.retmodes u64 
    local          mm_parse.readreturntype.nretvalues i64 
    procentry                 
    setargs                   2 0
    push           0          i64 
    push           mm_parse.readreturntype.owner u64 
    callfn         &mm_parse.readtypespec i64 
    push           mm_parse.readreturntype.retmodes u64 
    push           1          i64 
    popptroff                 i64 8 -8
    push           1          i64 
    pop            mm_parse.readreturntype.nretvalues i64 
    jump           #19217     
#19218: 
    push           mm_parse.readreturntype.nretvalues i64 
    push           4          i64 
    jumplt         #19219     i64 
    setargs                   1 0
    push           "Too many return values" u64 
    callproc       &mm_support.serror 
#19219: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    push           0          i64 
    push           mm_parse.readreturntype.owner u64 
    callfn         &mm_parse.readtypespec i64 
    push           mm_parse.readreturntype.retmodes u64 
    push           &mm_parse.readreturntype.nretvalues 
    incrload                  i64 1
    popptroff                 i64 8 -8
#19217: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpeq         #19218     i64 
#19220: 
    push           mm_parse.readreturntype.nretvalues i64 
    setret                    i64 
    jump           #19221     
#19221: 
    retfn                     i64 
End


Proc mm_parse.readset: u64
    local          mm_parse.readset.length i64 
    local          mm_parse.readset.nkeyvalues i64 
    local          mm_parse.readset.oldirp i64 
    local          mm_parse.readset.p u64 
    local          mm_parse.readset.ulist u64 
    local          mm_parse.readset.ulistx u64 
    procentry                 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           15         i64 
    casejumpeq     #19223     i64 0
    push           7          i64 
    casejumpeq     #19224     i64 0
    popstack                  i64 
    jump           #19225     
#19223: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    push           0          u64 
    push           21         i64 
    callfn         &mm_lib.createunit1 u64 
    setret                    u64 
    jump           #19226     
    jump           #19227     
#19224: 
    setargs                   1 0
    push           15         i64 
    callproc       &mm_parse.lexchecksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    push           0          u64 
    push           22         i64 
    callfn         &mm_lib.createunit1 u64 
    setret                    u64 
    jump           #19226     
    jump           #19227     
#19225: 
#19227: 
    push           0          i64 
    pop            mm_parse.readset.length i64 
    push           0          i64 
    pop            mm_parse.readset.nkeyvalues i64 
    push           0          u64 
    store          mm_parse.readset.ulistx u64 
    pop            mm_parse.readset.ulist u64 
#19228: 
    push           mm_parse.inreadprint i64 
    pop            mm_parse.readset.oldirp i64 
    push           0          i64 
    pop            mm_parse.inreadprint i64 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readset.p u64 
    push           mm_parse.readset.oldirp i64 
    pop            mm_parse.inreadprint i64 
    push           mm_parse.readset.p u64 
    pushptr                   u8 
    push           28         i64 
    jumpne         #19229     i64 
    push           &mm_parse.readset.nkeyvalues 
    incr                      i64 1
#19229: 
    push           &mm_parse.readset.length 
    incr                      i64 1
    setargs                   3 0
    push           mm_parse.readset.p u64 
    push           &mm_parse.readset.ulistx 
    push           &mm_parse.readset.ulist 
    callproc       &mm_lib.addlistunit 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    casejumpeq     #19230     i64 0
    push           6          i64 
    casejumpeq     #19231     i64 0
    push           15         i64 
    casejumpeq     #19232     i64 0
    popstack                  i64 
    jump           #19233     
#19230: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           15         i64 
    jumpne         #19234     i64 
    jump           #19235     
#19234: 
    jump           #19236     
#19231: 
    setargs                   1 0
    push           15         i64 
    callproc       &mm_parse.lexchecksymbol 
    jump           #19235     
    jump           #19236     
#19232: 
    jump           #19235     
    jump           #19236     
#19233: 
    setargs                   1 0
    push           "readset?" u64 
    callproc       &mm_support.serror 
#19236: 
    setargs                   0 0
    callproc       &mm_parse.skipsemi 
    jump           #19228     
#19235: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.readset.nkeyvalues i64 
    jumpfalse      #19237     i64 
    push           mm_parse.readset.length i64 
    push           mm_parse.readset.nkeyvalues i64 
    jumple         #19238     i64 
    setargs                   1 0
    push           "dict: mixed elements" u64 
    callproc       &mm_support.serror 
#19238: 
    setargs                   2 0
    push           mm_parse.readset.ulist u64 
    push           22         i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readset.p u64 
    jump           #19239     
#19237: 
    setargs                   2 0
    push           mm_parse.readset.ulist u64 
    push           21         i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readset.p u64 
#19239: 
    push           mm_parse.readset.length i64 
    push           mm_parse.readset.p u64 
    push           40         
    popptroff                 u32 1 0
    push           mm_parse.readset.p u64 
    setret                    u64 
    jump           #19226     
#19226: 
    retfn                     u64 
End


Proc mm_parse.istypestarter: i64
    procentry                 
    push           &mm_decls.typestarterset 
    push           &mm_decls.lx 
    pushptr                   u8 
    pushptroff                u8 1 0
    jumpfalse      #19241     i64 
    push           1          i64 
    setret                    i64 
    jump           #19242     
#19241: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           79         i64 
    jumpne         #19243     i64 
    push           &mm_decls.nextlx 
    pushptr                   u8 
    push           79         i64 
    casejumpeq     #19244     i64 0
    push           24         i64 
    casejumpeq     #19245     i64 0
    popstack                  i64 
    jump           #19246     
#19244: 
    push           1          i64 
    setret                    i64 
    jump           #19242     
    jump           #19247     
#19245: 
    push           1          i64 
    setret                    i64 
    jump           #19242     
    jump           #19247     
#19246: 
#19247: 
#19243: 
    push           0          i64 
    setret                    i64 
    jump           #19242     
#19242: 
    retfn                     i64 
End


Proc mm_parse.readassignment: u64
    local          mm_parse.readassignment.p u64 
    local          mm_parse.readassignment.pos i64 
    local          mm_parse.readassignment.opc i64 
    procentry                 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           79         i64 
    jumpne         #19249     i64 
    push           &mm_decls.nextlx 
    pushptr                   u8 
    push           9          i64 
    jumpne         #19249     i64 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    pop            mm_parse.readassignment.pos i64 
    setargs                   1 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    callfn         &mm_lib.createname u64 
    pop            mm_parse.readassignment.p u64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   3 0
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    push           mm_parse.readassignment.p u64 
    push           29         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readassignment.p u64 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    push           mm_parse.readassignment.p u64 
    push           4          
    popptroff                 u32 1 0
    push           mm_parse.readassignment.p u64 
    setret                    u64 
    jump           #19250     
#19249: 
    setargs                   0 0
    callfn         &mm_parse.readorterms u64 
    pop            mm_parse.readassignment.p u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    store          mm_parse.readassignment.opc i64 
    push           9          i64 
    jumpne         #19251     i64 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    pop            mm_parse.readassignment.pos i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           177        i64 
    jumpne         #19252     i64 
    setargs                   2 0
    push           mm_parse.readassignment.p u64 
    push           142        i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readassignment.p u64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #19253     
#19252: 
    setargs                   3 0
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    push           mm_parse.readassignment.p u64 
    push           29         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readassignment.p u64 
#19253: 
    push           mm_parse.readassignment.pos i64 
    push           mm_parse.readassignment.p u64 
    push           4          
    popptroff                 u32 1 0
#19251: 
    push           mm_parse.readassignment.p u64 
    setret                    u64 
    jump           #19250     
#19250: 
    retfn                     u64 
End


Proc mm_parse.readorterms: u64
    local          mm_parse.readorterms.p u64 
    local          mm_parse.readorterms.pos i64 
    procentry                 
    setargs                   0 0
    callfn         &mm_parse.readandterms u64 
    pop            mm_parse.readorterms.p u64 
    jump           #19255     
#19256: 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    pop            mm_parse.readorterms.pos i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           9          i64 
    jumpne         #19257     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   3 0
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    push           mm_parse.readorterms.p u64 
    push           38         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readorterms.p u64 
    push           173        i64 
    push           mm_parse.readorterms.p u64 
    push           60         
    popptroff                 u8 1 0
    push           mm_parse.readorterms.pos i64 
    push           mm_parse.readorterms.p u64 
    push           4          
    popptroff                 u32 1 0
    jump           #19258     
#19257: 
    setargs                   3 0
    setargs                   0 0
    callfn         &mm_parse.readandterms u64 
    push           mm_parse.readorterms.p u64 
    push           15         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readorterms.p u64 
    push           125        i64 
    push           mm_parse.readorterms.p u64 
    push           60         
    popptroff                 u8 1 0
    push           mm_parse.readorterms.pos i64 
    push           mm_parse.readorterms.p u64 
    push           4          
    popptroff                 u32 1 0
#19255: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           44         i64 
    jumpeq         #19256     i64 
#19258: 
    push           mm_parse.readorterms.p u64 
    setret                    u64 
    jump           #19259     
#19259: 
    retfn                     u64 
End


Proc mm_parse.readandterms: u64
    local          mm_parse.readandterms.p u64 
    local          mm_parse.readandterms.pos i64 
    procentry                 
    setargs                   0 0
    callfn         &mm_parse.readcmpterms u64 
    pop            mm_parse.readandterms.p u64 
    jump           #19261     
#19262: 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    pop            mm_parse.readandterms.pos i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           9          i64 
    jumpne         #19263     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   3 0
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    push           mm_parse.readandterms.p u64 
    push           38         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readandterms.p u64 
    push           172        i64 
    push           mm_parse.readandterms.p u64 
    push           60         
    popptroff                 u8 1 0
    push           mm_parse.readandterms.pos i64 
    push           mm_parse.readandterms.p u64 
    push           4          
    popptroff                 u32 1 0
    jump           #19264     
#19263: 
    setargs                   3 0
    setargs                   0 0
    callfn         &mm_parse.readcmpterms u64 
    push           mm_parse.readandterms.p u64 
    push           14         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readandterms.p u64 
    push           124        i64 
    push           mm_parse.readandterms.p u64 
    push           60         
    popptroff                 u8 1 0
    push           mm_parse.readandterms.pos i64 
    push           mm_parse.readandterms.p u64 
    push           4          
    popptroff                 u32 1 0
#19261: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           43         i64 
    jumpeq         #19262     i64 
#19264: 
    push           mm_parse.readandterms.p u64 
    setret                    u64 
    jump           #19265     
#19265: 
    retfn                     u64 
End


Proc mm_parse.readcmpterms: u64
    local          mm_parse.readcmpterms.p u64 
    local          mm_parse.readcmpterms.pos i64 
    local          mm_parse.readcmpterms.opc i64 
    local          mm_parse.readcmpterms.n i64 
    local          mm_parse.readcmpterms.ulist u64 
    local          mm_parse.readcmpterms.ulistx u64 
    local          mm_parse.readcmpterms.q u64 
    local          mm_parse.readcmpterms.genops block:4 
    procentry                 
    setargs                   0 0
    callfn         &mm_parse.readinterms u64 
    pop            mm_parse.readcmpterms.p u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           46         i64 
    setjumpeq      #19267     i64 
    push           47         i64 
    setjumpeqx     #19267     i64 
    push           mm_parse.readcmpterms.p u64 
    setret                    u64 
    jump           #19268     
#19267: 
    push           mm_parse.readcmpterms.p u64 
    store          mm_parse.readcmpterms.ulistx u64 
    pop            mm_parse.readcmpterms.ulist u64 
    setargs                   2 0
    push           mm_parse.readcmpterms.p u64 
    push           35         i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readcmpterms.p u64 
    push           0          i64 
    pop            mm_parse.readcmpterms.n i64 
    push           &mm_parse.readcmpterms.genops 
    clear                     block:4 
#19269: 
    push           &mm_decls.lx 
    pushptr                   u8 
    switch         #19270     46 47
    opnd           #19271     
#19270: 
    switchlabel    #19272     
    switchlabel    #19272     
    endswitch                 
#19272: 
    push           &mm_parse.readcmpterms.n 
    incr                      i64 1
    push           mm_parse.readcmpterms.n i64 
    push           4          i64 
    jumple         #19273     i64 
    setargs                   1 0
    push           "cmpchain: Too many items" u64 
    callproc       &mm_support.serror 
#19273: 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    push           &mm_parse.readcmpterms.genops 
    push           mm_parse.readcmpterms.n i64 
    popptroff                 u8 1 -1
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    pop            mm_parse.readcmpterms.pos i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.readinterms u64 
    pop            mm_parse.readcmpterms.q u64 
    setargs                   3 0
    push           mm_parse.readcmpterms.q u64 
    push           &mm_parse.readcmpterms.ulistx 
    push           &mm_parse.readcmpterms.ulist 
    callproc       &mm_lib.addlistunit 
    push           mm_parse.readcmpterms.pos i64 
    push           mm_parse.readcmpterms.q u64 
    push           4          
    popptroff                 u32 1 0
    jump           #19269     
#19271: 
    jump           #19274     
    jump           #19269     
#19274: 
    push           mm_parse.readcmpterms.n i64 
    push           1          i64 
    jumpne         #19275     i64 
    push           34         i64 
    push           mm_parse.readcmpterms.p u64 
    push           0          
    popptroff                 u8 1 0
    push           mm_parse.readcmpterms.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_parse.readcmpterms.q u64 
    push           &mm_parse.readcmpterms.genops 
    push           1          i64 
    pushptroff                u8 1 -1
    push           mm_parse.readcmpterms.p u64 
    push           60         
    popptroff                 u8 1 0
    push           mm_parse.readcmpterms.q u64 
    push           8          
    pushptroff                u64 1 0
    push           mm_parse.readcmpterms.p u64 
    push           24         
    popptroff                 u64 1 0
    push           0          u64 
    push           mm_parse.readcmpterms.q u64 
    push           8          
    popptroff                 u64 1 0
    push           1          i64 
    push           mm_parse.readcmpterms.p u64 
    push           2          
    popptroff                 u8 1 0
    jump           #19276     
#19275: 
    push           mm_parse.readcmpterms.genops block:4 
    push           mm_parse.readcmpterms.p u64 
    push           40         
    popptroff                 block:4 1 0
#19276: 
    push           mm_parse.readcmpterms.p u64 
    setret                    u64 
    jump           #19268     
#19268: 
    retfn                     u64 
End


Proc mm_parse.readinterms: u64
    local          mm_parse.readinterms.p u64 
    local          mm_parse.readinterms.pos i64 
    local          mm_parse.readinterms.opc i64 
    procentry                 
    setargs                   0 0
    callfn         &mm_parse.readrangeterm u64 
    pop            mm_parse.readinterms.p u64 
#19278: 
    push           &mm_decls.lx 
    pushptr                   u8 
    switch         #19279     50 51
    opnd           #19280     
#19279: 
    switchlabel    #19281     
    switchlabel    #19281     
    endswitch                 
#19281: 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    pop            mm_parse.readinterms.opc i64 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    pop            mm_parse.readinterms.pos i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   3 0
    setargs                   0 0
    callfn         &mm_parse.readrangeterm u64 
    push           mm_parse.readinterms.p u64 
    push           36         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readinterms.p u64 
    push           mm_parse.readinterms.opc i64 
    push           mm_parse.readinterms.p u64 
    push           60         
    popptroff                 u8 1 0
    push           mm_parse.readinterms.pos i64 
    push           mm_parse.readinterms.p u64 
    push           4          
    popptroff                 u32 1 0
    jump           #19278     
#19280: 
    jump           #19282     
    jump           #19278     
#19282: 
    push           mm_parse.readinterms.p u64 
    setret                    u64 
    jump           #19283     
#19283: 
    retfn                     u64 
End


Proc mm_parse.readrangeterm: u64
    local          mm_parse.readrangeterm.p u64 
    local          mm_parse.readrangeterm.pos i64 
    local          mm_parse.readrangeterm.opc i64 
    procentry                 
    setargs                   0 0
    callfn         &mm_parse.readaddterms u64 
    pop            mm_parse.readrangeterm.p u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           27         i64 
    jumpne         #19285     i64 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    pop            mm_parse.readrangeterm.pos i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   3 0
    setargs                   0 0
    callfn         &mm_parse.readaddterms u64 
    push           mm_parse.readrangeterm.p u64 
    push           20         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readrangeterm.p u64 
    push           mm_parse.readrangeterm.pos i64 
    push           mm_parse.readrangeterm.p u64 
    push           4          
    popptroff                 u32 1 0
#19285: 
    push           mm_parse.readrangeterm.p u64 
    setret                    u64 
    jump           #19286     
#19286: 
    retfn                     u64 
End


Proc mm_parse.readaddterms: u64
    local          mm_parse.readaddterms.p u64 
    local          mm_parse.readaddterms.pos i64 
    local          mm_parse.readaddterms.sym i64 
    local          mm_parse.readaddterms.tag i64 
    local          mm_parse.readaddterms.genop i64 
    procentry                 
    setargs                   0 0
    callfn         &mm_parse.readmulterms u64 
    pop            mm_parse.readaddterms.p u64 
#19288: 
    push           &mm_decls.lx 
    pushptr                   u8 
    store          mm_parse.readaddterms.sym i64 
    switch         #19289     30 42
    opnd           #19290     
#19289: 
    switchlabel    #19291     
    switchlabel    #19291     
    switchlabel    #19290     
    switchlabel    #19290     
    switchlabel    #19290     
    switchlabel    #19290     
    switchlabel    #19291     
    switchlabel    #19291     
    switchlabel    #19291     
    switchlabel    #19290     
    switchlabel    #19290     
    switchlabel    #19291     
    switchlabel    #19291     
    endswitch                 
#19291: 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    pop            mm_parse.readaddterms.pos i64 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    pop            mm_parse.readaddterms.genop i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           9          i64 
    jumpne         #19292     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   3 0
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    push           mm_parse.readaddterms.p u64 
    push           38         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readaddterms.p u64 
    push           &mm_tables.symbolgentoops 
    push           mm_parse.readaddterms.sym i64 
    pushptroff                u8 1 -1
    push           mm_parse.readaddterms.p u64 
    push           60         
    popptroff                 u8 1 0
    push           mm_parse.readaddterms.pos i64 
    push           mm_parse.readaddterms.p u64 
    push           4          
    popptroff                 u32 1 0
    jump           #19293     
#19292: 
    setargs                   3 0
    setargs                   0 0
    callfn         &mm_parse.readmulterms u64 
    push           mm_parse.readaddterms.p u64 
    push           36         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readaddterms.p u64 
    push           &mm_tables.symbolgenops 
    push           mm_parse.readaddterms.sym i64 
    pushptroff                u8 1 -1
    push           mm_parse.readaddterms.p u64 
    push           60         
    popptroff                 u8 1 0
    push           mm_parse.readaddterms.pos i64 
    push           mm_parse.readaddterms.p u64 
    push           4          
    popptroff                 u32 1 0
    jump           #19288     
#19290: 
    jump           #19293     
    jump           #19288     
#19293: 
    push           mm_parse.readaddterms.p u64 
    setret                    u64 
    jump           #19294     
#19294: 
    retfn                     u64 
End


Proc mm_parse.readmulterms: u64
    local          mm_parse.readmulterms.p u64 
    local          mm_parse.readmulterms.pos i64 
    local          mm_parse.readmulterms.sym i64 
    procentry                 
    setargs                   0 0
    callfn         &mm_parse.readpowerterms u64 
    pop            mm_parse.readmulterms.p u64 
#19296: 
    push           &mm_decls.lx 
    pushptr                   u8 
    store          mm_parse.readmulterms.sym i64 
    switch         #19297     32 40
    opnd           #19298     
#19297: 
    switchlabel    #19299     
    switchlabel    #19299     
    switchlabel    #19299     
    switchlabel    #19299     
    switchlabel    #19298     
    switchlabel    #19298     
    switchlabel    #19298     
    switchlabel    #19299     
    switchlabel    #19299     
    endswitch                 
#19299: 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    pop            mm_parse.readmulterms.pos i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           9          i64 
    jumpne         #19300     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   3 0
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    push           mm_parse.readmulterms.p u64 
    push           38         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readmulterms.p u64 
    push           &mm_tables.symbolgentoops 
    push           mm_parse.readmulterms.sym i64 
    pushptroff                u8 1 -1
    push           mm_parse.readmulterms.p u64 
    push           60         
    popptroff                 u8 1 0
    push           mm_parse.readmulterms.pos i64 
    push           mm_parse.readmulterms.p u64 
    push           4          
    popptroff                 u32 1 0
    jump           #19301     
#19300: 
    setargs                   3 0
    setargs                   0 0
    callfn         &mm_parse.readpowerterms u64 
    push           mm_parse.readmulterms.p u64 
    push           36         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readmulterms.p u64 
    push           &mm_tables.symbolgenops 
    push           mm_parse.readmulterms.sym i64 
    pushptroff                u8 1 -1
    push           mm_parse.readmulterms.p u64 
    push           60         
    popptroff                 u8 1 0
    push           mm_parse.readmulterms.pos i64 
    push           mm_parse.readmulterms.p u64 
    push           4          
    popptroff                 u32 1 0
    jump           #19296     
#19298: 
    jump           #19301     
    jump           #19296     
#19301: 
    push           mm_parse.readmulterms.p u64 
    setret                    u64 
    jump           #19302     
#19302: 
    retfn                     u64 
End


Proc mm_parse.readpowerterms: u64
    local          mm_parse.readpowerterms.p u64 
    local          mm_parse.readpowerterms.pos i64 
    procentry                 
    setargs                   0 0
    callfn         &mm_parse.readterm2 u64 
    pop            mm_parse.readpowerterms.p u64 
    jump           #19304     
#19305: 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    pop            mm_parse.readpowerterms.pos i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   3 0
    setargs                   0 0
    callfn         &mm_parse.readpowerterms u64 
    push           mm_parse.readpowerterms.p u64 
    push           36         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readpowerterms.p u64 
    push           151        i64 
    push           mm_parse.readpowerterms.p u64 
    push           60         
    popptroff                 u8 1 0
    push           mm_parse.readpowerterms.pos i64 
    push           mm_parse.readpowerterms.p u64 
    push           4          
    popptroff                 u32 1 0
#19304: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           48         i64 
    jumpeq         #19305     i64 
#19306: 
    push           mm_parse.readpowerterms.p u64 
    setret                    u64 
    jump           #19307     
#19307: 
    retfn                     u64 
End


Proc mm_parse.readterm2: u64
    local          mm_parse.readterm2.p u64 
    local          mm_parse.readterm2.q u64 
    local          mm_parse.readterm2.r u64 
    local          mm_parse.readterm2.pbyte u64 
    local          mm_parse.readterm2.a u64 
    local          mm_parse.readterm2.oldipl i64 
    local          mm_parse.readterm2.opc i64 
    local          mm_parse.readterm2.oldinrp i64 
    local          mm_parse.readterm2.pos i64 
    local          mm_parse.readterm2.shift i64 
    local          mm_parse.readterm2.t i64 
    procentry                 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    pop            mm_parse.readterm2.pos i64 
    setargs                   0 0
    callfn         &mm_parse.readterm u64 
    pop            mm_parse.readterm2.p u64 
#19309: 
    push           &mm_decls.lx 
    pushptr                   u8 
    switch         #19310     2 69
    opnd           #19311     
#19310: 
    switchlabel    #19312     
    switchlabel    #19311     
    switchlabel    #19313     
    switchlabel    #19311     
    switchlabel    #19311     
    switchlabel    #19314     
    switchlabel    #19311     
    switchlabel    #19311     
    switchlabel    #19311     
    switchlabel    #19311     
    switchlabel    #19315     
    switchlabel    #19311     
    switchlabel    #19316     
    switchlabel    #19311     
    switchlabel    #19311     
    switchlabel    #19311     
    switchlabel    #19317     
    switchlabel    #19311     
    switchlabel    #19311     
    switchlabel    #19311     
    switchlabel    #19311     
    switchlabel    #19311     
    switchlabel    #19311     
    switchlabel    #19311     
    switchlabel    #19311     
    switchlabel    #19311     
    switchlabel    #19311     
    switchlabel    #19311     
    switchlabel    #19311     
    switchlabel    #19311     
    switchlabel    #19311     
    switchlabel    #19311     
    switchlabel    #19311     
    switchlabel    #19311     
    switchlabel    #19311     
    switchlabel    #19311     
    switchlabel    #19311     
    switchlabel    #19311     
    switchlabel    #19311     
    switchlabel    #19311     
    switchlabel    #19311     
    switchlabel    #19311     
    switchlabel    #19311     
    switchlabel    #19311     
    switchlabel    #19311     
    switchlabel    #19311     
    switchlabel    #19311     
    switchlabel    #19311     
    switchlabel    #19311     
    switchlabel    #19311     
    switchlabel    #19311     
    switchlabel    #19311     
    switchlabel    #19311     
    switchlabel    #19311     
    switchlabel    #19311     
    switchlabel    #19311     
    switchlabel    #19311     
    switchlabel    #19311     
    switchlabel    #19311     
    switchlabel    #19311     
    switchlabel    #19311     
    switchlabel    #19311     
    switchlabel    #19311     
    switchlabel    #19311     
    switchlabel    #19311     
    switchlabel    #19311     
    switchlabel    #19311     
    switchlabel    #19318     
    endswitch                 
#19315: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.inreadprint i64 
    pop            mm_parse.readterm2.oldinrp i64 
    push           0          i64 
    pop            mm_parse.inreadprint i64 
    setargs                   2 0
    push           1          i64 
    push           1          i64 
    callfn         &mm_parse.readslist u64 
    pop            mm_parse.readterm2.q u64 
    setargs                   1 0
    push           13         i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.readterm2.p u64 
    pushptr                   u8 
    push           98         i64 
    jumpne         #19319     i64 
    push           mm_parse.readterm2.q u64 
    push           mm_parse.readterm2.p u64 
    push           16         
    popptroff                 u64 1 0
    push           1          i64 
    push           mm_parse.readterm2.p u64 
    push           1          
    popptroff                 u8 1 0
    jump           #19320     
#19319: 
    setargs                   3 0
    push           mm_parse.readterm2.q u64 
    push           mm_parse.readterm2.p u64 
    push           31         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readterm2.p u64 
#19320: 
    push           mm_parse.readterm2.oldinrp i64 
    pop            mm_parse.inreadprint i64 
    setargs                   1 0
    push           mm_parse.readterm2.p u64 
    callfn         &mm_parse.readcondsuffix u64 
    pop            mm_parse.readterm2.p u64 
    jump           #19309     
#19317: 
    setargs                   2 0
    push           mm_parse.readterm2.p u64 
    push           57         i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readterm2.p u64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #19309     
#19316: 
    setargs                   2 0
    push           0          i64 
    push           mm_parse.readterm2.p u64 
    callfn         &mm_parse.readindex u64 
    pop            mm_parse.readterm2.p u64 
    jump           #19309     
#19312: 
    setargs                   1 0
    push           mm_parse.readterm2.p u64 
    callfn         &mm_parse.readdotsuffix u64 
    pop            mm_parse.readterm2.p u64 
    jump           #19309     
#19314: 
    push           mm_parse.inreadprint i64 
    jumpfalse      #19321     i64 
    jump           #19322     
#19321: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readterm2.q u64 
    setargs                   3 0
    push           mm_parse.readterm2.q u64 
    push           mm_parse.readterm2.p u64 
    startmult                 
    push           mm_parse.inparamlist i64 
    jumpfalse      #19323     i64 
    push           27         i64 
    resetmult                 
    jump           #19324     
#19323: 
    push           28         i64 
    endmult                   
#19324: 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readterm2.p u64 
    jump           #19309     
#19318: 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    push           153        i64 
    casejumpeq     #19325     i64 0
    push           154        i64 
    casejumpeq     #19326     i64 0
    popstack                  i64 
    jump           #19327     
#19325: 
    push           157        i64 
    pop            mm_parse.readterm2.opc i64 
    jump           #19328     
#19326: 
    push           158        i64 
    pop            mm_parse.readterm2.opc i64 
    jump           #19328     
#19327: 
#19328: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    push           mm_parse.readterm2.p u64 
    push           40         i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readterm2.p u64 
    push           mm_parse.readterm2.opc i64 
    push           mm_parse.readterm2.p u64 
    push           60         
    popptroff                 u8 1 0
    jump           #19309     
#19313: 
    setargs                   1 0
    push           14         i64 
    callproc       &mm_parse.lexchecksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readterm2.q u64 
    push           mm_parse.readterm2.q u64 
    pushptr                   u8 
    push           20         i64 
    jumpne         #19329     i64 
    setargs                   3 0
    push           mm_parse.readterm2.q u64 
    push           mm_parse.readterm2.p u64 
    push           55         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readterm2.p u64 
    jump           #19330     
#19329: 
    setargs                   3 0
    push           mm_parse.readterm2.q u64 
    push           mm_parse.readterm2.p u64 
    push           56         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readterm2.p u64 
#19330: 
    setargs                   1 0
    push           15         i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #19309     
#19311: 
    jump           #19322     
    jump           #19309     
#19322: 
    push           mm_parse.readterm2.pos i64 
    push           mm_parse.readterm2.p u64 
    push           4          
    popptroff                 u32 1 0
    push           mm_parse.readterm2.p u64 
    setret                    u64 
    jump           #19331     
#19331: 
    retfn                     u64 
End


Proc mm_parse.readterm: u64
    local          mm_parse.readterm.p u64 
    local          mm_parse.readterm.q u64 
    local          mm_parse.readterm.r u64 
    local          mm_parse.readterm.pbyte u64 
    local          mm_parse.readterm.a u64 
    local          mm_parse.readterm.oldipl i64 
    local          mm_parse.readterm.opc i64 
    local          mm_parse.readterm.oldinrp i64 
    local          mm_parse.readterm.pos i64 
    local          mm_parse.readterm.shift i64 
    local          mm_parse.readterm.t i64 
    local          mm_parse.readterm.length i64 
    local          mm_parse.readterm.aa u128 
    procentry                 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    pop            mm_parse.readterm.pos i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    switch         #19333     4 177
    opnd           #19334     
#19333: 
    switchlabel    #19335     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19336     
    switchlabel    #19334     
    switchlabel    #19337     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19338     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19339     
    switchlabel    #19339     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19339     
    switchlabel    #19339     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19340     
    switchlabel    #19341     
    switchlabel    #19339     
    switchlabel    #19339     
    switchlabel    #19339     
    switchlabel    #19339     
    switchlabel    #19339     
    switchlabel    #19334     
    switchlabel    #19339     
    switchlabel    #19339     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19342     
    switchlabel    #19343     
    switchlabel    #19344     
    switchlabel    #19343     
    switchlabel    #19345     
    switchlabel    #19334     
    switchlabel    #19346     
    switchlabel    #19347     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19348     
    switchlabel    #19334     
    switchlabel    #19349     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19350     
    switchlabel    #19334     
    switchlabel    #19350     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19350     
    switchlabel    #19351     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19352     
    switchlabel    #19353     
    switchlabel    #19353     
    switchlabel    #19354     
    switchlabel    #19334     
    switchlabel    #19355     
    switchlabel    #19356     
    switchlabel    #19334     
    switchlabel    #19357     
    switchlabel    #19358     
    switchlabel    #19359     
    switchlabel    #19334     
    switchlabel    #19360     
    switchlabel    #19361     
    switchlabel    #19362     
    switchlabel    #19334     
    switchlabel    #19363     
    switchlabel    #19353     
    switchlabel    #19353     
    switchlabel    #19364     
    switchlabel    #19365     
    switchlabel    #19366     
    switchlabel    #19367     
    switchlabel    #19367     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19350     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19368     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19369     
    switchlabel    #19370     
    switchlabel    #19371     
    switchlabel    #19372     
    switchlabel    #19373     
    switchlabel    #19374     
    switchlabel    #19375     
    switchlabel    #19334     
    switchlabel    #19334     
    switchlabel    #19376     
    switchlabel    #19377     
    switchlabel    #19378     
    switchlabel    #19379     
    switchlabel    #19380     
    switchlabel    #19381     
    endswitch                 
#19348: 
    push           &mm_decls.nextlx 
    pushptr                   u8 
    push           21         i64 
    jumpne         #19382     i64 
    setargs                   0 0
    callfn         &mm_parse.readcast u64 
    pop            mm_parse.readterm.p u64 
    jump           #19383     
#19382: 
    setargs                   1 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    callfn         &mm_lib.createname u64 
    pop            mm_parse.readterm.p u64 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    push           mm_parse.readterm.p u64 
    push           4          
    popptroff                 u32 1 0
    setargs                   0 0
    callproc       &mm_lex.lex 
#19383: 
    jump           #19384     
#19343: 
    setargs                   2 0
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    callfn         &mm_lib.createconstunit u64 
    pop            mm_parse.readterm.p u64 
    push           1          i64 
    push           mm_parse.readterm.p u64 
    push           62         
    popptroff                 u8 1 0
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #19384     
#19346: 
    setargs                   2 0
    push           -1         i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    callfn         &mm_lib.createstringconstunit u64 
    pop            mm_parse.readterm.p u64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #19384     
#19347: 
    setargs                   0 0
    callfn         &mm_parse.makeastring u64 
    pop            mm_parse.readterm.p u64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #19384     
#19344: 
    setargs                   1 0
    push           "DEC CONST" u64 
    callproc       &mm_support.serror 
    jump           #19384     
#19345: 
    setargs                   1 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    callfn         &strlen    i64 
    pop            mm_parse.readterm.length i64 
    push           mm_parse.readterm.length i64 
    push           16         i64 
    jumple         #19385     i64 
    setargs                   1 0
    push           "Char const too long" u64 
    callproc       &mm_support.serror 
#19385: 
    push           mm_parse.readterm.length i64 
    push           8          i64 
    jumple         #19386     i64 
    push           0          i64 
    widenw                    u128 i64 
    pop            mm_parse.readterm.aa u128 
    setargs                   3 0
    push           mm_parse.readterm.length u64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           &mm_parse.readterm.aa 
    callproc       &memcpy    
    setargs                   2 0
    push           3          i64 
    push           &mm_parse.readterm.aa 
    callfn         &mm_lib.createconstunit u64 
    pop            mm_parse.readterm.p u64 
    jump           #19387     
#19386: 
    push           0          u64 
    pop            mm_parse.readterm.a u64 
    push           mm_parse.readterm.length i64 
    jumpfalse      #19388     i64 
    setargs                   3 0
    push           mm_parse.readterm.length u64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           &mm_parse.readterm.a 
    callproc       &memcpy    
#19388: 
    setargs                   2 0
    push           1          i64 
    push           mm_parse.readterm.a u64 
    callfn         &mm_lib.createconstunit u64 
    pop            mm_parse.readterm.p u64 
#19387: 
    push           1          i64 
    push           mm_parse.readterm.p u64 
    push           62         
    popptroff                 u8 1 0
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #19384     
#19336: 
    setargs                   0 0
    callfn         &mm_parse.readlbrack u64 
    pop            mm_parse.readterm.p u64 
    jump           #19384     
#19350: 
    setargs                   0 0
    callfn         &mm_parse.readcast u64 
    pop            mm_parse.readterm.p u64 
    jump           #19384     
#19339: 
    setargs                   0 0
    callfn         &mm_parse.readopc u64 
    pop            mm_parse.readterm.p u64 
    jump           #19384     
#19340: 
    push           &mm_decls.nextlx 
    pushptr                   u8 
    push           9          i64 
    jumpne         #19389     i64 
    setargs                   0 0
    callfn         &mm_parse.readopc u64 
    pop            mm_parse.readterm.p u64 
    jump           #19390     
#19389: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    setargs                   0 0
    callfn         &mm_parse.readterm2 u64 
    push           17         i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readterm.p u64 
    push           132        i64 
    push           mm_parse.readterm.p u64 
    push           60         
    popptroff                 u8 1 0
#19390: 
    jump           #19384     
#19341: 
    push           &mm_decls.nextlx 
    pushptr                   u8 
    push           9          i64 
    jumpne         #19391     i64 
    setargs                   0 0
    callfn         &mm_parse.readopc u64 
    pop            mm_parse.readterm.p u64 
    jump           #19392     
#19391: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    setargs                   0 0
    callfn         &mm_parse.readterm2 u64 
    push           18         i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readterm.p u64 
    push           133        i64 
    push           mm_parse.readterm.p u64 
    push           60         
    popptroff                 u8 1 0
#19392: 
    jump           #19384     
#19337: 
    setargs                   0 0
    callfn         &mm_parse.readset u64 
    pop            mm_parse.readterm.p u64 
    jump           #19384     
#19342: 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    pop            mm_parse.readterm.opc i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    setargs                   0 0
    callfn         &mm_parse.readterm2 u64 
    push           40         i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readterm.p u64 
    push           mm_parse.readterm.opc i64 
    push           mm_parse.readterm.p u64 
    push           60         
    popptroff                 u8 1 0
    jump           #19384     
#19365: 
    setargs                   0 0
    callfn         &mm_parse.readsprint u64 
    pop            mm_parse.readterm.p u64 
    jump           #19384     
#19367: 
    setargs                   0 0
    callfn         &mm_parse.readsread u64 
    pop            mm_parse.readterm.p u64 
    jump           #19384     
#19338: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    setargs                   0 0
    callfn         &mm_parse.readterm2 u64 
    push           59         i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readterm.p u64 
    push           mm_parse.readterm.p u64 
    push           16         
    pushptroff                u64 1 0
    pushptr                   u8 
    push           31         i64 
    jumpne         #19393     i64 
    push           mm_parse.readterm.p u64 
    push           16         
    pushptroff                u64 1 0
    push           24         
    pushptroff                u64 1 0
    jumpfalse      #19394     u64 
    setargs                   1 0
    push           "Params not allowed" u64 
    callproc       &mm_support.serror 
#19394: 
    push           mm_parse.readterm.p u64 
    push           16         
    pushptroff                u64 1 0
    push           16         
    pushptroff                u64 1 0
    push           mm_parse.readterm.p u64 
    push           16         
    popptroff                 u64 1 0
#19393: 
    jump           #19384     
#19335: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    setargs                   0 0
    callfn         &mm_parse.readterm2 u64 
    push           60         i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readterm.p u64 
    jump           #19384     
#19373: 
    setargs                   0 0
    callfn         &mm_parse.readcompilervar u64 
    pop            mm_parse.readterm.p u64 
    jump           #19384     
#19378: 
    setargs                   2 0
    push           4          i64 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    callfn         &mm_lib.createconstunit u64 
    pop            mm_parse.readterm.p u64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #19384     
#19374: 
    push           mm_parse.intabledata i64 
    jumpfalse      #19395     i64 
    setargs                   2 0
    push           -1         i64 
    push           mm_parse.tabledataname u64 
    callfn         &mm_lib.createstringconstunit u64 
    pop            mm_parse.readterm.p u64 
    jump           #19396     
#19395: 
    push           mm_parse.ndollar i64 
    push           0          i64 
    jumpgt         #19397     i64 
    setargs                   1 0
    push           "[$] No array" u64 
    callproc       &mm_support.serror 
#19397: 
    setargs                   2 0
    push           &mm_parse.dollarstack 
    push           mm_parse.ndollar i64 
    pushptroff                u64 8 -8
    push           37         i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readterm.p u64 
    push           203        i64 
    push           mm_parse.readterm.p u64 
    push           60         
    popptroff                 u8 1 0
#19396: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #19384     
#19371: 
    setargs                   0 0
    callfn         &mm_parse.readcastx u64 
    pop            mm_parse.readterm.p u64 
    jump           #19384     
#19372: 
    setargs                   1 0
    push           12         i64 
    callproc       &mm_parse.lexchecksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           65         i64 
    callfn         &mm_lib.createunit0 u64 
    pop            mm_parse.readterm.p u64 
    setargs                   2 0
    push           0          i64 
    push           mm_decls.currproc u64 
    callfn         &mm_parse.readtypespec i64 
    push           mm_parse.readterm.p u64 
    push           16         
    popptroff                 i64 1 0
    setargs                   1 0
    push           13         i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #19384     
#19376: 
    setargs                   1 0
    push           12         i64 
    callproc       &mm_parse.lexchecksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readterm.p u64 
    setargs                   1 0
    push           5          i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readterm.q u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           13         i64 
    jumpne         #19398     i64 
    push           mm_parse.readterm.q u64 
    pushptr                   u8 
    push           20         i64 
    jumpne         #19398     i64 
    push           mm_parse.readterm.q u64 
    push           24         
    pushptroff                u64 1 0
    pop            mm_parse.readterm.r u64 
    push           mm_parse.readterm.q u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_parse.readterm.q u64 
    jump           #19399     
#19398: 
    setargs                   1 0
    push           5          i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readterm.r u64 
    setargs                   1 0
    push           13         i64 
    callproc       &mm_parse.checksymbol 
#19399: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   3 0
    push           mm_parse.readterm.q u64 
    push           mm_parse.readterm.p u64 
    push           36         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readterm.q u64 
    push           116        i64 
    push           mm_parse.readterm.q u64 
    push           60         
    popptroff                 u8 1 0
    setargs                   3 0
    push           mm_parse.readterm.r u64 
    push           mm_parse.readterm.q u64 
    push           36         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readterm.p u64 
    push           115        i64 
    push           mm_parse.readterm.p u64 
    push           60         
    popptroff                 u8 1 0
    jump           #19384     
#19363: 
    setargs                   1 0
    push           108        i64 
    callfn         &mm_parse.readgoto u64 
    pop            mm_parse.readterm.p u64 
    jump           #19384     
#19351: 
    setargs                   0 0
    callfn         &mm_parse.readif u64 
    pop            mm_parse.readterm.p u64 
    jump           #19384     
#19352: 
    setargs                   0 0
    callfn         &mm_parse.readunless u64 
    pop            mm_parse.readterm.p u64 
    jump           #19384     
#19353: 
    setargs                   0 0
    callfn         &mm_parse.readswitchcase u64 
    pop            mm_parse.readterm.p u64 
    jump           #19384     
#19354: 
    setargs                   0 0
    callfn         &mm_parse.readrecase u64 
    pop            mm_parse.readterm.p u64 
    jump           #19384     
#19355: 
    setargs                   0 0
    callfn         &mm_parse.readfor u64 
    pop            mm_parse.readterm.p u64 
    jump           #19384     
#19356: 
    setargs                   0 0
    callfn         &mm_parse.readto u64 
    pop            mm_parse.readterm.p u64 
    jump           #19384     
#19357: 
    setargs                   0 0
    callfn         &mm_parse.readdo u64 
    pop            mm_parse.readterm.p u64 
    jump           #19384     
#19358: 
    setargs                   0 0
    callfn         &mm_parse.readwhile u64 
    pop            mm_parse.readterm.p u64 
    jump           #19384     
#19359: 
    setargs                   0 0
    callfn         &mm_parse.readrepeat u64 
    pop            mm_parse.readterm.p u64 
    jump           #19384     
#19362: 
    setargs                   0 0
    callfn         &mm_parse.readloopcontrol u64 
    pop            mm_parse.readterm.p u64 
    jump           #19384     
#19360: 
    setargs                   0 0
    callfn         &mm_parse.readreturn u64 
    pop            mm_parse.readterm.p u64 
    jump           #19384     
#19361: 
    setargs                   0 0
    callfn         &mm_parse.readstop u64 
    pop            mm_parse.readterm.p u64 
    jump           #19384     
#19364: 
    setargs                   0 0
    callfn         &mm_parse.readprint u64 
    pop            mm_parse.readterm.p u64 
    jump           #19384     
#19366: 
    setargs                   0 0
    callfn         &mm_parse.readread u64 
    pop            mm_parse.readterm.p u64 
    jump           #19384     
#19368: 
    setargs                   0 0
    callfn         &mm_parse.readtry u64 
    pop            mm_parse.readterm.p u64 
    jump           #19384     
#19369: 
    setargs                   0 0
    callfn         &mm_parse.readraise u64 
    pop            mm_parse.readterm.p u64 
    jump           #19384     
#19370: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    push           137        i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readterm.p u64 
    push           1          i64 
    pop            mm_parse.yieldseen i64 
    jump           #19384     
#19377: 
    setargs                   1 0
    push           12         i64 
    callproc       &mm_parse.lexchecksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readterm.p u64 
    setargs                   1 0
    push           5          i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readterm.q u64 
    setargs                   1 0
    push           13         i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   3 0
    push           mm_parse.readterm.q u64 
    push           mm_parse.readterm.p u64 
    push           119        i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readterm.p u64 
    jump           #19384     
#19375: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    push           139        i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readterm.p u64 
    jump           #19384     
#19379: 
    push           1          i64 
    push           mm_decls.currproc u64 
    push           112        
    popptroff                 u8 1 0
    push           1          i64 
    pop            mm_decls.assemmode i64 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #19400     i64 
    setargs                   0 0
    callfn         &mm_parse.readassemline u64 
    pop            mm_parse.readterm.p u64 
    jump           #19401     
#19400: 
    setargs                   0 0
    callfn         &mm_parse.readassemblock u64 
    pop            mm_parse.readterm.p u64 
#19401: 
    push           0          i64 
    pop            mm_decls.assemmode i64 
    jump           #19384     
#19380: 
    setargs                   1 0
    push           98         i64 
    callfn         &mm_lib.createunit0 u64 
    pop            mm_parse.readterm.p u64 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    push           mm_parse.readterm.p u64 
    push           40         
    popptroff                 i16 1 0
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #19384     
#19349: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    setargs                   0 0
    callfn         &mm_parse.readterm2 u64 
    push           13         i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readterm.p u64 
    jump           #19384     
#19381: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    setargs                   0 0
    callfn         &mm_parse.readterm2 u64 
    push           142        i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readterm.p u64 
    jump           #19384     
#19334: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &mm_tables.symbolnames 
    push           &mm_decls.lx 
    pushptr                   u8 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "LX.SYMBOL=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_decls.lx 
    pushptr                   u8 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "readterm?" u64 
    callproc       &mm_support.serror 
#19384: 
    push           mm_parse.readterm.pos i64 
    push           mm_parse.readterm.p u64 
    push           4          
    popptroff                 u32 1 0
    push           mm_parse.readterm.p u64 
    setret                    u64 
    jump           #19402     
#19402: 
    retfn                     u64 
End


Proc mm_parse.readxunit: u64
    procentry                 
    setargs                   1 0
    push           0          i64 
    callfn         &mm_parse.readsunit u64 
    setret                    u64 
    jump           #19404     
#19404: 
    retfn                     u64 
End


Proc mm_parse.readsunit: u64
    param          mm_parse.readsunit.inwhile i64 
    local          mm_parse.readsunit.pos i64 
    local          mm_parse.readsunit.m i64 
    local          mm_parse.readsunit.sym i64 
    local          mm_parse.readsunit.opc i64 
    local          mm_parse.readsunit.ulist u64 
    local          mm_parse.readsunit.ulistx u64 
    local          mm_parse.readsunit.p u64 
    local          mm_parse.readsunit.q u64 
    local          mm_parse.readsunit.r u64 
    local          mm_parse.readsunit.stname u64 
    procentry                 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    pop            mm_parse.readsunit.pos i64 
    push           0          u64 
    store          mm_parse.readsunit.ulistx u64 
    pop            mm_parse.readsunit.ulist u64 
#19406: 
    jump           #19407     
#19408: 
    setargs                   0 0
    callproc       &mm_lex.lex 
#19407: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           6          i64 
    jumpeq         #19408     i64 
#19409: 
    push           &mm_decls.lx 
    pushptr                   u8 
    switch         #19410     6 170
    opnd           #19411     
#19410: 
    switchlabel    #19412     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19413     
    switchlabel    #19414     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19413     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19415     
    switchlabel    #19411     
    switchlabel    #19416     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19417     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19414     
    switchlabel    #19411     
    switchlabel    #19414     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19414     
    switchlabel    #19411     
    switchlabel    #19413     
    switchlabel    #19413     
    switchlabel    #19413     
    switchlabel    #19413     
    switchlabel    #19413     
    switchlabel    #19411     
    switchlabel    #19413     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19413     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19418     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19413     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19419     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19420     
    switchlabel    #19420     
    switchlabel    #19411     
    switchlabel    #19421     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19422     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19414     
    switchlabel    #19423     
    switchlabel    #19423     
    switchlabel    #19414     
    switchlabel    #19411     
    switchlabel    #19414     
    switchlabel    #19424     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19425     
    switchlabel    #19426     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19421     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19427     
    switchlabel    #19411     
    switchlabel    #19413     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19411     
    switchlabel    #19428     
    endswitch                 
#19427: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           144        i64 
    setjumpeq      #19429     i64 
    push           143        i64 
    setjumpne      #19430     i64 
#19429: 
    push           &mm_decls.lx 
    pushptr                   u8 
    pop            mm_parse.readsunit.opc i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #19431     
#19430: 
    push           0          i64 
    pop            mm_parse.readsunit.opc i64 
#19431: 
    setargs                   5 0
    push           mm_parse.readsunit.opc i64 
    push           11         i64 
    push           1          i64 
    push           0          i64 
    push           mm_decls.currproc u64 
    callproc       &mm_parse.readvardef 
    jump           #19432     
#19420: 
    setargs                   3 0
    push           0          i64 
    push           0          i64 
    push           mm_decls.currproc u64 
    callproc       &mm_parse.readprocdef 
    jump           #19432     
#19414: 
    push           &mm_decls.nextlx 
    pushptr                   u8 
    push           12         i64 
    setjumpeq      #19433     i64 
    push           21         i64 
    setjumpeq      #19433     i64 
    push           2          i64 
    setjumpne      #19434     i64 
#19433: 
    jump           #19435     
    jump           #19436     
#19434: 
    push           0          i64 
    pop            mm_parse.readsunit.sym i64 
    jump           #19437     
#19436: 
    jump           #19432     
#19423: 
    push           &mm_decls.lx 
    pushptr                   u8 
    pop            mm_parse.readsunit.sym i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
!dovar::
#19437: 
    setargs                   5 0
    push           mm_parse.readsunit.sym i64 
    push           12         i64 
    push           0          i64 
    push           0          i64 
    push           mm_decls.currproc u64 
    callfn         &mm_parse.readvardef u64 
    pop            mm_parse.readsunit.q u64 
    jump           #19438     
#19439: 
    push           mm_parse.readsunit.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_parse.readsunit.r u64 
    push           0          u64 
    push           mm_parse.readsunit.q u64 
    push           8          
    popptroff                 u64 1 0
    setargs                   3 0
    push           mm_parse.readsunit.q u64 
    push           &mm_parse.readsunit.ulistx 
    push           &mm_parse.readsunit.ulist 
    callproc       &mm_lib.addlistunit 
    push           mm_parse.readsunit.r u64 
    pop            mm_parse.readsunit.q u64 
#19438: 
    push           mm_parse.readsunit.q u64 
    jumptrue       #19439     u64 
#19440: 
    jump           #19432     
#19422: 
    setargs                   2 0
    push           0          i64 
    push           mm_decls.currproc u64 
    callproc       &mm_parse.readtypedef 
    jump           #19432     
#19425: 
    setargs                   2 0
    push           0          i64 
    push           mm_decls.currproc u64 
    callproc       &mm_parse.readconstdef 
    jump           #19432     
#19421: 
    setargs                   2 0
    push           0          i64 
    push           mm_decls.currproc u64 
    callproc       &mm_parse.readclassdef 
    jump           #19432     
#19416: 
    setargs                   1 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    callproc       &mm_parse.adddocstring 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #19432     
#19426: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   3 0
    push           0          i64 
    push           0          i64 
    push           mm_decls.currproc u64 
    callproc       &mm_parse.readenumtype 
    jump           #19432     
#19424: 
    setargs                   2 0
    push           0          i64 
    push           mm_decls.currproc u64 
    callproc       &mm_parse.readmacrodef 
    jump           #19432     
#19428: 
    setargs                   2 0
    push           0          i64 
    push           mm_decls.currproc u64 
    callproc       &mm_parse.readtabledef 
    jump           #19432     
#19415: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mm_decls.currproc u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Unexpected EOF in proc" u64 
    callproc       &mm_support.serror 
    jump           #19432     
#19413: 
    jump           #19441     
    jump           #19432     
#19417: 
    push           &mm_decls.nextlx 
    pushptr                   u8 
    push           8          i64 
    casejumpeq     #19442     i64 0
    push           79         i64 
    casejumpeq     #19443     i64 0
    popstack                  i64 
    jump           #19444     
#19442: 
    setargs                   1 0
    push           109        i64 
    callfn         &mm_lib.createunit0 u64 
    pop            mm_parse.readsunit.p u64 
    setargs                   3 0
    push           17         i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           mm_decls.currproc u64 
    callfn         &mm_lib.getduplnameptr u64 
    pop            mm_parse.readsunit.stname u64 
    setargs                   2 0
    push           mm_parse.readsunit.stname u64 
    push           mm_decls.currproc u64 
    callproc       &mm_lib.adddef 
    push           mm_parse.readsunit.stname u64 
    push           mm_parse.readsunit.p u64 
    push           16         
    popptroff                 u64 1 0
    push           mm_parse.try_level i64 
    push           mm_parse.readsunit.p u64 
    push           40         
    popptroff                 i32 1 0
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           6          i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    setargs                   3 0
    push           mm_parse.readsunit.p u64 
    push           &mm_parse.readsunit.ulistx 
    push           &mm_parse.readsunit.ulist 
    callproc       &mm_lib.addlistunit 
    jump           #19445     
#19443: 
    push           143        i64 
    pop            mm_parse.readsunit.sym i64 
    jump           #19437     
    jump           #19435     
    jump           #19445     
#19444: 
    jump           #19435     
#19445: 
    jump           #19432     
#19418: 
    push           mm_parse.readsunit.inwhile i64 
    jumpfalse      #19446     i64 
    jump           #19441     
#19446: 
    jump           #19435     
    jump           #19432     
#19412: 
    jump           #19432     
#19419: 
    jump           #19441     
    jump           #19432     
#19411: 
!doexec::
#19435: 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readsunit.p u64 
!doexec2::
#19447: 
    push           mm_parse.readsunit.p u64 
    pushptr                   u8 
    push           3          i64 
    jumpne         #19448     i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           79         i64 
    jumpne         #19448     i64 
    setargs                   1 0
    push           "Possibly var/let needed" u64 
    callproc       &mm_support.serror 
#19448: 
    setargs                   3 0
    push           mm_parse.readsunit.p u64 
    push           &mm_parse.readsunit.ulistx 
    push           &mm_parse.readsunit.ulist 
    callproc       &mm_lib.addlistunit 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           113        i64 
    jumpne         #19449     i64 
    jump           #19441     
#19449: 
#19432: 
#19450: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           6          i64 
    jumpeq         #19406     i64 
#19441: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           13         i64 
    casejumpeq     #19451     i64 0
    push           98         i64 
    casejumpeq     #19451     i64 0
    push           99         i64 
    casejumpeq     #19451     i64 0
    push           100        i64 
    casejumpeq     #19451     i64 0
    push           116        i64 
    casejumpeq     #19451     i64 0
    push           109        i64 
    casejumpeq     #19451     i64 0
    push           113        i64 
    casejumpeq     #19451     i64 0
    push           101        i64 
    casejumpeq     #19451     i64 0
    push           102        i64 
    casejumpeq     #19451     i64 0
    push           161        i64 
    casejumpeq     #19451     i64 0
    push           104        i64 
    casejumpeq     #19451     i64 0
    push           17         i64 
    casejumpeq     #19451     i64 0
    push           5          i64 
    casejumpeq     #19451     i64 0
    push           19         i64 
    casejumpeq     #19451     i64 0
    push           120        i64 
    casejumpeq     #19451     i64 0
    popstack                  i64 
    jump           #19452     
#19451: 
    jump           #19453     
#19452: 
    setargs                   1 0
    push           "Readsunit: \";\" expected, or bad unit starter" u64 
    callproc       &mm_support.serror 
#19453: 
    startmult                 
    push           mm_parse.readsunit.ulist u64 
    push           0          u64 
    jumpeq         #19454     u64 
    push           mm_parse.readsunit.ulist u64 
    push           8          
    pushptroff                u64 1 0
    jumpfalse      #19455     u64 
#19454: 
    setargs                   2 0
    push           mm_parse.readsunit.ulist u64 
    push           5          i64 
    callfn         &mm_lib.createunit1 u64 
    resetmult                 
    jump           #19456     
#19455: 
    push           mm_parse.readsunit.ulist u64 
    endmult                   
#19456: 
    setret                    u64 
    jump           #19457     
#19457: 
    retfn                     u64 
End


Proc mm_parse.readmacrodef:
    param          mm_parse.readmacrodef.owner u64 
    param          mm_parse.readmacrodef.isglobal i64 
    local          mm_parse.readmacrodef.nameptr u64 
    local          mm_parse.readmacrodef.stmacro u64 
    local          mm_parse.readmacrodef.paramlist u64 
    local          mm_parse.readmacrodef.paramlistx u64 
    local          mm_parse.readmacrodef.stname u64 
    procentry                 
    setargs                   1 0
    push           79         i64 
    callproc       &mm_parse.lexchecksymbol 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    pop            mm_parse.readmacrodef.nameptr u64 
    setargs                   3 0
    push           20         i64 
    push           mm_parse.readmacrodef.nameptr u64 
    push           mm_parse.readmacrodef.owner u64 
    callfn         &mm_lib.getduplnameptr u64 
    pop            mm_parse.readmacrodef.stmacro u64 
    setargs                   2 0
    push           mm_parse.readmacrodef.stmacro u64 
    push           mm_parse.readmacrodef.owner u64 
    callproc       &mm_lib.adddef 
    push           mm_parse.readmacrodef.stmacro u64 
    pop            mm_parse.readmacrodef.owner u64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           0          u64 
    store          mm_parse.readmacrodef.paramlistx u64 
    pop            mm_parse.readmacrodef.paramlist u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           12         i64 
    jumpne         #19459     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           13         i64 
    jumpeq         #19460     i64 
#19461: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           79         i64 
    casejumpeq     #19462     i64 0
    popstack                  i64 
    jump           #19463     
#19462: 
    setargs                   3 0
    push           21         i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           mm_parse.readmacrodef.owner u64 
    callfn         &mm_lib.getduplnameptr u64 
    pop            mm_parse.readmacrodef.stname u64 
    setargs                   2 0
    push           mm_parse.readmacrodef.stname u64 
    push           mm_parse.readmacrodef.owner u64 
    callproc       &mm_lib.adddef 
    setargs                   3 0
    push           mm_parse.readmacrodef.stname u64 
    push           &mm_parse.readmacrodef.paramlistx 
    push           &mm_parse.readmacrodef.paramlist 
    callproc       &mm_parse.addlistparam 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           mm_parse.readmacrodef.stname u64 
    push           104        
    popptroff                 u64 1 0
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           13         i64 
    jumpne         #19464     i64 
    jump           #19465     
#19464: 
    setargs                   1 0
    push           5          i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #19466     
#19463: 
    setargs                   1 0
    push           "macro def params" u64 
    callproc       &mm_support.serror 
#19466: 
    jump           #19461     
#19465: 
#19460: 
    setargs                   0 0
    callproc       &mm_lex.lex 
#19459: 
    push           mm_parse.readmacrodef.paramlist u64 
    push           mm_parse.readmacrodef.stmacro u64 
    push           104        
    popptroff                 u64 1 0
    push           mm_parse.readmacrodef.isglobal u64 
    push           mm_parse.readmacrodef.stmacro u64 
    push           92         
    addrefoff                 u64 1 0
    push           0          i64 
    push           1          i64 
    popdotslice               u16 
    setargs                   0 0
    callproc       &mm_parse.checkequals 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    push           mm_parse.readmacrodef.stmacro u64 
    push           64         
    popptroff                 u64 1 0
#19467: 
    retproc                   
End


Proc mm_parse.readimportalias:
    param          mm_parse.readimportalias.dimport u64 
    local          mm_parse.readimportalias.stmacro u64 
    procentry                 
    setargs                   1 0
    push           79         i64 
    callproc       &mm_parse.lexchecksymbol 
    setargs                   3 0
    push           20         i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           mm_decls.stmodule u64 
    callfn         &mm_lib.getduplnameptr u64 
    pop            mm_parse.readimportalias.stmacro u64 
    setargs                   2 0
    push           mm_parse.readimportalias.stmacro u64 
    push           mm_decls.stmodule u64 
    callproc       &mm_lib.adddef 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           0          u64 
    push           mm_parse.readimportalias.stmacro u64 
    push           104        
    popptroff                 u64 1 0
    setargs                   1 0
    push           mm_parse.readimportalias.dimport u64 
    callfn         &mm_lib.createname u64 
    push           mm_parse.readimportalias.stmacro u64 
    push           64         
    popptroff                 u64 1 0
#19469: 
    retproc                   
End


Proc mm_parse.domappedalias:
    param          mm_parse.domappedalias.dimport u64 
    param          mm_parse.domappedalias.stimport u64 
    local          mm_parse.domappedalias.stmacro u64 
    procentry                 
    setargs                   2 0
    push           mm_parse.domappedalias.stimport u64 
    pushptr                   u64 
    push           mm_parse.domappedalias.dimport u64 
    pushptr                   u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #19471     i64 
    jump           #19472     
#19471: 
    setargs                   3 0
    push           20         i64 
    push           mm_parse.domappedalias.dimport u64 
    push           mm_decls.stmodule u64 
    callfn         &mm_lib.getduplnameptr u64 
    pop            mm_parse.domappedalias.stmacro u64 
    setargs                   2 0
    push           mm_parse.domappedalias.stmacro u64 
    push           mm_decls.stmodule u64 
    callproc       &mm_lib.adddef 
    push           0          u64 
    push           mm_parse.domappedalias.stmacro u64 
    push           104        
    popptroff                 u64 1 0
    setargs                   1 0
    push           mm_parse.domappedalias.stimport u64 
    callfn         &mm_lib.createname u64 
    push           mm_parse.domappedalias.stmacro u64 
    push           64         
    popptroff                 u64 1 0
#19472: 
    retproc                   
End


Proc mm_parse.readrecase: u64
    procentry                 
    setargs                   0 0
    callproc       &mm_lex.lex 
    startmult                 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           100        i64 
    jumpne         #19474     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           121        i64 
    callfn         &mm_lib.createunit0 u64 
    resetmult                 
    jump           #19475     
#19474: 
    setargs                   2 0
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    push           121        i64 
    callfn         &mm_lib.createunit1 u64 
    endmult                   
#19475: 
    setret                    u64 
    jump           #19476     
#19476: 
    retfn                     u64 
End


Proc mm_parse.adddocstring:
    param          mm_parse.adddocstring.s u64 
    procentry                 
    push           mm_decls.ndocstrings i64 
    push           20         i64 
    jumple         #19478     i64 
    setargs                   1 0
    push           "Too many docstrings" u64 
    callproc       &mm_support.serror 
#19478: 
    setargs                   2 0
    setargs                   1 0
    push           mm_parse.adddocstring.s u64 
    callfn         &strlen    i64 
    push           mm_parse.adddocstring.s u64 
    callfn         &mlibp.pcm_copyheapstringn u64 
    push           &mm_decls.docstrings 
    push           &mm_decls.ndocstrings 
    incrload                  i64 1
    popptroff                 u64 8 -8
#19479: 
    retproc                   
End


Proc mm_parse.fixcond: u64
    param          mm_parse.fixcond.p u64 
    procentry                 
    setargs                   1 0
    push           mm_parse.fixcond.p u64 
    callfn         &mm_lib.isboolunit i64 
    jumptrue       #19481     i64 
    setargs                   2 0
    push           18         i64 
    push           mm_parse.fixcond.p u64 
    callproc       &mm_lib.insertunit 
    push           133        i64 
    push           mm_parse.fixcond.p u64 
    push           60         
    popptroff                 u8 1 0
#19481: 
    push           mm_parse.fixcond.p u64 
    setret                    u64 
    jump           #19482     
#19482: 
    retfn                     u64 
End


Proc mm_name.rx_typetable:
    local          mm_name.rx_typetable.d u64 
    local          mm_name.rx_typetable.i i64 
    procentry                 
#19484: 
    push           33         i64 
    pop            mm_name.rx_typetable.i i64 
    push           mm_decls.ntypes i64 
    push           33         i64 
    jumplt         #19485     i64 
#19486: 
    push           &mm_decls.ttbasetype 
    push           mm_name.rx_typetable.i i64 
    pushptroff                i32 4 0
    push           13         i64 
    jumpne         #19487     i64 
    push           &mm_decls.ttnamedef 
    push           mm_name.rx_typetable.i i64 
    pushptroff                u64 8 0
    pop            mm_name.rx_typetable.d u64 
    push           mm_name.rx_typetable.d u64 
    push           112        
    pushptroff                i32 1 0
    jumpfalse      #19488     i64 
    setargs                   1 0
    push           mm_name.rx_typetable.d u64 
    callproc       &mm_name.do_baseclass 
#19488: 
#19487: 
#19489: 
    forup          #19486     i64 1
    opnd           mm_name.rx_typetable.i 
    opnd           mm_decls.ntypes 
#19485: 
#19490: 
    retproc                   
End


Proc mm_name.rx_unit:
    param          mm_name.rx_unit.owner u64 
    param          mm_name.rx_unit.p u64 
    local          mm_name.rx_unit.d u64 
    local          mm_name.rx_unit.a u64 
    local          mm_name.rx_unit.b u64 
    local          mm_name.rx_unit.n i64 
    local          mm_name.rx_unit.oldnoexpand i64 
    local          mm_name.rx_unit.oldnoassem i64 
    local          mm_name.rx_unit.oldtag i64 
    local          mm_name.rx_unit.useparams i64 
    procentry                 
    push           mm_name.rx_unit.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_name.rx_unit.a u64 
    push           mm_name.rx_unit.p u64 
    push           24         
    pushptroff                u64 1 0
    pop            mm_name.rx_unit.b u64 
    push           mm_name.rx_unit.p u64 
    push           4          
    pushptroff                u32 1 0
    pop            mm_tables.mlineno i64 
    push           mm_name.rx_unit.p u64 
    pushptr                   u8 
    switch         #19492     3 96
    opnd           #19493     
#19492: 
    switchlabel    #19494     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19495     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19496     
    switchlabel    #19496     
    switchlabel    #19493     
    switchlabel    #19497     
    switchlabel    #19498     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19499     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19500     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19501     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19493     
    switchlabel    #19500     
    endswitch                 
#19494: 
    setargs                   2 0
    push           mm_name.rx_unit.p u64 
    push           mm_name.rx_unit.owner u64 
    callproc       &mm_name.resolvename 
    push           mm_name.rx_unit.p u64 
    pushptr                   u8 
    push           3          i64 
    jumpne         #19502     i64 
    push           mm_name.rx_unit.p u64 
    push           16         
    pushptroff                u64 1 0
    push           78         
    pushptroff                u8 1 0
    push           20         i64 
    jumpne         #19502     i64 
    push           mm_name.noexpand i64 
    jumptrue       #19502     i64 
    push           &mm_name.macrolevels 
    incr                      i64 1
    setargs                   3 0
    push           0          u64 
    push           mm_name.rx_unit.p u64 
    push           mm_name.rx_unit.p u64 
    callproc       &mm_name.expandmacro 
    setargs                   2 0
    push           mm_name.rx_unit.p u64 
    push           mm_name.rx_unit.owner u64 
    callproc       &mm_name.rx_unit 
    push           &mm_name.macrolevels 
    decr                      i64 1
#19502: 
    jump           #19503     
#19499: 
    setargs                   2 0
    push           mm_name.rx_unit.b u64 
    push           mm_name.rx_unit.owner u64 
    callproc       &mm_name.rx_unit 
    jump           #19503     
#19501: 
    push           mm_name.rx_unit.b u64 
    pushptr                   u8 
    push           3          i64 
    jumpne         #19504     i64 
    setargs                   5 0
    push           0          i64 
    push           0          i64 
    push           mm_name.rx_unit.b u64 
    push           56         
    pushptroff                u8 1 0
    push           mm_name.rx_unit.b u64 
    push           16         
    pushptroff                u64 1 0
    push           mm_name.rx_unit.owner u64 
    callfn         &mm_name.resolvetopname u64 
    pop            mm_name.rx_unit.d u64 
#19504: 
    setargs                   2 0
    push           mm_name.rx_unit.p u64 
    push           mm_name.rx_unit.owner u64 
    callproc       &mm_name.resolvedot 
    jump           #19503     
#19500: 
    push           mm_name.rx_unit.p u64 
    pushptr                   u8 
    pop            mm_name.rx_unit.oldtag i64 
    push           mm_name.rx_unit.a u64 
    pushptr                   u8 
    push           3          i64 
    jumpne         #19505     i64 
    push           mm_name.noexpand i64 
    pop            mm_name.rx_unit.oldnoexpand i64 
    push           1          i64 
    pop            mm_name.noexpand i64 
    setargs                   2 0
    push           mm_name.rx_unit.a u64 
    push           mm_name.rx_unit.owner u64 
    callproc       &mm_name.rx_unit 
    push           mm_name.rx_unit.oldnoexpand i64 
    pop            mm_name.noexpand i64 
    jump           #19506     
#19505: 
    setargs                   2 0
    push           mm_name.rx_unit.a u64 
    push           mm_name.rx_unit.owner u64 
    callproc       &mm_name.rx_unit 
#19506: 
    setargs                   2 0
    push           mm_name.rx_unit.b u64 
    push           mm_name.rx_unit.owner u64 
    callproc       &mm_name.rx_unitlist 
    push           mm_name.rx_unit.a u64 
    pushptr                   u8 
    push           3          i64 
    jumpne         #19507     i64 
    push           mm_name.rx_unit.a u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_name.rx_unit.d u64 
    push           mm_name.rx_unit.d u64 
    push           78         
    pushptroff                u8 1 0
    push           4          i64 
    casejumpeq     #19508     i64 0
    push           20         i64 
    casejumpeq     #19509     i64 0
    popstack                  i64 
    jump           #19510     
#19508: 
    push           61         i64 
    push           mm_name.rx_unit.p u64 
    push           0          
    popptroff                 u8 1 0
    setargs                   3 0
    push           mm_name.rx_unit.p u64 
    push           52         
    addrefoff                 u64 1 0
    push           mm_name.rx_unit.d u64 
    push           72         
    pushptroff                i32 1 0
    push           mm_name.rx_unit.owner u64 
    callproc       &mm_lib.storemode 
    push           mm_name.rx_unit.b u64 
    push           mm_name.rx_unit.p u64 
    push           16         
    popptroff                 u64 1 0
    push           0          u64 
    push           mm_name.rx_unit.p u64 
    push           24         
    popptroff                 u64 1 0
    push           0          i64 
    push           mm_name.rx_unit.p u64 
    push           2          
    popptroff                 u8 1 0
    push           mm_name.rx_unit.b u64 
    push           8          
    pushptroff                u64 1 0
    jumpfalse      #19511     u64 
    setargs                   2 0
    push           mm_name.rx_unit.b u64 
    push           19         i64 
    callfn         &mm_lib.createunit1 u64 
    push           mm_name.rx_unit.p u64 
    push           16         
    popptroff                 u64 1 0
    push           0          i64 
    pop            mm_name.rx_unit.n i64 
    jump           #19512     
#19513: 
    push           &mm_name.rx_unit.n 
    incr                      i64 1
    push           mm_name.rx_unit.b u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_name.rx_unit.b u64 
#19512: 
    push           mm_name.rx_unit.b u64 
    jumptrue       #19513     u64 
#19514: 
    push           mm_name.rx_unit.n i64 
    push           mm_name.rx_unit.p u64 
    push           16         
    pushptroff                u64 1 0
    push           40         
    popptroff                 u32 1 0
#19511: 
    jump           #19515     
#19509: 
    push           &mm_name.macrolevels 
    incr                      i64 1
    push           mm_name.rx_unit.d u64 
    push           16         
    pushptroff                u64 1 0
    jumpfalse      #19516     u64 
    setargs                   3 0
    push           mm_name.rx_unit.b u64 
    push           mm_name.rx_unit.a u64 
    push           mm_name.rx_unit.p u64 
    callproc       &mm_name.expandmacro 
    push           0          u64 
    pop            mm_name.rx_unit.b u64 
    push           0          i64 
    pop            mm_name.rx_unit.useparams i64 
    jump           #19517     
#19516: 
    setargs                   3 0
    push           0          u64 
    push           mm_name.rx_unit.a u64 
    push           mm_name.rx_unit.p u64 
    callproc       &mm_name.expandmacro 
    push           1          i64 
    pop            mm_name.rx_unit.useparams i64 
#19517: 
    setargs                   2 0
    push           mm_name.rx_unit.p u64 
    push           mm_name.rx_unit.owner u64 
    callproc       &mm_name.rx_unit 
    push           &mm_name.macrolevels 
    decr                      i64 1
    push           mm_name.rx_unit.useparams i64 
    jumpfalse      #19518     i64 
    push           mm_name.rx_unit.p u64 
    pushptr                   u8 
    push           96         i64 
    setjumpeq      #19518     i64 
    push           31         i64 
    setjumpeqx     #19518     i64 
    setargs                   2 0
    push           mm_name.rx_unit.oldtag i64 
    push           mm_name.rx_unit.p u64 
    callproc       &mm_lib.insertunit 
    push           mm_name.rx_unit.b u64 
    push           mm_name.rx_unit.p u64 
    push           24         
    popptroff                 u64 1 0
    push           1          i64 
    push           mm_name.rx_unit.p u64 
    push           2          
    popptroff                 u8 1 0
#19518: 
    jump           #19515     
#19510: 
    push           mm_name.rx_unit.d u64 
    push           72         
    pushptroff                i32 1 0
    push           0          i64 
    jumpne         #19519     i64 
    push           96         i64 
    push           mm_name.rx_unit.p u64 
    push           0          
    popptroff                 u8 1 0
#19519: 
#19515: 
#19507: 
    jump           #19503     
#19496: 
    setargs                   2 0
    push           mm_name.rx_unit.a u64 
    push           mm_name.rx_unit.owner u64 
    callproc       &mm_name.rx_unit 
    setargs                   2 0
    push           mm_name.rx_unit.b u64 
    push           mm_name.rx_unit.owner u64 
    callproc       &mm_name.rx_unit 
    setargs                   1 0
    push           mm_name.rx_unit.a u64 
    callfn         &mm_lib.isboolunit i64 
    jumptrue       #19520     i64 
    setargs                   2 0
    push           18         i64 
    push           mm_name.rx_unit.a u64 
    callproc       &mm_lib.insertunit 
    push           133        i64 
    push           mm_name.rx_unit.a u64 
    push           60         
    popptroff                 u8 1 0
#19520: 
    setargs                   1 0
    push           mm_name.rx_unit.b u64 
    callfn         &mm_lib.isboolunit i64 
    jumptrue       #19521     i64 
    setargs                   2 0
    push           18         i64 
    push           mm_name.rx_unit.b u64 
    callproc       &mm_lib.insertunit 
    push           133        i64 
    push           mm_name.rx_unit.b u64 
    push           60         
    popptroff                 u8 1 0
#19521: 
    jump           #19503     
#19498: 
!doistruel::
#19522: 
    setargs                   2 0
    push           mm_name.rx_unit.a u64 
    push           mm_name.rx_unit.owner u64 
    callproc       &mm_name.rx_unit 
    setargs                   1 0
    push           mm_name.rx_unit.a u64 
    callfn         &mm_lib.isboolunit i64 
    jumpfalse      #19523     i64 
    setargs                   2 0
    push           mm_name.rx_unit.a u64 
    push           mm_name.rx_unit.p u64 
    callproc       &mm_lib.deleteunit 
#19523: 
    jump           #19524     
    jump           #19503     
#19497: 
    setargs                   2 0
    push           mm_name.rx_unit.a u64 
    push           mm_name.rx_unit.owner u64 
    callproc       &mm_name.rx_unit 
    push           mm_name.rx_unit.a u64 
    pushptr                   u8 
    push           17         i64 
    jumpne         #19525     i64 
    setargs                   2 0
    push           mm_name.rx_unit.a u64 
    push           mm_name.rx_unit.p u64 
    callproc       &mm_lib.deleteunit 
    push           18         i64 
    push           mm_name.rx_unit.p u64 
    push           0          
    popptroff                 u8 1 0
    push           133        i64 
    push           mm_name.rx_unit.p u64 
    push           60         
    popptroff                 u8 1 0
    push           mm_name.rx_unit.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_name.rx_unit.a u64 
    jump           #19522     
#19525: 
    setargs                   1 0
    push           mm_name.rx_unit.a u64 
    callfn         &mm_lib.isboolunit i64 
    jumptrue       #19526     i64 
    setargs                   2 0
    push           18         i64 
    push           mm_name.rx_unit.a u64 
    callproc       &mm_lib.insertunit 
    push           133        i64 
    push           mm_name.rx_unit.a u64 
    push           60         
    popptroff                 u8 1 0
    push           mm_name.rx_unit.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_name.rx_unit.a u64 
#19526: 
    jump           #19524     
    jump           #19503     
#19495: 
    setargs                   2 0
    push           mm_name.rx_unit.a u64 
    push           mm_name.rx_unit.owner u64 
    callproc       &mm_name.resolvename 
    push           mm_name.noexpand i64 
    jumptrue       #19527     i64 
    push           &mm_name.macrolevels 
    incr                      i64 1
    push           mm_name.noassem i64 
    pop            mm_name.rx_unit.oldnoassem i64 
    push           1          i64 
    pop            mm_name.noassem i64 
    setargs                   3 0
    push           mm_name.rx_unit.b u64 
    push           mm_name.rx_unit.a u64 
    push           mm_name.rx_unit.p u64 
    callproc       &mm_name.expandmacro 
    push           mm_name.rx_unit.oldnoassem i64 
    pop            mm_name.noassem i64 
    setargs                   2 0
    push           mm_name.rx_unit.p u64 
    push           mm_name.rx_unit.owner u64 
    callproc       &mm_name.rx_unit 
    push           &mm_name.macrolevels 
    decr                      i64 1
#19527: 
    jump           #19503     
#19493: 
!doabc::
#19524: 
    push           mm_name.rx_unit.p u64 
    push           1          
    pushptroff                u8 1 0
    jumpfalse      #19528     i64 
    setargs                   2 0
    push           mm_name.rx_unit.a u64 
    push           mm_name.rx_unit.owner u64 
    callproc       &mm_name.rx_unitlist 
#19528: 
    push           mm_name.rx_unit.p u64 
    push           2          
    pushptroff                u8 1 0
    jumpfalse      #19529     i64 
    setargs                   2 0
    push           mm_name.rx_unit.b u64 
    push           mm_name.rx_unit.owner u64 
    callproc       &mm_name.rx_unitlist 
#19529: 
    push           mm_name.rx_unit.p u64 
    push           3          
    pushptroff                u8 1 0
    jumpfalse      #19530     i64 
    setargs                   2 0
    push           mm_name.rx_unit.p u64 
    push           32         
    pushptroff                u64 1 0
    push           mm_name.rx_unit.owner u64 
    callproc       &mm_name.rx_unitlist 
#19530: 
#19503: 
#19531: 
    retproc                   
End


Proc mm_name.rx_module: i64
    param          mm_name.rx_module.n i64 
    local          mm_name.rx_module.m block:456 
    local          mm_name.rx_module.stmodule u64 
    local          mm_name.rx_module.d u64 
    local          mm_name.rx_module.globalflag i64 
    local          mm_name.rx_module.status i64 
    procentry                 
    push           mm_name.rx_module.n i64 
    pop            mm_decls.currmoduleno i64 
    setargs                   2 0
    push           &mm_decls.moduletable 
    push           mm_name.rx_module.n i64 
    addrefoff                 block:456 456 0
    push           8          
    pushptroff                u64 1 0
    push           mm_decls.stprogram u64 
    callproc       &mm_name.rx_passdef 
    push           1          i64 
    setret                    i64 
    jump           #19533     
#19533: 
    retfn                     i64 
End


Proc mm_name.rx_deflist:
    param          mm_name.rx_deflist.owner u64 
    param          mm_name.rx_deflist.p u64 
    local          mm_name.rx_deflist.pstart u64 
    procentry                 
    push           mm_name.rx_deflist.p u64 
    pop            mm_name.rx_deflist.pstart u64 
    jump           #19535     
#19536: 
    setargs                   2 0
    push           mm_name.rx_deflist.p u64 
    push           mm_name.rx_deflist.owner u64 
    callproc       &mm_name.rx_passdef 
    push           mm_name.rx_deflist.p u64 
    push           32         
    pushptroff                u64 1 0
    pop            mm_name.rx_deflist.p u64 
#19535: 
    push           mm_name.rx_deflist.p u64 
    jumptrue       #19536     u64 
#19537: 
#19538: 
    retproc                   
End


Proc mm_name.rx_passdef:
    param          mm_name.rx_passdef.owner u64 
    param          mm_name.rx_passdef.p u64 
    local          mm_name.rx_passdef.d u64 
    procentry                 
    push           mm_name.rx_passdef.p u64 
    push           78         
    pushptroff                u8 1 0
    push           2          i64 
    casejumpeq     #19540     i64 0
    push           3          i64 
    casejumpeq     #19540     i64 0
    push           5          i64 
    casejumpeq     #19541     i64 0
    push           6          i64 
    casejumpeq     #19542     i64 0
    push           10         i64 
    casejumpeq     #19543     i64 0
    push           11         i64 
    casejumpeq     #19543     i64 0
    push           12         i64 
    casejumpeq     #19543     i64 0
    push           13         i64 
    casejumpeq     #19543     i64 0
    push           4          i64 
    casejumpeq     #19544     i64 0
    popstack                  i64 
    jump           #19545     
#19540: 
    setargs                   2 0
    push           mm_name.rx_passdef.p u64 
    push           16         
    pushptroff                u64 1 0
    push           mm_name.rx_passdef.p u64 
    callproc       &mm_name.rx_deflist 
    jump           #19546     
#19541: 
    setargs                   2 0
    push           mm_name.rx_passdef.p u64 
    push           16         
    pushptroff                u64 1 0
    push           mm_name.rx_passdef.p u64 
    callproc       &mm_name.rx_deflist 
    push           mm_name.rx_passdef.p u64 
    pop            mm_name.currstproc u64 
    setargs                   2 0
    push           mm_name.rx_passdef.p u64 
    push           64         
    pushptroff                u64 1 0
    push           mm_name.rx_passdef.p u64 
    callproc       &mm_name.rx_unit 
    push           0          u64 
    pop            mm_name.currstproc u64 
    jump           #19546     
#19542: 
    setargs                   2 0
    push           mm_name.rx_passdef.p u64 
    push           16         
    pushptroff                u64 1 0
    push           mm_name.rx_passdef.p u64 
    callproc       &mm_name.rx_deflist 
    jump           #19546     
#19543: 
    push           mm_name.rx_passdef.p u64 
    push           92         
    pushptroff                u16 1 0
    push           13         i64 
    dotindex                  i64 
    jumpfalse      #19547     u64 
    setargs                   2 0
    push           mm_name.rx_passdef.p u64 
    push           96         
    pushptroff                u64 1 0
    push           mm_name.rx_passdef.owner u64 
    callproc       &mm_name.rx_unit 
#19547: 
    push           mm_name.rx_passdef.p u64 
    push           64         
    pushptroff                u64 1 0
    jumpfalse      #19548     u64 
    setargs                   2 0
    push           mm_name.rx_passdef.p u64 
    push           64         
    pushptroff                u64 1 0
    push           mm_name.rx_passdef.owner u64 
    callproc       &mm_name.rx_unit 
#19548: 
    jump           #19546     
#19544: 
    setargs                   2 0
    push           mm_name.rx_passdef.p u64 
    push           16         
    pushptroff                u64 1 0
    push           mm_name.rx_passdef.p u64 
    callproc       &mm_name.rx_deflist 
    jump           #19546     
#19545: 
#19546: 
#19549: 
    retproc                   
End


Proc mm_name.rx_unitlist:
    param          mm_name.rx_unitlist.owner u64 
    param          mm_name.rx_unitlist.p u64 
    procentry                 
    jump           #19551     
#19552: 
    setargs                   2 0
    push           mm_name.rx_unitlist.p u64 
    push           mm_name.rx_unitlist.owner u64 
    callproc       &mm_name.rx_unit 
    push           mm_name.rx_unitlist.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_name.rx_unitlist.p u64 
#19551: 
    push           mm_name.rx_unitlist.p u64 
    jumptrue       #19552     u64 
#19553: 
#19554: 
    retproc                   
End


Proc mm_name.resolvetopname: u64
    param          mm_name.resolvetopname.owner u64 
    param          mm_name.resolvetopname.stnewname u64 
    param          mm_name.resolvetopname.moduleno i64 
    param          mm_name.resolvetopname.fmodule i64 
    param          mm_name.resolvetopname.fdoambig i64 
    local          mm_name.resolvetopname.i i64 
    local          mm_name.resolvetopname.m i64 
    local          mm_name.resolvetopname.extcount i64 
    local          mm_name.resolvetopname.modno i64 
    local          mm_name.resolvetopname.p u64 
    local          mm_name.resolvetopname.powner u64 
    local          mm_name.resolvetopname.d u64 
    local          mm_name.resolvetopname.e u64 
    local          mm_name.resolvetopname.dlldef u64 
    local          mm_name.resolvetopname.extdef u64 
    local          mm_name.resolvetopname.moddef u64 
    local          mm_name.resolvetopname.extmod u64 
    local          mm_name.resolvetopname.q u64 
    local          mm_name.resolvetopname.ambiglist block:80 
    local          mm_name.resolvetopname.ndupl i64 
    procentry                 
    push           mm_name.resolvetopname.owner u64 
    push           78         
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #19556     i64 
    push           mm_name.resolvetopname.owner u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_name.resolvetopname.q u64 
    jump           #19557     
#19558: 
    push           mm_name.resolvetopname.q u64 
    push           48         
    pushptroff                u64 1 0
    push           mm_name.resolvetopname.stnewname u64 
    jumpne         #19559     u64 
    push           mm_name.resolvetopname.q u64 
    setret                    u64 
    jump           #19560     
#19559: 
    push           mm_name.resolvetopname.q u64 
    push           32         
    pushptroff                u64 1 0
    pop            mm_name.resolvetopname.q u64 
#19557: 
    push           mm_name.resolvetopname.q u64 
    jumptrue       #19558     u64 
#19561: 
#19556: 
    push           mm_name.resolvetopname.stnewname u64 
    push           40         
    pushptroff                u64 1 0
    pop            mm_name.resolvetopname.p u64 
    push           0          i64 
    pop            mm_name.resolvetopname.extcount i64 
    push           0          u64 
    store          mm_name.resolvetopname.moddef u64 
    store          mm_name.resolvetopname.extdef u64 
    store          mm_name.resolvetopname.dlldef u64 
    pop            mm_name.resolvetopname.extmod u64 
    push           0          i64 
    pop            mm_name.resolvetopname.ndupl i64 
    jump           #19562     
#19563: 
    push           &mm_name.resolvetopname.ndupl 
    incr                      i64 1
    push           mm_name.resolvetopname.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_name.resolvetopname.powner u64 
    push           mm_name.resolvetopname.powner u64 
    push           78         
    pushptroff                u8 1 0
    switch         #19564     1 5
    opnd           #19565     
#19564: 
    switchlabel    #19566     
    switchlabel    #19567     
    switchlabel    #19568     
    switchlabel    #19569     
    switchlabel    #19570     
    endswitch                 
#19570: 
    push           mm_name.resolvetopname.powner u64 
    push           mm_name.resolvetopname.owner u64 
    jumpne         #19571     u64 
    push           mm_name.resolvetopname.p u64 
    setret                    u64 
    jump           #19560     
#19571: 
    jump           #19572     
#19567: 
    push           mm_name.resolvetopname.powner u64 
    push           94         
    pushptroff                u8 1 0
    push           mm_name.resolvetopname.moduleno i64 
    jumpne         #19573     i64 
    push           mm_name.resolvetopname.owner u64 
    push           78         
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #19574     i64 
    push           mm_name.resolvetopname.p u64 
    setret                    u64 
    jump           #19560     
#19574: 
    push           mm_name.resolvetopname.p u64 
    pop            mm_name.resolvetopname.moddef u64 
    jump           #19575     
#19573: 
    push           &mm_decls.moduletable 
    push           mm_name.resolvetopname.moduleno i64 
    addrefoff                 block:456 456 0
    push           40         
    addrefoff                 u64 1 0
    push           mm_name.resolvetopname.powner u64 
    push           94         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    jumpfalse      #19576     i64 
    push           mm_name.resolvetopname.p u64 
    push           92         
    pushptroff                u16 1 0
    push           0          i64 
    push           1          i64 
    dotslice                  i64 
    jumpfalse      #19577     u64 
    push           &mm_name.resolvetopname.extcount 
    incr                      i64 1
    push           mm_name.resolvetopname.p u64 
    pop            mm_name.resolvetopname.extdef u64 
    push           mm_name.resolvetopname.extcount i64 
    push           10         i64 
    jumpge         #19578     i64 
    push           mm_name.resolvetopname.extdef u64 
    push           &mm_name.resolvetopname.ambiglist 
    push           mm_name.resolvetopname.extcount i64 
    popptroff                 u64 8 -8
#19578: 
#19577: 
#19576: 
#19575: 
    jump           #19572     
#19568: 
    push           mm_name.resolvetopname.powner u64 
    push           8          
    pushptroff                u64 1 0
    push           94         
    pushptroff                u8 1 0
    pop            mm_name.resolvetopname.modno i64 
    push           mm_name.resolvetopname.modno i64 
    push           mm_name.resolvetopname.moduleno i64 
    jumpeq         #19579     i64 
    push           &mm_decls.moduletable 
    push           mm_name.resolvetopname.moduleno i64 
    addrefoff                 block:456 456 0
    push           40         
    addrefoff                 u64 1 0
    push           mm_name.resolvetopname.modno i64 
    pushptroff                u8 1 -1
    jumpfalse      #19580     i64 
#19579: 
    push           mm_name.resolvetopname.p u64 
    pop            mm_name.resolvetopname.dlldef u64 
#19580: 
    jump           #19572     
#19569: 
    push           mm_name.resolvetopname.powner u64 
    push           mm_name.resolvetopname.owner u64 
    jumpne         #19581     u64 
    push           mm_name.resolvetopname.p u64 
    setret                    u64 
    jump           #19560     
#19581: 
    push           mm_name.resolvetopname.powner u64 
    push           mm_name.resolvetopname.owner u64 
    push           8          
    pushptroff                u64 1 0
    jumpne         #19582     u64 
    push           mm_name.resolvetopname.p u64 
    setret                    u64 
    jump           #19560     
#19582: 
    jump           #19572     
#19566: 
    push           mm_name.resolvetopname.p u64 
    push           78         
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #19583     i64 
    push           mm_name.resolvetopname.p u64 
    push           94         
    pushptroff                u8 1 0
    push           mm_name.resolvetopname.moduleno i64 
    jumpne         #19584     i64 
    push           mm_name.resolvetopname.fmodule i64 
    jumpfalse      #19585     i64 
    push           mm_name.resolvetopname.p u64 
    setret                    u64 
    jump           #19560     
#19585: 
    jump           #19586     
#19584: 
    push           mm_name.resolvetopname.p u64 
    pop            mm_name.resolvetopname.extmod u64 
#19586: 
#19583: 
    jump           #19572     
#19565: 
#19572: 
    push           mm_name.resolvetopname.p u64 
    push           40         
    pushptroff                u64 1 0
    pop            mm_name.resolvetopname.p u64 
#19562: 
    push           mm_name.resolvetopname.p u64 
    jumptrue       #19563     u64 
#19587: 
    push           mm_name.resolvetopname.moddef u64 
    jumpfalse      #19588     u64 
    push           mm_name.resolvetopname.moddef u64 
    setret                    u64 
    jump           #19560     
#19588: 
    push           mm_name.resolvetopname.extdef u64 
    jumpfalse      #19589     u64 
    push           mm_name.resolvetopname.extcount i64 
    push           1          i64 
    jumple         #19590     i64 
    push           mm_name.resolvetopname.fdoambig i64 
    jumpfalse      #19590     i64 
#19591: 
    push           1          i64 
    pop            mm_name.resolvetopname.i i64 
    push           mm_name.resolvetopname.extcount i64 
    push           1          i64 
    jumplt         #19592     i64 
#19593: 
    push           &mm_name.resolvetopname.ambiglist 
    push           mm_name.resolvetopname.i i64 
    pushptroff                u64 8 -8
    pop            mm_name.resolvetopname.extdef u64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mm_name.resolvetopname.i i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           mm_name.resolvetopname.extdef u64 
    push           8          
    pushptroff                u64 1 0
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_tables.namenames 
    push           mm_name.resolvetopname.extdef u64 
    push           8          
    pushptroff                u64 1 0
    push           78         
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#19594: 
    forup          #19593     i64 1
    opnd           mm_name.resolvetopname.i 
    opnd           mm_name.resolvetopname.extcount 
#19592: 
    setargs                   3 0
    push           0          u64 
    push           mm_name.resolvetopname.extdef u64 
    pushptr                   u64 
    push           "Ambiguous ext name: #" u64 
    callproc       &mm_support.rxerror_s 
#19590: 
    push           mm_name.resolvetopname.extdef u64 
    setret                    u64 
    jump           #19560     
#19589: 
    push           mm_name.resolvetopname.extmod u64 
    jumpfalse      #19595     u64 
    push           mm_name.resolvetopname.extmod u64 
    setret                    u64 
    jump           #19560     
#19595: 
    push           mm_name.resolvetopname.dlldef u64 
    setret                    u64 
    jump           #19560     
#19560: 
    retfn                     u64 
End


Proc mm_name.resolvename:
    param          mm_name.resolvename.owner u64 
    param          mm_name.resolvename.p u64 
    local          mm_name.resolvename.d u64 
    local          mm_name.resolvename.e u64 
    local          mm_name.resolvename.q u64 
    local          mm_name.resolvename.moduleno i64 
    local          mm_name.resolvename.mode i64 
    procentry                 
    push           mm_name.resolvename.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_name.resolvename.d u64 
    push           mm_name.resolvename.p u64 
    push           56         
    pushptroff                u8 1 0
    pop            mm_name.resolvename.moduleno i64 
    push           mm_name.resolvename.d u64 
    push           78         
    pushptroff                u8 1 0
    push           0          i64 
    jumpeq         #19597     i64 
    jump           #19598     
#19597: 
    setargs                   5 0
    push           1          i64 
    push           mm_name.allowmodname i64 
    push           mm_name.resolvename.moduleno i64 
    push           mm_name.resolvename.d u64 
    push           mm_name.resolvename.owner u64 
    callfn         &mm_name.resolvetopname u64 
    pop            mm_name.resolvename.e u64 
    push           mm_name.resolvename.e u64 
    jumptrue       #19599     u64 
    push           0          i64 
    pop            mm_name.resolvename.mode i64 
    push           mm_name.resolvename.p u64 
    push           41         
    pushptroff                u8 1 0
    push           73         i64 
    casejumpeq     #19600     i64 0
    push           84         i64 
    casejumpeq     #19600     i64 0
    push           83         i64 
    casejumpeq     #19600     i64 0
    push           76         i64 
    casejumpeq     #19601     i64 0
    push           65         i64 
    casejumpeq     #19601     i64 0
    popstack                  i64 
    jump           #19602     
#19600: 
    push           4          i64 
    pop            mm_name.resolvename.mode i64 
    jump           #19603     
#19601: 
    push           26         i64 
    pop            mm_name.resolvename.mode i64 
    jump           #19603     
#19602: 
#19603: 
    push           mm_name.resolvename.mode i64 
    push           0          i64 
    jumpne         #19604     i64 
    setargs                   3 0
    push           mm_name.resolvename.p u64 
    push           mm_name.resolvename.d u64 
    pushptr                   u64 
    push           "Undefined: #" u64 
    callproc       &mm_support.rxerror_s 
    jump           #19605     
#19604: 
    setargs                   4 0
    push           mm_name.resolvename.mode i64 
    push           mm_name.resolvename.moduleno i64 
    push           mm_name.resolvename.d u64 
    push           mm_name.resolvename.owner u64 
    callfn         &mm_name.addframevar u64 
    pop            mm_name.resolvename.e u64 
    push           mm_name.resolvename.p u64 
    push           4          
    pushptroff                u32 1 0
    push           0          i64 
    push           23         i64 
    dotslice                  i64 
    push           mm_name.resolvename.e u64 
    push           88         
    addrefoff                 u64 1 0
    push           0          i64 
    push           23         i64 
    popdotslice               u32 
    push           mm_name.resolvename.mode i64 
    push           26         i64 
    jumpeq         #19606     i64 
    push           1          u64 
    push           mm_name.resolvename.e u64 
    push           92         
    addrefoff                 u64 1 0
    push           6          i64 
    popdotindex               u16 
#19606: 
#19605: 
#19599: 
    push           1          u64 
    push           mm_name.resolvename.e u64 
    push           92         
    addrefoff                 u64 1 0
    push           3          i64 
    popdotindex               u16 
    push           mm_name.resolvename.e u64 
    push           78         
    pushptroff                u8 1 0
    push           13         i64 
    jumpne         #19607     i64 
    push           mm_name.resolvename.e u64 
    push           104        
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #19607     i64 
    push           57         i64 
    push           mm_name.resolvename.p u64 
    push           0          
    popptroff                 u8 1 0
    setargs                   1 0
    push           mm_name.resolvename.e u64 
    callfn         &mm_lib.createname u64 
    push           mm_name.resolvename.p u64 
    push           16         
    popptroff                 u64 1 0
    push           1          i64 
    push           mm_name.resolvename.p u64 
    push           1          
    popptroff                 u8 1 0
    push           0          i64 
    push           mm_name.resolvename.p u64 
    push           3          
    storeptroff               u8 1 0
    push           mm_name.resolvename.p u64 
    push           2          
    popptroff                 u8 1 0
    jump           #19608     
#19607: 
    push           mm_name.resolvename.e u64 
    push           mm_name.resolvename.p u64 
    push           16         
    popptroff                 u64 1 0
#19608: 
#19598: 
    retproc                   
End


Proc mm_name.finddupl: u64
    param          mm_name.finddupl.d u64 
    param          mm_name.finddupl.pdupl u64 
    procentry                 
    push           mm_name.finddupl.pdupl u64 
    push           78         
    pushptroff                u8 1 0
    push           0          i64 
    jumpeq         #19610     i64 
    push           mm_name.finddupl.pdupl u64 
    setret                    u64 
    jump           #19611     
#19610: 
    push           mm_name.finddupl.pdupl u64 
    push           40         
    pushptroff                u64 1 0
    pop            mm_name.finddupl.pdupl u64 
    jump           #19612     
#19613: 
    push           mm_name.finddupl.pdupl u64 
    push           8          
    pushptroff                u64 1 0
    push           mm_name.finddupl.d u64 
    jumpne         #19614     u64 
    push           mm_name.finddupl.pdupl u64 
    setret                    u64 
    jump           #19611     
#19614: 
    push           mm_name.finddupl.pdupl u64 
    push           40         
    pushptroff                u64 1 0
    pop            mm_name.finddupl.pdupl u64 
#19612: 
    push           mm_name.finddupl.pdupl u64 
    jumptrue       #19613     u64 
#19615: 
    push           0          u64 
    setret                    u64 
    jump           #19611     
#19611: 
    retfn                     u64 
End


Proc mm_name.resolvedot:
    param          mm_name.resolvedot.owner u64 
    param          mm_name.resolvedot.p u64 
    local          mm_name.resolvedot.lhs u64 
    local          mm_name.resolvedot.rhs u64 
    local          mm_name.resolvedot.d u64 
    local          mm_name.resolvedot.e u64 
    local          mm_name.resolvedot.t u64 
    local          mm_name.resolvedot.f u64 
    local          mm_name.resolvedot.m i64 
    procentry                 
    push           mm_name.resolvedot.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_name.resolvedot.lhs u64 
    push           mm_name.resolvedot.p u64 
    push           24         
    pushptroff                u64 1 0
    pop            mm_name.resolvedot.rhs u64 
    push           mm_name.resolvedot.rhs u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_name.resolvedot.e u64 
    setargs                   2 0
    push           mm_name.resolvedot.lhs u64 
    push           mm_name.resolvedot.owner u64 
    callproc       &mm_name.rx_unit 
    push           mm_name.resolvedot.lhs u64 
    pushptr                   u8 
    push           3          i64 
    casejumpeq     #19617     i64 0
    popstack                  i64 
    jump           #19618     
#19617: 
    push           mm_name.resolvedot.lhs u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_name.resolvedot.d u64 
    push           mm_name.resolvedot.d u64 
    push           78         
    pushptroff                u8 1 0
    push           2          i64 
    casejumpeq     #19619     i64 0
    push           4          i64 
    casejumpeq     #19619     i64 0
    push           5          i64 
    casejumpeq     #19619     i64 0
    push           4          i64 
    casejumpeq     #19619     i64 0
    push           3          i64 
    casejumpeq     #19619     i64 0
    push           12         i64 
    casejumpeq     #19620     i64 0
    push           11         i64 
    casejumpeq     #19620     i64 0
    push           13         i64 
    casejumpeq     #19620     i64 0
    popstack                  i64 
    jump           #19621     
#19619: 
    setargs                   2 0
    push           mm_name.resolvedot.e u64 
    push           mm_name.resolvedot.d u64 
    callfn         &mm_name.finddupl u64 
    pop            mm_name.resolvedot.e u64 
    push           mm_name.resolvedot.e u64 
    jumpfalse      #19622     u64 
    push           3          i64 
    push           mm_name.resolvedot.p u64 
    push           0          
    popptroff                 u8 1 0
    push           0          u64 
    push           mm_name.resolvedot.p u64 
    push           24         
    storeptroff               u64 1 0
    push           mm_name.resolvedot.p u64 
    push           16         
    popptroff                 u64 1 0
    push           0          i64 
    push           mm_name.resolvedot.p u64 
    push           2          
    storeptroff               u8 1 0
    push           mm_name.resolvedot.p u64 
    push           1          
    popptroff                 u8 1 0
    push           mm_name.resolvedot.e u64 
    push           mm_name.resolvedot.p u64 
    push           16         
    popptroff                 u64 1 0
    push           mm_name.resolvedot.e u64 
    push           78         
    pushptroff                u8 1 0
    push           16         i64 
    casejumpeq     #19623     i64 0
    push           10         i64 
    casejumpeq     #19624     i64 0
    popstack                  i64 
    jump           #19625     
#19623: 
    jump           #19626     
#19624: 
    jump           #19626     
#19625: 
#19626: 
    jump           #19627     
#19622: 
    setargs                   3 0
    push           mm_name.resolvedot.p u64 
    push           mm_name.resolvedot.p u64 
    push           24         
    pushptroff                u64 1 0
    push           16         
    pushptroff                u64 1 0
    pushptr                   u64 
    push           "Can't resolve .#" u64 
    callproc       &mm_support.rxerror_s 
#19627: 
    jump           #19628     
#19620: 
    push           mm_name.resolvedot.d u64 
    push           72         
    pushptroff                i32 1 0
    pop            mm_name.resolvedot.m i64 
    push           &mm_decls.ttbasetype 
    push           mm_name.resolvedot.m i64 
    pushptroff                i32 4 0
    push           13         i64 
    casejumpeq     #19629     i64 0
    push           9          i64 
    casejumpeq     #19630     i64 0
    popstack                  i64 
    jump           #19631     
#19629: 
    jump           #19632     
#19630: 
#19633: 
    push           &mm_decls.tttarget 
    push           mm_name.resolvedot.m i64 
    pushptroff                i32 4 0
    pop            mm_name.resolvedot.m i64 
    push           &mm_decls.ttbasetype 
    push           mm_name.resolvedot.m i64 
    pushptroff                i32 4 0
    push           13         i64 
    casejumpeq     #19634     i64 0
    push           9          i64 
    casejumpeq     #19635     i64 0
    popstack                  i64 
    jump           #19636     
#19634: 
    jump           #19637     
    jump           #19638     
#19635: 
    jump           #19638     
#19636: 
    setargs                   2 0
    push           0          u64 
    push           "2:record expected" u64 
    callproc       &mm_support.rxerror 
#19638: 
    jump           #19633     
#19637: 
    jump           #19632     
#19631: 
    setargs                   2 0
    push           0          u64 
    push           "record expected" u64 
    callproc       &mm_support.rxerror 
#19632: 
    push           &mm_decls.ttnamedef 
    push           mm_name.resolvedot.m i64 
    pushptroff                u64 8 0
    pop            mm_name.resolvedot.t u64 
    setargs                   2 0
    push           mm_name.resolvedot.e u64 
    push           mm_name.resolvedot.t u64 
    callfn         &mm_name.finddupl u64 
    pop            mm_name.resolvedot.e u64 
    push           mm_name.resolvedot.e u64 
    jumpfalse      #19639     u64 
    push           mm_name.resolvedot.e u64 
    push           mm_name.resolvedot.p u64 
    push           24         
    pushptroff                u64 1 0
    push           16         
    popptroff                 u64 1 0
    jump           #19640     
#19639: 
    setargs                   3 0
    push           0          u64 
    push           mm_name.resolvedot.rhs u64 
    push           16         
    pushptroff                u64 1 0
    pushptr                   u64 
    push           "Not a field: #" u64 
    callproc       &mm_support.rxerror_s 
#19640: 
    jump           #19628     
#19621: 
#19628: 
    jump           #19641     
#19618: 
    push           mm_name.resolvedot.e u64 
    push           40         
    pushptroff                u64 1 0
    jumptrue       #19642     u64 
    setargs                   3 0
    push           0          u64 
    push           mm_name.resolvedot.e u64 
    pushptr                   u64 
    push           "Not a field: #" u64 
    callproc       &mm_support.rxerror_s 
#19642: 
#19641: 
#19643: 
    retproc                   
End


Proc mm_name.fixmode:
    param          mm_name.fixmode.p u64 
    local          mm_name.fixmode.pmode u64 
    local          mm_name.fixmode.a u64 
    local          mm_name.fixmode.d u64 
    local          mm_name.fixmode.e u64 
    local          mm_name.fixmode.f u64 
    local          mm_name.fixmode.owner u64 
    local          mm_name.fixmode.m i64 
    local          mm_name.fixmode.moduleno i64 
    procentry                 
    push           mm_name.fixmode.p u64 
    push           24         
    pushptroff                u64 1 0
    pop            mm_name.fixmode.pmode u64 
    push           mm_name.fixmode.pmode u64 
    pushptr                   i32 
    neg                       i64 
    pop            mm_name.fixmode.m i64 
    push           mm_name.fixmode.p u64 
    pushptr                   u64 
    store          mm_name.fixmode.owner u64 
    pop            mm_name.fixmode.d u64 
    jump           #19645     
#19646: 
    push           mm_name.fixmode.d u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_name.fixmode.d u64 
#19645: 
    push           mm_name.fixmode.d u64 
    push           78         
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #19646     i64 
#19647: 
    push           mm_name.fixmode.d u64 
    push           94         
    pushptroff                u8 1 0
    pop            mm_name.fixmode.moduleno i64 
    push           mm_name.fixmode.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_name.fixmode.a u64 
    push           mm_name.fixmode.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_name.fixmode.d u64 
    push           mm_name.fixmode.a u64 
    push           0          u64 
    jumpne         #19648     u64 
    push           mm_name.fixmode.d u64 
    jumpfalse      #19648     u64 
    setargs                   5 0
    push           1          i64 
    push           0          i64 
    push           mm_name.fixmode.moduleno i64 
    push           mm_name.fixmode.d u64 
    push           mm_name.fixmode.owner u64 
    callfn         &mm_name.resolvetopname u64 
    pop            mm_name.fixmode.e u64 
    jump           #19649     
#19648: 
    push           mm_name.fixmode.d u64 
    push           0          u64 
    jumpne         #19650     u64 
    push           mm_name.fixmode.a u64 
    jumpfalse      #19650     u64 
    setargs                   2 0
    push           0          u64 
    push           "Fixmode can't do typeof yet" u64 
    callproc       &mm_support.rxerror 
    jump           #19649     
#19650: 
    setargs                   5 0
    push           1          i64 
    push           0          i64 
    push           mm_name.fixmode.moduleno i64 
    push           mm_name.fixmode.a u64 
    push           mm_name.fixmode.owner u64 
    callfn         &mm_name.resolvetopname u64 
    pop            mm_name.fixmode.e u64 
    push           mm_name.fixmode.e u64 
    jumpfalse      #19651     u64 
    push           mm_name.fixmode.e u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_name.fixmode.f u64 
    push           0          u64 
    pop            mm_name.fixmode.e u64 
    jump           #19652     
#19653: 
    push           mm_name.fixmode.f u64 
    push           78         
    pushptroff                u8 1 0
    push           4          i64 
    jumpne         #19654     i64 
    push           mm_name.fixmode.f u64 
    push           48         
    pushptroff                u64 1 0
    push           mm_name.fixmode.d u64 
    jumpne         #19654     u64 
    push           mm_name.fixmode.f u64 
    pop            mm_name.fixmode.e u64 
    jump           #19655     
#19654: 
    push           mm_name.fixmode.f u64 
    push           32         
    pushptroff                u64 1 0
    pop            mm_name.fixmode.f u64 
#19652: 
    push           mm_name.fixmode.f u64 
    jumptrue       #19653     u64 
#19655: 
#19651: 
#19649: 
    push           mm_name.fixmode.e u64 
    jumpfalse      #19656     u64 
    push           mm_name.fixmode.e u64 
    push           78         
    pushptroff                u8 1 0
    push           4          i64 
    jumpne         #19656     i64 
    push           mm_name.fixmode.e u64 
    push           72         
    pushptroff                i32 1 0
    push           mm_name.fixmode.pmode u64 
    popptr                    i32 
    jump           #19657     
#19656: 
    setargs                   3 0
    push           0          u64 
    push           mm_name.fixmode.d u64 
    pushptr                   u64 
    push           "2:Can't resolve tentative type: #" u64 
    callproc       &mm_support.rxerror_s 
#19657: 
#19658: 
    retproc                   
End


Proc mm_name.fixusertypes:
    local          mm_name.fixusertypes.p u64 
    local          mm_name.fixusertypes.npasses i64 
    local          mm_name.fixusertypes.notresolved i64 
    local          mm_name.fixusertypes.m i64 
    local          mm_name.fixusertypes.zerosizes i64 
    local          mm_name.fixusertypes.d u64 
    local          mm_name.fixusertypes.i i64 
    procentry                 
    push           0          i64 
    pop            mm_name.fixusertypes.npasses i64 
#19660: 
    push           &mm_name.fixusertypes.npasses 
    incr                      i64 1
    push           0          i64 
    pop            mm_name.fixusertypes.notresolved i64 
#19661: 
    push           1          i64 
    pop            mm_name.fixusertypes.i i64 
    push           mm_decls.ntypenames i64 
    push           1          i64 
    jumplt         #19662     i64 
#19663: 
    push           &mm_decls.typenames 
    push           mm_name.fixusertypes.i i64 
    addrefoff                 block:32 32 0
    pop            mm_name.fixusertypes.p u64 
    push           mm_name.fixusertypes.p u64 
    push           24         
    pushptroff                u64 1 0
    pushptr                   i32 
    push           0          i64 
    jumpge         #19664     i64 
    push           &mm_decls.typenamepos 
    push           mm_name.fixusertypes.i i64 
    addrefoff                 block:4 4 0
    pushptr                   u32 
    pop            mm_tables.mlineno i64 
    setargs                   1 0
    push           mm_name.fixusertypes.p u64 
    callproc       &mm_name.fixmode 
    push           mm_name.fixusertypes.p u64 
    push           24         
    pushptroff                u64 1 0
    pushptr                   i32 
    push           0          i64 
    jumpge         #19665     i64 
    push           &mm_name.fixusertypes.notresolved 
    incr                      i64 1
#19665: 
#19664: 
#19666: 
    forup          #19663     i64 1
    opnd           mm_name.fixusertypes.i 
    opnd           mm_decls.ntypenames 
#19662: 
    push           mm_name.fixusertypes.npasses i64 
    push           5          i64 
    jumple         #19667     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Type phase errors - check these user types:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#19668: 
    push           1          i64 
    pop            mm_name.fixusertypes.i i64 
    push           mm_decls.ntypenames i64 
    push           1          i64 
    jumplt         #19669     i64 
#19670: 
    push           &mm_decls.typenames 
    push           mm_name.fixusertypes.i i64 
    addrefoff                 block:32 32 0
    pop            mm_name.fixusertypes.p u64 
    push           mm_name.fixusertypes.p u64 
    push           24         
    pushptroff                u64 1 0
    pushptr                   i32 
    push           0          i64 
    jumpge         #19671     i64 
    push           mm_name.fixusertypes.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_name.fixusertypes.d u64 
    push           mm_name.fixusertypes.d u64 
    push           0          u64 
    jumpne         #19672     u64 
    push           mm_name.fixusertypes.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_name.fixusertypes.d u64 
#19672: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\t"       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_name.fixusertypes.d u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#19671: 
#19673: 
    forup          #19670     i64 1
    opnd           mm_name.fixusertypes.i 
    opnd           mm_decls.ntypenames 
#19669: 
    setargs                   2 0
    push           0          u64 
    push           "Fixtypes: too many passes (cyclic ref?)" u64 
    callproc       &mm_support.rxerror 
#19667: 
#19674: 
    push           mm_name.fixusertypes.notresolved i64 
    push           0          i64 
    jumpne         #19660     i64 
#19675: 
#19676: 
    retproc                   
End


Proc mm_name.fixblockparams:
    local          mm_name.fixblockparams.pp u64 
    local          mm_name.fixblockparams.d u64 
    local          mm_name.fixblockparams.e u64 
    procentry                 
    jump           #19678     
    push           mm_decls.proclist u64 
    pop            mm_name.fixblockparams.pp u64 
    jump           #19679     
#19680: 
    push           mm_name.fixblockparams.pp u64 
    pushptr                   u64 
    pop            mm_name.fixblockparams.d u64 
    push           mm_name.fixblockparams.d u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_name.fixblockparams.e u64 
    jump           #19681     
#19682: 
    push           mm_name.fixblockparams.e u64 
    push           78         
    pushptroff                u8 1 0
    push           13         i64 
    jumpne         #19683     i64 
    push           &mm_decls.ttbasetype 
    push           mm_name.fixblockparams.e u64 
    push           72         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           13         i64 
    setjumpeq      #19684     i64 
    push           11         i64 
    setjumpne      #19685     i64 
#19684: 
    push           2          i64 
    push           mm_name.fixblockparams.e u64 
    push           104        
    popptroff                 u8 1 0
    setargs                   3 0
    push           0          i64 
    push           mm_name.fixblockparams.e u64 
    push           72         
    pushptroff                i32 1 0
    push           mm_name.fixblockparams.d u64 
    callfn         &mm_lib.createrefmode i64 
    push           mm_name.fixblockparams.e u64 
    push           72         
    popptroff                 i32 1 0
#19685: 
#19683: 
    push           mm_name.fixblockparams.e u64 
    push           32         
    pushptroff                u64 1 0
    pop            mm_name.fixblockparams.e u64 
#19681: 
    push           mm_name.fixblockparams.e u64 
    jumptrue       #19682     u64 
#19686: 
    push           mm_name.fixblockparams.pp u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_name.fixblockparams.pp u64 
#19679: 
    push           mm_name.fixblockparams.pp u64 
    jumptrue       #19680     u64 
#19687: 
#19678: 
    retproc                   
End


Proc mm_name.resolve_equiv_name: u64
    param          mm_name.resolve_equiv_name.owner u64 
    param          mm_name.resolve_equiv_name.p u64 
    procentry                 
    push           mm_name.resolve_equiv_name.p u64 
    push           78         
    pushptroff                u8 1 0
    push           14         i64 
    jumpne         #19689     i64 
    push           mm_name.resolve_equiv_name.p u64 
    setret                    u64 
    jump           #19690     
#19689: 
    setargs                   2 0
    push           0          u64 
    push           "RESOLVE EQUIV FIELD/COMPLEX" u64 
    callproc       &mm_support.rxerror 
    push           0          u64 
    setret                    u64 
    jump           #19690     
#19690: 
    retfn                     u64 
End


Proc mm_name.addframevar: u64
    param          mm_name.addframevar.owner u64 
    param          mm_name.addframevar.d u64 
    param          mm_name.addframevar.moduleno i64 
    param          mm_name.addframevar.mode i64 
    local          mm_name.addframevar.e u64 
    procentry                 
    setargs                   3 0
    push           12         i64 
    push           mm_name.addframevar.d u64 
    push           mm_name.addframevar.owner u64 
    callfn         &mm_lib.getduplnameptr u64 
    pop            mm_name.addframevar.e u64 
    setargs                   3 0
    push           mm_name.addframevar.e u64 
    push           72         
    addrefoff                 u64 1 0
    push           mm_name.addframevar.mode i64 
    push           mm_name.addframevar.owner u64 
    callproc       &mm_lib.storemode 
    setargs                   2 0
    push           mm_name.addframevar.e u64 
    push           mm_name.addframevar.owner u64 
    callproc       &mm_lib.adddef 
    push           mm_name.addframevar.e u64 
    setret                    u64 
    jump           #19692     
#19692: 
    retfn                     u64 
End


Proc mm_name.copylistunit: u64
    param          mm_name.copylistunit.p u64 
    local          mm_name.copylistunit.q u64 
    local          mm_name.copylistunit.plist u64 
    local          mm_name.copylistunit.plistx u64 
    procentry                 
    push           0          u64 
    store          mm_name.copylistunit.plistx u64 
    pop            mm_name.copylistunit.plist u64 
    jump           #19694     
#19695: 
    setargs                   1 0
    push           mm_name.copylistunit.p u64 
    callfn         &mm_name.copyunit u64 
    pop            mm_name.copylistunit.q u64 
    setargs                   3 0
    push           mm_name.copylistunit.q u64 
    push           &mm_name.copylistunit.plistx 
    push           &mm_name.copylistunit.plist 
    callproc       &mm_lib.addlistunit 
    push           mm_name.copylistunit.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_name.copylistunit.p u64 
#19694: 
    push           mm_name.copylistunit.p u64 
    jumptrue       #19695     u64 
#19696: 
    push           mm_name.copylistunit.plist u64 
    setret                    u64 
    jump           #19697     
#19697: 
    retfn                     u64 
End


Proc mm_name.copyunit: u64
    param          mm_name.copyunit.p u64 
    local          mm_name.copyunit.q u64 
    local          mm_name.copyunit.d u64 
    local          mm_name.copyunit.i i64 
    procentry                 
    push           mm_name.copyunit.p u64 
    push           0          u64 
    jumpne         #19699     u64 
    push           0          u64 
    setret                    u64 
    jump           #19700     
#19699: 
    push           mm_name.copyunit.p u64 
    pushptr                   u8 
    push           3          i64 
    jumpne         #19701     i64 
    push           mm_name.copyunit.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_name.copyunit.d u64 
#19702: 
    push           1          i64 
    pop            mm_name.copyunit.i i64 
    push           mm_name.nmacroparams i64 
    push           1          i64 
    jumplt         #19703     i64 
#19704: 
    push           &mm_name.macroparamsgen 
    push           mm_name.copyunit.i i64 
    pushptroff                u64 8 -8
    push           mm_name.copyunit.d u64 
    jumpne         #19705     u64 
    setargs                   1 0
    push           &mm_name.macroargs 
    push           mm_name.copyunit.i i64 
    pushptroff                u64 8 -8
    callfn         &mm_name.copyunit u64 
    setret                    u64 
    jump           #19700     
    jump           #19703     
#19705: 
#19706: 
    forup          #19704     i64 1
    opnd           mm_name.copyunit.i 
    opnd           mm_name.nmacroparams 
#19703: 
#19701: 
    setargs                   1 0
    push           mm_name.copyunit.p u64 
    pushptr                   u8 
    callfn         &mm_lib.createunit0 u64 
    pop            mm_name.copyunit.q u64 
    push           mm_name.copyunit.p u64 
    pushptr                   block:64 
    push           mm_name.copyunit.q u64 
    popptr                    block:64 
    push           0          u64 
    push           mm_name.copyunit.q u64 
    push           8          
    popptroff                 u64 1 0
    push           mm_name.copyunit.q u64 
    push           1          
    pushptroff                u8 1 0
    jumpfalse      #19707     i64 
    setargs                   1 0
    push           mm_name.copyunit.q u64 
    push           16         
    pushptroff                u64 1 0
    callfn         &mm_name.copylistunit u64 
    push           mm_name.copyunit.q u64 
    push           16         
    popptroff                 u64 1 0
    push           1          i64 
    push           mm_name.copyunit.q u64 
    push           1          
    popptroff                 u8 1 0
#19707: 
    push           mm_name.copyunit.q u64 
    push           2          
    pushptroff                u8 1 0
    jumpfalse      #19708     i64 
    setargs                   1 0
    push           mm_name.copyunit.q u64 
    push           24         
    pushptroff                u64 1 0
    callfn         &mm_name.copylistunit u64 
    push           mm_name.copyunit.q u64 
    push           24         
    popptroff                 u64 1 0
    push           1          i64 
    push           mm_name.copyunit.q u64 
    push           2          
    popptroff                 u8 1 0
#19708: 
    push           mm_name.copyunit.q u64 
    push           3          
    pushptroff                u8 1 0
    jumpfalse      #19709     i64 
    setargs                   1 0
    push           mm_name.copyunit.q u64 
    push           32         
    pushptroff                u64 1 0
    callfn         &mm_name.copylistunit u64 
    push           mm_name.copyunit.q u64 
    push           32         
    popptroff                 u64 1 0
    push           1          i64 
    push           mm_name.copyunit.q u64 
    push           3          
    popptroff                 u8 1 0
#19709: 
    push           mm_name.copyunit.q u64 
    setret                    u64 
    jump           #19700     
#19700: 
    retfn                     u64 
End


Proc mm_name.replaceunit:
    param          mm_name.replaceunit.p u64 
    param          mm_name.replaceunit.q u64 
    local          mm_name.replaceunit.pnext u64 
    procentry                 
    push           mm_name.replaceunit.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_name.replaceunit.pnext u64 
    push           mm_name.replaceunit.q u64 
    pushptr                   block:64 
    push           mm_name.replaceunit.p u64 
    popptr                    block:64 
    push           mm_name.replaceunit.pnext u64 
    push           mm_name.replaceunit.p u64 
    push           8          
    popptroff                 u64 1 0
#19711: 
    retproc                   
End


Proc mm_name.expandmacro:
    param          mm_name.expandmacro.p u64 
    param          mm_name.expandmacro.a u64 
    param          mm_name.expandmacro.b u64 
    local          mm_name.expandmacro.d u64 
    local          mm_name.expandmacro.pm u64 
    local          mm_name.expandmacro.pnew u64 
    local          mm_name.expandmacro.ignoreargs i64 
    procentry                 
    push           mm_name.macrolevels i64 
    push           10         i64 
    jumple         #19713     i64 
    setargs                   2 0
    push           0          u64 
    push           "Too many macro levels (recursive macro?)" u64 
    callproc       &mm_support.rxerror 
#19713: 
    push           mm_name.expandmacro.a u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_name.expandmacro.d u64 
    push           mm_name.expandmacro.d u64 
    push           104        
    pushptroff                u64 1 0
    pop            mm_name.expandmacro.pm u64 
    push           0          i64 
    pop            mm_name.nmacroparams i64 
    jump           #19714     
#19715: 
    push           mm_name.nmacroparams i64 
    push           50         i64 
    jumplt         #19716     i64 
    setargs                   2 0
    push           0          u64 
    push           "macro param overflow" u64 
    callproc       &mm_support.rxerror 
#19716: 
    push           mm_name.expandmacro.pm u64 
    push           &mm_name.macroparams 
    push           &mm_name.nmacroparams 
    incrload                  i64 1
    popptroff                 u64 8 -8
    push           mm_name.expandmacro.pm u64 
    push           104        
    pushptroff                u64 1 0
    push           &mm_name.macroparamsgen 
    push           mm_name.nmacroparams i64 
    popptroff                 u64 8 -8
    push           mm_name.expandmacro.pm u64 
    push           96         
    pushptroff                u64 1 0
    pop            mm_name.expandmacro.pm u64 
#19714: 
    push           mm_name.expandmacro.pm u64 
    jumptrue       #19715     u64 
#19717: 
    push           0          i64 
    pop            mm_name.nmacroargs i64 
    jump           #19718     
#19719: 
    push           mm_name.nmacroargs i64 
    push           50         i64 
    jumplt         #19720     i64 
    setargs                   2 0
    push           0          u64 
    push           "macro arg overflow" u64 
    callproc       &mm_support.rxerror 
#19720: 
    push           mm_name.expandmacro.b u64 
    push           &mm_name.macroargs 
    push           &mm_name.nmacroargs 
    incrload                  i64 1
    popptroff                 u64 8 -8
    push           mm_name.expandmacro.b u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_name.expandmacro.b u64 
#19718: 
    push           mm_name.expandmacro.b u64 
    jumptrue       #19719     u64 
#19721: 
    push           mm_name.nmacroargs i64 
    push           mm_name.nmacroparams i64 
    jumpge         #19722     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "NMACROARGS=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_name.nmacroargs i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           mm_name.nmacroparams i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           0          u64 
    push           "Too few macro args" u64 
    callproc       &mm_support.rxerror 
#19722: 
    push           0          i64 
    pop            mm_name.expandmacro.ignoreargs i64 
    push           mm_name.nmacroargs i64 
    push           0          i64 
    jumple         #19723     i64 
    push           mm_name.nmacroparams i64 
    push           0          i64 
    jumpne         #19723     i64 
    push           1          i64 
    pop            mm_name.expandmacro.ignoreargs i64 
    push           0          i64 
    store          mm_name.nmacroparams i64 
    pop            mm_name.nmacroargs i64 
    jump           #19724     
#19723: 
    push           mm_name.nmacroargs i64 
    push           mm_name.nmacroparams i64 
    jumple         #19725     i64 
    setargs                   2 0
    push           0          u64 
    push           "Too many macro args" u64 
    callproc       &mm_support.rxerror 
#19725: 
#19724: 
    setargs                   1 0
    push           mm_name.expandmacro.d u64 
    push           64         
    pushptroff                u64 1 0
    callfn         &mm_name.copyunit u64 
    pop            mm_name.expandmacro.pnew u64 
    push           mm_name.expandmacro.ignoreargs i64 
    jumptrue       #19726     i64 
    setargs                   2 0
    push           mm_name.expandmacro.pnew u64 
    push           mm_name.expandmacro.p u64 
    callproc       &mm_name.replaceunit 
    jump           #19727     
#19726: 
    push           mm_name.expandmacro.pnew u64 
    push           mm_name.expandmacro.p u64 
    push           16         
    popptroff                 u64 1 0
#19727: 
#19728: 
    retproc                   
End


Proc mm_name.duplfield:
    param          mm_name.duplfield.owner u64 
    param          mm_name.duplfield.p u64 
    param          mm_name.duplfield.q u64 
    procentry                 
    push           mm_name.duplfield.p u64 
    push           64         
    pushptroff                u64 1 0
    jumpfalse      #19730     u64 
    setargs                   1 0
    push           "DUPLFIELD" u64 
    callproc       &mm_support.serror 
#19730: 
    push           mm_name.duplfield.p u64 
    push           92         
    pushptroff                u16 1 0
    push           12         i64 
    dotindex                  i64 
    push           mm_name.duplfield.q u64 
    push           92         
    addrefoff                 u64 1 0
    push           12         i64 
    popdotindex               u16 
    push           mm_name.duplfield.p u64 
    push           92         
    pushptroff                u16 1 0
    push           mm_name.duplfield.q u64 
    push           92         
    popptroff                 u16 1 0
    push           mm_name.duplfield.p u64 
    push           104        
    pushptroff                block:8 1 0
    push           mm_name.duplfield.q u64 
    push           104        
    popptroff                 block:8 1 0
    setargs                   3 0
    push           mm_name.duplfield.q u64 
    push           72         
    addrefoff                 u64 1 0
    push           mm_name.duplfield.p u64 
    push           72         
    pushptroff                i32 1 0
    push           mm_name.duplfield.owner u64 
    callproc       &mm_lib.storemode 
#19731: 
    retproc                   
End


Proc mm_name.do_baseclass:
    param          mm_name.do_baseclass.p u64 
    local          mm_name.do_baseclass.d u64 
    local          mm_name.do_baseclass.e u64 
    local          mm_name.do_baseclass.newd u64 
    local          mm_name.do_baseclass.dbase u64 
    local          mm_name.do_baseclass.normalexit i64 
    procentry                 
    push           &mm_decls.ttnamedef 
    push           mm_name.do_baseclass.p u64 
    push           112        
    pushptroff                i32 1 0
    pushptroff                u64 8 0
    pop            mm_name.do_baseclass.dbase u64 
    push           mm_name.do_baseclass.dbase u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_name.do_baseclass.d u64 
    jump           #19733     
#19734: 
    push           mm_name.do_baseclass.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_name.do_baseclass.e u64 
    push           1          i64 
    pop            mm_name.do_baseclass.normalexit i64 
    jump           #19735     
#19736: 
    setargs                   2 0
    push           mm_name.do_baseclass.e u64 
    pushptr                   u64 
    push           mm_name.do_baseclass.d u64 
    pushptr                   u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #19737     i64 
    push           0          i64 
    pop            mm_name.do_baseclass.normalexit i64 
    jump           #19738     
#19737: 
    push           mm_name.do_baseclass.e u64 
    push           32         
    pushptroff                u64 1 0
    pop            mm_name.do_baseclass.e u64 
#19735: 
    push           mm_name.do_baseclass.e u64 
    jumptrue       #19736     u64 
#19738: 
    push           mm_name.do_baseclass.normalexit i64 
    jumpfalse      #19739     i64 
    push           mm_name.do_baseclass.d u64 
    push           78         
    pushptroff                u8 1 0
    push           5          i64 
    casejumpeq     #19740     i64 0
    push           22         i64 
    casejumpeq     #19740     i64 0
    popstack                  i64 
    jump           #19741     
#19740: 
    setargs                   3 0
    push           22         i64 
    push           mm_name.do_baseclass.d u64 
    push           mm_name.do_baseclass.p u64 
    callfn         &mm_lib.getduplnameptr u64 
    pop            mm_name.do_baseclass.newd u64 
    push           mm_name.do_baseclass.d u64 
    push           mm_name.do_baseclass.newd u64 
    push           96         
    popptroff                 u64 1 0
    jump           #19742     
#19741: 
    setargs                   3 0
    push           mm_name.do_baseclass.d u64 
    push           78         
    pushptroff                u8 1 0
    push           mm_name.do_baseclass.d u64 
    push           mm_name.do_baseclass.p u64 
    callfn         &mm_lib.getduplnameptr u64 
    pop            mm_name.do_baseclass.newd u64 
    setargs                   3 0
    push           mm_name.do_baseclass.newd u64 
    push           mm_name.do_baseclass.d u64 
    push           mm_name.do_baseclass.p u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &mm_name.duplfield 
#19742: 
    setargs                   2 0
    push           mm_name.do_baseclass.newd u64 
    push           mm_name.do_baseclass.p u64 
    callproc       &mm_lib.adddef 
#19739: 
    push           mm_name.do_baseclass.d u64 
    push           32         
    pushptroff                u64 1 0
    pop            mm_name.do_baseclass.d u64 
#19733: 
    push           mm_name.do_baseclass.d u64 
    jumptrue       #19734     u64 
#19743: 
#19744: 
    retproc                   
End


Proc mm_type.$init:
    procentry                 
    setargs                   0 0
    callproc       &mm_tables.inittypetables 
#19746: 
    retproc                   
End


Proc mm_type.tx_allprocs:
    local          mm_type.tx_allprocs.pp u64 
    local          mm_type.tx_allprocs.pcode u64 
    procentry                 
    push           mm_decls.proclist u64 
    pop            mm_type.tx_allprocs.pp u64 
    jump           #19748     
#19749: 
    push           mm_type.tx_allprocs.pp u64 
    pushptr                   u64 
    pop            mm_decls.currproc u64 
    push           mm_decls.currproc u64 
    push           64         
    pushptroff                u64 1 0
    pop            mm_type.tx_allprocs.pcode u64 
    push           &mm_decls.ttisshort 
    push           mm_decls.currproc u64 
    push           72         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    jumpfalse      #19750     i64 
    push           mm_decls.currproc u64 
    push           88         
    pushptroff                u32 1 0
    pop            mm_tables.mlineno i64 
    setargs                   2 0
    push           0          u64 
    push           "proc short ret type" u64 
    callproc       &mm_support.txerror 
#19750: 
    setargs                   3 0
    push           0          i64 
    startmult                 
    push           mm_decls.currproc u64 
    push           116        
    pushptroff                u8 1 0
    push           1          i64 
    jumple         #19751     i64 
    push           31         i64 
    resetmult                 
    jump           #19752     
#19751: 
    push           mm_decls.currproc u64 
    push           72         
    pushptroff                i32 1 0
    endmult                   
#19752: 
    push           mm_type.tx_allprocs.pcode u64 
    callproc       &mm_type.tpass 
    push           &mm_decls.ttbasetype 
    push           mm_decls.currproc u64 
    push           72         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           0          i64 
    casejumpeq     #19753     i64 0
    push           31         i64 
    casejumpeq     #19754     i64 0
    popstack                  i64 
    jump           #19755     
#19753: 
    jump           #19756     
#19754: 
    jump           #19756     
#19755: 
    push           mm_type.tx_allprocs.pcode u64 
    pushptr                   u8 
    push           97         i64 
    jumpeq         #19757     i64 
    setargs                   2 0
    push           97         i64 
    push           mm_type.tx_allprocs.pcode u64 
    callproc       &mm_lib.insertunit 
    push           mm_decls.currproc u64 
    push           72         
    pushptroff                i32 1 0
    push           mm_type.tx_allprocs.pcode u64 
    push           48         
    popptroff                 i32 1 0
    push           1          i64 
    push           mm_type.tx_allprocs.pcode u64 
    push           59         
    popptroff                 u8 1 0
#19757: 
#19756: 
    push           mm_type.tx_allprocs.pp u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_allprocs.pp u64 
#19748: 
    push           mm_type.tx_allprocs.pp u64 
    jumptrue       #19749     u64 
#19758: 
#19759: 
    retproc                   
End


Proc mm_type.tpass:
    param          mm_type.tpass.p u64 
    param          mm_type.tpass.t i64 
    param          mm_type.tpass.lv i64 
    local          mm_type.tpass.d u64 
    local          mm_type.tpass.a u64 
    local          mm_type.tpass.b u64 
    local          mm_type.tpass.c u64 
    local          mm_type.tpass.oldmlineno i64 
    local          mm_type.tpass.m i64 
    local          mm_type.tpass.nparams i64 
    local          mm_type.tpass.paramtype i64 
    local          mm_type.tpass.restype i64 
    procentry                 
    push           mm_type.tpass.p u64 
    push           0          u64 
    jumpne         #19761     u64 
    jump           #19762     
#19761: 
    push           mm_tables.mlineno i64 
    pop            mm_type.tpass.oldmlineno i64 
    push           mm_type.tpass.p u64 
    push           4          
    pushptroff                u32 1 0
    pop            mm_tables.mlineno i64 
    push           mm_type.tpass.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    push           24         
    pushptroff                u64 1 0
    pop            mm_type.tpass.b u64 
    push           mm_type.tpass.t i64 
    push           0          i64 
    setne                     i64 
    push           mm_type.tpass.p u64 
    push           59         
    popptroff                 u8 1 0
    push           mm_type.tpass.p u64 
    pushptr                   u8 
    switch         #19763     1 142
    opnd           #19764     
#19763: 
    switchlabel    #19765     
    switchlabel    #19764     
    switchlabel    #19766     
    switchlabel    #19764     
    switchlabel    #19767     
    switchlabel    #19767     
    switchlabel    #19765     
    switchlabel    #19768     
    switchlabel    #19764     
    switchlabel    #19769     
    switchlabel    #19769     
    switchlabel    #19770     
    switchlabel    #19771     
    switchlabel    #19772     
    switchlabel    #19772     
    switchlabel    #19772     
    switchlabel    #19773     
    switchlabel    #19774     
    switchlabel    #19775     
    switchlabel    #19776     
    switchlabel    #19777     
    switchlabel    #19764     
    switchlabel    #19764     
    switchlabel    #19778     
    switchlabel    #19779     
    switchlabel    #19764     
    switchlabel    #19764     
    switchlabel    #19764     
    switchlabel    #19780     
    switchlabel    #19780     
    switchlabel    #19781     
    switchlabel    #19764     
    switchlabel    #19764     
    switchlabel    #19782     
    switchlabel    #19783     
    switchlabel    #19784     
    switchlabel    #19785     
    switchlabel    #19786     
    switchlabel    #19787     
    switchlabel    #19788     
    switchlabel    #19764     
    switchlabel    #19764     
    switchlabel    #19764     
    switchlabel    #19764     
    switchlabel    #19764     
    switchlabel    #19764     
    switchlabel    #19789     
    switchlabel    #19790     
    switchlabel    #19764     
    switchlabel    #19791     
    switchlabel    #19792     
    switchlabel    #19764     
    switchlabel    #19793     
    switchlabel    #19793     
    switchlabel    #19764     
    switchlabel    #19793     
    switchlabel    #19794     
    switchlabel    #19764     
    switchlabel    #19795     
    switchlabel    #19796     
    switchlabel    #19797     
    switchlabel    #19798     
    switchlabel    #19799     
    switchlabel    #19800     
    switchlabel    #19801     
    switchlabel    #19764     
    switchlabel    #19764     
    switchlabel    #19802     
    switchlabel    #19802     
    switchlabel    #19803     
    switchlabel    #19804     
    switchlabel    #19805     
    switchlabel    #19764     
    switchlabel    #19764     
    switchlabel    #19806     
    switchlabel    #19764     
    switchlabel    #19807     
    switchlabel    #19807     
    switchlabel    #19764     
    switchlabel    #19764     
    switchlabel    #19764     
    switchlabel    #19764     
    switchlabel    #19764     
    switchlabel    #19764     
    switchlabel    #19764     
    switchlabel    #19764     
    switchlabel    #19764     
    switchlabel    #19764     
    switchlabel    #19764     
    switchlabel    #19764     
    switchlabel    #19764     
    switchlabel    #19764     
    switchlabel    #19808     
    switchlabel    #19809     
    switchlabel    #19809     
    switchlabel    #19781     
    switchlabel    #19810     
    switchlabel    #19811     
    switchlabel    #19812     
    switchlabel    #19813     
    switchlabel    #19814     
    switchlabel    #19815     
    switchlabel    #19815     
    switchlabel    #19816     
    switchlabel    #19816     
    switchlabel    #19817     
    switchlabel    #19818     
    switchlabel    #19819     
    switchlabel    #19820     
    switchlabel    #19821     
    switchlabel    #19821     
    switchlabel    #19821     
    switchlabel    #19821     
    switchlabel    #19822     
    switchlabel    #19823     
    switchlabel    #19823     
    switchlabel    #19824     
    switchlabel    #19824     
    switchlabel    #19825     
    switchlabel    #19826     
    switchlabel    #19827     
    switchlabel    #19828     
    switchlabel    #19828     
    switchlabel    #19828     
    switchlabel    #19828     
    switchlabel    #19764     
    switchlabel    #19764     
    switchlabel    #19764     
    switchlabel    #19764     
    switchlabel    #19829     
    switchlabel    #19830     
    switchlabel    #19764     
    switchlabel    #19764     
    switchlabel    #19831     
    switchlabel    #19764     
    switchlabel    #19764     
    switchlabel    #19764     
    switchlabel    #19764     
    switchlabel    #19832     
    switchlabel    #19764     
    switchlabel    #19764     
    switchlabel    #19833     
    endswitch                 
#19766: 
    setargs                   3 0
    push           mm_type.tpass.lv i64 
    push           mm_type.tpass.t i64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_name 
    jump           #19834     
#19765: 
    jump           #19834     
#19801: 
    push           4          i64 
    push           mm_type.tpass.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #19834     
#19802: 
    setargs                   2 0
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_bytesize 
    jump           #19834     
#19784: 
    setargs                   3 0
    push           mm_type.tpass.b u64 
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_bin 
    jump           #19834     
#19785: 
    setargs                   2 0
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_unary 
    jump           #19834     
#19786: 
    setargs                   3 0
    push           mm_type.tpass.b u64 
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_binto 
    jump           #19834     
#19787: 
    setargs                   2 0
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_unaryto 
    jump           #19834     
#19780: 
    setargs                   4 0
    push           mm_type.tpass.t i64 
    push           mm_type.tpass.b u64 
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_assign 
    jump           #19834     
#19779: 
    jump           #19835     
#19836: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tpass.a u64 
    callproc       &mm_type.tpass 
    push           mm_type.tpass.a u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tpass.a u64 
#19835: 
    push           mm_type.tpass.a u64 
    jumptrue       #19836     u64 
#19837: 
    jump           #19834     
#19782: 
    setargs                   3 0
    push           mm_type.tpass.b u64 
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_cmp 
    jump           #19834     
#19795: 
    push           mm_type.tpass.a u64 
    pushptr                   u8 
    push           57         i64 
    jumpne         #19838     i64 
    setargs                   2 0
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_lib.deleteunit 
    setargs                   2 0
    push           mm_type.tpass.p u64 
    push           16         
    pushptroff                u64 1 0
    push           mm_type.tpass.p u64 
    callproc       &mm_lib.deleteunit 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tpass.t i64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tpass 
    jump           #19839     
#19838: 
    setargs                   3 0
    push           1          i64 
    push           26         i64 
    push           mm_type.tpass.a u64 
    callproc       &mm_type.tpass 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tpass.a u64 
    push           48         
    pushptroff                i32 1 0
    push           0          u64 
    callfn         &mm_lib.createrefmode i64 
    push           mm_type.tpass.p u64 
    push           48         
    popptroff                 i32 1 0
#19839: 
    jump           #19834     
#19796: 
    setargs                   3 0
    push           mm_type.tpass.t i64 
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_addroffirst 
    jump           #19834     
#19813: 
    setargs                   6 0
    push           mm_type.tpass.lv i64 
    push           mm_type.tpass.t i64 
    push           mm_type.tpass.p u64 
    push           32         
    pushptroff                u64 1 0
    push           mm_type.tpass.b u64 
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_if 
    jump           #19834     
#19814: 
    setargs                   5 0
    push           mm_type.tpass.lv i64 
    push           mm_type.tpass.t i64 
    push           mm_type.tpass.b u64 
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_longif 
    jump           #19834     
#19790: 
    setargs                   5 0
    push           mm_type.tpass.lv i64 
    push           mm_type.tpass.t i64 
    push           mm_type.tpass.b u64 
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_index 
    jump           #19834     
#19794: 
    setargs                   4 0
    push           mm_type.tpass.lv i64 
    push           mm_type.tpass.t i64 
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_ptr 
    jump           #19834     
#19781: 
    setargs                   4 0
    push           mm_type.tpass.t i64 
    push           mm_type.tpass.b u64 
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_callproc 
    jump           #19834     
#19792: 
    setargs                   4 0
    push           mm_type.tpass.lv i64 
    push           mm_type.tpass.b u64 
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_dot 
    jump           #19834     
#19772: 
    setargs                   3 0
    push           mm_type.tpass.b u64 
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_andl 
    jump           #19834     
#19773: 
    setargs                   2 0
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_notl 
    jump           #19834     
#19774: 
    setargs                   2 0
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_istruel 
    jump           #19834     
#19797: 
    setargs                   3 0
    push           1          i64 
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_convert 
    jump           #19834     
#19800: 
    setargs                   2 0
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_typepun 
    jump           #19834     
#19789: 
    setargs                   2 0
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_sliceptr 
    jump           #19834     
#19788: 
    setargs                   3 0
    push           mm_type.tpass.t i64 
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_incrto 
    jump           #19834     
#19776: 
    setargs                   3 0
    push           mm_type.tpass.b u64 
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_makerange 
    jump           #19834     
#19777: 
    setargs                   3 0
    push           mm_type.tpass.t i64 
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_makeset 
    jump           #19834     
#19825: 
    setargs                   3 0
    push           mm_type.tpass.b u64 
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_swap 
    jump           #19834     
#19826: 
    setargs                   6 0
    push           mm_type.tpass.lv i64 
    push           mm_type.tpass.t i64 
    push           mm_type.tpass.p u64 
    push           32         
    pushptroff                u64 1 0
    push           mm_type.tpass.b u64 
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_select 
    jump           #19834     
#19824: 
    setargs                   6 0
    push           mm_type.tpass.lv i64 
    push           mm_type.tpass.t i64 
    push           mm_type.tpass.p u64 
    push           32         
    pushptroff                u64 1 0
    push           mm_type.tpass.b u64 
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_switch 
    jump           #19834     
#19823: 
    setargs                   6 0
    push           mm_type.tpass.lv i64 
    push           mm_type.tpass.t i64 
    push           mm_type.tpass.p u64 
    push           32         
    pushptroff                u64 1 0
    push           mm_type.tpass.b u64 
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_case 
    jump           #19834     
#19778: 
    setargs                   3 0
    push           mm_type.tpass.t i64 
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_exprlist 
    jump           #19834     
#19793: 
    setargs                   4 0
    push           mm_type.tpass.lv i64 
    push           mm_type.tpass.b u64 
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_dotindex 
    jump           #19834     
#19791: 
    setargs                   3 0
    push           mm_type.tpass.b u64 
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_slice 
    jump           #19834     
#19767: 
    setargs                   4 0
    push           mm_type.tpass.lv i64 
    push           mm_type.tpass.t i64 
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_block 
    jump           #19834     
#19832: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tpass.a u64 
    callproc       &mm_type.tpass 
    jump           #19834     
#19822: 
    setargs                   3 0
    push           0          i64 
    push           0          i64 
    push           mm_type.tpass.a u64 
    callproc       &mm_type.tpass 
    jump           #19834     
#19810: 
    setargs                   3 0
    push           mm_type.tpass.t i64 
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_return 
    jump           #19834     
#19828: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tpass.a u64 
    callproc       &mm_type.tx_unitlist 
    setargs                   1 0
    push           mm_type.tpass.a u64 
    callproc       &mm_type.fixchararray 
    jump           #19840     
#19841: 
    push           mm_type.tpass.b u64 
    pushptr                   u8 
    push           93         i64 
    jumpne         #19842     i64 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tpass.b u64 
    push           16         
    pushptroff                u64 1 0
    store          mm_type.tpass.c u64 
    callproc       &mm_type.tpass 
    setargs                   3 0
    push           0          i64 
    push           10         i64 
    push           mm_type.tpass.b u64 
    push           24         
    pushptroff                u64 1 0
    callproc       &mm_type.tpass 
    jump           #19843     
#19842: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tpass.b u64 
    store          mm_type.tpass.c u64 
    callproc       &mm_type.tpass 
#19843: 
    setargs                   1 0
    push           mm_type.tpass.c u64 
    callproc       &mm_type.fixchararray 
    push           mm_type.tpass.b u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tpass.b u64 
#19840: 
    push           mm_type.tpass.b u64 
    jumptrue       #19841     u64 
#19844: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tpass.p u64 
    push           32         
    pushptroff                u64 1 0
    callproc       &mm_type.tx_unitlist 
    jump           #19834     
#19815: 
    setargs                   3 0
    push           mm_type.tpass.p u64 
    push           32         
    pushptroff                u64 1 0
    push           mm_type.tpass.b u64 
    push           mm_type.tpass.a u64 
    callproc       &mm_type.tx_for 
    jump           #19834     
#19816: 
    setargs                   3 0
    push           mm_type.tpass.p u64 
    push           32         
    pushptroff                u64 1 0
    push           mm_type.tpass.b u64 
    push           mm_type.tpass.a u64 
    callproc       &mm_type.tx_forall 
    jump           #19834     
#19812: 
    setargs                   3 0
    push           0          i64 
    push           4          i64 
    push           mm_type.tpass.a u64 
    callproc       &mm_type.tpass 
    setargs                   3 0
    push           0          i64 
    push           0          i64 
    push           mm_type.tpass.b u64 
    callproc       &mm_type.tpass 
    setargs                   3 0
    push           0          i64 
    push           4          i64 
    push           mm_type.tpass.p u64 
    push           32         
    pushptroff                u64 1 0
    callproc       &mm_type.tpass 
    jump           #19834     
#19799: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tpass.a u64 
    callproc       &mm_type.tpass 
    push           mm_type.tpass.t i64 
    push           26         i64 
    jumpne         #19845     i64 
    setargs                   2 0
    push           0          u64 
    push           "cast() needs type" u64 
    callproc       &mm_support.txerror 
#19845: 
    setargs                   3 0
    push           1          i64 
    push           mm_type.tpass.t i64 
    push           mm_type.tpass.a u64 
    callproc       &mm_type.coerceunit 
    setargs                   2 0
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_lib.deleteunit 
    jump           #19834     
#19775: 
    setargs                   4 0
    push           mm_type.tpass.lv i64 
    push           mm_type.tpass.t i64 
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_makelist 
    jump           #19834     
#19831: 
    setargs                   3 0
    push           0          i64 
    push           4          i64 
    push           mm_type.tpass.a u64 
    callproc       &mm_type.tpass 
    jump           #19834     
#19821: 
    setargs                   2 0
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_exit 
    jump           #19834     
#19819: 
    setargs                   2 0
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_goto 
    jump           #19834     
#19820: 
    jump           #19834     
#19817: 
    setargs                   1 0
    push           mm_type.tpass.a u64 
    callproc       &mm_type.tcond 
    setargs                   1 0
    push           mm_type.tpass.a u64 
    callfn         &mm_type.iscondtrue i64 
    jumpfalse      #19846     i64 
    push           114        i64 
    push           mm_type.tpass.p u64 
    push           0          
    popptroff                 u8 1 0
    push           mm_type.tpass.b u64 
    push           mm_type.tpass.p u64 
    push           16         
    popptroff                 u64 1 0
    push           0          i64 
    push           mm_type.tpass.p u64 
    push           2          
    popptroff                 u8 1 0
    jump           #19847     
#19846: 
    setargs                   1 0
    push           mm_type.tpass.a u64 
    callfn         &mm_type.iscondfalse i64 
    jumpfalse      #19848     i64 
    push           2          i64 
    push           mm_type.tpass.p u64 
    push           0          
    popptroff                 u8 1 0
    push           0          i64 
    push           mm_type.tpass.p u64 
    push           2          
    storeptroff               u8 1 0
    push           mm_type.tpass.p u64 
    push           1          
    popptroff                 u8 1 0
#19848: 
#19847: 
    setargs                   3 0
    push           0          i64 
    push           0          i64 
    push           mm_type.tpass.b u64 
    callproc       &mm_type.tpass 
    setargs                   3 0
    push           0          i64 
    push           0          i64 
    push           mm_type.tpass.p u64 
    push           32         
    pushptroff                u64 1 0
    callproc       &mm_type.tpass 
    jump           #19834     
#19818: 
    setargs                   3 0
    push           0          i64 
    push           0          i64 
    push           mm_type.tpass.a u64 
    callproc       &mm_type.tpass 
    setargs                   1 0
    push           mm_type.tpass.b u64 
    callproc       &mm_type.tcond 
    setargs                   1 0
    push           mm_type.tpass.b u64 
    callfn         &mm_type.iscondtrue i64 
    jumptrue       #19849     i64 
    setargs                   1 0
    push           mm_type.tpass.b u64 
    callfn         &mm_type.iscondfalse i64 
    jumpfalse      #19850     i64 
#19849: 
    setargs                   2 0
    push           0          u64 
    push           "repeat/const cond" u64 
    callproc       &mm_support.txerror 
#19850: 
    jump           #19834     
#19809: 
    jump           #19834     
#19768: 
    push           mm_type.tpass.t i64 
    push           0          i64 
    jumpeq         #19851     i64 
    push           mm_type.tpass.t i64 
    push           mm_type.tpass.p u64 
    push           48         
    popptroff                 i32 1 0
#19851: 
    push           1          i64 
    pop            mm_type.inassem i64 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tpass.a u64 
    callproc       &mm_type.tx_unitlist 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tpass.b u64 
    callproc       &mm_type.tx_unitlist 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tpass.p u64 
    push           32         
    pushptroff                u64 1 0
    callproc       &mm_type.tx_unitlist 
    push           0          i64 
    pop            mm_type.inassem i64 
    jump           #19834     
#19769: 
    jump           #19834     
#19770: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tpass.a u64 
    callproc       &mm_type.tpass 
    jump           #19834     
#19803: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tpass.a u64 
    callproc       &mm_type.tpass 
    push           mm_type.tpass.a u64 
    pushptr                   u8 
    push           65         i64 
    jumpne         #19852     i64 
    push           mm_type.tpass.a u64 
    push           16         
    pushptroff                i64 1 0
    push           mm_type.tpass.p u64 
    push           16         
    popptroff                 i64 1 0
    jump           #19853     
#19852: 
    push           mm_type.tpass.a u64 
    push           48         
    pushptroff                i32 1 0
    push           mm_type.tpass.p u64 
    push           16         
    popptroff                 i64 1 0
#19853: 
    push           65         i64 
    push           mm_type.tpass.p u64 
    push           0          
    popptroff                 u8 1 0
    push           4          i64 
    push           mm_type.tpass.p u64 
    push           48         
    popptroff                 i32 1 0
    push           0          i64 
    push           mm_type.tpass.p u64 
    push           1          
    popptroff                 u8 1 0
    jump           #19834     
#19804: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tpass.a u64 
    callproc       &mm_type.tpass 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "TYPESTR"  u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    setargs                   2 0
    push           1          i64 
    push           mm_type.tpass.a u64 
    push           48         
    pushptroff                i32 1 0
    callfn         &mm_lib.strmode u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           mm_type.tpass.a u64 
    pushptr                   u8 
    push           65         i64 
    jumpne         #19854     i64 
    push           mm_type.tpass.a u64 
    push           16         
    pushptroff                i64 1 0
    pop            mm_type.tpass.m i64 
    jump           #19855     
#19854: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tpass.a u64 
    callproc       &mm_type.tpass 
    push           mm_type.tpass.a u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.tpass.m i64 
#19855: 
    push           1          i64 
    push           mm_type.tpass.p u64 
    push           0          
    popptroff                 u8 1 0
    push           10         i64 
    push           mm_type.tpass.p u64 
    push           48         
    popptroff                 i32 1 0
    push           0          u64 
    push           mm_type.tpass.p u64 
    push           16         
    popptroff                 u64 1 0
    push           0          i64 
    push           mm_type.tpass.p u64 
    push           1          
    popptroff                 u8 1 0
    setargs                   1 0
    setargs                   2 0
    push           0          i64 
    push           mm_type.tpass.m i64 
    callfn         &mm_lib.strmode u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           mm_type.tpass.p u64 
    push           16         
    popptroff                 u64 1 0
    setargs                   1 0
    push           mm_type.tpass.p u64 
    push           16         
    pushptroff                u64 1 0
    callfn         &strlen    i64 
    push           mm_type.tpass.p u64 
    push           40         
    popptroff                 u32 1 0
    push           1          i64 
    push           mm_type.tpass.p u64 
    push           44         
    popptroff                 u8 1 0
    jump           #19834     
#19808: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tpass.a u64 
    callproc       &mm_type.tpass 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tpass.b u64 
    callproc       &mm_type.tpass 
    jump           #19834     
#19830: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tpass.a u64 
    callproc       &mm_type.tpass 
    jump           #19834     
#19829: 
    push           mm_type.tpass.a u64 
    jumpfalse      #19856     u64 
    setargs                   3 0
    push           0          i64 
    push           1          i64 
    push           mm_type.tpass.a u64 
    callproc       &mm_type.tpass 
#19856: 
    push           &mm_decls.ttisallnum 
    push           mm_type.tpass.t i64 
    pushptroff                u8 1 0
    jumpfalse      #19857     i64 
    setargs                   1 0
    push           mm_type.tpass.t i64 
    callfn         &mm_lib.gettypebase i64 
    pop            mm_type.tpass.t i64 
#19857: 
    push           mm_type.tpass.t i64 
    push           mm_type.tpass.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #19834     
#19827: 
    push           mm_type.tpass.a u64 
    jumpfalse      #19858     u64 
    setargs                   3 0
    push           0          i64 
    push           4          i64 
    push           mm_type.tpass.a u64 
    callproc       &mm_type.tpass 
    push           mm_type.tpass.a u64 
    pushptr                   u8 
    push           1          i64 
    jumpeq         #19859     i64 
    setargs                   2 0
    push           0          u64 
    push           "recase must be const" u64 
    callproc       &mm_support.txerror 
#19859: 
#19858: 
    jump           #19834     
#19806: 
    push           4          i64 
    push           mm_type.tpass.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #19834     
#19807: 
    push           10         i64 
    push           mm_type.tpass.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #19834     
#19805: 
    setargs                   3 0
    push           mm_type.tpass.lv i64 
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_bitfield 
    jump           #19834     
#19811: 
    push           0          i64 
    pop            mm_type.tpass.restype i64 
    push           0          i64 
    pop            mm_type.tpass.paramtype i64 
    push           mm_type.tpass.p u64 
    push           40         
    pushptroff                i16 1 0
    push           30         i64 
    casejumpeq     #19860     i64 0
    push           31         i64 
    casejumpeq     #19861     i64 0
    push           32         i64 
    casejumpeq     #19862     i64 0
    popstack                  i64 
    jump           #19863     
#19860: 
    push           4          i64 
    pop            mm_type.tpass.restype i64 
    jump           #19864     
#19861: 
    push           4          i64 
    pop            mm_type.tpass.paramtype i64 
    push           10         i64 
    pop            mm_type.tpass.restype i64 
    jump           #19864     
#19862: 
    push           4          i64 
    pop            mm_type.tpass.paramtype i64 
    push           9          i64 
    pop            mm_type.tpass.restype i64 
    jump           #19864     
#19863: 
#19864: 
    push           mm_type.tpass.paramtype i64 
    push           0          i64 
    jumpeq         #19865     i64 
    push           mm_type.tpass.a u64 
    push           0          u64 
    jumpne         #19866     u64 
    setargs                   2 0
    push           0          u64 
    push           "sys: arg missing" u64 
    callproc       &mm_support.txerror 
#19866: 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tpass.paramtype i64 
    push           mm_type.tpass.a u64 
    callproc       &mm_type.tpass 
    push           mm_type.tpass.a u64 
    push           8          
    pushptroff                u64 1 0
    jumpfalse      #19867     u64 
    setargs                   2 0
    push           0          u64 
    push           "sys: too many args" u64 
    callproc       &mm_support.txerror 
#19867: 
    jump           #19868     
#19865: 
    push           mm_type.tpass.a u64 
    jumpfalse      #19869     u64 
    setargs                   2 0
    push           0          u64 
    push           "sys: too many args" u64 
    callproc       &mm_support.txerror 
#19869: 
#19868: 
    push           mm_type.tpass.restype i64 
    push           mm_type.tpass.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #19834     
#19783: 
    setargs                   2 0
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_cmpchain 
    jump           #19834     
#19833: 
    setargs                   3 0
    push           1          i64 
    push           26         i64 
    push           mm_type.tpass.a u64 
    callproc       &mm_type.tpass 
    jump           #19834     
#19798: 
    jump           #19834     
#19771: 
    setargs                   2 0
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_strinclude 
    jump           #19834     
#19764: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "TXUNIT: CAN'T DO:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_tables.jtagnames 
    push           mm_type.tpass.p u64 
    pushptr                   u8 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
!doelse::
#19870: 
    push           mm_type.tpass.p u64 
    push           1          
    pushptroff                u8 1 0
    jumpfalse      #19871     i64 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tpass.t i64 
    push           mm_type.tpass.a u64 
    callproc       &mm_type.tx_unitlist 
#19871: 
    push           mm_type.tpass.p u64 
    push           2          
    pushptroff                u8 1 0
    jumpfalse      #19872     i64 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tpass.t i64 
    push           mm_type.tpass.b u64 
    callproc       &mm_type.tx_unitlist 
#19872: 
    push           mm_type.tpass.p u64 
    push           3          
    pushptroff                u8 1 0
    jumpfalse      #19873     i64 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tpass.t i64 
    push           mm_type.tpass.p u64 
    push           32         
    pushptroff                u64 1 0
    callproc       &mm_type.tx_unitlist 
#19873: 
#19834: 
    setargs                   1 0
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tevaluate 
    push           mm_type.tpass.p u64 
    pushptr                   u8 
    push           19         i64 
    casejumpeq     #19874     i64 0
    push           97         i64 
    casejumpeq     #19874     i64 0
    popstack                  i64 
    jump           #19875     
#19874: 
    jump           #19876     
#19875: 
    push           mm_type.tpass.t i64 
    push           26         i64 
    jumpeq         #19877     i64 
    push           mm_type.tpass.t i64 
    push           0          i64 
    jumpeq         #19877     i64 
    push           mm_type.tpass.p u64 
    push           48         
    pushptroff                i32 1 0
    push           mm_type.tpass.t i64 
    jumpeq         #19877     i64 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tpass.t i64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.coerceunit 
#19877: 
#19876: 
    push           mm_type.tpass.t i64 
    push           0          i64 
    jumpne         #19878     i64 
    push           mm_type.tpass.p u64 
    pushptr                   u8 
    push           1          i64 
    casejumpeq     #19879     i64 0
    push           36         i64 
    casejumpeq     #19879     i64 0
    push           37         i64 
    casejumpeq     #19879     i64 0
    push           34         i64 
    casejumpeq     #19879     i64 0
    push           3          i64 
    casejumpeq     #19880     i64 0
    popstack                  i64 
    jump           #19881     
#19879: 
    setargs                   2 0
    push           0          u64 
    push           "Eval needed" u64 
    callproc       &mm_support.txerror 
    jump           #19882     
#19880: 
    push           &mm_decls.ttisref 
    push           mm_type.tpass.p u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    jumpfalse      #19883     i64 
    push           &mm_decls.tttarget 
    push           mm_type.tpass.p u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           28         i64 
    jumpeq         #19884     i64 
#19883: 
    setargs                   2 0
    push           0          u64 
    push           "Eval needed2" u64 
    callproc       &mm_support.txerror 
#19884: 
    jump           #19882     
#19881: 
#19882: 
#19878: 
    push           mm_type.tpass.oldmlineno i64 
    pop            mm_tables.mlineno i64 
#19762: 
    retproc                   
End


Proc mm_type.tx_block:
    param          mm_type.tx_block.p u64 
    param          mm_type.tx_block.a u64 
    param          mm_type.tx_block.t i64 
    param          mm_type.tx_block.lv i64 
    procentry                 
    jump           #19886     
#19887: 
    setargs                   3 0
    push           0          i64 
    push           0          i64 
    push           mm_type.tx_block.a u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_block.a u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_block.a u64 
#19886: 
    push           mm_type.tx_block.a u64 
    jumpfalse      #19888     u64 
    push           mm_type.tx_block.a u64 
    push           8          
    pushptroff                u64 1 0
    jumptrue       #19887     u64 
#19888: 
#19889: 
    push           mm_type.tx_block.a u64 
    jumpfalse      #19890     u64 
    setargs                   3 0
    push           mm_type.tx_block.lv i64 
    push           mm_type.tx_block.t i64 
    push           mm_type.tx_block.a u64 
    callproc       &mm_type.tx_unitlist 
    startmult                 
    push           mm_type.tx_block.t i64 
    push           0          i64 
    jumpeq         #19891     i64 
    push           mm_type.tx_block.a u64 
    push           48         
    pushptroff                i32 1 0
    resetmult                 
    jump           #19892     
#19891: 
    push           0          i64 
    endmult                   
#19892: 
    push           mm_type.tx_block.p u64 
    push           48         
    popptroff                 i32 1 0
#19890: 
#19893: 
    retproc                   
End


Proc mm_type.tx_typetable:
    local          mm_type.tx_typetable.d u64 
    local          mm_type.tx_typetable.i i64 
    procentry                 
#19895: 
    push           33         i64 
    pop            mm_type.tx_typetable.i i64 
    push           mm_decls.ntypes i64 
    push           33         i64 
    jumplt         #19896     i64 
#19897: 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_typetable.i i64 
    pushptroff                i32 4 0
    push           13         i64 
    jumpne         #19898     i64 
    setargs                   1 0
    push           &mm_decls.ttnamedef 
    push           mm_type.tx_typetable.i i64 
    pushptroff                u64 8 0
    store          mm_type.tx_typetable.d u64 
    callproc       &mm_type.tx_passdef 
#19898: 
    setargs                   1 0
    push           mm_type.tx_typetable.i i64 
    callproc       &mm_type.setmodesize 
#19899: 
    forup          #19897     i64 1
    opnd           mm_type.tx_typetable.i 
    opnd           mm_decls.ntypes 
#19896: 
#19900: 
    retproc                   
End


Proc mm_type.setmodesize:
    param          mm_type.setmodesize.m i64 
    local          mm_type.setmodesize.size i64 
    local          mm_type.setmodesize.target i64 
    procentry                 
    push           &mm_decls.ttsize 
    push           mm_type.setmodesize.m i64 
    pushptroff                i32 4 0
    jumpfalse      #19902     i64 
    jump           #19903     
#19902: 
    push           &mm_decls.ttlineno 
    push           mm_type.setmodesize.m i64 
    pushptroff                i32 4 0
    pop            mm_tables.mlineno i64 
    push           &mm_decls.ttbasetype 
    push           mm_type.setmodesize.m i64 
    pushptroff                i32 4 0
    push           11         i64 
    casejumpeq     #19904     i64 0
    push           13         i64 
    casejumpeq     #19905     i64 0
    push           0          i64 
    casejumpeq     #19906     i64 0
    push           27         i64 
    casejumpeq     #19906     i64 0
    push           12         i64 
    casejumpeq     #19907     i64 0
    push           25         i64 
    casejumpeq     #19908     i64 0
    push           26         i64 
    casejumpeq     #19909     i64 0
    push           32         i64 
    casejumpeq     #19910     i64 0
    push           24         i64 
    casejumpeq     #19911     i64 0
    push           31         i64 
    casejumpeq     #19912     i64 0
    popstack                  i64 
    jump           #19913     
#19904: 
    setargs                   1 0
    push           mm_type.setmodesize.m i64 
    callproc       &mm_type.setarraysize 
    jump           #19914     
#19905: 
    setargs                   1 0
    push           mm_type.setmodesize.m i64 
    callproc       &mm_type.setrecordsize 
    jump           #19914     
#19906: 
    jump           #19914     
#19907: 
    setargs                   1 0
    push           mm_type.setmodesize.m i64 
    callproc       &mm_type.setslicesize 
    jump           #19914     
#19908: 
    setargs                   2 0
    push           0          u64 
    push           "SETMODESIZE/AUTO?" u64 
    callproc       &mm_support.txerror 
    jump           #19914     
#19909: 
    jump           #19914     
#19910: 
    push           &mm_decls.tttarget 
    push           mm_type.setmodesize.m i64 
    pushptroff                i32 4 0
    pop            mm_type.setmodesize.target i64 
    setargs                   1 0
    push           mm_type.setmodesize.target i64 
    callproc       &mm_type.setmodesize 
    push           &mm_decls.ttbasetype 
    push           mm_type.setmodesize.target i64 
    pushptroff                i32 4 0
    push           &mm_decls.ttbasetype 
    push           mm_type.setmodesize.m i64 
    popptroff                 i32 4 0
    push           &mm_decls.ttsize 
    push           mm_type.setmodesize.target i64 
    pushptroff                i32 4 0
    push           &mm_decls.ttsize 
    push           mm_type.setmodesize.m i64 
    popptroff                 i32 4 0
    push           &mm_decls.ttlower 
    push           mm_type.setmodesize.target i64 
    pushptroff                i32 4 0
    push           &mm_decls.ttlower 
    push           mm_type.setmodesize.m i64 
    popptroff                 i32 4 0
    push           &mm_decls.ttlength 
    push           mm_type.setmodesize.target i64 
    pushptroff                i32 4 0
    push           &mm_decls.ttlength 
    push           mm_type.setmodesize.m i64 
    popptroff                 i32 4 0
    push           &mm_decls.ttnamedef 
    push           mm_type.setmodesize.target i64 
    pushptroff                u64 8 0
    push           &mm_decls.ttnamedef 
    push           mm_type.setmodesize.m i64 
    popptroff                 u64 8 0
    jump           #19914     
#19911: 
    push           8          i64 
    push           &mm_decls.ttsize 
    push           mm_type.setmodesize.m i64 
    popptroff                 i32 4 0
    jump           #19914     
#19912: 
    jump           #19914     
#19913: 
    push           &mm_decls.ttsize 
    push           &mm_decls.ttbasetype 
    push           mm_type.setmodesize.m i64 
    pushptroff                i32 4 0
    pushptroff                i32 4 0
    store          mm_type.setmodesize.size i64 
    jumpfalse      #19915     i64 
    push           mm_type.setmodesize.size i64 
    push           &mm_decls.ttsize 
    push           mm_type.setmodesize.m i64 
    popptroff                 i32 4 0
    jump           #19903     
#19915: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "SIZE 0:"  u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    setargs                   2 0
    push           1          i64 
    push           mm_type.setmodesize.m i64 
    callfn         &mm_lib.strmode u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "M="       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_type.setmodesize.m i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           "STDNAMES[TTBASETYPE[M]]=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_tables.stdnames 
    push           &mm_decls.ttbasetype 
    push           mm_type.setmodesize.m i64 
    pushptroff                i32 4 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Can't set mode size" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#19914: 
#19903: 
    retproc                   
End


Proc mm_type.setarraysize:
    param          mm_type.setarraysize.m i64 
    local          mm_type.setarraysize.lower i64 
    local          mm_type.setarraysize.length i64 
    local          mm_type.setarraysize.elemsize i64 
    local          mm_type.setarraysize.target i64 
    local          mm_type.setarraysize.size i64 
    local          mm_type.setarraysize.pdim u64 
    local          mm_type.setarraysize.a u64 
    local          mm_type.setarraysize.b u64 
    procentry                 
    push           &mm_decls.ttsizeset 
    push           mm_type.setarraysize.m i64 
    pushptroff                u8 1 0
    jumpfalse      #19917     i64 
    jump           #19918     
#19917: 
    push           &mm_decls.ttdimexpr 
    push           mm_type.setarraysize.m i64 
    pushptroff                u64 8 0
    pop            mm_type.setarraysize.pdim u64 
    push           mm_type.setarraysize.pdim u64 
    jumpfalse      #19919     u64 
    push           mm_type.setarraysize.pdim u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_type.setarraysize.a u64 
    push           mm_type.setarraysize.pdim u64 
    push           24         
    pushptroff                u64 1 0
    pop            mm_type.setarraysize.b u64 
    setargs                   2 0
    push           mm_type.setarraysize.pdim u64 
    push           &mm_decls.ttowner 
    push           mm_type.setarraysize.m i64 
    pushptroff                u64 8 0
    callproc       &mm_name.rx_unit 
    push           mm_type.setarraysize.pdim u64 
    pushptr                   u8 
    push           20         i64 
    casejumpeq     #19920     i64 0
    push           28         i64 
    casejumpeq     #19921     i64 0
    popstack                  i64 
    jump           #19922     
#19920: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.setarraysize.a u64 
    callproc       &mm_type.tpass 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.setarraysize.b u64 
    callproc       &mm_type.tpass 
    setargs                   2 0
    push           26         i64 
    push           mm_type.setarraysize.a u64 
    callfn         &mm_type.getconstint i64 
    pop            mm_type.setarraysize.lower i64 
    setargs                   2 0
    push           26         i64 
    push           mm_type.setarraysize.b u64 
    callfn         &mm_type.getconstint i64 
    push           mm_type.setarraysize.lower i64 
    sub                       i64 
    push           1          i64 
    add                       i64 
    pop            mm_type.setarraysize.length i64 
    jump           #19923     
#19921: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.setarraysize.a u64 
    callproc       &mm_type.tpass 
    setargs                   2 0
    push           26         i64 
    push           mm_type.setarraysize.a u64 
    callfn         &mm_type.getconstint i64 
    pop            mm_type.setarraysize.lower i64 
    push           mm_type.setarraysize.b u64 
    jumpfalse      #19924     u64 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.setarraysize.b u64 
    callproc       &mm_type.tpass 
    setargs                   2 0
    push           26         i64 
    push           mm_type.setarraysize.b u64 
    callfn         &mm_type.getconstint i64 
    pop            mm_type.setarraysize.length i64 
    jump           #19925     
#19924: 
    push           0          i64 
    pop            mm_type.setarraysize.length i64 
#19925: 
    jump           #19923     
#19922: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.setarraysize.pdim u64 
    callproc       &mm_type.tpass 
    setargs                   2 0
    push           26         i64 
    push           mm_type.setarraysize.pdim u64 
    callfn         &mm_type.getconstint i64 
    pop            mm_type.setarraysize.length i64 
    push           1          i64 
    pop            mm_type.setarraysize.lower i64 
#19923: 
    jump           #19926     
#19919: 
    push           1          i64 
    pop            mm_type.setarraysize.lower i64 
    push           0          i64 
    pop            mm_type.setarraysize.length i64 
#19926: 
    push           0          u64 
    push           &mm_decls.ttdimexpr 
    push           mm_type.setarraysize.m i64 
    popptroff                 u64 8 0
    push           mm_type.setarraysize.lower i64 
    push           &mm_decls.ttlower 
    push           mm_type.setarraysize.m i64 
    popptroff                 i32 4 0
    push           mm_type.setarraysize.length i64 
    push           &mm_decls.ttlength 
    push           mm_type.setarraysize.m i64 
    popptroff                 i32 4 0
    push           &mm_decls.tttarget 
    push           mm_type.setarraysize.m i64 
    pushptroff                i32 4 0
    pop            mm_type.setarraysize.target i64 
    setargs                   1 0
    push           mm_type.setarraysize.target i64 
    callproc       &mm_type.setmodesize 
    push           &mm_decls.ttsize 
    push           &mm_decls.tttarget 
    push           mm_type.setarraysize.m i64 
    pushptroff                i32 4 0
    pushptroff                i32 4 0
    pop            mm_type.setarraysize.elemsize i64 
    push           mm_type.setarraysize.length i64 
    push           mm_type.setarraysize.elemsize i64 
    mul                       i64 
    store          mm_type.setarraysize.size i64 
    push           &mm_decls.ttsize 
    push           mm_type.setarraysize.m i64 
    popptroff                 i32 4 0
    push           1          i64 
    push           &mm_decls.ttsizeset 
    push           mm_type.setarraysize.m i64 
    popptroff                 u8 1 0
#19918: 
    retproc                   
End


Proc mm_type.setslicesize:
    param          mm_type.setslicesize.m i64 
    local          mm_type.setslicesize.pdim u64 
    procentry                 
    push           &mm_decls.ttsize 
    push           mm_type.setslicesize.m i64 
    pushptroff                i32 4 0
    jumpfalse      #19928     i64 
    jump           #19929     
#19928: 
    push           &mm_decls.ttdimexpr 
    push           mm_type.setslicesize.m i64 
    pushptroff                u64 8 0
    pop            mm_type.setslicesize.pdim u64 
    push           mm_type.setslicesize.pdim u64 
    jumpfalse      #19930     u64 
    setargs                   2 0
    push           mm_type.setslicesize.pdim u64 
    push           &mm_decls.ttowner 
    push           mm_type.setslicesize.m i64 
    pushptroff                u64 8 0
    callproc       &mm_name.rx_unit 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.setslicesize.pdim u64 
    callproc       &mm_type.tpass 
    setargs                   2 0
    push           26         i64 
    push           mm_type.setslicesize.pdim u64 
    callfn         &mm_type.getconstint i64 
    push           &mm_decls.ttlower 
    push           mm_type.setslicesize.m i64 
    popptroff                 i32 4 0
    push           0          u64 
    push           &mm_decls.ttdimexpr 
    push           mm_type.setslicesize.m i64 
    popptroff                 u64 8 0
    jump           #19931     
#19930: 
    push           1          i64 
    push           &mm_decls.ttlower 
    push           mm_type.setslicesize.m i64 
    popptroff                 i32 4 0
#19931: 
    setargs                   1 0
    push           &mm_decls.tttarget 
    push           mm_type.setslicesize.m i64 
    pushptroff                i32 4 0
    callproc       &mm_type.setmodesize 
    push           &mm_decls.ttsize 
    push           12         i64 
    pushptroff                i32 4 0
    push           &mm_decls.ttsize 
    push           mm_type.setslicesize.m i64 
    popptroff                 i32 4 0
#19929: 
    retproc                   
End


Proc mm_type.tcond:
    param          mm_type.tcond.p u64 
    local          mm_type.tcond.a u64 
    local          mm_type.tcond.b u64 
    procentry                 
    push           mm_type.tcond.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_type.tcond.a u64 
    push           mm_type.tcond.p u64 
    push           24         
    pushptroff                u64 1 0
    pop            mm_type.tcond.b u64 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tcond.p u64 
    callproc       &mm_type.tpass 
#19933: 
    retproc                   
End


Proc mm_type.tx_module: i64
    param          mm_type.tx_module.n i64 
    local          mm_type.tx_module.m block:456 
    local          mm_type.tx_module.stmodule u64 
    local          mm_type.tx_module.d u64 
    local          mm_type.tx_module.globalflag i64 
    local          mm_type.tx_module.status i64 
    procentry                 
    push           mm_type.tx_module.n i64 
    pop            mm_decls.currmoduleno i64 
    setargs                   1 0
    push           &mm_decls.moduletable 
    push           mm_type.tx_module.n i64 
    addrefoff                 block:456 456 0
    push           8          
    pushptroff                u64 1 0
    callproc       &mm_type.tx_passdef 
    push           1          i64 
    setret                    i64 
    jump           #19935     
#19935: 
    retfn                     i64 
End


Proc mm_type.tx_passdef:
    param          mm_type.tx_passdef.p u64 
    local          mm_type.tx_passdef.d u64 
    local          mm_type.tx_passdef.oldmlineno i64 
    local          mm_type.tx_passdef.q u64 
    procentry                 
    push           mm_type.tx_passdef.p u64 
    push           92         
    pushptroff                u16 1 0
    push           4          i64 
    dotindex                  i64 
    jumpfalse      #19937     u64 
    jump           #19938     
#19937: 
    push           mm_tables.mlineno i64 
    pop            mm_type.tx_passdef.oldmlineno i64 
    push           mm_type.tx_passdef.p u64 
    push           88         
    pushptroff                u32 1 0
    pop            mm_tables.mlineno i64 
    push           mm_type.tx_passdef.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_type.tx_passdef.d u64 
    jump           #19939     
#19940: 
    setargs                   1 0
    push           mm_type.tx_passdef.d u64 
    callproc       &mm_type.tx_passdef 
    push           mm_type.tx_passdef.d u64 
    push           32         
    pushptroff                u64 1 0
    pop            mm_type.tx_passdef.d u64 
#19939: 
    push           mm_type.tx_passdef.d u64 
    jumptrue       #19940     u64 
#19941: 
    push           mm_type.tx_passdef.p u64 
    push           64         
    pushptroff                u64 1 0
    pop            mm_type.tx_passdef.q u64 
    push           mm_type.tx_passdef.p u64 
    push           78         
    pushptroff                u8 1 0
    push           5          i64 
    casejumpeq     #19942     i64 0
    push           10         i64 
    casejumpeq     #19943     i64 0
    push           16         i64 
    casejumpeq     #19943     i64 0
    push           11         i64 
    casejumpeq     #19944     i64 0
    push           12         i64 
    casejumpeq     #19944     i64 0
    push           13         i64 
    casejumpeq     #19944     i64 0
    popstack                  i64 
    jump           #19945     
#19942: 
    push           0          u64 
    pop            mm_decls.currproc u64 
    jump           #19946     
#19943: 
    setargs                   1 0
    push           mm_type.tx_passdef.p u64 
    callproc       &mm_type.tx_namedconst 
    jump           #19946     
#19944: 
    setargs                   1 0
    push           mm_type.tx_passdef.p u64 
    callproc       &mm_type.tx_namedef 
    jump           #19946     
#19945: 
#19946: 
    push           1          u64 
    push           mm_type.tx_passdef.p u64 
    push           92         
    addrefoff                 u64 1 0
    push           4          i64 
    popdotindex               u16 
    push           mm_type.tx_passdef.oldmlineno i64 
    pop            mm_tables.mlineno i64 
#19938: 
    retproc                   
End


Proc mm_type.tx_unitlist:
    param          mm_type.tx_unitlist.p u64 
    param          mm_type.tx_unitlist.t i64 
    param          mm_type.tx_unitlist.lv i64 
    procentry                 
    jump           #19948     
#19949: 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_unitlist.t i64 
    push           mm_type.tx_unitlist.p u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_unitlist.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_unitlist.p u64 
#19948: 
    push           mm_type.tx_unitlist.p u64 
    jumptrue       #19949     u64 
#19950: 
#19951: 
    retproc                   
End


Proc mm_type.tx_namedef:
    param          mm_type.tx_namedef.d u64 
    local          mm_type.tx_namedef.m i64 
    local          mm_type.tx_namedef.mold i64 
    local          mm_type.tx_namedef.dcode u64 
    local          mm_type.tx_namedef.pequiv u64 
    procentry                 
    push           mm_type.tx_namedef.d u64 
    push           72         
    pushptroff                i32 1 0
    pop            mm_type.tx_namedef.m i64 
    setargs                   1 0
    push           mm_type.tx_namedef.m i64 
    callproc       &mm_type.setmodesize 
    push           mm_type.tx_namedef.d u64 
    push           92         
    pushptroff                u16 1 0
    push           5          i64 
    dotindex                  i64 
    jumpfalse      #19953     u64 
    setargs                   2 0
    push           0          u64 
    push           "Circular reference detected" u64 
    callproc       &mm_support.txerror 
#19953: 
    push           mm_type.tx_namedef.d u64 
    push           92         
    pushptroff                u16 1 0
    push           4          i64 
    dotindex                  i64 
    jumpfalse      #19954     u64 
    jump           #19955     
#19954: 
    push           mm_type.tx_namedef.d u64 
    push           64         
    pushptroff                u64 1 0
    pop            mm_type.tx_namedef.dcode u64 
    push           1          u64 
    push           mm_type.tx_namedef.d u64 
    push           92         
    addrefoff                 u64 1 0
    push           5          i64 
    popdotindex               u16 
    push           mm_type.tx_namedef.d u64 
    push           92         
    pushptroff                u16 1 0
    push           13         i64 
    dotindex                  i64 
    jumpfalse      #19956     u64 
    push           mm_type.tx_namedef.d u64 
    push           96         
    pushptroff                u64 1 0
    pop            mm_type.tx_namedef.pequiv u64 
    push           mm_type.tx_namedef.pequiv u64 
    pushptr                   u8 
    push           59         i64 
    jumpne         #19957     i64 
    setargs                   2 0
    push           mm_type.tx_namedef.pequiv u64 
    push           16         
    pushptroff                u64 1 0
    push           mm_type.tx_namedef.pequiv u64 
    callproc       &mm_lib.deleteunit 
#19957: 
    push           mm_type.tx_namedef.pequiv u64 
    pushptr                   u8 
    push           3          i64 
    jumpeq         #19958     i64 
    setargs                   2 0
    push           0          u64 
    push           "@name needed" u64 
    callproc       &mm_support.txerror 
#19958: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_namedef.pequiv u64 
    callproc       &mm_type.tpass 
#19956: 
    push           mm_type.tx_namedef.dcode u64 
    jumpfalse      #19959     u64 
    push           mm_type.tx_namedef.d u64 
    push           78         
    pushptroff                u8 1 0
    push           12         i64 
    jumpeq         #19959     i64 
    push           mm_type.tx_namedef.m i64 
    pop            mm_type.tx_namedef.mold i64 
    setargs                   1 0
    push           mm_type.tx_namedef.m i64 
    callfn         &mm_lib.gettypebase i64 
    pop            mm_type.tx_namedef.m i64 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_namedef.m i64 
    pushptroff                i32 4 0
    push           12         i64 
    jumpne         #19960     i64 
    push           mm_type.tx_namedef.dcode u64 
    pushptr                   u8 
    push           1          i64 
    jumpne         #19960     i64 
    push           mm_type.tx_namedef.dcode u64 
    push           48         
    pushptroff                i32 1 0
    push           10         i64 
    jumpne         #19960     i64 
    setargs                   3 0
    push           0          i64 
    push           10         i64 
    push           mm_type.tx_namedef.dcode u64 
    callproc       &mm_type.tpass 
    jump           #19961     
#19960: 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_namedef.m i64 
    push           mm_type.tx_namedef.dcode u64 
    callproc       &mm_type.tpass 
#19961: 
    push           0          u64 
    push           mm_type.tx_namedef.d u64 
    push           92         
    addrefoff                 u64 1 0
    push           5          i64 
    popdotindex               u16 
    push           1          u64 
    push           mm_type.tx_namedef.d u64 
    push           92         
    addrefoff                 u64 1 0
    push           4          i64 
    popdotindex               u16 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_namedef.m i64 
    pushptroff                i32 4 0
    push           11         i64 
    jumpne         #19962     i64 
    push           &mm_decls.ttlength 
    push           mm_type.tx_namedef.m i64 
    pushptroff                i32 4 0
    push           0          i64 
    jumpne         #19962     i64 
    push           mm_type.tx_namedef.dcode u64 
    push           48         
    pushptroff                i32 1 0
    push           mm_type.tx_namedef.d u64 
    push           72         
    popptroff                 i32 1 0
#19962: 
    push           mm_type.tx_namedef.mold i64 
    push           mm_type.tx_namedef.m i64 
    jumpeq         #19963     i64 
    push           &mm_decls.ttisinteger 
    push           mm_type.tx_namedef.m i64 
    pushptroff                u8 1 0
    jumpfalse      #19964     i64 
    push           &mm_decls.ttisshort 
    push           mm_type.tx_namedef.mold i64 
    pushptroff                u8 1 0
    jumpfalse      #19964     i64 
    setargs                   2 0
    push           62         i64 
    push           mm_type.tx_namedef.d u64 
    push           64         
    pushptroff                u64 1 0
    callproc       &mm_lib.insertunit 
    push           mm_type.tx_namedef.mold i64 
    push           mm_type.tx_namedef.d u64 
    push           64         
    pushptroff                u64 1 0
    push           48         
    popptroff                 i32 1 0
    jump           #19965     
#19964: 
    push           mm_type.tx_namedef.mold i64 
    push           6          i64 
    jumpne         #19966     i64 
    push           mm_type.tx_namedef.mold i64 
    push           mm_type.tx_namedef.d u64 
    push           64         
    pushptroff                u64 1 0
    push           48         
    popptroff                 i32 1 0
#19966: 
#19965: 
#19963: 
    push           mm_type.tx_namedef.d u64 
    push           78         
    pushptroff                u8 1 0
    push           11         i64 
    jumpne         #19967     i64 
    setargs                   1 0
    push           mm_type.tx_namedef.d u64 
    push           64         
    pushptroff                u64 1 0
    callproc       &mm_type.checkconstexpr 
#19967: 
    jump           #19968     
#19959: 
    push           mm_type.tx_namedef.dcode u64 
    jumpfalse      #19969     u64 
    push           mm_type.tx_namedef.d u64 
    push           78         
    pushptroff                u8 1 0
    push           12         i64 
    jumpne         #19969     i64 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_namedef.m i64 
    pushptroff                i32 4 0
    push           11         i64 
    jumpne         #19969     i64 
    push           &mm_decls.ttlength 
    push           mm_type.tx_namedef.m i64 
    pushptroff                i32 4 0
    push           0          i64 
    jumpne         #19969     i64 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_namedef.m i64 
    push           mm_type.tx_namedef.dcode u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_namedef.dcode u64 
    push           48         
    pushptroff                i32 1 0
    push           mm_type.tx_namedef.d u64 
    push           72         
    popptroff                 i32 1 0
    push           0          u64 
    push           mm_type.tx_namedef.d u64 
    push           92         
    addrefoff                 u64 1 0
    push           5          i64 
    popdotindex               u16 
    push           1          u64 
    push           mm_type.tx_namedef.d u64 
    push           92         
    addrefoff                 u64 1 0
    push           4          i64 
    popdotindex               u16 
    jump           #19968     
#19969: 
    push           0          u64 
    push           mm_type.tx_namedef.d u64 
    push           92         
    addrefoff                 u64 1 0
    push           5          i64 
    popdotindex               u16 
    push           1          u64 
    push           mm_type.tx_namedef.d u64 
    push           92         
    addrefoff                 u64 1 0
    push           4          i64 
    popdotindex               u16 
#19968: 
#19955: 
    retproc                   
End


Proc mm_type.tx_namedconst:
    param          mm_type.tx_namedconst.d u64 
    local          mm_type.tx_namedconst.m i64 
    local          mm_type.tx_namedconst.q u64 
    procentry                 
    push           mm_type.tx_namedconst.d u64 
    push           92         
    pushptroff                u16 1 0
    push           5          i64 
    dotindex                  i64 
    jumpfalse      #19971     u64 
    setargs                   2 0
    push           0          u64 
    push           "Circular const reference detected" u64 
    callproc       &mm_support.txerror 
#19971: 
    push           mm_type.tx_namedconst.d u64 
    push           92         
    pushptroff                u16 1 0
    push           4          i64 
    dotindex                  i64 
    jumpfalse      #19972     u64 
    jump           #19973     
#19972: 
    push           mm_type.tx_namedconst.d u64 
    push           64         
    pushptroff                u64 1 0
    pop            mm_type.tx_namedconst.q u64 
    push           mm_type.tx_namedconst.d u64 
    push           72         
    pushptroff                i32 1 0
    pop            mm_type.tx_namedconst.m i64 
    push           1          u64 
    push           mm_type.tx_namedconst.d u64 
    push           92         
    addrefoff                 u64 1 0
    push           5          i64 
    popdotindex               u16 
    setargs                   2 0
    startmult                 
    push           mm_type.tx_namedconst.m i64 
    push           25         i64 
    jumpne         #19974     i64 
    push           26         i64 
    resetmult                 
    jump           #19975     
#19974: 
    push           mm_type.tx_namedconst.m i64 
    endmult                   
#19975: 
    push           mm_type.tx_namedconst.q u64 
    callproc       &mm_type.tx_expr 
    push           0          u64 
    push           mm_type.tx_namedconst.d u64 
    push           92         
    addrefoff                 u64 1 0
    push           5          i64 
    popdotindex               u16 
    setargs                   1 0
    push           mm_type.tx_namedconst.q u64 
    callproc       &mm_type.checkconstexpr 
    push           mm_type.tx_namedconst.m i64 
    push           25         i64 
    jumpne         #19976     i64 
    push           mm_type.tx_namedconst.q u64 
    push           48         
    pushptroff                i32 1 0
    push           mm_type.tx_namedconst.d u64 
    push           72         
    popptroff                 i32 1 0
#19976: 
    push           1          u64 
    push           mm_type.tx_namedconst.d u64 
    push           92         
    addrefoff                 u64 1 0
    push           4          i64 
    popdotindex               u16 
#19973: 
    retproc                   
End


Proc mm_type.tx_expr:
    param          mm_type.tx_expr.p u64 
    param          mm_type.tx_expr.t i64 
    procentry                 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_expr.t i64 
    push           mm_type.tx_expr.p u64 
    callproc       &mm_type.tpass 
#19978: 
    retproc                   
End


Proc mm_type.checkconstexpr:
    param          mm_type.checkconstexpr.p u64 
    local          mm_type.checkconstexpr.q u64 
    local          mm_type.checkconstexpr.pmode i64 
    procentry                 
    push           mm_type.checkconstexpr.p u64 
    pushptr                   u8 
    push           1          i64 
    casejumpeq     #19980     i64 0
    push           19         i64 
    casejumpeq     #19981     i64 0
    push           61         i64 
    casejumpeq     #19982     i64 0
    push           62         i64 
    casejumpeq     #19983     i64 0
    push           59         i64 
    casejumpeq     #19984     i64 0
    push           60         i64 
    casejumpeq     #19984     i64 0
    push           3          i64 
    casejumpeq     #19985     i64 0
    popstack                  i64 
    jump           #19986     
#19980: 
    jump           #19987     
    jump           #19988     
#19981: 
    push           mm_type.checkconstexpr.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_type.checkconstexpr.q u64 
    jump           #19989     
#19990: 
    setargs                   1 0
    push           mm_type.checkconstexpr.q u64 
    callproc       &mm_type.checkconstexpr 
    push           mm_type.checkconstexpr.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.checkconstexpr.q u64 
#19989: 
    push           mm_type.checkconstexpr.q u64 
    jumptrue       #19990     u64 
#19991: 
    jump           #19988     
#19982: 
    push           &mm_decls.ttbasetype 
    push           mm_type.checkconstexpr.p u64 
    push           16         
    pushptroff                u64 1 0
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           9          i64 
    jumpne         #19992     i64 
    push           &mm_decls.tttarget 
    push           mm_type.checkconstexpr.p u64 
    push           16         
    pushptroff                u64 1 0
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           0          i64 
    jumpne         #19993     i64 
    push           mm_type.checkconstexpr.p u64 
    push           48         
    pushptroff                i32 1 0
    push           mm_type.checkconstexpr.p u64 
    push           16         
    pushptroff                u64 1 0
    push           48         
    popptroff                 i32 1 0
    setargs                   2 0
    push           mm_type.checkconstexpr.p u64 
    push           16         
    pushptroff                u64 1 0
    push           mm_type.checkconstexpr.p u64 
    callproc       &mm_lib.deleteunit 
    jump           #19994     
#19993: 
    jump           #19995     
#19994: 
#19992: 
    jump           #19995     
    jump           #19988     
#19983: 
    setargs                   1 0
    push           mm_type.checkconstexpr.p u64 
    push           16         
    pushptroff                u64 1 0
    callproc       &mm_type.checkconstexpr 
    jump           #19988     
#19984: 
    push           mm_type.checkconstexpr.p u64 
    push           16         
    pushptroff                u64 1 0
    pushptr                   u8 
    push           3          i64 
    casejumpeq     #19996     i64 0
    popstack                  i64 
    jump           #19997     
#19996: 
    jump           #19998     
#19997: 
    jump           #19995     
#19998: 
    jump           #19988     
#19985: 
    push           mm_type.checkconstexpr.p u64 
    push           16         
    pushptroff                u64 1 0
    push           78         
    pushptroff                u8 1 0
    push           14         i64 
    jumpne         #19999     i64 
    jump           #19987     
#19999: 
    jump           #19995     
    jump           #19988     
#19986: 
!error::
#19995: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &mm_tables.jtagnames 
    push           mm_type.checkconstexpr.p u64 
    pushptr                   u8 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    setargs                   2 0
    push           1          i64 
    push           mm_type.checkconstexpr.p u64 
    push           48         
    pushptroff                i32 1 0
    callfn         &mm_lib.strmode u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   4 0
    push           0          u64 
    push           "*"        u64 
    push           0          i64 
    push           mm_type.checkconstexpr.p u64 
    callproc       &mm_diags.printunit 
    setargs                   2 0
    push           0          u64 
    push           "Getconstexpr: not const" u64 
    callproc       &mm_support.txerror 
#19988: 
#19987: 
    retproc                   
End


Proc mm_type.getconstint: i64
    param          mm_type.getconstint.q u64 
    param          mm_type.getconstint.t i64 
    procentry                 
    setargs                   1 0
    push           mm_type.getconstint.q u64 
    callproc       &mm_type.checkconstexpr 
    push           &mm_decls.ttisinteger 
    push           mm_type.getconstint.q u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    jumpfalse      #20001     i64 
    push           &mm_decls.ttsize 
    push           mm_type.getconstint.q u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           16         i64 
    jumpne         #20002     i64 
    setargs                   2 0
    push           0          u64 
    push           "GETCONSTINT/128" u64 
    callproc       &mm_support.gerror 
#20002: 
    push           mm_type.getconstint.q u64 
    push           16         
    pushptroff                i64 1 0
    setret                    i64 
    jump           #20003     
    jump           #20004     
#20001: 
    push           &mm_decls.ttisreal 
    push           mm_type.getconstint.q u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    jumpfalse      #20005     i64 
    push           mm_type.getconstint.q u64 
    push           16         
    pushptroff                r64 1 0
    fix                       i64 r64 
    setret                    i64 
    jump           #20003     
    jump           #20004     
#20005: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    setargs                   2 0
    push           1          i64 
    push           mm_type.getconstint.q u64 
    push           48         
    pushptroff                i32 1 0
    callfn         &mm_lib.strmode u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           0          u64 
    push           "Getconstint: not int32/64" u64 
    callproc       &mm_support.txerror 
#20004: 
    push           0          i64 
    setret                    i64 
    jump           #20003     
#20003: 
    retfn                     i64 
End


Proc mm_type.makenewconst:
    param          mm_type.makenewconst.p u64 
    param          mm_type.makenewconst.x i64 
    param          mm_type.makenewconst.t i64 
    procentry                 
    push           1          i64 
    push           mm_type.makenewconst.p u64 
    push           0          
    popptroff                 u8 1 0
    push           0          u64 
    push           mm_type.makenewconst.p u64 
    push           24         
    storeptroff               u64 1 0
    push           mm_type.makenewconst.p u64 
    push           16         
    popptroff                 u64 1 0
    push           0          i64 
    push           mm_type.makenewconst.p u64 
    push           2          
    storeptroff               u8 1 0
    push           mm_type.makenewconst.p u64 
    push           1          
    popptroff                 u8 1 0
    push           mm_type.makenewconst.x i64 
    push           mm_type.makenewconst.p u64 
    push           16         
    popptroff                 i64 1 0
    push           1          i64 
    push           mm_type.makenewconst.p u64 
    push           58         
    popptroff                 u8 1 0
    push           mm_type.makenewconst.t i64 
    push           0          i64 
    jumpeq         #20007     i64 
    push           mm_type.makenewconst.t i64 
    push           mm_type.makenewconst.p u64 
    push           48         
    popptroff                 i32 1 0
#20007: 
#20008: 
    retproc                   
End


Proc mm_type.tx_name:
    param          mm_type.tx_name.p u64 
    param          mm_type.tx_name.t i64 
    param          mm_type.tx_name.lv i64 
    local          mm_type.tx_name.d u64 
    local          mm_type.tx_name.oldmlineno i64 
    local          mm_type.tx_name.pcode u64 
    procentry                 
    push           mm_tables.mlineno i64 
    pop            mm_type.tx_name.oldmlineno i64 
    push           mm_type.tx_name.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_type.tx_name.d u64 
    push           mm_type.tx_name.d u64 
    push           88         
    pushptroff                u32 1 0
    pop            mm_tables.mlineno i64 
    push           mm_type.tx_name.d u64 
    push           78         
    pushptroff                u8 1 0
    switch         #20010     2 18
    opnd           #20011     
#20010: 
    switchlabel    #20012     
    switchlabel    #20011     
    switchlabel    #20013     
    switchlabel    #20014     
    switchlabel    #20014     
    switchlabel    #20015     
    switchlabel    #20011     
    switchlabel    #20011     
    switchlabel    #20016     
    switchlabel    #20017     
    switchlabel    #20017     
    switchlabel    #20017     
    switchlabel    #20018     
    switchlabel    #20011     
    switchlabel    #20016     
    switchlabel    #20019     
    switchlabel    #20019     
    endswitch                 
#20016: 
    push           mm_type.tx_name.lv i64 
    jumpfalse      #20020     i64 
    setargs                   2 0
    push           0          u64 
    push           "&const"   u64 
    callproc       &mm_support.txerror 
#20020: 
    setargs                   1 0
    push           mm_type.tx_name.d u64 
    callproc       &mm_type.tx_namedconst 
    push           mm_type.tx_name.d u64 
    push           64         
    pushptroff                u64 1 0
    pop            mm_type.tx_name.pcode u64 
    push           1          i64 
    push           mm_type.tx_name.p u64 
    push           0          
    popptroff                 u8 1 0
    push           0          u64 
    push           mm_type.tx_name.p u64 
    push           16         
    popptroff                 u64 1 0
    push           0          u64 
    push           mm_type.tx_name.p u64 
    push           16         
    popptroff                 u64 1 0
    push           0          u64 
    push           mm_type.tx_name.p u64 
    push           32         
    popptroff                 u64 1 0
    push           0          i64 
    push           mm_type.tx_name.p u64 
    push           3          
    storeptroff               u8 1 0
    push           mm_type.tx_name.p u64 
    push           1          
    popptroff                 u8 1 0
    push           mm_type.tx_name.pcode u64 
    pushptr                   u8 
    push           61         i64 
    jumpne         #20021     i64 
    push           mm_type.tx_name.pcode u64 
    push           16         
    pushptroff                u64 1 0
    push           16         
    pushptroff                i64 1 0
    push           mm_type.tx_name.p u64 
    push           16         
    popptroff                 i64 1 0
    jump           #20022     
#20021: 
    push           mm_type.tx_name.pcode u64 
    push           16         
    pushptroff                i64 1 0
    push           mm_type.tx_name.p u64 
    push           16         
    popptroff                 i64 1 0
#20022: 
    push           mm_type.tx_name.pcode u64 
    push           40         
    pushptroff                u32 1 0
    push           mm_type.tx_name.p u64 
    push           40         
    popptroff                 u32 1 0
    push           mm_type.tx_name.d u64 
    push           72         
    pushptroff                i32 1 0
    push           mm_type.tx_name.p u64 
    push           48         
    popptroff                 i32 1 0
    push           1          i64 
    push           mm_type.tx_name.p u64 
    push           58         
    popptroff                 u8 1 0
    push           mm_type.tx_name.pcode u64 
    push           44         
    pushptroff                u8 1 0
    push           mm_type.tx_name.p u64 
    push           44         
    popptroff                 u8 1 0
    jump           #20023     
#20017: 
    push           mm_type.tx_name.d u64 
    push           92         
    pushptroff                u16 1 0
    push           6          i64 
    dotindex                  i64 
    jumpfalse      #20024     u64 
    push           mm_type.tx_name.lv i64 
    jumpfalse      #20024     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mm_type.tx_name.d u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "LV="      u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_type.tx_name.lv i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   2 0
    push           0          i64 
    push           mm_type.tx_name.d u64 
    push           92         
    pushptroff                u16 1 0
    push           6          i64 
    dotindex                  i64 
    callproc       &msysp.m$print_u64 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           0          u64 
    push           "Can't use 'let' as lvalue" u64 
    callproc       &mm_support.txerror 
#20024: 
    setargs                   1 0
    push           mm_type.tx_name.d u64 
    callproc       &mm_type.tx_namedef 
    push           mm_type.inassem i64 
    jumptrue       #20025     i64 
    push           mm_type.tx_name.d u64 
    push           72         
    pushptroff                i32 1 0
    push           mm_type.tx_name.p u64 
    push           48         
    popptroff                 i32 1 0
    setargs                   2 0
    push           mm_type.tx_name.lv i64 
    push           mm_type.tx_name.p u64 
    callproc       &mm_type.twiden 
    jump           #20026     
#20025: 
    push           10         i64 
    push           mm_type.tx_name.p u64 
    push           48         
    popptroff                 i32 1 0
#20026: 
    jump           #20023     
#20014: 
    push           mm_tables.trefproc i64 
    push           mm_type.tx_name.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #20023     
#20019: 
    push           mm_tables.treflabel i64 
    push           mm_type.tx_name.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #20023     
#20012: 
    setargs                   3 0
    push           0          u64 
    push           mm_type.tx_name.d u64 
    pushptr                   u64 
    push           "Module name can't be used on it's own: #" u64 
    callproc       &mm_support.txerror_s 
    jump           #20023     
#20018: 
    push           1          i64 
    push           mm_type.tx_name.p u64 
    push           0          
    popptroff                 u8 1 0
    push           0          u64 
    push           mm_type.tx_name.p u64 
    push           16         
    popptroff                 u64 1 0
    push           0          u64 
    push           mm_type.tx_name.p u64 
    push           16         
    popptroff                 u64 1 0
    push           0          u64 
    push           mm_type.tx_name.p u64 
    push           32         
    popptroff                 u64 1 0
    push           0          i64 
    push           mm_type.tx_name.p u64 
    push           3          
    storeptroff               u8 1 0
    push           mm_type.tx_name.p u64 
    push           1          
    popptroff                 u8 1 0
    push           mm_type.tx_name.d u64 
    push           84         
    pushptroff                i32 1 0
    push           mm_type.tx_name.p u64 
    push           16         
    popptroff                 i64 1 0
    push           4          i64 
    push           mm_type.tx_name.p u64 
    push           48         
    popptroff                 i32 1 0
    push           1          i64 
    push           mm_type.tx_name.p u64 
    push           58         
    popptroff                 u8 1 0
    jump           #20023     
#20013: 
    push           65         i64 
    push           mm_type.tx_name.p u64 
    push           0          
    popptroff                 u8 1 0
    push           mm_type.tx_name.d u64 
    push           72         
    pushptroff                i32 1 0
    push           mm_type.tx_name.p u64 
    push           16         
    popptroff                 i64 1 0
    push           4          i64 
    push           mm_type.tx_name.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #20023     
#20015: 
    push           mm_type.tx_name.d u64 
    push           64         
    pushptroff                u64 1 0
    jumpfalse      #20027     u64 
    setargs                   2 0
    push           0          u64 
    push           "Can't init dllvar" u64 
    callproc       &mm_support.txerror 
#20027: 
    push           mm_type.tx_name.d u64 
    push           72         
    pushptroff                i32 1 0
    push           mm_type.tx_name.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #20023     
#20011: 
    push           mm_type.tx_name.p u64 
    push           4          
    pushptroff                u32 1 0
    pop            mm_tables.mlineno i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &mm_tables.namenames 
    push           mm_type.tx_name.d u64 
    push           78         
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   3 0
    push           mm_type.tx_name.d u64 
    pushptr                   u64 
    push           &mm_tables.namenames 
    push           mm_type.tx_name.d u64 
    push           78         
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    push           "TNAME? # #" u64 
    callproc       &mm_support.txerror_ss 
#20023: 
    push           mm_type.tx_name.oldmlineno i64 
    pop            mm_tables.mlineno i64 
#20028: 
    retproc                   
End


Proc mm_type.tx_bin:
    param          mm_type.tx_bin.p u64 
    param          mm_type.tx_bin.a u64 
    param          mm_type.tx_bin.b u64 
    local          mm_type.tx_bin.amode i64 
    local          mm_type.tx_bin.bmode i64 
    local          mm_type.tx_bin.abase i64 
    local          mm_type.tx_bin.bbase i64 
    local          mm_type.tx_bin.cmode i64 
    local          mm_type.tx_bin.relop i64 
    procentry                 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_bin.a u64 
    callproc       &mm_type.tpass 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_bin.b u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_bin.a u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.tx_bin.amode i64 
    push           mm_type.tx_bin.b u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.tx_bin.bmode i64 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_bin.amode i64 
    pushptroff                i32 4 0
    pop            mm_type.tx_bin.abase i64 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_bin.bmode i64 
    pushptroff                i32 4 0
    pop            mm_type.tx_bin.bbase i64 
    push           0          i64 
    pop            mm_type.tx_bin.relop i64 
    push           mm_type.tx_bin.p u64 
    push           60         
    pushptroff                u8 1 0
    push           102        i64 
    casejumpeq     #20030     i64 0
    push           103        i64 
    casejumpeq     #20031     i64 0
    push           111        i64 
    casejumpeq     #20032     i64 0
    push           112        i64 
    casejumpeq     #20032     i64 0
    push           117        i64 
    casejumpeq     #20033     i64 0
    push           118        i64 
    casejumpeq     #20033     i64 0
    push           119        i64 
    casejumpeq     #20033     i64 0
    push           120        i64 
    casejumpeq     #20033     i64 0
    push           121        i64 
    casejumpeq     #20033     i64 0
    push           122        i64 
    casejumpeq     #20033     i64 0
    push           113        i64 
    casejumpeq     #20034     i64 0
    push           114        i64 
    casejumpeq     #20034     i64 0
    popstack                  i64 
    jump           #20035     
#20030: 
    push           mm_type.tx_bin.abase i64 
    push           9          i64 
    jumpne         #20036     i64 
    push           mm_type.tx_bin.bbase i64 
    push           9          i64 
    jumpne         #20036     i64 
    push           mm_type.tx_bin.a u64 
    push           44         
    pushptroff                u8 1 0
    jumpfalse      #20037     i64 
    push           mm_type.tx_bin.b u64 
    push           44         
    pushptroff                u8 1 0
    jumpfalse      #20037     i64 
    setargs                   1 0
    push           mm_type.tx_bin.p u64 
    callproc       &mm_type.combinestrings 
    jump           #20038     
#20037: 
    setargs                   2 0
    push           0          u64 
    push           "ref+ref"  u64 
    callproc       &mm_support.txerror 
#20036: 
    push           mm_type.tx_bin.abase i64 
    push           9          i64 
    jumpne         #20039     i64 
    push           mm_type.tx_bin.bbase i64 
    push           7          i64 
    jumpgt         #20039     i64 
    setargs                   3 0
    push           0          i64 
    push           4          i64 
    push           mm_type.tx_bin.b u64 
    callproc       &mm_type.coerceunit 
    push           126        i64 
    push           mm_type.tx_bin.p u64 
    push           60         
    popptroff                 u8 1 0
    push           mm_type.tx_bin.amode i64 
    push           mm_type.tx_bin.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #20038     
#20039: 
    jump           #20040     
#20031: 
    push           mm_type.tx_bin.abase i64 
    push           9          i64 
    jumpne         #20041     i64 
    push           mm_type.tx_bin.bbase i64 
    push           9          i64 
    jumpne         #20041     i64 
    setargs                   2 0
    push           mm_type.tx_bin.bmode i64 
    push           mm_type.tx_bin.amode i64 
    callfn         &mm_type.comparemodes i64 
    jumptrue       #20042     i64 
    setargs                   2 0
    push           0          u64 
    push           "ref-ref: not compat" u64 
    callproc       &mm_support.txerror 
#20042: 
    push           128        i64 
    push           mm_type.tx_bin.p u64 
    push           60         
    popptroff                 u8 1 0
    push           4          i64 
    push           mm_type.tx_bin.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #20038     
    jump           #20043     
#20041: 
    push           mm_type.tx_bin.abase i64 
    push           9          i64 
    jumpne         #20044     i64 
    push           mm_type.tx_bin.bbase i64 
    push           7          i64 
    jumpgt         #20044     i64 
    setargs                   3 0
    push           0          i64 
    push           4          i64 
    push           mm_type.tx_bin.b u64 
    callproc       &mm_type.coerceunit 
    push           127        i64 
    push           mm_type.tx_bin.p u64 
    push           60         
    popptroff                 u8 1 0
    push           mm_type.tx_bin.amode i64 
    push           mm_type.tx_bin.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #20038     
#20044: 
#20043: 
    jump           #20040     
#20032: 
    setargs                   3 0
    push           0          i64 
    push           4          i64 
    push           mm_type.tx_bin.b u64 
    callproc       &mm_type.coerceunit 
    push           mm_type.tx_bin.amode i64 
    push           mm_type.tx_bin.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #20038     
    jump           #20040     
#20033: 
    push           mm_type.tx_bin.abase i64 
    push           mm_type.tx_bin.bbase i64 
    jumpne         #20045     i64 
    push           mm_type.tx_bin.bbase i64 
    push           9          i64 
    jumpne         #20045     i64 
    push           4          i64 
    push           mm_type.tx_bin.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #20038     
#20045: 
    push           mm_type.tx_bin.p u64 
    push           60         
    pushptroff                u8 1 0
    push           117        i64 
    setjumpeq      #20046     i64 
    push           118        i64 
    setjumpeqx     #20046     i64 
    push           1          i64 
    pop            mm_type.tx_bin.relop i64 
#20046: 
    jump           #20040     
#20034: 
    setargs                   1 0
    push           mm_type.tx_bin.abase i64 
    callfn         &mm_lib.isnum i64 
    jumptrue       #20047     i64 
    setargs                   2 0
    push           0          u64 
    push           "IN lhs not int" u64 
    callproc       &mm_support.txerror 
#20047: 
    push           mm_type.tx_bin.b u64 
    pushptr                   u8 
    push           20         i64 
    casejumpeq     #20048     i64 0
    push           21         i64 
    casejumpeq     #20048     i64 0
    popstack                  i64 
    jump           #20049     
#20048: 
    startmult                 
    push           mm_type.tx_bin.b u64 
    pushptr                   u8 
    push           20         i64 
    jumpne         #20050     i64 
    push           42         i64 
    resetmult                 
    jump           #20051     
#20050: 
    push           43         i64 
    endmult                   
#20051: 
    push           mm_type.tx_bin.p u64 
    push           0          
    popptroff                 u8 1 0
    push           4          i64 
    push           mm_type.tx_bin.p u64 
    push           48         
    popptroff                 i32 1 0
    push           mm_type.tx_bin.p u64 
    push           60         
    pushptroff                u8 1 0
    push           114        i64 
    jumpne         #20052     i64 
    setargs                   1 0
    push           mm_type.tx_bin.p u64 
    callproc       &mm_type.addnotl 
#20052: 
    jump           #20038     
    jump           #20053     
#20049: 
    setargs                   2 0
    push           0          u64 
    push           "IN ?"     u64 
    callproc       &mm_support.txerror 
#20053: 
    jump           #20040     
#20035: 
#20040: 
    setargs                   1 0
    push           mm_type.tx_bin.abase i64 
    callfn         &mm_lib.isnum i64 
    jumpfalse      #20054     i64 
    setargs                   1 0
    push           mm_type.tx_bin.bbase i64 
    callfn         &mm_lib.isnum i64 
    jumpfalse      #20054     i64 
    push           mm_type.tx_bin.relop i64 
    jumpfalse      #20055     i64 
    push           &mm_decls.ttsize 
    push           mm_type.tx_bin.abase i64 
    pushptroff                i32 4 0
    push           16         i64 
    jumpge         #20055     i64 
    push           mm_type.tx_bin.abase i64 
    push           2          i64 
    jumpne         #20056     i64 
    push           mm_type.tx_bin.bbase i64 
    push           2          i64 
    jumpeq         #20056     i64 
    push           mm_type.tx_bin.b u64 
    pushptr                   u8 
    push           1          i64 
    jumpne         #20057     i64 
    push           mm_type.tx_bin.b u64 
    push           62         
    pushptroff                u8 1 0
    jumpfalse      #20057     i64 
    push           mm_type.tx_bin.b u64 
    push           16         
    pushptroff                i64 1 0
    push           63         i64 
    dotindex                  i64 
    push           0          i64 
    jumpne         #20057     i64 
    push           2          i64 
    push           mm_type.tx_bin.b u64 
    push           48         
    storeptroff               i32 1 0
    pop            mm_type.tx_bin.bbase i64 
#20057: 
    jump           #20058     
#20056: 
    push           mm_type.tx_bin.abase i64 
    push           2          i64 
    jumpeq         #20059     i64 
    push           mm_type.tx_bin.bbase i64 
    push           2          i64 
    jumpne         #20059     i64 
    push           mm_type.tx_bin.a u64 
    pushptr                   u8 
    push           1          i64 
    jumpne         #20060     i64 
    push           mm_type.tx_bin.a u64 
    push           62         
    pushptroff                u8 1 0
    jumpfalse      #20060     i64 
    push           mm_type.tx_bin.a u64 
    push           16         
    pushptroff                i64 1 0
    push           63         i64 
    dotindex                  i64 
    push           0          i64 
    jumpne         #20060     i64 
    push           2          i64 
    push           mm_type.tx_bin.a u64 
    push           48         
    storeptroff               i32 1 0
    pop            mm_type.tx_bin.abase i64 
#20060: 
#20059: 
#20058: 
    push           mm_type.tx_bin.abase i64 
    push           2          i64 
    jumpne         #20061     i64 
    push           mm_type.tx_bin.bbase i64 
    push           2          i64 
    jumpne         #20062     i64 
#20061: 
    push           mm_type.tx_bin.abase i64 
    push           2          i64 
    jumpeq         #20063     i64 
    push           mm_type.tx_bin.bbase i64 
    push           2          i64 
    jumpne         #20063     i64 
#20062: 
    setargs                   2 0
    push           0          u64 
    push           "Mixed sign" u64 
    callproc       &mm_support.txerror 
#20063: 
#20055: 
    push           &mm_tables.typerank 
    push           mm_type.tx_bin.abase i64 
    pushptroff                i64 8 -8
    push           &mm_tables.typerank 
    push           mm_type.tx_bin.bbase i64 
    pushptroff                i64 8 -8
    jumplt         #20064     i64 
    push           mm_type.tx_bin.abase i64 
    pop            mm_type.tx_bin.cmode i64 
    jump           #20065     
#20064: 
    push           mm_type.tx_bin.bbase i64 
    pop            mm_type.tx_bin.cmode i64 
#20065: 
    push           mm_type.tx_bin.p u64 
    push           60         
    pushptroff                u8 1 0
    push           105        i64 
    jumpne         #20066     i64 
    push           &mm_decls.ttisinteger 
    push           mm_type.tx_bin.cmode i64 
    pushptroff                u8 1 0
    jumpfalse      #20066     i64 
    push           106        i64 
    push           mm_type.tx_bin.p u64 
    push           60         
    popptroff                 u8 1 0
#20066: 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_bin.cmode i64 
    push           mm_type.tx_bin.a u64 
    callproc       &mm_type.coerceunit 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_bin.cmode i64 
    push           mm_type.tx_bin.b u64 
    callproc       &mm_type.coerceunit 
    jump           #20067     
#20054: 
    setargs                   2 0
    push           mm_type.tx_bin.bmode i64 
    push           mm_type.tx_bin.amode i64 
    callfn         &mm_type.comparemodes i64 
    jumptrue       #20068     i64 
    setargs                   3 0
    setargs                   2 0
    push           1          i64 
    push           mm_type.tx_bin.bmode i64 
    callfn         &mm_lib.strmode2 u64 
    setargs                   2 0
    push           1          i64 
    push           mm_type.tx_bin.amode i64 
    callfn         &mm_lib.strmode u64 
    push           "BIN: modes not compatible: # #" u64 
    callproc       &mm_support.txerror_ss 
#20068: 
    push           mm_type.tx_bin.amode i64 
    pop            mm_type.tx_bin.cmode i64 
    setargs                   1 0
    setargs                   1 0
    push           mm_type.tx_bin.abase i64 
    callfn         &mm_type.getnewbase i64 
    callfn         &mm_lib.getpclmode i64 
    push           mm_type.tx_bin.p u64 
    push           61         
    popptroff                 u8 1 0
#20067: 
    push           &mm_tables.intresult 
    push           mm_type.tx_bin.p u64 
    push           60         
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumptrue       #20069     i64 
    push           mm_type.tx_bin.p u64 
    push           60         
    pushptroff                u8 1 0
    push           127        i64 
    jumpne         #20070     i64 
#20069: 
    push           4          i64 
    pop            mm_type.tx_bin.cmode i64 
#20070: 
    push           mm_type.tx_bin.cmode i64 
    push           mm_type.tx_bin.p u64 
    push           48         
    popptroff                 i32 1 0
#20038: 
    retproc                   
End


Proc mm_type.tx_binto:
    param          mm_type.tx_binto.p u64 
    param          mm_type.tx_binto.a u64 
    param          mm_type.tx_binto.b u64 
    local          mm_type.tx_binto.abase i64 
    local          mm_type.tx_binto.bbase i64 
    local          mm_type.tx_binto.amode i64 
    local          mm_type.tx_binto.bmode i64 
    local          mm_type.tx_binto.opc i64 
    procentry                 
    setargs                   3 0
    push           1          i64 
    push           26         i64 
    push           mm_type.tx_binto.a u64 
    callproc       &mm_type.tpass 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_binto.b u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_binto.a u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.tx_binto.amode i64 
    push           mm_type.tx_binto.b u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.tx_binto.bmode i64 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_binto.amode i64 
    pushptroff                i32 4 0
    pop            mm_type.tx_binto.abase i64 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_binto.bmode i64 
    pushptroff                i32 4 0
    pop            mm_type.tx_binto.bbase i64 
    push           mm_type.tx_binto.p u64 
    push           60         
    pushptroff                u8 1 0
    push           162        i64 
    jumpne         #20072     i64 
    push           &mm_decls.ttisinteger 
    push           mm_type.tx_binto.abase i64 
    pushptroff                u8 1 0
    jumpfalse      #20072     i64 
    push           163        i64 
    push           mm_type.tx_binto.p u64 
    push           60         
    popptroff                 u8 1 0
#20072: 
    push           0          i64 
    push           mm_type.tx_binto.p u64 
    push           48         
    popptroff                 i32 1 0
    push           mm_type.tx_binto.p u64 
    push           60         
    pushptroff                u8 1 0
    push           159        i64 
    casejumpeq     #20073     i64 0
    push           160        i64 
    casejumpeq     #20074     i64 0
    push           168        i64 
    casejumpeq     #20075     i64 0
    push           169        i64 
    casejumpeq     #20075     i64 0
    popstack                  i64 
    jump           #20076     
#20073: 
    push           mm_type.tx_binto.abase i64 
    push           9          i64 
    jumpne         #20077     i64 
    push           mm_type.tx_binto.bbase i64 
    push           9          i64 
    jumpne         #20077     i64 
    setargs                   2 0
    push           0          u64 
    push           "to:ref+ref" u64 
    callproc       &mm_support.txerror 
#20077: 
    push           mm_type.tx_binto.abase i64 
    push           9          i64 
    jumpne         #20078     i64 
    push           mm_type.tx_binto.bbase i64 
    push           7          i64 
    jumpgt         #20078     i64 
    setargs                   3 0
    push           0          i64 
    push           4          i64 
    push           mm_type.tx_binto.b u64 
    callproc       &mm_type.coerceunit 
    push           174        i64 
    push           mm_type.tx_binto.p u64 
    push           60         
    popptroff                 u8 1 0
    jump           #20079     
#20078: 
    jump           #20080     
#20074: 
    push           mm_type.tx_binto.abase i64 
    push           9          i64 
    jumpne         #20081     i64 
    push           mm_type.tx_binto.bbase i64 
    push           7          i64 
    jumpgt         #20081     i64 
    setargs                   3 0
    push           0          i64 
    push           4          i64 
    push           mm_type.tx_binto.b u64 
    callproc       &mm_type.coerceunit 
    push           175        i64 
    push           mm_type.tx_binto.p u64 
    push           60         
    popptroff                 u8 1 0
    jump           #20079     
#20081: 
    jump           #20080     
#20075: 
    setargs                   3 0
    push           0          i64 
    push           4          i64 
    push           mm_type.tx_binto.b u64 
    callproc       &mm_type.coerceunit 
    setargs                   1 0
    push           mm_type.tx_binto.abase i64 
    callfn         &mm_lib.getpclmode i64 
    push           mm_type.tx_binto.p u64 
    push           61         
    popptroff                 u8 1 0
    jump           #20079     
    jump           #20080     
#20076: 
#20080: 
    setargs                   1 0
    push           mm_type.tx_binto.abase i64 
    callfn         &mm_lib.isnum i64 
    jumpfalse      #20082     i64 
    setargs                   1 0
    push           mm_type.tx_binto.bbase i64 
    callfn         &mm_lib.isnum i64 
    jumpfalse      #20082     i64 
    setargs                   1 0
    push           mm_type.tx_binto.abase i64 
    callfn         &mm_lib.getpclmode i64 
    push           mm_type.tx_binto.p u64 
    push           61         
    popptroff                 u8 1 0
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_binto.abase i64 
    push           mm_type.tx_binto.b u64 
    callproc       &mm_type.coerceunit 
    jump           #20083     
#20082: 
    push           &mm_decls.ttisshort 
    push           mm_type.tx_binto.abase i64 
    pushptroff                u8 1 0
    jumpfalse      #20084     i64 
    setargs                   1 0
    push           mm_type.tx_binto.bbase i64 
    callfn         &mm_lib.isnum i64 
    jumpfalse      #20084     i64 
    setargs                   1 0
    push           mm_type.tx_binto.abase i64 
    callfn         &mm_lib.getpclmode i64 
    push           mm_type.tx_binto.p u64 
    push           61         
    popptroff                 u8 1 0
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_binto.abase i64 
    push           mm_type.tx_binto.b u64 
    callproc       &mm_type.coerceunit 
    jump           #20083     
#20084: 
    setargs                   2 0
    push           mm_type.tx_binto.bmode i64 
    push           mm_type.tx_binto.amode i64 
    callfn         &mm_type.comparemodes i64 
    jumptrue       #20085     i64 
    setargs                   3 0
    setargs                   2 0
    push           1          i64 
    push           mm_type.tx_binto.bmode i64 
    callfn         &mm_lib.strmode u64 
    setargs                   2 0
    push           1          i64 
    push           mm_type.tx_binto.amode i64 
    callfn         &mm_lib.strmode u64 
    push           "BIN: modes not compatible: # #" u64 
    callproc       &mm_support.txerror_ss 
#20085: 
    setargs                   1 0
    setargs                   1 0
    push           mm_type.tx_binto.amode i64 
    callfn         &mm_type.getnewbase i64 
    callfn         &mm_lib.getpclmode i64 
    push           mm_type.tx_binto.p u64 
    push           61         
    popptroff                 u8 1 0
#20083: 
#20079: 
    retproc                   
End


Proc mm_type.getdominantmode: i64
    param          mm_type.getdominantmode.amode i64 
    param          mm_type.getdominantmode.bmode i64 
    local          mm_type.getdominantmode.abase i64 
    local          mm_type.getdominantmode.bbase i64 
    procentry                 
    push           &mm_decls.ttbasetype 
    push           mm_type.getdominantmode.amode i64 
    pushptroff                i32 4 0
    pop            mm_type.getdominantmode.abase i64 
    push           &mm_decls.ttbasetype 
    push           mm_type.getdominantmode.bmode i64 
    pushptroff                i32 4 0
    pop            mm_type.getdominantmode.bbase i64 
    startmult                 
    push           mm_type.getdominantmode.abase i64 
    push           7          i64 
    jumpgt         #20087     i64 
    push           mm_type.getdominantmode.bbase i64 
    push           7          i64 
    jumpgt         #20087     i64 
    startmult                 
    push           &mm_tables.typerank 
    push           mm_type.getdominantmode.abase i64 
    pushptroff                i64 8 -8
    push           &mm_tables.typerank 
    push           mm_type.getdominantmode.bbase i64 
    pushptroff                i64 8 -8
    jumplt         #20088     i64 
    push           mm_type.getdominantmode.abase i64 
    resetmult                 
    jump           #20089     
#20088: 
    push           mm_type.getdominantmode.bbase i64 
    endmult                   
#20089: 
    resetmult                 
    jump           #20090     
#20087: 
    setargs                   2 0
    push           mm_type.getdominantmode.bmode i64 
    push           mm_type.getdominantmode.amode i64 
    callfn         &mm_type.comparemodes i64 
    jumptrue       #20091     i64 
    setargs                   2 0
    push           0          u64 
    push           "Getdom: no dominant mode" u64 
    callproc       &mm_support.txerror 
#20091: 
    push           mm_type.getdominantmode.amode i64 
    endmult                   
#20090: 
    setret                    i64 
    jump           #20092     
#20092: 
    retfn                     i64 
End


Proc mm_type.getdominantmodepp: i64
    param          mm_type.getdominantmodepp.a u64 
    param          mm_type.getdominantmodepp.b u64 
    local          mm_type.getdominantmodepp.amode i64 
    local          mm_type.getdominantmodepp.bmode i64 
    local          mm_type.getdominantmodepp.abase i64 
    local          mm_type.getdominantmodepp.bbase i64 
    procentry                 
    push           mm_type.getdominantmodepp.a u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.getdominantmodepp.amode i64 
    push           mm_type.getdominantmodepp.b u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.getdominantmodepp.bmode i64 
    push           &mm_decls.ttbasetype 
    push           mm_type.getdominantmodepp.amode i64 
    pushptroff                i32 4 0
    pop            mm_type.getdominantmodepp.abase i64 
    push           &mm_decls.ttbasetype 
    push           mm_type.getdominantmodepp.bmode i64 
    pushptroff                i32 4 0
    pop            mm_type.getdominantmodepp.bbase i64 
    startmult                 
    push           mm_type.getdominantmodepp.abase i64 
    push           7          i64 
    jumpgt         #20094     i64 
    push           mm_type.getdominantmodepp.bbase i64 
    push           7          i64 
    jumpgt         #20094     i64 
    startmult                 
    push           &mm_tables.typerank 
    push           mm_type.getdominantmodepp.abase i64 
    pushptroff                i64 8 -8
    push           &mm_tables.typerank 
    push           mm_type.getdominantmodepp.bbase i64 
    pushptroff                i64 8 -8
    jumplt         #20095     i64 
    push           mm_type.getdominantmodepp.abase i64 
    resetmult                 
    jump           #20096     
#20095: 
    push           mm_type.getdominantmodepp.bbase i64 
    endmult                   
#20096: 
    resetmult                 
    jump           #20097     
#20094: 
    setargs                   2 0
    push           mm_type.getdominantmodepp.bmode i64 
    push           mm_type.getdominantmodepp.amode i64 
    callfn         &mm_type.comparemodes i64 
    jumptrue       #20098     i64 
    setargs                   2 0
    push           0          u64 
    push           "Getdom: no dominant mode" u64 
    callproc       &mm_support.txerror 
#20098: 
    push           mm_type.getdominantmodepp.amode i64 
    endmult                   
#20097: 
    setret                    i64 
    jump           #20099     
#20099: 
    retfn                     i64 
End


Proc mm_type.tx_cmp:
    param          mm_type.tx_cmp.p u64 
    param          mm_type.tx_cmp.a u64 
    param          mm_type.tx_cmp.b u64 
    local          mm_type.tx_cmp.abase i64 
    local          mm_type.tx_cmp.bbase i64 
    local          mm_type.tx_cmp.atype i64 
    local          mm_type.tx_cmp.btype i64 
    local          mm_type.tx_cmp.u i64 
    local          mm_type.tx_cmp.v i64 
    procentry                 
    setargs                   3 0
    push           mm_type.tx_cmp.b u64 
    push           mm_type.tx_cmp.a u64 
    push           mm_type.tx_cmp.p u64 
    callproc       &mm_type.tx_bin 
#20101: 
    retproc                   
End


Proc mm_type.tx_cmpchain:
    param          mm_type.tx_cmpchain.p u64 
    param          mm_type.tx_cmpchain.a u64 
    local          mm_type.tx_cmpchain.u i64 
    local          mm_type.tx_cmpchain.genop i64 
    local          mm_type.tx_cmpchain.q u64 
    local          mm_type.tx_cmpchain.r u64 
    local          mm_type.tx_cmpchain.av_1 i64 
    local          mm_type.tx_cmpchain.i i64 
    procentry                 
    push           mm_type.tx_cmpchain.a u64 
    pop            mm_type.tx_cmpchain.q u64 
    jump           #20103     
#20104: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_cmpchain.q u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_cmpchain.q u64 
    push           mm_type.tx_cmpchain.a u64 
    jumpne         #20105     u64 
    push           mm_type.tx_cmpchain.q u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.tx_cmpchain.u i64 
    jump           #20106     
#20105: 
    setargs                   2 0
    push           mm_type.tx_cmpchain.q u64 
    push           48         
    pushptroff                i32 1 0
    push           mm_type.tx_cmpchain.u i64 
    callfn         &mm_type.getdominantmode i64 
    pop            mm_type.tx_cmpchain.u i64 
#20106: 
    push           mm_type.tx_cmpchain.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_cmpchain.q u64 
#20103: 
    push           mm_type.tx_cmpchain.q u64 
    jumptrue       #20104     u64 
#20107: 
    push           mm_type.tx_cmpchain.a u64 
    pop            mm_type.tx_cmpchain.q u64 
    push           mm_type.tx_cmpchain.a u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_cmpchain.r u64 
    jump           #20108     
#20109: 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_cmpchain.u i64 
    push           mm_type.tx_cmpchain.q u64 
    callproc       &mm_type.coerceunit 
    push           mm_type.tx_cmpchain.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_cmpchain.q u64 
#20108: 
    push           mm_type.tx_cmpchain.q u64 
    jumptrue       #20109     u64 
#20110: 
#20111: 
    push           1          i64 
    pop            mm_type.tx_cmpchain.i i64 
    push           4          i64 
    pop            mm_type.tx_cmpchain.av_1 i64 
    push           mm_type.tx_cmpchain.av_1 i64 
    push           1          i64 
    jumplt         #20112     i64 
#20113: 
    push           mm_type.tx_cmpchain.p u64 
    push           40         
    addrefoff                 u64 1 0
    push           mm_type.tx_cmpchain.i i64 
    pushptroff                u8 1 -1
    pop            mm_type.tx_cmpchain.genop i64 
    push           mm_type.tx_cmpchain.genop i64 
    push           0          i64 
    jumpne         #20114     i64 
    jump           #20112     
#20114: 
    setargs                   1 0
    push           mm_type.tx_cmpchain.u i64 
    callfn         &mm_lib.getpclmode i64 
    push           mm_type.tx_cmpchain.p u64 
    push           32         
    addrefoff                 u64 1 0
    push           mm_type.tx_cmpchain.i i64 
    popptroff                 i16 2 -2
#20115: 
    forup          #20113     i64 1
    opnd           mm_type.tx_cmpchain.i 
    opnd           mm_type.tx_cmpchain.av_1 
#20112: 
    push           4          i64 
    push           mm_type.tx_cmpchain.p u64 
    push           48         
    popptroff                 i32 1 0
#20116: 
    retproc                   
End


Proc mm_type.tx_callproc:
    param          mm_type.tx_callproc.p u64 
    param          mm_type.tx_callproc.a u64 
    param          mm_type.tx_callproc.pargs u64 
    param          mm_type.tx_callproc.t i64 
    local          mm_type.tx_callproc.q u64 
    local          mm_type.tx_callproc.d u64 
    local          mm_type.tx_callproc.e u64 
    local          mm_type.tx_callproc.pm u64 
    local          mm_type.tx_callproc.paramlist block:800 
    local          mm_type.tx_callproc.arglist block:800 
    local          mm_type.tx_callproc.newarglist block:800 
    local          mm_type.tx_callproc.nparams i64 
    local          mm_type.tx_callproc.i i64 
    local          mm_type.tx_callproc.j i64 
    local          mm_type.tx_callproc.k i64 
    local          mm_type.tx_callproc.nargs i64 
    local          mm_type.tx_callproc.m i64 
    local          mm_type.tx_callproc.kwdused i64 
    local          mm_type.tx_callproc.qm i64 
    local          mm_type.tx_callproc.name u64 
    local          mm_type.tx_callproc.ulist u64 
    local          mm_type.tx_callproc.ulistx u64 
    procentry                 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_callproc.a u64 
    callproc       &mm_type.tpass 
    push           0          i64 
    store          mm_type.tx_callproc.nparams i64 
    pop            mm_type.tx_callproc.nargs i64 
!retry::
#20118: 
    push           mm_type.tx_callproc.a u64 
    pushptr                   u8 
    push           3          i64 
    casejumpeq     #20119     i64 0
    push           100        i64 
    casejumpeq     #20120     i64 0
    push           120        i64 
    casejumpeq     #20120     i64 0
    popstack                  i64 
    jump           #20121     
#20119: 
    push           mm_type.tx_callproc.a u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_type.tx_callproc.d u64 
    push           mm_type.tx_callproc.d u64 
    push           78         
    pushptroff                u8 1 0
    push           5          i64 
    setjumpeq      #20122     i64 
    push           6          i64 
    setjumpne      #20123     i64 
#20122: 
!getparams::
#20124: 
    push           mm_type.tx_callproc.d u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_type.tx_callproc.e u64 
    jump           #20125     
#20126: 
    push           mm_type.tx_callproc.e u64 
    push           78         
    pushptroff                u8 1 0
    push           13         i64 
    jumpne         #20127     i64 
    push           mm_type.tx_callproc.nparams i64 
    push           100        i64 
    jumplt         #20128     i64 
    setargs                   2 0
    push           0          u64 
    push           "Param overflow" u64 
    callproc       &mm_support.txerror 
#20128: 
    push           mm_type.tx_callproc.e u64 
    push           &mm_type.tx_callproc.paramlist 
    push           &mm_type.tx_callproc.nparams 
    incrload                  i64 1
    popptroff                 u64 8 -8
#20127: 
    push           mm_type.tx_callproc.e u64 
    push           32         
    pushptroff                u64 1 0
    pop            mm_type.tx_callproc.e u64 
#20125: 
    push           mm_type.tx_callproc.e u64 
    jumptrue       #20126     u64 
#20129: 
    jump           #20130     
#20123: 
    jump           #20131     
#20132: 
    setargs                   2 0
    push           57         i64 
    push           mm_type.tx_callproc.a u64 
    callproc       &mm_lib.insertunit 
    push           &mm_decls.tttarget 
    push           mm_type.tx_callproc.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           mm_type.tx_callproc.a u64 
    push           48         
    popptroff                 i32 1 0
#20131: 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_callproc.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           9          i64 
    jumpeq         #20132     i64 
#20133: 
    jump           #20134     
#20130: 
    jump           #20135     
#20120: 
    setargs                   2 0
    push           0          u64 
    push           "Can't do ifx/function" u64 
    callproc       &mm_support.txerror 
    jump           #20135     
#20121: 
!dorefproc::
#20134: 
    push           mm_type.tx_callproc.a u64 
    pushptr                   u8 
    push           51         i64 
    jumpne         #20136     i64 
    setargs                   3 0
    push           mm_type.tx_callproc.pargs u64 
    push           mm_type.tx_callproc.a u64 
    push           mm_type.tx_callproc.p u64 
    callproc       &mm_type.tmethodcall 
    push           mm_type.tx_callproc.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_type.tx_callproc.a u64 
    push           mm_type.tx_callproc.p u64 
    push           24         
    pushptroff                u64 1 0
    pop            mm_type.tx_callproc.pargs u64 
    jump           #20118     
#20136: 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_callproc.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           27         i64 
    jumpeq         #20137     i64 
    setargs                   2 0
    push           0          u64 
    push           "Function pointer expected" u64 
    callproc       &mm_support.txerror 
#20137: 
    push           &mm_decls.ttnamedef 
    push           mm_type.tx_callproc.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                u64 8 0
    pop            mm_type.tx_callproc.d u64 
    push           mm_type.tx_callproc.d u64 
    push           0          u64 
    jumpne         #20138     u64 
    setargs                   2 0
    push           0          u64 
    push           "Function expected" u64 
    callproc       &mm_support.txerror 
#20138: 
    jump           #20124     
#20135: 
    push           mm_type.tx_callproc.pargs u64 
    pop            mm_type.tx_callproc.q u64 
    jump           #20139     
#20140: 
    push           mm_type.tx_callproc.nargs i64 
    push           100        i64 
    jumplt         #20141     i64 
    setargs                   2 0
    push           0          u64 
    push           "Param overflow" u64 
    callproc       &mm_support.txerror 
#20141: 
    push           mm_type.tx_callproc.q u64 
    push           &mm_type.tx_callproc.arglist 
    push           &mm_type.tx_callproc.nargs 
    incrload                  i64 1
    popptroff                 u64 8 -8
    push           mm_type.tx_callproc.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_callproc.q u64 
#20139: 
    push           mm_type.tx_callproc.q u64 
    jumptrue       #20140     u64 
#20142: 
    push           mm_type.tx_callproc.d u64 
    push           72         
    pushptroff                i32 1 0
    push           mm_type.tx_callproc.p u64 
    push           48         
    popptroff                 i32 1 0
    push           mm_type.tx_callproc.p u64 
    push           48         
    pushptroff                i32 1 0
    push           0          i64 
    jumpne         #20143     i64 
    push           mm_type.tx_callproc.p u64 
    pushptr                   u8 
    push           31         i64 
    jumpne         #20143     i64 
    push           96         i64 
    push           mm_type.tx_callproc.p u64 
    push           0          
    popptroff                 u8 1 0
#20143: 
    push           mm_type.tx_callproc.p u64 
    push           48         
    pushptroff                i32 1 0
    jumpfalse      #20144     i64 
    push           mm_type.tx_callproc.t i64 
    push           0          i64 
    jumpeq         #20144     i64 
    setargs                   2 0
    push           0          i64 
    push           mm_type.tx_callproc.p u64 
    callproc       &mm_type.twiden 
#20144: 
    push           mm_type.tx_callproc.d u64 
    push           117        
    pushptroff                u8 1 0
    jumpfalse      #20145     i64 
#20146: 
    push           1          i64 
    pop            mm_type.tx_callproc.i i64 
    push           mm_type.tx_callproc.nargs i64 
    push           1          i64 
    jumplt         #20147     i64 
#20148: 
    push           mm_type.tx_callproc.i i64 
    push           mm_type.tx_callproc.nparams i64 
    jumpgt         #20149     i64 
    setargs                   3 0
    push           0          i64 
    push           &mm_type.tx_callproc.paramlist 
    push           mm_type.tx_callproc.i i64 
    pushptroff                u64 8 -8
    push           72         
    pushptroff                i32 1 0
    push           &mm_type.tx_callproc.arglist 
    push           mm_type.tx_callproc.i i64 
    pushptroff                u64 8 -8
    callproc       &mm_type.tpass 
    jump           #20150     
#20149: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           &mm_type.tx_callproc.arglist 
    push           mm_type.tx_callproc.i i64 
    pushptroff                u64 8 -8
    callproc       &mm_type.tpass 
#20150: 
#20151: 
    forup          #20148     i64 1
    opnd           mm_type.tx_callproc.i 
    opnd           mm_type.tx_callproc.nargs 
#20147: 
    push           mm_type.tx_callproc.t i64 
    push           0          i64 
    jumpne         #20152     i64 
    push           96         i64 
    push           mm_type.tx_callproc.p u64 
    push           0          
    popptroff                 u8 1 0
#20152: 
    jump           #20153     
#20145: 
    push           0          i64 
    pop            mm_type.tx_callproc.k i64 
    push           0          i64 
    pop            mm_type.tx_callproc.kwdused i64 
#20154: 
    push           1          i64 
    pop            mm_type.tx_callproc.i i64 
    push           mm_type.tx_callproc.nparams i64 
    push           1          i64 
    jumplt         #20155     i64 
#20156: 
    push           0          u64 
    push           &mm_type.tx_callproc.newarglist 
    push           mm_type.tx_callproc.i i64 
    popptroff                 u64 8 -8
#20157: 
    forup          #20156     i64 1
    opnd           mm_type.tx_callproc.i 
    opnd           mm_type.tx_callproc.nparams 
#20155: 
#20158: 
    push           1          i64 
    pop            mm_type.tx_callproc.i i64 
    push           mm_type.tx_callproc.nargs i64 
    push           1          i64 
    jumplt         #20159     i64 
#20160: 
    push           &mm_type.tx_callproc.arglist 
    push           mm_type.tx_callproc.i i64 
    pushptroff                u64 8 -8
    pop            mm_type.tx_callproc.q u64 
    push           mm_type.tx_callproc.q u64 
    pushptr                   u8 
    switch         #20161     2 27
    opnd           #20162     
#20161: 
    switchlabel    #20163     
    switchlabel    #20162     
    switchlabel    #20162     
    switchlabel    #20162     
    switchlabel    #20162     
    switchlabel    #20162     
    switchlabel    #20162     
    switchlabel    #20162     
    switchlabel    #20162     
    switchlabel    #20162     
    switchlabel    #20162     
    switchlabel    #20162     
    switchlabel    #20162     
    switchlabel    #20162     
    switchlabel    #20162     
    switchlabel    #20162     
    switchlabel    #20162     
    switchlabel    #20162     
    switchlabel    #20162     
    switchlabel    #20162     
    switchlabel    #20162     
    switchlabel    #20162     
    switchlabel    #20162     
    switchlabel    #20162     
    switchlabel    #20162     
    switchlabel    #20164     
    endswitch                 
#20164: 
    push           mm_type.tx_callproc.q u64 
    push           16         
    pushptroff                u64 1 0
    push           16         
    pushptroff                u64 1 0
    pushptr                   u64 
    pop            mm_type.tx_callproc.name u64 
#20165: 
    push           1          i64 
    pop            mm_type.tx_callproc.j i64 
    push           mm_type.tx_callproc.nparams i64 
    push           1          i64 
    jumplt         #20166     i64 
#20167: 
    setargs                   2 0
    push           mm_type.tx_callproc.name u64 
    push           &mm_type.tx_callproc.paramlist 
    push           mm_type.tx_callproc.j i64 
    pushptroff                u64 8 -8
    pushptr                   u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #20168     i64 
    jump           #20169     
#20168: 
#20170: 
    forup          #20167     i64 1
    opnd           mm_type.tx_callproc.j 
    opnd           mm_type.tx_callproc.nparams 
#20166: 
    setargs                   3 0
    push           0          u64 
    push           mm_type.tx_callproc.name u64 
    push           "Can't find kwd param: #" u64 
    callproc       &mm_support.txerror_s 
#20169: 
    push           &mm_type.tx_callproc.newarglist 
    push           mm_type.tx_callproc.j i64 
    pushptroff                u64 8 -8
    jumpfalse      #20171     u64 
    setargs                   3 0
    push           0          u64 
    push           mm_type.tx_callproc.name u64 
    push           "Kwd: # already used or was implicit" u64 
    callproc       &mm_support.txerror_s 
#20171: 
    push           mm_type.tx_callproc.q u64 
    push           24         
    pushptroff                u64 1 0
    push           &mm_type.tx_callproc.newarglist 
    push           mm_type.tx_callproc.j i64 
    popptroff                 u64 8 -8
    push           1          i64 
    pop            mm_type.tx_callproc.kwdused i64 
    jump           #20172     
#20163: 
    push           mm_type.tx_callproc.kwdused i64 
    jumpfalse      #20173     i64 
    setargs                   2 0
    push           0          u64 
    push           "Normal param follows kwd" u64 
    callproc       &mm_support.txerror 
#20173: 
    push           0          u64 
    pop            mm_type.tx_callproc.q u64 
    jump           #20174     
    jump           #20172     
#20162: 
!doregparam::
#20174: 
    push           mm_type.tx_callproc.kwdused i64 
    jumpfalse      #20175     i64 
    setargs                   2 0
    push           0          u64 
    push           "Normal param follows kwd" u64 
    callproc       &mm_support.txerror 
#20175: 
    push           mm_type.tx_callproc.k i64 
    push           mm_type.tx_callproc.nparams i64 
    jumplt         #20176     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "K="       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_type.tx_callproc.k i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           "NPARAMS=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_type.tx_callproc.nparams i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           0          u64 
    push           "Too many params supplied" u64 
    callproc       &mm_support.txerror 
#20176: 
    push           mm_type.tx_callproc.q u64 
    push           &mm_type.tx_callproc.newarglist 
    push           &mm_type.tx_callproc.k 
    incrload                  i64 1
    popptroff                 u64 8 -8
#20172: 
#20177: 
    forup          #20160     i64 1
    opnd           mm_type.tx_callproc.i 
    opnd           mm_type.tx_callproc.nargs 
#20159: 
#20178: 
    push           1          i64 
    pop            mm_type.tx_callproc.i i64 
    push           mm_type.tx_callproc.nparams i64 
    push           1          i64 
    jumplt         #20179     i64 
#20180: 
    push           &mm_type.tx_callproc.newarglist 
    push           mm_type.tx_callproc.i i64 
    pushptroff                u64 8 -8
    pop            mm_type.tx_callproc.q u64 
    push           &mm_type.tx_callproc.paramlist 
    push           mm_type.tx_callproc.i i64 
    pushptroff                u64 8 -8
    pop            mm_type.tx_callproc.pm u64 
    push           mm_type.tx_callproc.q u64 
    push           0          u64 
    jumpne         #20181     u64 
    push           mm_type.tx_callproc.pm u64 
    push           105        
    pushptroff                u8 1 0
    jumptrue       #20182     i64 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           0          u64 
    push           mm_type.tx_callproc.i i64 
    callfn         &msysp.strint u64 
    push           "Param not optional: #" u64 
    callproc       &mm_support.txerror_s 
#20182: 
    push           mm_type.tx_callproc.pm u64 
    push           64         
    pushptroff                u64 1 0
    jumpfalse      #20183     u64 
    setargs                   2 0
    push           mm_type.tx_callproc.p u64 
    push           4          
    pushptroff                u32 1 0
    push           0          i64 
    push           23         i64 
    dotslice                  i64 
    push           mm_type.tx_callproc.pm u64 
    push           64         
    pushptroff                u64 1 0
    callfn         &mm_lib.duplunit u64 
    push           &mm_type.tx_callproc.newarglist 
    push           mm_type.tx_callproc.i i64 
    popptroff                 u64 8 -8
    jump           #20184     
#20183: 
    setargs                   2 0
    push           4          i64 
    push           0          u64 
    callfn         &mm_lib.createconstunit u64 
    push           &mm_type.tx_callproc.newarglist 
    push           mm_type.tx_callproc.i i64 
    popptroff                 u64 8 -8
#20184: 
#20181: 
#20185: 
    forup          #20180     i64 1
    opnd           mm_type.tx_callproc.i 
    opnd           mm_type.tx_callproc.nparams 
#20179: 
    push           0          u64 
    pop            mm_type.tx_callproc.ulist u64 
#20186: 
    push           1          i64 
    pop            mm_type.tx_callproc.i i64 
    push           mm_type.tx_callproc.nparams i64 
    push           1          i64 
    jumplt         #20187     i64 
#20188: 
    push           &mm_type.tx_callproc.paramlist 
    push           mm_type.tx_callproc.i i64 
    pushptroff                u64 8 -8
    pop            mm_type.tx_callproc.pm u64 
    push           &mm_type.tx_callproc.newarglist 
    push           mm_type.tx_callproc.i i64 
    pushptroff                u64 8 -8
    pop            mm_type.tx_callproc.q u64 
    push           mm_type.tx_callproc.pm u64 
    push           104        
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #20189     i64 
    setargs                   3 0
    push           1          i64 
    push           26         i64 
    push           mm_type.tx_callproc.q u64 
    callproc       &mm_type.tpass 
    push           &mm_decls.tttarget 
    push           mm_type.tx_callproc.pm u64 
    push           72         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    pop            mm_type.tx_callproc.m i64 
    push           mm_type.tx_callproc.q u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.tx_callproc.qm i64 
    setargs                   2 0
    push           mm_type.tx_callproc.m i64 
    push           mm_type.tx_callproc.qm i64 
    callfn         &mm_type.comparemodes i64 
    jumptrue       #20190     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "STRMODE(QM)=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    setargs                   2 0
    push           1          i64 
    push           mm_type.tx_callproc.qm i64 
    callfn         &mm_lib.strmode u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "STRMODE(M)=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    setargs                   2 0
    push           1          i64 
    push           mm_type.tx_callproc.m i64 
    callfn         &mm_lib.strmode u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           0          u64 
    push           "&param: type mismatch" u64 
    callproc       &mm_support.txerror 
#20190: 
    setargs                   2 0
    push           59         i64 
    push           mm_type.tx_callproc.q u64 
    callproc       &mm_lib.insertunit 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_callproc.qm i64 
    push           0          u64 
    callfn         &mm_lib.createrefmode i64 
    push           mm_type.tx_callproc.q u64 
    push           48         
    popptroff                 i32 1 0
    jump           #20191     
#20189: 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_callproc.pm u64 
    push           72         
    pushptroff                i32 1 0
    push           mm_type.tx_callproc.q u64 
    callproc       &mm_type.tpass 
#20191: 
    push           mm_type.tx_callproc.ulist u64 
    push           0          u64 
    jumpne         #20192     u64 
    push           mm_type.tx_callproc.q u64 
    pop            mm_type.tx_callproc.ulist u64 
    jump           #20193     
#20192: 
    push           mm_type.tx_callproc.q u64 
    push           mm_type.tx_callproc.ulistx u64 
    push           8          
    popptroff                 u64 1 0
#20193: 
    push           mm_type.tx_callproc.q u64 
    pop            mm_type.tx_callproc.ulistx u64 
    push           0          u64 
    push           mm_type.tx_callproc.q u64 
    push           8          
    popptroff                 u64 1 0
#20194: 
    forup          #20188     i64 1
    opnd           mm_type.tx_callproc.i 
    opnd           mm_type.tx_callproc.nparams 
#20187: 
    push           mm_type.tx_callproc.ulist u64 
    push           mm_type.tx_callproc.p u64 
    push           24         
    popptroff                 u64 1 0
    push           mm_type.tx_callproc.t i64 
    push           0          i64 
    jumpne         #20195     i64 
    push           96         i64 
    push           mm_type.tx_callproc.p u64 
    push           0          
    popptroff                 u8 1 0
#20195: 
#20153: 
    retproc                   
End


Proc mm_type.tx_unary:
    param          mm_type.tx_unary.p u64 
    param          mm_type.tx_unary.a u64 
    local          mm_type.tx_unary.opc i64 
    local          mm_type.tx_unary.size i64 
    local          mm_type.tx_unary.amode i64 
    local          mm_type.tx_unary.mbase i64 
    local          mm_type.tx_unary.tmax i64 
    local          mm_type.tx_unary.x i64 
    local          mm_type.tx_unary.xhigh i64 
    procentry                 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_unary.a u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_unary.a u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.tx_unary.amode i64 
    push           mm_type.tx_unary.p u64 
    push           60         
    pushptroff                u8 1 0
    switch         #20197     135 211
    opnd           #20198     
#20197: 
    switchlabel    #20199     
    switchlabel    #20199     
    switchlabel    #20199     
    switchlabel    #20199     
    switchlabel    #20199     
    switchlabel    #20199     
    switchlabel    #20200     
    switchlabel    #20200     
    switchlabel    #20198     
    switchlabel    #20200     
    switchlabel    #20198     
    switchlabel    #20198     
    switchlabel    #20198     
    switchlabel    #20198     
    switchlabel    #20198     
    switchlabel    #20198     
    switchlabel    #20198     
    switchlabel    #20198     
    switchlabel    #20198     
    switchlabel    #20198     
    switchlabel    #20198     
    switchlabel    #20198     
    switchlabel    #20198     
    switchlabel    #20198     
    switchlabel    #20198     
    switchlabel    #20198     
    switchlabel    #20198     
    switchlabel    #20198     
    switchlabel    #20198     
    switchlabel    #20198     
    switchlabel    #20198     
    switchlabel    #20198     
    switchlabel    #20198     
    switchlabel    #20198     
    switchlabel    #20198     
    switchlabel    #20198     
    switchlabel    #20198     
    switchlabel    #20198     
    switchlabel    #20198     
    switchlabel    #20198     
    switchlabel    #20198     
    switchlabel    #20198     
    switchlabel    #20198     
    switchlabel    #20198     
    switchlabel    #20198     
    switchlabel    #20198     
    switchlabel    #20198     
    switchlabel    #20198     
    switchlabel    #20198     
    switchlabel    #20198     
    switchlabel    #20198     
    switchlabel    #20198     
    switchlabel    #20198     
    switchlabel    #20198     
    switchlabel    #20198     
    switchlabel    #20198     
    switchlabel    #20198     
    switchlabel    #20198     
    switchlabel    #20198     
    switchlabel    #20198     
    switchlabel    #20198     
    switchlabel    #20198     
    switchlabel    #20198     
    switchlabel    #20198     
    switchlabel    #20198     
    switchlabel    #20198     
    switchlabel    #20201     
    switchlabel    #20201     
    switchlabel    #20201     
    switchlabel    #20201     
    switchlabel    #20198     
    switchlabel    #20202     
    switchlabel    #20202     
    switchlabel    #20198     
    switchlabel    #20203     
    switchlabel    #20203     
    switchlabel    #20204     
    endswitch                 
#20201: 
    setargs                   2 0
    push           mm_type.tx_unary.a u64 
    push           mm_type.tx_unary.p u64 
    callproc       &mm_type.do_bounds 
    jump           #20205     
    jump           #20206     
#20202: 
    push           &mm_decls.ttsize 
    startmult                 
    push           mm_type.tx_unary.a u64 
    pushptr                   u8 
    push           65         i64 
    jumpne         #20207     i64 
    push           mm_type.tx_unary.a u64 
    push           16         
    pushptroff                i64 1 0
    resetmult                 
    jump           #20208     
#20207: 
    push           mm_type.tx_unary.amode i64 
    endmult                   
#20208: 
    pushptroff                i32 4 0
    startmult                 
    push           mm_type.tx_unary.p u64 
    push           60         
    pushptroff                u8 1 0
    push           207        i64 
    jumpne         #20209     i64 
    push           1          i64 
    resetmult                 
    jump           #20210     
#20209: 
    push           8          i64 
    endmult                   
#20210: 
    mul                       i64 
    pop            mm_type.tx_unary.size i64 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_unary.size i64 
    push           mm_type.tx_unary.p u64 
    callproc       &mm_type.makenewconst 
    push           4          i64 
    push           mm_type.tx_unary.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #20205     
    jump           #20206     
#20203: 
    push           4          i64 
    pop            mm_type.tx_unary.tmax i64 
    push           mm_type.tx_unary.a u64 
    pushptr                   u8 
    push           65         i64 
    jumpne         #20211     i64 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_unary.a u64 
    push           16         
    pushptroff                i64 1 0
    pushptroff                i32 4 0
    pop            mm_type.tx_unary.mbase i64 
    jump           #20212     
#20211: 
    push           &mm_decls.ttbasetype 
    setargs                   1 0
    push           mm_type.tx_unary.a u64 
    callfn         &mm_lib.getmemmode i64 
    pushptroff                i32 4 0
    pop            mm_type.tx_unary.mbase i64 
#20212: 
    push           mm_type.tx_unary.p u64 
    push           60         
    pushptroff                u8 1 0
    push           209        i64 
    jumpne         #20213     i64 
    push           mm_type.tx_unary.mbase i64 
    push           18         i64 
    casejumpeq     #20214     i64 0
    push           19         i64 
    casejumpeq     #20215     i64 0
    push           20         i64 
    casejumpeq     #20216     i64 0
    push           4          i64 
    casejumpeq     #20217     i64 0
    push           5          i64 
    casejumpeq     #20218     i64 0
    push           3          i64 
    casejumpeq     #20219     i64 0
    push           21         i64 
    casejumpeq     #20220     i64 0
    push           22         i64 
    casejumpeq     #20220     i64 0
    push           23         i64 
    casejumpeq     #20220     i64 0
    push           2          i64 
    casejumpeq     #20220     i64 0
    push           3          i64 
    casejumpeq     #20220     i64 0
    push           16         i64 
    casejumpeq     #20220     i64 0
    push           17         i64 
    casejumpeq     #20220     i64 0
    push           1          i64 
    casejumpeq     #20220     i64 0
    popstack                  i64 
    jump           #20221     
#20214: 
    push           -128       i64 
    pop            mm_type.tx_unary.x i64 
    jump           #20222     
#20215: 
    push           -32768     i64 
    pop            mm_type.tx_unary.x i64 
    jump           #20222     
#20216: 
    push           -2147483648 i64 
    pop            mm_type.tx_unary.x i64 
    jump           #20222     
#20217: 
    push           -9223372036854775808 i64 
    pop            mm_type.tx_unary.x i64 
    jump           #20222     
#20218: 
    push           -9223372036854775808 i64 
    pop            mm_type.tx_unary.xhigh i64 
    push           0          i64 
    pop            mm_type.tx_unary.x i64 
    push           5          i64 
    pop            mm_type.tx_unary.tmax i64 
    jump           #20222     
#20219: 
    push           0          i64 
    store          mm_type.tx_unary.xhigh i64 
    pop            mm_type.tx_unary.x i64 
    jump           #20222     
#20220: 
    push           0          i64 
    pop            mm_type.tx_unary.x i64 
    jump           #20222     
#20221: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           1          i64 
    push           mm_type.tx_unary.mbase i64 
    callfn         &mm_lib.strmode u64 
    push           "Can't do minvalue on #" u64 
    callproc       &mm_support.txerror_s 
#20222: 
    jump           #20223     
#20213: 
    push           mm_type.tx_unary.mbase i64 
    push           18         i64 
    casejumpeq     #20224     i64 0
    push           19         i64 
    casejumpeq     #20225     i64 0
    push           20         i64 
    casejumpeq     #20226     i64 0
    push           4          i64 
    casejumpeq     #20227     i64 0
    push           5          i64 
    casejumpeq     #20228     i64 0
    push           21         i64 
    casejumpeq     #20229     i64 0
    push           16         i64 
    casejumpeq     #20229     i64 0
    push           22         i64 
    casejumpeq     #20230     i64 0
    push           17         i64 
    casejumpeq     #20230     i64 0
    push           23         i64 
    casejumpeq     #20231     i64 0
    push           2          i64 
    casejumpeq     #20232     i64 0
    push           3          i64 
    casejumpeq     #20233     i64 0
    popstack                  i64 
    jump           #20234     
#20224: 
    push           127        i64 
    pop            mm_type.tx_unary.x i64 
    jump           #20235     
#20225: 
    push           32767      i64 
    pop            mm_type.tx_unary.x i64 
    jump           #20235     
#20226: 
    push           2147483647 i64 
    pop            mm_type.tx_unary.x i64 
    jump           #20235     
#20227: 
    push           9223372036854775807 i64 
    pop            mm_type.tx_unary.x i64 
    jump           #20235     
#20228: 
    push           -1         i64 
    pop            mm_type.tx_unary.x i64 
    push           9223372036854775807 i64 
    pop            mm_type.tx_unary.xhigh i64 
    push           5          i64 
    pop            mm_type.tx_unary.tmax i64 
    jump           #20235     
#20229: 
    push           255        i64 
    pop            mm_type.tx_unary.x i64 
    jump           #20235     
#20230: 
    push           65535      i64 
    pop            mm_type.tx_unary.x i64 
    jump           #20235     
#20231: 
    push           4294967295 i64 
    pop            mm_type.tx_unary.x i64 
    jump           #20235     
#20232: 
    push           0          i64 
    pop            mm_type.tx_unary.x i64 
    push           &mm_type.tx_unary.x 
    decr                      i64 1
    push           2          i64 
    pop            mm_type.tx_unary.tmax i64 
    jump           #20235     
#20233: 
    push           -1         i64 
    pop            mm_type.tx_unary.x i64 
    push           -1         i64 
    pop            mm_type.tx_unary.xhigh i64 
    push           3          i64 
    pop            mm_type.tx_unary.tmax i64 
    jump           #20235     
#20234: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           1          i64 
    push           mm_type.tx_unary.mbase i64 
    callfn         &mm_lib.strmode u64 
    push           "Can't do maxvalue on #" u64 
    callproc       &mm_support.txerror_s 
#20235: 
#20223: 
    push           1          i64 
    push           mm_type.tx_unary.p u64 
    push           0          
    popptroff                 u8 1 0
    push           0          u64 
    push           mm_type.tx_unary.p u64 
    push           16         
    popptroff                 u64 1 0
    push           0          i64 
    push           mm_type.tx_unary.p u64 
    push           1          
    popptroff                 u8 1 0
    push           mm_type.tx_unary.x i64 
    push           mm_type.tx_unary.p u64 
    push           16         
    popptroff                 i64 1 0
    push           mm_type.tx_unary.xhigh u64 
    push           mm_type.tx_unary.p u64 
    push           24         
    popptroff                 u64 1 0
    push           mm_type.tx_unary.tmax i64 
    push           mm_type.tx_unary.p u64 
    push           48         
    popptroff                 i32 1 0
    push           1          i64 
    push           mm_type.tx_unary.p u64 
    push           58         
    popptroff                 u8 1 0
    jump           #20205     
    jump           #20206     
#20200: 
    push           &mm_decls.ttisinteger 
    push           mm_type.tx_unary.amode i64 
    pushptroff                u8 1 0
    jumpfalse      #20236     i64 
    setargs                   3 0
    push           0          i64 
    push           7          i64 
    store          mm_type.tx_unary.amode i64 
    push           mm_type.tx_unary.a u64 
    callproc       &mm_type.coerceunit 
#20236: 
    jump           #20206     
#20199: 
    setargs                   3 0
    push           0          i64 
    push           7          i64 
    store          mm_type.tx_unary.amode i64 
    push           mm_type.tx_unary.a u64 
    callproc       &mm_type.coerceunit 
    jump           #20206     
#20204: 
    push           1          i64 
    push           mm_type.tx_unary.p u64 
    push           0          
    popptroff                 u8 1 0
    push           mm_type.tx_unary.a u64 
    pushptr                   u8 
    push           65         i64 
    jumpne         #20237     i64 
    push           mm_type.tx_unary.a u64 
    push           16         
    pushptroff                i64 1 0
    pop            mm_type.tx_unary.amode i64 
    jump           #20238     
#20237: 
    setargs                   1 0
    push           mm_type.tx_unary.a u64 
    callfn         &mm_lib.getmemmode i64 
    pop            mm_type.tx_unary.amode i64 
#20238: 
    push           10         i64 
    push           mm_type.tx_unary.p u64 
    push           48         
    popptroff                 i32 1 0
    push           0          i64 
    push           mm_type.tx_unary.p u64 
    push           1          
    popptroff                 u8 1 0
    setargs                   1 0
    setargs                   2 0
    push           1          i64 
    push           mm_type.tx_unary.amode i64 
    callfn         &mm_lib.strmode u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           mm_type.tx_unary.p u64 
    push           16         
    popptroff                 u64 1 0
    push           1          i64 
    push           mm_type.tx_unary.p u64 
    push           44         
    popptroff                 u8 1 0
    setargs                   1 0
    push           mm_type.tx_unary.p u64 
    push           16         
    pushptroff                u64 1 0
    callfn         &strlen    i64 
    push           mm_type.tx_unary.p u64 
    push           40         
    popptroff                 u32 1 0
    jump           #20205     
    jump           #20206     
#20198: 
#20206: 
    setargs                   1 0
    setargs                   1 0
    push           mm_type.tx_unary.amode i64 
    callfn         &mm_type.getnewbase i64 
    callfn         &mm_lib.getpclmode i64 
    push           mm_type.tx_unary.p u64 
    push           61         
    popptroff                 u8 1 0
    push           mm_type.tx_unary.amode i64 
    push           mm_type.tx_unary.p u64 
    push           48         
    popptroff                 i32 1 0
#20205: 
    retproc                   
End


Proc mm_type.tx_unaryto:
    param          mm_type.tx_unaryto.p u64 
    param          mm_type.tx_unaryto.a u64 
    local          mm_type.tx_unaryto.abase i64 
    local          mm_type.tx_unaryto.amode i64 
    local          mm_type.tx_unaryto.opc i64 
    procentry                 
    setargs                   3 0
    push           1          i64 
    push           26         i64 
    push           mm_type.tx_unaryto.a u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_unaryto.a u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.tx_unaryto.amode i64 
    setargs                   1 0
    push           mm_type.tx_unaryto.amode i64 
    callfn         &mm_lib.getpclmode i64 
    push           mm_type.tx_unaryto.p u64 
    push           61         
    popptroff                 u8 1 0
    push           0          i64 
    push           mm_type.tx_unaryto.p u64 
    push           48         
    popptroff                 i32 1 0
#20240: 
    retproc                   
End


Proc mm_type.tx_if:
    param          mm_type.tx_if.p u64 
    param          mm_type.tx_if.a u64 
    param          mm_type.tx_if.b u64 
    param          mm_type.tx_if.c u64 
    param          mm_type.tx_if.t i64 
    param          mm_type.tx_if.lv i64 
    local          mm_type.tx_if.u i64 
    procentry                 
    setargs                   1 0
    push           mm_type.tx_if.a u64 
    callproc       &mm_type.tcond 
    setargs                   3 0
    push           mm_type.tx_if.lv i64 
    push           mm_type.tx_if.t i64 
    push           mm_type.tx_if.b u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_if.t i64 
    push           0          i64 
    jumpeq         #20242     i64 
    push           mm_type.tx_if.c u64 
    jumptrue       #20242     u64 
    setargs                   2 0
    push           0          u64 
    push           "if needs else" u64 
    callproc       &mm_support.txerror 
#20242: 
    setargs                   3 0
    push           mm_type.tx_if.lv i64 
    push           mm_type.tx_if.t i64 
    push           mm_type.tx_if.c u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_if.t i64 
    push           26         i64 
    jumpne         #20243     i64 
    setargs                   2 0
    push           mm_type.tx_if.c u64 
    push           mm_type.tx_if.b u64 
    callfn         &mm_type.getdominantmodepp i64 
    pop            mm_type.tx_if.u i64 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_if.u i64 
    push           mm_type.tx_if.b u64 
    callproc       &mm_type.coerceunit 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_if.u i64 
    push           mm_type.tx_if.c u64 
    callproc       &mm_type.coerceunit 
    push           mm_type.tx_if.u i64 
    push           mm_type.tx_if.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #20244     
#20243: 
    push           mm_type.tx_if.t i64 
    push           mm_type.tx_if.p u64 
    push           48         
    popptroff                 i32 1 0
#20244: 
    setargs                   1 0
    push           mm_type.tx_if.a u64 
    callfn         &mm_type.iscondtrue i64 
    jumpfalse      #20245     i64 
    setargs                   2 0
    push           mm_type.tx_if.b u64 
    push           mm_type.tx_if.p u64 
    callproc       &mm_lib.deleteunit 
    jump           #20246     
#20245: 
    setargs                   1 0
    push           mm_type.tx_if.a u64 
    callfn         &mm_type.iscondfalse i64 
    jumpfalse      #20247     i64 
    push           mm_type.tx_if.c u64 
    push           0          u64 
    jumpne         #20248     u64 
    setargs                   1 0
    push           5          i64 
    callfn         &mm_lib.createunit0 u64 
    pop            mm_type.tx_if.c u64 
#20248: 
    setargs                   2 0
    push           mm_type.tx_if.c u64 
    push           mm_type.tx_if.p u64 
    callproc       &mm_lib.deleteunit 
#20247: 
#20246: 
#20249: 
    retproc                   
End


Proc mm_type.tx_longif:
    param          mm_type.tx_longif.p u64 
    param          mm_type.tx_longif.a u64 
    param          mm_type.tx_longif.b u64 
    param          mm_type.tx_longif.t i64 
    param          mm_type.tx_longif.lv i64 
    local          mm_type.tx_longif.q u64 
    local          mm_type.tx_longif.r u64 
    local          mm_type.tx_longif.u i64 
    procentry                 
    push           0          i64 
    pop            mm_type.tx_longif.u i64 
    push           mm_type.tx_longif.a u64 
    pop            mm_type.tx_longif.q u64 
    jump           #20251     
#20252: 
    setargs                   1 0
    push           mm_type.tx_longif.q u64 
    push           16         
    pushptroff                u64 1 0
    callproc       &mm_type.tcond 
    push           mm_type.tx_longif.q u64 
    push           24         
    pushptroff                u64 1 0
    pop            mm_type.tx_longif.r u64 
    setargs                   3 0
    push           mm_type.tx_longif.lv i64 
    push           mm_type.tx_longif.t i64 
    push           mm_type.tx_longif.r u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_longif.t i64 
    push           26         i64 
    jumpne         #20253     i64 
    push           mm_type.tx_longif.u i64 
    push           0          i64 
    jumpne         #20254     i64 
    push           mm_type.tx_longif.r u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.tx_longif.u i64 
    jump           #20255     
#20254: 
    setargs                   2 0
    push           mm_type.tx_longif.r u64 
    push           48         
    pushptroff                i32 1 0
    push           mm_type.tx_longif.u i64 
    callfn         &mm_type.getdominantmode i64 
    pop            mm_type.tx_longif.u i64 
#20255: 
#20253: 
    push           mm_type.tx_longif.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_longif.q u64 
#20251: 
    push           mm_type.tx_longif.q u64 
    jumptrue       #20252     u64 
#20256: 
    push           mm_type.tx_longif.t i64 
    push           0          i64 
    jumpeq         #20257     i64 
    push           mm_type.tx_longif.b u64 
    push           0          u64 
    jumpne         #20257     u64 
    setargs                   2 0
    push           0          u64 
    push           "longif needs else" u64 
    callproc       &mm_support.txerror 
#20257: 
    setargs                   3 0
    push           mm_type.tx_longif.lv i64 
    push           mm_type.tx_longif.t i64 
    push           mm_type.tx_longif.b u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_longif.t i64 
    push           26         i64 
    jumpne         #20258     i64 
    setargs                   2 0
    push           mm_type.tx_longif.b u64 
    push           48         
    pushptroff                i32 1 0
    push           mm_type.tx_longif.u i64 
    callfn         &mm_type.getdominantmode i64 
    pop            mm_type.tx_longif.u i64 
#20258: 
    push           mm_type.tx_longif.t i64 
    push           0          i64 
    jumpeq         #20259     i64 
    push           mm_type.tx_longif.a u64 
    pop            mm_type.tx_longif.q u64 
    jump           #20260     
#20261: 
    push           mm_type.tx_longif.t i64 
    push           26         i64 
    jumpne         #20262     i64 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_longif.u i64 
    push           mm_type.tx_longif.q u64 
    push           24         
    pushptroff                u64 1 0
    callproc       &mm_type.coerceunit 
#20262: 
    push           mm_type.tx_longif.q u64 
    push           24         
    pushptroff                u64 1 0
    push           48         
    pushptroff                i32 1 0
    push           mm_type.tx_longif.q u64 
    push           48         
    popptroff                 i32 1 0
    push           mm_type.tx_longif.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_longif.q u64 
#20260: 
    push           mm_type.tx_longif.q u64 
    jumptrue       #20261     u64 
#20263: 
    push           mm_type.tx_longif.t i64 
    push           26         i64 
    jumpne         #20264     i64 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_longif.u i64 
    push           mm_type.tx_longif.b u64 
    callproc       &mm_type.coerceunit 
#20264: 
    push           mm_type.tx_longif.b u64 
    push           48         
    pushptroff                i32 1 0
    push           mm_type.tx_longif.p u64 
    push           48         
    popptroff                 i32 1 0
#20259: 
#20265: 
    retproc                   
End


Proc mm_type.tx_incrto:
    param          mm_type.tx_incrto.p u64 
    param          mm_type.tx_incrto.a u64 
    param          mm_type.tx_incrto.t i64 
    procentry                 
    setargs                   3 0
    push           1          i64 
    push           26         i64 
    push           mm_type.tx_incrto.a u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_incrto.t i64 
    push           0          i64 
    jumpeq         #20267     i64 
    push           mm_type.tx_incrto.p u64 
    push           60         
    pushptroff                u8 1 0
    push           153        i64 
    casejumpeq     #20268     i64 0
    push           154        i64 
    casejumpeq     #20269     i64 0
    popstack                  i64 
    jump           #20270     
#20268: 
    push           155        i64 
    push           mm_type.tx_incrto.p u64 
    push           60         
    popptroff                 u8 1 0
    jump           #20271     
#20269: 
    push           156        i64 
    push           mm_type.tx_incrto.p u64 
    push           60         
    popptroff                 u8 1 0
    jump           #20271     
#20270: 
#20271: 
    setargs                   1 0
    push           mm_type.tx_incrto.a u64 
    push           48         
    pushptroff                i32 1 0
    callfn         &mm_lib.gettypebase i64 
    push           mm_type.tx_incrto.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #20272     
#20267: 
    push           mm_type.tx_incrto.p u64 
    push           60         
    pushptroff                u8 1 0
    push           157        i64 
    casejumpeq     #20273     i64 0
    push           158        i64 
    casejumpeq     #20274     i64 0
    popstack                  i64 
    jump           #20275     
#20273: 
    push           153        i64 
    push           mm_type.tx_incrto.p u64 
    push           60         
    popptroff                 u8 1 0
    jump           #20276     
#20274: 
    push           154        i64 
    push           mm_type.tx_incrto.p u64 
    push           60         
    popptroff                 u8 1 0
    jump           #20276     
#20275: 
#20276: 
    push           0          i64 
    push           mm_type.tx_incrto.p u64 
    push           48         
    popptroff                 i32 1 0
#20272: 
    setargs                   1 0
    push           mm_type.tx_incrto.a u64 
    push           48         
    pushptroff                i32 1 0
    callfn         &mm_lib.getpclmode i64 
    push           mm_type.tx_incrto.p u64 
    push           61         
    popptroff                 u8 1 0
    setargs                   2 0
    push           0          i64 
    push           mm_type.tx_incrto.p u64 
    callproc       &mm_type.twiden 
#20277: 
    retproc                   
End


Proc mm_type.tx_for:
    param          mm_type.tx_for.pindex u64 
    param          mm_type.tx_for.pfrom u64 
    param          mm_type.tx_for.pbody u64 
    local          mm_type.tx_for.pto u64 
    local          mm_type.tx_for.pstep u64 
    local          mm_type.tx_for.plocal u64 
    local          mm_type.tx_for.plist u64 
    local          mm_type.tx_for.u i64 
    procentry                 
    push           mm_type.tx_for.pfrom u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_for.pto u64 
    push           mm_type.tx_for.pto u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_for.pstep u64 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_for.pindex u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_for.pindex u64 
    pushptr                   u8 
    push           3          i64 
    jumpeq         #20279     i64 
    setargs                   2 0
    push           0          u64 
    push           "Loop index not a variable" u64 
    callproc       &mm_support.txerror 
#20279: 
    push           mm_type.tx_for.pindex u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.tx_for.u i64 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_for.pindex u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &mm_type.tpass 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_for.u i64 
    push           mm_type.tx_for.pfrom u64 
    callproc       &mm_type.tpass 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_for.u i64 
    push           mm_type.tx_for.pto u64 
    callproc       &mm_type.tpass 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_for.u i64 
    push           mm_type.tx_for.pstep u64 
    callproc       &mm_type.tpass 
    setargs                   3 0
    push           0          i64 
    push           0          i64 
    push           mm_type.tx_for.pbody u64 
    callproc       &mm_type.tpass 
    setargs                   3 0
    push           0          i64 
    push           0          i64 
    push           mm_type.tx_for.pbody u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &mm_type.tpass 
#20280: 
    retproc                   
End


Proc mm_type.tx_forall:
    param          mm_type.tx_forall.pindex u64 
    param          mm_type.tx_forall.plist u64 
    param          mm_type.tx_forall.pbody u64 
    local          mm_type.tx_forall.plocal u64 
    local          mm_type.tx_forall.pfrom u64 
    local          mm_type.tx_forall.pto u64 
    local          mm_type.tx_forall.passign u64 
    local          mm_type.tx_forall.u i64 
    local          mm_type.tx_forall.mlist i64 
    local          mm_type.tx_forall.elemtype i64 
    procentry                 
    push           mm_type.tx_forall.pindex u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_forall.plocal u64 
    push           mm_type.tx_forall.plocal u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_forall.pfrom u64 
    push           mm_type.tx_forall.pfrom u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_forall.pto u64 
    push           mm_type.tx_forall.plist u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_forall.passign u64 
    setargs                   3 0
    push           0          i64 
    push           4          i64 
    push           mm_type.tx_forall.pindex u64 
    callproc       &mm_type.tpass 
    setargs                   3 0
    push           0          i64 
    push           4          i64 
    push           mm_type.tx_forall.pfrom u64 
    callproc       &mm_type.tpass 
    setargs                   3 0
    push           0          i64 
    push           4          i64 
    push           mm_type.tx_forall.pto u64 
    callproc       &mm_type.tpass 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_forall.plist u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_forall.plist u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.tx_forall.mlist i64 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_forall.mlist i64 
    pushptroff                i32 4 0
    push           11         i64 
    casejumpeq     #20282     i64 0
    push           12         i64 
    casejumpeq     #20283     i64 0
    popstack                  i64 
    jump           #20284     
#20282: 
    push           &mm_decls.tttarget 
    push           mm_type.tx_forall.mlist i64 
    pushptroff                i32 4 0
    pop            mm_type.tx_forall.elemtype i64 
    jump           #20285     
#20283: 
    push           &mm_decls.tttarget 
    push           mm_type.tx_forall.mlist i64 
    pushptroff                i32 4 0
    pop            mm_type.tx_forall.elemtype i64 
    jump           #20285     
#20284: 
    setargs                   2 0
    push           0          u64 
    push           "forall/can't iterate" u64 
    callproc       &mm_support.txerror 
#20285: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_forall.plocal u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_forall.plocal u64 
    push           48         
    pushptroff                i32 1 0
    push           26         i64 
    jumpne         #20286     i64 
    push           mm_type.tx_forall.elemtype i64 
    push           mm_type.tx_forall.plocal u64 
    push           48         
    popptroff                 i32 1 0
    push           mm_type.tx_forall.elemtype i64 
    push           mm_type.tx_forall.plocal u64 
    push           16         
    pushptroff                u64 1 0
    push           72         
    popptroff                 i32 1 0
#20286: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_forall.passign u64 
    callproc       &mm_type.tpass 
    setargs                   3 0
    push           0          i64 
    push           0          i64 
    push           mm_type.tx_forall.pbody u64 
    callproc       &mm_type.tpass 
    setargs                   3 0
    push           0          i64 
    push           0          i64 
    push           mm_type.tx_forall.pbody u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &mm_type.tpass 
#20287: 
    retproc                   
End


Proc mm_type.tx_index:
    param          mm_type.tx_index.p u64 
    param          mm_type.tx_index.a u64 
    param          mm_type.tx_index.b u64 
    param          mm_type.tx_index.t i64 
    param          mm_type.tx_index.lv i64 
    local          mm_type.tx_index.amode i64 
    local          mm_type.tx_index.emode i64 
    local          mm_type.tx_index.pmode i64 
    local          mm_type.tx_index.tmode i64 
    local          mm_type.tx_index.tbasemode i64 
    procentry                 
    setargs                   3 0
    push           mm_type.tx_index.lv i64 
    push           26         i64 
    push           mm_type.tx_index.a u64 
    callproc       &mm_type.tpass 
    setargs                   2 0
    push           mm_type.tx_index.t i64 
    push           0          i64 
    setne                     i64 
    push           mm_type.tx_index.a u64 
    callproc       &mm_type.deref 
    push           mm_type.tx_index.a u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.tx_index.amode i64 
    setargs                   3 0
    push           0          i64 
    push           4          i64 
    push           mm_type.tx_index.b u64 
    callproc       &mm_type.tpass 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_index.amode i64 
    pushptroff                i32 4 0
    push           11         i64 
    setjumpeq      #20289     i64 
    push           12         i64 
    setjumpeqx     #20289     i64 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           1          i64 
    push           mm_type.tx_index.amode i64 
    callfn         &mm_lib.strmode u64 
    push           "Can't index: #" u64 
    callproc       &mm_support.txerror_s 
#20289: 
    push           &mm_decls.tttarget 
    push           mm_type.tx_index.amode i64 
    pushptroff                i32 4 0
    push           mm_type.tx_index.p u64 
    push           48         
    popptroff                 i32 1 0
    setargs                   2 0
    push           mm_type.tx_index.lv i64 
    push           mm_type.tx_index.p u64 
    callproc       &mm_type.twiden 
#20290: 
    retproc                   
End


Proc mm_type.tx_makerange:
    param          mm_type.tx_makerange.p u64 
    param          mm_type.tx_makerange.a u64 
    param          mm_type.tx_makerange.b u64 
    local          mm_type.tx_makerange.amode i64 
    local          mm_type.tx_makerange.bmode i64 
    procentry                 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_makerange.a u64 
    callproc       &mm_type.tpass 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_makerange.b u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_makerange.a u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.tx_makerange.amode i64 
    push           mm_type.tx_makerange.b u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.tx_makerange.bmode i64 
    push           &mm_decls.ttisinteger 
    push           mm_type.tx_makerange.amode i64 
    pushptroff                u8 1 0
    jumpfalse      #20292     i64 
    push           &mm_decls.ttisinteger 
    push           mm_type.tx_makerange.bmode i64 
    pushptroff                u8 1 0
    jumptrue       #20293     i64 
#20292: 
    setargs                   2 0
    push           0          u64 
    push           "range not int" u64 
    callproc       &mm_support.txerror 
#20293: 
    push           &mm_decls.ttisint 
    push           mm_type.tx_makerange.amode i64 
    pushptroff                u8 1 0
    jumpfalse      #20294     i64 
    setargs                   3 0
    push           0          i64 
    push           4          i64 
    push           mm_type.tx_makerange.a u64 
    callproc       &mm_type.coerceunit 
    setargs                   3 0
    push           0          i64 
    push           4          i64 
    push           mm_type.tx_makerange.b u64 
    callproc       &mm_type.coerceunit 
    jump           #20295     
#20294: 
    setargs                   3 0
    push           0          i64 
    push           2          i64 
    push           mm_type.tx_makerange.a u64 
    callproc       &mm_type.coerceunit 
    setargs                   3 0
    push           0          i64 
    push           2          i64 
    push           mm_type.tx_makerange.b u64 
    callproc       &mm_type.coerceunit 
#20295: 
    push           8          i64 
    push           mm_type.tx_makerange.p u64 
    push           48         
    popptroff                 i32 1 0
#20296: 
    retproc                   
End


Proc mm_type.tx_makeset:
    param          mm_type.tx_makeset.p u64 
    param          mm_type.tx_makeset.a u64 
    param          mm_type.tx_makeset.t i64 
    local          mm_type.tx_makeset.x i64 
    local          mm_type.tx_makeset.y i64 
    local          mm_type.tx_makeset.isconst i64 
    local          mm_type.tx_makeset.lower i64 
    local          mm_type.tx_makeset.upper i64 
    local          mm_type.tx_makeset.pvoid u64 
    procentry                 
    push           mm_type.tx_makeset.t i64 
    push           0          i64 
    jumpne         #20298     i64 
    setargs                   2 0
    push           0          u64 
    push           "open(var) set type" u64 
    callproc       &mm_support.txerror 
#20298: 
    push           2000000000 i64 
    pop            mm_type.tx_makeset.lower i64 
    push           -2000000000 i64 
    pop            mm_type.tx_makeset.upper i64 
    push           1          i64 
    pop            mm_type.tx_makeset.isconst i64 
    jump           #20299     
#20300: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_makeset.a u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_makeset.a u64 
    push           58         
    pushptroff                u8 1 0
    jumptrue       #20301     i64 
    push           0          i64 
    pop            mm_type.tx_makeset.isconst i64 
    jump           #20302     
#20301: 
    push           mm_type.tx_makeset.a u64 
    pushptr                   u8 
    push           20         i64 
    casejumpeq     #20303     i64 0
    push           1          i64 
    casejumpeq     #20304     i64 0
    popstack                  i64 
    jump           #20305     
#20303: 
    push           &mm_type.tx_makeset.lower 
    push           mm_type.tx_makeset.a u64 
    push           16         
    pushptroff                u64 1 0
    push           16         
    pushptroff                i64 1 0
    minto                     i64 
    push           &mm_type.tx_makeset.upper 
    push           mm_type.tx_makeset.a u64 
    push           24         
    pushptroff                u64 1 0
    push           16         
    pushptroff                i64 1 0
    maxto                     i64 
    jump           #20306     
#20304: 
    setargs                   3 0
    push           0          i64 
    push           4          i64 
    push           mm_type.tx_makeset.a u64 
    callproc       &mm_type.coerceunit 
    push           &mm_type.tx_makeset.lower 
    push           mm_type.tx_makeset.a u64 
    push           16         
    pushptroff                i64 1 0
    store          mm_type.tx_makeset.y i64 
    minto                     i64 
    push           &mm_type.tx_makeset.upper 
    push           mm_type.tx_makeset.a u64 
    push           16         
    pushptroff                i64 1 0
    store          mm_type.tx_makeset.y i64 
    maxto                     i64 
    jump           #20306     
#20305: 
#20306: 
#20302: 
    push           mm_type.tx_makeset.a u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_makeset.a u64 
#20299: 
    push           mm_type.tx_makeset.a u64 
    jumptrue       #20300     u64 
#20307: 
    push           mm_type.tx_makeset.isconst i64 
    push           mm_type.tx_makeset.p u64 
    push           58         
    popptroff                 u8 1 0
#20308: 
    retproc                   
End


Proc mm_type.tx_ptr:
    param          mm_type.tx_ptr.p u64 
    param          mm_type.tx_ptr.a u64 
    param          mm_type.tx_ptr.t i64 
    param          mm_type.tx_ptr.lv i64 
    local          mm_type.tx_ptr.d u64 
    procentry                 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_ptr.a u64 
    callproc       &mm_type.tpass 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_ptr.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           0          i64 
    casejumpeq     #20310     i64 0
    push           9          i64 
    casejumpeq     #20311     i64 0
    push           12         i64 
    casejumpeq     #20312     i64 0
    popstack                  i64 
    jump           #20313     
#20310: 
    setargs                   2 0
    push           0          u64 
    push           "Deref Void" u64 
    callproc       &mm_support.txerror 
    jump           #20314     
#20311: 
    push           &mm_decls.tttarget 
    push           mm_type.tx_ptr.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           mm_type.tx_ptr.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #20314     
#20312: 
    setargs                   2 0
    push           0          u64 
    push           "Can't deref slice" u64 
    callproc       &mm_support.txerror 
    jump           #20314     
#20313: 
    setargs                   2 0
    push           0          u64 
    push           "PTR: need ref T" u64 
    callproc       &mm_support.txerror 
#20314: 
    setargs                   2 0
    push           mm_type.tx_ptr.lv i64 
    push           mm_type.tx_ptr.p u64 
    callproc       &mm_type.twiden 
#20315: 
    retproc                   
End


Proc mm_type.setrecordsize:
    param          mm_type.setrecordsize.m i64 
    local          mm_type.setrecordsize.fieldlist block:1664 
    local          mm_type.setrecordsize.i i64 
    local          mm_type.setrecordsize.nfields i64 
    local          mm_type.setrecordsize.indent i64 
    local          mm_type.setrecordsize.nrfields i64 
    local          mm_type.setrecordsize.size i64 
    local          mm_type.setrecordsize.index i64 
    local          mm_type.setrecordsize.maxalign i64 
    local          mm_type.setrecordsize.d u64 
    local          mm_type.setrecordsize.e u64 
    local          mm_type.setrecordsize.flags u64 
    local          mm_type.setrecordsize.flag i64 
    procentry                 
    push           &mm_decls.ttsize 
    push           mm_type.setrecordsize.m i64 
    pushptroff                i32 4 0
    jumpfalse      #20317     i64 
    jump           #20318     
#20317: 
    push           &mm_decls.ttnamedef 
    push           mm_type.setrecordsize.m i64 
    pushptroff                u64 8 0
    pop            mm_type.setrecordsize.d u64 
    push           mm_type.setrecordsize.d u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_type.setrecordsize.e u64 
    push           0          i64 
    pop            mm_type.setrecordsize.nfields i64 
    push           83         u64 
    typepun                   u64 void 0
    push           &mm_type.setrecordsize.fieldlist 
    push           &mm_type.setrecordsize.nfields 
    incrload                  i64 1
    popptroff                 u64 8 -8
    jump           #20319     
#20320: 
    push           mm_type.setrecordsize.e u64 
    push           78         
    pushptroff                u8 1 0
    push           14         i64 
    jumpne         #20321     i64 
    push           mm_type.setrecordsize.nfields i64 
    push           200        i64 
    jumplt         #20322     i64 
    setargs                   2 0
    push           0          u64 
    push           "srs:too many fields" u64 
    callproc       &mm_support.gerror 
#20322: 
    setargs                   1 0
    push           mm_type.setrecordsize.e u64 
    push           72         
    pushptroff                i32 1 0
    callproc       &mm_type.setmodesize 
    push           mm_type.setrecordsize.e u64 
    push           104        
    addrefoff                 u64 1 0
    pop            mm_type.setrecordsize.flags u64 
#20323: 
    push           mm_type.setrecordsize.flags u64 
    pushptr                   u8 
    push           83         u64 
    casejumpeq     #20324     u64 0
    push           85         u64 
    casejumpeq     #20324     u64 0
    popstack                  u64 
    jump           #20325     
#20324: 
    push           mm_type.setrecordsize.flags u64 
    pushptr                   u8 
    pop            mm_type.setrecordsize.flag i64 
    push           mm_type.setrecordsize.flag i64 
    typepun                   u64 void 0
    push           &mm_type.setrecordsize.fieldlist 
    push           &mm_type.setrecordsize.nfields 
    incrload                  i64 1
    popptroff                 u64 8 -8
    push           &mm_type.setrecordsize.flags 
    incr                      u64 1
    jump           #20323     
#20325: 
    jump           #20326     
    jump           #20323     
#20326: 
    push           mm_type.setrecordsize.e u64 
    push           &mm_type.setrecordsize.fieldlist 
    push           &mm_type.setrecordsize.nfields 
    incrload                  i64 1
    popptroff                 u64 8 -8
#20327: 
    push           &mm_type.setrecordsize.flags 
    loadincr                  u64 1
    pushptr                   u8 
    pop            mm_type.setrecordsize.flag i64 
    push           mm_type.setrecordsize.flag i64 
    push           42         i64 
    casejumpeq     #20328     i64 0
    push           69         i64 
    casejumpeq     #20329     i64 0
    popstack                  i64 
    jump           #20330     
#20328: 
    jump           #20331     
#20329: 
    push           69         u64 
    typepun                   u64 void 0
    push           &mm_type.setrecordsize.fieldlist 
    push           &mm_type.setrecordsize.nfields 
    incrload                  i64 1
    popptroff                 u64 8 -8
    jump           #20331     
#20330: 
    jump           #20332     
#20331: 
    jump           #20327     
#20332: 
#20321: 
    push           mm_type.setrecordsize.e u64 
    push           32         
    pushptroff                u64 1 0
    pop            mm_type.setrecordsize.e u64 
#20319: 
    push           mm_type.setrecordsize.e u64 
    jumptrue       #20320     u64 
#20333: 
    push           69         u64 
    typepun                   u64 void 0
    push           &mm_type.setrecordsize.fieldlist 
    push           &mm_type.setrecordsize.nfields 
    incrload                  i64 1
    popptroff                 u64 8 -8
    push           0          u64 
    push           &mm_type.setrecordsize.fieldlist 
    push           mm_type.setrecordsize.nfields i64 
    popptroff                 u64 8 0
    push           0          i64 
    pop            mm_type.countedfields i64 
    push           2          i64 
    pop            mm_type.setrecordsize.index i64 
    push           1          i64 
    pop            mm_type.setrecordsize.maxalign i64 
    setargs                   7 0
    push           &mm_type.setrecordsize.maxalign 
    push           mm_type.setrecordsize.d u64 
    push           117        
    pushptroff                u8 1 0
    push           0          i64 
    push           &mm_type.setrecordsize.size 
    push           &mm_type.setrecordsize.index 
    push           &mm_type.setrecordsize.fieldlist 
    push           83         i64 
    callproc       &mm_type.scanrecord 
    push           mm_type.setrecordsize.d u64 
    push           117        
    pushptroff                u8 1 0
    jumpfalse      #20334     i64 
    setargs                   2 0
    push           mm_type.setrecordsize.maxalign i64 
    push           mm_type.setrecordsize.size i64 
    callfn         &mm_type.roundoffset i64 
    pop            mm_type.setrecordsize.size i64 
    push           mm_type.setrecordsize.maxalign i64 
    push           mm_type.setrecordsize.d u64 
    push           122        
    popptroff                 i16 1 0
    jump           #20335     
#20334: 
    push           1          i64 
    push           mm_type.setrecordsize.d u64 
    push           122        
    popptroff                 i16 1 0
#20335: 
    push           mm_type.setrecordsize.size i64 
    push           &mm_decls.ttsize 
    push           mm_type.setrecordsize.m i64 
    popptroff                 i32 4 0
    push           mm_type.countedfields i64 
    push           &mm_decls.ttlength 
    push           mm_type.setrecordsize.m i64 
    popptroff                 i32 4 0
    push           1          i64 
    push           &mm_decls.ttlower 
    push           mm_type.setrecordsize.m i64 
    popptroff                 i32 4 0
#20318: 
    retproc                   
End


Proc mm_type.scanrecord:
    param          mm_type.scanrecord.state i64 
    param          mm_type.scanrecord.fields u64 
    param          mm_type.scanrecord.index u64 
    param          mm_type.scanrecord.isize u64 
    param          mm_type.scanrecord.offset i64 
    param          mm_type.scanrecord.calign i64 
    param          mm_type.scanrecord.maxalign u64 
    local          mm_type.scanrecord.e u64 
    local          mm_type.scanrecord.f u64 
    local          mm_type.scanrecord.ea u64 
    local          mm_type.scanrecord.size i64 
    local          mm_type.scanrecord.fieldsize i64 
    local          mm_type.scanrecord.bitoffset i64 
    local          mm_type.scanrecord.alignment i64 
    local          mm_type.scanrecord.newoffset i64 
    procentry                 
    push           0          i64 
    pop            mm_type.scanrecord.size i64 
    push           0          i64 
    pop            mm_type.scanrecord.bitoffset i64 
    jump           #20337     
#20338: 
    push           mm_type.scanrecord.f i64 
    push           83         i64 
    casejumpeq     #20339     i64 0
    push           85         i64 
    casejumpeq     #20339     i64 0
    push           69         i64 
    casejumpeq     #20340     i64 0
    popstack                  i64 
    jump           #20341     
#20339: 
    setargs                   7 0
    push           mm_type.scanrecord.maxalign u64 
    push           mm_type.scanrecord.calign i64 
    push           mm_type.scanrecord.offset i64 
    push           &mm_type.scanrecord.fieldsize 
    push           mm_type.scanrecord.index u64 
    push           mm_type.scanrecord.fields u64 
    push           mm_type.scanrecord.f i64 
    callproc       &mm_type.scanrecord 
    jump           #20342     
#20340: 
    push           mm_type.scanrecord.state i64 
    push           85         i64 
    jumpne         #20343     i64 
    push           &mm_type.countedfields 
    incr                      i64 1
#20343: 
    push           mm_type.scanrecord.size i64 
    push           mm_type.scanrecord.isize u64 
    popptr                    i64 
    jump           #20344     
    jump           #20342     
#20341: 
    push           mm_type.scanrecord.f u64 
    push           72         
    pushptroff                i32 1 0
    push           30         i64 
    jumpne         #20345     i64 
    push           0          i64 
    pop            mm_type.scanrecord.fieldsize i64 
    push           mm_type.scanrecord.f u64 
    push           96         
    pushptroff                u64 1 0
    pop            mm_type.scanrecord.ea u64 
    push           mm_type.scanrecord.ea u64 
    push           84         
    pushptroff                i32 1 0
    push           mm_type.scanrecord.f u64 
    push           84         
    popptroff                 i32 1 0
    push           mm_type.scanrecord.bitoffset i64 
    push           mm_type.scanrecord.f u64 
    push           118        
    popptroff                 u8 1 0
    push           &mm_type.scanrecord.bitoffset 
    push           mm_type.scanrecord.f u64 
    push           116        
    pushptroff                u8 1 0
    addto                     i64 
    push           mm_type.scanrecord.bitoffset i64 
    push           &mm_decls.ttsize 
    push           mm_type.scanrecord.f u64 
    push           96         
    pushptroff                u64 1 0
    push           72         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           8          i64 
    mul                       i64 
    jumple         #20346     i64 
    setargs                   2 0
    push           0          u64 
    push           "Bit fields overflow type" u64 
    callproc       &mm_support.txerror 
#20346: 
    jump           #20347     
#20345: 
    push           mm_type.scanrecord.f u64 
    push           92         
    pushptroff                u16 1 0
    push           13         i64 
    dotindex                  i64 
    jumpfalse      #20348     u64 
    push           0          i64 
    pop            mm_type.scanrecord.bitoffset i64 
    push           mm_type.scanrecord.f u64 
    push           96         
    pushptroff                u64 1 0
    pop            mm_type.scanrecord.e u64 
    push           0          i64 
    pop            mm_type.scanrecord.fieldsize i64 
    setargs                   2 0
    push           mm_type.scanrecord.e u64 
    push           mm_type.scanrecord.f u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &mm_name.resolve_equiv_name u64 
    pop            mm_type.scanrecord.ea u64 
    push           mm_type.scanrecord.ea u64 
    push           84         
    pushptroff                i32 1 0
    push           mm_type.scanrecord.f u64 
    push           84         
    popptroff                 i32 1 0
    jump           #20347     
#20348: 
    push           0          i64 
    pop            mm_type.scanrecord.bitoffset i64 
    push           mm_type.scanrecord.state i64 
    push           83         i64 
    jumpne         #20349     i64 
    push           &mm_type.countedfields 
    incr                      i64 1
#20349: 
    push           &mm_decls.ttsize 
    push           mm_type.scanrecord.f u64 
    push           72         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    pop            mm_type.scanrecord.fieldsize i64 
    push           mm_type.scanrecord.calign i64 
    jumpfalse      #20350     i64 
    setargs                   1 0
    push           mm_type.scanrecord.f u64 
    push           72         
    pushptroff                i32 1 0
    callfn         &mm_type.getalignment i64 
    pop            mm_type.scanrecord.alignment i64 
    push           mm_type.scanrecord.alignment i64 
    push           mm_type.scanrecord.maxalign u64 
    pushptr                   i64 
    jumple         #20351     i64 
    push           mm_type.scanrecord.alignment i64 
    push           mm_type.scanrecord.maxalign u64 
    popptr                    i64 
#20351: 
    setargs                   2 0
    push           mm_type.scanrecord.alignment i64 
    push           mm_type.scanrecord.offset i64 
    callfn         &mm_type.roundoffset i64 
    pop            mm_type.scanrecord.newoffset i64 
    push           &mm_type.scanrecord.size 
    push           mm_type.scanrecord.newoffset i64 
    push           mm_type.scanrecord.offset i64 
    sub                       i64 
    addto                     i64 
    jump           #20352     
#20350: 
    push           mm_type.scanrecord.offset i64 
    pop            mm_type.scanrecord.newoffset i64 
#20352: 
    push           mm_type.scanrecord.newoffset i64 
    push           mm_type.scanrecord.f u64 
    push           84         
    popptroff                 i32 1 0
    push           mm_type.scanrecord.newoffset i64 
    pop            mm_type.scanrecord.offset i64 
#20347: 
#20342: 
    push           mm_type.scanrecord.state i64 
    push           83         i64 
    jumpne         #20353     i64 
    push           &mm_type.scanrecord.offset 
    push           mm_type.scanrecord.fieldsize i64 
    addto                     i64 
    push           &mm_type.scanrecord.size 
    push           mm_type.scanrecord.fieldsize i64 
    addto                     i64 
    jump           #20354     
#20353: 
    push           mm_type.scanrecord.size i64 
    push           mm_type.scanrecord.fieldsize i64 
    max                       i64 
    pop            mm_type.scanrecord.size i64 
#20354: 
#20337: 
    push           mm_type.scanrecord.fields u64 
    push           mm_type.scanrecord.index u64 
    loadincr                  i64 1
    pushptroff                u64 8 -8
    store          mm_type.scanrecord.f u64 
    jumptrue       #20338     u64 
#20355: 
#20344: 
    retproc                   
End


Proc mm_type.roundoffset: i64
    param          mm_type.roundoffset.offset i64 
    param          mm_type.roundoffset.alignment i64 
    local          mm_type.roundoffset.mask i64 
    procentry                 
    push           mm_type.roundoffset.alignment i64 
    push           1          i64 
    jumpne         #20357     i64 
    push           mm_type.roundoffset.offset i64 
    setret                    i64 
    jump           #20358     
#20357: 
    push           mm_type.roundoffset.alignment i64 
    push           1          i64 
    sub                       i64 
    pop            mm_type.roundoffset.mask i64 
    jump           #20359     
#20360: 
    push           &mm_type.roundoffset.offset 
    incr                      i64 1
#20359: 
    push           mm_type.roundoffset.offset i64 
    push           mm_type.roundoffset.mask i64 
    iand                      i64 
    jumptrue       #20360     i64 
#20361: 
    push           mm_type.roundoffset.offset i64 
    setret                    i64 
    jump           #20358     
#20358: 
    retfn                     i64 
End


Proc mm_type.getalignment: i64
    param          mm_type.getalignment.m i64 
    local          mm_type.getalignment.a i64 
    procentry                 
    push           &mm_decls.ttbasetype 
    push           mm_type.getalignment.m i64 
    pushptroff                i32 4 0
    push           11         i64 
    casejumpeq     #20363     i64 0
    push           13         i64 
    casejumpeq     #20364     i64 0
    popstack                  i64 
    jump           #20365     
#20363: 
    setargs                   1 0
    push           &mm_decls.tttarget 
    push           mm_type.getalignment.m i64 
    pushptroff                i32 4 0
    callfn         &mm_type.getalignment i64 
    setret                    i64 
    jump           #20366     
    jump           #20367     
#20364: 
    push           &mm_decls.ttnamedef 
    push           mm_type.getalignment.m i64 
    pushptroff                u64 8 0
    push           122        
    pushptroff                i16 1 0
    setret                    i64 
    jump           #20366     
    jump           #20367     
#20365: 
#20367: 
    push           &mm_decls.ttsize 
    push           mm_type.getalignment.m i64 
    pushptroff                i32 4 0
    pop            mm_type.getalignment.a i64 
    push           mm_type.getalignment.a i64 
    push           1          i64 
    casejumpeq     #20368     i64 0
    push           2          i64 
    casejumpeq     #20368     i64 0
    push           4          i64 
    casejumpeq     #20368     i64 0
    push           8          i64 
    casejumpeq     #20368     i64 0
    popstack                  i64 
    jump           #20369     
#20368: 
    push           mm_type.getalignment.a i64 
    setret                    i64 
    jump           #20366     
    jump           #20370     
#20369: 
#20370: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    setargs                   2 0
    push           1          i64 
    push           mm_type.getalignment.m i64 
    callfn         &mm_lib.strmode u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_type.getalignment.a i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "GETALIGN SIZE NOT 1248" u64 
    callproc       &mm_support.serror 
    push           0          i64 
    setret                    i64 
    jump           #20366     
#20366: 
    retfn                     i64 
End


Proc mm_type.tx_convert:
    param          mm_type.tx_convert.p u64 
    param          mm_type.tx_convert.a u64 
    param          mm_type.tx_convert.hard i64 
    procentry                 
    push           mm_type.tx_convert.a u64 
    pushptr                   u8 
    push           19         i64 
    jumpne         #20372     i64 
    setargs                   4 0
    push           0          i64 
    push           mm_type.tx_convert.p u64 
    push           52         
    pushptroff                i32 1 0
    push           mm_type.tx_convert.a u64 
    push           16         
    pushptroff                u64 1 0
    push           mm_type.tx_convert.a u64 
    callproc       &mm_type.tx_makelist 
    jump           #20373     
#20372: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_convert.a u64 
    callproc       &mm_type.tpass 
    setargs                   3 0
    push           mm_type.tx_convert.hard i64 
    push           mm_type.tx_convert.p u64 
    push           52         
    pushptroff                i32 1 0
    push           mm_type.tx_convert.a u64 
    callproc       &mm_type.coerceunit 
#20373: 
    setargs                   2 0
    push           mm_type.tx_convert.a u64 
    push           mm_type.tx_convert.p u64 
    callproc       &mm_lib.deleteunit 
#20374: 
    retproc                   
End


Proc mm_type.tx_makelist:
    param          mm_type.tx_makelist.p u64 
    param          mm_type.tx_makelist.a u64 
    param          mm_type.tx_makelist.t i64 
    param          mm_type.tx_makelist.lv i64 
    local          mm_type.tx_makelist.alength i64 
    local          mm_type.tx_makelist.tlength i64 
    local          mm_type.tx_makelist.elemtype i64 
    local          mm_type.tx_makelist.newt i64 
    local          mm_type.tx_makelist.i i64 
    local          mm_type.tx_makelist.nfields i64 
    local          mm_type.tx_makelist.isconst i64 
    local          mm_type.tx_makelist.m i64 
    local          mm_type.tx_makelist.q u64 
    local          mm_type.tx_makelist.b u64 
    local          mm_type.tx_makelist.e u64 
    procentry                 
    push           mm_type.tx_makelist.p u64 
    push           40         
    pushptroff                u32 1 0
    pop            mm_type.tx_makelist.alength i64 
    push           0          i64 
    pop            mm_type.tx_makelist.newt i64 
    push           1          i64 
    pop            mm_type.tx_makelist.isconst i64 
    push           &mm_decls.ttlength 
    push           mm_type.tx_makelist.t i64 
    pushptroff                i32 4 0
    pop            mm_type.tx_makelist.tlength i64 
    push           mm_type.tx_makelist.tlength i64 
    jumpfalse      #20376     i64 
    push           mm_type.tx_makelist.alength i64 
    push           mm_type.tx_makelist.tlength i64 
    jumpge         #20377     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "ALENGTH=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_type.tx_makelist.alength i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           "TLENGTH=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_type.tx_makelist.tlength i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           0          u64 
    push           "Too few elements" u64 
    callproc       &mm_support.txerror 
    jump           #20378     
#20377: 
    push           mm_type.tx_makelist.alength i64 
    push           mm_type.tx_makelist.tlength i64 
    jumple         #20379     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "ALENGTH=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_type.tx_makelist.alength i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           "TLENGTH=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_type.tx_makelist.tlength i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           0          u64 
    push           "Too many elements" u64 
    callproc       &mm_support.txerror 
#20379: 
#20378: 
#20376: 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_makelist.t i64 
    pushptroff                i32 4 0
    push           11         i64 
    casejumpeq     #20380     i64 0
    push           13         i64 
    casejumpeq     #20381     i64 0
    push           12         i64 
    casejumpeq     #20382     i64 0
    push           0          i64 
    casejumpeq     #20383     i64 0
    popstack                  i64 
    jump           #20384     
#20380: 
    push           &mm_decls.tttarget 
    push           mm_type.tx_makelist.t i64 
    pushptroff                i32 4 0
    pop            mm_type.tx_makelist.elemtype i64 
    push           mm_type.tx_makelist.tlength i64 
    push           0          i64 
    jumpne         #20385     i64 
    setargs                   5 0
    push           0          i64 
    push           mm_type.tx_makelist.alength i64 
    push           &mm_decls.ttlower 
    push           mm_type.tx_makelist.t i64 
    pushptroff                i32 4 0
    push           mm_type.tx_makelist.elemtype i64 
    push           0          u64 
    callfn         &mm_lib.createarraymodek i64 
    pop            mm_type.tx_makelist.newt i64 
    jump           #20386     
#20385: 
    push           mm_type.tx_makelist.t i64 
    pop            mm_type.tx_makelist.newt i64 
#20386: 
    push           mm_type.tx_makelist.a u64 
    pop            mm_type.tx_makelist.q u64 
    jump           #20387     
#20388: 
    setargs                   3 0
    push           mm_type.tx_makelist.lv i64 
    push           mm_type.tx_makelist.elemtype i64 
    push           mm_type.tx_makelist.q u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_makelist.q u64 
    pushptr                   u8 
    push           1          i64 
    jumpeq         #20389     i64 
    push           0          i64 
    pop            mm_type.tx_makelist.isconst i64 
#20389: 
    push           mm_type.tx_makelist.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_makelist.q u64 
#20387: 
    push           mm_type.tx_makelist.q u64 
    jumptrue       #20388     u64 
#20390: 
    push           mm_type.tx_makelist.newt i64 
    push           mm_type.tx_makelist.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #20391     
#20381: 
    push           &mm_decls.ttnamedef 
    push           mm_type.tx_makelist.t i64 
    pushptroff                u64 8 0
    push           16         
    pushptroff                u64 1 0
    pop            mm_type.tx_makelist.e u64 
    push           mm_type.tx_makelist.a u64 
    pop            mm_type.tx_makelist.q u64 
    jump           #20392     
#20393: 
    push           mm_type.tx_makelist.e u64 
    push           78         
    pushptroff                u8 1 0
    push           14         i64 
    jumpne         #20394     i64 
    jump           #20395     
#20396: 
    push           mm_type.tx_makelist.e u64 
    push           32         
    pushptroff                u64 1 0
    pop            mm_type.tx_makelist.e u64 
    push           mm_type.tx_makelist.e u64 
    jumptrue       #20397     u64 
    jump           #20398     
#20397: 
#20395: 
    push           mm_type.tx_makelist.e u64 
    push           72         
    pushptroff                i32 1 0
    push           30         i64 
    jumpeq         #20396     i64 
#20398: 
    setargs                   3 0
    push           mm_type.tx_makelist.lv i64 
    push           mm_type.tx_makelist.e u64 
    push           72         
    pushptroff                i32 1 0
    push           mm_type.tx_makelist.q u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_makelist.q u64 
    pushptr                   u8 
    push           1          i64 
    jumpeq         #20399     i64 
    push           0          i64 
    pop            mm_type.tx_makelist.isconst i64 
#20399: 
    push           mm_type.tx_makelist.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_makelist.q u64 
#20394: 
    push           mm_type.tx_makelist.e u64 
    push           32         
    pushptroff                u64 1 0
    pop            mm_type.tx_makelist.e u64 
#20392: 
    push           mm_type.tx_makelist.q u64 
    jumpfalse      #20400     u64 
    push           mm_type.tx_makelist.e u64 
    jumptrue       #20393     u64 
#20400: 
#20401: 
    jump           #20402     
#20403: 
    push           mm_type.tx_makelist.e u64 
    push           32         
    pushptroff                u64 1 0
    pop            mm_type.tx_makelist.e u64 
#20402: 
    push           mm_type.tx_makelist.e u64 
    jumpfalse      #20404     u64 
    push           mm_type.tx_makelist.e u64 
    push           78         
    pushptroff                u8 1 0
    push           14         i64 
    jumpne         #20403     i64 
    push           mm_type.tx_makelist.e u64 
    push           72         
    pushptroff                i32 1 0
    push           30         i64 
    jumpeq         #20403     i64 
#20404: 
#20405: 
    push           mm_type.tx_makelist.q u64 
    jumptrue       #20406     u64 
    push           mm_type.tx_makelist.e u64 
    jumpfalse      #20407     u64 
#20406: 
    setargs                   2 0
    push           0          u64 
    push           "Can't initialise unions" u64 
    callproc       &mm_support.txerror 
#20407: 
    push           mm_type.tx_makelist.t i64 
    push           mm_type.tx_makelist.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #20391     
#20382: 
    push           mm_type.tx_makelist.a u64 
    push           0          u64 
    jumpeq         #20408     u64 
    push           mm_type.tx_makelist.a u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_makelist.b u64 
    push           mm_type.tx_makelist.b u64 
    push           0          u64 
    seteq                     u64 
    jumptrue       #20408     i64 
    push           mm_type.tx_makelist.b u64 
    push           8          
    pushptroff                u64 1 0
    jumpfalse      #20409     u64 
#20408: 
    setargs                   2 0
    push           0          u64 
    push           "bad slice init" u64 
    callproc       &mm_support.txerror 
#20409: 
    push           mm_type.tx_makelist.b u64 
    push           mm_type.tx_makelist.p u64 
    push           24         
    popptroff                 u64 1 0
    push           1          i64 
    push           mm_type.tx_makelist.p u64 
    push           2          
    popptroff                 u8 1 0
    push           0          u64 
    push           mm_type.tx_makelist.a u64 
    push           8          
    popptroff                 u64 1 0
    setargs                   3 0
    push           mm_type.tx_makelist.lv i64 
    push           26         i64 
    push           mm_type.tx_makelist.a u64 
    callproc       &mm_type.tpass 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_makelist.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           9          i64 
    jumpeq         #20410     i64 
    setargs                   2 0
    push           0          u64 
    push           "slice init not ref" u64 
    callproc       &mm_support.txerror 
#20410: 
    push           &mm_decls.tttarget 
    push           mm_type.tx_makelist.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           0          i64 
    jumpeq         #20411     i64 
    setargs                   2 0
    push           &mm_decls.tttarget 
    push           mm_type.tx_makelist.t i64 
    pushptroff                i32 4 0
    push           &mm_decls.tttarget 
    push           mm_type.tx_makelist.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    callfn         &mm_type.comparemodes i64 
    jumptrue       #20412     i64 
    setargs                   2 0
    push           0          u64 
    push           "slice/ptr mismatch" u64 
    callproc       &mm_support.txerror 
#20412: 
#20411: 
    setargs                   3 0
    push           0          i64 
    push           4          i64 
    push           mm_type.tx_makelist.b u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_makelist.t i64 
    push           mm_type.tx_makelist.p u64 
    push           48         
    popptroff                 i32 1 0
    push           23         i64 
    push           mm_type.tx_makelist.p u64 
    push           0          
    popptroff                 u8 1 0
    push           1          i64 
    push           mm_type.tx_makelist.p u64 
    push           59         
    popptroff                 u8 1 0
    jump           #20391     
#20383: 
    push           mm_type.tx_makelist.a u64 
    pop            mm_type.tx_makelist.q u64 
    push           mm_type.tx_makelist.p u64 
    push           40         
    pushptroff                u8 1 0
    jumpfalse      #20413     i64 
    push           mm_type.tx_makelist.q u64 
    push           0          u64 
    jumpne         #20414     u64 
    setargs                   2 0
    push           0          u64 
    push           "array()?" u64 
    callproc       &mm_support.txerror 
#20414: 
    setargs                   3 0
    push           mm_type.tx_makelist.lv i64 
    push           26         i64 
    push           mm_type.tx_makelist.q u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_makelist.q u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.tx_makelist.m i64 
    push           mm_type.tx_makelist.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_makelist.q u64 
    jump           #20415     
#20413: 
    setargs                   2 0
    push           0          u64 
    push           "MAKELIST1" u64 
    callproc       &mm_support.txerror 
#20415: 
    jump           #20416     
#20417: 
    setargs                   3 0
    push           mm_type.tx_makelist.lv i64 
    push           mm_type.tx_makelist.m i64 
    push           mm_type.tx_makelist.q u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_makelist.q u64 
    pushptr                   u8 
    push           1          i64 
    jumpeq         #20418     i64 
    push           0          i64 
    pop            mm_type.tx_makelist.isconst i64 
#20418: 
    push           mm_type.tx_makelist.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_makelist.q u64 
#20416: 
    push           mm_type.tx_makelist.q u64 
    jumptrue       #20417     u64 
#20419: 
    jump           #20391     
#20384: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           1          i64 
    push           mm_type.tx_makelist.t i64 
    callfn         &mm_lib.strmode u64 
    push           "Unknown makelist type: #" u64 
    callproc       &mm_support.txerror_s 
#20391: 
    push           mm_type.tx_makelist.isconst i64 
    push           mm_type.tx_makelist.p u64 
    push           58         
    popptroff                 u8 1 0
    setargs                   3 0
    push           0          i64 
    push           4          i64 
    push           mm_type.tx_makelist.p u64 
    push           24         
    pushptroff                u64 1 0
    callproc       &mm_type.tpass 
#20420: 
    retproc                   
End


Proc mm_type.tx_dot:
    param          mm_type.tx_dot.p u64 
    param          mm_type.tx_dot.a u64 
    param          mm_type.tx_dot.b u64 
    param          mm_type.tx_dot.lv i64 
    local          mm_type.tx_dot.recmode i64 
    local          mm_type.tx_dot.recbasemode i64 
    local          mm_type.tx_dot.i i64 
    local          mm_type.tx_dot.j i64 
    local          mm_type.tx_dot.newtag i64 
    local          mm_type.tx_dot.tmode i64 
    local          mm_type.tx_dot.q u64 
    local          mm_type.tx_dot.pindex u64 
    local          mm_type.tx_dot.d u64 
    local          mm_type.tx_dot.dequiv u64 
    procentry                 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_dot.a u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_dot.a u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.tx_dot.recmode i64 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_dot.recmode i64 
    pushptroff                i32 4 0
    pop            mm_type.tx_dot.recbasemode i64 
    jump           #20422     
#20423: 
    push           &mm_decls.tttarget 
    push           mm_type.tx_dot.recmode i64 
    pushptroff                i32 4 0
    pop            mm_type.tx_dot.tmode i64 
    setargs                   2 0
    push           57         i64 
    push           mm_type.tx_dot.a u64 
    callproc       &mm_lib.insertunit 
    push           mm_type.tx_dot.tmode i64 
    push           mm_type.tx_dot.a u64 
    push           48         
    storeptroff               i32 1 0
    pop            mm_type.tx_dot.recmode i64 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_dot.recmode i64 
    pushptroff                i32 4 0
    pop            mm_type.tx_dot.recbasemode i64 
#20422: 
    push           mm_type.tx_dot.recbasemode i64 
    push           9          i64 
    jumpeq         #20423     i64 
#20424: 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_dot.recmode i64 
    pushptroff                i32 4 0
    push           13         i64 
    jumpeq         #20425     i64 
    setargs                   2 0
    push           0          u64 
    push           "Bad record type" u64 
    callproc       &mm_support.txerror 
#20425: 
    push           mm_type.tx_dot.b u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_type.tx_dot.d u64 
    push           mm_type.tx_dot.d u64 
    push           78         
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #20426     i64 
    setargs                   2 0
    push           mm_type.tx_dot.recmode i64 
    push           mm_type.tx_dot.d u64 
    callfn         &mm_type.resolvefield u64 
    push           mm_type.tx_dot.b u64 
    push           16         
    storeptroff               u64 1 0
    pop            mm_type.tx_dot.d u64 
#20426: 
    push           mm_type.tx_dot.d u64 
    push           72         
    pushptroff                i32 1 0
    push           30         i64 
    jumpne         #20427     i64 
    push           mm_type.tx_dot.d u64 
    push           118        
    pushptroff                u8 1 0
    pop            mm_type.tx_dot.i i64 
    push           mm_type.tx_dot.i i64 
    push           mm_type.tx_dot.d u64 
    push           116        
    pushptroff                u8 1 0
    add                       i64 
    push           1          i64 
    sub                       i64 
    pop            mm_type.tx_dot.j i64 
    push           mm_type.tx_dot.d u64 
    push           96         
    pushptroff                u64 1 0
    pop            mm_type.tx_dot.dequiv u64 
    push           mm_type.tx_dot.dequiv u64 
    push           mm_type.tx_dot.b u64 
    push           16         
    popptroff                 u64 1 0
    push           mm_type.tx_dot.dequiv u64 
    push           72         
    pushptroff                i32 1 0
    push           mm_type.tx_dot.b u64 
    push           48         
    popptroff                 i32 1 0
    push           mm_type.tx_dot.d u64 
    push           84         
    pushptroff                i32 1 0
    push           mm_type.tx_dot.p u64 
    push           40         
    popptroff                 u32 1 0
    push           mm_type.tx_dot.i i64 
    push           mm_type.tx_dot.j i64 
    jumpne         #20428     i64 
    setargs                   2 0
    push           4          i64 
    push           mm_type.tx_dot.i u64 
    callfn         &mm_lib.createconstunit u64 
    pop            mm_type.tx_dot.pindex u64 
    push           53         i64 
    pop            mm_type.tx_dot.newtag i64 
    jump           #20429     
#20428: 
    setargs                   3 0
    setargs                   2 0
    push           4          i64 
    push           mm_type.tx_dot.j u64 
    callfn         &mm_lib.createconstunit u64 
    setargs                   2 0
    push           4          i64 
    push           mm_type.tx_dot.i u64 
    callfn         &mm_lib.createconstunit u64 
    push           20         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_type.tx_dot.pindex u64 
    push           8          i64 
    push           mm_type.tx_dot.pindex u64 
    push           48         
    popptroff                 i32 1 0
    push           1          i64 
    push           mm_type.tx_dot.pindex u64 
    push           16         
    pushptroff                u64 1 0
    push           59         
    popptroff                 u8 1 0
    push           1          i64 
    push           mm_type.tx_dot.pindex u64 
    push           24         
    pushptroff                u64 1 0
    push           59         
    popptroff                 u8 1 0
    push           54         i64 
    pop            mm_type.tx_dot.newtag i64 
#20429: 
    push           mm_type.tx_dot.b u64 
    push           48         
    pushptroff                i32 1 0
    push           mm_type.tx_dot.p u64 
    push           48         
    popptroff                 i32 1 0
    setargs                   2 0
    push           mm_type.tx_dot.lv i64 
    push           mm_type.tx_dot.p u64 
    callproc       &mm_type.twiden 
    setargs                   2 0
    push           mm_type.tx_dot.newtag i64 
    push           mm_type.tx_dot.p u64 
    callproc       &mm_lib.insertunit 
    push           2          i64 
    push           mm_type.tx_dot.p u64 
    push           48         
    popptroff                 i32 1 0
    push           mm_type.tx_dot.pindex u64 
    push           mm_type.tx_dot.p u64 
    push           24         
    popptroff                 u64 1 0
    push           1          i64 
    push           mm_type.tx_dot.p u64 
    push           2          
    popptroff                 u8 1 0
    push           1          i64 
    push           mm_type.tx_dot.p u64 
    push           16         
    pushptroff                u64 1 0
    push           59         
    popptroff                 u8 1 0
    push           1          i64 
    push           mm_type.tx_dot.p u64 
    push           24         
    pushptroff                u64 1 0
    push           59         
    popptroff                 u8 1 0
    push           1          i64 
    push           mm_type.tx_dot.p u64 
    push           59         
    popptroff                 u8 1 0
    jump           #20430     
#20427: 
    push           mm_type.tx_dot.d u64 
    push           72         
    pushptroff                i32 1 0
    push           mm_type.tx_dot.b u64 
    push           48         
    popptroff                 i32 1 0
    push           mm_type.tx_dot.d u64 
    push           72         
    pushptroff                i32 1 0
    push           mm_type.tx_dot.p u64 
    push           48         
    popptroff                 i32 1 0
    push           mm_type.tx_dot.d u64 
    push           84         
    pushptroff                i32 1 0
    push           mm_type.tx_dot.p u64 
    push           40         
    popptroff                 u32 1 0
    setargs                   2 0
    push           mm_type.tx_dot.lv i64 
    push           mm_type.tx_dot.p u64 
    callproc       &mm_type.twiden 
#20430: 
    retproc                   
End


Proc mm_type.resolvefield: u64
    param          mm_type.resolvefield.d u64 
    param          mm_type.resolvefield.m i64 
    local          mm_type.resolvefield.e u64 
    local          mm_type.resolvefield.t u64 
    procentry                 
    push           &mm_decls.ttbasetype 
    push           mm_type.resolvefield.m i64 
    pushptroff                i32 4 0
    push           13         i64 
    casejumpeq     #20432     i64 0
    push           9          i64 
    casejumpeq     #20433     i64 0
    popstack                  i64 
    jump           #20434     
#20432: 
    jump           #20435     
#20433: 
    push           &mm_decls.tttarget 
    push           mm_type.resolvefield.m i64 
    pushptroff                i32 4 0
    pop            mm_type.resolvefield.m i64 
    push           &mm_decls.ttbasetype 
    push           mm_type.resolvefield.m i64 
    pushptroff                i32 4 0
    push           13         i64 
    jumpeq         #20436     i64 
    setargs                   2 0
    push           0          u64 
    push           "3:record expected" u64 
    callproc       &mm_support.txerror 
#20436: 
    jump           #20435     
#20434: 
    setargs                   2 0
    push           0          u64 
    push           "4:record expected" u64 
    callproc       &mm_support.txerror 
#20435: 
    push           &mm_decls.ttnamedef 
    push           mm_type.resolvefield.m i64 
    pushptroff                u64 8 0
    pop            mm_type.resolvefield.t u64 
    setargs                   2 0
    push           mm_type.resolvefield.d u64 
    push           mm_type.resolvefield.t u64 
    callfn         &mm_name.finddupl u64 
    pop            mm_type.resolvefield.e u64 
    push           mm_type.resolvefield.e u64 
    jumptrue       #20437     u64 
    setargs                   3 0
    push           0          u64 
    push           mm_type.resolvefield.d u64 
    pushptr                   u64 
    push           "Not a field: #" u64 
    callproc       &mm_support.txerror_s 
#20437: 
    push           mm_type.resolvefield.e u64 
    setret                    u64 
    jump           #20438     
#20438: 
    retfn                     u64 
End


Proc mm_type.tx_andl:
    param          mm_type.tx_andl.p u64 
    param          mm_type.tx_andl.a u64 
    param          mm_type.tx_andl.b u64 
    procentry                 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_andl.a u64 
    callproc       &mm_type.tpass 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_andl.b u64 
    callproc       &mm_type.tpass 
    push           4          i64 
    push           mm_type.tx_andl.p u64 
    push           48         
    popptroff                 i32 1 0
    setargs                   1 0
    push           mm_type.tx_andl.a u64 
    callfn         &mm_type.iscondfalse i64 
    jumptrue       #20440     i64 
    setargs                   1 0
    push           mm_type.tx_andl.b u64 
    callfn         &mm_type.iscondfalse i64 
    jumpfalse      #20441     i64 
#20440: 
    setargs                   3 0
    push           4          i64 
    push           0          i64 
    push           mm_type.tx_andl.p u64 
    callproc       &mm_type.makenewconst 
    jump           #20442     
#20441: 
    setargs                   1 0
    push           mm_type.tx_andl.a u64 
    callfn         &mm_type.iscondtrue i64 
    jumpfalse      #20443     i64 
    setargs                   2 0
    push           mm_type.tx_andl.b u64 
    push           mm_type.tx_andl.p u64 
    callproc       &mm_lib.deleteunit 
    jump           #20442     
#20443: 
    setargs                   1 0
    push           mm_type.tx_andl.b u64 
    callfn         &mm_type.iscondtrue i64 
    jumpfalse      #20444     i64 
    setargs                   2 0
    push           mm_type.tx_andl.a u64 
    push           mm_type.tx_andl.p u64 
    callproc       &mm_lib.deleteunit 
#20444: 
#20442: 
#20445: 
    retproc                   
End


Proc mm_type.convintconst:
    param          mm_type.convintconst.p u64 
    param          mm_type.convintconst.x i64 
    procentry                 
    push           1          i64 
    push           mm_type.convintconst.p u64 
    push           0          
    popptroff                 u8 1 0
    push           4          i64 
    push           mm_type.convintconst.p u64 
    push           48         
    popptroff                 i32 1 0
    push           0          u64 
    push           mm_type.convintconst.p u64 
    push           32         
    storeptroff               u64 1 0
    push           mm_type.convintconst.p u64 
    push           24         
    storeptroff               u64 1 0
    push           mm_type.convintconst.p u64 
    push           16         
    popptroff                 u64 1 0
    push           0          i64 
    push           mm_type.convintconst.p u64 
    push           3          
    storeptroff               u8 1 0
    push           mm_type.convintconst.p u64 
    push           2          
    storeptroff               u8 1 0
    push           mm_type.convintconst.p u64 
    push           1          
    popptroff                 u8 1 0
    push           mm_type.convintconst.x i64 
    push           mm_type.convintconst.p u64 
    push           16         
    popptroff                 i64 1 0
    push           1          i64 
    push           mm_type.convintconst.p u64 
    push           58         
    popptroff                 u8 1 0
#20447: 
    retproc                   
End


Proc mm_type.tx_sliceptr:
    param          mm_type.tx_sliceptr.p u64 
    param          mm_type.tx_sliceptr.a u64 
    local          mm_type.tx_sliceptr.m i64 
    local          mm_type.tx_sliceptr.tmode i64 
    procentry                 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_sliceptr.a u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_sliceptr.a u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.tx_sliceptr.m i64 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_sliceptr.m i64 
    pushptroff                i32 4 0
    push           12         i64 
    casejumpeq     #20449     i64 0
    popstack                  i64 
    jump           #20450     
#20449: 
    jump           #20451     
#20450: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           1          i64 
    push           mm_type.tx_sliceptr.m i64 
    callfn         &mm_lib.strmode u64 
    push           "SLICEPTR #" u64 
    callproc       &mm_support.txerror_s 
#20451: 
    setargs                   5 0
    push           0          i64 
    push           0          i64 
    push           &mm_decls.ttlower 
    push           mm_type.tx_sliceptr.m i64 
    pushptroff                i32 4 0
    push           &mm_decls.tttarget 
    push           mm_type.tx_sliceptr.m i64 
    pushptroff                i32 4 0
    push           0          u64 
    callfn         &mm_lib.createarraymodek i64 
    pop            mm_type.tx_sliceptr.tmode i64 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_sliceptr.tmode i64 
    push           0          u64 
    callfn         &mm_lib.createrefmode i64 
    push           mm_type.tx_sliceptr.p u64 
    push           48         
    popptroff                 i32 1 0
#20452: 
    retproc                   
End


Proc mm_type.tx_swap:
    param          mm_type.tx_swap.p u64 
    param          mm_type.tx_swap.a u64 
    param          mm_type.tx_swap.b u64 
    procentry                 
    setargs                   3 0
    push           1          i64 
    push           26         i64 
    push           mm_type.tx_swap.a u64 
    callproc       &mm_type.tpass 
    setargs                   3 0
    push           1          i64 
    push           26         i64 
    push           mm_type.tx_swap.b u64 
    callproc       &mm_type.tpass 
    setargs                   2 0
    push           mm_type.tx_swap.b u64 
    push           48         
    pushptroff                i32 1 0
    push           mm_type.tx_swap.a u64 
    push           48         
    pushptroff                i32 1 0
    callfn         &mm_type.comparemodes i64 
    jumptrue       #20454     i64 
    setargs                   2 0
    push           0          u64 
    push           "SWAP: type mismatch" u64 
    callproc       &mm_support.txerror 
#20454: 
    push           0          i64 
    push           mm_type.tx_swap.p u64 
    push           48         
    popptroff                 i32 1 0
#20455: 
    retproc                   
End


Proc mm_type.tx_select:
    param          mm_type.tx_select.p u64 
    param          mm_type.tx_select.a u64 
    param          mm_type.tx_select.b u64 
    param          mm_type.tx_select.c u64 
    param          mm_type.tx_select.t i64 
    param          mm_type.tx_select.lv i64 
    local          mm_type.tx_select.i i64 
    local          mm_type.tx_select.u i64 
    local          mm_type.tx_select.q u64 
    procentry                 
    setargs                   3 0
    push           0          i64 
    push           4          i64 
    push           mm_type.tx_select.a u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_select.b u64 
    pop            mm_type.tx_select.q u64 
    jump           #20457     
#20458: 
    setargs                   3 0
    push           mm_type.tx_select.lv i64 
    push           mm_type.tx_select.t i64 
    push           mm_type.tx_select.q u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_select.q u64 
    push           mm_type.tx_select.b u64 
    jumpne         #20459     u64 
    push           mm_type.tx_select.q u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.tx_select.u i64 
    jump           #20460     
#20459: 
    setargs                   2 0
    push           mm_type.tx_select.q u64 
    push           48         
    pushptroff                i32 1 0
    push           mm_type.tx_select.u i64 
    callfn         &mm_type.getdominantmode i64 
    pop            mm_type.tx_select.u i64 
#20460: 
    push           mm_type.tx_select.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_select.q u64 
#20457: 
    push           mm_type.tx_select.q u64 
    jumptrue       #20458     u64 
#20461: 
    setargs                   3 0
    push           mm_type.tx_select.lv i64 
    push           mm_type.tx_select.t i64 
    push           mm_type.tx_select.c u64 
    callproc       &mm_type.tpass 
    setargs                   2 0
    push           mm_type.tx_select.c u64 
    push           48         
    pushptroff                i32 1 0
    push           mm_type.tx_select.u i64 
    callfn         &mm_type.getdominantmode i64 
    pop            mm_type.tx_select.u i64 
    push           mm_type.tx_select.b u64 
    pop            mm_type.tx_select.q u64 
    jump           #20462     
#20463: 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_select.u i64 
    push           mm_type.tx_select.q u64 
    callproc       &mm_type.coerceunit 
    push           mm_type.tx_select.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_select.q u64 
#20462: 
    push           mm_type.tx_select.q u64 
    jumptrue       #20463     u64 
#20464: 
    push           mm_type.tx_select.u i64 
    push           mm_type.tx_select.p u64 
    push           48         
    popptroff                 i32 1 0
#20465: 
    retproc                   
End


Proc mm_type.tx_case:
    param          mm_type.tx_case.p u64 
    param          mm_type.tx_case.a u64 
    param          mm_type.tx_case.b u64 
    param          mm_type.tx_case.c u64 
    param          mm_type.tx_case.t i64 
    param          mm_type.tx_case.lv i64 
    local          mm_type.tx_case.amode i64 
    local          mm_type.tx_case.u i64 
    local          mm_type.tx_case.wt u64 
    local          mm_type.tx_case.w u64 
    procentry                 
    push           mm_type.tx_case.p u64 
    pushptr                   u8 
    push           116        i64 
    jumpne         #20467     i64 
    push           mm_type.tx_case.lv i64 
    jumpfalse      #20467     i64 
    setargs                   2 0
    push           0          u64 
    push           "&docase"  u64 
    callproc       &mm_support.gerror 
#20467: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_case.a u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_case.a u64 
    push           0          u64 
    jumpne         #20468     u64 
    push           26         i64 
    pop            mm_type.tx_case.amode i64 
    jump           #20469     
#20468: 
    push           mm_type.tx_case.a u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.tx_case.amode i64 
#20469: 
    push           &mm_decls.ttisinteger 
    push           mm_type.tx_case.amode i64 
    pushptroff                u8 1 0
    jumpfalse      #20470     i64 
    push           &mm_decls.ttsize 
    push           mm_type.tx_case.amode i64 
    pushptroff                i32 4 0
    push           8          i64 
    jumpge         #20470     i64 
    setargs                   3 0
    push           0          i64 
    push           4          i64 
    push           mm_type.tx_case.a u64 
    callproc       &mm_type.coerceunit 
    push           4          i64 
    pop            mm_type.tx_case.amode i64 
#20470: 
    push           0          i64 
    pop            mm_type.tx_case.u i64 
    push           mm_type.tx_case.b u64 
    pop            mm_type.tx_case.wt u64 
    jump           #20471     
#20472: 
    push           mm_type.tx_case.wt u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_type.tx_case.w u64 
    jump           #20473     
#20474: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_case.w u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_case.w u64 
    pushptr                   u8 
    push           20         i64 
    jumpne         #20475     i64 
    push           &mm_decls.ttisinteger 
    push           mm_type.tx_case.amode i64 
    pushptroff                u8 1 0
    jumptrue       #20476     i64 
    setargs                   2 0
    push           0          u64 
    push           "case: need int index" u64 
    callproc       &mm_support.txerror 
#20476: 
    jump           #20477     
#20475: 
    push           mm_type.tx_case.amode i64 
    push           26         i64 
    jumpne         #20478     i64 
    setargs                   1 0
    push           mm_type.tx_case.w u64 
    callfn         &mm_lib.isboolunit i64 
    jumptrue       #20479     i64 
    setargs                   2 0
    push           0          u64 
    push           "CASE/BOOL?" u64 
    callproc       &mm_support.txerror 
    setargs                   2 0
    push           18         i64 
    push           mm_type.tx_case.w u64 
    callproc       &mm_lib.insertunit 
#20479: 
    jump           #20480     
#20478: 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_case.amode i64 
    push           mm_type.tx_case.w u64 
    callproc       &mm_type.coerceunit 
#20480: 
#20477: 
    push           mm_type.tx_case.w u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_case.w u64 
#20473: 
    push           mm_type.tx_case.w u64 
    jumptrue       #20474     u64 
#20481: 
    setargs                   3 0
    push           mm_type.tx_case.lv i64 
    push           mm_type.tx_case.t i64 
    push           mm_type.tx_case.wt u64 
    push           24         
    pushptroff                u64 1 0
    callproc       &mm_type.tpass 
    push           mm_type.tx_case.t i64 
    push           0          i64 
    jumpeq         #20482     i64 
    push           mm_type.tx_case.u i64 
    jumpfalse      #20483     i64 
    setargs                   2 0
    push           mm_type.tx_case.wt u64 
    push           24         
    pushptroff                u64 1 0
    push           48         
    pushptroff                i32 1 0
    push           mm_type.tx_case.u i64 
    callfn         &mm_type.getdominantmode i64 
    pop            mm_type.tx_case.u i64 
    jump           #20484     
#20483: 
    push           mm_type.tx_case.wt u64 
    push           24         
    pushptroff                u64 1 0
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.tx_case.u i64 
#20484: 
#20482: 
    push           mm_type.tx_case.wt u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_case.wt u64 
#20471: 
    push           mm_type.tx_case.wt u64 
    jumptrue       #20472     u64 
#20485: 
    push           mm_type.tx_case.c u64 
    jumpfalse      #20486     u64 
    setargs                   3 0
    push           mm_type.tx_case.lv i64 
    push           mm_type.tx_case.t i64 
    push           mm_type.tx_case.c u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_case.t i64 
    push           26         i64 
    jumpne         #20487     i64 
    setargs                   2 0
    push           mm_type.tx_case.c u64 
    push           48         
    pushptroff                i32 1 0
    push           mm_type.tx_case.u i64 
    callfn         &mm_type.getdominantmode i64 
    pop            mm_type.tx_case.u i64 
#20487: 
    jump           #20488     
#20486: 
    push           mm_type.tx_case.t i64 
    push           0          i64 
    jumpeq         #20489     i64 
    setargs                   2 0
    push           0          u64 
    push           "case needs else" u64 
    callproc       &mm_support.txerror 
#20489: 
#20488: 
    push           mm_type.tx_case.t i64 
    push           0          i64 
    jumpeq         #20490     i64 
    push           mm_type.tx_case.u i64 
    push           mm_type.tx_case.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #20491     
#20490: 
    push           0          i64 
    push           mm_type.tx_case.p u64 
    push           48         
    popptroff                 i32 1 0
#20491: 
#20492: 
    retproc                   
End


Proc mm_type.tx_notl:
    param          mm_type.tx_notl.p u64 
    param          mm_type.tx_notl.a u64 
    procentry                 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_notl.a u64 
    callproc       &mm_type.tpass 
    push           4          i64 
    push           mm_type.tx_notl.p u64 
    push           48         
    popptroff                 i32 1 0
#20494: 
    retproc                   
End


Proc mm_type.tx_istruel:
    param          mm_type.tx_istruel.p u64 
    param          mm_type.tx_istruel.a u64 
    local          mm_type.tx_istruel.abase i64 
    procentry                 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_istruel.a u64 
    callproc       &mm_type.tpass 
    setargs                   1 0
    push           mm_type.tx_istruel.a u64 
    callfn         &mm_lib.isboolunit i64 
    jumpfalse      #20496     i64 
    setargs                   2 0
    push           mm_type.tx_istruel.a u64 
    push           mm_type.tx_istruel.p u64 
    callproc       &mm_lib.deleteunit 
    jump           #20497     
#20496: 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_istruel.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    pop            mm_type.tx_istruel.abase i64 
    push           mm_type.tx_istruel.abase i64 
    push           9          i64 
    jumpne         #20498     i64 
    push           4          i64 
    pop            mm_type.tx_istruel.abase i64 
#20498: 
    push           4          i64 
    push           mm_type.tx_istruel.p u64 
    push           48         
    popptroff                 i32 1 0
    setargs                   1 0
    push           mm_type.tx_istruel.abase i64 
    callfn         &mm_lib.getpclmode i64 
    push           mm_type.tx_istruel.p u64 
    push           61         
    popptroff                 u8 1 0
#20497: 
    retproc                   
End


Proc mm_type.tx_typepun:
    param          mm_type.tx_typepun.p u64 
    param          mm_type.tx_typepun.a u64 
    local          mm_type.tx_typepun.smode i64 
    procentry                 
    push           mm_type.tx_typepun.a u64 
    pushptr                   u8 
    push           19         i64 
    casejumpeq     #20500     i64 0
    popstack                  i64 
    jump           #20501     
#20500: 
    setargs                   2 0
    push           0          u64 
    push           "TYPEPUN/LIST" u64 
    callproc       &mm_support.txerror 
    jump           #20502     
#20501: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_typepun.a u64 
    callproc       &mm_type.tpass 
    setargs                   1 0
    push           mm_type.tx_typepun.a u64 
    callfn         &mm_lib.getmemmode i64 
    pop            mm_type.tx_typepun.smode i64 
    push           &mm_decls.ttsize 
    push           mm_type.tx_typepun.smode i64 
    pushptroff                i32 4 0
    push           &mm_decls.ttsize 
    push           mm_type.tx_typepun.p u64 
    push           52         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    jumpge         #20503     i64 
    setargs                   2 0
    push           0          u64 
    push           "Typepun: sizes must match" u64 
    callproc       &mm_support.txerror 
#20503: 
    setargs                   1 0
    push           mm_type.tx_typepun.p u64 
    push           52         
    pushptroff                i32 1 0
    callfn         &mm_lib.gettypebase i64 
    push           mm_type.tx_typepun.p u64 
    push           48         
    popptroff                 i32 1 0
#20502: 
#20504: 
    retproc                   
End


Proc mm_type.tx_bytesize:
    param          mm_type.tx_bytesize.p u64 
    param          mm_type.tx_bytesize.a u64 
    procentry                 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_bytesize.a u64 
    callproc       &mm_type.tpass 
    push           4          i64 
    push           mm_type.tx_bytesize.p u64 
    push           48         
    popptroff                 i32 1 0
#20506: 
    retproc                   
End


Proc mm_type.tx_exit:
    param          mm_type.tx_exit.p u64 
    param          mm_type.tx_exit.a u64 
    procentry                 
    push           mm_type.tx_exit.a u64 
    push           0          u64 
    jumpne         #20508     u64 
    jump           #20509     
#20508: 
    setargs                   3 0
    push           0          i64 
    push           4          i64 
    push           mm_type.tx_exit.a u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_exit.a u64 
    pushptr                   u8 
    push           1          i64 
    jumpeq         #20510     i64 
    setargs                   2 0
    push           0          u64 
    push           "exit/etc not const" u64 
    callproc       &mm_support.txerror 
#20510: 
    push           mm_type.tx_exit.a u64 
    push           16         
    pushptroff                i64 1 0
    push           mm_type.tx_exit.p u64 
    push           40         
    popptroff                 i32 1 0
    push           0          u64 
    push           mm_type.tx_exit.p u64 
    push           16         
    popptroff                 u64 1 0
    push           0          i64 
    push           mm_type.tx_exit.p u64 
    push           1          
    popptroff                 u8 1 0
#20509: 
    retproc                   
End


Proc mm_type.tx_goto:
    param          mm_type.tx_goto.p u64 
    param          mm_type.tx_goto.a u64 
    local          mm_type.tx_goto.m i64 
    procentry                 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_goto.a u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_goto.a u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.tx_goto.m i64 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_goto.m i64 
    pushptroff                i32 4 0
    push           9          i64 
    jumpne         #20512     i64 
    push           &mm_decls.ttbasetype 
    push           &mm_decls.tttarget 
    push           mm_type.tx_goto.m i64 
    pushptroff                i32 4 0
    pushptroff                i32 4 0
    push           28         i64 
    jumpeq         #20513     i64 
#20512: 
    setargs                   2 0
    push           0          u64 
    push           "goto: not label" u64 
    callproc       &mm_support.txerror 
#20513: 
#20514: 
    retproc                   
End


Proc mm_type.tx_switch:
    param          mm_type.tx_switch.p u64 
    param          mm_type.tx_switch.a u64 
    param          mm_type.tx_switch.b u64 
    param          mm_type.tx_switch.c u64 
    param          mm_type.tx_switch.t i64 
    param          mm_type.tx_switch.lv i64 
    local          mm_type.tx_switch.valueset block:2048 
    local          mm_type.tx_switch.wt u64 
    local          mm_type.tx_switch.w u64 
    local          mm_type.tx_switch.ax i64 
    local          mm_type.tx_switch.bx i64 
    local          mm_type.tx_switch.i i64 
    local          mm_type.tx_switch.u i64 
    procentry                 
    push           mm_type.tx_switch.p u64 
    pushptr                   u8 
    push           118        i64 
    jumpne         #20516     i64 
    push           mm_type.tx_switch.lv i64 
    jumpfalse      #20516     i64 
    setargs                   2 0
    push           0          u64 
    push           "&doswitch" u64 
    callproc       &mm_support.gerror 
#20516: 
    setargs                   3 0
    push           0          i64 
    push           4          i64 
    push           mm_type.tx_switch.a u64 
    callproc       &mm_type.tpass 
    setargs                   3 0
    push           2048       u64 
    push           0          i64 
    push           &mm_type.tx_switch.valueset 
    callproc       &memset    
    push           0          i64 
    pop            mm_type.tx_switch.u i64 
    push           mm_type.tx_switch.b u64 
    pop            mm_type.tx_switch.wt u64 
    jump           #20517     
#20518: 
    push           mm_type.tx_switch.wt u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_type.tx_switch.w u64 
    jump           #20519     
#20520: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_switch.w u64 
    callproc       &mm_type.tpass 
    setargs                   1 0
    push           mm_type.tx_switch.w u64 
    callfn         &mm_lib.isconstunit i64 
    jumptrue       #20521     i64 
    setargs                   2 0
    push           0          u64 
    push           "Switch not constant" u64 
    callproc       &mm_support.txerror 
#20521: 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_switch.w u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           8          i64 
    casejumpeq     #20522     i64 0
    popstack                  i64 
    jump           #20523     
#20522: 
    push           mm_type.tx_switch.w u64 
    push           16         
    pushptroff                u64 1 0
    push           16         
    pushptroff                i64 1 0
    pop            mm_type.tx_switch.ax i64 
    push           mm_type.tx_switch.w u64 
    push           24         
    pushptroff                u64 1 0
    push           16         
    pushptroff                i64 1 0
    pop            mm_type.tx_switch.bx i64 
!dorange::
#20524: 
#20525: 
    push           mm_type.tx_switch.ax i64 
    pop            mm_type.tx_switch.i i64 
    push           mm_type.tx_switch.i i64 
    push           mm_type.tx_switch.bx i64 
    jumpgt         #20526     i64 
#20527: 
    push           mm_type.tx_switch.i i64 
    push           0          i64 
    jumplt         #20528     i64 
    push           mm_type.tx_switch.i i64 
    push           2047       i64 
    jumple         #20529     i64 
#20528: 
    setargs                   2 0
    push           0          u64 
    push           "switch: value out of range" u64 
    callproc       &mm_support.txerror 
#20529: 
    push           &mm_type.tx_switch.valueset 
    push           mm_type.tx_switch.i i64 
    pushptroff                u8 1 0
    jumpfalse      #20530     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mm_type.tx_switch.i i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           0          u64 
    push           "Duplicate switch value" u64 
    callproc       &mm_support.txerror 
#20530: 
    push           1          i64 
    push           &mm_type.tx_switch.valueset 
    push           mm_type.tx_switch.i i64 
    popptroff                 u8 1 0
#20531: 
    forup          #20527     i64 1
    opnd           mm_type.tx_switch.i 
    opnd           mm_type.tx_switch.bx 
#20526: 
    jump           #20532     
#20523: 
    setargs                   3 0
    push           0          i64 
    push           4          i64 
    push           mm_type.tx_switch.w u64 
    callproc       &mm_type.coerceunit 
    setargs                   1 0
    push           mm_type.tx_switch.w u64 
    callproc       &mm_type.tevaluate 
    push           mm_type.tx_switch.w u64 
    pushptr                   u8 
    push           1          i64 
    jumpeq         #20533     i64 
    setargs                   2 0
    push           0          u64 
    push           "Switch value: not const int" u64 
    callproc       &mm_support.txerror 
#20533: 
    push           mm_type.tx_switch.w u64 
    push           16         
    pushptroff                i64 1 0
    store          mm_type.tx_switch.bx i64 
    pop            mm_type.tx_switch.ax i64 
    jump           #20524     
#20532: 
    push           mm_type.tx_switch.w u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_switch.w u64 
#20519: 
    push           mm_type.tx_switch.w u64 
    jumptrue       #20520     u64 
#20534: 
    setargs                   3 0
    push           mm_type.tx_switch.lv i64 
    push           mm_type.tx_switch.t i64 
    push           mm_type.tx_switch.wt u64 
    push           24         
    pushptroff                u64 1 0
    callproc       &mm_type.tpass 
    push           mm_type.tx_switch.t i64 
    push           26         i64 
    jumpne         #20535     i64 
    push           mm_type.tx_switch.u i64 
    jumpfalse      #20536     i64 
    setargs                   2 0
    push           mm_type.tx_switch.wt u64 
    push           24         
    pushptroff                u64 1 0
    push           48         
    pushptroff                i32 1 0
    push           mm_type.tx_switch.u i64 
    callfn         &mm_type.getdominantmode i64 
    pop            mm_type.tx_switch.u i64 
    jump           #20537     
#20536: 
    push           mm_type.tx_switch.wt u64 
    push           24         
    pushptroff                u64 1 0
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.tx_switch.u i64 
#20537: 
#20535: 
    push           mm_type.tx_switch.wt u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_switch.wt u64 
#20517: 
    push           mm_type.tx_switch.wt u64 
    jumptrue       #20518     u64 
#20538: 
    push           mm_type.tx_switch.c u64 
    jumpfalse      #20539     u64 
    setargs                   3 0
    push           mm_type.tx_switch.lv i64 
    push           mm_type.tx_switch.t i64 
    push           mm_type.tx_switch.c u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_switch.t i64 
    push           26         i64 
    jumpne         #20540     i64 
    setargs                   2 0
    push           mm_type.tx_switch.c u64 
    push           48         
    pushptroff                i32 1 0
    push           mm_type.tx_switch.u i64 
    callfn         &mm_type.getdominantmode i64 
    pop            mm_type.tx_switch.u i64 
#20540: 
    jump           #20541     
#20539: 
    push           mm_type.tx_switch.t i64 
    push           0          i64 
    jumpeq         #20542     i64 
    setargs                   2 0
    push           0          u64 
    push           "switch needs else" u64 
    callproc       &mm_support.txerror 
#20542: 
#20541: 
    push           mm_type.tx_switch.t i64 
    push           0          i64 
    jumpeq         #20543     i64 
    push           mm_type.tx_switch.b u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_type.tx_switch.w u64 
    jump           #20544     
#20545: 
    push           mm_type.tx_switch.t i64 
    push           26         i64 
    jumpne         #20546     i64 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_switch.u i64 
    push           mm_type.tx_switch.b u64 
    push           24         
    pushptroff                u64 1 0
    callproc       &mm_type.coerceunit 
#20546: 
    push           mm_type.tx_switch.b u64 
    push           24         
    pushptroff                u64 1 0
    push           48         
    pushptroff                i32 1 0
    push           mm_type.tx_switch.w u64 
    push           48         
    popptroff                 i32 1 0
    push           mm_type.tx_switch.w u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_switch.w u64 
#20544: 
    push           mm_type.tx_switch.w u64 
    jumptrue       #20545     u64 
#20547: 
    push           mm_type.tx_switch.t i64 
    push           26         i64 
    jumpne         #20548     i64 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_switch.u i64 
    push           mm_type.tx_switch.c u64 
    callproc       &mm_type.coerceunit 
    push           mm_type.tx_switch.u i64 
    push           mm_type.tx_switch.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #20549     
#20548: 
    push           mm_type.tx_switch.t i64 
    push           mm_type.tx_switch.p u64 
    push           48         
    popptroff                 i32 1 0
#20549: 
    jump           #20550     
#20543: 
    push           0          i64 
    push           mm_type.tx_switch.p u64 
    push           48         
    popptroff                 i32 1 0
#20550: 
#20551: 
    retproc                   
End


Proc mm_type.tx_addroffirst:
    param          mm_type.tx_addroffirst.p u64 
    param          mm_type.tx_addroffirst.a u64 
    param          mm_type.tx_addroffirst.t i64 
    local          mm_type.tx_addroffirst.m i64 
    procentry                 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_addroffirst.a u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_addroffirst.a u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.tx_addroffirst.m i64 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_addroffirst.m i64 
    pushptroff                i32 4 0
    push           11         i64 
    jumpeq         #20553     i64 
    setargs                   2 0
    push           0          u64 
    push           "&. ref[] expected" u64 
    callproc       &mm_support.txerror 
#20553: 
    setargs                   3 0
    push           0          i64 
    push           &mm_decls.tttarget 
    push           mm_type.tx_addroffirst.m i64 
    pushptroff                i32 4 0
    push           0          u64 
    callfn         &mm_lib.createrefmode i64 
    pop            mm_type.tx_addroffirst.m i64 
    push           mm_type.tx_addroffirst.a u64 
    pushptr                   u8 
    push           3          i64 
    jumpne         #20554     i64 
    push           1          i64 
    push           mm_type.tx_addroffirst.a u64 
    push           40         
    popptroff                 u8 1 0
#20554: 
    push           mm_type.tx_addroffirst.m i64 
    push           mm_type.tx_addroffirst.p u64 
    push           48         
    popptroff                 i32 1 0
#20555: 
    retproc                   
End


Proc mm_type.tx_return:
    param          mm_type.tx_return.p u64 
    param          mm_type.tx_return.a u64 
    param          mm_type.tx_return.t i64 
    local          mm_type.tx_return.m i64 
    local          mm_type.tx_return.nvalues i64 
    local          mm_type.tx_return.nret i64 
    local          mm_type.tx_return.i i64 
    local          mm_type.tx_return.pmult u64 
    local          mm_type.tx_return.q u64 
    procentry                 
    push           mm_decls.currproc u64 
    push           72         
    pushptroff                i32 1 0
    pop            mm_type.tx_return.m i64 
    push           mm_decls.currproc u64 
    push           116        
    pushptroff                u8 1 0
    pop            mm_type.tx_return.nret i64 
    push           &mm_decls.ttmult 
    push           mm_decls.currproc u64 
    push           72         
    pushptroff                i32 1 0
    pushptroff                u64 8 0
    pop            mm_type.tx_return.pmult u64 
    push           mm_type.tx_return.a u64 
    push           0          u64 
    jumpne         #20557     u64 
    push           mm_type.tx_return.nret i64 
    jumpfalse      #20558     i64 
    setargs                   2 0
    push           0          u64 
    push           "return value(s) missing" u64 
    callproc       &mm_support.txerror 
#20558: 
    jump           #20559     
    jump           #20560     
#20557: 
    push           mm_type.tx_return.nret i64 
    push           0          i64 
    jumpne         #20561     i64 
    setargs                   2 0
    push           0          u64 
    push           "Superfluous return value" u64 
    callproc       &mm_support.txerror 
#20561: 
#20560: 
    push           mm_type.tx_return.a u64 
    pushptr                   u8 
    push           19         i64 
    jumpne         #20562     i64 
    push           26         i64 
    push           mm_type.tx_return.a u64 
    push           0          
    popptroff                 u8 1 0
    push           mm_type.tx_return.a u64 
    push           40         
    pushptroff                u32 1 0
    push           mm_type.tx_return.nret i64 
    jumpeq         #20563     i64 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_return.m i64 
    pushptroff                i32 4 0
    push           13         i64 
    casejumpeq     #20564     i64 0
    push           11         i64 
    casejumpeq     #20564     i64 0
    popstack                  i64 
    jump           #20565     
#20564: 
    setargs                   2 0
    push           0          u64 
    push           "return constructor not supported" u64 
    callproc       &mm_support.txerror 
    jump           #20566     
#20565: 
    setargs                   2 0
    push           0          u64 
    push           "Wrong number of return values" u64 
    callproc       &mm_support.txerror 
#20566: 
#20563: 
    push           mm_type.tx_return.a u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_type.tx_return.q u64 
#20567: 
    push           1          i64 
    pop            mm_type.tx_return.i i64 
    push           mm_type.tx_return.nret i64 
    push           1          i64 
    jumplt         #20568     i64 
#20569: 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_return.pmult u64 
    push           mm_type.tx_return.i i64 
    pushptroff                i32 4 -4
    push           mm_type.tx_return.q u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_return.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_return.q u64 
#20570: 
    forup          #20569     i64 1
    opnd           mm_type.tx_return.i 
    opnd           mm_type.tx_return.nret 
#20568: 
    setargs                   2 0
    push           mm_type.tx_return.a u64 
    push           mm_type.tx_return.p u64 
    callproc       &mm_lib.deleteunit 
    push           mm_type.tx_return.t i64 
    push           0          i64 
    jumpne         #20571     i64 
    push           0          i64 
    push           mm_type.tx_return.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #20572     
#20571: 
    push           31         i64 
    push           mm_type.tx_return.p u64 
    push           48         
    popptroff                 i32 1 0
#20572: 
    jump           #20573     
#20562: 
    push           mm_type.tx_return.nret i64 
    push           1          i64 
    jumple         #20574     i64 
    setargs                   2 0
    push           0          u64 
    push           "RETERROR?" u64 
    callproc       &mm_support.txerror 
#20574: 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_return.m i64 
    push           mm_type.tx_return.a u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_return.t i64 
    push           0          i64 
    jumpne         #20575     i64 
    push           0          i64 
    push           mm_type.tx_return.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #20576     
#20575: 
    setargs                   2 0
    push           mm_type.tx_return.a u64 
    push           mm_type.tx_return.p u64 
    callproc       &mm_lib.deleteunit 
#20576: 
#20573: 
    push           &mm_decls.ttisshort 
    push           mm_type.tx_return.p u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    jumpfalse      #20577     i64 
    setargs                   2 0
    push           0          u64 
    push           "SHORT RET TYPE" u64 
    callproc       &mm_support.txerror 
#20577: 
#20559: 
    retproc                   
End


Proc mm_type.tx_dotindex:
    param          mm_type.tx_dotindex.p u64 
    param          mm_type.tx_dotindex.a u64 
    param          mm_type.tx_dotindex.b u64 
    param          mm_type.tx_dotindex.lv i64 
    local          mm_type.tx_dotindex.pmode i64 
    local          mm_type.tx_dotindex.i u64 
    local          mm_type.tx_dotindex.j u64 
    procentry                 
    setargs                   3 0
    push           mm_type.tx_dotindex.lv i64 
    push           26         i64 
    push           mm_type.tx_dotindex.a u64 
    callproc       &mm_type.tpass 
    push           2          i64 
    pop            mm_type.tx_dotindex.pmode i64 
    push           &mm_decls.ttisinteger 
    push           mm_type.tx_dotindex.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    jumptrue       #20579     i64 
    setargs                   2 0
    push           0          u64 
    push           "a.[i]: not int/str value" u64 
    callproc       &mm_support.txerror 
#20579: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_dotindex.b u64 
    callproc       &mm_type.tpass 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_dotindex.b u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           8          i64 
    casejumpeq     #20580     i64 0
    popstack                  i64 
    jump           #20581     
#20580: 
    push           mm_type.tx_dotindex.b u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_type.tx_dotindex.i u64 
    push           mm_type.tx_dotindex.b u64 
    push           24         
    pushptroff                u64 1 0
    pop            mm_type.tx_dotindex.j u64 
    push           mm_type.tx_dotindex.i u64 
    pushptr                   u8 
    push           mm_type.tx_dotindex.j u64 
    pushptr                   u8 
    jumpne         #20582     i64 
    push           mm_type.tx_dotindex.j u64 
    pushptr                   u8 
    push           1          i64 
    jumpne         #20582     i64 
    push           mm_type.tx_dotindex.i u64 
    push           16         
    pushptroff                i64 1 0
    push           mm_type.tx_dotindex.j u64 
    push           16         
    pushptroff                i64 1 0
    jumple         #20583     i64 
    push           mm_type.tx_dotindex.b u64 
    push           16         
    addrefoff                 u64 1 0
    push           mm_type.tx_dotindex.b u64 
    push           24         
    addrefoff                 u64 1 0
    swap                      u64 
#20583: 
#20582: 
    jump           #20584     
#20581: 
    setargs                   3 0
    push           0          i64 
    push           4          i64 
    push           mm_type.tx_dotindex.b u64 
    callproc       &mm_type.coerceunit 
#20584: 
    push           mm_type.tx_dotindex.pmode i64 
    push           mm_type.tx_dotindex.p u64 
    push           48         
    popptroff                 i32 1 0
#20585: 
    retproc                   
End


Proc mm_type.tx_slice:
    param          mm_type.tx_slice.p u64 
    param          mm_type.tx_slice.a u64 
    param          mm_type.tx_slice.b u64 
    procentry                 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_slice.a u64 
    callproc       &mm_type.tpass 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_slice.b u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_slice.a u64 
    push           48         
    pushptroff                i32 1 0
    push           10         i64 
    jumpne         #20587     i64 
    setargs                   4 0
    push           0          i64 
    push           1          i64 
    push           16         i64 
    push           mm_decls.currproc u64 
    callfn         &mm_lib.createslicemodek i64 
    push           mm_type.tx_slice.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #20588     
#20587: 
    setargs                   2 0
    push           1          i64 
    push           mm_type.tx_slice.a u64 
    callproc       &mm_type.deref 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_slice.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           11         i64 
    casejumpeq     #20589     i64 0
    push           12         i64 
    casejumpeq     #20590     i64 0
    popstack                  i64 
    jump           #20591     
#20589: 
    setargs                   4 0
    push           0          i64 
    push           1          i64 
    push           &mm_decls.tttarget 
    push           mm_type.tx_slice.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           mm_decls.currproc u64 
    callfn         &mm_lib.createslicemodek i64 
    push           mm_type.tx_slice.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #20592     
#20590: 
    push           mm_type.tx_slice.a u64 
    push           48         
    pushptroff                i32 1 0
    push           mm_type.tx_slice.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #20592     
#20591: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "STRMODE(A.MODE)=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    setargs                   2 0
    push           1          i64 
    push           mm_type.tx_slice.a u64 
    push           48         
    pushptroff                i32 1 0
    callfn         &mm_lib.strmode u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           0          u64 
    push           "a[i..j]: not array" u64 
    callproc       &mm_support.txerror 
#20592: 
#20588: 
#20593: 
    retproc                   
End


Proc mm_type.tx_assign:
    param          mm_type.tx_assign.p u64 
    param          mm_type.tx_assign.a u64 
    param          mm_type.tx_assign.b u64 
    param          mm_type.tx_assign.t i64 
    local          mm_type.tx_assign.m i64 
    local          mm_type.tx_assign.mm i64 
    local          mm_type.tx_assign.d u64 
    procentry                 
    push           mm_type.tx_assign.a u64 
    pushptr                   u8 
    push           19         i64 
    casejumpeq     #20595     i64 0
    push           53         i64 
    casejumpeq     #20596     i64 0
    push           54         i64 
    casejumpeq     #20596     i64 0
    popstack                  i64 
    jump           #20597     
#20595: 
    setargs                   2 0
    push           mm_type.tx_assign.b u64 
    push           mm_type.tx_assign.a u64 
    callproc       &mm_type.tx_multassign 
    jump           #20598     
#20596: 
    setargs                   4 0
    push           1          i64 
    push           mm_type.tx_assign.a u64 
    push           24         
    pushptroff                u64 1 0
    push           mm_type.tx_assign.a u64 
    push           16         
    pushptroff                u64 1 0
    push           mm_type.tx_assign.a u64 
    callproc       &mm_type.tx_dotindex 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_assign.a u64 
    push           48         
    pushptroff                i32 1 0
    push           mm_type.tx_assign.b u64 
    callproc       &mm_type.tpass 
    push           4          i64 
    push           mm_type.tx_assign.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #20598     
#20597: 
    push           mm_type.tx_assign.a u64 
    pushptr                   u8 
    push           3          i64 
    jumpne         #20599     i64 
    push           mm_type.tx_assign.a u64 
    push           16         
    pushptroff                u64 1 0
    push           92         
    pushptroff                u16 1 0
    push           6          i64 
    dotindex                  i64 
    jumpfalse      #20599     u64 
    push           mm_type.tx_assign.p u64 
    push           57         
    pushptroff                u8 1 0
    jumpfalse      #20599     i64 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_assign.a u64 
    callproc       &mm_type.tpass 
    jump           #20600     
#20599: 
    setargs                   3 0
    push           1          i64 
    push           26         i64 
    push           mm_type.tx_assign.a u64 
    callproc       &mm_type.tpass 
#20600: 
    push           mm_type.tx_assign.a u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.tx_assign.m i64 
    push           mm_type.tx_assign.t i64 
    push           0          i64 
    setne                     i64 
    push           mm_type.tx_assign.a u64 
    push           59         
    popptroff                 u8 1 0
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_assign.m i64 
    pushptroff                i32 4 0
    push           12         i64 
    jumpne         #20601     i64 
    push           mm_type.tx_assign.b u64 
    pushptr                   u8 
    push           19         i64 
    jumpne         #20601     i64 
    setargs                   4 0
    push           0          i64 
    push           mm_type.tx_assign.m i64 
    push           mm_type.tx_assign.b u64 
    push           16         
    pushptroff                u64 1 0
    push           mm_type.tx_assign.b u64 
    callproc       &mm_type.tx_makelist 
    jump           #20602     
#20601: 
    push           &mm_decls.ttisshort 
    push           mm_type.tx_assign.m i64 
    pushptroff                u8 1 0
    jumpfalse      #20603     i64 
    push           mm_type.tx_assign.t i64 
    push           0          i64 
    jumpeq         #20603     i64 
    push           mm_type.tx_assign.m i64 
    push           mm_type.tx_assign.p u64 
    push           52         
    popptroff                 i32 1 0
    setargs                   1 0
    push           mm_type.tx_assign.m i64 
    callfn         &mm_lib.gettypebase i64 
    push           mm_type.tx_assign.p u64 
    push           48         
    popptroff                 i32 1 0
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_assign.p u64 
    push           48         
    pushptroff                i32 1 0
    push           mm_type.tx_assign.b u64 
    callproc       &mm_type.tpass 
    jump           #20602     
#20603: 
    push           mm_type.tx_assign.b u64 
    push           60         
    pushptroff                u8 1 0
    push           106        i64 
    setjumpeq      #20604     i64 
    push           107        i64 
    setjumpne      #20605     i64 
#20604: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_assign.b u64 
    callproc       &mm_type.tpass 
    jump           #20606     
#20605: 
    push           mm_type.tx_assign.b u64 
    pushptr                   u8 
    push           130        i64 
    jumpne         #20607     i64 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_assign.m i64 
    push           mm_type.tx_assign.b u64 
    callproc       &mm_type.tpass 
    jump           #20606     
#20607: 
    push           mm_type.tx_assign.m i64 
    pop            mm_type.tx_assign.mm i64 
    push           &mm_decls.ttisshort 
    push           mm_type.tx_assign.m i64 
    pushptroff                u8 1 0
    jumpfalse      #20608     i64 
    setargs                   1 0
    push           mm_type.tx_assign.m i64 
    callfn         &mm_lib.gettypebase i64 
    pop            mm_type.tx_assign.mm i64 
#20608: 
    push           mm_type.tx_assign.b u64 
    pushptr                   u8 
    push           63         i64 
    casejumpeq     #20609     i64 0
    push           19         i64 
    casejumpeq     #20610     i64 0
    popstack                  i64 
    jump           #20611     
#20609: 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_assign.mm i64 
    push           mm_type.tx_assign.b u64 
    callproc       &mm_type.tpass 
    jump           #20612     
#20610: 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_assign.m i64 
    push           mm_type.tx_assign.b u64 
    callproc       &mm_type.tpass 
    jump           #20612     
#20611: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_assign.b u64 
    callproc       &mm_type.tpass 
#20612: 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_assign.b u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           31         i64 
    jumpne         #20613     i64 
    setargs                   1 0
    push           mm_type.tx_assign.b u64 
    callfn         &mm_lib.getprocretmodes u64 
    pop            mm_type.tx_assign.d u64 
    setargs                   3 0
    push           0          i64 
    push           &mm_decls.ttmult 
    push           mm_type.tx_assign.d u64 
    push           72         
    pushptroff                i32 1 0
    pushptroff                u64 8 0
    push           1          i64 
    pushptroff                i32 4 -4
    push           mm_type.tx_assign.a u64 
    callproc       &mm_type.coerceunit 
    push           mm_type.tx_assign.a u64 
    push           48         
    pushptroff                i32 1 0
    push           mm_type.tx_assign.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #20614     
#20613: 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_assign.mm i64 
    push           mm_type.tx_assign.b u64 
    callproc       &mm_type.coerceunit 
    push           mm_type.tx_assign.mm i64 
    push           mm_type.tx_assign.p u64 
    push           48         
    popptroff                 i32 1 0
#20614: 
#20606: 
#20602: 
#20598: 
#20615: 
    retproc                   
End


Proc mm_type.tx_multassign:
    param          mm_type.tx_multassign.a u64 
    param          mm_type.tx_multassign.b u64 
    local          mm_type.tx_multassign.p u64 
    local          mm_type.tx_multassign.q u64 
    local          mm_type.tx_multassign.lhs u64 
    local          mm_type.tx_multassign.rhs u64 
    local          mm_type.tx_multassign.nretmodes i64 
    local          mm_type.tx_multassign.i i64 
    local          mm_type.tx_multassign.pmult u64 
    local          mm_type.tx_multassign.d u64 
    procentry                 
    push           0          i64 
    pop            mm_type.tx_multassign.nretmodes i64 
    push           mm_type.tx_multassign.b u64 
    pushptr                   u8 
    push           19         i64 
    jumpeq         #20617     i64 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_multassign.b u64 
    callproc       &mm_type.tpass 
    setargs                   1 0
    push           mm_type.tx_multassign.b u64 
    callfn         &mm_lib.getprocretmodes u64 
    pop            mm_type.tx_multassign.d u64 
    push           mm_type.tx_multassign.d u64 
    push           116        
    pushptroff                u8 1 0
    pop            mm_type.tx_multassign.nretmodes i64 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_multassign.d u64 
    push           72         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           31         i64 
    jumpeq         #20618     i64 
    setargs                   2 0
    push           0          u64 
    push           "Not a tuple" u64 
    callproc       &mm_support.txerror 
#20618: 
    push           mm_type.tx_multassign.a u64 
    push           40         
    pushptroff                u32 1 0
    push           mm_type.tx_multassign.nretmodes i64 
    jumple         #20619     i64 
    setargs                   2 0
    push           0          u64 
    push           "mult ass/mult returns don't agree in number" u64 
    callproc       &mm_support.txerror 
#20619: 
    push           mm_type.tx_multassign.nretmodes i64 
    push           1          i64 
    jumpgt         #20620     i64 
    setargs                   2 0
    push           0          u64 
    push           "mult ass rhs needs fn yielding 2+ values" u64 
    callproc       &mm_support.txerror 
#20620: 
    push           mm_type.tx_multassign.a u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_type.tx_multassign.p u64 
    push           &mm_decls.ttmult 
    push           mm_type.tx_multassign.d u64 
    push           72         
    pushptroff                i32 1 0
    pushptroff                u64 8 0
    pop            mm_type.tx_multassign.pmult u64 
    push           1          i64 
    pop            mm_type.tx_multassign.i i64 
    jump           #20621     
#20622: 
    setargs                   3 0
    push           1          i64 
    push           26         i64 
    push           mm_type.tx_multassign.p u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_multassign.p u64 
    push           48         
    pushptroff                i32 1 0
    push           mm_type.tx_multassign.pmult u64 
    push           &mm_type.tx_multassign.i 
    loadincr                  i64 1
    pushptroff                i32 4 -4
    jumpeq         #20623     i64 
    setargs                   2 0
    push           0          u64 
    push           "mult ass/mult fn needs exact type match" u64 
    callproc       &mm_support.txerror 
#20623: 
    push           mm_type.tx_multassign.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_multassign.p u64 
#20621: 
    push           mm_type.tx_multassign.p u64 
    jumptrue       #20622     u64 
#20624: 
    jump           #20625     
#20617: 
    push           mm_type.tx_multassign.a u64 
    push           40         
    pushptroff                u32 1 0
    push           mm_type.tx_multassign.b u64 
    push           40         
    pushptroff                u32 1 0
    jumpeq         #20626     i64 
    setargs                   2 0
    push           0          u64 
    push           "Mult assign: count mismatch" u64 
    callproc       &mm_support.txerror 
#20626: 
    push           mm_type.tx_multassign.a u64 
    push           40         
    pushptroff                u32 1 0
    push           0          i64 
    jumpne         #20627     i64 
    setargs                   2 0
    push           0          u64 
    push           "Invalid assignment" u64 
    callproc       &mm_support.txerror 
#20627: 
    push           mm_type.tx_multassign.b u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_type.tx_multassign.rhs u64 
    push           mm_type.tx_multassign.a u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_type.tx_multassign.lhs u64 
    push           mm_type.tx_multassign.lhs u64 
    pop            mm_type.tx_multassign.p u64 
    jump           #20628     
#20629: 
    setargs                   3 0
    push           1          i64 
    push           26         i64 
    push           mm_type.tx_multassign.p u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_multassign.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_multassign.p u64 
#20628: 
    push           mm_type.tx_multassign.p u64 
    jumptrue       #20629     u64 
#20630: 
    push           mm_type.tx_multassign.lhs u64 
    pop            mm_type.tx_multassign.p u64 
    push           mm_type.tx_multassign.rhs u64 
    pop            mm_type.tx_multassign.q u64 
    jump           #20631     
#20632: 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_multassign.p u64 
    push           48         
    pushptroff                i32 1 0
    push           mm_type.tx_multassign.q u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_multassign.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_multassign.p u64 
    push           mm_type.tx_multassign.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_multassign.q u64 
#20631: 
    push           mm_type.tx_multassign.q u64 
    jumptrue       #20632     u64 
#20633: 
#20625: 
    retproc                   
End


Proc mm_type.tx_exprlist:
    param          mm_type.tx_exprlist.p u64 
    param          mm_type.tx_exprlist.a u64 
    param          mm_type.tx_exprlist.t i64 
    local          mm_type.tx_exprlist.q u64 
    procentry                 
    push           mm_type.tx_exprlist.a u64 
    pop            mm_type.tx_exprlist.q u64 
    jump           #20635     
#20636: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_exprlist.q u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_exprlist.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_exprlist.q u64 
#20635: 
    push           mm_type.tx_exprlist.q u64 
    jumpfalse      #20637     u64 
    push           mm_type.tx_exprlist.q u64 
    push           8          
    pushptroff                u64 1 0
    jumptrue       #20636     u64 
#20637: 
#20638: 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_exprlist.t i64 
    push           mm_type.tx_exprlist.q u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_exprlist.q u64 
    push           48         
    pushptroff                i32 1 0
    push           mm_type.tx_exprlist.p u64 
    push           48         
    popptroff                 i32 1 0
#20639: 
    retproc                   
End


Proc mm_type.twiden:
    param          mm_type.twiden.p u64 
    param          mm_type.twiden.lv i64 
    local          mm_type.twiden.m i64 
    local          mm_type.twiden.u i64 
    local          mm_type.twiden.mbase i64 
    procentry                 
    push           &mm_decls.ttbasetype 
    push           mm_type.twiden.p u64 
    push           48         
    pushptroff                i32 1 0
    store          mm_type.twiden.m i64 
    pushptroff                i32 4 0
    pop            mm_type.twiden.mbase i64 
    push           mm_type.twiden.mbase i64 
    push           0          i64 
    jumpne         #20641     i64 
    jump           #20642     
#20641: 
    push           mm_type.twiden.lv i64 
    jumpfalse      #20643     i64 
    jump           #20642     
#20643: 
    push           &mm_decls.ttisshort 
    push           mm_type.twiden.mbase i64 
    pushptroff                u8 1 0
    jumptrue       #20644     i64 
    jump           #20642     
#20644: 
    push           mm_type.twiden.p u64 
    pushptr                   u8 
    push           3          i64 
    casejumpeq     #20645     i64 0
    push           57         i64 
    casejumpeq     #20645     i64 0
    push           48         i64 
    casejumpeq     #20645     i64 0
    push           51         i64 
    casejumpeq     #20645     i64 0
    push           96         i64 
    casejumpeq     #20646     i64 0
    push           31         i64 
    casejumpeq     #20646     i64 0
    popstack                  i64 
    jump           #20647     
#20645: 
    push           mm_type.twiden.m i64 
    push           mm_type.twiden.p u64 
    push           52         
    popptroff                 i32 1 0
    setargs                   1 0
    push           mm_type.twiden.m i64 
    callfn         &mm_lib.gettypebase i64 
    push           mm_type.twiden.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #20648     
#20646: 
    push           mm_type.twiden.m i64 
    push           mm_type.twiden.p u64 
    push           52         
    popptroff                 i32 1 0
    setargs                   1 0
    push           mm_type.twiden.m i64 
    callfn         &mm_lib.gettypebase i64 
    push           mm_type.twiden.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #20648     
#20647: 
    setargs                   4 0
    push           0          u64 
    push           "*"        u64 
    push           0          i64 
    push           mm_type.twiden.p u64 
    callproc       &mm_diags.printunit 
    setargs                   3 0
    push           0          u64 
    push           &mm_tables.jtagnames 
    push           mm_type.twiden.p u64 
    pushptr                   u8 
    pushptroff                u64 8 0
    push           "widen? #" u64 
    callproc       &mm_support.txerror_s 
#20648: 
#20642: 
    retproc                   
End


Proc mm_type.removeaddrof:
    param          mm_type.removeaddrof.p u64 
    procentry                 
    push           mm_type.removeaddrof.p u64 
    push           0          u64 
    jumpne         #20650     u64 
    jump           #20651     
#20650: 
    push           mm_type.removeaddrof.p u64 
    pushptr                   u8 
    push           59         i64 
    casejumpeq     #20652     i64 0
    push           100        i64 
    casejumpeq     #20653     i64 0
    popstack                  i64 
    jump           #20654     
#20652: 
    setargs                   2 0
    push           mm_type.removeaddrof.p u64 
    push           16         
    pushptroff                u64 1 0
    push           mm_type.removeaddrof.p u64 
    callproc       &mm_lib.deleteunit 
    jump           #20655     
#20653: 
    setargs                   1 0
    push           mm_type.removeaddrof.p u64 
    push           24         
    pushptroff                u64 1 0
    callproc       &mm_type.removeaddrof 
    setargs                   1 0
    push           mm_type.removeaddrof.p u64 
    push           32         
    pushptroff                u64 1 0
    callproc       &mm_type.removeaddrof 
    jump           #20655     
#20654: 
    setargs                   2 0
    push           0          u64 
    push           "dot/flex: complex record expr, can't remove &" u64 
    callproc       &mm_support.txerror 
#20655: 
#20651: 
    retproc                   
End


Proc mm_type.tstringslice:
    param          mm_type.tstringslice.p u64 
    param          mm_type.tstringslice.slicemode i64 
    local          mm_type.tstringslice.a u64 
    local          mm_type.tstringslice.b u64 
    local          mm_type.tstringslice.prange u64 
    local          mm_type.tstringslice.length i64 
    procentry                 
    push           &mm_decls.tttarget 
    push           mm_type.tstringslice.slicemode i64 
    pushptroff                i32 4 0
    push           16         i64 
    jumpeq         #20657     i64 
    setargs                   2 0
    push           0          u64 
    push           "Not char slice" u64 
    callproc       &mm_support.txerror 
#20657: 
    push           mm_type.tstringslice.p u64 
    pop            mm_type.tstringslice.a u64 
    setargs                   2 0
    push           50         i64 
    push           mm_type.tstringslice.p u64 
    callproc       &mm_lib.insertunit 
    push           mm_type.tstringslice.p u64 
    push           16         
    pushptroff                u64 1 0
    pushptr                   u8 
    push           1          i64 
    jumpne         #20658     i64 
    jump           #20659     
#20658: 
    setargs                   2 0
    push           0          i64 
    push           mm_type.tstringslice.p u64 
    push           16         
    pushptroff                u64 1 0
    callfn         &mm_lib.duplunit u64 
    pop            mm_type.tstringslice.b u64 
    setargs                   2 0
    push           37         i64 
    push           mm_type.tstringslice.b u64 
    callproc       &mm_lib.insertunit 
    setargs                   3 0
    push           mm_type.tstringslice.b u64 
    setargs                   2 0
    push           4          i64 
    push           1          u64 
    callfn         &mm_lib.createconstunit u64 
    push           20         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_type.tstringslice.prange u64 
    push           8          i64 
    push           mm_type.tstringslice.prange u64 
    push           48         
    popptroff                 i32 1 0
    push           mm_type.tstringslice.prange u64 
    push           mm_type.tstringslice.p u64 
    push           24         
    popptroff                 u64 1 0
    push           1          i64 
    push           mm_type.tstringslice.p u64 
    push           2          
    popptroff                 u8 1 0
#20659: 
    push           mm_type.tstringslice.slicemode i64 
    push           mm_type.tstringslice.p u64 
    push           48         
    popptroff                 i32 1 0
#20660: 
    retproc                   
End


Proc mm_type.tx_bitfield:
    param          mm_type.tx_bitfield.p u64 
    param          mm_type.tx_bitfield.a u64 
    param          mm_type.tx_bitfield.lv i64 
    local          mm_type.tx_bitfield.i i64 
    local          mm_type.tx_bitfield.j i64 
    local          mm_type.tx_bitfield.bitsize i64 
    local          mm_type.tx_bitfield.topbit i64 
    local          mm_type.tx_bitfield.r u64 
    procentry                 
    setargs                   3 0
    push           mm_type.tx_bitfield.lv i64 
    push           26         i64 
    push           mm_type.tx_bitfield.a u64 
    callproc       &mm_type.tpass 
    push           &mm_decls.ttisinteger 
    push           mm_type.tx_bitfield.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    jumptrue       #20662     i64 
    push           &mm_decls.ttisref 
    push           mm_type.tx_bitfield.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    jumptrue       #20662     i64 
    setargs                   2 0
    push           0          u64 
    push           "Int/ref needed" u64 
    callproc       &mm_support.txerror 
#20662: 
    push           &mm_decls.ttsize 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_bitfield.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    pushptroff                i32 4 0
    push           8          i64 
    mul                       i64 
    pop            mm_type.tx_bitfield.bitsize i64 
    push           mm_type.tx_bitfield.bitsize i64 
    push           1          i64 
    sub                       i64 
    pop            mm_type.tx_bitfield.topbit i64 
    push           mm_type.tx_bitfield.p u64 
    push           40         
    pushptroff                i16 1 0
    push           2          i64 
    casejumpeq     #20663     i64 0
    push           1          i64 
    casejumpeq     #20664     i64 0
    push           4          i64 
    casejumpeq     #20665     i64 0
    push           7          i64 
    casejumpeq     #20666     i64 0
    push           8          i64 
    casejumpeq     #20666     i64 0
    push           3          i64 
    casejumpeq     #20667     i64 0
    push           6          i64 
    casejumpeq     #20668     i64 0
    push           5          i64 
    casejumpeq     #20669     i64 0
    popstack                  i64 
    jump           #20670     
#20663: 
    push           0          i64 
    pop            mm_type.tx_bitfield.i i64 
    push           7          i64 
    pop            mm_type.tx_bitfield.j i64 
    jump           #20671     
#20664: 
    push           mm_type.tx_bitfield.topbit i64 
    pop            mm_type.tx_bitfield.j i64 
    push           mm_type.tx_bitfield.topbit i64 
    push           7          i64 
    sub                       i64 
    pop            mm_type.tx_bitfield.i i64 
    jump           #20671     
#20665: 
    push           0          i64 
    store          mm_type.tx_bitfield.j i64 
    pop            mm_type.tx_bitfield.i i64 
    jump           #20671     
#20666: 
    push           mm_type.tx_bitfield.lv i64 
    jumpfalse      #20672     i64 
    setargs                   2 0
    push           0          u64 
    push           "Can't assign" u64 
    callproc       &mm_support.txerror 
#20672: 
    push           0          i64 
    store          mm_type.tx_bitfield.j i64 
    pop            mm_type.tx_bitfield.i i64 
    jump           #20671     
#20667: 
    push           mm_type.tx_bitfield.topbit i64 
    store          mm_type.tx_bitfield.j i64 
    pop            mm_type.tx_bitfield.i i64 
    jump           #20671     
#20668: 
    push           0          i64 
    pop            mm_type.tx_bitfield.i i64 
    push           mm_type.tx_bitfield.bitsize i64 
    push           2          i64 
    idiv                      i64 
    push           1          i64 
    sub                       i64 
    pop            mm_type.tx_bitfield.j i64 
    jump           #20671     
#20669: 
    push           mm_type.tx_bitfield.bitsize i64 
    push           2          i64 
    idiv                      i64 
    pop            mm_type.tx_bitfield.i i64 
    push           mm_type.tx_bitfield.topbit i64 
    pop            mm_type.tx_bitfield.j i64 
    jump           #20671     
#20670: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mm_type.tx_bitfield.p u64 
    push           40         
    pushptroff                i16 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           0          u64 
    push           "BITFIELD" u64 
    callproc       &mm_support.txerror 
#20671: 
    push           mm_type.tx_bitfield.i i64 
    push           mm_type.tx_bitfield.j i64 
    jumpne         #20673     i64 
    push           53         i64 
    push           mm_type.tx_bitfield.p u64 
    push           0          
    popptroff                 u8 1 0
    setargs                   2 0
    push           4          i64 
    push           mm_type.tx_bitfield.i u64 
    callfn         &mm_lib.createconstunit u64 
    push           mm_type.tx_bitfield.p u64 
    push           24         
    popptroff                 u64 1 0
    push           1          i64 
    push           mm_type.tx_bitfield.p u64 
    push           2          
    popptroff                 u8 1 0
    push           1          i64 
    push           mm_type.tx_bitfield.p u64 
    push           59         
    popptroff                 u8 1 0
    push           1          i64 
    push           mm_type.tx_bitfield.p u64 
    push           24         
    pushptroff                u64 1 0
    push           59         
    popptroff                 u8 1 0
    push           mm_type.tx_bitfield.p u64 
    push           40         
    pushptroff                i16 1 0
    push           8          i64 
    jumpne         #20674     i64 
    push           2          i64 
    push           mm_type.tx_bitfield.p u64 
    push           48         
    popptroff                 i32 1 0
    setargs                   1 0
    push           mm_type.tx_bitfield.p u64 
    callproc       &mm_type.addnotl 
#20674: 
    jump           #20675     
#20673: 
    setargs                   3 0
    setargs                   2 0
    push           4          i64 
    push           mm_type.tx_bitfield.j u64 
    callfn         &mm_lib.createconstunit u64 
    setargs                   2 0
    push           4          i64 
    push           mm_type.tx_bitfield.i u64 
    callfn         &mm_lib.createconstunit u64 
    push           20         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_type.tx_bitfield.r u64 
    push           1          i64 
    push           mm_type.tx_bitfield.r u64 
    push           16         
    pushptroff                u64 1 0
    push           59         
    popptroff                 u8 1 0
    push           1          i64 
    push           mm_type.tx_bitfield.r u64 
    push           24         
    pushptroff                u64 1 0
    push           59         
    popptroff                 u8 1 0
    push           8          i64 
    push           mm_type.tx_bitfield.r u64 
    push           48         
    popptroff                 i32 1 0
    push           54         i64 
    push           mm_type.tx_bitfield.p u64 
    push           0          
    popptroff                 u8 1 0
    push           1          i64 
    push           mm_type.tx_bitfield.p u64 
    push           2          
    popptroff                 u8 1 0
    push           mm_type.tx_bitfield.r u64 
    push           mm_type.tx_bitfield.p u64 
    push           24         
    popptroff                 u64 1 0
#20675: 
    push           2          i64 
    push           mm_type.tx_bitfield.p u64 
    push           48         
    popptroff                 i32 1 0
#20676: 
    retproc                   
End


Proc mm_type.deref:
    param          mm_type.deref.a u64 
    param          mm_type.deref.needres i64 
    local          mm_type.deref.abasemode i64 
    local          mm_type.deref.tmode i64 
    procentry                 
    push           &mm_decls.ttbasetype 
    push           mm_type.deref.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    pop            mm_type.deref.abasemode i64 
    jump           #20678     
#20679: 
    push           &mm_decls.tttarget 
    push           mm_type.deref.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    pop            mm_type.deref.tmode i64 
    setargs                   2 0
    push           57         i64 
    push           mm_type.deref.a u64 
    callproc       &mm_lib.insertunit 
    push           mm_type.deref.tmode i64 
    push           mm_type.deref.a u64 
    push           48         
    popptroff                 i32 1 0
    push           &mm_decls.ttbasetype 
    push           mm_type.deref.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    pop            mm_type.deref.abasemode i64 
#20678: 
    push           mm_type.deref.abasemode i64 
    push           9          i64 
    jumpeq         #20679     i64 
#20680: 
#20681: 
    retproc                   
End


Proc mm_type.tmethodcall:
    param          mm_type.tmethodcall.p u64 
    param          mm_type.tmethodcall.pdot u64 
    param          mm_type.tmethodcall.pargs u64 
    local          mm_type.tmethodcall.mrec i64 
    local          mm_type.tmethodcall.prec u64 
    local          mm_type.tmethodcall.pfield u64 
    local          mm_type.tmethodcall.pfunc u64 
    local          mm_type.tmethodcall.d u64 
    local          mm_type.tmethodcall.e u64 
    procentry                 
    push           mm_type.tmethodcall.pdot u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_type.tmethodcall.prec u64 
    push           mm_type.tmethodcall.pdot u64 
    push           24         
    pushptroff                u64 1 0
    pop            mm_type.tmethodcall.pfield u64 
    push           mm_type.tmethodcall.prec u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.tmethodcall.mrec i64 
    push           mm_type.tmethodcall.pfield u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_type.tmethodcall.d u64 
    setargs                   2 0
    push           mm_type.tmethodcall.mrec i64 
    push           mm_type.tmethodcall.d u64 
    callfn         &mm_type.resolvefield u64 
    pop            mm_type.tmethodcall.e u64 
    push           mm_type.tmethodcall.e u64 
    push           0          u64 
    jumpne         #20683     u64 
    setargs                   3 0
    push           0          u64 
    push           mm_type.tmethodcall.d u64 
    pushptr                   u64 
    push           "Can't resolve method:" u64 
    callproc       &mm_support.txerror_s 
#20683: 
    setargs                   1 0
    push           mm_type.tmethodcall.e u64 
    callfn         &mm_lib.createname u64 
    pop            mm_type.tmethodcall.pfunc u64 
    push           mm_type.tmethodcall.e u64 
    push           72         
    pushptroff                i32 1 0
    push           mm_type.tmethodcall.pfunc u64 
    push           48         
    popptroff                 i32 1 0
    push           mm_type.tmethodcall.pargs u64 
    push           mm_type.tmethodcall.prec u64 
    push           8          
    popptroff                 u64 1 0
    push           mm_type.tmethodcall.pfunc u64 
    push           mm_type.tmethodcall.p u64 
    push           16         
    popptroff                 u64 1 0
    push           mm_type.tmethodcall.prec u64 
    push           mm_type.tmethodcall.p u64 
    push           24         
    popptroff                 u64 1 0
#20684: 
    retproc                   
End


Proc mm_type.softconvert: i64
    param          mm_type.softconvert.s i64 
    param          mm_type.softconvert.t i64 
    param          mm_type.softconvert.hard i64 
    local          mm_type.softconvert.sbase i64 
    local          mm_type.softconvert.tbase i64 
    procentry                 
    push           mm_type.softconvert.s i64 
    push           mm_type.softconvert.t i64 
    jumpne         #20686     i64 
    push           182        i64 
    setret                    i64 
    jump           #20687     
#20686: 
    push           &mm_decls.ttbasetype 
    push           mm_type.softconvert.s i64 
    pushptroff                i32 4 0
    pop            mm_type.softconvert.sbase i64 
    push           &mm_decls.ttbasetype 
    push           mm_type.softconvert.t i64 
    pushptroff                i32 4 0
    pop            mm_type.softconvert.tbase i64 
    push           mm_type.softconvert.sbase i64 
    push           7          i64 
    jumpgt         #20688     i64 
    push           mm_type.softconvert.tbase i64 
    push           7          i64 
    jumpgt         #20688     i64 
    push           &mm_tables.softconvtable 
    push           mm_type.softconvert.sbase i64 
    addrefoff                 block:56 56 -56
    push           mm_type.softconvert.tbase i64 
    pushptroff                i64 8 -8
    setret                    i64 
    jump           #20687     
#20688: 
    push           mm_type.softconvert.sbase i64 
    push           mm_type.softconvert.tbase i64 
    jumpne         #20689     i64 
    push           mm_type.softconvert.tbase i64 
    push           9          i64 
    jumpne         #20689     i64 
    push           mm_type.softconvert.s i64 
    push           9          i64 
    jumpeq         #20690     i64 
    push           mm_type.softconvert.t i64 
    push           9          i64 
    jumpne         #20691     i64 
#20690: 
    push           182        i64 
    setret                    i64 
    jump           #20687     
#20691: 
    startmult                 
    setargs                   2 0
    push           mm_type.softconvert.t i64 
    push           mm_type.softconvert.s i64 
    callfn         &mm_type.comparemodes i64 
    jumpfalse      #20692     i64 
    push           182        i64 
    resetmult                 
    jump           #20693     
#20692: 
    push           212        i64 
    endmult                   
#20693: 
    setret                    i64 
    jump           #20687     
#20689: 
    push           mm_type.softconvert.sbase i64 
    push           11         i64 
    jumpne         #20694     i64 
    push           mm_type.softconvert.t i64 
    push           10         i64 
    jumpne         #20694     i64 
    push           &mm_decls.tttarget 
    push           mm_type.softconvert.s i64 
    pushptroff                i32 4 0
    push           16         i64 
    jumpne         #20694     i64 
    push           216        i64 
    setret                    i64 
    jump           #20687     
#20694: 
    push           mm_type.softconvert.hard i64 
    jumptrue       #20695     i64 
    push           mm_type.softconvert.sbase i64 
    push           7          i64 
    jumpgt         #20695     i64 
    push           &mm_decls.ttisshort 
    push           mm_type.softconvert.tbase i64 
    pushptroff                u8 1 0
    jumpfalse      #20695     i64 
    push           215        i64 
    setret                    i64 
    jump           #20687     
#20695: 
    push           mm_type.softconvert.sbase i64 
    push           mm_type.softconvert.tbase i64 
    jumpne         #20696     i64 
    push           mm_type.softconvert.tbase i64 
    push           11         i64 
    jumpne         #20696     i64 
    setargs                   2 0
    push           mm_type.softconvert.t i64 
    push           mm_type.softconvert.s i64 
    callfn         &mm_type.comparemodes i64 
    jumpfalse      #20697     i64 
    push           182        i64 
    setret                    i64 
    jump           #20687     
#20697: 
#20696: 
    push           mm_type.softconvert.sbase i64 
    push           11         i64 
    jumpne         #20698     i64 
    push           mm_type.softconvert.tbase i64 
    push           12         i64 
    jumpne         #20698     i64 
    setargs                   2 0
    push           &mm_decls.tttarget 
    push           mm_type.softconvert.t i64 
    pushptroff                i32 4 0
    push           &mm_decls.tttarget 
    push           mm_type.softconvert.s i64 
    pushptroff                i32 4 0
    callfn         &mm_type.comparemodes i64 
    jumptrue       #20699     i64 
    setargs                   2 0
    push           0          u64 
    push           "Bad array to slice" u64 
    callproc       &mm_support.txerror 
#20699: 
    push           213        i64 
    setret                    i64 
    jump           #20687     
#20698: 
    push           mm_type.softconvert.s i64 
    push           10         i64 
    jumpne         #20700     i64 
    push           mm_type.softconvert.tbase i64 
    push           12         i64 
    jumpne         #20700     i64 
    push           &mm_decls.tttarget 
    push           mm_type.softconvert.t i64 
    pushptroff                i32 4 0
    push           21         i64 
    setjumpeq      #20701     i64 
    push           16         i64 
    setjumpeqx     #20701     i64 
    setargs                   2 0
    push           0          u64 
    push           "Bad string to slice" u64 
    callproc       &mm_support.txerror 
#20701: 
    push           214        i64 
    setret                    i64 
    jump           #20687     
#20700: 
    push           mm_type.softconvert.sbase i64 
    push           12         i64 
    jumpne         #20702     i64 
    push           mm_type.softconvert.tbase i64 
    push           12         i64 
    jumpne         #20702     i64 
    setargs                   2 0
    push           mm_type.softconvert.t i64 
    push           mm_type.softconvert.s i64 
    callfn         &mm_type.comparemodes i64 
    jumpfalse      #20703     i64 
    push           182        i64 
    setret                    i64 
    jump           #20687     
#20703: 
#20702: 
    push           212        i64 
    setret                    i64 
    jump           #20687     
#20687: 
    retfn                     i64 
End


Proc mm_type.comparemodes: i64
    param          mm_type.comparemodes.s i64 
    param          mm_type.comparemodes.t i64 
    local          mm_type.comparemodes.sbase i64 
    local          mm_type.comparemodes.tbase i64 
    local          mm_type.comparemodes.starg i64 
    local          mm_type.comparemodes.ttarg i64 
    local          mm_type.comparemodes.d u64 
    local          mm_type.comparemodes.e u64 
    procentry                 
    push           mm_type.comparemodes.s i64 
    push           mm_type.comparemodes.t i64 
    jumpne         #20705     i64 
    push           1          i64 
    setret                    i64 
    jump           #20706     
#20705: 
    push           &mm_decls.ttbasetype 
    push           mm_type.comparemodes.s i64 
    pushptroff                i32 4 0
    pop            mm_type.comparemodes.sbase i64 
    push           &mm_decls.ttbasetype 
    push           mm_type.comparemodes.t i64 
    pushptroff                i32 4 0
    pop            mm_type.comparemodes.tbase i64 
    push           mm_type.comparemodes.sbase i64 
    push           9          i64 
    casejumpeq     #20707     i64 0
    push           11         i64 
    casejumpeq     #20708     i64 0
    push           12         i64 
    casejumpeq     #20709     i64 0
    push           27         i64 
    casejumpeq     #20710     i64 0
    popstack                  i64 
    jump           #20711     
#20707: 
    push           &mm_decls.tttarget 
    push           mm_type.comparemodes.s i64 
    pushptroff                i32 4 0
    pop            mm_type.comparemodes.starg i64 
    push           &mm_decls.tttarget 
    push           mm_type.comparemodes.t i64 
    pushptroff                i32 4 0
    pop            mm_type.comparemodes.ttarg i64 
    push           mm_type.comparemodes.starg i64 
    push           0          i64 
    jumpeq         #20712     i64 
    push           mm_type.comparemodes.ttarg i64 
    push           0          i64 
    jumpne         #20713     i64 
#20712: 
    push           1          i64 
    setret                    i64 
    jump           #20706     
#20713: 
    setargs                   2 0
    push           &mm_decls.tttarget 
    push           mm_type.comparemodes.t i64 
    pushptroff                i32 4 0
    push           &mm_decls.tttarget 
    push           mm_type.comparemodes.s i64 
    pushptroff                i32 4 0
    callfn         &mm_type.comparemodes i64 
    setret                    i64 
    jump           #20706     
    jump           #20714     
#20708: 
    setargs                   2 0
    push           &mm_decls.tttarget 
    push           mm_type.comparemodes.t i64 
    pushptroff                i32 4 0
    push           &mm_decls.tttarget 
    push           mm_type.comparemodes.s i64 
    pushptroff                i32 4 0
    callfn         &mm_type.comparemodes i64 
    jumpfalse      #20715     i64 
    push           &mm_decls.ttlength 
    push           mm_type.comparemodes.s i64 
    pushptroff                i32 4 0
    push           &mm_decls.ttlength 
    push           mm_type.comparemodes.t i64 
    pushptroff                i32 4 0
    jumpeq         #20716     i64 
    push           &mm_decls.ttlength 
    push           mm_type.comparemodes.s i64 
    pushptroff                i32 4 0
    push           0          i64 
    jumpeq         #20716     i64 
    push           &mm_decls.ttlength 
    push           mm_type.comparemodes.t i64 
    pushptroff                i32 4 0
    push           0          i64 
    jumpne         #20715     i64 
#20716: 
    push           1          i64 
    setret                    i64 
    jump           #20706     
#20715: 
    jump           #20714     
#20709: 
    setargs                   2 0
    push           &mm_decls.tttarget 
    push           mm_type.comparemodes.t i64 
    pushptroff                i32 4 0
    push           &mm_decls.tttarget 
    push           mm_type.comparemodes.s i64 
    pushptroff                i32 4 0
    callfn         &mm_type.comparemodes i64 
    setret                    i64 
    jump           #20706     
    jump           #20714     
#20710: 
    push           &mm_decls.ttnamedef 
    push           mm_type.comparemodes.s i64 
    pushptroff                u64 8 0
    pop            mm_type.comparemodes.d u64 
    push           &mm_decls.ttnamedef 
    push           mm_type.comparemodes.t i64 
    pushptroff                u64 8 0
    pop            mm_type.comparemodes.e u64 
    push           mm_type.comparemodes.d u64 
    jumpfalse      #20717     u64 
    push           mm_type.comparemodes.e u64 
    jumpfalse      #20717     u64 
    setargs                   2 0
    push           mm_type.comparemodes.e u64 
    push           72         
    pushptroff                i32 1 0
    push           mm_type.comparemodes.d u64 
    push           72         
    pushptroff                i32 1 0
    callfn         &mm_type.comparemodes i64 
    jumptrue       #20718     i64 
    push           0          i64 
    setret                    i64 
    jump           #20706     
#20718: 
    push           mm_type.comparemodes.d u64 
    push           104        
    pushptroff                u64 1 0
    push           0          u64 
    jumpne         #20719     u64 
    push           mm_type.comparemodes.e u64 
    push           104        
    pushptroff                u64 1 0
    push           0          u64 
    jumpne         #20719     u64 
    push           1          i64 
    setret                    i64 
    jump           #20706     
#20719: 
#20717: 
    jump           #20714     
#20711: 
    push           mm_type.comparemodes.sbase i64 
    push           16         i64 
    jumpne         #20720     i64 
    push           mm_type.comparemodes.tbase i64 
    push           21         i64 
    jumpeq         #20721     i64 
#20720: 
    push           mm_type.comparemodes.sbase i64 
    push           21         i64 
    jumpne         #20722     i64 
    push           mm_type.comparemodes.tbase i64 
    push           16         i64 
    jumpne         #20722     i64 
#20721: 
    push           1          i64 
    setret                    i64 
    jump           #20706     
    jump           #20723     
#20722: 
#20723: 
#20714: 
    push           0          i64 
    setret                    i64 
    jump           #20706     
#20706: 
    retfn                     i64 
End


Proc mm_type.hardconvert: i64
    param          mm_type.hardconvert.s i64 
    param          mm_type.hardconvert.t i64 
    local          mm_type.hardconvert.opc i64 
    local          mm_type.hardconvert.sbase i64 
    local          mm_type.hardconvert.tbase i64 
    local          mm_type.hardconvert.sint i64 
    local          mm_type.hardconvert.tint i64 
    local          mm_type.hardconvert.sref i64 
    local          mm_type.hardconvert.tref i64 
    procentry                 
    setargs                   3 0
    push           1          i64 
    push           mm_type.hardconvert.t i64 
    push           mm_type.hardconvert.s i64 
    callfn         &mm_type.softconvert i64 
    pop            mm_type.hardconvert.opc i64 
    push           mm_type.hardconvert.opc i64 
    push           212        i64 
    jumpeq         #20725     i64 
    push           mm_type.hardconvert.opc i64 
    setret                    i64 
    jump           #20726     
#20725: 
    push           mm_type.hardconvert.s i64 
    push           0          i64 
    jumpne         #20727     i64 
    setargs                   2 0
    push           0          u64 
    push           "Non-void type expected" u64 
    callproc       &mm_support.txerror 
#20727: 
    push           &mm_decls.ttbasetype 
    push           mm_type.hardconvert.s i64 
    pushptroff                i32 4 0
    pop            mm_type.hardconvert.sbase i64 
    push           &mm_decls.ttbasetype 
    push           mm_type.hardconvert.t i64 
    pushptroff                i32 4 0
    pop            mm_type.hardconvert.tbase i64 
    push           &mm_decls.ttisref 
    push           mm_type.hardconvert.s i64 
    pushptroff                u8 1 0
    pop            mm_type.hardconvert.sref i64 
    push           &mm_decls.ttisref 
    push           mm_type.hardconvert.t i64 
    pushptroff                u8 1 0
    pop            mm_type.hardconvert.tref i64 
    push           &mm_decls.ttisinteger 
    push           mm_type.hardconvert.s i64 
    pushptroff                u8 1 0
    pop            mm_type.hardconvert.sint i64 
    push           &mm_decls.ttisinteger 
    push           mm_type.hardconvert.t i64 
    pushptroff                u8 1 0
    pop            mm_type.hardconvert.tint i64 
    push           mm_type.hardconvert.sref i64 
    jumpfalse      #20728     i64 
    push           mm_type.hardconvert.tint i64 
    jumptrue       #20729     i64 
#20728: 
    push           mm_type.hardconvert.sint i64 
    jumpfalse      #20730     i64 
    push           mm_type.hardconvert.tref i64 
    jumptrue       #20729     i64 
#20730: 
    push           mm_type.hardconvert.sref i64 
    jumpfalse      #20731     i64 
    push           mm_type.hardconvert.tref i64 
    jumpfalse      #20731     i64 
#20729: 
    push           182        i64 
    setret                    i64 
    jump           #20726     
    jump           #20732     
#20731: 
    push           mm_type.hardconvert.sbase i64 
    push           24         i64 
    jumpne         #20733     i64 
    push           mm_type.hardconvert.tint i64 
    jumptrue       #20734     i64 
#20733: 
    push           mm_type.hardconvert.sint i64 
    jumpfalse      #20735     i64 
    push           mm_type.hardconvert.tbase i64 
    push           24         i64 
    jumpne         #20735     i64 
#20734: 
    push           182        i64 
    setret                    i64 
    jump           #20726     
    jump           #20732     
#20735: 
    push           mm_type.hardconvert.sint i64 
    jumpfalse      #20736     i64 
    push           &mm_decls.ttisshort 
    push           mm_type.hardconvert.tbase i64 
    pushptroff                u8 1 0
    jumpfalse      #20736     i64 
    startmult                 
    push           &mm_decls.ttsize 
    push           mm_type.hardconvert.sbase i64 
    pushptroff                i32 4 0
    push           16         i64 
    jumpne         #20737     i64 
    push           190        i64 
    resetmult                 
    jump           #20738     
#20737: 
    push           187        i64 
    endmult                   
#20738: 
    setret                    i64 
    jump           #20726     
#20736: 
#20732: 
    push           212        i64 
    setret                    i64 
    jump           #20726     
#20726: 
    retfn                     i64 
End


Proc mm_type.applyconversion:
    param          mm_type.applyconversion.p u64 
    param          mm_type.applyconversion.s i64 
    param          mm_type.applyconversion.t i64 
    param          mm_type.applyconversion.opc i64 
    local          mm_type.applyconversion.cmpop i64 
    procentry                 
    push           mm_type.applyconversion.opc i64 
    push           212        i64 
    casejumpeq     #20740     i64 0
    push           182        i64 
    casejumpeq     #20741     i64 0
    push           215        i64 
    casejumpeq     #20742     i64 0
    push           213        i64 
    casejumpeq     #20743     i64 0
    push           214        i64 
    casejumpeq     #20744     i64 0
    push           216        i64 
    casejumpeq     #20745     i64 0
    popstack                  i64 
    jump           #20746     
#20740: 
    setargs                   2 0
    push           0          u64 
    push           "No conversion possible" u64 
    callproc       &mm_support.txerror 
    jump           #20747     
#20741: 
    push           mm_type.applyconversion.t i64 
    push           mm_type.applyconversion.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #20748     
    jump           #20747     
#20742: 
    setargs                   2 0
    push           62         i64 
    push           mm_type.applyconversion.p u64 
    callproc       &mm_lib.insertunit 
    push           mm_type.applyconversion.t i64 
    push           mm_type.applyconversion.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #20748     
    jump           #20747     
#20743: 
    setargs                   2 0
    push           50         i64 
    push           mm_type.applyconversion.p u64 
    callproc       &mm_lib.insertunit 
    push           mm_type.applyconversion.t i64 
    push           mm_type.applyconversion.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #20748     
    jump           #20747     
#20744: 
    setargs                   2 0
    push           mm_type.applyconversion.t i64 
    push           mm_type.applyconversion.p u64 
    callproc       &mm_type.tstringslice 
    jump           #20748     
    jump           #20747     
#20745: 
    setargs                   2 0
    push           60         i64 
    push           mm_type.applyconversion.p u64 
    callproc       &mm_lib.insertunit 
    push           10         i64 
    push           mm_type.applyconversion.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #20748     
    jump           #20747     
#20746: 
#20747: 
    setargs                   4 0
    push           mm_type.applyconversion.opc i64 
    push           mm_type.applyconversion.t i64 
    push           mm_type.applyconversion.s i64 
    push           mm_type.applyconversion.p u64 
    callfn         &mm_type.tevalconvert i64 
    jumpfalse      #20749     i64 
    jump           #20748     
#20749: 
    setargs                   2 0
    push           61         i64 
    push           mm_type.applyconversion.p u64 
    callproc       &mm_lib.insertunit 
    push           mm_type.applyconversion.opc i64 
    push           mm_type.applyconversion.p u64 
    push           60         
    popptroff                 u8 1 0
    push           mm_type.applyconversion.s i64 
    push           mm_type.applyconversion.p u64 
    push           52         
    popptroff                 i32 1 0
    push           1          i64 
    push           mm_type.applyconversion.p u64 
    push           59         
    popptroff                 u8 1 0
    push           &mm_decls.ttisshort 
    push           mm_type.applyconversion.t i64 
    pushptroff                u8 1 0
    jumpfalse      #20750     i64 
    push           mm_type.applyconversion.t i64 
    push           mm_type.applyconversion.p u64 
    push           52         
    popptroff                 i32 1 0
    setargs                   1 0
    push           mm_type.applyconversion.t i64 
    callfn         &mm_lib.gettypebase i64 
    pop            mm_type.applyconversion.t i64 
#20750: 
    push           mm_type.applyconversion.t i64 
    push           mm_type.applyconversion.p u64 
    push           48         
    popptroff                 i32 1 0
#20748: 
    retproc                   
End


Proc mm_type.coerceunit:
    param          mm_type.coerceunit.p u64 
    param          mm_type.coerceunit.t i64 
    param          mm_type.coerceunit.hard i64 
    local          mm_type.coerceunit.opc i64 
    local          mm_type.coerceunit.s i64 
    procentry                 
    push           mm_type.coerceunit.p u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.coerceunit.s i64 
    push           mm_type.coerceunit.t i64 
    push           0          i64 
    jumpeq         #20752     i64 
    push           mm_type.coerceunit.s i64 
    push           mm_type.coerceunit.t i64 
    jumpne         #20753     i64 
#20752: 
    jump           #20754     
#20753: 
    push           mm_type.coerceunit.s i64 
    push           0          i64 
    jumpne         #20755     i64 
    push           mm_type.coerceunit.t i64 
    push           0          i64 
    jumpeq         #20755     i64 
    setargs                   2 0
    push           0          u64 
    push           "Void type in expression/return value missing" u64 
    callproc       &mm_support.txerror 
#20755: 
    push           mm_type.coerceunit.hard i64 
    jumpfalse      #20756     i64 
    setargs                   2 0
    push           mm_type.coerceunit.t i64 
    push           mm_type.coerceunit.s i64 
    callfn         &mm_type.hardconvert i64 
    pop            mm_type.coerceunit.opc i64 
    jump           #20757     
#20756: 
    setargs                   3 0
    push           0          i64 
    push           mm_type.coerceunit.t i64 
    push           mm_type.coerceunit.s i64 
    callfn         &mm_type.softconvert i64 
    pop            mm_type.coerceunit.opc i64 
#20757: 
    push           mm_type.coerceunit.opc i64 
    push           212        i64 
    jumpne         #20758     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    setargs                   2 0
    push           1          i64 
    push           mm_type.coerceunit.s i64 
    callfn         &mm_lib.strmode u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "=>"       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    setargs                   2 0
    push           1          i64 
    push           mm_type.coerceunit.t i64 
    callfn         &mm_lib.strmode u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           mm_type.coerceunit.hard i64 
    jumptrue       #20759     i64 
    setargs                   2 0
    push           mm_type.coerceunit.t i64 
    push           mm_type.coerceunit.s i64 
    callfn         &mm_type.hardconvert i64 
    push           212        i64 
    jumpeq         #20759     i64 
    setargs                   2 0
    push           0          u64 
    push           "Need explicit conversion" u64 
    callproc       &mm_support.txerror 
    jump           #20760     
#20759: 
    setargs                   2 0
    push           0          u64 
    push           "Can't do conversion" u64 
    callproc       &mm_support.txerror 
#20760: 
#20758: 
    setargs                   4 0
    push           mm_type.coerceunit.opc i64 
    push           mm_type.coerceunit.t i64 
    push           mm_type.coerceunit.s i64 
    push           mm_type.coerceunit.p u64 
    callproc       &mm_type.applyconversion 
#20754: 
    retproc                   
End


Proc mm_type.tevalconvert: i64
    param          mm_type.tevalconvert.p u64 
    param          mm_type.tevalconvert.s i64 
    param          mm_type.tevalconvert.t i64 
    param          mm_type.tevalconvert.opc i64 
    local          mm_type.tevalconvert.x r64 
    local          mm_type.tevalconvert.z r64 
    local          mm_type.tevalconvert.a i64 
    local          mm_type.tevalconvert.c i64 
    local          mm_type.tevalconvert.aa i128 
    procentry                 
    push           mm_type.tevalconvert.p u64 
    pushptr                   u8 
    push           1          i64 
    jumpeq         #20762     i64 
    push           0          i64 
    setret                    i64 
    jump           #20763     
#20762: 
    push           mm_type.tevalconvert.s i64 
    push           16         i64 
    shl                       i64 
    push           mm_type.tevalconvert.t i64 
    ior                       i64 
    push           262151     i64 
    casejumpeq     #20764     i64 0
    push           458756     i64 
    casejumpeq     #20765     i64 0
    push           458758     i64 
    casejumpeq     #20766     i64 0
    popstack                  i64 
    jump           #20767     
#20764: 
    push           mm_type.tevalconvert.p u64 
    push           16         
    pushptroff                i64 1 0
    float                     r64 i64 
    pop            mm_type.tevalconvert.z r64 
    jump           #20768     
#20765: 
    push           mm_type.tevalconvert.p u64 
    push           16         
    pushptroff                r64 1 0
    fix                       i64 r64 
    pop            mm_type.tevalconvert.c i64 
    jump           #20768     
#20766: 
    push           mm_type.tevalconvert.p u64 
    push           16         
    pushptroff                r64 1 0
    fnarrow                   r32 r64 
    fwiden                    r64 r32 
    pop            mm_type.tevalconvert.z r64 
    jump           #20768     
#20767: 
    push           0          i64 
    setret                    i64 
    jump           #20763     
#20768: 
    push           &mm_decls.ttisreal 
    push           mm_type.tevalconvert.t i64 
    pushptroff                u8 1 0
    jumpfalse      #20769     i64 
    setargs                   3 0
    push           mm_type.tevalconvert.t i64 
    push           mm_type.tevalconvert.z r64 
    typepun                   i64 void 0
    push           mm_type.tevalconvert.p u64 
    callproc       &mm_type.makenewconst 
    jump           #20770     
#20769: 
    setargs                   3 0
    push           mm_type.tevalconvert.t i64 
    push           mm_type.tevalconvert.c i64 
    push           mm_type.tevalconvert.p u64 
    callproc       &mm_type.makenewconst 
#20770: 
    push           1          i64 
    setret                    i64 
    jump           #20763     
#20763: 
    retfn                     i64 
End


Proc mm_type.do_bounds:
    param          mm_type.do_bounds.p u64 
    param          mm_type.do_bounds.a u64 
    local          mm_type.do_bounds.m i64 
    local          mm_type.do_bounds.mbase i64 
    local          mm_type.do_bounds.opc i64 
    local          mm_type.do_bounds.lower i64 
    local          mm_type.do_bounds.upper i64 
    procentry                 
    setargs                   2 0
    push           1          i64 
    push           mm_type.do_bounds.a u64 
    callproc       &mm_type.deref 
    push           mm_type.do_bounds.a u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.do_bounds.m i64 
    push           mm_type.do_bounds.a u64 
    pushptr                   u8 
    push           65         i64 
    jumpne         #20772     i64 
    push           mm_type.do_bounds.a u64 
    push           16         
    pushptroff                i64 1 0
    pop            mm_type.do_bounds.m i64 
#20772: 
    push           &mm_decls.ttbasetype 
    push           mm_type.do_bounds.m i64 
    pushptroff                i32 4 0
    pop            mm_type.do_bounds.mbase i64 
    push           4          i64 
    push           mm_type.do_bounds.p u64 
    push           48         
    popptroff                 i32 1 0
    push           mm_type.do_bounds.p u64 
    push           60         
    pushptroff                u8 1 0
    push           202        i64 
    casejumpeq     #20773     i64 0
    push           203        i64 
    casejumpeq     #20774     i64 0
    push           201        i64 
    casejumpeq     #20775     i64 0
    push           204        i64 
    casejumpeq     #20776     i64 0
    popstack                  i64 
    jump           #20777     
#20773: 
    push           mm_type.do_bounds.mbase i64 
    push           11         i64 
    casejumpeq     #20778     i64 0
    push           12         i64 
    casejumpeq     #20778     i64 0
    popstack                  i64 
    jump           #20779     
#20778: 
    setargs                   2 0
    push           &mm_decls.ttlower 
    push           mm_type.do_bounds.m i64 
    pushptroff                i32 4 0
    push           mm_type.do_bounds.p u64 
    callproc       &mm_type.convintconst 
    jump           #20780     
    jump           #20781     
#20779: 
!error::
#20782: 
    setargs                   2 0
    push           0          u64 
    push           "lwb/upb/len?" u64 
    callproc       &mm_support.txerror 
#20781: 
    jump           #20783     
#20774: 
    push           mm_type.do_bounds.mbase i64 
    push           11         i64 
    casejumpeq     #20784     i64 0
    push           12         i64 
    casejumpeq     #20785     i64 0
    popstack                  i64 
    jump           #20786     
#20784: 
    setargs                   2 0
    push           &mm_decls.ttlower 
    push           mm_type.do_bounds.m i64 
    pushptroff                i32 4 0
    push           &mm_decls.ttlength 
    push           mm_type.do_bounds.m i64 
    pushptroff                i32 4 0
    add                       i64 
    push           1          i64 
    sub                       i64 
    push           mm_type.do_bounds.p u64 
    callproc       &mm_type.convintconst 
    jump           #20787     
#20785: 
    push           203        i64 
    push           mm_type.do_bounds.p u64 
    push           60         
    popptroff                 u8 1 0
    jump           #20787     
#20786: 
    jump           #20782     
#20787: 
    jump           #20783     
#20775: 
    push           mm_type.do_bounds.mbase i64 
    push           11         i64 
    casejumpeq     #20788     i64 0
    push           12         i64 
    casejumpeq     #20789     i64 0
    popstack                  i64 
    jump           #20790     
#20788: 
    setargs                   2 0
    push           &mm_decls.ttlength 
    push           mm_type.do_bounds.m i64 
    pushptroff                i32 4 0
    push           mm_type.do_bounds.p u64 
    callproc       &mm_type.convintconst 
    jump           #20791     
#20789: 
    push           201        i64 
    push           mm_type.do_bounds.p u64 
    push           60         
    popptroff                 u8 1 0
    jump           #20791     
#20790: 
    jump           #20782     
#20791: 
    jump           #20783     
#20776: 
    push           8          i64 
    push           mm_type.do_bounds.p u64 
    push           48         
    popptroff                 i32 1 0
    push           mm_type.do_bounds.mbase i64 
    push           11         i64 
    casejumpeq     #20792     i64 0
    push           12         i64 
    casejumpeq     #20793     i64 0
    push           20         i64 
    casejumpeq     #20794     i64 0
    popstack                  i64 
    jump           #20795     
#20792: 
    push           &mm_decls.ttlower 
    push           mm_type.do_bounds.m i64 
    pushptroff                i32 4 0
    push           mm_type.do_bounds.p u64 
    push           16         
    popptroff                 i64 1 0
    push           mm_type.do_bounds.p u64 
    push           16         
    pushptroff                i64 1 0
    push           &mm_decls.ttlength 
    push           mm_type.do_bounds.m i64 
    pushptroff                i32 4 0
    add                       i64 
    push           1          i64 
    sub                       i64 
    push           mm_type.do_bounds.p u64 
    push           24         
    popptroff                 i64 1 0
    push           1          i64 
    push           mm_type.do_bounds.p u64 
    push           0          
    popptroff                 u8 1 0
    push           0          u64 
    push           mm_type.do_bounds.p u64 
    push           32         
    storeptroff               u64 1 0
    push           mm_type.do_bounds.p u64 
    push           24         
    storeptroff               u64 1 0
    push           mm_type.do_bounds.p u64 
    push           16         
    popptroff                 u64 1 0
    push           0          i64 
    push           mm_type.do_bounds.p u64 
    push           3          
    storeptroff               u8 1 0
    push           mm_type.do_bounds.p u64 
    push           2          
    storeptroff               u8 1 0
    push           mm_type.do_bounds.p u64 
    push           1          
    popptroff                 u8 1 0
    push           1          i64 
    push           mm_type.do_bounds.p u64 
    push           58         
    popptroff                 u8 1 0
    jump           #20780     
    jump           #20796     
#20793: 
    push           204        i64 
    push           mm_type.do_bounds.p u64 
    push           60         
    popptroff                 u8 1 0
    jump           #20796     
#20794: 
    setargs                   2 0
    push           4294967296 i64 
    push           mm_type.do_bounds.p u64 
    callproc       &mm_type.convintconst 
    jump           #20780     
    jump           #20796     
#20795: 
    jump           #20782     
#20796: 
    jump           #20783     
#20777: 
#20783: 
#20780: 
    retproc                   
End


Proc mm_type.addnotl:
    param          mm_type.addnotl.p u64 
    procentry                 
    setargs                   2 0
    push           17         i64 
    push           mm_type.addnotl.p u64 
    callproc       &mm_lib.insertunit 
    push           4          i64 
    push           mm_type.addnotl.p u64 
    push           48         
    popptroff                 i32 1 0
    push           132        i64 
    push           mm_type.addnotl.p u64 
    push           60         
    popptroff                 u8 1 0
#20798: 
    retproc                   
End


Proc mm_type.tevaluate:
    param          mm_type.tevaluate.p u64 
    local          mm_type.tevaluate.a u64 
    local          mm_type.tevaluate.b u64 
    local          mm_type.tevaluate.pname u64 
    local          mm_type.tevaluate.offset i64 
    local          mm_type.tevaluate.tag i64 
    procentry                 
    push           mm_type.tevaluate.p u64 
    pushptr                   u8 
    pop            mm_type.tevaluate.tag i64 
    push           &mm_tables.jisexpr 
    push           mm_type.tevaluate.tag i64 
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #20800     i64 
    setargs                   1 0
    push           mm_type.tevaluate.p u64 
    callproc       &mm_type.tevalbinop 
    jump           #20801     
#20800: 
    push           &mm_tables.jisexpr 
    push           mm_type.tevaluate.tag i64 
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #20802     i64 
    setargs                   1 0
    push           mm_type.tevaluate.p u64 
    callproc       &mm_type.tevalmonop 
    jump           #20801     
#20802: 
    push           mm_type.tevaluate.tag i64 
    push           20         i64 
    casejumpeq     #20803     i64 0
    push           59         i64 
    casejumpeq     #20804     i64 0
    popstack                  i64 
    jump           #20805     
#20803: 
    push           mm_type.tevaluate.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_type.tevaluate.a u64 
    push           mm_type.tevaluate.p u64 
    push           24         
    pushptroff                u64 1 0
    pop            mm_type.tevaluate.b u64 
    push           &mm_decls.ttsize 
    push           mm_type.tevaluate.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           8          i64 
    jumpgt         #20806     i64 
    setargs                   1 0
    push           mm_type.tevaluate.a u64 
    callproc       &mm_type.tevaluate 
    setargs                   1 0
    push           mm_type.tevaluate.b u64 
    callproc       &mm_type.tevaluate 
    push           mm_type.tevaluate.a u64 
    pushptr                   u8 
    push           1          i64 
    jumpne         #20807     i64 
    push           mm_type.tevaluate.b u64 
    pushptr                   u8 
    push           1          i64 
    jumpne         #20807     i64 
    push           mm_type.tevaluate.a u64 
    push           58         
    pushptroff                u8 1 0
    push           mm_type.tevaluate.b u64 
    push           58         
    pushptroff                u8 1 0
    iand                      i64 
    push           mm_type.tevaluate.p u64 
    push           58         
    popptroff                 u8 1 0
#20807: 
#20806: 
    jump           #20808     
#20804: 
    push           mm_type.tevaluate.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_type.tevaluate.a u64 
    setargs                   2 0
    push           &mm_type.tevaluate.offset 
    push           mm_type.tevaluate.a u64 
    callfn         &mm_type.addrdotindex u64 
    pop            mm_type.tevaluate.pname u64 
    push           mm_type.tevaluate.pname u64 
    jumpfalse      #20809     u64 
    setargs                   2 0
    push           mm_type.tevaluate.pname u64 
    push           mm_type.tevaluate.a u64 
    callproc       &mm_lib.deleteunit 
    push           mm_type.tevaluate.p u64 
    push           24         
    pushptroff                u64 1 0
    push           0          u64 
    jumpne         #20810     u64 
    push           1          i64 
    push           mm_type.tevaluate.p u64 
    push           2          
    popptroff                 u8 1 0
    setargs                   2 0
    push           4          i64 
    push           mm_type.tevaluate.offset u64 
    callfn         &mm_lib.createconstunit u64 
    push           mm_type.tevaluate.p u64 
    push           24         
    popptroff                 u64 1 0
    jump           #20811     
#20810: 
    push           mm_type.tevaluate.p u64 
    push           24         
    pushptroff                u64 1 0
    push           16         
    addrefoff                 u64 1 0
    push           mm_type.tevaluate.offset i64 
    addto                     i64 
#20811: 
#20809: 
    jump           #20808     
#20805: 
#20808: 
#20801: 
#20812: 
    retproc                   
End


Proc mm_type.addrdotindex: u64
    param          mm_type.addrdotindex.p u64 
    param          mm_type.addrdotindex.offset u64 
    local          mm_type.addrdotindex.q u64 
    local          mm_type.addrdotindex.axmode i64 
    procentry                 
    startmult                 
    push           mm_type.addrdotindex.p u64 
    pushptr                   u8 
    push           51         i64 
    casejumpeq     #20814     i64 0
    push           48         i64 
    casejumpeq     #20815     i64 0
    popstack                  i64 
    jump           #20816     
#20814: 
    startmult                 
    push           mm_type.addrdotindex.p u64 
    push           16         
    pushptroff                u64 1 0
    pushptr                   u8 
    push           3          i64 
    jumpne         #20817     i64 
    push           mm_type.addrdotindex.p u64 
    push           40         
    pushptroff                u32 1 0
    push           mm_type.addrdotindex.offset u64 
    popptr                    i64 
    push           mm_type.addrdotindex.p u64 
    push           16         
    pushptroff                u64 1 0
    resetmult                 
    jump           #20818     
#20817: 
    setargs                   2 0
    push           mm_type.addrdotindex.offset u64 
    push           mm_type.addrdotindex.p u64 
    push           16         
    pushptroff                u64 1 0
    callfn         &mm_type.addrdotindex u64 
    pop            mm_type.addrdotindex.q u64 
    push           mm_type.addrdotindex.offset u64 
    push           mm_type.addrdotindex.p u64 
    push           40         
    pushptroff                u32 1 0
    addto                     i64 
    push           mm_type.addrdotindex.q u64 
    endmult                   
#20818: 
    resetmult                 
    jump           #20819     
#20815: 
    push           mm_type.addrdotindex.p u64 
    push           16         
    pushptroff                u64 1 0
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.addrdotindex.axmode i64 
    startmult                 
    push           mm_type.addrdotindex.p u64 
    push           24         
    pushptroff                u64 1 0
    pushptr                   u8 
    push           1          i64 
    jumpne         #20820     i64 
    startmult                 
    push           mm_type.addrdotindex.p u64 
    push           16         
    pushptroff                u64 1 0
    pushptr                   u8 
    push           3          i64 
    jumpne         #20821     i64 
    push           mm_type.addrdotindex.p u64 
    push           24         
    pushptroff                u64 1 0
    push           16         
    pushptroff                i64 1 0
    push           &mm_decls.ttlower 
    push           mm_type.addrdotindex.axmode i64 
    pushptroff                i32 4 0
    sub                       i64 
    push           &mm_decls.ttsize 
    push           &mm_decls.tttarget 
    push           mm_type.addrdotindex.axmode i64 
    pushptroff                i32 4 0
    pushptroff                i32 4 0
    mul                       i64 
    push           mm_type.addrdotindex.offset u64 
    popptr                    i64 
    push           mm_type.addrdotindex.p u64 
    push           16         
    pushptroff                u64 1 0
    resetmult                 
    jump           #20822     
#20821: 
    setargs                   2 0
    push           mm_type.addrdotindex.offset u64 
    push           mm_type.addrdotindex.p u64 
    push           16         
    pushptroff                u64 1 0
    callfn         &mm_type.addrdotindex u64 
    pop            mm_type.addrdotindex.q u64 
    push           mm_type.addrdotindex.q u64 
    jumpfalse      #20823     u64 
    push           mm_type.addrdotindex.offset u64 
    push           mm_type.addrdotindex.p u64 
    push           24         
    pushptroff                u64 1 0
    push           16         
    pushptroff                i64 1 0
    push           &mm_decls.ttlower 
    push           mm_type.addrdotindex.axmode i64 
    pushptroff                i32 4 0
    sub                       i64 
    push           &mm_decls.ttsize 
    push           &mm_decls.tttarget 
    push           mm_type.addrdotindex.axmode i64 
    pushptroff                i32 4 0
    pushptroff                i32 4 0
    mul                       i64 
    addto                     i64 
#20823: 
    push           mm_type.addrdotindex.q u64 
    endmult                   
#20822: 
    resetmult                 
    jump           #20824     
#20820: 
    push           0          u64 
    endmult                   
#20824: 
    resetmult                 
    jump           #20819     
#20816: 
    push           0          u64 
    endmult                   
#20819: 
    setret                    u64 
    jump           #20825     
#20825: 
    retfn                     u64 
End


Proc mm_type.tevalbinop:
    param          mm_type.tevalbinop.p u64 
    local          mm_type.tevalbinop.a i64 
    local          mm_type.tevalbinop.b i64 
    local          mm_type.tevalbinop.c i64 
    local          mm_type.tevalbinop.offset i64 
    local          mm_type.tevalbinop.x r64 
    local          mm_type.tevalbinop.y r64 
    local          mm_type.tevalbinop.z r64 
    local          mm_type.tevalbinop.lhs u64 
    local          mm_type.tevalbinop.rhs u64 
    procentry                 
    push           mm_type.tevalbinop.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_type.tevalbinop.lhs u64 
    push           mm_type.tevalbinop.p u64 
    push           24         
    pushptroff                u64 1 0
    pop            mm_type.tevalbinop.rhs u64 
    push           mm_type.tevalbinop.lhs u64 
    pushptr                   u8 
    push           mm_type.tevalbinop.rhs u64 
    pushptr                   u8 
    jumpne         #20827     i64 
    push           mm_type.tevalbinop.rhs u64 
    pushptr                   u8 
    push           1          i64 
    jumpeq         #20828     i64 
#20827: 
    push           mm_type.tevalbinop.lhs u64 
    pushptr                   u8 
    push           59         i64 
    jumpne         #20829     i64 
    push           mm_type.tevalbinop.rhs u64 
    pushptr                   u8 
    push           1          i64 
    jumpne         #20829     i64 
    push           mm_type.tevalbinop.lhs u64 
    push           16         
    pushptroff                u64 1 0
    pushptr                   u8 
    push           3          i64 
    jumpne         #20830     i64 
    push           mm_type.tevalbinop.rhs u64 
    push           16         
    pushptroff                i64 1 0
    push           &mm_decls.ttsize 
    push           &mm_decls.tttarget 
    push           mm_type.tevalbinop.lhs u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    pushptroff                i32 4 0
    mul                       i64 
    pop            mm_type.tevalbinop.offset i64 
    push           mm_type.tevalbinop.lhs u64 
    push           24         
    pushptroff                u64 1 0
    push           0          u64 
    jumpne         #20831     u64 
    push           1          i64 
    push           mm_type.tevalbinop.lhs u64 
    push           2          
    popptroff                 u8 1 0
    setargs                   2 0
    push           4          i64 
    push           mm_type.tevalbinop.offset u64 
    callfn         &mm_lib.createconstunit u64 
    push           mm_type.tevalbinop.lhs u64 
    push           24         
    popptroff                 u64 1 0
    jump           #20832     
#20831: 
    push           mm_type.tevalbinop.lhs u64 
    push           24         
    pushptroff                u64 1 0
    push           16         
    addrefoff                 u64 1 0
    push           mm_type.tevalbinop.offset i64 
    addto                     i64 
#20832: 
    setargs                   2 0
    push           mm_type.tevalbinop.lhs u64 
    push           mm_type.tevalbinop.p u64 
    callproc       &mm_lib.deleteunit 
#20830: 
#20829: 
    jump           #20833     
#20828: 
    push           &mm_decls.ttisreal 
    push           mm_type.tevalbinop.p u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    jumpfalse      #20834     i64 
    push           mm_type.tevalbinop.p u64 
    push           16         
    pushptroff                u64 1 0
    push           16         
    pushptroff                r64 1 0
    pop            mm_type.tevalbinop.x r64 
    push           mm_type.tevalbinop.p u64 
    push           24         
    pushptroff                u64 1 0
    push           16         
    pushptroff                r64 1 0
    pop            mm_type.tevalbinop.y r64 
    jump           #20835     
#20834: 
    push           mm_type.tevalbinop.p u64 
    push           16         
    pushptroff                u64 1 0
    push           16         
    pushptroff                i64 1 0
    pop            mm_type.tevalbinop.a i64 
    push           mm_type.tevalbinop.p u64 
    push           24         
    pushptroff                u64 1 0
    push           16         
    pushptroff                i64 1 0
    pop            mm_type.tevalbinop.b i64 
#20835: 
    push           mm_type.tevalbinop.p u64 
    push           48         
    pushptroff                i32 1 0
    push           4          i64 
    casejumpeq     #20836     i64 0
    push           2          i64 
    casejumpeq     #20836     i64 0
    push           7          i64 
    casejumpeq     #20837     i64 0
    push           6          i64 
    casejumpeq     #20837     i64 0
    popstack                  i64 
    jump           #20838     
#20836: 
    push           mm_type.tevalbinop.p u64 
    push           60         
    pushptroff                u8 1 0
    switch         #20839     102 125
    opnd           #20840     
#20839: 
    switchlabel    #20841     
    switchlabel    #20842     
    switchlabel    #20843     
    switchlabel    #20840     
    switchlabel    #20844     
    switchlabel    #20840     
    switchlabel    #20845     
    switchlabel    #20846     
    switchlabel    #20840     
    switchlabel    #20847     
    switchlabel    #20840     
    switchlabel    #20840     
    switchlabel    #20840     
    switchlabel    #20840     
    switchlabel    #20840     
    switchlabel    #20848     
    switchlabel    #20849     
    switchlabel    #20850     
    switchlabel    #20851     
    switchlabel    #20852     
    switchlabel    #20853     
    switchlabel    #20840     
    switchlabel    #20854     
    switchlabel    #20855     
    endswitch                 
#20841: 
    push           mm_type.tevalbinop.a i64 
    push           mm_type.tevalbinop.b i64 
    add                       i64 
    pop            mm_type.tevalbinop.c i64 
    jump           #20856     
#20842: 
    push           mm_type.tevalbinop.a i64 
    push           mm_type.tevalbinop.b i64 
    sub                       i64 
    pop            mm_type.tevalbinop.c i64 
    jump           #20856     
#20843: 
    push           mm_type.tevalbinop.a i64 
    push           mm_type.tevalbinop.b i64 
    mul                       i64 
    pop            mm_type.tevalbinop.c i64 
    jump           #20856     
#20844: 
    push           mm_type.tevalbinop.a i64 
    push           mm_type.tevalbinop.b i64 
    idiv                      i64 
    pop            mm_type.tevalbinop.c i64 
    jump           #20856     
#20847: 
    push           mm_type.tevalbinop.a i64 
    push           mm_type.tevalbinop.b i64 
    shl                       i64 
    pop            mm_type.tevalbinop.c i64 
    jump           #20856     
#20848: 
    push           mm_type.tevalbinop.a i64 
    push           mm_type.tevalbinop.b i64 
    seteq                     i64 
    pop            mm_type.tevalbinop.c i64 
    jump           #20856     
#20849: 
    push           mm_type.tevalbinop.a i64 
    push           mm_type.tevalbinop.b i64 
    setne                     i64 
    pop            mm_type.tevalbinop.c i64 
    jump           #20856     
#20850: 
    push           mm_type.tevalbinop.a i64 
    push           mm_type.tevalbinop.b i64 
    setlt                     i64 
    pop            mm_type.tevalbinop.c i64 
    jump           #20856     
#20851: 
    push           mm_type.tevalbinop.a i64 
    push           mm_type.tevalbinop.b i64 
    setle                     i64 
    pop            mm_type.tevalbinop.c i64 
    jump           #20856     
#20852: 
    push           mm_type.tevalbinop.a i64 
    push           mm_type.tevalbinop.b i64 
    setge                     i64 
    pop            mm_type.tevalbinop.c i64 
    jump           #20856     
#20853: 
    push           mm_type.tevalbinop.a i64 
    push           mm_type.tevalbinop.b i64 
    setgt                     i64 
    pop            mm_type.tevalbinop.c i64 
    jump           #20856     
#20854: 
    startmult                 
    push           mm_type.tevalbinop.a i64 
    jumpfalse      #20857     i64 
    push           mm_type.tevalbinop.b i64 
    jumpfalse      #20857     i64 
    push           1          
    resetmult                 
    jump           #20858     
#20857: 
    push           0          
    endmult                   
#20858: 
    pop            mm_type.tevalbinop.c i64 
    jump           #20856     
#20855: 
    startmult                 
    push           mm_type.tevalbinop.a i64 
    jumptrue       #20859     i64 
    push           mm_type.tevalbinop.b i64 
    jumpfalse      #20860     i64 
#20859: 
    push           1          
    resetmult                 
    jump           #20861     
#20860: 
    push           0          
    endmult                   
#20861: 
    pop            mm_type.tevalbinop.c i64 
    jump           #20856     
#20845: 
    push           mm_type.tevalbinop.a i64 
    push           mm_type.tevalbinop.b i64 
    iand                      i64 
    pop            mm_type.tevalbinop.c i64 
    jump           #20856     
#20846: 
    push           mm_type.tevalbinop.a i64 
    push           mm_type.tevalbinop.b i64 
    ior                       i64 
    pop            mm_type.tevalbinop.c i64 
    jump           #20856     
#20840: 
    jump           #20833     
#20856: 
    jump           #20862     
#20837: 
    push           mm_type.tevalbinop.p u64 
    push           60         
    pushptroff                u8 1 0
    switch         #20863     102 105
    opnd           #20864     
#20863: 
    switchlabel    #20865     
    switchlabel    #20866     
    switchlabel    #20867     
    switchlabel    #20868     
    endswitch                 
#20865: 
    push           mm_type.tevalbinop.x r64 
    push           mm_type.tevalbinop.y r64 
    add                       r64 
    pop            mm_type.tevalbinop.z r64 
    jump           #20869     
#20866: 
    push           mm_type.tevalbinop.x r64 
    push           mm_type.tevalbinop.y r64 
    sub                       r64 
    pop            mm_type.tevalbinop.z r64 
    jump           #20869     
#20867: 
    push           mm_type.tevalbinop.x r64 
    push           mm_type.tevalbinop.y r64 
    mul                       r64 
    pop            mm_type.tevalbinop.z r64 
    jump           #20869     
#20868: 
    push           mm_type.tevalbinop.x r64 
    push           mm_type.tevalbinop.y r64 
    div                       r64 
    pop            mm_type.tevalbinop.z r64 
    jump           #20869     
#20864: 
    jump           #20833     
#20869: 
    jump           #20862     
#20838: 
    jump           #20833     
#20862: 
    push           &mm_decls.ttisreal 
    push           mm_type.tevalbinop.p u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    jumpfalse      #20870     i64 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tevalbinop.z r64 
    typepun                   i64 void 0
    push           mm_type.tevalbinop.p u64 
    callproc       &mm_type.makenewconst 
    jump           #20871     
#20870: 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tevalbinop.c i64 
    push           mm_type.tevalbinop.p u64 
    callproc       &mm_type.makenewconst 
#20871: 
#20833: 
    retproc                   
End


Proc mm_type.tevalmonop:
    param          mm_type.tevalmonop.p u64 
    local          mm_type.tevalmonop.a i64 
    local          mm_type.tevalmonop.b i64 
    local          mm_type.tevalmonop.c i64 
    local          mm_type.tevalmonop.x r64 
    local          mm_type.tevalmonop.z r64 
    local          mm_type.tevalmonop.q u64 
    procentry                 
    push           mm_type.tevalmonop.p u64 
    push           16         
    pushptroff                u64 1 0
    pushptr                   u8 
    push           1          i64 
    jumpeq         #20873     i64 
    jump           #20874     
#20873: 
    push           mm_type.tevalmonop.p u64 
    push           16         
    pushptroff                u64 1 0
    push           16         
    pushptroff                i64 1 0
    pop            mm_type.tevalmonop.a i64 
    push           mm_type.tevalmonop.p u64 
    push           16         
    pushptroff                u64 1 0
    push           16         
    pushptroff                r64 1 0
    pop            mm_type.tevalmonop.x r64 
    push           mm_type.tevalmonop.p u64 
    push           48         
    pushptroff                i32 1 0
    push           4          i64 
    casejumpeq     #20875     i64 0
    push           2          i64 
    casejumpeq     #20875     i64 0
    push           7          i64 
    casejumpeq     #20876     i64 0
    push           6          i64 
    casejumpeq     #20876     i64 0
    popstack                  i64 
    jump           #20877     
#20875: 
    push           mm_type.tevalmonop.p u64 
    push           60         
    pushptroff                u8 1 0
    switch         #20878     129 133
    opnd           #20879     
#20878: 
    switchlabel    #20880     
    switchlabel    #20881     
    switchlabel    #20882     
    switchlabel    #20883     
    switchlabel    #20884     
    endswitch                 
#20880: 
    push           mm_type.tevalmonop.a i64 
    neg                       i64 
    pop            mm_type.tevalmonop.c i64 
    jump           #20885     
#20884: 
    push           mm_type.tevalmonop.a i64 
    istruel                   i64 
    pop            mm_type.tevalmonop.c i64 
    jump           #20885     
#20883: 
    push           mm_type.tevalmonop.a i64 
    istruel                   i64 
    notl                      i64 
    pop            mm_type.tevalmonop.c i64 
    jump           #20885     
#20882: 
    push           mm_type.tevalmonop.a i64 
    inot                      i64 
    pop            mm_type.tevalmonop.c i64 
    jump           #20885     
#20881: 
    push           mm_type.tevalmonop.a i64 
    abs                       i64 
    pop            mm_type.tevalmonop.c i64 
    jump           #20885     
#20879: 
    jump           #20874     
#20885: 
    jump           #20886     
#20876: 
    push           mm_type.tevalmonop.p u64 
    push           60         
    pushptroff                u8 1 0
    switch         #20887     129 141
    opnd           #20888     
#20887: 
    switchlabel    #20889     
    switchlabel    #20888     
    switchlabel    #20888     
    switchlabel    #20888     
    switchlabel    #20888     
    switchlabel    #20888     
    switchlabel    #20888     
    switchlabel    #20888     
    switchlabel    #20888     
    switchlabel    #20888     
    switchlabel    #20888     
    switchlabel    #20888     
    switchlabel    #20890     
    endswitch                 
#20889: 
    push           mm_type.tevalmonop.x r64 
    neg                       r64 
    pop            mm_type.tevalmonop.z r64 
    jump           #20891     
#20890: 
    push           mm_type.tevalmonop.x r64 
    atan                      r64 
    pop            mm_type.tevalmonop.z r64 
    jump           #20891     
#20888: 
    jump           #20874     
#20891: 
    jump           #20886     
#20877: 
    jump           #20874     
#20886: 
    push           &mm_decls.ttisreal 
    push           mm_type.tevalmonop.p u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    jumpfalse      #20892     i64 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tevalmonop.z r64 
    typepun                   i64 void 0
    push           mm_type.tevalmonop.p u64 
    callproc       &mm_type.makenewconst 
    jump           #20893     
#20892: 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tevalmonop.c i64 
    push           mm_type.tevalmonop.p u64 
    callproc       &mm_type.makenewconst 
#20893: 
#20874: 
    retproc                   
End


Proc mm_type.getnewbase: i64
    param          mm_type.getnewbase.m i64 
    procentry                 
    push           &mm_decls.ttbasetype 
    push           mm_type.getnewbase.m i64 
    pushptroff                i32 4 0
    pop            mm_type.getnewbase.m i64 
    push           mm_type.getnewbase.m i64 
    push           11         i64 
    casejumpeq     #20895     i64 0
    push           13         i64 
    casejumpeq     #20895     i64 0
    popstack                  i64 
    jump           #20896     
#20895: 
    push           14         i64 
    setret                    i64 
    jump           #20897     
    jump           #20898     
#20896: 
#20898: 
    push           mm_type.getnewbase.m i64 
    setret                    i64 
    jump           #20897     
#20897: 
    retfn                     i64 
End


Proc mm_type.iscondtrue: i64
    param          mm_type.iscondtrue.p u64 
    procentry                 
    startmult                 
    push           mm_type.iscondtrue.p u64 
    pushptr                   u8 
    push           1          i64 
    jumpne         #20900     i64 
    push           mm_type.iscondtrue.p u64 
    push           16         
    pushptroff                i64 1 0
    push           0          i64 
    jumpeq         #20900     i64 
    push           1          i64 
    resetmult                 
    jump           #20901     
#20900: 
    push           0          i64 
    endmult                   
#20901: 
    setret                    i64 
    jump           #20902     
#20902: 
    retfn                     i64 
End


Proc mm_type.iscondfalse: i64
    param          mm_type.iscondfalse.p u64 
    procentry                 
    startmult                 
    push           mm_type.iscondfalse.p u64 
    pushptr                   u8 
    push           1          i64 
    jumpne         #20904     i64 
    push           mm_type.iscondfalse.p u64 
    push           16         
    pushptroff                i64 1 0
    push           0          i64 
    jumpne         #20904     i64 
    push           1          i64 
    resetmult                 
    jump           #20905     
#20904: 
    push           0          i64 
    endmult                   
#20905: 
    setret                    i64 
    jump           #20906     
#20906: 
    retfn                     i64 
End


Proc mm_type.fixchararray:
    param          mm_type.fixchararray.a u64 
    procentry                 
    push           mm_type.fixchararray.a u64 
    jumpfalse      #20908     u64 
    push           &mm_decls.ttbasetype 
    push           mm_type.fixchararray.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           11         i64 
    jumpne         #20908     i64 
    push           &mm_decls.tttarget 
    push           mm_type.fixchararray.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           16         i64 
    jumpne         #20908     i64 
    setargs                   3 0
    push           0          i64 
    push           10         i64 
    push           mm_type.fixchararray.a u64 
    callproc       &mm_type.coerceunit 
#20908: 
#20909: 
    retproc                   
End


Proc mm_type.combinestrings:
    param          mm_type.combinestrings.p u64 
    local          mm_type.combinestrings.a u64 
    local          mm_type.combinestrings.b u64 
    local          mm_type.combinestrings.alen i64 
    local          mm_type.combinestrings.blen i64 
    local          mm_type.combinestrings.clen i64 
    local          mm_type.combinestrings.s u64 
    procentry                 
    push           mm_type.combinestrings.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_type.combinestrings.a u64 
    push           mm_type.combinestrings.p u64 
    push           24         
    pushptroff                u64 1 0
    pop            mm_type.combinestrings.b u64 
    push           mm_type.combinestrings.a u64 
    push           40         
    pushptroff                u32 1 0
    pop            mm_type.combinestrings.alen i64 
    push           mm_type.combinestrings.b u64 
    push           40         
    pushptroff                u32 1 0
    pop            mm_type.combinestrings.blen i64 
    push           mm_type.combinestrings.alen i64 
    push           mm_type.combinestrings.blen i64 
    add                       i64 
    pop            mm_type.combinestrings.clen i64 
    push           mm_type.combinestrings.blen i64 
    push           0          i64 
    jumpne         #20911     i64 
    setargs                   2 0
    push           mm_type.combinestrings.a u64 
    push           mm_type.combinestrings.p u64 
    callproc       &mm_lib.deleteunit 
    jump           #20912     
    jump           #20913     
#20911: 
    push           mm_type.combinestrings.alen i64 
    push           0          i64 
    jumpne         #20914     i64 
    setargs                   2 0
    push           mm_type.combinestrings.b u64 
    push           mm_type.combinestrings.p u64 
    callproc       &mm_lib.deleteunit 
    jump           #20912     
#20914: 
#20913: 
    setargs                   1 0
    push           mm_type.combinestrings.clen i64 
    push           1          i64 
    add                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            mm_type.combinestrings.s u64 
    setargs                   3 0
    push           mm_type.combinestrings.alen u64 
    push           mm_type.combinestrings.a u64 
    push           16         
    pushptroff                u64 1 0
    push           mm_type.combinestrings.s u64 
    callproc       &memcpy    
    setargs                   3 0
    push           mm_type.combinestrings.blen u64 
    push           mm_type.combinestrings.b u64 
    push           16         
    pushptroff                u64 1 0
    push           mm_type.combinestrings.s u64 
    push           mm_type.combinestrings.alen i64 
    addrefoff                 u64 1 0
    callproc       &memcpy    
    push           0          u64 
    push           mm_type.combinestrings.s u64 
    push           mm_type.combinestrings.clen i64 
    popptroff                 u8 1 0
    setargs                   2 0
    push           mm_type.combinestrings.a u64 
    push           mm_type.combinestrings.p u64 
    callproc       &mm_lib.deleteunit 
    push           mm_type.combinestrings.clen i64 
    push           mm_type.combinestrings.p u64 
    push           40         
    popptroff                 u32 1 0
    push           mm_type.combinestrings.s u64 
    push           mm_type.combinestrings.p u64 
    push           16         
    popptroff                 u64 1 0
#20912: 
    retproc                   
End


Proc mm_type.tx_strinclude:
    param          mm_type.tx_strinclude.p u64 
    param          mm_type.tx_strinclude.a u64 
    local          mm_type.tx_strinclude.fileno i64 
    procentry                 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_strinclude.a u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_strinclude.a u64 
    pushptr                   u8 
    push           1          i64 
    jumpne         #20916     i64 
    push           mm_type.tx_strinclude.a u64 
    push           44         
    pushptroff                u8 1 0
    jumptrue       #20917     i64 
#20916: 
    setargs                   2 0
    push           0          u64 
    push           "strincl/not string" u64 
    callproc       &mm_support.txerror 
#20917: 
    setargs                   1 0
    push           mm_type.tx_strinclude.a u64 
    push           16         
    pushptroff                u64 1 0
    callfn         &mm_support.getsupportfile i64 
    pop            mm_type.tx_strinclude.fileno i64 
    push           &mm_decls.sourcefiletext 
    push           mm_type.tx_strinclude.fileno i64 
    pushptroff                u64 8 0
    push           mm_type.tx_strinclude.a u64 
    push           16         
    popptroff                 u64 1 0
    push           &mm_decls.sourcefilesizes 
    push           mm_type.tx_strinclude.fileno i64 
    pushptroff                i64 8 0
    push           mm_type.tx_strinclude.a u64 
    push           40         
    popptroff                 u32 1 0
    setargs                   2 0
    push           mm_type.tx_strinclude.a u64 
    push           mm_type.tx_strinclude.p u64 
    callproc       &mm_lib.deleteunit 
#20918: 
    retproc                   
End


Proc mm_export.writeexports:
    param          mm_export.writeexports.outfile u64 
    param          mm_export.writeexports.modulename u64 
    local          mm_export.writeexports.d u64 
    local          mm_export.writeexports.e u64 
    local          mm_export.writeexports.pp u64 
    local          mm_export.writeexports.filename block:300 
    local          mm_export.writeexports.f u64 
    local          mm_export.writeexports.i i64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Writing exports file to" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_export.writeexports.outfile u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           mm_export.dest u64 
    callproc       &mlibp.gs_init 
    setargs                   1 0
    push           "importlib $" u64 
    callproc       &mm_export.wxstr 
    setargs                   1 0
    push           mm_export.writeexports.modulename u64 
    callproc       &mm_export.wxstr 
    setargs                   1 0
    push           " ="       u64 
    callproc       &mm_export.wxstrln 
#20920: 
    push           33         i64 
    pop            mm_export.writeexports.i i64 
    push           mm_decls.ntypes i64 
    push           33         i64 
    jumplt         #20921     i64 
#20922: 
    push           &mm_decls.ttnamedef 
    push           mm_export.writeexports.i i64 
    pushptroff                u64 8 0
    pop            mm_export.writeexports.d u64 
    push           mm_export.writeexports.d u64 
    push           92         
    pushptroff                u16 1 0
    push           0          i64 
    push           1          i64 
    dotslice                  i64 
    push           2          i64 
    jumpne         #20923     i64 
    push           mm_export.writeexports.d u64 
    pushptr                   u64 
    pushptr                   u8 
    push           36         u64 
    jumpeq         #20923     u64 
    push           &mm_decls.ttbasetype 
    push           mm_export.writeexports.i i64 
    pushptroff                i32 4 0
    push           13         i64 
    casejumpeq     #20924     i64 0
    push           24         i64 
    casejumpeq     #20925     i64 0
    popstack                  i64 
    jump           #20926     
#20924: 
    setargs                   1 0
    push           mm_export.writeexports.d u64 
    callproc       &mm_export.exportrecord 
    jump           #20927     
#20925: 
    setargs                   1 0
    push           mm_export.writeexports.d u64 
    callproc       &mm_export.exportenum 
    jump           #20927     
#20926: 
    setargs                   1 0
    push           "    type " u64 
    callproc       &mm_export.wxstr 
    setargs                   1 0
    push           mm_export.writeexports.d u64 
    pushptr                   u64 
    callproc       &mm_export.wxstr 
    setargs                   1 0
    push           " = "      u64 
    callproc       &mm_export.wxstr 
    setargs                   1 0
    setargs                   2 0
    push           0          i64 
    push           mm_export.writeexports.d u64 
    push           72         
    pushptroff                i32 1 0
    callfn         &mm_lib.strmode u64 
    callproc       &mm_export.wxstr 
    setargs                   0 0
    callproc       &mm_export.wxline 
#20927: 
#20923: 
#20928: 
    forup          #20922     i64 1
    opnd           mm_export.writeexports.i 
    opnd           mm_decls.ntypes 
#20921: 
    push           mm_decls.staticlist u64 
    pop            mm_export.writeexports.pp u64 
    jump           #20929     
#20930: 
    push           mm_export.writeexports.pp u64 
    pushptr                   u64 
    pop            mm_export.writeexports.d u64 
    push           mm_export.writeexports.d u64 
    push           92         
    pushptroff                u16 1 0
    push           0          i64 
    push           1          i64 
    dotslice                  i64 
    push           2          i64 
    jumpne         #20931     i64 
    setargs                   1 0
    push           mm_export.writeexports.d u64 
    callproc       &mm_export.exportstatic 
#20931: 
    push           mm_export.writeexports.pp u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_export.writeexports.pp u64 
#20929: 
    push           mm_export.writeexports.pp u64 
    jumptrue       #20930     u64 
#20932: 
    push           mm_decls.staticlist u64 
    jumpfalse      #20933     u64 
    setargs                   0 0
    callproc       &mm_export.wxline 
#20933: 
    push           mm_decls.constlist u64 
    pop            mm_export.writeexports.pp u64 
    jump           #20934     
#20935: 
    push           mm_export.writeexports.pp u64 
    pushptr                   u64 
    pop            mm_export.writeexports.d u64 
    setargs                   1 0
    push           mm_export.writeexports.d u64 
    callproc       &mm_export.exportconst 
    push           mm_export.writeexports.pp u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_export.writeexports.pp u64 
#20934: 
    push           mm_export.writeexports.pp u64 
    jumptrue       #20935     u64 
#20936: 
    push           mm_decls.constlist u64 
    jumpfalse      #20937     u64 
    setargs                   0 0
    callproc       &mm_export.wxline 
#20937: 
    push           mm_decls.proclist u64 
    pop            mm_export.writeexports.pp u64 
    jump           #20938     
#20939: 
    push           mm_export.writeexports.pp u64 
    pushptr                   u64 
    pop            mm_export.writeexports.d u64 
    push           mm_export.writeexports.d u64 
    push           92         
    pushptroff                u16 1 0
    push           0          i64 
    push           1          i64 
    dotslice                  i64 
    push           2          i64 
    jumpne         #20940     i64 
    setargs                   1 0
    push           mm_export.writeexports.d u64 
    callproc       &mm_export.exportproc 
#20940: 
    push           mm_export.writeexports.pp u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_export.writeexports.pp u64 
#20938: 
    push           mm_export.writeexports.pp u64 
    jumptrue       #20939     u64 
#20941: 
    setargs                   1 0
    push           "end importlib" u64 
    callproc       &mm_export.wxstrln 
    setargs                   2 0
    push           "wb"       u64 
    push           mm_export.writeexports.outfile u64 
    callfn         &fopen     u64 
    pop            mm_export.writeexports.f u64 
    setargs                   2 0
    push           mm_export.writeexports.f u64 
    push           mm_export.dest u64 
    callproc       &mlibp.gs_println 
    setargs                   1 0
    push           mm_export.writeexports.f u64 
    callproc       &fclose    
#20942: 
    retproc                   
End


Proc mm_export.exportstatic:
    param          mm_export.exportstatic.d u64 
    procentry                 
    setargs                   1 0
    push           "    var " u64 
    callproc       &mm_export.wxstr 
    setargs                   1 0
    push           mm_export.exportstatic.d u64 
    push           72         
    pushptroff                i32 1 0
    callproc       &mm_export.wxmode 
    setargs                   1 0
    push           " "        u64 
    callproc       &mm_export.wxstr 
    setargs                   1 0
    push           mm_export.exportstatic.d u64 
    pushptr                   u64 
    callproc       &mm_export.wxstr 
    setargs                   0 0
    callproc       &mm_export.wxline 
#20944: 
    retproc                   
End


Proc mm_export.exportconst:
    param          mm_export.exportconst.d u64 
    procentry                 
    setargs                   1 0
    push           "    const " u64 
    callproc       &mm_export.wxstr 
    setargs                   1 0
    push           mm_export.exportconst.d u64 
    push           72         
    pushptroff                i32 1 0
    callproc       &mm_export.wxmode 
    setargs                   1 0
    push           " "        u64 
    callproc       &mm_export.wxstr 
    setargs                   1 0
    push           mm_export.exportconst.d u64 
    pushptr                   u64 
    callproc       &mm_export.wxstr 
    setargs                   1 0
    push           " = "      u64 
    callproc       &mm_export.wxstr 
    setargs                   2 0
    push           mm_export.exportconst.d u64 
    push           64         
    pushptroff                u64 1 0
    push           mm_export.dest u64 
    callproc       &mm_lib.jeval 
    setargs                   0 0
    callproc       &mm_export.wxline 
#20946: 
    retproc                   
End


Proc mm_export.exportproc:
    param          mm_export.exportproc.d u64 
    local          mm_export.exportproc.e u64 
    local          mm_export.exportproc.currmode i64 
    local          mm_export.exportproc.needcomma i64 
    procentry                 
    setargs                   1 0
    push           "    mlang " u64 
    callproc       &mm_export.wxstr 
    setargs                   1 0
    startmult                 
    push           mm_export.exportproc.d u64 
    push           72         
    pushptroff                i32 1 0
    push           0          i64 
    jumpne         #20948     i64 
    push           "proc     " u64 
    resetmult                 
    jump           #20949     
#20948: 
    push           "function " u64 
    endmult                   
#20949: 
    callproc       &mm_export.wxstr 
    setargs                   1 0
    push           mm_export.exportproc.d u64 
    pushptr                   u64 
    callproc       &mm_export.wxstr 
    setargs                   1 0
    push           "("        u64 
    callproc       &mm_export.wxstr 
    push           mm_export.exportproc.d u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_export.exportproc.e u64 
    push           0          i64 
    pop            mm_export.exportproc.needcomma i64 
    push           0          i64 
    pop            mm_export.exportproc.currmode i64 
    jump           #20950     
#20951: 
    push           mm_export.exportproc.e u64 
    push           78         
    pushptroff                u8 1 0
    push           13         i64 
    jumpne         #20952     i64 
    push           mm_export.exportproc.needcomma i64 
    jumpfalse      #20953     i64 
    setargs                   1 0
    push           ","        u64 
    callproc       &mm_export.wxstr 
#20953: 
    push           mm_export.exportproc.e u64 
    push           104        
    pushptroff                u8 1 0
    push           2          i64 
    jumpeq         #20954     i64 
    push           mm_export.exportproc.e u64 
    push           72         
    pushptroff                i32 1 0
    push           mm_export.exportproc.currmode i64 
    jumpeq         #20955     i64 
    setargs                   1 0
    push           mm_export.exportproc.e u64 
    push           72         
    pushptroff                i32 1 0
    callproc       &mm_export.wxmode 
    setargs                   1 0
    push           " "        u64 
    callproc       &mm_export.wxstr 
    push           mm_export.exportproc.e u64 
    push           72         
    pushptroff                i32 1 0
    pop            mm_export.exportproc.currmode i64 
#20955: 
    jump           #20956     
#20954: 
    setargs                   1 0
    push           &mm_decls.tttarget 
    push           mm_export.exportproc.e u64 
    push           72         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    callproc       &mm_export.wxmode 
    setargs                   1 0
    push           " &"       u64 
    callproc       &mm_export.wxstr 
    push           0          i64 
    pop            mm_export.exportproc.currmode i64 
#20956: 
    setargs                   1 0
    push           mm_export.exportproc.e u64 
    pushptr                   u64 
    callproc       &mm_export.wxstr 
    push           mm_export.exportproc.e u64 
    push           64         
    pushptroff                u64 1 0
    jumpfalse      #20957     u64 
    setargs                   1 0
    push           "="        u64 
    callproc       &mm_export.wxstr 
    push           &mm_decls.ttisref 
    push           mm_export.exportproc.e u64 
    push           72         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    jumpfalse      #20958     i64 
    push           mm_export.exportproc.e u64 
    push           64         
    pushptroff                u64 1 0
    pushptr                   u8 
    push           1          i64 
    jumpne         #20958     i64 
    push           mm_export.exportproc.e u64 
    push           64         
    pushptroff                u64 1 0
    push           16         
    pushptroff                i64 1 0
    push           0          i64 
    jumpne         #20958     i64 
    setargs                   1 0
    push           "nil"      u64 
    callproc       &mm_export.wxstr 
    jump           #20959     
#20958: 
    setargs                   2 0
    push           mm_export.exportproc.e u64 
    push           64         
    pushptroff                u64 1 0
    push           mm_export.dest u64 
    callproc       &mm_lib.jeval 
#20959: 
#20957: 
    push           1          i64 
    pop            mm_export.exportproc.needcomma i64 
#20952: 
    push           mm_export.exportproc.e u64 
    push           32         
    pushptroff                u64 1 0
    pop            mm_export.exportproc.e u64 
#20950: 
    push           mm_export.exportproc.e u64 
    jumptrue       #20951     u64 
#20960: 
    setargs                   1 0
    push           ")"        u64 
    callproc       &mm_export.wxstr 
    push           mm_export.exportproc.d u64 
    push           72         
    pushptroff                i32 1 0
    jumpfalse      #20961     i64 
    setargs                   1 0
    push           " => "     u64 
    callproc       &mm_export.wxstr 
    setargs                   1 0
    push           mm_export.exportproc.d u64 
    push           72         
    pushptroff                i32 1 0
    callproc       &mm_export.wxmode 
#20961: 
    setargs                   0 0
    callproc       &mm_export.wxline 
#20962: 
    retproc                   
End


Proc mm_export.exportenum:
    param          mm_export.exportenum.d u64 
    local          mm_export.exportenum.e u64 
    procentry                 
    setargs                   1 0
    push           "    type " u64 
    callproc       &mm_export.wxstr 
    setargs                   1 0
    push           mm_export.exportenum.d u64 
    pushptr                   u64 
    callproc       &mm_export.wxstr 
    setargs                   1 0
    push           " = enum(" u64 
    callproc       &mm_export.wxstr 
    push           mm_export.exportenum.d u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_export.exportenum.e u64 
    jump           #20964     
#20965: 
    setargs                   1 0
    push           mm_export.exportenum.e u64 
    pushptr                   u64 
    callproc       &mm_export.wxstr 
    setargs                   1 0
    push           "="        u64 
    callproc       &mm_export.wxstr 
    setargs                   2 0
    push           mm_export.exportenum.e u64 
    push           64         
    pushptroff                u64 1 0
    push           mm_export.dest u64 
    callproc       &mm_lib.jeval 
    push           mm_export.exportenum.e u64 
    push           32         
    pushptroff                u64 1 0
    pop            mm_export.exportenum.e u64 
    push           mm_export.exportenum.e u64 
    jumpfalse      #20966     u64 
    setargs                   1 0
    push           ", "       u64 
    callproc       &mm_export.wxstr 
#20966: 
#20964: 
    push           mm_export.exportenum.e u64 
    jumptrue       #20965     u64 
#20967: 
    setargs                   1 0
    push           ")"        u64 
    callproc       &mm_export.wxstrln 
#20968: 
    retproc                   
End


Proc mm_export.wxstr:
    param          mm_export.wxstr.s u64 
    procentry                 
    setargs                   2 0
    push           mm_export.wxstr.s u64 
    push           mm_export.dest u64 
    callproc       &mlibp.gs_str 
#20970: 
    retproc                   
End


Proc mm_export.wxstrln:
    param          mm_export.wxstrln.s u64 
    procentry                 
    setargs                   2 0
    push           mm_export.wxstrln.s u64 
    push           mm_export.dest u64 
    callproc       &mlibp.gs_strln 
#20972: 
    retproc                   
End


Proc mm_export.wxline:
    procentry                 
    setargs                   1 0
    push           mm_export.dest u64 
    callproc       &mlibp.gs_line 
#20974: 
    retproc                   
End


Proc mm_export.exportrecord:
    param          mm_export.exportrecord.d u64 
    local          mm_export.exportrecord.e u64 
    local          mm_export.exportrecord.flags u64 
    local          mm_export.exportrecord.flag i64 
    local          mm_export.exportrecord.indent i64 
    local          mm_export.exportrecord.av_1 i64 
    local          mm_export.exportrecord.av_2 i64 
    local          mm_export.exportrecord.av_3 i64 
    local          mm_export.exportrecord.av_4 i64 
    procentry                 
    push           mm_export.exportrecord.d u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_export.exportrecord.e u64 
    setargs                   1 0
    push           "    record " u64 
    callproc       &mm_export.wxstr 
    setargs                   1 0
    push           mm_export.exportrecord.d u64 
    pushptr                   u64 
    callproc       &mm_export.wxstr 
    setargs                   1 0
    push           " = "      u64 
    callproc       &mm_export.wxstr 
    setargs                   0 0
    callproc       &mm_export.wxline 
    push           2          i64 
    pop            mm_export.exportrecord.indent i64 
    jump           #20976     
#20977: 
    push           mm_export.exportrecord.e u64 
    push           78         
    pushptroff                u8 1 0
    push           14         i64 
    jumpne         #20978     i64 
    push           mm_export.exportrecord.e u64 
    push           104        
    addrefoff                 u64 1 0
    pop            mm_export.exportrecord.flags u64 
#20979: 
    push           mm_export.exportrecord.flags u64 
    pushptr                   u8 
    push           83         u64 
    casejumpeq     #20980     u64 0
    push           85         u64 
    casejumpeq     #20981     u64 0
    popstack                  u64 
    jump           #20982     
#20980: 
#20983: 
    push           mm_export.exportrecord.indent i64 
    pop            mm_export.exportrecord.av_1 i64 
    push           mm_export.exportrecord.av_1 i64 
    push           0          i64 
    jumple         #20984     i64 
#20985: 
    setargs                   1 0
    push           "    "     u64 
    callproc       &mm_export.wxstr 
#20986: 
    to             #20985     
    opnd           mm_export.exportrecord.av_1 
#20984: 
    setargs                   1 0
    push           "struct"   u64 
    callproc       &mm_export.wxstrln 
    push           &mm_export.exportrecord.indent 
    incr                      i64 1
    push           &mm_export.exportrecord.flags 
    incr                      u64 1
    jump           #20979     
#20981: 
#20987: 
    push           mm_export.exportrecord.indent i64 
    pop            mm_export.exportrecord.av_2 i64 
    push           mm_export.exportrecord.av_2 i64 
    push           0          i64 
    jumple         #20988     i64 
#20989: 
    setargs                   1 0
    push           "    "     u64 
    callproc       &mm_export.wxstr 
#20990: 
    to             #20989     
    opnd           mm_export.exportrecord.av_2 
#20988: 
    setargs                   1 0
    push           "union"    u64 
    callproc       &mm_export.wxstrln 
    push           &mm_export.exportrecord.indent 
    incr                      i64 1
    push           &mm_export.exportrecord.flags 
    incr                      u64 1
    jump           #20979     
#20982: 
    jump           #20991     
    jump           #20979     
#20991: 
#20992: 
    push           mm_export.exportrecord.indent i64 
    pop            mm_export.exportrecord.av_3 i64 
    push           mm_export.exportrecord.av_3 i64 
    push           0          i64 
    jumple         #20993     i64 
#20994: 
    setargs                   1 0
    push           "    "     u64 
    callproc       &mm_export.wxstr 
#20995: 
    to             #20994     
    opnd           mm_export.exportrecord.av_3 
#20993: 
    setargs                   1 0
    push           mm_export.exportrecord.e u64 
    push           72         
    pushptroff                i32 1 0
    callproc       &mm_export.wxmode 
    setargs                   1 0
    push           " "        u64 
    callproc       &mm_export.wxstr 
    setargs                   1 0
    push           mm_export.exportrecord.e u64 
    pushptr                   u64 
    callproc       &mm_export.wxstrln 
#20996: 
    push           &mm_export.exportrecord.flags 
    loadincr                  u64 1
    pushptr                   u8 
    pop            mm_export.exportrecord.flag i64 
    push           mm_export.exportrecord.flag i64 
    push           42         i64 
    casejumpeq     #20997     i64 0
    push           69         i64 
    casejumpeq     #20998     i64 0
    popstack                  i64 
    jump           #20999     
#20997: 
    jump           #21000     
#20998: 
    push           &mm_export.exportrecord.indent 
    decr                      i64 1
#21001: 
    push           mm_export.exportrecord.indent i64 
    pop            mm_export.exportrecord.av_4 i64 
    push           mm_export.exportrecord.av_4 i64 
    push           0          i64 
    jumple         #21002     i64 
#21003: 
    setargs                   1 0
    push           "    "     u64 
    callproc       &mm_export.wxstr 
#21004: 
    to             #21003     
    opnd           mm_export.exportrecord.av_4 
#21002: 
    setargs                   1 0
    push           "end"      u64 
    callproc       &mm_export.wxstrln 
    jump           #21000     
#20999: 
    jump           #21005     
#21000: 
    jump           #20996     
#21005: 
#20978: 
    push           mm_export.exportrecord.e u64 
    push           32         
    pushptroff                u64 1 0
    pop            mm_export.exportrecord.e u64 
#20976: 
    push           mm_export.exportrecord.e u64 
    jumptrue       #20977     u64 
#21006: 
    setargs                   1 0
    push           "    end"  u64 
    callproc       &mm_export.wxstrln 
    setargs                   0 0
    callproc       &mm_export.wxline 
#21007: 
    retproc                   
End


Proc mm_export.wxmode:
    param          mm_export.wxmode.mode i64 
    local          mm_export.wxmode.name u64 
    procentry                 
    push           mm_export.wxmode.mode i64 
    push           33         i64 
    jumplt         #21009     i64 
    push           &mm_decls.ttnamedef 
    push           mm_export.wxmode.mode i64 
    pushptroff                u64 8 0
    pushptr                   u64 
    pop            mm_export.wxmode.name u64 
    push           mm_export.wxmode.name u64 
    pushptr                   u8 
    push           36         u64 
    jumpeq         #21010     u64 
    setargs                   1 0
    push           mm_export.wxmode.name u64 
    callproc       &mm_export.wxstr 
    jump           #21011     
#21010: 
#21009: 
    setargs                   1 0
    setargs                   2 0
    push           0          i64 
    push           mm_export.wxmode.mode i64 
    callfn         &mm_lib.strmode u64 
    callproc       &mm_export.wxstr 
#21011: 
    retproc                   
End


Proc mm.start::
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$init 
    setargs                   0 0
    callproc       &mm_type.$init i64 
    setargs                   0 0
    callproc       &mm_genpcl.$init i64 
    setargs                   4 0
    push           0          u64 
    push           0          u64 
    push           "mlibp"    u64 
    push           "mlib"     u64 
    callproc       &mm_start.addmodulemapping 
    setargs                   4 0
    push           0          u64 
    push           0          u64 
    push           "mclib"    u64 
    push           "clib"     u64 
    callproc       &mm_start.addmodulemapping 
    setargs                   4 0
    push           0          u64 
    push           0          u64 
    push           "mwindowsp" u64 
    push           "oslib"    u64 
    callproc       &mm_start.addmodulemapping 
    setargs                   4 0
    push           0          u64 
    push           0          u64 
    push           "mwindllc" u64 
    push           "osdll"    u64 
    callproc       &mm_start.addmodulemapping 
    setargs                   2 0
    push           3421784    i64 
    push           87         i64 
    callproc       &mm_start.start_common 
#21013: 
    push           0          
    stop                      
    retproc                   
End


Endprogram
