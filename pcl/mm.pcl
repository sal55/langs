Extproc malloc u64
    extparam                  u64 
Endext

Extproc realloc u64
    extparam                  u64 
    extparam                  u64 
Endext

Extproc free
    extparam                  u64 
Endext

Extproc memset
    extparam                  u64 
    extparam                  i32 
    extparam                  u64 
Endext

Extproc memcpy
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
Endext

Extproc clock i32
Endext

Extproc ftell i32
    extparam                  u64 
Endext

Extproc fseek i32
    extparam                  u64 
    extparam                  i32 
    extparam                  i32 
Endext

Extproc fread u64
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
Endext

Extproc fwrite u64
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
Endext

Extproc ungetc i32
    extparam                  i32 
    extparam                  u64 
Endext

Extproc fopen u64
    extparam                  u64 
    extparam                  u64 
Endext

Extproc fclose i32
    extparam                  u64 
Endext

Extproc fgets u64
    extparam                  u64 
    extparam                  i64 
    extparam                  u64 
Endext

Extproc remove i32
    extparam                  u64 
Endext

Extproc getchar i32
Endext

Extproc strlen i64
    extparam                  u64 
Endext

Extproc strcpy u64
    extparam                  u64 
    extparam                  u64 
Endext

Extproc strcmp i32
    extparam                  u64 
    extparam                  u64 
Endext

Extproc strncmp i32
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
Endext

Extproc strncpy u64
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
Endext

Extproc memcmp i32
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
Endext

Extproc strcat u64
    extparam                  u64 
    extparam                  u64 
Endext

Extproc tolower i32
    extparam                  i32 
Endext

Extproc toupper i32
    extparam                  i32 
Endext

Extproc strtod r64
    extparam                  u64 
    extparam                  u64 
Endext

Extproc puts i32
    extparam                  u64 
Endext

Extproc printf i32
    extparam                  u64 
    extvariadics              
Endext

Extproc sprintf i32
    extparam                  u64 
    extparam                  u64 
    extvariadics              
Endext

Extproc sscanf i32
    extparam                  u64 
    extparam                  u64 
    extvariadics              
Endext

Extproc system i32
    extparam                  u64 
Endext

Extproc fgetc i32
    extparam                  u64 
Endext

Extproc fputc i32
    extparam                  i32 
    extparam                  u64 
Endext

Extproc fprintf i32
    extparam                  u64 
    extparam                  u64 
    extvariadics              
Endext

Extproc strchr u64
    extparam                  u64 
    extparam                  i32 
Endext

Extproc __getmainargs i32
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
    extparam                  i64 
    extparam                  u64 
Endext

Extproc `GetStdHandle u64
    extparam                  u32 
Endext

Extproc `SetConsoleCtrlHandler i64
    extparam                  u64 
    extparam                  i64 
Endext

Extproc `SetConsoleMode i64
    extparam                  u64 
    extparam                  u32 
Endext

Extproc `CreateProcessA i64
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
    extparam                  i64 
    extparam                  u32 
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
Endext

Extproc `GetLastError u32
Endext

Extproc `WaitForSingleObject u32
    extparam                  u64 
    extparam                  u32 
Endext

Extproc `GetExitCodeProcess i64
    extparam                  u64 
    extparam                  u64 
Endext

Extproc `CloseHandle i64
    extparam                  u64 
Endext

Extproc `GetNumberOfConsoleInputEvents i64
    extparam                  u64 
    extparam                  u64 
Endext

Extproc `FlushConsoleInputBuffer i64
    extparam                  u64 
Endext

Extproc `LoadLibraryA u64
    extparam                  u64 
Endext

Extproc `GetProcAddress u64
    extparam                  u64 
    extparam                  u64 
Endext

Extproc `LoadCursorA u64
    extparam                  u64 
    extparam                  u64 
Endext

Extproc `RegisterClassExA u32
    extparam                  u64 
Endext

Extproc `DefWindowProcA i64
    extparam                  u64 
    extparam                  u32 
    extparam                  u64 
    extparam                  u64 
Endext

Extproc `ReadConsoleInputA i64
    extparam                  u64 
    extparam                  u64 
    extparam                  u32 
    extparam                  u64 
Endext

Extproc `Sleep
    extparam                  u32 
Endext

Extproc `GetModuleFileNameA u32
    extparam                  u64 
    extparam                  u64 
    extparam                  u32 
Endext

Extproc `MessageBoxA
    extparam                  i32 
    extparam                  u64 
    extparam                  u64 
    extparam                  i32 
Endext

Extproc `QueryPerformanceCounter u32
    extparam                  u64 
Endext

Extproc `QueryPerformanceFrequency u32
    extparam                  u64 
Endext

Extproc `CreateFileA u64
    extparam                  u64 
    extparam                  u32 
    extparam                  u32 
    extparam                  u64 
    extparam                  u32 
    extparam                  u32 
    extparam                  u64 
Endext

Extproc `GetFileTime u32
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
    extparam                  u64 
Endext

Extproc `GetLocalTime
    extparam                  u64 
Endext

Extproc `GetTickCount64 u64
Endext

Extproc `PeekMessageA u32
    extparam                  u64 
    extparam                  u64 
    extparam                  u32 
    extparam                  u32 
    extparam                  u32 
Endext

    zstatic        mm_decls.searchdirs: block:80 
    istatic        mm_decls.nsearchdirs: i64 
    data           0          u64 
    zstatic        mm_decls.stprogram: u64 
    zstatic        mm_decls.stmodule: u64 
    zstatic        mm_decls.stsysmodule: u64 
    zstatic        mm_decls.alldeflist: u64 
    zstatic        mm_decls.lx: block:16 
    zstatic        mm_decls.moduletable: block:91656 
    zstatic        mm_decls.inputfiles: block:1608 
    zstatic        mm_decls.libfiles: block:408 
    zstatic        mm_decls.sourcefilenames: block:8008 
    zstatic        mm_decls.sourcefilepaths: block:8008 
    zstatic        mm_decls.sourcefiletext: block:8008 
    zstatic        mm_decls.sourcefilesizes: block:8008 
    zstatic        mm_decls.issupportfile: block:1001 
    zstatic        mm_decls.nmodules: i64 
    zstatic        mm_decls.nsourcefiles: i64 
    zstatic        mm_decls.ninputfiles: i64 
    zstatic        mm_decls.nlibfiles: i64 
    zstatic        mm_decls.mafilenames: block:8008 
    zstatic        mm_decls.mafilesizes: block:8008 
    zstatic        mm_decls.mafileoffsets: block:8008 
    zstatic        mm_decls.mafiletext: block:8008 
    zstatic        mm_decls.mafilefileno: block:1001 
    zstatic        mm_decls.mafilesupport: block:1001 
    zstatic        mm_decls.nmafiles: i64 
    zstatic        mm_decls.mafilesource: u64 
    zstatic        mm_decls.currmodule: u64 
    zstatic        mm_decls.currmoduleno: i64 
    zstatic        mm_decls.ntypes: i64 
    zstatic        mm_decls.ttnamedef: block:48008 
    zstatic        mm_decls.ttowner: block:48008 
    zstatic        mm_decls.ttbasetype: block:24004 
    zstatic        mm_decls.ttname: block:48008 
    zstatic        mm_decls.ttsize: block:24004 
    zstatic        mm_decls.ttsizeset: block:6001 
    zstatic        mm_decls.ttlower: block:24004 
    zstatic        mm_decls.ttlength: block:24004 
    zstatic        mm_decls.ttmult: block:48008 
    zstatic        mm_decls.ttdimexpr: block:48008 
    zstatic        mm_decls.tttarget: block:24004 
    zstatic        mm_decls.ttkeytype: block:24004 
    zstatic        mm_decls.ttusercat: block:6001 
    zstatic        mm_decls.ttlineno: block:24004 
    zstatic        mm_decls.ttisint: block:6001 
    zstatic        mm_decls.ttisword: block:6001 
    zstatic        mm_decls.ttisreal: block:6001 
    zstatic        mm_decls.ttisinteger: block:6001 
    zstatic        mm_decls.ttisallnum: block:6001 
    zstatic        mm_decls.ttismainnum: block:6001 
    zstatic        mm_decls.ttisshort: block:6001 
    zstatic        mm_decls.ttisref: block:6001 
    zstatic        mm_decls.typenames: block:384032 
    zstatic        mm_decls.typenamepos: block:48004 
    zstatic        mm_decls.ntypenames: i64 
    zstatic        mm_decls.typestarterset: block:6001 
    zstatic        mm_decls.currproc: u64 
    istatic        mm_decls.alineno: i64 
    data           0          u64 
    istatic        mm_decls.debug: i64 
    data           0          u64 
    istatic        mm_decls.assemmode: i64 
    data           0          u64 
    zstatic        mm_decls.proclist: u64 
    zstatic        mm_decls.proclistx: u64 
    zstatic        mm_decls.staticlist: u64 
    zstatic        mm_decls.staticlistx: u64 
    zstatic        mm_decls.constlist: u64 
    zstatic        mm_decls.constlistx: u64 
    zstatic        mm_decls.nunits: i64 
    zstatic        mm_decls.genericmodules: block:200 
    zstatic        mm_decls.actualmodules: block:200 
    zstatic        mm_decls.nmodulemap: i64 
    zstatic        mm_decls.nullunit: u64 
    istatic        mm_decls.targetbits: i64 
    data           64         u64 
    istatic        mm_decls.targetsize: i64 
    data           8          u64 
    zstatic        mm_decls.docstrings: block:160 
    zstatic        mm_decls.ndocstrings: i64 
    zstatic        mm_decls.ndllnametable: i64 
    zstatic        mm_decls.ndllproctable: i64 
    zstatic        mm_decls.dllnametable: block:400 
    zstatic        mm_decls.dllinsttable: block:400 
    zstatic        mm_decls.dllproctable: block:12000 
    istatic        mm_decls.fverbose: i64 
    data           1          u64 
    istatic        mm_decls.msyslevel: i64 
    data           2          u64 
    istatic        mm_decls.fvarnames: u8 
    data           0          u8 
    istatic        mm_decls.fbundled: u8 
    data           0          u8 
    zstatic        mm_decls.fwritema: u8 
    zstatic        mm_decls.fwriteexports: u8 
    zstatic        mm_decls.fwritedocs: u8 
    zstatic        mm_decls.fexe: u8 
    zstatic        mm_decls.fobj: u8 
    zstatic        mm_decls.fwritelibs: u8 
    zstatic        mm_decls.fshowtiming: u8 
    zstatic        mm_decls.fshowss: u8 
    zstatic        mm_decls.fshowpcl: u8 
    zstatic        mm_decls.fshowasm: u8 
    zstatic        mm_decls.fshowast1: u8 
    zstatic        mm_decls.fshowast2: u8 
    zstatic        mm_decls.fshowast3: u8 
    zstatic        mm_decls.fshowst: u8 
    zstatic        mm_decls.fshowstflat: u8 
    zstatic        mm_decls.fshowtypes: u8 
    zstatic        mm_decls.fshowoverloads: u8 
    zstatic        mm_decls.foptim: u8 
    istatic        mm_decls.fcheckunusedlocals: u8 
    data           0          u8 
    zstatic        mm_decls.fwindows: u8 
    zstatic        mm_decls.flinux: u8 
    zstatic        mm_decls.fx64: u8 
    zstatic        mm_decls.fssonly: u8 
    zstatic        mm_decls.fnofile: u8 
    istatic        mm_decls.dointlibs: u8 
    data           1          u8 
    istatic        mm_decls.passnames: block:104 
    data           "load_pass" u64 
    data           "parse_pass" u64 
    data           "fixup_pass" u64 
    data           "name_pass" u64 
    data           "type_pass" u64 
    data           "pcl_pass" u64 
    data           "mcl_pass" u64 
    data           "asm_pass" u64 
    data           "obj_pass" u64 
    data           "exe_pass" u64 
    data           "dll_pass" u64 
    data           "run_pass" u64 
    data           "clang_pass" u64 
    istatic        mm_decls.passlevel: i64 
    data           0          u64 
    istatic        mm_decls.prodmode: i64 
    data           0          u64 
    istatic        mm_decls.debugmode: i64 
    data           0          u64 
    zstatic        mm_decls.outfile: u64 
    zstatic        mm_decls.destfilename: u64 
    zstatic        mm_decls.destfilepath: u64 
    zstatic        mm_decls.asmfilename: u64 
    zstatic        mm_decls.pclfilename: u64 
    zstatic        mm_decls.exefilename: u64 
    zstatic        mm_decls.dllfilename: u64 
    zstatic        mm_decls.objfilename: u64 
    zstatic        mm_decls.mafilename: u64 
    zstatic        mm_decls.expfilename: u64 
    zstatic        mm_decls.extendtypelist: u64 
    zstatic        mm_decls.overloadtable: block:1152 
    zstatic        mm_decls.cclibtable: block:80 
    zstatic        mm_decls.ncclibs: i64 
    zstatic        mm_decls.infotext: u64 
    istatic        mm_tables.stdnames: block:272 
    data           "void"     u64 
    data           "c64"      u64 
    data           "u64"      u64 
    data           "u128"     u64 
    data           "i64"      u64 
    data           "i128"     u64 
    data           "r32"      u64 
    data           "r64"      u64 
    data           "range"    u64 
    data           "ref"      u64 
    data           "ichar"    u64 
    data           "array"    u64 
    data           "slice"    u64 
    data           "rec"      u64 
    data           "block"    u64 
    data           "short"    u64 
    data           "c8"       u64 
    data           "c16"      u64 
    data           "i8"       u64 
    data           "i16"      u64 
    data           "i32"      u64 
    data           "u8"       u64 
    data           "u16"      u64 
    data           "u32"      u64 
    data           "enum"     u64 
    data           "auto"     u64 
    data           "any"      u64 
    data           "proc"     u64 
    data           "label"    u64 
    data           "type"     u64 
    data           "bitfl"    u64 
    data           "tuple"    u64 
    data           "pend"     u64 
    data           "last "    u64 
    istatic        mm_tables.stdbits: block:34 
    data           0          u8 
    data           64         u8 
    data           64         u8 
    data           128        u8 
    data           64         u8 
    data           128        u8 
    data           32         u8 
    data           64         u8 
    data           128        u8 
    data           64         u8 
    data           64         u8 
    data           0          u8 
    data           128        u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           8          u8 
    data           16         u8 
    data           8          u8 
    data           16         u8 
    data           32         u8 
    data           8          u8 
    data           16         u8 
    data           32         u8 
    data           64         u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           64         u8 
    data           8          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    istatic        mm_tables.stdcodes: block:34 
    data           0          u8 
    data           67         u8 
    data           85         u8 
    data           85         u8 
    data           73         u8 
    data           73         u8 
    data           82         u8 
    data           82         u8 
    data           71         u8 
    data           80         u8 
    data           80         u8 
    data           65         u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           67         u8 
    data           67         u8 
    data           73         u8 
    data           73         u8 
    data           73         u8 
    data           85         u8 
    data           85         u8 
    data           85         u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    istatic        mm_tables.stdtopcl: block:34 
    data           0          u8 
    data           4          u8 
    data           4          u8 
    data           5          u8 
    data           9          u8 
    data           10         u8 
    data           11         u8 
    data           12         u8 
    data           5          u8 
    data           4          u8 
    data           4          u8 
    data           13         u8 
    data           5          u8 
    data           13         u8 
    data           13         u8 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           6          u8 
    data           7          u8 
    data           8          u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           4          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    zstatic        mm_tables.trefproc: i64 
    zstatic        mm_tables.treflabel: i64 
    istatic        mm_tables.typerank: block:56 
    data           1          u64 
    data           2          u64 
    data           4          u64 
    data           3          u64 
    data           5          u64 
    data           6          u64 
    data           7          u64 
    istatic        mm_tables.sysfnnames: block:256 
    data           "sysfn_init" u64 
    data           "sysfn_print_startfile" u64 
    data           "sysfn_print_startstr" u64 
    data           "sysfn_print_startptr" u64 
    data           "sysfn_print_startcon" u64 
    data           "sysfn_print_setfmt" u64 
    data           "sysfn_print_nogap" u64 
    data           "sysfn_print_space" u64 
    data           "sysfn_print_i64" u64 
    data           "sysfn_print_i64_nf" u64 
    data           "sysfn_print_u64" u64 
    data           "sysfn_print_r64" u64 
    data           "sysfn_print_r32" u64 
    data           "sysfn_print_i128" u64 
    data           "sysfn_print_u128" u64 
    data           "sysfn_print_str" u64 
    data           "sysfn_print_str_nf" u64 
    data           "sysfn_print_strsl" u64 
    data           "sysfn_print_ptr" u64 
    data           "sysfn_print_ptr_nf" u64 
    data           "sysfn_print_c8" u64 
    data           "sysfn_print_newline" u64 
    data           "sysfn_print_end" u64 
    data           "sysfn_read_i64" u64 
    data           "sysfn_read_r64" u64 
    data           "sysfn_read_str" u64 
    data           "sysfn_read_fileline" u64 
    data           "sysfn_read_strline" u64 
    data           "sysfn_read_conline" u64 
    data           "sysfn_getnprocs" u64 
    data           "sysfn_getprocname" u64 
    data           "sysfn_getprocaddr" u64 
    istatic        mm_tables.sysfnparams: block:32 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    istatic        mm_tables.sysfnres: block:32 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    zstatic        mm_tables.sysfnhandlers: block:256 
    zstatic        mm_tables.sysfnproclabels: block:256 
    zstatic        mm_tables.mlineno: i64 
    zstatic        mm_tables.fshowpst: u8 
    istatic        mm_tables.jtagnames: block:1152 
    data           "j_none"   u64 
    data           "j_const"  u64 
    data           "j_null"   u64 
    data           "j_name"   u64 
    data           "j_namelv" u64 
    data           "j_block"  u64 
    data           "j_stmtblock" u64 
    data           "j_decimal" u64 
    data           "j_assem"  u64 
    data           "j_assemmacro" u64 
    data           "j_assemreg" u64 
    data           "j_assemxreg" u64 
    data           "j_assemmem" u64 
    data           "j_strinclude" u64 
    data           "j_andl"   u64 
    data           "j_orl"    u64 
    data           "j_xorl"   u64 
    data           "j_notl"   u64 
    data           "j_istruel" u64 
    data           "j_makelist" u64 
    data           "j_makerange" u64 
    data           "j_makeset" u64 
    data           "j_makedict" u64 
    data           "j_makeslice" u64 
    data           "j_exprlist" u64 
    data           "j_multexpr" u64 
    data           "j_returnmult" u64 
    data           "j_keyword" u64 
    data           "j_keyvalue" u64 
    data           "j_assign" u64 
    data           "j_deepcopy" u64 
    data           "j_callfn" u64 
    data           "j_new"    u64 
    data           "j_destroy" u64 
    data           "j_cmp"    u64 
    data           "j_cmpchain" u64 
    data           "j_bin"    u64 
    data           "j_unary"  u64 
    data           "j_binto"  u64 
    data           "j_unaryto" u64 
    data           "j_incr"   u64 
    data           "j_inrev"  u64 
    data           "j_inrange" u64 
    data           "j_inset"  u64 
    data           "j_clamp"  u64 
    data           "j_flexptr" u64 
    data           "j_stringz" u64 
    data           "j_sliceptr" u64 
    data           "j_index"  u64 
    data           "j_indexlv" u64 
    data           "j_slice"  u64 
    data           "j_dot"    u64 
    data           "j_dotlv"  u64 
    data           "j_dotindex" u64 
    data           "j_dotslice" u64 
    data           "j_anddotslice" u64 
    data           "j_anddotindex" u64 
    data           "j_ptr"    u64 
    data           "j_ptrlv"  u64 
    data           "j_addrof" u64 
    data           "j_addroffirst" u64 
    data           "j_convert" u64 
    data           "j_shorten" u64 
    data           "j_autocast" u64 
    data           "j_typepun" u64 
    data           "j_typeconst" u64 
    data           "j_operator" u64 
    data           "j_upper"  u64 
    data           "j_bitwidth" u64 
    data           "j_bytesize" u64 
    data           "j_typeof" u64 
    data           "j_typestr" u64 
    data           "j_bitfield" u64 
    data           "j_minvalue" u64 
    data           "j_maxvalue" u64 
    data           "j_cvlineno" u64 
    data           "j_cvstrlineno" u64 
    data           "j_cvmodulename" u64 
    data           "j_cvfilename" u64 
    data           "j_cvfunction" u64 
    data           "j_cvdate" u64 
    data           "j_cvtime" u64 
    data           "j_cvversion" u64 
    data           "j_cvtypename" u64 
    data           "j_cvtargetbits" u64 
    data           "j_cvtargetsize" u64 
    data           "j_cvtargetcode" u64 
    data           "j_cvnil"  u64 
    data           "j_cvpi"   u64 
    data           "j_cvtrue" u64 
    data           "j_cvfalse" u64 
    data           "j_whenthen" u64 
    data           "j_elsif"  u64 
    data           "j_fmtitem" u64 
    data           "j_nogap"  u64 
    data           "j_space"  u64 
    data           "j_callproc" u64 
    data           "j_return" u64 
    data           "j_syscall" u64 
    data           "j_to"     u64 
    data           "j_if"     u64 
    data           "j_longif" u64 
    data           "j_forup"  u64 
    data           "j_fordown" u64 
    data           "j_forall" u64 
    data           "j_forallrev" u64 
    data           "j_while"  u64 
    data           "j_repeat" u64 
    data           "j_goto"   u64 
    data           "j_labeldef" u64 
    data           "j_restart" u64 
    data           "j_redo"   u64 
    data           "j_next"   u64 
    data           "j_exit"   u64 
    data           "j_do"     u64 
    data           "j_case"   u64 
    data           "j_docase" u64 
    data           "j_switch" u64 
    data           "j_doswitch" u64 
    data           "j_swap"   u64 
    data           "j_select" u64 
    data           "j_recase" u64 
    data           "j_print"  u64 
    data           "j_println" u64 
    data           "j_fprint" u64 
    data           "j_fprintln" u64 
    data           "j_cprint" u64 
    data           "j_cprintln" u64 
    data           "j_sprint" u64 
    data           "j_sfprint" u64 
    data           "j_read"   u64 
    data           "j_readln" u64 
    data           "j_sread"  u64 
    data           "j_sreadln" u64 
    data           "j_stop"   u64 
    data           "j_try"    u64 
    data           "j_except" u64 
    data           "j_yield"  u64 
    data           "j_raise"  u64 
    data           "j_eval"   u64 
    data           "j_stack"  u64 
    data           "j_unstack" u64 
    data           "j_empty"  u64 
    data           "j_dummy"  u64 
    istatic        mm_tables.jisexpr: block:144 
    data           0          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           0          u8 
    data           0          u8 
    data           3          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           1          u8 
    data           1          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           0          u8 
    data           2          u8 
    data           1          u8 
    data           2          u8 
    data           1          u8 
    data           2          u8 
    data           1          u8 
    data           3          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           1          u8 
    data           1          u8 
    data           3          u8 
    data           1          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           0          u8 
    data           0          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           3          u8 
    data           3          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           3          u8 
    data           0          u8 
    data           3          u8 
    data           0          u8 
    data           0          u8 
    data           3          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           3          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           3          u8 
    istatic        mm_tables.bitfieldnames: block:64 
    data           "bf_msb"   u64 
    data           "bf_lsb"   u64 
    data           "bf_msbit" u64 
    data           "bf_lsbit" u64 
    data           "bf_msw"   u64 
    data           "bf_lsw"   u64 
    data           "bf_odd"   u64 
    data           "bf_even"  u64 
    istatic        mm_tables.optypenames: block:32 
    data           "no_op"    u64 
    data           "bin_op"   u64 
    data           "mon_op"   u64 
    data           "prop_op"  u64 
    istatic        mm_tables.symbolnames: block:1424 
    data           "errorsym" u64 
    data           "."        u64 
    data           "lexdotsym" u64 
    data           "&."       u64 
    data           ","        u64 
    data           ";"        u64 
    data           ":"        u64 
    data           "::"       u64 
    data           ":="       u64 
    data           "::="      u64 
    data           "=>"       u64 
    data           "("        u64 
    data           ")"        u64 
    data           "["        u64 
    data           "]"        u64 
    data           "{"        u64 
    data           "}"        u64 
    data           "^"        u64 
    data           "|"        u64 
    data           "||"       u64 
    data           "@"        u64 
    data           "@@"       u64 
    data           "?"        u64 
    data           "&"        u64 
    data           "&&"       u64 
    data           "~"        u64 
    data           ".."       u64 
    data           "..."      u64 
    data           "#"        u64 
    data           "+"        u64 
    data           "-"        u64 
    data           "*"        u64 
    data           "/"        u64 
    data           "%"        u64 
    data           "rem"      u64 
    data           "iand"     u64 
    data           "ior"      u64 
    data           "ixor"     u64 
    data           "<<"       u64 
    data           ">>"       u64 
    data           "min"      u64 
    data           "max"      u64 
    data           "and"      u64 
    data           "or"       u64 
    data           "xor"      u64 
    data           "="        u64 
    data           "cmp"      u64 
    data           "**"       u64 
    data           "=="       u64 
    data           "in"       u64 
    data           "notin"    u64 
    data           "inrev"    u64 
    data           "$neg"     u64 
    data           "not"      u64 
    data           "istrue"   u64 
    data           "inot"     u64 
    data           "abs"      u64 
    data           "sign"     u64 
    data           "sqrt"     u64 
    data           "sqr"      u64 
    data           "propsym"  u64 
    data           "mathsopsym" u64 
    data           "maths2opsym" u64 
    data           "bitfieldsym" u64 
    data           "eolsym"   u64 
    data           "eofsym"   u64 
    data           "rawxnamesym" u64 
    data           "docstringsym" u64 
    data           "incrsym"  u64 
    data           "intconstsym" u64 
    data           "decimalconstsym" u64 
    data           "realconstsym" u64 
    data           "charconstsym" u64 
    data           "wcharconstsym" u64 
    data           "stringconstsym" u64 
    data           "astringconstsym" u64 
    data           "wstringconstsym" u64 
    data           "unitnamesym" u64 
    data           "namesym"  u64 
    data           "ksourcedirsym" u64 
    data           "kstrincludesym" u64 
    data           "regsym"   u64 
    data           "xregsym"  u64 
    data           "fregsym"  u64 
    data           "mregsym"  u64 
    data           "jmpccsym" u64 
    data           "setccsym" u64 
    data           "movccsym" u64 
    data           "segnamesym" u64 
    data           "asmopcodesym" u64 
    data           "stdtypesym" u64 
    data           "machinetypesym" u64 
    data           "ktypeofsym" u64 
    data           "ksubrangesym" u64 
    data           "koutsym"  u64 
    data           "kicharsym" u64 
    data           "kifsym"   u64 
    data           "kthensym" u64 
    data           "kelsifsym" u64 
    data           "kelsesym" u64 
    data           "kelsecasesym" u64 
    data           "kelseswitchsym" u64 
    data           "kelseselectsym" u64 
    data           "kendsym"  u64 
    data           "kunlesssym" u64 
    data           "kcasesym" u64 
    data           "kdocasesym" u64 
    data           "krecasesym" u64 
    data           "kwhensym" u64 
    data           "kforsym"  u64 
    data           "ktosym"   u64 
    data           "kbysym"   u64 
    data           "kdosym"   u64 
    data           "kwhilesym" u64 
    data           "krepeatsym" u64 
    data           "kuntilsym" u64 
    data           "kreturnsym" u64 
    data           "kstopsym" u64 
    data           "kloopsym" u64 
    data           "kstepsym" u64 
    data           "kgotosym" u64 
    data           "kswitchsym" u64 
    data           "kdoswitchsym" u64 
    data           "kprintsym" u64 
    data           "ksprintsym" u64 
    data           "kreadsym" u64 
    data           "ksreadsym" u64 
    data           "ksreadlnsym" u64 
    data           "kprocsym" u64 
    data           "kfunctionsym" u64 
    data           "klabelsym" u64 
    data           "krecordsym" u64 
    data           "kstructsym" u64 
    data           "kunionsym" u64 
    data           "kimportsym" u64 
    data           "kimportmodulesym" u64 
    data           "kimportpathsym" u64 
    data           "kmapmodulesym" u64 
    data           "ktypesym" u64 
    data           "ktypealiassym" u64 
    data           "kextendtypesym" u64 
    data           "krefsym"  u64 
    data           "kmutsym"  u64 
    data           "kletsym"  u64 
    data           "kslicesym" u64 
    data           "karraysym" u64 
    data           "kdictsym" u64 
    data           "kmacrosym" u64 
    data           "kexpandsym" u64 
    data           "koperatorsym" u64 
    data           "kconstsym" u64 
    data           "kenumsym" u64 
    data           "knewsym"  u64 
    data           "kdestroysym" u64 
    data           "kclearsym" u64 
    data           "kclasssym" u64 
    data           "kfflangsym" u64 
    data           "kglobalsym" u64 
    data           "kstaticsym" u64 
    data           "ktrysym"  u64 
    data           "kexceptsym" u64 
    data           "kfinallysym" u64 
    data           "kraisesym" u64 
    data           "kyieldsym" u64 
    data           "kcastsym" u64 
    data           "ktypeconstsym" u64 
    data           "compilervarsym" u64 
    data           "dollarsym" u64 
    data           "kevalsym" u64 
    data           "ktabledatasym" u64 
    data           "kstacksym" u64 
    data           "kclampsym" u64 
    data           "kswapsym" u64 
    data           "kerrorsym" u64 
    data           "kassemsym" u64 
    data           "ksyscallsym" u64 
    data           "kemptysym" u64 
    data           "kdummysym" u64 
    istatic        mm_tables.symboloptypes: block:178 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           3          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    istatic        mm_tables.symbolgenops: block:178 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           101        u8 
    data           102        u8 
    data           103        u8 
    data           104        u8 
    data           105        u8 
    data           106        u8 
    data           107        u8 
    data           108        u8 
    data           109        u8 
    data           110        u8 
    data           111        u8 
    data           114        u8 
    data           115        u8 
    data           123        u8 
    data           124        u8 
    data           0          u8 
    data           116        u8 
    data           0          u8 
    data           150        u8 
    data           122        u8 
    data           112        u8 
    data           113        u8 
    data           0          u8 
    data           128        u8 
    data           131        u8 
    data           132        u8 
    data           130        u8 
    data           129        u8 
    data           148        u8 
    data           134        u8 
    data           133        u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    istatic        mm_tables.symbolgentoops: block:178 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           158        u8 
    data           159        u8 
    data           160        u8 
    data           161        u8 
    data           162        u8 
    data           163        u8 
    data           164        u8 
    data           165        u8 
    data           166        u8 
    data           167        u8 
    data           168        u8 
    data           169        u8 
    data           170        u8 
    data           171        u8 
    data           172        u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           178        u8 
    data           179        u8 
    data           177        u8 
    data           176        u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    istatic        mm_tables.symbolopprios: block:178 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           5          u8 
    data           0          u8 
    data           0          u8 
    data           4          u8 
    data           4          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           3          u8 
    data           3          u8 
    data           4          u8 
    data           4          u8 
    data           7          u8 
    data           8          u8 
    data           8          u8 
    data           6          u8 
    data           6          u8 
    data           2          u8 
    data           6          u8 
    data           6          u8 
    data           6          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    istatic        mm_tables.exprstarter: block:178 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    istatic        mm_tables.sourcedirnames: block:48 
    data           "includedir" u64 
    data           "strincludedir" u64 
    data           "binincludedir" u64 
    data           "textincludedir" u64 
    data           "defineunitdir" u64 
    data           "cclibdir" u64 
    istatic        mm_tables.fflangnames: block:40 
    data           "noff"     u64 
    data           "windowsff" u64 
    data           "clangff"  u64 
    data           "mlangff"  u64 
    data           "callbackff" u64 
    istatic        mm_tables.scopenames: block:32 
    data           "local_scope" u64 
    data           "program_scope" u64 
    data           "export_scope" u64 
    data           "exportq_scope" u64 
    istatic        mm_tables.parammodenames: block:32 
    data           "Var "     u64 
    data           "In "      u64 
    data           "Out "     u64 
    data           "Opt "     u64 
    istatic        mm_tables.namenames: block:192 
    data           "nullid"   u64 
    data           "programid" u64 
    data           "moduleid" u64 
    data           "dllmoduleid" u64 
    data           "typeid"   u64 
    data           "procid"   u64 
    data           "dllprocid" u64 
    data           "dllvarid" u64 
    data           "genprocid" u64 
    data           "generatorid" u64 
    data           "constid"  u64 
    data           "staticid" u64 
    data           "frameid"  u64 
    data           "paramid"  u64 
    data           "fieldid"  u64 
    data           "genfieldid" u64 
    data           "enumid"   u64 
    data           "labelid"  u64 
    data           "blockid"  u64 
    data           "aliasid"  u64 
    data           "macroid"  u64 
    data           "macroparamid" u64 
    data           "linkid"   u64 
    data           "functionopid" u64 
    istatic        mm_tables.stnames: block:1952 
    data           "if"       u64 
    data           "then"     u64 
    data           "elsif"    u64 
    data           "else"     u64 
    data           "elsecase" u64 
    data           "elseswitch" u64 
    data           "case"     u64 
    data           "docase"   u64 
    data           "recase"   u64 
    data           "when"     u64 
    data           "for"      u64 
    data           "forall"   u64 
    data           "to"       u64 
    data           "downto"   u64 
    data           "by"       u64 
    data           "do"       u64 
    data           "end"      u64 
    data           "while"    u64 
    data           "repeat"   u64 
    data           "until"    u64 
    data           "always"   u64 
    data           "return"   u64 
    data           "yield"    u64 
    data           "stop"     u64 
    data           "restart"  u64 
    data           "redo"     u64 
    data           "loop"     u64 
    data           "next"     u64 
    data           "exit"     u64 
    data           "$step"    u64 
    data           "goto"     u64 
    data           "go"       u64 
    data           "switch"   u64 
    data           "doswitch" u64 
    data           "tabledata" u64 
    data           "clamp"    u64 
    data           "eval"     u64 
    data           "print"    u64 
    data           "println"  u64 
    data           "fprint"   u64 
    data           "fprintln" u64 
    data           "cprint"   u64 
    data           "cprintln" u64 
    data           "sprint"   u64 
    data           "sfprint"  u64 
    data           "cp"       u64 
    data           "cpl"      u64 
    data           "read"     u64 
    data           "readln"   u64 
    data           "cast"     u64 
    data           "proc"     u64 
    data           "function" u64 
    data           "threadedproc" u64 
    data           "type"     u64 
    data           "class"    u64 
    data           "record"   u64 
    data           "struct"   u64 
    data           "union"    u64 
    data           "ref"      u64 
    data           "pointer"  u64 
    data           "returning" u64 
    data           "var"      u64 
    data           "mut"      u64 
    data           "let"      u64 
    data           "include"  u64 
    data           "strinclude" u64 
    data           "bininclude" u64 
    data           "macro"    u64 
    data           "cclib"    u64 
    data           "assem"    u64 
    data           "asm"      u64 
    data           "static"   u64 
    data           "const"    u64 
    data           "enum"     u64 
    data           "$get_nprocs" u64 
    data           "$getnprocs" u64 
    data           "$get_procname" u64 
    data           "$getprocname" u64 
    data           "$get_procaddr" u64 
    data           "$getprocaddr" u64 
    data           "importdll" u64 
    data           "importlib" u64 
    data           "import"   u64 
    data           "importx"  u64 
    data           "importd"  u64 
    data           "importpath" u64 
    data           "mapmodule" u64 
    data           "unless"   u64 
    data           "try"      u64 
    data           "except"   u64 
    data           "finally"  u64 
    data           "raise"    u64 
    data           "out"      u64 
    data           "new"      u64 
    data           "destroy"  u64 
    data           "global"   u64 
    data           "exportq"  u64 
    data           "export"   u64 
    data           "clang"    u64 
    data           "mlang"    u64 
    data           "windows"  u64 
    data           "callback" u64 
    data           "swap"     u64 
    data           "void"     u64 
    data           "int"      u64 
    data           "word"     u64 
    data           "real"     u64 
    data           "ichar"    u64 
    data           "int8"     u64 
    data           "int16"    u64 
    data           "int32"    u64 
    data           "int64"    u64 
    data           "int128"   u64 
    data           "i8"       u64 
    data           "i16"      u64 
    data           "i32"      u64 
    data           "i64"      u64 
    data           "i128"     u64 
    data           "real32"   u64 
    data           "real64"   u64 
    data           "r32"      u64 
    data           "r64"      u64 
    data           "float32"  u64 
    data           "float64"  u64 
    data           "byte"     u64 
    data           "u8"       u64 
    data           "u16"      u64 
    data           "u32"      u64 
    data           "u64"      u64 
    data           "u128"     u64 
    data           "word8"    u64 
    data           "word16"   u64 
    data           "word32"   u64 
    data           "word64"   u64 
    data           "word128"  u64 
    data           "char"     u64 
    data           "wchar"    u64 
    data           "char64"   u64 
    data           "auto"     u64 
    data           "intm"     u64 
    data           "intp"     u64 
    data           "wordm"    u64 
    data           "wordp"    u64 
    data           "slice"    u64 
    data           "typeof"   u64 
    data           "million"  u64 
    data           "billion"  u64 
    data           "thousand" u64 
    data           "kb"       u64 
    data           "mb"       u64 
    data           "gb"       u64 
    data           "$lineno"  u64 
    data           "$strlineno" u64 
    data           "$filename" u64 
    data           "$modulename" u64 
    data           "$function" u64 
    data           "$date"    u64 
    data           "$time"    u64 
    data           "$version" u64 
    data           "$typename" u64 
    data           "$targetbits" u64 
    data           "$targetsize" u64 
    data           "$targetcode" u64 
    data           "nil"      u64 
    data           "pi"       u64 
    data           "true"     u64 
    data           "false"    u64 
    data           "$"        u64 
    data           "and"      u64 
    data           "or"       u64 
    data           "xor"      u64 
    data           "iand"     u64 
    data           "ior"      u64 
    data           "ixor"     u64 
    data           "in"       u64 
    data           "notin"    u64 
    data           "inrev"    u64 
    data           "rem"      u64 
    data           "min"      u64 
    data           "max"      u64 
    data           "not"      u64 
    data           "inot"     u64 
    data           "istrue"   u64 
    data           "abs"      u64 
    data           "$neg"     u64 
    data           "sqr"      u64 
    data           "sqrt"     u64 
    data           "sign"     u64 
    data           "sin"      u64 
    data           "cos"      u64 
    data           "tan"      u64 
    data           "asin"     u64 
    data           "acos"     u64 
    data           "atan"     u64 
    data           "ln"       u64 
    data           "log"      u64 
    data           "exp"      u64 
    data           "round"    u64 
    data           "floor"    u64 
    data           "ceil"     u64 
    data           "fract"    u64 
    data           "atan2"    u64 
    data           "fmod"     u64 
    data           "len"      u64 
    data           "lwb"      u64 
    data           "upb"      u64 
    data           "bounds"   u64 
    data           "lenstr"   u64 
    data           "bitwidth" u64 
    data           "bytes"    u64 
    data           "minvalue" u64 
    data           "maxvalue" u64 
    data           "typestr"  u64 
    data           "msb"      u64 
    data           "lsb"      u64 
    data           "msbit"    u64 
    data           "lsbit"    u64 
    data           "msw"      u64 
    data           "lsw"      u64 
    data           "odd"      u64 
    data           "even"     u64 
    data           "endif"    u64 
    data           "fi"       u64 
    data           "endcase"  u64 
    data           "esac"     u64 
    data           "enddocase" u64 
    data           "endswitch" u64 
    data           "enddoswitch" u64 
    data           "endfor"   u64 
    data           "od"       u64 
    data           "endproc"  u64 
    data           "endfunction" u64 
    data           "endwhile" u64 
    data           "endto"    u64 
    data           "enddo"    u64 
    data           "endunless" u64 
    data           "endimportmodule" u64 
    data           "endtry"   u64 
    data           "endrecord" u64 
    data           "endassem" u64 
    data           "$caligned" u64 
    data           "empty"    u64 
    data           "clear"    u64 
    data           "$$dummy"  u64 
    istatic        mm_tables.stsymbols: block:1952 
    data           97         u64 
    data           98         u64 
    data           99         u64 
    data           100        u64 
    data           101        u64 
    data           102        u64 
    data           106        u64 
    data           107        u64 
    data           108        u64 
    data           109        u64 
    data           110        u64 
    data           110        u64 
    data           111        u64 
    data           111        u64 
    data           112        u64 
    data           113        u64 
    data           104        u64 
    data           114        u64 
    data           115        u64 
    data           116        u64 
    data           116        u64 
    data           117        u64 
    data           164        u64 
    data           118        u64 
    data           119        u64 
    data           119        u64 
    data           119        u64 
    data           119        u64 
    data           119        u64 
    data           120        u64 
    data           121        u64 
    data           121        u64 
    data           122        u64 
    data           123        u64 
    data           170        u64 
    data           172        u64 
    data           169        u64 
    data           124        u64 
    data           124        u64 
    data           124        u64 
    data           124        u64 
    data           124        u64 
    data           124        u64 
    data           125        u64 
    data           125        u64 
    data           124        u64 
    data           124        u64 
    data           126        u64 
    data           126        u64 
    data           165        u64 
    data           129        u64 
    data           130        u64 
    data           129        u64 
    data           139        u64 
    data           156        u64 
    data           132        u64 
    data           133        u64 
    data           134        u64 
    data           142        u64 
    data           142        u64 
    data           11         u64 
    data           143        u64 
    data           143        u64 
    data           144        u64 
    data           80         u64 
    data           81         u64 
    data           80         u64 
    data           148        u64 
    data           80         u64 
    data           175        u64 
    data           175        u64 
    data           159        u64 
    data           151        u64 
    data           152        u64 
    data           176        u64 
    data           176        u64 
    data           176        u64 
    data           176        u64 
    data           176        u64 
    data           176        u64 
    data           136        u64 
    data           136        u64 
    data           135        u64 
    data           135        u64 
    data           135        u64 
    data           137        u64 
    data           138        u64 
    data           105        u64 
    data           160        u64 
    data           161        u64 
    data           162        u64 
    data           163        u64 
    data           95         u64 
    data           153        u64 
    data           154        u64 
    data           158        u64 
    data           158        u64 
    data           158        u64 
    data           157        u64 
    data           157        u64 
    data           157        u64 
    data           157        u64 
    data           173        u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           96         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           91         u64 
    data           92         u64 
    data           92         u64 
    data           92         u64 
    data           92         u64 
    data           145        u64 
    data           93         u64 
    data           78         u64 
    data           78         u64 
    data           78         u64 
    data           78         u64 
    data           78         u64 
    data           78         u64 
    data           167        u64 
    data           167        u64 
    data           167        u64 
    data           167        u64 
    data           167        u64 
    data           167        u64 
    data           167        u64 
    data           167        u64 
    data           167        u64 
    data           167        u64 
    data           167        u64 
    data           167        u64 
    data           167        u64 
    data           167        u64 
    data           167        u64 
    data           167        u64 
    data           168        u64 
    data           43         u64 
    data           44         u64 
    data           45         u64 
    data           36         u64 
    data           37         u64 
    data           38         u64 
    data           50         u64 
    data           51         u64 
    data           52         u64 
    data           35         u64 
    data           41         u64 
    data           42         u64 
    data           54         u64 
    data           56         u64 
    data           55         u64 
    data           57         u64 
    data           53         u64 
    data           60         u64 
    data           59         u64 
    data           58         u64 
    data           62         u64 
    data           62         u64 
    data           62         u64 
    data           62         u64 
    data           62         u64 
    data           62         u64 
    data           62         u64 
    data           62         u64 
    data           62         u64 
    data           62         u64 
    data           62         u64 
    data           62         u64 
    data           62         u64 
    data           63         u64 
    data           63         u64 
    data           61         u64 
    data           61         u64 
    data           61         u64 
    data           61         u64 
    data           61         u64 
    data           61         u64 
    data           61         u64 
    data           61         u64 
    data           61         u64 
    data           61         u64 
    data           64         u64 
    data           64         u64 
    data           64         u64 
    data           64         u64 
    data           64         u64 
    data           64         u64 
    data           64         u64 
    data           64         u64 
    data           104        u64 
    data           104        u64 
    data           104        u64 
    data           104        u64 
    data           104        u64 
    data           104        u64 
    data           104        u64 
    data           104        u64 
    data           104        u64 
    data           104        u64 
    data           104        u64 
    data           104        u64 
    data           104        u64 
    data           104        u64 
    data           104        u64 
    data           104        u64 
    data           104        u64 
    data           104        u64 
    data           104        u64 
    data           21         u64 
    data           177        u64 
    data           177        u64 
    data           0          u64 
    istatic        mm_tables.stsubcodes: block:1952 
    data           100        u64 
    data           0          u64 
    data           100        u64 
    data           0          u64 
    data           115        u64 
    data           117        u64 
    data           115        u64 
    data           116        u64 
    data           121        u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           1          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           1          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           110        u64 
    data           111        u64 
    data           111        u64 
    data           112        u64 
    data           113        u64 
    data           0          u64 
    data           0          u64 
    data           1          u64 
    data           117        u64 
    data           118        u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           122        u64 
    data           123        u64 
    data           124        u64 
    data           125        u64 
    data           126        u64 
    data           127        u64 
    data           128        u64 
    data           129        u64 
    data           122        u64 
    data           123        u64 
    data           130        u64 
    data           131        u64 
    data           61         u64 
    data           0          u64 
    data           0          u64 
    data           1          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           1          u64 
    data           0          u64 
    data           3          u64 
    data           0          u64 
    data           6          u64 
    data           1          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           30         u64 
    data           30         u64 
    data           31         u64 
    data           31         u64 
    data           32         u64 
    data           32         u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           88         u64 
    data           68         u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           32         u64 
    data           33         u64 
    data           1          u64 
    data           3          u64 
    data           2          u64 
    data           2          u64 
    data           3          u64 
    data           1          u64 
    data           4          u64 
    data           0          u64 
    data           0          u64 
    data           4          u64 
    data           2          u64 
    data           7          u64 
    data           0          u64 
    data           18         u64 
    data           19         u64 
    data           20         u64 
    data           4          u64 
    data           5          u64 
    data           18         u64 
    data           19         u64 
    data           20         u64 
    data           4          u64 
    data           5          u64 
    data           6          u64 
    data           7          u64 
    data           6          u64 
    data           7          u64 
    data           6          u64 
    data           7          u64 
    data           21         u64 
    data           21         u64 
    data           22         u64 
    data           23         u64 
    data           2          u64 
    data           3          u64 
    data           21         u64 
    data           22         u64 
    data           23         u64 
    data           2          u64 
    data           3          u64 
    data           16         u64 
    data           17         u64 
    data           1          u64 
    data           25         u64 
    data           73         u64 
    data           105        u64 
    data           87         u64 
    data           119        u64 
    data           12         u64 
    data           0          u64 
    data           2          u64 
    data           3          u64 
    data           1          u64 
    data           4          u64 
    data           5          u64 
    data           6          u64 
    data           75         u64 
    data           76         u64 
    data           78         u64 
    data           77         u64 
    data           79         u64 
    data           80         u64 
    data           81         u64 
    data           82         u64 
    data           83         u64 
    data           84         u64 
    data           85         u64 
    data           86         u64 
    data           87         u64 
    data           88         u64 
    data           89         u64 
    data           90         u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           112        u64 
    data           113        u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           129        u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           135        u64 
    data           136        u64 
    data           137        u64 
    data           138        u64 
    data           139        u64 
    data           140        u64 
    data           141        u64 
    data           142        u64 
    data           143        u64 
    data           144        u64 
    data           145        u64 
    data           146        u64 
    data           147        u64 
    data           149        u64 
    data           151        u64 
    data           200        u64 
    data           201        u64 
    data           202        u64 
    data           203        u64 
    data           204        u64 
    data           205        u64 
    data           206        u64 
    data           208        u64 
    data           209        u64 
    data           210        u64 
    data           1          u64 
    data           2          u64 
    data           3          u64 
    data           4          u64 
    data           5          u64 
    data           6          u64 
    data           7          u64 
    data           8          u64 
    data           97         u64 
    data           97         u64 
    data           106        u64 
    data           106        u64 
    data           107        u64 
    data           122        u64 
    data           123        u64 
    data           110        u64 
    data           113        u64 
    data           129        u64 
    data           130        u64 
    data           114        u64 
    data           111        u64 
    data           113        u64 
    data           105        u64 
    data           136        u64 
    data           160        u64 
    data           132        u64 
    data           175        u64 
    data           1          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    istatic        mm_tables.d_typestarterset: block:72 
    data           91         u64 
    data           14         u64 
    data           142        u64 
    data           152        u64 
    data           132        u64 
    data           96         u64 
    data           93         u64 
    data           145        u64 
    data           147        u64 
    istatic        mm_tables.intresultlist: block:18 
    data           112        u8 
    data           113        u8 
    data           201        u8 
    data           202        u8 
    data           200        u8 
    data           204        u8 
    data           205        u8 
    data           206        u8 
    data           116        u8 
    data           117        u8 
    data           118        u8 
    data           119        u8 
    data           120        u8 
    data           121        u8 
    data           123        u8 
    data           124        u8 
    data           131        u8 
    data           132        u8 
    istatic        mm_tables.softconvmappings: block:294 
    data           1          u16 
    data           1          u16 
    data           181        u16 
    data           1          u16 
    data           2          u16 
    data           181        u16 
    data           1          u16 
    data           3          u16 
    data           190        u16 
    data           1          u16 
    data           4          u16 
    data           181        u16 
    data           1          u16 
    data           5          u16 
    data           190        u16 
    data           1          u16 
    data           6          u16 
    data           184        u16 
    data           1          u16 
    data           7          u16 
    data           184        u16 
    data           2          u16 
    data           1          u16 
    data           181        u16 
    data           2          u16 
    data           2          u16 
    data           181        u16 
    data           2          u16 
    data           3          u16 
    data           190        u16 
    data           2          u16 
    data           4          u16 
    data           181        u16 
    data           2          u16 
    data           5          u16 
    data           190        u16 
    data           2          u16 
    data           6          u16 
    data           184        u16 
    data           2          u16 
    data           7          u16 
    data           184        u16 
    data           3          u16 
    data           1          u16 
    data           189        u16 
    data           3          u16 
    data           2          u16 
    data           189        u16 
    data           3          u16 
    data           3          u16 
    data           181        u16 
    data           3          u16 
    data           4          u16 
    data           189        u16 
    data           3          u16 
    data           5          u16 
    data           181        u16 
    data           3          u16 
    data           6          u16 
    data           211        u16 
    data           3          u16 
    data           7          u16 
    data           211        u16 
    data           4          u16 
    data           1          u16 
    data           181        u16 
    data           4          u16 
    data           2          u16 
    data           181        u16 
    data           4          u16 
    data           3          u16 
    data           190        u16 
    data           4          u16 
    data           4          u16 
    data           181        u16 
    data           4          u16 
    data           5          u16 
    data           190        u16 
    data           4          u16 
    data           6          u16 
    data           184        u16 
    data           4          u16 
    data           7          u16 
    data           184        u16 
    data           5          u16 
    data           1          u16 
    data           189        u16 
    data           5          u16 
    data           2          u16 
    data           189        u16 
    data           5          u16 
    data           3          u16 
    data           181        u16 
    data           5          u16 
    data           4          u16 
    data           189        u16 
    data           5          u16 
    data           5          u16 
    data           181        u16 
    data           5          u16 
    data           6          u16 
    data           211        u16 
    data           5          u16 
    data           7          u16 
    data           211        u16 
    data           6          u16 
    data           1          u16 
    data           185        u16 
    data           6          u16 
    data           2          u16 
    data           185        u16 
    data           6          u16 
    data           3          u16 
    data           211        u16 
    data           6          u16 
    data           4          u16 
    data           185        u16 
    data           6          u16 
    data           5          u16 
    data           211        u16 
    data           6          u16 
    data           6          u16 
    data           181        u16 
    data           6          u16 
    data           7          u16 
    data           187        u16 
    data           7          u16 
    data           1          u16 
    data           185        u16 
    data           7          u16 
    data           2          u16 
    data           185        u16 
    data           7          u16 
    data           3          u16 
    data           211        u16 
    data           7          u16 
    data           4          u16 
    data           185        u16 
    data           7          u16 
    data           5          u16 
    data           211        u16 
    data           7          u16 
    data           6          u16 
    data           188        u16 
    data           7          u16 
    data           7          u16 
    data           181        u16 
    zstatic        mm_tables.intresult: block:218 
    zstatic        mm_tables.softconvtable: block:392 
    zstatic        pc_decls.optimflag: i64 
    zstatic        pc_decls.rtsproctable: block:48 
    zstatic        pc_decls.npdllnametable: i64 
    zstatic        pc_decls.pdllnametable: block:400 
    zstatic        pc_libpcl.pcstart: u64 
    zstatic        pc_libpcl.pccurr: u64 
    zstatic        pc_libpcl.pcend: u64 
    zstatic        pc_libpcl.pcalloc: i64 
    zstatic        pc_libpcl.pcfixed: u8 
    zstatic        pc_libpcl.pcseqno: i64 
    zstatic        pc_libpcl.pcneedfntable: i64 
    istatic        pc_libpcl.initpcalloc: i64 
    data           4194304    u64 
    zstatic        pc_libpcl.sbuffer: block:16 
    istatic        pc_libpcl.dest: u64 
    data           &pc_libpcl.sbuffer u64 
    zstatic        pc_libpcl.destlinestart: i64 
    zstatic        pc_libpcl.labelmap: block:4000000 
    zstatic        pc_libpcl.labelno: i64 
    zstatic        pc_libpcl.maxuserlabel: i64 
    zstatic        pc_libpcl.labelnooffset: i64 
    zstatic        pc_libpcl.labeloffset: block:8000000 
    zstatic        pc_libpcl.longstring: u64 
    zstatic        pc_libpcl.longstringlen: i64 
    zstatic        pc_libpcl.errormess: u64 
    zstatic        pc_libpcl.mcldone: i64 
    zstatic        pc_libpcl.stropnd.str: block:512 
    zstatic        pc_libpcl.strpmode.str: block:64 
    zstatic        mlibp.mdebug: i64 
    zstatic        mlibp.npcmalloc: i64 
    zstatic        mlibp.allocupper: block:2408 
    zstatic        mlibp.alloccode: i64 
    zstatic        mlibp.allocbytes: i64 
    istatic        mlibp.fdebug: i64 
    data           0          u64 
    zstatic        mlibp.rfsize: i64 
    zstatic        mlibp.maxmemory: u64 
    zstatic        mlibp.maxalloccode: i64 
    istatic        mlibp.pcm_setup: u8 
    data           0          u8 
    istatic        mlibp.show: i64 
    data           0          u64 
    zstatic        mlibp.allocbase: u64 
    istatic        mlibp.memtotal: i64 
    data           0          u64 
    istatic        mlibp.smallmemtotal: i64 
    data           0          u64 
    istatic        mlibp.smallmemobjs: i64 
    data           0          u64 
    istatic        mlibp.maxmemtotal: i64 
    data           0          u64 
    zstatic        mlibp.memalloctable: block:24 
    zstatic        mlibp.memallocsize: block:12 
    zstatic        mlibp.pcheapstart: u64 
    zstatic        mlibp.pcheapend: u64 
    zstatic        mlibp.pcheapptr: u64 
    zstatic        mlibp.sizeindextable: block:2049 
    zstatic        mlibp.freelist: block:72 
    istatic        mlibp.pmnames: block:48 
    data           "pm_end"   u64 
    data           "pm_option" u64 
    data           "pm_sourcefile" u64 
    data           "pm_libfile" u64 
    data           "pm_colon" u64 
    data           "pm_extra" u64 
    istatic        mlibp.seed: block:16 
    data           2993073034246558322 u64 
    data           1617678968452121188 u64 
    zstatic        mlibp.pcm_newblock.totalheapsize: i64 
    istatic        mlibp.pcm_round.allocbytes: block:36 
    data           0          u32 
    data           16         u32 
    data           32         u32 
    data           64         u32 
    data           128        u32 
    data           256        u32 
    data           512        u32 
    data           1024       u32 
    data           2048       u32 
    zstatic        mlibp.changeext.newfile: block:260 
    zstatic        mlibp.extractpath.str: block:260 
    zstatic        mlibp.extractbasefile.str: block:100 
    istatic        mlibp.nextcmdparam.infile: i64 
    data           0          u64 
    istatic        mlibp.nextcmdparam.filestart: u64 
    data           0          u64 
    istatic        mlibp.nextcmdparam.fileptr: u64 
    data           0          u64 
    istatic        mlibp.nextcmdparam.colonseen: u8 
    data           0          u8 
    zstatic        mlibp.nextcmdparam.str: block:300 
    zstatic        mlibp.readnextfileitem.str: block:256 
    zstatic        mlibp.padstr.str: block:256 
    zstatic        mlibp.chr.str: block:8 
    zstatic        msysp.fmtparam: i64 
    istatic        msysp.needgap: i64 
    data           0          u64 
    istatic        msysp.outdev: i64 
    data           1          u64 
    istatic        msysp.outchan: u64 
    data           0          u64 
    istatic        msysp.fmtstr: u64 
    data           0          u64 
    zstatic        msysp.outchan_stack: block:80 
    zstatic        msysp.outdev_stack: block:80 
    zstatic        msysp.fmtstr_stack: block:80 
    zstatic        msysp.needgap_stack: block:10 
    zstatic        msysp.ptr_stack: block:80 
    istatic        msysp.niostack: i64 
    data           0          u64 
    istatic        msysp.digits: block:16 
    data           48         u8 
    data           49         u8 
    data           50         u8 
    data           51         u8 
    data           52         u8 
    data           53         u8 
    data           54         u8 
    data           55         u8 
    data           56         u8 
    data           57         u8 
    data           65         u8 
    data           66         u8 
    data           67         u8 
    data           68         u8 
    data           69         u8 
    data           70         u8 
    istatic        msysp.defaultfmt: block:16 
    data           0          u8 
    data           0          u8 
    data           10         u8 
    data           0          u8 
    data           32         u8 
    data           102        u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           82         u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    zstatic        msysp.rd_buffer: u64 
    zstatic        msysp.rd_length: i64 
    zstatic        msysp.rd_pos: u64 
    zstatic        msysp.rd_lastpos: u64 
    zstatic        msysp.termchar: i64 
    zstatic        msysp.itemerror: i64 
    zstatic        msysp.nsysparams: i64 
    zstatic        msysp.nenvstrings: i64 
    zstatic        msysp.sysparams: block:1024 
    zstatic        msysp.envstrings: block:1024 
    zstatic        msysp.callbackstack: block:576 
    istatic        msysp.ncallbacks: i64 
    data           0          u64 
    istatic        msysp.mask63: u64 
    data           9223372036854775807 u64 
    istatic        msysp.offset64: r64 
    data           9.2233720368547758e+018 u64 
    istatic        msysp.offset32: r64 
    data           9.2233720368547758e+018 u64 
    zstatic        msysp.m$init.startupinfo: block:128 
    zstatic        msysp.getfmt.fmt: block:16 
    zstatic        msysp.strint.str: block:100 
    zstatic        msysp.strword.str: block:100 
    zstatic        msysp.strreal.str: block:320 
    zstatic        mwindowsp.hconsole: u64 
    zstatic        mwindowsp.hconsolein: u64 
    zstatic        mwindowsp.lastkey: block:20 
    zstatic        mwindowsp.pendkey: block:20 
    zstatic        mwindowsp.keypending: i64 
    istatic        mwindowsp.wndproc_callbackfn: u64 
    data           0          u64 
    istatic        mwindowsp.init_flag: i64 
    data           0          u64 
    zstatic        mwindowsp.os_gxregisterclass.registered: u8 
    istatic        mwindowsp.mainwndproc.count: i64 
    data           0          u64 
    zstatic        mwindowsp.os_gethostname.name: block:300 
    zstatic        mwindowsp.os_gethostname.n: i64 
    zstatic        mwindowsp.os_peek.lastticks: i64 
    istatic        pc_lex.symbolnames: block:176 
    data           "errorsym" u64 
    data           "commasym" u64 
    data           "colonsym" u64 
    data           "dcolonsym" u64 
    data           "lsqsym"   u64 
    data           "rsqsym"   u64 
    data           "addsym"   u64 
    data           "subsym"   u64 
    data           "mulsym"   u64 
    data           "addrsym"  u64 
    data           "eqsym"    u64 
    data           "eolsym"   u64 
    data           "eofsym"   u64 
    data           "labelsym" u64 
    data           "intconstsym" u64 
    data           "realconstsym" u64 
    data           "stringconstsym" u64 
    data           "int128constsym" u64 
    data           "namesym"  u64 
    data           "kopcodesym" u64 
    data           "typesym"  u64 
    data           "kdummysym" u64 
    zstatic        pc_lex.nsymbols: i64 
    zstatic        pc_lex.lexhashtable: block:2097152 
    istatic        pc_lex.lxfileno: i64 
    data           0          u64 
    istatic        pc_lex.lxlineno: i64 
    data           0          u64 
    istatic        pc_lex.nsourcefiles: i64 
    data           0          u64 
    zstatic        pc_lex.lxsymbol: i64 
    zstatic        pc_lex.lxsubcode: i64 
    zstatic        pc_lex.lxvalue: i64 
    zstatic        pc_lex.lxuvalue128: u128 
    zstatic        pc_lex.lxxvalue: r64 
    zstatic        pc_lex.lxsvalue: u64 
    zstatic        pc_lex.lxlength: i64 
    zstatic        pc_lex.lxtruename: u8 
    zstatic        pc_lex.lxhashvalue: i64 
    zstatic        pc_lex.lxsptr: u64 
    zstatic        pc_lex.lxstart: u64 
    zstatic        pc_lex.lxsymptr: u64 
    zstatic        pc_lex.alphamap: block:256 
    zstatic        pc_lex.digitmap: block:256 
    zstatic        pc_lex.commentmap: block:256 
    istatic        pc_lex.initlex.done: u8 
    data           0          u8 
    zstatic        pc_parse.insideproc: i64 
    istatic        pc_parse.parse_readrts.source: u64 
    data           "!\c\nProcrts rts.$power_i64: i64\c\n    param          rts.$power_i64.a i64 \c\n    param          rts.$power_i64.n i64 \c\n    procentry                 \c\n!-------------------------------------------------\c\n    startmult                 \c\n    push           rts.$power_i64.n i64 \c\n    push           0          i64 \c\n    jumpge         #8         i64 \c\n    push           0          i64 \c\n    resetmult                 \c\n    jump           #9         \c\n#8: \c\n    push           rts.$power_i64.n i64 \c\n    push           0          i64 \c\n    jumpne         #10        i64 \c\n    push           1          i64 \c\n    resetmult                 \c\n    jump           #9         \c\n#10: \c\n    push           rts.$power_i64.n i64 \c\n    push           1          i64 \c\n    jumpne         #11        i64 \c\n    push           rts.$power_i64.a i64 \c\n    resetmult                 \c\n    jump           #9         \c\n#11: \c\n    push           rts.$power_i64.n i64 \c\n    push           0          i64 \c\n    dotindex                  i64 \c\n    jumptrue       #12        i64 \c\n    setargs                   2 0\c\n    push           rts.$power_i64.n i64 \c\n    push           2          i64 \c\n    idiv                      i64 \c\n    push           rts.$power_i64.a i64 \c\n    sqr                       i64 \c\n    callfn         &rts.$power_i64 i64 \c\n    resetmult                 \c\n    jump           #9         \c\n#12: \c\n    setargs                   2 0\c\n    push           rts.$power_i64.n i64 \c\n    push           1          i64 \c\n    sub                       i64 \c\n    push           2          i64 \c\n    idiv                      i64 \c\n    push           rts.$power_i64.a i64 \c\n    sqr                       i64 \c\n    callfn         &rts.$power_i64 i64 \c\n    push           rts.$power_i64.a i64 \c\n    mul                       i64 \c\n    endmult                   \c\n#9: \c\n    setret                    i64 \c\n    jump           #13        \c\n!-------------------------------------------------\c\n#13: \c\n    retfn                     i64 \c\nEnd\c\n\c\n!\c\n    endprogram                \c\n" u64 
    istatic        pc_tables.pstdnames: block:120 
    data           "void"     u64 
    data           "u8"       u64 
    data           "u16"      u64 
    data           "u32"      u64 
    data           "u64"      u64 
    data           "u128"     u64 
    data           "i8"       u64 
    data           "i16"      u64 
    data           "i32"      u64 
    data           "i64"      u64 
    data           "i128"     u64 
    data           "r32"      u64 
    data           "r64"      u64 
    data           "block"    u64 
    data           "$last"    u64 
    istatic        pc_tables.psize: block:15 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           4          u8 
    data           8          u8 
    data           16         u8 
    data           1          u8 
    data           2          u8 
    data           4          u8 
    data           8          u8 
    data           16         u8 
    data           4          u8 
    data           8          u8 
    data           0          u8 
    data           0          u8 
    istatic        pc_tables.psigned: block:15 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    istatic        pc_tables.pfloat: block:15 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    istatic        pc_tables.pcat: block:15 
    data           0          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           1          u8 
    data           5          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           1          u8 
    data           5          u8 
    data           2          u8 
    data           3          u8 
    data           6          u8 
    data           0          u8 
    istatic        pc_tables.catnames: block:56 
    data           "voidcat"  u64 
    data           "d64cat"   u64 
    data           "x32cat"   u64 
    data           "x64cat"   u64 
    data           "shortcat" u64 
    data           "widecat"  u64 
    data           "blockcat" u64 
    istatic        pc_tables.opndnames: block:72 
    data           "no_opnd"  u64 
    data           "mem_opnd" u64 
    data           "memaddr_opnd" u64 
    data           "label_opnd" u64 
    data           "int_opnd" u64 
    data           "real_opnd" u64 
    data           "int128_opnd" u64 
    data           "real32_opnd" u64 
    data           "string_opnd" u64 
    istatic        pc_tables.pclnames: block:1744 
    data           "kzero"    u64 
    data           "knop"     u64 
    data           "kstop"    u64 
    data           "kcomment" u64 
    data           "kimportdll" u64 
    data           "kistatic" u64 
    data           "kzstatic" u64 
    data           "kequiv"   u64 
    data           "kprocdef" u64 
    data           "kprocentry" u64 
    data           "kendproc" u64 
    data           "kendprogram" u64 
    data           "kextproc" u64 
    data           "kextparam" u64 
    data           "kextvariadics" u64 
    data           "kendextproc" u64 
    data           "kprocrts" u64 
    data           "klocal"   u64 
    data           "kparam"   u64 
    data           "klabel"   u64 
    data           "klabelname" u64 
    data           "kpush"    u64 
    data           "kpop"     u64 
    data           "kstore"   u64 
    data           "kpushnc"  u64 
    data           "kpushlabel" u64 
    data           "kopnd"    u64 
    data           "ktype"    u64 
    data           "kduplstack" u64 
    data           "kswapstack" u64 
    data           "kpushptroff" u64 
    data           "kpopptroff" u64 
    data           "kstoreptroff" u64 
    data           "kpushptr" u64 
    data           "kpopptr"  u64 
    data           "kstoreptr" u64 
    data           "kdotindex" u64 
    data           "kpopdotindex" u64 
    data           "kstoredotindex" u64 
    data           "kdotslice" u64 
    data           "kpopdotslice" u64 
    data           "kstoredotslice" u64 
    data           "kpopstack" u64 
    data           "keval"    u64 
    data           "kcallproc" u64 
    data           "kcallprocptr" u64 
    data           "kretproc" u64 
    data           "kcallfn"  u64 
    data           "kcallfnptr" u64 
    data           "kretfn"   u64 
    data           "kjump"    u64 
    data           "kjumpptr" u64 
    data           "kjumpeq"  u64 
    data           "kjumpne"  u64 
    data           "kjumplt"  u64 
    data           "kjumple"  u64 
    data           "kjumpge"  u64 
    data           "kjumpgt"  u64 
    data           "kjumptrue" u64 
    data           "kjumpfalse" u64 
    data           "kjumpinrange" u64 
    data           "kjumpnotinrange" u64 
    data           "ksetjumpeq" u64 
    data           "ksetjumpeqx" u64 
    data           "ksetjumpne" u64 
    data           "kseteq"   u64 
    data           "ksetne"   u64 
    data           "ksetlt"   u64 
    data           "ksetle"   u64 
    data           "ksetge"   u64 
    data           "ksetgt"   u64 
    data           "kcasejumpeq" u64 
    data           "kselecteq" u64 
    data           "kselectne" u64 
    data           "kselectlt" u64 
    data           "kselectle" u64 
    data           "kselectge" u64 
    data           "kselectgt" u64 
    data           "kselecttrue" u64 
    data           "kto"      u64 
    data           "kforup"   u64 
    data           "kfordown" u64 
    data           "kswap"    u64 
    data           "kmakeslice" u64 
    data           "kswitch"  u64 
    data           "kswitchlabel" u64 
    data           "kendswitch" u64 
    data           "kclear"   u64 
    data           "kcsegment" u64 
    data           "kisegment" u64 
    data           "kzsegment" u64 
    data           "krosegment" u64 
    data           "kdata"    u64 
    data           "kdb"      u64 
    data           "kdw"      u64 
    data           "kdd"      u64 
    data           "kdq"      u64 
    data           "kdstring" u64 
    data           "kdstringz" u64 
    data           "kreserve" u64 
    data           "kassem"   u64 
    data           "kadd"     u64 
    data           "ksub"     u64 
    data           "kmul"     u64 
    data           "kdiv"     u64 
    data           "kidiv"    u64 
    data           "kirem"    u64 
    data           "kiand"    u64 
    data           "kior"     u64 
    data           "kixor"    u64 
    data           "kshl"     u64 
    data           "kshr"     u64 
    data           "kin"      u64 
    data           "knotin"   u64 
    data           "kmin"     u64 
    data           "kmax"     u64 
    data           "keq"      u64 
    data           "kne"      u64 
    data           "klt"      u64 
    data           "kle"      u64 
    data           "kge"      u64 
    data           "kgt"      u64 
    data           "ksame"    u64 
    data           "kandl"    u64 
    data           "korl"     u64 
    data           "kaddrefoff" u64 
    data           "ksubrefoff" u64 
    data           "ksubref"  u64 
    data           "kneg"     u64 
    data           "kabs"     u64 
    data           "kinot"    u64 
    data           "knotl"    u64 
    data           "kistruel" u64 
    data           "ksqr"     u64 
    data           "ksqrt"    u64 
    data           "ksin"     u64 
    data           "kcos"     u64 
    data           "ktan"     u64 
    data           "kasin"    u64 
    data           "kacos"    u64 
    data           "katan"    u64 
    data           "kln"      u64 
    data           "klog"     u64 
    data           "kexp"     u64 
    data           "kround"   u64 
    data           "kfloor"   u64 
    data           "kceil"    u64 
    data           "kfract"   u64 
    data           "ksign"    u64 
    data           "katan2"   u64 
    data           "kpower"   u64 
    data           "kfmod"    u64 
    data           "kincr"    u64 
    data           "kdecr"    u64 
    data           "kincrload" u64 
    data           "kdecrload" u64 
    data           "kloadincr" u64 
    data           "kloaddecr" u64 
    data           "kaddto"   u64 
    data           "ksubto"   u64 
    data           "kmulto"   u64 
    data           "kdivto"   u64 
    data           "kidivto"  u64 
    data           "kiremto"  u64 
    data           "kiandto"  u64 
    data           "kiorto"   u64 
    data           "kixorto"  u64 
    data           "kshlto"   u64 
    data           "kshrto"   u64 
    data           "kminto"   u64 
    data           "kmaxto"   u64 
    data           "kandlto"  u64 
    data           "korlto"   u64 
    data           "kaddrefoffto" u64 
    data           "ksubrefoffto" u64 
    data           "knegto"   u64 
    data           "kabsto"   u64 
    data           "kinotto"  u64 
    data           "knotlto"  u64 
    data           "kistruelto" u64 
    data           "ktypepun" u64 
    data           "ksoftconv" u64 
    data           "kwiden"   u64 
    data           "knarrow"  u64 
    data           "kfloat"   u64 
    data           "kfix"     u64 
    data           "ktruncate" u64 
    data           "kfwiden"  u64 
    data           "kfnarrow" u64 
    data           "ksofttruncw" u64 
    data           "kwidenw"  u64 
    data           "kstartmult" u64 
    data           "kresetmult" u64 
    data           "kendmult" u64 
    data           "ksetret"  u64 
    data           "ksetretmult" u64 
    data           "ksetargs" u64 
    data           "kgetnprocs" u64 
    data           "kgetprocname" u64 
    data           "kgetprocaddr" u64 
    data           "klen"     u64 
    data           "klwb"     u64 
    data           "kupb"     u64 
    data           "kbounds"  u64 
    data           "klenstr"  u64 
    data           "kbitwidth" u64 
    data           "kbytesize" u64 
    data           "kbytes"   u64 
    data           "kminvalue" u64 
    data           "kmaxvalue" u64 
    data           "ktypestr" u64 
    data           "kerror"   u64 
    data           "karraytoslice" u64 
    data           "kichartoslice" u64 
    data           "ksofttruncshort" u64 
    data           "kcharaxtoichar" u64 
    data           "ksliceptr" u64 
    data           "klast"    u64 
    istatic        pc_tables.pclhasopnd: block:218 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           4          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           2          u8 
    data           3          u8 
    data           3          u8 
    data           1          u8 
    data           2          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    istatic        pc_tables.pclhastype: block:218 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    istatic        pc_tables.pclextra: block:218 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           2          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           2          u8 
    data           2          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           2          u8 
    data           2          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    istatic        pc_tables.rtsnames: block:48 
    data           "rts_rts_unimpl" u64 
    data           "rts_power_i64" u64 
    data           "rts_float_u64r64" u64 
    data           "rts_mul_i128" u64 
    data           "rts_div_i128" u64 
    data           "rts_div_u128" u64 
    istatic        mm_start.optionnames: block:392 
    data           "load"     u64 
    data           "fixup"    u64 
    data           "parse"    u64 
    data           "name"     u64 
    data           "type"     u64 
    data           "pcl"      u64 
    data           "asm"      u64 
    data           "c"        u64 
    data           "obj"      u64 
    data           "dll"      u64 
    data           "exe"      u64 
    data           "run"      u64 
    data           "pclexe"   u64 
    data           "asmexe"   u64 
    data           "sys"      u64 
    data           "minsys"   u64 
    data           "nosys"    u64 
    data           "nofile"   u64 
    data           "rts"      u64 
    data           "norts"    u64 
    data           "debug"    u64 
    data           "ma"       u64 
    data           "docs"     u64 
    data           "exp"      u64 
    data           "opt"      u64 
    data           "opt1"     u64 
    data           "opt2"     u64 
    data           "ast1"     u64 
    data           "ast2"     u64 
    data           "ast3"     u64 
    data           "showpcl"  u64 
    data           "showasm"  u64 
    data           "st"       u64 
    data           "pst"      u64 
    data           "stflat"   u64 
    data           "types"    u64 
    data           "overloads" u64 
    data           "ss"       u64 
    data           "time"     u64 
    data           "v"        u64 
    data           "vv"       u64 
    data           "q"        u64 
    data           "h"        u64 
    data           "help"     u64 
    data           "ext"      u64 
    data           "out"      u64 
    data           "outpath"  u64 
    data           "unused"   u64 
    data           "set"      u64 
    zstatic        mm_start.fpclexe: u8 
    zstatic        mm_start.fasmexe: u8 
    zstatic        mm_start.extraparams: block:1024 
    zstatic        mm_start.extravalues: block:1024 
    istatic        mm_start.nextraparams: i64 
    data           0          u64 
    istatic        mm_start.outext: u64 
    data           ""         u64 
    zstatic        mm_start.optionvars: block:200 
    zstatic        mm_start.optionvalues: block:200 
    zstatic        mm_start.noptionvars: i64 
    zstatic        mm_start.startclock: i64 
    zstatic        mm_start.endclock: i64 
    zstatic        mm_start.do_option.outused: u8 
    zstatic        mm_start.do_option.outpathused: u8 
    istatic        mm_start.showhelp.helptext: u64 
    data           "'BB' Mosaic Compiler Generating x64 native code - Windows Version\c\n\c\nWhole-program compiler builds entire program from the lead module\c\ninto a executable file.\c\n\c\n    bb main              # Create main.exe from lead module main.m\c\n    bb main.m            # Same (.m extension is default)\c\n    bb -c main           # Create single-file main.asm intermediate ASM\c\n\c\nOptions:\c\n\c\n    -c  or -asm           # Generate only intermediate ASM file only\c\n    -exe                  # Generate .exe executable file\c\n    -dll                  # Generate .dll library and .exp file\c\n\c\n    -opt                  # Apply simple optimiser\c\n\c\n    -out:file             # Name of output file \c\n\c\n    -ma                   # Create .ma file combining source/support files\c\n    -docs                 # Create .txt with docstrings of exported files (not finished)\c\n    -run                  # For -exe mode only: run resulting executable\c\n\c\n    @file                 # Read options from file\c\n\c\nExample:\c\n\c\n     bb -run prog : abc def\c\n\c\nAny parameters for the new program must follow \" : \" (spaces needed).\c\n" u64 
    zstatic        mm_start.starttimer.tt: i64 
    zstatic        mm_lex.lxstart_stack: block:160 
    zstatic        mm_lex.lxsptr_stack: block:160 
    zstatic        mm_lex.lxfileno_stack: block:160 
    zstatic        mm_lex.lxlineno_stack: block:160 
    zstatic        mm_lex.isfile_stack: block:20 
    istatic        mm_lex.sourcelevel: i64 
    data           0          u64 
    zstatic        mm_lex.lxstart: u64 
    zstatic        mm_lex.lxsptr: u64 
    zstatic        mm_lex.lxifcond: i64 
    zstatic        mm_lex.longsuffix: i64 
    zstatic        mm_lex.lxfileno: i64 
    zstatic        mm_lex.hashtable: block:4194304 
    zstatic        mm_lex.hashkeys: block:262144 
    zstatic        mm_lex.tokenlist: u64 
    zstatic        mm_lex.tokenlistsize: i64 
    zstatic        mm_lex.nexttoken: u64 
    zstatic        mm_lex.astringlength: i64 
    istatic        mm_lex.prescanmode: u8 
    data           0          u8 
    istatic        mm_lex.maxnumlist: block:128 
    data           ""         u64 
    data           "1111111111111111111111111111111111111111111111111111111111111111" u64 
    data           "11112220022122120101211020120210210211220" u64 
    data           "33333333333333333333333333333333" u64 
    data           "2214220303114400424121122430" u64 
    data           "3520522010102100444244423" u64 
    data           "45012021522523134134601" u64 
    data           "1777777777777777777777" u64 
    data           "145808576354216723756" u64 
    data           "18446744073709551615" u64 
    data           "335500516A429071284" u64 
    data           "839365134A2A240713" u64 
    data           "219505A9511A867B72" u64 
    data           "8681049ADB03DB171" u64 
    data           "2C1D56B648C6CD110" u64 
    data           "FFFFFFFFFFFFFFFF" u64 
    zstatic        mm_lex.maxnumlen: block:128 
    zstatic        mm_lex.lexsetup.n: i64 
    istatic        mm_support.bytemasks: block:8 
    data           1          u8 
    data           2          u8 
    data           4          u8 
    data           8          u8 
    data           16         u8 
    data           32         u8 
    data           64         u8 
    data           128        u8 
    zstatic        mm_support.findfile.filespec: block:300 
    istatic        mm_lib.autotypeno: i64 
    data           0          u64 
    istatic        mm_lib.nextavindex: i64 
    data           0          u64 
    istatic        mm_lib.nextsvindex: i64 
    data           0          u64 
    zstatic        mm_lib.exprstrvar: block:16 
    istatic        mm_lib.exprstr: u64 
    data           &mm_lib.exprstrvar u64 
    istatic        mm_lib.unitheapptr: u64 
    data           0          u64 
    istatic        mm_lib.remainingunits: i64 
    data           0          u64 
    zstatic        mm_lib.sbuffer: block:16 
    istatic        mm_lib.dest: u64 
    data           &mm_lib.sbuffer u64 
    zstatic        mm_lib.framevarname: u64 
    zstatic        mm_lib.nextautotype.str: block:32 
    zstatic        mm_lib.getdottedname.str: block:256 
    zstatic        mm_lib.strmode.str: block:4096 
    zstatic        mm_lib.strmode2.str: block:4096 
    zstatic        mm_diags.currlineno: i64 
    zstatic        mm_diags.currfileno: i64 
    zstatic        mm_diags.sbuffer: block:16 
    istatic        mm_diags.dest: u64 
    data           &mm_diags.sbuffer u64 
    zstatic        mm_diags.destlinestart: i64 
    istatic        mm_diags.printunit.cmpchain: i64 
    data           0          u64 
    zstatic        mm_diags.getprefix.str: block:1024 
    zstatic        mm_diags.getlineinfok.str: block:40 
    istatic        mm_diags.printmodelist.tab: u64 
    data           "\t"       u64 
    zstatic        mm_parse.loopstack: block:800 
    zstatic        mm_parse.nloops: i64 
    istatic        mm_parse.intabledata: i64 
    data           0          u64 
    istatic        mm_parse.inreadprint: i64 
    data           0          u64 
    istatic        mm_parse.inparamlist: i64 
    data           0          u64 
    istatic        mm_parse.inrecordbody: i64 
    data           0          u64 
    istatic        mm_parse.inimportmodule: i64 
    data           0          u64 
    istatic        mm_parse.labelseen: i64 
    data           0          u64 
    istatic        mm_parse.tabledataname: u64 
    data           0          u64 
    zstatic        mm_parse.procstack: block:80 
    istatic        mm_parse.nprocstack: i64 
    data           0          u64 
    zstatic        mm_parse.unionstring: block:8 
    zstatic        mm_parse.unionpend: block:8 
    istatic        mm_parse.unionlastvar: u64 
    data           0          u64 
    zstatic        mm_parse.dretvar: u64 
    istatic        mm_parse.try_level: i64 
    data           0          u64 
    istatic        mm_parse.varattribs: i64 
    data           0          u64 
    zstatic        mm_parse.dollarstack: block:80 
    istatic        mm_parse.ndollar: i64 
    data           0          u64 
    istatic        mm_parse.inmultexpr: i64 
    data           0          u64 
    istatic        mm_parse.insiderecord: i64 
    data           0          u64 
    istatic        mm_parse.insidedllimport: i64 
    data           0          u64 
    istatic        mm_parse.yieldseen: i64 
    data           0          u64 
    zstatic        mm_parse.forindexvars: block:80 
    zstatic        mm_parse.nforloops: i64 
    zstatic        mm_parse.docfile: u64 
    istatic        mm_parse.readcompilervar.monthnames: block:96 
    data           "Jan"      u64 
    data           "Feb"      u64 
    data           "Mar"      u64 
    data           "Apr"      u64 
    data           "May"      u64 
    data           "Jun"      u64 
    data           "Jul"      u64 
    data           "Aug"      u64 
    data           "Sep"      u64 
    data           "Oct"      u64 
    data           "Nov"      u64 
    data           "Dec"      u64 
    istatic        pci_mcl.valtypenames: block:80 
    data           "no_val"   u64 
    data           "intimm_val" u64 
    data           "realimm_val" u64 
    data           "realmem_val" u64 
    data           "stringimm_val" u64 
    data           "def_val"  u64 
    data           "temp_val" u64 
    data           "label_val" u64 
    data           "name_val" u64 
    data           "syscall_val" u64 
    istatic        pci_mcl.mclnames: block:1184 
    data           "m_procstart" u64 
    data           "m_procend" u64 
    data           "m_comment" u64 
    data           "m_blank"  u64 
    data           "m_deleted" u64 
    data           "m_labelname" u64 
    data           "m_define" u64 
    data           "m_definereg" u64 
    data           "m_label"  u64 
    data           "m_nop"    u64 
    data           "m_param"  u64 
    data           "m_mov"    u64 
    data           "m_push"   u64 
    data           "m_pop"    u64 
    data           "m_lea"    u64 
    data           "m_cmovcc" u64 
    data           "m_movd"   u64 
    data           "m_movq"   u64 
    data           "m_movsx"  u64 
    data           "m_movzx"  u64 
    data           "m_movsxd" u64 
    data           "m_call"   u64 
    data           "m_ret"    u64 
    data           "m_leave"  u64 
    data           "m_retn"   u64 
    data           "m_jmp"    u64 
    data           "m_jmpcc"  u64 
    data           "m_xchg"   u64 
    data           "m_add"    u64 
    data           "m_sub"    u64 
    data           "m_adc"    u64 
    data           "m_sbb"    u64 
    data           "m_imul"   u64 
    data           "m_mul"    u64 
    data           "m_imul2"  u64 
    data           "m_imul3"  u64 
    data           "m_idiv"   u64 
    data           "m_div"    u64 
    data           "m_andx"   u64 
    data           "m_orx"    u64 
    data           "m_xorx"   u64 
    data           "m_test"   u64 
    data           "m_cmp"    u64 
    data           "m_shl"    u64 
    data           "m_sar"    u64 
    data           "m_shr"    u64 
    data           "m_rol"    u64 
    data           "m_ror"    u64 
    data           "m_rcl"    u64 
    data           "m_rcr"    u64 
    data           "m_neg"    u64 
    data           "m_notx"   u64 
    data           "m_inc"    u64 
    data           "m_dec"    u64 
    data           "m_cbw"    u64 
    data           "m_cwd"    u64 
    data           "m_cdq"    u64 
    data           "m_cqo"    u64 
    data           "m_setcc"  u64 
    data           "m_bsf"    u64 
    data           "m_bsr"    u64 
    data           "m_sqrtsd" u64 
    data           "m_sqrtss" u64 
    data           "m_addss"  u64 
    data           "m_subss"  u64 
    data           "m_mulss"  u64 
    data           "m_divss"  u64 
    data           "m_addsd"  u64 
    data           "m_subsd"  u64 
    data           "m_mulsd"  u64 
    data           "m_divsd"  u64 
    data           "m_comiss" u64 
    data           "m_comisd" u64 
    data           "m_xorpd"  u64 
    data           "m_xorps"  u64 
    data           "m_andpd"  u64 
    data           "m_andps"  u64 
    data           "m_pxor"   u64 
    data           "m_pand"   u64 
    data           "m_cvtss2si" u64 
    data           "m_cvtsd2si" u64 
    data           "m_cvttss2si" u64 
    data           "m_cvttsd2si" u64 
    data           "m_cvtsi2ss" u64 
    data           "m_cvtsi2sd" u64 
    data           "m_cvtsd2ss" u64 
    data           "m_cvtss2sd" u64 
    data           "m_movdqa" u64 
    data           "m_movdqu" u64 
    data           "m_pcmpistri" u64 
    data           "m_pcmpistrm" u64 
    data           "m_fld"    u64 
    data           "m_fst"    u64 
    data           "m_fstp"   u64 
    data           "m_fild"   u64 
    data           "m_fist"   u64 
    data           "m_fistp"  u64 
    data           "m_fadd"   u64 
    data           "m_fsub"   u64 
    data           "m_fmul"   u64 
    data           "m_fdiv"   u64 
    data           "m_fsqrt"  u64 
    data           "m_fsin"   u64 
    data           "m_fcos"   u64 
    data           "m_fsincos" u64 
    data           "m_fptan"  u64 
    data           "m_fpatan" u64 
    data           "m_fabs"   u64 
    data           "m_fchs"   u64 
    data           "m_minss"  u64 
    data           "m_maxss"  u64 
    data           "m_minsd"  u64 
    data           "m_maxsd"  u64 
    data           "m_db"     u64 
    data           "m_dw"     u64 
    data           "m_dd"     u64 
    data           "m_dq"     u64 
    data           "m_ddoffset" u64 
    data           "m_segment" u64 
    data           "m_isegment" u64 
    data           "m_zsegment" u64 
    data           "m_csegment" u64 
    data           "m_align"  u64 
    data           "m_resb"   u64 
    data           "m_resw"   u64 
    data           "m_resd"   u64 
    data           "m_resq"   u64 
    data           "m_xlat"   u64 
    data           "m_loopnz" u64 
    data           "m_loopz"  u64 
    data           "m_loopcx" u64 
    data           "m_jecxz"  u64 
    data           "m_jrcxz"  u64 
    data           "m_cmpsb"  u64 
    data           "m_cmpsw"  u64 
    data           "m_cmpsd"  u64 
    data           "m_cmpsq"  u64 
    data           "m_rdtsc"  u64 
    data           "m_popcnt" u64 
    data           "m_finit"  u64 
    data           "m_fldz"   u64 
    data           "m_fld1"   u64 
    data           "m_fldpi"  u64 
    data           "m_fld2t"  u64 
    data           "m_fld2e"  u64 
    data           "m_fldlg2" u64 
    data           "m_fldln2" u64 
    data           "m_halt"   u64 
    istatic        pci_mcl.mclnopnds: block:148 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           1          u8 
    data           1          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           1          u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           1          u8 
    data           1          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           3          u8 
    data           3          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           2          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    istatic        pci_mcl.mclcodes: block:148 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           144        u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           232        u8 
    data           195        u8 
    data           201        u8 
    data           0          u8 
    data           233        u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           5          u8 
    data           2          u8 
    data           3          u8 
    data           5          u8 
    data           4          u8 
    data           0          u8 
    data           0          u8 
    data           7          u8 
    data           6          u8 
    data           4          u8 
    data           1          u8 
    data           6          u8 
    data           0          u8 
    data           7          u8 
    data           4          u8 
    data           7          u8 
    data           5          u8 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           3          u8 
    data           2          u8 
    data           0          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           188        u8 
    data           189        u8 
    data           81         u8 
    data           81         u8 
    data           88         u8 
    data           92         u8 
    data           89         u8 
    data           94         u8 
    data           88         u8 
    data           92         u8 
    data           89         u8 
    data           94         u8 
    data           0          u8 
    data           0          u8 
    data           87         u8 
    data           87         u8 
    data           84         u8 
    data           84         u8 
    data           239        u8 
    data           219        u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           102        u8 
    data           243        u8 
    data           99         u8 
    data           98         u8 
    data           0          u8 
    data           2          u8 
    data           3          u8 
    data           0          u8 
    data           2          u8 
    data           3          u8 
    data           193        u8 
    data           233        u8 
    data           201        u8 
    data           249        u8 
    data           250        u8 
    data           254        u8 
    data           255        u8 
    data           251        u8 
    data           242        u8 
    data           243        u8 
    data           225        u8 
    data           224        u8 
    data           93         u8 
    data           95         u8 
    data           93         u8 
    data           95         u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           4          u8 
    data           8          u8 
    data           215        u8 
    data           224        u8 
    data           225        u8 
    data           226        u8 
    data           227        u8 
    data           227        u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           49         u8 
    data           0          u8 
    data           0          u8 
    data           238        u8 
    data           232        u8 
    data           235        u8 
    data           233        u8 
    data           234        u8 
    data           236        u8 
    data           237        u8 
    data           244        u8 
    istatic        pci_mcl.regnames: block:168 
    data           "rnone"    u64 
    data           "r0"       u64 
    data           "r1"       u64 
    data           "r2"       u64 
    data           "r3"       u64 
    data           "r4"       u64 
    data           "r5"       u64 
    data           "r6"       u64 
    data           "r7"       u64 
    data           "r8"       u64 
    data           "r9"       u64 
    data           "r10"      u64 
    data           "r11"      u64 
    data           "r12"      u64 
    data           "r13"      u64 
    data           "r14"      u64 
    data           "r15"      u64 
    data           "r16"      u64 
    data           "r17"      u64 
    data           "r18"      u64 
    data           "r19"      u64 
    istatic        pci_mcl.regcodes: block:21 
    data           0          u8 
    data           0          u8 
    data           10         u8 
    data           11         u8 
    data           7          u8 
    data           3          u8 
    data           6          u8 
    data           12         u8 
    data           13         u8 
    data           14         u8 
    data           15         u8 
    data           1          u8 
    data           2          u8 
    data           8          u8 
    data           9          u8 
    data           5          u8 
    data           4          u8 
    data           4          u8 
    data           7          u8 
    data           5          u8 
    data           6          u8 
    istatic        pci_mcl.condnames: block:160 
    data           "ov"       u64 
    data           "nov"      u64 
    data           "ltu"      u64 
    data           "geu"      u64 
    data           "eq"       u64 
    data           "ne"       u64 
    data           "leu"      u64 
    data           "gtu"      u64 
    data           "s"        u64 
    data           "ns"       u64 
    data           "p"        u64 
    data           "np"       u64 
    data           "lt"       u64 
    data           "ge"       u64 
    data           "le"       u64 
    data           "gt"       u64 
    data           "flt"      u64 
    data           "fge"      u64 
    data           "fle"      u64 
    data           "fgt"      u64 
    istatic        pci_mcl.asmcondnames: block:160 
    data           "o"        u64 
    data           "no"       u64 
    data           "b"        u64 
    data           "ae"       u64 
    data           "z"        u64 
    data           "nz"       u64 
    data           "be"       u64 
    data           "a"        u64 
    data           "s"        u64 
    data           "ns"       u64 
    data           "p"        u64 
    data           "np"       u64 
    data           "l"        u64 
    data           "ge"       u64 
    data           "le"       u64 
    data           "g"        u64 
    data           "b"        u64 
    data           "ae"       u64 
    data           "be"       u64 
    data           "a"        u64 
    istatic        pci_mcl.asmrevcond: block:160 
    data           1          u64 
    data           0          u64 
    data           3          u64 
    data           2          u64 
    data           5          u64 
    data           4          u64 
    data           7          u64 
    data           6          u64 
    data           9          u64 
    data           8          u64 
    data           11         u64 
    data           10         u64 
    data           13         u64 
    data           12         u64 
    data           15         u64 
    data           14         u64 
    data           17         u64 
    data           16         u64 
    data           19         u64 
    data           18         u64 
    istatic        pci_mcl.dregnames: block:1088 
    data           "d0"       u64 
    data           "d1"       u64 
    data           "d2"       u64 
    data           "d3"       u64 
    data           "d4"       u64 
    data           "d5"       u64 
    data           "d6"       u64 
    data           "d7"       u64 
    data           "d8"       u64 
    data           "d9"       u64 
    data           "d10"      u64 
    data           "d11"      u64 
    data           "d12"      u64 
    data           "d13"      u64 
    data           "d14"      u64 
    data           "d15"      u64 
    data           "a0"       u64 
    data           "a1"       u64 
    data           "a2"       u64 
    data           "a3"       u64 
    data           "a4"       u64 
    data           "a5"       u64 
    data           "a6"       u64 
    data           "a7"       u64 
    data           "a8"       u64 
    data           "a9"       u64 
    data           "a10"      u64 
    data           "a11"      u64 
    data           "a12"      u64 
    data           "a13"      u64 
    data           "a14"      u64 
    data           "a15"      u64 
    data           "w0"       u64 
    data           "w1"       u64 
    data           "w2"       u64 
    data           "w3"       u64 
    data           "w4"       u64 
    data           "w5"       u64 
    data           "w6"       u64 
    data           "w7"       u64 
    data           "w8"       u64 
    data           "w9"       u64 
    data           "w10"      u64 
    data           "w11"      u64 
    data           "w12"      u64 
    data           "w13"      u64 
    data           "w14"      u64 
    data           "w15"      u64 
    data           "b0"       u64 
    data           "b1"       u64 
    data           "b2"       u64 
    data           "b3"       u64 
    data           "b4"       u64 
    data           "b5"       u64 
    data           "b6"       u64 
    data           "b7"       u64 
    data           "b8"       u64 
    data           "b9"       u64 
    data           "b10"      u64 
    data           "b11"      u64 
    data           "b12"      u64 
    data           "b13"      u64 
    data           "b14"      u64 
    data           "b15"      u64 
    data           "b16"      u64 
    data           "b17"      u64 
    data           "b18"      u64 
    data           "b19"      u64 
    data           "rax"      u64 
    data           "rbx"      u64 
    data           "rcx"      u64 
    data           "rdx"      u64 
    data           "rsi"      u64 
    data           "rdi"      u64 
    data           "rbp"      u64 
    data           "rsp"      u64 
    data           "r8"       u64 
    data           "r9"       u64 
    data           "r10"      u64 
    data           "r11"      u64 
    data           "r12"      u64 
    data           "r13"      u64 
    data           "r14"      u64 
    data           "r15"      u64 
    data           "eax"      u64 
    data           "ebx"      u64 
    data           "ecx"      u64 
    data           "edx"      u64 
    data           "esi"      u64 
    data           "edi"      u64 
    data           "ebp"      u64 
    data           "esp"      u64 
    data           "r8d"      u64 
    data           "r9d"      u64 
    data           "r10d"     u64 
    data           "r11d"     u64 
    data           "r12d"     u64 
    data           "r13d"     u64 
    data           "r14d"     u64 
    data           "r15d"     u64 
    data           "ax"       u64 
    data           "bx"       u64 
    data           "cx"       u64 
    data           "dx"       u64 
    data           "si"       u64 
    data           "di"       u64 
    data           "bp"       u64 
    data           "sp"       u64 
    data           "r8w"      u64 
    data           "r9w"      u64 
    data           "r10w"     u64 
    data           "r11w"     u64 
    data           "r12w"     u64 
    data           "r13w"     u64 
    data           "r14w"     u64 
    data           "r15w"     u64 
    data           "al"       u64 
    data           "bl"       u64 
    data           "cl"       u64 
    data           "dl"       u64 
    data           "ah"       u64 
    data           "bh"       u64 
    data           "ch"       u64 
    data           "dh"       u64 
    data           "sil"      u64 
    data           "dil"      u64 
    data           "bpl"      u64 
    data           "spl"      u64 
    data           "r8b"      u64 
    data           "r9b"      u64 
    data           "r10b"     u64 
    data           "r11b"     u64 
    data           "r12b"     u64 
    data           "r13b"     u64 
    data           "r14b"     u64 
    data           "r15b"     u64 
    istatic        pci_mcl.regsizes: block:136 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           8          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           2          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    istatic        pci_mcl.regindices: block:136 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           4          u8 
    data           5          u8 
    data           6          u8 
    data           7          u8 
    data           8          u8 
    data           9          u8 
    data           10         u8 
    data           11         u8 
    data           12         u8 
    data           13         u8 
    data           14         u8 
    data           15         u8 
    data           16         u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           4          u8 
    data           5          u8 
    data           6          u8 
    data           7          u8 
    data           8          u8 
    data           9          u8 
    data           10         u8 
    data           11         u8 
    data           12         u8 
    data           13         u8 
    data           14         u8 
    data           15         u8 
    data           16         u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           4          u8 
    data           5          u8 
    data           6          u8 
    data           7          u8 
    data           8          u8 
    data           9          u8 
    data           10         u8 
    data           11         u8 
    data           12         u8 
    data           13         u8 
    data           14         u8 
    data           15         u8 
    data           16         u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           4          u8 
    data           5          u8 
    data           6          u8 
    data           7          u8 
    data           8          u8 
    data           9          u8 
    data           10         u8 
    data           11         u8 
    data           12         u8 
    data           13         u8 
    data           14         u8 
    data           15         u8 
    data           16         u8 
    data           17         u8 
    data           18         u8 
    data           19         u8 
    data           20         u8 
    data           1          u8 
    data           5          u8 
    data           11         u8 
    data           12         u8 
    data           6          u8 
    data           4          u8 
    data           15         u8 
    data           16         u8 
    data           13         u8 
    data           14         u8 
    data           2          u8 
    data           3          u8 
    data           7          u8 
    data           8          u8 
    data           9          u8 
    data           10         u8 
    data           1          u8 
    data           5          u8 
    data           11         u8 
    data           12         u8 
    data           6          u8 
    data           4          u8 
    data           15         u8 
    data           16         u8 
    data           13         u8 
    data           14         u8 
    data           2          u8 
    data           3          u8 
    data           7          u8 
    data           8          u8 
    data           9          u8 
    data           10         u8 
    data           1          u8 
    data           5          u8 
    data           11         u8 
    data           12         u8 
    data           6          u8 
    data           4          u8 
    data           15         u8 
    data           16         u8 
    data           13         u8 
    data           14         u8 
    data           2          u8 
    data           3          u8 
    data           7          u8 
    data           8          u8 
    data           9          u8 
    data           10         u8 
    data           1          u8 
    data           5          u8 
    data           11         u8 
    data           12         u8 
    data           17         u8 
    data           18         u8 
    data           19         u8 
    data           20         u8 
    data           6          u8 
    data           4          u8 
    data           15         u8 
    data           16         u8 
    data           13         u8 
    data           14         u8 
    data           2          u8 
    data           3          u8 
    data           7          u8 
    data           8          u8 
    data           9          u8 
    data           10         u8 
    istatic        pci_mcl.xmmregnames: block:128 
    data           "xmm0"     u64 
    data           "xmm1"     u64 
    data           "xmm2"     u64 
    data           "xmm3"     u64 
    data           "xmm4"     u64 
    data           "xmm5"     u64 
    data           "xmm6"     u64 
    data           "xmm7"     u64 
    data           "xmm8"     u64 
    data           "xmm9"     u64 
    data           "xmm10"    u64 
    data           "xmm11"    u64 
    data           "xmm12"    u64 
    data           "xmm13"    u64 
    data           "xmm14"    u64 
    data           "xmm15"    u64 
    istatic        pci_mcl.fregnames: block:64 
    data           "st0"      u64 
    data           "st1"      u64 
    data           "st2"      u64 
    data           "st3"      u64 
    data           "st4"      u64 
    data           "st5"      u64 
    data           "st6"      u64 
    data           "st7"      u64 
    istatic        pci_mcl.mregnames: block:64 
    data           "mmx0"     u64 
    data           "mmx1"     u64 
    data           "mmx2"     u64 
    data           "mmx3"     u64 
    data           "mmx4"     u64 
    data           "mmx5"     u64 
    data           "mmx6"     u64 
    data           "mmx7"     u64 
    istatic        pci_mcl.jmpccnames: block:128 
    data           "jo"       u64 
    data           "jno"      u64 
    data           "jb"       u64 
    data           "jae"      u64 
    data           "jz"       u64 
    data           "jnz"      u64 
    data           "jbe"      u64 
    data           "ja"       u64 
    data           "js"       u64 
    data           "jns"      u64 
    data           "jp"       u64 
    data           "jnp"      u64 
    data           "jl"       u64 
    data           "jge"      u64 
    data           "jle"      u64 
    data           "jg"       u64 
    istatic        pci_mcl.jmpcccodes: block:16 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           4          u8 
    data           5          u8 
    data           6          u8 
    data           7          u8 
    data           8          u8 
    data           9          u8 
    data           10         u8 
    data           11         u8 
    data           12         u8 
    data           13         u8 
    data           14         u8 
    data           15         u8 
    istatic        pci_mcl.setccnames: block:128 
    data           "seto"     u64 
    data           "setno"    u64 
    data           "setb"     u64 
    data           "setae"    u64 
    data           "setz"     u64 
    data           "setnz"    u64 
    data           "setbe"    u64 
    data           "seta"     u64 
    data           "sets"     u64 
    data           "setns"    u64 
    data           "setp"     u64 
    data           "setnp"    u64 
    data           "setl"     u64 
    data           "setge"    u64 
    data           "setle"    u64 
    data           "setg"     u64 
    istatic        pci_mcl.setcccodes: block:16 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           4          u8 
    data           5          u8 
    data           6          u8 
    data           7          u8 
    data           8          u8 
    data           9          u8 
    data           10         u8 
    data           11         u8 
    data           12         u8 
    data           13         u8 
    data           14         u8 
    data           15         u8 
    istatic        pci_mcl.cmovccnames: block:128 
    data           "cmovo"    u64 
    data           "cmovno"   u64 
    data           "cmovb"    u64 
    data           "cmovae"   u64 
    data           "cmovz"    u64 
    data           "cmovnz"   u64 
    data           "cmovbe"   u64 
    data           "cmova"    u64 
    data           "cmovs"    u64 
    data           "cmovns"   u64 
    data           "cmovp"    u64 
    data           "cmovnp"   u64 
    data           "cmovl"    u64 
    data           "cmovge"   u64 
    data           "cmovle"   u64 
    data           "cmovg"    u64 
    istatic        pci_mcl.cmovcccodes: block:16 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           4          u8 
    data           5          u8 
    data           6          u8 
    data           7          u8 
    data           8          u8 
    data           9          u8 
    data           10         u8 
    data           11         u8 
    data           12         u8 
    data           13         u8 
    data           14         u8 
    data           15         u8 
    istatic        pci_mcl.segmentnames: block:48 
    data           "no_seg"   u64 
    data           "code_seg" u64 
    data           "idata_seg" u64 
    data           "zdata_seg" u64 
    data           "rodata_seg" u64 
    data           "impdata_seg" u64 
    istatic        pci_mcl.reftypenames: block:24 
    data           "extern_ref" u64 
    data           "fwd_ref"  u64 
    data           "back_ref" u64 
    istatic        pci_mcl.opndnames_ma: block:56 
    data           "a_none"   u64 
    data           "a_reg"    u64 
    data           "a_imm"    u64 
    data           "a_mem"    u64 
    data           "a_cond"   u64 
    data           "a_xreg"   u64 
    data           "a_wreg"   u64 
    zstatic        pci_mcl.mlabelno: i64 
    zstatic        pci_mcl.foptimise: u8 
    zstatic        pci_mcl.pclopndstack: block:3150 
    zstatic        pci_mcl.noperands: i64 
    zstatic        pci_mcl.mstackdepth: i64 
    zstatic        pci_mcl.pclstack: u64 
    zstatic        pci_mcl.pclstackzero: block:15 
    istatic        pci_mcl.locnames: block:72 
    data           "no_loc"   u64 
    data           "reg_loc"  u64 
    data           "xreg_loc" u64 
    data           "stack_loc" u64 
    data           "imm_loc"  u64 
    data           "mem_loc"  u64 
    data           "memhigh_loc" u64 
    data           "regvar_loc" u64 
    data           "xregvar_loc" u64 
    istatic        pci_mcl.fmtnames: block:160 
    data           "nofmt_void" u64 
    data           "reg_d64"  u64 
    data           "xreg_x64" u64 
    data           "xreg_x32" u64 
    data           "stack_d64" u64 
    data           "stack_x64" u64 
    data           "stack_x32" u64 
    data           "imm_d64"  u64 
    data           "imm_x64"  u64 
    data           "imm_x32"  u64 
    data           "imm_str"  u64 
    data           "imm_memaddr" u64 
    data           "imm_label" u64 
    data           "imm_labaddr" u64 
    data           "mem_d64"  u64 
    data           "mem_x64"  u64 
    data           "mem_x32"  u64 
    data           "memhigh_d64" u64 
    data           "regvar_d64" u64 
    data           "xregvar_x64" u64 
    istatic        pci_mcl.loccodes: block:20 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           2          u8 
    data           3          u8 
    data           3          u8 
    data           3          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           5          u8 
    data           5          u8 
    data           5          u8 
    data           5          u8 
    data           7          u8 
    data           8          u8 
    istatic        pci_mcl.floatloc: block:20 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           1          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    istatic        pci_mcl.loadfmt: block:20 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           1          u8 
    data           2          u8 
    data           3          u8 
    data           1          u8 
    data           1          u8 
    data           2          u8 
    istatic        pci_mcl.pushfmt: block:20 
    data           0          u8 
    data           4          u8 
    data           5          u8 
    data           6          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           4          u8 
    data           5          u8 
    data           6          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           4          u8 
    data           5          u8 
    data           6          u8 
    data           4          u8 
    data           4          u8 
    data           5          u8 
    zstatic        pci_mcl.regset: block:16 
    zstatic        pci_mcl.xregset: block:16 
    zstatic        pci_mcl.isregvar: block:16 
    zstatic        pci_mcl.isxregvar: block:16 
    zstatic        pci_mcl.inf_proccalls: i64 
    zstatic        pci_mcl.inf_proclocals: i64 
    zstatic        pci_mcl.inf_procxlocals: i64 
    zstatic        pci_mcl.inf_leafproc: i64 
    zstatic        pci_mcl.inf_highreg: i64 
    zstatic        pci_mcl.inf_highxreg: i64 
    zstatic        pci_mcl.inf_maxargs: i64 
    zstatic        pci_mcl.inf_assem: i64 
    zstatic        pci_mcl.inf_r10used: i64 
    zstatic        pci_mcl.inf_r11used: i64 
    zstatic        pci_mcl.inf_r13used: i64 
    zstatic        pci_mcl.dsaveregs: block:128 
    zstatic        pci_mcl.xsaveregs: block:128 
    zstatic        pci_mcl.ndsaveregs: i64 
    zstatic        pci_mcl.ndsavepush: i64 
    zstatic        pci_mcl.nxsaveregs: i64 
    zstatic        pci_mcl.dsaveoffset: i64 
    zstatic        pci_mcl.xsaveoffset: i64 
    zstatic        pci_mcl.needstackframe: i64 
    zstatic        pci_mcl.framebytes: i64 
    zstatic        pci_mcl.needshadow48: i64 
    zstatic        pci_mcl.needshadow32: i64 
    zstatic        pci_mcl.noxorclear: u8 
    istatic        pci_mcl.xregnames: block:136 
    data           "xnone"    u64 
    data           "xr0"      u64 
    data           "xr1"      u64 
    data           "xr2"      u64 
    data           "xr3"      u64 
    data           "xr4"      u64 
    data           "xr5"      u64 
    data           "xr6"      u64 
    data           "xr7"      u64 
    data           "xr8"      u64 
    data           "xr9"      u64 
    data           "xr10"     u64 
    data           "xr11"     u64 
    data           "xr12"     u64 
    data           "xr13"     u64 
    data           "xr14"     u64 
    data           "xr15"     u64 
    zstatic        pci_mcl.procdefpcl: u64 
    zstatic        pci_mcl.procdef: u64 
    zstatic        pci_mcl.callshadow: block:128 
    zstatic        pci_mcl.callslots: block:128 
    zstatic        pci_mcl.callalign: block:16 
    zstatic        pci_mcl.callargs: block:16 
    zstatic        pci_mcl.callnvars: block:16 
    zstatic        pci_mcl.ncalldepth: i64 
    zstatic        pci_mcl.paramdefs: block:256 
    zstatic        pci_mcl.localdefs: block:2048 
    zstatic        pci_mcl.nparams: i64 
    zstatic        pci_mcl.nlocals: i64 
    zstatic        pci_mcl.retmode: i64 
    zstatic        pci_mcl.passno: i64 
    zstatic        pci_mcl.sa_nargs: i64 
    istatic        pci_mcl.multregs: block:48 
    data           1          u64 
    data           2          u64 
    data           3          u64 
    data           11         u64 
    data           12         u64 
    data           13         u64 
    istatic        pci_mcl.multxregs: block:48 
    data           1          u64 
    data           2          u64 
    data           3          u64 
    data           4          u64 
    data           5          u64 
    data           6          u64 
    zstatic        pci_mcl.paramoffset: i64 
    zstatic        pci_mcl.lababs32: i64 
    zstatic        pci_mcl.lababs64: i64 
    zstatic        pci_mcl.labneg32: i64 
    zstatic        pci_mcl.labneg64: i64 
    zstatic        pci_mcl.labmask63: i64 
    zstatic        pci_mcl.laboffset64: i64 
    zstatic        pci_mcl.labzero: i64 
    istatic        pci_mcl.kk0used: i64 
    data           0          u64 
    zstatic        pci_mcl.stackaligned: i64 
    zstatic        pci_mcl.mccode: u64 
    zstatic        pci_mcl.mccodex: u64 
    istatic        pci_mcl.currsegment: i64 
    data           0          u64 
    istatic        pci_mcl.currzdataalign: i64 
    data           0          u64 
    istatic        pci_mcl.curridataalign: i64 
    data           0          u64 
    zstatic        pci_mcl.frameoffset: i64 
    zstatic        pci_mcl.isthreadedproc: i64 
    zstatic        pci_mcl.iscallbackproc: i64 
    zstatic        pci_mcl.structretoffset: i64 
    zstatic        pci_mcl.stacksetinstr: u64 
    zstatic        pci_mcl.currblocksize: i64 
    zstatic        pci_mcl.allasmstr: u64 
    zstatic        pci_mcl.allasmstrlen: i64 
    zstatic        pci_mcl.dstackopnd: u64 
    zstatic        pci_mcl.dframeopnd: u64 
    istatic        pci_mcl.zero_opnd: u64 
    data           0          u64 
    zstatic        pci_mcl.regtable: block:2048 
    zstatic        pci_mcl.smallinttable: block:264 
    zstatic        pci_mcl.frameregtable: block:1544 
    zstatic        pci_mcl.stringtable: u64 
    zstatic        pci_mcl.stringlabtable: u64 
    zstatic        pci_mcl.realtable: u64 
    zstatic        pci_mcl.reallabtable: u64 
    zstatic        pci_mcl.stringtablesize: i64 
    zstatic        pci_mcl.realtablesize: i64 
    istatic        pci_mcl.nstrings: i64 
    data           0          u64 
    istatic        pci_mcl.nreals: i64 
    data           0          u64 
    zstatic        pci_mcl.labeltable: block:640000 
    zstatic        pci_mcl.sbuffer: block:16 
    istatic        pci_mcl.dest: u64 
    data           &pci_mcl.sbuffer u64 
    zstatic        pci_mcl.destlinestart: i64 
    zstatic        pci_mcl.currasmproc: u64 
    zstatic        pci_mcl.noregvar: i64 
    zstatic        pci_mcl.mseqno: i64 
    zstatic        pci_mcl.rtsproclabels: block:48 
    zstatic        pci_mcl.lab_funcnametable: i64 
    zstatic        pci_mcl.lab_funcaddrtable: i64 
    zstatic        pci_mcl.lab_funcnprocs: i64 
    zstatic        pci_mcl.ss_zdatalen: i64 
    zstatic        pci_mcl.ss_zdata: u64 
    zstatic        pci_mcl.ss_idata: u64 
    zstatic        pci_mcl.ss_code: u64 
    zstatic        pci_mcl.ss_idatarelocs: u64 
    zstatic        pci_mcl.ss_coderelocs: u64 
    zstatic        pci_mcl.ss_nidatarelocs: i64 
    zstatic        pci_mcl.ss_ncoderelocs: i64 
    zstatic        pci_mcl.ss_symboltable: u64 
    zstatic        pci_mcl.ss_nsymbols: i64 
    zstatic        pci_mcl.ss_symboltablesize: i64 
    zstatic        pci_mcl.labeldeftable: u64 
    zstatic        pci_mcl.alineno: i64 
    zstatic        pci_mcl.psearchlibs: block:240 
    zstatic        pci_mcl.npsearchlibs: i64 
    zstatic        pci_mcl.plibfiles: block:408 
    zstatic        pci_mcl.nplibfiles: i64 
    zstatic        pc_genmcl.currpcl: u64 
    zstatic        pc_genmcl.px_handlertable: block:1744 
    istatic        pc_genmcl.scondcodes: block:6 
    data           4          u8 
    data           5          u8 
    data           12         u8 
    data           14         u8 
    data           13         u8 
    data           15         u8 
    istatic        pc_genmcl.ucondcodes: block:6 
    data           4          u8 
    data           5          u8 
    data           2          u8 
    data           6          u8 
    data           3          u8 
    data           7          u8 
    istatic        pc_genmcl.multregs: block:48 
    data           1          u64 
    data           2          u64 
    data           3          u64 
    data           11         u64 
    data           12         u64 
    data           13         u64 
    istatic        pc_genmcl.multxregs: block:48 
    data           1          u64 
    data           2          u64 
    data           3          u64 
    data           4          u64 
    data           5          u64 
    data           6          u64 
    istatic        pc_genmcl.inithandlers.initdone: u8 
    data           0          u8 
    istatic        pc_libmcl.fshowmsource: i64 
    data           0          u64 
    zstatic        pc_libmcl.rd: block:120 
    zstatic        pc_libmcl.strmcl.str: block:512 
    istatic        pc_libmcl.getregname.prefix: block:136 
    data           "B"        u64 
    data           "W"        u64 
    data           ""         u64 
    data           "A"        u64 
    data           ""         u64 
    data           ""         u64 
    data           ""         u64 
    data           "D"        u64 
    data           ""         u64 
    data           ""         u64 
    data           ""         u64 
    data           ""         u64 
    data           ""         u64 
    data           ""         u64 
    data           ""         u64 
    data           "Q"        u64 
    data           "N"        u64 
    zstatic        pc_libmcl.getregname.str: block:32 
    zstatic        pc_libmcl.fgetregname.str: block:32 
    zstatic        pc_libmcl.getfullname.str: block:256 
    zstatic        pc_libmcl.stropnd.str: block:512 
    zstatic        pc_libmcl.strvalue.str: block:512 
    zstatic        pc_stackmcl.stropndstack.str: block:512 
    zstatic        pc_genss.ncomments: i64 
    zstatic        pc_genss.nblanks: i64 
    zstatic        pc_genss.ndeleted: i64 
    zstatic        pc_genss.rex: i64 
    zstatic        pc_genss.sizeoverride: i64 
    zstatic        pc_genss.addroverride: i64 
    zstatic        pc_genss.f2override: i64 
    zstatic        pc_genss.f3override: i64 
    zstatic        pc_genss.extraparam: u64 
    istatic        pc_genss.currseg: i64 
    data           0          u64 
    zstatic        pc_genss.currdata: u64 
    zstatic        pc_genss.currrelocs: u64 
    zstatic        pc_genss.nrelocs: i64 
    istatic        pc_genss.instrno: i64 
    data           2          u64 
    zstatic        pc_genss.currmcl: u64 
    istatic        pc_genss.genrm.scaletable: block:64 
    data           0          u64 
    data           1          u64 
    data           0          u64 
    data           2          u64 
    data           0          u64 
    data           0          u64 
    data           0          u64 
    data           3          u64 
    istatic        pc_objdecls.relocnames: block:56 
    data           "abs_rel"  u64 
    data           "addr64_rel" u64 
    data           "addr32_rel" u64 
    data           "addr32nb_rel" u64 
    data           "rel32_rel" u64 
    data           "rel321_rel" u64 
    data           "rel8_rel" u64 
    zstatic        mm_name.currstproc: u64 
    istatic        mm_name.allowmodname: i64 
    data           0          u64 
    zstatic        mm_name.noexpand: i64 
    zstatic        mm_name.noassem: i64 
    zstatic        mm_name.macrolevels: i64 
    zstatic        mm_name.macroparams: block:400 
    zstatic        mm_name.macroparamsgen: block:400 
    zstatic        mm_name.macroargs: block:400 
    zstatic        mm_name.nmacroparams: i64 
    zstatic        mm_name.nmacroargs: i64 
    zstatic        mm_name.resolvetopname.maxdupl: i64 
    zstatic        mm_type.countedfields: i64 
    zstatic        mm_type.inassem: i64 
    zstatic        mm_genpcl.retindex: i64 
    zstatic        mm_genpcl.initstaticsindex: i64 
    zstatic        mm_genpcl.framebytes: i64 
    zstatic        mm_genpcl.parambytes: i64 
    zstatic        mm_genpcl.retpending: i64 
    zstatic        mm_genpcl.pclastframe: u64 
    zstatic        mm_genpcl.pcltempindex: i64 
    zstatic        mm_genpcl.pclcurrproc: u64 
    zstatic        mm_genpcl.loopstack: block:1600 
    zstatic        mm_genpcl.loopindex: i64 
    zstatic        mm_genpcl.zero_unit: block:64 
    istatic        mm_genpcl.pzero: u64 
    data           &mm_genpcl.zero_unit u64 
    zstatic        mm_blockpcl.casestmt: block:160 
    zstatic        mm_blockpcl.caseelse: block:160 
    zstatic        mm_blockpcl.casedepth: i64 
    zstatic        mm_blockpcl.sw_labeltable: u64 
    zstatic        mm_blockpcl.sw_valuetable: u64 
    zstatic        mm_blockpcl.sw_lower: i64 
    zstatic        mm_blockpcl.sw_ncases: i64 
    zstatic        mm_blockpcl.sw_defaultseen: u8 
    zstatic        mm_blockpcl.sw_defaultlabel: i64 
    zstatic        mm_blockpcl.sw_breaklabel: i64 
    istatic        mm_blockpcl.maxreg: i64 
    data           0          u64 
    zstatic        pc_writeexe.libinsttable: block:240 
    zstatic        pc_writeexe.libinstnames: block:240 
    zstatic        pc_writeexe.libnotable: block:240 
    zstatic        pc_writeexe.basereloclist: u64 
    zstatic        pc_writeexe.nbaserelocs: i64 
    zstatic        pc_writeexe.maxrelocaddr: i64 
    zstatic        pc_writeexe.blockbases: block:4000 
    zstatic        pc_writeexe.blockcounts: block:2000 
    zstatic        pc_writeexe.blockbytes: block:2000 
    zstatic        pc_writeexe.blockpadding: block:500 
    zstatic        pc_writeexe.nbaseblocks: i64 
    zstatic        pc_writeexe.basetablesize: i64 
    zstatic        pc_writeexe.imagebase: i64 
    zstatic        pc_writeexe.imagesize: i64 
    zstatic        pc_writeexe.filesize: i64 
    zstatic        pc_writeexe.thunktable: u64 
    zstatic        pc_writeexe.fileiatoffset: i64 
    zstatic        pc_writeexe.fileiatsize: i64 
    zstatic        pc_writeexe.stentrypoint: u64 
    zstatic        pc_writeexe.stentrypoint2: u64 
    zstatic        pc_writeexe.stentrypoint3: u64 
    zstatic        pc_writeexe.sectiontable: block:720 
    zstatic        pc_writeexe.nsections: i64 
    zstatic        pc_writeexe.importdir: u64 
    zstatic        pc_writeexe.importtable: block:144000 
    zstatic        pc_writeexe.nimports: i64 
    zstatic        pc_writeexe.exporttable: block:16000 
    zstatic        pc_writeexe.nexports: i64 
    zstatic        pc_writeexe.dllfilename: u64 
    zstatic        pc_writeexe.isdll: i64 
    zstatic        pc_writeexe.dlltable: block:2400 
    zstatic        pc_writeexe.ndlls: i64 
    zstatic        pc_writeexe.datastart: u64 
    zstatic        pc_writeexe.dataptr: u64 
    zstatic        pc_writeexe.userentrypoint: u64 
    zstatic        pc_writeexe.exportdirvirtaddr: i64 
    zstatic        pc_writeexe.exportdirvirtsize: i64 
    zstatic        pc_writeexe.exportdiroffset: i64 
    zstatic        pc_writeexe.blockdirvirtaddr: i64 
    zstatic        pc_writeexe.blockdirvirtsize: i64 
    zstatic        pc_writeexe.blockdiroffset: i64 
    istatic        pc_writeexe.writedosstub.stubdata: block:128 
    data           77         u8 
    data           90         u8 
    data           144        u8 
    data           0          u8 
    data           3          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           4          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           255        u8 
    data           255        u8 
    data           0          u8 
    data           0          u8 
    data           184        u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           64         u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           128        u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           14         u8 
    data           31         u8 
    data           186        u8 
    data           14         u8 
    data           0          u8 
    data           180        u8 
    data           9          u8 
    data           205        u8 
    data           33         u8 
    data           184        u8 
    data           1          u8 
    data           76         u8 
    data           205        u8 
    data           33         u8 
    data           84         u8 
    data           104        u8 
    data           105        u8 
    data           115        u8 
    data           32         u8 
    data           112        u8 
    data           114        u8 
    data           111        u8 
    data           103        u8 
    data           114        u8 
    data           97         u8 
    data           109        u8 
    data           32         u8 
    data           99         u8 
    data           97         u8 
    data           110        u8 
    data           110        u8 
    data           111        u8 
    data           116        u8 
    data           32         u8 
    data           98         u8 
    data           101        u8 
    data           32         u8 
    data           114        u8 
    data           117        u8 
    data           110        u8 
    data           32         u8 
    data           105        u8 
    data           110        u8 
    data           32         u8 
    data           68         u8 
    data           79         u8 
    data           83         u8 
    data           32         u8 
    data           109        u8 
    data           111        u8 
    data           100        u8 
    data           101        u8 
    data           46         u8 
    data           13         u8 
    data           13         u8 
    data           10         u8 
    data           36         u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    data           0          u8 
    zstatic        pc_disasm.nmodules: i64 
    zstatic        pc_disasm.xfchsmask_pd: i64 
    istatic        pc_disasm.opnames: block:64 
    data           "add"      u64 
    data           "or"       u64 
    data           "adc"      u64 
    data           "sbb"      u64 
    data           "and"      u64 
    data           "sub"      u64 
    data           "xor"      u64 
    data           "cmp"      u64 
    istatic        pc_disasm.condnames: block:128 
    data           "o"        u64 
    data           "no"       u64 
    data           "b"        u64 
    data           "ae"       u64 
    data           "z"        u64 
    data           "nz"       u64 
    data           "be"       u64 
    data           "a"        u64 
    data           "s"        u64 
    data           "ns"       u64 
    data           "p"        u64 
    data           "np"       u64 
    data           "l"        u64 
    data           "ge"       u64 
    data           "le"       u64 
    data           "g"        u64 
    istatic        pc_disasm.addrmodenames: block:24 
    data           "amreg"    u64 
    data           "ammem"    u64 
    data           "amrel"    u64 
    zstatic        pc_disasm.rex: i64 
    zstatic        pc_disasm.addrmode: i64 
    zstatic        pc_disasm.rmreg: i64 
    zstatic        pc_disasm.rmopc: i64 
    zstatic        pc_disasm.basereg: i64 
    zstatic        pc_disasm.indexreg: i64 
    zstatic        pc_disasm.scale: i64 
    zstatic        pc_disasm.opsize: i64 
    zstatic        pc_disasm.offset: i64 
    zstatic        pc_disasm.offsetsize: i64 
    zstatic        pc_disasm.sizeoverride: i64 
    zstatic        pc_disasm.addroverride: i64 
    zstatic        pc_disasm.f2override: i64 
    zstatic        pc_disasm.f3override: i64 
    zstatic        pc_disasm.deststr: block:256 
    zstatic        pc_disasm.destptr: u64 
    zstatic        pc_disasm.codeptr: u64 
    zstatic        pc_disasm.decodeinstr.str: block:256 
    istatic        pc_disasm.strreg.regnames8: block:160 
    data           "al"       u64 
    data           "cl"       u64 
    data           "dl"       u64 
    data           "bl"       u64 
    data           "spl"      u64 
    data           "bpl"      u64 
    data           "sil"      u64 
    data           "dil"      u64 
    data           "r8b"      u64 
    data           "r9b"      u64 
    data           "r10b"     u64 
    data           "r11b"     u64 
    data           "r12b"     u64 
    data           "r13b"     u64 
    data           "r14b"     u64 
    data           "r15b"     u64 
    data           "ah"       u64 
    data           "bh"       u64 
    data           "ch"       u64 
    data           "dh"       u64 
    istatic        pc_disasm.strreg.regnames16: block:128 
    data           "ax"       u64 
    data           "cx"       u64 
    data           "dx"       u64 
    data           "bx"       u64 
    data           "sp"       u64 
    data           "bp"       u64 
    data           "si"       u64 
    data           "di"       u64 
    data           "r8w"      u64 
    data           "r9w"      u64 
    data           "r10w"     u64 
    data           "r11w"     u64 
    data           "r12w"     u64 
    data           "r13w"     u64 
    data           "r14w"     u64 
    data           "r15w"     u64 
    istatic        pc_disasm.strreg.regnames32: block:128 
    data           "eax"      u64 
    data           "ecx"      u64 
    data           "edx"      u64 
    data           "ebx"      u64 
    data           "esp"      u64 
    data           "ebp"      u64 
    data           "esi"      u64 
    data           "edi"      u64 
    data           "r8d"      u64 
    data           "r9d"      u64 
    data           "r10d"     u64 
    data           "r11d"     u64 
    data           "r12d"     u64 
    data           "r13d"     u64 
    data           "r14d"     u64 
    data           "r15d"     u64 
    istatic        pc_disasm.strreg.regnames64: block:128 
    data           "rax"      u64 
    data           "rcx"      u64 
    data           "rdx"      u64 
    data           "rbx"      u64 
    data           "rsp"      u64 
    data           "rbp"      u64 
    data           "rsi"      u64 
    data           "rdi"      u64 
    data           "r8"       u64 
    data           "r9"       u64 
    data           "r10"      u64 
    data           "r11"      u64 
    data           "r12"      u64 
    data           "r13"      u64 
    data           "r14"      u64 
    data           "r15"      u64 
    istatic        pc_disasm.strreg.mregnames8: block:160 
    data           "B0"       u64 
    data           "B10"      u64 
    data           "B11"      u64 
    data           "B4"       u64 
    data           "B15"      u64 
    data           "B14"      u64 
    data           "B5"       u64 
    data           "B3"       u64 
    data           "B12"      u64 
    data           "B13"      u64 
    data           "B1"       u64 
    data           "B2"       u64 
    data           "B6"       u64 
    data           "B7"       u64 
    data           "B8"       u64 
    data           "B9"       u64 
    data           "B16"      u64 
    data           "B18"      u64 
    data           "B19"      u64 
    data           "B17"      u64 
    istatic        pc_disasm.strreg.mregnames16: block:128 
    data           "W0"       u64 
    data           "W10"      u64 
    data           "W11"      u64 
    data           "W4"       u64 
    data           "Wsp"      u64 
    data           "Wbp"      u64 
    data           "W5"       u64 
    data           "W3"       u64 
    data           "W12"      u64 
    data           "W13"      u64 
    data           "W1"       u64 
    data           "W2"       u64 
    data           "W6"       u64 
    data           "W7"       u64 
    data           "W8"       u64 
    data           "W9"       u64 
    istatic        pc_disasm.strreg.mregnames32: block:128 
    data           "A0"       u64 
    data           "A10"      u64 
    data           "A11"      u64 
    data           "A4"       u64 
    data           "Astack"   u64 
    data           "Aframe"   u64 
    data           "A5"       u64 
    data           "A3"       u64 
    data           "A12"      u64 
    data           "A13"      u64 
    data           "A1"       u64 
    data           "A2"       u64 
    data           "A6"       u64 
    data           "A7"       u64 
    data           "A8"       u64 
    data           "A9"       u64 
    istatic        pc_disasm.strreg.mregnames64: block:128 
    data           "D0"       u64 
    data           "D10"      u64 
    data           "D11"      u64 
    data           "D4"       u64 
    data           "Dstack"   u64 
    data           "Dframe"   u64 
    data           "D5"       u64 
    data           "D3"       u64 
    data           "D12"      u64 
    data           "D13"      u64 
    data           "D1"       u64 
    data           "D2"       u64 
    data           "D6"       u64 
    data           "D7"       u64 
    data           "D8"       u64 
    data           "D9"       u64 
    istatic        pc_disasm.strfreg.fregnames: block:64 
    data           "st0"      u64 
    data           "st1"      u64 
    data           "st2"      u64 
    data           "st3"      u64 
    data           "st4"      u64 
    data           "st5"      u64 
    data           "st6"      u64 
    data           "st7"      u64 
    zstatic        pc_disasm.printaddrmode.str: block:100 
    zstatic        pc_disasm.strxmm.str: block:32 
    zstatic        pc_disasm.strmmx.str: block:32 
    zstatic        mm_export.sbuffer: block:16 
    istatic        mm_export.dest: u64 
    data           &mm_export.sbuffer u64 

Proc mm_tables.inittypetables:
    local          mm_tables.inittypetables.genop i64 
    local          mm_tables.inittypetables.s i64 
    local          mm_tables.inittypetables.t i64 
    local          mm_tables.inittypetables.a i64 
    local          mm_tables.inittypetables.specop i64 
    local          mm_tables.inittypetables.av_1 i64 
    local          mm_tables.inittypetables.av_2 i64 
    local          mm_tables.inittypetables.i i64 
    procentry                 
#10117: 
    push           1          i64 
    pop            mm_tables.inittypetables.i i64 
    push           18         i64 
    pop            mm_tables.inittypetables.av_1 i64 
    push           mm_tables.inittypetables.av_1 i64 
    push           1          i64 
    jumplt         #10118     i64 
#10119: 
    push           1          i64 
    push           &mm_tables.intresult 
    push           &mm_tables.intresultlist 
    push           mm_tables.inittypetables.i i64 
    pushptroff                u8 1 -1
    popptroff                 u8 1 0
#10120: 
    forup          #10119     i64 1
    opnd           mm_tables.inittypetables.i 
    opnd           mm_tables.inittypetables.av_1 
#10118: 
#10121: 
    push           1          i64 
    pop            mm_tables.inittypetables.i i64 
    push           49         i64 
    pop            mm_tables.inittypetables.av_2 i64 
    push           mm_tables.inittypetables.av_2 i64 
    push           1          i64 
    jumplt         #10122     i64 
#10123: 
    push           &mm_tables.softconvmappings 
    push           mm_tables.inittypetables.i i64 
    addrefoff                 block:6 6 -6
    push           1          i64 
    pushptroff                i16 2 -2
    pop            mm_tables.inittypetables.s i64 
    push           &mm_tables.softconvmappings 
    push           mm_tables.inittypetables.i i64 
    addrefoff                 block:6 6 -6
    push           2          i64 
    pushptroff                i16 2 -2
    pop            mm_tables.inittypetables.t i64 
    push           &mm_tables.softconvmappings 
    push           mm_tables.inittypetables.i i64 
    addrefoff                 block:6 6 -6
    push           3          i64 
    pushptroff                i16 2 -2
    push           &mm_tables.softconvtable 
    push           mm_tables.inittypetables.s i64 
    addrefoff                 block:56 56 -56
    push           mm_tables.inittypetables.t i64 
    popptroff                 i64 8 -8
#10124: 
    forup          #10123     i64 1
    opnd           mm_tables.inittypetables.i 
    opnd           mm_tables.inittypetables.av_2 
#10122: 
#10125: 
    retproc                   
End


Proc pc_libpcl.pcl_start::
    procentry                 
    push           pc_libpcl.initpcalloc i64 
    pop            pc_libpcl.pcalloc i64 
    setargs                   1 0
    push           pc_libpcl.pcalloc i64 
    push           32         i64 
    mul                       i64 
    callfn         &mlibp.pcm_allocz u64 
    pop            pc_libpcl.pcstart u64 
    push           pc_libpcl.pcstart u64 
    push           pc_libpcl.pcalloc i64 
    addrefoff                 u64 32 -256
    pop            pc_libpcl.pcend u64 
    push           pc_libpcl.pcstart u64 
    push           1          i64 
    subrefoff                 u64 32 0
    pop            pc_libpcl.pccurr u64 
    push           0          i64 
    pop            pc_libpcl.pcfixed u8 
    push           0          i64 
    pop            pc_libpcl.pcseqno i64 
    push           0          i64 
    pop            pc_libpcl.pcneedfntable i64 
    push           0          i64 
    store          pc_libpcl.labelnooffset i64 
    store          pc_libpcl.maxuserlabel i64 
    pop            pc_libpcl.labelno i64 
    push           0          i64 
    pop            pc_libpcl.mcldone i64 
    push           &pc_decls.rtsproctable 
    clear                     block:48 
#10127: 
    retproc                   
End


Proc pc_libpcl.pcl_end::
    param          pc_libpcl.pcl_end.fixup i64 
    procentry                 
    push           pc_libpcl.pccurr u64 
    push           pc_libpcl.pccurr u64 
    jumplt         #10129     u64 
    push           pc_libpcl.pccurr u64 
    push           1          
    pushptroff                u8 1 0
    push           11         i64 
    jumpeq         #10129     i64 
    setargs                   2 0
    push           0          u64 
    push           11         i64 
    callproc       &pc_libpcl.pcl_gen 
#10129: 
    push           pc_libpcl.pcl_end.fixup i64 
    jumpfalse      #10130     i64 
    setargs                   0 0
    callproc       &pc_libpcl.fixuppcl 
#10130: 
#10131: 
    retproc                   
End


Proc pc_libpcl.pcl_free::
    param          pc_libpcl.pcl_free.fixup i64 
    procentry                 
    push           0          u64 
    store          pc_libpcl.pcend u64 
    store          pc_libpcl.pccurr u64 
    pop            pc_libpcl.pcstart u64 
    push           0          i64 
    pop            pc_libpcl.pcfixed u8 
#10133: 
    retproc                   
End


Proc pc_libpcl.fixuppcl:
    local          pc_libpcl.fixuppcl.d u64 
    local          pc_libpcl.fixuppcl.p u64 
    local          pc_libpcl.fixuppcl.pextproc u64 
    local          pc_libpcl.fixuppcl.labno i64 
    local          pc_libpcl.fixuppcl.insideproc i64 
    local          pc_libpcl.fixuppcl.extparams i64 
    procentry                 
    push           pc_libpcl.pcfixed u8 
    jumpfalse      #10135     i64 
    jump           #10136     
#10135: 
    push           pc_libpcl.pcstart u64 
    pop            pc_libpcl.fixuppcl.p u64 
    push           0          i64 
    pop            pc_libpcl.fixuppcl.insideproc i64 
    push           0          u64 
    pop            pc_libpcl.fixuppcl.pextproc u64 
    jump           #10137     
#10138: 
    push           pc_libpcl.fixuppcl.p u64 
    push           1          
    pushptroff                u8 1 0
    switch         #10139     5 96
    opnd           #10140     
#10139: 
    switchlabel    #10141     
    switchlabel    #10141     
    switchlabel    #10140     
    switchlabel    #10142     
    switchlabel    #10140     
    switchlabel    #10143     
    switchlabel    #10140     
    switchlabel    #10144     
    switchlabel    #10145     
    switchlabel    #10146     
    switchlabel    #10147     
    switchlabel    #10140     
    switchlabel    #10148     
    switchlabel    #10148     
    switchlabel    #10140     
    switchlabel    #10149     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10140     
    switchlabel    #10150     
    switchlabel    #10151     
    switchlabel    #10152     
    switchlabel    #10153     
    switchlabel    #10154     
    endswitch                 
#10148: 
    push           pc_libpcl.fixuppcl.insideproc i64 
    push           1          i64 
    jumpeq         #10155     i64 
    setargs                   1 0
    push           "Not allowed" u64 
    callproc       &pc_libpcl.perror 
#10155: 
    push           pc_libpcl.fixuppcl.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_libpcl.fixuppcl.d u64 
    push           pc_libpcl.fixuppcl.p u64 
    push           1          
    pushptroff                u8 1 0
    push           pc_libpcl.fixuppcl.d u64 
    push           27         
    popptroff                 u8 1 0
    push           pc_libpcl.fixuppcl.p u64 
    push           pc_libpcl.fixuppcl.d u64 
    push           16         
    popptroff                 u64 1 0
    push           pc_libpcl.fixuppcl.d u64 
    push           46         
    pushptroff                u16 1 0
    push           0          i64 
    dotindex                  i64 
    jumpfalse      #10156     u64 
    setargs                   2 0
    push           pc_libpcl.fixuppcl.d u64 
    pushptr                   u64 
    push           "Redefining local/param/ext:" u64 
    callproc       &pc_libpcl.perror_s 
#10156: 
    push           1          u64 
    push           pc_libpcl.fixuppcl.d u64 
    push           46         
    addrefoff                 u64 1 0
    push           0          i64 
    popdotindex               u16 
    jump           #10157     
#10142: 
    push           pc_libpcl.fixuppcl.insideproc i64 
    jumpfalse      #10158     i64 
    setargs                   1 0
    push           "Nested proc" u64 
    callproc       &pc_libpcl.perror 
#10158: 
    push           1          i64 
    pop            pc_libpcl.fixuppcl.insideproc i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_libpcl.fixuppcl.d u64 
    push           pc_libpcl.fixuppcl.p u64 
    push           1          
    pushptroff                u8 1 0
    push           pc_libpcl.fixuppcl.d u64 
    push           27         
    popptroff                 u8 1 0
    push           pc_libpcl.fixuppcl.p u64 
    push           pc_libpcl.fixuppcl.d u64 
    push           16         
    popptroff                 u64 1 0
    push           pc_libpcl.fixuppcl.d u64 
    push           46         
    pushptroff                u16 1 0
    push           0          i64 
    dotindex                  i64 
    jumpfalse      #10159     u64 
    setargs                   2 0
    push           pc_libpcl.fixuppcl.d u64 
    pushptr                   u64 
    push           "Redefining proc:" u64 
    callproc       &pc_libpcl.perror_s 
#10159: 
    push           1          u64 
    push           pc_libpcl.fixuppcl.d u64 
    push           46         
    addrefoff                 u64 1 0
    push           0          i64 
    popdotindex               u16 
    setargs                   1 0
    push           pc_libpcl.fixuppcl.d u64 
    callproc       &pc_libpcl.assignlabeltoname 
    jump           #10157     
#10141: 
    push           pc_libpcl.fixuppcl.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_libpcl.fixuppcl.d u64 
    push           pc_libpcl.fixuppcl.p u64 
    push           1          
    pushptroff                u8 1 0
    push           pc_libpcl.fixuppcl.d u64 
    push           27         
    popptroff                 u8 1 0
    push           pc_libpcl.fixuppcl.p u64 
    push           pc_libpcl.fixuppcl.d u64 
    push           16         
    popptroff                 u64 1 0
    push           pc_libpcl.fixuppcl.d u64 
    push           46         
    pushptroff                u16 1 0
    push           0          i64 
    dotindex                  i64 
    jumpfalse      #10160     u64 
    setargs                   2 0
    push           pc_libpcl.fixuppcl.d u64 
    pushptr                   u64 
    push           "Redefining proc/static/label:" u64 
    callproc       &pc_libpcl.perror_s 
#10160: 
    push           1          u64 
    push           pc_libpcl.fixuppcl.d u64 
    push           46         
    addrefoff                 u64 1 0
    push           0          i64 
    popdotindex               u16 
    setargs                   1 0
    push           pc_libpcl.fixuppcl.d u64 
    callproc       &pc_libpcl.assignlabeltoname 
    jump           #10157     
#10143: 
    push           pc_libpcl.fixuppcl.insideproc i64 
    push           1          i64 
    jumpeq         #10161     i64 
    setargs                   1 0
    push           "End without proc" u64 
    callproc       &pc_libpcl.perror 
#10161: 
    push           0          i64 
    pop            pc_libpcl.fixuppcl.insideproc i64 
    jump           #10157     
#10147: 
    push           pc_libpcl.fixuppcl.insideproc i64 
    push           2          i64 
    jumpeq         #10162     i64 
    setargs                   1 0
    push           "End without extproc" u64 
    callproc       &pc_libpcl.perror 
#10162: 
    push           0          i64 
    pop            pc_libpcl.fixuppcl.insideproc i64 
    jump           #10157     
#10144: 
    push           pc_libpcl.fixuppcl.p u64 
    pop            pc_libpcl.fixuppcl.pextproc u64 
    push           0          i64 
    pop            pc_libpcl.fixuppcl.extparams i64 
    push           pc_libpcl.fixuppcl.insideproc i64 
    jumpfalse      #10163     i64 
    setargs                   1 0
    push           "Nested proc" u64 
    callproc       &pc_libpcl.perror 
#10163: 
    push           2          i64 
    pop            pc_libpcl.fixuppcl.insideproc i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_libpcl.fixuppcl.d u64 
    push           pc_libpcl.fixuppcl.d u64 
    push           46         
    pushptroff                u16 1 0
    push           0          i64 
    dotindex                  i64 
    jumptrue       #10164     u64 
    push           pc_libpcl.fixuppcl.p u64 
    push           1          
    pushptroff                u8 1 0
    push           pc_libpcl.fixuppcl.d u64 
    push           27         
    popptroff                 u8 1 0
    push           pc_libpcl.fixuppcl.p u64 
    push           pc_libpcl.fixuppcl.d u64 
    push           16         
    popptroff                 u64 1 0
    push           pc_libpcl.fixuppcl.d u64 
    push           46         
    pushptroff                u16 1 0
    push           0          i64 
    dotindex                  i64 
    jumpfalse      #10165     u64 
    setargs                   2 0
    push           pc_libpcl.fixuppcl.d u64 
    pushptr                   u64 
    push           "Redefining extproc:" u64 
    callproc       &pc_libpcl.perror_s 
#10165: 
    push           1          u64 
    push           pc_libpcl.fixuppcl.d u64 
    push           46         
    addrefoff                 u64 1 0
    push           0          i64 
    popdotindex               u16 
    push           1          u64 
    push           pc_libpcl.fixuppcl.d u64 
    push           46         
    addrefoff                 u64 1 0
    push           1          i64 
    popdotindex               u16 
#10164: 
    jump           #10157     
#10145: 
    push           pc_libpcl.fixuppcl.insideproc i64 
    push           2          i64 
    jumpeq         #10166     i64 
    setargs                   1 0
    push           "Not allowed" u64 
    callproc       &pc_libpcl.perror 
#10166: 
    push           &pc_libpcl.fixuppcl.extparams 
    incr                      i64 1
    jump           #10157     
#10146: 
    push           pc_libpcl.fixuppcl.insideproc i64 
    push           2          i64 
    jumpeq         #10167     i64 
    setargs                   1 0
    push           "Not allowed" u64 
    callproc       &pc_libpcl.perror 
#10167: 
    push           pc_libpcl.fixuppcl.extparams i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           16         
    popptroff                 i32 1 0
    jump           #10157     
#10149: 
    push           pc_libpcl.fixuppcl.p u64 
    push           8          
    pushptroff                i64 1 0
    pop            pc_libpcl.fixuppcl.labno i64 
    push           pc_libpcl.fixuppcl.labno i64 
    push           1          i64 
    push           1000000    i64 
    jumpinrange    #10168     i64 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_libpcl.fixuppcl.labno i64 
    callfn         &msysp.strint u64 
    push           "3:Label out of range" u64 
    callproc       &pc_libpcl.perror_s 
#10168: 
    setargs                   1 0
    push           pc_libpcl.fixuppcl.labno i64 
    callfn         &pc_libpcl.fixlabel i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           8          
    popptroff                 i64 1 0
    push           3          i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           0          
    popptroff                 u8 1 0
    jump           #10157     
#10151: 
    push           92         i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           1          
    popptroff                 u8 1 0
    push           1          i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           3          
    popptroff                 u8 1 0
    push           1          i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           4          
    popptroff                 i32 1 0
    jump           #10157     
#10152: 
    push           92         i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           1          
    popptroff                 u8 1 0
    push           2          i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           3          
    popptroff                 u8 1 0
    push           2          i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           4          
    popptroff                 i32 1 0
    jump           #10157     
#10153: 
    push           92         i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           1          
    popptroff                 u8 1 0
    push           3          i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           3          
    popptroff                 u8 1 0
    push           4          i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           4          
    popptroff                 i32 1 0
    jump           #10157     
#10154: 
    push           92         i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           1          
    popptroff                 u8 1 0
    push           4          i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           3          
    popptroff                 u8 1 0
    push           8          i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           4          
    popptroff                 i32 1 0
    jump           #10157     
#10150: 
    push           pc_libpcl.fixuppcl.p u64 
    push           4          
    pushptroff                i32 1 0
    push           0          i64 
    jumpne         #10169     i64 
    push           &pc_tables.psize 
    push           pc_libpcl.fixuppcl.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           pc_libpcl.fixuppcl.p u64 
    push           4          
    popptroff                 i32 1 0
#10169: 
    jump           #10157     
#10140: 
    push           pc_libpcl.fixuppcl.p u64 
    pushptr                   u8 
    push           5          i64 
    casejumpeq     #10170     i64 0
    push           3          i64 
    casejumpeq     #10171     i64 0
    push           197        i64 
    casejumpeq     #10172     i64 0
    push           198        i64 
    casejumpeq     #10172     i64 0
    push           199        i64 
    casejumpeq     #10172     i64 0
    popstack                  i64 
    jump           #10173     
#10170: 
    push           pc_libpcl.fixuppcl.p u64 
    push           3          
    pushptroff                u8 1 0
    push           11         i64 
    jumpeq         #10174     i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           4          
    pushptroff                i32 1 0
    push           4          i64 
    jumpne         #10175     i64 
#10174: 
    push           7          i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           0          
    popptroff                 u8 1 0
    push           pc_libpcl.fixuppcl.p u64 
    push           8          
    pushptroff                r64 1 0
    fnarrow                   r32 r64 
    push           pc_libpcl.fixuppcl.p u64 
    push           8          
    popptroff                 r32 1 0
#10175: 
    jump           #10176     
#10171: 
    setargs                   1 0
    push           pc_libpcl.fixuppcl.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libpcl.fixlabel i64 
    push           pc_libpcl.fixuppcl.p u64 
    push           8          
    popptroff                 i64 1 0
    jump           #10176     
#10172: 
    push           1          i64 
    pop            pc_libpcl.pcneedfntable i64 
    jump           #10176     
#10173: 
#10176: 
#10157: 
#10177: 
    push           &pc_libpcl.fixuppcl.p 
    incr                      u64 32
#10137: 
    push           pc_libpcl.fixuppcl.p u64 
    push           pc_libpcl.pcend u64 
    jumple         #10138     u64 
#10178: 
    push           pc_libpcl.fixuppcl.insideproc i64 
    jumpfalse      #10179     i64 
    setargs                   1 0
    push           "End missing" u64 
    callproc       &pc_libpcl.perror 
#10179: 
    push           1          i64 
    pop            pc_libpcl.pcfixed u8 
#10136: 
    retproc                   
End


Proc pc_libpcl.extendpclblock:
    local          pc_libpcl.extendpclblock.newpcalloc i64 
    local          pc_libpcl.extendpclblock.lengthused i64 
    local          pc_libpcl.extendpclblock.newpcstart u64 
    procentry                 
    push           pc_libpcl.pcalloc i64 
    push           2          i64 
    mul                       i64 
    pop            pc_libpcl.extendpclblock.newpcalloc i64 
    push           pc_libpcl.pccurr u64 
    push           pc_libpcl.pcstart u64 
    subref                    i64 32
    push           1          i64 
    add                       i64 
    pop            pc_libpcl.extendpclblock.lengthused i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "EXTENDING PCM TABLE" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           32         i64 
    push           pc_libpcl.extendpclblock.newpcalloc i64 
    mul                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pc_libpcl.extendpclblock.newpcstart u64 
    setargs                   3 0
    push           pc_libpcl.extendpclblock.lengthused i64 
    push           32         i64 
    mul                       u64 
    push           pc_libpcl.pcstart u64 
    push           pc_libpcl.extendpclblock.newpcstart u64 
    callproc       &memcpy    
    setargs                   2 0
    push           pc_libpcl.extendpclblock.newpcalloc i64 
    push           pc_libpcl.extendpclblock.lengthused i64 
    sub                       i64 
    push           32         i64 
    mul                       i64 
    push           pc_libpcl.extendpclblock.newpcstart u64 
    push           pc_libpcl.extendpclblock.lengthused i64 
    addrefoff                 u64 32 0
    callproc       &mlibp.pcm_clearmem 
    push           pc_libpcl.extendpclblock.newpcstart u64 
    push           pc_libpcl.pccurr u64 
    push           pc_libpcl.pcstart u64 
    subref                    i64 32
    addrefoff                 u64 32 0
    pop            pc_libpcl.pccurr u64 
    push           pc_libpcl.extendpclblock.newpcstart u64 
    push           pc_libpcl.extendpclblock.newpcalloc i64 
    addrefoff                 u64 32 -256
    pop            pc_libpcl.pcend u64 
    setargs                   2 0
    push           pc_libpcl.pcalloc i64 
    push           32         i64 
    mul                       i64 
    push           pc_libpcl.pcstart u64 
    callproc       &mlibp.pcm_free 
    push           pc_libpcl.extendpclblock.newpcstart u64 
    pop            pc_libpcl.pcstart u64 
    push           pc_libpcl.extendpclblock.newpcalloc i64 
    pop            pc_libpcl.pcalloc i64 
#10181: 
    retproc                   
End


Proc pc_libpcl.newpcl: u64
    procentry                 
    push           pc_libpcl.pccurr u64 
    push           pc_libpcl.pcend u64 
    jumplt         #10183     u64 
    setargs                   0 0
    callproc       &pc_libpcl.extendpclblock 
#10183: 
    push           &pc_libpcl.pccurr 
    incr                      u64 32
    push           &pc_libpcl.pcseqno 
    incrload                  i64 1
    push           pc_libpcl.pccurr u64 
    push           24         
    popptroff                 u32 1 0
    push           pc_libpcl.pccurr u64 
    setret                    u64 
    jump           #10184     
#10184: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_gen::
    param          pc_libpcl.pcl_gen.opcode i64 
    param          pc_libpcl.pcl_gen.p u64 
    local          pc_libpcl.pcl_gen.d u64 
    procentry                 
    push           pc_libpcl.pcl_gen.p u64 
    push           0          u64 
    jumpne         #10186     u64 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_gen.p u64 
#10186: 
    push           pc_libpcl.pcl_gen.opcode i64 
    push           20         i64 
    casejumpeq     #10187     i64 0
    popstack                  i64 
    jump           #10188     
#10187: 
    setargs                   1 0
    push           "PCLGEN/LABELNAME" u64 
    callproc       &pc_libpcl.perror 
    jump           #10189     
#10188: 
#10189: 
    push           pc_libpcl.pcl_gen.opcode i64 
    push           pc_libpcl.pcl_gen.p u64 
    push           1          
    popptroff                 u8 1 0
#10190: 
    retproc                   
End


Proc pc_libpcl.pcl_gent::
    param          pc_libpcl.pcl_gent.opcode i64 
    param          pc_libpcl.pcl_gent.t i64 
    param          pc_libpcl.pcl_gent.p u64 
    procentry                 
    push           pc_libpcl.pcl_gent.p u64 
    push           0          u64 
    jumpne         #10192     u64 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_gent.p u64 
#10192: 
    push           pc_libpcl.pcl_gent.opcode i64 
    push           pc_libpcl.pcl_gent.p u64 
    push           1          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_gent.t i64 
    push           0          i64 
    jumpge         #10193     i64 
    push           13         i64 
    push           pc_libpcl.pcl_gent.p u64 
    push           3          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_gent.t i64 
    neg                       i64 
    push           pc_libpcl.pcl_gent.p u64 
    push           4          
    popptroff                 i32 1 0
    jump           #10194     
#10193: 
    push           pc_libpcl.pcl_gent.t i64 
    push           pc_libpcl.pcl_gent.p u64 
    push           3          
    popptroff                 u8 1 0
#10194: 
#10195: 
    retproc                   
End


Proc pc_libpcl.pcl_genx::
    param          pc_libpcl.pcl_genx.opcode i64 
    param          pc_libpcl.pcl_genx.x i64 
    param          pc_libpcl.pcl_genx.p u64 
    procentry                 
    push           pc_libpcl.pcl_genx.p u64 
    push           0          u64 
    jumpne         #10197     u64 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_genx.p u64 
#10197: 
    push           pc_libpcl.pcl_genx.opcode i64 
    push           pc_libpcl.pcl_genx.p u64 
    push           1          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_genx.x i64 
    push           pc_libpcl.pcl_genx.p u64 
    push           16         
    popptroff                 i32 1 0
#10198: 
    retproc                   
End


Proc pc_libpcl.pcl_genxy::
    param          pc_libpcl.pcl_genxy.opcode i64 
    param          pc_libpcl.pcl_genxy.x i64 
    param          pc_libpcl.pcl_genxy.y i64 
    param          pc_libpcl.pcl_genxy.p u64 
    procentry                 
    push           pc_libpcl.pcl_genxy.p u64 
    push           0          u64 
    jumpne         #10200     u64 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_genxy.p u64 
#10200: 
    push           pc_libpcl.pcl_genxy.opcode i64 
    push           pc_libpcl.pcl_genxy.p u64 
    push           1          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_genxy.x i64 
    push           pc_libpcl.pcl_genxy.p u64 
    push           16         
    popptroff                 i32 1 0
    push           pc_libpcl.pcl_genxy.y i64 
    push           pc_libpcl.pcl_genxy.p u64 
    push           20         
    popptroff                 i32 1 0
#10201: 
    retproc                   
End


Proc pc_libpcl.pcl_genint:: u64
    param          pc_libpcl.pcl_genint.a i64 
    param          pc_libpcl.pcl_genint.mode i64 
    local          pc_libpcl.pcl_genint.p u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_genint.p u64 
    push           pc_libpcl.pcl_genint.a i64 
    push           pc_libpcl.pcl_genint.p u64 
    push           8          
    popptroff                 i64 1 0
    push           4          i64 
    push           pc_libpcl.pcl_genint.p u64 
    push           0          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_genint.p u64 
    setret                    u64 
    jump           #10203     
#10203: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_genint128:: u64
    param          pc_libpcl.pcl_genint128.a i128 
    param          pc_libpcl.pcl_genint128.mode i64 
    local          pc_libpcl.pcl_genint128.p u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_genint128.p u64 
    push           pc_libpcl.pcl_genint128.a i128 
    push           pc_libpcl.pcl_genint128.p u64 
    push           8          
    popptroff                 i128 1 0
    push           6          i64 
    push           pc_libpcl.pcl_genint128.p u64 
    push           0          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_genint128.p u64 
    setret                    u64 
    jump           #10205     
#10205: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_genreal:: u64
    param          pc_libpcl.pcl_genreal.x r64 
    local          pc_libpcl.pcl_genreal.p u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_genreal.p u64 
    push           pc_libpcl.pcl_genreal.x r64 
    push           pc_libpcl.pcl_genreal.p u64 
    push           8          
    popptroff                 r64 1 0
    push           5          i64 
    push           pc_libpcl.pcl_genreal.p u64 
    push           0          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_genreal.p u64 
    setret                    u64 
    jump           #10207     
#10207: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_genreal32:: u64
    param          pc_libpcl.pcl_genreal32.x r64 
    local          pc_libpcl.pcl_genreal32.p u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_genreal32.p u64 
    push           pc_libpcl.pcl_genreal32.x r64 
    fnarrow                   r32 r64 
    push           pc_libpcl.pcl_genreal32.p u64 
    push           8          
    popptroff                 r32 1 0
    push           7          i64 
    push           pc_libpcl.pcl_genreal32.p u64 
    push           0          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_genreal32.p u64 
    setret                    u64 
    jump           #10209     
#10209: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_genstring:: u64
    param          pc_libpcl.pcl_genstring.s u64 
    local          pc_libpcl.pcl_genstring.p u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_genstring.p u64 
    setargs                   1 0
    push           pc_libpcl.pcl_genstring.s u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           pc_libpcl.pcl_genstring.p u64 
    push           8          
    popptroff                 u64 1 0
    push           8          i64 
    push           pc_libpcl.pcl_genstring.p u64 
    push           0          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_genstring.p u64 
    setret                    u64 
    jump           #10211     
#10211: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_genlabel:: u64
    param          pc_libpcl.pcl_genlabel.a i64 
    local          pc_libpcl.pcl_genlabel.p u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_genlabel.p u64 
    push           pc_libpcl.pcl_genlabel.a i64 
    push           pc_libpcl.pcl_genlabel.p u64 
    push           8          
    popptroff                 i64 1 0
    push           3          i64 
    push           pc_libpcl.pcl_genlabel.p u64 
    push           0          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_genlabel.p u64 
    setret                    u64 
    jump           #10213     
#10213: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_genmem:: u64
    param          pc_libpcl.pcl_genmem.d u64 
    local          pc_libpcl.pcl_genmem.p u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_genmem.p u64 
    push           pc_libpcl.pcl_genmem.d u64 
    push           pc_libpcl.pcl_genmem.p u64 
    push           8          
    popptroff                 u64 1 0
    push           1          i64 
    push           pc_libpcl.pcl_genmem.p u64 
    push           0          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_genmem.p u64 
    setret                    u64 
    jump           #10215     
#10215: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_genmemaddr:: u64
    param          pc_libpcl.pcl_genmemaddr.d u64 
    local          pc_libpcl.pcl_genmemaddr.p u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_libpcl.pcl_genmemaddr.p u64 
    push           pc_libpcl.pcl_genmemaddr.d u64 
    push           pc_libpcl.pcl_genmemaddr.p u64 
    push           8          
    popptroff                 u64 1 0
    push           2          i64 
    push           pc_libpcl.pcl_genmemaddr.p u64 
    push           0          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_genmemaddr.p u64 
    setret                    u64 
    jump           #10217     
#10217: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_gencomment::
    param          pc_libpcl.pcl_gencomment.s u64 
    procentry                 
    setargs                   2 0
    setargs                   1 0
    push           pc_libpcl.pcl_gencomment.s u64 
    callfn         &pc_libpcl.pcl_genstring u64 
    push           3          i64 
    callproc       &pc_libpcl.pcl_gen 
#10219: 
    retproc                   
End


Proc pc_libpcl.pcl_genname:: u64
    param          pc_libpcl.pcl_genname.s u64 
    procentry                 
    setargs                   1 0
    setargs                   1 0
    push           pc_libpcl.pcl_genname.s u64 
    callfn         &pc_libpcl.pcl_makesymbol u64 
    callfn         &pc_libpcl.pcl_genmem u64 
    setret                    u64 
    jump           #10221     
#10221: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_gennameaddr:: u64
    param          pc_libpcl.pcl_gennameaddr.s u64 
    procentry                 
    setargs                   1 0
    setargs                   1 0
    push           pc_libpcl.pcl_gennameaddr.s u64 
    callfn         &pc_libpcl.pcl_makesymbol u64 
    callfn         &pc_libpcl.pcl_genmemaddr u64 
    setret                    u64 
    jump           #10223     
#10223: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_makesymbol:: u64
    param          pc_libpcl.pcl_makesymbol.s u64 
    local          pc_libpcl.pcl_makesymbol.d u64 
    procentry                 
    setargs                   1 0
    push           pc_libpcl.pcl_makesymbol.s u64 
    callfn         &pc_lex.addnamestr u64 
    pop            pc_libpcl.pcl_makesymbol.d u64 
    push           pc_libpcl.pcl_makesymbol.d u64 
    setret                    u64 
    jump           #10225     
#10225: 
    retfn                     u64 
End


Proc pc_libpcl.strpcl:
    param          pc_libpcl.strpcl.p u64 
    local          pc_libpcl.strpcl.pmodestr block:256 
    local          pc_libpcl.strpcl.str block:256 
    local          pc_libpcl.strpcl.opcode i64 
    local          pc_libpcl.strpcl.defused i64 
    procentry                 
    push           pc_libpcl.strpcl.p u64 
    push           1          
    pushptroff                u8 1 0
    pop            pc_libpcl.strpcl.opcode i64 
    push           pc_libpcl.strpcl.opcode i64 
    push           19         i64 
    casejumpeq     #10227     i64 0
    push           3          i64 
    casejumpeq     #10228     i64 0
    push           8          i64 
    casejumpeq     #10229     i64 0
    push           10         i64 
    casejumpeq     #10230     i64 0
    push           15         i64 
    casejumpeq     #10231     i64 0
    push           12         i64 
    casejumpeq     #10232     i64 0
    push           20         i64 
    casejumpeq     #10233     i64 0
    push           11         i64 
    casejumpeq     #10234     i64 0
    popstack                  i64 
    jump           #10235     
#10227: 
    setargs                   2 0
    push           1          i64 
    push           pc_libpcl.strpcl.p u64 
    push           8          
    pushptroff                i64 1 0
    callproc       &pc_libpcl.strlabel 
    jump           #10236     
    jump           #10237     
#10228: 
    push           pc_libpcl.strpcl.p u64 
    push           8          
    pushptroff                u64 1 0
    pushptr                   u8 
    jumpfalse      #10238     u64 
    setargs                   1 0
    push           "!"        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.strpcl.p u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &pc_libpcl.psstr 
#10238: 
    jump           #10236     
    jump           #10237     
#10229: 
    push           pc_libpcl.strpcl.p u64 
    push           8          
    pushptroff                u64 1 0
    push           46         
    pushptroff                u16 1 0
    push           9          i64 
    dotindex                  i64 
    jumpfalse      #10239     u64 
    setargs                   1 0
    push           "Procrts"  u64 
    callproc       &pc_libpcl.psstr 
    jump           #10240     
#10239: 
    setargs                   1 0
    push           "Proc"     u64 
    callproc       &pc_libpcl.psstr 
#10240: 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.strpcl.p u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &pc_libpcl.psname 
    setargs                   1 0
    startmult                 
    push           pc_libpcl.strpcl.p u64 
    push           2          
    pushptroff                u8 1 0
    push           0          i64 
    dotindex                  i64 
    jumpfalse      #10241     u64 
    push           "::"       u64 
    resetmult                 
    jump           #10242     
#10241: 
    push           ":"        u64 
    endmult                   
#10242: 
    callproc       &pc_libpcl.psstr 
    push           pc_libpcl.strpcl.p u64 
    push           3          
    pushptroff                u8 1 0
    jumpfalse      #10243     i64 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    setargs                   2 0
    push           pc_libpcl.strpcl.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_libpcl.strpcl.p u64 
    push           3          
    pushptroff                u8 1 0
    callfn         &pc_libpcl.strpmode u64 
    callproc       &pc_libpcl.psstr 
#10243: 
    jump           #10236     
    jump           #10237     
#10230: 
    setargs                   1 0
    push           "End"      u64 
    callproc       &pc_libpcl.psstr 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    jump           #10236     
    jump           #10237     
#10231: 
    setargs                   1 0
    push           "Endext"   u64 
    callproc       &pc_libpcl.psstr 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    jump           #10236     
    jump           #10237     
#10232: 
    setargs                   1 0
    push           "Extproc"  u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.strpcl.p u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &pc_libpcl.psname 
    push           pc_libpcl.strpcl.p u64 
    push           3          
    pushptroff                u8 1 0
    jumpfalse      #10244     i64 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    setargs                   2 0
    push           pc_libpcl.strpcl.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_libpcl.strpcl.p u64 
    push           3          
    pushptroff                u8 1 0
    callfn         &pc_libpcl.strpmode u64 
    callproc       &pc_libpcl.psstr 
#10244: 
    jump           #10236     
    jump           #10237     
#10233: 
    setargs                   1 0
    push           pc_libpcl.strpcl.p u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &pc_libpcl.psname 
    setargs                   1 0
    startmult                 
    push           pc_libpcl.strpcl.p u64 
    push           8          
    pushptroff                u64 1 0
    push           46         
    pushptroff                u16 1 0
    push           3          i64 
    dotindex                  i64 
    jumpfalse      #10245     u64 
    push           "::"       u64 
    resetmult                 
    jump           #10246     
#10245: 
    push           ":"        u64 
    endmult                   
#10246: 
    callproc       &pc_libpcl.psstr 
    jump           #10236     
    jump           #10237     
#10234: 
    setargs                   1 0
    push           "Endprogram" u64 
    callproc       &pc_libpcl.psstr 
    jump           #10236     
    jump           #10237     
#10235: 
#10237: 
    setargs                   1 0
    push           "    "     u64 
    callproc       &pc_libpcl.psstr 
    setargs                   2 0
    push           &pc_tables.pclnames 
    push           pc_libpcl.strpcl.opcode i64 
    pushptroff                u64 8 0
    push           1          i64 
    addrefoff                 u64 1 0
    push           &pc_libpcl.strpcl.str 
    callproc       &strcpy    
!skip::
#10247: 
    setargs                   4 0
    push           32         i64 
    push           15         i64 
    push           &pc_libpcl.strpcl.str 
    push           pc_libpcl.dest u64 
    callproc       &mlibp.gs_leftstr 
    push           pc_libpcl.strpcl.p u64 
    pushptr                   u8 
    push           0          i64 
    jumpeq         #10248     i64 
    setargs                   1 0
    setargs                   1 0
    push           pc_libpcl.strpcl.p u64 
    callfn         &pc_libpcl.stropnd u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
#10248: 
    setargs                   1 0
    push           30         i64 
    callproc       &pc_libpcl.pstabto 
    push           pc_libpcl.strpcl.p u64 
    push           3          
    pushptroff                u8 1 0
    push           0          i64 
    jumpeq         #10249     i64 
    setargs                   1 0
    setargs                   2 0
    push           pc_libpcl.strpcl.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_libpcl.strpcl.p u64 
    push           3          
    pushptroff                u8 1 0
    callfn         &pc_libpcl.strpmode u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
#10249: 
    push           &pc_tables.pclhastype 
    push           pc_libpcl.strpcl.opcode i64 
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #10250     i64 
    push           pc_libpcl.strpcl.p u64 
    push           3          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #10251     i64 
    setargs                   1 0
    push           "void"     u64 
    callproc       &pc_libpcl.psstr 
#10251: 
    setargs                   1 0
    setargs                   2 0
    push           pc_libpcl.strpcl.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_libpcl.strpcl.p u64 
    push           16         
    pushptroff                i32 1 0
    callfn         &pc_libpcl.strpmode u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
#10250: 
    push           &pc_tables.pclextra 
    push           pc_libpcl.strpcl.opcode i64 
    pushptroff                u8 1 0
    jumpfalse      #10252     i64 
    setargs                   1 0
    push           pc_libpcl.strpcl.p u64 
    push           16         
    pushptroff                i32 1 0
    callproc       &pc_libpcl.psint 
    push           &pc_tables.pclextra 
    push           pc_libpcl.strpcl.opcode i64 
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #10253     i64 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.strpcl.p u64 
    push           20         
    pushptroff                i32 1 0
    callproc       &pc_libpcl.psint 
#10253: 
#10252: 
#10236: 
    retproc                   
End


Proc pc_libpcl.stropnd: u64
    param          pc_libpcl.stropnd.p u64 
    local          pc_libpcl.stropnd.length i64 
    local          pc_libpcl.stropnd.d u64 
    procentry                 
    push           pc_libpcl.stropnd.p u64 
    push           0          u64 
    jumpne         #10255     u64 
    push           ""         u64 
    setret                    u64 
    jump           #10256     
#10255: 
    push           pc_libpcl.stropnd.p u64 
    pushptr                   u8 
    push           4          i64 
    casejumpeq     #10257     i64 0
    push           5          i64 
    casejumpeq     #10258     i64 0
    push           7          i64 
    casejumpeq     #10259     i64 0
    push           8          i64 
    casejumpeq     #10260     i64 0
    push           1          i64 
    casejumpeq     #10261     i64 0
    push           2          i64 
    casejumpeq     #10262     i64 0
    push           3          i64 
    casejumpeq     #10263     i64 0
    push           0          i64 
    casejumpeq     #10264     i64 0
    push           6          i64 
    casejumpeq     #10265     i64 0
    popstack                  i64 
    jump           #10266     
#10257: 
    setargs                   2 0
    push           0          u64 
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &msysp.strint u64 
    setret                    u64 
    jump           #10256     
    jump           #10267     
#10258: 
    setargs                   1 0
    push           &pc_libpcl.stropnd.str 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    push           "e16.16"   u64 
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                r64 1 0
    callproc       &msysp.m$print_r64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #10267     
#10259: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "STROP/R32" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   2 0
    push           0          i64 
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                r32 1 0
    callproc       &msysp.m$print_r32 
    setargs                   2 0
    push           0          i64 
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                r64 1 0
    callproc       &msysp.m$print_r64 
    setargs                   2 0
    push           "H"        u64 
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                i64 1 0
    callproc       &msysp.m$print_i64 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           &pc_libpcl.stropnd.str 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    push           "e16.16"   u64 
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                r32 1 0
    callproc       &msysp.m$print_r32 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #10267     
#10260: 
    setargs                   1 0
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &strlen    i64 
    store          pc_libpcl.stropnd.length i64 
    push           256        i64 
    jumpge         #10268     i64 
    setargs                   2 0
    push           "\""       u64 
    push           &pc_libpcl.stropnd.str 
    callproc       &strcpy    
    setargs                   2 0
    push           &pc_libpcl.stropnd.str 
    push           1          i64 
    addrefoff                 u64 1 0
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &pc_libpcl.convertstring 
    setargs                   2 0
    push           "\""       u64 
    push           &pc_libpcl.stropnd.str 
    callproc       &strcat    
    jump           #10269     
#10268: 
    push           pc_libpcl.longstring u64 
    jumpfalse      #10270     u64 
    setargs                   2 0
    push           pc_libpcl.longstringlen i64 
    push           pc_libpcl.longstring u64 
    callproc       &mlibp.pcm_free 
#10270: 
    push           pc_libpcl.stropnd.length i64 
    push           2          i64 
    mul                       i64 
    pop            pc_libpcl.longstringlen i64 
    setargs                   1 0
    push           pc_libpcl.longstringlen i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pc_libpcl.longstring u64 
    push           34         u64 
    push           pc_libpcl.longstring u64 
    popptr                    u8 
    setargs                   2 0
    push           pc_libpcl.longstring u64 
    push           1          i64 
    addrefoff                 u64 1 0
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libpcl.convertstring i64 
    pop            pc_libpcl.stropnd.length i64 
    push           34         u64 
    push           pc_libpcl.longstring u64 
    push           pc_libpcl.stropnd.length i64 
    popptroff                 u8 1 1
    push           0          u64 
    push           pc_libpcl.longstring u64 
    push           pc_libpcl.stropnd.length i64 
    popptroff                 u8 1 2
    push           pc_libpcl.longstring u64 
    setret                    u64 
    jump           #10256     
#10269: 
    jump           #10267     
#10261: 
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_libpcl.stropnd.d u64 
    setargs                   1 0
    push           &pc_libpcl.stropnd.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    startmult                 
    push           pc_libpcl.stropnd.d u64 
    push           46         
    pushptroff                u16 1 0
    push           8          i64 
    dotindex                  i64 
    jumpfalse      #10271     u64 
    push           "`"        u64 
    resetmult                 
    jump           #10272     
#10271: 
    push           ""         u64 
    endmult                   
#10272: 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           pc_libpcl.stropnd.d u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           pc_libpcl.stropnd.p u64 
    push           1          
    pushptroff                u8 1 0
    push           5          i64 
    setjumpeq      #10273     i64 
    push           6          i64 
    setjumpne      #10274     i64 
#10273: 
    setargs                   2 0
    push           ":"        u64 
    push           &pc_libpcl.stropnd.str 
    callproc       &strcat    
#10274: 
    jump           #10267     
#10262: 
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_libpcl.stropnd.d u64 
    setargs                   1 0
    push           &pc_libpcl.stropnd.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "&##"      u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    startmult                 
    push           pc_libpcl.stropnd.d u64 
    push           46         
    pushptroff                u16 1 0
    push           8          i64 
    dotindex                  i64 
    jumpfalse      #10275     u64 
    push           "`"        u64 
    resetmult                 
    jump           #10276     
#10275: 
    push           ""         u64 
    endmult                   
#10276: 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libpcl.stropnd.d u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #10267     
#10263: 
    setargs                   1 0
    push           &pc_libpcl.stropnd.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "## "      u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           "#"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                i64 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #10267     
#10264: 
    push           ""         u64 
    setret                    u64 
    jump           #10256     
    jump           #10267     
#10265: 
    setargs                   1 0
    push           &pc_libpcl.stropnd.str 
    callproc       &msysp.m$print_startstr 
    setargs                   3 0
    push           0          i64 
    push           pc_libpcl.stropnd.p u64 
    push           8          
    pushptroff                i128 1 0
    callproc       &msysp.m$print_i128 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #10267     
#10266: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pc_tables.opndnames 
    push           pc_libpcl.stropnd.p u64 
    pushptr                   u8 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           "<PCLOPND?>" u64 
    setret                    u64 
    jump           #10256     
#10267: 
    push           &pc_libpcl.stropnd.str 
    setret                    u64 
    jump           #10256     
#10256: 
    retfn                     u64 
End


Proc pc_libpcl.psstr:
    param          pc_libpcl.psstr.s u64 
    procentry                 
    setargs                   2 0
    push           pc_libpcl.psstr.s u64 
    push           pc_libpcl.dest u64 
    callproc       &mlibp.gs_str 
#10278: 
    retproc                   
End


Proc pc_libpcl.psline:
    procentry                 
    setargs                   1 0
    push           pc_libpcl.dest u64 
    callproc       &mlibp.gs_line 
#10280: 
    retproc                   
End


Proc pc_libpcl.psint:
    param          pc_libpcl.psint.a i64 
    procentry                 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_libpcl.psint.a i64 
    callfn         &msysp.strint u64 
    push           pc_libpcl.dest u64 
    callproc       &mlibp.gs_str 
#10282: 
    retproc                   
End


Proc pc_libpcl.psname:
    param          pc_libpcl.psname.d u64 
    procentry                 
    push           pc_libpcl.psname.d u64 
    push           46         
    pushptroff                u16 1 0
    push           8          i64 
    dotindex                  i64 
    jumpfalse      #10284     u64 
    setargs                   2 0
    push           "`"        u64 
    push           pc_libpcl.dest u64 
    callproc       &mlibp.gs_str 
#10284: 
    setargs                   2 0
    push           pc_libpcl.psname.d u64 
    pushptr                   u64 
    push           pc_libpcl.dest u64 
    callproc       &mlibp.gs_str 
#10285: 
    retproc                   
End


Proc pc_libpcl.pstabto:
    param          pc_libpcl.pstabto.n i64 
    local          pc_libpcl.pstabto.col i64 
    procentry                 
    push           pc_libpcl.dest u64 
    push           8          
    pushptroff                i32 1 0
    push           pc_libpcl.destlinestart i64 
    sub                       i64 
    pop            pc_libpcl.pstabto.col i64 
    jump           #10287     
#10288: 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
    push           &pc_libpcl.pstabto.col 
    incr                      i64 1
#10287: 
    push           pc_libpcl.pstabto.n i64 
    push           pc_libpcl.pstabto.col i64 
    jumpgt         #10288     i64 
#10289: 
#10290: 
    retproc                   
End


Proc pc_libpcl.convertstring: i64
    param          pc_libpcl.convertstring.s u64 
    param          pc_libpcl.convertstring.t u64 
    local          pc_libpcl.convertstring.c i64 
    local          pc_libpcl.convertstring.t0 u64 
    procentry                 
    push           pc_libpcl.convertstring.t u64 
    pop            pc_libpcl.convertstring.t0 u64 
    jump           #10292     
#10293: 
    push           pc_libpcl.convertstring.c i64 
    switch         #10294     7 92
    opnd           #10295     
#10294: 
    switchlabel    #10296     
    switchlabel    #10296     
    switchlabel    #10297     
    switchlabel    #10298     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10299     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10296     
    switchlabel    #10296     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10300     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10295     
    switchlabel    #10301     
    endswitch                 
#10300: 
    push           92         u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           34         u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    jump           #10302     
#10298: 
    push           92         u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           110        u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    jump           #10302     
#10299: 
    push           92         u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           99         u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    jump           #10302     
#10297: 
    push           92         u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           116        u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    jump           #10302     
#10301: 
    push           92         u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           92         u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    jump           #10302     
#10296: 
    push           60         u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           pc_libpcl.convertstring.c i64 
    push           10         i64 
    idiv                      i64 
    push           48         i64 
    add                       u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           pc_libpcl.convertstring.c i64 
    push           10         i64 
    irem                      i64 
    push           48         i64 
    add                       u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           62         u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    jump           #10302     
#10295: 
    push           pc_libpcl.convertstring.c u64 
    push           &pc_libpcl.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
#10302: 
#10292: 
    push           &pc_libpcl.convertstring.s 
    loadincr                  u64 1
    pushptr                   u8 
    store          pc_libpcl.convertstring.c i64 
    jumptrue       #10293     i64 
#10303: 
    push           0          u64 
    push           pc_libpcl.convertstring.t u64 
    popptr                    u8 
    push           pc_libpcl.convertstring.t u64 
    push           pc_libpcl.convertstring.t0 u64 
    subref                    i64 1
    setret                    i64 
    jump           #10304     
#10304: 
    retfn                     i64 
End


Proc pc_libpcl.strlabel:
    param          pc_libpcl.strlabel.labelno i64 
    param          pc_libpcl.strlabel.colon i64 
    procentry                 
    setargs                   1 0
    push           "#"        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.strlabel.labelno i64 
    callproc       &pc_libpcl.psint 
    push           pc_libpcl.strlabel.colon i64 
    jumpfalse      #10306     i64 
    setargs                   1 0
    push           ":"        u64 
    callproc       &pc_libpcl.psstr 
#10306: 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
#10307: 
    retproc                   
End


Proc pc_libpcl.psopnd:
    param          pc_libpcl.psopnd.p u64 
    procentry                 
    setargs                   1 0
    setargs                   1 0
    push           pc_libpcl.psopnd.p u64 
    callfn         &pc_libpcl.stropnd u64 
    callproc       &pc_libpcl.psstr 
#10309: 
    retproc                   
End


Proc pc_libpcl.strpmode: u64
    param          pc_libpcl.strpmode.m i64 
    param          pc_libpcl.strpmode.size i64 
    procentry                 
    push           pc_libpcl.strpmode.m i64 
    push           13         i64 
    jumpeq         #10311     i64 
    setargs                   2 0
    push           &pc_tables.pstdnames 
    push           pc_libpcl.strpmode.m i64 
    pushptroff                u64 8 0
    push           &pc_libpcl.strpmode.str 
    callproc       &strcpy    
    jump           #10312     
#10311: 
    setargs                   1 0
    push           &pc_libpcl.strpmode.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "#:#"      u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           &pc_tables.pstdnames 
    push           pc_libpcl.strpmode.m i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libpcl.strpmode.size i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#10312: 
    push           &pc_libpcl.strpmode.str 
    setret                    u64 
    jump           #10313     
#10313: 
    retfn                     u64 
End


Proc pc_libpcl.writepcl:
    param          pc_libpcl.writepcl.p u64 
    local          pc_libpcl.writepcl.str block:32 
    procentry                 
    setargs                   1 0
    push           pc_libpcl.writepcl.p u64 
    callproc       &pc_libpcl.strpcl 
    setargs                   1 0
    push           pc_libpcl.dest u64 
    callproc       &mlibp.gs_line 
#10315: 
    retproc                   
End


Proc pc_libpcl.writeallpcl:
    local          pc_libpcl.writeallpcl.p u64 
    local          pc_libpcl.writeallpcl.d u64 
    local          pc_libpcl.writeallpcl.e u64 
    procentry                 
    setargs                   1 0
    push           pc_libpcl.dest u64 
    callproc       &mlibp.gs_init 
    push           pc_libpcl.dest u64 
    push           8          
    pushptroff                i32 1 0
    pop            pc_libpcl.destlinestart i64 
    push           pc_libpcl.pcstart u64 
    pop            pc_libpcl.writeallpcl.p u64 
    jump           #10317     
#10318: 
    setargs                   1 0
    push           pc_libpcl.writeallpcl.p u64 
    callproc       &pc_libpcl.writepcl 
    push           pc_libpcl.dest u64 
    push           8          
    pushptroff                i32 1 0
    pop            pc_libpcl.destlinestart i64 
    push           &pc_libpcl.writeallpcl.p 
    incr                      u64 32
#10317: 
    push           pc_libpcl.writeallpcl.p u64 
    push           pc_libpcl.pccurr u64 
    jumple         #10318     u64 
#10319: 
    push           pc_libpcl.longstring u64 
    jumpfalse      #10320     u64 
    setargs                   2 0
    push           pc_libpcl.longstringlen i64 
    push           pc_libpcl.longstring u64 
    callproc       &mlibp.pcm_free 
#10320: 
!done::
#10321: 
    push           pc_libpcl.dest u64 
    push           8          
    pushptroff                i32 1 0
    push           pc_libpcl.dest u64 
    pushptr                   u64 
    setretmult                2
    jump           #10322     
#10322: 
    retfn                     
End


Proc pc_libpcl.nextlabel: i64
    procentry                 
    push           pc_libpcl.labelno i64 
    push           1000000    i64 
    jumplt         #10324     i64 
    setargs                   3 0
    push           0          i64 
    push           0          u64 
    push           "Too many global labels" u64 
    callproc       &pc_libpcl.pclerror 
#10324: 
    push           &pc_libpcl.labelno 
    incrload                  i64 1
    setret                    i64 
    jump           #10325     
#10325: 
    retfn                     i64 
End


Proc pc_libpcl.fixlabel: i64
    param          pc_libpcl.fixlabel.userlab i64 
    procentry                 
    push           pc_libpcl.fixlabel.userlab i64 
    push           1          i64 
    push           1000000    i64 
    jumpinrange    #10327     i64 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_libpcl.fixlabel.userlab i64 
    callfn         &msysp.strint u64 
    push           "Label no out of range:" u64 
    callproc       &pc_libpcl.perror_s 
#10327: 
    startmult                 
    push           &pc_libpcl.labelmap 
    push           pc_libpcl.fixlabel.userlab i64 
    pushptroff                i32 4 -4
    push           0          i64 
    jumpne         #10328     i64 
    setargs                   0 0
    callfn         &pc_libpcl.nextlabel i64 
    push           &pc_libpcl.labelmap 
    push           pc_libpcl.fixlabel.userlab i64 
    popptroff                 i32 4 -4
    push           pc_libpcl.labelno i64 
    resetmult                 
    jump           #10329     
#10328: 
    push           &pc_libpcl.labelmap 
    push           pc_libpcl.fixlabel.userlab i64 
    pushptroff                i32 4 -4
    endmult                   
#10329: 
    setret                    i64 
    jump           #10330     
#10330: 
    retfn                     i64 
End


Proc pc_libpcl.pdefinelabel:
    param          pc_libpcl.pdefinelabel.label i64 
    param          pc_libpcl.pdefinelabel.seqno i64 
    procentry                 
    push           &pc_libpcl.labeloffset 
    push           pc_libpcl.pdefinelabel.label i64 
    pushptroff                u64 8 -8
    jumpfalse      #10332     u64 
    setargs                   3 0
    push           0          i64 
    setargs                   2 0
    push           0          u64 
    push           pc_libpcl.pdefinelabel.label i64 
    callfn         &msysp.strint u64 
    push           "Redefining label:" u64 
    callproc       &pc_libpcl.pclerror 
#10332: 
    setargs                   2 0
    setargs                   1 0
    push           pc_libpcl.pdefinelabel.label i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    push           19         i64 
    callproc       &pc_libpcl.pcl_gen 
    push           pc_libpcl.pdefinelabel.seqno i64 
    push           pc_libpcl.pccurr u64 
    push           24         
    popptroff                 u32 1 0
    push           pc_libpcl.pccurr u64 
    push           &pc_libpcl.labeloffset 
    push           pc_libpcl.pdefinelabel.label i64 
    popptroff                 u64 8 -8
#10333: 
    retproc                   
End


Proc pc_libpcl.assignlabeltoname:
    param          pc_libpcl.assignlabeltoname.d u64 
    procentry                 
    push           pc_libpcl.assignlabeltoname.d u64 
    push           40         
    pushptroff                i32 1 0
    jumpfalse      #10335     i64 
    jump           #10336     
#10335: 
    setargs                   0 0
    callfn         &pc_libpcl.nextlabel i64 
    push           pc_libpcl.assignlabeltoname.d u64 
    push           40         
    popptroff                 i32 1 0
#10336: 
    retproc                   
End


Proc pc_libpcl.pclerror:
    param          pc_libpcl.pclerror.mess u64 
    param          pc_libpcl.pclerror.param u64 
    param          pc_libpcl.pclerror.lineno i64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "PCC error:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libpcl.pclerror.mess u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           pc_libpcl.pclerror.param u64 
    jumpfalse      #10338     u64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           pc_libpcl.pclerror.param u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#10338: 
    push           pc_libpcl.pclerror.lineno i64 
    jumpfalse      #10339     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           " on line:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libpcl.pclerror.lineno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#10339: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#10340: 
    retproc                   
End


Proc pc_libpcl.getpclstr: u64
    param          pc_libpcl.getpclstr.p u64 
    procentry                 
    setargs                   1 0
    push           pc_libpcl.dest u64 
    callproc       &mlibp.gs_init 
    push           pc_libpcl.dest u64 
    push           8          
    pushptroff                i32 1 0
    pop            pc_libpcl.destlinestart i64 
    setargs                   1 0
    push           pc_libpcl.getpclstr.p u64 
    callproc       &pc_libpcl.strpcl 
    push           0          u64 
    push           pc_libpcl.dest u64 
    pushptr                   u64 
    push           pc_libpcl.dest u64 
    push           8          
    pushptroff                i32 1 0
    popptroff                 u8 1 0
    push           pc_libpcl.dest u64 
    pushptr                   u64 
    setret                    u64 
    jump           #10342     
#10342: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_getopcode:: i64
    procentry                 
    push           pc_libpcl.pccurr u64 
    push           1          
    pushptroff                u8 1 0
    setret                    i64 
    jump           #10344     
#10344: 
    retfn                     i64 
End


Proc pc_libpcl.pcl_setopcode::
    param          pc_libpcl.pcl_setopcode.opc i64 
    procentry                 
    push           pc_libpcl.pcl_setopcode.opc i64 
    push           pc_libpcl.pccurr u64 
    push           1          
    popptroff                 u8 1 0
#10346: 
    retproc                   
End


Proc pc_libpcl.pcl_settype::
    param          pc_libpcl.pcl_settype.t i64 
    param          pc_libpcl.pcl_settype.size i64 
    procentry                 
    push           pc_libpcl.pcl_settype.t i64 
    push           pc_libpcl.pccurr u64 
    push           3          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_settype.size i64 
    push           pc_libpcl.pccurr u64 
    push           4          
    popptroff                 i32 1 0
    push           pc_libpcl.pcl_settype.t i64 
    push           0          i64 
    jumpge         #10348     i64 
    push           13         i64 
    push           pc_libpcl.pccurr u64 
    push           3          
    popptroff                 u8 1 0
    push           pc_libpcl.pcl_settype.t i64 
    neg                       i64 
    push           pc_libpcl.pccurr u64 
    push           4          
    popptroff                 i32 1 0
#10348: 
#10349: 
    retproc                   
End


Proc pc_libpcl.pcl_setxy::
    param          pc_libpcl.pcl_setxy.x i64 
    param          pc_libpcl.pcl_setxy.y i64 
    procentry                 
    push           pc_libpcl.pcl_setxy.x i64 
    push           pc_libpcl.pccurr u64 
    push           16         
    popptroff                 i32 1 0
    push           pc_libpcl.pcl_setxy.y i64 
    push           pc_libpcl.pccurr u64 
    push           20         
    popptroff                 i32 1 0
#10351: 
    retproc                   
End


Proc pc_libpcl.pcl_setscale::
    param          pc_libpcl.pcl_setscale.scale i64 
    procentry                 
    push           pc_libpcl.pcl_setscale.scale i64 
    push           pc_libpcl.pccurr u64 
    push           16         
    popptroff                 i32 1 0
#10353: 
    retproc                   
End


Proc pc_libpcl.pcl_setoffset::
    param          pc_libpcl.pcl_setoffset.offset i64 
    procentry                 
    push           pc_libpcl.pcl_setoffset.offset i64 
    push           pc_libpcl.pccurr u64 
    push           20         
    popptroff                 i32 1 0
#10355: 
    retproc                   
End


Proc pc_libpcl.pcl_addoffset::
    param          pc_libpcl.pcl_addoffset.offset i64 
    procentry                 
    push           pc_libpcl.pccurr u64 
    push           20         
    addrefoff                 u64 1 0
    push           pc_libpcl.pcl_addoffset.offset i64 
    addto                     i32 
#10357: 
    retproc                   
End


Proc pc_libpcl.pcl_setincr::
    param          pc_libpcl.pcl_setincr.n i64 
    procentry                 
    push           pc_libpcl.pcl_setincr.n i64 
    push           pc_libpcl.pccurr u64 
    push           16         
    popptroff                 i32 1 0
#10359: 
    retproc                   
End


Proc pc_libpcl.pcl_setnargs::
    param          pc_libpcl.pcl_setnargs.n i64 
    procentry                 
    push           pc_libpcl.pcl_setnargs.n i64 
    push           pc_libpcl.pccurr u64 
    push           16         
    popptroff                 i32 1 0
#10361: 
    retproc                   
End


Proc pc_libpcl.pcl_setnmult::
    param          pc_libpcl.pcl_setnmult.n i64 
    procentry                 
    setargs                   1 0
    push           "SETNMULT" u64 
    callproc       &mlibp.abortprogram 
#10363: 
    retproc                   
End


Proc pc_libpcl.pcl_setrettypes::
    param          pc_libpcl.pcl_setrettypes.types u64 
    param          pc_libpcl.pcl_setrettypes.n i64 
    procentry                 
    setargs                   1 0
    push           "SETRETTYPES" u64 
    callproc       &mlibp.abortprogram 
#10365: 
    retproc                   
End


Proc pc_libpcl.pcl_setexported::
    param          pc_libpcl.pcl_setexported.x i64 
    procentry                 
    push           1          u64 
    push           pc_libpcl.pccurr u64 
    push           2          
    addrefoff                 u64 1 0
    push           0          i64 
    popdotindex               u8 
    push           pc_libpcl.pccurr u64 
    push           8          
    pushptroff                u64 1 0
    jumpfalse      #10367     u64 
    push           1          u64 
    push           pc_libpcl.pccurr u64 
    push           8          
    pushptroff                u64 1 0
    push           46         
    addrefoff                 u64 1 0
    push           3          i64 
    popdotindex               u16 
#10367: 
#10368: 
    retproc                   
End


Proc pc_libpcl.pcl_setnvariadics::
    param          pc_libpcl.pcl_setnvariadics.n i64 
    procentry                 
    push           pc_libpcl.pcl_setnvariadics.n i64 
    push           pc_libpcl.pccurr u64 
    push           20         
    popptroff                 i32 1 0
#10370: 
    retproc                   
End


Proc pc_libpcl.pcl_setalign::
    param          pc_libpcl.pcl_setalign.n i64 
    procentry                 
    push           pc_libpcl.pcl_setalign.n i64 
    push           pc_libpcl.pccurr u64 
    push           16         
    popptroff                 i32 1 0
#10372: 
    retproc                   
End


Proc pc_libpcl.pcl_setrtsproc::
    procentry                 
    push           pc_libpcl.pccurr u64 
    push           8          
    pushptroff                u64 1 0
    jumpfalse      #10374     u64 
    push           pc_libpcl.pccurr u64 
    push           1          
    pushptroff                u8 1 0
    push           8          i64 
    jumpne         #10374     i64 
    setargs                   1 0
    push           pc_libpcl.pccurr u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &pc_libpcl.definertsproc 
#10374: 
#10375: 
    retproc                   
End


Proc pc_libpcl.pcl_setoldtype::
    param          pc_libpcl.pcl_setoldtype.t i64 
    procentry                 
    push           pc_libpcl.pcl_setoldtype.t i64 
    push           pc_libpcl.pccurr u64 
    push           16         
    popptroff                 i32 1 0
#10377: 
    retproc                   
End


Proc pc_libpcl.pcl_setpos::
    param          pc_libpcl.pcl_setpos.pos i64 
    procentry                 
    setargs                   1 0
    push           "SETPOS"   u64 
    callproc       &mlibp.abortprogram 
#10379: 
    retproc                   
End


Proc pc_libpcl.pcl_lasterror:: u64
    procentry                 
    push           pc_libpcl.errormess u64 
    setret                    u64 
    jump           #10381     
#10381: 
    retfn                     u64 
End


Proc pc_libpcl.pcl_writepclfile:: i64
    param          pc_libpcl.pcl_writepclfile.filename u64 
    local          pc_libpcl.pcl_writepclfile.source u64 
    local          pc_libpcl.pcl_writepclfile.length i64 
    procentry                 
    setargs                   0 0
    callproc       &pc_libpcl.fixuppcl 
    setargs                   0 0
    callfn         &pc_libpcl.writeallpcl 
    type                      u64 
    type                      i64 
    pop            pc_libpcl.pcl_writepclfile.source u64 
    pop            pc_libpcl.pcl_writepclfile.length i64 
    setargs                   3 0
    push           pc_libpcl.pcl_writepclfile.length i64 
    push           pc_libpcl.pcl_writepclfile.source u64 
    push           pc_libpcl.pcl_writepclfile.filename u64 
    callfn         &mlibp.writefile i64 
    setret                    i64 
    jump           #10383     
#10383: 
    retfn                     i64 
End


Proc pc_libpcl.perror:
    param          pc_libpcl.perror.mess u64 
    procentry                 
    setargs                   2 0
    push           0          u64 
    push           pc_libpcl.perror.mess u64 
    callproc       &pc_libpcl.perror_s 
#10385: 
    retproc                   
End


Proc pc_libpcl.perror_s:
    param          pc_libpcl.perror_s.mess u64 
    param          pc_libpcl.perror_s.param u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "PCL error:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libpcl.perror_s.mess u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           pc_libpcl.perror_s.param u64 
    jumpfalse      #10387     u64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           ":"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libpcl.perror_s.param u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#10387: 
    push           1          i64 
    stop                      
#10388: 
    retproc                   
End


Proc pc_libpcl.writesymbols:
    local          pc_libpcl.writesymbols.p u64 
    local          pc_libpcl.writesymbols.d u64 
    local          pc_libpcl.writesymbols.e u64 
    procentry                 
    push           pc_libpcl.pcstart u64 
    pop            pc_libpcl.writesymbols.p u64 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    setargs                   1 0
    push           "PROC PCL DEF OPS" u64 
    callproc       &pc_libpcl.psstr 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    jump           #10390     
#10391: 
    push           pc_libpcl.writesymbols.p u64 
    push           1          
    pushptroff                u8 1 0
    push           8          i64 
    casejumpeq     #10392     i64 0
    push           5          i64 
    casejumpeq     #10392     i64 0
    push           6          i64 
    casejumpeq     #10392     i64 0
    push           12         i64 
    casejumpeq     #10392     i64 0
    push           20         i64 
    casejumpeq     #10392     i64 0
    push           17         i64 
    casejumpeq     #10392     i64 0
    push           18         i64 
    casejumpeq     #10392     i64 0
    popstack                  i64 
    jump           #10393     
#10392: 
    push           pc_libpcl.writesymbols.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_libpcl.writesymbols.d u64 
    setargs                   1 0
    push           pc_libpcl.writesymbols.p i64 
    callproc       &pc_libpcl.psint 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.d i64 
    callproc       &pc_libpcl.psint 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.d u64 
    pushptr                   u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           ": "       u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.p u64 
    push           24         
    pushptroff                u32 1 0
    callproc       &pc_libpcl.psint 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    setargs                   1 0
    push           "\tOpcode:" u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           &pc_tables.pclnames 
    push           pc_libpcl.writesymbols.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &pc_libpcl.psstr 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    setargs                   1 0
    push           "\tPCLdef:" u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    startmult                 
    push           pc_libpcl.writesymbols.d u64 
    push           16         
    pushptroff                u64 1 0
    jumpfalse      #10394     u64 
    push           &pc_tables.pclnames 
    push           pc_libpcl.writesymbols.d u64 
    push           16         
    pushptroff                u64 1 0
    push           1          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    resetmult                 
    jump           #10395     
#10394: 
    push           "---"      u64 
    endmult                   
#10395: 
    callproc       &pc_libpcl.psstr 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    setargs                   1 0
    push           "\tIsdefined:" u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.d u64 
    push           46         
    pushptroff                u16 1 0
    push           0          i64 
    dotindex                  i64 
    callproc       &pc_libpcl.psint 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    setargs                   1 0
    push           "\tIsexported:" u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.d u64 
    push           46         
    pushptroff                u16 1 0
    push           3          i64 
    dotindex                  i64 
    callproc       &pc_libpcl.psint 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    setargs                   1 0
    push           "\tIsimported:" u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.d u64 
    push           46         
    pushptroff                u16 1 0
    push           1          i64 
    dotindex                  i64 
    callproc       &pc_libpcl.psint 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    setargs                   1 0
    push           "\tExtvariadics:" u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.p u64 
    push           16         
    pushptroff                i32 1 0
    callproc       &pc_libpcl.psint 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    setargs                   1 0
    push           "\tIsaddrof:" u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.d u64 
    push           46         
    pushptroff                u16 1 0
    push           2          i64 
    dotindex                  i64 
    callproc       &pc_libpcl.psint 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    setargs                   1 0
    push           "\tLabel#:" u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.d u64 
    push           40         
    pushptroff                i32 1 0
    callproc       &pc_libpcl.psint 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    jump           #10396     
#10393: 
#10396: 
#10397: 
    push           &pc_libpcl.writesymbols.p 
    incr                      u64 32
#10390: 
    push           pc_libpcl.writesymbols.p u64 
    push           pc_libpcl.pccurr u64 
    jumple         #10391     u64 
#10398: 
    push           pc_libpcl.pcstart u64 
    pop            pc_libpcl.writesymbols.p u64 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    setargs                   1 0
    push           "PROC PCL UNDEFINED MEM REFS" u64 
    callproc       &pc_libpcl.psstr 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    jump           #10399     
#10400: 
    push           pc_libpcl.writesymbols.p u64 
    pushptr                   u8 
    push           1          i64 
    setjumpeq      #10401     i64 
    push           2          i64 
    setjumpne      #10402     i64 
#10401: 
    push           pc_libpcl.writesymbols.p u64 
    push           8          
    pushptroff                u64 1 0
    push           46         
    pushptroff                u16 1 0
    push           0          i64 
    dotindex                  i64 
    jumptrue       #10402     u64 
    push           pc_libpcl.writesymbols.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_libpcl.writesymbols.d u64 
    setargs                   1 0
    push           pc_libpcl.writesymbols.p i64 
    callproc       &pc_libpcl.psint 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.d i64 
    callproc       &pc_libpcl.psint 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           "Not defined: " u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.d u64 
    pushptr                   u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_libpcl.psstr 
    setargs                   1 0
    push           pc_libpcl.writesymbols.p u64 
    push           24         
    pushptroff                u32 1 0
    callproc       &pc_libpcl.psint 
    setargs                   0 0
    callproc       &pc_libpcl.psline 
    push           1          u64 
    push           pc_libpcl.writesymbols.d u64 
    push           46         
    addrefoff                 u64 1 0
    push           0          i64 
    popdotindex               u16 
#10402: 
#10403: 
    push           &pc_libpcl.writesymbols.p 
    incr                      u64 32
#10399: 
    push           pc_libpcl.writesymbols.p u64 
    push           pc_libpcl.pccurr u64 
    jumple         #10400     u64 
#10404: 
#10405: 
    retproc                   
End


Proc pc_libpcl.getbasename: u64
    param          pc_libpcl.getbasename.s u64 
    local          pc_libpcl.getbasename.t u64 
    procentry                 
    push           pc_libpcl.getbasename.s u64 
    setargs                   1 0
    push           pc_libpcl.getbasename.s u64 
    callfn         &strlen    i64 
    addrefoff                 u64 1 -1
    pop            pc_libpcl.getbasename.t u64 
    jump           #10407     
#10408: 
    push           &pc_libpcl.getbasename.t 
    decr                      u64 1
#10407: 
    push           pc_libpcl.getbasename.t u64 
    push           pc_libpcl.getbasename.s u64 
    jumple         #10409     u64 
    push           pc_libpcl.getbasename.t u64 
    push           1          i64 
    subrefoff                 u64 1 0
    pushptr                   u8 
    push           46         u64 
    jumpne         #10408     u64 
#10409: 
#10410: 
    push           pc_libpcl.getbasename.t u64 
    setret                    u64 
    jump           #10411     
#10411: 
    retfn                     u64 
End


Proc pc_libpcl.definertsproc:
    param          pc_libpcl.definertsproc.d u64 
    local          pc_libpcl.definertsproc.s u64 
    local          pc_libpcl.definertsproc.c i64 
    local          pc_libpcl.definertsproc.av_1 i64 
    local          pc_libpcl.definertsproc.i i64 
    procentry                 
    push           pc_libpcl.definertsproc.d u64 
    pushptr                   u64 
    pop            pc_libpcl.definertsproc.s u64 
    jump           #10413     
#10414: 
#10413: 
    push           &pc_libpcl.definertsproc.s 
    loadincr                  u64 1
    pushptr                   u8 
    store          pc_libpcl.definertsproc.c i64 
    push           36         i64 
    jumpne         #10414     i64 
#10415: 
#10416: 
    push           1          i64 
    pop            pc_libpcl.definertsproc.i i64 
    push           6          i64 
    pop            pc_libpcl.definertsproc.av_1 i64 
    push           pc_libpcl.definertsproc.av_1 i64 
    push           1          i64 
    jumplt         #10417     i64 
#10418: 
    setargs                   2 0
    push           pc_libpcl.definertsproc.s u64 
    push           &pc_tables.rtsnames 
    push           pc_libpcl.definertsproc.i i64 
    pushptroff                u64 8 -8
    push           4          i64 
    addrefoff                 u64 1 0
    callfn         &mlibp.eqstring i64 
    jumpfalse      #10419     i64 
    push           1          u64 
    push           pc_libpcl.definertsproc.d u64 
    push           46         
    addrefoff                 u64 1 0
    push           9          i64 
    popdotindex               u16 
    push           pc_libpcl.definertsproc.i i64 
    push           pc_libpcl.definertsproc.d u64 
    push           26         
    popptroff                 u8 1 0
    push           pc_libpcl.definertsproc.d u64 
    push           &pc_decls.rtsproctable 
    push           pc_libpcl.definertsproc.i i64 
    popptroff                 u64 8 -8
    jump           #10420     
#10419: 
#10421: 
    forup          #10418     i64 1
    opnd           pc_libpcl.definertsproc.i 
    opnd           pc_libpcl.definertsproc.av_1 
#10417: 
#10422: 
#10420: 
    retproc                   
End


Proc mlibp.pcm_alloc: u64
    param          mlibp.pcm_alloc.n i64 
    local          mlibp.pcm_alloc.p u64 
    procentry                 
    push           mlibp.pcm_setup u8 
    jumptrue       #10424     i64 
    setargs                   0 0
    callproc       &mlibp.pcm_init 
#10424: 
    push           mlibp.pcm_alloc.n i64 
    push           2048       i64 
    jumple         #10425     i64 
    setargs                   1 0
    push           mlibp.pcm_alloc.n i64 
    callfn         &mlibp.pcm_getac i64 
    pop            mlibp.alloccode i64 
    push           &mlibp.allocupper 
    push           mlibp.alloccode i64 
    pushptroff                i64 8 0
    pop            mlibp.allocbytes i64 
    setargs                   1 0
    push           mlibp.allocbytes i64 
    callfn         &mlibp.allocmem u64 
    pop            mlibp.pcm_alloc.p u64 
    push           mlibp.pcm_alloc.p u64 
    jumptrue       #10426     u64 
    setargs                   1 0
    push           "pcm_alloc failure" u64 
    callproc       &mlibp.abortprogram 
#10426: 
    push           mlibp.pcm_alloc.p u64 
    setret                    u64 
    jump           #10427     
#10425: 
    push           &mlibp.sizeindextable 
    push           mlibp.pcm_alloc.n i64 
    pushptroff                u8 1 0
    pop            mlibp.alloccode i64 
    push           &mlibp.allocupper 
    push           mlibp.alloccode i64 
    pushptroff                i64 8 0
    pop            mlibp.allocbytes i64 
    push           &mlibp.smallmemtotal 
    push           mlibp.allocbytes i64 
    addto                     i64 
    push           &mlibp.freelist 
    push           mlibp.alloccode i64 
    pushptroff                u64 8 0
    store          mlibp.pcm_alloc.p u64 
    jumpfalse      #10428     u64 
    push           &mlibp.freelist 
    push           mlibp.alloccode i64 
    pushptroff                u64 8 0
    pushptr                   u64 
    push           &mlibp.freelist 
    push           mlibp.alloccode i64 
    popptroff                 u64 8 0
    push           mlibp.pcm_alloc.p u64 
    setret                    u64 
    jump           #10427     
#10428: 
    push           mlibp.pcheapptr u64 
    pop            mlibp.pcm_alloc.p u64 
    push           &mlibp.pcheapptr 
    push           mlibp.allocbytes i64 
    addrefoffto               u64 1 0
    push           mlibp.pcheapptr u64 
    push           mlibp.pcheapend u64 
    jumplt         #10429     u64 
    setargs                   1 0
    push           mlibp.allocbytes i64 
    callfn         &mlibp.pcm_newblock u64 
    pop            mlibp.pcm_alloc.p u64 
    push           mlibp.pcm_alloc.p u64 
    setret                    u64 
    jump           #10427     
#10429: 
    push           mlibp.pcm_alloc.p u64 
    setret                    u64 
    jump           #10427     
#10427: 
    retfn                     u64 
End


Proc mlibp.pcm_free:
    param          mlibp.pcm_free.p u64 
    param          mlibp.pcm_free.n i64 
    local          mlibp.pcm_free.acode i64 
    procentry                 
    push           mlibp.pcm_free.n i64 
    push           0          i64 
    jumpne         #10431     i64 
    jump           #10432     
#10431: 
    push           mlibp.pcm_free.n i64 
    push           2048       i64 
    jumple         #10433     i64 
    setargs                   1 0
    push           mlibp.pcm_free.p u64 
    callproc       &free      
    jump           #10432     
#10433: 
    push           mlibp.pcm_free.p u64 
    jumpfalse      #10434     u64 
    push           &mlibp.sizeindextable 
    push           mlibp.pcm_free.n i64 
    pushptroff                u8 1 0
    pop            mlibp.pcm_free.acode i64 
    push           &mlibp.smallmemtotal 
    push           &mlibp.allocupper 
    push           mlibp.pcm_free.acode i64 
    pushptroff                i64 8 0
    subto                     i64 
    push           &mlibp.freelist 
    push           mlibp.pcm_free.acode i64 
    pushptroff                u64 8 0
    push           mlibp.pcm_free.p u64 
    popptr                    u64 
    push           mlibp.pcm_free.p u64 
    push           &mlibp.freelist 
    push           mlibp.pcm_free.acode i64 
    popptroff                 u64 8 0
#10434: 
#10432: 
    retproc                   
End


Proc mlibp.pcm_freeac:
    param          mlibp.pcm_freeac.p u64 
    param          mlibp.pcm_freeac.alloc i64 
    procentry                 
    setargs                   2 0
    push           &mlibp.allocupper 
    push           mlibp.pcm_freeac.alloc i64 
    pushptroff                i64 8 0
    push           mlibp.pcm_freeac.p u64 
    callproc       &mlibp.pcm_free 
#10436: 
    retproc                   
End


Proc mlibp.pcm_copymem4:
    param          mlibp.pcm_copymem4.p u64 
    param          mlibp.pcm_copymem4.q u64 
    param          mlibp.pcm_copymem4.n i64 
    procentry                 
    setargs                   3 0
    push           mlibp.pcm_copymem4.n u64 
    push           mlibp.pcm_copymem4.q u64 
    push           mlibp.pcm_copymem4.p u64 
    callproc       &memcpy    
#10438: 
    retproc                   
End


Proc mlibp.pcm_clearmem:
    param          mlibp.pcm_clearmem.p u64 
    param          mlibp.pcm_clearmem.n i64 
    procentry                 
    setargs                   3 0
    push           mlibp.pcm_clearmem.n u64 
    push           0          i64 
    push           mlibp.pcm_clearmem.p u64 
    callproc       &memset    
#10440: 
    retproc                   
End


Proc mlibp.pcm_init:
    local          mlibp.pcm_init.j i64 
    local          mlibp.pcm_init.k i64 
    local          mlibp.pcm_init.k1 i64 
    local          mlibp.pcm_init.k2 i64 
    local          mlibp.pcm_init.size i64 
    local          mlibp.pcm_init.av_1 i64 
    local          mlibp.pcm_init.i i64 
    procentry                 
    push           0          i64 
    pop            mlibp.alloccode i64 
    push           mlibp.pcm_setup u8 
    jumpfalse      #10442     i64 
    jump           #10443     
#10442: 
    setargs                   1 0
    push           0          i64 
    callproc       &mlibp.pcm_newblock 
    push           mlibp.pcheapptr u64 
    pop            mlibp.allocbase u64 
#10444: 
    push           1          i64 
    pop            mlibp.pcm_init.i i64 
#10445: 
    push           1          i64 
    pop            mlibp.pcm_init.j i64 
    push           16         i64 
    pop            mlibp.pcm_init.k i64 
    jump           #10446     
#10447: 
    push           mlibp.pcm_init.k i64 
    push           1          i64 
    shl                       i64 
    pop            mlibp.pcm_init.k i64 
    push           &mlibp.pcm_init.j 
    incr                      i64 1
#10446: 
    push           mlibp.pcm_init.i i64 
    push           mlibp.pcm_init.k i64 
    jumpgt         #10447     i64 
#10448: 
    push           mlibp.pcm_init.j i64 
    push           &mlibp.sizeindextable 
    push           mlibp.pcm_init.i i64 
    popptroff                 u8 1 0
#10449: 
    forup          #10445     i64 1
    opnd           mlibp.pcm_init.i 
    opnd           2048       
#10450: 
    push           16         u64 
    push           &mlibp.allocupper 
    push           1          i64 
    popptroff                 u64 8 0
    push           16         i64 
    pop            mlibp.pcm_init.size i64 
#10451: 
    push           2          i64 
    pop            mlibp.pcm_init.i i64 
#10452: 
    push           &mlibp.pcm_init.size 
    push           2          i64 
    multo                     i64 
    push           mlibp.pcm_init.size u64 
    push           &mlibp.allocupper 
    push           mlibp.pcm_init.i i64 
    popptroff                 u64 8 0
    push           mlibp.pcm_init.size i64 
    push           33554432   i64 
    jumplt         #10453     i64 
    push           mlibp.pcm_init.i i64 
    pop            mlibp.pcm_init.k i64 
    jump           #10454     
#10453: 
#10455: 
    forup          #10452     i64 1
    opnd           mlibp.pcm_init.i 
    opnd           27         
#10454: 
#10456: 
    push           mlibp.pcm_init.k i64 
    push           1          i64 
    add                       i64 
    pop            mlibp.pcm_init.i i64 
    push           300        i64 
    pop            mlibp.pcm_init.av_1 i64 
    push           mlibp.pcm_init.i i64 
    push           mlibp.pcm_init.av_1 i64 
    jumpgt         #10457     i64 
#10458: 
    push           &mlibp.pcm_init.size 
    push           33554432   i64 
    addto                     i64 
    push           mlibp.pcm_init.size i64 
    push           8589934592 i64 
    jumpge         #10459     i64 
    push           mlibp.pcm_init.size u64 
    push           &mlibp.allocupper 
    push           mlibp.pcm_init.i i64 
    popptroff                 u64 8 0
    push           mlibp.pcm_init.size u64 
    pop            mlibp.maxmemory u64 
    jump           #10460     
#10459: 
    push           mlibp.pcm_init.i i64 
    push           1          i64 
    sub                       i64 
    pop            mlibp.maxalloccode i64 
    jump           #10457     
#10460: 
#10461: 
    forup          #10458     i64 1
    opnd           mlibp.pcm_init.i 
    opnd           mlibp.pcm_init.av_1 
#10457: 
    push           1          i64 
    pop            mlibp.pcm_setup u8 
#10443: 
    retproc                   
End


Proc mlibp.pcm_getac: i64
    param          mlibp.pcm_getac.size i64 
    procentry                 
    push           mlibp.pcm_getac.size i64 
    push           2048       i64 
    jumpgt         #10463     i64 
    push           &mlibp.sizeindextable 
    push           mlibp.pcm_getac.size i64 
    pushptroff                u8 1 0
    setret                    i64 
    jump           #10464     
#10463: 
    push           mlibp.pcm_getac.size i64 
    push           255        i64 
    add                       i64 
    push           8          i64 
    shr                       i64 
    pop            mlibp.pcm_getac.size i64 
    push           mlibp.pcm_getac.size i64 
    push           2048       i64 
    jumpgt         #10465     i64 
    push           &mlibp.sizeindextable 
    push           mlibp.pcm_getac.size i64 
    pushptroff                u8 1 0
    push           8          i64 
    add                       i64 
    setret                    i64 
    jump           #10464     
#10465: 
    push           mlibp.pcm_getac.size i64 
    push           63         i64 
    add                       i64 
    push           6          i64 
    shr                       i64 
    pop            mlibp.pcm_getac.size i64 
    push           mlibp.pcm_getac.size i64 
    push           2048       i64 
    jumpgt         #10466     i64 
    push           &mlibp.sizeindextable 
    push           mlibp.pcm_getac.size i64 
    pushptroff                u8 1 0
    push           14         i64 
    add                       i64 
    setret                    i64 
    jump           #10464     
#10466: 
    push           mlibp.pcm_getac.size i64 
    push           2048       i64 
    sub                       i64 
    push           2047       i64 
    add                       i64 
    push           2048       i64 
    idiv                      i64 
    push           22         i64 
    add                       i64 
    pop            mlibp.pcm_getac.size i64 
    push           mlibp.pcm_getac.size i64 
    setret                    i64 
    jump           #10464     
#10464: 
    retfn                     i64 
End


Proc mlibp.pcm_newblock: u64
    param          mlibp.pcm_newblock.itemsize i64 
    local          mlibp.pcm_newblock.p u64 
    procentry                 
    push           &mlibp.pcm_newblock.totalheapsize 
    push           2097152    i64 
    addto                     i64 
    push           0          i64 
    pop            mlibp.alloccode i64 
    setargs                   1 0
    push           2097152    i64 
    callfn         &mlibp.allocmem u64 
    pop            mlibp.pcm_newblock.p u64 
    push           mlibp.pcm_newblock.p u64 
    push           0          u64 
    jumpne         #10468     u64 
    setargs                   1 0
    push           "Can't alloc pc heap" u64 
    callproc       &mlibp.abortprogram 
#10468: 
    push           mlibp.pcm_newblock.p u64 
    pop            mlibp.pcheapptr u64 
    push           mlibp.pcm_newblock.p u64 
    push           2097152    i64 
    addrefoff                 u64 1 0
    pop            mlibp.pcheapend u64 
    push           mlibp.pcheapstart u64 
    push           0          u64 
    jumpne         #10469     u64 
    push           mlibp.pcm_newblock.p u64 
    pop            mlibp.pcheapstart u64 
#10469: 
    push           &mlibp.pcheapptr 
    push           mlibp.pcm_newblock.itemsize i64 
    addrefoffto               u64 1 0
    push           mlibp.pcm_newblock.p u64 
    setret                    u64 
    jump           #10470     
#10470: 
    retfn                     u64 
End


Proc mlibp.pcm_round: i64
    param          mlibp.pcm_round.n i64 
    procentry                 
    startmult                 
    push           mlibp.pcm_round.n i64 
    push           2048       i64 
    jumple         #10472     i64 
    push           mlibp.pcm_round.n i64 
    resetmult                 
    jump           #10473     
#10472: 
    push           &mlibp.pcm_round.allocbytes 
    push           &mlibp.sizeindextable 
    push           mlibp.pcm_round.n i64 
    pushptroff                u8 1 0
    pushptroff                i32 4 0
    endmult                   
#10473: 
    setret                    i64 
    jump           #10474     
#10474: 
    retfn                     i64 
End


Proc mlibp.pcm_array: i64
    param          mlibp.pcm_array.n i64 
    local          mlibp.pcm_array.m i64 
    procentry                 
    startmult                 
    push           mlibp.pcm_array.n i64 
    push           2048       i64 
    jumpgt         #10476     i64 
    setargs                   1 0
    push           mlibp.pcm_array.n i64 
    callfn         &mlibp.pcm_round i64 
    resetmult                 
    jump           #10477     
#10476: 
    push           2048       i64 
    pop            mlibp.pcm_array.m i64 
    jump           #10478     
#10479: 
    push           &mlibp.pcm_array.m 
    push           1          i64 
    shlto                     i64 
#10478: 
    push           mlibp.pcm_array.n i64 
    push           mlibp.pcm_array.m i64 
    jumpgt         #10479     i64 
#10480: 
    push           mlibp.pcm_array.m i64 
    endmult                   
#10477: 
    setret                    i64 
    jump           #10481     
#10481: 
    retfn                     i64 
End


Proc mlibp.pcm_printfreelist:
    param          mlibp.pcm_printfreelist.size i64 
    param          mlibp.pcm_printfreelist.p u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Size: "   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mlibp.pcm_printfreelist.size i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #10483     
#10484: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           " "        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   2 0
    push           "h"        u64 
    push           mlibp.pcm_printfreelist.p u64 
    callproc       &msysp.m$print_ptr 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           mlibp.pcm_printfreelist.p u64 
    pushptr                   u64 
    pop            mlibp.pcm_printfreelist.p u64 
#10483: 
    push           mlibp.pcm_printfreelist.p u64 
    jumptrue       #10484     u64 
#10485: 
    setargs                   1 0
    push           ""         u64 
    callproc       &puts      
#10486: 
    retproc                   
End


Proc mlibp.pcm_diags:
    param          mlibp.pcm_diags.caption u64 
    local          mlibp.pcm_diags.m i64 
    local          mlibp.pcm_diags.i i64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "HEAP FREELISTS:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mlibp.pcm_diags.caption u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           16         i64 
    pop            mlibp.pcm_diags.m i64 
#10488: 
    push           1          i64 
    pop            mlibp.pcm_diags.i i64 
#10489: 
    setargs                   2 0
    push           &mlibp.freelist 
    push           mlibp.pcm_diags.i i64 
    pushptroff                u64 8 0
    push           mlibp.pcm_diags.m i64 
    callproc       &mlibp.pcm_printfreelist 
    push           &mlibp.pcm_diags.m 
    push           1          i64 
    shlto                     i64 
#10490: 
    forup          #10489     i64 1
    opnd           mlibp.pcm_diags.i 
    opnd           8          
#10491: 
#10492: 
    retproc                   
End


Proc mlibp.pcm_allocz: u64
    param          mlibp.pcm_allocz.n i64 
    local          mlibp.pcm_allocz.p u64 
    procentry                 
    setargs                   1 0
    push           mlibp.pcm_allocz.n i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            mlibp.pcm_allocz.p u64 
    setargs                   3 0
    push           mlibp.pcm_allocz.n u64 
    push           0          i64 
    push           mlibp.pcm_allocz.p u64 
    callproc       &memset    
    push           mlibp.pcm_allocz.p u64 
    setret                    u64 
    jump           #10494     
#10494: 
    retfn                     u64 
End


Proc mlibp.pcm_copyheapstring: u64
    param          mlibp.pcm_copyheapstring.s u64 
    local          mlibp.pcm_copyheapstring.q u64 
    local          mlibp.pcm_copyheapstring.n i64 
    procentry                 
    push           mlibp.pcm_copyheapstring.s u64 
    push           0          u64 
    jumpne         #10496     u64 
    push           0          u64 
    setret                    u64 
    jump           #10497     
#10496: 
    setargs                   1 0
    push           mlibp.pcm_copyheapstring.s u64 
    callfn         &strlen    i64 
    push           1          i64 
    add                       i64 
    pop            mlibp.pcm_copyheapstring.n i64 
    setargs                   1 0
    push           mlibp.pcm_copyheapstring.n i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            mlibp.pcm_copyheapstring.q u64 
    setargs                   3 0
    push           mlibp.pcm_copyheapstring.n u64 
    push           mlibp.pcm_copyheapstring.s u64 
    push           mlibp.pcm_copyheapstring.q u64 
    callproc       &memcpy    
    push           mlibp.pcm_copyheapstring.q u64 
    setret                    u64 
    jump           #10497     
#10497: 
    retfn                     u64 
End


Proc mlibp.pcm_copyheapstringn: u64
    param          mlibp.pcm_copyheapstringn.s u64 
    param          mlibp.pcm_copyheapstringn.n i64 
    local          mlibp.pcm_copyheapstringn.q u64 
    procentry                 
    push           mlibp.pcm_copyheapstringn.s u64 
    push           0          u64 
    jumpne         #10499     u64 
    push           0          u64 
    setret                    u64 
    jump           #10500     
#10499: 
    setargs                   1 0
    push           mlibp.pcm_copyheapstringn.n i64 
    push           1          i64 
    add                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            mlibp.pcm_copyheapstringn.q u64 
    setargs                   3 0
    push           mlibp.pcm_copyheapstringn.n u64 
    push           mlibp.pcm_copyheapstringn.s u64 
    push           mlibp.pcm_copyheapstringn.q u64 
    callproc       &memcpy    
    push           0          u64 
    push           mlibp.pcm_copyheapstringn.q u64 
    push           mlibp.pcm_copyheapstringn.n i64 
    popptroff                 u8 1 0
    push           mlibp.pcm_copyheapstringn.q u64 
    setret                    u64 
    jump           #10500     
#10500: 
    retfn                     u64 
End


Proc mlibp.pcm_copyheapblock: u64
    param          mlibp.pcm_copyheapblock.s u64 
    param          mlibp.pcm_copyheapblock.length i64 
    local          mlibp.pcm_copyheapblock.q u64 
    procentry                 
    push           mlibp.pcm_copyheapblock.length i64 
    push           0          i64 
    jumpne         #10502     i64 
    push           0          u64 
    setret                    u64 
    jump           #10503     
#10502: 
    setargs                   1 0
    push           mlibp.pcm_copyheapblock.length i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            mlibp.pcm_copyheapblock.q u64 
    setargs                   3 0
    push           mlibp.pcm_copyheapblock.length u64 
    push           mlibp.pcm_copyheapblock.s u64 
    push           mlibp.pcm_copyheapblock.q u64 
    callproc       &memcpy    
    push           mlibp.pcm_copyheapblock.q u64 
    setret                    u64 
    jump           #10503     
#10503: 
    retfn                     u64 
End


Proc mlibp.addtomemalloc:
    param          mlibp.addtomemalloc.ptr u64 
    param          mlibp.addtomemalloc.size i64 
    local          mlibp.addtomemalloc.i i64 
    procentry                 
#10505: 
    push           1          i64 
    pop            mlibp.addtomemalloc.i i64 
#10506: 
    push           &mlibp.memalloctable 
    push           mlibp.addtomemalloc.i i64 
    pushptroff                u64 8 -8
    push           mlibp.addtomemalloc.ptr u64 
    jumpne         #10507     u64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "ALLOC ERROR:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mlibp.addtomemalloc.ptr u64 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   1 0
    push           "ALREADY ALLOCATED\n\n\n" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           2          i64 
    stop                      
#10507: 
    push           &mlibp.memalloctable 
    push           mlibp.addtomemalloc.i i64 
    pushptroff                u64 8 -8
    push           0          u64 
    jumpne         #10508     u64 
    push           mlibp.addtomemalloc.ptr u64 
    push           &mlibp.memalloctable 
    push           mlibp.addtomemalloc.i i64 
    popptroff                 u64 8 -8
    push           mlibp.addtomemalloc.size i64 
    push           &mlibp.memallocsize 
    push           mlibp.addtomemalloc.i i64 
    popptroff                 i32 4 -4
    jump           #10509     
#10508: 
#10510: 
    forup          #10506     i64 1
    opnd           mlibp.addtomemalloc.i 
    opnd           2          
#10511: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "MEMALLOCTABLE FULL\n\n\n\n" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &mwindowsp.os_getch 
    push           3          i64 
    stop                      
#10509: 
    retproc                   
End


Proc mlibp.removefrommemalloc:
    param          mlibp.removefrommemalloc.ptr u64 
    param          mlibp.removefrommemalloc.size i64 
    local          mlibp.removefrommemalloc.i i64 
    procentry                 
#10513: 
    push           1          i64 
    pop            mlibp.removefrommemalloc.i i64 
#10514: 
    push           &mlibp.memalloctable 
    push           mlibp.removefrommemalloc.i i64 
    pushptroff                u64 8 -8
    push           mlibp.removefrommemalloc.ptr u64 
    jumpne         #10515     u64 
    push           &mlibp.memallocsize 
    push           mlibp.removefrommemalloc.i i64 
    pushptroff                i32 4 -4
    push           mlibp.removefrommemalloc.size i64 
    jumpeq         #10516     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "REMOVE:FOUND" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mlibp.removefrommemalloc.ptr u64 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   1 0
    push           "IN MEMALLOCTABLE, FREESIZE=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mlibp.removefrommemalloc.size i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           ", BUT STORED AS BLOCK SIZE:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mlibp.memallocsize 
    push           mlibp.removefrommemalloc.i i64 
    pushptroff                i32 4 -4
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "MEMSIZE"  u64 
    callproc       &mlibp.abortprogram 
#10516: 
    push           0          u64 
    push           &mlibp.memalloctable 
    push           mlibp.removefrommemalloc.i i64 
    popptroff                 u64 8 -8
    jump           #10517     
#10515: 
#10518: 
    forup          #10514     i64 1
    opnd           mlibp.removefrommemalloc.i 
    opnd           2          
#10519: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "CAN'T FIND" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mlibp.removefrommemalloc.ptr u64 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   1 0
    push           "IN MEMALLOCTABLE" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mlibp.removefrommemalloc.size i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "MEM"      u64 
    callproc       &mlibp.abortprogram 
    push           4          i64 
    stop                      
#10517: 
    retproc                   
End


Proc mlibp.allocmem: u64
    param          mlibp.allocmem.n i64 
    local          mlibp.allocmem.p u64 
    procentry                 
    setargs                   1 0
    push           mlibp.allocmem.n u64 
    callfn         &malloc    u64 
    pop            mlibp.allocmem.p u64 
    push           mlibp.allocmem.p u64 
    jumpfalse      #10521     u64 
    push           mlibp.allocmem.p u64 
    setret                    u64 
    jump           #10522     
#10521: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mlibp.allocmem.n i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           mlibp.memtotal i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Alloc mem failure" u64 
    callproc       &mlibp.abortprogram 
    push           0          u64 
    setret                    u64 
    jump           #10522     
#10522: 
    retfn                     u64 
End


Proc mlibp.reallocmem: u64
    param          mlibp.reallocmem.p u64 
    param          mlibp.reallocmem.n i64 
    procentry                 
    setargs                   2 0
    push           mlibp.reallocmem.n u64 
    push           mlibp.reallocmem.p u64 
    callfn         &realloc   u64 
    pop            mlibp.reallocmem.p u64 
    push           mlibp.reallocmem.p u64 
    jumpfalse      #10524     u64 
    push           mlibp.reallocmem.p u64 
    setret                    u64 
    jump           #10525     
#10524: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mlibp.reallocmem.n i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Realloc mem failure" u64 
    callproc       &mlibp.abortprogram 
    push           0          u64 
    setret                    u64 
    jump           #10525     
#10525: 
    retfn                     u64 
End


Proc mlibp.abortprogram:
    param          mlibp.abortprogram.s u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mlibp.abortprogram.s u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "ABORTING: Press key..." u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           5          i64 
    stop                      
#10527: 
    retproc                   
End


Proc mlibp.getfilesize: i64
    param          mlibp.getfilesize.handlex u64 
    local          mlibp.getfilesize.p u32 
    local          mlibp.getfilesize.size u32 
    procentry                 
    setargs                   1 0
    push           mlibp.getfilesize.handlex u64 
    callfn         &ftell     i32 
    pop            mlibp.getfilesize.p u32 
    setargs                   3 0
    push           2          i64 
    push           0          i64 
    push           mlibp.getfilesize.handlex u64 
    callproc       &fseek     
    setargs                   1 0
    push           mlibp.getfilesize.handlex u64 
    callfn         &ftell     i32 
    pop            mlibp.getfilesize.size u32 
    setargs                   3 0
    push           0          i64 
    push           mlibp.getfilesize.p u32 
    push           mlibp.getfilesize.handlex u64 
    callproc       &fseek     
    push           mlibp.getfilesize.size u32 
    setret                    i64 
    jump           #10529     
#10529: 
    retfn                     i64 
End


Proc mlibp.readrandom:
    param          mlibp.readrandom.handlex u64 
    param          mlibp.readrandom.mem u64 
    param          mlibp.readrandom.offset i64 
    param          mlibp.readrandom.size i64 
    local          mlibp.readrandom.a i64 
    procentry                 
    setargs                   3 0
    push           0          i64 
    push           mlibp.readrandom.offset i64 
    push           mlibp.readrandom.handlex u64 
    callproc       &fseek     
    setargs                   4 0
    push           mlibp.readrandom.handlex u64 
    push           mlibp.readrandom.size u64 
    push           1          u64 
    push           mlibp.readrandom.mem u64 
    callfn         &fread     i64 
    pop            mlibp.readrandom.a i64 
#10531: 
    retproc                   
End


Proc mlibp.writerandom: i64
    param          mlibp.writerandom.handlex u64 
    param          mlibp.writerandom.mem u64 
    param          mlibp.writerandom.offset i64 
    param          mlibp.writerandom.size i64 
    procentry                 
    setargs                   3 0
    push           0          i64 
    push           mlibp.writerandom.offset i64 
    push           mlibp.writerandom.handlex u64 
    callproc       &fseek     
    setargs                   4 0
    push           mlibp.writerandom.handlex u64 
    push           mlibp.writerandom.size u64 
    push           1          u64 
    push           mlibp.writerandom.mem u64 
    callfn         &fwrite    i64 
    setret                    i64 
    jump           #10533     
#10533: 
    retfn                     i64 
End


Proc mlibp.setfilepos: i64
    param          mlibp.setfilepos.file u64 
    param          mlibp.setfilepos.offset i64 
    procentry                 
    setargs                   3 0
    push           0          i64 
    push           mlibp.setfilepos.offset i64 
    push           mlibp.setfilepos.file u64 
    callfn         &fseek     i32 
    setret                    i64 
    jump           #10535     
#10535: 
    retfn                     i64 
End


Proc mlibp.getfilepos: i64
    param          mlibp.getfilepos.file u64 
    procentry                 
    setargs                   1 0
    push           mlibp.getfilepos.file u64 
    callfn         &ftell     i32 
    setret                    i64 
    jump           #10537     
#10537: 
    retfn                     i64 
End


Proc mlibp.readfile: u64
    param          mlibp.readfile.filename u64 
    local          mlibp.readfile.f u64 
    local          mlibp.readfile.size i64 
    local          mlibp.readfile.m u64 
    local          mlibp.readfile.p u64 
    procentry                 
    setargs                   2 0
    push           "rb"       u64 
    push           mlibp.readfile.filename u64 
    callfn         &fopen     u64 
    pop            mlibp.readfile.f u64 
    push           mlibp.readfile.f u64 
    push           0          u64 
    jumpne         #10539     u64 
    push           0          u64 
    setret                    u64 
    jump           #10540     
#10539: 
    setargs                   1 0
    push           mlibp.readfile.f u64 
    callfn         &mlibp.getfilesize i64 
    store          mlibp.readfile.size i64 
    pop            mlibp.rfsize i64 
    setargs                   1 0
    push           mlibp.readfile.size i64 
    push           4          i64 
    add                       u64 
    callfn         &malloc    u64 
    pop            mlibp.readfile.m u64 
    push           mlibp.readfile.m u64 
    push           0          u64 
    jumpne         #10541     u64 
    push           0          u64 
    setret                    u64 
    jump           #10540     
#10541: 
    setargs                   4 0
    push           mlibp.readfile.size i64 
    push           0          i64 
    push           mlibp.readfile.m u64 
    push           mlibp.readfile.f u64 
    callproc       &mlibp.readrandom 
    push           mlibp.readfile.m u64 
    push           mlibp.readfile.size i64 
    addrefoff                 u64 1 0
    pop            mlibp.readfile.p u64 
    push           0          i64 
    push           mlibp.readfile.p u64 
    popptr                    u8 
    push           26         i64 
    push           mlibp.readfile.p u64 
    push           1          i64 
    popptroff                 u8 1 0
    push           0          i64 
    push           mlibp.readfile.p u64 
    push           2          i64 
    popptroff                 u8 1 0
    setargs                   1 0
    push           mlibp.readfile.f u64 
    callproc       &fclose    
    push           mlibp.readfile.m u64 
    setret                    u64 
    jump           #10540     
#10540: 
    retfn                     u64 
End


Proc mlibp.writefile: i64
    param          mlibp.writefile.filename u64 
    param          mlibp.writefile.data u64 
    param          mlibp.writefile.size i64 
    local          mlibp.writefile.f u64 
    local          mlibp.writefile.n i64 
    procentry                 
    setargs                   2 0
    push           "wb"       u64 
    push           mlibp.writefile.filename u64 
    callfn         &fopen     u64 
    pop            mlibp.writefile.f u64 
    push           mlibp.writefile.f u64 
    push           0          u64 
    jumpne         #10543     u64 
    push           0          i64 
    setret                    i64 
    jump           #10544     
#10543: 
    setargs                   4 0
    push           mlibp.writefile.size i64 
    push           0          i64 
    push           mlibp.writefile.data u64 
    push           mlibp.writefile.f u64 
    callfn         &mlibp.writerandom i64 
    pop            mlibp.writefile.n i64 
    setargs                   1 0
    push           mlibp.writefile.f u64 
    callproc       &fclose    
    push           mlibp.writefile.n i64 
    setret                    i64 
    jump           #10544     
#10544: 
    retfn                     i64 
End


Proc mlibp.checkfile: i64
    param          mlibp.checkfile.file u64 
    local          mlibp.checkfile.f u64 
    procentry                 
    setargs                   2 0
    push           "rb"       u64 
    push           mlibp.checkfile.file u64 
    callfn         &fopen     u64 
    store          mlibp.checkfile.f u64 
    jumpfalse      #10546     u64 
    setargs                   1 0
    push           mlibp.checkfile.f u64 
    callproc       &fclose    
    push           1          i64 
    setret                    i64 
    jump           #10547     
#10546: 
    push           0          i64 
    setret                    i64 
    jump           #10547     
#10547: 
    retfn                     i64 
End


Proc mlibp.readlinen:
    param          mlibp.readlinen.handlex u64 
    param          mlibp.readlinen.buffer u64 
    param          mlibp.readlinen.size i64 
    local          mlibp.readlinen.ch i64 
    local          mlibp.readlinen.p u64 
    local          mlibp.readlinen.n i64 
    local          mlibp.readlinen.buff block:100 
    local          mlibp.readlinen.crseen u8 
    procentry                 
    push           mlibp.readlinen.handlex u64 
    push           0          u64 
    jumpne         #10549     u64 
    setargs                   0 0
    callfn         &mwindowsp.os_getstdin u64 
    pop            mlibp.readlinen.handlex u64 
#10549: 
    push           mlibp.readlinen.handlex u64 
    push           0          u64 
    jumpne         #10550     u64 
    push           0          i64 
    pop            mlibp.readlinen.n i64 
    push           mlibp.readlinen.buffer u64 
    pop            mlibp.readlinen.p u64 
#10551: 
    setargs                   0 0
    callfn         &getchar   i32 
    pop            mlibp.readlinen.ch i64 
    push           mlibp.readlinen.ch i64 
    push           13         i64 
    jumpeq         #10552     i64 
    push           mlibp.readlinen.ch i64 
    push           10         i64 
    jumpeq         #10552     i64 
    push           mlibp.readlinen.ch i64 
    push           -1         i64 
    jumpne         #10553     i64 
#10552: 
    push           0          u64 
    push           mlibp.readlinen.p u64 
    popptr                    u8 
    jump           #10554     
#10553: 
    push           mlibp.readlinen.ch u64 
    push           &mlibp.readlinen.p 
    loadincr                  u64 1
    popptr                    u8 
    push           &mlibp.readlinen.n 
    incr                      i64 1
    push           mlibp.readlinen.n i64 
    push           mlibp.readlinen.size i64 
    push           2          i64 
    sub                       i64 
    jumplt         #10555     i64 
    push           0          u64 
    push           mlibp.readlinen.p u64 
    popptr                    u8 
    jump           #10554     
#10555: 
    jump           #10551     
#10556: 
#10550: 
    push           0          u64 
    push           mlibp.readlinen.buffer u64 
    popptr                    u8 
    setargs                   3 0
    push           mlibp.readlinen.handlex u64 
    push           mlibp.readlinen.size i64 
    push           2          i64 
    sub                       i64 
    push           mlibp.readlinen.buffer u64 
    callfn         &fgets     u64 
    push           0          u64 
    jumpne         #10557     u64 
    jump           #10554     
#10557: 
    setargs                   1 0
    push           mlibp.readlinen.buffer u64 
    callfn         &strlen    i64 
    pop            mlibp.readlinen.n i64 
    push           mlibp.readlinen.n i64 
    push           0          i64 
    jumpne         #10558     i64 
    jump           #10554     
#10558: 
    push           mlibp.readlinen.buffer u64 
    push           mlibp.readlinen.n i64 
    addrefoff                 u64 1 -1
    pop            mlibp.readlinen.p u64 
    push           0          i64 
    pop            mlibp.readlinen.crseen u8 
    jump           #10559     
#10560: 
    push           mlibp.readlinen.p u64 
    pushptr                   u8 
    push           13         i64 
    jumpeq         #10561     i64 
    push           mlibp.readlinen.p u64 
    pushptr                   u8 
    push           10         i64 
    jumpne         #10562     i64 
#10561: 
    push           1          i64 
    pop            mlibp.readlinen.crseen u8 
#10562: 
    push           0          u64 
    push           &mlibp.readlinen.p 
    loaddecr                  u64 1
    popptr                    u8 
#10559: 
    push           mlibp.readlinen.p u64 
    push           mlibp.readlinen.buffer u64 
    jumplt         #10563     u64 
    push           mlibp.readlinen.p u64 
    pushptr                   u8 
    push           13         i64 
    jumpeq         #10560     i64 
    push           mlibp.readlinen.p u64 
    pushptr                   u8 
    push           10         i64 
    jumpeq         #10560     i64 
#10563: 
#10564: 
    push           mlibp.readlinen.crseen u8 
    jumptrue       #10565     i64 
    push           mlibp.readlinen.n i64 
    push           4          i64 
    add                       i64 
    push           mlibp.readlinen.size i64 
    jumple         #10565     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mlibp.readlinen.size i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           mlibp.readlinen.n i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "line too long" u64 
    callproc       &mlibp.abortprogram 
#10565: 
#10554: 
    retproc                   
End


Proc mlibp.iconvlcn:
    param          mlibp.iconvlcn.s u64 
    param          mlibp.iconvlcn.n i64 
    local          mlibp.iconvlcn.av_1 i64 
    procentry                 
#10567: 
    push           mlibp.iconvlcn.n i64 
    pop            mlibp.iconvlcn.av_1 i64 
    push           mlibp.iconvlcn.av_1 i64 
    push           0          i64 
    jumple         #10568     i64 
#10569: 
    setargs                   1 0
    push           mlibp.iconvlcn.s u64 
    pushptr                   u8 
    callfn         &tolower   i32 
    push           mlibp.iconvlcn.s u64 
    popptr                    u8 
    push           &mlibp.iconvlcn.s 
    incr                      u64 1
#10570: 
    to             #10569     
    opnd           mlibp.iconvlcn.av_1 
#10568: 
#10571: 
    retproc                   
End


Proc mlibp.iconvucn:
    param          mlibp.iconvucn.s u64 
    param          mlibp.iconvucn.n i64 
    local          mlibp.iconvucn.av_1 i64 
    procentry                 
#10573: 
    push           mlibp.iconvucn.n i64 
    pop            mlibp.iconvucn.av_1 i64 
    push           mlibp.iconvucn.av_1 i64 
    push           0          i64 
    jumple         #10574     i64 
#10575: 
    setargs                   1 0
    push           mlibp.iconvucn.s u64 
    pushptr                   u8 
    callfn         &toupper   i32 
    push           mlibp.iconvucn.s u64 
    popptr                    u8 
    push           &mlibp.iconvucn.s 
    incr                      u64 1
#10576: 
    to             #10575     
    opnd           mlibp.iconvucn.av_1 
#10574: 
#10577: 
    retproc                   
End


Proc mlibp.convlcstring: u64
    param          mlibp.convlcstring.s u64 
    local          mlibp.convlcstring.s0 u64 
    procentry                 
    push           mlibp.convlcstring.s u64 
    pop            mlibp.convlcstring.s0 u64 
    jump           #10579     
#10580: 
    setargs                   1 0
    push           mlibp.convlcstring.s u64 
    pushptr                   u8 
    callfn         &tolower   i32 
    push           mlibp.convlcstring.s u64 
    popptr                    u8 
    push           &mlibp.convlcstring.s 
    incr                      u64 1
#10579: 
    push           mlibp.convlcstring.s u64 
    pushptr                   u8 
    jumptrue       #10580     u64 
#10581: 
    push           mlibp.convlcstring.s0 u64 
    setret                    u64 
    jump           #10582     
#10582: 
    retfn                     u64 
End


Proc mlibp.convucstring: u64
    param          mlibp.convucstring.s u64 
    local          mlibp.convucstring.s0 u64 
    procentry                 
    push           mlibp.convucstring.s u64 
    pop            mlibp.convucstring.s0 u64 
    jump           #10584     
#10585: 
    setargs                   1 0
    push           mlibp.convucstring.s u64 
    pushptr                   u8 
    callfn         &toupper   i32 
    push           mlibp.convucstring.s u64 
    popptr                    u8 
    push           &mlibp.convucstring.s 
    incr                      u64 1
#10584: 
    push           mlibp.convucstring.s u64 
    pushptr                   u8 
    jumptrue       #10585     u64 
#10586: 
    push           mlibp.convucstring.s0 u64 
    setret                    u64 
    jump           #10587     
#10587: 
    retfn                     u64 
End


Proc mlibp.changeext: u64
    param          mlibp.changeext.s u64 
    param          mlibp.changeext.newext u64 
    local          mlibp.changeext.newext2 block:32 
    local          mlibp.changeext.sext u64 
    local          mlibp.changeext.n i64 
    procentry                 
    setargs                   2 0
    push           mlibp.changeext.s u64 
    push           &mlibp.changeext.newfile 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcpy    
    push           mlibp.changeext.newext u64 
    pushptr                   u8 
    push           0          u64 
    casejumpeq     #10589     u64 0
    push           46         u64 
    casejumpeq     #10590     u64 0
    popstack                  u64 
    jump           #10591     
#10589: 
    push           0          u64 
    push           &mlibp.changeext.newext2 
    push           1          i64 
    popptroff                 u8 1 -1
    push           0          u64 
    push           &mlibp.changeext.newext2 
    push           2          i64 
    popptroff                 u8 1 -1
    jump           #10592     
#10590: 
    setargs                   2 0
    push           mlibp.changeext.newext u64 
    push           &mlibp.changeext.newext2 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcpy    
    jump           #10592     
#10591: 
    setargs                   2 0
    push           "."        u64 
    push           &mlibp.changeext.newext2 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcpy    
    setargs                   2 0
    push           mlibp.changeext.newext u64 
    push           &mlibp.changeext.newext2 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcat    
#10592: 
    setargs                   2 0
    push           1          i64 
    push           mlibp.changeext.s u64 
    callfn         &mlibp.extractext u64 
    pop            mlibp.changeext.sext u64 
    push           mlibp.changeext.sext u64 
    pushptr                   u8 
    push           0          u64 
    casejumpeq     #10593     u64 0
    push           46         u64 
    casejumpeq     #10594     u64 0
    popstack                  u64 
    jump           #10595     
#10593: 
    setargs                   2 0
    push           &mlibp.changeext.newext2 
    push           0          
    addrefoff                 u8 1 0
    push           &mlibp.changeext.newfile 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcat    
    jump           #10596     
#10594: 
    setargs                   2 0
    push           &mlibp.changeext.newext2 
    push           1          
    addrefoff                 u8 1 0
    push           &mlibp.changeext.newfile 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcat    
    jump           #10596     
#10595: 
    push           mlibp.changeext.sext u64 
    push           mlibp.changeext.s u64 
    subref                    i64 1
    push           2          i64 
    sub                       i64 
    pop            mlibp.changeext.n i64 
    setargs                   2 0
    push           &mlibp.changeext.newext2 
    push           0          
    addrefoff                 u8 1 0
    push           &mlibp.changeext.newfile 
    push           0          
    addrefoff                 u8 1 0
    push           mlibp.changeext.n i64 
    addrefoff                 u64 1 1
    callproc       &strcpy    
#10596: 
    push           &mlibp.changeext.newfile 
    push           0          
    addrefoff                 u8 1 0
    setret                    u64 
    jump           #10597     
#10597: 
    retfn                     u64 
End


Proc mlibp.extractext: u64
    param          mlibp.extractext.s u64 
    param          mlibp.extractext.period i64 
    local          mlibp.extractext.t u64 
    local          mlibp.extractext.u u64 
    procentry                 
    setargs                   1 0
    push           mlibp.extractext.s u64 
    callfn         &mlibp.extractfile u64 
    pop            mlibp.extractext.t u64 
    push           mlibp.extractext.t u64 
    pushptr                   u8 
    push           0          i64 
    jumpne         #10599     i64 
    push           ""         u64 
    setret                    u64 
    jump           #10600     
#10599: 
    push           mlibp.extractext.t u64 
    setargs                   1 0
    push           mlibp.extractext.t u64 
    callfn         &strlen    i64 
    addrefoff                 u64 1 -1
    pop            mlibp.extractext.u u64 
    jump           #10601     
#10602: 
    push           mlibp.extractext.u u64 
    pushptr                   u8 
    push           46         u64 
    jumpne         #10603     u64 
    push           mlibp.extractext.u u64 
    push           1          i64 
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #10604     i64 
    startmult                 
    push           mlibp.extractext.period i64 
    jumpfalse      #10605     i64 
    push           "."        u64 
    resetmult                 
    jump           #10606     
#10605: 
    push           ""         u64 
    endmult                   
#10606: 
    setret                    u64 
    jump           #10600     
#10604: 
    push           mlibp.extractext.u u64 
    push           1          i64 
    addrefoff                 u64 1 0
    setret                    u64 
    jump           #10600     
#10603: 
    push           &mlibp.extractext.u 
    decr                      u64 1
#10601: 
    push           mlibp.extractext.u u64 
    push           mlibp.extractext.t u64 
    jumpge         #10602     u64 
#10607: 
    push           ""         u64 
    setret                    u64 
    jump           #10600     
#10600: 
    retfn                     u64 
End


Proc mlibp.extractpath: u64
    param          mlibp.extractpath.s u64 
    local          mlibp.extractpath.t u64 
    local          mlibp.extractpath.n i64 
    procentry                 
    push           mlibp.extractpath.s u64 
    setargs                   1 0
    push           mlibp.extractpath.s u64 
    callfn         &strlen    i64 
    addrefoff                 u64 1 -1
    pop            mlibp.extractpath.t u64 
    jump           #10609     
#10610: 
    push           mlibp.extractpath.t u64 
    pushptr                   u8 
    switch         #10611     47 92
    opnd           #10612     
#10611: 
    switchlabel    #10613     
    switchlabel    #10612     
    switchlabel    #10612     
    switchlabel    #10612     
    switchlabel    #10612     
    switchlabel    #10612     
    switchlabel    #10612     
    switchlabel    #10612     
    switchlabel    #10612     
    switchlabel    #10612     
    switchlabel    #10612     
    switchlabel    #10613     
    switchlabel    #10612     
    switchlabel    #10612     
    switchlabel    #10612     
    switchlabel    #10612     
    switchlabel    #10612     
    switchlabel    #10612     
    switchlabel    #10612     
    switchlabel    #10612     
    switchlabel    #10612     
    switchlabel    #10612     
    switchlabel    #10612     
    switchlabel    #10612     
    switchlabel    #10612     
    switchlabel    #10612     
    switchlabel    #10612     
    switchlabel    #10612     
    switchlabel    #10612     
    switchlabel    #10612     
    switchlabel    #10612     
    switchlabel    #10612     
    switchlabel    #10612     
    switchlabel    #10612     
    switchlabel    #10612     
    switchlabel    #10612     
    switchlabel    #10612     
    switchlabel    #10612     
    switchlabel    #10612     
    switchlabel    #10612     
    switchlabel    #10612     
    switchlabel    #10612     
    switchlabel    #10612     
    switchlabel    #10612     
    switchlabel    #10612     
    switchlabel    #10613     
    endswitch                 
#10613: 
    push           mlibp.extractpath.t u64 
    push           mlibp.extractpath.s u64 
    subref                    i64 1
    push           1          i64 
    add                       i64 
    pop            mlibp.extractpath.n i64 
    setargs                   3 0
    push           mlibp.extractpath.n u64 
    push           mlibp.extractpath.s u64 
    push           &mlibp.extractpath.str 
    callproc       &memcpy    
    push           0          u64 
    push           &mlibp.extractpath.str 
    push           mlibp.extractpath.n i64 
    popptroff                 u8 1 0
    push           &mlibp.extractpath.str 
    setret                    u64 
    jump           #10614     
    jump           #10615     
#10612: 
#10615: 
    push           &mlibp.extractpath.t 
    decr                      u64 1
#10609: 
    push           mlibp.extractpath.t u64 
    push           mlibp.extractpath.s u64 
    jumpge         #10610     u64 
#10616: 
    push           ""         u64 
    setret                    u64 
    jump           #10614     
#10614: 
    retfn                     u64 
End


Proc mlibp.extractfile: u64
    param          mlibp.extractfile.s u64 
    local          mlibp.extractfile.t u64 
    procentry                 
    setargs                   1 0
    push           mlibp.extractfile.s u64 
    callfn         &mlibp.extractpath u64 
    pop            mlibp.extractfile.t u64 
    push           mlibp.extractfile.t u64 
    pushptr                   u8 
    push           0          i64 
    jumpne         #10618     i64 
    push           mlibp.extractfile.s u64 
    setret                    u64 
    jump           #10619     
#10618: 
    push           mlibp.extractfile.s u64 
    setargs                   1 0
    push           mlibp.extractfile.t u64 
    callfn         &strlen    i64 
    addrefoff                 u64 1 0
    setret                    u64 
    jump           #10619     
#10619: 
    retfn                     u64 
End


Proc mlibp.extractbasefile: u64
    param          mlibp.extractbasefile.s u64 
    local          mlibp.extractbasefile.f u64 
    local          mlibp.extractbasefile.e u64 
    local          mlibp.extractbasefile.n i64 
    local          mlibp.extractbasefile.flen i64 
    procentry                 
    setargs                   1 0
    push           mlibp.extractbasefile.s u64 
    callfn         &mlibp.extractfile u64 
    pop            mlibp.extractbasefile.f u64 
    setargs                   1 0
    push           mlibp.extractbasefile.f u64 
    callfn         &strlen    i64 
    pop            mlibp.extractbasefile.flen i64 
    push           mlibp.extractbasefile.flen i64 
    push           0          i64 
    jumpne         #10621     i64 
    push           ""         u64 
    setret                    u64 
    jump           #10622     
#10621: 
    setargs                   2 0
    push           0          i64 
    push           mlibp.extractbasefile.f u64 
    callfn         &mlibp.extractext u64 
    pop            mlibp.extractbasefile.e u64 
    push           mlibp.extractbasefile.e u64 
    pushptr                   u8 
    jumpfalse      #10623     u64 
    push           mlibp.extractbasefile.flen i64 
    setargs                   1 0
    push           mlibp.extractbasefile.e u64 
    callfn         &strlen    i64 
    sub                       i64 
    push           1          i64 
    sub                       i64 
    pop            mlibp.extractbasefile.n i64 
    setargs                   3 0
    push           mlibp.extractbasefile.n u64 
    push           mlibp.extractbasefile.f u64 
    push           &mlibp.extractbasefile.str 
    callproc       &memcpy    
    push           0          u64 
    push           &mlibp.extractbasefile.str 
    push           mlibp.extractbasefile.n i64 
    popptroff                 u8 1 0
    push           &mlibp.extractbasefile.str 
    setret                    u64 
    jump           #10622     
#10623: 
    push           mlibp.extractbasefile.f u64 
    push           mlibp.extractbasefile.flen i64 
    pushptroff                u8 1 -1
    push           46         u64 
    jumpne         #10624     u64 
    setargs                   3 0
    push           mlibp.extractbasefile.flen i64 
    push           1          i64 
    sub                       u64 
    push           mlibp.extractbasefile.f u64 
    push           &mlibp.extractbasefile.str 
    callproc       &memcpy    
    push           0          u64 
    push           &mlibp.extractbasefile.str 
    push           mlibp.extractbasefile.flen i64 
    popptroff                 u8 1 -1
    push           &mlibp.extractbasefile.str 
    setret                    u64 
    jump           #10622     
#10624: 
    push           mlibp.extractbasefile.f u64 
    setret                    u64 
    jump           #10622     
#10622: 
    retfn                     u64 
End


Proc mlibp.addext: u64
    param          mlibp.addext.s u64 
    param          mlibp.addext.newext u64 
    local          mlibp.addext.sext u64 
    procentry                 
    setargs                   2 0
    push           1          i64 
    push           mlibp.addext.s u64 
    callfn         &mlibp.extractext u64 
    pop            mlibp.addext.sext u64 
    push           mlibp.addext.sext u64 
    pushptr                   u8 
    push           0          i64 
    jumpne         #10626     i64 
    setargs                   2 0
    push           mlibp.addext.newext u64 
    push           mlibp.addext.s u64 
    callfn         &mlibp.changeext u64 
    setret                    u64 
    jump           #10627     
#10626: 
    push           mlibp.addext.s u64 
    setret                    u64 
    jump           #10627     
#10627: 
    retfn                     u64 
End


Proc mlibp.alloctable: u64
    param          mlibp.alloctable.n i64 
    param          mlibp.alloctable.size i64 
    local          mlibp.alloctable.p u64 
    procentry                 
    setargs                   1 0
    push           mlibp.alloctable.n i64 
    push           1          i64 
    add                       i64 
    push           mlibp.alloctable.size i64 
    mul                       u64 
    callfn         &malloc    u64 
    pop            mlibp.alloctable.p u64 
    push           mlibp.alloctable.p u64 
    jumptrue       #10629     u64 
    setargs                   1 0
    push           "Alloctable failure" u64 
    callproc       &mlibp.abortprogram 
#10629: 
    push           mlibp.alloctable.p u64 
    setret                    u64 
    jump           #10630     
#10630: 
    retfn                     u64 
End


Proc mlibp.zalloctable: u64
    param          mlibp.zalloctable.n i64 
    param          mlibp.zalloctable.size i64 
    local          mlibp.zalloctable.p u64 
    procentry                 
    setargs                   2 0
    push           mlibp.zalloctable.size i64 
    push           mlibp.zalloctable.n i64 
    callfn         &mlibp.alloctable u64 
    pop            mlibp.zalloctable.p u64 
    setargs                   2 0
    push           mlibp.zalloctable.n i64 
    push           1          i64 
    add                       i64 
    push           mlibp.zalloctable.size i64 
    mul                       i64 
    push           mlibp.zalloctable.p u64 
    callproc       &mlibp.pcm_clearmem 
    push           mlibp.zalloctable.p u64 
    setret                    u64 
    jump           #10632     
#10632: 
    retfn                     u64 
End


Proc mlibp.checkfreelists:
    param          mlibp.checkfreelists.s u64 
    local          mlibp.checkfreelists.p u64 
    local          mlibp.checkfreelists.q u64 
    local          mlibp.checkfreelists.aa i64 
    local          mlibp.checkfreelists.i i64 
    procentry                 
#10634: 
    push           2          i64 
    pop            mlibp.checkfreelists.i i64 
#10635: 
    push           &mlibp.freelist 
    push           mlibp.checkfreelists.i i64 
    pushptroff                u64 8 0
    pop            mlibp.checkfreelists.p u64 
    jump           #10636     
#10637: 
    push           mlibp.checkfreelists.p i64 
    pop            mlibp.checkfreelists.aa i64 
    push           mlibp.checkfreelists.aa i64 
    push           4294967295 i64 
    jumpgt         #10638     i64 
    push           mlibp.checkfreelists.aa i64 
    push           100        i64 
    jumpge         #10639     i64 
#10638: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mlibp.checkfreelists.s u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "FREE LIST ERROR" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mlibp.checkfreelists.i i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           mlibp.checkfreelists.p u64 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   1 0
    push           mlibp.checkfreelists.q u64 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#10639: 
    push           mlibp.checkfreelists.p u64 
    pop            mlibp.checkfreelists.q u64 
    push           mlibp.checkfreelists.p u64 
    pushptr                   u64 
    pop            mlibp.checkfreelists.p u64 
#10636: 
    push           mlibp.checkfreelists.p u64 
    jumptrue       #10637     u64 
#10640: 
#10641: 
    forup          #10635     i64 1
    opnd           mlibp.checkfreelists.i 
    opnd           2          
#10642: 
#10643: 
    retproc                   
End


Proc mlibp.pcm_alloc32: u64
    local          mlibp.pcm_alloc32.p u64 
    procentry                 
    push           32         i64 
    pop            mlibp.allocbytes i64 
    push           &mlibp.smallmemtotal 
    push           32         i64 
    addto                     i64 
    push           &mlibp.freelist 
    push           2          i64 
    pushptroff                u64 8 0
    store          mlibp.pcm_alloc32.p u64 
    jumpfalse      #10645     u64 
    push           &mlibp.freelist 
    push           2          i64 
    pushptroff                u64 8 0
    pushptr                   u64 
    push           &mlibp.freelist 
    push           2          i64 
    popptroff                 u64 8 0
    push           mlibp.pcm_alloc32.p u64 
    setret                    u64 
    jump           #10646     
#10645: 
    setargs                   1 0
    push           32         i64 
    callfn         &mlibp.pcm_alloc u64 
    setret                    u64 
    jump           #10646     
#10646: 
    retfn                     u64 
End


Proc mlibp.pcm_free32:
    param          mlibp.pcm_free32.p u64 
    procentry                 
    push           &mlibp.smallmemtotal 
    push           32         i64 
    subto                     i64 
    push           &mlibp.freelist 
    push           2          i64 
    pushptroff                u64 8 0
    push           mlibp.pcm_free32.p u64 
    popptr                    u64 
    push           mlibp.pcm_free32.p u64 
    push           &mlibp.freelist 
    push           2          i64 
    popptroff                 u64 8 0
#10648: 
    retproc                   
End


Proc mlibp.outbyte:
    param          mlibp.outbyte.f u64 
    param          mlibp.outbyte.x i64 
    procentry                 
    setargs                   4 0
    push           mlibp.outbyte.f u64 
    push           1          u64 
    push           1          u64 
    push           &mlibp.outbyte.x 
    callproc       &fwrite    
#10650: 
    retproc                   
End


Proc mlibp.outword16:
    param          mlibp.outword16.f u64 
    param          mlibp.outword16.x u64 
    procentry                 
    setargs                   4 0
    push           mlibp.outword16.f u64 
    push           1          u64 
    push           2          u64 
    push           &mlibp.outword16.x 
    callproc       &fwrite    
#10652: 
    retproc                   
End


Proc mlibp.outword:
    param          mlibp.outword.f u64 
    param          mlibp.outword.x u64 
    procentry                 
    setargs                   4 0
    push           mlibp.outword.f u64 
    push           1          u64 
    push           4          u64 
    push           &mlibp.outword.x 
    callproc       &fwrite    
#10654: 
    retproc                   
End


Proc mlibp.outword64:
    param          mlibp.outword64.f u64 
    param          mlibp.outword64.x u64 
    procentry                 
    setargs                   4 0
    push           mlibp.outword64.f u64 
    push           1          u64 
    push           8          u64 
    push           &mlibp.outword64.x 
    callproc       &fwrite    
#10656: 
    retproc                   
End


Proc mlibp.myeof: i64
    param          mlibp.myeof.f u64 
    local          mlibp.myeof.c i64 
    procentry                 
    setargs                   1 0
    push           mlibp.myeof.f u64 
    callfn         &fgetc     i32 
    pop            mlibp.myeof.c i64 
    push           mlibp.myeof.c i64 
    push           -1         i64 
    jumpne         #10658     i64 
    push           1          i64 
    setret                    i64 
    jump           #10659     
#10658: 
    setargs                   2 0
    push           mlibp.myeof.f u64 
    push           mlibp.myeof.c i64 
    callproc       &ungetc    
    push           0          i64 
    setret                    i64 
    jump           #10659     
#10659: 
    retfn                     i64 
End


Proc mlibp.pcm_smallallocz: u64
    param          mlibp.pcm_smallallocz.n i64 
    local          mlibp.pcm_smallallocz.p u64 
    procentry                 
    push           &mlibp.allocupper 
    push           &mlibp.sizeindextable 
    push           mlibp.pcm_smallallocz.n i64 
    pushptroff                u8 1 0
    store          mlibp.alloccode i64 
    pushptroff                i64 8 0
    pop            mlibp.allocbytes i64 
    push           mlibp.pcheapptr u64 
    pop            mlibp.pcm_smallallocz.p u64 
    push           &mlibp.pcheapptr 
    push           mlibp.allocbytes i64 
    addrefoffto               u64 1 0
    push           mlibp.pcheapptr u64 
    push           mlibp.pcheapend u64 
    jumplt         #10661     u64 
    setargs                   1 0
    push           mlibp.allocbytes i64 
    callfn         &mlibp.pcm_newblock u64 
    pop            mlibp.pcm_smallallocz.p u64 
    setargs                   3 0
    push           mlibp.pcm_smallallocz.n u64 
    push           0          i64 
    push           mlibp.pcm_smallallocz.p u64 
    callproc       &memset    
    push           mlibp.pcm_smallallocz.p u64 
    setret                    u64 
    jump           #10662     
#10661: 
    setargs                   3 0
    push           mlibp.pcm_smallallocz.n u64 
    push           0          i64 
    push           mlibp.pcm_smallallocz.p u64 
    callproc       &memset    
    push           mlibp.pcm_smallallocz.p u64 
    setret                    u64 
    jump           #10662     
#10662: 
    retfn                     u64 
End


Proc mlibp.pcm_smallalloc: u64
    param          mlibp.pcm_smallalloc.n i64 
    local          mlibp.pcm_smallalloc.p u64 
    procentry                 
    push           &mlibp.allocupper 
    push           &mlibp.sizeindextable 
    push           mlibp.pcm_smallalloc.n i64 
    pushptroff                u8 1 0
    store          mlibp.alloccode i64 
    pushptroff                i64 8 0
    pop            mlibp.allocbytes i64 
    push           mlibp.pcheapptr u64 
    pop            mlibp.pcm_smallalloc.p u64 
    push           &mlibp.pcheapptr 
    push           mlibp.allocbytes i64 
    addrefoffto               u64 1 0
    push           mlibp.pcheapptr u64 
    push           mlibp.pcheapend u64 
    jumplt         #10664     u64 
    setargs                   1 0
    push           mlibp.allocbytes i64 
    callfn         &mlibp.pcm_newblock u64 
    pop            mlibp.pcm_smallalloc.p u64 
    push           mlibp.pcm_smallalloc.p u64 
    setret                    u64 
    jump           #10665     
#10664: 
    push           mlibp.pcm_smallalloc.p u64 
    setret                    u64 
    jump           #10665     
#10665: 
    retfn                     u64 
End


Proc mlibp.strbuffer_add:
    param          mlibp.strbuffer_add.dest u64 
    param          mlibp.strbuffer_add.s u64 
    param          mlibp.strbuffer_add.n i64 
    local          mlibp.strbuffer_add.newlen i64 
    local          mlibp.strbuffer_add.oldlen i64 
    local          mlibp.strbuffer_add.newptr u64 
    procentry                 
    push           mlibp.strbuffer_add.n i64 
    push           0          i64 
    jumpne         #10667     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "N=0"      u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#10667: 
    push           mlibp.strbuffer_add.n i64 
    push           -1         i64 
    jumpne         #10668     i64 
    setargs                   1 0
    push           mlibp.strbuffer_add.s u64 
    callfn         &strlen    i64 
    pop            mlibp.strbuffer_add.n i64 
#10668: 
    push           mlibp.strbuffer_add.dest u64 
    push           8          
    pushptroff                i32 1 0
    pop            mlibp.strbuffer_add.oldlen i64 
    push           mlibp.strbuffer_add.oldlen i64 
    push           0          i64 
    jumpne         #10669     i64 
    setargs                   1 0
    push           mlibp.strbuffer_add.n i64 
    push           1          i64 
    add                       i64 
    callfn         &mlibp.pcm_alloc u64 
    push           mlibp.strbuffer_add.dest u64 
    push           0          
    popptroff                 u64 1 0
    push           mlibp.allocbytes i64 
    push           mlibp.strbuffer_add.dest u64 
    push           12         
    popptroff                 i32 1 0
    push           mlibp.strbuffer_add.n i64 
    push           mlibp.strbuffer_add.dest u64 
    push           8          
    popptroff                 i32 1 0
    setargs                   3 0
    push           mlibp.strbuffer_add.n u64 
    push           mlibp.strbuffer_add.s u64 
    push           mlibp.strbuffer_add.dest u64 
    pushptr                   u64 
    callproc       &memcpy    
    push           0          u64 
    push           mlibp.strbuffer_add.dest u64 
    pushptr                   u64 
    push           mlibp.strbuffer_add.n i64 
    popptroff                 u8 1 0
    jump           #10670     
#10669: 
    push           mlibp.strbuffer_add.oldlen i64 
    push           mlibp.strbuffer_add.n i64 
    add                       i64 
    pop            mlibp.strbuffer_add.newlen i64 
    push           mlibp.strbuffer_add.newlen i64 
    push           1          i64 
    add                       i64 
    push           mlibp.strbuffer_add.dest u64 
    push           12         
    pushptroff                i32 1 0
    jumple         #10671     i64 
    setargs                   1 0
    push           mlibp.strbuffer_add.newlen i64 
    push           1          i64 
    add                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            mlibp.strbuffer_add.newptr u64 
    setargs                   3 0
    push           mlibp.strbuffer_add.oldlen u64 
    push           mlibp.strbuffer_add.dest u64 
    pushptr                   u64 
    push           mlibp.strbuffer_add.newptr u64 
    callproc       &memcpy    
    push           mlibp.strbuffer_add.newptr u64 
    push           mlibp.strbuffer_add.dest u64 
    push           0          
    popptroff                 u64 1 0
    push           mlibp.allocbytes i64 
    push           mlibp.strbuffer_add.dest u64 
    push           12         
    popptroff                 i32 1 0
#10671: 
    setargs                   3 0
    push           mlibp.strbuffer_add.n u64 
    push           mlibp.strbuffer_add.s u64 
    push           mlibp.strbuffer_add.dest u64 
    pushptr                   u64 
    push           mlibp.strbuffer_add.oldlen i64 
    addrefoff                 u64 1 0
    callproc       &memcpy    
    push           0          u64 
    push           mlibp.strbuffer_add.dest u64 
    pushptr                   u64 
    push           mlibp.strbuffer_add.newlen i64 
    popptroff                 u8 1 0
    push           mlibp.strbuffer_add.newlen i64 
    push           mlibp.strbuffer_add.dest u64 
    push           8          
    popptroff                 i32 1 0
#10670: 
    retproc                   
End


Proc mlibp.gs_init:
    param          mlibp.gs_init.dest u64 
    procentry                 
    setargs                   2 0
    push           16         i64 
    push           mlibp.gs_init.dest u64 
    callproc       &mlibp.pcm_clearmem 
#10673: 
    retproc                   
End


Proc mlibp.gs_free:
    param          mlibp.gs_free.dest u64 
    procentry                 
    push           mlibp.gs_free.dest u64 
    push           12         
    pushptroff                i32 1 0
    jumpfalse      #10675     i64 
    setargs                   2 0
    push           mlibp.gs_free.dest u64 
    push           12         
    pushptroff                i32 1 0
    push           mlibp.gs_free.dest u64 
    pushptr                   u64 
    callproc       &mlibp.pcm_free 
#10675: 
#10676: 
    retproc                   
End


Proc mlibp.gs_str:
    param          mlibp.gs_str.dest u64 
    param          mlibp.gs_str.s u64 
    procentry                 
    setargs                   3 0
    push           -1         i64 
    push           mlibp.gs_str.s u64 
    push           mlibp.gs_str.dest u64 
    callproc       &mlibp.strbuffer_add 
#10678: 
    retproc                   
End


Proc mlibp.gs_char:
    param          mlibp.gs_char.dest u64 
    param          mlibp.gs_char.c i64 
    local          mlibp.gs_char.s block:16 
    procentry                 
    push           mlibp.gs_char.c u64 
    push           &mlibp.gs_char.s 
    push           1          i64 
    popptroff                 u8 1 -1
    push           0          u64 
    push           &mlibp.gs_char.s 
    push           2          i64 
    popptroff                 u8 1 -1
    setargs                   3 0
    push           1          i64 
    push           &mlibp.gs_char.s 
    push           mlibp.gs_char.dest u64 
    callproc       &mlibp.strbuffer_add 
#10680: 
    retproc                   
End


Proc mlibp.gs_strn:
    param          mlibp.gs_strn.dest u64 
    param          mlibp.gs_strn.s u64 
    param          mlibp.gs_strn.length i64 
    procentry                 
    setargs                   3 0
    push           mlibp.gs_strn.length i64 
    push           mlibp.gs_strn.s u64 
    push           mlibp.gs_strn.dest u64 
    callproc       &mlibp.strbuffer_add 
#10682: 
    retproc                   
End


Proc mlibp.gs_strvar:
    param          mlibp.gs_strvar.dest u64 
    param          mlibp.gs_strvar.s u64 
    procentry                 
    setargs                   3 0
    push           -1         i64 
    push           mlibp.gs_strvar.s u64 
    pushptr                   u64 
    push           mlibp.gs_strvar.dest u64 
    callproc       &mlibp.strbuffer_add 
#10684: 
    retproc                   
End


Proc mlibp.gs_strint:
    param          mlibp.gs_strint.dest u64 
    param          mlibp.gs_strint.a i64 
    procentry                 
    setargs                   3 0
    push           -1         i64 
    setargs                   2 0
    push           0          u64 
    push           mlibp.gs_strint.a i64 
    callfn         &msysp.strint u64 
    push           mlibp.gs_strint.dest u64 
    callproc       &mlibp.strbuffer_add 
#10686: 
    retproc                   
End


Proc mlibp.gs_strln:
    param          mlibp.gs_strln.dest u64 
    param          mlibp.gs_strln.s u64 
    procentry                 
    setargs                   2 0
    push           mlibp.gs_strln.s u64 
    push           mlibp.gs_strln.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   1 0
    push           mlibp.gs_strln.dest u64 
    callproc       &mlibp.gs_line 
#10688: 
    retproc                   
End


Proc mlibp.gs_strsp:
    param          mlibp.gs_strsp.dest u64 
    param          mlibp.gs_strsp.s u64 
    procentry                 
    setargs                   2 0
    push           mlibp.gs_strsp.s u64 
    push           mlibp.gs_strsp.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           " "        u64 
    push           mlibp.gs_strsp.dest u64 
    callproc       &mlibp.gs_str 
#10690: 
    retproc                   
End


Proc mlibp.gs_line:
    param          mlibp.gs_line.dest u64 
    procentry                 
    setargs                   3 0
    push           -1         i64 
    push           "\c\n"     u64 
    push           mlibp.gs_line.dest u64 
    callproc       &mlibp.strbuffer_add 
#10692: 
    retproc                   
End


Proc mlibp.gs_getcol: i64
    param          mlibp.gs_getcol.dest u64 
    procentry                 
    push           mlibp.gs_getcol.dest u64 
    push           8          
    pushptroff                i32 1 0
    setret                    i64 
    jump           #10694     
#10694: 
    retfn                     i64 
End


Proc mlibp.gs_leftstr:
    param          mlibp.gs_leftstr.dest u64 
    param          mlibp.gs_leftstr.s u64 
    param          mlibp.gs_leftstr.w i64 
    param          mlibp.gs_leftstr.padch i64 
    local          mlibp.gs_leftstr.col i64 
    local          mlibp.gs_leftstr.i i64 
    local          mlibp.gs_leftstr.n i64 
    local          mlibp.gs_leftstr.slen i64 
    local          mlibp.gs_leftstr.str block:2560 
    procentry                 
    push           mlibp.gs_leftstr.dest u64 
    push           8          
    pushptroff                i32 1 0
    pop            mlibp.gs_leftstr.col i64 
    setargs                   2 0
    push           mlibp.gs_leftstr.s u64 
    push           &mlibp.gs_leftstr.str 
    callproc       &strcpy    
    setargs                   1 0
    push           mlibp.gs_leftstr.s u64 
    callfn         &strlen    i64 
    pop            mlibp.gs_leftstr.slen i64 
    push           mlibp.gs_leftstr.w i64 
    push           mlibp.gs_leftstr.slen i64 
    sub                       i64 
    pop            mlibp.gs_leftstr.n i64 
    push           mlibp.gs_leftstr.n i64 
    push           0          i64 
    jumple         #10696     i64 
#10697: 
    push           1          i64 
    pop            mlibp.gs_leftstr.i i64 
    push           mlibp.gs_leftstr.n i64 
    push           1          i64 
    jumplt         #10698     i64 
#10699: 
    push           mlibp.gs_leftstr.padch u64 
    push           &mlibp.gs_leftstr.str 
    push           mlibp.gs_leftstr.slen i64 
    push           mlibp.gs_leftstr.i i64 
    add                       i64 
    popptroff                 u8 1 -1
#10700: 
    forup          #10699     i64 1
    opnd           mlibp.gs_leftstr.i 
    opnd           mlibp.gs_leftstr.n 
#10698: 
    push           0          u64 
    push           &mlibp.gs_leftstr.str 
    push           mlibp.gs_leftstr.slen i64 
    push           mlibp.gs_leftstr.n i64 
    add                       i64 
    popptroff                 u8 1 0
#10696: 
    setargs                   2 0
    push           &mlibp.gs_leftstr.str 
    push           mlibp.gs_leftstr.dest u64 
    callproc       &mlibp.gs_str 
#10701: 
    retproc                   
End


Proc mlibp.gs_leftint:
    param          mlibp.gs_leftint.dest u64 
    param          mlibp.gs_leftint.a i64 
    param          mlibp.gs_leftint.w i64 
    param          mlibp.gs_leftint.padch i64 
    procentry                 
    setargs                   4 0
    push           mlibp.gs_leftint.padch i64 
    push           mlibp.gs_leftint.w i64 
    setargs                   2 0
    push           0          u64 
    push           mlibp.gs_leftint.a i64 
    callfn         &msysp.strint u64 
    push           mlibp.gs_leftint.dest u64 
    callproc       &mlibp.gs_leftstr 
#10703: 
    retproc                   
End


Proc mlibp.gs_padto:
    param          mlibp.gs_padto.dest u64 
    param          mlibp.gs_padto.col i64 
    param          mlibp.gs_padto.ch i64 
    local          mlibp.gs_padto.n i64 
    local          mlibp.gs_padto.str block:2560 
    local          mlibp.gs_padto.i i64 
    procentry                 
    push           mlibp.gs_padto.col i64 
    push           mlibp.gs_padto.dest u64 
    push           8          
    pushptroff                i32 1 0
    sub                       i64 
    pop            mlibp.gs_padto.n i64 
    push           mlibp.gs_padto.n i64 
    push           0          i64 
    jumpgt         #10705     i64 
    jump           #10706     
#10705: 
#10707: 
    push           1          i64 
    pop            mlibp.gs_padto.i i64 
    push           mlibp.gs_padto.n i64 
    push           1          i64 
    jumplt         #10708     i64 
#10709: 
    push           mlibp.gs_padto.ch u64 
    push           &mlibp.gs_padto.str 
    push           mlibp.gs_padto.i i64 
    popptroff                 u8 1 -1
#10710: 
    forup          #10709     i64 1
    opnd           mlibp.gs_padto.i 
    opnd           mlibp.gs_padto.n 
#10708: 
    push           0          u64 
    push           &mlibp.gs_padto.str 
    push           mlibp.gs_padto.n i64 
    popptroff                 u8 1 0
    setargs                   2 0
    push           &mlibp.gs_padto.str 
    push           mlibp.gs_padto.dest u64 
    callproc       &mlibp.gs_str 
#10706: 
    retproc                   
End


Proc mlibp.gs_println:
    param          mlibp.gs_println.dest u64 
    param          mlibp.gs_println.f u64 
    procentry                 
    push           0          u64 
    push           mlibp.gs_println.dest u64 
    pushptr                   u64 
    push           mlibp.gs_println.dest u64 
    push           8          
    pushptroff                i32 1 0
    popptroff                 u8 1 0
    push           mlibp.gs_println.f u64 
    push           0          u64 
    jumpne         #10712     u64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mlibp.gs_println.dest u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           "\c"       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #10713     
#10712: 
    setargs                   1 0
    push           mlibp.gs_println.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           mlibp.gs_println.dest u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           "\c"       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#10713: 
#10714: 
    retproc                   
End


Proc mlibp.nextcmdparam: i64
    param          mlibp.nextcmdparam.paramno u64 
    param          mlibp.nextcmdparam.name u64 
    param          mlibp.nextcmdparam.value u64 
    param          mlibp.nextcmdparam.defext u64 
    local          mlibp.nextcmdparam.q u64 
    local          mlibp.nextcmdparam.item u64 
    local          mlibp.nextcmdparam.fileext u64 
    local          mlibp.nextcmdparam.rest u64 
    local          mlibp.nextcmdparam.length i64 
    procentry                 
!reenter::
#10716: 
    push           0          u64 
    push           mlibp.nextcmdparam.value u64 
    popptr                    u64 
    push           0          u64 
    push           mlibp.nextcmdparam.name u64 
    popptr                    u64 
    push           mlibp.nextcmdparam.infile i64 
    jumpfalse      #10717     i64 
    setargs                   2 0
    push           &mlibp.nextcmdparam.item 
    push           &mlibp.nextcmdparam.fileptr 
    callfn         &mlibp.readnextfileitem i64 
    push           0          i64 
    jumpne         #10718     i64 
    setargs                   1 0
    push           mlibp.nextcmdparam.filestart u64 
    callproc       &free      
    push           0          i64 
    pop            mlibp.nextcmdparam.infile i64 
    jump           #10716     
#10718: 
    jump           #10719     
#10717: 
    push           mlibp.nextcmdparam.paramno u64 
    pushptr                   i64 
    push           msysp.nsysparams i64 
    jumple         #10720     i64 
    push           0          i64 
    setret                    i64 
    jump           #10721     
#10720: 
    push           &msysp.sysparams 
    push           mlibp.nextcmdparam.paramno u64 
    pushptr                   i64 
    pushptroff                u64 8 -8
    pop            mlibp.nextcmdparam.item u64 
    push           mlibp.nextcmdparam.paramno u64 
    incr                      i64 1
    setargs                   1 0
    push           mlibp.nextcmdparam.item u64 
    callfn         &strlen    i64 
    pop            mlibp.nextcmdparam.length i64 
    push           mlibp.nextcmdparam.item u64 
    pushptr                   u8 
    push           64         u64 
    jumpne         #10722     u64 
    setargs                   1 0
    push           mlibp.nextcmdparam.item u64 
    push           1          i64 
    addrefoff                 u64 1 0
    callfn         &mlibp.readfile u64 
    store          mlibp.nextcmdparam.fileptr u64 
    pop            mlibp.nextcmdparam.filestart u64 
    push           mlibp.nextcmdparam.filestart u64 
    push           0          u64 
    jumpne         #10723     u64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Can't open" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mlibp.nextcmdparam.item u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           7          i64 
    stop                      
#10723: 
    push           1          i64 
    pop            mlibp.nextcmdparam.infile i64 
    jump           #10716     
#10722: 
    push           mlibp.nextcmdparam.item u64 
    pushptr                   u8 
    push           58         u64 
    jumpne         #10724     u64 
    push           1          i64 
    pop            mlibp.nextcmdparam.colonseen u8 
    push           4          i64 
    setret                    i64 
    jump           #10721     
#10724: 
#10719: 
    push           0          u64 
    push           mlibp.nextcmdparam.value u64 
    popptr                    u64 
    push           mlibp.nextcmdparam.item u64 
    pushptr                   u8 
    push           45         u64 
    jumpne         #10725     u64 
    push           mlibp.nextcmdparam.item u64 
    startmult                 
    push           mlibp.nextcmdparam.colonseen u8 
    jumpfalse      #10726     i64 
    push           0          i64 
    resetmult                 
    jump           #10727     
#10726: 
    push           1          i64 
    endmult                   
#10727: 
    addrefoff                 u64 1 0
    push           mlibp.nextcmdparam.name u64 
    popptr                    u64 
    setargs                   2 0
    push           58         u64 
    push           mlibp.nextcmdparam.item u64 
    callfn         &strchr    u64 
    pop            mlibp.nextcmdparam.q u64 
    push           mlibp.nextcmdparam.q u64 
    jumptrue       #10728     u64 
    setargs                   2 0
    push           61         u64 
    push           mlibp.nextcmdparam.item u64 
    callfn         &strchr    u64 
    pop            mlibp.nextcmdparam.q u64 
#10728: 
    push           mlibp.nextcmdparam.q u64 
    jumpfalse      #10729     u64 
    push           mlibp.nextcmdparam.q u64 
    push           1          i64 
    addrefoff                 u64 1 0
    push           mlibp.nextcmdparam.value u64 
    popptr                    u64 
    push           0          u64 
    push           mlibp.nextcmdparam.q u64 
    popptr                    u8 
#10729: 
    startmult                 
    push           mlibp.nextcmdparam.colonseen u8 
    jumpfalse      #10730     i64 
    push           5          i64 
    resetmult                 
    jump           #10731     
#10730: 
    push           1          i64 
    endmult                   
#10731: 
    setret                    i64 
    jump           #10721     
#10725: 
    setargs                   2 0
    push           0          i64 
    push           mlibp.nextcmdparam.item u64 
    callfn         &mlibp.extractext u64 
    pop            mlibp.nextcmdparam.fileext u64 
    push           mlibp.nextcmdparam.item u64 
    push           mlibp.nextcmdparam.name u64 
    popptr                    u64 
    push           mlibp.nextcmdparam.fileext u64 
    pushptr                   u8 
    push           0          i64 
    jumpne         #10732     i64 
    setargs                   2 0
    push           mlibp.nextcmdparam.name u64 
    pushptr                   u64 
    push           &mlibp.nextcmdparam.str 
    callproc       &strcpy    
    push           mlibp.nextcmdparam.defext u64 
    jumpfalse      #10733     u64 
    push           mlibp.nextcmdparam.colonseen u8 
    jumptrue       #10733     i64 
    setargs                   2 0
    push           mlibp.nextcmdparam.defext u64 
    push           &mlibp.nextcmdparam.str 
    callfn         &mlibp.addext u64 
    push           mlibp.nextcmdparam.name u64 
    popptr                    u64 
#10733: 
    jump           #10734     
#10732: 
    setargs                   2 0
    push           "dll"      u64 
    push           mlibp.nextcmdparam.fileext u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #10735     i64 
    startmult                 
    push           mlibp.nextcmdparam.colonseen u8 
    jumpfalse      #10736     i64 
    push           5          i64 
    resetmult                 
    jump           #10737     
#10736: 
    push           3          i64 
    endmult                   
#10737: 
    setret                    i64 
    jump           #10721     
#10735: 
#10734: 
    startmult                 
    push           mlibp.nextcmdparam.colonseen u8 
    jumpfalse      #10738     i64 
    push           5          i64 
    resetmult                 
    jump           #10739     
#10738: 
    push           2          i64 
    endmult                   
#10739: 
    setret                    i64 
    jump           #10721     
#10721: 
    retfn                     i64 
End


Proc mlibp.readnextfileitem: i64
    param          mlibp.readnextfileitem.fileptr u64 
    param          mlibp.readnextfileitem.item u64 
    local          mlibp.readnextfileitem.p u64 
    local          mlibp.readnextfileitem.pstart u64 
    local          mlibp.readnextfileitem.pend u64 
    local          mlibp.readnextfileitem.n i64 
    procentry                 
    push           mlibp.readnextfileitem.fileptr u64 
    pushptr                   u64 
    pop            mlibp.readnextfileitem.p u64 
!reenter::
#10741: 
#10742: 
    push           mlibp.readnextfileitem.p u64 
    pushptr                   u8 
    push           32         u64 
    casejumpeq     #10743     u64 0
    push           9          u64 
    casejumpeq     #10743     u64 0
    push           13         u64 
    casejumpeq     #10743     u64 0
    push           10         u64 
    casejumpeq     #10743     u64 0
    push           26         u64 
    casejumpeq     #10744     u64 0
    push           0          u64 
    casejumpeq     #10744     u64 0
    popstack                  u64 
    jump           #10745     
#10743: 
    push           &mlibp.readnextfileitem.p 
    incr                      u64 1
    jump           #10746     
#10744: 
    push           0          i64 
    setret                    i64 
    jump           #10747     
    jump           #10746     
#10745: 
    jump           #10748     
#10746: 
    jump           #10742     
#10748: 
    push           mlibp.readnextfileitem.p u64 
    pushptr                   u8 
    push           33         u64 
    casejumpeq     #10749     u64 0
    push           35         u64 
    casejumpeq     #10749     u64 0
    popstack                  u64 
    jump           #10750     
#10749: 
    push           &mlibp.readnextfileitem.p 
    incr                      u64 1
#10751: 
    push           &mlibp.readnextfileitem.p 
    loadincr                  u64 1
    pushptr                   u8 
    push           10         u64 
    casejumpeq     #10752     u64 0
    push           26         u64 
    casejumpeq     #10753     u64 0
    push           0          u64 
    casejumpeq     #10753     u64 0
    popstack                  u64 
    jump           #10754     
#10752: 
    jump           #10741     
    jump           #10751     
#10753: 
    push           mlibp.readnextfileitem.p u64 
    push           1          i64 
    subrefoff                 u64 1 0
    push           mlibp.readnextfileitem.fileptr u64 
    popptr                    u64 
    push           0          i64 
    setret                    i64 
    jump           #10747     
    jump           #10751     
#10754: 
    jump           #10751     
#10755: 
    jump           #10756     
#10750: 
#10756: 
    push           mlibp.readnextfileitem.p u64 
    pushptr                   u8 
    push           34         u64 
    casejumpeq     #10757     u64 0
    popstack                  u64 
    jump           #10758     
#10757: 
    push           &mlibp.readnextfileitem.p 
    incrload                  u64 1
    pop            mlibp.readnextfileitem.pstart u64 
#10759: 
    push           mlibp.readnextfileitem.p u64 
    pushptr                   u8 
    push           0          u64 
    casejumpeq     #10760     u64 0
    push           26         u64 
    casejumpeq     #10760     u64 0
    push           34         u64 
    casejumpeq     #10761     u64 0
    popstack                  u64 
    jump           #10762     
#10760: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Unexpected EOF in @file" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           8          i64 
    stop                      
    jump           #10763     
#10761: 
    push           &mlibp.readnextfileitem.p 
    loadincr                  u64 1
    pop            mlibp.readnextfileitem.pend u64 
    push           mlibp.readnextfileitem.p u64 
    pushptr                   u8 
    push           44         u64 
    jumpne         #10764     u64 
    push           &mlibp.readnextfileitem.p 
    incr                      u64 1
#10764: 
    jump           #10765     
    jump           #10763     
#10762: 
#10763: 
    push           &mlibp.readnextfileitem.p 
    incr                      u64 1
    jump           #10759     
#10765: 
    jump           #10766     
#10758: 
    push           mlibp.readnextfileitem.p u64 
    pop            mlibp.readnextfileitem.pstart u64 
#10767: 
    push           mlibp.readnextfileitem.p u64 
    pushptr                   u8 
    push           0          u64 
    casejumpeq     #10768     u64 0
    push           26         u64 
    casejumpeq     #10768     u64 0
    push           32         u64 
    casejumpeq     #10769     u64 0
    push           9          u64 
    casejumpeq     #10769     u64 0
    push           44         u64 
    casejumpeq     #10769     u64 0
    push           13         u64 
    casejumpeq     #10769     u64 0
    push           10         u64 
    casejumpeq     #10769     u64 0
    popstack                  u64 
    jump           #10770     
#10768: 
    push           mlibp.readnextfileitem.p u64 
    pop            mlibp.readnextfileitem.pend u64 
    jump           #10771     
    jump           #10772     
#10769: 
    push           &mlibp.readnextfileitem.p 
    loadincr                  u64 1
    pop            mlibp.readnextfileitem.pend u64 
    jump           #10771     
    jump           #10772     
#10770: 
#10772: 
    push           &mlibp.readnextfileitem.p 
    incr                      u64 1
    jump           #10767     
#10771: 
#10766: 
    push           mlibp.readnextfileitem.pend u64 
    push           mlibp.readnextfileitem.pstart u64 
    subref                    i64 1
    pop            mlibp.readnextfileitem.n i64 
    push           mlibp.readnextfileitem.n i64 
    push           256        i64 
    jumplt         #10773     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "@file item too long" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           9          i64 
    stop                      
#10773: 
    setargs                   3 0
    push           mlibp.readnextfileitem.n u64 
    push           mlibp.readnextfileitem.pstart u64 
    push           &mlibp.readnextfileitem.str 
    callproc       &memcpy    
    push           0          u64 
    push           &mlibp.readnextfileitem.str 
    push           mlibp.readnextfileitem.n i64 
    popptroff                 u8 1 0
    push           &mlibp.readnextfileitem.str 
    push           mlibp.readnextfileitem.item u64 
    popptr                    u64 
    push           mlibp.readnextfileitem.p u64 
    push           mlibp.readnextfileitem.fileptr u64 
    popptr                    u64 
    push           1          i64 
    setret                    i64 
    jump           #10747     
#10747: 
    retfn                     i64 
End


Proc mlibp.ipadstr:
    param          mlibp.ipadstr.s u64 
    param          mlibp.ipadstr.width i64 
    param          mlibp.ipadstr.padchar u64 
    local          mlibp.ipadstr.n i64 
    local          mlibp.ipadstr.av_1 i64 
    procentry                 
    setargs                   1 0
    push           mlibp.ipadstr.s u64 
    callfn         &strlen    i64 
    pop            mlibp.ipadstr.n i64 
#10775: 
    push           mlibp.ipadstr.width i64 
    push           mlibp.ipadstr.n i64 
    sub                       i64 
    pop            mlibp.ipadstr.av_1 i64 
    push           mlibp.ipadstr.av_1 i64 
    push           0          i64 
    jumple         #10776     i64 
#10777: 
    setargs                   2 0
    push           mlibp.ipadstr.padchar u64 
    push           mlibp.ipadstr.s u64 
    callproc       &strcat    
#10778: 
    to             #10777     
    opnd           mlibp.ipadstr.av_1 
#10776: 
#10779: 
    retproc                   
End


Proc mlibp.padstr: u64
    param          mlibp.padstr.s u64 
    param          mlibp.padstr.width i64 
    param          mlibp.padstr.padchar u64 
    procentry                 
    setargs                   2 0
    push           mlibp.padstr.s u64 
    push           &mlibp.padstr.str 
    callproc       &strcpy    
    setargs                   3 0
    push           mlibp.padstr.padchar u64 
    push           mlibp.padstr.width i64 
    push           &mlibp.padstr.str 
    callproc       &mlibp.ipadstr 
    push           &mlibp.padstr.str 
    setret                    u64 
    jump           #10781     
#10781: 
    retfn                     u64 
End


Proc mlibp.chr: u64
    param          mlibp.chr.c i64 
    procentry                 
    push           mlibp.chr.c u64 
    push           &mlibp.chr.str 
    push           1          i64 
    popptroff                 u8 1 -1
    push           0          u64 
    push           &mlibp.chr.str 
    push           2          i64 
    popptroff                 u8 1 -1
    push           &mlibp.chr.str 
    setret                    u64 
    jump           #10783     
#10783: 
    retfn                     u64 
End


Proc mlibp.cmpstring: i64
    param          mlibp.cmpstring.s u64 
    param          mlibp.cmpstring.t u64 
    local          mlibp.cmpstring.res i64 
    procentry                 
    startmult                 
    setargs                   2 0
    push           mlibp.cmpstring.t u64 
    push           mlibp.cmpstring.s u64 
    callfn         &strcmp    i32 
    store          mlibp.cmpstring.res i64 
    push           0          i64 
    jumpge         #10785     i64 
    push           -1         i64 
    resetmult                 
    jump           #10786     
#10785: 
    push           mlibp.cmpstring.res i64 
    push           0          i64 
    jumple         #10787     i64 
    push           1          i64 
    resetmult                 
    jump           #10786     
#10787: 
    push           0          i64 
    endmult                   
#10786: 
    setret                    i64 
    jump           #10788     
#10788: 
    retfn                     i64 
End


Proc mlibp.cmpstringn: i64
    param          mlibp.cmpstringn.s u64 
    param          mlibp.cmpstringn.t u64 
    param          mlibp.cmpstringn.n i64 
    local          mlibp.cmpstringn.res i64 
    procentry                 
    startmult                 
    setargs                   3 0
    push           mlibp.cmpstringn.n u64 
    push           mlibp.cmpstringn.t u64 
    push           mlibp.cmpstringn.s u64 
    callfn         &strncmp   i32 
    store          mlibp.cmpstringn.res i64 
    push           0          i64 
    jumpge         #10790     i64 
    push           -1         i64 
    resetmult                 
    jump           #10791     
#10790: 
    push           mlibp.cmpstringn.res i64 
    push           0          i64 
    jumple         #10792     i64 
    push           1          i64 
    resetmult                 
    jump           #10791     
#10792: 
    push           0          i64 
    endmult                   
#10791: 
    setret                    i64 
    jump           #10793     
#10793: 
    retfn                     i64 
End


Proc mlibp.eqstring: i64
    param          mlibp.eqstring.s u64 
    param          mlibp.eqstring.t u64 
    procentry                 
    setargs                   2 0
    push           mlibp.eqstring.t u64 
    push           mlibp.eqstring.s u64 
    callfn         &strcmp    i32 
    push           0          i64 
    seteq                     i64 
    setret                    i64 
    jump           #10795     
#10795: 
    retfn                     i64 
End


Proc mlibp.cmpbytes: i64
    param          mlibp.cmpbytes.p u64 
    param          mlibp.cmpbytes.q u64 
    param          mlibp.cmpbytes.n i64 
    local          mlibp.cmpbytes.res i64 
    procentry                 
    startmult                 
    setargs                   3 0
    push           mlibp.cmpbytes.n u64 
    push           mlibp.cmpbytes.q u64 
    push           mlibp.cmpbytes.p u64 
    callfn         &memcmp    i32 
    store          mlibp.cmpbytes.res i64 
    push           0          i64 
    jumpge         #10797     i64 
    push           -1         i64 
    resetmult                 
    jump           #10798     
#10797: 
    push           mlibp.cmpbytes.res i64 
    push           0          i64 
    jumple         #10799     i64 
    push           1          i64 
    resetmult                 
    jump           #10798     
#10799: 
    push           0          i64 
    endmult                   
#10798: 
    setret                    i64 
    jump           #10800     
#10800: 
    retfn                     i64 
End


Proc mlibp.eqbytes: i64
    param          mlibp.eqbytes.p u64 
    param          mlibp.eqbytes.q u64 
    param          mlibp.eqbytes.n i64 
    procentry                 
    setargs                   3 0
    push           mlibp.eqbytes.n u64 
    push           mlibp.eqbytes.q u64 
    push           mlibp.eqbytes.p u64 
    callfn         &memcmp    i32 
    push           0          i64 
    seteq                     i64 
    setret                    i64 
    jump           #10802     
#10802: 
    retfn                     i64 
End


Proc mlibp.mseed:
    param          mlibp.mseed.a u64 
    param          mlibp.mseed.b u64 
    procentry                 
    push           mlibp.mseed.a i64 
    push           &mlibp.seed 
    push           1          i64 
    popptroff                 i64 8 -8
    push           mlibp.mseed.b u64 
    jumpfalse      #10804     u64 
    push           mlibp.mseed.b i64 
    push           &mlibp.seed 
    push           2          i64 
    popptroff                 i64 8 -8
    jump           #10805     
#10804: 
    push           &mlibp.seed 
    push           2          i64 
    addrefoff                 i64 8 -8
    push           mlibp.mseed.a i64 
    ixorto                    i64 
#10805: 
#10806: 
    retproc                   
End


Proc mlibp.mrandom: u64
    local          mlibp.mrandom.x i64 
    local          mlibp.mrandom.y i64 
    procentry                 
    push           &mlibp.seed 
    push           1          i64 
    pushptroff                i64 8 -8
    pop            mlibp.mrandom.x i64 
    push           &mlibp.seed 
    push           2          i64 
    pushptroff                i64 8 -8
    pop            mlibp.mrandom.y i64 
    push           mlibp.mrandom.y i64 
    push           &mlibp.seed 
    push           1          i64 
    popptroff                 i64 8 -8
    push           &mlibp.mrandom.x 
    push           mlibp.mrandom.x i64 
    push           23         i64 
    shl                       i64 
    ixorto                    i64 
    push           mlibp.mrandom.x i64 
    push           mlibp.mrandom.y i64 
    ixor                      i64 
    push           mlibp.mrandom.x i64 
    push           17         i64 
    shr                       i64 
    ixor                      i64 
    push           mlibp.mrandom.y i64 
    push           26         i64 
    shr                       i64 
    ixor                      i64 
    push           &mlibp.seed 
    push           2          i64 
    popptroff                 i64 8 -8
    push           &mlibp.seed 
    push           2          i64 
    pushptroff                i64 8 -8
    push           mlibp.mrandom.y i64 
    add                       u64 
    setret                    u64 
    jump           #10808     
#10808: 
    retfn                     u64 
End


Proc mlibp.mrandomp: i64
    procentry                 
    setargs                   0 0
    callfn         &mlibp.mrandom i64 
    push           9223372036854775807 i64 
    iand                      i64 
    setret                    i64 
    jump           #10810     
#10810: 
    retfn                     i64 
End


Proc mlibp.mrandomint: i64
    param          mlibp.mrandomint.n i64 
    procentry                 
    setargs                   0 0
    callfn         &mlibp.mrandomp i64 
    push           mlibp.mrandomint.n i64 
    irem                      i64 
    setret                    i64 
    jump           #10812     
#10812: 
    retfn                     i64 
End


Proc mlibp.mrandomrange: i64
    param          mlibp.mrandomrange.a i64 
    param          mlibp.mrandomrange.b i64 
    local          mlibp.mrandomrange.span i64 
    procentry                 
    push           mlibp.mrandomrange.b i64 
    push           mlibp.mrandomrange.a i64 
    sub                       i64 
    push           1          i64 
    add                       i64 
    pop            mlibp.mrandomrange.span i64 
    push           mlibp.mrandomrange.span i64 
    push           0          i64 
    jumpgt         #10814     i64 
    push           0          i64 
    setret                    i64 
    jump           #10815     
#10814: 
    setargs                   0 0
    callfn         &mlibp.mrandomp i64 
    push           mlibp.mrandomrange.span i64 
    irem                      i64 
    push           mlibp.mrandomrange.a i64 
    add                       i64 
    setret                    i64 
    jump           #10815     
#10815: 
    retfn                     i64 
End


Proc mlibp.mrandomreal: r64
    local          mlibp.mrandomreal.x r64 
    procentry                 
#10817: 
    setargs                   0 0
    callfn         &mlibp.mrandomp i64 
    float                     r64 i64 
    push           9.2233720368547758e+018 r64 
    div                       r64 
    pop            mlibp.mrandomreal.x r64 
#10818: 
    push           mlibp.mrandomreal.x r64 
    push           1.0000000000000000e+000 r64 
    jumpeq         #10817     r64 
#10819: 
    push           mlibp.mrandomreal.x r64 
    setret                    r64 
    jump           #10820     
#10820: 
    retfn                     r64 
End


Proc mlibp.mrandomreal1: r64
    procentry                 
    setargs                   0 0
    callfn         &mlibp.mrandomp i64 
    push           9223372036854775807 i64 
    idiv                      i64 
    float                     r64 i64 
    setret                    r64 
    jump           #10822     
#10822: 
    retfn                     r64 
End


Proc mlibp.checkpackfile: u64
    local          mlibp.checkpackfile.a i64 
    local          mlibp.checkpackfile.offset i64 
    local          mlibp.checkpackfile.i i64 
    local          mlibp.checkpackfile.size i64 
    local          mlibp.checkpackfile.name block:100 
    local          mlibp.checkpackfile.exefile block:300 
    local          mlibp.checkpackfile.packexeptr u64 
    local          mlibp.checkpackfile.packexesize i64 
    local          mlibp.checkpackfile.packfilename u64 
    local          mlibp.checkpackfile.packfilesize i64 
    local          mlibp.checkpackfile.packfileptr u64 
    procentry                 
    setargs                   2 0
    setargs                   0 0
    callfn         &mwindowsp.os_gethostname u64 
    push           &mlibp.checkpackfile.exefile 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcpy    
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Attempting to open" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mlibp.checkpackfile.exefile 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           &mlibp.checkpackfile.exefile 
    push           0          
    addrefoff                 u8 1 0
    callfn         &mlibp.readfile u64 
    pop            mlibp.checkpackfile.packexeptr u64 
    push           mlibp.checkpackfile.packexeptr u64 
    jumptrue       #10824     u64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Can't open" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mlibp.checkpackfile.exefile 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   1 0
    push           &mlibp.checkpackfile.packexeptr 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           0          
    stop                      
#10824: 
    push           mlibp.rfsize i64 
    pop            mlibp.checkpackfile.packexesize i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "File read OK. Size" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mlibp.checkpackfile.packexesize i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           mlibp.checkpackfile.packexeptr u64 
    push           mlibp.checkpackfile.packexesize i64 
    push           4          i64 
    sub                       i64 
    pushptroff                i32 1 0
    pop            mlibp.checkpackfile.a i64 
    push           mlibp.checkpackfile.a i64 
    push           1262568272 i64 
    jumpeq         #10825     i64 
    setargs                   1 0
    push           mlibp.checkpackfile.packexeptr u64 
    callproc       &free      
    push           0          u64 
    pop            mlibp.checkpackfile.packfileptr u64 
    push           0          u64 
    setret                    u64 
    jump           #10826     
#10825: 
    push           mlibp.checkpackfile.packexeptr u64 
    push           mlibp.checkpackfile.packexesize i64 
    push           8          i64 
    sub                       i64 
    pushptroff                i32 1 0
    pop            mlibp.checkpackfile.offset i64 
    push           mlibp.checkpackfile.packexeptr u64 
    push           mlibp.checkpackfile.offset i64 
    addrefoff                 u64 1 0
    pop            mlibp.checkpackfile.packfilename u64 
    push           &mlibp.checkpackfile.offset 
    setargs                   1 0
    push           mlibp.checkpackfile.packfilename u64 
    callfn         &strlen    i64 
    push           1          i64 
    add                       i64 
    addto                     i64 
    push           mlibp.checkpackfile.packexeptr u64 
    push           mlibp.checkpackfile.offset i64 
    pushptroff                i32 1 0
    pop            mlibp.checkpackfile.packfilesize i64 
    push           mlibp.checkpackfile.packexeptr u64 
    push           mlibp.checkpackfile.offset i64 
    addrefoff                 u64 1 4
    pop            mlibp.checkpackfile.packfileptr u64 
    push           mlibp.checkpackfile.packfileptr u64 
    setret                    u64 
    jump           #10826     
#10826: 
    retfn                     u64 
End


Proc mlibp.pcm_allocx: u64
    local          mlibp.pcm_allocx.p u64 
    procentry                 
    push           32         i64 
    pop            mlibp.allocbytes i64 
    startmult                 
    push           &mlibp.freelist 
    push           2          i64 
    pushptroff                u64 8 0
    store          mlibp.pcm_allocx.p u64 
    jumpfalse      #10828     u64 
    push           &mlibp.freelist 
    push           2          i64 
    pushptroff                u64 8 0
    pushptr                   u64 
    push           &mlibp.freelist 
    push           2          i64 
    storeptroff               u64 8 0
    resetmult                 
    jump           #10829     
#10828: 
    push           mlibp.pcheapptr u64 
    pop            mlibp.pcm_allocx.p u64 
    push           &mlibp.pcheapptr 
    push           32         i64 
    addrefoffto               u64 1 0
    push           mlibp.pcheapptr u64 
    push           mlibp.pcheapend u64 
    jumplt         #10830     u64 
    setargs                   1 0
    push           32         i64 
    callfn         &mlibp.pcm_newblock u64 
    pop            mlibp.pcm_allocx.p u64 
#10830: 
    push           0          u64 
    push           mlibp.pcm_allocx.p u64 
    popptr                    u64 
    push           0          u64 
    push           mlibp.pcm_allocx.p u64 
    push           1          i64 
    popptroff                 u64 8 0
    push           0          u64 
    push           mlibp.pcm_allocx.p u64 
    push           2          i64 
    popptroff                 u64 8 0
    push           0          u64 
    push           mlibp.pcm_allocx.p u64 
    push           3          i64 
    popptroff                 u64 8 0
    push           mlibp.pcm_allocx.p u64 
    endmult                   
#10829: 
    setret                    u64 
    jump           #10831     
#10831: 
    retfn                     u64 
End


Proc mlibp.readline: u64
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$read_conline 
    push           msysp.rd_buffer u64 
    setret                    u64 
    jump           #10833     
#10833: 
    retfn                     u64 
End


Proc mlibp.stralloc: u64
    param          mlibp.stralloc.p u64 
    procentry                 
    setargs                   2 0
    push           0          u64 
    push           mlibp.stralloc.p u64 
    push           mlibp.allocbase u64 
    subref                    i64 1
    callfn         &msysp.strint u64 
    setret                    u64 
    jump           #10835     
#10835: 
    retfn                     u64 
End


Proc mlibp.findfunction: u64
    param          mlibp.findfunction.name u64 
    local          mlibp.findfunction.av_1 i64 
    local          mlibp.findfunction.i i64 
    procentry                 
#10837: 
    push           1          i64 
    pop            mlibp.findfunction.i i64 
    getnprocs                 i64 
    pop            mlibp.findfunction.av_1 i64 
    push           mlibp.findfunction.av_1 i64 
    push           1          i64 
    jumplt         #10838     i64 
#10839: 
    setargs                   2 0
    push           mlibp.findfunction.name u64 
    push           mlibp.findfunction.i i64 
    getprocname               i64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #10840     i64 
    push           mlibp.findfunction.i i64 
    getprocaddr               i64 
    setret                    u64 
    jump           #10841     
#10840: 
#10842: 
    forup          #10839     i64 1
    opnd           mlibp.findfunction.i 
    opnd           mlibp.findfunction.av_1 
#10838: 
    push           0          u64 
    setret                    u64 
    jump           #10841     
#10841: 
    retfn                     u64 
End


Proc msysp.m$init:
    local          msysp.m$init.nargs i32 
    local          msysp.m$init.nargs64 i64 
    local          msysp.m$init.args u64 
    local          msysp.m$init.env u64 
    local          msysp.m$init.res i64 
    local          msysp.m$init.s u64 
    local          msysp.m$init.j i64 
    local          msysp.m$init.i i64 
    procentry                 
    setargs                   5 0
    push           &msysp.m$init.startupinfo 
    push           0          i64 
    push           &msysp.m$init.env 
    push           &msysp.m$init.args 
    push           &msysp.m$init.nargs 
    callfn         &__getmainargs i32 
    pop            msysp.m$init.res i64 
    push           msysp.m$init.nargs i32 
    pop            msysp.nsysparams i64 
    push           msysp.nsysparams i64 
    push           128        i64 
    jumple         #10844     i64 
    setargs                   1 0
    push           "Too many params\n" u64 
    callproc       &printf    
    push           50         i64 
    stop                      
#10844: 
    push           msysp.m$init.nargs i32 
    pop            msysp.m$init.nargs64 i64 
#10845: 
    push           1          i64 
    pop            msysp.m$init.i i64 
    push           msysp.m$init.nargs64 i64 
    push           1          i64 
    jumplt         #10846     i64 
#10847: 
    push           msysp.m$init.args u64 
    push           msysp.m$init.i i64 
    pushptroff                u64 8 -8
    push           &msysp.sysparams 
    push           msysp.m$init.i i64 
    popptroff                 u64 8 -8
#10848: 
    forup          #10847     i64 1
    opnd           msysp.m$init.i 
    opnd           msysp.m$init.nargs64 
#10846: 
    push           1          i64 
    pop            msysp.m$init.j i64 
    push           0          i64 
    pop            msysp.nenvstrings i64 
    jump           #10849     
#10850: 
    push           msysp.m$init.env u64 
    push           msysp.m$init.j i64 
    pushptroff                u64 8 -8
    push           &msysp.envstrings 
    push           &msysp.nenvstrings 
    incrload                  i64 1
    popptroff                 u64 8 -8
    push           &msysp.m$init.j 
    incr                      i64 1
#10849: 
    push           msysp.m$init.env u64 
    push           msysp.m$init.j i64 
    pushptroff                u64 8 -8
    jumptrue       #10850     u64 
#10851: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
#10852: 
    retproc                   
End


Proc msysp.pushio:
    procentry                 
    push           msysp.niostack i64 
    push           10         i64 
    jumplt         #10854     i64 
    setargs                   1 0
    push           "Too many io levels\n" u64 
    callproc       &printf    
    push           53         i64 
    stop                      
#10854: 
    push           &msysp.niostack 
    incr                      i64 1
    push           msysp.outchan u64 
    push           &msysp.outchan_stack 
    push           msysp.niostack i64 
    popptroff                 u64 8 -8
    push           msysp.outdev i64 
    push           &msysp.outdev_stack 
    push           msysp.niostack i64 
    popptroff                 i64 8 -8
    push           msysp.fmtstr u64 
    push           &msysp.fmtstr_stack 
    push           msysp.niostack i64 
    popptroff                 u64 8 -8
    push           msysp.needgap i64 
    push           &msysp.needgap_stack 
    push           msysp.niostack i64 
    popptroff                 u8 1 -1
    push           0          i64 
    pop            msysp.needgap i64 
    push           0          u64 
    pop            msysp.fmtstr u64 
    push           0          u64 
    pop            msysp.outchan u64 
#10855: 
    retproc                   
End


Proc msysp.m$print_startfile:
    param          msysp.m$print_startfile.dev u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.pushio 
    push           msysp.m$print_startfile.dev u64 
    pop            msysp.outchan u64 
    push           msysp.m$print_startfile.dev u64 
    jumpfalse      #10857     u64 
    push           2          i64 
    pop            msysp.outdev i64 
    jump           #10858     
#10857: 
    push           1          i64 
    pop            msysp.outdev i64 
#10858: 
#10859: 
    retproc                   
End


Proc msysp.m$print_startstr:
    param          msysp.m$print_startstr.s u64 
    local          msysp.m$print_startstr.p u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.pushio 
    push           msysp.m$print_startstr.s u64 
    push           &msysp.ptr_stack 
    push           msysp.niostack i64 
    popptroff                 u64 8 -8
    push           &msysp.ptr_stack 
    push           msysp.niostack i64 
    addrefoff                 u64 8 -8
    pop            msysp.m$print_startstr.p u64 
    push           msysp.m$print_startstr.p u64 
    pop            msysp.outchan u64 
    push           3          i64 
    pop            msysp.outdev i64 
#10861: 
    retproc                   
End


Proc msysp.m$print_startptr:
    param          msysp.m$print_startptr.p u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.pushio 
    push           msysp.m$print_startptr.p u64 
    pop            msysp.outchan u64 
    push           3          i64 
    pop            msysp.outdev i64 
#10863: 
    retproc                   
End


Proc msysp.m$print_startcon:
    procentry                 
    setargs                   0 0
    callproc       &msysp.pushio 
    push           1          i64 
    pop            msysp.outdev i64 
#10865: 
    retproc                   
End


Proc msysp.m$print_setfmt:
    param          msysp.m$print_setfmt.format u64 
    procentry                 
    push           msysp.m$print_setfmt.format u64 
    pop            msysp.fmtstr u64 
#10867: 
    retproc                   
End


Proc msysp.m$print_end:
    procentry                 
    push           0          i64 
    pop            msysp.needgap i64 
    setargs                   1 0
    push           1          i64 
    callproc       &msysp.nextfmtchars 
    push           msysp.niostack i64 
    push           0          i64 
    jumpne         #10869     i64 
    jump           #10870     
#10869: 
    push           &msysp.outchan_stack 
    push           msysp.niostack i64 
    pushptroff                u64 8 -8
    pop            msysp.outchan u64 
    push           &msysp.outdev_stack 
    push           msysp.niostack i64 
    pushptroff                i64 8 -8
    pop            msysp.outdev i64 
    push           &msysp.fmtstr_stack 
    push           msysp.niostack i64 
    pushptroff                u64 8 -8
    pop            msysp.fmtstr u64 
    push           &msysp.needgap_stack 
    push           msysp.niostack i64 
    pushptroff                u8 1 -1
    pop            msysp.needgap i64 
    push           &msysp.niostack 
    decr                      i64 1
#10870: 
    retproc                   
End


Proc msysp.m$print_ptr:
    param          msysp.m$print_ptr.a u64 
    param          msysp.m$print_ptr.fmtstyle u64 
    local          msysp.m$print_ptr.s block:20 
    procentry                 
    push           msysp.m$print_ptr.fmtstyle u64 
    push           0          u64 
    jumpne         #10872     u64 
    push           "z8H"      u64 
    pop            msysp.m$print_ptr.fmtstyle u64 
#10872: 
    setargs                   2 0
    push           msysp.m$print_ptr.fmtstyle u64 
    push           msysp.m$print_ptr.a u64 
    callproc       &msysp.m$print_u64 
#10873: 
    retproc                   
End


Proc msysp.m$print_ptr_nf:
    param          msysp.m$print_ptr_nf.a u64 
    procentry                 
    setargs                   2 0
    push           0          u64 
    push           msysp.m$print_ptr_nf.a u64 
    callproc       &msysp.m$print_ptr 
#10875: 
    retproc                   
End


Proc msysp.m$print_i64:
    param          msysp.m$print_i64.a i64 
    param          msysp.m$print_i64.fmtstyle u64 
    local          msysp.m$print_i64.s block:40 
    local          msysp.m$print_i64.fmt block:16 
    local          msysp.m$print_i64.n i64 
    procentry                 
    setargs                   1 0
    push           0          i64 
    callproc       &msysp.nextfmtchars 
    push           msysp.m$print_i64.fmtstyle u64 
    push           0          u64 
    jumpne         #10877     u64 
    push           msysp.m$print_i64.a i64 
    push           0          i64 
    jumplt         #10878     i64 
    setargs                   4 0
    push           0          i64 
    push           10         u64 
    push           &msysp.m$print_i64.s 
    push           msysp.m$print_i64.a u64 
    callfn         &msysp.u64tostr i64 
    pop            msysp.m$print_i64.n i64 
    jump           #10879     
#10878: 
    push           45         u64 
    push           &msysp.m$print_i64.s 
    push           1          i64 
    popptroff                 u8 1 -1
    setargs                   4 0
    push           0          i64 
    push           10         u64 
    push           &msysp.m$print_i64.s 
    push           1          
    addrefoff                 u8 1 0
    push           msysp.m$print_i64.a i64 
    neg                       u64 
    callfn         &msysp.u64tostr i64 
    push           1          i64 
    add                       i64 
    pop            msysp.m$print_i64.n i64 
#10879: 
    setargs                   2 0
    push           msysp.m$print_i64.n i64 
    push           &msysp.m$print_i64.s 
    callproc       &msysp.printstr_n 
    jump           #10880     
#10877: 
    setargs                   3 0
    push           &msysp.m$print_i64.fmt 
    push           -1         i64 
    push           msysp.m$print_i64.fmtstyle u64 
    callproc       &msysp.strtofmt 
    push           &msysp.m$print_i64.fmt 
    push           14         
    pushptroff                u8 1 0
    push           86         u64 
    jumpne         #10881     u64 
    push           msysp.m$print_i64.a i64 
    pop            msysp.fmtparam i64 
    push           0          i64 
    pop            msysp.needgap i64 
    jump           #10882     
#10881: 
    setargs                   2 0
    push           &msysp.m$print_i64.fmt 
    push           msysp.m$print_i64.a i64 
    callproc       &msysp.tostr_i64 
#10882: 
#10880: 
    push           1          i64 
    pop            msysp.needgap i64 
#10883: 
    retproc                   
End


Proc msysp.m$print_i64_nf:
    param          msysp.m$print_i64_nf.a i64 
    procentry                 
    setargs                   2 0
    push           0          u64 
    push           msysp.m$print_i64_nf.a i64 
    callproc       &msysp.m$print_i64 
#10885: 
    retproc                   
End


Proc msysp.m$print_u64:
    param          msysp.m$print_u64.a u64 
    param          msysp.m$print_u64.fmtstyle u64 
    local          msysp.m$print_u64.s block:40 
    local          msysp.m$print_u64.fmt block:16 
    procentry                 
    setargs                   1 0
    push           0          i64 
    callproc       &msysp.nextfmtchars 
    push           msysp.m$print_u64.fmtstyle u64 
    push           0          u64 
    jumpne         #10887     u64 
    setargs                   3 3
    push           msysp.m$print_u64.a u64 
    push           "%llu"     u64 
    push           &msysp.m$print_u64.s 
    callproc       &sprintf   
    setargs                   1 0
    push           &msysp.m$print_u64.s 
    callproc       &msysp.printstr 
    jump           #10888     
#10887: 
    setargs                   3 0
    push           &msysp.m$print_u64.fmt 
    push           -1         i64 
    push           msysp.m$print_u64.fmtstyle u64 
    callproc       &msysp.strtofmt 
    setargs                   2 0
    push           &msysp.m$print_u64.fmt 
    push           msysp.m$print_u64.a u64 
    callproc       &msysp.tostr_u64 
#10888: 
    push           1          i64 
    pop            msysp.needgap i64 
#10889: 
    retproc                   
End


Proc msysp.m$print_i128:
    param          msysp.m$print_i128.a i128 
    param          msysp.m$print_i128.fmtstyle u64 
    local          msysp.m$print_i128.s block:40 
    local          msysp.m$print_i128.fmt block:16 
    procentry                 
    setargs                   1 0
    push           0          i64 
    callproc       &msysp.nextfmtchars 
    setargs                   3 0
    push           &msysp.m$print_i128.fmt 
    push           -1         i64 
    push           msysp.m$print_i128.fmtstyle u64 
    callproc       &msysp.strtofmt 
    push           msysp.m$print_i128.a i128 
    push           0          i64 
    widenw                    i128 i64 
    jumplt         #10891     i128 
    setargs                   4 0
    push           0          i64 
    push           &msysp.m$print_i128.fmt 
    push           msysp.m$print_i128.a u128 
    callproc       &msysp.tostr_u128 
    jump           #10892     
#10891: 
    setargs                   4 0
    push           1          i64 
    push           &msysp.m$print_i128.fmt 
    push           msysp.m$print_i128.a i128 
    neg                       u128 
    callproc       &msysp.tostr_u128 
#10892: 
    push           1          i64 
    pop            msysp.needgap i64 
#10893: 
    retproc                   
End


Proc msysp.m$print_u128:
    param          msysp.m$print_u128.a u128 
    param          msysp.m$print_u128.fmtstyle u64 
    local          msysp.m$print_u128.s block:40 
    local          msysp.m$print_u128.fmt block:16 
    procentry                 
    setargs                   1 0
    push           0          i64 
    callproc       &msysp.nextfmtchars 
    setargs                   3 0
    push           &msysp.m$print_u128.fmt 
    push           -1         i64 
    push           msysp.m$print_u128.fmtstyle u64 
    callproc       &msysp.strtofmt 
    setargs                   4 0
    push           0          i64 
    push           &msysp.m$print_u128.fmt 
    push           msysp.m$print_u128.a u128 
    callproc       &msysp.tostr_u128 
    push           1          i64 
    pop            msysp.needgap i64 
#10895: 
    retproc                   
End


Proc msysp.m$print_r64:
    param          msysp.m$print_r64.x r64 
    param          msysp.m$print_r64.fmtstyle u64 
    local          msysp.m$print_r64.s block:360 
    local          msysp.m$print_r64.fmt block:16 
    procentry                 
    setargs                   1 0
    push           0          i64 
    callproc       &msysp.nextfmtchars 
    push           msysp.m$print_r64.fmtstyle u64 
    push           0          u64 
    jumpne         #10897     u64 
    setargs                   3 3
    push           msysp.m$print_r64.x r64 
    push           "%f"       u64 
    push           &msysp.m$print_r64.s 
    callproc       &sprintf   
    setargs                   1 0
    push           &msysp.m$print_r64.s 
    callproc       &msysp.printstr 
    jump           #10898     
#10897: 
    setargs                   3 0
    push           &msysp.m$print_r64.fmt 
    push           -1         i64 
    push           msysp.m$print_r64.fmtstyle u64 
    callproc       &msysp.strtofmt 
    setargs                   2 0
    push           &msysp.m$print_r64.fmt 
    push           msysp.m$print_r64.x r64 
    callproc       &msysp.tostr_r64 
#10898: 
    push           1          i64 
    pop            msysp.needgap i64 
#10899: 
    retproc                   
End


Proc msysp.m$print_r32:
    param          msysp.m$print_r32.x r32 
    param          msysp.m$print_r32.fmtstyle u64 
    procentry                 
    setargs                   2 0
    push           msysp.m$print_r32.fmtstyle u64 
    push           msysp.m$print_r32.x r32 
    fwiden                    r64 r32 
    callproc       &msysp.m$print_r64 
#10901: 
    retproc                   
End


Proc msysp.m$print_c8:
    param          msysp.m$print_c8.a i64 
    param          msysp.m$print_c8.fmtstyle u64 
    local          msysp.m$print_c8.s block:40 
    local          msysp.m$print_c8.fmt block:16 
    local          msysp.m$print_c8.n i64 
    procentry                 
    setargs                   1 0
    push           0          i64 
    callproc       &msysp.nextfmtchars 
    push           msysp.m$print_c8.a u64 
    push           &msysp.m$print_c8.s 
    push           1          i64 
    popptroff                 u8 1 -1
    push           0          u64 
    push           &msysp.m$print_c8.s 
    push           2          i64 
    popptroff                 u8 1 -1
    setargs                   1 0
    push           &msysp.m$print_c8.s 
    callproc       &msysp.printstr 
    push           1          i64 
    pop            msysp.needgap i64 
#10903: 
    retproc                   
End


Proc msysp.m$print_str:
    param          msysp.m$print_str.s u64 
    param          msysp.m$print_str.fmtstyle u64 
    local          msysp.m$print_str.fmt block:16 
    procentry                 
    setargs                   1 0
    push           0          i64 
    callproc       &msysp.nextfmtchars 
    push           msysp.m$print_str.s u64 
    push           0          u64 
    jumpne         #10905     u64 
    setargs                   1 0
    push           "<null>"   u64 
    callproc       &msysp.printstr 
    jump           #10906     
#10905: 
    push           msysp.m$print_str.fmtstyle u64 
    push           0          u64 
    jumpne         #10907     u64 
    setargs                   1 0
    push           msysp.m$print_str.s u64 
    callproc       &msysp.printstr 
    jump           #10908     
#10907: 
    setargs                   3 0
    push           &msysp.m$print_str.fmt 
    push           -1         i64 
    push           msysp.m$print_str.fmtstyle u64 
    callproc       &msysp.strtofmt 
    setargs                   2 0
    push           &msysp.m$print_str.fmt 
    push           msysp.m$print_str.s u64 
    callproc       &msysp.tostr_str 
#10908: 
    push           1          i64 
    pop            msysp.needgap i64 
#10906: 
    retproc                   
End


Proc msysp.m$print_str_nf:
    param          msysp.m$print_str_nf.s u64 
    procentry                 
    setargs                   2 0
    push           0          u64 
    push           msysp.m$print_str_nf.s u64 
    callproc       &msysp.m$print_str 
#10910: 
    retproc                   
End


Proc msysp.m$print_strsl:
    param          msysp.m$print_strsl.s u128 
    param          msysp.m$print_strsl.fmtstyle u64 
    local          msysp.m$print_strsl.fmt block:16 
    procentry                 
    setargs                   1 0
    push           0          i64 
    callproc       &msysp.nextfmtchars 
    setargs                   1 0
    push           "FORMATED PRINT SLICE NOT READY" u64 
    callproc       &mlibp.abortprogram 
    push           1          i64 
    pop            msysp.needgap i64 
#10912: 
    retproc                   
End


Proc msysp.m$print_newline:
    procentry                 
    push           0          i64 
    pop            msysp.needgap i64 
    setargs                   1 0
    push           1          i64 
    callproc       &msysp.nextfmtchars 
    setargs                   1 0
    push           "\c\n"     u64 
    callproc       &msysp.printstr 
#10914: 
    retproc                   
End


Proc msysp.m$print_nogap:
    procentry                 
    push           0          i64 
    pop            msysp.needgap i64 
#10916: 
    retproc                   
End


Proc msysp.m$print_space:
    procentry                 
    push           0          i64 
    pop            msysp.needgap i64 
    setargs                   1 0
    push           " "        u64 
    callproc       &msysp.printstr 
#10918: 
    retproc                   
End


Proc msysp.printstr:
    param          msysp.printstr.s u64 
    local          msysp.printstr.n i64 
    local          msysp.printstr.p u64 
    procentry                 
    push           msysp.outdev i64 
    push           1          i64 
    casejumpeq     #10920     i64 0
    push           2          i64 
    casejumpeq     #10921     i64 0
    push           3          i64 
    casejumpeq     #10922     i64 0
    popstack                  i64 
    jump           #10923     
#10920: 
    setargs                   2 2
    push           msysp.printstr.s u64 
    push           "%s"       u64 
    callproc       &printf    
    jump           #10924     
#10921: 
    setargs                   3 3
    push           msysp.printstr.s u64 
    push           "%s"       u64 
    push           msysp.outchan u64 
    callproc       &fprintf   
    jump           #10924     
#10922: 
    push           msysp.outchan u64 
    pop            msysp.printstr.p u64 
    setargs                   2 0
    push           msysp.printstr.s u64 
    push           msysp.printstr.p u64 
    pushptr                   u64 
    callproc       &strcpy    
    push           msysp.printstr.p u64 
    setargs                   1 0
    push           msysp.printstr.s u64 
    callfn         &strlen    i64 
    addrefoffto               u64 1 0
    push           0          u64 
    push           msysp.printstr.p u64 
    pushptr                   u64 
    popptr                    u8 
    jump           #10924     
#10923: 
#10924: 
#10925: 
    retproc                   
End


Proc msysp.printstr_n:
    param          msysp.printstr_n.s u64 
    param          msysp.printstr_n.n i64 
    local          msysp.printstr_n.p u64 
    procentry                 
    push           msysp.printstr_n.n i64 
    push           -1         i64 
    casejumpeq     #10927     i64 0
    push           0          i64 
    casejumpeq     #10928     i64 0
    popstack                  i64 
    jump           #10929     
#10927: 
    setargs                   1 0
    push           msysp.printstr_n.s u64 
    callfn         &strlen    i64 
    pop            msysp.printstr_n.n i64 
    jump           #10930     
#10928: 
    jump           #10931     
    jump           #10930     
#10929: 
#10930: 
    push           msysp.outdev i64 
    push           1          i64 
    casejumpeq     #10932     i64 0
    push           2          i64 
    casejumpeq     #10933     i64 0
    push           3          i64 
    casejumpeq     #10934     i64 0
    popstack                  i64 
    jump           #10935     
#10932: 
    setargs                   3 2
    push           msysp.printstr_n.s u64 
    push           msysp.printstr_n.n i64 
    push           "%.*s"     u64 
    callproc       &printf    
    jump           #10936     
#10933: 
    setargs                   4 3
    push           msysp.printstr_n.s u64 
    push           msysp.printstr_n.n i64 
    push           "%.*s"     u64 
    push           msysp.outchan u64 
    callproc       &fprintf   
    jump           #10936     
#10934: 
    push           msysp.outchan u64 
    pop            msysp.printstr_n.p u64 
    setargs                   3 0
    push           msysp.printstr_n.n u64 
    push           msysp.printstr_n.s u64 
    push           msysp.printstr_n.p u64 
    pushptr                   u64 
    callproc       &memcpy    
    push           msysp.printstr_n.p u64 
    push           msysp.printstr_n.n i64 
    addrefoffto               u64 1 0
    push           0          u64 
    push           msysp.printstr_n.p u64 
    pushptr                   u64 
    popptr                    u8 
    jump           #10936     
#10935: 
#10936: 
#10931: 
    retproc                   
End


Proc msysp.printstrn_app:
    param          msysp.printstrn_app.s u64 
    param          msysp.printstrn_app.length i64 
    param          msysp.printstrn_app.f u64 
    procentry                 
    push           msysp.printstrn_app.length i64 
    jumpfalse      #10938     i64 
    push           msysp.printstrn_app.f u64 
    push           0          u64 
    jumpne         #10939     u64 
    setargs                   3 2
    push           msysp.printstrn_app.s u64 
    push           msysp.printstrn_app.length i64 
    push           "%.*s"     u64 
    callproc       &printf    
    jump           #10940     
#10939: 
    setargs                   4 3
    push           msysp.printstrn_app.s u64 
    push           msysp.printstrn_app.length i64 
    push           "%.*s"     u64 
    push           msysp.printstrn_app.f u64 
    callproc       &fprintf   
#10940: 
#10938: 
#10941: 
    retproc                   
End


Proc msysp.printchar:
    param          msysp.printchar.ch i64 
    local          msysp.printchar.p u64 
    procentry                 
    push           msysp.outdev i64 
    push           1          i64 
    casejumpeq     #10943     i64 0
    push           2          i64 
    casejumpeq     #10944     i64 0
    push           3          i64 
    casejumpeq     #10945     i64 0
    popstack                  i64 
    jump           #10946     
#10943: 
    setargs                   2 2
    push           msysp.printchar.ch i64 
    push           "%c"       u64 
    callproc       &printf    
    jump           #10947     
#10944: 
    setargs                   3 3
    push           msysp.printchar.ch i64 
    push           "%c"       u64 
    push           msysp.outchan u64 
    callproc       &fprintf   
    jump           #10947     
#10945: 
    push           msysp.outchan u64 
    pop            msysp.printchar.p u64 
    push           msysp.printchar.ch u64 
    push           msysp.printchar.p u64 
    pushptr                   u64 
    popptr                    u8 
    push           msysp.printchar.p u64 
    push           1          i64 
    addrefoffto               u64 1 0
    push           0          u64 
    push           msysp.printchar.p u64 
    pushptr                   u64 
    popptr                    u8 
    jump           #10947     
#10946: 
#10947: 
#10948: 
    retproc                   
End


Proc msysp.nextfmtchars:
    param          msysp.nextfmtchars.lastx i64 
    local          msysp.nextfmtchars.c u8 
    local          msysp.nextfmtchars.pstart u64 
    local          msysp.nextfmtchars.n i64 
    procentry                 
    push           msysp.fmtstr u64 
    jumptrue       #10950     u64 
    push           msysp.needgap i64 
    jumpfalse      #10951     i64 
    setargs                   1 0
    push           32         i64 
    callproc       &msysp.printchar 
#10951: 
    push           0          i64 
    pop            msysp.needgap i64 
    jump           #10952     
#10950: 
    push           msysp.fmtstr u64 
    pop            msysp.nextfmtchars.pstart u64 
    push           0          i64 
    pop            msysp.nextfmtchars.n i64 
#10953: 
    push           msysp.fmtstr u64 
    pushptr                   u8 
    pop            msysp.nextfmtchars.c u8 
    push           msysp.nextfmtchars.c u8 
    switch         #10954     0 126
    opnd           #10955     
#10954: 
    switchlabel    #10956     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10957     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10955     
    switchlabel    #10958     
    endswitch                 
#10957: 
    push           msysp.nextfmtchars.lastx i64 
    jumpfalse      #10959     i64 
    jump           #10960     
#10959: 
    push           &msysp.fmtstr 
    incr                      u64 1
    push           msysp.nextfmtchars.n i64 
    jumpfalse      #10961     i64 
    setargs                   2 0
    push           msysp.nextfmtchars.n i64 
    push           msysp.nextfmtchars.pstart u64 
    callproc       &msysp.printstr_n 
#10961: 
    jump           #10952     
    jump           #10962     
#10956: 
    push           msysp.nextfmtchars.n i64 
    jumpfalse      #10963     i64 
    setargs                   2 0
    push           msysp.nextfmtchars.n i64 
    push           msysp.nextfmtchars.pstart u64 
    callproc       &msysp.printstr_n 
    jump           #10964     
#10963: 
    push           msysp.nextfmtchars.lastx i64 
    jumptrue       #10965     i64 
    setargs                   2 0
    push           1          i64 
    push           "|"        u64 
    callproc       &msysp.printstr_n 
#10965: 
#10964: 
    jump           #10952     
    jump           #10962     
#10958: 
    push           msysp.nextfmtchars.n i64 
    jumpfalse      #10966     i64 
    setargs                   2 0
    push           msysp.nextfmtchars.n i64 
    push           msysp.nextfmtchars.pstart u64 
    callproc       &msysp.printstr_n 
    push           0          i64 
    pop            msysp.nextfmtchars.n i64 
#10966: 
    push           &msysp.fmtstr 
    incr                      u64 1
    push           msysp.fmtstr u64 
    pushptr                   u8 
    pop            msysp.nextfmtchars.c u8 
    push           msysp.nextfmtchars.c u8 
    jumpfalse      #10967     u64 
    push           &msysp.fmtstr 
    incr                      u64 1
    setargs                   1 0
    push           msysp.nextfmtchars.c u8 
    callproc       &msysp.printchar 
#10967: 
    push           msysp.fmtstr u64 
    pop            msysp.nextfmtchars.pstart u64 
    jump           #10962     
#10955: 
!skip::
#10960: 
    push           &msysp.nextfmtchars.n 
    incr                      i64 1
    push           &msysp.fmtstr 
    incr                      u64 1
#10962: 
    jump           #10953     
#10968: 
#10952: 
    retproc                   
End


Proc msysp.strtofmt:
    param          msysp.strtofmt.s u64 
    param          msysp.strtofmt.slen i64 
    param          msysp.strtofmt.fmt u64 
    local          msysp.strtofmt.c i64 
    local          msysp.strtofmt.wset u8 
    local          msysp.strtofmt.n i64 
    local          msysp.strtofmt.str block:100 
    procentry                 
    push           msysp.defaultfmt block:16 
    push           msysp.strtofmt.fmt u64 
    popptr                    block:16 
    push           msysp.strtofmt.s u64 
    push           0          u64 
    jumpne         #10970     u64 
    jump           #10971     
#10970: 
    push           msysp.strtofmt.slen i64 
    push           -1         i64 
    jumpne         #10972     i64 
    setargs                   1 0
    push           msysp.strtofmt.s u64 
    callfn         &strlen    i64 
    pop            msysp.strtofmt.slen i64 
#10972: 
    setargs                   3 0
    push           msysp.strtofmt.slen u64 
    push           msysp.strtofmt.s u64 
    push           &msysp.strtofmt.str 
    callproc       &memcpy    
    push           0          u64 
    push           &msysp.strtofmt.str 
    push           msysp.strtofmt.slen i64 
    popptroff                 u8 1 0
    push           &msysp.strtofmt.str 
    pop            msysp.strtofmt.s u64 
    push           0          i64 
    pop            msysp.strtofmt.wset u8 
    jump           #10973     
#10974: 
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    pop            msysp.strtofmt.c i64 
    push           &msysp.strtofmt.s 
    incr                      u64 1
    push           msysp.strtofmt.c i64 
    switch         #10975     42 126
    opnd           #10976     
#10975: 
    switchlabel    #10977     
    switchlabel    #10978     
    switchlabel    #10979     
    switchlabel    #10976     
    switchlabel    #10980     
    switchlabel    #10976     
    switchlabel    #10976     
    switchlabel    #10976     
    switchlabel    #10976     
    switchlabel    #10976     
    switchlabel    #10976     
    switchlabel    #10976     
    switchlabel    #10976     
    switchlabel    #10976     
    switchlabel    #10976     
    switchlabel    #10976     
    switchlabel    #10976     
    switchlabel    #10976     
    switchlabel    #10976     
    switchlabel    #10976     
    switchlabel    #10976     
    switchlabel    #10976     
    switchlabel    #10976     
    switchlabel    #10981     
    switchlabel    #10982     
    switchlabel    #10983     
    switchlabel    #10984     
    switchlabel    #10985     
    switchlabel    #10986     
    switchlabel    #10987     
    switchlabel    #10988     
    switchlabel    #10976     
    switchlabel    #10989     
    switchlabel    #10976     
    switchlabel    #10976     
    switchlabel    #10990     
    switchlabel    #10976     
    switchlabel    #10991     
    switchlabel    #10992     
    switchlabel    #10993     
    switchlabel    #10976     
    switchlabel    #10994     
    switchlabel    #10995     
    switchlabel    #10976     
    switchlabel    #10996     
    switchlabel    #10997     
    switchlabel    #10998     
    switchlabel    #10976     
    switchlabel    #10999     
    switchlabel    #10976     
    switchlabel    #10976     
    switchlabel    #10976     
    switchlabel    #10976     
    switchlabel    #10979     
    switchlabel    #10976     
    switchlabel    #11000     
    switchlabel    #10982     
    switchlabel    #10983     
    switchlabel    #10984     
    switchlabel    #10985     
    switchlabel    #10986     
    switchlabel    #10987     
    switchlabel    #10988     
    switchlabel    #10976     
    switchlabel    #10989     
    switchlabel    #10976     
    switchlabel    #10976     
    switchlabel    #10990     
    switchlabel    #10976     
    switchlabel    #10991     
    switchlabel    #10992     
    switchlabel    #10993     
    switchlabel    #10976     
    switchlabel    #10994     
    switchlabel    #10995     
    switchlabel    #10976     
    switchlabel    #10996     
    switchlabel    #10997     
    switchlabel    #10998     
    switchlabel    #10976     
    switchlabel    #10999     
    switchlabel    #10976     
    switchlabel    #10976     
    switchlabel    #10976     
    switchlabel    #11001     
    endswitch                 
#10982: 
    push           2          i64 
    push           msysp.strtofmt.fmt u64 
    push           2          
    popptroff                 u8 1 0
    jump           #11002     
#10988: 
    push           16         i64 
    push           msysp.strtofmt.fmt u64 
    push           2          
    popptroff                 u8 1 0
    jump           #11002     
#10991: 
    push           8          i64 
    push           msysp.strtofmt.fmt u64 
    push           2          
    popptroff                 u8 1 0
    jump           #11002     
#10998: 
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    pop            msysp.strtofmt.c i64 
    push           msysp.strtofmt.c i64 
    jumpfalse      #11003     i64 
    push           msysp.strtofmt.c i64 
    switch         #11004     48 102
    opnd           #11005     
#11004: 
    switchlabel    #11006     
    switchlabel    #11006     
    switchlabel    #11006     
    switchlabel    #11006     
    switchlabel    #11006     
    switchlabel    #11006     
    switchlabel    #11006     
    switchlabel    #11006     
    switchlabel    #11006     
    switchlabel    #11006     
    switchlabel    #11005     
    switchlabel    #11005     
    switchlabel    #11005     
    switchlabel    #11005     
    switchlabel    #11005     
    switchlabel    #11005     
    switchlabel    #11005     
    switchlabel    #11007     
    switchlabel    #11007     
    switchlabel    #11007     
    switchlabel    #11007     
    switchlabel    #11007     
    switchlabel    #11007     
    switchlabel    #11005     
    switchlabel    #11005     
    switchlabel    #11005     
    switchlabel    #11005     
    switchlabel    #11005     
    switchlabel    #11005     
    switchlabel    #11005     
    switchlabel    #11005     
    switchlabel    #11005     
    switchlabel    #11005     
    switchlabel    #11005     
    switchlabel    #11005     
    switchlabel    #11005     
    switchlabel    #11005     
    switchlabel    #11005     
    switchlabel    #11005     
    switchlabel    #11005     
    switchlabel    #11005     
    switchlabel    #11005     
    switchlabel    #11005     
    switchlabel    #11005     
    switchlabel    #11005     
    switchlabel    #11005     
    switchlabel    #11005     
    switchlabel    #11005     
    switchlabel    #11005     
    switchlabel    #11008     
    switchlabel    #11008     
    switchlabel    #11008     
    switchlabel    #11008     
    switchlabel    #11008     
    switchlabel    #11008     
    endswitch                 
#11006: 
    push           msysp.strtofmt.c i64 
    push           48         i64 
    sub                       i64 
    pop            msysp.strtofmt.c i64 
    jump           #11009     
#11007: 
    push           msysp.strtofmt.c i64 
    push           65         i64 
    sub                       i64 
    push           10         i64 
    add                       i64 
    pop            msysp.strtofmt.c i64 
    jump           #11009     
#11008: 
    push           msysp.strtofmt.c i64 
    push           97         i64 
    sub                       i64 
    push           10         i64 
    add                       i64 
    pop            msysp.strtofmt.c i64 
    jump           #11009     
#11005: 
    push           10         i64 
    pop            msysp.strtofmt.c i64 
#11009: 
    push           msysp.strtofmt.c i64 
    push           msysp.strtofmt.fmt u64 
    push           2          
    popptroff                 u8 1 0
    push           &msysp.strtofmt.s 
    incr                      u64 1
#11003: 
    jump           #11002     
#10993: 
    push           34         u64 
    push           msysp.strtofmt.fmt u64 
    push           3          
    popptroff                 u8 1 0
    jump           #11002     
#11001: 
    push           126        u64 
    push           msysp.strtofmt.fmt u64 
    push           3          
    popptroff                 u8 1 0
    jump           #11002     
#10989: 
    setargs                   1 0
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    callfn         &toupper   i32 
    push           msysp.strtofmt.fmt u64 
    push           9          
    popptroff                 u8 1 0
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    jumpfalse      #11010     u64 
    push           &msysp.strtofmt.s 
    incr                      u64 1
#11010: 
    jump           #11002     
#10981: 
    push           65         u64 
    push           msysp.strtofmt.fmt u64 
    push           8          
    popptroff                 u8 1 0
    jump           #11002     
#11000: 
    push           97         u64 
    push           msysp.strtofmt.fmt u64 
    push           8          
    popptroff                 u8 1 0
    jump           #11002     
#10999: 
    push           48         u64 
    push           msysp.strtofmt.fmt u64 
    push           4          
    popptroff                 u8 1 0
    jump           #11002     
#10994: 
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    push           msysp.strtofmt.fmt u64 
    push           7          
    popptroff                 u8 1 0
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    jumpfalse      #11011     u64 
    push           &msysp.strtofmt.s 
    incr                      u64 1
#11011: 
    jump           #11002     
#10992: 
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    push           msysp.strtofmt.fmt u64 
    push           4          
    popptroff                 u8 1 0
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    jumpfalse      #11012     u64 
    push           &msysp.strtofmt.s 
    incr                      u64 1
#11012: 
    jump           #11002     
#10995: 
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    push           msysp.strtofmt.fmt u64 
    push           10         
    popptroff                 u8 1 0
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    jumpfalse      #11013     u64 
    push           &msysp.strtofmt.s 
    incr                      u64 1
#11013: 
    jump           #11002     
#10997: 
    push           87         u64 
    push           msysp.strtofmt.fmt u64 
    push           11         
    popptroff                 u8 1 0
    jump           #11002     
#10985: 
    push           101        u64 
    push           msysp.strtofmt.fmt u64 
    push           5          
    popptroff                 u8 1 0
    jump           #11002     
#10986: 
    push           102        u64 
    push           msysp.strtofmt.fmt u64 
    push           5          
    popptroff                 u8 1 0
    jump           #11002     
#10987: 
    push           103        u64 
    push           msysp.strtofmt.fmt u64 
    push           5          
    popptroff                 u8 1 0
    jump           #11002     
#10980: 
    push           1          i64 
    pop            msysp.strtofmt.wset u8 
    jump           #11002     
#10979: 
    push           msysp.strtofmt.c u64 
    push           msysp.strtofmt.fmt u64 
    push           7          
    popptroff                 u8 1 0
    jump           #11002     
#10978: 
    push           43         u64 
    push           msysp.strtofmt.fmt u64 
    push           6          
    popptroff                 u8 1 0
    jump           #11002     
#10984: 
    push           68         u64 
    push           msysp.strtofmt.fmt u64 
    push           12         
    popptroff                 u8 1 0
    jump           #11002     
#10983: 
    push           67         u64 
    push           msysp.strtofmt.fmt u64 
    push           12         
    popptroff                 u8 1 0
    jump           #11002     
#10990: 
    push           77         u64 
    push           msysp.strtofmt.fmt u64 
    push           13         
    popptroff                 u8 1 0
    jump           #11002     
#10996: 
    push           86         u64 
    push           msysp.strtofmt.fmt u64 
    push           14         
    popptroff                 u8 1 0
    jump           #11002     
#10977: 
    push           msysp.fmtparam i64 
    pop            msysp.strtofmt.n i64 
    jump           #11014     
    jump           #11002     
#10976: 
    push           msysp.strtofmt.c i64 
    push           48         i64 
    jumplt         #11015     i64 
    push           msysp.strtofmt.c i64 
    push           57         i64 
    jumpgt         #11015     i64 
    push           msysp.strtofmt.c i64 
    push           48         i64 
    sub                       i64 
    pop            msysp.strtofmt.n i64 
#11016: 
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    pop            msysp.strtofmt.c i64 
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    push           0          i64 
    jumpne         #11017     i64 
    jump           #11018     
#11017: 
    push           msysp.strtofmt.c i64 
    push           48         i64 
    jumplt         #11019     i64 
    push           msysp.strtofmt.c i64 
    push           57         i64 
    jumpgt         #11019     i64 
    push           &msysp.strtofmt.s 
    incr                      u64 1
    push           msysp.strtofmt.n i64 
    push           10         i64 
    mul                       i64 
    push           msysp.strtofmt.c i64 
    add                       i64 
    push           48         i64 
    sub                       i64 
    pop            msysp.strtofmt.n i64 
    jump           #11020     
#11019: 
    jump           #11018     
#11020: 
    jump           #11016     
#11018: 
!gotwidth::
#11014: 
    push           msysp.strtofmt.wset u8 
    jumptrue       #11021     i64 
    push           msysp.strtofmt.n i64 
    push           msysp.strtofmt.fmt u64 
    push           0          
    popptroff                 u8 1 0
    push           1          i64 
    pop            msysp.strtofmt.wset u8 
    jump           #11022     
#11021: 
    push           msysp.strtofmt.n i64 
    push           msysp.strtofmt.fmt u64 
    push           1          
    popptroff                 i8 1 0
#11022: 
#11015: 
#11002: 
#10973: 
    push           msysp.strtofmt.s u64 
    pushptr                   u8 
    jumptrue       #10974     u64 
#11023: 
#10971: 
    retproc                   
End


Proc msysp.domultichar: i64
    param          msysp.domultichar.p u64 
    param          msysp.domultichar.n i64 
    param          msysp.domultichar.dest u64 
    param          msysp.domultichar.fmt u64 
    local          msysp.domultichar.str block:20 
    local          msysp.domultichar.q u64 
    local          msysp.domultichar.i i64 
    local          msysp.domultichar.nchars i64 
    local          msysp.domultichar.av_1 i64 
    procentry                 
    push           &msysp.domultichar.str 
    pop            msysp.domultichar.q u64 
    push           msysp.domultichar.n i64 
    pop            msysp.domultichar.nchars i64 
#11025: 
    push           msysp.domultichar.n i64 
    pop            msysp.domultichar.av_1 i64 
    push           msysp.domultichar.av_1 i64 
    push           0          i64 
    jumple         #11026     i64 
#11027: 
    push           msysp.domultichar.p u64 
    pushptr                   u8 
    push           0          i64 
    jumpne         #11028     i64 
    jump           #11026     
#11028: 
    push           msysp.domultichar.p u64 
    pushptr                   u8 
    push           msysp.domultichar.q u64 
    popptr                    u8 
    push           &msysp.domultichar.q 
    incr                      u64 1
    push           &msysp.domultichar.p 
    incr                      u64 1
#11029: 
    to             #11027     
    opnd           msysp.domultichar.av_1 
#11026: 
    push           0          u64 
    push           msysp.domultichar.q u64 
    popptr                    u8 
    setargs                   4 0
    push           msysp.domultichar.fmt u64 
    setargs                   1 0
    push           &msysp.domultichar.str 
    callfn         &strlen    i64 
    push           msysp.domultichar.dest u64 
    push           &msysp.domultichar.str 
    callfn         &msysp.expandstr i64 
    setret                    i64 
    jump           #11030     
#11030: 
    retfn                     i64 
End


Proc msysp.expandstr: i64
    param          msysp.expandstr.s u64 
    param          msysp.expandstr.t u64 
    param          msysp.expandstr.n i64 
    param          msysp.expandstr.fmt u64 
    local          msysp.expandstr.i i64 
    local          msysp.expandstr.w i64 
    local          msysp.expandstr.m i64 
    local          msysp.expandstr.av_1 i64 
    local          msysp.expandstr.av_2 i64 
    local          msysp.expandstr.av_3 i64 
    local          msysp.expandstr.av_4 i64 
    local          msysp.expandstr.av_5 i64 
    procentry                 
    push           msysp.expandstr.fmt u64 
    pushptr                   u8 
    pop            msysp.expandstr.w i64 
    push           msysp.expandstr.w i64 
    push           0          i64 
    jumpeq         #11032     i64 
    push           msysp.expandstr.w i64 
    push           msysp.expandstr.n i64 
    jumpgt         #11033     i64 
#11032: 
    setargs                   3 0
    push           msysp.expandstr.n u64 
    push           msysp.expandstr.s u64 
    push           msysp.expandstr.t u64 
    callproc       &strncpy   
    push           0          u64 
    push           msysp.expandstr.t u64 
    push           msysp.expandstr.n i64 
    popptroff                 u8 1 0
    push           msysp.expandstr.n i64 
    setret                    i64 
    jump           #11034     
#11033: 
    push           msysp.expandstr.fmt u64 
    push           9          
    pushptroff                u8 1 0
    push           76         u64 
    jumpne         #11035     u64 
    setargs                   3 0
    push           msysp.expandstr.n u64 
    push           msysp.expandstr.s u64 
    push           msysp.expandstr.t u64 
    callproc       &strncpy   
    push           &msysp.expandstr.t 
    push           msysp.expandstr.n i64 
    addrefoffto               u64 1 0
#11036: 
    push           1          i64 
    pop            msysp.expandstr.i i64 
    push           msysp.expandstr.w i64 
    push           msysp.expandstr.n i64 
    sub                       i64 
    pop            msysp.expandstr.av_1 i64 
    push           msysp.expandstr.av_1 i64 
    push           1          i64 
    jumplt         #11037     i64 
#11038: 
    push           msysp.expandstr.fmt u64 
    push           4          
    pushptroff                u8 1 0
    push           msysp.expandstr.t u64 
    popptr                    u8 
    push           &msysp.expandstr.t 
    incr                      u64 1
#11039: 
    forup          #11038     i64 1
    opnd           msysp.expandstr.i 
    opnd           msysp.expandstr.av_1 
#11037: 
    push           0          u64 
    push           msysp.expandstr.t u64 
    popptr                    u8 
    jump           #11040     
#11035: 
    push           msysp.expandstr.fmt u64 
    push           9          
    pushptroff                u8 1 0
    push           82         u64 
    jumpne         #11041     u64 
    push           msysp.expandstr.fmt u64 
    push           4          
    pushptroff                u8 1 0
    push           48         u64 
    jumpne         #11042     u64 
    push           msysp.expandstr.fmt u64 
    push           2          
    pushptroff                u8 1 0
    jumpfalse      #11042     i64 
    push           msysp.expandstr.s u64 
    pushptr                   u8 
    push           45         u64 
    jumpeq         #11043     u64 
    push           msysp.expandstr.s u64 
    pushptr                   u8 
    push           43         u64 
    jumpne         #11042     u64 
#11043: 
    push           msysp.expandstr.s u64 
    pushptr                   u8 
    push           msysp.expandstr.t u64 
    popptr                    u8 
    push           &msysp.expandstr.t 
    incr                      u64 1
#11044: 
    push           msysp.expandstr.w i64 
    push           msysp.expandstr.n i64 
    sub                       i64 
    pop            msysp.expandstr.av_2 i64 
    push           msysp.expandstr.av_2 i64 
    push           0          i64 
    jumple         #11045     i64 
#11046: 
    push           msysp.expandstr.fmt u64 
    push           4          
    pushptroff                u8 1 0
    push           msysp.expandstr.t u64 
    popptr                    u8 
    push           &msysp.expandstr.t 
    incr                      u64 1
#11047: 
    to             #11046     
    opnd           msysp.expandstr.av_2 
#11045: 
    setargs                   3 0
    push           msysp.expandstr.n i64 
    push           1          i64 
    sub                       u64 
    push           msysp.expandstr.s u64 
    push           1          i64 
    addrefoff                 u64 1 0
    push           msysp.expandstr.t u64 
    callproc       &strncpy   
    push           0          u64 
    push           msysp.expandstr.t u64 
    push           msysp.expandstr.n i64 
    popptroff                 u8 1 -1
    jump           #11048     
#11042: 
#11049: 
    push           msysp.expandstr.w i64 
    push           msysp.expandstr.n i64 
    sub                       i64 
    pop            msysp.expandstr.av_3 i64 
    push           msysp.expandstr.av_3 i64 
    push           0          i64 
    jumple         #11050     i64 
#11051: 
    push           msysp.expandstr.fmt u64 
    push           4          
    pushptroff                u8 1 0
    push           msysp.expandstr.t u64 
    popptr                    u8 
    push           &msysp.expandstr.t 
    incr                      u64 1
#11052: 
    to             #11051     
    opnd           msysp.expandstr.av_3 
#11050: 
    setargs                   3 0
    push           msysp.expandstr.n u64 
    push           msysp.expandstr.s u64 
    push           msysp.expandstr.t u64 
    callproc       &strncpy   
    push           0          u64 
    push           msysp.expandstr.t u64 
    push           msysp.expandstr.n i64 
    popptroff                 u8 1 0
#11048: 
    jump           #11040     
#11041: 
    push           msysp.expandstr.w i64 
    push           msysp.expandstr.n i64 
    sub                       i64 
    push           1          i64 
    add                       i64 
    push           2          i64 
    idiv                      i64 
    pop            msysp.expandstr.m i64 
#11053: 
    push           msysp.expandstr.m i64 
    pop            msysp.expandstr.av_4 i64 
    push           msysp.expandstr.av_4 i64 
    push           0          i64 
    jumple         #11054     i64 
#11055: 
    push           msysp.expandstr.fmt u64 
    push           4          
    pushptroff                u8 1 0
    push           msysp.expandstr.t u64 
    popptr                    u8 
    push           &msysp.expandstr.t 
    incr                      u64 1
#11056: 
    to             #11055     
    opnd           msysp.expandstr.av_4 
#11054: 
    setargs                   3 0
    push           msysp.expandstr.n u64 
    push           msysp.expandstr.s u64 
    push           msysp.expandstr.t u64 
    callproc       &strncpy   
    push           &msysp.expandstr.t 
    push           msysp.expandstr.n i64 
    addrefoffto               u64 1 0
#11057: 
    push           msysp.expandstr.w i64 
    push           msysp.expandstr.n i64 
    sub                       i64 
    push           msysp.expandstr.m i64 
    sub                       i64 
    pop            msysp.expandstr.av_5 i64 
    push           msysp.expandstr.av_5 i64 
    push           0          i64 
    jumple         #11058     i64 
#11059: 
    push           msysp.expandstr.fmt u64 
    push           4          
    pushptroff                u8 1 0
    push           msysp.expandstr.t u64 
    popptr                    u8 
    push           &msysp.expandstr.t 
    incr                      u64 1
#11060: 
    to             #11059     
    opnd           msysp.expandstr.av_5 
#11058: 
    push           0          u64 
    push           msysp.expandstr.t u64 
    popptr                    u8 
#11040: 
    push           msysp.expandstr.w i64 
    setret                    i64 
    jump           #11034     
#11034: 
    retfn                     i64 
End


Proc msysp.u64tostr: i64
    param          msysp.u64tostr.aa u64 
    param          msysp.u64tostr.s u64 
    param          msysp.u64tostr.base u64 
    param          msysp.u64tostr.sep i64 
    local          msysp.u64tostr.t block:360 
    local          msysp.u64tostr.dd u64 
    local          msysp.u64tostr.i i64 
    local          msysp.u64tostr.j i64 
    local          msysp.u64tostr.k i64 
    local          msysp.u64tostr.g i64 
    local          msysp.u64tostr.cc i64 
    local          msysp.u64tostr.dummy i64 
    local          msysp.u64tostr.s0 u64 
    procentry                 
    push           0          i64 
    pop            msysp.u64tostr.i i64 
    push           0          i64 
    pop            msysp.u64tostr.k i64 
    startmult                 
    push           msysp.u64tostr.base i64 
    push           10         i64 
    jumpne         #11062     i64 
    push           3          i64 
    resetmult                 
    jump           #11063     
#11062: 
    push           4          i64 
    endmult                   
#11063: 
    pop            msysp.u64tostr.g i64 
#11064: 
    push           msysp.u64tostr.aa u64 
    push           msysp.u64tostr.base u64 
    irem                      u64 
    pop            msysp.u64tostr.dd u64 
    push           msysp.u64tostr.aa u64 
    push           msysp.u64tostr.base u64 
    idiv                      u64 
    pop            msysp.u64tostr.aa u64 
    push           &msysp.digits 
    push           msysp.u64tostr.dd i64 
    pushptroff                u8 1 0
    push           &msysp.u64tostr.t 
    push           &msysp.u64tostr.i 
    incrload                  i64 1
    popptroff                 u8 1 0
    push           &msysp.u64tostr.k 
    incr                      i64 1
    push           msysp.u64tostr.sep i64 
    jumpfalse      #11065     i64 
    push           msysp.u64tostr.aa i64 
    push           0          i64 
    jumpeq         #11065     i64 
    push           msysp.u64tostr.k i64 
    push           msysp.u64tostr.g i64 
    jumpne         #11065     i64 
    push           msysp.u64tostr.sep u64 
    push           &msysp.u64tostr.t 
    push           &msysp.u64tostr.i 
    incrload                  i64 1
    popptroff                 u8 1 0
    push           0          i64 
    pop            msysp.u64tostr.k i64 
#11065: 
#11066: 
    push           msysp.u64tostr.aa i64 
    push           0          i64 
    jumpne         #11064     i64 
#11067: 
    push           msysp.u64tostr.i i64 
    pop            msysp.u64tostr.j i64 
    push           msysp.u64tostr.s u64 
    pop            msysp.u64tostr.s0 u64 
    jump           #11068     
#11069: 
    push           &msysp.u64tostr.t 
    push           &msysp.u64tostr.i 
    loaddecr                  i64 1
    pushptroff                u8 1 0
    push           msysp.u64tostr.s u64 
    popptr                    u8 
    push           &msysp.u64tostr.s 
    incr                      u64 1
#11068: 
    push           msysp.u64tostr.i i64 
    jumptrue       #11069     i64 
#11070: 
    push           0          u64 
    push           msysp.u64tostr.s u64 
    popptr                    u8 
    push           msysp.u64tostr.j i64 
    setret                    i64 
    jump           #11071     
#11071: 
    retfn                     i64 
End


Proc msysp.u128tostr: i64
    param          msysp.u128tostr.aa u128 
    param          msysp.u128tostr.s u64 
    param          msysp.u128tostr.base u64 
    param          msysp.u128tostr.sep i64 
    local          msysp.u128tostr.t block:160 
    local          msysp.u128tostr.dd u64 
    local          msysp.u128tostr.i i64 
    local          msysp.u128tostr.j i64 
    local          msysp.u128tostr.k i64 
    local          msysp.u128tostr.g i64 
    local          msysp.u128tostr.dummy i64 
    local          msysp.u128tostr.s0 u64 
    procentry                 
    push           0          i64 
    pop            msysp.u128tostr.i i64 
    push           0          i64 
    pop            msysp.u128tostr.k i64 
    startmult                 
    push           msysp.u128tostr.base i64 
    push           10         i64 
    jumpne         #11073     i64 
    push           3          i64 
    resetmult                 
    jump           #11074     
#11073: 
    push           4          i64 
    endmult                   
#11074: 
    pop            msysp.u128tostr.g i64 
#11075: 
    setargs                   4 0
    push           &msysp.u128tostr.dd 
    push           msysp.u128tostr.base u64 
    push           msysp.u128tostr.aa u128 
    callfn         &msysp.xdivrem128 u128 
    pop            msysp.u128tostr.aa u128 
    push           &msysp.digits 
    push           msysp.u128tostr.dd i64 
    pushptroff                u8 1 0
    push           &msysp.u128tostr.t 
    push           &msysp.u128tostr.i 
    incrload                  i64 1
    popptroff                 u8 1 0
    push           &msysp.u128tostr.k 
    incr                      i64 1
    push           msysp.u128tostr.sep i64 
    jumpfalse      #11076     i64 
    push           msysp.u128tostr.aa u128 
    push           0          i64 
    widenw                    u128 i64 
    jumpeq         #11076     u128 
    push           msysp.u128tostr.k i64 
    push           msysp.u128tostr.g i64 
    jumpne         #11076     i64 
    push           msysp.u128tostr.sep u64 
    push           &msysp.u128tostr.t 
    push           &msysp.u128tostr.i 
    incrload                  i64 1
    popptroff                 u8 1 0
    push           0          i64 
    pop            msysp.u128tostr.k i64 
#11076: 
#11077: 
    push           msysp.u128tostr.aa u128 
    push           0          i64 
    widenw                    u128 i64 
    jumpne         #11075     u128 
#11078: 
    push           msysp.u128tostr.i i64 
    pop            msysp.u128tostr.j i64 
    push           msysp.u128tostr.s u64 
    pop            msysp.u128tostr.s0 u64 
    jump           #11079     
#11080: 
    push           &msysp.u128tostr.t 
    push           &msysp.u128tostr.i 
    loaddecr                  i64 1
    pushptroff                u8 1 0
    push           msysp.u128tostr.s u64 
    popptr                    u8 
    push           &msysp.u128tostr.s 
    incr                      u64 1
#11079: 
    push           msysp.u128tostr.i i64 
    jumptrue       #11080     i64 
#11081: 
    push           0          u64 
    push           msysp.u128tostr.s u64 
    popptr                    u8 
    push           msysp.u128tostr.j i64 
    setret                    i64 
    jump           #11082     
#11082: 
    retfn                     i64 
End


Proc msysp.xdivrem128: u128
    param          msysp.xdivrem128.a u128 
    param          msysp.xdivrem128.b u64 
    param          msysp.xdivrem128.remainder u64 
    local          msysp.xdivrem128.d u128 
    local          msysp.xdivrem128.e u128 
    local          msysp.xdivrem128.r u128 
    local          msysp.xdivrem128.rlow u64 
    procentry                 
    push           msysp.xdivrem128.a u128 
    push           msysp.xdivrem128.b u64 
    widenw                    u128 u64 
    idiv                      u128 
    pop            msysp.xdivrem128.d u128 
    push           msysp.xdivrem128.a u128 
    push           msysp.xdivrem128.d u128 
    push           msysp.xdivrem128.b u64 
    widenw                    u128 u64 
    mul                       u128 
    sub                       u128 
    pop            msysp.xdivrem128.r u128 
    push           msysp.xdivrem128.r u128 
    softtruncw                u64 u128 
    pop            msysp.xdivrem128.rlow u64 
    push           msysp.xdivrem128.d u128 
    setretmult                u128 2
    jump           #11084     
#11084: 
    retfn                     u128 
End


Proc msysp.i64tostrfmt: i64
    param          msysp.i64tostrfmt.aa i64 
    param          msysp.i64tostrfmt.s u64 
    param          msysp.i64tostrfmt.fmt u64 
    local          msysp.i64tostrfmt.str block:360 
    local          msysp.i64tostrfmt.i i64 
    local          msysp.i64tostrfmt.j i64 
    local          msysp.i64tostrfmt.k i64 
    local          msysp.i64tostrfmt.n i64 
    local          msysp.i64tostrfmt.w i64 
    local          msysp.i64tostrfmt.usigned i64 
    procentry                 
    push           0          i64 
    pop            msysp.i64tostrfmt.usigned i64 
    push           msysp.i64tostrfmt.fmt u64 
    push           11         
    pushptroff                u8 1 0
    jumpfalse      #11086     u64 
    push           1          i64 
    pop            msysp.i64tostrfmt.usigned i64 
#11086: 
    push           msysp.i64tostrfmt.aa i64 
    push           -9223372036854775808 i64 
    jumpne         #11087     i64 
    push           msysp.i64tostrfmt.usigned i64 
    jumptrue       #11087     i64 
    push           45         u64 
    push           &msysp.i64tostrfmt.str 
    push           0          i64 
    popptroff                 u8 1 0
    setargs                   3 0
    push           msysp.i64tostrfmt.fmt u64 
    push           7          
    pushptroff                u8 1 0
    push           msysp.i64tostrfmt.fmt u64 
    push           2          
    pushptroff                u8 1 0
    push           &msysp.i64tostrfmt.str 
    push           1          
    addrefoff                 u8 1 0
    callfn         &msysp.i64mintostr i64 
    push           1          i64 
    add                       i64 
    pop            msysp.i64tostrfmt.n i64 
    jump           #11088     
#11087: 
    push           msysp.i64tostrfmt.usigned i64 
    jumptrue       #11089     i64 
    push           msysp.i64tostrfmt.aa i64 
    push           0          i64 
    jumplt         #11090     i64 
#11089: 
    push           msysp.i64tostrfmt.fmt u64 
    push           6          
    pushptroff                u8 1 0
    jumpfalse      #11091     u64 
#11090: 
    push           msysp.i64tostrfmt.aa i64 
    push           0          i64 
    jumpge         #11092     i64 
    push           msysp.i64tostrfmt.aa i64 
    neg                       i64 
    pop            msysp.i64tostrfmt.aa i64 
    push           45         u64 
    push           &msysp.i64tostrfmt.str 
    push           0          i64 
    popptroff                 u8 1 0
    jump           #11093     
#11092: 
    push           43         u64 
    push           &msysp.i64tostrfmt.str 
    push           0          i64 
    popptroff                 u8 1 0
#11093: 
    setargs                   4 0
    push           msysp.i64tostrfmt.fmt u64 
    push           7          
    pushptroff                u8 1 0
    push           msysp.i64tostrfmt.fmt u64 
    push           2          
    pushptroff                u8 1 0
    push           &msysp.i64tostrfmt.str 
    push           1          
    addrefoff                 u8 1 0
    push           msysp.i64tostrfmt.aa u64 
    callfn         &msysp.u64tostr i64 
    push           1          i64 
    add                       i64 
    pop            msysp.i64tostrfmt.n i64 
    jump           #11094     
#11091: 
    setargs                   4 0
    push           msysp.i64tostrfmt.fmt u64 
    push           7          
    pushptroff                u8 1 0
    push           msysp.i64tostrfmt.fmt u64 
    push           2          
    pushptroff                u8 1 0
    push           &msysp.i64tostrfmt.str 
    push           msysp.i64tostrfmt.aa u64 
    callfn         &msysp.u64tostr i64 
    pop            msysp.i64tostrfmt.n i64 
#11094: 
#11088: 
    push           msysp.i64tostrfmt.fmt u64 
    push           10         
    pushptroff                u8 1 0
    jumpfalse      #11095     u64 
    push           msysp.i64tostrfmt.fmt u64 
    push           10         
    pushptroff                u8 1 0
    push           &msysp.i64tostrfmt.str 
    push           msysp.i64tostrfmt.n i64 
    popptroff                 u8 1 0
    push           0          u64 
    push           &msysp.i64tostrfmt.str 
    push           &msysp.i64tostrfmt.n 
    incrload                  i64 1
    popptroff                 u8 1 0
#11095: 
    push           msysp.i64tostrfmt.fmt u64 
    push           2          
    pushptroff                u8 1 0
    push           10         i64 
    jumpgt         #11096     i64 
    push           msysp.i64tostrfmt.fmt u64 
    push           10         
    pushptroff                u8 1 0
    jumpfalse      #11097     u64 
#11096: 
    push           msysp.i64tostrfmt.fmt u64 
    push           8          
    pushptroff                u8 1 0
    push           97         u64 
    jumpne         #11097     u64 
    setargs                   1 0
    push           &msysp.i64tostrfmt.str 
    callproc       &mlibp.convlcstring 
#11097: 
    setargs                   4 0
    push           msysp.i64tostrfmt.fmt u64 
    push           msysp.i64tostrfmt.n i64 
    push           msysp.i64tostrfmt.s u64 
    push           &msysp.i64tostrfmt.str 
    callfn         &msysp.expandstr i64 
    setret                    i64 
    jump           #11098     
#11098: 
    retfn                     i64 
End


Proc msysp.u64tostrfmt: i64
    param          msysp.u64tostrfmt.aa i64 
    param          msysp.u64tostrfmt.s u64 
    param          msysp.u64tostrfmt.fmt u64 
    local          msysp.u64tostrfmt.str block:360 
    local          msysp.u64tostrfmt.i i64 
    local          msysp.u64tostrfmt.j i64 
    local          msysp.u64tostrfmt.k i64 
    local          msysp.u64tostrfmt.n i64 
    local          msysp.u64tostrfmt.w i64 
    procentry                 
    setargs                   4 0
    push           msysp.u64tostrfmt.fmt u64 
    push           7          
    pushptroff                u8 1 0
    push           msysp.u64tostrfmt.fmt u64 
    push           2          
    pushptroff                u8 1 0
    push           &msysp.u64tostrfmt.str 
    push           msysp.u64tostrfmt.aa u64 
    callfn         &msysp.u64tostr i64 
    pop            msysp.u64tostrfmt.n i64 
    push           msysp.u64tostrfmt.fmt u64 
    push           10         
    pushptroff                u8 1 0
    jumpfalse      #11100     u64 
    push           msysp.u64tostrfmt.fmt u64 
    push           10         
    pushptroff                u8 1 0
    push           &msysp.u64tostrfmt.str 
    push           msysp.u64tostrfmt.n i64 
    popptroff                 u8 1 0
    push           0          u64 
    push           &msysp.u64tostrfmt.str 
    push           &msysp.u64tostrfmt.n 
    incrload                  i64 1
    popptroff                 u8 1 0
#11100: 
    push           msysp.u64tostrfmt.fmt u64 
    push           2          
    pushptroff                u8 1 0
    push           10         i64 
    jumpgt         #11101     i64 
    push           msysp.u64tostrfmt.fmt u64 
    push           10         
    pushptroff                u8 1 0
    jumpfalse      #11102     u64 
    push           msysp.u64tostrfmt.fmt u64 
    push           8          
    pushptroff                u8 1 0
    push           97         u64 
    jumpne         #11102     u64 
#11101: 
#11102: 
    setargs                   4 0
    push           msysp.u64tostrfmt.fmt u64 
    push           msysp.u64tostrfmt.n i64 
    push           msysp.u64tostrfmt.s u64 
    push           &msysp.u64tostrfmt.str 
    callfn         &msysp.expandstr i64 
    setret                    i64 
    jump           #11103     
#11103: 
    retfn                     i64 
End


Proc msysp.u128tostrfmt: i64
    param          msysp.u128tostrfmt.aa i128 
    param          msysp.u128tostrfmt.s u64 
    param          msysp.u128tostrfmt.fmt u64 
    local          msysp.u128tostrfmt.str block:360 
    local          msysp.u128tostrfmt.i i64 
    local          msysp.u128tostrfmt.j i64 
    local          msysp.u128tostrfmt.k i64 
    local          msysp.u128tostrfmt.n i64 
    local          msysp.u128tostrfmt.w i64 
    procentry                 
    setargs                   5 0
    push           msysp.u128tostrfmt.fmt u64 
    push           7          
    pushptroff                u8 1 0
    push           msysp.u128tostrfmt.fmt u64 
    push           2          
    pushptroff                u8 1 0
    push           &msysp.u128tostrfmt.str 
    push           msysp.u128tostrfmt.aa u128 
    callfn         &msysp.u128tostr i64 
    pop            msysp.u128tostrfmt.n i64 
    push           msysp.u128tostrfmt.fmt u64 
    push           10         
    pushptroff                u8 1 0
    jumpfalse      #11105     u64 
    push           msysp.u128tostrfmt.fmt u64 
    push           10         
    pushptroff                u8 1 0
    push           &msysp.u128tostrfmt.str 
    push           msysp.u128tostrfmt.n i64 
    popptroff                 u8 1 0
    push           0          u64 
    push           &msysp.u128tostrfmt.str 
    push           &msysp.u128tostrfmt.n 
    incrload                  i64 1
    popptroff                 u8 1 0
#11105: 
    push           msysp.u128tostrfmt.fmt u64 
    push           2          
    pushptroff                u8 1 0
    push           10         i64 
    jumpgt         #11106     i64 
    push           msysp.u128tostrfmt.fmt u64 
    push           10         
    pushptroff                u8 1 0
    jumpfalse      #11107     u64 
    push           msysp.u128tostrfmt.fmt u64 
    push           8          
    pushptroff                u8 1 0
    push           97         u64 
    jumpne         #11107     u64 
#11106: 
    setargs                   1 0
    push           &msysp.u128tostrfmt.str 
    callproc       &mlibp.convlcstring 
#11107: 
    setargs                   4 0
    push           msysp.u128tostrfmt.fmt u64 
    push           msysp.u128tostrfmt.n i64 
    push           msysp.u128tostrfmt.s u64 
    push           &msysp.u128tostrfmt.str 
    callfn         &msysp.expandstr i64 
    setret                    i64 
    jump           #11108     
#11108: 
    retfn                     i64 
End


Proc msysp.i64mintostr: i64
    param          msysp.i64mintostr.s u64 
    param          msysp.i64mintostr.base i64 
    param          msysp.i64mintostr.sep i64 
    local          msysp.i64mintostr.t block:360 
    local          msysp.i64mintostr.i i64 
    local          msysp.i64mintostr.j i64 
    local          msysp.i64mintostr.k i64 
    local          msysp.i64mintostr.g i64 
    local          msysp.i64mintostr.neg i64 
    procentry                 
    push           msysp.i64mintostr.base i64 
    switch         #11110     2 16
    opnd           #11111     
#11110: 
    switchlabel    #11112     
    switchlabel    #11111     
    switchlabel    #11111     
    switchlabel    #11111     
    switchlabel    #11111     
    switchlabel    #11111     
    switchlabel    #11111     
    switchlabel    #11111     
    switchlabel    #11113     
    switchlabel    #11111     
    switchlabel    #11111     
    switchlabel    #11111     
    switchlabel    #11111     
    switchlabel    #11111     
    switchlabel    #11114     
    endswitch                 
#11113: 
    setargs                   2 0
    push           "9223372036854775808" u64 
    push           &msysp.i64mintostr.t 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcpy    
    push           3          i64 
    pop            msysp.i64mintostr.j i64 
    jump           #11115     
#11114: 
    setargs                   2 0
    push           "8000000000000000" u64 
    push           &msysp.i64mintostr.t 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcpy    
    push           1          i64 
    pop            msysp.i64mintostr.j i64 
    jump           #11115     
#11112: 
    setargs                   2 0
    push           "1000000000000000000000000000000000000000000000000000000000000000" u64 
    push           &msysp.i64mintostr.t 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcpy    
    push           7          i64 
    pop            msysp.i64mintostr.j i64 
    jump           #11115     
#11111: 
    setargs                   2 0
    push           "<mindint>" u64 
    push           &msysp.i64mintostr.t 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcpy    
#11115: 
    setargs                   1 0
    push           &msysp.i64mintostr.t 
    push           0          
    addrefoff                 u8 1 0
    callfn         &strlen    i64 
    pop            msysp.i64mintostr.i i64 
    push           &msysp.i64mintostr.s 
    push           msysp.i64mintostr.i i64 
    addrefoffto               u64 1 0
    push           msysp.i64mintostr.sep i64 
    jumpfalse      #11116     i64 
    push           &msysp.i64mintostr.s 
    push           msysp.i64mintostr.j i64 
    addrefoffto               u64 1 0
#11116: 
    push           0          u64 
    push           msysp.i64mintostr.s u64 
    popptr                    u8 
    push           0          i64 
    pop            msysp.i64mintostr.k i64 
    startmult                 
    push           msysp.i64mintostr.base i64 
    push           10         i64 
    jumpne         #11117     i64 
    push           3          i64 
    resetmult                 
    jump           #11118     
#11117: 
    push           4          i64 
    endmult                   
#11118: 
    pop            msysp.i64mintostr.g i64 
    jump           #11119     
#11120: 
    push           &msysp.i64mintostr.s 
    decr                      u64 1
    push           &msysp.i64mintostr.t 
    push           &msysp.i64mintostr.i 
    loaddecr                  i64 1
    pushptroff                u8 1 -1
    push           msysp.i64mintostr.s u64 
    popptr                    u8 
    push           msysp.i64mintostr.sep i64 
    jumpfalse      #11121     i64 
    push           msysp.i64mintostr.i i64 
    jumpfalse      #11121     i64 
    push           &msysp.i64mintostr.k 
    incrload                  i64 1
    push           msysp.i64mintostr.g i64 
    jumpne         #11121     i64 
    push           &msysp.i64mintostr.s 
    decr                      u64 1
    push           msysp.i64mintostr.sep u64 
    push           msysp.i64mintostr.s u64 
    popptr                    u8 
    push           0          i64 
    pop            msysp.i64mintostr.k i64 
#11121: 
#11119: 
    push           msysp.i64mintostr.i i64 
    jumptrue       #11120     i64 
#11122: 
    setargs                   1 0
    push           msysp.i64mintostr.s u64 
    callfn         &strlen    i64 
    setret                    i64 
    jump           #11123     
#11123: 
    retfn                     i64 
End


Proc msysp.strtostrfmt: i64
    param          msysp.strtostrfmt.s u64 
    param          msysp.strtostrfmt.t u64 
    param          msysp.strtostrfmt.n i64 
    param          msysp.strtostrfmt.fmt u64 
    local          msysp.strtostrfmt.u u64 
    local          msysp.strtostrfmt.v u64 
    local          msysp.strtostrfmt.str block:256 
    local          msysp.strtostrfmt.w i64 
    local          msysp.strtostrfmt.nheap i64 
    procentry                 
    push           0          i64 
    pop            msysp.strtostrfmt.nheap i64 
    push           msysp.strtostrfmt.fmt u64 
    push           3          
    pushptroff                u8 1 0
    jumptrue       #11125     u64 
    push           msysp.strtostrfmt.fmt u64 
    push           8          
    pushptroff                u8 1 0
    jumpfalse      #11126     u64 
#11125: 
    push           msysp.strtostrfmt.n i64 
    push           256        i64 
    jumpge         #11127     i64 
    push           &msysp.strtostrfmt.str 
    pop            msysp.strtostrfmt.u u64 
    jump           #11128     
#11127: 
    push           msysp.strtostrfmt.n i64 
    push           3          i64 
    add                       i64 
    pop            msysp.strtostrfmt.nheap i64 
    setargs                   1 0
    push           msysp.strtostrfmt.nheap i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            msysp.strtostrfmt.u u64 
#11128: 
    push           msysp.strtostrfmt.fmt u64 
    push           3          
    pushptroff                u8 1 0
    jumpfalse      #11129     u64 
    push           msysp.strtostrfmt.u u64 
    pop            msysp.strtostrfmt.v u64 
    push           msysp.strtostrfmt.fmt u64 
    push           3          
    pushptroff                u8 1 0
    push           msysp.strtostrfmt.v u64 
    popptr                    u8 
    push           &msysp.strtostrfmt.v 
    incr                      u64 1
    push           msysp.strtostrfmt.n i64 
    jumpfalse      #11130     i64 
    setargs                   2 0
    push           msysp.strtostrfmt.s u64 
    push           msysp.strtostrfmt.v u64 
    callproc       &strcpy    
    push           &msysp.strtostrfmt.v 
    push           msysp.strtostrfmt.n i64 
    addrefoffto               u64 1 0
#11130: 
    push           msysp.strtostrfmt.fmt u64 
    push           3          
    pushptroff                u8 1 0
    push           msysp.strtostrfmt.v u64 
    popptr                    u8 
    push           &msysp.strtostrfmt.v 
    incr                      u64 1
    push           0          u64 
    push           msysp.strtostrfmt.v u64 
    popptr                    u8 
    push           &msysp.strtostrfmt.n 
    push           2          i64 
    addto                     i64 
    jump           #11131     
#11129: 
    setargs                   3 0
    push           msysp.strtostrfmt.n u64 
    push           msysp.strtostrfmt.s u64 
    push           msysp.strtostrfmt.u u64 
    callproc       &memcpy    
#11131: 
    push           msysp.strtostrfmt.fmt u64 
    push           8          
    pushptroff                u8 1 0
    switch         #11132     65 97
    opnd           #11133     
#11132: 
    switchlabel    #11134     
    switchlabel    #11133     
    switchlabel    #11133     
    switchlabel    #11133     
    switchlabel    #11133     
    switchlabel    #11133     
    switchlabel    #11133     
    switchlabel    #11133     
    switchlabel    #11133     
    switchlabel    #11133     
    switchlabel    #11133     
    switchlabel    #11133     
    switchlabel    #11133     
    switchlabel    #11133     
    switchlabel    #11133     
    switchlabel    #11133     
    switchlabel    #11133     
    switchlabel    #11133     
    switchlabel    #11133     
    switchlabel    #11133     
    switchlabel    #11133     
    switchlabel    #11133     
    switchlabel    #11133     
    switchlabel    #11133     
    switchlabel    #11133     
    switchlabel    #11133     
    switchlabel    #11133     
    switchlabel    #11133     
    switchlabel    #11133     
    switchlabel    #11133     
    switchlabel    #11133     
    switchlabel    #11133     
    switchlabel    #11135     
    endswitch                 
#11135: 
    setargs                   1 0
    push           msysp.strtostrfmt.u u64 
    callproc       &mlibp.convlcstring 
    jump           #11136     
#11134: 
    setargs                   1 0
    push           msysp.strtostrfmt.u u64 
    callproc       &mlibp.convucstring 
    jump           #11136     
#11133: 
#11136: 
    push           msysp.strtostrfmt.u u64 
    pop            msysp.strtostrfmt.s u64 
#11126: 
    push           msysp.strtostrfmt.fmt u64 
    pushptr                   u8 
    pop            msysp.strtostrfmt.w i64 
    push           msysp.strtostrfmt.w i64 
    push           msysp.strtostrfmt.n i64 
    jumple         #11137     i64 
    setargs                   4 0
    push           msysp.strtostrfmt.fmt u64 
    push           msysp.strtostrfmt.n i64 
    push           msysp.strtostrfmt.t u64 
    push           msysp.strtostrfmt.s u64 
    callfn         &msysp.expandstr i64 
    pop            msysp.strtostrfmt.n i64 
    jump           #11138     
#11137: 
    setargs                   3 0
    push           msysp.strtostrfmt.n u64 
    push           msysp.strtostrfmt.s u64 
    push           msysp.strtostrfmt.t u64 
    callproc       &memcpy    
#11138: 
    push           msysp.strtostrfmt.nheap i64 
    jumpfalse      #11139     i64 
    setargs                   2 0
    push           msysp.strtostrfmt.nheap i64 
    push           msysp.strtostrfmt.u u64 
    callproc       &mlibp.pcm_free 
#11139: 
    push           msysp.strtostrfmt.n i64 
    setret                    i64 
    jump           #11140     
#11140: 
    retfn                     i64 
End


Proc msysp.tostr_i64:
    param          msysp.tostr_i64.a i64 
    param          msysp.tostr_i64.fmt u64 
    local          msysp.tostr_i64.str block:360 
    local          msysp.tostr_i64.n i64 
    procentry                 
    push           msysp.tostr_i64.fmt u64 
    push           12         
    pushptroff                u8 1 0
    push           0          u64 
    casejumpeq     #11142     u64 0
    push           68         u64 
    casejumpeq     #11143     u64 0
    push           100        u64 
    casejumpeq     #11143     u64 0
    popstack                  u64 
    jump           #11144     
#11142: 
    setargs                   3 0
    push           msysp.tostr_i64.fmt u64 
    push           &msysp.tostr_i64.str 
    push           msysp.tostr_i64.a i64 
    callfn         &msysp.i64tostrfmt i64 
    pop            msysp.tostr_i64.n i64 
    jump           #11145     
#11143: 
    setargs                   4 0
    push           msysp.tostr_i64.fmt u64 
    push           &msysp.tostr_i64.str 
    push           8          i64 
    push           &msysp.tostr_i64.a 
    callfn         &msysp.domultichar i64 
    pop            msysp.tostr_i64.n i64 
    jump           #11145     
#11144: 
    setargs                   1 0
    push           msysp.tostr_i64.a i64 
    callproc       &msysp.printchar 
    jump           #11146     
#11145: 
    setargs                   2 0
    push           msysp.tostr_i64.n i64 
    push           &msysp.tostr_i64.str 
    callproc       &msysp.printstr_n 
#11146: 
    retproc                   
End


Proc msysp.tostr_u64:
    param          msysp.tostr_u64.a u64 
    param          msysp.tostr_u64.fmt u64 
    local          msysp.tostr_u64.str block:360 
    local          msysp.tostr_u64.n i64 
    procentry                 
    push           msysp.tostr_u64.fmt u64 
    push           12         
    pushptroff                u8 1 0
    push           68         u64 
    casejumpeq     #11148     u64 0
    push           100        u64 
    casejumpeq     #11148     u64 0
    push           67         u64 
    casejumpeq     #11149     u64 0
    push           99         u64 
    casejumpeq     #11149     u64 0
    popstack                  u64 
    jump           #11150     
#11148: 
    setargs                   4 0
    push           msysp.tostr_u64.fmt u64 
    push           &msysp.tostr_u64.str 
    push           8          i64 
    push           &msysp.tostr_u64.a 
    callfn         &msysp.domultichar i64 
    pop            msysp.tostr_u64.n i64 
    jump           #11151     
#11149: 
    setargs                   1 0
    push           msysp.tostr_u64.a i64 
    callproc       &msysp.printchar 
    jump           #11152     
    jump           #11151     
#11150: 
    setargs                   3 0
    push           msysp.tostr_u64.fmt u64 
    push           &msysp.tostr_u64.str 
    push           msysp.tostr_u64.a i64 
    callfn         &msysp.u64tostrfmt i64 
    pop            msysp.tostr_u64.n i64 
#11151: 
    setargs                   2 0
    push           msysp.tostr_u64.n i64 
    push           &msysp.tostr_u64.str 
    callproc       &msysp.printstr_n 
#11152: 
    retproc                   
End


Proc msysp.tostr_u128:
    param          msysp.tostr_u128.a u128 
    param          msysp.tostr_u128.fmt u64 
    param          msysp.tostr_u128.neg i64 
    local          msysp.tostr_u128.str block:360 
    local          msysp.tostr_u128.n i64 
    procentry                 
    push           msysp.tostr_u128.fmt u64 
    push           12         
    pushptroff                u8 1 0
    push           68         u64 
    casejumpeq     #11154     u64 0
    push           100        u64 
    casejumpeq     #11154     u64 0
    push           67         u64 
    casejumpeq     #11155     u64 0
    push           99         u64 
    casejumpeq     #11155     u64 0
    popstack                  u64 
    jump           #11156     
#11154: 
    setargs                   4 0
    push           msysp.tostr_u128.fmt u64 
    push           &msysp.tostr_u128.str 
    push           8          i64 
    push           &msysp.tostr_u128.a 
    callfn         &msysp.domultichar i64 
    pop            msysp.tostr_u128.n i64 
    jump           #11157     
#11155: 
    setargs                   1 0
    push           msysp.tostr_u128.a u128 
    softtruncw                i64 u128 
    callproc       &msysp.printchar 
    jump           #11158     
    jump           #11157     
#11156: 
    push           msysp.tostr_u128.neg i64 
    jumpfalse      #11159     i64 
    push           45         u64 
    push           &msysp.tostr_u128.str 
    push           1          i64 
    popptroff                 u8 1 -1
    setargs                   4 0
    push           msysp.tostr_u128.fmt u64 
    push           &msysp.tostr_u128.str 
    push           1          
    addrefoff                 u8 1 0
    push           msysp.tostr_u128.a i128 
    callfn         &msysp.u128tostrfmt i64 
    push           1          i64 
    add                       i64 
    pop            msysp.tostr_u128.n i64 
    jump           #11160     
#11159: 
    setargs                   4 0
    push           msysp.tostr_u128.fmt u64 
    push           &msysp.tostr_u128.str 
    push           msysp.tostr_u128.a i128 
    callfn         &msysp.u128tostrfmt i64 
    pop            msysp.tostr_u128.n i64 
#11160: 
#11157: 
    setargs                   2 0
    push           msysp.tostr_u128.n i64 
    push           &msysp.tostr_u128.str 
    callproc       &msysp.printstr_n 
#11158: 
    retproc                   
End


Proc msysp.tostr_r64:
    param          msysp.tostr_r64.x r64 
    param          msysp.tostr_r64.fmt u64 
    local          msysp.tostr_r64.str block:360 
    local          msysp.tostr_r64.str2 block:360 
    local          msysp.tostr_r64.cfmt block:10 
    local          msysp.tostr_r64.n i64 
    procentry                 
    push           37         u64 
    push           &msysp.tostr_r64.cfmt 
    push           0          i64 
    popptroff                 u8 1 0
    push           msysp.tostr_r64.fmt u64 
    push           1          
    pushptroff                i8 1 0
    jumpfalse      #11162     i64 
    push           46         u64 
    push           &msysp.tostr_r64.cfmt 
    push           1          i64 
    popptroff                 u8 1 0
    push           42         u64 
    push           &msysp.tostr_r64.cfmt 
    push           2          i64 
    popptroff                 u8 1 0
    push           msysp.tostr_r64.fmt u64 
    push           5          
    pushptroff                u8 1 0
    push           &msysp.tostr_r64.cfmt 
    push           3          i64 
    popptroff                 u8 1 0
    push           0          u64 
    push           &msysp.tostr_r64.cfmt 
    push           4          i64 
    popptroff                 u8 1 0
    setargs                   4 3
    push           msysp.tostr_r64.x r64 
    push           msysp.tostr_r64.fmt u64 
    push           1          
    pushptroff                i8 1 0
    push           &msysp.tostr_r64.cfmt 
    push           &msysp.tostr_r64.str 
    callproc       &sprintf   
    jump           #11163     
#11162: 
    push           msysp.tostr_r64.fmt u64 
    push           5          
    pushptroff                u8 1 0
    push           &msysp.tostr_r64.cfmt 
    push           1          i64 
    popptroff                 u8 1 0
    push           0          u64 
    push           &msysp.tostr_r64.cfmt 
    push           2          i64 
    popptroff                 u8 1 0
    setargs                   3 3
    push           msysp.tostr_r64.x r64 
    push           &msysp.tostr_r64.cfmt 
    push           &msysp.tostr_r64.str 
    callproc       &sprintf   
#11163: 
    setargs                   1 0
    push           &msysp.tostr_r64.str 
    callfn         &strlen    i64 
    pop            msysp.tostr_r64.n i64 
    push           msysp.tostr_r64.n i64 
    push           msysp.tostr_r64.fmt u64 
    pushptr                   u8 
    jumpge         #11164     i64 
    setargs                   4 0
    push           msysp.tostr_r64.fmt u64 
    push           msysp.tostr_r64.n i64 
    push           &msysp.tostr_r64.str2 
    push           &msysp.tostr_r64.str 
    callfn         &msysp.expandstr i64 
    pop            msysp.tostr_r64.n i64 
    setargs                   2 0
    push           &msysp.tostr_r64.str2 
    push           &msysp.tostr_r64.str 
    callproc       &strcpy    
#11164: 
    setargs                   2 0
    push           msysp.tostr_r64.n i64 
    push           &msysp.tostr_r64.str 
    callproc       &msysp.printstr_n 
#11165: 
    retproc                   
End


Proc msysp.tostr_str:
    param          msysp.tostr_str.s u64 
    param          msysp.tostr_str.fmt u64 
    local          msysp.tostr_str.oldlen i64 
    local          msysp.tostr_str.newlen i64 
    local          msysp.tostr_str.n i64 
    local          msysp.tostr_str.t u64 
    procentry                 
    setargs                   1 0
    push           msysp.tostr_str.s u64 
    callfn         &strlen    i64 
    pop            msysp.tostr_str.oldlen i64 
    push           msysp.tostr_str.oldlen i64 
    pop            msysp.tostr_str.newlen i64 
    push           msysp.tostr_str.fmt u64 
    push           3          
    pushptroff                u8 1 0
    jumptrue       #11167     u64 
    push           msysp.tostr_str.fmt u64 
    pushptr                   u8 
    push           msysp.tostr_str.newlen i64 
    jumpgt         #11167     i64 
    push           msysp.tostr_str.fmt u64 
    push           8          
    pushptroff                u8 1 0
    jumptrue       #11167     u64 
    push           msysp.tostr_str.fmt u64 
    push           1          
    pushptroff                i8 1 0
    jumpfalse      #11168     i64 
#11167: 
    push           msysp.tostr_str.fmt u64 
    push           3          
    pushptroff                u8 1 0
    jumpfalse      #11169     u64 
    push           &msysp.tostr_str.newlen 
    push           2          i64 
    addto                     i64 
#11169: 
    push           msysp.tostr_str.fmt u64 
    pushptr                   u8 
    push           msysp.tostr_str.newlen i64 
    jumple         #11170     i64 
    push           msysp.tostr_str.fmt u64 
    pushptr                   u8 
    pop            msysp.tostr_str.newlen i64 
#11170: 
    setargs                   1 0
    push           msysp.tostr_str.newlen i64 
    push           1          i64 
    add                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            msysp.tostr_str.t u64 
    setargs                   4 0
    push           msysp.tostr_str.fmt u64 
    push           msysp.tostr_str.oldlen i64 
    push           msysp.tostr_str.t u64 
    push           msysp.tostr_str.s u64 
    callfn         &msysp.strtostrfmt i64 
    pop            msysp.tostr_str.n i64 
    push           msysp.tostr_str.fmt u64 
    push           1          
    pushptroff                i8 1 0
    jumpfalse      #11171     i64 
    push           &msysp.tostr_str.n 
    push           msysp.tostr_str.fmt u64 
    push           1          
    pushptroff                i8 1 0
    minto                     i64 
#11171: 
    setargs                   2 0
    push           msysp.tostr_str.n i64 
    push           msysp.tostr_str.t u64 
    callproc       &msysp.printstr_n 
    setargs                   2 0
    push           msysp.tostr_str.newlen i64 
    push           1          i64 
    add                       i64 
    push           msysp.tostr_str.t u64 
    callproc       &mlibp.pcm_free 
    jump           #11172     
#11168: 
    setargs                   2 0
    push           msysp.tostr_str.oldlen i64 
    push           msysp.tostr_str.s u64 
    callproc       &msysp.printstr_n 
#11172: 
#11173: 
    retproc                   
End


Proc msysp.getfmt: u64
    param          msysp.getfmt.fmtstyle u64 
    procentry                 
    startmult                 
    push           msysp.getfmt.fmtstyle u64 
    jumpfalse      #11175     u64 
    setargs                   3 0
    push           &msysp.getfmt.fmt 
    push           -1         i64 
    push           msysp.getfmt.fmtstyle u64 
    callproc       &msysp.strtofmt 
    push           &msysp.getfmt.fmt 
    resetmult                 
    jump           #11176     
#11175: 
    push           &msysp.defaultfmt 
    endmult                   
#11176: 
    setret                    u64 
    jump           #11177     
#11177: 
    retfn                     u64 
End


Proc msysp.strint: u64
    param          msysp.strint.a i64 
    param          msysp.strint.fmtstyle u64 
    local          msysp.strint.fmt u64 
    procentry                 
    setargs                   1 0
    push           &msysp.strint.str 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    setargs                   1 0
    push           msysp.strint.fmtstyle u64 
    callfn         &msysp.getfmt u64 
    store          msysp.strint.fmt u64 
    push           msysp.strint.a i64 
    callproc       &msysp.tostr_i64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           msysp.strint.fmt u64 
    push           &msysp.strint.str 
    callfn         &msysp.getstr u64 
    setret                    u64 
    jump           #11179     
#11179: 
    retfn                     u64 
End


Proc msysp.getstrint:
    param          msysp.getstrint.a i64 
    param          msysp.getstrint.dest u64 
    procentry                 
    setargs                   1 0
    push           msysp.getstrint.dest u64 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    setargs                   1 0
    push           0          u64 
    callfn         &msysp.getfmt u64 
    push           msysp.getstrint.a i64 
    callproc       &msysp.tostr_i64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#11181: 
    retproc                   
End


Proc msysp.strword: u64
    param          msysp.strword.a u64 
    param          msysp.strword.fmtstyle u64 
    local          msysp.strword.fmt u64 
    procentry                 
    setargs                   1 0
    push           &msysp.strword.str 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    setargs                   1 0
    push           msysp.strword.fmtstyle u64 
    callfn         &msysp.getfmt u64 
    store          msysp.strword.fmt u64 
    push           msysp.strword.a u64 
    callproc       &msysp.tostr_u64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           msysp.strword.fmt u64 
    push           &msysp.strword.str 
    callfn         &msysp.getstr u64 
    setret                    u64 
    jump           #11183     
#11183: 
    retfn                     u64 
End


Proc msysp.strreal: u64
    param          msysp.strreal.a r64 
    param          msysp.strreal.fmtstyle u64 
    local          msysp.strreal.fmt u64 
    procentry                 
    setargs                   1 0
    push           &msysp.strreal.str 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    setargs                   1 0
    push           msysp.strreal.fmtstyle u64 
    callfn         &msysp.getfmt u64 
    store          msysp.strreal.fmt u64 
    push           msysp.strreal.a r64 
    callproc       &msysp.tostr_r64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           msysp.strreal.fmt u64 
    push           &msysp.strreal.str 
    callfn         &msysp.getstr u64 
    setret                    u64 
    jump           #11185     
#11185: 
    retfn                     u64 
End


Proc msysp.getstr: u64
    param          msysp.getstr.s u64 
    param          msysp.getstr.fmt u64 
    procentry                 
    startmult                 
    push           msysp.getstr.fmt u64 
    push           13         
    pushptroff                u8 1 0
    jumpfalse      #11187     u64 
    setargs                   1 0
    push           msysp.getstr.s u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    resetmult                 
    jump           #11188     
#11187: 
    push           msysp.getstr.s u64 
    endmult                   
#11188: 
    setret                    u64 
    jump           #11189     
#11189: 
    retfn                     u64 
End


Proc msysp.initreadbuffer:
    procentry                 
    push           msysp.rd_buffer u64 
    jumpfalse      #11191     u64 
    jump           #11192     
#11191: 
    setargs                   1 0
    push           524288     i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            msysp.rd_buffer u64 
    push           0          u64 
    push           msysp.rd_buffer u64 
    popptr                    u8 
    push           msysp.rd_buffer u64 
    store          msysp.rd_lastpos u64 
    pop            msysp.rd_pos u64 
#11192: 
    retproc                   
End


Proc msysp.m$read_conline:
    procentry                 
    setargs                   0 0
    callproc       &msysp.initreadbuffer 
    setargs                   3 0
    push           524288     i64 
    push           msysp.rd_buffer u64 
    push           0          u64 
    callproc       &mlibp.readlinen 
    setargs                   1 0
    push           msysp.rd_buffer u64 
    callfn         &strlen    i64 
    pop            msysp.rd_length i64 
    push           msysp.rd_buffer u64 
    pop            msysp.rd_pos u64 
    push           0          u64 
    pop            msysp.rd_lastpos u64 
#11194: 
    retproc                   
End


Proc msysp.m$read_fileline:
    param          msysp.m$read_fileline.f u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.initreadbuffer 
    setargs                   3 0
    push           524288     i64 
    push           msysp.rd_buffer u64 
    push           msysp.m$read_fileline.f u64 
    callproc       &mlibp.readlinen 
    setargs                   1 0
    push           msysp.rd_buffer u64 
    callfn         &strlen    i64 
    pop            msysp.rd_length i64 
    push           msysp.rd_buffer u64 
    pop            msysp.rd_pos u64 
    push           0          u64 
    pop            msysp.rd_lastpos u64 
#11196: 
    retproc                   
End


Proc msysp.m$read_strline:
    param          msysp.m$read_strline.s u64 
    local          msysp.m$read_strline.n i64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.initreadbuffer 
    setargs                   1 0
    push           msysp.m$read_strline.s u64 
    callfn         &strlen    i64 
    pop            msysp.m$read_strline.n i64 
    push           msysp.m$read_strline.n i64 
    push           524288     i64 
    jumpge         #11198     i64 
    setargs                   2 0
    push           msysp.m$read_strline.s u64 
    push           msysp.rd_buffer u64 
    callproc       &strcpy    
    jump           #11199     
#11198: 
    setargs                   3 0
    push           524287     u64 
    push           msysp.m$read_strline.s u64 
    push           msysp.rd_buffer u64 
    callproc       &memcpy    
    push           0          u64 
    push           msysp.rd_buffer u64 
    push           524288     i64 
    popptroff                 u8 1 -1
#11199: 
    push           msysp.m$read_strline.n i64 
    pop            msysp.rd_length i64 
    push           msysp.rd_buffer u64 
    pop            msysp.rd_pos u64 
    push           0          u64 
    pop            msysp.rd_lastpos u64 
#11200: 
    retproc                   
End


Proc msysp.readitem: u64
    param          msysp.readitem.itemlength u64 
    local          msysp.readitem.p u64 
    local          msysp.readitem.s u64 
    local          msysp.readitem.itemstr u64 
    local          msysp.readitem.quotechar u8 
    local          msysp.readitem.c u8 
    procentry                 
    push           msysp.rd_buffer u64 
    jumptrue       #11202     u64 
    setargs                   0 0
    callproc       &msysp.initreadbuffer 
#11202: 
    push           msysp.rd_pos u64 
    pop            msysp.readitem.s u64 
    jump           #11203     
#11204: 
    push           &msysp.readitem.s 
    incr                      u64 1
#11203: 
    push           msysp.readitem.s u64 
    pushptr                   u8 
    push           32         u64 
    jumpeq         #11204     u64 
    push           msysp.readitem.s u64 
    pushptr                   u8 
    push           9          i64 
    jumpeq         #11204     i64 
#11205: 
    push           msysp.readitem.s u64 
    pop            msysp.readitem.itemstr u64 
    push           msysp.readitem.s u64 
    store          msysp.rd_pos u64 
    pop            msysp.rd_lastpos u64 
    push           msysp.readitem.s u64 
    pushptr                   u8 
    push           0          i64 
    jumpne         #11206     i64 
    push           0          i64 
    pop            msysp.termchar i64 
    push           0          i64 
    push           msysp.readitem.itemlength u64 
    popptr                    i64 
    push           msysp.readitem.s u64 
    setret                    u64 
    jump           #11207     
#11206: 
    push           0          u64 
    pop            msysp.readitem.quotechar u8 
    push           msysp.readitem.s u64 
    pushptr                   u8 
    push           34         u64 
    jumpne         #11208     u64 
    push           34         u64 
    pop            msysp.readitem.quotechar u8 
    push           &msysp.readitem.s 
    incr                      u64 1
    jump           #11209     
#11208: 
    push           msysp.readitem.s u64 
    pushptr                   u8 
    push           39         u64 
    jumpne         #11210     u64 
    push           39         u64 
    pop            msysp.readitem.quotechar u8 
    push           &msysp.readitem.s 
    incr                      u64 1
#11210: 
#11209: 
    push           msysp.readitem.s u64 
    store          msysp.readitem.itemstr u64 
    pop            msysp.readitem.p u64 
    jump           #11211     
#11212: 
    push           &msysp.readitem.s 
    loadincr                  u64 1
    pushptr                   u8 
    pop            msysp.readitem.c u8 
    push           msysp.readitem.c u8 
    switch         #11213     9 61
    opnd           #11214     
#11213: 
    switchlabel    #11215     
    switchlabel    #11214     
    switchlabel    #11214     
    switchlabel    #11214     
    switchlabel    #11214     
    switchlabel    #11214     
    switchlabel    #11214     
    switchlabel    #11214     
    switchlabel    #11214     
    switchlabel    #11214     
    switchlabel    #11214     
    switchlabel    #11214     
    switchlabel    #11214     
    switchlabel    #11214     
    switchlabel    #11214     
    switchlabel    #11214     
    switchlabel    #11214     
    switchlabel    #11214     
    switchlabel    #11214     
    switchlabel    #11214     
    switchlabel    #11214     
    switchlabel    #11214     
    switchlabel    #11214     
    switchlabel    #11215     
    switchlabel    #11214     
    switchlabel    #11214     
    switchlabel    #11214     
    switchlabel    #11214     
    switchlabel    #11214     
    switchlabel    #11214     
    switchlabel    #11214     
    switchlabel    #11214     
    switchlabel    #11214     
    switchlabel    #11214     
    switchlabel    #11214     
    switchlabel    #11215     
    switchlabel    #11214     
    switchlabel    #11214     
    switchlabel    #11214     
    switchlabel    #11214     
    switchlabel    #11214     
    switchlabel    #11214     
    switchlabel    #11214     
    switchlabel    #11214     
    switchlabel    #11214     
    switchlabel    #11214     
    switchlabel    #11214     
    switchlabel    #11214     
    switchlabel    #11214     
    switchlabel    #11214     
    switchlabel    #11214     
    switchlabel    #11214     
    switchlabel    #11215     
    endswitch                 
#11215: 
    push           msysp.readitem.quotechar u8 
    jumptrue       #11216     u64 
    push           msysp.readitem.p u64 
    push           msysp.readitem.s u64 
    jumpne         #11217     u64 
#11216: 
    jump           #11218     
#11217: 
    push           msysp.readitem.c u8 
    pop            msysp.termchar i64 
    jump           #11219     
    jump           #11220     
#11214: 
!normalchar::
#11218: 
    push           msysp.readitem.c u8 
    push           msysp.readitem.quotechar u8 
    jumpne         #11221     u64 
    push           msysp.readitem.s u64 
    pushptr                   u8 
    push           msysp.readitem.quotechar u8 
    jumpne         #11222     u64 
    push           msysp.readitem.c u8 
    push           msysp.readitem.p u64 
    popptr                    u8 
    push           &msysp.readitem.s 
    incr                      u64 1
    push           &msysp.readitem.p 
    incr                      u64 1
    jump           #11223     
#11222: 
    push           msysp.readitem.s u64 
    pushptr                   u8 
    pop            msysp.termchar i64 
    push           msysp.termchar i64 
    push           44         i64 
    jumpeq         #11224     i64 
    push           msysp.termchar i64 
    push           61         i64 
    jumpne         #11225     i64 
#11224: 
    push           &msysp.readitem.s 
    incr                      u64 1
    push           msysp.readitem.s u64 
    pushptr                   u8 
    pop            msysp.termchar i64 
#11225: 
    jump           #11219     
#11223: 
    jump           #11226     
#11221: 
    push           msysp.readitem.c u8 
    push           msysp.readitem.p u64 
    popptr                    u8 
    push           &msysp.readitem.p 
    incr                      u64 1
#11226: 
#11220: 
#11211: 
    push           msysp.readitem.s u64 
    pushptr                   u8 
    jumptrue       #11212     u64 
#11219: 
    push           msysp.readitem.s u64 
    pushptr                   u8 
    push           0          i64 
    jumpne         #11227     i64 
    push           0          i64 
    pop            msysp.termchar i64 
#11227: 
    push           msysp.readitem.p u64 
    push           msysp.readitem.itemstr u64 
    subref                    i64 1
    push           msysp.readitem.itemlength u64 
    popptr                    i64 
    push           msysp.readitem.s u64 
    pop            msysp.rd_pos u64 
    push           msysp.readitem.itemstr u64 
    setret                    u64 
    jump           #11207     
#11207: 
    retfn                     u64 
End


Proc msysp.strtoint: i64
    param          msysp.strtoint.s u64 
    param          msysp.strtoint.length i64 
    param          msysp.strtoint.base u64 
    local          msysp.strtoint.signd u8 
    local          msysp.strtoint.aa u64 
    local          msysp.strtoint.c u64 
    local          msysp.strtoint.d u64 
    procentry                 
    push           0          i64 
    pop            msysp.itemerror i64 
    push           msysp.strtoint.length i64 
    push           -1         i64 
    jumpne         #11229     i64 
    setargs                   1 0
    push           msysp.strtoint.s u64 
    callfn         &strlen    i64 
    pop            msysp.strtoint.length i64 
#11229: 
    push           0          i64 
    pop            msysp.strtoint.signd u8 
    push           msysp.strtoint.length i64 
    jumpfalse      #11230     i64 
    push           msysp.strtoint.s u64 
    pushptr                   u8 
    push           45         u64 
    jumpne         #11230     u64 
    push           1          i64 
    pop            msysp.strtoint.signd u8 
    push           &msysp.strtoint.s 
    incr                      u64 1
    push           &msysp.strtoint.length 
    decr                      i64 1
    jump           #11231     
#11230: 
    push           msysp.strtoint.length i64 
    jumpfalse      #11232     i64 
    push           msysp.strtoint.s u64 
    pushptr                   u8 
    push           43         u64 
    jumpne         #11232     u64 
    push           &msysp.strtoint.s 
    incr                      u64 1
    push           &msysp.strtoint.length 
    decr                      i64 1
#11232: 
#11231: 
    push           0          u64 
    pop            msysp.strtoint.aa u64 
    jump           #11233     
#11234: 
    push           &msysp.strtoint.s 
    loadincr                  u64 1
    pushptr                   u8 
    pop            msysp.strtoint.c u64 
    push           &msysp.strtoint.length 
    decr                      i64 1
    push           msysp.strtoint.c i64 
    switch         #11235     39 102
    opnd           #11236     
#11235: 
    switchlabel    #11237     
    switchlabel    #11236     
    switchlabel    #11236     
    switchlabel    #11236     
    switchlabel    #11236     
    switchlabel    #11236     
    switchlabel    #11236     
    switchlabel    #11236     
    switchlabel    #11236     
    switchlabel    #11238     
    switchlabel    #11238     
    switchlabel    #11238     
    switchlabel    #11238     
    switchlabel    #11238     
    switchlabel    #11238     
    switchlabel    #11238     
    switchlabel    #11238     
    switchlabel    #11238     
    switchlabel    #11238     
    switchlabel    #11236     
    switchlabel    #11236     
    switchlabel    #11236     
    switchlabel    #11236     
    switchlabel    #11236     
    switchlabel    #11236     
    switchlabel    #11236     
    switchlabel    #11239     
    switchlabel    #11239     
    switchlabel    #11239     
    switchlabel    #11239     
    switchlabel    #11239     
    switchlabel    #11239     
    switchlabel    #11236     
    switchlabel    #11236     
    switchlabel    #11236     
    switchlabel    #11236     
    switchlabel    #11236     
    switchlabel    #11236     
    switchlabel    #11236     
    switchlabel    #11236     
    switchlabel    #11236     
    switchlabel    #11236     
    switchlabel    #11236     
    switchlabel    #11236     
    switchlabel    #11236     
    switchlabel    #11236     
    switchlabel    #11236     
    switchlabel    #11236     
    switchlabel    #11236     
    switchlabel    #11236     
    switchlabel    #11236     
    switchlabel    #11236     
    switchlabel    #11236     
    switchlabel    #11236     
    switchlabel    #11236     
    switchlabel    #11236     
    switchlabel    #11237     
    switchlabel    #11236     
    switchlabel    #11240     
    switchlabel    #11240     
    switchlabel    #11240     
    switchlabel    #11240     
    switchlabel    #11240     
    switchlabel    #11240     
    endswitch                 
#11239: 
    push           msysp.strtoint.c u64 
    push           65         u64 
    sub                       i64 
    push           10         i64 
    add                       u64 
    pop            msysp.strtoint.d u64 
    jump           #11241     
#11240: 
    push           msysp.strtoint.c u64 
    push           97         u64 
    sub                       i64 
    push           10         i64 
    add                       u64 
    pop            msysp.strtoint.d u64 
    jump           #11241     
#11238: 
    push           msysp.strtoint.c u64 
    push           48         u64 
    sub                       u64 
    pop            msysp.strtoint.d u64 
    jump           #11241     
#11237: 
    jump           #11233     
    jump           #11241     
#11236: 
    push           1          i64 
    pop            msysp.itemerror i64 
    jump           #11242     
#11241: 
    push           msysp.strtoint.d u64 
    push           msysp.strtoint.base u64 
    jumplt         #11243     u64 
    push           1          i64 
    pop            msysp.itemerror i64 
    jump           #11242     
#11243: 
    push           msysp.strtoint.aa u64 
    push           msysp.strtoint.base u64 
    mul                       u64 
    push           msysp.strtoint.d u64 
    add                       u64 
    pop            msysp.strtoint.aa u64 
#11233: 
    push           msysp.strtoint.length i64 
    jumptrue       #11234     i64 
#11242: 
    startmult                 
    push           msysp.strtoint.signd u8 
    jumpfalse      #11244     i64 
    push           msysp.strtoint.aa u64 
    neg                       i64 
    resetmult                 
    jump           #11245     
#11244: 
    push           msysp.strtoint.aa i64 
    endmult                   
#11245: 
    setret                    i64 
    jump           #11246     
#11246: 
    retfn                     i64 
End


Proc msysp.m$read_i64: i64
    param          msysp.m$read_i64.fmt i64 
    local          msysp.m$read_i64.s u64 
    local          msysp.m$read_i64.length i64 
    local          msysp.m$read_i64.c i64 
    local          msysp.m$read_i64.aa i64 
    procentry                 
    push           msysp.m$read_i64.fmt i64 
    push           67         i64 
    casejumpeq     #11248     i64 0
    push           99         i64 
    casejumpeq     #11248     i64 0
    push           84         i64 
    casejumpeq     #11249     i64 0
    push           116        i64 
    casejumpeq     #11249     i64 0
    push           69         i64 
    casejumpeq     #11250     i64 0
    push           101        i64 
    casejumpeq     #11250     i64 0
    popstack                  i64 
    jump           #11251     
#11248: 
    push           msysp.rd_pos u64 
    pop            msysp.rd_lastpos u64 
    push           msysp.rd_pos u64 
    pushptr                   u8 
    jumpfalse      #11252     u64 
    push           &msysp.rd_pos 
    loadincr                  u64 1
    pushptr                   u8 
    setret                    i64 
    jump           #11253     
    jump           #11254     
#11252: 
    push           0          i64 
    setret                    i64 
    jump           #11253     
#11254: 
    jump           #11255     
#11249: 
    push           msysp.termchar i64 
    setret                    i64 
    jump           #11253     
    jump           #11255     
#11250: 
    push           msysp.itemerror i64 
    setret                    i64 
    jump           #11253     
    jump           #11255     
#11251: 
#11255: 
    setargs                   1 0
    push           &msysp.m$read_i64.length 
    callfn         &msysp.readitem u64 
    pop            msysp.m$read_i64.s u64 
    push           msysp.m$read_i64.fmt i64 
    push           0          i64 
    casejumpeq     #11256     i64 0
    push           73         i64 
    casejumpeq     #11256     i64 0
    push           105        i64 
    casejumpeq     #11256     i64 0
    push           66         i64 
    casejumpeq     #11257     i64 0
    push           98         i64 
    casejumpeq     #11257     i64 0
    push           72         i64 
    casejumpeq     #11258     i64 0
    push           104        i64 
    casejumpeq     #11258     i64 0
    popstack                  i64 
    jump           #11259     
#11256: 
    setargs                   3 0
    push           10         u64 
    push           msysp.m$read_i64.length i64 
    push           msysp.m$read_i64.s u64 
    callfn         &msysp.strtoint i64 
    setret                    i64 
    jump           #11253     
    jump           #11260     
#11257: 
    setargs                   3 0
    push           2          u64 
    push           msysp.m$read_i64.length i64 
    push           msysp.m$read_i64.s u64 
    callfn         &msysp.strtoint i64 
    setret                    i64 
    jump           #11253     
    jump           #11260     
#11258: 
    setargs                   3 0
    push           16         u64 
    push           msysp.m$read_i64.length i64 
    push           msysp.m$read_i64.s u64 
    callfn         &msysp.strtoint i64 
    setret                    i64 
    jump           #11253     
    jump           #11260     
#11259: 
#11260: 
    push           0          i64 
    setret                    i64 
    jump           #11253     
#11253: 
    retfn                     i64 
End


Proc msysp.m$read_r64: r64
    param          msysp.m$read_r64.fmt i64 
    local          msysp.m$read_r64.str block:512 
    local          msysp.m$read_r64.s u64 
    local          msysp.m$read_r64.length i64 
    local          msysp.m$read_r64.numlength i32 
    local          msysp.m$read_r64.x r64 
    procentry                 
    setargs                   1 0
    push           &msysp.m$read_r64.length 
    callfn         &msysp.readitem u64 
    pop            msysp.m$read_r64.s u64 
    push           msysp.m$read_r64.length i64 
    push           0          i64 
    jumpeq         #11262     i64 
    push           msysp.m$read_r64.length i64 
    push           512        i64 
    jumplt         #11263     i64 
#11262: 
    push           0.0000000000000000e+000 r64 
    setret                    r64 
    jump           #11264     
#11263: 
    setargs                   3 0
    push           msysp.m$read_r64.length u64 
    push           msysp.m$read_r64.s u64 
    push           &msysp.m$read_r64.str 
    callproc       &memcpy    
    push           0          u64 
    push           &msysp.m$read_r64.str 
    push           msysp.m$read_r64.length i64 
    popptroff                 u8 1 0
    push           0          i64 
    pop            msysp.itemerror i64 
    setargs                   4 3
    push           &msysp.m$read_r64.numlength 
    push           &msysp.m$read_r64.x 
    push           "%lf%n"    u64 
    push           &msysp.m$read_r64.str 
    callfn         &sscanf    i32 
    push           0          i64 
    jumpeq         #11265     i64 
    push           msysp.m$read_r64.numlength i32 
    push           msysp.m$read_r64.length i64 
    jumpeq         #11266     i64 
#11265: 
    push           0.0000000000000000e+000 r64 
    pop            msysp.m$read_r64.x r64 
    push           1          i64 
    pop            msysp.itemerror i64 
#11266: 
    push           msysp.m$read_r64.x r64 
    setret                    r64 
    jump           #11264     
#11264: 
    retfn                     r64 
End


Proc msysp.m$read_str:
    param          msysp.m$read_str.dest u64 
    param          msysp.m$read_str.destlen i64 
    param          msysp.m$read_str.fmt i64 
    local          msysp.m$read_str.s u64 
    local          msysp.m$read_str.length i64 
    local          msysp.m$read_str.numlength i64 
    local          msysp.m$read_str.x r64 
    procentry                 
    push           0          i64 
    pop            msysp.itemerror i64 
    push           msysp.m$read_str.fmt i64 
    push           76         i64 
    jumpeq         #11268     i64 
    push           msysp.m$read_str.fmt i64 
    push           108        i64 
    jumpne         #11269     i64 
#11268: 
    push           msysp.rd_pos u64 
    pop            msysp.m$read_str.s u64 
    push           msysp.rd_buffer u64 
    push           msysp.rd_length i64 
    addrefoff                 u64 1 0
    push           msysp.rd_pos u64 
    subref                    i64 1
    pop            msysp.m$read_str.length i64 
    jump           #11270     
#11269: 
    setargs                   1 0
    push           &msysp.m$read_str.length 
    callfn         &msysp.readitem u64 
    pop            msysp.m$read_str.s u64 
    push           msysp.m$read_str.fmt i64 
    push           78         i64 
    jumpeq         #11271     i64 
    push           msysp.m$read_str.fmt i64 
    push           110        i64 
    jumpne         #11272     i64 
#11271: 
    setargs                   2 0
    push           msysp.m$read_str.length i64 
    push           msysp.m$read_str.s u64 
    callproc       &mlibp.iconvlcn 
#11272: 
#11270: 
    push           msysp.m$read_str.destlen i64 
    push           0          i64 
    jumple         #11273     i64 
    push           msysp.m$read_str.length i64 
    push           msysp.m$read_str.destlen i64 
    jumplt         #11274     i64 
    push           msysp.m$read_str.destlen i64 
    push           1          i64 
    sub                       i64 
    pop            msysp.m$read_str.length i64 
    push           1          i64 
    pop            msysp.itemerror i64 
#11274: 
#11273: 
    setargs                   3 0
    push           msysp.m$read_str.length u64 
    push           msysp.m$read_str.s u64 
    push           msysp.m$read_str.dest u64 
    callproc       &memcpy    
    push           0          u64 
    push           msysp.m$read_str.dest u64 
    push           msysp.m$read_str.length i64 
    popptroff                 u8 1 0
#11275: 
    retproc                   
End


Proc msysp.readstr:
    param          msysp.readstr.dest u64 
    param          msysp.readstr.fmt i64 
    param          msysp.readstr.destlen i64 
    procentry                 
    setargs                   3 0
    push           msysp.readstr.fmt i64 
    push           msysp.readstr.destlen i64 
    push           msysp.readstr.dest u64 
    callproc       &msysp.m$read_str 
#11277: 
    retproc                   
End


Proc msysp.rereadln:
    procentry                 
    push           msysp.rd_buffer u64 
    pop            msysp.rd_pos u64 
    push           msysp.rd_pos u64 
    pop            msysp.rd_lastpos u64 
#11279: 
    retproc                   
End


Proc msysp.reread:
    procentry                 
    push           msysp.rd_lastpos u64 
    pop            msysp.rd_pos u64 
#11281: 
    retproc                   
End


Proc msysp.valint: i64
    param          msysp.valint.s u64 
    param          msysp.valint.fmt i64 
    local          msysp.valint.old_pos u64 
    local          msysp.valint.old_lastpos u64 
    local          msysp.valint.aa i64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.initreadbuffer 
    push           msysp.rd_pos u64 
    pop            msysp.valint.old_pos u64 
    push           msysp.rd_lastpos u64 
    pop            msysp.valint.old_lastpos u64 
    push           msysp.valint.s u64 
    pop            msysp.rd_pos u64 
    setargs                   1 0
    push           msysp.valint.fmt i64 
    callfn         &msysp.m$read_i64 i64 
    pop            msysp.valint.aa i64 
    push           msysp.valint.old_pos u64 
    pop            msysp.rd_pos u64 
    push           msysp.valint.old_lastpos u64 
    pop            msysp.rd_lastpos u64 
    push           msysp.valint.aa i64 
    setret                    i64 
    jump           #11283     
#11283: 
    retfn                     i64 
End


Proc msysp.valreal: r64
    param          msysp.valreal.s u64 
    local          msysp.valreal.old_pos u64 
    local          msysp.valreal.old_lastpos u64 
    local          msysp.valreal.x r64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.initreadbuffer 
    push           msysp.rd_pos u64 
    pop            msysp.valreal.old_pos u64 
    push           msysp.rd_lastpos u64 
    pop            msysp.valreal.old_lastpos u64 
    push           msysp.valreal.s u64 
    pop            msysp.rd_pos u64 
    setargs                   1 0
    push           0          i64 
    callfn         &msysp.m$read_r64 r64 
    pop            msysp.valreal.x r64 
    push           msysp.valreal.old_pos u64 
    pop            msysp.rd_pos u64 
    push           msysp.valreal.old_lastpos u64 
    pop            msysp.rd_lastpos u64 
    push           msysp.valreal.x r64 
    setret                    r64 
    jump           #11285     
#11285: 
    retfn                     r64 
End


Proc msysp.mclunimpl:
    param          msysp.mclunimpl.mess u64 
    procentry                 
    setargs                   2 2
    push           msysp.mclunimpl.mess u64 
    push           "MCL-UNIMPL: %s\n" u64 
    callproc       &printf    
    push           1          i64 
    stop                      
#11287: 
    retproc                   
End


Proc mwindowsp.os_init:
    local          mwindowsp.os_init.i i64 
    local          mwindowsp.os_init.count i64 
    local          mwindowsp.os_init.info block:22 
    procentry                 
    setargs                   1 0
    push           -11        i64 
    truncate                  i64 u32 
    callfn         &`GetStdHandle u64 
    pop            mwindowsp.hconsole u64 
    setargs                   1 0
    push           -10        i64 
    truncate                  i64 u32 
    callfn         &`GetStdHandle u64 
    pop            mwindowsp.hconsolein u64 
    push           0          i64 
    push           &mwindowsp.lastkey 
    push           8          
    popptroff                 u16 1 0
    push           0          i64 
    pop            mwindowsp.keypending i64 
    setargs                   2 0
    push           1          i64 
    push           0          u64 
    callproc       &`SetConsoleCtrlHandler 
    setargs                   2 0
    push           3          i64 
    push           mwindowsp.hconsole u64 
    callproc       &`SetConsoleMode 
    push           1          i64 
    pop            mwindowsp.init_flag i64 
#11289: 
    retproc                   
End


Proc mwindowsp.os_execwait: i64
    param          mwindowsp.os_execwait.cmdline u64 
    param          mwindowsp.os_execwait.newconsole i64 
    param          mwindowsp.os_execwait.workdir u64 
    local          mwindowsp.os_execwait.exitcode u32 
    local          mwindowsp.os_execwait.status i64 
    local          mwindowsp.os_execwait.cflags i64 
    local          mwindowsp.os_execwait.si block:104 
    local          mwindowsp.os_execwait.xpi block:24 
    procentry                 
    push           0          i64 
    pop            mwindowsp.os_execwait.cflags i64 
    push           &mwindowsp.os_execwait.si 
    clear                     block:104 
    push           &mwindowsp.os_execwait.xpi 
    clear                     block:24 
    push           mwindowsp.os_execwait.newconsole i64 
    switch         #11291     0 2
    opnd           #11292     
#11291: 
    switchlabel    #11293     
    switchlabel    #11294     
    switchlabel    #11295     
    endswitch                 
#11293: 
    push           32         i64 
    pop            mwindowsp.os_execwait.cflags i64 
    jump           #11296     
#11294: 
    push           48         i64 
    pop            mwindowsp.os_execwait.cflags i64 
    jump           #11296     
#11295: 
    push           48         i64 
    pop            mwindowsp.os_execwait.cflags i64 
    jump           #11296     
#11292: 
#11296: 
    push           104        i64 
    push           &mwindowsp.os_execwait.si 
    push           0          
    popptroff                 u32 1 0
    setargs                   10 0
    push           &mwindowsp.os_execwait.xpi 
    push           &mwindowsp.os_execwait.si 
    push           0          u64 
    push           0          u64 
    push           mwindowsp.os_execwait.cflags i64 
    push           1          i64 
    push           0          u64 
    push           0          u64 
    push           mwindowsp.os_execwait.cmdline u64 
    push           0          u64 
    callfn         &`CreateProcessA i64 
    pop            mwindowsp.os_execwait.status i64 
    push           mwindowsp.os_execwait.status i64 
    push           0          i64 
    jumpne         #11297     i64 
    setargs                   0 0
    callfn         &`GetLastError u32 
    pop            mwindowsp.os_execwait.status i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Winexec error:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mwindowsp.os_execwait.status i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           -1         i64 
    setret                    i64 
    jump           #11298     
#11297: 
    setargs                   2 0
    push           4294967295 i64 
    push           &mwindowsp.os_execwait.xpi 
    pushptr                   u64 
    callproc       &`WaitForSingleObject 
    setargs                   2 0
    push           &mwindowsp.os_execwait.exitcode 
    push           &mwindowsp.os_execwait.xpi 
    pushptr                   u64 
    callproc       &`GetExitCodeProcess 
    setargs                   1 0
    push           &mwindowsp.os_execwait.xpi 
    pushptr                   u64 
    callproc       &`CloseHandle 
    setargs                   1 0
    push           &mwindowsp.os_execwait.xpi 
    push           8          
    pushptroff                u64 1 0
    callproc       &`CloseHandle 
    push           mwindowsp.os_execwait.exitcode u32 
    setret                    i64 
    jump           #11298     
#11298: 
    retfn                     i64 
End


Proc mwindowsp.os_execcmd: i64
    param          mwindowsp.os_execcmd.cmdline u64 
    param          mwindowsp.os_execcmd.newconsole i64 
    local          mwindowsp.os_execcmd.exitcode u32 
    local          mwindowsp.os_execcmd.i i64 
    local          mwindowsp.os_execcmd.j i64 
    local          mwindowsp.os_execcmd.k i64 
    local          mwindowsp.os_execcmd.si block:104 
    local          mwindowsp.os_execcmd.xpi block:24 
    procentry                 
    push           &mwindowsp.os_execcmd.si 
    clear                     block:104 
    push           &mwindowsp.os_execcmd.xpi 
    clear                     block:24 
    push           104        i64 
    push           &mwindowsp.os_execcmd.si 
    push           0          
    popptroff                 u32 1 0
    setargs                   10 0
    push           &mwindowsp.os_execcmd.xpi 
    push           &mwindowsp.os_execcmd.si 
    push           0          u64 
    push           0          u64 
    push           32         i64 
    startmult                 
    push           mwindowsp.os_execcmd.newconsole i64 
    jumpfalse      #11300     i64 
    push           16         i64 
    resetmult                 
    jump           #11301     
#11300: 
    push           0          i64 
    endmult                   
#11301: 
    ior                       i64 
    push           1          i64 
    push           0          u64 
    push           0          u64 
    push           mwindowsp.os_execcmd.cmdline u64 
    push           0          u64 
    callproc       &`CreateProcessA 
    setargs                   1 0
    push           &mwindowsp.os_execcmd.xpi 
    pushptr                   u64 
    callproc       &`CloseHandle 
    setargs                   1 0
    push           &mwindowsp.os_execcmd.xpi 
    push           8          
    pushptroff                u64 1 0
    callproc       &`CloseHandle 
    push           1          i64 
    setret                    i64 
    jump           #11302     
#11302: 
    retfn                     i64 
End


Proc mwindowsp.os_getch: i64
    local          mwindowsp.os_getch.k i64 
    procentry                 
    setargs                   0 0
    callfn         &mwindowsp.os_getchx i64 
    push           255        i64 
    iand                      i64 
    pop            mwindowsp.os_getch.k i64 
    push           mwindowsp.os_getch.k i64 
    setret                    i64 
    jump           #11304     
#11304: 
    retfn                     i64 
End


Proc mwindowsp.os_kbhit: i64
    local          mwindowsp.os_kbhit.count u32 
    procentry                 
    push           mwindowsp.init_flag i64 
    jumptrue       #11306     i64 
    setargs                   0 0
    callproc       &mwindowsp.os_init 
#11306: 
    setargs                   2 0
    push           &mwindowsp.os_kbhit.count 
    push           mwindowsp.hconsolein u64 
    callproc       &`GetNumberOfConsoleInputEvents 
    push           mwindowsp.os_kbhit.count u32 
    push           1          i64 
    setgt                     i64 
    setret                    i64 
    jump           #11307     
#11307: 
    retfn                     i64 
End


Proc mwindowsp.os_flushkeys:
    procentry                 
    setargs                   1 0
    push           mwindowsp.hconsolein u64 
    callproc       &`FlushConsoleInputBuffer 
#11309: 
    retproc                   
End


Proc mwindowsp.os_getconsolein: u64
    procentry                 
    push           mwindowsp.hconsolein u64 
    setret                    u64 
    jump           #11311     
#11311: 
    retfn                     u64 
End


Proc mwindowsp.os_getconsoleout: u64
    procentry                 
    push           mwindowsp.hconsole u64 
    setret                    u64 
    jump           #11313     
#11313: 
    retfn                     u64 
End


Proc mwindowsp.os_proginstance: u64
    procentry                 
    setargs                   1 0
    push           "PROGINST" u64 
    callproc       &mlibp.abortprogram 
    push           0          u64 
    setret                    u64 
    jump           #11315     
#11315: 
    retfn                     u64 
End


Proc mwindowsp.os_getdllinst: u64
    param          mwindowsp.os_getdllinst.name u64 
    local          mwindowsp.os_getdllinst.hinst u64 
    procentry                 
    setargs                   1 0
    push           mwindowsp.os_getdllinst.name u64 
    callfn         &`LoadLibraryA u64 
    pop            mwindowsp.os_getdllinst.hinst u64 
    push           mwindowsp.os_getdllinst.hinst u64 
    setret                    u64 
    jump           #11317     
#11317: 
    retfn                     u64 
End


Proc mwindowsp.os_getdllprocaddr: u64
    param          mwindowsp.os_getdllprocaddr.hinst i64 
    param          mwindowsp.os_getdllprocaddr.name u64 
    procentry                 
    setargs                   2 0
    push           mwindowsp.os_getdllprocaddr.name u64 
    push           mwindowsp.os_getdllprocaddr.hinst u64 
    callfn         &`GetProcAddress u64 
    setret                    u64 
    jump           #11319     
#11319: 
    retfn                     u64 
End


Proc mwindowsp.os_initwindows:
    procentry                 
    setargs                   0 0
    callproc       &mwindowsp.os_init 
    setargs                   1 0
    push           "pcc001"   u64 
    callproc       &mwindowsp.os_gxregisterclass 
#11321: 
    retproc                   
End


Proc mwindowsp.os_gxregisterclass:
    param          mwindowsp.os_gxregisterclass.classname u64 
    local          mwindowsp.os_gxregisterclass.r block:80 
    procentry                 
    push           mwindowsp.os_gxregisterclass.registered u8 
    jumpfalse      #11323     i64 
    jump           #11324     
#11323: 
    push           &mwindowsp.os_gxregisterclass.r 
    clear                     block:80 
    push           80         i64 
    push           &mwindowsp.os_gxregisterclass.r 
    push           0          
    popptroff                 u32 1 0
    push           40         i64 
    push           &mwindowsp.os_gxregisterclass.r 
    push           4          
    popptroff                 u32 1 0
    push           &mwindowsp.mainwndproc 
    push           &mwindowsp.os_gxregisterclass.r 
    push           8          
    popptroff                 u64 1 0
    push           0          u64 
    push           &mwindowsp.os_gxregisterclass.r 
    push           24         
    popptroff                 u64 1 0
    push           0          u64 
    push           &mwindowsp.os_gxregisterclass.r 
    push           32         
    popptroff                 u64 1 0
    setargs                   2 0
    push           32512      u64 
    push           0          u64 
    callfn         &`LoadCursorA u64 
    push           &mwindowsp.os_gxregisterclass.r 
    push           40         
    popptroff                 u64 1 0
    push           16         u64 
    push           &mwindowsp.os_gxregisterclass.r 
    push           48         
    popptroff                 u64 1 0
    push           0          u64 
    push           &mwindowsp.os_gxregisterclass.r 
    push           56         
    popptroff                 u64 1 0
    push           mwindowsp.os_gxregisterclass.classname u64 
    push           &mwindowsp.os_gxregisterclass.r 
    push           64         
    popptroff                 u64 1 0
    push           0          u64 
    push           &mwindowsp.os_gxregisterclass.r 
    push           72         
    popptroff                 u64 1 0
    setargs                   1 0
    push           &mwindowsp.os_gxregisterclass.r 
    callfn         &`RegisterClassExA u32 
    push           0          i64 
    jumpne         #11325     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mwindowsp.os_gxregisterclass.classname u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &`GetLastError 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Registerclass error" u64 
    callproc       &mlibp.abortprogram 
#11325: 
    push           1          i64 
    pop            mwindowsp.os_gxregisterclass.registered u8 
#11324: 
    retproc                   
End


Proc mwindowsp.mainwndproc: i64
    param          mwindowsp.mainwndproc.hwnd u64 
    param          mwindowsp.mainwndproc.message u32 
    param          mwindowsp.mainwndproc.wparam u64 
    param          mwindowsp.mainwndproc.lparam u64 
    local          mwindowsp.mainwndproc.m block:48 
    local          mwindowsp.mainwndproc.i i64 
    local          mwindowsp.mainwndproc.result i64 
    local          mwindowsp.mainwndproc.l i64 
    procentry                 
    push           mwindowsp.mainwndproc.hwnd u64 
    push           &mwindowsp.mainwndproc.m 
    push           0          
    popptroff                 u64 1 0
    push           mwindowsp.mainwndproc.message u32 
    push           &mwindowsp.mainwndproc.m 
    push           8          
    popptroff                 u32 1 0
    push           mwindowsp.mainwndproc.wparam u64 
    push           &mwindowsp.mainwndproc.m 
    push           16         
    popptroff                 u64 1 0
    push           mwindowsp.mainwndproc.lparam u64 
    push           &mwindowsp.mainwndproc.m 
    push           24         
    popptroff                 u64 1 0
    push           0          i64 
    push           &mwindowsp.mainwndproc.m 
    push           40         
    popptroff                 i32 1 0
    push           0          i64 
    push           &mwindowsp.mainwndproc.m 
    push           44         
    popptroff                 i32 1 0
    push           mwindowsp.wndproc_callbackfn u64 
    jumpfalse      #11327     u64 
    setargs                   1 0
    push           &mwindowsp.mainwndproc.m 
    push           mwindowsp.wndproc_callbackfn u64 
    callfnptr                 i64 
    pop            mwindowsp.mainwndproc.result i64 
    jump           #11328     
#11327: 
    push           0          i64 
    pop            mwindowsp.mainwndproc.result i64 
#11328: 
    push           &mwindowsp.mainwndproc.m 
    push           8          
    pushptroff                u32 1 0
    push           2          i64 
    jumpne         #11329     i64 
    push           0          i64 
    setret                    i64 
    jump           #11330     
#11329: 
    startmult                 
    push           mwindowsp.mainwndproc.result i64 
    jumptrue       #11331     i64 
    setargs                   4 0
    push           mwindowsp.mainwndproc.lparam u64 
    push           mwindowsp.mainwndproc.wparam u64 
    push           mwindowsp.mainwndproc.message u32 
    push           mwindowsp.mainwndproc.hwnd u64 
    callfn         &`DefWindowProcA i64 
    resetmult                 
    jump           #11332     
#11331: 
    push           0          i64 
    endmult                   
#11332: 
    setret                    i64 
    jump           #11330     
#11330: 
    retfn                     i64 
End


Proc mwindowsp.timerproc:
    param          mwindowsp.timerproc.hwnd u64 
    param          mwindowsp.timerproc.msg i64 
    param          mwindowsp.timerproc.id i64 
    param          mwindowsp.timerproc.time i64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "TIMERPROC" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#11334: 
    retproc                   
End


Proc mwindowsp.os_testcallback:
    param          mwindowsp.os_testcallback.p u64 
    procentry                 
    push           mwindowsp.wndproc_callbackfn u64 
    jumpfalse      #11336     u64 
    setargs                   1 0
    push           mwindowsp.os_testcallback.p u64 
    push           mwindowsp.wndproc_callbackfn u64 
    callprocptr               
    jump           #11337     
#11336: 
    setargs                   1 0
    push           "MESS HANDLER NOT DEFINED" u64 
    callproc       &mlibp.abortprogram 
#11337: 
#11338: 
    retproc                   
End


Proc mwindowsp.os_setmesshandler:
    param          mwindowsp.os_setmesshandler.addr u64 
    procentry                 
    push           mwindowsp.os_setmesshandler.addr u64 
    pop            mwindowsp.wndproc_callbackfn u64 
#11340: 
    retproc                   
End


Proc mwindowsp.os_getchx: i64
    local          mwindowsp.os_getchx.count i64 
    local          mwindowsp.os_getchx.charcode i64 
    local          mwindowsp.os_getchx.keyshift i64 
    local          mwindowsp.os_getchx.keycode i64 
    local          mwindowsp.os_getchx.altdown i64 
    local          mwindowsp.os_getchx.ctrldown i64 
    local          mwindowsp.os_getchx.shiftdown i64 
    local          mwindowsp.os_getchx.capslock i64 
    procentry                 
    push           mwindowsp.init_flag i64 
    jumptrue       #11342     i64 
    setargs                   0 0
    callproc       &mwindowsp.os_init 
#11342: 
    push           mwindowsp.keypending i64 
    jumpfalse      #11343     i64 
    push           mwindowsp.pendkey block:20 
    pop            mwindowsp.lastkey block:20 
    push           0          i64 
    pop            mwindowsp.keypending i64 
    jump           #11344     
#11343: 
    push           &mwindowsp.lastkey 
    push           8          
    pushptroff                u16 1 0
    push           0          i64 
    jumpne         #11345     i64 
#11346: 
    push           0          i64 
    pop            mwindowsp.os_getchx.count i64 
    setargs                   4 0
    push           &mwindowsp.os_getchx.count 
    push           1          i64 
    push           &mwindowsp.lastkey 
    push           mwindowsp.hconsolein u64 
    callproc       &`ReadConsoleInputA 
#11347: 
    push           &mwindowsp.lastkey 
    pushptr                   u16 
    push           1          i64 
    jumpne         #11346     i64 
    push           &mwindowsp.lastkey 
    push           4          
    pushptroff                u32 1 0
    push           1          i64 
    jumpne         #11346     i64 
#11348: 
#11345: 
#11344: 
    startmult                 
    push           &mwindowsp.lastkey 
    push           16         
    pushptroff                u32 1 0
    push           3          i64 
    iand                      i64 
    jumpfalse      #11349     i64 
    push           1          i64 
    resetmult                 
    jump           #11350     
#11349: 
    push           0          i64 
    endmult                   
#11350: 
    pop            mwindowsp.os_getchx.altdown i64 
    startmult                 
    push           &mwindowsp.lastkey 
    push           16         
    pushptroff                u32 1 0
    push           12         i64 
    iand                      i64 
    jumpfalse      #11351     i64 
    push           1          i64 
    resetmult                 
    jump           #11352     
#11351: 
    push           0          i64 
    endmult                   
#11352: 
    pop            mwindowsp.os_getchx.ctrldown i64 
    startmult                 
    push           &mwindowsp.lastkey 
    push           16         
    pushptroff                u32 1 0
    push           16         i64 
    iand                      i64 
    jumpfalse      #11353     i64 
    push           1          i64 
    resetmult                 
    jump           #11354     
#11353: 
    push           0          i64 
    endmult                   
#11354: 
    pop            mwindowsp.os_getchx.shiftdown i64 
    startmult                 
    push           &mwindowsp.lastkey 
    push           16         
    pushptroff                u32 1 0
    push           128        i64 
    iand                      i64 
    jumpfalse      #11355     i64 
    push           1          i64 
    resetmult                 
    jump           #11356     
#11355: 
    push           0          i64 
    endmult                   
#11356: 
    pop            mwindowsp.os_getchx.capslock i64 
    push           &mwindowsp.lastkey 
    push           8          
    addrefoff                 u64 1 0
    decr                      u16 1
    push           &mwindowsp.lastkey 
    push           14         
    pushptroff                u8 1 0
    pop            mwindowsp.os_getchx.charcode i64 
    push           &mwindowsp.lastkey 
    push           10         
    pushptroff                u16 1 0
    push           255        i64 
    iand                      i64 
    pop            mwindowsp.os_getchx.keycode i64 
    push           mwindowsp.os_getchx.charcode i64 
    push           0          i64 
    jumpge         #11357     i64 
    push           mwindowsp.os_getchx.charcode i64 
    push           -128       i64 
    jumpge         #11358     i64 
    push           0          i64 
    pop            mwindowsp.os_getchx.charcode i64 
    jump           #11359     
#11358: 
    push           &mwindowsp.os_getchx.charcode 
    push           256        i64 
    addto                     i64 
#11359: 
#11357: 
    push           mwindowsp.os_getchx.altdown i64 
    jumpfalse      #11360     i64 
    push           mwindowsp.os_getchx.ctrldown i64 
    jumpfalse      #11360     i64 
    push           mwindowsp.os_getchx.charcode i64 
    push           166        i64 
    jumpne         #11360     i64 
    push           0          i64 
    store          mwindowsp.os_getchx.ctrldown i64 
    pop            mwindowsp.os_getchx.altdown i64 
    jump           #11361     
#11360: 
    push           mwindowsp.os_getchx.altdown i64 
    jumptrue       #11362     i64 
    push           mwindowsp.os_getchx.ctrldown i64 
    jumpfalse      #11363     i64 
#11362: 
    push           0          i64 
    pop            mwindowsp.os_getchx.charcode i64 
    push           mwindowsp.os_getchx.keycode i64 
    push           65         i64 
    jumplt         #11364     i64 
    push           mwindowsp.os_getchx.keycode i64 
    push           90         i64 
    jumpgt         #11364     i64 
    push           mwindowsp.os_getchx.keycode i64 
    push           64         i64 
    sub                       i64 
    pop            mwindowsp.os_getchx.charcode i64 
#11364: 
#11363: 
#11361: 
    push           mwindowsp.os_getchx.capslock i64 
    push           3          i64 
    shl                       i64 
    push           mwindowsp.os_getchx.altdown i64 
    push           2          i64 
    shl                       i64 
    ior                       i64 
    push           mwindowsp.os_getchx.ctrldown i64 
    push           1          i64 
    shl                       i64 
    ior                       i64 
    push           mwindowsp.os_getchx.shiftdown i64 
    ior                       i64 
    pop            mwindowsp.os_getchx.keyshift i64 
    push           mwindowsp.os_getchx.keyshift i64 
    push           24         i64 
    shl                       i64 
    push           mwindowsp.os_getchx.keycode i64 
    push           16         i64 
    shl                       i64 
    ior                       i64 
    push           mwindowsp.os_getchx.charcode i64 
    ior                       i64 
    setret                    i64 
    jump           #11365     
#11365: 
    retfn                     i64 
End


Proc mwindowsp.os_getos: u64
    procentry                 
    push           "W64"      u64 
    setret                    u64 
    jump           #11367     
#11367: 
    retfn                     u64 
End


Proc mwindowsp.os_gethostsize: i64
    procentry                 
    push           64         i64 
    setret                    i64 
    jump           #11369     
#11369: 
    retfn                     i64 
End


Proc mwindowsp.os_shellexec: i64
    param          mwindowsp.os_shellexec.opc u64 
    param          mwindowsp.os_shellexec.file u64 
    procentry                 
    setargs                   1 0
    push           mwindowsp.os_shellexec.file u64 
    callfn         &system    i32 
    setret                    i64 
    jump           #11371     
#11371: 
    retfn                     i64 
End


Proc mwindowsp.os_sleep:
    param          mwindowsp.os_sleep.a i64 
    procentry                 
    setargs                   1 0
    push           mwindowsp.os_sleep.a i64 
    callproc       &`Sleep    
#11373: 
    retproc                   
End


Proc mwindowsp.os_getstdin: u64
    procentry                 
    setargs                   2 0
    push           "rb"       u64 
    push           "con"      u64 
    callfn         &fopen     u64 
    setret                    u64 
    jump           #11375     
#11375: 
    retfn                     u64 
End


Proc mwindowsp.os_getstdout: u64
    procentry                 
    setargs                   2 0
    push           "wb"       u64 
    push           "con"      u64 
    callfn         &fopen     u64 
    setret                    u64 
    jump           #11377     
#11377: 
    retfn                     u64 
End


Proc mwindowsp.os_gethostname: u64
    procentry                 
    setargs                   3 0
    push           300        i64 
    push           &mwindowsp.os_gethostname.name 
    push           0          u64 
    callproc       &`GetModuleFileNameA 
    push           &mwindowsp.os_gethostname.name 
    setret                    u64 
    jump           #11379     
#11379: 
    retfn                     u64 
End


Proc mwindowsp.os_getmpath: u64
    procentry                 
    push           "C:\\m\\"  u64 
    setret                    u64 
    jump           #11381     
#11381: 
    retfn                     u64 
End


Proc mwindowsp.os_exitprocess:
    param          mwindowsp.os_exitprocess.x i64 
    procentry                 
    push           mwindowsp.os_exitprocess.x i64 
    stop                      
#11383: 
    retproc                   
End


Proc mwindowsp.os_clock: i64
    procentry                 
    setargs                   0 0
    callfn         &clock     i32 
    setret                    i64 
    jump           #11385     
#11385: 
    retfn                     i64 
End


Proc mwindowsp.os_ticks: i64
    procentry                 
    setargs                   0 0
    callfn         &`GetTickCount64 i64 
    setret                    i64 
    jump           #11387     
#11387: 
    retfn                     i64 
End


Proc mwindowsp.os_getclockspersec: i64
    procentry                 
    push           1000       i64 
    setret                    i64 
    jump           #11389     
#11389: 
    retfn                     i64 
End


Proc mwindowsp.os_iswindows: i64
    procentry                 
    push           1          i64 
    setret                    i64 
    jump           #11391     
#11391: 
    retfn                     i64 
End


Proc mwindowsp.os_filelastwritetime: i64
    param          mwindowsp.os_filelastwritetime.filename u64 
    local          mwindowsp.os_filelastwritetime.f u64 
    local          mwindowsp.os_filelastwritetime.ctime i64 
    local          mwindowsp.os_filelastwritetime.atime i64 
    local          mwindowsp.os_filelastwritetime.wtime i64 
    procentry                 
    push           mwindowsp.os_filelastwritetime.filename u64 
    push           0          u64 
    jumpne         #11393     u64 
    push           1          i64 
    setret                    i64 
    jump           #11394     
#11393: 
    setargs                   7 0
    push           0          u64 
    push           3          i64 
    push           3          i64 
    push           0          u64 
    push           1          i64 
    push           2147483648 i64 
    push           mwindowsp.os_filelastwritetime.filename u64 
    callfn         &`CreateFileA u64 
    pop            mwindowsp.os_filelastwritetime.f u64 
    push           mwindowsp.os_filelastwritetime.f i64 
    push           -1         i64 
    jumpne         #11395     i64 
    push           0          i64 
    setret                    i64 
    jump           #11394     
#11395: 
    setargs                   4 0
    push           &mwindowsp.os_filelastwritetime.wtime 
    push           &mwindowsp.os_filelastwritetime.atime 
    push           &mwindowsp.os_filelastwritetime.ctime 
    push           mwindowsp.os_filelastwritetime.f u64 
    callproc       &`GetFileTime 
    setargs                   1 0
    push           mwindowsp.os_filelastwritetime.f u64 
    callproc       &`CloseHandle 
    push           mwindowsp.os_filelastwritetime.wtime i64 
    setret                    i64 
    jump           #11394     
#11394: 
    retfn                     i64 
End


Proc mwindowsp.os_getsystime:
    param          mwindowsp.os_getsystime.tm u64 
    procentry                 
    setargs                   1 0
    push           mwindowsp.os_getsystime.tm u64 
    callproc       &`GetLocalTime 
#11397: 
    retproc                   
End


Proc mwindowsp.os_messagebox:
    param          mwindowsp.os_messagebox.s u64 
    param          mwindowsp.os_messagebox.t u64 
    procentry                 
    setargs                   4 0
    push           0          i64 
    push           mwindowsp.os_messagebox.t u64 
    push           mwindowsp.os_messagebox.s u64 
    push           0          i64 
    callproc       &`MessageBoxA 
#11399: 
    retproc                   
End


Proc mwindowsp.os_hpcounter: i64
    local          mwindowsp.os_hpcounter.a i64 
    procentry                 
    setargs                   1 0
    push           &mwindowsp.os_hpcounter.a 
    callproc       &`QueryPerformanceCounter 
    push           mwindowsp.os_hpcounter.a i64 
    setret                    i64 
    jump           #11401     
#11401: 
    retfn                     i64 
End


Proc mwindowsp.os_hpfrequency: i64
    local          mwindowsp.os_hpfrequency.a i64 
    procentry                 
    setargs                   1 0
    push           &mwindowsp.os_hpfrequency.a 
    callproc       &`QueryPerformanceFrequency 
    push           mwindowsp.os_hpfrequency.a i64 
    setret                    i64 
    jump           #11403     
#11403: 
    retfn                     i64 
End


Proc mwindowsp.os_peek:
    local          mwindowsp.os_peek.ticks i64 
    local          mwindowsp.os_peek.m block:100 
    procentry                 
    setargs                   0 0
    callfn         &`GetTickCount64 i64 
    pop            mwindowsp.os_peek.ticks i64 
    push           mwindowsp.os_peek.ticks i64 
    push           mwindowsp.os_peek.lastticks i64 
    sub                       i64 
    push           1000       i64 
    jumplt         #11405     i64 
    push           mwindowsp.os_peek.ticks i64 
    pop            mwindowsp.os_peek.lastticks i64 
    setargs                   5 0
    push           0          i64 
    push           0          i64 
    push           0          i64 
    push           0          u64 
    push           &mwindowsp.os_peek.m 
    callproc       &`PeekMessageA 
#11405: 
#11406: 
    retproc                   
End


Proc pc_lex.lex:
    local          pc_lex.lex.i i64 
    local          pc_lex.lex.c i64 
    local          pc_lex.lex.d i64 
    local          pc_lex.lex.hsum i64 
    local          pc_lex.lex.length i64 
    local          pc_lex.lex.pstart u64 
    procentry                 
    push           0          i64 
    pop            pc_lex.lxsubcode i64 
#11408: 
    push           &pc_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          pc_lex.lex.c i64 
    switch         #11409     0 122
    opnd           #11410     
#11409: 
    switchlabel    #11411     
    switchlabel    #11410     
    switchlabel    #11410     
    switchlabel    #11410     
    switchlabel    #11410     
    switchlabel    #11410     
    switchlabel    #11410     
    switchlabel    #11410     
    switchlabel    #11410     
    switchlabel    #11412     
    switchlabel    #11413     
    switchlabel    #11410     
    switchlabel    #11410     
    switchlabel    #11414     
    switchlabel    #11410     
    switchlabel    #11410     
    switchlabel    #11410     
    switchlabel    #11410     
    switchlabel    #11410     
    switchlabel    #11410     
    switchlabel    #11410     
    switchlabel    #11410     
    switchlabel    #11410     
    switchlabel    #11410     
    switchlabel    #11410     
    switchlabel    #11410     
    switchlabel    #11411     
    switchlabel    #11410     
    switchlabel    #11410     
    switchlabel    #11410     
    switchlabel    #11410     
    switchlabel    #11410     
    switchlabel    #11412     
    switchlabel    #11415     
    switchlabel    #11416     
    switchlabel    #11417     
    switchlabel    #11418     
    switchlabel    #11410     
    switchlabel    #11419     
    switchlabel    #11410     
    switchlabel    #11410     
    switchlabel    #11410     
    switchlabel    #11420     
    switchlabel    #11410     
    switchlabel    #11421     
    switchlabel    #11422     
    switchlabel    #11418     
    switchlabel    #11410     
    switchlabel    #11423     
    switchlabel    #11423     
    switchlabel    #11423     
    switchlabel    #11423     
    switchlabel    #11423     
    switchlabel    #11423     
    switchlabel    #11423     
    switchlabel    #11423     
    switchlabel    #11423     
    switchlabel    #11423     
    switchlabel    #11424     
    switchlabel    #11415     
    switchlabel    #11410     
    switchlabel    #11410     
    switchlabel    #11410     
    switchlabel    #11410     
    switchlabel    #11410     
    switchlabel    #11425     
    switchlabel    #11425     
    switchlabel    #11425     
    switchlabel    #11425     
    switchlabel    #11425     
    switchlabel    #11425     
    switchlabel    #11425     
    switchlabel    #11425     
    switchlabel    #11425     
    switchlabel    #11425     
    switchlabel    #11425     
    switchlabel    #11425     
    switchlabel    #11425     
    switchlabel    #11425     
    switchlabel    #11425     
    switchlabel    #11425     
    switchlabel    #11425     
    switchlabel    #11425     
    switchlabel    #11425     
    switchlabel    #11425     
    switchlabel    #11425     
    switchlabel    #11425     
    switchlabel    #11425     
    switchlabel    #11425     
    switchlabel    #11425     
    switchlabel    #11425     
    switchlabel    #11410     
    switchlabel    #11410     
    switchlabel    #11410     
    switchlabel    #11410     
    switchlabel    #11418     
    switchlabel    #11426     
    switchlabel    #11418     
    switchlabel    #11418     
    switchlabel    #11418     
    switchlabel    #11418     
    switchlabel    #11418     
    switchlabel    #11418     
    switchlabel    #11418     
    switchlabel    #11418     
    switchlabel    #11418     
    switchlabel    #11418     
    switchlabel    #11418     
    switchlabel    #11418     
    switchlabel    #11418     
    switchlabel    #11418     
    switchlabel    #11418     
    switchlabel    #11418     
    switchlabel    #11418     
    switchlabel    #11418     
    switchlabel    #11418     
    switchlabel    #11418     
    switchlabel    #11418     
    switchlabel    #11418     
    switchlabel    #11418     
    switchlabel    #11418     
    switchlabel    #11418     
    switchlabel    #11418     
    endswitch                 
#11418: 
    push           pc_lex.lxsptr u64 
    push           1          i64 
    subrefoff                 u64 1 0
    pop            pc_lex.lex.pstart u64 
!doname::
#11427: 
    push           pc_lex.lex.pstart u64 
    pushptr                   u8 
    pop            pc_lex.lex.hsum i64 
#11428: 
    push           &pc_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          pc_lex.lex.c i64 
    switch         #11429     36 122
    opnd           #11430     
#11429: 
    switchlabel    #11431     
    switchlabel    #11430     
    switchlabel    #11430     
    switchlabel    #11430     
    switchlabel    #11430     
    switchlabel    #11430     
    switchlabel    #11430     
    switchlabel    #11430     
    switchlabel    #11430     
    switchlabel    #11430     
    switchlabel    #11431     
    switchlabel    #11430     
    switchlabel    #11431     
    switchlabel    #11431     
    switchlabel    #11431     
    switchlabel    #11431     
    switchlabel    #11431     
    switchlabel    #11431     
    switchlabel    #11431     
    switchlabel    #11431     
    switchlabel    #11431     
    switchlabel    #11431     
    switchlabel    #11430     
    switchlabel    #11430     
    switchlabel    #11430     
    switchlabel    #11430     
    switchlabel    #11430     
    switchlabel    #11430     
    switchlabel    #11430     
    switchlabel    #11432     
    switchlabel    #11432     
    switchlabel    #11432     
    switchlabel    #11432     
    switchlabel    #11432     
    switchlabel    #11432     
    switchlabel    #11432     
    switchlabel    #11432     
    switchlabel    #11432     
    switchlabel    #11432     
    switchlabel    #11432     
    switchlabel    #11432     
    switchlabel    #11432     
    switchlabel    #11432     
    switchlabel    #11432     
    switchlabel    #11432     
    switchlabel    #11432     
    switchlabel    #11432     
    switchlabel    #11432     
    switchlabel    #11432     
    switchlabel    #11432     
    switchlabel    #11432     
    switchlabel    #11432     
    switchlabel    #11432     
    switchlabel    #11432     
    switchlabel    #11432     
    switchlabel    #11430     
    switchlabel    #11430     
    switchlabel    #11430     
    switchlabel    #11430     
    switchlabel    #11431     
    switchlabel    #11430     
    switchlabel    #11431     
    switchlabel    #11431     
    switchlabel    #11431     
    switchlabel    #11431     
    switchlabel    #11431     
    switchlabel    #11431     
    switchlabel    #11431     
    switchlabel    #11431     
    switchlabel    #11431     
    switchlabel    #11431     
    switchlabel    #11431     
    switchlabel    #11431     
    switchlabel    #11431     
    switchlabel    #11431     
    switchlabel    #11431     
    switchlabel    #11431     
    switchlabel    #11431     
    switchlabel    #11431     
    switchlabel    #11431     
    switchlabel    #11431     
    switchlabel    #11431     
    switchlabel    #11431     
    switchlabel    #11431     
    switchlabel    #11431     
    switchlabel    #11431     
    switchlabel    #11431     
    endswitch                 
#11431: 
    push           pc_lex.lex.hsum i64 
    push           4          i64 
    shl                       i64 
    push           pc_lex.lex.hsum i64 
    sub                       i64 
    push           pc_lex.lex.c i64 
    add                       i64 
    pop            pc_lex.lex.hsum i64 
    jump           #11428     
#11432: 
    push           pc_lex.lex.c i64 
    push           32         i64 
    add                       i64 
    push           pc_lex.lxsptr u64 
    push           1          i64 
    subrefoff                 u64 1 0
    popptr                    u8 
    push           pc_lex.lex.hsum i64 
    push           4          i64 
    shl                       i64 
    push           pc_lex.lex.hsum i64 
    sub                       i64 
    push           pc_lex.lex.c i64 
    add                       i64 
    push           32         i64 
    add                       i64 
    pop            pc_lex.lex.hsum i64 
    jump           #11428     
#11430: 
    push           &pc_lex.lxsptr 
    decr                      u64 1
    jump           #11433     
    jump           #11428     
#11433: 
    push           pc_lex.lxsptr u64 
    push           pc_lex.lex.pstart u64 
    subref                    i64 1
    pop            pc_lex.lxlength i64 
    push           pc_lex.lex.hsum i64 
    push           5          i64 
    shl                       i64 
    push           pc_lex.lex.hsum i64 
    sub                       i64 
    pop            pc_lex.lxhashvalue i64 
    push           0          i64 
    pop            pc_lex.lxtruename u8 
    setargs                   2 0
    push           pc_lex.lxlength i64 
    push           pc_lex.lex.pstart u64 
    callfn         &pc_lex.lookuplex i64 
    jumpfalse      #11434     i64 
    push           pc_lex.lxsymptr u64 
    push           25         
    pushptroff                u8 1 0
    jumpfalse      #11435     i64 
    push           pc_lex.lxsymptr u64 
    push           25         
    pushptroff                u8 1 0
    pop            pc_lex.lxsymbol i64 
    push           pc_lex.lxsymptr u64 
    push           26         
    pushptroff                u8 1 0
    pop            pc_lex.lxsubcode i64 
    jump           #11436     
#11435: 
    push           pc_lex.lxsymptr u64 
    push           24         
    pushptroff                u8 1 0
    pop            pc_lex.lxsymbol i64 
#11436: 
    jump           #11437     
#11434: 
    push           19         i64 
    pop            pc_lex.lxsymbol i64 
#11437: 
    jump           #11438     
    jump           #11408     
#11425: 
    push           pc_lex.lxsptr u64 
    push           1          i64 
    subrefoff                 u64 1 0
    pop            pc_lex.lex.pstart u64 
    push           pc_lex.lex.pstart u64 
    pushptr                   u8 
    push           32         i64 
    add                       i64 
    push           pc_lex.lex.pstart u64 
    storeptr                  u8 
    pop            pc_lex.lex.c i64 
    jump           #11427     
    jump           #11408     
#11423: 
    setargs                   2 0
    push           1          i64 
    push           pc_lex.lex.c i64 
    callproc       &pc_lex.readnumber 
    jump           #11438     
    jump           #11408     
#11426: 
    push           pc_lex.lxsptr u64 
    pop            pc_lex.lex.pstart u64 
    push           0          i64 
    pop            pc_lex.lex.hsum i64 
#11439: 
    push           pc_lex.lxsptr u64 
    pushptr                   u8 
    store          pc_lex.lex.c i64 
    switch         #11440     36 122
    opnd           #11441     
#11440: 
    switchlabel    #11442     
    switchlabel    #11441     
    switchlabel    #11441     
    switchlabel    #11441     
    switchlabel    #11441     
    switchlabel    #11441     
    switchlabel    #11441     
    switchlabel    #11441     
    switchlabel    #11441     
    switchlabel    #11441     
    switchlabel    #11442     
    switchlabel    #11441     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11441     
    switchlabel    #11441     
    switchlabel    #11441     
    switchlabel    #11441     
    switchlabel    #11441     
    switchlabel    #11441     
    switchlabel    #11441     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11441     
    switchlabel    #11441     
    switchlabel    #11441     
    switchlabel    #11441     
    switchlabel    #11442     
    switchlabel    #11441     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11442     
    switchlabel    #11442     
    endswitch                 
#11442: 
    push           &pc_lex.lxsptr 
    incr                      u64 1
    push           pc_lex.lex.hsum i64 
    push           4          i64 
    shl                       i64 
    push           pc_lex.lex.hsum i64 
    sub                       i64 
    push           pc_lex.lex.c i64 
    add                       i64 
    pop            pc_lex.lex.hsum i64 
    jump           #11439     
#11441: 
    jump           #11443     
    jump           #11439     
#11443: 
    push           19         i64 
    pop            pc_lex.lxsymbol i64 
    push           1          i64 
    pop            pc_lex.lxtruename u8 
    push           pc_lex.lex.pstart u64 
    push           pc_lex.lxsptr u64 
    jumpne         #11444     u64 
    setargs                   1 0
    push           "NULL ` name" u64 
    callproc       &pc_lex.lxerror 
#11444: 
    push           pc_lex.lxsptr u64 
    push           pc_lex.lex.pstart u64 
    subref                    i64 1
    pop            pc_lex.lxlength i64 
    push           pc_lex.lex.hsum i64 
    push           5          i64 
    shl                       i64 
    push           pc_lex.lex.hsum i64 
    sub                       i64 
    pop            pc_lex.lxhashvalue i64 
    setargs                   2 0
    push           pc_lex.lxlength i64 
    push           pc_lex.lex.pstart u64 
    callfn         &pc_lex.lookuplex i64 
    jumpfalse      #11445     i64 
    push           pc_lex.lxsymptr u64 
    push           24         
    pushptroff                u8 1 0
    pop            pc_lex.lxsymbol i64 
    push           pc_lex.lxsymbol i64 
    push           0          i64 
    jumpne         #11446     i64 
    push           19         i64 
    push           pc_lex.lxsymptr u64 
    push           24         
    storeptroff               u8 1 0
    pop            pc_lex.lxsymbol i64 
#11446: 
#11445: 
    jump           #11438     
    jump           #11408     
#11415: 
    jump           #11447     
#11448: 
#11447: 
    push           &pc_lex.commentmap 
    push           &pc_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    pushptroff                u8 1 0
    jumptrue       #11448     u64 
#11449: 
    push           pc_lex.lxsptr u64 
    push           1          i64 
    subrefoff                 u64 1 0
    pushptr                   u8 
    push           0          i64 
    jumpne         #11450     i64 
    push           &pc_lex.lxsptr 
    decr                      u64 1
#11450: 
    push           &pc_lex.lxlineno 
    incr                      i64 1
    push           12         i64 
    pop            pc_lex.lxsymbol i64 
    jump           #11438     
    jump           #11408     
#11417: 
    push           0          i64 
    pop            pc_lex.lxvalue i64 
#11451: 
    push           &pc_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          pc_lex.lex.c i64 
    switch         #11452     48 57
    opnd           #11453     
#11452: 
    switchlabel    #11454     
    switchlabel    #11454     
    switchlabel    #11454     
    switchlabel    #11454     
    switchlabel    #11454     
    switchlabel    #11454     
    switchlabel    #11454     
    switchlabel    #11454     
    switchlabel    #11454     
    switchlabel    #11454     
    endswitch                 
#11454: 
    push           pc_lex.lxvalue i64 
    push           10         i64 
    mul                       i64 
    push           pc_lex.lex.c i64 
    add                       i64 
    push           48         i64 
    sub                       i64 
    pop            pc_lex.lxvalue i64 
    jump           #11451     
#11453: 
    push           &pc_lex.lxsptr 
    decr                      u64 1
    jump           #11455     
    jump           #11451     
#11455: 
    push           pc_lex.lxvalue i64 
    push           0          i64 
    jumpne         #11456     i64 
    setargs                   1 0
    push           "Bad label" u64 
    callproc       &pc_lex.lxerror 
#11456: 
    push           pc_libpcl.labelnooffset i64 
    push           0          i64 
    jumpne         #11457     i64 
    push           &pc_libpcl.maxuserlabel 
    push           pc_lex.lxvalue i64 
    maxto                     i64 
    jump           #11458     
#11457: 
    push           &pc_lex.lxvalue 
    push           pc_libpcl.labelnooffset i64 
    addto                     i64 
#11458: 
    push           14         i64 
    pop            pc_lex.lxsymbol i64 
    jump           #11438     
    jump           #11408     
#11421: 
    push           2          i64 
    pop            pc_lex.lxsymbol i64 
    jump           #11438     
    jump           #11408     
#11424: 
    push           pc_lex.lxsptr u64 
    pushptr                   u8 
    push           58         i64 
    jumpne         #11459     i64 
    push           4          i64 
    pop            pc_lex.lxsymbol i64 
    push           &pc_lex.lxsptr 
    incr                      u64 1
    jump           #11460     
#11459: 
    push           3          i64 
    pop            pc_lex.lxsymbol i64 
#11460: 
    jump           #11438     
    jump           #11408     
#11422: 
    push           &pc_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    pop            pc_lex.lex.c i64 
    push           pc_lex.lex.c i64 
    push           48         u64 
    push           57         u64 
    jumpinrange    #11461     i64 
    setargs                   1 0
    push           "Bad no"   u64 
    callproc       &pc_lex.lxerror 
#11461: 
    setargs                   2 0
    push           -1         i64 
    push           pc_lex.lex.c i64 
    callproc       &pc_lex.readnumber 
    jump           #11438     
    jump           #11408     
#11420: 
    push           9          i64 
    pop            pc_lex.lxsymbol i64 
    jump           #11438     
    jump           #11408     
#11419: 
    push           10         i64 
    pop            pc_lex.lxsymbol i64 
    jump           #11438     
    jump           #11408     
#11416: 
    setargs                   0 0
    callproc       &pc_lex.readstring 
    jump           #11438     
    jump           #11408     
#11412: 
    jump           #11408     
#11414: 
    jump           #11408     
#11413: 
    push           &pc_lex.lxlineno 
    incr                      i64 1
    push           12         i64 
    pop            pc_lex.lxsymbol i64 
    jump           #11438     
    jump           #11408     
#11411: 
    push           13         i64 
    pop            pc_lex.lxsymbol i64 
    push           &pc_lex.lxsptr 
    decr                      u64 1
    jump           #11438     
    jump           #11408     
#11410: 
    push           1          i64 
    pop            pc_lex.lxsymbol i64 
    push           pc_lex.lex.c i64 
    pop            pc_lex.lxvalue i64 
    jump           #11438     
    jump           #11408     
#11462: 
#11438: 
    retproc                   
End


Proc pc_lex.initlex:
    local          pc_lex.initlex.i i64 
    procentry                 
    push           pc_lex.initlex.done u8 
    jumpfalse      #11464     i64 
    jump           #11465     
#11464: 
    push           0          i64 
    pop            pc_lex.lxsubcode i64 
    push           1          i64 
    pop            pc_lex.lxsymbol i64 
    push           0          i64 
    pop            pc_lex.lxlineno i64 
#11466: 
    push           0          i64 
    pop            pc_lex.initlex.i i64 
#11467: 
    push           pc_lex.initlex.i i64 
    switch         #11468     36 122
    opnd           #11469     
#11468: 
    switchlabel    #11470     
    switchlabel    #11469     
    switchlabel    #11469     
    switchlabel    #11469     
    switchlabel    #11469     
    switchlabel    #11469     
    switchlabel    #11469     
    switchlabel    #11469     
    switchlabel    #11469     
    switchlabel    #11469     
    switchlabel    #11469     
    switchlabel    #11469     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11469     
    switchlabel    #11469     
    switchlabel    #11469     
    switchlabel    #11469     
    switchlabel    #11469     
    switchlabel    #11469     
    switchlabel    #11469     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11469     
    switchlabel    #11469     
    switchlabel    #11469     
    switchlabel    #11469     
    switchlabel    #11470     
    switchlabel    #11469     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11470     
    switchlabel    #11470     
    endswitch                 
#11470: 
    push           1          u64 
    push           &pc_lex.alphamap 
    push           pc_lex.initlex.i i64 
    popptroff                 u8 1 0
    jump           #11471     
#11469: 
#11471: 
    push           pc_lex.initlex.i i64 
    switch         #11472     48 57
    opnd           #11473     
#11472: 
    switchlabel    #11474     
    switchlabel    #11474     
    switchlabel    #11474     
    switchlabel    #11474     
    switchlabel    #11474     
    switchlabel    #11474     
    switchlabel    #11474     
    switchlabel    #11474     
    switchlabel    #11474     
    switchlabel    #11474     
    endswitch                 
#11474: 
    push           1          u64 
    push           &pc_lex.digitmap 
    push           pc_lex.initlex.i i64 
    popptroff                 u8 1 0
    jump           #11475     
#11473: 
#11475: 
    push           1          u64 
    push           &pc_lex.commentmap 
    push           pc_lex.initlex.i i64 
    popptroff                 u8 1 0
#11476: 
    forup          #11467     i64 1
    opnd           pc_lex.initlex.i 
    opnd           255        
#11477: 
    push           0          u64 
    push           &pc_lex.commentmap 
    push           0          i64 
    popptroff                 u8 1 0
    push           0          u64 
    push           &pc_lex.commentmap 
    push           10         i64 
    popptroff                 u8 1 0
    setargs                   0 0
    callproc       &pc_lex.inithashtable 
    push           1          i64 
    pop            pc_lex.initlex.done u8 
#11465: 
    retproc                   
End


Proc pc_lex.readreal:
    param          pc_lex.readreal.s u64 
    param          pc_lex.readreal.slen i64 
    local          pc_lex.readreal.c i64 
    procentry                 
    push           pc_lex.lxsptr u64 
    pushptr                   u8 
    pop            pc_lex.readreal.c i64 
    push           0          i64 
    push           pc_lex.lxsptr u64 
    popptr                    u8 
    setargs                   2 0
    push           0          u64 
    push           pc_lex.readreal.s u64 
    callfn         &strtod    r64 
    pop            pc_lex.lxxvalue r64 
    push           pc_lex.readreal.c i64 
    push           pc_lex.lxsptr u64 
    popptr                    u8 
    push           16         i64 
    pop            pc_lex.lxsymbol i64 
#11479: 
    retproc                   
End


Proc pc_lex.readnumber:
    param          pc_lex.readnumber.c i64 
    param          pc_lex.readnumber.signx i64 
    local          pc_lex.readnumber.str block:256 
    local          pc_lex.readnumber.i i64 
    local          pc_lex.readnumber.d i64 
    local          pc_lex.readnumber.intlen i64 
    local          pc_lex.readnumber.slen i64 
    local          pc_lex.readnumber.isfloat i64 
    local          pc_lex.readnumber.sepseen i64 
    local          pc_lex.readnumber.s u64 
    procentry                 
    push           pc_lex.lxsptr u64 
    pushptr                   u8 
    pop            pc_lex.readnumber.d i64 
    push           pc_lex.readnumber.d i64 
    push           120        i64 
    casejumpeq     #11481     i64 0
    push           88         i64 
    casejumpeq     #11481     i64 0
    popstack                  i64 
    jump           #11482     
#11481: 
    push           pc_lex.readnumber.c i64 
    push           48         i64 
    casejumpeq     #11483     i64 0
    popstack                  i64 
    jump           #11484     
#11483: 
    push           &pc_lex.lxsptr 
    incr                      u64 1
    setargs                   0 0
    callproc       &pc_lex.readhex 
    push           &pc_lex.lxvalue 
    push           pc_lex.readnumber.signx i64 
    multo                     i64 
    jump           #11485     
    jump           #11486     
#11484: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           pc_lex.readnumber.c i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Base not supported" u64 
    callproc       &pc_lex.lxerror 
#11486: 
    jump           #11487     
#11482: 
#11487: 
    push           pc_lex.readnumber.c u64 
    push           &pc_lex.readnumber.str 
    push           1          i64 
    popptroff                 u8 1 -1
    push           pc_lex.lxsptr u64 
    push           1          i64 
    subrefoff                 u64 1 0
    pop            pc_lex.readnumber.s u64 
    push           1          i64 
    pop            pc_lex.readnumber.slen i64 
    push           0          i64 
    store          pc_lex.readnumber.sepseen i64 
    pop            pc_lex.readnumber.isfloat i64 
#11488: 
    push           &pc_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          pc_lex.readnumber.c i64 
    switch         #11489     39 101
    opnd           #11490     
#11489: 
    switchlabel    #11491     
    switchlabel    #11490     
    switchlabel    #11490     
    switchlabel    #11490     
    switchlabel    #11492     
    switchlabel    #11490     
    switchlabel    #11492     
    switchlabel    #11493     
    switchlabel    #11490     
    switchlabel    #11494     
    switchlabel    #11494     
    switchlabel    #11494     
    switchlabel    #11494     
    switchlabel    #11494     
    switchlabel    #11494     
    switchlabel    #11494     
    switchlabel    #11494     
    switchlabel    #11494     
    switchlabel    #11494     
    switchlabel    #11490     
    switchlabel    #11490     
    switchlabel    #11490     
    switchlabel    #11490     
    switchlabel    #11490     
    switchlabel    #11490     
    switchlabel    #11490     
    switchlabel    #11490     
    switchlabel    #11490     
    switchlabel    #11490     
    switchlabel    #11490     
    switchlabel    #11495     
    switchlabel    #11490     
    switchlabel    #11490     
    switchlabel    #11490     
    switchlabel    #11490     
    switchlabel    #11490     
    switchlabel    #11490     
    switchlabel    #11490     
    switchlabel    #11490     
    switchlabel    #11490     
    switchlabel    #11490     
    switchlabel    #11490     
    switchlabel    #11490     
    switchlabel    #11490     
    switchlabel    #11490     
    switchlabel    #11490     
    switchlabel    #11490     
    switchlabel    #11490     
    switchlabel    #11490     
    switchlabel    #11490     
    switchlabel    #11490     
    switchlabel    #11490     
    switchlabel    #11490     
    switchlabel    #11490     
    switchlabel    #11490     
    switchlabel    #11490     
    switchlabel    #11491     
    switchlabel    #11490     
    switchlabel    #11490     
    switchlabel    #11490     
    switchlabel    #11490     
    switchlabel    #11490     
    switchlabel    #11495     
    endswitch                 
#11494: 
    push           pc_lex.readnumber.c u64 
    push           &pc_lex.readnumber.str 
    push           &pc_lex.readnumber.slen 
    incrload                  i64 1
    popptroff                 u8 1 -1
    jump           #11488     
#11491: 
    push           1          i64 
    pop            pc_lex.readnumber.sepseen i64 
    jump           #11488     
#11493: 
    push           pc_lex.readnumber.isfloat i64 
    jumpfalse      #11496     i64 
    setargs                   1 0
    push           "float?"   u64 
    callproc       &pc_lex.lxerror 
#11496: 
    push           1          i64 
    pop            pc_lex.readnumber.isfloat i64 
    push           pc_lex.readnumber.slen i64 
    pop            pc_lex.readnumber.intlen i64 
    jump           #11488     
#11495: 
    push           pc_lex.readnumber.isfloat i64 
    push           2          i64 
    jumpne         #11497     i64 
    setargs                   1 0
    push           "float?"   u64 
    callproc       &pc_lex.lxerror 
#11497: 
    push           2          i64 
    pop            pc_lex.readnumber.isfloat i64 
    jump           #11488     
#11492: 
    push           pc_lex.readnumber.isfloat i64 
    push           2          i64 
    jumpeq         #11498     i64 
    setargs                   1 0
    push           "float?"   u64 
    callproc       &pc_lex.lxerror 
#11498: 
    push           3          i64 
    pop            pc_lex.readnumber.isfloat i64 
    jump           #11488     
#11490: 
    push           &pc_lex.lxsptr 
    decr                      u64 1
    jump           #11499     
    jump           #11488     
#11499: 
    push           pc_lex.readnumber.isfloat i64 
    jumpfalse      #11500     i64 
    push           pc_lex.readnumber.sepseen i64 
    jumpfalse      #11501     i64 
    setargs                   1 0
    push           "seps in float?" u64 
    callproc       &pc_lex.lxerror 
#11501: 
    setargs                   2 0
    push           pc_lex.lxsptr u64 
    push           pc_lex.readnumber.s u64 
    subref                    i64 1
    push           pc_lex.readnumber.s u64 
    callproc       &pc_lex.readreal 
    push           &pc_lex.lxxvalue 
    push           pc_lex.readnumber.signx i64 
    float                     r64 i64 
    multo                     r64 
    jump           #11485     
#11500: 
    push           pc_lex.readnumber.slen i64 
    push           20         i64 
    jumpgt         #11502     i64 
    push           pc_lex.readnumber.slen i64 
    push           20         i64 
    jumpne         #11503     i64 
    setargs                   2 0
    push           "18446744073709551615" u64 
    push           &pc_lex.readnumber.str 
    callfn         &mlibp.cmpstring i64 
    push           0          i64 
    jumple         #11503     i64 
#11502: 
    push           pc_lex.readnumber.slen i64 
    push           39         i64 
    jumpgt         #11504     i64 
    push           pc_lex.readnumber.slen i64 
    push           39         i64 
    jumpne         #11505     i64 
    setargs                   3 0
    push           39         u64 
    push           "340282366920938463463374607431768211455" u64 
    push           pc_lex.readnumber.s u64 
    callfn         &strncmp   i32 
    push           0          i64 
    jumple         #11505     i64 
#11504: 
    setargs                   1 0
    push           "Overflows 128 bits" u64 
    callproc       &pc_lex.lxerror 
#11505: 
    setargs                   3 0
    push           10         i64 
    push           pc_lex.readnumber.slen i64 
    push           &pc_lex.readnumber.str 
    callproc       &pc_lex.stringtonumber128 
    jump           #11485     
#11503: 
    push           15         i64 
    pop            pc_lex.lxsymbol i64 
    push           0          i64 
    pop            pc_lex.lxvalue i64 
#11506: 
    push           1          i64 
    pop            pc_lex.readnumber.i i64 
    push           pc_lex.readnumber.slen i64 
    push           1          i64 
    jumplt         #11507     i64 
#11508: 
    push           pc_lex.lxvalue i64 
    push           10         i64 
    mul                       i64 
    push           &pc_lex.readnumber.str 
    push           pc_lex.readnumber.i i64 
    pushptroff                u8 1 -1
    add                       i64 
    push           48         i64 
    sub                       i64 
    pop            pc_lex.lxvalue i64 
#11509: 
    forup          #11508     i64 1
    opnd           pc_lex.readnumber.i 
    opnd           pc_lex.readnumber.slen 
#11507: 
    push           &pc_lex.lxvalue 
    push           pc_lex.readnumber.signx i64 
    multo                     i64 
#11485: 
    retproc                   
End


Proc pc_lex.readhex:
    local          pc_lex.readhex.ndigs i64 
    local          pc_lex.readhex.c i64 
    procentry                 
    push           0          i64 
    pop            pc_lex.readhex.ndigs i64 
    push           0          i64 
    pop            pc_lex.lxvalue i64 
#11511: 
    push           &pc_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          pc_lex.readhex.c i64 
    switch         #11512     39 102
    opnd           #11513     
#11512: 
    switchlabel    #11514     
    switchlabel    #11513     
    switchlabel    #11513     
    switchlabel    #11513     
    switchlabel    #11513     
    switchlabel    #11513     
    switchlabel    #11513     
    switchlabel    #11513     
    switchlabel    #11513     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11515     
    switchlabel    #11513     
    switchlabel    #11513     
    switchlabel    #11513     
    switchlabel    #11513     
    switchlabel    #11513     
    switchlabel    #11513     
    switchlabel    #11513     
    switchlabel    #11516     
    switchlabel    #11516     
    switchlabel    #11516     
    switchlabel    #11516     
    switchlabel    #11516     
    switchlabel    #11516     
    switchlabel    #11513     
    switchlabel    #11513     
    switchlabel    #11513     
    switchlabel    #11513     
    switchlabel    #11513     
    switchlabel    #11513     
    switchlabel    #11513     
    switchlabel    #11513     
    switchlabel    #11513     
    switchlabel    #11513     
    switchlabel    #11513     
    switchlabel    #11513     
    switchlabel    #11513     
    switchlabel    #11513     
    switchlabel    #11513     
    switchlabel    #11513     
    switchlabel    #11513     
    switchlabel    #11513     
    switchlabel    #11513     
    switchlabel    #11513     
    switchlabel    #11513     
    switchlabel    #11513     
    switchlabel    #11513     
    switchlabel    #11513     
    switchlabel    #11514     
    switchlabel    #11514     
    switchlabel    #11517     
    switchlabel    #11517     
    switchlabel    #11517     
    switchlabel    #11517     
    switchlabel    #11517     
    switchlabel    #11517     
    endswitch                 
#11515: 
    push           pc_lex.lxvalue i64 
    push           16         i64 
    mul                       i64 
    push           pc_lex.readhex.c i64 
    add                       i64 
    push           48         i64 
    sub                       i64 
    pop            pc_lex.lxvalue i64 
    push           &pc_lex.readhex.ndigs 
    incr                      i64 1
    jump           #11511     
#11516: 
    push           pc_lex.lxvalue i64 
    push           16         i64 
    mul                       i64 
    push           pc_lex.readhex.c i64 
    push           65         i64 
    sub                       i64 
    push           10         i64 
    add                       i64 
    add                       i64 
    pop            pc_lex.lxvalue i64 
    push           &pc_lex.readhex.ndigs 
    incr                      i64 1
    jump           #11511     
#11517: 
    push           pc_lex.lxvalue i64 
    push           16         i64 
    mul                       i64 
    push           pc_lex.readhex.c i64 
    push           97         i64 
    sub                       i64 
    push           10         i64 
    add                       i64 
    add                       i64 
    pop            pc_lex.lxvalue i64 
    push           &pc_lex.readhex.ndigs 
    incr                      i64 1
    jump           #11511     
#11514: 
    jump           #11511     
#11513: 
    push           &pc_lex.lxsptr 
    decr                      u64 1
    jump           #11518     
    jump           #11511     
#11518: 
    push           pc_lex.readhex.ndigs i64 
    push           0          i64 
    jumpne         #11519     i64 
    setargs                   1 0
    push           "No hex digits" u64 
    callproc       &pc_lex.lxerror 
    jump           #11520     
#11519: 
    push           pc_lex.readhex.ndigs i64 
    push           32         i64 
    jumple         #11521     i64 
    setargs                   1 0
    push           "Overflow in hex number" u64 
    callproc       &pc_lex.lxerror 
    jump           #11520     
#11521: 
    push           pc_lex.readhex.ndigs i64 
    push           16         i64 
    jumple         #11522     i64 
    setargs                   1 0
    push           "hex/128 bits not ready" u64 
    callproc       &pc_lex.lxerror 
    jump           #11523     
#11522: 
#11520: 
    push           15         i64 
    pop            pc_lex.lxsymbol i64 
#11523: 
    retproc                   
End


Proc pc_lex.ps:
    param          pc_lex.ps.caption u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           pc_lex.ps.caption u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_lex.lxsptr u64 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   1 0
    push           ":"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           0          u64 
    callproc       &pc_lex.printsymbol 
#11525: 
    retproc                   
End


Proc pc_lex.printsymbol:
    param          pc_lex.printsymbol.dev u64 
    local          pc_lex.printsymbol.str block:256 
    local          pc_lex.printsymbol.av_1 i64 
    procentry                 
    setargs                   2 0
    push           &pc_lex.symbolnames 
    push           pc_lex.lxsymbol i64 
    pushptroff                u64 8 -8
    push           &pc_lex.printsymbol.str 
    callproc       &strcpy    
    push           0          u64 
    push           &pc_lex.printsymbol.str 
    setargs                   1 0
    push           &pc_lex.printsymbol.str 
    callfn         &strlen    i64 
    popptroff                 u8 1 -3
    setargs                   1 0
    push           pc_lex.printsymbol.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           &pc_lex.printsymbol.str 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#11527: 
    push           14         i64 
    setargs                   1 0
    push           &pc_lex.printsymbol.str 
    callfn         &strlen    i64 
    sub                       i64 
    pop            pc_lex.printsymbol.av_1 i64 
    push           pc_lex.printsymbol.av_1 i64 
    push           0          i64 
    jumple         #11528     i64 
#11529: 
    setargs                   1 0
    push           pc_lex.printsymbol.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           " "        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#11530: 
    to             #11529     
    opnd           pc_lex.printsymbol.av_1 
#11528: 
    push           pc_lex.lxsymbol i64 
    push           19         i64 
    casejumpeq     #11531     i64 0
    push           15         i64 
    casejumpeq     #11532     i64 0
    push           16         i64 
    casejumpeq     #11533     i64 0
    push           17         i64 
    casejumpeq     #11534     i64 0
    push           1          i64 
    casejumpeq     #11535     i64 0
    push           20         i64 
    casejumpeq     #11536     i64 0
    push           21         i64 
    casejumpeq     #11537     i64 0
    popstack                  i64 
    jump           #11538     
#11531: 
    setargs                   1 0
    push           pc_lex.printsymbol.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           pc_lex.lxsymptr u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #11539     
#11532: 
    setargs                   1 0
    push           pc_lex.printsymbol.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           pc_lex.lxvalue i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #11539     
#11533: 
    setargs                   1 0
    push           pc_lex.printsymbol.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   2 0
    push           0          i64 
    push           pc_lex.lxxvalue r64 
    callproc       &msysp.m$print_r64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #11539     
#11534: 
    setargs                   1 0
    push           pc_lex.printsymbol.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "\""       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           pc_lex.lxsvalue u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           "\""       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #11539     
#11535: 
    setargs                   1 0
    push           pc_lex.printsymbol.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           pc_lex.lxvalue i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #11539     
#11536: 
    setargs                   1 0
    push           pc_lex.printsymbol.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           &pc_tables.pclnames 
    push           pc_lex.lxsubcode i64 
    pushptroff                u64 8 0
    push           1          i64 
    addrefoff                 u64 1 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #11539     
#11537: 
    setargs                   1 0
    push           pc_lex.printsymbol.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           &pc_tables.pstdnames 
    push           pc_lex.lxsubcode i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #11539     
#11538: 
    setargs                   1 0
    push           pc_lex.printsymbol.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           &pc_lex.symbolnames 
    push           pc_lex.lxsymbol i64 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           pc_lex.lxsubcode i64 
    jumpfalse      #11540     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           " "        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           pc_lex.lxsubcode i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#11540: 
#11539: 
    setargs                   1 0
    push           pc_lex.printsymbol.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   0 0
    callproc       &msysp.m$print_space 
    setargs                   1 0
    push           pc_lex.lxlineno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#11541: 
    retproc                   
End


Proc pc_lex.inithashtable:
    local          pc_lex.inithashtable.av_1 i64 
    local          pc_lex.inithashtable.av_2 i64 
    local          pc_lex.inithashtable.i i64 
    procentry                 
#11543: 
    push           0          i64 
    pop            pc_lex.inithashtable.i i64 
    push           217        i64 
    pop            pc_lex.inithashtable.av_1 i64 
    push           pc_lex.inithashtable.av_1 i64 
    push           0          i64 
    jumplt         #11544     i64 
#11545: 
    setargs                   3 0
    push           pc_lex.inithashtable.i i64 
    push           20         i64 
    push           &pc_tables.pclnames 
    push           pc_lex.inithashtable.i i64 
    pushptroff                u64 8 0
    push           1          i64 
    addrefoff                 u64 1 0
    callproc       &pc_lex.addreservedword 
#11546: 
    forup          #11545     i64 1
    opnd           pc_lex.inithashtable.i 
    opnd           pc_lex.inithashtable.av_1 
#11544: 
#11547: 
    push           0          i64 
    pop            pc_lex.inithashtable.i i64 
    push           14         i64 
    pop            pc_lex.inithashtable.av_2 i64 
    push           pc_lex.inithashtable.av_2 i64 
    push           0          i64 
    jumplt         #11548     i64 
#11549: 
    setargs                   3 0
    push           pc_lex.inithashtable.i i64 
    push           21         i64 
    push           &pc_tables.pstdnames 
    push           pc_lex.inithashtable.i i64 
    pushptroff                u64 8 0
    callproc       &pc_lex.addreservedword 
#11550: 
    forup          #11549     i64 1
    opnd           pc_lex.inithashtable.i 
    opnd           pc_lex.inithashtable.av_2 
#11548: 
    setargs                   3 0
    push           8          i64 
    push           20         i64 
    push           "proc"     u64 
    callproc       &pc_lex.addreservedword 
    setargs                   3 0
    push           8          i64 
    push           20         i64 
    push           "function" u64 
    callproc       &pc_lex.addreservedword 
    setargs                   3 0
    push           10         i64 
    push           20         i64 
    push           "end"      u64 
    callproc       &pc_lex.addreservedword 
    setargs                   3 0
    push           15         i64 
    push           20         i64 
    push           "endext"   u64 
    callproc       &pc_lex.addreservedword 
#11551: 
    retproc                   
End


Proc pc_lex.addreservedword:
    param          pc_lex.addreservedword.name u64 
    param          pc_lex.addreservedword.symbol i64 
    param          pc_lex.addreservedword.subcode i64 
    procentry                 
    setargs                   1 0
    push           pc_lex.addreservedword.name u64 
    callfn         &pc_lex.gethashvalue i64 
    pop            pc_lex.lxhashvalue i64 
    setargs                   2 0
    push           0          i64 
    push           pc_lex.addreservedword.name u64 
    callfn         &pc_lex.lookuplex i64 
    jumpfalse      #11553     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "NAME="    u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_lex.addreservedword.name u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "DUPL NAME" u64 
    callproc       &pc_lex.lxerror 
#11553: 
    push           0          i64 
    push           pc_lex.lxsymptr u64 
    push           24         
    popptroff                 u8 1 0
    push           pc_lex.addreservedword.symbol i64 
    push           pc_lex.lxsymptr u64 
    push           25         
    popptroff                 u8 1 0
    push           pc_lex.addreservedword.subcode i64 
    push           pc_lex.lxsymptr u64 
    push           26         
    popptroff                 u8 1 0
#11554: 
    retproc                   
End


Proc pc_lex.printhashtable:
    param          pc_lex.printhashtable.devx u64 
    param          pc_lex.printhashtable.caption u64 
    local          pc_lex.printhashtable.r u64 
    local          pc_lex.printhashtable.count i64 
    local          pc_lex.printhashtable.i i64 
    local          pc_lex.printhashtable.av_1 i64 
    procentry                 
    setargs                   1 0
    push           pc_lex.printhashtable.devx u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           pc_lex.printhashtable.caption u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           ":"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           0          i64 
    pop            pc_lex.printhashtable.count i64 
#11556: 
    push           0          i64 
    pop            pc_lex.printhashtable.i i64 
    push           262143     i64 
    pop            pc_lex.printhashtable.av_1 i64 
    push           pc_lex.printhashtable.av_1 i64 
    push           0          i64 
    jumplt         #11557     i64 
#11558: 
    push           &pc_lex.lexhashtable 
    push           pc_lex.printhashtable.i i64 
    pushptroff                u64 8 0
    pop            pc_lex.printhashtable.r u64 
    push           pc_lex.printhashtable.r u64 
    jumpfalse      #11559     u64 
    push           pc_lex.printhashtable.r u64 
    pushptr                   u64 
    jumpfalse      #11559     u64 
    push           &pc_lex.printhashtable.count 
    push           1          i64 
    addto                     i64 
#11559: 
#11560: 
    forup          #11558     i64 1
    opnd           pc_lex.printhashtable.i 
    opnd           pc_lex.printhashtable.av_1 
#11557: 
    setargs                   1 0
    push           pc_lex.printhashtable.devx u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           pc_lex.printhashtable.count i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           " items in table" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           262144     i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#11561: 
    retproc                   
End


Proc pc_lex.lookuplex: i64
    param          pc_lex.lookuplex.name u64 
    param          pc_lex.lookuplex.length i64 
    local          pc_lex.lookuplex.e u64 
    local          pc_lex.lookuplex.j i64 
    local          pc_lex.lookuplex.wrapped i64 
    local          pc_lex.lookuplex.insource i64 
    local          pc_lex.lookuplex.firstj i64 
    procentry                 
    push           pc_lex.lookuplex.length i64 
    pop            pc_lex.lookuplex.insource i64 
    push           pc_lex.lookuplex.length i64 
    push           0          i64 
    jumpne         #11563     i64 
    setargs                   1 0
    push           pc_lex.lookuplex.name u64 
    callfn         &strlen    i64 
    pop            pc_lex.lookuplex.length i64 
#11563: 
    push           pc_lex.lxhashvalue i64 
    push           262143     i64 
    iand                      i64 
    store          pc_lex.lookuplex.j i64 
    pop            pc_lex.lookuplex.firstj i64 
    push           0          i64 
    pop            pc_lex.lookuplex.wrapped i64 
#11564: 
    push           &pc_lex.lexhashtable 
    push           pc_lex.lookuplex.j i64 
    pushptroff                u64 8 0
    pop            pc_lex.lxsymptr u64 
    push           pc_lex.lxsymptr u64 
    push           0          u64 
    jumpne         #11565     u64 
    jump           #11566     
#11565: 
    push           pc_lex.lxsymptr u64 
    push           31         
    pushptroff                u8 1 0
    push           pc_lex.lookuplex.length i64 
    jumpne         #11567     i64 
    setargs                   3 0
    push           pc_lex.lookuplex.length u64 
    push           pc_lex.lookuplex.name u64 
    push           pc_lex.lxsymptr u64 
    pushptr                   u64 
    callfn         &memcmp    i32 
    push           0          i64 
    jumpne         #11567     i64 
    push           1          i64 
    setret                    i64 
    jump           #11568     
#11567: 
    push           &pc_lex.lookuplex.j 
    incrload                  i64 1
    push           262144     i64 
    jumplt         #11569     i64 
    push           pc_lex.lookuplex.wrapped i64 
    jumpfalse      #11570     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "???????HASHTABLE FULL" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           262144     i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           pc_lex.lxlineno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#11570: 
    push           1          i64 
    pop            pc_lex.lookuplex.wrapped i64 
    push           1          i64 
    pop            pc_lex.lookuplex.j i64 
#11569: 
    jump           #11564     
#11566: 
    push           pc_lex.lookuplex.insource i64 
    jumpfalse      #11571     i64 
    setargs                   2 0
    push           pc_lex.lookuplex.length i64 
    push           pc_lex.lookuplex.name u64 
    callfn         &mlibp.pcm_copyheapstringn u64 
    pop            pc_lex.lookuplex.name u64 
#11571: 
    push           &pc_lex.nsymbols 
    incrload                  i64 1
    push           229376     i64 
    jumple         #11572     i64 
    setargs                   1 0
    push           "Hashtable getting full" u64 
    callproc       &pc_lex.lxerror 
#11572: 
    push           pc_lex.lxsymptr u64 
    push           0          u64 
    jumpne         #11573     u64 
    setargs                   1 0
    push           51         i64 
    callfn         &mlibp.pcm_allocz u64 
    pop            pc_lex.lxsymptr u64 
    push           pc_lex.lxsymptr u64 
    push           &pc_lex.lexhashtable 
    push           pc_lex.lookuplex.j i64 
    popptroff                 u64 8 0
#11573: 
    push           pc_lex.lookuplex.name u64 
    push           pc_lex.lxsymptr u64 
    push           0          
    popptroff                 u64 1 0
    push           pc_lex.lookuplex.length i64 
    push           pc_lex.lxsymptr u64 
    push           31         
    popptroff                 u8 1 0
    push           19         i64 
    push           pc_lex.lxsymptr u64 
    push           24         
    popptroff                 u8 1 0
    push           0          i64 
    push           pc_lex.lxsymptr u64 
    push           25         
    popptroff                 u8 1 0
    push           0          i64 
    setret                    i64 
    jump           #11568     
#11568: 
    retfn                     i64 
End


Proc pc_lex.startlex:
    param          pc_lex.startlex.source u64 
    procentry                 
    setargs                   0 0
    callproc       &pc_lex.initlex 
    push           pc_lex.startlex.source u64 
    store          pc_lex.lxsptr u64 
    pop            pc_lex.lxstart u64 
    push           1          i64 
    pop            pc_lex.lxlineno i64 
    push           1          i64 
    pop            pc_lex.lxsymbol i64 
#11575: 
    retproc                   
End


Proc pc_lex.addnamestr: u64
    param          pc_lex.addnamestr.name u64 
    procentry                 
    setargs                   1 0
    push           pc_lex.addnamestr.name u64 
    callfn         &pc_lex.gethashvalue i64 
    pop            pc_lex.lxhashvalue i64 
    setargs                   2 0
    push           0          i64 
    setargs                   1 0
    push           pc_lex.addnamestr.name u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    callproc       &pc_lex.lookuplex 
    push           pc_lex.lxsymptr u64 
    setret                    u64 
    jump           #11577     
#11577: 
    retfn                     u64 
End


Proc pc_lex.lxerror:
    param          pc_lex.lxerror.m u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\c\n\c\n Lexical Error\n*** # *** on line #" u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           pc_lex.lxerror.m u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_lex.lxlineno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#11579: 
    retproc                   
End


Proc pc_lex.gethashvalue: i64
    param          pc_lex.gethashvalue.s u64 
    local          pc_lex.gethashvalue.c i64 
    local          pc_lex.gethashvalue.hsum i64 
    procentry                 
    push           pc_lex.gethashvalue.s u64 
    pushptr                   u8 
    push           0          i64 
    jumpne         #11581     i64 
    push           0          i64 
    setret                    i64 
    jump           #11582     
#11581: 
    push           &pc_lex.gethashvalue.s 
    loadincr                  u64 1
    pushptr                   u8 
    pop            pc_lex.gethashvalue.hsum i64 
#11583: 
    push           &pc_lex.gethashvalue.s 
    loadincr                  u64 1
    pushptr                   u8 
    pop            pc_lex.gethashvalue.c i64 
    push           pc_lex.gethashvalue.c i64 
    push           0          i64 
    jumpne         #11584     i64 
    jump           #11585     
#11584: 
    push           pc_lex.gethashvalue.hsum i64 
    push           4          i64 
    shl                       i64 
    push           pc_lex.gethashvalue.hsum i64 
    sub                       i64 
    push           pc_lex.gethashvalue.c i64 
    add                       i64 
    pop            pc_lex.gethashvalue.hsum i64 
    jump           #11583     
#11585: 
    push           pc_lex.gethashvalue.hsum i64 
    push           5          i64 
    shl                       i64 
    push           pc_lex.gethashvalue.hsum i64 
    sub                       i64 
    setret                    i64 
    jump           #11582     
#11582: 
    retfn                     i64 
End


Proc pc_lex.readstring:
    local          pc_lex.readstring.dest u64 
    local          pc_lex.readstring.c i64 
    local          pc_lex.readstring.d i64 
    local          pc_lex.readstring.str block:8 
    local          pc_lex.readstring.av_1 i64 
    procentry                 
    push           17         i64 
    pop            pc_lex.lxsymbol i64 
    push           pc_lex.lxsptr u64 
    pop            pc_lex.lxsvalue u64 
    push           pc_lex.lxsptr u64 
    pop            pc_lex.readstring.dest u64 
#11587: 
    push           &pc_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          pc_lex.readstring.c i64 
    switch         #11588     0 92
    opnd           #11589     
#11588: 
    switchlabel    #11590     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11590     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11590     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11591     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11589     
    switchlabel    #11592     
    endswitch                 
#11592: 
    push           pc_lex.lxsptr u64 
    pushptr                   u8 
    pop            pc_lex.readstring.c i64 
    push           pc_lex.readstring.c i64 
    push           65         i64 
    jumplt         #11593     i64 
    push           pc_lex.readstring.c i64 
    push           90         i64 
    jumpgt         #11593     i64 
    push           &pc_lex.readstring.c 
    push           32         i64 
    addto                     i64 
#11593: 
    push           &pc_lex.lxsptr 
    incr                      u64 1
    push           pc_lex.readstring.c i64 
    switch         #11594     34 122
    opnd           #11595     
#11594: 
    switchlabel    #11596     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11597     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11598     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11596     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11599     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11600     
    switchlabel    #11601     
    switchlabel    #11602     
    switchlabel    #11595     
    switchlabel    #11603     
    switchlabel    #11604     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11605     
    switchlabel    #11595     
    switchlabel    #11605     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11595     
    switchlabel    #11602     
    switchlabel    #11606     
    switchlabel    #11607     
    switchlabel    #11595     
    switchlabel    #11608     
    switchlabel    #11609     
    switchlabel    #11610     
    switchlabel    #11611     
    switchlabel    #11598     
    endswitch                 
#11600: 
    push           7          i64 
    pop            pc_lex.readstring.c i64 
    jump           #11612     
#11601: 
    push           8          i64 
    pop            pc_lex.readstring.c i64 
    jump           #11612     
#11602: 
    push           13         i64 
    pop            pc_lex.readstring.c i64 
    jump           #11612     
#11603: 
    push           26         i64 
    pop            pc_lex.readstring.c i64 
    jump           #11612     
#11604: 
    push           12         i64 
    pop            pc_lex.readstring.c i64 
    jump           #11612     
#11605: 
    push           10         i64 
    pop            pc_lex.readstring.c i64 
    jump           #11612     
#11606: 
    push           27         i64 
    pop            pc_lex.readstring.c i64 
    jump           #11612     
#11607: 
    push           9          i64 
    pop            pc_lex.readstring.c i64 
    jump           #11612     
#11608: 
    push           11         i64 
    pop            pc_lex.readstring.c i64 
    jump           #11612     
#11609: 
    push           13         u64 
    push           &pc_lex.readstring.dest 
    loadincr                  u64 1
    popptr                    u8 
    push           10         i64 
    pop            pc_lex.readstring.c i64 
    jump           #11612     
#11610: 
    push           0          i64 
    pop            pc_lex.readstring.c i64 
#11613: 
    push           2          i64 
    pop            pc_lex.readstring.av_1 i64 
#11614: 
    push           &pc_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          pc_lex.readstring.d i64 
    push           65         i64 
    casejumpeq     #11615     i64 0
    push           66         i64 
    casejumpeq     #11615     i64 0
    push           67         i64 
    casejumpeq     #11615     i64 0
    push           68         i64 
    casejumpeq     #11615     i64 0
    push           69         i64 
    casejumpeq     #11615     i64 0
    push           70         i64 
    casejumpeq     #11615     i64 0
    push           97         i64 
    casejumpeq     #11616     i64 0
    push           98         i64 
    casejumpeq     #11616     i64 0
    push           99         i64 
    casejumpeq     #11616     i64 0
    push           100        i64 
    casejumpeq     #11616     i64 0
    push           101        i64 
    casejumpeq     #11616     i64 0
    push           102        i64 
    casejumpeq     #11616     i64 0
    push           48         i64 
    casejumpeq     #11617     i64 0
    push           49         i64 
    casejumpeq     #11617     i64 0
    push           50         i64 
    casejumpeq     #11617     i64 0
    push           51         i64 
    casejumpeq     #11617     i64 0
    push           52         i64 
    casejumpeq     #11617     i64 0
    push           53         i64 
    casejumpeq     #11617     i64 0
    push           54         i64 
    casejumpeq     #11617     i64 0
    push           55         i64 
    casejumpeq     #11617     i64 0
    push           56         i64 
    casejumpeq     #11617     i64 0
    push           57         i64 
    casejumpeq     #11617     i64 0
    popstack                  i64 
    jump           #11618     
#11615: 
    push           pc_lex.readstring.c i64 
    push           16         i64 
    mul                       i64 
    push           pc_lex.readstring.d i64 
    add                       i64 
    push           65         i64 
    sub                       i64 
    push           10         i64 
    add                       i64 
    pop            pc_lex.readstring.c i64 
    jump           #11619     
#11616: 
    push           pc_lex.readstring.c i64 
    push           16         i64 
    mul                       i64 
    push           pc_lex.readstring.d i64 
    add                       i64 
    push           97         i64 
    sub                       i64 
    push           10         i64 
    add                       i64 
    pop            pc_lex.readstring.c i64 
    jump           #11619     
#11617: 
    push           pc_lex.readstring.c i64 
    push           16         i64 
    mul                       i64 
    push           pc_lex.readstring.d i64 
    add                       i64 
    push           48         i64 
    sub                       i64 
    pop            pc_lex.readstring.c i64 
    jump           #11619     
#11618: 
    setargs                   1 0
    push           "Bad \\x code" u64 
    callproc       &pc_lex.lxerror 
#11619: 
#11620: 
    to             #11614     
    opnd           pc_lex.readstring.av_1 
#11621: 
    jump           #11612     
#11611: 
    push           16         i64 
    pop            pc_lex.readstring.c i64 
    jump           #11612     
#11598: 
    push           0          i64 
    pop            pc_lex.readstring.c i64 
    jump           #11612     
#11596: 
    push           34         i64 
    pop            pc_lex.readstring.c i64 
    jump           #11612     
#11599: 
    push           92         i64 
    pop            pc_lex.readstring.c i64 
    jump           #11612     
#11597: 
    push           39         i64 
    pop            pc_lex.readstring.c i64 
    jump           #11612     
#11595: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "<"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   2 0
    push           0          i64 
    push           pc_lex.readstring.c i64 
    truncate                  u64 u8 
    callproc       &msysp.m$print_c8 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           ">"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Unknown string escape" u64 
    callproc       &pc_lex.lxerror 
#11612: 
    jump           #11622     
#11591: 
    push           pc_lex.lxsptr u64 
    pushptr                   u8 
    push           pc_lex.readstring.c i64 
    jumpne         #11623     i64 
    push           &pc_lex.lxsptr 
    incr                      u64 1
    jump           #11624     
#11623: 
    jump           #11625     
#11624: 
    jump           #11622     
#11590: 
    setargs                   1 0
    push           "String not terminated" u64 
    callproc       &pc_lex.lxerror 
    jump           #11622     
#11589: 
#11622: 
    push           pc_lex.readstring.c u64 
    push           &pc_lex.readstring.dest 
    loadincr                  u64 1
    popptr                    u8 
    jump           #11587     
#11625: 
    push           pc_lex.readstring.dest u64 
    push           pc_lex.lxsvalue u64 
    subref                    i64 1
    pop            pc_lex.lxlength i64 
    push           0          u64 
    push           pc_lex.lxsvalue u64 
    push           pc_lex.lxlength i64 
    popptroff                 u8 1 0
#11626: 
    retproc                   
End


Proc pc_lex.stringtonumber128:
    param          pc_lex.stringtonumber128.s u64 
    param          pc_lex.stringtonumber128.length i64 
    param          pc_lex.stringtonumber128.base i64 
    local          pc_lex.stringtonumber128.aa u128 
    local          pc_lex.stringtonumber128.c i64 
    local          pc_lex.stringtonumber128.d i64 
    local          pc_lex.stringtonumber128.av_1 i64 
    procentry                 
    push           0          i64 
    widenw                    u128 i64 
    pop            pc_lex.stringtonumber128.aa u128 
#11628: 
    push           pc_lex.stringtonumber128.length i64 
    pop            pc_lex.stringtonumber128.av_1 i64 
    push           pc_lex.stringtonumber128.av_1 i64 
    push           0          i64 
    jumple         #11629     i64 
#11630: 
    push           pc_lex.stringtonumber128.aa u128 
    push           pc_lex.stringtonumber128.base i64 
    widenw                    u128 i64 
    mul                       u128 
    pop            pc_lex.stringtonumber128.aa u128 
    push           &pc_lex.stringtonumber128.s 
    loadincr                  u64 1
    pushptr                   u8 
    pop            pc_lex.stringtonumber128.c i64 
    push           pc_lex.stringtonumber128.c i64 
    push           97         i64 
    jumplt         #11631     i64 
    push           pc_lex.stringtonumber128.c i64 
    push           97         i64 
    sub                       i64 
    push           10         i64 
    add                       i64 
    pop            pc_lex.stringtonumber128.d i64 
    jump           #11632     
#11631: 
    push           pc_lex.stringtonumber128.c i64 
    push           65         i64 
    jumplt         #11633     i64 
    push           pc_lex.stringtonumber128.c i64 
    push           65         i64 
    sub                       i64 
    push           10         i64 
    add                       i64 
    pop            pc_lex.stringtonumber128.d i64 
    jump           #11632     
#11633: 
    push           pc_lex.stringtonumber128.c i64 
    push           48         i64 
    sub                       i64 
    pop            pc_lex.stringtonumber128.d i64 
#11632: 
    push           pc_lex.stringtonumber128.aa u128 
    push           pc_lex.stringtonumber128.d i64 
    widenw                    u128 i64 
    add                       u128 
    pop            pc_lex.stringtonumber128.aa u128 
#11634: 
    to             #11630     
    opnd           pc_lex.stringtonumber128.av_1 
#11629: 
    push           pc_lex.stringtonumber128.aa u128 
    pop            pc_lex.lxuvalue128 u128 
    push           18         i64 
    pop            pc_lex.lxsymbol i64 
#11635: 
    retproc                   
End


Proc pc_parse.parse: i64
    param          pc_parse.parse.source u64 
    local          pc_parse.parse.d u64 
    local          pc_parse.parse.labno i64 
    procentry                 
    setargs                   1 0
    push           pc_parse.parse.source u64 
    callproc       &pc_lex.startlex 
    push           1          i64 
    pop            pc_lex.lxsymbol i64 
#11637: 
    setargs                   0 0
    callproc       &pc_lex.lex 
    push           pc_lex.lxsymbol i64 
    push           20         i64 
    casejumpeq     #11638     i64 0
    push           21         i64 
    casejumpeq     #11638     i64 0
    push           14         i64 
    casejumpeq     #11639     i64 0
    push           19         i64 
    casejumpeq     #11640     i64 0
    push           15         i64 
    casejumpeq     #11641     i64 0
    push           12         i64 
    casejumpeq     #11642     i64 0
    push           13         i64 
    casejumpeq     #11643     i64 0
    popstack                  i64 
    jump           #11644     
#11638: 
    push           pc_lex.lxsubcode i64 
    push           11         i64 
    jumpne         #11645     i64 
    jump           #11646     
#11645: 
    setargs                   0 0
    callproc       &pc_parse.readinstr 
    jump           #11647     
#11639: 
    setargs                   0 0
    callproc       &pc_parse.dolabel 
    jump           #11647     
#11640: 
    setargs                   1 0
    push           "\"NAME:\" NOT SUPPORTED" u64 
    callproc       &pc_parse.serror 
    push           pc_lex.lxsymptr u64 
    pop            pc_parse.parse.d u64 
    setargs                   0 0
    callproc       &pc_lex.lex 
    push           pc_lex.lxsymbol i64 
    push           3          i64 
    casejumpeq     #11648     i64 0
    push           4          i64 
    casejumpeq     #11649     i64 0
    popstack                  i64 
    jump           #11650     
#11648: 
    jump           #11651     
#11649: 
    push           1          u64 
    push           pc_parse.parse.d u64 
    push           46         
    addrefoff                 u64 1 0
    push           3          i64 
    popdotindex               u16 
    jump           #11651     
#11650: 
    setargs                   1 0
    push           ": expected" u64 
    callproc       &pc_parse.serror 
#11651: 
    setargs                   1 0
    push           pc_parse.parse.d u64 
    callproc       &pc_libpcl.assignlabeltoname 
    setargs                   2 0
    setargs                   1 0
    push           pc_parse.parse.d u64 
    callfn         &pc_libpcl.pcl_genmemaddr u64 
    push           20         i64 
    callproc       &pc_libpcl.pcl_gen 
    push           pc_lex.lxlineno i64 
    push           pc_libpcl.pccurr u64 
    push           24         
    popptroff                 u32 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
    jump           #11647     
#11641: 
    jump           #11637     
    jump           #11647     
#11642: 
    jump           #11637     
    jump           #11647     
#11643: 
    jump           #11646     
    jump           #11647     
#11644: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "SYMBOLNAMES[LXSYMBOL]=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pc_lex.symbolnames 
    push           pc_lex.lxsymbol i64 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Bad input" u64 
    callproc       &pc_parse.serror 
#11647: 
    setargs                   1 0
    push           12         i64 
    callproc       &pc_parse.checksymbol 
    jump           #11637     
#11646: 
    push           pc_parse.insideproc i64 
    jumpfalse      #11652     i64 
    setargs                   1 0
    push           "End missing" u64 
    callproc       &pc_parse.serror 
#11652: 
    push           1          i64 
    setret                    i64 
    jump           #11653     
#11653: 
    retfn                     i64 
End


Proc pc_parse.checksymbol:
    param          pc_parse.checksymbol.symbol i64 
    procentry                 
    push           pc_lex.lxsymbol i64 
    push           pc_parse.checksymbol.symbol i64 
    jumpeq         #11655     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pc_lex.symbolnames 
    push           pc_parse.checksymbol.symbol i64 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "expected, not" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pc_lex.symbolnames 
    push           pc_lex.lxsymbol i64 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           ", on line:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_lex.lxlineno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#11655: 
#11656: 
    retproc                   
End


Proc pc_parse.dolabel:
    procentry                 
    push           pc_lex.lxvalue i64 
    push           1          i64 
    push           1000000    i64 
    jumpinrange    #11658     i64 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_lex.lxvalue i64 
    callfn         &msysp.strint u64 
    push           "1:Label out of range:" u64 
    callproc       &pc_parse.serror_s 
#11658: 
    setargs                   2 0
    push           pc_lex.lxlineno i64 
    push           pc_lex.lxvalue i64 
    callproc       &pc_libpcl.pdefinelabel 
    setargs                   0 0
    callproc       &pc_lex.lex 
    setargs                   1 0
    push           3          i64 
    callproc       &pc_parse.checksymbol 
    setargs                   0 0
    callproc       &pc_lex.lex 
#11659: 
    retproc                   
End


Proc pc_parse.readmode:
    param          pc_parse.readmode.p u64 
    procentry                 
    push           pc_parse.readmode.p u64 
    push           3          
    pushptroff                u8 1 0
    push           0          i64 
    jumpeq         #11661     i64 
    push           pc_lex.lxsubcode i64 
    push           pc_parse.readmode.p u64 
    push           16         
    popptroff                 i32 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
    jump           #11662     
#11661: 
    push           pc_lex.lxsubcode i64 
    push           pc_parse.readmode.p u64 
    push           3          
    popptroff                 u8 1 0
    push           &pc_tables.psize 
    push           pc_lex.lxsubcode i64 
    pushptroff                u8 1 0
    push           pc_parse.readmode.p u64 
    push           4          
    popptroff                 i32 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
    push           pc_parse.readmode.p u64 
    push           3          
    pushptroff                u8 1 0
    push           13         i64 
    jumpne         #11663     i64 
    setargs                   1 0
    push           3          i64 
    callproc       &pc_parse.checksymbol 
    setargs                   0 0
    callproc       &pc_lex.lex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_parse.checksymbol 
    push           pc_lex.lxvalue i64 
    push           pc_parse.readmode.p u64 
    push           4          
    popptroff                 i32 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
#11663: 
#11662: 
    retproc                   
End


Proc pc_parse.readinstr:
    local          pc_parse.readinstr.opcode i64 
    local          pc_parse.readinstr.mode i64 
    local          pc_parse.readinstr.size i64 
    local          pc_parse.readinstr.p u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libpcl.newpcl u64 
    pop            pc_parse.readinstr.p u64 
    push           pc_lex.lxlineno i64 
    push           pc_parse.readinstr.p u64 
    push           24         
    popptroff                 u32 1 0
    push           0          i64 
    pop            pc_parse.readinstr.mode i64 
    push           0          i64 
    pop            pc_parse.readinstr.size i64 
    push           pc_lex.lxsymbol i64 
    push           21         i64 
    jumpne         #11665     i64 
    setargs                   1 0
    push           pc_parse.readinstr.p u64 
    callproc       &pc_parse.readmode 
    setargs                   1 0
    push           20         i64 
    callproc       &pc_parse.checksymbol 
#11665: 
    push           pc_lex.lxsubcode i64 
    store          pc_parse.readinstr.opcode i64 
    push           pc_parse.readinstr.p u64 
    push           1          
    popptroff                 u8 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
    push           pc_lex.lxsymbol i64 
    push           21         i64 
    jumpne         #11666     i64 
    setargs                   1 0
    push           pc_parse.readinstr.p u64 
    callproc       &pc_parse.readmode 
#11666: 
    push           &pc_tables.pclhasopnd 
    push           pc_parse.readinstr.opcode i64 
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #11667     i64 0
    push           2          i64 
    casejumpeq     #11668     i64 0
    push           3          i64 
    casejumpeq     #11669     i64 0
    push           4          i64 
    casejumpeq     #11670     i64 0
    popstack                  i64 
    jump           #11671     
#11667: 
    push           pc_lex.lxsymbol i64 
    push           15         i64 
    casejumpeq     #11672     i64 0
    push           16         i64 
    casejumpeq     #11673     i64 0
    push           17         i64 
    casejumpeq     #11674     i64 0
    push           14         i64 
    casejumpeq     #11675     i64 0
    push           19         i64 
    casejumpeq     #11676     i64 0
    push           18         i64 
    casejumpeq     #11677     i64 0
    push           10         i64 
    casejumpeq     #11678     i64 0
    popstack                  i64 
    jump           #11679     
#11672: 
    push           pc_lex.lxvalue i64 
    push           pc_parse.readinstr.p u64 
    push           8          
    popptroff                 i64 1 0
    push           4          i64 
    push           pc_parse.readinstr.p u64 
    push           0          
    popptroff                 u8 1 0
    push           9          i64 
    pop            pc_parse.readinstr.mode i64 
    setargs                   0 0
    callproc       &pc_lex.lex 
    jump           #11680     
#11673: 
    push           pc_lex.lxxvalue r64 
    push           pc_parse.readinstr.p u64 
    push           8          
    popptroff                 r64 1 0
    push           5          i64 
    push           pc_parse.readinstr.p u64 
    push           0          
    popptroff                 u8 1 0
    push           4          i64 
    pop            pc_parse.readinstr.mode i64 
    setargs                   0 0
    callproc       &pc_lex.lex 
    jump           #11680     
#11674: 
    setargs                   1 0
    push           pc_lex.lxsvalue u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           pc_parse.readinstr.p u64 
    push           8          
    popptroff                 u64 1 0
    push           8          i64 
    push           pc_parse.readinstr.p u64 
    push           0          
    popptroff                 u8 1 0
    push           4          i64 
    pop            pc_parse.readinstr.mode i64 
    setargs                   0 0
    callproc       &pc_lex.lex 
    jump           #11680     
#11675: 
    push           pc_lex.lxvalue i64 
    push           1          i64 
    push           1000000    i64 
    jumpinrange    #11681     i64 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_lex.lxvalue i64 
    callfn         &msysp.strint u64 
    push           "2:Label out of range:" u64 
    callproc       &pc_parse.serror_s 
#11681: 
    push           pc_lex.lxvalue i64 
    push           pc_parse.readinstr.p u64 
    push           8          
    popptroff                 i64 1 0
    push           3          i64 
    push           pc_parse.readinstr.p u64 
    push           0          
    popptroff                 u8 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
    jump           #11680     
#11676: 
    push           pc_lex.lxsymptr u64 
    push           pc_parse.readinstr.p u64 
    push           8          
    popptroff                 u64 1 0
    push           1          i64 
    push           pc_parse.readinstr.p u64 
    push           0          
    popptroff                 u8 1 0
    push           pc_lex.lxtruename u8 
    push           pc_parse.readinstr.p u64 
    push           8          
    pushptroff                u64 1 0
    push           46         
    addrefoff                 u64 1 0
    push           8          i64 
    popdotindex               u16 
    setargs                   0 0
    callproc       &pc_lex.lex 
    jump           #11680     
#11677: 
    push           pc_lex.lxuvalue128 i128 
    push           pc_parse.readinstr.p u64 
    push           8          
    popptroff                 i128 1 0
    push           6          i64 
    push           pc_parse.readinstr.p u64 
    push           0          
    popptroff                 u8 1 0
    push           10         i64 
    pop            pc_parse.readinstr.mode i64 
    setargs                   0 0
    callproc       &pc_lex.lex 
    jump           #11680     
#11678: 
    setargs                   0 0
    callproc       &pc_lex.lex 
    setargs                   1 0
    push           19         i64 
    callproc       &pc_parse.checksymbol 
    push           pc_lex.lxsymptr u64 
    push           pc_parse.readinstr.p u64 
    push           8          
    popptroff                 u64 1 0
    push           pc_lex.lxtruename u8 
    push           pc_parse.readinstr.p u64 
    push           8          
    pushptroff                u64 1 0
    push           46         
    addrefoff                 u64 1 0
    push           8          i64 
    popdotindex               u16 
    push           2          i64 
    push           pc_parse.readinstr.p u64 
    push           0          
    popptroff                 u8 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
    push           pc_lex.lxsymbol i64 
    push           9          i64 
    jumpne         #11682     i64 
    push           1          u64 
    push           pc_parse.readinstr.p u64 
    push           8          
    pushptroff                u64 1 0
    push           46         
    addrefoff                 u64 1 0
    push           1          i64 
    popdotindex               u16 
    setargs                   0 0
    callproc       &pc_lex.lex 
#11682: 
    jump           #11680     
#11679: 
    setargs                   1 0
    push           "Missing or Bad Operand" u64 
    callproc       &pc_parse.serror 
#11680: 
    jump           #11683     
#11668: 
    setargs                   1 0
    push           19         i64 
    callproc       &pc_parse.checksymbol 
    push           pc_lex.lxsymptr u64 
    push           pc_parse.readinstr.p u64 
    push           8          
    popptroff                 u64 1 0
    push           pc_parse.readinstr.opcode i64 
    push           16         i64 
    jumpne         #11684     i64 
    push           8          i64 
    push           pc_parse.readinstr.p u64 
    push           1          
    popptroff                 u8 1 0
    setargs                   1 0
    push           pc_parse.readinstr.p u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &pc_libpcl.definertsproc 
#11684: 
    push           1          i64 
    push           pc_parse.readinstr.p u64 
    push           0          
    popptroff                 u8 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
    push           pc_lex.lxsymbol i64 
    push           3          i64 
    casejumpeq     #11685     i64 0
    push           4          i64 
    casejumpeq     #11686     i64 0
    popstack                  i64 
    jump           #11687     
#11685: 
    jump           #11688     
#11686: 
    push           1          u64 
    push           pc_parse.readinstr.p u64 
    push           8          
    pushptroff                u64 1 0
    push           46         
    addrefoff                 u64 1 0
    push           3          i64 
    popdotindex               u16 
    push           1          u64 
    push           pc_parse.readinstr.p u64 
    push           2          
    addrefoff                 u64 1 0
    push           0          i64 
    popdotindex               u8 
    jump           #11688     
#11687: 
    setargs                   1 0
    push           "Colon expected" u64 
    callproc       &pc_parse.serror 
#11688: 
    setargs                   0 0
    callproc       &pc_lex.lex 
    jump           #11683     
#11669: 
    setargs                   1 0
    push           19         i64 
    callproc       &pc_parse.checksymbol 
    push           pc_lex.lxsymptr u64 
    push           pc_parse.readinstr.p u64 
    push           8          
    popptroff                 u64 1 0
    push           1          i64 
    push           pc_parse.readinstr.p u64 
    push           0          
    popptroff                 u8 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
    push           pc_lex.lxsymbol i64 
    push           3          i64 
    jumpne         #11689     i64 
    setargs                   1 0
    push           ": not used for locals" u64 
    callproc       &pc_parse.serror 
#11689: 
    jump           #11683     
#11670: 
    setargs                   1 0
    push           19         i64 
    callproc       &pc_parse.checksymbol 
    push           pc_lex.lxsymptr u64 
    push           pc_parse.readinstr.p u64 
    push           8          
    popptroff                 u64 1 0
    push           1          i64 
    push           pc_parse.readinstr.p u64 
    push           0          
    popptroff                 u8 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
    jump           #11683     
#11671: 
#11683: 
    push           pc_lex.lxsymbol i64 
    push           21         i64 
    jumpne         #11690     i64 
    setargs                   1 0
    push           pc_parse.readinstr.p u64 
    callproc       &pc_parse.readmode 
#11690: 
    push           pc_parse.readinstr.p u64 
    push           3          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #11691     i64 
    push           pc_parse.readinstr.mode i64 
    push           0          i64 
    jumpeq         #11692     i64 
    push           pc_parse.readinstr.mode i64 
    push           pc_parse.readinstr.p u64 
    push           3          
    popptroff                 u8 1 0
    push           pc_parse.readinstr.size i64 
    push           pc_parse.readinstr.p u64 
    push           4          
    popptroff                 i32 1 0
#11692: 
#11691: 
    push           &pc_tables.pclextra 
    push           pc_parse.readinstr.opcode i64 
    pushptroff                u8 1 0
    jumpfalse      #11693     i64 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_parse.checksymbol 
    push           pc_lex.lxvalue i64 
    push           pc_parse.readinstr.p u64 
    push           16         
    popptroff                 i32 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
    push           &pc_tables.pclextra 
    push           pc_parse.readinstr.opcode i64 
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #11694     i64 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_parse.checksymbol 
    push           pc_lex.lxvalue i64 
    push           pc_parse.readinstr.p u64 
    push           20         
    popptroff                 i32 1 0
    setargs                   0 0
    callproc       &pc_lex.lex 
#11694: 
#11693: 
#11695: 
    retproc                   
End


Proc pc_parse.serror:
    param          pc_parse.serror.mess u64 
    procentry                 
    setargs                   2 0
    push           0          u64 
    push           pc_parse.serror.mess u64 
    callproc       &pc_parse.serror_s 
#11697: 
    retproc                   
End


Proc pc_parse.serror_s:
    param          pc_parse.serror_s.mess u64 
    param          pc_parse.serror_s.param u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Syntax error:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_parse.serror_s.mess u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           pc_parse.serror_s.param u64 
    jumpfalse      #11699     u64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           ":"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_parse.serror_s.param u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#11699: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           " on line:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_lex.lxlineno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#11700: 
    retproc                   
End


Proc pc_parse.pcl_readpclfile:: i64
    param          pc_parse.pcl_readpclfile.filename u64 
    param          pc_parse.pcl_readpclfile.rtsfile u64 
    local          pc_parse.pcl_readpclfile.source u64 
    procentry                 
    setargs                   0 0
    callproc       &pc_libpcl.pcl_start 
    setargs                   1 0
    push           pc_parse.pcl_readpclfile.filename u64 
    callfn         &pc_parse.parse_readsource i64 
    jumptrue       #11702     i64 
    push           0          i64 
    setret                    i64 
    jump           #11703     
#11702: 
    push           pc_parse.pcl_readpclfile.rtsfile u64 
    jumpfalse      #11704     u64 
    push           pc_libpcl.maxuserlabel i64 
    pop            pc_libpcl.labelnooffset i64 
    setargs                   0 0
    callfn         &pc_parse.parse_readrts i64 
    jumptrue       #11705     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "No RTS found" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           0          i64 
    setret                    i64 
    jump           #11703     
#11705: 
#11704: 
    setargs                   2 0
    push           0          u64 
    push           11         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_libpcl.pcl_end 
    push           1          i64 
    setret                    i64 
    jump           #11703     
#11703: 
    retfn                     i64 
End


Proc pc_parse.parse_readsource: i64
    param          pc_parse.parse_readsource.filename u64 
    local          pc_parse.parse_readsource.source u64 
    procentry                 
    setargs                   1 0
    push           pc_parse.parse_readsource.filename u64 
    callfn         &mlibp.readfile u64 
    pop            pc_parse.parse_readsource.source u64 
    push           pc_parse.parse_readsource.source u64 
    push           0          u64 
    jumpne         #11707     u64 
    push           "Can't load file" u64 
    pop            pc_libpcl.errormess u64 
    push           0          i64 
    setret                    i64 
    jump           #11708     
#11707: 
    setargs                   1 0
    push           pc_parse.parse_readsource.source u64 
    callfn         &pc_parse.parse i64 
    jumptrue       #11709     i64 
    push           "Couldn't parse" u64 
    pop            pc_libpcl.errormess u64 
    push           0          i64 
    setret                    i64 
    jump           #11708     
#11709: 
    push           1          i64 
    setret                    i64 
    jump           #11708     
#11708: 
    retfn                     i64 
End


Proc pc_parse.parse_readrts: i64
    procentry                 
    setargs                   1 0
    push           pc_parse.parse_readrts.source u64 
    callfn         &pc_parse.parse i64 
    jumptrue       #11711     i64 
    push           "Couldn't parse RTS" u64 
    pop            pc_libpcl.errormess u64 
    push           0          i64 
    setret                    i64 
    jump           #11712     
#11711: 
    push           1          i64 
    setret                    i64 
    jump           #11712     
#11712: 
    retfn                     i64 
End


Proc mm_start.start_common:
    param          mm_start.start_common.os i64 
    param          mm_start.start_common.target i64 
    local          mm_start.start_common.p u64 
    local          mm_start.start_common.q u64 
    local          mm_start.start_common.r u64 
    local          mm_start.start_common.m i64 
    local          mm_start.start_common.fileno i64 
    local          mm_start.start_common.ntokens i64 
    local          mm_start.start_common.t i64 
    procentry                 
    setargs                   0 0
    callfn         &mwindowsp.os_clock i64 
    pop            mm_start.startclock i64 
    setargs                   2 0
    push           mm_start.start_common.target i64 
    push           mm_start.start_common.os i64 
    callproc       &mm_start.initdata 
    setargs                   0 0
    callproc       &mm_start.getinputoptions 
    push           mm_decls.debugmode i64 
    jumpfalse      #11714     i64 
    push           mm_decls.passlevel i64 
    push           2          i64 
    jumpge         #11714     i64 
    jump           #11715     
#11714: 
    push           mm_decls.fverbose i64 
    push           1          i64 
    jumplt         #11716     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Compiling # to #" u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   2 0
    push           "14jlp-"   u64 
    push           &mm_decls.inputfiles 
    push           1          i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str 
    setargs                   1 0
    setargs                   2 0
    push           mm_start.outext u64 
    push           mm_decls.outfile u64 
    callfn         &mlibp.changeext u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_space 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    startmult                 
    push           mm_decls.msyslevel i64 
    push           1          i64 
    add                       i64 
    switch         #11717     1 2
    opnd           #11718     
#11717: 
    switchlabel    #11719     
    switchlabel    #11720     
    endswitch                 
#11719: 
    push           " [No sys]" u64 
    resetmult                 
    jump           #11721     
#11720: 
    push           " [Min sys]" u64 
    resetmult                 
    jump           #11721     
#11718: 
    push           " [Full sys]" u64 
    endmult                   
#11721: 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#11716: 
    setargs                   0 0
    callproc       &mm_start.initsearchdirs 
    setargs                   1 0
    push           "mx.log"   u64 
    callproc       &remove    
    setargs                   0 0
    callproc       &mm_start.starttimer 
    setargs                   0 0
    callproc       &mm_start.do_loadmodules 
    setargs                   1 0
    push           "LOAD"     u64 
    callproc       &mm_start.stoptimer 
    setargs                   0 0
    callproc       &mm_start.do_parse 
    setargs                   1 0
    push           "PARSE"    u64 
    callproc       &mm_start.stoptimer 
    setargs                   0 0
    callproc       &mm_start.do_name 
    setargs                   1 0
    push           "NAME"     u64 
    callproc       &mm_start.stoptimer 
    setargs                   0 0
    callproc       &mm_start.do_type 
    setargs                   0 0
    callproc       &mm_start.do_writema 
    setargs                   1 0
    push           mm_decls.outfile u64 
    callproc       &mm_start.do_writeexports 
    setargs                   1 0
    push           "TYPE"     u64 
    callproc       &mm_start.stoptimer 
    setargs                   1 0
    push           mm_decls.stprogram u64 
    push           16         
    pushptroff                u64 1 0
    callproc       &mm_start.fixstlist 
    setargs                   0 0
    callproc       &mm_start.do_genpcl 
    push           mm_decls.passlevel i64 
    push           12         i64 
    jumpne         #11722     i64 
    setargs                   0 0
    callproc       &mm_start.do_runprog 
#11722: 
    push           mm_decls.fverbose i64 
    push           2          i64 
    jumplt         #11723     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Finished." u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#11723: 
    setargs                   0 0
    callproc       &mm_start.showlogfile 
    push           mm_decls.fshowtiming u8 
    jumpfalse      #11724     i64 
    setargs                   0 0
    callfn         &mwindowsp.os_clock i64 
    pop            mm_start.endclock i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Time"     u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_start.endclock i64 
    push           mm_start.startclock i64 
    sub                       i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           "ms"       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#11724: 
#11715: 
    retproc                   
End


Proc mm_start.do_loadmodules:
    procentry                 
    push           mm_decls.fbundled u8 
    jumpfalse      #11726     i64 
    setargs                   0 0
    callproc       &mm_support.loadmafile 
#11726: 
    setargs                   1 0
    push           &mm_decls.inputfiles 
    push           1          i64 
    pushptroff                u64 8 0
    callproc       &mm_start.loadmainmodule 
#11727: 
    retproc                   
End


Proc mm_start.do_parse:
    local          mm_start.do_parse.i i64 
    procentry                 
    push           mm_decls.debugmode i64 
    jumpfalse      #11729     i64 
    push           mm_decls.passlevel i64 
    push           2          i64 
    jumpge         #11729     i64 
    jump           #11730     
#11729: 
    push           mm_decls.fwritedocs u8 
    jumpfalse      #11731     i64 
    setargs                   2 0
    push           "w"        u64 
    setargs                   2 0
    push           "txt"      u64 
    push           mm_decls.outfile u64 
    callfn         &mlibp.changeext u64 
    callfn         &fopen     u64 
    pop            mm_parse.docfile u64 
#11731: 
#11732: 
    push           2          i64 
    pop            mm_start.do_parse.i i64 
    push           mm_decls.nmodules i64 
    push           2          i64 
    jumplt         #11733     i64 
#11734: 
    setargs                   1 0
    push           mm_start.do_parse.i i64 
    callproc       &mm_parse.parsemodule 
#11735: 
    forup          #11734     i64 1
    opnd           mm_start.do_parse.i 
    opnd           mm_decls.nmodules 
#11733: 
    setargs                   1 0
    push           1          i64 
    callproc       &mm_parse.parsemodule 
    setargs                   0 0
    callproc       &mm_start.dostarimports 
    push           mm_parse.docfile u64 
    jumpfalse      #11736     u64 
    setargs                   1 0
    push           mm_parse.docfile u64 
    callproc       &fclose    
#11736: 
    push           mm_decls.debugmode i64 
    jumpfalse      #11737     i64 
    push           mm_decls.passlevel i64 
    push           3          i64 
    jumplt         #11738     i64 
#11737: 
    setargs                   0 0
    callproc       &mm_name.fixusertypes 
#11738: 
    push           mm_decls.debugmode i64 
    jumpfalse      #11739     i64 
    push           mm_decls.fshowast1 u8 
    jumpfalse      #11739     i64 
    setargs                   1 0
    push           "AST1"     u64 
    callproc       &mm_start.showast 
#11739: 
#11730: 
    retproc                   
End


Proc mm_start.do_name:
    local          mm_start.do_name.i i64 
    procentry                 
    push           mm_decls.debugmode i64 
    jumpfalse      #11741     i64 
    push           mm_decls.passlevel i64 
    push           4          i64 
    jumpge         #11741     i64 
    jump           #11742     
#11741: 
    setargs                   0 0
    callproc       &mm_name.rx_typetable 
#11743: 
    push           2          i64 
    pop            mm_start.do_name.i i64 
    push           mm_decls.nmodules i64 
    push           2          i64 
    jumplt         #11744     i64 
#11745: 
    setargs                   1 0
    push           mm_start.do_name.i i64 
    callproc       &mm_name.rx_module 
#11746: 
    forup          #11745     i64 1
    opnd           mm_start.do_name.i 
    opnd           mm_decls.nmodules 
#11744: 
    setargs                   1 0
    push           1          i64 
    callproc       &mm_name.rx_module 
    push           mm_decls.debugmode i64 
    jumpfalse      #11747     i64 
    push           mm_decls.fshowast2 u8 
    jumpfalse      #11747     i64 
    setargs                   1 0
    push           "AST2"     u64 
    callproc       &mm_start.showast 
#11747: 
#11742: 
    retproc                   
End


Proc mm_start.do_type:
    local          mm_start.do_type.i i64 
    procentry                 
    push           mm_decls.debugmode i64 
    jumpfalse      #11749     i64 
    push           mm_decls.passlevel i64 
    push           5          i64 
    jumpge         #11749     i64 
    jump           #11750     
#11749: 
    setargs                   0 0
    callproc       &mm_type.tx_typetable 
    setargs                   0 0
    callproc       &mm_name.fixblockparams 
#11751: 
    push           1          i64 
    pop            mm_start.do_type.i i64 
    push           mm_decls.nmodules i64 
    push           1          i64 
    jumplt         #11752     i64 
#11753: 
    setargs                   1 0
    push           mm_start.do_type.i i64 
    callproc       &mm_type.tx_module 
#11754: 
    forup          #11753     i64 1
    opnd           mm_start.do_type.i 
    opnd           mm_decls.nmodules 
#11752: 
    setargs                   0 0
    callproc       &mm_type.tx_allprocs 
    push           mm_decls.debugmode i64 
    jumpfalse      #11755     i64 
    push           mm_decls.fshowast3 u8 
    jumpfalse      #11755     i64 
    setargs                   1 0
    push           "AST3"     u64 
    callproc       &mm_start.showast 
#11755: 
#11750: 
    retproc                   
End


Proc mm_start.showlogfile:
    local          mm_start.showlogfile.str block:256 
    local          mm_start.showlogfile.logdev u64 
    local          mm_start.showlogfile.size i64 
    procentry                 
    push           mm_decls.debugmode i64 
    jumptrue       #11757     i64 
    jump           #11758     
#11757: 
    setargs                   2 0
    push           "w"        u64 
    push           "mx.log"   u64 
    callfn         &fopen     u64 
    pop            mm_start.showlogfile.logdev u64 
    push           mm_decls.fshowasm u8 
    jumpfalse      #11759     i64 
    push           mm_decls.passlevel i64 
    push           7          i64 
    jumplt         #11759     i64 
    setargs                   1 0
    push           mm_start.showlogfile.logdev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "PROC ASSEMBLY" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           mm_start.showlogfile.logdev u64 
    push           mm_decls.asmfilename u64 
    callproc       &mm_lib.addtolog 
#11759: 
    push           mm_decls.fshowpcl u8 
    jumpfalse      #11760     i64 
    push           mm_decls.passlevel i64 
    push           6          i64 
    jumplt         #11760     i64 
    setargs                   1 0
    push           mm_start.showlogfile.logdev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "PROC PCL" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           mm_start.showlogfile.logdev u64 
    push           mm_decls.pclfilename u64 
    callproc       &mm_lib.addtolog 
#11760: 
    push           mm_decls.fshowast3 u8 
    jumpfalse      #11761     i64 
    push           mm_decls.passlevel i64 
    push           5          i64 
    jumplt         #11761     i64 
    setargs                   2 0
    push           mm_start.showlogfile.logdev u64 
    push           "AST3"     u64 
    callproc       &mm_lib.addtolog 
#11761: 
    push           mm_decls.fshowast2 u8 
    jumpfalse      #11762     i64 
    push           mm_decls.passlevel i64 
    push           4          i64 
    jumplt         #11762     i64 
    setargs                   2 0
    push           mm_start.showlogfile.logdev u64 
    push           "AST2"     u64 
    callproc       &mm_lib.addtolog 
#11762: 
    push           mm_decls.fshowast1 u8 
    jumpfalse      #11763     i64 
    push           mm_decls.passlevel i64 
    push           2          i64 
    jumplt         #11763     i64 
    setargs                   2 0
    push           mm_start.showlogfile.logdev u64 
    push           "AST1"     u64 
    callproc       &mm_lib.addtolog 
#11763: 
    push           mm_decls.fshowst u8 
    jumpfalse      #11764     i64 
    setargs                   2 0
    push           mm_start.showlogfile.logdev u64 
    push           "SYMBOL TABLE" u64 
    callproc       &mm_start.showsttree 
#11764: 
    push           mm_decls.fshowstflat u8 
    jumpfalse      #11765     i64 
    setargs                   2 0
    push           mm_start.showlogfile.logdev u64 
    push           "FLAT SYMBOL TABLE" u64 
    callproc       &mm_start.showstflat 
#11765: 
    push           mm_decls.fshowtypes u8 
    jumpfalse      #11766     i64 
    setargs                   1 0
    push           mm_start.showlogfile.logdev u64 
    callproc       &mm_diags.printmodelist 
#11766: 
    push           mm_decls.fshowoverloads u8 
    jumpfalse      #11767     i64 
    setargs                   1 0
    push           mm_start.showlogfile.logdev u64 
    callproc       &mm_diags.printoverloads 
#11767: 
    setargs                   1 0
    push           mm_start.showlogfile.logdev u64 
    callfn         &mlibp.getfilesize i64 
    pop            mm_start.showlogfile.size i64 
    setargs                   1 0
    push           mm_start.showlogfile.logdev u64 
    callproc       &fclose    
    push           mm_start.showlogfile.size i64 
    jumpfalse      #11768     i64 
    setargs                   1 0
    push           &mm_start.showlogfile.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "\\m\\olded.bat -w " u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "mx.log"   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "mm.m"     u64 
    callfn         &mlibp.checkfile i64 
    jumpfalse      #11769     i64 
    setargs                   3 0
    push           0          u64 
    push           1          i64 
    push           &mm_start.showlogfile.str 
    callproc       &mwindowsp.os_execwait 
    jump           #11770     
#11769: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Diagnostic outputs written to" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "mx.log"   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#11770: 
#11768: 
    push           0          i64 
    stop                      
#11758: 
    retproc                   
End


Proc mm_start.initdata:
    param          mm_start.initdata.os i64 
    param          mm_start.initdata.target i64 
    procentry                 
    setargs                   0 0
    callproc       &mlibp.pcm_init 
    setargs                   0 0
    callproc       &mm_lex.lexsetup 
    setargs                   0 0
    callproc       &mm_start.initassemsymbols 
    setargs                   0 0
    callproc       &mm_support.init_tt_tables 
    setargs                   0 0
    callproc       &mm_support.initbblib 
    push           mm_start.initdata.os i64 
    push           87         i64 
    jumpne         #11772     i64 
    push           1          i64 
    pop            mm_decls.fwindows u8 
    jump           #11773     
#11772: 
    push           1          i64 
    pop            mm_decls.flinux u8 
#11773: 
    push           mm_start.initdata.target i64 
    push           3421784    i64 
    casejumpeq     #11774     i64 0
    popstack                  i64 
    jump           #11775     
#11774: 
    push           1          i64 
    pop            mm_decls.fx64 u8 
    push           mm_decls.flinux u8 
    jumpfalse      #11776     i64 
    setargs                   3 0
    push           ""         u64 
    push           ""         u64 
    push           "Linux/x64" u64 
    callproc       &mm_support.loaderror 
#11776: 
    jump           #11777     
#11775: 
    setargs                   3 0
    push           ""         u64 
    push           ""         u64 
    push           "Bad os/target" u64 
    callproc       &mm_support.loaderror 
#11777: 
    setargs                   2 0
    push           "1"        u64 
    push           "mm"       u64 
    callproc       &mm_start.addoptionvar 
#11778: 
    retproc                   
End


Proc mm_start.loadmainmodule: i64
    param          mm_start.loadmainmodule.filespec u64 
    local          mm_start.loadmainmodule.modulename block:100 
    local          mm_start.loadmainmodule.path block:300 
    local          mm_start.loadmainmodule.source u64 
    local          mm_start.loadmainmodule.status i64 
    local          mm_start.loadmainmodule.m block:456 
    local          mm_start.loadmainmodule.i i64 
    local          mm_start.loadmainmodule.fileno i64 
    procentry                 
    setargs                   2 0
    push           456        i64 
    push           &mm_decls.moduletable 
    push           0          
    addrefoff                 u8 1 0
    callproc       &mlibp.pcm_clearmem 
    push           "<dummy file>" u64 
    push           &mm_decls.sourcefilenames 
    push           0          i64 
    popptroff                 u64 8 0
    push           "<dummy path>" u64 
    push           &mm_decls.sourcefilepaths 
    push           0          i64 
    popptroff                 u64 8 0
    push           "<sourcefile0>" u64 
    push           &mm_decls.sourcefiletext 
    push           0          i64 
    popptroff                 u64 8 0
    setargs                   1 0
    push           &mm_decls.sourcefiletext 
    push           0          i64 
    pushptroff                u64 8 0
    callfn         &strlen    i64 
    push           &mm_decls.sourcefilesizes 
    push           0          i64 
    popptroff                 i64 8 0
    push           "PROGRAM"  u64 
    push           &mm_decls.moduletable 
    push           0          i64 
    addrefoff                 block:456 456 0
    push           0          
    popptroff                 u64 1 0
    push           0          i64 
    push           &mm_decls.moduletable 
    push           0          i64 
    addrefoff                 block:456 456 0
    push           16         
    popptroff                 i64 1 0
    setargs                   3 0
    push           1          i64 
    setargs                   1 0
    push           "$prog"    u64 
    callfn         &mm_lex.addnamestr u64 
    push           0          u64 
    callfn         &mm_lib.createdupldef u64 
    pop            mm_decls.stprogram u64 
    push           mm_decls.stprogram u64 
    push           &mm_decls.moduletable 
    push           0          i64 
    addrefoff                 block:456 456 0
    push           8          
    popptroff                 u64 1 0
    setargs                   1 0
    push           mm_start.loadmainmodule.filespec u64 
    callfn         &mm_support.getmainfile i64 
    pop            mm_start.loadmainmodule.fileno i64 
    push           0          u64 
    pop            mm_decls.infotext u64 
    setargs                   2 0
    setargs                   1 0
    push           mm_start.loadmainmodule.filespec u64 
    callfn         &mlibp.extractbasefile u64 
    push           &mm_start.loadmainmodule.modulename 
    callproc       &strcpy    
    setargs                   2 0
    setargs                   1 0
    push           mm_start.loadmainmodule.filespec u64 
    callfn         &mlibp.extractpath u64 
    push           &mm_start.loadmainmodule.path 
    callproc       &strcpy    
    push           &mm_start.loadmainmodule.path 
    push           1          i64 
    pushptroff                u8 1 -1
    jumpfalse      #11780     u64 
    setargs                   1 0
    push           &mm_start.loadmainmodule.path 
    callproc       &mm_start.addsearchdir 
#11780: 
    setargs                   2 0
    push           mm_start.loadmainmodule.fileno i64 
    push           &mm_start.loadmainmodule.modulename 
    callproc       &mm_start.addmodule 
    setargs                   0 0
    callproc       &mm_support.addspecialtypes 
    push           1          i64 
    setret                    i64 
    jump           #11781     
#11781: 
    retfn                     i64 
End


Proc mm_start.addmodule: i64
    param          mm_start.addmodule.modulename u64 
    param          mm_start.addmodule.fileno i64 
    local          mm_start.addmodule.m block:456 
    local          mm_start.addmodule.importnames block:1600 
    local          mm_start.addmodule.importflags block:201 
    local          mm_start.addmodule.importxd block:201 
    local          mm_start.addmodule.importmoduleno block:1600 
    local          mm_start.addmodule.nimports i64 
    local          mm_start.addmodule.i i64 
    local          mm_start.addmodule.status i64 
    local          mm_start.addmodule.k i64 
    local          mm_start.addmodule.flag i64 
    local          mm_start.addmodule.j i64 
    local          mm_start.addmodule.newmodno i64 
    local          mm_start.addmodule.pmodule u64 
    procentry                 
    setargs                   1 0
    push           mm_start.addmodule.modulename u64 
    callproc       &mlibp.convlcstring 
    setargs                   2 0
    push           456        i64 
    push           &mm_start.addmodule.m 
    callproc       &mlibp.pcm_clearmem 
    setargs                   1 0
    push           mm_start.addmodule.modulename u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &mm_start.addmodule.m 
    push           0          
    popptroff                 u64 1 0
    push           mm_start.addmodule.fileno i64 
    push           &mm_start.addmodule.m 
    push           16         
    popptroff                 i64 1 0
    setargs                   2 0
    setargs                   1 0
    push           &mm_start.addmodule.m 
    pushptr                   u64 
    callfn         &mm_lex.addnamestr u64 
    push           mm_decls.stprogram u64 
    callfn         &mm_lib.createnewmoduledef u64 
    pop            mm_decls.stmodule u64 
    push           mm_decls.stmodule u64 
    push           &mm_start.addmodule.m 
    push           8          
    popptroff                 u64 1 0
    push           mm_decls.nmodules i64 
    push           200        i64 
    jumplt         #11783     i64 
    setargs                   3 0
    push           ""         u64 
    push           mm_start.addmodule.modulename u64 
    push           "Too many modules" u64 
    callproc       &mm_support.loaderror 
#11783: 
    push           &mm_decls.moduletable 
    push           &mm_decls.nmodules 
    incrload                  i64 1
    store          mm_start.addmodule.newmodno i64 
    addrefoff                 block:456 456 0
    pop            mm_start.addmodule.pmodule u64 
    push           mm_start.addmodule.m block:456 
    push           mm_start.addmodule.pmodule u64 
    popptr                    block:456 
    push           1          i64 
    push           mm_start.addmodule.pmodule u64 
    push           40         
    addrefoff                 u64 1 0
    push           mm_start.addmodule.newmodno i64 
    popptroff                 u8 1 -1
    push           mm_start.addmodule.newmodno i64 
    push           &mm_start.addmodule.m 
    push           8          
    pushptroff                u64 1 0
    push           94         
    popptroff                 u8 1 0
    push           &mm_start.addmodule.importflags 
    clear                     block:201 
    setargs                   1 0
    push           mm_start.addmodule.newmodno i64 
    callproc       &mm_start.tokenisemodule 
    setargs                   5 0
    push           200        i64 
    push           &mm_start.addmodule.importxd 
    push           &mm_start.addmodule.importflags 
    push           &mm_start.addmodule.importnames 
    push           mm_start.addmodule.newmodno i64 
    callfn         &mm_start.readimportlist i64 
    pop            mm_start.addmodule.nimports i64 
#11784: 
    push           1          i64 
    pop            mm_start.addmodule.i i64 
    push           mm_start.addmodule.nimports i64 
    push           1          i64 
    jumplt         #11785     i64 
#11786: 
    push           0          i64 
    pop            mm_start.addmodule.flag i64 
    push           mm_decls.fverbose i64 
    push           3          i64 
    jumpne         #11787     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Load import for" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_start.addmodule.modulename u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "IMPORTNAMES[I]=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_start.addmodule.importnames 
    push           mm_start.addmodule.i i64 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#11787: 
    setargs                   3 0
    push           mm_start.addmodule.modulename u64 
    push           &mm_start.addmodule.importxd 
    push           mm_start.addmodule.i i64 
    pushptroff                u8 1 0
    push           &mm_start.addmodule.importnames 
    push           mm_start.addmodule.i i64 
    pushptroff                u64 8 -8
    callfn         &mm_start.loadimport i64 
    pop            mm_start.addmodule.k i64 
    push           1          i64 
    push           mm_start.addmodule.pmodule u64 
    push           40         
    addrefoff                 u64 1 0
    push           mm_start.addmodule.k i64 
    popptroff                 u8 1 -1
    push           &mm_start.addmodule.importflags 
    push           mm_start.addmodule.i i64 
    pushptroff                u8 1 0
    push           mm_start.addmodule.pmodule u64 
    push           240        
    addrefoff                 u64 1 0
    push           mm_start.addmodule.k i64 
    popptroff                 u8 1 -1
    push           mm_start.addmodule.k i64 
    push           &mm_start.addmodule.importmoduleno 
    push           mm_start.addmodule.i i64 
    popptroff                 i64 8 -8
#11788: 
    forup          #11786     i64 1
    opnd           mm_start.addmodule.i 
    opnd           mm_start.addmodule.nimports 
#11785: 
    push           mm_start.addmodule.newmodno i64 
    setret                    i64 
    jump           #11789     
#11789: 
    retfn                     i64 
End


Proc mm_start.readimportlist: i64
    param          mm_start.readimportlist.m i64 
    param          mm_start.readimportlist.importnames u64 
    param          mm_start.readimportlist.importflags u64 
    param          mm_start.readimportlist.importxd u64 
    param          mm_start.readimportlist.maximports i64 
    local          mm_start.readimportlist.n i64 
    local          mm_start.readimportlist.flag i64 
    local          mm_start.readimportlist.xdflag i64 
    local          mm_start.readimportlist.s u64 
    local          mm_start.readimportlist.name block:100 
    local          mm_start.readimportlist.libname block:100 
    local          mm_start.readimportlist.iname u64 
    local          mm_start.readimportlist.needbsys i64 
    local          mm_start.readimportlist.needclib i64 
    local          mm_start.readimportlist.bsysname u64 
    local          mm_start.readimportlist.i i64 
    procentry                 
    setargs                   1 0
    push           mm_start.readimportlist.m i64 
    callproc       &mm_lex.starttkscan 
    push           0          i64 
    pop            mm_start.readimportlist.n i64 
#11791: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           66         i64 
    casejumpeq     #11792     i64 0
    push           6          i64 
    casejumpeq     #11793     i64 0
    push           65         i64 
    casejumpeq     #11793     i64 0
    push           135        i64 
    casejumpeq     #11794     i64 0
    push           137        i64 
    casejumpeq     #11795     i64 0
    push           138        i64 
    casejumpeq     #11796     i64 0
    popstack                  i64 
    jump           #11797     
#11792: 
    jump           #11798     
    jump           #11799     
#11793: 
    jump           #11799     
#11794: 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    pop            mm_start.readimportlist.xdflag i64 
    push           0          i64 
    pop            mm_start.readimportlist.flag i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           32         i64 
    jumpne         #11800     i64 
    push           1          i64 
    pop            mm_start.readimportlist.flag i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
#11800: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           79         i64 
    jumpeq         #11801     i64 
    setargs                   1 0
    push           "import: modulename expected" u64 
    callproc       &mlibp.abortprogram 
#11801: 
    push           &mm_start.readimportlist.n 
    incrload                  i64 1
    push           mm_start.readimportlist.maximports i64 
    jumplt         #11802     i64 
    setargs                   1 0
    push           "too many imports" u64 
    callproc       &mlibp.abortprogram 
#11802: 
    setargs                   1 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    pushptr                   u64 
    callfn         &mm_start.mapimport u64 
    pop            mm_start.readimportlist.iname u64 
    setargs                   1 0
    push           mm_start.readimportlist.iname u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           mm_start.readimportlist.importnames u64 
    push           mm_start.readimportlist.n i64 
    popptroff                 u64 8 -8
    push           mm_start.readimportlist.flag i64 
    push           mm_start.readimportlist.importflags u64 
    push           mm_start.readimportlist.n i64 
    popptroff                 u8 1 0
    push           mm_start.readimportlist.xdflag i64 
    push           mm_start.readimportlist.importxd u64 
    push           mm_start.readimportlist.n i64 
    popptroff                 u8 1 0
#11803: 
    setargs                   0 0
    callproc       &mm_lex.lex 
#11804: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           79         i64 
    jumpeq         #11803     i64 
#11805: 
    jump           #11799     
#11795: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           75         i64 
    jumpne         #11806     i64 
    setargs                   1 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    callproc       &mm_start.addsearchdir 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #11807     
#11806: 
    setargs                   1 0
    push           "string path expected" u64 
    callproc       &mlibp.abortprogram 
#11807: 
    jump           #11799     
#11796: 
    setargs                   0 0
    callproc       &mm_start.domapmodule 
    jump           #11799     
#11797: 
    jump           #11798     
#11799: 
    jump           #11791     
#11798: 
    push           mm_decls.msyslevel i64 
    push           1          i64 
    casejumpeq     #11808     i64 0
    push           0          i64 
    casejumpeq     #11809     i64 0
    push           2          i64 
    casejumpeq     #11809     i64 0
    popstack                  i64 
    jump           #11810     
#11808: 
    push           "msystemp" u64 
    pop            mm_start.readimportlist.bsysname u64 
    jump           #11811     
#11809: 
    push           "msysp"    u64 
    pop            mm_start.readimportlist.bsysname u64 
    jump           #11811     
#11810: 
#11811: 
    push           mm_decls.nmodules i64 
    push           1          i64 
    jumpne         #11812     i64 
    push           mm_decls.msyslevel i64 
    jumpfalse      #11813     i64 
    push           1          i64 
    pop            mm_start.readimportlist.needbsys i64 
#11814: 
    push           1          i64 
    pop            mm_start.readimportlist.i i64 
    push           mm_start.readimportlist.n i64 
    push           1          i64 
    jumplt         #11815     i64 
#11816: 
    setargs                   2 0
    push           mm_start.readimportlist.bsysname u64 
    push           mm_start.readimportlist.importnames u64 
    push           mm_start.readimportlist.i i64 
    pushptroff                u64 8 -8
    callfn         &mlibp.eqstring i64 
    jumpfalse      #11817     i64 
    push           0          i64 
    pop            mm_start.readimportlist.needbsys i64 
    jump           #11815     
#11817: 
#11818: 
    forup          #11816     i64 1
    opnd           mm_start.readimportlist.i 
    opnd           mm_start.readimportlist.n 
#11815: 
    jump           #11819     
#11813: 
    push           0          i64 
    pop            mm_start.readimportlist.needbsys i64 
#11819: 
    push           mm_start.readimportlist.needbsys i64 
    jumpfalse      #11820     i64 
    push           &mm_start.readimportlist.n 
    incr                      i64 1
    setargs                   1 0
    push           mm_start.readimportlist.bsysname u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           mm_start.readimportlist.importnames u64 
    push           mm_start.readimportlist.n i64 
    popptroff                 u64 8 -8
    push           0          i64 
    push           mm_start.readimportlist.importflags u64 
    push           mm_start.readimportlist.n i64 
    popptroff                 u8 1 0
    push           0          i64 
    push           mm_start.readimportlist.importxd u64 
    push           mm_start.readimportlist.n i64 
    popptroff                 u8 1 0
#11820: 
#11812: 
    push           mm_start.readimportlist.n i64 
    setret                    i64 
    jump           #11821     
#11821: 
    retfn                     i64 
End


Proc mm_start.loadimport: i64
    param          mm_start.loadimport.modulename u64 
    param          mm_start.loadimport.xdflag i64 
    param          mm_start.loadimport.ownername u64 
    local          mm_start.loadimport.i i64 
    local          mm_start.loadimport.fileno i64 
    local          mm_start.loadimport.ifilespec u64 
    local          mm_start.loadimport.filespec block:300 
    local          mm_start.loadimport.source u64 
    local          mm_start.loadimport.newname u64 
    procentry                 
    push           mm_start.loadimport.modulename u64 
    pop            mm_start.loadimport.newname u64 
#11823: 
    push           1          i64 
    pop            mm_start.loadimport.i i64 
    push           mm_decls.nmodules i64 
    push           1          i64 
    jumplt         #11824     i64 
#11825: 
    setargs                   2 0
    push           mm_start.loadimport.newname u64 
    push           &mm_decls.moduletable 
    push           mm_start.loadimport.i i64 
    addrefoff                 block:456 456 0
    pushptr                   u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #11826     i64 
    push           mm_start.loadimport.i i64 
    setret                    i64 
    jump           #11827     
#11826: 
#11828: 
    forup          #11825     i64 1
    opnd           mm_start.loadimport.i 
    opnd           mm_decls.nmodules 
#11824: 
    setargs                   3 0
    push           mm_start.loadimport.xdflag i64 
    push           mm_start.loadimport.ownername u64 
    push           mm_start.loadimport.modulename u64 
    callfn         &mm_support.getmodulefile i64 
    pop            mm_start.loadimport.fileno i64 
    push           mm_start.loadimport.xdflag i64 
    jumpfalse      #11829     i64 
    setargs                   1 0
    push           mm_start.loadimport.modulename u64 
    callproc       &mm_lib.addcclib 
#11829: 
    setargs                   2 0
    push           mm_start.loadimport.fileno i64 
    push           mm_start.loadimport.newname u64 
    callfn         &mm_start.addmodule i64 
    setret                    i64 
    jump           #11827     
#11827: 
    retfn                     i64 
End


Proc mm_start.initsearchdirs:
    local          mm_start.initsearchdirs.str1 block:300 
    local          mm_start.initsearchdirs.str2 block:300 
    local          mm_start.initsearchdirs.i i64 
    procentry                 
    push           0          i64 
    pop            mm_decls.nsearchdirs i64 
    setargs                   1 0
    push           "c:/mxp/"  u64 
    callproc       &mm_start.addsearchdir 
    setargs                   1 0
    setargs                   0 0
    callfn         &mwindowsp.os_getmpath u64 
    callproc       &mm_start.addsearchdir 
    setargs                   1 0
    setargs                   0 0
    callfn         &mwindowsp.os_gethostname u64 
    callproc       &mm_start.addsearchdir 
    setargs                   1 0
    push           "./"       u64 
    callproc       &mm_start.addsearchdir 
#11831: 
    retproc                   
End


Proc mm_start.addsearchdir:
    param          mm_start.addsearchdir.path u64 
    local          mm_start.addsearchdir.i i64 
    procentry                 
#11833: 
    push           1          i64 
    pop            mm_start.addsearchdir.i i64 
    push           mm_decls.nsearchdirs i64 
    push           1          i64 
    jumplt         #11834     i64 
#11835: 
    setargs                   2 0
    push           mm_start.addsearchdir.path u64 
    push           &mm_decls.searchdirs 
    push           mm_start.addsearchdir.i i64 
    pushptroff                u64 8 -8
    callfn         &mlibp.eqstring i64 
    jumpfalse      #11836     i64 
    jump           #11837     
#11836: 
#11838: 
    forup          #11835     i64 1
    opnd           mm_start.addsearchdir.i 
    opnd           mm_decls.nsearchdirs 
#11834: 
    push           mm_decls.nsearchdirs i64 
    push           10         i64 
    jumple         #11839     i64 
    setargs                   3 0
    push           ""         u64 
    push           ""         u64 
    push           "Too many search paths" u64 
    callproc       &mm_support.loaderror 
#11839: 
    setargs                   1 0
    push           mm_start.addsearchdir.path u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &mm_decls.searchdirs 
    push           &mm_decls.nsearchdirs 
    incrload                  i64 1
    popptroff                 u64 8 -8
#11837: 
    retproc                   
End


Proc mm_start.tokenisemodule:
    param          mm_start.tokenisemodule.moduleno i64 
    local          mm_start.tokenisemodule.m u64 
    local          mm_start.tokenisemodule.ntokens i64 
    procentry                 
    push           &mm_decls.moduletable 
    push           mm_start.tokenisemodule.moduleno i64 
    addrefoff                 block:456 456 0
    pop            mm_start.tokenisemodule.m u64 
    setargs                   2 0
    push           &mm_start.tokenisemodule.ntokens 
    push           mm_start.tokenisemodule.m u64 
    push           16         
    pushptroff                i64 1 0
    callfn         &mm_lex.readtokens_a u64 
    push           mm_start.tokenisemodule.m u64 
    push           448        
    popptroff                 u64 1 0
#11841: 
    retproc                   
End


Proc mm_start.getinputoptions:
    local          mm_start.getinputoptions.i i64 
    local          mm_start.getinputoptions.j i64 
    local          mm_start.getinputoptions.k i64 
    local          mm_start.getinputoptions.paramno i64 
    local          mm_start.getinputoptions.pmtype i64 
    local          mm_start.getinputoptions.sw i64 
    local          mm_start.getinputoptions.ncolons i64 
    local          mm_start.getinputoptions.passfixed i64 
    local          mm_start.getinputoptions.name u64 
    local          mm_start.getinputoptions.value u64 
    local          mm_start.getinputoptions.filename u64 
    local          mm_start.getinputoptions.ext u64 
    local          mm_start.getinputoptions.filespec block:300 
    local          mm_start.getinputoptions.av_1 i64 
    procentry                 
    push           1          i64 
    pop            mm_decls.prodmode i64 
    push           2          i64 
    pop            mm_start.getinputoptions.paramno i64 
    push           0          i64 
    pop            mm_start.getinputoptions.ncolons i64 
    jump           #11843     
#11844: 
    push           mm_start.getinputoptions.pmtype i64 
    push           1          i64 
    casejumpeq     #11845     i64 0
    push           2          i64 
    casejumpeq     #11846     i64 0
    push           3          i64 
    casejumpeq     #11847     i64 0
    push           4          i64 
    casejumpeq     #11848     i64 0
    push           5          i64 
    casejumpeq     #11849     i64 0
    popstack                  i64 
    jump           #11850     
#11845: 
    setargs                   1 0
    push           mm_start.getinputoptions.name u64 
    callproc       &mlibp.convlcstring 
#11851: 
    push           1          i64 
    pop            mm_start.getinputoptions.sw i64 
    push           49         i64 
    pop            mm_start.getinputoptions.av_1 i64 
    push           mm_start.getinputoptions.av_1 i64 
    push           1          i64 
    jumplt         #11852     i64 
#11853: 
    setargs                   2 0
    push           &mm_start.optionnames 
    push           mm_start.getinputoptions.sw i64 
    pushptroff                u64 8 -8
    push           mm_start.getinputoptions.name u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #11854     i64 
    setargs                   2 0
    push           mm_start.getinputoptions.value u64 
    push           mm_start.getinputoptions.sw i64 
    callproc       &mm_start.do_option 
    jump           #11855     
#11854: 
#11856: 
    forup          #11853     i64 1
    opnd           mm_start.getinputoptions.sw 
    opnd           mm_start.getinputoptions.av_1 
#11852: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Unknown option:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_start.getinputoptions.name u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           99         i64 
    stop                      
#11855: 
    jump           #11857     
#11846: 
    push           mm_decls.ninputfiles i64 
    push           200        i64 
    jumplt         #11858     i64 
    setargs                   3 0
    push           ""         u64 
    push           ""         u64 
    push           "Too many input files" u64 
    callproc       &mm_support.loaderror 
#11858: 
    setargs                   1 0
    push           mm_start.getinputoptions.name u64 
    callproc       &mlibp.convlcstring 
    setargs                   1 0
    push           mm_start.getinputoptions.name u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &mm_decls.inputfiles 
    push           &mm_decls.ninputfiles 
    incrload                  i64 1
    popptroff                 u64 8 0
    jump           #11857     
#11847: 
    push           mm_decls.nlibfiles i64 
    push           50         i64 
    jumplt         #11859     i64 
    setargs                   3 0
    push           ""         u64 
    push           ""         u64 
    push           "Too many lib files" u64 
    callproc       &mm_support.loaderror 
#11859: 
    setargs                   1 0
    push           mm_start.getinputoptions.name u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &mm_decls.libfiles 
    push           &mm_decls.nlibfiles 
    incrload                  i64 1
    popptroff                 u64 8 0
    jump           #11857     
#11848: 
    push           &mm_start.getinputoptions.ncolons 
    incrload                  i64 1
    push           1          i64 
    jumple         #11860     i64 
    push           ":"        u64 
    pop            mm_start.getinputoptions.name u64 
    push           0          u64 
    pop            mm_start.getinputoptions.value u64 
    jump           #11861     
#11860: 
    jump           #11857     
#11849: 
!doextra::
#11861: 
    setargs                   1 0
    push           mm_start.getinputoptions.name u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &mm_start.extraparams 
    push           &mm_start.nextraparams 
    incrload                  i64 1
    popptroff                 u64 8 -8
    setargs                   1 0
    push           mm_start.getinputoptions.value u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &mm_start.extravalues 
    push           mm_start.nextraparams i64 
    popptroff                 u64 8 -8
    jump           #11857     
#11850: 
#11857: 
#11843: 
    setargs                   4 0
    push           "m"        u64 
    push           &mm_start.getinputoptions.value 
    push           &mm_start.getinputoptions.name 
    push           &mm_start.getinputoptions.paramno 
    callfn         &mlibp.nextcmdparam i64 
    store          mm_start.getinputoptions.pmtype i64 
    jumptrue       #11844     i64 
#11862: 
    push           mm_decls.prodmode i64 
    push           mm_decls.debugmode i64 
    jumpne         #11863     i64 
    push           mm_decls.debugmode i64 
    push           0          i64 
    jumpne         #11863     i64 
    push           10         i64 
    pop            mm_decls.passlevel i64 
    push           1          i64 
    pop            mm_decls.prodmode i64 
    jump           #11864     
#11863: 
    push           mm_decls.prodmode i64 
    jumpfalse      #11865     i64 
    push           mm_decls.passlevel i64 
    push           0          i64 
    jumpne         #11865     i64 
    push           10         i64 
    pop            mm_decls.passlevel i64 
    jump           #11864     
#11865: 
    push           mm_decls.debugmode i64 
    jumpfalse      #11866     i64 
    push           mm_decls.passlevel i64 
    push           0          i64 
    jumpne         #11866     i64 
    push           7          i64 
    pop            mm_decls.passlevel i64 
#11866: 
#11864: 
    push           mm_decls.msyslevel i64 
    push           -1         i64 
    jumpne         #11867     i64 
    startmult                 
    push           mm_decls.prodmode i64 
    jumpfalse      #11868     i64 
    push           2          i64 
    resetmult                 
    jump           #11869     
#11868: 
    push           0          i64 
    endmult                   
#11869: 
    pop            mm_decls.msyslevel i64 
    startmult                 
    push           mm_decls.prodmode i64 
    jumpfalse      #11870     i64 
    push           2          i64 
    resetmult                 
    jump           #11871     
#11870: 
    push           0          i64 
    endmult                   
#11871: 
    pop            mm_decls.msyslevel i64 
#11867: 
    push           mm_decls.ninputfiles i64 
    push           0          i64 
    jumpne         #11872     i64 
    setargs                   0 0
    callproc       &mm_start.showcaption 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Usage:"   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\t"       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           &msysp.sysparams 
    push           1          i64 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "filename[.m]     # Compile project to executable" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\t"       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           &msysp.sysparams 
    push           1          i64 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "-help            # Other options" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           0          
    stop                      
    jump           #11873     
#11872: 
    push           mm_decls.ninputfiles i64 
    push           1          i64 
    jumpne         #11874     i64 
    push           &mm_decls.inputfiles 
    push           1          i64 
    pushptroff                u64 8 0
    pop            mm_start.getinputoptions.filename u64 
    setargs                   2 0
    push           0          i64 
    push           mm_start.getinputoptions.filename u64 
    callfn         &mlibp.extractext u64 
    pop            mm_start.getinputoptions.ext u64 
    setargs                   2 0
    push           "ma"       u64 
    push           mm_start.getinputoptions.ext u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #11875     i64 
    push           1          i64 
    pop            mm_decls.fbundled u8 
    setargs                   1 0
    push           mm_start.getinputoptions.filename u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    pop            mm_decls.mafilename u64 
    setargs                   1 0
    setargs                   2 0
    push           "m"        u64 
    push           mm_start.getinputoptions.filename u64 
    callfn         &mlibp.changeext u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &mm_decls.inputfiles 
    push           1          i64 
    popptroff                 u64 8 0
#11875: 
    setargs                   1 0
    push           mm_start.getinputoptions.filename u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    pop            mm_decls.outfile u64 
    push           mm_decls.destfilename u64 
    jumpfalse      #11876     u64 
    push           mm_decls.destfilename u64 
    pop            mm_decls.outfile u64 
    jump           #11877     
#11876: 
    push           mm_decls.destfilepath u64 
    jumpfalse      #11878     u64 
    setargs                   2 0
    push           mm_decls.destfilepath u64 
    push           &mm_start.getinputoptions.filespec 
    callproc       &strcpy    
    setargs                   2 0
    push           mm_decls.outfile u64 
    setargs                   1 0
    push           &mm_start.getinputoptions.filespec 
    callfn         &mlibp.extractfile u64 
    callproc       &strcat    
    setargs                   1 0
    push           &mm_start.getinputoptions.filespec 
    callfn         &mlibp.pcm_copyheapstring u64 
    pop            mm_decls.outfile u64 
#11878: 
#11877: 
    jump           #11873     
#11874: 
    setargs                   3 0
    push           ""         u64 
    push           ""         u64 
    push           "Specify one lead module only" u64 
    callproc       &mm_support.loaderror 
#11873: 
    push           mm_decls.msyslevel i64 
    push           1          i64 
    casejumpeq     #11879     i64 0
    push           0          i64 
    casejumpeq     #11880     i64 0
    push           2          i64 
    casejumpeq     #11880     i64 0
    popstack                  i64 
    jump           #11881     
#11879: 
    setargs                   4 0
    push           0          u64 
    push           0          u64 
    push           "msystemp" u64 
    push           "msys"     u64 
    callproc       &mm_start.addmodulemapping 
    jump           #11882     
#11880: 
    setargs                   4 0
    push           0          u64 
    push           0          u64 
    push           "msysp"    u64 
    push           "msys"     u64 
    callproc       &mm_start.addmodulemapping 
    jump           #11882     
#11881: 
#11882: 
    setargs                   2 0
    push           "asm"      u64 
    push           mm_decls.outfile u64 
    callfn         &mm_start.getoutfilename u64 
    pop            mm_decls.asmfilename u64 
    setargs                   2 0
    push           "pcl"      u64 
    push           mm_decls.outfile u64 
    callfn         &mm_start.getoutfilename u64 
    pop            mm_decls.pclfilename u64 
    setargs                   2 0
    push           "exe"      u64 
    push           mm_decls.outfile u64 
    callfn         &mm_start.getoutfilename u64 
    pop            mm_decls.exefilename u64 
    setargs                   2 0
    push           "dll"      u64 
    push           mm_decls.outfile u64 
    callfn         &mm_start.getoutfilename u64 
    pop            mm_decls.dllfilename u64 
    setargs                   2 0
    push           "obj"      u64 
    push           mm_decls.outfile u64 
    callfn         &mm_start.getoutfilename u64 
    pop            mm_decls.objfilename u64 
    setargs                   2 0
    push           "ma"       u64 
    push           mm_decls.outfile u64 
    callfn         &mm_start.getoutfilename u64 
    pop            mm_decls.mafilename u64 
    setargs                   2 0
    push           "exp"      u64 
    push           mm_decls.outfile u64 
    callfn         &mm_start.getoutfilename u64 
    pop            mm_decls.expfilename u64 
#11883: 
    retproc                   
End


Proc mm_start.do_option:
    param          mm_start.do_option.sw i64 
    param          mm_start.do_option.value u64 
    procentry                 
    push           mm_start.do_option.sw i64 
    switch         #11885     1 48
    opnd           #11886     
#11885: 
    switchlabel    #11887     
    switchlabel    #11888     
    switchlabel    #11889     
    switchlabel    #11890     
    switchlabel    #11891     
    switchlabel    #11892     
    switchlabel    #11893     
    switchlabel    #11886     
    switchlabel    #11894     
    switchlabel    #11895     
    switchlabel    #11896     
    switchlabel    #11897     
    switchlabel    #11898     
    switchlabel    #11899     
    switchlabel    #11900     
    switchlabel    #11901     
    switchlabel    #11902     
    switchlabel    #11903     
    switchlabel    #11886     
    switchlabel    #11886     
    switchlabel    #11904     
    switchlabel    #11905     
    switchlabel    #11906     
    switchlabel    #11907     
    switchlabel    #11908     
    switchlabel    #11909     
    switchlabel    #11910     
    switchlabel    #11911     
    switchlabel    #11912     
    switchlabel    #11913     
    switchlabel    #11914     
    switchlabel    #11915     
    switchlabel    #11916     
    switchlabel    #11917     
    switchlabel    #11918     
    switchlabel    #11919     
    switchlabel    #11920     
    switchlabel    #11921     
    switchlabel    #11922     
    switchlabel    #11923     
    switchlabel    #11924     
    switchlabel    #11925     
    switchlabel    #11926     
    switchlabel    #11926     
    switchlabel    #11927     
    switchlabel    #11928     
    switchlabel    #11929     
    switchlabel    #11930     
    endswitch                 
#11887: 
    push           1          i64 
    pop            mm_decls.passlevel i64 
    jump           #11931     
#11889: 
    push           2          i64 
    pop            mm_decls.passlevel i64 
    jump           #11931     
#11888: 
    push           3          i64 
    pop            mm_decls.passlevel i64 
    jump           #11931     
#11890: 
    push           4          i64 
    pop            mm_decls.passlevel i64 
    jump           #11931     
#11891: 
    push           5          i64 
    pop            mm_decls.passlevel i64 
    jump           #11931     
#11892: 
    push           6          i64 
    pop            mm_decls.passlevel i64 
    push           "pcl"      u64 
    pop            mm_start.outext u64 
    jump           #11931     
#11893: 
    push           8          i64 
    pop            mm_decls.passlevel i64 
    push           "asm"      u64 
    pop            mm_start.outext u64 
    jump           #11931     
#11894: 
    push           9          i64 
    pop            mm_decls.passlevel i64 
    push           "obj"      u64 
    pop            mm_start.outext u64 
    jump           #11931     
#11896: 
    push           10         i64 
    pop            mm_decls.passlevel i64 
    push           "exe"      u64 
    pop            mm_start.outext u64 
    jump           #11931     
#11895: 
    push           11         i64 
    pop            mm_decls.passlevel i64 
    push           "dll"      u64 
    pop            mm_start.outext u64 
    jump           #11931     
#11897: 
    push           12         i64 
    pop            mm_decls.passlevel i64 
    push           "exe"      u64 
    pop            mm_start.outext u64 
    jump           #11931     
#11898: 
    push           6          i64 
    pop            mm_decls.passlevel i64 
    push           "pcl"      u64 
    pop            mm_start.outext u64 
    push           1          i64 
    pop            mm_start.fpclexe u8 
    jump           #11931     
#11899: 
    push           8          i64 
    pop            mm_decls.passlevel i64 
    push           "asm"      u64 
    pop            mm_start.outext u64 
    push           1          i64 
    pop            mm_start.fasmexe u8 
    jump           #11931     
#11905: 
    push           1          i64 
    pop            mm_decls.fwritema u8 
    push           "ma"       u64 
    pop            mm_start.outext u64 
    jump           #11931     
#11907: 
    push           1          i64 
    pop            mm_decls.fwriteexports u8 
    jump           #11931     
#11906: 
    push           1          i64 
    pop            mm_decls.fwritedocs u8 
    jump           #11931     
#11900: 
    push           2          i64 
    pop            mm_decls.msyslevel i64 
    jump           #11931     
#11901: 
    push           1          i64 
    pop            mm_decls.msyslevel i64 
    jump           #11931     
#11902: 
    push           0          i64 
    pop            mm_decls.msyslevel i64 
    jump           #11931     
#11903: 
    push           0          i64 
    pop            mm_decls.fnofile u8 
    jump           #11931     
#11908: 
    push           2          i64 
    pop            mm_decls.foptim u8 
    jump           #11931     
#11909: 
    push           1          i64 
    pop            mm_decls.foptim u8 
    jump           #11931     
#11910: 
    push           2          i64 
    pop            mm_decls.foptim u8 
    jump           #11931     
#11904: 
    push           1          i64 
    pop            mm_decls.debugmode i64 
    push           0          i64 
    pop            mm_decls.prodmode i64 
    jump           #11931     
#11922: 
    push           1          i64 
    pop            mm_decls.fshowtiming u8 
    jump           #11931     
#11923: 
    push           2          i64 
    pop            mm_decls.fverbose i64 
    jump           #11931     
#11924: 
    push           3          i64 
    pop            mm_decls.fverbose i64 
    jump           #11931     
#11925: 
    push           0          i64 
    pop            mm_decls.fverbose i64 
    jump           #11931     
#11926: 
    setargs                   0 0
    callproc       &mm_start.showhelp 
    push           0          
    stop                      
    jump           #11931     
#11927: 
    push           0          i64 
    pop            mm_decls.dointlibs u8 
    jump           #11931     
#11928: 
    push           mm_start.do_option.outpathused u8 
    jumpfalse      #11932     i64 
    setargs                   3 0
    push           ""         u64 
    push           ""         u64 
    push           "mixed out/path" u64 
    callproc       &mm_support.loaderror 
#11932: 
    setargs                   1 0
    push           mm_start.do_option.value u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    pop            mm_decls.destfilename u64 
    push           1          i64 
    pop            mm_start.do_option.outused u8 
    jump           #11931     
#11929: 
    push           mm_start.do_option.outused u8 
    jumpfalse      #11933     i64 
    setargs                   3 0
    push           ""         u64 
    push           ""         u64 
    push           "mixed out/path" u64 
    callproc       &mm_support.loaderror 
#11933: 
    push           mm_start.do_option.value u64 
    setargs                   1 0
    push           mm_start.do_option.value u64 
    callfn         &strlen    i64 
    pushptroff                u8 1 -1
    push           92         i64 
    setjumpeq      #11934     u64 
    push           47         i64 
    setjumpeqx     #11934     u64 
    setargs                   3 0
    push           ""         u64 
    push           ""         u64 
    push           "Path needs to end with \\ or /" u64 
    callproc       &mm_support.loaderror 
#11934: 
    setargs                   1 0
    push           mm_start.do_option.value u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    pop            mm_decls.destfilepath u64 
    push           1          i64 
    pop            mm_start.do_option.outpathused u8 
    jump           #11931     
#11930: 
    push           1          i64 
    pop            mm_decls.fcheckunusedlocals u8 
    jump           #11931     
#11911: 
    push           1          i64 
    pop            mm_decls.fshowast1 u8 
    jump           #11931     
#11912: 
    push           1          i64 
    pop            mm_decls.fshowast2 u8 
    jump           #11931     
#11913: 
    push           1          i64 
    pop            mm_decls.fshowast3 u8 
    jump           #11931     
#11914: 
    push           1          i64 
    pop            mm_decls.fshowpcl u8 
    jump           #11931     
#11915: 
    push           1          i64 
    pop            mm_decls.fshowasm u8 
    jump           #11931     
#11916: 
    push           1          i64 
    pop            mm_decls.fshowst u8 
    jump           #11931     
#11917: 
    push           1          i64 
    pop            mm_tables.fshowpst u8 
    jump           #11931     
#11918: 
    push           1          i64 
    pop            mm_decls.fshowstflat u8 
    jump           #11931     
#11919: 
    push           1          i64 
    pop            mm_decls.fshowtypes u8 
    jump           #11931     
#11920: 
    push           1          i64 
    pop            mm_decls.fshowoverloads u8 
    jump           #11931     
#11921: 
    push           1          i64 
    pop            mm_decls.fshowss u8 
    jump           #11931     
#11886: 
#11931: 
#11935: 
    retproc                   
End


Proc mm_start.showcaption:
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Mosaic/'M' Compiler" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "27-Sep-2021" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "21:03:09" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#11937: 
    retproc                   
End


Proc mm_start.showstflat:
    param          mm_start.showstflat.caption u64 
    param          mm_start.showstflat.f u64 
    procentry                 
    setargs                   1 0
    push           mm_start.showstflat.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "PROC"     u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_start.showstflat.caption u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           mm_start.showstflat.f u64 
    callproc       &mm_diags.printstflat 
    setargs                   1 0
    push           mm_start.showstflat.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#11939: 
    retproc                   
End


Proc mm_start.showsttree:
    param          mm_start.showsttree.caption u64 
    param          mm_start.showsttree.f u64 
    procentry                 
    setargs                   1 0
    push           mm_start.showsttree.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "PROC"     u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_start.showsttree.caption u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   3 0
    push           0          i64 
    push           mm_decls.stprogram u64 
    push           mm_start.showsttree.f u64 
    callproc       &mm_diags.printst 
    setargs                   1 0
    push           mm_start.showsttree.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#11941: 
    retproc                   
End


Proc mm_start.showhelp:
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mm_start.showhelp.helptext u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#11943: 
    retproc                   
End


Proc mm_start.showast:
    param          mm_start.showast.filename u64 
    local          mm_start.showast.f u64 
    procentry                 
    setargs                   2 0
    push           "w"        u64 
    push           mm_start.showast.filename u64 
    callfn         &fopen     u64 
    pop            mm_start.showast.f u64 
    push           mm_start.showast.f u64 
    jumptrue       #11945     u64 
    jump           #11946     
#11945: 
    setargs                   1 0
    push           mm_start.showast.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "PROC"     u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_start.showast.filename u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           ""         u64 
    push           mm_start.showast.f u64 
    callproc       &mm_diags.printcode 
    setargs                   1 0
    push           mm_start.showast.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           mm_start.showast.f u64 
    callproc       &fclose    
#11946: 
    retproc                   
End


Proc mm_start.domapmodule:
    local          mm_start.domapmodule.genname block:256 
    local          mm_start.domapmodule.actualname block:256 
    local          mm_start.domapmodule.optionname block:256 
    local          mm_start.domapmodule.valuename block:256 
    local          mm_start.domapmodule.cond i64 
    local          mm_start.domapmodule.option i64 
    procentry                 
    setargs                   1 0
    push           &mm_start.domapmodule.genname 
    callproc       &mm_start.getpsname 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           11         i64 
    jumpeq         #11948     i64 
    setargs                   1 0
    push           "=> expected" u64 
    callproc       &mlibp.abortprogram 
#11948: 
    setargs                   1 0
    push           &mm_start.domapmodule.actualname 
    callproc       &mm_start.getpsname 
    push           0          i64 
    pop            mm_start.domapmodule.cond i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           109        i64 
    jumpne         #11949     i64 
    setargs                   1 0
    push           &mm_start.domapmodule.optionname 
    callproc       &mm_start.getpsname 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           46         i64 
    jumpne         #11950     i64 
    setargs                   1 0
    push           &mm_start.domapmodule.valuename 
    callproc       &mm_start.getpsname 
    jump           #11951     
#11950: 
    setargs                   2 0
    push           "1"        u64 
    push           &mm_start.domapmodule.valuename 
    callproc       &strcpy    
#11951: 
    push           1          i64 
    pop            mm_start.domapmodule.cond i64 
#11949: 
    jump           #11952     
#11953: 
    setargs                   0 0
    callproc       &mm_lex.lex 
#11952: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           6          i64 
    setjumpeq      #11954     i64 
    push           66         i64 
    setjumpne      #11953     i64 
#11954: 
#11955: 
    push           mm_start.domapmodule.cond i64 
    jumpfalse      #11956     i64 
    setargs                   4 0
    push           &mm_start.domapmodule.valuename 
    push           &mm_start.domapmodule.optionname 
    push           &mm_start.domapmodule.actualname 
    push           &mm_start.domapmodule.genname 
    callproc       &mm_start.addmodulemapping 
    jump           #11957     
#11956: 
    setargs                   4 0
    push           0          u64 
    push           0          u64 
    push           &mm_start.domapmodule.actualname 
    push           &mm_start.domapmodule.genname 
    callproc       &mm_start.addmodulemapping 
#11957: 
#11958: 
    retproc                   
End


Proc mm_start.mapimport: u64
    param          mm_start.mapimport.name u64 
    local          mm_start.mapimport.i i64 
    procentry                 
#11960: 
    push           1          i64 
    pop            mm_start.mapimport.i i64 
    push           mm_decls.nmodulemap i64 
    push           1          i64 
    jumplt         #11961     i64 
#11962: 
    setargs                   2 0
    push           &mm_decls.genericmodules 
    push           mm_start.mapimport.i i64 
    pushptroff                u64 8 -8
    push           mm_start.mapimport.name u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #11963     i64 
    push           &mm_decls.actualmodules 
    push           mm_start.mapimport.i i64 
    pushptroff                u64 8 -8
    setret                    u64 
    jump           #11964     
#11963: 
#11965: 
    forup          #11962     i64 1
    opnd           mm_start.mapimport.i 
    opnd           mm_decls.nmodulemap 
#11961: 
    push           mm_start.mapimport.name u64 
    setret                    u64 
    jump           #11964     
#11964: 
    retfn                     u64 
End


Proc mm_start.getpsname:
    param          mm_start.getpsname.dest u64 
    procentry                 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           79         i64 
    casejumpeq     #11967     i64 0
    push           75         i64 
    casejumpeq     #11968     i64 0
    push           70         i64 
    casejumpeq     #11969     i64 0
    popstack                  i64 
    jump           #11970     
#11967: 
    setargs                   2 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    pushptr                   u64 
    push           mm_start.getpsname.dest u64 
    callproc       &strcpy    
    jump           #11971     
#11968: 
    setargs                   2 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           mm_start.getpsname.dest u64 
    callproc       &strcpy    
    jump           #11971     
#11969: 
    setargs                   2 0
    push           0          u64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                i64 1 0
    callfn         &msysp.strint u64 
    push           &mm_decls.lx 
    push           8          
    popptroff                 u64 1 0
    jump           #11971     
#11970: 
    setargs                   1 0
    push           "map1"     u64 
    callproc       &mlibp.abortprogram 
#11971: 
    setargs                   0 0
    callproc       &mm_lex.lex 
#11972: 
    retproc                   
End


Proc mm_start.addmodulemapping:
    param          mm_start.addmodulemapping.old u64 
    param          mm_start.addmodulemapping.newx u64 
    param          mm_start.addmodulemapping.optionname u64 
    param          mm_start.addmodulemapping.valuename u64 
    local          mm_start.addmodulemapping.option i64 
    local          mm_start.addmodulemapping.i i64 
    procentry                 
    push           mm_start.addmodulemapping.optionname u64 
    jumpfalse      #11974     u64 
    setargs                   1 0
    push           mm_start.addmodulemapping.optionname u64 
    callfn         &mm_start.findoptionvar i64 
    pop            mm_start.addmodulemapping.option i64 
    push           mm_start.addmodulemapping.option i64 
    jumpfalse      #11975     i64 
    setargs                   2 0
    push           &mm_start.optionvars 
    push           mm_start.addmodulemapping.option i64 
    pushptroff                u64 8 -8
    push           mm_start.addmodulemapping.optionname u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #11976     i64 
    setargs                   2 0
    push           mm_start.addmodulemapping.valuename u64 
    push           &mm_start.optionvalues 
    push           mm_start.addmodulemapping.option i64 
    pushptroff                u64 8 -8
    callfn         &mlibp.eqstring i64 
    jumptrue       #11977     i64 
    jump           #11978     
#11977: 
#11976: 
    jump           #11979     
#11975: 
    jump           #11978     
#11979: 
#11974: 
    push           mm_decls.nmodulemap i64 
    push           25         i64 
    jumplt         #11980     i64 
    setargs                   1 0
    push           "Too many module mappings" u64 
    callproc       &mlibp.abortprogram 
#11980: 
#11981: 
    push           1          i64 
    pop            mm_start.addmodulemapping.i i64 
    push           mm_decls.nmodulemap i64 
    push           1          i64 
    jumplt         #11982     i64 
#11983: 
    setargs                   2 0
    push           &mm_decls.genericmodules 
    push           mm_start.addmodulemapping.i i64 
    pushptroff                u64 8 -8
    push           mm_start.addmodulemapping.old u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #11984     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mm_start.addmodulemapping.old u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Dupl module mapping" u64 
    callproc       &mlibp.abortprogram 
#11984: 
#11985: 
    forup          #11983     i64 1
    opnd           mm_start.addmodulemapping.i 
    opnd           mm_decls.nmodulemap 
#11982: 
    setargs                   1 0
    push           mm_start.addmodulemapping.old u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &mm_decls.genericmodules 
    push           &mm_decls.nmodulemap 
    incrload                  i64 1
    popptroff                 u64 8 -8
    setargs                   1 0
    push           mm_start.addmodulemapping.newx u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &mm_decls.actualmodules 
    push           mm_decls.nmodulemap i64 
    popptroff                 u64 8 -8
#11978: 
    retproc                   
End


Proc mm_start.addoptionvar:
    param          mm_start.addoptionvar.name u64 
    param          mm_start.addoptionvar.value u64 
    local          mm_start.addoptionvar.i i64 
    procentry                 
    push           mm_start.noptionvars i64 
    push           25         i64 
    jumplt         #11987     i64 
    setargs                   1 0
    push           "Too many option vars" u64 
    callproc       &mlibp.abortprogram 
#11987: 
#11988: 
    push           1          i64 
    pop            mm_start.addoptionvar.i i64 
    push           mm_start.noptionvars i64 
    push           1          i64 
    jumplt         #11989     i64 
#11990: 
    setargs                   2 0
    push           &mm_start.optionvars 
    push           mm_start.addoptionvar.i i64 
    pushptroff                u64 8 -8
    push           mm_start.addoptionvar.name u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #11991     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mm_start.addoptionvar.name u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Dupl optionvar" u64 
    callproc       &mlibp.abortprogram 
#11991: 
#11992: 
    forup          #11990     i64 1
    opnd           mm_start.addoptionvar.i 
    opnd           mm_start.noptionvars 
#11989: 
    setargs                   1 0
    push           mm_start.addoptionvar.name u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &mm_start.optionvars 
    push           &mm_start.noptionvars 
    incrload                  i64 1
    popptroff                 u64 8 -8
    push           mm_start.addoptionvar.value u64 
    push           0          u64 
    jumpne         #11993     u64 
    push           "1"        u64 
    push           &mm_start.optionvalues 
    push           mm_start.noptionvars i64 
    popptroff                 u64 8 -8
    jump           #11994     
#11993: 
    setargs                   1 0
    push           mm_start.addoptionvar.value u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &mm_start.optionvalues 
    push           mm_start.noptionvars i64 
    popptroff                 u64 8 -8
#11994: 
#11995: 
    retproc                   
End


Proc mm_start.findoptionvar: i64
    param          mm_start.findoptionvar.name u64 
    local          mm_start.findoptionvar.i i64 
    procentry                 
#11997: 
    push           1          i64 
    pop            mm_start.findoptionvar.i i64 
    push           mm_start.noptionvars i64 
    push           1          i64 
    jumplt         #11998     i64 
#11999: 
    setargs                   2 0
    push           &mm_start.optionvars 
    push           mm_start.findoptionvar.i i64 
    pushptroff                u64 8 -8
    push           mm_start.findoptionvar.name u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #12000     i64 
    push           mm_start.findoptionvar.i i64 
    setret                    i64 
    jump           #12001     
#12000: 
#12002: 
    forup          #11999     i64 1
    opnd           mm_start.findoptionvar.i 
    opnd           mm_start.noptionvars 
#11998: 
    push           0          i64 
    setret                    i64 
    jump           #12001     
#12001: 
    retfn                     i64 
End


Proc mm_start.initassemsymbols:
    local          mm_start.initassemsymbols.str block:32 
    local          mm_start.initassemsymbols.i i64 
    local          mm_start.initassemsymbols.av_1 i64 
    local          mm_start.initassemsymbols.av_2 i64 
    local          mm_start.initassemsymbols.av_3 i64 
    local          mm_start.initassemsymbols.av_4 i64 
    local          mm_start.initassemsymbols.av_5 i64 
    local          mm_start.initassemsymbols.av_6 i64 
    local          mm_start.initassemsymbols.av_7 i64 
    local          mm_start.initassemsymbols.av_8 i64 
    local          mm_start.initassemsymbols.av_9 i64 
    procentry                 
#12004: 
    push           1          i64 
    pop            mm_start.initassemsymbols.i i64 
    push           148        i64 
    pop            mm_start.initassemsymbols.av_1 i64 
    push           mm_start.initassemsymbols.av_1 i64 
    push           1          i64 
    jumplt         #12005     i64 
#12006: 
    setargs                   4 0
    push           0          i64 
    push           mm_start.initassemsymbols.i i64 
    push           90         i64 
    push           &pci_mcl.mclnames 
    push           mm_start.initassemsymbols.i i64 
    pushptroff                u64 8 -8
    push           2          i64 
    addrefoff                 u64 1 0
    callproc       &mm_lex.addreservedword 
#12007: 
    forup          #12006     i64 1
    opnd           mm_start.initassemsymbols.i 
    opnd           mm_start.initassemsymbols.av_1 
#12005: 
#12008: 
    push           1          i64 
    pop            mm_start.initassemsymbols.i i64 
    push           136        i64 
    pop            mm_start.initassemsymbols.av_2 i64 
    push           mm_start.initassemsymbols.av_2 i64 
    push           1          i64 
    jumplt         #12009     i64 
#12010: 
    setargs                   4 0
    push           &pci_mcl.regsizes 
    push           mm_start.initassemsymbols.i i64 
    pushptroff                u8 1 -1
    push           &pci_mcl.regindices 
    push           mm_start.initassemsymbols.i i64 
    pushptroff                u8 1 -1
    push           82         i64 
    push           &pci_mcl.dregnames 
    push           mm_start.initassemsymbols.i i64 
    pushptroff                u64 8 -8
    callproc       &mm_lex.addreservedword 
#12011: 
    forup          #12010     i64 1
    opnd           mm_start.initassemsymbols.i 
    opnd           mm_start.initassemsymbols.av_2 
#12009: 
#12012: 
    push           1          i64 
    pop            mm_start.initassemsymbols.i i64 
    push           16         i64 
    pop            mm_start.initassemsymbols.av_3 i64 
    push           mm_start.initassemsymbols.av_3 i64 
    push           1          i64 
    jumplt         #12013     i64 
#12014: 
    setargs                   4 0
    push           0          i64 
    push           mm_start.initassemsymbols.i i64 
    push           83         i64 
    push           &pci_mcl.xmmregnames 
    push           mm_start.initassemsymbols.i i64 
    pushptroff                u64 8 -8
    callproc       &mm_lex.addreservedword 
#12015: 
    forup          #12014     i64 1
    opnd           mm_start.initassemsymbols.i 
    opnd           mm_start.initassemsymbols.av_3 
#12013: 
#12016: 
    push           1          i64 
    pop            mm_start.initassemsymbols.i i64 
    push           8          i64 
    pop            mm_start.initassemsymbols.av_4 i64 
    push           mm_start.initassemsymbols.av_4 i64 
    push           1          i64 
    jumplt         #12017     i64 
#12018: 
    setargs                   4 0
    push           0          i64 
    push           mm_start.initassemsymbols.i i64 
    push           84         i64 
    push           &pci_mcl.fregnames 
    push           mm_start.initassemsymbols.i i64 
    pushptroff                u64 8 -8
    callproc       &mm_lex.addreservedword 
#12019: 
    forup          #12018     i64 1
    opnd           mm_start.initassemsymbols.i 
    opnd           mm_start.initassemsymbols.av_4 
#12017: 
#12020: 
    push           1          i64 
    pop            mm_start.initassemsymbols.i i64 
    push           8          i64 
    pop            mm_start.initassemsymbols.av_5 i64 
    push           mm_start.initassemsymbols.av_5 i64 
    push           1          i64 
    jumplt         #12021     i64 
#12022: 
    setargs                   4 0
    push           0          i64 
    push           mm_start.initassemsymbols.i i64 
    push           85         i64 
    push           &pci_mcl.mregnames 
    push           mm_start.initassemsymbols.i i64 
    pushptroff                u64 8 -8
    callproc       &mm_lex.addreservedword 
#12023: 
    forup          #12022     i64 1
    opnd           mm_start.initassemsymbols.i 
    opnd           mm_start.initassemsymbols.av_5 
#12021: 
#12024: 
    push           1          i64 
    pop            mm_start.initassemsymbols.i i64 
    push           16         i64 
    pop            mm_start.initassemsymbols.av_6 i64 
    push           mm_start.initassemsymbols.av_6 i64 
    push           1          i64 
    jumplt         #12025     i64 
#12026: 
    setargs                   4 0
    push           0          i64 
    push           &pci_mcl.jmpcccodes 
    push           mm_start.initassemsymbols.i i64 
    pushptroff                u8 1 -1
    push           86         i64 
    push           &pci_mcl.jmpccnames 
    push           mm_start.initassemsymbols.i i64 
    pushptroff                u64 8 -8
    callproc       &mm_lex.addreservedword 
#12027: 
    forup          #12026     i64 1
    opnd           mm_start.initassemsymbols.i 
    opnd           mm_start.initassemsymbols.av_6 
#12025: 
#12028: 
    push           1          i64 
    pop            mm_start.initassemsymbols.i i64 
    push           16         i64 
    pop            mm_start.initassemsymbols.av_7 i64 
    push           mm_start.initassemsymbols.av_7 i64 
    push           1          i64 
    jumplt         #12029     i64 
#12030: 
    setargs                   4 0
    push           0          i64 
    push           &pci_mcl.setcccodes 
    push           mm_start.initassemsymbols.i i64 
    pushptroff                u8 1 -1
    push           87         i64 
    push           &pci_mcl.setccnames 
    push           mm_start.initassemsymbols.i i64 
    pushptroff                u64 8 -8
    callproc       &mm_lex.addreservedword 
#12031: 
    forup          #12030     i64 1
    opnd           mm_start.initassemsymbols.i 
    opnd           mm_start.initassemsymbols.av_7 
#12029: 
#12032: 
    push           1          i64 
    pop            mm_start.initassemsymbols.i i64 
    push           16         i64 
    pop            mm_start.initassemsymbols.av_8 i64 
    push           mm_start.initassemsymbols.av_8 i64 
    push           1          i64 
    jumplt         #12033     i64 
#12034: 
    setargs                   4 0
    push           0          i64 
    push           &pci_mcl.cmovcccodes 
    push           mm_start.initassemsymbols.i i64 
    pushptroff                u8 1 -1
    push           88         i64 
    push           &pci_mcl.cmovccnames 
    push           mm_start.initassemsymbols.i i64 
    pushptroff                u64 8 -8
    callproc       &mm_lex.addreservedword 
#12035: 
    forup          #12034     i64 1
    opnd           mm_start.initassemsymbols.i 
    opnd           mm_start.initassemsymbols.av_8 
#12033: 
#12036: 
    push           1          i64 
    pop            mm_start.initassemsymbols.i i64 
    push           5          i64 
    pop            mm_start.initassemsymbols.av_9 i64 
    push           mm_start.initassemsymbols.av_9 i64 
    push           1          i64 
    jumplt         #12037     i64 
#12038: 
    setargs                   2 0
    push           &pci_mcl.segmentnames 
    push           mm_start.initassemsymbols.i i64 
    pushptroff                u64 8 0
    push           &mm_start.initassemsymbols.str 
    callproc       &strcpy    
    push           0          u64 
    push           &mm_start.initassemsymbols.str 
    setargs                   1 0
    push           &mm_start.initassemsymbols.str 
    callfn         &strlen    i64 
    popptroff                 u8 1 -4
    setargs                   4 0
    push           0          i64 
    push           mm_start.initassemsymbols.i i64 
    push           89         i64 
    setargs                   1 0
    push           &mm_start.initassemsymbols.str 
    callfn         &mlibp.pcm_copyheapstring u64 
    callproc       &mm_lex.addreservedword 
#12039: 
    forup          #12038     i64 1
    opnd           mm_start.initassemsymbols.i 
    opnd           mm_start.initassemsymbols.av_9 
#12037: 
    setargs                   4 0
    push           4          i64 
    push           15         i64 
    push           82         i64 
    push           "aframe"   u64 
    callproc       &mm_lex.addreservedword 
    setargs                   4 0
    push           8          i64 
    push           15         i64 
    push           82         i64 
    push           "dframe"   u64 
    callproc       &mm_lex.addreservedword 
    setargs                   4 0
    push           4          i64 
    push           16         i64 
    push           82         i64 
    push           "astack"   u64 
    callproc       &mm_lex.addreservedword 
    setargs                   4 0
    push           8          i64 
    push           16         i64 
    push           82         i64 
    push           "dstack"   u64 
    callproc       &mm_lex.addreservedword 
    setargs                   4 0
    push           8          i64 
    push           9          i64 
    push           82         i64 
    push           "dprog"    u64 
    callproc       &mm_lex.addreservedword 
    setargs                   4 0
    push           8          i64 
    push           10         i64 
    push           82         i64 
    push           "dsptr"    u64 
    callproc       &mm_lex.addreservedword 
#12040: 
    retproc                   
End


Proc mm_start.showmodules:
    local          mm_start.showmodules.i i64 
    local          mm_start.showmodules.k i64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Modules:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_decls.nmodules i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#12042: 
    push           1          i64 
    pop            mm_start.showmodules.i i64 
    push           mm_decls.nmodules i64 
    push           1          i64 
    jumplt         #12043     i64 
#12044: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &mm_decls.moduletable 
    push           mm_start.showmodules.i i64 
    addrefoff                 block:456 456 0
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_decls.sourcefilepaths 
    push           &mm_decls.moduletable 
    push           mm_start.showmodules.i i64 
    addrefoff                 block:456 456 0
    push           16         
    pushptroff                i64 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_space 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "                 " u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#12045: 
    push           1          i64 
    pop            mm_start.showmodules.k i64 
    push           mm_decls.nmodules i64 
    push           1          i64 
    jumplt         #12046     i64 
#12047: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "# "       u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           &mm_decls.moduletable 
    push           mm_start.showmodules.i i64 
    addrefoff                 block:456 456 0
    push           40         
    addrefoff                 u64 1 0
    push           mm_start.showmodules.k i64 
    pushptroff                u8 1 -1
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#12048: 
    forup          #12047     i64 1
    opnd           mm_start.showmodules.k 
    opnd           mm_decls.nmodules 
#12046: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#12049: 
    push           1          i64 
    pop            mm_start.showmodules.k i64 
    push           mm_decls.nmodules i64 
    push           1          i64 
    jumplt         #12050     i64 
#12051: 
    push           &mm_decls.moduletable 
    push           mm_start.showmodules.i i64 
    addrefoff                 block:456 456 0
    push           40         
    addrefoff                 u64 1 0
    push           mm_start.showmodules.k i64 
    pushptroff                u8 1 -1
    jumpfalse      #12052     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\t\t"     u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_decls.moduletable 
    push           mm_start.showmodules.k i64 
    addrefoff                 block:456 456 0
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#12052: 
#12053: 
    forup          #12051     i64 1
    opnd           mm_start.showmodules.k 
    opnd           mm_decls.nmodules 
#12050: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#12054: 
    forup          #12044     i64 1
    opnd           mm_start.showmodules.i 
    opnd           mm_decls.nmodules 
#12043: 
#12055: 
    retproc                   
End


Proc mm_start.do_writema:
    procentry                 
    push           mm_decls.fwritema u8 
    jumpfalse      #12057     i64 
    push           mm_decls.fbundled u8 
    jumpfalse      #12058     i64 
    setargs                   3 0
    push           ""         u64 
    push           ""         u64 
    push           "-ma used with .ma input" u64 
    callproc       &mm_support.loaderror 
#12058: 
    setargs                   2 0
    push           mm_decls.mafilename u64 
    push           &mm_decls.inputfiles 
    push           1          i64 
    pushptroff                u64 8 0
    callproc       &mm_support.writemafile 
    push           0          
    stop                      
#12057: 
#12059: 
    retproc                   
End


Proc mm_start.do_writeexports:
    param          mm_start.do_writeexports.expfile u64 
    local          mm_start.do_writeexports.str block:300 
    procentry                 
    push           mm_decls.fwriteexports u8 
    jumptrue       #12061     i64 
    push           mm_decls.passlevel i64 
    push           11         i64 
    jumpeq         #12061     i64 
    jump           #12062     
#12061: 
    setargs                   2 0
    push           &mm_decls.moduletable 
    push           1          i64 
    addrefoff                 block:456 456 0
    pushptr                   u64 
    push           mm_decls.expfilename u64 
    callproc       &mm_export.writeexports 
    push           mm_decls.fwriteexports u8 
    jumpfalse      #12063     i64 
    push           0          
    stop                      
#12063: 
#12062: 
    retproc                   
End


Proc mm_start.starttimer:
    procentry                 
    setargs                   0 0
    callfn         &clock     i32 
    pop            mm_start.starttimer.tt i64 
#12065: 
    retproc                   
End


Proc mm_start.stoptimer:
    param          mm_start.stoptimer.mess u64 
    local          mm_start.stoptimer.newtt i64 
    procentry                 
    setargs                   0 0
    callfn         &clock     i32 
    pop            mm_start.stoptimer.newtt i64 
#12067: 
    retproc                   
End


Proc mm_start.do_runprog:
    local          mm_start.do_runprog.str block:300 
    local          mm_start.do_runprog.i i64 
    procentry                 
    setargs                   2 0
    push           mm_decls.outfile u64 
    push           &mm_start.do_runprog.str 
    callproc       &strcpy    
#12069: 
    push           1          i64 
    pop            mm_start.do_runprog.i i64 
    push           mm_start.nextraparams i64 
    push           1          i64 
    jumplt         #12070     i64 
#12071: 
    setargs                   2 0
    push           " "        u64 
    push           &mm_start.do_runprog.str 
    callproc       &strcat    
    setargs                   2 0
    push           &mm_start.extraparams 
    push           mm_start.do_runprog.i i64 
    pushptroff                u64 8 -8
    push           &mm_start.do_runprog.str 
    callproc       &strcat    
    push           &mm_start.extravalues 
    push           mm_start.do_runprog.i i64 
    pushptroff                u64 8 -8
    jumpfalse      #12072     u64 
    setargs                   2 0
    push           ":"        u64 
    push           &mm_start.do_runprog.str 
    callproc       &strcat    
    setargs                   2 0
    push           &mm_start.extravalues 
    push           mm_start.do_runprog.i i64 
    pushptroff                u64 8 -8
    push           &mm_start.do_runprog.str 
    callproc       &strcat    
#12072: 
#12073: 
    forup          #12071     i64 1
    opnd           mm_start.do_runprog.i 
    opnd           mm_start.nextraparams 
#12070: 
    setargs                   3 0
    push           0          u64 
    push           0          i64 
    push           &mm_start.do_runprog.str 
    callproc       &mwindowsp.os_execwait 
#12074: 
    retproc                   
End


Proc mm_start.dostarimports:
    local          mm_start.dostarimports.pm u64 
    local          mm_start.dostarimports.m i64 
    local          mm_start.dostarimports.star i64 
    local          mm_start.dostarimports.i i64 
    local          mm_start.dostarimports.k i64 
    local          mm_start.dostarimports.j i64 
    procentry                 
#12076: 
    push           1          i64 
    pop            mm_start.dostarimports.i i64 
    push           mm_decls.nmodules i64 
    push           1          i64 
    jumplt         #12077     i64 
#12078: 
#12079: 
    push           1          i64 
    pop            mm_start.dostarimports.k i64 
    push           mm_decls.nmodules i64 
    push           1          i64 
    jumplt         #12080     i64 
#12081: 
    push           &mm_decls.moduletable 
    push           mm_start.dostarimports.i i64 
    addrefoff                 block:456 456 0
    push           40         
    addrefoff                 u64 1 0
    push           mm_start.dostarimports.k i64 
    pushptroff                u8 1 -1
    jumpfalse      #12082     i64 
    push           &mm_decls.moduletable 
    push           mm_start.dostarimports.i i64 
    addrefoff                 block:456 456 0
    push           240        
    addrefoff                 u64 1 0
    push           mm_start.dostarimports.k i64 
    pushptroff                u8 1 -1
    jumpfalse      #12082     i64 
    push           &mm_decls.moduletable 
    push           mm_start.dostarimports.k i64 
    addrefoff                 block:456 456 0
    pop            mm_start.dostarimports.pm u64 
#12083: 
    push           1          i64 
    pop            mm_start.dostarimports.j i64 
    push           mm_decls.nmodules i64 
    push           1          i64 
    jumplt         #12084     i64 
#12085: 
    push           mm_start.dostarimports.pm u64 
    push           40         
    addrefoff                 u64 1 0
    push           mm_start.dostarimports.j i64 
    pushptroff                u8 1 -1
    jumpfalse      #12086     i64 
    push           1          i64 
    push           &mm_decls.moduletable 
    push           mm_start.dostarimports.i i64 
    addrefoff                 block:456 456 0
    push           40         
    addrefoff                 u64 1 0
    push           mm_start.dostarimports.j i64 
    popptroff                 u8 1 -1
#12086: 
#12087: 
    forup          #12085     i64 1
    opnd           mm_start.dostarimports.j 
    opnd           mm_decls.nmodules 
#12084: 
    push           &mm_decls.moduletable 
    push           mm_start.dostarimports.i i64 
    addrefoff                 block:456 456 0
    push           40         
    addrefoff                 u64 1 0
    push           mm_start.dostarimports.k i64 
    pushptroff                u8 1 -1
    pop            mm_start.dostarimports.m i64 
    push           &mm_decls.moduletable 
    push           mm_start.dostarimports.i i64 
    addrefoff                 block:456 456 0
    push           240        
    addrefoff                 u64 1 0
    push           mm_start.dostarimports.k i64 
    pushptroff                u8 1 -1
    pop            mm_start.dostarimports.star i64 
#12082: 
#12088: 
    forup          #12081     i64 1
    opnd           mm_start.dostarimports.k 
    opnd           mm_decls.nmodules 
#12080: 
#12089: 
    forup          #12078     i64 1
    opnd           mm_start.dostarimports.i 
    opnd           mm_decls.nmodules 
#12077: 
#12090: 
    retproc                   
End


Proc mm_start.fixstlist:
    param          mm_start.fixstlist.d u64 
    procentry                 
    jump           #12092     
#12093: 
    setargs                   1 0
    push           mm_start.fixstlist.d u64 
    callproc       &mm_start.fixst 
#12094: 
    push           mm_start.fixstlist.d u64 
    push           32         
    pushptroff                u64 1 0
    pop            mm_start.fixstlist.d u64 
#12092: 
    push           mm_start.fixstlist.d u64 
    jumptrue       #12093     u64 
#12095: 
#12096: 
    retproc                   
End


Proc mm_start.fixst:
    param          mm_start.fixst.d u64 
    local          mm_start.fixst.p u64 
    procentry                 
    push           0          u64 
    push           mm_start.fixst.d u64 
    push           24         
    popptroff                 u64 1 0
    push           mm_start.fixst.d u64 
    push           115        
    pushptroff                u8 1 0
    push           4          i64 
    seteq                     i64 
    push           mm_start.fixst.d u64 
    push           92         
    addrefoff                 u64 1 0
    push           7          i64 
    popdotindex               u16 
    push           mm_start.fixst.d u64 
    push           92         
    pushptroff                u16 1 0
    push           13         i64 
    dotindex                  i64 
    jumpfalse      #12098     u64 
    push           mm_start.fixst.d u64 
    push           96         
    pushptroff                u64 1 0
    pop            mm_start.fixst.p u64 
    push           mm_start.fixst.p u64 
    pushptr                   u8 
    push           59         i64 
    jumpne         #12099     i64 
    push           mm_start.fixst.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_start.fixst.p u64 
#12099: 
    push           mm_start.fixst.p u64 
    pushptr                   u8 
    push           3          i64 
    jumpeq         #12100     i64 
    setargs                   1 0
    push           "FIXST@"   u64 
    callproc       &mm_support.serror 
#12100: 
    push           1          u64 
    push           mm_start.fixst.p u64 
    push           16         
    pushptroff                u64 1 0
    push           92         
    addrefoff                 u64 1 0
    push           11         i64 
    popdotindex               u16 
#12098: 
    push           &mm_decls.ttbasetype 
    push           mm_start.fixst.d u64 
    push           72         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           11         i64 
    setjumpeq      #12101     i64 
    push           13         i64 
    setjumpeqx     #12101     i64 
    push           mm_start.fixst.d u64 
    push           92         
    pushptroff                u16 1 0
    push           11         i64 
    dotindex                  i64 
    jumptrue       #12101     u64 
    push           mm_start.fixst.d u64 
    push           92         
    pushptroff                u16 1 0
    push           13         i64 
    dotindex                  i64 
    jumpfalse      #12102     u64 
#12101: 
    push           1          u64 
    push           mm_start.fixst.d u64 
    push           92         
    addrefoff                 u64 1 0
    push           9          i64 
    popdotindex               u16 
#12102: 
    setargs                   1 0
    push           mm_start.fixst.d u64 
    push           16         
    pushptroff                u64 1 0
    callproc       &mm_start.fixstlist 
#12103: 
    retproc                   
End


Proc mm_start.getoutfilename: u64
    param          mm_start.getoutfilename.file u64 
    param          mm_start.getoutfilename.ext u64 
    procentry                 
    setargs                   1 0
    setargs                   2 0
    push           mm_start.getoutfilename.ext u64 
    push           mm_start.getoutfilename.file u64 
    callfn         &mlibp.changeext u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    setret                    u64 
    jump           #12105     
#12105: 
    retfn                     u64 
End


Proc mm_start.do_genpcl:
    local          mm_start.do_genpcl.str block:256 
    procentry                 
    push           mm_decls.debugmode i64 
    jumpfalse      #12107     i64 
    push           mm_decls.passlevel i64 
    push           6          i64 
    jumpge         #12107     i64 
    jump           #12108     
#12107: 
    push           mm_decls.passlevel i64 
    push           6          i64 
    jumpne         #12109     i64 
    setargs                   1 0
    push           0          i64 
    callproc       &mm_genpcl.codegen_pcl 
    jump           #12110     
#12109: 
    setargs                   1 0
    push           1          i64 
    callproc       &mm_genpcl.codegen_pcl 
#12110: 
    push           mm_decls.passlevel i64 
    push           6          i64 
    jumpne         #12111     i64 
    push           mm_decls.fnofile u8 
    jumpfalse      #12112     i64 
#12111: 
    push           mm_decls.debugmode i64 
    jumpfalse      #12113     i64 
    push           mm_decls.fshowpcl u8 
    jumpfalse      #12113     i64 
#12112: 
    setargs                   1 0
    push           mm_decls.pclfilename u64 
    callproc       &pc_libpcl.pcl_writepclfile 
#12113: 
    push           mm_decls.passlevel i64 
    push           13         i64 
    casejumpeq     #12114     i64 0
    push           6          i64 
    casejumpeq     #12115     i64 0
    popstack                  i64 
    jump           #12116     
#12114: 
    setargs                   3 0
    push           ""         u64 
    push           ""         u64 
    push           "-Clang not ready" u64 
    callproc       &mm_support.loaderror 
    jump           #12117     
#12115: 
    push           mm_start.fpclexe u8 
    jumpfalse      #12118     i64 
    setargs                   1 0
    push           &mm_start.do_genpcl.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "\\mxp\\pc -exe -rts #" u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           mm_decls.pclfilename u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Running:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_start.do_genpcl.str 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           &mm_start.do_genpcl.str 
    callfn         &system    i32 
    stop                      
#12118: 
    jump           #12108     
    jump           #12117     
#12116: 
#12117: 
    setargs                   1 0
    push           mm_decls.foptim u8 
    callproc       &pc_win64.pcl_genmcl 
    push           mm_decls.passlevel i64 
    push           8          i64 
    jumpne         #12119     i64 
    push           mm_decls.fnofile u8 
    jumpfalse      #12120     i64 
#12119: 
    push           mm_decls.debugmode i64 
    jumpfalse      #12121     i64 
    push           mm_decls.fshowasm u8 
    jumpfalse      #12121     i64 
#12120: 
    setargs                   2 0
    push           0          i64 
    push           mm_decls.asmfilename u64 
    callproc       &pc_win64.pcl_writeasmfile 
#12121: 
    push           mm_decls.passlevel i64 
    push           8          i64 
    casejumpeq     #12122     i64 0
    push           10         i64 
    casejumpeq     #12123     i64 0
    push           11         i64 
    casejumpeq     #12124     i64 0
    push           12         i64 
    casejumpeq     #12125     i64 0
    popstack                  i64 
    jump           #12126     
#12122: 
    push           mm_start.fasmexe u8 
    jumpfalse      #12127     i64 
    setargs                   1 0
    push           &mm_start.do_genpcl.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "aa -exe #" u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           mm_decls.asmfilename u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Running:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_start.do_genpcl.str 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           &mm_start.do_genpcl.str 
    callfn         &system    i32 
    stop                      
#12127: 
    jump           #12128     
#12123: 
    setargs                   2 0
    push           mm_decls.foptim u8 
    push           mm_decls.exefilename u64 
    callproc       &pc_win64.pcl_writeexefile 
    jump           #12128     
#12124: 
    setargs                   2 0
    push           mm_decls.foptim u8 
    push           mm_decls.dllfilename u64 
    callproc       &pc_win64.pcl_writeexefile 
    jump           #12128     
#12125: 
    setargs                   3 0
    push           ""         u64 
    push           ""         u64 
    push           "CAN'T DO RUNEXE" u64 
    callproc       &mm_support.loaderror 
    jump           #12128     
#12126: 
#12128: 
#12108: 
    retproc                   
End


Proc mm_lex.lex:
    procentry                 
    push           mm_lex.nexttoken u64 
    pushptr                   block:16 
    pop            mm_decls.lx block:16 
    push           &mm_lex.nexttoken 
    incr                      u64 16
#12130: 
    retproc                   
End


Proc mm_lex.lexreadtoken:
    local          mm_lex.lexreadtoken.c i64 
    local          mm_lex.lexreadtoken.hsum i64 
    local          mm_lex.lexreadtoken.commentseen i64 
    local          mm_lex.lexreadtoken.hashindex i64 
    local          mm_lex.lexreadtoken.length i64 
    local          mm_lex.lexreadtoken.pstart u64 
    local          mm_lex.lexreadtoken.pnext u64 
    local          mm_lex.lexreadtoken.p u64 
    local          mm_lex.lexreadtoken.ss u64 
    local          mm_lex.lexreadtoken.lxsvalue u64 
    local          mm_lex.lexreadtoken.base i64 
    procentry                 
    push           0          i64 
    push           &mm_decls.lx 
    push           1          
    popptroff                 u8 1 0
#12132: 
    push           &mm_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    switch         #12133     0 255
    opnd           #12134     
#12133: 
    switchlabel    #12135     
    switchlabel    #12134     
    switchlabel    #12134     
    switchlabel    #12134     
    switchlabel    #12134     
    switchlabel    #12134     
    switchlabel    #12134     
    switchlabel    #12134     
    switchlabel    #12134     
    switchlabel    #12136     
    switchlabel    #12137     
    switchlabel    #12134     
    switchlabel    #12134     
    switchlabel    #12138     
    switchlabel    #12134     
    switchlabel    #12134     
    switchlabel    #12134     
    switchlabel    #12134     
    switchlabel    #12134     
    switchlabel    #12134     
    switchlabel    #12134     
    switchlabel    #12134     
    switchlabel    #12134     
    switchlabel    #12134     
    switchlabel    #12134     
    switchlabel    #12134     
    switchlabel    #12134     
    switchlabel    #12134     
    switchlabel    #12134     
    switchlabel    #12134     
    switchlabel    #12134     
    switchlabel    #12134     
    switchlabel    #12136     
    switchlabel    #12139     
    switchlabel    #12140     
    switchlabel    #12141     
    switchlabel    #12142     
    switchlabel    #12143     
    switchlabel    #12144     
    switchlabel    #12145     
    switchlabel    #12146     
    switchlabel    #12147     
    switchlabel    #12148     
    switchlabel    #12149     
    switchlabel    #12150     
    switchlabel    #12151     
    switchlabel    #12152     
    switchlabel    #12153     
    switchlabel    #12154     
    switchlabel    #12154     
    switchlabel    #12154     
    switchlabel    #12154     
    switchlabel    #12154     
    switchlabel    #12154     
    switchlabel    #12154     
    switchlabel    #12154     
    switchlabel    #12154     
    switchlabel    #12154     
    switchlabel    #12155     
    switchlabel    #12156     
    switchlabel    #12157     
    switchlabel    #12158     
    switchlabel    #12159     
    switchlabel    #12160     
    switchlabel    #12161     
    switchlabel    #12162     
    switchlabel    #12162     
    switchlabel    #12162     
    switchlabel    #12162     
    switchlabel    #12162     
    switchlabel    #12162     
    switchlabel    #12162     
    switchlabel    #12162     
    switchlabel    #12162     
    switchlabel    #12162     
    switchlabel    #12162     
    switchlabel    #12162     
    switchlabel    #12162     
    switchlabel    #12162     
    switchlabel    #12162     
    switchlabel    #12162     
    switchlabel    #12162     
    switchlabel    #12162     
    switchlabel    #12162     
    switchlabel    #12162     
    switchlabel    #12162     
    switchlabel    #12162     
    switchlabel    #12162     
    switchlabel    #12162     
    switchlabel    #12162     
    switchlabel    #12162     
    switchlabel    #12163     
    switchlabel    #12164     
    switchlabel    #12165     
    switchlabel    #12166     
    switchlabel    #12142     
    switchlabel    #12167     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12168     
    switchlabel    #12169     
    switchlabel    #12170     
    switchlabel    #12171     
    switchlabel    #12134     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12172     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    switchlabel    #12142     
    endswitch                 
#12142: 
    push           mm_lex.lxsptr u64 
    push           1          i64 
    subrefoff                 u64 1 0
    pop            mm_lex.lexreadtoken.lxsvalue u64 
!doname::
#12173: 
    push           mm_lex.lexreadtoken.lxsvalue u64 
    pushptr                   u8 
    pop            mm_lex.lexreadtoken.hsum i64 
#12174: 
    push           &mm_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          mm_lex.lexreadtoken.c i64 
    switch         #12175     34 255
    opnd           #12176     
#12175: 
    switchlabel    #12177     
    switchlabel    #12176     
    switchlabel    #12178     
    switchlabel    #12176     
    switchlabel    #12176     
    switchlabel    #12176     
    switchlabel    #12176     
    switchlabel    #12176     
    switchlabel    #12176     
    switchlabel    #12176     
    switchlabel    #12176     
    switchlabel    #12176     
    switchlabel    #12176     
    switchlabel    #12176     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12176     
    switchlabel    #12176     
    switchlabel    #12176     
    switchlabel    #12176     
    switchlabel    #12176     
    switchlabel    #12176     
    switchlabel    #12176     
    switchlabel    #12179     
    switchlabel    #12179     
    switchlabel    #12179     
    switchlabel    #12179     
    switchlabel    #12179     
    switchlabel    #12179     
    switchlabel    #12179     
    switchlabel    #12179     
    switchlabel    #12179     
    switchlabel    #12179     
    switchlabel    #12179     
    switchlabel    #12179     
    switchlabel    #12179     
    switchlabel    #12179     
    switchlabel    #12179     
    switchlabel    #12179     
    switchlabel    #12179     
    switchlabel    #12179     
    switchlabel    #12179     
    switchlabel    #12179     
    switchlabel    #12179     
    switchlabel    #12179     
    switchlabel    #12179     
    switchlabel    #12179     
    switchlabel    #12179     
    switchlabel    #12179     
    switchlabel    #12176     
    switchlabel    #12176     
    switchlabel    #12176     
    switchlabel    #12176     
    switchlabel    #12178     
    switchlabel    #12176     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12176     
    switchlabel    #12176     
    switchlabel    #12176     
    switchlabel    #12176     
    switchlabel    #12176     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12176     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    switchlabel    #12178     
    endswitch                 
#12178: 
    push           mm_lex.lexreadtoken.hsum i64 
    push           4          i64 
    shl                       i64 
    push           mm_lex.lexreadtoken.hsum i64 
    sub                       i64 
    push           mm_lex.lexreadtoken.c i64 
    add                       i64 
    pop            mm_lex.lexreadtoken.hsum i64 
    jump           #12174     
#12179: 
    push           mm_lex.lexreadtoken.c i64 
    push           32         i64 
    add                       u64 
    push           mm_lex.lxsptr u64 
    push           1          i64 
    subrefoff                 u64 1 0
    popptr                    u8 
    push           mm_lex.lexreadtoken.hsum i64 
    push           4          i64 
    shl                       i64 
    push           mm_lex.lexreadtoken.hsum i64 
    sub                       i64 
    push           mm_lex.lexreadtoken.c i64 
    push           32         i64 
    add                       i64 
    add                       i64 
    pop            mm_lex.lexreadtoken.hsum i64 
    jump           #12174     
#12177: 
    push           &mm_lex.lxsptr 
    decr                      u64 1
    push           mm_lex.lexreadtoken.lxsvalue u64 
    push           1          i64 
    addrefoff                 u64 1 0
    push           mm_lex.lxsptr u64 
    jumpne         #12180     u64 
    push           mm_lex.lexreadtoken.lxsvalue u64 
    pushptr                   u8 
    push           70         u64 
    casejumpeq     #12181     u64 0
    push           102        u64 
    casejumpeq     #12181     u64 0
    push           82         u64 
    casejumpeq     #12181     u64 0
    push           114        u64 
    casejumpeq     #12181     u64 0
    push           65         u64 
    casejumpeq     #12182     u64 0
    push           97         u64 
    casejumpeq     #12182     u64 0
    push           90         u64 
    casejumpeq     #12182     u64 0
    push           122        u64 
    casejumpeq     #12182     u64 0
    popstack                  u64 
    jump           #12183     
#12181: 
    setargs                   0 0
    callproc       &mm_lex.readrawstring 
    jump           #12184     
    jump           #12185     
#12182: 
    setargs                   1 0
    push           mm_lex.lexreadtoken.lxsvalue u64 
    pushptr                   u8 
    callproc       &mm_lex.readarraystring 
    jump           #12184     
    jump           #12185     
#12183: 
#12185: 
#12180: 
    jump           #12186     
    jump           #12174     
#12176: 
    push           &mm_lex.lxsptr 
    decr                      u64 1
    jump           #12186     
    jump           #12174     
#12186: 
    setargs                   3 0
    push           mm_lex.lexreadtoken.hsum i64 
    push           5          i64 
    shl                       i64 
    push           mm_lex.lexreadtoken.hsum i64 
    sub                       i64 
    push           mm_lex.lxsptr u64 
    push           mm_lex.lexreadtoken.lxsvalue u64 
    subref                    i64 1
    push           mm_lex.lexreadtoken.lxsvalue u64 
    callproc       &mm_lex.do_name 
    jump           #12184     
    jump           #12132     
#12162: 
    push           mm_lex.lxsptr u64 
    push           1          i64 
    subrefoff                 u64 1 0
    pop            mm_lex.lexreadtoken.lxsvalue u64 
    push           mm_lex.lexreadtoken.lxsvalue u64 
    push           32         i64 
    addto                     u8 
    jump           #12173     
    jump           #12132     
#12154: 
    push           mm_lex.lxsptr u64 
    push           1          i64 
    subrefoff                 u64 1 0
    pushptr                   u8 
    pop            mm_lex.lexreadtoken.c i64 
    push           mm_lex.lxsptr u64 
    pushptr                   u8 
    push           32         u64 
    casejumpeq     #12187     u64 0
    push           41         u64 
    casejumpeq     #12187     u64 0
    push           13         u64 
    casejumpeq     #12187     u64 0
    push           44         u64 
    casejumpeq     #12187     u64 0
    push           124        u64 
    casejumpeq     #12187     u64 0
    push           120        u64 
    casejumpeq     #12188     u64 0
    push           88         u64 
    casejumpeq     #12188     u64 0
    popstack                  u64 
    jump           #12189     
#12187: 
    push           70         i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    push           4          i64 
    push           &mm_decls.lx 
    push           1          
    popptroff                 u8 1 0
    push           mm_lex.lexreadtoken.c i64 
    push           48         i64 
    sub                       i64 
    push           &mm_decls.lx 
    push           8          
    popptroff                 i64 1 0
    jump           #12190     
#12188: 
    push           mm_lex.lexreadtoken.c i64 
    push           48         i64 
    casejumpeq     #12191     i64 0
    push           49         i64 
    casejumpeq     #12192     i64 0
    popstack                  i64 
    jump           #12193     
#12191: 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    setargs                   1 0
    push           16         i64 
    callproc       &mm_lex.readnumber 
    jump           #12194     
#12192: 
    setargs                   1 0
    push           "Bad base" u64 
    callproc       &mm_support.lxerror 
    jump           #12194     
#12193: 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    setargs                   1 0
    push           mm_lex.lexreadtoken.c i64 
    push           48         i64 
    sub                       i64 
    callproc       &mm_lex.readnumber 
#12194: 
    jump           #12190     
#12189: 
    push           mm_lex.lexreadtoken.c i64 
    push           49         i64 
    jumpne         #12195     i64 
    push           mm_lex.lxsptr u64 
    pushptr                   u8 
    push           48         u64 
    push           54         u64 
    jumpnotinrange #12195     u64 
    push           mm_lex.lxsptr u64 
    push           1          i64 
    pushptroff                u8 1 0
    push           120        i64 
    setjumpeq      #12196     u64 
    push           88         i64 
    setjumpne      #12195     u64 
#12196: 
    push           mm_lex.lxsptr u64 
    pushptr                   u8 
    push           -38        i64 
    add                       i64 
    pop            mm_lex.lexreadtoken.base i64 
    push           &mm_lex.lxsptr 
    push           2          i64 
    addrefoffto               u64 1 0
    setargs                   1 0
    push           mm_lex.lexreadtoken.base i64 
    callproc       &mm_lex.readnumber 
    jump           #12197     
#12195: 
    push           &mm_lex.lxsptr 
    decr                      u64 1
    setargs                   0 0
    callproc       &mm_lex.readdecimalnumber 
#12197: 
#12190: 
    jump           #12184     
    jump           #12132     
#12139: 
!docomment::
#12198: 
#12199: 
    push           &mm_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          mm_lex.lexreadtoken.c i64 
    switch         #12200     0 13
    opnd           #12201     
#12200: 
    switchlabel    #12202     
    switchlabel    #12201     
    switchlabel    #12201     
    switchlabel    #12201     
    switchlabel    #12201     
    switchlabel    #12201     
    switchlabel    #12201     
    switchlabel    #12201     
    switchlabel    #12201     
    switchlabel    #12201     
    switchlabel    #12203     
    switchlabel    #12201     
    switchlabel    #12201     
    switchlabel    #12204     
    endswitch                 
#12204: 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    jump           #12205     
    jump           #12199     
#12203: 
    jump           #12205     
    jump           #12199     
#12202: 
    push           &mm_lex.lxsptr 
    decr                      u64 1
    jump           #12205     
    jump           #12199     
#12201: 
    jump           #12199     
#12205: 
    push           &mm_decls.lx 
    push           4          
    addrefoff                 u64 1 0
    incr                      u32 1
    push           65         i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    jump           #12184     
    jump           #12132     
#12141: 
    push           mm_lex.lxsptr u64 
    pop            mm_lex.lexreadtoken.lxsvalue u64 
#12206: 
    push           &mm_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          mm_lex.lexreadtoken.c i64 
    switch         #12207     0 13
    opnd           #12208     
#12207: 
    switchlabel    #12209     
    switchlabel    #12208     
    switchlabel    #12208     
    switchlabel    #12208     
    switchlabel    #12208     
    switchlabel    #12208     
    switchlabel    #12208     
    switchlabel    #12208     
    switchlabel    #12208     
    switchlabel    #12208     
    switchlabel    #12209     
    switchlabel    #12208     
    switchlabel    #12208     
    switchlabel    #12209     
    endswitch                 
#12209: 
    push           &mm_lex.lxsptr 
    decr                      u64 1
    jump           #12210     
    jump           #12206     
#12208: 
    jump           #12206     
#12210: 
    push           mm_lex.lxsptr u64 
    push           mm_lex.lexreadtoken.lxsvalue u64 
    subref                    i64 1
    pop            mm_lex.lexreadtoken.length i64 
    push           68         i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    setargs                   2 0
    push           mm_lex.lexreadtoken.length i64 
    push           mm_lex.lexreadtoken.lxsvalue u64 
    callfn         &mlibp.pcm_copyheapstringn u64 
    push           &mm_decls.lx 
    push           8          
    popptroff                 u64 1 0
    jump           #12184     
    jump           #12132     
#12164: 
    push           0          i64 
    pop            mm_lex.lexreadtoken.commentseen i64 
#12211: 
    push           &mm_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    switch         #12212     0 33
    opnd           #12213     
#12212: 
    switchlabel    #12214     
    switchlabel    #12213     
    switchlabel    #12213     
    switchlabel    #12213     
    switchlabel    #12213     
    switchlabel    #12213     
    switchlabel    #12213     
    switchlabel    #12213     
    switchlabel    #12213     
    switchlabel    #12215     
    switchlabel    #12216     
    switchlabel    #12213     
    switchlabel    #12213     
    switchlabel    #12217     
    switchlabel    #12213     
    switchlabel    #12213     
    switchlabel    #12213     
    switchlabel    #12213     
    switchlabel    #12213     
    switchlabel    #12213     
    switchlabel    #12213     
    switchlabel    #12213     
    switchlabel    #12213     
    switchlabel    #12213     
    switchlabel    #12213     
    switchlabel    #12213     
    switchlabel    #12213     
    switchlabel    #12213     
    switchlabel    #12213     
    switchlabel    #12213     
    switchlabel    #12213     
    switchlabel    #12213     
    switchlabel    #12215     
    switchlabel    #12218     
    endswitch                 
#12217: 
    push           &mm_decls.lx 
    push           4          
    addrefoff                 u64 1 0
    incr                      u32 1
    push           &mm_lex.lxsptr 
    incr                      u64 1
    jump           #12219     
    jump           #12211     
#12216: 
    push           &mm_decls.lx 
    push           4          
    addrefoff                 u64 1 0
    incr                      u32 1
    jump           #12219     
    jump           #12211     
#12214: 
    push           66         i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    push           &mm_lex.lxsptr 
    decr                      u64 1
    jump           #12184     
    jump           #12211     
#12215: 
    jump           #12211     
#12218: 
    push           1          i64 
    pop            mm_lex.lexreadtoken.commentseen i64 
    jump           #12211     
#12213: 
    push           mm_lex.lexreadtoken.commentseen i64 
    jumptrue       #12220     i64 
    setargs                   1 0
    push           "\\ not followed by eol" u64 
    callproc       &mm_support.lxerror 
#12220: 
    jump           #12211     
#12219: 
#12221: 
    push           &mm_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    switch         #12222     9 32
    opnd           #12223     
#12222: 
    switchlabel    #12224     
    switchlabel    #12225     
    switchlabel    #12223     
    switchlabel    #12223     
    switchlabel    #12226     
    switchlabel    #12223     
    switchlabel    #12223     
    switchlabel    #12223     
    switchlabel    #12223     
    switchlabel    #12223     
    switchlabel    #12223     
    switchlabel    #12223     
    switchlabel    #12223     
    switchlabel    #12223     
    switchlabel    #12223     
    switchlabel    #12223     
    switchlabel    #12223     
    switchlabel    #12223     
    switchlabel    #12223     
    switchlabel    #12223     
    switchlabel    #12223     
    switchlabel    #12223     
    switchlabel    #12223     
    switchlabel    #12224     
    endswitch                 
#12226: 
    push           &mm_decls.lx 
    push           4          
    addrefoff                 u64 1 0
    incr                      u32 1
    push           &mm_lex.lxsptr 
    incr                      u64 1
    jump           #12221     
#12225: 
    push           &mm_decls.lx 
    push           4          
    addrefoff                 u64 1 0
    incr                      u32 1
    jump           #12221     
#12224: 
    jump           #12221     
#12223: 
    push           &mm_lex.lxsptr 
    decr                      u64 1
    jump           #12227     
    jump           #12221     
#12227: 
    jump           #12132     
#12168: 
    push           16         i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    jump           #12184     
    jump           #12132     
#12170: 
    push           17         i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    jump           #12184     
    jump           #12132     
#12152: 
    push           mm_lex.lxsptr u64 
    pushptr                   u8 
    switch         #12228     46 57
    opnd           #12229     
#12228: 
    switchlabel    #12230     
    switchlabel    #12229     
    switchlabel    #12231     
    switchlabel    #12231     
    switchlabel    #12231     
    switchlabel    #12231     
    switchlabel    #12231     
    switchlabel    #12231     
    switchlabel    #12231     
    switchlabel    #12231     
    switchlabel    #12231     
    switchlabel    #12231     
    endswitch                 
#12230: 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    push           mm_lex.lxsptr u64 
    pushptr                   u8 
    push           46         u64 
    jumpne         #12232     u64 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    push           28         i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    jump           #12233     
#12232: 
    push           27         i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    push           20         i64 
    push           &mm_decls.lx 
    push           1          
    popptroff                 u8 1 0
#12233: 
    jump           #12184     
    jump           #12234     
#12231: 
    push           &mm_lex.lxsptr 
    decr                      u64 1
    setargs                   3 0
    push           10         i64 
    push           0          i64 
    push           0          u64 
    callproc       &mm_lex.readrealnumber 
    jump           #12184     
    jump           #12234     
#12229: 
    push           2          i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    jump           #12184     
#12234: 
    jump           #12132     
#12150: 
    push           5          i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    jump           #12184     
    jump           #12132     
#12156: 
    push           6          i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    jump           #12184     
    jump           #12132     
#12155: 
    push           mm_lex.lxsptr u64 
    pushptr                   u8 
    switch         #12235     58 61
    opnd           #12236     
#12235: 
    switchlabel    #12237     
    switchlabel    #12236     
    switchlabel    #12236     
    switchlabel    #12238     
    endswitch                 
#12238: 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    push           9          i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    push           29         i64 
    push           &mm_decls.lx 
    push           1          
    popptroff                 u8 1 0
    jump           #12239     
#12237: 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    push           mm_lex.lxsptr u64 
    pushptr                   u8 
    push           61         u64 
    casejumpeq     #12240     u64 0
    popstack                  u64 
    jump           #12241     
#12240: 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    push           10         i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    push           30         i64 
    push           &mm_decls.lx 
    push           1          
    popptroff                 u8 1 0
    jump           #12242     
#12241: 
    push           8          i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
#12242: 
    jump           #12239     
#12236: 
    push           7          i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
#12239: 
    jump           #12184     
    jump           #12132     
#12146: 
    push           12         i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    jump           #12184     
    jump           #12132     
#12147: 
    push           13         i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    jump           #12184     
    jump           #12132     
#12163: 
    push           14         i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    jump           #12184     
    jump           #12132     
#12165: 
    push           15         i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    jump           #12184     
    jump           #12132     
#12169: 
    push           mm_lex.lxsptr u64 
    pushptr                   u8 
    push           124        u64 
    jumpne         #12243     u64 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    push           20         i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    jump           #12244     
#12243: 
    push           19         i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
#12244: 
    jump           #12184     
    jump           #12132     
#12166: 
    push           18         i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    jump           #12184     
    jump           #12132     
#12161: 
    push           mm_lex.lxsptr u64 
    pushptr                   u8 
    push           64         u64 
    jumpne         #12245     u64 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    push           22         i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    jump           #12246     
#12245: 
    push           21         i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
#12246: 
    jump           #12184     
    jump           #12132     
#12160: 
    push           23         i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    jump           #12184     
    jump           #12132     
#12171: 
    push           26         i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    jump           #12184     
    jump           #12132     
#12149: 
    push           30         i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    push           mm_lex.lxsptr u64 
    pushptr                   u8 
    push           43         u64 
    jumpne         #12247     u64 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    push           69         i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    push           152        i64 
    push           &mm_decls.lx 
    push           1          
    popptroff                 u8 1 0
    jump           #12184     
#12247: 
    jump           #12184     
    jump           #12132     
#12151: 
    push           31         i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    push           mm_lex.lxsptr u64 
    pushptr                   u8 
    push           45         u64 
    jumpne         #12248     u64 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    push           69         i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    push           153        i64 
    push           &mm_decls.lx 
    push           1          
    popptroff                 u8 1 0
    jump           #12184     
#12248: 
    jump           #12184     
    jump           #12132     
#12148: 
    push           mm_lex.lxsptr u64 
    pushptr                   u8 
    push           42         u64 
    jumpne         #12249     u64 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    push           48         i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    jump           #12250     
#12249: 
    push           32         i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
#12250: 
    jump           #12184     
    jump           #12132     
#12153: 
    push           33         i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    jump           #12184     
    jump           #12132     
#12143: 
    push           34         i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    jump           #12184     
    jump           #12132     
#12158: 
    push           mm_lex.lxsptr u64 
    pushptr                   u8 
    push           62         u64 
    casejumpeq     #12251     u64 0
    push           61         u64 
    casejumpeq     #12252     u64 0
    popstack                  u64 
    jump           #12253     
#12251: 
    push           11         i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    push           &mm_lex.lxsptr 
    incr                      u64 1
    jump           #12254     
#12252: 
    push           49         i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    push           &mm_lex.lxsptr 
    incr                      u64 1
    jump           #12254     
#12253: 
    push           46         i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    push           116        i64 
    push           &mm_decls.lx 
    push           1          
    popptroff                 u8 1 0
#12254: 
    jump           #12184     
    jump           #12132     
#12157: 
    push           47         i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    push           mm_lex.lxsptr u64 
    pushptr                   u8 
    switch         #12255     60 62
    opnd           #12256     
#12255: 
    switchlabel    #12257     
    switchlabel    #12258     
    switchlabel    #12259     
    endswitch                 
#12258: 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    push           119        i64 
    push           &mm_decls.lx 
    push           1          
    popptroff                 u8 1 0
    jump           #12260     
#12259: 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    push           117        i64 
    push           &mm_decls.lx 
    push           1          
    popptroff                 u8 1 0
    jump           #12260     
#12257: 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    push           39         i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    jump           #12260     
#12256: 
    push           118        i64 
    push           &mm_decls.lx 
    push           1          
    popptroff                 u8 1 0
#12260: 
    jump           #12184     
    jump           #12132     
#12159: 
    push           47         i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    push           mm_lex.lxsptr u64 
    pushptr                   u8 
    switch         #12261     61 62
    opnd           #12262     
#12261: 
    switchlabel    #12263     
    switchlabel    #12264     
    endswitch                 
#12263: 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    push           47         i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    push           120        i64 
    push           &mm_decls.lx 
    push           1          
    popptroff                 u8 1 0
    jump           #12265     
#12264: 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    push           40         i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    jump           #12265     
#12262: 
    push           47         i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    push           121        i64 
    push           &mm_decls.lx 
    push           1          
    popptroff                 u8 1 0
#12265: 
    jump           #12184     
    jump           #12132     
#12144: 
    push           mm_lex.lxsptr u64 
    pushptr                   u8 
    push           46         u64 
    casejumpeq     #12266     u64 0
    popstack                  u64 
    jump           #12267     
#12266: 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    push           4          i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    push           0          i64 
    push           &mm_decls.lx 
    push           1          
    popptroff                 u8 1 0
    jump           #12268     
#12267: 
    push           24         i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    push           59         i64 
    push           &mm_decls.lx 
    push           1          
    popptroff                 u8 1 0
#12268: 
    jump           #12184     
    jump           #12132     
#12145: 
    setargs                   1 0
    push           39         i64 
    callproc       &mm_lex.lxreadstring 
    jump           #12184     
    jump           #12132     
#12140: 
    setargs                   1 0
    push           34         i64 
    callproc       &mm_lex.lxreadstring 
    jump           #12184     
    jump           #12132     
#12167: 
    setargs                   0 0
    callproc       &mm_lex.readrawxname 
    jump           #12184     
    jump           #12132     
#12136: 
    jump           #12132     
#12138: 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    push           &mm_decls.lx 
    push           4          
    addrefoff                 u64 1 0
    incr                      u32 1
    push           65         i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    jump           #12184     
    jump           #12132     
#12137: 
    push           &mm_decls.lx 
    push           4          
    addrefoff                 u64 1 0
    incr                      u32 1
    push           65         i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    jump           #12184     
    jump           #12132     
#12135: 
    push           mm_lex.sourcelevel i64 
    jumpfalse      #12269     i64 
    setargs                   0 0
    callproc       &mm_lex.unstacksource 
    jump           #12270     
#12269: 
    push           66         i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    push           &mm_lex.lxsptr 
    decr                      u64 1
    jump           #12184     
#12270: 
    jump           #12132     
#12172: 
    push           &mm_lex.lxsptr 
    push           2          i64 
    addrefoffto               u64 1 0
    jump           #12132     
#12134: 
    push           1          i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    jump           #12184     
    jump           #12132     
#12271: 
#12184: 
    retproc                   
End


Proc mm_lex.readnumber:
    param          mm_lex.readnumber.base i64 
    local          mm_lex.readnumber.pstart u64 
    local          mm_lex.readnumber.dest u64 
    local          mm_lex.readnumber.c i64 
    local          mm_lex.readnumber.p u64 
    procentry                 
    push           mm_lex.lxsptr u64 
    store          mm_lex.readnumber.pstart u64 
    pop            mm_lex.readnumber.dest u64 
    push           mm_lex.readnumber.base i64 
    push           10         i64 
    jumpne         #12273     i64 
#12274: 
    push           &mm_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          mm_lex.readnumber.c i64 
    switch         #12275     39 96
    opnd           #12276     
#12275: 
    switchlabel    #12277     
    switchlabel    #12276     
    switchlabel    #12276     
    switchlabel    #12276     
    switchlabel    #12276     
    switchlabel    #12276     
    switchlabel    #12276     
    switchlabel    #12276     
    switchlabel    #12276     
    switchlabel    #12278     
    switchlabel    #12278     
    switchlabel    #12278     
    switchlabel    #12278     
    switchlabel    #12278     
    switchlabel    #12278     
    switchlabel    #12278     
    switchlabel    #12278     
    switchlabel    #12278     
    switchlabel    #12278     
    switchlabel    #12276     
    switchlabel    #12276     
    switchlabel    #12276     
    switchlabel    #12276     
    switchlabel    #12276     
    switchlabel    #12276     
    switchlabel    #12276     
    switchlabel    #12276     
    switchlabel    #12276     
    switchlabel    #12276     
    switchlabel    #12276     
    switchlabel    #12276     
    switchlabel    #12276     
    switchlabel    #12276     
    switchlabel    #12276     
    switchlabel    #12276     
    switchlabel    #12276     
    switchlabel    #12276     
    switchlabel    #12276     
    switchlabel    #12276     
    switchlabel    #12276     
    switchlabel    #12276     
    switchlabel    #12276     
    switchlabel    #12276     
    switchlabel    #12276     
    switchlabel    #12276     
    switchlabel    #12276     
    switchlabel    #12276     
    switchlabel    #12276     
    switchlabel    #12276     
    switchlabel    #12276     
    switchlabel    #12276     
    switchlabel    #12276     
    switchlabel    #12276     
    switchlabel    #12276     
    switchlabel    #12276     
    switchlabel    #12276     
    switchlabel    #12277     
    switchlabel    #12277     
    endswitch                 
#12278: 
    push           mm_lex.readnumber.c u64 
    push           &mm_lex.readnumber.dest 
    loadincr                  u64 1
    popptr                    u8 
    jump           #12274     
#12277: 
    jump           #12274     
#12276: 
    push           &mm_lex.lxsptr 
    decr                      u64 1
    jump           #12279     
    jump           #12274     
#12279: 
    jump           #12280     
#12273: 
    setargs                   1 0
    push           mm_lex.readnumber.base i64 
    callfn         &mm_lex.scannumber u64 
    pop            mm_lex.readnumber.dest u64 
    push           mm_lex.lxsptr u64 
    pushptr                   u8 
    pop            mm_lex.readnumber.c i64 
#12280: 
    push           mm_lex.readnumber.c i64 
    switch         #12281     46 112
    opnd           #12282     
#12281: 
    switchlabel    #12283     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12284     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12285     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12284     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12282     
    switchlabel    #12285     
    endswitch                 
#12283: 
    push           mm_lex.lxsptr u64 
    push           1          i64 
    pushptroff                u8 1 0
    push           46         u64 
    jumpeq         #12286     u64 
    setargs                   3 0
    push           mm_lex.readnumber.base i64 
    push           mm_lex.readnumber.dest u64 
    push           mm_lex.readnumber.pstart u64 
    subref                    i64 1
    push           mm_lex.readnumber.pstart u64 
    callproc       &mm_lex.readrealnumber 
    jump           #12287     
#12286: 
    jump           #12288     
#12284: 
    push           mm_lex.readnumber.base i64 
    push           15         i64 
    jumpge         #12289     i64 
    setargs                   3 0
    push           mm_lex.readnumber.base i64 
    push           mm_lex.readnumber.dest u64 
    push           mm_lex.readnumber.pstart u64 
    subref                    i64 1
    push           mm_lex.readnumber.pstart u64 
    callproc       &mm_lex.readrealnumber 
    jump           #12287     
#12289: 
    jump           #12288     
#12285: 
    push           mm_lex.readnumber.base i64 
    push           15         i64 
    jumplt         #12290     i64 
    setargs                   3 0
    push           mm_lex.readnumber.base i64 
    push           mm_lex.readnumber.dest u64 
    push           mm_lex.readnumber.pstart u64 
    subref                    i64 1
    push           mm_lex.readnumber.pstart u64 
    callproc       &mm_lex.readrealnumber 
    jump           #12287     
#12290: 
    jump           #12288     
#12282: 
#12288: 
    setargs                   3 0
    push           mm_lex.readnumber.base i64 
    push           mm_lex.readnumber.dest u64 
    push           mm_lex.readnumber.pstart u64 
    subref                    i64 1
    push           mm_lex.readnumber.pstart u64 
    callproc       &mm_lex.stringtonumber 
#12287: 
    retproc                   
End


Proc mm_lex.readdecimalnumber:
    local          mm_lex.readdecimalnumber.pstart u64 
    local          mm_lex.readdecimalnumber.dest u64 
    local          mm_lex.readdecimalnumber.c i64 
    local          mm_lex.readdecimalnumber.n i64 
    local          mm_lex.readdecimalnumber.base i64 
    local          mm_lex.readdecimalnumber.suffix i64 
    local          mm_lex.readdecimalnumber.p u64 
    local          mm_lex.readdecimalnumber.av_1 i64 
    procentry                 
    push           mm_lex.lxsptr u64 
    store          mm_lex.readdecimalnumber.pstart u64 
    pop            mm_lex.readdecimalnumber.dest u64 
    push           0          i64 
    pop            mm_lex.readdecimalnumber.suffix i64 
#12292: 
    push           &mm_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          mm_lex.readdecimalnumber.c i64 
    switch         #12293     39 96
    opnd           #12294     
#12293: 
    switchlabel    #12295     
    switchlabel    #12294     
    switchlabel    #12294     
    switchlabel    #12294     
    switchlabel    #12294     
    switchlabel    #12294     
    switchlabel    #12294     
    switchlabel    #12294     
    switchlabel    #12294     
    switchlabel    #12296     
    switchlabel    #12296     
    switchlabel    #12296     
    switchlabel    #12296     
    switchlabel    #12296     
    switchlabel    #12296     
    switchlabel    #12296     
    switchlabel    #12296     
    switchlabel    #12296     
    switchlabel    #12296     
    switchlabel    #12294     
    switchlabel    #12294     
    switchlabel    #12294     
    switchlabel    #12294     
    switchlabel    #12294     
    switchlabel    #12294     
    switchlabel    #12294     
    switchlabel    #12294     
    switchlabel    #12294     
    switchlabel    #12294     
    switchlabel    #12294     
    switchlabel    #12294     
    switchlabel    #12294     
    switchlabel    #12294     
    switchlabel    #12294     
    switchlabel    #12294     
    switchlabel    #12294     
    switchlabel    #12294     
    switchlabel    #12294     
    switchlabel    #12294     
    switchlabel    #12294     
    switchlabel    #12294     
    switchlabel    #12294     
    switchlabel    #12294     
    switchlabel    #12294     
    switchlabel    #12294     
    switchlabel    #12294     
    switchlabel    #12294     
    switchlabel    #12294     
    switchlabel    #12294     
    switchlabel    #12294     
    switchlabel    #12294     
    switchlabel    #12294     
    switchlabel    #12294     
    switchlabel    #12294     
    switchlabel    #12294     
    switchlabel    #12294     
    switchlabel    #12295     
    switchlabel    #12295     
    endswitch                 
#12296: 
    push           mm_lex.readdecimalnumber.c u64 
    push           &mm_lex.readdecimalnumber.dest 
    loadincr                  u64 1
    popptr                    u8 
    jump           #12292     
#12295: 
    jump           #12292     
#12294: 
    push           &mm_lex.lxsptr 
    decr                      u64 1
    jump           #12297     
    jump           #12292     
#12297: 
    push           mm_lex.readdecimalnumber.c i64 
    switch         #12298     46 101
    opnd           #12299     
#12298: 
    switchlabel    #12300     
    switchlabel    #12299     
    switchlabel    #12299     
    switchlabel    #12299     
    switchlabel    #12299     
    switchlabel    #12299     
    switchlabel    #12299     
    switchlabel    #12299     
    switchlabel    #12299     
    switchlabel    #12299     
    switchlabel    #12299     
    switchlabel    #12299     
    switchlabel    #12299     
    switchlabel    #12299     
    switchlabel    #12299     
    switchlabel    #12299     
    switchlabel    #12299     
    switchlabel    #12299     
    switchlabel    #12299     
    switchlabel    #12299     
    switchlabel    #12301     
    switchlabel    #12299     
    switchlabel    #12299     
    switchlabel    #12302     
    switchlabel    #12299     
    switchlabel    #12299     
    switchlabel    #12299     
    switchlabel    #12299     
    switchlabel    #12299     
    switchlabel    #12299     
    switchlabel    #12299     
    switchlabel    #12299     
    switchlabel    #12299     
    switchlabel    #12299     
    switchlabel    #12299     
    switchlabel    #12299     
    switchlabel    #12299     
    switchlabel    #12299     
    switchlabel    #12299     
    switchlabel    #12299     
    switchlabel    #12299     
    switchlabel    #12299     
    switchlabel    #12299     
    switchlabel    #12299     
    switchlabel    #12299     
    switchlabel    #12299     
    switchlabel    #12299     
    switchlabel    #12299     
    switchlabel    #12299     
    switchlabel    #12299     
    switchlabel    #12299     
    switchlabel    #12299     
    switchlabel    #12301     
    switchlabel    #12299     
    switchlabel    #12299     
    switchlabel    #12302     
    endswitch                 
#12300: 
    push           mm_lex.lxsptr u64 
    push           1          i64 
    pushptroff                u8 1 0
    push           46         u64 
    jumpeq         #12303     u64 
    setargs                   3 0
    push           10         i64 
    push           mm_lex.readdecimalnumber.dest u64 
    push           mm_lex.readdecimalnumber.pstart u64 
    subref                    i64 1
    push           mm_lex.readdecimalnumber.pstart u64 
    callproc       &mm_lex.readrealnumber 
    jump           #12304     
#12303: 
    jump           #12305     
#12302: 
    setargs                   3 0
    push           10         i64 
    push           mm_lex.readdecimalnumber.dest u64 
    push           mm_lex.readdecimalnumber.pstart u64 
    subref                    i64 1
    push           mm_lex.readdecimalnumber.pstart u64 
    callproc       &mm_lex.readrealnumber 
    jump           #12304     
    jump           #12305     
#12301: 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    push           mm_lex.readdecimalnumber.dest u64 
    push           mm_lex.readdecimalnumber.pstart u64 
    subref                    i64 1
    pop            mm_lex.readdecimalnumber.n i64 
    push           mm_lex.readdecimalnumber.pstart u64 
    pop            mm_lex.readdecimalnumber.p u64 
#12306: 
    push           mm_lex.readdecimalnumber.n i64 
    pop            mm_lex.readdecimalnumber.av_1 i64 
    push           mm_lex.readdecimalnumber.av_1 i64 
    push           0          i64 
    jumple         #12307     i64 
#12308: 
    push           mm_lex.readdecimalnumber.p u64 
    pushptr                   u8 
    push           48         u64 
    jumplt         #12309     u64 
    push           mm_lex.readdecimalnumber.p u64 
    pushptr                   u8 
    push           49         u64 
    jumple         #12310     u64 
#12309: 
    setargs                   1 0
    push           "1101B: bad digit" u64 
    callproc       &mm_support.lxerror 
#12310: 
    push           &mm_lex.readdecimalnumber.p 
    incr                      u64 1
#12311: 
    to             #12308     
    opnd           mm_lex.readdecimalnumber.av_1 
#12307: 
    setargs                   3 0
    push           2          i64 
    push           mm_lex.readdecimalnumber.n i64 
    push           mm_lex.readdecimalnumber.pstart u64 
    callproc       &mm_lex.stringtonumber 
    jump           #12304     
    jump           #12305     
#12299: 
#12305: 
    setargs                   3 0
    push           mm_lex.readdecimalnumber.suffix i64 
    push           mm_lex.readdecimalnumber.dest u64 
    push           mm_lex.readdecimalnumber.pstart u64 
    subref                    i64 1
    push           mm_lex.readdecimalnumber.pstart u64 
    callproc       &mm_lex.stringtodecimalnumber 
#12304: 
    retproc                   
End


Proc mm_lex.readrealnumber:
    param          mm_lex.readrealnumber.intstart u64 
    param          mm_lex.readrealnumber.intlen i64 
    param          mm_lex.readrealnumber.base i64 
    local          mm_lex.readrealnumber.fractstart u64 
    local          mm_lex.readrealnumber.ss u64 
    local          mm_lex.readrealnumber.fractlen i64 
    local          mm_lex.readrealnumber.expon i64 
    local          mm_lex.readrealnumber.i i64 
    local          mm_lex.readrealnumber.c i64 
    local          mm_lex.readrealnumber.n i64 
    local          mm_lex.readrealnumber.basex r64 
    local          mm_lex.readrealnumber.x r64 
    local          mm_lex.readrealnumber.realstr block:500 
    local          mm_lex.readrealnumber.str block:32 
    local          mm_lex.readrealnumber.av_1 i64 
    local          mm_lex.readrealnumber.av_2 i64 
    local          mm_lex.readrealnumber.av_3 i64 
    procentry                 
    push           0          u64 
    pop            mm_lex.readrealnumber.fractstart u64 
    push           0          i64 
    pop            mm_lex.readrealnumber.fractlen i64 
    push           0          i64 
    pop            mm_lex.readrealnumber.expon i64 
    push           0          i64 
    pop            mm_lex.longsuffix i64 
    push           mm_lex.lxsptr u64 
    pushptr                   u8 
    push           46         u64 
    jumpne         #12313     u64 
    push           &mm_lex.lxsptr 
    incrload                  u64 1
    pop            mm_lex.readrealnumber.fractstart u64 
    setargs                   1 0
    push           mm_lex.readrealnumber.base i64 
    callfn         &mm_lex.scannumber u64 
    push           mm_lex.readrealnumber.fractstart u64 
    subref                    i64 1
    pop            mm_lex.readrealnumber.fractlen i64 
#12313: 
    push           mm_lex.lxsptr u64 
    pushptr                   u8 
    push           101        u64 
    casejumpeq     #12314     u64 0
    push           69         u64 
    casejumpeq     #12314     u64 0
    push           112        u64 
    casejumpeq     #12315     u64 0
    push           80         u64 
    casejumpeq     #12315     u64 0
    push           108        u64 
    casejumpeq     #12316     u64 0
    push           76         u64 
    casejumpeq     #12316     u64 0
    popstack                  u64 
    jump           #12317     
#12314: 
    push           mm_lex.readrealnumber.base i64 
    push           15         i64 
    jumpge         #12318     i64 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    setargs                   1 0
    push           mm_lex.readrealnumber.base i64 
    callfn         &mm_lex.readexponent i64 
    pop            mm_lex.readrealnumber.expon i64 
#12318: 
    jump           #12319     
#12315: 
    push           mm_lex.readrealnumber.base i64 
    push           15         i64 
    jumplt         #12320     i64 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    setargs                   1 0
    push           mm_lex.readrealnumber.base i64 
    callfn         &mm_lex.readexponent i64 
    pop            mm_lex.readrealnumber.expon i64 
#12320: 
    jump           #12319     
#12316: 
    push           mm_lex.longsuffix i64 
    jumpfalse      #12321     i64 
    setargs                   1 0
    push           "LL?"      u64 
    callproc       &mm_support.lxerror 
#12321: 
    push           76         i64 
    pop            mm_lex.longsuffix i64 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    jump           #12319     
#12317: 
#12319: 
    push           mm_lex.longsuffix i64 
    push           76         i64 
    jumpne         #12322     i64 
    setargs                   1 0
    push           mm_lex.readrealnumber.intlen i64 
    push           mm_lex.readrealnumber.fractlen i64 
    add                       i64 
    push           16         i64 
    add                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            mm_lex.readrealnumber.ss u64 
    setargs                   3 0
    push           mm_lex.readrealnumber.intlen u64 
    push           mm_lex.readrealnumber.intstart u64 
    push           mm_lex.readrealnumber.ss u64 
    callproc       &memcpy    
    setargs                   3 0
    push           1          u64 
    push           "."        u64 
    push           mm_lex.readrealnumber.ss u64 
    push           mm_lex.readrealnumber.intlen i64 
    addrefoff                 u64 1 0
    callproc       &memcpy    
    setargs                   3 0
    push           mm_lex.readrealnumber.fractlen u64 
    push           mm_lex.readrealnumber.fractstart u64 
    push           mm_lex.readrealnumber.ss u64 
    push           mm_lex.readrealnumber.intlen i64 
    addrefoff                 u64 1 1
    callproc       &memcpy    
    setargs                   3 0
    push           1          u64 
    push           "e"        u64 
    push           mm_lex.readrealnumber.ss u64 
    push           mm_lex.readrealnumber.intlen i64 
    addrefoff                 u64 1 0
    push           mm_lex.readrealnumber.fractlen i64 
    addrefoff                 u64 1 1
    callproc       &memcpy    
    setargs                   2 0
    push           &mm_lex.readrealnumber.str 
    push           mm_lex.readrealnumber.expon i64 
    callproc       &msysp.getstrint 
    setargs                   3 0
    setargs                   1 0
    push           &mm_lex.readrealnumber.str 
    callfn         &strlen    i64 
    push           1          i64 
    add                       u64 
    push           &mm_lex.readrealnumber.str 
    push           mm_lex.readrealnumber.ss u64 
    push           mm_lex.readrealnumber.intlen i64 
    addrefoff                 u64 1 0
    push           mm_lex.readrealnumber.fractlen i64 
    addrefoff                 u64 1 2
    callproc       &memcpy    
    push           71         i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    push           mm_lex.readrealnumber.ss u64 
    push           &mm_decls.lx 
    push           8          
    popptroff                 u64 1 0
    jump           #12323     
#12322: 
    push           mm_lex.readrealnumber.intlen i64 
    push           mm_lex.readrealnumber.fractlen i64 
    add                       i64 
    push           500        i64 
    jumple         #12324     i64 
    setargs                   1 0
    push           "Real too long" u64 
    callproc       &mm_support.lxerror 
#12324: 
    push           mm_lex.readrealnumber.intlen i64 
    jumpfalse      #12325     i64 
    setargs                   3 0
    push           mm_lex.readrealnumber.intlen u64 
    push           mm_lex.readrealnumber.intstart u64 
    push           &mm_lex.readrealnumber.realstr 
    callproc       &memcpy    
#12325: 
    push           mm_lex.readrealnumber.fractlen i64 
    jumpfalse      #12326     i64 
    setargs                   3 0
    push           mm_lex.readrealnumber.fractlen u64 
    push           mm_lex.readrealnumber.fractstart u64 
    push           &mm_lex.readrealnumber.realstr 
    push           0          
    addrefoff                 u8 1 0
    push           mm_lex.readrealnumber.intlen i64 
    addrefoff                 u64 1 0
    callproc       &memcpy    
#12326: 
    push           mm_lex.readrealnumber.base i64 
    push           10         i64 
    jumpne         #12327     i64 
    setargs                   4 0
    push           &mm_lex.readrealnumber.realstr 
    push           mm_lex.readrealnumber.expon i64 
    push           mm_lex.readrealnumber.fractlen i64 
    push           mm_lex.readrealnumber.intlen i64 
    callfn         &mm_lex.readrealbest r64 
    pop            mm_lex.readrealnumber.x r64 
    jump           #12328     
#12327: 
!billy::
#12329: 
    push           mm_lex.readrealnumber.base i64 
    float                     r64 i64 
    pop            mm_lex.readrealnumber.basex r64 
    push           &mm_lex.readrealnumber.expon 
    push           mm_lex.readrealnumber.fractlen i64 
    subto                     i64 
    push           0.0000000000000000e+000 r64 
    pop            mm_lex.readrealnumber.x r64 
#12330: 
    push           1          i64 
    pop            mm_lex.readrealnumber.i i64 
    push           mm_lex.readrealnumber.intlen i64 
    push           mm_lex.readrealnumber.fractlen i64 
    add                       i64 
    pop            mm_lex.readrealnumber.av_1 i64 
    push           mm_lex.readrealnumber.av_1 i64 
    push           1          i64 
    jumplt         #12331     i64 
#12332: 
    push           &mm_lex.readrealnumber.realstr 
    push           mm_lex.readrealnumber.i i64 
    pushptroff                u8 1 -1
    pop            mm_lex.readrealnumber.c i64 
    push           mm_lex.readrealnumber.c i64 
    push           48         i64 
    jumplt         #12333     i64 
    push           mm_lex.readrealnumber.c i64 
    push           57         i64 
    jumpgt         #12333     i64 
    push           mm_lex.readrealnumber.x r64 
    push           mm_lex.readrealnumber.basex r64 
    mul                       r64 
    push           mm_lex.readrealnumber.c i64 
    float                     r64 i64 
    add                       r64 
    push           48         u64 
    float                     r64 u64 
    sub                       r64 
    pop            mm_lex.readrealnumber.x r64 
    jump           #12334     
#12333: 
    push           mm_lex.readrealnumber.c i64 
    push           97         i64 
    jumple         #12335     i64 
    push           mm_lex.readrealnumber.x r64 
    push           mm_lex.readrealnumber.basex r64 
    mul                       r64 
    push           mm_lex.readrealnumber.c i64 
    float                     r64 i64 
    add                       r64 
    push           97         u64 
    float                     r64 u64 
    sub                       r64 
    push           1.0000000000000000e+001 r64 
    add                       r64 
    pop            mm_lex.readrealnumber.x r64 
    jump           #12334     
#12335: 
    push           mm_lex.readrealnumber.x r64 
    push           mm_lex.readrealnumber.basex r64 
    mul                       r64 
    push           mm_lex.readrealnumber.c i64 
    float                     r64 i64 
    add                       r64 
    push           65         u64 
    float                     r64 u64 
    sub                       r64 
    push           1.0000000000000000e+001 r64 
    add                       r64 
    pop            mm_lex.readrealnumber.x r64 
#12334: 
#12336: 
    forup          #12332     i64 1
    opnd           mm_lex.readrealnumber.i 
    opnd           mm_lex.readrealnumber.av_1 
#12331: 
    push           mm_lex.readrealnumber.expon i64 
    push           0          i64 
    jumplt         #12337     i64 
#12338: 
    push           mm_lex.readrealnumber.expon i64 
    pop            mm_lex.readrealnumber.av_2 i64 
    push           mm_lex.readrealnumber.av_2 i64 
    push           0          i64 
    jumple         #12339     i64 
#12340: 
    push           &mm_lex.readrealnumber.x 
    push           mm_lex.readrealnumber.basex r64 
    multo                     r64 
#12341: 
    to             #12340     
    opnd           mm_lex.readrealnumber.av_2 
#12339: 
    jump           #12342     
#12337: 
#12343: 
    push           mm_lex.readrealnumber.expon i64 
    neg                       i64 
    pop            mm_lex.readrealnumber.av_3 i64 
    push           mm_lex.readrealnumber.av_3 i64 
    push           0          i64 
    jumple         #12344     i64 
#12345: 
    push           &mm_lex.readrealnumber.x 
    push           mm_lex.readrealnumber.basex r64 
    divto                     r64 
#12346: 
    to             #12345     
    opnd           mm_lex.readrealnumber.av_3 
#12344: 
#12342: 
#12328: 
    push           72         i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    push           7          i64 
    push           &mm_decls.lx 
    push           1          
    popptroff                 u8 1 0
    push           mm_lex.readrealnumber.x r64 
    push           &mm_decls.lx 
    push           8          
    popptroff                 r64 1 0
#12323: 
    retproc                   
End


Proc mm_lex.readrealbest: r64
    param          mm_lex.readrealbest.intlen i64 
    param          mm_lex.readrealbest.fractlen i64 
    param          mm_lex.readrealbest.expon i64 
    param          mm_lex.readrealbest.realstr u64 
    local          mm_lex.readrealbest.expstr block:32 
    procentry                 
    push           0          u64 
    push           mm_lex.readrealbest.realstr u64 
    push           mm_lex.readrealbest.intlen i64 
    addrefoff                 u64 1 0
    push           mm_lex.readrealbest.fractlen i64 
    popptroff                 u8 1 0
    push           &mm_lex.readrealbest.expon 
    push           mm_lex.readrealbest.fractlen i64 
    subto                     i64 
    setargs                   1 0
    push           &mm_lex.readrealbest.expstr 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "e"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           mm_lex.readrealbest.expon i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           &mm_lex.readrealbest.expstr 
    push           mm_lex.readrealbest.realstr u64 
    callproc       &strcat    
    setargs                   2 0
    push           0          u64 
    push           mm_lex.readrealbest.realstr u64 
    callfn         &strtod    r64 
    setret                    r64 
    jump           #12348     
#12348: 
    retfn                     r64 
End


Proc mm_lex.readexponent: i64
    param          mm_lex.readexponent.base i64 
    local          mm_lex.readexponent.numstart u64 
    local          mm_lex.readexponent.numend u64 
    local          mm_lex.readexponent.expon i64 
    local          mm_lex.readexponent.length i64 
    local          mm_lex.readexponent.neg i64 
    procentry                 
    push           0          i64 
    pop            mm_lex.readexponent.neg i64 
    push           mm_lex.lxsptr u64 
    pushptr                   u8 
    push           43         u64 
    casejumpeq     #12350     u64 0
    push           45         u64 
    casejumpeq     #12351     u64 0
    popstack                  u64 
    jump           #12352     
#12350: 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    jump           #12353     
#12351: 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    push           1          i64 
    pop            mm_lex.readexponent.neg i64 
    jump           #12353     
#12352: 
#12353: 
    push           mm_lex.lxsptr u64 
    pop            mm_lex.readexponent.numstart u64 
    setargs                   1 0
    push           mm_lex.readexponent.base i64 
    callfn         &mm_lex.scannumber u64 
    push           mm_lex.readexponent.numstart u64 
    subref                    i64 1
    pop            mm_lex.readexponent.length i64 
    push           mm_lex.readexponent.length i64 
    push           0          i64 
    jumpne         #12354     i64 
    setargs                   1 0
    push           "Bad expon" u64 
    callproc       &mm_support.lxerror 
#12354: 
    setargs                   3 0
    push           mm_lex.readexponent.base i64 
    push           mm_lex.readexponent.length i64 
    push           mm_lex.readexponent.numstart u64 
    callproc       &mm_lex.stringtonumber 
    startmult                 
    push           mm_lex.readexponent.neg i64 
    jumpfalse      #12355     i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                i64 1 0
    neg                       i64 
    resetmult                 
    jump           #12356     
#12355: 
    push           &mm_decls.lx 
    push           8          
    pushptroff                i64 1 0
    endmult                   
#12356: 
    setret                    i64 
    jump           #12357     
#12357: 
    retfn                     i64 
End


Proc mm_lex.printsymbol:
    param          mm_lex.printsymbol.lp u64 
    local          mm_lex.printsymbol.l block:16 
    procentry                 
    push           mm_lex.printsymbol.lp u64 
    pushptr                   block:16 
    pop            mm_lex.printsymbol.l block:16 
    setargs                   2 2
    push           &mm_tables.symbolnames 
    push           &mm_lex.printsymbol.l 
    pushptr                   u8 
    pushptroff                u64 8 -8
    push           "%-18s"    u64 
    callproc       &printf    
    push           &mm_lex.printsymbol.l 
    pushptr                   u8 
    push           79         i64 
    casejumpeq     #12359     i64 0
    push           70         i64 
    casejumpeq     #12360     i64 0
    push           72         i64 
    casejumpeq     #12361     i64 0
    push           75         i64 
    casejumpeq     #12362     i64 0
    push           73         i64 
    casejumpeq     #12363     i64 0
    push           71         i64 
    casejumpeq     #12364     i64 0
    push           9          i64 
    casejumpeq     #12365     i64 0
    push           24         i64 
    casejumpeq     #12365     i64 0
    push           18         i64 
    casejumpeq     #12365     i64 0
    push           10         i64 
    casejumpeq     #12365     i64 0
    push           27         i64 
    casejumpeq     #12365     i64 0
    push           43         i64 
    casejumpeq     #12365     i64 0
    push           44         i64 
    casejumpeq     #12365     i64 0
    push           46         i64 
    casejumpeq     #12365     i64 0
    push           47         i64 
    casejumpeq     #12365     i64 0
    push           30         i64 
    casejumpeq     #12365     i64 0
    push           31         i64 
    casejumpeq     #12365     i64 0
    push           32         i64 
    casejumpeq     #12365     i64 0
    push           33         i64 
    casejumpeq     #12365     i64 0
    push           34         i64 
    casejumpeq     #12365     i64 0
    push           35         i64 
    casejumpeq     #12365     i64 0
    push           36         i64 
    casejumpeq     #12365     i64 0
    push           37         i64 
    casejumpeq     #12365     i64 0
    push           38         i64 
    casejumpeq     #12365     i64 0
    push           39         i64 
    casejumpeq     #12365     i64 0
    push           40         i64 
    casejumpeq     #12365     i64 0
    push           41         i64 
    casejumpeq     #12365     i64 0
    push           42         i64 
    casejumpeq     #12365     i64 0
    push           48         i64 
    casejumpeq     #12365     i64 0
    push           49         i64 
    casejumpeq     #12365     i64 0
    popstack                  i64 
    jump           #12366     
#12359: 
    setargs                   2 0
    push           &mm_lex.printsymbol.l 
    push           8          
    pushptroff                u64 1 0
    push           76         
    pushptroff                u8 1 0
    push           &mm_lex.printsymbol.l 
    push           8          
    pushptroff                u64 1 0
    pushptr                   u64 
    callproc       &mm_lex.printstrn 
    push           &mm_lex.printsymbol.l 
    push           1          
    pushptroff                u8 1 0
    jumpfalse      #12367     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           " [#]"     u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           &mm_tables.symbolnames 
    push           &mm_lex.printsymbol.l 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#12367: 
    jump           #12368     
#12360: 
    push           &mm_lex.printsymbol.l 
    push           1          
    pushptroff                u8 1 0
    push           4          i64 
    casejumpeq     #12369     i64 0
    push           2          i64 
    casejumpeq     #12370     i64 0
    popstack                  i64 
    jump           #12371     
#12369: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &mm_lex.printsymbol.l 
    push           8          
    pushptroff                i64 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           "int"      u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #12372     
#12370: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   2 0
    push           0          i64 
    push           &mm_lex.printsymbol.l 
    push           8          
    pushptroff                u64 1 0
    callproc       &msysp.m$print_u64 
    setargs                   1 0
    push           "word"     u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #12372     
#12371: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &mm_lex.printsymbol.l 
    push           8          
    pushptroff                i64 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#12372: 
    jump           #12368     
#12361: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   2 0
    push           0          i64 
    push           &mm_lex.printsymbol.l 
    push           8          
    pushptroff                r64 1 0
    callproc       &msysp.m$print_r64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #12368     
#12362: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\""       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           &mm_lex.printsymbol.l 
    push           8          
    pushptroff                u64 1 0
    callproc       &msysp.printstr 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\""       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    setargs                   1 0
    push           &mm_lex.printsymbol.l 
    push           8          
    pushptroff                u64 1 0
    callfn         &strlen    i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #12368     
#12363: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "'"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           &mm_lex.printsymbol.l 
    push           8          
    pushptroff                u64 1 0
    callproc       &msysp.printstr 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "'"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #12368     
#12364: 
    setargs                   1 0
    push           &mm_lex.printsymbol.l 
    push           8          
    pushptroff                u64 1 0
    callproc       &msysp.printstr 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "L"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #12368     
#12365: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &mm_tables.symbolnames 
    push           &mm_lex.printsymbol.l 
    pushptr                   u8 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #12368     
#12366: 
    push           &mm_lex.printsymbol.l 
    push           1          
    pushptroff                u8 1 0
    jumpfalse      #12373     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "SUBCODE:" u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           &mm_lex.printsymbol.l 
    push           1          
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#12373: 
#12368: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#12374: 
    retproc                   
End


Proc mm_lex.stringtonumber:
    param          mm_lex.stringtonumber.s u64 
    param          mm_lex.stringtonumber.length i64 
    param          mm_lex.stringtonumber.base i64 
    local          mm_lex.stringtonumber.a i64 
    local          mm_lex.stringtonumber.b u64 
    local          mm_lex.stringtonumber.c i64 
    local          mm_lex.stringtonumber.av_1 i64 
    local          mm_lex.stringtonumber.av_2 i64 
    procentry                 
    jump           #12376     
#12377: 
    push           &mm_lex.stringtonumber.s 
    incr                      u64 1
    push           &mm_lex.stringtonumber.length 
    decr                      i64 1
#12376: 
    push           mm_lex.stringtonumber.length i64 
    push           2          i64 
    jumplt         #12378     i64 
    push           mm_lex.stringtonumber.s u64 
    pushptr                   u8 
    push           48         u64 
    jumpeq         #12377     u64 
#12378: 
#12379: 
    push           70         i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    push           mm_lex.stringtonumber.length i64 
    push           &mm_lex.maxnumlen 
    push           mm_lex.stringtonumber.base i64 
    pushptroff                i64 8 -8
    jumpgt         #12380     i64 
    push           mm_lex.stringtonumber.length i64 
    push           &mm_lex.maxnumlen 
    push           mm_lex.stringtonumber.base i64 
    pushptroff                i64 8 -8
    jumpne         #12381     i64 
    setargs                   3 0
    push           mm_lex.stringtonumber.length u64 
    push           &mm_lex.maxnumlist 
    push           mm_lex.stringtonumber.base i64 
    pushptroff                u64 8 -8
    push           mm_lex.stringtonumber.s u64 
    callfn         &strncmp   i32 
    push           0          i64 
    jumple         #12381     i64 
#12380: 
    push           mm_lex.stringtonumber.base i64 
    push           16         i64 
    jumpeq         #12382     i64 
    setargs                   1 0
    push           "longint const" u64 
    callproc       &mm_support.lxerror 
    jump           #12383     
#12382: 
    push           mm_lex.stringtonumber.length i64 
    push           32         i64 
    jumpgt         #12384     i64 
    push           mm_lex.stringtonumber.length i64 
    push           32         i64 
    jumpne         #12385     i64 
    setargs                   3 0
    push           32         u64 
    push           "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF" u64 
    push           mm_lex.stringtonumber.s u64 
    callfn         &strncmp   i32 
    push           0          i64 
    jumple         #12385     i64 
#12384: 
    setargs                   1 0
    push           "longint const" u64 
    callproc       &mm_support.lxerror 
    jump           #12386     
#12385: 
    push           mm_lex.stringtonumber.length i64 
    push           32         i64 
    jumpne         #12387     i64 
    setargs                   3 0
    push           32         u64 
    push           "7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF" u64 
    push           mm_lex.stringtonumber.s u64 
    callfn         &strncmp   i32 
    push           0          i64 
    jumple         #12387     i64 
    push           3          i64 
    push           &mm_decls.lx 
    push           1          
    popptroff                 u8 1 0
    jump           #12388     
#12387: 
    push           5          i64 
    push           &mm_decls.lx 
    push           1          
    popptroff                 u8 1 0
#12388: 
    setargs                   3 0
    push           16         i64 
    push           mm_lex.stringtonumber.length i64 
    push           mm_lex.stringtonumber.s u64 
    callfn         &mm_lex.stringtonumber128 u64 
    push           &mm_decls.lx 
    push           8          
    popptroff                 u64 1 0
#12386: 
#12383: 
    jump           #12389     
#12381: 
    push           0          i64 
    pop            mm_lex.stringtonumber.a i64 
    push           mm_lex.stringtonumber.base i64 
    push           10         i64 
    jumpgt         #12390     i64 
#12391: 
    push           mm_lex.stringtonumber.length i64 
    pop            mm_lex.stringtonumber.av_1 i64 
    push           mm_lex.stringtonumber.av_1 i64 
    push           0          i64 
    jumple         #12392     i64 
#12393: 
    push           mm_lex.stringtonumber.a i64 
    push           mm_lex.stringtonumber.base i64 
    mul                       i64 
    push           &mm_lex.stringtonumber.s 
    loadincr                  u64 1
    pushptr                   u8 
    add                       i64 
    push           48         i64 
    sub                       i64 
    pop            mm_lex.stringtonumber.a i64 
#12394: 
    to             #12393     
    opnd           mm_lex.stringtonumber.av_1 
#12392: 
    jump           #12395     
#12390: 
#12396: 
    push           mm_lex.stringtonumber.length i64 
    pop            mm_lex.stringtonumber.av_2 i64 
    push           mm_lex.stringtonumber.av_2 i64 
    push           0          i64 
    jumple         #12397     i64 
#12398: 
    push           &mm_lex.stringtonumber.s 
    loadincr                  u64 1
    pushptr                   u8 
    pop            mm_lex.stringtonumber.c i64 
    push           mm_lex.stringtonumber.c i64 
    push           97         i64 
    jumplt         #12399     i64 
    push           mm_lex.stringtonumber.a i64 
    push           mm_lex.stringtonumber.base i64 
    mul                       i64 
    push           mm_lex.stringtonumber.c i64 
    add                       i64 
    push           97         i64 
    sub                       i64 
    push           10         i64 
    add                       i64 
    pop            mm_lex.stringtonumber.a i64 
    jump           #12400     
#12399: 
    push           mm_lex.stringtonumber.c i64 
    push           65         i64 
    jumplt         #12401     i64 
    push           mm_lex.stringtonumber.a i64 
    push           mm_lex.stringtonumber.base i64 
    mul                       i64 
    push           mm_lex.stringtonumber.c i64 
    add                       i64 
    push           65         i64 
    sub                       i64 
    push           10         i64 
    add                       i64 
    pop            mm_lex.stringtonumber.a i64 
    jump           #12400     
#12401: 
    push           mm_lex.stringtonumber.a i64 
    push           mm_lex.stringtonumber.base i64 
    mul                       i64 
    push           mm_lex.stringtonumber.c i64 
    add                       i64 
    push           48         i64 
    sub                       i64 
    pop            mm_lex.stringtonumber.a i64 
#12400: 
#12402: 
    to             #12398     
    opnd           mm_lex.stringtonumber.av_2 
#12397: 
#12395: 
    push           mm_lex.stringtonumber.a i64 
    push           &mm_decls.lx 
    push           8          
    popptroff                 i64 1 0
    setargs                   1 0
    push           mm_lex.stringtonumber.a u64 
    callfn         &mm_lex.setinttype i64 
    push           &mm_decls.lx 
    push           1          
    popptroff                 u8 1 0
#12389: 
    retproc                   
End


Proc mm_lex.stringtodecimalnumber:
    param          mm_lex.stringtodecimalnumber.s u64 
    param          mm_lex.stringtodecimalnumber.length i64 
    param          mm_lex.stringtodecimalnumber.suffix i64 
    local          mm_lex.stringtodecimalnumber.a i64 
    local          mm_lex.stringtodecimalnumber.b u64 
    local          mm_lex.stringtodecimalnumber.c i64 
    local          mm_lex.stringtodecimalnumber.av_1 i64 
    procentry                 
    jump           #12404     
#12405: 
    push           &mm_lex.stringtodecimalnumber.s 
    incr                      u64 1
    push           &mm_lex.stringtodecimalnumber.length 
    decr                      i64 1
#12404: 
    push           mm_lex.stringtodecimalnumber.length i64 
    push           2          i64 
    jumplt         #12406     i64 
    push           mm_lex.stringtodecimalnumber.s u64 
    pushptr                   u8 
    push           48         u64 
    jumpeq         #12405     u64 
#12406: 
#12407: 
    push           70         i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    push           mm_lex.stringtodecimalnumber.length i64 
    push           20         i64 
    jumpgt         #12408     i64 
    push           mm_lex.stringtodecimalnumber.length i64 
    push           20         i64 
    jumpne         #12409     i64 
    setargs                   3 0
    push           20         u64 
    push           "18446744073709551615" u64 
    push           mm_lex.stringtodecimalnumber.s u64 
    callfn         &strncmp   i32 
    push           0          i64 
    jumpgt         #12408     i64 
#12409: 
    push           mm_lex.stringtodecimalnumber.suffix i64 
    jumpfalse      #12410     i64 
#12408: 
    push           mm_lex.stringtodecimalnumber.length i64 
    push           39         i64 
    jumpgt         #12411     i64 
    push           mm_lex.stringtodecimalnumber.length i64 
    push           39         i64 
    jumpne         #12412     i64 
    setargs                   3 0
    push           39         u64 
    push           "340282366920938463463374607431768211455" u64 
    push           mm_lex.stringtodecimalnumber.s u64 
    callfn         &strncmp   i32 
    push           0          i64 
    jumple         #12412     i64 
#12411: 
    push           mm_lex.stringtodecimalnumber.suffix i64 
    push           87         i64 
    jumpne         #12413     i64 
    setargs                   1 0
    push           "-W overflows 128 bits" u64 
    callproc       &mm_support.lxerror 
#12413: 
!dolongint::
#12414: 
    push           71         i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    setargs                   1 0
    push           mm_lex.stringtodecimalnumber.s u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &mm_decls.lx 
    push           8          
    popptroff                 u64 1 0
    jump           #12415     
#12412: 
    push           mm_lex.stringtodecimalnumber.suffix i64 
    push           76         i64 
    jumpne         #12416     i64 
    jump           #12414     
#12416: 
    push           mm_lex.stringtodecimalnumber.length i64 
    push           39         i64 
    jumpne         #12417     i64 
    setargs                   3 0
    push           39         u64 
    push           "170141183460469231731687303715884105727" u64 
    push           mm_lex.stringtodecimalnumber.s u64 
    callfn         &strncmp   i32 
    push           0          i64 
    jumple         #12417     i64 
    push           3          i64 
    push           &mm_decls.lx 
    push           1          
    popptroff                 u8 1 0
    jump           #12418     
#12417: 
    push           5          i64 
    push           &mm_decls.lx 
    push           1          
    popptroff                 u8 1 0
#12418: 
    setargs                   3 0
    push           10         i64 
    push           mm_lex.stringtodecimalnumber.length i64 
    push           mm_lex.stringtodecimalnumber.s u64 
    callfn         &mm_lex.stringtonumber128 u64 
    push           &mm_decls.lx 
    push           8          
    popptroff                 u64 1 0
#12415: 
    jump           #12419     
#12410: 
    push           0          i64 
    pop            mm_lex.stringtodecimalnumber.a i64 
#12420: 
    push           mm_lex.stringtodecimalnumber.length i64 
    pop            mm_lex.stringtodecimalnumber.av_1 i64 
    push           mm_lex.stringtodecimalnumber.av_1 i64 
    push           0          i64 
    jumple         #12421     i64 
#12422: 
    push           mm_lex.stringtodecimalnumber.a i64 
    push           10         i64 
    mul                       i64 
    push           &mm_lex.stringtodecimalnumber.s 
    loadincr                  u64 1
    pushptr                   u8 
    add                       i64 
    push           48         i64 
    sub                       i64 
    pop            mm_lex.stringtodecimalnumber.a i64 
#12423: 
    to             #12422     
    opnd           mm_lex.stringtodecimalnumber.av_1 
#12421: 
    push           mm_lex.stringtodecimalnumber.a i64 
    push           &mm_decls.lx 
    push           8          
    popptroff                 i64 1 0
    setargs                   1 0
    push           mm_lex.stringtodecimalnumber.a u64 
    callfn         &mm_lex.setinttype i64 
    push           &mm_decls.lx 
    push           1          
    popptroff                 u8 1 0
#12419: 
    retproc                   
End


Proc mm_lex.lexsetup:
    local          mm_lex.lexsetup.i i64 
    local          mm_lex.lexsetup.av_1 i64 
    procentry                 
#12425: 
    push           1          i64 
    pop            mm_lex.lexsetup.i i64 
    push           16         i64 
    pop            mm_lex.lexsetup.av_1 i64 
    push           mm_lex.lexsetup.av_1 i64 
    push           1          i64 
    jumplt         #12426     i64 
#12427: 
    setargs                   1 0
    push           &mm_lex.maxnumlist 
    push           mm_lex.lexsetup.i i64 
    pushptroff                u64 8 -8
    callfn         &strlen    i64 
    push           &mm_lex.maxnumlen 
    push           mm_lex.lexsetup.i i64 
    popptroff                 i64 8 -8
#12428: 
    forup          #12427     i64 1
    opnd           mm_lex.lexsetup.i 
    opnd           mm_lex.lexsetup.av_1 
#12426: 
    setargs                   0 0
    callproc       &mm_lex.inithashtable 
#12429: 
    retproc                   
End


Proc mm_lex.newtokenlist:
    procentry                 
    setargs                   1 0
    push           1048576    i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            mm_lex.tokenlist u64 
    push           65536      i64 
    pop            mm_lex.tokenlistsize i64 
#12431: 
    retproc                   
End


Proc mm_lex.printstrn:
    param          mm_lex.printstrn.s u64 
    param          mm_lex.printstrn.length i64 
    procentry                 
    push           mm_lex.printstrn.length i64 
    jumpfalse      #12433     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   2 0
    push           "v"        u64 
    push           mm_lex.printstrn.length i64 
    callproc       &msysp.m$print_i64 
    setargs                   2 0
    push           ".*"       u64 
    push           mm_lex.printstrn.s u64 
    callproc       &msysp.m$print_str 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#12433: 
#12434: 
    retproc                   
End


Proc mm_lex.scannumber: u64
    param          mm_lex.scannumber.base i64 
    local          mm_lex.scannumber.dest u64 
    local          mm_lex.scannumber.c i64 
    procentry                 
    push           mm_lex.lxsptr u64 
    pop            mm_lex.scannumber.dest u64 
#12436: 
    push           &mm_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          mm_lex.scannumber.c i64 
    switch         #12437     39 108
    opnd           #12438     
#12437: 
    switchlabel    #12439     
    switchlabel    #12438     
    switchlabel    #12438     
    switchlabel    #12438     
    switchlabel    #12438     
    switchlabel    #12438     
    switchlabel    #12438     
    switchlabel    #12438     
    switchlabel    #12438     
    switchlabel    #12440     
    switchlabel    #12440     
    switchlabel    #12440     
    switchlabel    #12440     
    switchlabel    #12440     
    switchlabel    #12440     
    switchlabel    #12440     
    switchlabel    #12440     
    switchlabel    #12440     
    switchlabel    #12440     
    switchlabel    #12438     
    switchlabel    #12438     
    switchlabel    #12438     
    switchlabel    #12438     
    switchlabel    #12438     
    switchlabel    #12438     
    switchlabel    #12438     
    switchlabel    #12441     
    switchlabel    #12441     
    switchlabel    #12441     
    switchlabel    #12441     
    switchlabel    #12442     
    switchlabel    #12441     
    switchlabel    #12438     
    switchlabel    #12438     
    switchlabel    #12438     
    switchlabel    #12438     
    switchlabel    #12438     
    switchlabel    #12443     
    switchlabel    #12438     
    switchlabel    #12438     
    switchlabel    #12438     
    switchlabel    #12438     
    switchlabel    #12438     
    switchlabel    #12438     
    switchlabel    #12438     
    switchlabel    #12438     
    switchlabel    #12438     
    switchlabel    #12438     
    switchlabel    #12438     
    switchlabel    #12438     
    switchlabel    #12438     
    switchlabel    #12438     
    switchlabel    #12438     
    switchlabel    #12438     
    switchlabel    #12438     
    switchlabel    #12438     
    switchlabel    #12439     
    switchlabel    #12439     
    switchlabel    #12441     
    switchlabel    #12441     
    switchlabel    #12441     
    switchlabel    #12441     
    switchlabel    #12442     
    switchlabel    #12441     
    switchlabel    #12438     
    switchlabel    #12438     
    switchlabel    #12438     
    switchlabel    #12438     
    switchlabel    #12438     
    switchlabel    #12443     
    endswitch                 
#12440: 
    push           mm_lex.scannumber.c u64 
    push           &mm_lex.scannumber.dest 
    loadincr                  u64 1
    popptr                    u8 
    push           mm_lex.scannumber.c i64 
    push           48         i64 
    push           mm_lex.scannumber.base i64 
    add                       i64 
    jumplt         #12444     i64 
    setargs                   1 0
    push           "Digit out of range" u64 
    callproc       &mm_support.lxerror 
#12444: 
    jump           #12436     
#12441: 
    push           11         i64 
    push           mm_lex.scannumber.base i64 
    jumpgt         #12445     i64 
    push           mm_lex.scannumber.base i64 
    push           16         i64 
    jumpgt         #12445     i64 
    push           mm_lex.scannumber.c u64 
    push           &mm_lex.scannumber.dest 
    loadincr                  u64 1
    popptr                    u8 
    jump           #12446     
#12445: 
    push           &mm_lex.lxsptr 
    decr                      u64 1
    jump           #12447     
#12446: 
    jump           #12436     
#12442: 
    push           mm_lex.scannumber.base i64 
    push           15         i64 
    jumpge         #12448     i64 
    push           &mm_lex.lxsptr 
    decr                      u64 1
    jump           #12447     
    jump           #12449     
#12448: 
    push           mm_lex.scannumber.c u64 
    push           &mm_lex.scannumber.dest 
    loadincr                  u64 1
    popptr                    u8 
#12449: 
    jump           #12436     
#12439: 
    jump           #12436     
#12443: 
    push           76         i64 
    pop            mm_lex.longsuffix i64 
    jump           #12447     
    jump           #12436     
#12438: 
    push           &mm_lex.lxsptr 
    decr                      u64 1
    jump           #12447     
    jump           #12436     
#12447: 
    push           mm_lex.scannumber.dest u64 
    setret                    u64 
    jump           #12450     
#12450: 
    retfn                     u64 
End


Proc mm_lex.readrawstring:
    local          mm_lex.readrawstring.dest u64 
    local          mm_lex.readrawstring.c i64 
    procentry                 
    push           75         i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    push           &mm_lex.lxsptr 
    incrload                  u64 1
    push           &mm_decls.lx 
    push           8          
    popptroff                 u64 1 0
    push           mm_lex.lxsptr u64 
    pop            mm_lex.readrawstring.dest u64 
#12452: 
    push           &mm_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          mm_lex.readrawstring.c i64 
    switch         #12453     0 34
    opnd           #12454     
#12453: 
    switchlabel    #12455     
    switchlabel    #12454     
    switchlabel    #12454     
    switchlabel    #12454     
    switchlabel    #12454     
    switchlabel    #12454     
    switchlabel    #12454     
    switchlabel    #12454     
    switchlabel    #12454     
    switchlabel    #12454     
    switchlabel    #12455     
    switchlabel    #12454     
    switchlabel    #12454     
    switchlabel    #12455     
    switchlabel    #12454     
    switchlabel    #12454     
    switchlabel    #12454     
    switchlabel    #12454     
    switchlabel    #12454     
    switchlabel    #12454     
    switchlabel    #12454     
    switchlabel    #12454     
    switchlabel    #12454     
    switchlabel    #12454     
    switchlabel    #12454     
    switchlabel    #12454     
    switchlabel    #12454     
    switchlabel    #12454     
    switchlabel    #12454     
    switchlabel    #12454     
    switchlabel    #12454     
    switchlabel    #12454     
    switchlabel    #12454     
    switchlabel    #12454     
    switchlabel    #12456     
    endswitch                 
#12456: 
    push           mm_lex.lxsptr u64 
    pushptr                   u8 
    push           34         u64 
    jumpne         #12457     u64 
    push           34         u64 
    push           &mm_lex.readrawstring.dest 
    loadincr                  u64 1
    popptr                    u8 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    jump           #12458     
#12457: 
    push           0          u64 
    push           mm_lex.lxsptr u64 
    push           1          i64 
    subrefoff                 u64 1 0
    popptr                    u8 
    jump           #12459     
#12458: 
    jump           #12452     
#12455: 
    setargs                   1 0
    push           "Raw string not terminated" u64 
    callproc       &mm_support.lxerror 
    push           &mm_lex.lxsptr 
    decr                      u64 1
    jump           #12459     
    jump           #12452     
#12454: 
    push           mm_lex.readrawstring.c u64 
    push           &mm_lex.readrawstring.dest 
    loadincr                  u64 1
    popptr                    u8 
    jump           #12452     
#12459: 
#12460: 
    retproc                   
End


Proc mm_lex.lookup:
    param          mm_lex.lookup.name u64 
    param          mm_lex.lookup.length i64 
    param          mm_lex.lookup.hashindex0 i64 
    local          mm_lex.lookup.wrapped i64 
    local          mm_lex.lookup.hashindex i64 
    local          mm_lex.lookup.index i64 
    procentry                 
    push           mm_lex.lookup.hashindex0 i64 
    push           32767      i64 
    iand                      i64 
    pop            mm_lex.lookup.hashindex i64 
    push           &mm_lex.hashtable 
    push           mm_lex.lookup.hashindex i64 
    addrefoff                 block:128 128 0
    push           &mm_decls.lx 
    push           8          
    popptroff                 u64 1 0
    push           0          i64 
    pop            mm_lex.lookup.wrapped i64 
#12462: 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           76         
    pushptroff                u8 1 0
    push           0          i64 
    casejumpeq     #12463     i64 0
    push           mm_lex.lookup.length i64 
    casejumpeq     #12464     i64 0
    popstack                  i64 
    jump           #12465     
#12463: 
    jump           #12466     
    jump           #12467     
#12464: 
    setargs                   3 0
    push           mm_lex.lookup.length u64 
    push           mm_lex.lookup.name u64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    pushptr                   u64 
    callfn         &memcmp    i32 
    push           0          i64 
    jumpne         #12468     i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           77         
    pushptroff                u8 1 0
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           79         
    pushptroff                u8 1 0
    push           &mm_decls.lx 
    push           1          
    popptroff                 u8 1 0
    jump           #12469     
#12468: 
    jump           #12467     
#12465: 
#12467: 
    push           &mm_decls.lx 
    push           8          
    addrefoff                 u64 1 0
    incr                      u64 128
    push           &mm_lex.lookup.hashindex 
    incrload                  i64 1
    push           32768      i64 
    jumplt         #12470     i64 
    push           mm_lex.lookup.wrapped i64 
    jumpfalse      #12471     i64 
    setargs                   1 0
    push           "HASHTABLE FULL" u64 
    callproc       &mlibp.abortprogram 
#12471: 
    push           1          i64 
    pop            mm_lex.lookup.wrapped i64 
    push           &mm_lex.hashtable 
    push           0          
    addrefoff                 u8 1 0
    push           &mm_decls.lx 
    push           8          
    popptroff                 u64 1 0
    push           0          i64 
    pop            mm_lex.lookup.hashindex i64 
#12470: 
    jump           #12462     
#12466: 
    setargs                   2 0
    push           mm_lex.lookup.length i64 
    push           mm_lex.lookup.name u64 
    callfn         &mlibp.pcm_copyheapstringn u64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           0          
    popptroff                 u64 1 0
    push           mm_lex.lookup.length i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           76         
    popptroff                 u8 1 0
    push           79         i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           77         
    popptroff                 u8 1 0
    push           79         i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
#12469: 
    retproc                   
End


Proc mm_lex.lookupsys: i64
    param          mm_lex.lookupsys.name u64 
    local          mm_lex.lookupsys.j i64 
    local          mm_lex.lookupsys.wrapped i64 
    local          mm_lex.lookupsys.hashvalue i64 
    procentry                 
    setargs                   1 0
    push           mm_lex.lookupsys.name u64 
    callfn         &mm_lex.gethashvaluez i64 
    push           32767      i64 
    iand                      i64 
    pop            mm_lex.lookupsys.j i64 
    push           &mm_lex.hashtable 
    push           mm_lex.lookupsys.j i64 
    addrefoff                 block:128 128 0
    push           &mm_decls.lx 
    push           8          
    popptroff                 u64 1 0
    push           0          i64 
    pop            mm_lex.lookupsys.wrapped i64 
#12473: 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           76         
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #12474     i64 
    jump           #12475     
    jump           #12476     
#12474: 
    setargs                   2 0
    push           mm_lex.lookupsys.name u64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    pushptr                   u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #12477     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mm_lex.lookupsys.name u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "sys dupl name?" u64 
    callproc       &mm_support.lxerror 
#12477: 
#12476: 
    push           &mm_decls.lx 
    push           8          
    addrefoff                 u64 1 0
    incr                      u64 128
    push           &mm_lex.lookupsys.j 
    incrload                  i64 1
    push           32768      i64 
    jumplt         #12478     i64 
    push           mm_lex.lookupsys.wrapped i64 
    jumpfalse      #12479     i64 
    setargs                   1 0
    push           "SYS:HASHTABLE FULL" u64 
    callproc       &mlibp.abortprogram 
#12479: 
    push           1          i64 
    pop            mm_lex.lookupsys.wrapped i64 
    push           &mm_lex.hashtable 
    push           0          
    addrefoff                 u8 1 0
    push           &mm_decls.lx 
    push           8          
    popptroff                 u64 1 0
    push           0          i64 
    pop            mm_lex.lookupsys.j i64 
#12478: 
    jump           #12473     
#12475: 
    push           mm_lex.lookupsys.name u64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           0          
    popptroff                 u64 1 0
    setargs                   1 0
    push           mm_lex.lookupsys.name u64 
    callfn         &strlen    i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           76         
    popptroff                 u8 1 0
    push           79         i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           77         
    popptroff                 u8 1 0
    push           0          i64 
    setret                    i64 
    jump           #12480     
#12480: 
    retfn                     i64 
End


Proc mm_lex.gethashvaluez: i64
    param          mm_lex.gethashvaluez.s u64 
    local          mm_lex.gethashvaluez.c i64 
    local          mm_lex.gethashvaluez.hsum i64 
    procentry                 
    push           mm_lex.gethashvaluez.s u64 
    pushptr                   u8 
    push           0          i64 
    jumpne         #12482     i64 
    push           0          i64 
    setret                    i64 
    jump           #12483     
#12482: 
    push           &mm_lex.gethashvaluez.s 
    loadincr                  u64 1
    pushptr                   u8 
    pop            mm_lex.gethashvaluez.hsum i64 
#12484: 
    push           &mm_lex.gethashvaluez.s 
    loadincr                  u64 1
    pushptr                   u8 
    pop            mm_lex.gethashvaluez.c i64 
    push           mm_lex.gethashvaluez.c i64 
    push           0          i64 
    jumpne         #12485     i64 
    jump           #12486     
#12485: 
    push           mm_lex.gethashvaluez.hsum i64 
    push           4          i64 
    shl                       i64 
    push           mm_lex.gethashvaluez.hsum i64 
    sub                       i64 
    push           mm_lex.gethashvaluez.c i64 
    add                       i64 
    pop            mm_lex.gethashvaluez.hsum i64 
    jump           #12484     
#12486: 
    push           mm_lex.gethashvaluez.hsum i64 
    push           5          i64 
    shl                       i64 
    push           mm_lex.gethashvaluez.hsum i64 
    sub                       i64 
    setret                    i64 
    jump           #12483     
#12483: 
    retfn                     i64 
End


Proc mm_lex.inithashtable:
    local          mm_lex.inithashtable.i i64 
    local          mm_lex.inithashtable.av_1 i64 
    procentry                 
    setargs                   3 0
    push           4194304    u64 
    push           0          i64 
    push           &mm_lex.hashtable 
    callproc       &memset    
#12488: 
    push           1          i64 
    pop            mm_lex.inithashtable.i i64 
    push           244        i64 
    pop            mm_lex.inithashtable.av_1 i64 
    push           mm_lex.inithashtable.av_1 i64 
    push           1          i64 
    jumplt         #12489     i64 
#12490: 
    setargs                   1 0
    push           &mm_tables.stnames 
    push           mm_lex.inithashtable.i i64 
    pushptroff                u64 8 -8
    callproc       &mm_lex.lookupsys 
    push           &mm_tables.stsymbols 
    push           mm_lex.inithashtable.i i64 
    pushptroff                i64 8 -8
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           77         
    popptroff                 u8 1 0
    push           &mm_tables.stsymbols 
    push           mm_lex.inithashtable.i i64 
    pushptroff                i64 8 -8
    push           78         i64 
    casejumpeq     #12491     i64 0
    popstack                  i64 
    jump           #12492     
#12491: 
    push           &mm_tables.stsubcodes 
    push           mm_lex.inithashtable.i i64 
    pushptroff                i64 8 -8
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           80         
    popptroff                 i32 1 0
    push           78         i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           79         
    popptroff                 u8 1 0
    push           79         i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           77         
    popptroff                 u8 1 0
    jump           #12493     
#12492: 
    push           &mm_tables.stsubcodes 
    push           mm_lex.inithashtable.i i64 
    pushptroff                i64 8 -8
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           79         
    popptroff                 u8 1 0
#12493: 
#12494: 
    forup          #12490     i64 1
    opnd           mm_lex.inithashtable.i 
    opnd           mm_lex.inithashtable.av_1 
#12489: 
#12495: 
    retproc                   
End


Proc mm_lex.printhashtable:
    local          mm_lex.printhashtable.av_1 i64 
    local          mm_lex.printhashtable.i i64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Hashtable:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#12497: 
    push           0          i64 
    pop            mm_lex.printhashtable.i i64 
    push           32767      i64 
    pop            mm_lex.printhashtable.av_1 i64 
    push           mm_lex.printhashtable.av_1 i64 
    push           0          i64 
    jumplt         #12498     i64 
#12499: 
    push           &mm_lex.hashtable 
    push           mm_lex.printhashtable.i i64 
    addrefoff                 block:128 128 0
    push           76         
    pushptroff                u8 1 0
    jumpfalse      #12500     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mm_lex.printhashtable.i i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           &mm_lex.hashtable 
    push           mm_lex.printhashtable.i i64 
    addrefoff                 block:128 128 0
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_tables.symbolnames 
    push           &mm_lex.hashtable 
    push           mm_lex.printhashtable.i i64 
    addrefoff                 block:128 128 0
    push           77         
    pushptroff                u8 1 0
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#12500: 
#12501: 
    forup          #12499     i64 1
    opnd           mm_lex.printhashtable.i 
    opnd           mm_lex.printhashtable.av_1 
#12498: 
#12502: 
    retproc                   
End


Proc mm_lex.addreservedword:
    param          mm_lex.addreservedword.name u64 
    param          mm_lex.addreservedword.symbol i64 
    param          mm_lex.addreservedword.subcode i64 
    param          mm_lex.addreservedword.regsize i64 
    procentry                 
    setargs                   1 0
    push           mm_lex.addreservedword.name u64 
    callproc       &mm_lex.lookupsys 
    push           79         i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           77         
    popptroff                 u8 1 0
    push           mm_lex.addreservedword.symbol i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           79         
    popptroff                 u8 1 0
    push           mm_lex.addreservedword.subcode i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           80         
    popptroff                 i32 1 0
    push           mm_lex.addreservedword.regsize i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           122        
    popptroff                 i16 1 0
#12504: 
    retproc                   
End


Proc mm_lex.dolexdirective: i64
    param          mm_lex.dolexdirective.index i64 
    local          mm_lex.dolexdirective.symptr u64 
    local          mm_lex.dolexdirective.p u64 
    local          mm_lex.dolexdirective.file u64 
    local          mm_lex.dolexdirective.i i64 
    local          mm_lex.dolexdirective.lastsymbol i64 
    local          mm_lex.dolexdirective.cond i64 
    local          mm_lex.dolexdirective.fileno i64 
    local          mm_lex.dolexdirective.length i64 
    local          mm_lex.dolexdirective.str block:256 
    procentry                 
    push           mm_lex.dolexdirective.index i64 
    push           2          i64 
    casejumpeq     #12506     i64 0
    push           3          i64 
    casejumpeq     #12506     i64 0
    push           1          i64 
    casejumpeq     #12507     i64 0
    push           5          i64 
    casejumpeq     #12508     i64 0
    push           6          i64 
    casejumpeq     #12509     i64 0
    popstack                  i64 
    jump           #12510     
#12506: 
    setargs                   0 0
    callproc       &mm_lex.lexreadtoken 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           75         i64 
    jumpeq         #12511     i64 
    setargs                   1 0
    push           "strincl: string expected" u64 
    callproc       &mm_support.lxerror 
    jump           #12512     
#12511: 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    pop            mm_lex.dolexdirective.file u64 
#12512: 
    setargs                   1 0
    push           mm_lex.dolexdirective.file u64 
    callfn         &mm_support.getsupportfile i64 
    pop            mm_lex.dolexdirective.fileno i64 
    push           &mm_decls.sourcefiletext 
    push           mm_lex.dolexdirective.fileno i64 
    pushptroff                u64 8 0
    push           &mm_decls.lx 
    push           8          
    popptroff                 u64 1 0
    push           &mm_decls.sourcefilesizes 
    push           mm_lex.dolexdirective.fileno i64 
    pushptroff                i64 8 0
    store          mm_lex.dolexdirective.length i64 
    pop            mm_lex.astringlength i64 
    startmult                 
    push           mm_lex.dolexdirective.index i64 
    push           2          i64 
    jumpne         #12513     i64 
    push           75         i64 
    resetmult                 
    jump           #12514     
#12513: 
    push           76         i64 
    endmult                   
#12514: 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    push           65         i64 
    push           &mm_decls.lx 
    push           1          
    popptroff                 u8 1 0
    push           0          u64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           mm_lex.dolexdirective.length i64 
    popptroff                 u8 1 0
    push           1          i64 
    setret                    i64 
    jump           #12515     
    jump           #12516     
#12507: 
    setargs                   0 0
    callproc       &mm_lex.lexreadtoken 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           75         i64 
    jumpeq         #12517     i64 
    setargs                   1 0
    push           "include: string expected" u64 
    callproc       &mm_support.lxerror 
#12517: 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    pop            mm_lex.dolexdirective.file u64 
    setargs                   1 0
    push           mm_lex.dolexdirective.file u64 
    callproc       &mlibp.convlcstring 
    setargs                   2 0
    push           ".m"       u64 
    push           mm_lex.dolexdirective.file u64 
    callfn         &mlibp.addext u64 
    pop            mm_lex.dolexdirective.file u64 
    setargs                   2 0
    push           0          i64 
    push           mm_lex.dolexdirective.file u64 
    callproc       &mm_lex.stacksourcefile 
    push           0          i64 
    setret                    i64 
    jump           #12515     
    jump           #12516     
#12508: 
    setargs                   1 0
    push           "DEFINE UNIT NOT DONE" u64 
    callproc       &mm_support.lxerror 
    jump           #12516     
#12509: 
#12518: 
    setargs                   0 0
    callproc       &mm_lex.lexreadtoken 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           75         i64 
    casejumpeq     #12519     i64 0
    push           79         i64 
    casejumpeq     #12520     i64 0
    popstack                  i64 
    jump           #12521     
#12519: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "ADD/S"    u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    callproc       &mm_lib.addcclib 
    jump           #12522     
#12520: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "ADD/N"    u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    pushptr                   u64 
    callproc       &mm_lib.addcclib 
    jump           #12522     
#12521: 
    setargs                   1 0
    push           "cclib/not str/name" u64 
    callproc       &mm_support.lxerror 
#12522: 
    setargs                   0 0
    callproc       &mm_lex.lexreadtoken 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpeq         #12523     i64 
    jump           #12524     
#12523: 
    jump           #12518     
#12524: 
    push           0          i64 
    setret                    i64 
    jump           #12515     
    jump           #12516     
#12510: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &mm_tables.sourcedirnames 
    push           mm_lex.dolexdirective.index i64 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Directive not implemented" u64 
    callproc       &mm_support.lxerror 
#12516: 
    push           0          i64 
    setret                    i64 
    jump           #12515     
#12515: 
    retfn                     i64 
End


Proc mm_lex.lexreadline:
    procentry                 
#12526: 
    push           mm_lex.lxsptr u64 
    pushptr                   u8 
    switch         #12527     0 13
    opnd           #12528     
#12527: 
    switchlabel    #12529     
    switchlabel    #12528     
    switchlabel    #12528     
    switchlabel    #12528     
    switchlabel    #12528     
    switchlabel    #12528     
    switchlabel    #12528     
    switchlabel    #12528     
    switchlabel    #12528     
    switchlabel    #12528     
    switchlabel    #12530     
    switchlabel    #12528     
    switchlabel    #12528     
    switchlabel    #12530     
    endswitch                 
#12530: 
    jump           #12531     
    jump           #12526     
#12529: 
    push           &mm_lex.lxsptr 
    decr                      u64 1
    jump           #12531     
    jump           #12526     
#12528: 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    jump           #12526     
#12532: 
#12531: 
    retproc                   
End


Proc mm_lex.startlex:
    param          mm_lex.startlex.caption u64 
    param          mm_lex.startlex.fileno i64 
    procentry                 
    push           &mm_decls.sourcefiletext 
    push           mm_lex.startlex.fileno i64 
    pushptroff                u64 8 0
    pop            mm_lex.lxsptr u64 
    push           mm_lex.startlex.fileno i64 
    pop            mm_lex.lxfileno i64 
    push           1          i64 
    push           &mm_decls.lx 
    push           4          
    popptroff                 u32 1 0
    push           6          i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    push           0          i64 
    push           &mm_decls.lx 
    push           1          
    popptroff                 u8 1 0
#12534: 
    retproc                   
End


Proc mm_lex.addnamestr: u64
    param          mm_lex.addnamestr.name u64 
    local          mm_lex.addnamestr.oldlx block:16 
    local          mm_lex.addnamestr.symptr u64 
    procentry                 
    push           mm_decls.lx block:16 
    pop            mm_lex.addnamestr.oldlx block:16 
    setargs                   3 0
    setargs                   1 0
    push           mm_lex.addnamestr.name u64 
    callfn         &mm_lex.gethashvaluez i64 
    setargs                   1 0
    push           mm_lex.addnamestr.name u64 
    callfn         &strlen    i64 
    push           mm_lex.addnamestr.name u64 
    callproc       &mm_lex.lookup 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    pop            mm_lex.addnamestr.symptr u64 
    push           mm_lex.addnamestr.oldlx block:16 
    pop            mm_decls.lx block:16 
    push           mm_lex.addnamestr.symptr u64 
    setret                    u64 
    jump           #12536     
#12536: 
    retfn                     u64 
End


Proc mm_lex.ps:
    param          mm_lex.ps.caption u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mm_lex.ps.caption u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           ": "       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           &mm_decls.lx 
    callproc       &mm_lex.printsymbol 
#12538: 
    retproc                   
End


Proc mm_lex.stacksourcefile:
    param          mm_lex.stacksourcefile.file u64 
    param          mm_lex.stacksourcefile.ismainmodule i64 
    local          mm_lex.stacksourcefile.fileno i64 
    local          mm_lex.stacksourcefile.basefile u64 
    local          mm_lex.stacksourcefile.sptr u64 
    local          mm_lex.stacksourcefile.path u64 
    procentry                 
    setargs                   1 0
    push           mm_lex.stacksourcefile.file u64 
    callfn         &mm_support.getsupportfile i64 
    pop            mm_lex.stacksourcefile.fileno i64 
    setargs                   3 0
    push           1          i64 
    push           mm_lex.stacksourcefile.fileno i64 
    push           &mm_decls.sourcefiletext 
    push           mm_lex.stacksourcefile.fileno i64 
    pushptroff                u64 8 0
    callproc       &mm_lex.stacksource 
#12540: 
    retproc                   
End


Proc mm_lex.stacksource:
    param          mm_lex.stacksource.sptr u64 
    param          mm_lex.stacksource.fileno i64 
    param          mm_lex.stacksource.isfile i64 
    procentry                 
    push           mm_lex.sourcelevel i64 
    push           20         i64 
    jumplt         #12542     i64 
    setargs                   1 0
    push           "Include file/macro overflow" u64 
    callproc       &mm_support.lxerror 
#12542: 
    push           &mm_lex.sourcelevel 
    incr                      i64 1
    push           mm_lex.lxstart u64 
    push           &mm_lex.lxstart_stack 
    push           mm_lex.sourcelevel i64 
    popptroff                 u64 8 -8
    push           mm_lex.lxsptr u64 
    push           &mm_lex.lxsptr_stack 
    push           mm_lex.sourcelevel i64 
    popptroff                 u64 8 -8
    push           mm_lex.lxfileno i64 
    push           &mm_lex.lxfileno_stack 
    push           mm_lex.sourcelevel i64 
    popptroff                 i64 8 -8
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    push           &mm_lex.lxlineno_stack 
    push           mm_lex.sourcelevel i64 
    popptroff                 i64 8 -8
    push           mm_lex.stacksource.isfile i64 
    push           &mm_lex.isfile_stack 
    push           mm_lex.sourcelevel i64 
    popptroff                 u8 1 -1
    push           mm_lex.stacksource.sptr u64 
    store          mm_lex.lxsptr u64 
    pop            mm_lex.lxstart u64 
    push           1          i64 
    push           &mm_decls.lx 
    push           4          
    popptroff                 u32 1 0
    push           mm_lex.stacksource.fileno i64 
    pop            mm_lex.lxfileno i64 
#12543: 
    retproc                   
End


Proc mm_lex.unstacksource:
    procentry                 
    push           mm_lex.sourcelevel i64 
    push           0          i64 
    jumple         #12545     i64 
    push           &mm_lex.lxstart_stack 
    push           mm_lex.sourcelevel i64 
    pushptroff                u64 8 -8
    pop            mm_lex.lxstart u64 
    push           &mm_lex.lxsptr_stack 
    push           mm_lex.sourcelevel i64 
    pushptroff                u64 8 -8
    pop            mm_lex.lxsptr u64 
    push           &mm_lex.lxlineno_stack 
    push           mm_lex.sourcelevel i64 
    pushptroff                i64 8 -8
    push           &mm_decls.lx 
    push           4          
    popptroff                 u32 1 0
    push           &mm_lex.lxfileno_stack 
    push           mm_lex.sourcelevel i64 
    pushptroff                i64 8 -8
    pop            mm_lex.lxfileno i64 
    push           &mm_lex.sourcelevel 
    decr                      i64 1
#12545: 
#12546: 
    retproc                   
End


Proc mm_lex.readarraystring:
    param          mm_lex.readarraystring.prefix i64 
    procentry                 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    setargs                   1 0
    push           34         i64 
    callproc       &mm_lex.lxreadstring 
    push           76         i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    setargs                   1 0
    push           mm_lex.readarraystring.prefix i64 
    callfn         &toupper   i32 
    push           &mm_decls.lx 
    push           1          
    popptroff                 u8 1 0
    setargs                   1 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    callfn         &strlen    i64 
    pop            mm_lex.astringlength i64 
#12548: 
    retproc                   
End


Proc mm_lex.stringtonumber128: u64
    param          mm_lex.stringtonumber128.s u64 
    param          mm_lex.stringtonumber128.length i64 
    param          mm_lex.stringtonumber128.base i64 
    local          mm_lex.stringtonumber128.aa i128 
    local          mm_lex.stringtonumber128.c i64 
    local          mm_lex.stringtonumber128.d i64 
    local          mm_lex.stringtonumber128.av_1 i64 
    local          mm_lex.stringtonumber128.p u64 
    procentry                 
    push           0          i64 
    widenw                    i128 i64 
    pop            mm_lex.stringtonumber128.aa i128 
#12550: 
    push           mm_lex.stringtonumber128.length i64 
    pop            mm_lex.stringtonumber128.av_1 i64 
    push           mm_lex.stringtonumber128.av_1 i64 
    push           0          i64 
    jumple         #12551     i64 
#12552: 
    push           mm_lex.stringtonumber128.aa i128 
    push           mm_lex.stringtonumber128.base i64 
    widenw                    i128 i64 
    mul                       i128 
    pop            mm_lex.stringtonumber128.aa i128 
    push           &mm_lex.stringtonumber128.s 
    loadincr                  u64 1
    pushptr                   u8 
    pop            mm_lex.stringtonumber128.c i64 
    push           mm_lex.stringtonumber128.c i64 
    push           97         i64 
    jumplt         #12553     i64 
    push           mm_lex.stringtonumber128.c i64 
    push           97         i64 
    sub                       i64 
    push           10         i64 
    add                       i64 
    pop            mm_lex.stringtonumber128.d i64 
    jump           #12554     
#12553: 
    push           mm_lex.stringtonumber128.c i64 
    push           65         i64 
    jumplt         #12555     i64 
    push           mm_lex.stringtonumber128.c i64 
    push           65         i64 
    sub                       i64 
    push           10         i64 
    add                       i64 
    pop            mm_lex.stringtonumber128.d i64 
    jump           #12554     
#12555: 
    push           mm_lex.stringtonumber128.c i64 
    push           48         i64 
    sub                       i64 
    pop            mm_lex.stringtonumber128.d i64 
#12554: 
    push           mm_lex.stringtonumber128.aa i128 
    push           mm_lex.stringtonumber128.d i64 
    widenw                    i128 i64 
    add                       i128 
    pop            mm_lex.stringtonumber128.aa i128 
#12556: 
    to             #12552     
    opnd           mm_lex.stringtonumber128.av_1 
#12551: 
    setargs                   1 0
    push           16         i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            mm_lex.stringtonumber128.p u64 
    push           mm_lex.stringtonumber128.aa i128 
    push           mm_lex.stringtonumber128.p u64 
    popptr                    i128 
    push           mm_lex.stringtonumber128.p u64 
    setret                    u64 
    jump           #12557     
#12557: 
    retfn                     u64 
End


Proc mm_lex.setinttype: i64
    param          mm_lex.setinttype.a u64 
    procentry                 
    startmult                 
    push           mm_lex.setinttype.a u64 
    push           9223372036854775807 u64 
    jumpgt         #12559     u64 
    push           4          i64 
    resetmult                 
    jump           #12560     
#12559: 
    push           2          i64 
    endmult                   
#12560: 
    setret                    i64 
    jump           #12561     
#12561: 
    retfn                     i64 
End


Proc mm_lex.readrawxname:
    local          mm_lex.readrawxname.c i64 
    local          mm_lex.readrawxname.hsum i64 
    local          mm_lex.readrawxname.length i64 
    procentry                 
    push           mm_lex.lxsptr u64 
    push           &mm_decls.lx 
    push           8          
    popptroff                 u64 1 0
    push           0          i64 
    pop            mm_lex.readrawxname.hsum i64 
#12563: 
    push           &mm_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          mm_lex.readrawxname.c i64 
    switch         #12564     36 255
    opnd           #12565     
#12564: 
    switchlabel    #12566     
    switchlabel    #12565     
    switchlabel    #12565     
    switchlabel    #12565     
    switchlabel    #12565     
    switchlabel    #12565     
    switchlabel    #12565     
    switchlabel    #12565     
    switchlabel    #12565     
    switchlabel    #12565     
    switchlabel    #12565     
    switchlabel    #12565     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12565     
    switchlabel    #12565     
    switchlabel    #12565     
    switchlabel    #12565     
    switchlabel    #12565     
    switchlabel    #12565     
    switchlabel    #12565     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12565     
    switchlabel    #12565     
    switchlabel    #12565     
    switchlabel    #12565     
    switchlabel    #12566     
    switchlabel    #12565     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12565     
    switchlabel    #12565     
    switchlabel    #12565     
    switchlabel    #12565     
    switchlabel    #12565     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    switchlabel    #12566     
    endswitch                 
#12566: 
    push           mm_lex.readrawxname.hsum i64 
    push           4          i64 
    shl                       i64 
    push           mm_lex.readrawxname.hsum i64 
    sub                       i64 
    push           mm_lex.readrawxname.c i64 
    add                       i64 
    pop            mm_lex.readrawxname.hsum i64 
    jump           #12563     
#12565: 
    push           &mm_lex.lxsptr 
    decr                      u64 1
    jump           #12567     
    jump           #12563     
#12567: 
    push           mm_lex.lxsptr u64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    subref                    i64 1
    pop            mm_lex.readrawxname.length i64 
    push           mm_lex.readrawxname.length i64 
    push           0          i64 
    jumpne         #12568     i64 
    setargs                   1 0
    push           "Bad ` name" u64 
    callproc       &mm_support.lxerror 
#12568: 
    setargs                   3 0
    push           mm_lex.readrawxname.hsum i64 
    push           5          i64 
    shl                       i64 
    push           mm_lex.readrawxname.hsum i64 
    sub                       i64 
    push           mm_lex.readrawxname.length i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    callproc       &mm_lex.lookup 
    push           67         i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    jump           #12569     
#12569: 
    retproc                   
End


Proc mm_lex.lxerror_s:
    param          mm_lex.lxerror_s.mess u64 
    param          mm_lex.lxerror_s.s u64 
    procentry                 
    setargs                   1 0
    push           mm_lex.lxerror_s.mess u64 
    callproc       &mm_support.lxerror 
#12571: 
    retproc                   
End


Proc mm_lex.lxreadstring:
    param          mm_lex.lxreadstring.termchar i64 
    local          mm_lex.lxreadstring.s u64 
    local          mm_lex.lxreadstring.t u64 
    local          mm_lex.lxreadstring.c i64 
    local          mm_lex.lxreadstring.d i64 
    local          mm_lex.lxreadstring.length i64 
    local          mm_lex.lxreadstring.hasescape i64 
    local          mm_lex.lxreadstring.str block:8 
    local          mm_lex.lxreadstring.av_1 i64 
    procentry                 
    push           mm_lex.lxreadstring.termchar i64 
    push           34         i64 
    jumpne         #12573     i64 
    push           75         i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    jump           #12574     
#12573: 
    push           73         i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    push           4          i64 
    push           &mm_decls.lx 
    push           1          
    popptroff                 u8 1 0
#12574: 
    push           mm_lex.lxsptr u64 
    pop            mm_lex.lxreadstring.s u64 
    push           0          i64 
    pop            mm_lex.lxreadstring.length i64 
    push           0          i64 
    pop            mm_lex.lxreadstring.hasescape i64 
#12575: 
    push           &mm_lex.lxsptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          mm_lex.lxreadstring.c i64 
    switch         #12576     0 92
    opnd           #12577     
#12576: 
    switchlabel    #12578     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12578     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12578     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12579     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12579     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12577     
    switchlabel    #12580     
    endswitch                 
#12580: 
    push           mm_lex.lxsptr u64 
    pushptr                   u8 
    pop            mm_lex.lxreadstring.c i64 
    push           mm_lex.lxreadstring.c i64 
    push           65         u64 
    push           90         u64 
    jumpnotinrange #12581     i64 
    push           &mm_lex.lxreadstring.c 
    push           32         i64 
    addto                     i64 
#12581: 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    push           1          i64 
    pop            mm_lex.lxreadstring.hasescape i64 
    push           mm_lex.lxreadstring.c i64 
    switch         #12582     34 122
    opnd           #12583     
#12582: 
    switchlabel    #12584     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12584     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12584     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12584     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12584     
    switchlabel    #12584     
    switchlabel    #12584     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12584     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12584     
    switchlabel    #12583     
    switchlabel    #12584     
    switchlabel    #12583     
    switchlabel    #12583     
    switchlabel    #12584     
    switchlabel    #12584     
    switchlabel    #12584     
    switchlabel    #12584     
    switchlabel    #12583     
    switchlabel    #12584     
    switchlabel    #12585     
    switchlabel    #12586     
    switchlabel    #12584     
    switchlabel    #12584     
    endswitch                 
#12584: 
    push           &mm_lex.lxreadstring.length 
    incr                      i64 1
    jump           #12587     
#12585: 
    push           &mm_lex.lxreadstring.length 
    incr                      i64 1
    jump           #12587     
#12586: 
    push           &mm_lex.lxsptr 
    push           2          i64 
    addrefoffto               u64 1 0
    push           &mm_lex.lxreadstring.length 
    incr                      i64 1
    jump           #12587     
#12583: 
    setargs                   1 0
    push           "Bad str escape" u64 
    callproc       &mm_support.lxerror 
#12587: 
    jump           #12575     
#12579: 
    push           mm_lex.lxreadstring.c i64 
    push           mm_lex.lxreadstring.termchar i64 
    jumpne         #12588     i64 
    push           mm_lex.lxsptr u64 
    pushptr                   u8 
    push           mm_lex.lxreadstring.c i64 
    jumpne         #12589     i64 
    push           1          i64 
    pop            mm_lex.lxreadstring.hasescape i64 
    push           &mm_lex.lxsptr 
    incr                      u64 1
    push           &mm_lex.lxreadstring.length 
    incr                      i64 1
    jump           #12590     
#12589: 
    jump           #12591     
#12590: 
    jump           #12592     
#12588: 
    push           &mm_lex.lxreadstring.length 
    incr                      i64 1
#12592: 
    jump           #12575     
#12578: 
    setargs                   1 0
    push           "String not terminated" u64 
    callproc       &mm_support.lxerror 
    jump           #12575     
#12577: 
    push           &mm_lex.lxreadstring.length 
    incr                      i64 1
    jump           #12575     
#12591: 
    push           mm_lex.lxreadstring.length i64 
    push           0          i64 
    jumpne         #12593     i64 
    push           ""         u64 
    push           &mm_decls.lx 
    push           8          
    popptroff                 u64 1 0
    jump           #12594     
    jump           #12595     
#12593: 
    push           mm_lex.lxreadstring.hasescape i64 
    jumptrue       #12596     i64 
    setargs                   2 0
    push           mm_lex.lxreadstring.length i64 
    push           mm_lex.lxreadstring.s u64 
    callfn         &mlibp.pcm_copyheapstringn u64 
    push           &mm_decls.lx 
    push           8          
    popptroff                 u64 1 0
    jump           #12594     
#12596: 
#12595: 
    setargs                   1 0
    push           mm_lex.lxreadstring.length i64 
    push           1          i64 
    add                       i64 
    callfn         &mlibp.pcm_alloc u64 
    store          mm_lex.lxreadstring.t u64 
    push           &mm_decls.lx 
    push           8          
    popptroff                 u64 1 0
#12597: 
    push           &mm_lex.lxreadstring.s 
    loadincr                  u64 1
    pushptr                   u8 
    store          mm_lex.lxreadstring.c i64 
    switch         #12598     0 92
    opnd           #12599     
#12598: 
    switchlabel    #12600     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12600     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12600     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12601     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12601     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12599     
    switchlabel    #12602     
    endswitch                 
#12602: 
    push           mm_lex.lxreadstring.s u64 
    pushptr                   u8 
    pop            mm_lex.lxreadstring.c i64 
    push           mm_lex.lxreadstring.c i64 
    push           65         i64 
    jumplt         #12603     i64 
    push           mm_lex.lxreadstring.c i64 
    push           90         i64 
    jumpgt         #12603     i64 
    push           &mm_lex.lxreadstring.c 
    push           32         i64 
    addto                     i64 
#12603: 
    push           &mm_lex.lxreadstring.s 
    incr                      u64 1
    push           mm_lex.lxreadstring.c i64 
    switch         #12604     34 122
    opnd           #12605     
#12604: 
    switchlabel    #12606     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12607     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12608     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12606     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12609     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12610     
    switchlabel    #12611     
    switchlabel    #12612     
    switchlabel    #12605     
    switchlabel    #12613     
    switchlabel    #12614     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12615     
    switchlabel    #12605     
    switchlabel    #12615     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12605     
    switchlabel    #12612     
    switchlabel    #12616     
    switchlabel    #12617     
    switchlabel    #12605     
    switchlabel    #12618     
    switchlabel    #12619     
    switchlabel    #12620     
    switchlabel    #12621     
    switchlabel    #12608     
    endswitch                 
#12610: 
    push           7          i64 
    pop            mm_lex.lxreadstring.c i64 
    jump           #12622     
#12611: 
    push           8          i64 
    pop            mm_lex.lxreadstring.c i64 
    jump           #12622     
#12612: 
    push           13         i64 
    pop            mm_lex.lxreadstring.c i64 
    jump           #12622     
#12613: 
    push           26         i64 
    pop            mm_lex.lxreadstring.c i64 
    jump           #12622     
#12614: 
    push           12         i64 
    pop            mm_lex.lxreadstring.c i64 
    jump           #12622     
#12615: 
    push           10         i64 
    pop            mm_lex.lxreadstring.c i64 
    jump           #12622     
#12616: 
    push           27         i64 
    pop            mm_lex.lxreadstring.c i64 
    jump           #12622     
#12617: 
    push           9          i64 
    pop            mm_lex.lxreadstring.c i64 
    jump           #12622     
#12618: 
    push           11         i64 
    pop            mm_lex.lxreadstring.c i64 
    jump           #12622     
#12619: 
    push           13         u64 
    push           &mm_lex.lxreadstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           10         i64 
    pop            mm_lex.lxreadstring.c i64 
    jump           #12622     
#12620: 
    push           0          i64 
    pop            mm_lex.lxreadstring.c i64 
#12623: 
    push           2          i64 
    pop            mm_lex.lxreadstring.av_1 i64 
#12624: 
    push           &mm_lex.lxreadstring.s 
    loadincr                  u64 1
    pushptr                   u8 
    store          mm_lex.lxreadstring.d i64 
    push           65         i64 
    casejumpeq     #12625     i64 0
    push           66         i64 
    casejumpeq     #12625     i64 0
    push           67         i64 
    casejumpeq     #12625     i64 0
    push           68         i64 
    casejumpeq     #12625     i64 0
    push           69         i64 
    casejumpeq     #12625     i64 0
    push           70         i64 
    casejumpeq     #12625     i64 0
    push           97         i64 
    casejumpeq     #12626     i64 0
    push           98         i64 
    casejumpeq     #12626     i64 0
    push           99         i64 
    casejumpeq     #12626     i64 0
    push           100        i64 
    casejumpeq     #12626     i64 0
    push           101        i64 
    casejumpeq     #12626     i64 0
    push           102        i64 
    casejumpeq     #12626     i64 0
    push           48         i64 
    casejumpeq     #12627     i64 0
    push           49         i64 
    casejumpeq     #12627     i64 0
    push           50         i64 
    casejumpeq     #12627     i64 0
    push           51         i64 
    casejumpeq     #12627     i64 0
    push           52         i64 
    casejumpeq     #12627     i64 0
    push           53         i64 
    casejumpeq     #12627     i64 0
    push           54         i64 
    casejumpeq     #12627     i64 0
    push           55         i64 
    casejumpeq     #12627     i64 0
    push           56         i64 
    casejumpeq     #12627     i64 0
    push           57         i64 
    casejumpeq     #12627     i64 0
    popstack                  i64 
    jump           #12628     
#12625: 
    push           mm_lex.lxreadstring.c i64 
    push           16         i64 
    mul                       i64 
    push           mm_lex.lxreadstring.d i64 
    add                       i64 
    push           65         i64 
    sub                       i64 
    push           10         i64 
    add                       i64 
    pop            mm_lex.lxreadstring.c i64 
    jump           #12629     
#12626: 
    push           mm_lex.lxreadstring.c i64 
    push           16         i64 
    mul                       i64 
    push           mm_lex.lxreadstring.d i64 
    add                       i64 
    push           97         i64 
    sub                       i64 
    push           10         i64 
    add                       i64 
    pop            mm_lex.lxreadstring.c i64 
    jump           #12629     
#12627: 
    push           mm_lex.lxreadstring.c i64 
    push           16         i64 
    mul                       i64 
    push           mm_lex.lxreadstring.d i64 
    add                       i64 
    push           48         i64 
    sub                       i64 
    pop            mm_lex.lxreadstring.c i64 
    jump           #12629     
#12628: 
    setargs                   1 0
    push           "Bad \\x code" u64 
    callproc       &mm_support.lxerror 
#12629: 
#12630: 
    to             #12624     
    opnd           mm_lex.lxreadstring.av_1 
#12631: 
    jump           #12622     
#12621: 
    push           16         i64 
    pop            mm_lex.lxreadstring.c i64 
    jump           #12622     
#12608: 
    push           0          i64 
    pop            mm_lex.lxreadstring.c i64 
    jump           #12622     
#12606: 
    push           34         i64 
    pop            mm_lex.lxreadstring.c i64 
    jump           #12622     
#12609: 
    push           92         i64 
    pop            mm_lex.lxreadstring.c i64 
    jump           #12622     
#12607: 
    push           39         i64 
    pop            mm_lex.lxreadstring.c i64 
    jump           #12622     
#12605: 
    push           mm_lex.lxreadstring.c u64 
    push           &mm_lex.lxreadstring.str 
    push           1          i64 
    popptroff                 u8 1 -1
    push           0          u64 
    push           &mm_lex.lxreadstring.str 
    push           2          i64 
    popptroff                 u8 1 -1
    setargs                   2 0
    push           &mm_lex.lxreadstring.str 
    push           "Unknown string escape: \\%s" u64 
    callproc       &mm_lex.lxerror_s 
#12622: 
    jump           #12632     
#12601: 
    push           mm_lex.lxreadstring.c i64 
    push           mm_lex.lxreadstring.termchar i64 
    jumpne         #12633     i64 
    push           mm_lex.lxreadstring.s u64 
    pushptr                   u8 
    push           mm_lex.lxreadstring.c i64 
    jumpne         #12634     i64 
    push           &mm_lex.lxreadstring.s 
    incr                      u64 1
    jump           #12635     
#12634: 
    jump           #12636     
#12635: 
#12633: 
    jump           #12632     
#12600: 
    setargs                   1 0
    push           "String not terminated" u64 
    callproc       &mm_support.lxerror 
    jump           #12632     
#12599: 
#12632: 
    push           mm_lex.lxreadstring.c u64 
    push           &mm_lex.lxreadstring.t 
    loadincr                  u64 1
    popptr                    u8 
    jump           #12597     
#12636: 
    push           0          u64 
    push           mm_lex.lxreadstring.t u64 
    popptr                    u8 
#12594: 
    retproc                   
End


Proc mm_lex.do_name:
    param          mm_lex.do_name.s u64 
    param          mm_lex.do_name.length i64 
    param          mm_lex.do_name.hashindex i64 
    procentry                 
    setargs                   3 0
    push           mm_lex.do_name.hashindex i64 
    push           mm_lex.do_name.length i64 
    push           mm_lex.do_name.s u64 
    callproc       &mm_lex.lookup 
#12638: 
    retproc                   
End


Proc mm_lex.extendtokenlist:
    param          mm_lex.extendtokenlist.ntokens i64 
    local          mm_lex.extendtokenlist.oldtokenlist u64 
    local          mm_lex.extendtokenlist.oldtokenlistsize i64 
    procentry                 
    push           mm_lex.tokenlistsize i64 
    pop            mm_lex.extendtokenlist.oldtokenlistsize i64 
    push           mm_lex.tokenlist u64 
    pop            mm_lex.extendtokenlist.oldtokenlist u64 
    push           &mm_lex.tokenlistsize 
    push           2          i64 
    multo                     i64 
    setargs                   1 0
    push           16         i64 
    push           mm_lex.tokenlistsize i64 
    mul                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            mm_lex.tokenlist u64 
    setargs                   3 0
    push           mm_lex.extendtokenlist.ntokens i64 
    push           16         i64 
    mul                       u64 
    push           mm_lex.extendtokenlist.oldtokenlist u64 
    push           mm_lex.tokenlist u64 
    callproc       &memcpy    
    setargs                   2 0
    push           16         i64 
    push           mm_lex.extendtokenlist.oldtokenlistsize i64 
    mul                       i64 
    push           mm_lex.extendtokenlist.oldtokenlist u64 
    callproc       &mlibp.pcm_free 
#12640: 
    retproc                   
End


Proc mm_lex.starttkscan:
    param          mm_lex.starttkscan.moduleno i64 
    procentry                 
    push           &mm_decls.moduletable 
    push           mm_lex.starttkscan.moduleno i64 
    addrefoff                 block:456 456 0
    push           448        
    pushptroff                u64 1 0
    pop            mm_lex.nexttoken u64 
#12642: 
    retproc                   
End


Proc mm_lex.readtokens_a: u64
    param          mm_lex.readtokens_a.fileno i64 
    param          mm_lex.readtokens_a.ntokens u64 
    local          mm_lex.readtokens_a.lastlx u64 
    local          mm_lex.readtokens_a.p u64 
    local          mm_lex.readtokens_a.lena i64 
    local          mm_lex.readtokens_a.lenb i64 
    local          mm_lex.readtokens_a.lastsymbol i64 
    procentry                 
    setargs                   0 0
    callproc       &mm_lex.newtokenlist 
    push           0          i64 
    push           mm_lex.readtokens_a.ntokens u64 
    popptr                    i64 
    push           0          i64 
    pop            mm_lex.readtokens_a.lastsymbol i64 
    setargs                   2 0
    push           mm_lex.readtokens_a.fileno i64 
    push           ""         u64 
    callproc       &mm_lex.startlex 
#12644: 
    setargs                   0 0
    callproc       &mm_lex.lexreadtoken 
    push           &mm_decls.lx 
    pushptr                   u8 
    switch         #12645     46 175
    opnd           #12646     
#12645: 
    switchlabel    #12647     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12648     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12649     
    switchlabel    #12646     
    switchlabel    #12650     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12651     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12652     
    switchlabel    #12653     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12654     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12655     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12655     
    switchlabel    #12655     
    switchlabel    #12655     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12655     
    switchlabel    #12655     
    switchlabel    #12646     
    switchlabel    #12655     
    switchlabel    #12655     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12655     
    switchlabel    #12655     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12655     
    switchlabel    #12655     
    switchlabel    #12646     
    switchlabel    #12655     
    switchlabel    #12655     
    switchlabel    #12655     
    switchlabel    #12646     
    switchlabel    #12655     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12655     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12655     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12655     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12655     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12646     
    switchlabel    #12655     
    endswitch                 
#12655: 
    push           mm_lex.readtokens_a.lastsymbol i64 
    push           104        i64 
    jumpne         #12656     i64 
    push           mm_lex.readtokens_a.lastlx u64 
    push           1          
    pushptroff                u8 1 0
    jumpfalse      #12657     i64 
    setargs                   1 0
    push           "end if if?" u64 
    callproc       &mm_support.lxerror 
#12657: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           mm_lex.readtokens_a.lastlx u64 
    push           1          
    popptroff                 u8 1 0
    jump           #12658     
#12656: 
    jump           #12659     
#12649: 
    push           mm_lex.readtokens_a.lastsymbol i64 
    push           5          i64 
    setjumpeq      #12660     i64 
    push           14         i64 
    setjumpeq      #12660     i64 
    push           12         i64 
    setjumpne      #12661     i64 
#12660: 
    jump           #12658     
    jump           #12662     
#12661: 
    push           &mm_tables.symboloptypes 
    push           mm_lex.readtokens_a.lastsymbol i64 
    pushptroff                u8 1 -1
    push           1          i64 
    jumpne         #12663     i64 
    push           mm_decls.assemmode i64 
    jumptrue       #12663     i64 
    push           mm_lex.readtokens_a.lastsymbol i64 
    push           42         i64 
    setjumpeq      #12663     i64 
    push           41         i64 
    setjumpeqx     #12663     i64 
    jump           #12658     
    jump           #12662     
#12663: 
    push           6          i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
#12662: 
    jump           #12659     
#12651: 
    push           mm_lex.readtokens_a.lastsymbol i64 
    push           75         i64 
    jumpne         #12664     i64 
    setargs                   1 0
    push           mm_lex.readtokens_a.lastlx u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &strlen    i64 
    pop            mm_lex.readtokens_a.lena i64 
    setargs                   1 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    callfn         &strlen    i64 
    pop            mm_lex.readtokens_a.lenb i64 
    setargs                   1 0
    push           mm_lex.readtokens_a.lena i64 
    push           mm_lex.readtokens_a.lenb i64 
    add                       i64 
    push           1          i64 
    add                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            mm_lex.readtokens_a.p u64 
    setargs                   3 0
    push           mm_lex.readtokens_a.lena u64 
    push           mm_lex.readtokens_a.lastlx u64 
    push           8          
    pushptroff                u64 1 0
    push           mm_lex.readtokens_a.p u64 
    callproc       &memcpy    
    setargs                   3 0
    push           mm_lex.readtokens_a.lenb u64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           mm_lex.readtokens_a.p u64 
    push           mm_lex.readtokens_a.lena i64 
    addrefoff                 u64 1 0
    callproc       &memcpy    
    push           0          u64 
    push           mm_lex.readtokens_a.p u64 
    push           mm_lex.readtokens_a.lena i64 
    addrefoff                 u64 1 0
    push           mm_lex.readtokens_a.lenb i64 
    popptroff                 u8 1 0
    push           mm_lex.readtokens_a.p u64 
    push           mm_lex.readtokens_a.lastlx u64 
    push           8          
    popptroff                 u64 1 0
    jump           #12658     
#12664: 
    jump           #12659     
#12653: 
    setargs                   1 0
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    callfn         &mm_lex.dolexdirective i64 
    jumptrue       #12665     i64 
    jump           #12658     
#12665: 
    jump           #12659     
#12652: 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    push           78         i64 
    jumpne         #12666     i64 
    push           mm_lex.readtokens_a.lastsymbol i64 
    push           70         i64 
    casejumpeq     #12667     i64 0
    push           72         i64 
    casejumpeq     #12668     i64 0
    popstack                  i64 
    jump           #12669     
#12667: 
    push           mm_lex.readtokens_a.lastlx u64 
    push           1          
    pushptroff                u8 1 0
    push           5          i64 
    setjumpeq      #12670     i64 
    push           3          i64 
    setjumpne      #12671     i64 
#12670: 
    setargs                   1 0
    push           "No suffix on i128/u128" u64 
    callproc       &mm_support.lxerror 
#12671: 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           80         
    pushptroff                i32 1 0
    push           2          i64 
    casejumpeq     #12672     i64 0
    push           3          i64 
    casejumpeq     #12673     i64 0
    push           1          i64 
    casejumpeq     #12674     i64 0
    push           4          i64 
    casejumpeq     #12675     i64 0
    push           5          i64 
    casejumpeq     #12676     i64 0
    push           6          i64 
    casejumpeq     #12677     i64 0
    popstack                  i64 
    jump           #12678     
#12672: 
    push           mm_lex.readtokens_a.lastlx u64 
    push           8          
    addrefoff                 u64 1 0
    push           1000000    i64 
    multo                     i64 
    jump           #12679     
#12673: 
    push           mm_lex.readtokens_a.lastlx u64 
    push           8          
    addrefoff                 u64 1 0
    push           1000000000 i64 
    multo                     i64 
    jump           #12679     
#12674: 
    push           mm_lex.readtokens_a.lastlx u64 
    push           8          
    addrefoff                 u64 1 0
    push           1000       i64 
    multo                     i64 
    jump           #12679     
#12675: 
    push           mm_lex.readtokens_a.lastlx u64 
    push           8          
    addrefoff                 u64 1 0
    push           1024       i64 
    multo                     i64 
    jump           #12679     
#12676: 
    push           mm_lex.readtokens_a.lastlx u64 
    push           8          
    addrefoff                 u64 1 0
    push           1048576    i64 
    multo                     i64 
    jump           #12679     
#12677: 
    push           mm_lex.readtokens_a.lastlx u64 
    push           8          
    addrefoff                 u64 1 0
    push           1073741824 i64 
    multo                     i64 
    jump           #12679     
#12678: 
    setargs                   1 0
    push           "Can't do this unit index" u64 
    callproc       &mm_support.lxerror 
#12679: 
    setargs                   1 0
    push           mm_lex.readtokens_a.lastlx u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &mm_lex.setinttype i64 
    push           mm_lex.readtokens_a.lastlx u64 
    push           1          
    popptroff                 u8 1 0
    jump           #12658     
    jump           #12680     
#12668: 
    setargs                   1 0
    push           "Unit suffix after float not implem" u64 
    callproc       &mm_support.lxerror 
    jump           #12680     
#12669: 
#12680: 
#12666: 
    jump           #12659     
#12654: 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    push           73         i64 
    casejumpeq     #12681     i64 0
    push           105        i64 
    casejumpeq     #12681     i64 0
    push           87         i64 
    casejumpeq     #12682     i64 0
    push           119        i64 
    casejumpeq     #12682     i64 0
    popstack                  i64 
    jump           #12683     
#12681: 
    push           4          i64 
    push           &mm_decls.lx 
    push           1          
    popptroff                 u8 1 0
    jump           #12684     
#12682: 
    push           2          i64 
    push           &mm_decls.lx 
    push           1          
    popptroff                 u8 1 0
    jump           #12684     
#12683: 
#12684: 
    push           91         i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    jump           #12659     
#12650: 
    push           79         i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    jump           #12659     
#12648: 
    push           mm_lex.readtokens_a.lastsymbol i64 
    push           54         i64 
    jumpne         #12685     i64 
    push           51         i64 
    push           mm_lex.readtokens_a.lastlx u64 
    push           0          
    popptroff                 u8 1 0
    push           113        i64 
    push           mm_lex.readtokens_a.lastlx u64 
    push           1          
    popptroff                 u8 1 0
    jump           #12658     
#12685: 
    jump           #12659     
#12647: 
    push           mm_lex.readtokens_a.lastsymbol i64 
    push           54         i64 
    jumpne         #12686     i64 
    push           47         i64 
    push           mm_lex.readtokens_a.lastlx u64 
    push           0          
    popptroff                 u8 1 0
    push           117        i64 
    push           mm_lex.readtokens_a.lastlx u64 
    push           1          
    popptroff                 u8 1 0
    jump           #12658     
#12686: 
    jump           #12659     
#12646: 
#12659: 
!skip::
#12687: 
    push           mm_lex.readtokens_a.ntokens u64 
    pushptr                   i64 
    push           4          i64 
    add                       i64 
    push           mm_lex.tokenlistsize i64 
    jumplt         #12688     i64 
    setargs                   1 0
    push           mm_lex.readtokens_a.ntokens u64 
    pushptr                   i64 
    callproc       &mm_lex.extendtokenlist 
#12688: 
    push           mm_lex.readtokens_a.ntokens u64 
    incr                      i64 1
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    push           mm_lex.lxfileno i64 
    push           24         i64 
    shl                       i64 
    ior                       i64 
    push           &mm_decls.lx 
    push           4          
    popptroff                 u32 1 0
    push           mm_decls.lx block:16 
    push           mm_lex.tokenlist u64 
    push           mm_lex.readtokens_a.ntokens u64 
    pushptr                   i64 
    popptroff                 block:16 16 -16
    push           mm_lex.tokenlist u64 
    push           mm_lex.readtokens_a.ntokens u64 
    pushptr                   i64 
    addrefoff                 block:16 16 -16
    pop            mm_lex.readtokens_a.lastlx u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    pop            mm_lex.readtokens_a.lastsymbol i64 
#12658: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           66         i64 
    jumpne         #12644     i64 
#12689: 
    push           66         i64 
    push           mm_lex.tokenlist u64 
    push           mm_lex.readtokens_a.ntokens u64 
    pushptr                   i64 
    addrefoff                 block:16 16 0
    push           0          
    popptroff                 u8 1 0
    push           mm_lex.tokenlist u64 
    push           1          i64 
    addrefoff                 block:16 16 -16
    setret                    u64 
    jump           #12690     
#12690: 
    retfn                     u64 
End


Proc mm_support.loadsourcefile: i64
    param          mm_support.loadsourcefile.filespec u64 
    local          mm_support.loadsourcefile.s u64 
    local          mm_support.loadsourcefile.shortfile u64 
    procentry                 
    push           mm_decls.nsourcefiles i64 
    push           1000       i64 
    jumple         #12692     i64 
    setargs                   3 0
    push           ""         u64 
    push           ""         u64 
    push           "Too many source files" u64 
    callproc       &mm_support.loaderror 
#12692: 
    setargs                   1 0
    push           mm_support.loadsourcefile.filespec u64 
    callfn         &mlibp.extractfile u64 
    pop            mm_support.loadsourcefile.shortfile u64 
    push           &mm_decls.nsourcefiles 
    incr                      i64 1
    setargs                   1 0
    push           mm_support.loadsourcefile.filespec u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &mm_decls.sourcefilepaths 
    push           mm_decls.nsourcefiles i64 
    popptroff                 u64 8 0
    setargs                   1 0
    push           mm_support.loadsourcefile.shortfile u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &mm_decls.sourcefilenames 
    push           mm_decls.nsourcefiles i64 
    popptroff                 u64 8 0
    setargs                   1 0
    push           mm_support.loadsourcefile.filespec u64 
    callfn         &mlibp.readfile u64 
    pop            mm_support.loadsourcefile.s u64 
    push           mm_support.loadsourcefile.s u64 
    jumptrue       #12693     u64 
    setargs                   3 0
    push           ""         u64 
    push           mm_support.loadsourcefile.filespec u64 
    push           "LSF can't load " u64 
    callproc       &mm_support.loaderror 
#12693: 
    push           mm_support.loadsourcefile.s u64 
    push           &mm_decls.sourcefiletext 
    push           mm_decls.nsourcefiles i64 
    popptroff                 u64 8 0
    push           mm_decls.fwritema u8 
    jumpfalse      #12694     i64 
    setargs                   1 0
    push           mm_support.loadsourcefile.s u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &mm_decls.mafiletext 
    push           mm_decls.nsourcefiles i64 
    popptroff                 u64 8 0
#12694: 
    push           mlibp.rfsize i64 
    push           &mm_decls.sourcefilesizes 
    push           mm_decls.nsourcefiles i64 
    popptroff                 i64 8 0
    push           0          u64 
    push           mm_support.loadsourcefile.s u64 
    push           mlibp.rfsize i64 
    popptroff                 u8 1 0
    push           mm_decls.nsourcefiles i64 
    setret                    i64 
    jump           #12695     
#12695: 
    retfn                     i64 
End


Proc mm_support.loadbuiltin: i64
    param          mm_support.loadbuiltin.shortfile u64 
    param          mm_support.loadbuiltin.text u64 
    local          mm_support.loadbuiltin.s u64 
    local          mm_support.loadbuiltin.str block:128 
    procentry                 
    push           mm_decls.nsourcefiles i64 
    push           1000       i64 
    jumple         #12697     i64 
    setargs                   3 0
    push           ""         u64 
    push           ""         u64 
    push           "Too many source files" u64 
    callproc       &mm_support.loaderror 
#12697: 
    push           &mm_decls.nsourcefiles 
    incr                      i64 1
    setargs                   1 0
    push           &mm_support.loadbuiltin.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "<Built-in: #>" u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           mm_support.loadbuiltin.shortfile u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           &mm_support.loadbuiltin.str 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &mm_decls.sourcefilepaths 
    push           mm_decls.nsourcefiles i64 
    popptroff                 u64 8 0
    setargs                   1 0
    push           mm_support.loadbuiltin.shortfile u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &mm_decls.sourcefilenames 
    push           mm_decls.nsourcefiles i64 
    popptroff                 u64 8 0
    setargs                   1 0
    push           mm_support.loadbuiltin.text u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &mm_decls.sourcefiletext 
    push           mm_decls.nsourcefiles i64 
    popptroff                 u64 8 0
    push           mm_decls.fwritema u8 
    jumpfalse      #12698     i64 
    setargs                   1 0
    push           mm_support.loadbuiltin.text u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &mm_decls.mafiletext 
    push           mm_decls.nsourcefiles i64 
    popptroff                 u64 8 0
#12698: 
    setargs                   1 0
    push           mm_support.loadbuiltin.text u64 
    callfn         &strlen    i64 
    push           &mm_decls.sourcefilesizes 
    push           mm_decls.nsourcefiles i64 
    popptroff                 i64 8 0
    push           mm_decls.nsourcefiles i64 
    setret                    i64 
    jump           #12699     
#12699: 
    retfn                     i64 
End


Proc mm_support.loadbundledfile: i64
    param          mm_support.loadbundledfile.filespec u64 
    param          mm_support.loadbundledfile.support i64 
    local          mm_support.loadbundledfile.fileno i64 
    local          mm_support.loadbundledfile.file u64 
    local          mm_support.loadbundledfile.n i64 
    local          mm_support.loadbundledfile.lastmatch i64 
    local          mm_support.loadbundledfile.i i64 
    procentry                 
    setargs                   1 0
    push           mm_support.loadbundledfile.filespec u64 
    callfn         &mlibp.extractfile u64 
    pop            mm_support.loadbundledfile.file u64 
#12701: 
    push           1          i64 
    pop            mm_support.loadbundledfile.i i64 
    push           mm_decls.nmafiles i64 
    push           1          i64 
    jumplt         #12702     i64 
#12703: 
    setargs                   2 0
    push           &mm_decls.mafilenames 
    push           mm_support.loadbundledfile.i i64 
    pushptroff                u64 8 0
    push           mm_support.loadbundledfile.file u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #12704     i64 
    push           mm_support.loadbundledfile.support i64 
    push           &mm_decls.mafilesupport 
    push           mm_support.loadbundledfile.i i64 
    pushptroff                u8 1 0
    jumpne         #12704     i64 
    push           &mm_decls.mafilefileno 
    push           mm_support.loadbundledfile.i i64 
    pushptroff                u8 1 0
    pop            mm_support.loadbundledfile.fileno i64 
    push           mm_support.loadbundledfile.fileno i64 
    jumptrue       #12705     i64 
    push           &mm_decls.nsourcefiles 
    incrload                  i64 1
    pop            mm_support.loadbundledfile.fileno i64 
    push           mm_support.loadbundledfile.fileno i64 
    push           &mm_decls.mafilefileno 
    push           mm_support.loadbundledfile.i i64 
    popptroff                 u8 1 0
    push           &mm_decls.mafilenames 
    push           mm_support.loadbundledfile.i i64 
    pushptroff                u64 8 0
    push           &mm_decls.sourcefilepaths 
    push           mm_decls.nsourcefiles i64 
    popptroff                 u64 8 0
    push           &mm_decls.mafilenames 
    push           mm_support.loadbundledfile.i i64 
    pushptroff                u64 8 0
    push           &mm_decls.sourcefilenames 
    push           mm_decls.nsourcefiles i64 
    popptroff                 u64 8 0
    push           &mm_decls.mafiletext 
    push           mm_support.loadbundledfile.i i64 
    pushptroff                u64 8 0
    push           &mm_decls.sourcefiletext 
    push           mm_decls.nsourcefiles i64 
    popptroff                 u64 8 0
    push           &mm_decls.mafilesizes 
    push           mm_support.loadbundledfile.i i64 
    pushptroff                i64 8 0
    push           &mm_decls.sourcefilesizes 
    push           mm_decls.nsourcefiles i64 
    popptroff                 i64 8 0
    setargs                   1 0
    push           &mm_decls.mafiletext 
    push           mm_support.loadbundledfile.i i64 
    pushptroff                u64 8 0
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &mm_decls.sourcefiletext 
    push           mm_decls.nsourcefiles i64 
    popptroff                 u64 8 0
    jump           #12706     
#12705: 
#12706: 
    push           mm_support.loadbundledfile.fileno i64 
    setret                    i64 
    jump           #12707     
#12704: 
#12708: 
    forup          #12703     i64 1
    opnd           mm_support.loadbundledfile.i 
    opnd           mm_decls.nmafiles 
#12702: 
    setargs                   3 0
    push           ""         u64 
    push           mm_support.loadbundledfile.filespec u64 
    push           "Can't find bundled file: # #" u64 
    callproc       &mm_support.loaderror 
    push           0          i64 
    setret                    i64 
    jump           #12707     
#12707: 
    retfn                     i64 
End


Proc mm_support.mcerror:
    param          mm_support.mcerror.mess u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "MC Error:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_support.mcerror.mess u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#12710: 
    retproc                   
End


Proc mm_support.serror_gen:
    param          mm_support.serror_gen.mess u64 
    procentry                 
    push           mm_decls.currproc u64 
    jumpfalse      #12712     u64 
    push           mm_decls.currproc u64 
    push           78         
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #12712     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "In function" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_decls.currproc u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           " "        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#12712: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "On line"  u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   2 0
    push           0          i64 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    push           0          i64 
    push           23         i64 
    dotslice                  i64 
    callproc       &msysp.m$print_u64 
    setargs                   1 0
    push           "in file"  u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_decls.sourcefilepaths 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    push           24         i64 
    push           31         i64 
    dotslice                  i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_decls.sourcefilenames 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    push           24         i64 
    push           31         i64 
    dotslice                  i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "**** Syntax Error:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_support.serror_gen.mess u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "****"     u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    push           0          i64 
    push           23         i64 
    dotslice                  i64 
    push           &mm_decls.sourcefilepaths 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    push           24         i64 
    push           31         i64 
    dotslice                  i64 
    pushptroff                u64 8 0
    callproc       &mm_support.stopcompiler 
#12713: 
    retproc                   
End


Proc mm_support.stopcompiler:
    param          mm_support.stopcompiler.filename u64 
    param          mm_support.stopcompiler.lineno i64 
    local          mm_support.stopcompiler.f u64 
    procentry                 
    setargs                   2 0
    push           "w"        u64 
    push           "$error.tmp" u64 
    callfn         &fopen     u64 
    pop            mm_support.stopcompiler.f u64 
    setargs                   1 0
    push           mm_support.stopcompiler.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           mm_support.stopcompiler.filename u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_support.stopcompiler.lineno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           mm_support.stopcompiler.f u64 
    callproc       &fclose    
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#12715: 
    retproc                   
End


Proc mm_support.serror:
    param          mm_support.serror.mess u64 
    procentry                 
    setargs                   1 0
    push           mm_support.serror.mess u64 
    callproc       &mm_support.serror_gen 
#12717: 
    retproc                   
End


Proc mm_support.serror_s:
    param          mm_support.serror_s.mess u64 
    param          mm_support.serror_s.a u64 
    local          mm_support.serror_s.str block:256 
    procentry                 
    setargs                   1 0
    push           &mm_support.serror_s.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           mm_support.serror_s.mess u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           mm_support.serror_s.a u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           &mm_support.serror_s.str 
    callproc       &mm_support.serror_gen 
#12719: 
    retproc                   
End


Proc mm_support.error_gen:
    param          mm_support.error_gen.pass i64 
    param          mm_support.error_gen.mess u64 
    param          mm_support.error_gen.p u64 
    local          mm_support.error_gen.lineno i64 
    local          mm_support.error_gen.fileno i64 
    procentry                 
    push           mm_support.error_gen.p u64 
    jumpfalse      #12721     u64 
    push           mm_support.error_gen.p u64 
    push           4          
    pushptroff                u32 1 0
    push           24         i64 
    push           31         i64 
    dotslice                  i64 
    pop            mm_support.error_gen.fileno i64 
    push           mm_support.error_gen.p u64 
    push           4          
    pushptroff                u32 1 0
    push           0          i64 
    push           23         i64 
    dotslice                  i64 
    pop            mm_support.error_gen.lineno i64 
    jump           #12722     
#12721: 
    push           mm_tables.mlineno i64 
    push           24         i64 
    shr                       i64 
    pop            mm_support.error_gen.fileno i64 
    push           mm_tables.mlineno i64 
    push           16777215   i64 
    iand                      i64 
    pop            mm_support.error_gen.lineno i64 
#12722: 
    push           mm_decls.currproc u64 
    jumpfalse      #12723     u64 
    push           mm_decls.currproc u64 
    push           78         
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #12723     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "In function" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_decls.currproc u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           " "        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#12723: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "On line"  u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_support.error_gen.lineno i64 
    push           16777215   i64 
    iand                      i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           "in file"  u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_decls.sourcefilepaths 
    push           mm_support.error_gen.fileno i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           mm_support.error_gen.pass i64 
    push           78         i64 
    casejumpeq     #12724     i64 0
    push           84         i64 
    casejumpeq     #12725     i64 0
    push           71         i64 
    casejumpeq     #12726     i64 0
    push           65         i64 
    casejumpeq     #12727     i64 0
    popstack                  i64 
    jump           #12728     
#12724: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "**** RX Name Error: " u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #12729     
#12725: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "**** TX Type Error: " u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #12729     
#12726: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "**** GX Code Gen Error: " u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #12729     
#12727: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "**** 'AX Code Gen Error: " u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #12729     
#12728: 
#12729: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mm_support.error_gen.mess u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &mwindowsp.os_getch 
    setargs                   2 0
    push           mm_support.error_gen.lineno i64 
    push           16777215   i64 
    iand                      i64 
    push           &mm_decls.sourcefilepaths 
    push           mm_support.error_gen.fileno i64 
    pushptroff                u64 8 0
    callproc       &mm_support.stopcompiler 
#12730: 
    retproc                   
End


Proc mm_support.rxerror:
    param          mm_support.rxerror.mess u64 
    param          mm_support.rxerror.p u64 
    procentry                 
    setargs                   3 0
    push           mm_support.rxerror.p u64 
    push           mm_support.rxerror.mess u64 
    push           78         i64 
    callproc       &mm_support.error_gen 
#12732: 
    retproc                   
End


Proc mm_support.gerror:
    param          mm_support.gerror.mess u64 
    param          mm_support.gerror.p u64 
    procentry                 
    setargs                   3 0
    push           mm_support.gerror.p u64 
    push           mm_support.gerror.mess u64 
    push           71         i64 
    callproc       &mm_support.error_gen 
#12734: 
    retproc                   
End


Proc mm_support.axerror:
    param          mm_support.axerror.mess u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "ALINENO=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_decls.alineno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   3 0
    push           0          u64 
    push           mm_support.axerror.mess u64 
    push           65         i64 
    callproc       &mm_support.error_gen 
#12736: 
    retproc                   
End


Proc mm_support.txerror:
    param          mm_support.txerror.mess u64 
    param          mm_support.txerror.p u64 
    procentry                 
    setargs                   3 0
    push           mm_support.txerror.p u64 
    push           mm_support.txerror.mess u64 
    push           84         i64 
    callproc       &mm_support.error_gen 
#12738: 
    retproc                   
End


Proc mm_support.txerror_s:
    param          mm_support.txerror_s.mess u64 
    param          mm_support.txerror_s.a u64 
    param          mm_support.txerror_s.p u64 
    local          mm_support.txerror_s.str block:256 
    procentry                 
    setargs                   1 0
    push           &mm_support.txerror_s.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           mm_support.txerror_s.mess u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           mm_support.txerror_s.a u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   3 0
    push           mm_support.txerror_s.p u64 
    push           &mm_support.txerror_s.str 
    push           84         i64 
    callproc       &mm_support.error_gen 
#12740: 
    retproc                   
End


Proc mm_support.txerror_ss:
    param          mm_support.txerror_ss.mess u64 
    param          mm_support.txerror_ss.a u64 
    param          mm_support.txerror_ss.b u64 
    local          mm_support.txerror_ss.str block:256 
    procentry                 
    setargs                   1 0
    push           &mm_support.txerror_ss.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           mm_support.txerror_ss.mess u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           mm_support.txerror_ss.a u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_support.txerror_ss.b u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   3 0
    push           0          u64 
    push           &mm_support.txerror_ss.str 
    push           84         i64 
    callproc       &mm_support.error_gen 
#12742: 
    retproc                   
End


Proc mm_support.rxerror_s:
    param          mm_support.rxerror_s.mess u64 
    param          mm_support.rxerror_s.a u64 
    param          mm_support.rxerror_s.p u64 
    local          mm_support.rxerror_s.str block:256 
    procentry                 
    setargs                   1 0
    push           &mm_support.rxerror_s.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           mm_support.rxerror_s.mess u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           mm_support.rxerror_s.a u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   3 0
    push           mm_support.rxerror_s.p u64 
    push           &mm_support.rxerror_s.str 
    push           78         i64 
    callproc       &mm_support.error_gen 
#12744: 
    retproc                   
End


Proc mm_support.gerror_s:
    param          mm_support.gerror_s.mess u64 
    param          mm_support.gerror_s.s u64 
    param          mm_support.gerror_s.p u64 
    local          mm_support.gerror_s.str block:256 
    procentry                 
    setargs                   1 0
    push           &mm_support.gerror_s.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           mm_support.gerror_s.mess u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           mm_support.gerror_s.s u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   3 0
    push           mm_support.gerror_s.p u64 
    push           &mm_support.gerror_s.str 
    push           71         i64 
    callproc       &mm_support.error_gen 
#12746: 
    retproc                   
End


Proc mm_support.lxerror_gen:
    param          mm_support.lxerror_gen.mess u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "On line"  u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   2 0
    push           0          i64 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    push           0          i64 
    push           23         i64 
    dotslice                  i64 
    callproc       &msysp.m$print_u64 
    setargs                   1 0
    push           "in file"  u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_decls.sourcefilepaths 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    push           24         i64 
    push           31         i64 
    dotslice                  i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "**** Lex Error:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_support.lxerror_gen.mess u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "****"     u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    push           0          i64 
    push           23         i64 
    dotslice                  i64 
    push           &mm_decls.sourcefilepaths 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    push           24         i64 
    push           31         i64 
    dotslice                  i64 
    pushptroff                u64 8 0
    callproc       &mm_support.stopcompiler 
#12748: 
    retproc                   
End


Proc mm_support.lxerror:
    param          mm_support.lxerror.mess u64 
    procentry                 
    setargs                   1 0
    push           mm_support.lxerror.mess u64 
    callproc       &mm_support.lxerror_gen 
#12750: 
    retproc                   
End


Proc mm_support.loaderror:
    param          mm_support.loaderror.mess u64 
    param          mm_support.loaderror.mess2 u64 
    param          mm_support.loaderror.mess3 u64 
    local          mm_support.loaderror.str block:512 
    procentry                 
    setargs                   1 0
    push           &mm_support.loaderror.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           mm_support.loaderror.mess u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           mm_support.loaderror.mess2 u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_support.loaderror.mess3 u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Load Error:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_support.loaderror.str 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Stopping" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#12752: 
    retproc                   
End


Proc mm_support.gs_additem:
    param          mm_support.gs_additem.dest u64 
    param          mm_support.gs_additem.s u64 
    local          mm_support.gs_additem.d u64 
    local          mm_support.gs_additem.lastchar i64 
    local          mm_support.gs_additem.nextchar i64 
    procentry                 
    push           mm_support.gs_additem.dest u64 
    pushptr                   u64 
    pop            mm_support.gs_additem.d u64 
    push           mm_support.gs_additem.dest u64 
    push           8          
    pushptroff                i32 1 0
    jumpfalse      #12754     i64 
    push           mm_support.gs_additem.d u64 
    push           mm_support.gs_additem.dest u64 
    push           8          
    pushptroff                i32 1 0
    pushptroff                u8 1 -1
    pop            mm_support.gs_additem.lastchar i64 
    push           mm_support.gs_additem.s u64 
    pushptr                   u8 
    pop            mm_support.gs_additem.nextchar i64 
    setargs                   1 0
    push           mm_support.gs_additem.lastchar i64 
    callfn         &mm_support.isalphanum i64 
    jumpfalse      #12755     i64 
    setargs                   1 0
    push           mm_support.gs_additem.nextchar i64 
    callfn         &mm_support.isalphanum i64 
    jumpfalse      #12755     i64 
    setargs                   3 0
    push           -1         i64 
    push           " "        u64 
    push           mm_support.gs_additem.dest u64 
    callproc       &mlibp.strbuffer_add 
#12755: 
#12754: 
    setargs                   3 0
    push           -1         i64 
    push           mm_support.gs_additem.s u64 
    push           mm_support.gs_additem.dest u64 
    callproc       &mlibp.strbuffer_add 
#12756: 
    retproc                   
End


Proc mm_support.gs_copytostr:
    param          mm_support.gs_copytostr.source u64 
    param          mm_support.gs_copytostr.s u64 
    procentry                 
    push           mm_support.gs_copytostr.source u64 
    push           8          
    pushptroff                i32 1 0
    jumpfalse      #12758     i64 
    setargs                   3 0
    push           mm_support.gs_copytostr.source u64 
    push           8          
    pushptroff                i32 1 0
    push           mm_support.gs_copytostr.source u64 
    pushptr                   u64 
    push           mm_support.gs_copytostr.s u64 
    callproc       &memcpy    
    push           0          u64 
    push           mm_support.gs_copytostr.s u64 
    push           mm_support.gs_copytostr.source u64 
    push           8          
    pushptroff                i32 1 0
    popptroff                 u8 1 0
    jump           #12759     
#12758: 
    push           0          u64 
    push           mm_support.gs_copytostr.s u64 
    popptr                    u8 
#12759: 
#12760: 
    retproc                   
End


Proc mm_support.isalphanum: i64
    param          mm_support.isalphanum.c i64 
    procentry                 
    push           mm_support.isalphanum.c i64 
    push           65         i64 
    jumplt         #12762     i64 
    push           mm_support.isalphanum.c i64 
    push           90         i64 
    jumple         #12763     i64 
#12762: 
    push           mm_support.isalphanum.c i64 
    push           97         i64 
    jumplt         #12764     i64 
    push           mm_support.isalphanum.c i64 
    push           122        i64 
    jumple         #12763     i64 
#12764: 
    push           mm_support.isalphanum.c i64 
    push           48         i64 
    jumplt         #12765     i64 
    push           mm_support.isalphanum.c i64 
    push           57         i64 
    jumpgt         #12765     i64 
#12763: 
    push           1          i64 
    setret                    i64 
    jump           #12766     
#12765: 
    push           0          i64 
    setret                    i64 
    jump           #12766     
#12766: 
    retfn                     i64 
End


Proc mm_support.init_tt_tables:
    local          mm_support.init_tt_tables.i i64 
    local          mm_support.init_tt_tables.size i64 
    local          mm_support.init_tt_tables.bitsize i64 
    local          mm_support.init_tt_tables.s i64 
    local          mm_support.init_tt_tables.t i64 
    local          mm_support.init_tt_tables.u i64 
    local          mm_support.init_tt_tables.v i64 
    local          mm_support.init_tt_tables.av_1 i64 
    procentry                 
#12768: 
    push           0          i64 
    pop            mm_support.init_tt_tables.i i64 
    push           32         i64 
    pop            mm_support.init_tt_tables.av_1 i64 
    push           mm_support.init_tt_tables.av_1 i64 
    push           0          i64 
    jumplt         #12769     i64 
#12770: 
    push           &mm_tables.stdnames 
    push           mm_support.init_tt_tables.i i64 
    pushptroff                u64 8 0
    push           &mm_decls.ttname 
    push           mm_support.init_tt_tables.i i64 
    popptroff                 u64 8 0
    push           mm_support.init_tt_tables.i i64 
    push           &mm_decls.ttbasetype 
    push           mm_support.init_tt_tables.i i64 
    popptroff                 i32 4 0
    push           &mm_tables.stdbits 
    push           mm_support.init_tt_tables.i i64 
    pushptroff                u8 1 0
    pop            mm_support.init_tt_tables.bitsize i64 
    push           mm_support.init_tt_tables.bitsize i64 
    switch         #12771     0 4
    opnd           #12772     
#12771: 
    switchlabel    #12773     
    switchlabel    #12774     
    switchlabel    #12774     
    switchlabel    #12772     
    switchlabel    #12774     
    endswitch                 
#12773: 
    push           0          i64 
    pop            mm_support.init_tt_tables.size i64 
    jump           #12775     
#12774: 
    push           1          i64 
    pop            mm_support.init_tt_tables.size i64 
    jump           #12775     
#12772: 
    push           mm_support.init_tt_tables.bitsize i64 
    push           8          i64 
    idiv                      i64 
    pop            mm_support.init_tt_tables.size i64 
#12775: 
    push           mm_support.init_tt_tables.size i64 
    push           &mm_decls.ttsize 
    push           mm_support.init_tt_tables.i i64 
    popptroff                 i32 4 0
    push           &mm_tables.stdcodes 
    push           mm_support.init_tt_tables.i i64 
    pushptroff                u8 1 0
    push           73         i64 
    casejumpeq     #12776     i64 0
    push           85         i64 
    casejumpeq     #12777     i64 0
    push           67         i64 
    casejumpeq     #12777     i64 0
    push           82         i64 
    casejumpeq     #12778     i64 0
    push           80         i64 
    casejumpeq     #12779     i64 0
    push           81         i64 
    casejumpeq     #12779     i64 0
    popstack                  i64 
    jump           #12780     
#12776: 
    push           1          i64 
    push           &mm_decls.ttisint 
    push           mm_support.init_tt_tables.i i64 
    popptroff                 u8 1 0
    push           1          i64 
    push           &mm_decls.ttisinteger 
    push           mm_support.init_tt_tables.i i64 
    popptroff                 u8 1 0
    jump           #12781     
#12777: 
    push           1          i64 
    push           &mm_decls.ttisword 
    push           mm_support.init_tt_tables.i i64 
    popptroff                 u8 1 0
    push           1          i64 
    push           &mm_decls.ttisinteger 
    push           mm_support.init_tt_tables.i i64 
    popptroff                 u8 1 0
    jump           #12781     
#12778: 
    push           1          i64 
    push           &mm_decls.ttisreal 
    push           mm_support.init_tt_tables.i i64 
    popptroff                 u8 1 0
    jump           #12781     
#12779: 
    push           1          i64 
    push           &mm_decls.ttisref 
    push           mm_support.init_tt_tables.i i64 
    popptroff                 u8 1 0
    jump           #12781     
#12780: 
#12781: 
    push           &mm_decls.ttisinteger 
    push           mm_support.init_tt_tables.i i64 
    pushptroff                u8 1 0
    jumpfalse      #12782     i64 
    push           mm_support.init_tt_tables.size i64 
    push           8          i64 
    jumpge         #12782     i64 
    push           1          i64 
    push           &mm_decls.ttisshort 
    push           mm_support.init_tt_tables.i i64 
    popptroff                 u8 1 0
#12782: 
    push           &mm_decls.ttisinteger 
    push           mm_support.init_tt_tables.i i64 
    pushptroff                u8 1 0
    jumptrue       #12783     i64 
    push           &mm_decls.ttisreal 
    push           mm_support.init_tt_tables.i i64 
    pushptroff                u8 1 0
    jumpfalse      #12784     i64 
#12783: 
    push           1          i64 
    push           &mm_decls.ttisallnum 
    push           mm_support.init_tt_tables.i i64 
    popptroff                 u8 1 0
    push           &mm_decls.ttisshort 
    push           mm_support.init_tt_tables.i i64 
    pushptroff                u8 1 0
    jumptrue       #12785     i64 
    push           1          i64 
    push           &mm_decls.ttismainnum 
    push           mm_support.init_tt_tables.i i64 
    popptroff                 u8 1 0
#12785: 
#12784: 
    push           1          i64 
    push           &mm_decls.ttlower 
    push           mm_support.init_tt_tables.i i64 
    popptroff                 i32 4 0
#12786: 
    forup          #12770     i64 1
    opnd           mm_support.init_tt_tables.i 
    opnd           mm_support.init_tt_tables.av_1 
#12769: 
    push           9          i64 
    push           &mm_decls.ttbasetype 
    push           10         i64 
    popptroff                 i32 4 0
    push           16         i64 
    push           &mm_decls.tttarget 
    push           10         i64 
    popptroff                 i32 4 0
    push           32         i64 
    pop            mm_decls.ntypes i64 
#12787: 
    retproc                   
End


Proc mm_support.addspecialtypes:
    procentry                 
    setargs                   3 0
    push           0          i64 
    push           27         i64 
    push           0          u64 
    callfn         &mm_lib.createrefmode i64 
    pop            mm_tables.trefproc i64 
    setargs                   3 0
    push           0          i64 
    push           28         i64 
    push           0          u64 
    callfn         &mm_lib.createrefmode i64 
    pop            mm_tables.treflabel i64 
#12789: 
    retproc                   
End


Proc mm_support.findfile: u64
    param          mm_support.findfile.filename u64 
    local          mm_support.findfile.i i64 
    procentry                 
    push           mm_decls.fverbose i64 
    push           3          i64 
    jumpne         #12791     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Finding"  u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_support.findfile.filename u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#12791: 
#12792: 
    push           mm_decls.nsearchdirs i64 
    pop            mm_support.findfile.i i64 
    push           mm_support.findfile.i i64 
    push           1          i64 
    jumplt         #12793     i64 
#12794: 
    setargs                   2 0
    push           &mm_decls.searchdirs 
    push           mm_support.findfile.i i64 
    pushptroff                u64 8 -8
    push           &mm_support.findfile.filespec 
    callproc       &strcpy    
    setargs                   2 0
    push           mm_support.findfile.filename u64 
    push           &mm_support.findfile.filespec 
    callproc       &strcat    
    push           mm_decls.fverbose i64 
    push           3          i64 
    jumpne         #12795     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\tChecking:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_support.findfile.filespec 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#12795: 
    setargs                   1 0
    push           &mm_support.findfile.filespec 
    callfn         &mlibp.checkfile i64 
    jumpfalse      #12796     i64 
    push           mm_decls.fverbose i64 
    push           3          i64 
    jumpne         #12797     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\tFound:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_support.findfile.filespec 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#12797: 
    push           &mm_support.findfile.filespec 
    setret                    u64 
    jump           #12798     
#12796: 
#12799: 
    fordown        #12794     i64 1
    opnd           mm_support.findfile.i 
    opnd           1          
#12793: 
    push           0          u64 
    setret                    u64 
    jump           #12798     
#12798: 
    retfn                     u64 
End


Proc mm_support.getmainfile: i64
    param          mm_support.getmainfile.filename u64 
    procentry                 
    push           mm_decls.fbundled u8 
    jumpfalse      #12801     i64 
    setargs                   2 0
    push           0          i64 
    push           mm_support.getmainfile.filename u64 
    callfn         &mm_support.loadbundledfile i64 
    setret                    i64 
    jump           #12802     
#12801: 
    setargs                   1 0
    push           mm_support.getmainfile.filename u64 
    callfn         &mlibp.checkfile i64 
    jumptrue       #12803     i64 
    setargs                   3 0
    push           ""         u64 
    push           mm_support.getmainfile.filename u64 
    push           "Can't find main module: ##" u64 
    callproc       &mm_support.loaderror 
#12803: 
    setargs                   1 0
    push           mm_support.getmainfile.filename u64 
    callfn         &mm_support.loadsourcefile i64 
    setret                    i64 
    jump           #12802     
#12802: 
    retfn                     i64 
End


Proc mm_support.getmodulefile: i64
    param          mm_support.getmodulefile.modulename u64 
    param          mm_support.getmodulefile.ownername u64 
    param          mm_support.getmodulefile.xdflag i64 
    local          mm_support.getmodulefile.filename block:300 
    local          mm_support.getmodulefile.file u64 
    local          mm_support.getmodulefile.libtext u64 
    procentry                 
    setargs                   2 0
    setargs                   2 0
    startmult                 
    push           mm_support.getmodulefile.xdflag i64 
    jumpfalse      #12805     i64 
    push           "exp"      u64 
    resetmult                 
    jump           #12806     
#12805: 
    push           "m"        u64 
    endmult                   
#12806: 
    push           mm_support.getmodulefile.modulename u64 
    callfn         &mlibp.addext u64 
    push           &mm_support.getmodulefile.filename 
    callproc       &strcpy    
    push           mm_decls.fbundled u8 
    jumpfalse      #12807     i64 
    setargs                   2 0
    push           0          i64 
    push           &mm_support.getmodulefile.filename 
    callfn         &mm_support.loadbundledfile i64 
    setret                    i64 
    jump           #12808     
#12807: 
    push           mm_decls.dointlibs u8 
    jumpfalse      #12809     i64 
    setargs                   1 0
    push           &mm_support.getmodulefile.filename 
    callfn         &mm_libsources_dummy.findstdlib u64 
    pop            mm_support.getmodulefile.libtext u64 
    push           mm_support.getmodulefile.libtext u64 
    jumpfalse      #12810     u64 
    setargs                   2 0
    push           mm_support.getmodulefile.libtext u64 
    push           &mm_support.getmodulefile.filename 
    callfn         &mm_support.loadbuiltin i64 
    setret                    i64 
    jump           #12808     
#12810: 
#12809: 
    setargs                   1 0
    push           &mm_support.getmodulefile.filename 
    callfn         &mm_support.findfile u64 
    pop            mm_support.getmodulefile.file u64 
    push           mm_support.getmodulefile.file u64 
    push           0          u64 
    jumpne         #12811     u64 
    setargs                   3 0
    push           mm_support.getmodulefile.ownername u64 
    push           &mm_support.getmodulefile.filename 
    push           "Can't find import module: # imported in: #" u64 
    callproc       &mm_support.loaderror 
#12811: 
    setargs                   1 0
    push           mm_support.getmodulefile.file u64 
    callfn         &mm_support.loadsourcefile i64 
    setret                    i64 
    jump           #12808     
#12808: 
    retfn                     i64 
End


Proc mm_support.getsupportfile: i64
    param          mm_support.getsupportfile.filename u64 
    local          mm_support.getsupportfile.path u64 
    local          mm_support.getsupportfile.file u64 
    local          mm_support.getsupportfile.fileno i64 
    procentry                 
    push           mm_decls.fbundled u8 
    jumpfalse      #12813     i64 
    setargs                   2 0
    push           1          i64 
    push           mm_support.getsupportfile.filename u64 
    callfn         &mm_support.loadbundledfile i64 
    setret                    i64 
    jump           #12814     
#12813: 
    setargs                   1 0
    push           mm_support.getsupportfile.filename u64 
    callfn         &mlibp.extractpath u64 
    pop            mm_support.getsupportfile.path u64 
    push           mm_support.getsupportfile.path u64 
    pushptr                   u8 
    push           92         i64 
    setjumpeq      #12815     u64 
    push           47         i64 
    setjumpeqx     #12815     u64 
    push           mm_support.getsupportfile.path u64 
    pushptr                   u8 
    push           0          i64 
    jumpeq         #12816     i64 
    push           mm_support.getsupportfile.path u64 
    push           1          i64 
    pushptroff                u8 1 0
    push           58         u64 
    jumpne         #12816     u64 
#12815: 
    push           mm_support.getsupportfile.filename u64 
    pop            mm_support.getsupportfile.file u64 
    jump           #12817     
#12816: 
    setargs                   1 0
    push           mm_support.getsupportfile.filename u64 
    callfn         &mm_support.findfile u64 
    pop            mm_support.getsupportfile.file u64 
#12817: 
    push           mm_support.getsupportfile.file u64 
    push           0          u64 
    jumpeq         #12818     u64 
    setargs                   1 0
    push           mm_support.getsupportfile.file u64 
    callfn         &mlibp.checkfile i64 
    jumptrue       #12819     i64 
#12818: 
    setargs                   3 0
    push           ""         u64 
    push           mm_support.getsupportfile.filename u64 
    push           "Can't find include file: # #" u64 
    callproc       &mm_support.loaderror 
#12819: 
    setargs                   1 0
    push           mm_support.getsupportfile.file u64 
    callfn         &mm_support.loadsourcefile i64 
    pop            mm_support.getsupportfile.fileno i64 
    push           1          i64 
    push           &mm_decls.issupportfile 
    push           mm_support.getsupportfile.fileno i64 
    popptroff                 u8 1 0
    push           mm_support.getsupportfile.fileno i64 
    setret                    i64 
    jump           #12814     
#12814: 
    retfn                     i64 
End


Proc mm_support.writemafile:
    param          mm_support.writemafile.leadmodule u64 
    param          mm_support.writemafile.destfile u64 
    local          mm_support.writemafile.filename block:256 
    local          mm_support.writemafile.f u64 
    local          mm_support.writemafile.fileoffsets block:8000 
    local          mm_support.writemafile.headeroffsets block:8000 
    local          mm_support.writemafile.offset i64 
    local          mm_support.writemafile.nn i64 
    local          mm_support.writemafile.newoffset i64 
    local          mm_support.writemafile.i i64 
    procentry                 
    setargs                   2 0
    setargs                   2 0
    push           "ma"       u64 
    push           mm_support.writemafile.leadmodule u64 
    callfn         &mlibp.changeext u64 
    push           &mm_support.writemafile.filename 
    callproc       &strcpy    
    push           mm_support.writemafile.destfile u64 
    jumpfalse      #12821     u64 
    setargs                   2 0
    push           mm_support.writemafile.destfile u64 
    push           &mm_support.writemafile.filename 
    callproc       &strcpy    
#12821: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Writing MA File" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_support.writemafile.filename 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           "wb"       u64 
    push           &mm_support.writemafile.filename 
    callfn         &fopen     u64 
    pop            mm_support.writemafile.f u64 
    push           mm_support.writemafile.f u64 
    jumptrue       #12822     u64 
    setargs                   3 0
    push           ""         u64 
    push           &mm_support.writemafile.filename 
    push           "Can't create ma file #" u64 
    callproc       &mm_support.loaderror 
#12822: 
    setargs                   1 0
    push           mm_support.writemafile.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "mafile"   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_decls.nsourcefiles i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#12823: 
    push           1          i64 
    pop            mm_support.writemafile.i i64 
    push           mm_decls.nsourcefiles i64 
    push           1          i64 
    jumplt         #12824     i64 
#12825: 
    setargs                   1 0
    push           mm_support.writemafile.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   2 0
    push           "3"        u64 
    push           mm_support.writemafile.i i64 
    callproc       &msysp.m$print_i64 
    setargs                   2 0
    push           "16jl"     u64 
    push           &mm_decls.sourcefilenames 
    push           mm_support.writemafile.i i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str 
    setargs                   2 0
    push           "7"        u64 
    push           &mm_decls.sourcefilesizes 
    push           mm_support.writemafile.i i64 
    pushptroff                i64 8 0
    callproc       &msysp.m$print_i64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           mm_support.writemafile.f u64 
    callfn         &mlibp.getfilepos i64 
    push           1          i64 
    add                       i64 
    push           &mm_support.writemafile.headeroffsets 
    push           mm_support.writemafile.i i64 
    popptroff                 i64 8 -8
    setargs                   1 0
    push           mm_support.writemafile.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "           " u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_decls.issupportfile 
    push           mm_support.writemafile.i i64 
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#12826: 
    forup          #12825     i64 1
    opnd           mm_support.writemafile.i 
    opnd           mm_decls.nsourcefiles 
#12824: 
#12827: 
    push           1          i64 
    pop            mm_support.writemafile.i i64 
    push           mm_decls.nsourcefiles i64 
    push           1          i64 
    jumplt         #12828     i64 
#12829: 
    setargs                   1 0
    push           mm_support.writemafile.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "=== # #/# ===" u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           &mm_decls.sourcefilenames 
    push           mm_support.writemafile.i i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_support.writemafile.i i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           mm_decls.nsourcefiles i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           mm_support.writemafile.f u64 
    callfn         &mlibp.getfilepos i64 
    pop            mm_support.writemafile.offset i64 
    push           mm_support.writemafile.offset i64 
    push           &mm_support.writemafile.fileoffsets 
    push           mm_support.writemafile.i i64 
    popptroff                 i64 8 -8
    setargs                   4 0
    push           &mm_decls.sourcefilesizes 
    push           mm_support.writemafile.i i64 
    pushptroff                i64 8 0
    push           mm_support.writemafile.offset i64 
    push           &mm_decls.mafiletext 
    push           mm_support.writemafile.i i64 
    pushptroff                u64 8 0
    push           mm_support.writemafile.f u64 
    callfn         &mlibp.writerandom i64 
    pop            mm_support.writemafile.nn i64 
#12830: 
    forup          #12829     i64 1
    opnd           mm_support.writemafile.i 
    opnd           mm_decls.nsourcefiles 
#12828: 
    setargs                   1 0
    push           mm_support.writemafile.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "=== end ===" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#12831: 
    push           1          i64 
    pop            mm_support.writemafile.i i64 
    push           mm_decls.nsourcefiles i64 
    push           1          i64 
    jumplt         #12832     i64 
#12833: 
    setargs                   2 0
    push           &mm_support.writemafile.headeroffsets 
    push           mm_support.writemafile.i i64 
    pushptroff                i64 8 -8
    push           mm_support.writemafile.f u64 
    callproc       &mlibp.setfilepos 
    setargs                   1 0
    push           mm_support.writemafile.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   2 0
    push           "8"        u64 
    push           &mm_support.writemafile.fileoffsets 
    push           mm_support.writemafile.i i64 
    pushptroff                i64 8 -8
    callproc       &msysp.m$print_i64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#12834: 
    forup          #12833     i64 1
    opnd           mm_support.writemafile.i 
    opnd           mm_decls.nsourcefiles 
#12832: 
    setargs                   1 0
    push           mm_support.writemafile.f u64 
    callproc       &fclose    
#12835: 
    retproc                   
End


Proc mm_support.loadmafile:
    local          mm_support.loadmafile.f u64 
    local          mm_support.loadmafile.kwd block:16 
    local          mm_support.loadmafile.filename block:256 
    local          mm_support.loadmafile.index i64 
    local          mm_support.loadmafile.size i64 
    local          mm_support.loadmafile.offset i64 
    local          mm_support.loadmafile.issupport i64 
    local          mm_support.loadmafile.i i64 
    procentry                 
    setargs                   2 0
    push           "rb"       u64 
    push           mm_decls.mafilename u64 
    callfn         &fopen     u64 
    pop            mm_support.loadmafile.f u64 
    push           mm_support.loadmafile.f u64 
    jumptrue       #12837     u64 
    setargs                   3 0
    push           ""         u64 
    push           mm_decls.mafilename u64 
    push           "Can't open ##" u64 
    callproc       &mm_support.loaderror 
#12837: 
    setargs                   1 0
    push           mm_support.loadmafile.f u64 
    callproc       &msysp.m$read_fileline 
    setargs                   3 0
    push           16         i64 
    push           110        i64 
    push           &mm_support.loadmafile.kwd 
    callproc       &msysp.readstr 
    setargs                   2 0
    push           "mafile"   u64 
    push           &mm_support.loadmafile.kwd 
    callfn         &mlibp.eqstring i64 
    jumptrue       #12838     i64 
    setargs                   3 0
    push           &mm_support.loadmafile.kwd 
    push           mm_decls.mafilename u64 
    push           "Bad sig in ma file: # '#'" u64 
    callproc       &mm_support.loaderror 
#12838: 
    setargs                   1 0
    push           0          i64 
    callfn         &msysp.m$read_i64 i64 
    pop            mm_decls.nmafiles i64 
#12839: 
    push           1          i64 
    pop            mm_support.loadmafile.i i64 
    push           mm_decls.nmafiles i64 
    push           1          i64 
    jumplt         #12840     i64 
#12841: 
    setargs                   1 0
    push           mm_support.loadmafile.f u64 
    callproc       &msysp.m$read_fileline 
    setargs                   1 0
    push           0          i64 
    callfn         &msysp.m$read_i64 i64 
    pop            mm_support.loadmafile.index i64 
    setargs                   3 0
    push           256        i64 
    push           110        i64 
    push           &mm_support.loadmafile.filename 
    callproc       &msysp.readstr 
    setargs                   1 0
    push           0          i64 
    callfn         &msysp.m$read_i64 i64 
    pop            mm_support.loadmafile.size i64 
    setargs                   1 0
    push           0          i64 
    callfn         &msysp.m$read_i64 i64 
    pop            mm_support.loadmafile.offset i64 
    setargs                   1 0
    push           0          i64 
    callfn         &msysp.m$read_i64 i64 
    pop            mm_support.loadmafile.issupport i64 
    setargs                   1 0
    push           &mm_support.loadmafile.filename 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &mm_decls.mafilenames 
    push           mm_support.loadmafile.i i64 
    popptroff                 u64 8 0
    push           mm_support.loadmafile.size i64 
    push           &mm_decls.mafilesizes 
    push           mm_support.loadmafile.i i64 
    popptroff                 i64 8 0
    push           mm_support.loadmafile.offset i64 
    push           &mm_decls.mafileoffsets 
    push           mm_support.loadmafile.i i64 
    popptroff                 i64 8 0
    push           0          i64 
    push           &mm_decls.mafilefileno 
    push           mm_support.loadmafile.i i64 
    popptroff                 u8 1 0
    push           mm_support.loadmafile.issupport i64 
    push           &mm_decls.mafilesupport 
    push           mm_support.loadmafile.i i64 
    popptroff                 u8 1 0
#12842: 
    forup          #12841     i64 1
    opnd           mm_support.loadmafile.i 
    opnd           mm_decls.nmafiles 
#12840: 
    setargs                   1 0
    push           mm_support.loadmafile.f u64 
    callproc       &fclose    
    setargs                   1 0
    push           mm_decls.mafilename u64 
    callfn         &mlibp.readfile u64 
    pop            mm_decls.mafilesource u64 
    push           mm_decls.mafilesource u64 
    jumptrue       #12843     u64 
    setargs                   3 0
    push           ""         u64 
    push           ""         u64 
    push           "MA load?" u64 
    callproc       &mm_support.loaderror 
#12843: 
#12844: 
    push           1          i64 
    pop            mm_support.loadmafile.i i64 
    push           mm_decls.nmafiles i64 
    push           1          i64 
    jumplt         #12845     i64 
#12846: 
    push           &mm_decls.mafilesizes 
    push           mm_support.loadmafile.i i64 
    pushptroff                i64 8 0
    pop            mm_support.loadmafile.size i64 
    push           &mm_decls.mafileoffsets 
    push           mm_support.loadmafile.i i64 
    pushptroff                i64 8 0
    pop            mm_support.loadmafile.offset i64 
    push           mm_decls.mafilesource u64 
    push           mm_support.loadmafile.offset i64 
    addrefoff                 u64 1 0
    push           &mm_decls.mafiletext 
    push           mm_support.loadmafile.i i64 
    popptroff                 u64 8 0
    push           0          u64 
    push           mm_decls.mafilesource u64 
    push           mm_support.loadmafile.offset i64 
    addrefoff                 u64 1 0
    push           mm_support.loadmafile.size i64 
    popptroff                 u8 1 0
#12847: 
    forup          #12846     i64 1
    opnd           mm_support.loadmafile.i 
    opnd           mm_decls.nmafiles 
#12845: 
#12848: 
    retproc                   
End


Proc mm_support.mapimport: u64
    param          mm_support.mapimport.name u64 
    local          mm_support.mapimport.i i64 
    procentry                 
#12850: 
    push           1          i64 
    pop            mm_support.mapimport.i i64 
    push           mm_decls.nmodulemap i64 
    push           1          i64 
    jumplt         #12851     i64 
#12852: 
    setargs                   2 0
    push           &mm_decls.genericmodules 
    push           mm_support.mapimport.i i64 
    pushptroff                u64 8 -8
    push           mm_support.mapimport.name u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #12853     i64 
    push           &mm_decls.actualmodules 
    push           mm_support.mapimport.i i64 
    pushptroff                u64 8 -8
    setret                    u64 
    jump           #12854     
#12853: 
#12855: 
    forup          #12852     i64 1
    opnd           mm_support.mapimport.i 
    opnd           mm_decls.nmodulemap 
#12851: 
    push           mm_support.mapimport.name u64 
    setret                    u64 
    jump           #12854     
#12854: 
    retfn                     u64 
End


Proc mm_support.initbblib:
    local          mm_support.initbblib.av_1 i64 
    local          mm_support.initbblib.i i64 
    procentry                 
#12857: 
    push           1          i64 
    pop            mm_support.initbblib.i i64 
    push           9          i64 
    pop            mm_support.initbblib.av_1 i64 
    push           mm_support.initbblib.av_1 i64 
    push           1          i64 
    jumplt         #12858     i64 
#12859: 
    push           1          i64 
    push           &mm_decls.typestarterset 
    push           &mm_tables.d_typestarterset 
    push           mm_support.initbblib.i i64 
    pushptroff                i64 8 -8
    popptroff                 u8 1 0
#12860: 
    forup          #12859     i64 1
    opnd           mm_support.initbblib.i 
    opnd           mm_support.initbblib.av_1 
#12858: 
#12861: 
    retproc                   
End


Proc mm_lib.newstrec: u64
    local          mm_lib.newstrec.p u64 
    procentry                 
    setargs                   1 0
    push           128        i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            mm_lib.newstrec.p u64 
    push           mm_lib.newstrec.p u64 
    clear                     block:128 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    push           mm_lib.newstrec.p u64 
    push           88         
    popptroff                 u32 1 0
    push           mm_decls.currmoduleno i64 
    push           mm_lib.newstrec.p u64 
    push           94         
    popptroff                 u8 1 0
    push           mm_lib.newstrec.p u64 
    setret                    u64 
    jump           #12863     
#12863: 
    retfn                     u64 
End


Proc mm_lib.getduplnameptr: u64
    param          mm_lib.getduplnameptr.owner u64 
    param          mm_lib.getduplnameptr.symptr u64 
    param          mm_lib.getduplnameptr.id i64 
    local          mm_lib.getduplnameptr.p u64 
    local          mm_lib.getduplnameptr.q u64 
    procentry                 
    setargs                   0 0
    callfn         &mm_lib.newstrec u64 
    pop            mm_lib.getduplnameptr.p u64 
    push           mm_lib.getduplnameptr.symptr u64 
    pushptr                   u64 
    push           mm_lib.getduplnameptr.p u64 
    push           0          
    popptroff                 u64 1 0
    push           mm_lib.getduplnameptr.symptr u64 
    push           76         
    pushptroff                u8 1 0
    push           mm_lib.getduplnameptr.p u64 
    push           76         
    popptroff                 u8 1 0
    push           79         i64 
    push           mm_lib.getduplnameptr.p u64 
    push           77         
    popptroff                 u8 1 0
    push           mm_lib.getduplnameptr.owner u64 
    push           mm_lib.getduplnameptr.p u64 
    push           8          
    popptroff                 u64 1 0
    push           mm_lib.getduplnameptr.id i64 
    push           mm_lib.getduplnameptr.p u64 
    push           78         
    popptroff                 u8 1 0
    push           mm_lib.getduplnameptr.id i64 
    push           12         i64 
    jumpeq         #12865     i64 
    push           mm_lib.getduplnameptr.id i64 
    push           13         i64 
    jumpne         #12866     i64 
#12865: 
#12866: 
    push           mm_lib.getduplnameptr.symptr u64 
    push           40         
    pushptroff                u64 1 0
    push           mm_lib.getduplnameptr.p u64 
    push           40         
    popptroff                 u64 1 0
    push           mm_lib.getduplnameptr.symptr u64 
    push           mm_lib.getduplnameptr.p u64 
    push           48         
    popptroff                 u64 1 0
    push           mm_lib.getduplnameptr.p u64 
    push           mm_lib.getduplnameptr.symptr u64 
    push           40         
    popptroff                 u64 1 0
    push           mm_lib.getduplnameptr.p u64 
    setret                    u64 
    jump           #12867     
#12867: 
    retfn                     u64 
End


Proc mm_lib.adddef:
    param          mm_lib.adddef.owner u64 
    param          mm_lib.adddef.p u64 
    local          mm_lib.adddef.q u64 
    procentry                 
    push           mm_lib.adddef.p u64 
    push           40         
    pushptroff                u64 1 0
    store          mm_lib.adddef.q u64 
    jumpfalse      #12869     u64 
    push           mm_lib.adddef.q u64 
    push           8          
    pushptroff                u64 1 0
    push           mm_lib.adddef.owner u64 
    jumpne         #12870     u64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mm_lib.adddef.q u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "in"       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_lib.adddef.owner u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Duplicate name" u64 
    callproc       &mm_support.serror 
#12870: 
#12869: 
    push           mm_lib.adddef.owner u64 
    push           16         
    pushptroff                u64 1 0
    push           0          u64 
    jumpne         #12871     u64 
    push           mm_lib.adddef.p u64 
    push           mm_lib.adddef.owner u64 
    push           16         
    popptroff                 u64 1 0
    jump           #12872     
#12871: 
    push           mm_lib.adddef.p u64 
    push           mm_lib.adddef.owner u64 
    push           24         
    pushptroff                u64 1 0
    push           32         
    popptroff                 u64 1 0
#12872: 
    push           mm_lib.adddef.p u64 
    push           mm_lib.adddef.owner u64 
    push           24         
    popptroff                 u64 1 0
#12873: 
    retproc                   
End


Proc mm_lib.createname: u64
    param          mm_lib.createname.p u64 
    local          mm_lib.createname.u u64 
    procentry                 
    setargs                   0 0
    callfn         &mm_lib.allocunitrec u64 
    pop            mm_lib.createname.u u64 
    push           3          i64 
    push           mm_lib.createname.u u64 
    push           0          
    popptroff                 u8 1 0
    push           mm_lib.createname.p u64 
    push           mm_lib.createname.u u64 
    push           16         
    popptroff                 u64 1 0
    push           mm_lib.createname.u u64 
    setret                    u64 
    jump           #12875     
#12875: 
    retfn                     u64 
End


Proc mm_lib.createunit0: u64
    param          mm_lib.createunit0.tag i64 
    local          mm_lib.createunit0.u u64 
    procentry                 
    setargs                   0 0
    callfn         &mm_lib.allocunitrec u64 
    pop            mm_lib.createunit0.u u64 
    push           mm_lib.createunit0.tag i64 
    push           mm_lib.createunit0.u u64 
    push           0          
    popptroff                 u8 1 0
    push           mm_lib.createunit0.u u64 
    setret                    u64 
    jump           #12877     
#12877: 
    retfn                     u64 
End


Proc mm_lib.createunit1: u64
    param          mm_lib.createunit1.tag i64 
    param          mm_lib.createunit1.p u64 
    local          mm_lib.createunit1.u u64 
    procentry                 
    setargs                   0 0
    callfn         &mm_lib.allocunitrec u64 
    pop            mm_lib.createunit1.u u64 
    push           mm_lib.createunit1.tag i64 
    push           mm_lib.createunit1.u u64 
    push           0          
    popptroff                 u8 1 0
    push           mm_lib.createunit1.p u64 
    push           mm_lib.createunit1.u u64 
    push           16         
    popptroff                 u64 1 0
    push           1          i64 
    push           mm_lib.createunit1.u u64 
    push           1          
    popptroff                 u8 1 0
    push           mm_lib.createunit1.u u64 
    setret                    u64 
    jump           #12879     
#12879: 
    retfn                     u64 
End


Proc mm_lib.createunit2: u64
    param          mm_lib.createunit2.tag i64 
    param          mm_lib.createunit2.p u64 
    param          mm_lib.createunit2.q u64 
    local          mm_lib.createunit2.u u64 
    procentry                 
    setargs                   0 0
    callfn         &mm_lib.allocunitrec u64 
    pop            mm_lib.createunit2.u u64 
    push           mm_lib.createunit2.tag i64 
    push           mm_lib.createunit2.u u64 
    push           0          
    popptroff                 u8 1 0
    push           mm_lib.createunit2.p u64 
    push           mm_lib.createunit2.u u64 
    push           16         
    popptroff                 u64 1 0
    push           mm_lib.createunit2.q u64 
    push           mm_lib.createunit2.u u64 
    push           24         
    popptroff                 u64 1 0
    push           1          i64 
    push           mm_lib.createunit2.u u64 
    push           1          
    popptroff                 u8 1 0
    push           1          i64 
    push           mm_lib.createunit2.u u64 
    push           2          
    popptroff                 u8 1 0
    push           mm_lib.createunit2.u u64 
    setret                    u64 
    jump           #12881     
#12881: 
    retfn                     u64 
End


Proc mm_lib.createunit3: u64
    param          mm_lib.createunit3.tag i64 
    param          mm_lib.createunit3.p u64 
    param          mm_lib.createunit3.q u64 
    param          mm_lib.createunit3.r u64 
    local          mm_lib.createunit3.u u64 
    procentry                 
    setargs                   0 0
    callfn         &mm_lib.allocunitrec u64 
    pop            mm_lib.createunit3.u u64 
    push           mm_lib.createunit3.tag i64 
    push           mm_lib.createunit3.u u64 
    push           0          
    popptroff                 u8 1 0
    push           mm_lib.createunit3.p u64 
    push           mm_lib.createunit3.u u64 
    push           16         
    popptroff                 u64 1 0
    push           mm_lib.createunit3.q u64 
    push           mm_lib.createunit3.u u64 
    push           24         
    popptroff                 u64 1 0
    push           mm_lib.createunit3.r u64 
    push           mm_lib.createunit3.u u64 
    push           32         
    popptroff                 u64 1 0
    push           1          i64 
    push           mm_lib.createunit3.u u64 
    push           1          
    popptroff                 u8 1 0
    push           1          i64 
    push           mm_lib.createunit3.u u64 
    push           2          
    popptroff                 u8 1 0
    push           1          i64 
    push           mm_lib.createunit3.u u64 
    push           3          
    popptroff                 u8 1 0
    push           mm_lib.createunit3.u u64 
    setret                    u64 
    jump           #12883     
#12883: 
    retfn                     u64 
End


Proc mm_lib.insertunit:
    param          mm_lib.insertunit.p u64 
    param          mm_lib.insertunit.tag i64 
    local          mm_lib.insertunit.q u64 
    local          mm_lib.insertunit.nextunit u64 
    local          mm_lib.insertunit.mode i64 
    procentry                 
    setargs                   0 0
    callfn         &mm_lib.allocunitrec u64 
    pop            mm_lib.insertunit.q u64 
    push           mm_lib.insertunit.p u64 
    pushptr                   block:64 
    push           mm_lib.insertunit.q u64 
    popptr                    block:64 
    push           mm_lib.insertunit.q u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_lib.insertunit.mode i64 
    push           mm_lib.insertunit.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_lib.insertunit.nextunit u64 
    push           0          u64 
    push           mm_lib.insertunit.q u64 
    push           8          
    popptroff                 u64 1 0
    push           mm_lib.insertunit.p u64 
    clear                     block:64 
    push           mm_lib.insertunit.tag i64 
    push           mm_lib.insertunit.p u64 
    push           0          
    popptroff                 u8 1 0
    push           mm_lib.insertunit.q u64 
    push           4          
    pushptroff                u32 1 0
    push           mm_lib.insertunit.p u64 
    push           4          
    popptroff                 u32 1 0
    push           mm_lib.insertunit.q u64 
    push           mm_lib.insertunit.p u64 
    push           16         
    popptroff                 u64 1 0
    push           1          i64 
    push           mm_lib.insertunit.p u64 
    push           1          
    popptroff                 u8 1 0
    push           mm_lib.insertunit.mode i64 
    push           mm_lib.insertunit.p u64 
    push           48         
    popptroff                 i32 1 0
    push           mm_lib.insertunit.nextunit u64 
    push           mm_lib.insertunit.p u64 
    push           8          
    popptroff                 u64 1 0
    push           mm_lib.insertunit.q u64 
    push           59         
    pushptroff                u8 1 0
    push           mm_lib.insertunit.p u64 
    push           59         
    popptroff                 u8 1 0
#12885: 
    retproc                   
End


Proc mm_lib.deleteunit:
    param          mm_lib.deleteunit.p u64 
    param          mm_lib.deleteunit.q u64 
    local          mm_lib.deleteunit.r u64 
    procentry                 
    push           mm_lib.deleteunit.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_lib.deleteunit.r u64 
    push           mm_lib.deleteunit.q u64 
    pushptr                   block:64 
    push           mm_lib.deleteunit.p u64 
    popptr                    block:64 
    push           mm_lib.deleteunit.r u64 
    push           mm_lib.deleteunit.p u64 
    push           8          
    popptroff                 u64 1 0
#12887: 
    retproc                   
End


Proc mm_lib.createconstunit: u64
    param          mm_lib.createconstunit.a u64 
    param          mm_lib.createconstunit.t i64 
    local          mm_lib.createconstunit.u u64 
    procentry                 
    setargs                   0 0
    callfn         &mm_lib.allocunitrec u64 
    pop            mm_lib.createconstunit.u u64 
    push           1          i64 
    push           mm_lib.createconstunit.u u64 
    push           0          
    popptroff                 u8 1 0
    push           mm_lib.createconstunit.a i64 
    push           mm_lib.createconstunit.u u64 
    push           16         
    popptroff                 i64 1 0
    push           mm_lib.createconstunit.t i64 
    push           mm_lib.createconstunit.u u64 
    push           48         
    popptroff                 i32 1 0
    push           mm_lib.createconstunit.t i64 
    push           5          i64 
    setjumpeq      #12889     i64 
    push           3          i64 
    setjumpne      #12890     i64 
#12889: 
    push           mm_lib.createconstunit.a u64 
    pushptr                   i128 
    push           mm_lib.createconstunit.u u64 
    push           16         
    popptroff                 i128 1 0
#12890: 
    push           1          i64 
    push           mm_lib.createconstunit.u u64 
    push           58         
    popptroff                 u8 1 0
    push           mm_lib.createconstunit.u u64 
    setret                    u64 
    jump           #12891     
#12891: 
    retfn                     u64 
End


Proc mm_lib.createstringconstunit: u64
    param          mm_lib.createstringconstunit.s u64 
    param          mm_lib.createstringconstunit.length i64 
    local          mm_lib.createstringconstunit.u u64 
    procentry                 
    setargs                   0 0
    callfn         &mm_lib.allocunitrec u64 
    pop            mm_lib.createstringconstunit.u u64 
    push           1          i64 
    push           mm_lib.createstringconstunit.u u64 
    push           0          
    popptroff                 u8 1 0
    push           mm_lib.createstringconstunit.s u64 
    push           mm_lib.createstringconstunit.u u64 
    push           16         
    popptroff                 u64 1 0
    push           10         i64 
    push           mm_lib.createstringconstunit.u u64 
    push           48         
    popptroff                 i32 1 0
    push           1          i64 
    push           mm_lib.createstringconstunit.u u64 
    push           44         
    popptroff                 u8 1 0
    push           mm_lib.createstringconstunit.length i64 
    push           -1         i64 
    jumpne         #12893     i64 
    setargs                   1 0
    push           mm_lib.createstringconstunit.s u64 
    callfn         &strlen    i64 
    push           mm_lib.createstringconstunit.u u64 
    push           40         
    popptroff                 u32 1 0
    jump           #12894     
#12893: 
    push           mm_lib.createstringconstunit.length i64 
    push           mm_lib.createstringconstunit.u u64 
    push           40         
    popptroff                 u32 1 0
#12894: 
    push           mm_lib.createstringconstunit.u u64 
    setret                    u64 
    jump           #12895     
#12895: 
    retfn                     u64 
End


Proc mm_lib.newtypename: i64
    param          mm_lib.newtypename.a u64 
    param          mm_lib.newtypename.b u64 
    procentry                 
    push           mm_decls.ntypenames i64 
    push           12000      i64 
    jumplt         #12897     i64 
    setargs                   1 0
    push           "Too many type names" u64 
    callproc       &mm_support.serror 
#12897: 
    push           &mm_decls.ntypenames 
    incr                      i64 1
    push           mm_lib.newtypename.a u64 
    push           &mm_decls.typenames 
    push           mm_decls.ntypenames i64 
    addrefoff                 block:32 32 0
    push           8          
    popptroff                 u64 1 0
    push           mm_lib.newtypename.b u64 
    push           &mm_decls.typenames 
    push           mm_decls.ntypenames i64 
    addrefoff                 block:32 32 0
    push           16         
    popptroff                 u64 1 0
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    push           &mm_decls.typenamepos 
    push           mm_decls.ntypenames i64 
    addrefoff                 block:4 4 0
    push           0          
    popptroff                 u32 1 0
    push           mm_decls.ntypenames i64 
    neg                       i64 
    setret                    i64 
    jump           #12898     
#12898: 
    retfn                     i64 
End


Proc mm_lib.createusertype: i64
    param          mm_lib.createusertype.stname u64 
    procentry                 
    push           mm_decls.ntypes i64 
    push           6000       i64 
    jumplt         #12900     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mm_decls.ntypes i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           mm_lib.createusertype.stname u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Too many types" u64 
    callproc       &mm_support.serror 
#12900: 
    push           &mm_decls.ntypes 
    incr                      i64 1
    push           mm_lib.createusertype.stname u64 
    pushptr                   u64 
    push           &mm_decls.ttname 
    push           mm_decls.ntypes i64 
    popptroff                 u64 8 0
    push           mm_lib.createusertype.stname u64 
    push           &mm_decls.ttnamedef 
    push           mm_decls.ntypes i64 
    popptroff                 u64 8 0
    push           0          i64 
    push           &mm_decls.ttbasetype 
    push           mm_decls.ntypes i64 
    popptroff                 i32 4 0
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    push           &mm_decls.ttlineno 
    push           mm_decls.ntypes i64 
    popptroff                 i32 4 0
    push           mm_decls.ntypes i64 
    push           mm_lib.createusertype.stname u64 
    push           72         
    popptroff                 i32 1 0
    push           mm_decls.ntypes i64 
    setret                    i64 
    jump           #12901     
#12901: 
    retfn                     i64 
End


Proc mm_lib.createusertypefromstr: i64
    param          mm_lib.createusertypefromstr.name u64 
    local          mm_lib.createusertypefromstr.stname u64 
    procentry                 
    setargs                   3 0
    push           4          i64 
    setargs                   1 0
    push           mm_lib.createusertypefromstr.name u64 
    callfn         &mm_lex.addnamestr u64 
    push           mm_decls.stmodule u64 
    callfn         &mm_lib.getduplnameptr u64 
    pop            mm_lib.createusertypefromstr.stname u64 
    setargs                   1 0
    push           mm_lib.createusertypefromstr.stname u64 
    callfn         &mm_lib.createusertype i64 
    setret                    i64 
    jump           #12903     
#12903: 
    retfn                     i64 
End


Proc mm_lib.getrangelwbunit: u64
    param          mm_lib.getrangelwbunit.p u64 
    procentry                 
    startmult                 
    push           mm_lib.getrangelwbunit.p u64 
    pushptr                   u8 
    push           20         i64 
    jumpne         #12905     i64 
    push           mm_lib.getrangelwbunit.p u64 
    push           16         
    pushptroff                u64 1 0
    resetmult                 
    jump           #12906     
#12905: 
    setargs                   2 0
    push           mm_lib.getrangelwbunit.p u64 
    push           37         i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_lib.getrangelwbunit.p u64 
    push           201        i64 
    push           mm_lib.getrangelwbunit.p u64 
    push           60         
    popptroff                 u8 1 0
    push           mm_lib.getrangelwbunit.p u64 
    endmult                   
#12906: 
    setret                    u64 
    jump           #12907     
#12907: 
    retfn                     u64 
End


Proc mm_lib.getrangeupbunit: u64
    param          mm_lib.getrangeupbunit.p u64 
    procentry                 
    startmult                 
    push           mm_lib.getrangeupbunit.p u64 
    pushptr                   u8 
    push           20         i64 
    jumpne         #12909     i64 
    push           mm_lib.getrangeupbunit.p u64 
    push           24         
    pushptroff                u64 1 0
    resetmult                 
    jump           #12910     
#12909: 
    setargs                   2 0
    push           mm_lib.getrangeupbunit.p u64 
    push           37         i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_lib.getrangeupbunit.p u64 
    push           202        i64 
    push           mm_lib.getrangeupbunit.p u64 
    push           60         
    popptroff                 u8 1 0
    push           mm_lib.getrangeupbunit.p u64 
    endmult                   
#12910: 
    setret                    u64 
    jump           #12911     
#12911: 
    retfn                     u64 
End


Proc mm_lib.createarraymode: i64
    param          mm_lib.createarraymode.owner u64 
    param          mm_lib.createarraymode.target i64 
    param          mm_lib.createarraymode.dimexpr u64 
    param          mm_lib.createarraymode.typedefx i64 
    local          mm_lib.createarraymode.k i64 
    local          mm_lib.createarraymode.m i64 
    procentry                 
    push           mm_lib.createarraymode.typedefx i64 
    push           0          i64 
    jumpne         #12913     i64 
#12914: 
    push           33         i64 
    pop            mm_lib.createarraymode.k i64 
    push           mm_decls.ntypes i64 
    push           33         i64 
    jumplt         #12915     i64 
#12916: 
    push           &mm_decls.ttusercat 
    push           mm_lib.createarraymode.k i64 
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #12917     i64 
    push           &mm_decls.ttbasetype 
    push           mm_lib.createarraymode.k i64 
    pushptroff                i32 4 0
    push           11         i64 
    jumpne         #12917     i64 
    push           &mm_decls.tttarget 
    push           mm_lib.createarraymode.k i64 
    pushptroff                i32 4 0
    push           mm_lib.createarraymode.target i64 
    jumpne         #12917     i64 
    setargs                   4 0
    push           &mm_decls.ttowner 
    push           mm_lib.createarraymode.k i64 
    pushptroff                u64 8 0
    push           mm_lib.createarraymode.owner u64 
    push           &mm_decls.ttdimexpr 
    push           mm_lib.createarraymode.k i64 
    pushptroff                u64 8 0
    push           mm_lib.createarraymode.dimexpr u64 
    callfn         &mm_lib.sameunit i64 
    jumpfalse      #12917     i64 
    push           mm_lib.createarraymode.k i64 
    setret                    i64 
    jump           #12918     
#12917: 
#12919: 
    forup          #12916     i64 1
    opnd           mm_lib.createarraymode.k 
    opnd           mm_decls.ntypes 
#12915: 
    setargs                   1 0
    setargs                   0 0
    callfn         &mm_lib.nextautotype u64 
    callfn         &mm_lib.createusertypefromstr i64 
    pop            mm_lib.createarraymode.m i64 
    jump           #12920     
#12913: 
    push           mm_lib.createarraymode.typedefx i64 
    pop            mm_lib.createarraymode.m i64 
#12920: 
    push           11         i64 
    push           &mm_decls.ttbasetype 
    push           mm_lib.createarraymode.m i64 
    popptroff                 i32 4 0
    push           1          i64 
    push           &mm_decls.ttlower 
    push           mm_lib.createarraymode.m i64 
    popptroff                 i32 4 0
    push           mm_lib.createarraymode.dimexpr u64 
    push           &mm_decls.ttdimexpr 
    push           mm_lib.createarraymode.m i64 
    popptroff                 u64 8 0
    setargs                   3 0
    push           &mm_decls.tttarget 
    push           mm_lib.createarraymode.m i64 
    addrefoff                 i32 4 0
    push           mm_lib.createarraymode.target i64 
    push           mm_lib.createarraymode.owner u64 
    callproc       &mm_lib.storemode 
    push           mm_lib.createarraymode.owner u64 
    push           &mm_decls.ttowner 
    push           mm_lib.createarraymode.m i64 
    popptroff                 u64 8 0
    push           mm_lib.createarraymode.m i64 
    setret                    i64 
    jump           #12918     
#12918: 
    retfn                     i64 
End


Proc mm_lib.sameunit: i64
    param          mm_lib.sameunit.p u64 
    param          mm_lib.sameunit.q u64 
    param          mm_lib.sameunit.powner u64 
    param          mm_lib.sameunit.qowner u64 
    local          mm_lib.sameunit.d u64 
    local          mm_lib.sameunit.e u64 
    procentry                 
    push           mm_lib.sameunit.p u64 
    push           mm_lib.sameunit.q u64 
    jumpne         #12922     u64 
    push           1          i64 
    setret                    i64 
    jump           #12923     
#12922: 
    push           mm_lib.sameunit.p u64 
    push           0          u64 
    jumpeq         #12924     u64 
    push           mm_lib.sameunit.q u64 
    push           0          u64 
    jumpne         #12925     u64 
#12924: 
    push           0          i64 
    setret                    i64 
    jump           #12923     
#12925: 
    push           mm_lib.sameunit.p u64 
    pushptr                   u8 
    push           mm_lib.sameunit.q u64 
    pushptr                   u8 
    jumpeq         #12926     i64 
    push           0          i64 
    setret                    i64 
    jump           #12923     
#12926: 
    push           mm_lib.sameunit.p u64 
    pushptr                   u8 
    push           1          i64 
    casejumpeq     #12927     i64 0
    push           20         i64 
    casejumpeq     #12928     i64 0
    push           28         i64 
    casejumpeq     #12928     i64 0
    push           3          i64 
    casejumpeq     #12929     i64 0
    popstack                  i64 
    jump           #12930     
#12927: 
    push           mm_lib.sameunit.p u64 
    push           16         
    pushptroff                i64 1 0
    push           mm_lib.sameunit.q u64 
    push           16         
    pushptroff                i64 1 0
    seteq                     i64 
    setret                    i64 
    jump           #12923     
    jump           #12931     
#12928: 
    startmult                 
    setargs                   4 0
    push           0          u64 
    push           0          u64 
    push           mm_lib.sameunit.q u64 
    push           16         
    pushptroff                u64 1 0
    push           mm_lib.sameunit.p u64 
    push           16         
    pushptroff                u64 1 0
    callfn         &mm_lib.sameunit i64 
    jumpfalse      #12932     i64 
    setargs                   4 0
    push           0          u64 
    push           0          u64 
    push           mm_lib.sameunit.q u64 
    push           24         
    pushptroff                u64 1 0
    push           mm_lib.sameunit.p u64 
    push           24         
    pushptroff                u64 1 0
    callfn         &mm_lib.sameunit i64 
    jumpfalse      #12932     i64 
    push           1          
    resetmult                 
    jump           #12933     
#12932: 
    push           0          
    endmult                   
#12933: 
    setret                    i64 
    jump           #12923     
    jump           #12931     
#12929: 
    push           mm_lib.sameunit.p u64 
    push           16         
    pushptroff                u64 1 0
    push           mm_lib.sameunit.q u64 
    push           16         
    pushptroff                u64 1 0
    jumpne         #12934     u64 
    push           mm_lib.sameunit.powner u64 
    push           mm_lib.sameunit.qowner u64 
    jumpne         #12934     u64 
    push           1          i64 
    setret                    i64 
    jump           #12923     
#12934: 
    jump           #12931     
#12930: 
#12931: 
    push           0          i64 
    setret                    i64 
    jump           #12923     
#12923: 
    retfn                     i64 
End


Proc mm_lib.createarraymodek: i64
    param          mm_lib.createarraymodek.owner u64 
    param          mm_lib.createarraymodek.target i64 
    param          mm_lib.createarraymodek.lower i64 
    param          mm_lib.createarraymodek.length i64 
    param          mm_lib.createarraymodek.typedefx i64 
    local          mm_lib.createarraymodek.atype i64 
    local          mm_lib.createarraymodek.k i64 
    local          mm_lib.createarraymodek.m i64 
    procentry                 
    push           11         i64 
    pop            mm_lib.createarraymodek.atype i64 
    push           mm_lib.createarraymodek.typedefx i64 
    push           0          i64 
    jumpne         #12936     i64 
    setargs                   1 0
    setargs                   0 0
    callfn         &mm_lib.nextautotype u64 
    callfn         &mm_lib.createusertypefromstr i64 
    pop            mm_lib.createarraymodek.m i64 
    jump           #12937     
#12936: 
    push           mm_lib.createarraymodek.typedefx i64 
    pop            mm_lib.createarraymodek.m i64 
#12937: 
    push           mm_lib.createarraymodek.atype i64 
    push           &mm_decls.ttbasetype 
    push           mm_lib.createarraymodek.m i64 
    popptroff                 i32 4 0
    push           mm_lib.createarraymodek.lower i64 
    push           &mm_decls.ttlower 
    push           mm_lib.createarraymodek.m i64 
    popptroff                 i32 4 0
    push           mm_lib.createarraymodek.length i64 
    push           &mm_decls.ttlength 
    push           mm_lib.createarraymodek.m i64 
    popptroff                 i32 4 0
    push           mm_lib.createarraymodek.target i64 
    push           0          i64 
    jumpge         #12938     i64 
    setargs                   1 0
    push           "CREATEARRAYMODEK/TARGET NOT RESOLVED" u64 
    callproc       &mm_support.serror 
#12938: 
    push           mm_lib.createarraymodek.length i64 
    push           &mm_decls.ttsize 
    push           mm_lib.createarraymodek.target i64 
    pushptroff                i32 4 0
    mul                       i64 
    push           &mm_decls.ttsize 
    push           mm_lib.createarraymodek.m i64 
    popptroff                 i32 4 0
    setargs                   3 0
    push           &mm_decls.tttarget 
    push           mm_lib.createarraymodek.m i64 
    addrefoff                 i32 4 0
    push           mm_lib.createarraymodek.target i64 
    push           mm_lib.createarraymodek.owner u64 
    callproc       &mm_lib.storemode 
    push           mm_lib.createarraymodek.owner u64 
    push           &mm_decls.ttowner 
    push           mm_lib.createarraymodek.m i64 
    popptroff                 u64 8 0
    push           mm_lib.createarraymodek.m i64 
    setret                    i64 
    jump           #12939     
#12939: 
    retfn                     i64 
End


Proc mm_lib.nextautotype: u64
    procentry                 
    setargs                   1 0
    push           &mm_lib.nextautotype.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "$T"       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           &mm_lib.autotypeno 
    incrload                  i64 1
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           &mm_lib.nextautotype.str 
    setret                    u64 
    jump           #12941     
#12941: 
    retfn                     u64 
End


Proc mm_lib.createslicemode: i64
    param          mm_lib.createslicemode.owner u64 
    param          mm_lib.createslicemode.slicetype i64 
    param          mm_lib.createslicemode.target i64 
    param          mm_lib.createslicemode.dimexpr u64 
    param          mm_lib.createslicemode.typedefx i64 
    local          mm_lib.createslicemode.k i64 
    local          mm_lib.createslicemode.m i64 
    procentry                 
    push           mm_lib.createslicemode.typedefx i64 
    push           0          i64 
    jumpne         #12943     i64 
    setargs                   1 0
    setargs                   0 0
    callfn         &mm_lib.nextautotype u64 
    callfn         &mm_lib.createusertypefromstr i64 
    pop            mm_lib.createslicemode.m i64 
    jump           #12944     
#12943: 
    push           mm_lib.createslicemode.typedefx i64 
    pop            mm_lib.createslicemode.m i64 
#12944: 
    push           mm_lib.createslicemode.slicetype i64 
    push           &mm_decls.ttbasetype 
    push           mm_lib.createslicemode.m i64 
    popptroff                 i32 4 0
    push           mm_lib.createslicemode.dimexpr u64 
    jumpfalse      #12945     u64 
    push           mm_lib.createslicemode.dimexpr u64 
    push           &mm_decls.ttdimexpr 
    push           mm_lib.createslicemode.m i64 
    popptroff                 u64 8 0
    jump           #12946     
#12945: 
    push           1          i64 
    push           &mm_decls.ttlower 
    push           mm_lib.createslicemode.m i64 
    popptroff                 i32 4 0
#12946: 
    setargs                   3 0
    push           &mm_decls.tttarget 
    push           mm_lib.createslicemode.m i64 
    addrefoff                 i32 4 0
    push           mm_lib.createslicemode.target i64 
    push           mm_lib.createslicemode.owner u64 
    callproc       &mm_lib.storemode 
    push           mm_lib.createslicemode.owner u64 
    push           &mm_decls.ttowner 
    push           mm_lib.createslicemode.m i64 
    popptroff                 u64 8 0
    push           mm_lib.createslicemode.m i64 
    setret                    i64 
    jump           #12947     
#12947: 
    retfn                     i64 
End


Proc mm_lib.createslicemodek: i64
    param          mm_lib.createslicemodek.owner u64 
    param          mm_lib.createslicemodek.target i64 
    param          mm_lib.createslicemodek.lower i64 
    param          mm_lib.createslicemodek.typedefx i64 
    local          mm_lib.createslicemodek.k i64 
    local          mm_lib.createslicemodek.m i64 
    procentry                 
    push           mm_lib.createslicemodek.typedefx i64 
    push           0          i64 
    jumpne         #12949     i64 
    setargs                   1 0
    setargs                   0 0
    callfn         &mm_lib.nextautotype u64 
    callfn         &mm_lib.createusertypefromstr i64 
    pop            mm_lib.createslicemodek.m i64 
    jump           #12950     
#12949: 
    push           mm_lib.createslicemodek.typedefx i64 
    pop            mm_lib.createslicemodek.m i64 
#12950: 
    push           12         i64 
    push           &mm_decls.ttbasetype 
    push           mm_lib.createslicemodek.m i64 
    popptroff                 i32 4 0
    push           mm_lib.createslicemodek.lower i64 
    push           &mm_decls.ttlower 
    push           mm_lib.createslicemodek.m i64 
    popptroff                 i32 4 0
    setargs                   3 0
    push           &mm_decls.tttarget 
    push           mm_lib.createslicemodek.m i64 
    addrefoff                 i32 4 0
    push           mm_lib.createslicemodek.target i64 
    push           mm_lib.createslicemodek.owner u64 
    callproc       &mm_lib.storemode 
    push           mm_lib.createslicemodek.owner u64 
    push           &mm_decls.ttowner 
    push           mm_lib.createslicemodek.m i64 
    popptroff                 u64 8 0
    push           mm_lib.createslicemodek.m i64 
    setret                    i64 
    jump           #12951     
#12951: 
    retfn                     i64 
End


Proc mm_lib.createrefmode: i64
    param          mm_lib.createrefmode.owner u64 
    param          mm_lib.createrefmode.target i64 
    param          mm_lib.createrefmode.typedefx i64 
    local          mm_lib.createrefmode.k i64 
    local          mm_lib.createrefmode.m i64 
    procentry                 
    push           mm_lib.createrefmode.typedefx i64 
    push           0          i64 
    jumpne         #12953     i64 
#12954: 
    push           33         i64 
    pop            mm_lib.createrefmode.k i64 
    push           mm_decls.ntypes i64 
    push           33         i64 
    jumplt         #12955     i64 
#12956: 
    push           &mm_decls.ttusercat 
    push           mm_lib.createrefmode.k i64 
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #12957     i64 
    push           &mm_decls.ttbasetype 
    push           mm_lib.createrefmode.k i64 
    pushptroff                i32 4 0
    push           9          i64 
    jumpne         #12957     i64 
    push           &mm_decls.tttarget 
    push           mm_lib.createrefmode.k i64 
    pushptroff                i32 4 0
    push           mm_lib.createrefmode.target i64 
    jumpne         #12957     i64 
    push           mm_lib.createrefmode.k i64 
    setret                    i64 
    jump           #12958     
#12957: 
#12959: 
    forup          #12956     i64 1
    opnd           mm_lib.createrefmode.k 
    opnd           mm_decls.ntypes 
#12955: 
    setargs                   1 0
    setargs                   0 0
    callfn         &mm_lib.nextautotype u64 
    callfn         &mm_lib.createusertypefromstr i64 
    pop            mm_lib.createrefmode.m i64 
    jump           #12960     
#12953: 
    push           mm_lib.createrefmode.typedefx i64 
    pop            mm_lib.createrefmode.m i64 
#12960: 
    setargs                   3 0
    push           &mm_decls.tttarget 
    push           mm_lib.createrefmode.m i64 
    addrefoff                 i32 4 0
    push           mm_lib.createrefmode.target i64 
    push           mm_lib.createrefmode.owner u64 
    callproc       &mm_lib.storemode 
    push           9          i64 
    push           &mm_decls.ttbasetype 
    push           mm_lib.createrefmode.m i64 
    popptroff                 i32 4 0
    push           &mm_decls.ttsize 
    push           9          i64 
    pushptroff                i32 4 0
    push           &mm_decls.ttsize 
    push           mm_lib.createrefmode.m i64 
    popptroff                 i32 4 0
    push           1          i64 
    push           &mm_decls.ttisref 
    push           mm_lib.createrefmode.m i64 
    popptroff                 u8 1 0
    push           mm_lib.createrefmode.m i64 
    setret                    i64 
    jump           #12958     
#12958: 
    retfn                     i64 
End


Proc mm_lib.createrefprocmode: i64
    param          mm_lib.createrefprocmode.owner u64 
    param          mm_lib.createrefprocmode.stproc u64 
    param          mm_lib.createrefprocmode.paramlist u64 
    param          mm_lib.createrefprocmode.kwd i64 
    param          mm_lib.createrefprocmode.prettype i64 
    param          mm_lib.createrefprocmode.typedefx i64 
    local          mm_lib.createrefprocmode.m i64 
    local          mm_lib.createrefprocmode.mproc i64 
    procentry                 
    setargs                   1 0
    push           mm_lib.createrefprocmode.stproc u64 
    callfn         &mm_lib.createusertype i64 
    pop            mm_lib.createrefprocmode.mproc i64 
    push           mm_lib.createrefprocmode.paramlist u64 
    push           mm_lib.createrefprocmode.stproc u64 
    push           104        
    popptroff                 u64 1 0
    push           mm_lib.createrefprocmode.prettype i64 
    push           mm_lib.createrefprocmode.stproc u64 
    push           72         
    popptroff                 i32 1 0
    push           27         i64 
    push           &mm_decls.ttbasetype 
    push           mm_lib.createrefprocmode.mproc i64 
    popptroff                 i32 4 0
    push           mm_lib.createrefprocmode.typedefx i64 
    push           0          i64 
    jumpne         #12962     i64 
    setargs                   1 0
    setargs                   0 0
    callfn         &mm_lib.nextautotype u64 
    callfn         &mm_lib.createusertypefromstr i64 
    pop            mm_lib.createrefprocmode.m i64 
    jump           #12963     
#12962: 
    push           mm_lib.createrefprocmode.typedefx i64 
    pop            mm_lib.createrefprocmode.m i64 
#12963: 
    push           mm_lib.createrefprocmode.mproc i64 
    push           &mm_decls.tttarget 
    push           mm_lib.createrefprocmode.m i64 
    popptroff                 i32 4 0
    push           9          i64 
    push           &mm_decls.ttbasetype 
    push           mm_lib.createrefprocmode.m i64 
    popptroff                 i32 4 0
    push           &mm_decls.ttsize 
    push           9          i64 
    pushptroff                i32 4 0
    push           &mm_decls.ttsize 
    push           mm_lib.createrefprocmode.m i64 
    popptroff                 i32 4 0
    push           1          i64 
    push           &mm_decls.ttisref 
    push           mm_lib.createrefprocmode.m i64 
    popptroff                 u8 1 0
    push           mm_lib.createrefprocmode.m i64 
    setret                    i64 
    jump           #12964     
#12964: 
    retfn                     i64 
End


Proc mm_lib.copyttvalues:
    param          mm_lib.copyttvalues.dest i64 
    param          mm_lib.copyttvalues.source i64 
    procentry                 
    push           &mm_decls.ttisint 
    push           mm_lib.copyttvalues.source i64 
    pushptroff                u8 1 0
    push           &mm_decls.ttisint 
    push           mm_lib.copyttvalues.dest i64 
    popptroff                 u8 1 0
    push           &mm_decls.ttisword 
    push           mm_lib.copyttvalues.source i64 
    pushptroff                u8 1 0
    push           &mm_decls.ttisword 
    push           mm_lib.copyttvalues.dest i64 
    popptroff                 u8 1 0
    push           &mm_decls.ttisreal 
    push           mm_lib.copyttvalues.source i64 
    pushptroff                u8 1 0
    push           &mm_decls.ttisreal 
    push           mm_lib.copyttvalues.dest i64 
    popptroff                 u8 1 0
    push           &mm_decls.ttisinteger 
    push           mm_lib.copyttvalues.source i64 
    pushptroff                u8 1 0
    push           &mm_decls.ttisinteger 
    push           mm_lib.copyttvalues.dest i64 
    popptroff                 u8 1 0
    push           &mm_decls.ttisallnum 
    push           mm_lib.copyttvalues.source i64 
    pushptroff                u8 1 0
    push           &mm_decls.ttisallnum 
    push           mm_lib.copyttvalues.dest i64 
    popptroff                 u8 1 0
    push           &mm_decls.ttismainnum 
    push           mm_lib.copyttvalues.source i64 
    pushptroff                u8 1 0
    push           &mm_decls.ttismainnum 
    push           mm_lib.copyttvalues.dest i64 
    popptroff                 u8 1 0
    push           &mm_decls.ttisshort 
    push           mm_lib.copyttvalues.source i64 
    pushptroff                u8 1 0
    push           &mm_decls.ttisshort 
    push           mm_lib.copyttvalues.dest i64 
    popptroff                 u8 1 0
    push           &mm_decls.ttisref 
    push           mm_lib.copyttvalues.source i64 
    pushptroff                u8 1 0
    push           &mm_decls.ttisref 
    push           mm_lib.copyttvalues.dest i64 
    popptroff                 u8 1 0
#12966: 
    retproc                   
End


Proc mm_lib.setnameptr:
    param          mm_lib.setnameptr.p u64 
    procentry                 
    push           mm_lib.setnameptr.p u64 
    push           mm_lib.setnameptr.p u64 
    push           16         
    pushptroff                u64 1 0
    push           64         
    popptroff                 u64 1 0
#12968: 
    retproc                   
End


Proc mm_lib.getdottedname: u64
    param          mm_lib.getdottedname.p u64 
    local          mm_lib.getdottedname.str2 block:256 
    local          mm_lib.getdottedname.owner u64 
    procentry                 
    setargs                   2 0
    push           mm_lib.getdottedname.p u64 
    pushptr                   u64 
    push           &mm_lib.getdottedname.str 
    callproc       &strcpy    
    push           mm_lib.getdottedname.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_lib.getdottedname.owner u64 
    jump           #12970     
#12971: 
    setargs                   2 0
    push           &mm_lib.getdottedname.str 
    push           &mm_lib.getdottedname.str2 
    callproc       &strcpy    
    setargs                   2 0
    push           mm_lib.getdottedname.owner u64 
    pushptr                   u64 
    push           &mm_lib.getdottedname.str 
    callproc       &strcpy    
    setargs                   2 0
    push           "."        u64 
    push           &mm_lib.getdottedname.str 
    callproc       &strcat    
    setargs                   2 0
    push           &mm_lib.getdottedname.str2 
    push           &mm_lib.getdottedname.str 
    callproc       &strcat    
    push           mm_lib.getdottedname.owner u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_lib.getdottedname.owner u64 
#12970: 
    push           mm_lib.getdottedname.owner u64 
    jumpfalse      #12972     u64 
    push           mm_lib.getdottedname.owner u64 
    push           78         
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #12971     i64 
#12972: 
#12973: 
    push           &mm_lib.getdottedname.str 
    setret                    u64 
    jump           #12974     
#12974: 
    retfn                     u64 
End


Proc mm_lib.getavname: u64
    param          mm_lib.getavname.owner u64 
    param          mm_lib.getavname.id i64 
    local          mm_lib.getavname.p u64 
    local          mm_lib.getavname.str block:32 
    local          mm_lib.getavname.name u64 
    procentry                 
    push           mm_lib.getavname.id i64 
    push           12         i64 
    jumpne         #12976     i64 
    push           mm_lib.getavname.owner u64 
    push           78         
    pushptroff                u8 1 0
    push           5          i64 
    jumpeq         #12976     i64 
    setargs                   1 0
    push           "Auto frame not in proc" u64 
    callproc       &mm_support.serror 
#12976: 
    push           mm_lib.getavname.id i64 
    push           12         i64 
    jumpne         #12977     i64 
    setargs                   1 0
    push           &mm_lib.getavname.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "av_"      u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           &mm_lib.nextavindex 
    incrload                  i64 1
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #12978     
#12977: 
    setargs                   1 0
    push           &mm_lib.getavname.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "sv_"      u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_lib.nextsvindex 
    incrload                  i64 1
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#12978: 
    setargs                   1 0
    push           &mm_lib.getavname.str 
    callfn         &mlibp.pcm_copyheapstring u64 
    pop            mm_lib.getavname.name u64 
    setargs                   1 0
    push           mm_lib.getavname.name u64 
    callproc       &mm_lex.addnamestr 
    setargs                   3 0
    push           mm_lib.getavname.id i64 
    setargs                   1 0
    push           mm_lib.getavname.name u64 
    callfn         &mm_lex.addnamestr u64 
    push           mm_lib.getavname.owner u64 
    callfn         &mm_lib.getduplnameptr u64 
    pop            mm_lib.getavname.p u64 
    push           1          u64 
    push           mm_lib.getavname.p u64 
    push           92         
    addrefoff                 u64 1 0
    push           3          i64 
    popdotindex               u16 
    push           4          i64 
    push           mm_lib.getavname.p u64 
    push           72         
    popptroff                 i32 1 0
    setargs                   2 0
    push           mm_lib.getavname.p u64 
    push           mm_lib.getavname.owner u64 
    callproc       &mm_lib.adddef 
    push           mm_lib.getavname.p u64 
    setret                    u64 
    jump           #12979     
#12979: 
    retfn                     u64 
End


Proc mm_lib.unionstr_clear:
    param          mm_lib.unionstr_clear.u u64 
    procentry                 
    push           0          u64 
    push           mm_lib.unionstr_clear.u u64 
    popptr                    u64 
#12981: 
    retproc                   
End


Proc mm_lib.unionstr_append:
    param          mm_lib.unionstr_append.u u64 
    param          mm_lib.unionstr_append.c i64 
    procentry                 
    push           mm_lib.unionstr_append.u u64 
    push           7          
    pushptroff                u8 1 0
    push           6          i64 
    jumpne         #12983     i64 
    setargs                   1 0
    push           "Uflags overflow/a" u64 
    callproc       &mm_support.serror 
#12983: 
    push           mm_lib.unionstr_append.u u64 
    push           7          
    addrefoff                 u64 1 0
    incr                      u8 1
    push           mm_lib.unionstr_append.c i64 
    push           mm_lib.unionstr_append.u u64 
    push           mm_lib.unionstr_append.u u64 
    push           7          
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
#12984: 
    retproc                   
End


Proc mm_lib.unionstr_concat:
    param          mm_lib.unionstr_concat.u u64 
    param          mm_lib.unionstr_concat.v u64 
    local          mm_lib.unionstr_concat.ulen i64 
    local          mm_lib.unionstr_concat.vlen i64 
    local          mm_lib.unionstr_concat.i i64 
    procentry                 
    push           mm_lib.unionstr_concat.u u64 
    push           7          
    pushptroff                u8 1 0
    pop            mm_lib.unionstr_concat.ulen i64 
    push           mm_lib.unionstr_concat.v u64 
    push           7          
    pushptroff                u8 1 0
    pop            mm_lib.unionstr_concat.vlen i64 
    push           mm_lib.unionstr_concat.ulen i64 
    push           mm_lib.unionstr_concat.vlen i64 
    add                       i64 
    push           7          i64 
    jumple         #12986     i64 
    setargs                   1 0
    push           "Uflags overflow/c" u64 
    callproc       &mm_support.serror 
#12986: 
#12987: 
    push           1          i64 
    pop            mm_lib.unionstr_concat.i i64 
    push           mm_lib.unionstr_concat.vlen i64 
    push           1          i64 
    jumplt         #12988     i64 
#12989: 
    push           mm_lib.unionstr_concat.v u64 
    push           mm_lib.unionstr_concat.i i64 
    pushptroff                u8 1 -1
    push           mm_lib.unionstr_concat.u u64 
    push           mm_lib.unionstr_concat.i i64 
    push           mm_lib.unionstr_concat.ulen i64 
    add                       i64 
    popptroff                 u8 1 -1
#12990: 
    forup          #12989     i64 1
    opnd           mm_lib.unionstr_concat.i 
    opnd           mm_lib.unionstr_concat.vlen 
#12988: 
    push           mm_lib.unionstr_concat.ulen i64 
    push           mm_lib.unionstr_concat.vlen i64 
    add                       i64 
    push           mm_lib.unionstr_concat.u u64 
    push           7          
    popptroff                 u8 1 0
#12991: 
    retproc                   
End


Proc mm_lib.unionstr_last: i64
    param          mm_lib.unionstr_last.u u64 
    procentry                 
    push           mm_lib.unionstr_last.u u64 
    push           7          
    pushptroff                u8 1 0
    jumpfalse      #12993     i64 
    push           mm_lib.unionstr_last.u u64 
    push           mm_lib.unionstr_last.u u64 
    push           7          
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    setret                    i64 
    jump           #12994     
#12993: 
    push           0          i64 
    setret                    i64 
    jump           #12994     
#12994: 
    retfn                     i64 
End


Proc mm_lib.unionstr_copy:
    param          mm_lib.unionstr_copy.u u64 
    param          mm_lib.unionstr_copy.v u64 
    procentry                 
    setargs                   3 0
    push           8          u64 
    push           mm_lib.unionstr_copy.v u64 
    push           mm_lib.unionstr_copy.u u64 
    callproc       &memcpy    
#12996: 
    retproc                   
End


Proc mm_lib.createrecordmode: i64
    param          mm_lib.createrecordmode.owner u64 
    param          mm_lib.createrecordmode.typedefx i64 
    local          mm_lib.createrecordmode.m i64 
    procentry                 
    push           mm_lib.createrecordmode.typedefx i64 
    push           0          i64 
    jumpne         #12998     i64 
    setargs                   1 0
    push           mm_lib.createrecordmode.owner u64 
    callfn         &mm_lib.createusertype i64 
    pop            mm_lib.createrecordmode.m i64 
    jump           #12999     
#12998: 
    push           mm_lib.createrecordmode.typedefx i64 
    pop            mm_lib.createrecordmode.m i64 
#12999: 
    push           13         i64 
    push           &mm_decls.ttbasetype 
    push           mm_lib.createrecordmode.m i64 
    popptroff                 i32 4 0
    push           1          i64 
    push           &mm_decls.ttusercat 
    push           mm_lib.createrecordmode.m i64 
    popptroff                 u8 1 0
    push           mm_lib.createrecordmode.m i64 
    setret                    i64 
    jump           #13000     
#13000: 
    retfn                     i64 
End


Proc mm_lib.createtuplemode: i64
    param          mm_lib.createtuplemode.owner u64 
    param          mm_lib.createtuplemode.elements u128 
    param          mm_lib.createtuplemode.typedefx i64 
    local          mm_lib.createtuplemode.m i64 
    local          mm_lib.createtuplemode.av_1 i64 
    local          mm_lib.createtuplemode.i i64 
    procentry                 
    push           mm_lib.createtuplemode.typedefx i64 
    push           0          i64 
    jumpne         #13002     i64 
    setargs                   1 0
    push           mm_lib.createtuplemode.owner u64 
    callfn         &mm_lib.createusertype i64 
    pop            mm_lib.createtuplemode.m i64 
    jump           #13003     
#13002: 
    push           mm_lib.createtuplemode.typedefx i64 
    pop            mm_lib.createtuplemode.m i64 
#13003: 
    push           31         i64 
    push           &mm_decls.ttbasetype 
    push           mm_lib.createtuplemode.m i64 
    popptroff                 i32 4 0
    push           1          i64 
    push           &mm_decls.ttusercat 
    push           mm_lib.createtuplemode.m i64 
    popptroff                 u8 1 0
    push           mm_lib.createtuplemode.elements u128 
    len                       i64 
    push           &mm_decls.ttlength 
    push           mm_lib.createtuplemode.m i64 
    popptroff                 i32 4 0
    setargs                   1 0
    push           mm_lib.createtuplemode.elements u128 
    len                       i64 
    push           4          i64 
    mul                       i64 
    callfn         &mlibp.pcm_alloc u64 
    push           &mm_decls.ttmult 
    push           mm_lib.createtuplemode.m i64 
    popptroff                 u64 8 0
#13004: 
    push           1          i64 
    pop            mm_lib.createtuplemode.i i64 
    push           mm_lib.createtuplemode.elements u128 
    len                       i64 
    pop            mm_lib.createtuplemode.av_1 i64 
    push           mm_lib.createtuplemode.av_1 i64 
    push           1          i64 
    jumplt         #13005     i64 
#13006: 
    setargs                   3 0
    push           &mm_decls.ttmult 
    push           mm_lib.createtuplemode.m i64 
    pushptroff                u64 8 0
    push           mm_lib.createtuplemode.i i64 
    addrefoff                 i32 4 -4
    push           mm_lib.createtuplemode.elements u128 
    sliceptr                  u64 
    push           mm_lib.createtuplemode.i i64 
    pushptroff                i64 8 -8
    push           mm_lib.createtuplemode.owner u64 
    callproc       &mm_lib.storemode 
#13007: 
    forup          #13006     i64 1
    opnd           mm_lib.createtuplemode.i 
    opnd           mm_lib.createtuplemode.av_1 
#13005: 
    push           mm_lib.createtuplemode.m i64 
    setret                    i64 
    jump           #13008     
#13008: 
    retfn                     i64 
End


Proc mm_lib.createenummode: i64
    param          mm_lib.createenummode.owner u64 
    param          mm_lib.createenummode.typedefx i64 
    local          mm_lib.createenummode.m i64 
    procentry                 
    push           mm_lib.createenummode.typedefx i64 
    push           0          i64 
    jumpne         #13010     i64 
    setargs                   1 0
    push           mm_lib.createenummode.owner u64 
    callfn         &mm_lib.createusertype i64 
    pop            mm_lib.createenummode.m i64 
    jump           #13011     
#13010: 
    push           mm_lib.createenummode.typedefx i64 
    pop            mm_lib.createenummode.m i64 
#13011: 
    push           24         i64 
    push           &mm_decls.ttbasetype 
    push           mm_lib.createenummode.m i64 
    popptroff                 i32 4 0
    push           1          i64 
    push           &mm_decls.ttusercat 
    push           mm_lib.createenummode.m i64 
    popptroff                 u8 1 0
    push           mm_lib.createenummode.m i64 
    setret                    i64 
    jump           #13012     
#13012: 
    retfn                     i64 
End


Proc mm_lib.convertstring:
    param          mm_lib.convertstring.s u64 
    param          mm_lib.convertstring.t u64 
    local          mm_lib.convertstring.c i64 
    procentry                 
    jump           #13014     
#13015: 
    push           mm_lib.convertstring.c i64 
    switch         #13016     7 92
    opnd           #13017     
#13016: 
    switchlabel    #13018     
    switchlabel    #13018     
    switchlabel    #13019     
    switchlabel    #13020     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13021     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13018     
    switchlabel    #13018     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13022     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13017     
    switchlabel    #13023     
    endswitch                 
#13022: 
    push           92         u64 
    push           &mm_lib.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           34         u64 
    push           &mm_lib.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    jump           #13024     
#13020: 
    push           92         u64 
    push           &mm_lib.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           110        u64 
    push           &mm_lib.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    jump           #13024     
#13021: 
    push           92         u64 
    push           &mm_lib.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           99         u64 
    push           &mm_lib.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    jump           #13024     
#13019: 
    push           92         u64 
    push           &mm_lib.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           116        u64 
    push           &mm_lib.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    jump           #13024     
#13023: 
    push           92         u64 
    push           &mm_lib.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           92         u64 
    push           &mm_lib.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    jump           #13024     
#13018: 
    push           60         u64 
    push           &mm_lib.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           mm_lib.convertstring.c i64 
    push           10         i64 
    idiv                      i64 
    push           48         i64 
    add                       u64 
    push           &mm_lib.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           mm_lib.convertstring.c i64 
    push           10         i64 
    irem                      i64 
    push           48         i64 
    add                       u64 
    push           &mm_lib.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    push           62         u64 
    push           &mm_lib.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
    jump           #13024     
#13017: 
    push           mm_lib.convertstring.c u64 
    push           &mm_lib.convertstring.t 
    loadincr                  u64 1
    popptr                    u8 
#13024: 
#13014: 
    push           &mm_lib.convertstring.s 
    loadincr                  u64 1
    pushptr                   u8 
    store          mm_lib.convertstring.c i64 
    jumptrue       #13015     i64 
#13025: 
    push           0          u64 
    push           mm_lib.convertstring.t u64 
    popptr                    u8 
#13026: 
    retproc                   
End


Proc mm_lib.strexpr: u64
    param          mm_lib.strexpr.p u64 
    procentry                 
    setargs                   1 0
    push           mm_lib.exprstr u64 
    callproc       &mlibp.gs_init 
    setargs                   2 0
    push           mm_lib.strexpr.p u64 
    push           mm_lib.exprstr u64 
    callproc       &mm_lib.jeval 
    push           mm_lib.exprstr u64 
    setret                    u64 
    jump           #13028     
#13028: 
    retfn                     u64 
End


Proc mm_lib.jeval:
    param          mm_lib.jeval.dest u64 
    param          mm_lib.jeval.p u64 
    local          mm_lib.jeval.q u64 
    local          mm_lib.jeval.a u64 
    local          mm_lib.jeval.b u64 
    local          mm_lib.jeval.str block:500 
    procentry                 
    push           mm_lib.jeval.p u64 
    push           0          u64 
    jumpne         #13030     u64 
    jump           #13031     
#13030: 
    push           mm_lib.jeval.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_lib.jeval.a u64 
    push           mm_lib.jeval.p u64 
    push           24         
    pushptroff                u64 1 0
    pop            mm_lib.jeval.b u64 
    push           mm_lib.jeval.p u64 
    pushptr                   u8 
    switch         #13032     1 100
    opnd           #13033     
#13032: 
    switchlabel    #13034     
    switchlabel    #13035     
    switchlabel    #13036     
    switchlabel    #13033     
    switchlabel    #13037     
    switchlabel    #13033     
    switchlabel    #13033     
    switchlabel    #13033     
    switchlabel    #13033     
    switchlabel    #13033     
    switchlabel    #13033     
    switchlabel    #13033     
    switchlabel    #13038     
    switchlabel    #13033     
    switchlabel    #13033     
    switchlabel    #13033     
    switchlabel    #13033     
    switchlabel    #13039     
    switchlabel    #13040     
    switchlabel    #13041     
    switchlabel    #13033     
    switchlabel    #13033     
    switchlabel    #13033     
    switchlabel    #13033     
    switchlabel    #13033     
    switchlabel    #13033     
    switchlabel    #13033     
    switchlabel    #13042     
    switchlabel    #13043     
    switchlabel    #13033     
    switchlabel    #13044     
    switchlabel    #13033     
    switchlabel    #13033     
    switchlabel    #13045     
    switchlabel    #13033     
    switchlabel    #13045     
    switchlabel    #13039     
    switchlabel    #13033     
    switchlabel    #13033     
    switchlabel    #13046     
    switchlabel    #13033     
    switchlabel    #13033     
    switchlabel    #13033     
    switchlabel    #13047     
    switchlabel    #13033     
    switchlabel    #13033     
    switchlabel    #13033     
    switchlabel    #13048     
    switchlabel    #13033     
    switchlabel    #13048     
    switchlabel    #13049     
    switchlabel    #13033     
    switchlabel    #13048     
    switchlabel    #13048     
    switchlabel    #13033     
    switchlabel    #13033     
    switchlabel    #13050     
    switchlabel    #13033     
    switchlabel    #13051     
    switchlabel    #13052     
    switchlabel    #13053     
    switchlabel    #13054     
    switchlabel    #13055     
    switchlabel    #13033     
    switchlabel    #13056     
    switchlabel    #13033     
    switchlabel    #13033     
    switchlabel    #13033     
    switchlabel    #13033     
    switchlabel    #13057     
    switchlabel    #13058     
    switchlabel    #13059     
    switchlabel    #13033     
    switchlabel    #13033     
    switchlabel    #13060     
    switchlabel    #13033     
    switchlabel    #13060     
    switchlabel    #13060     
    switchlabel    #13033     
    switchlabel    #13033     
    switchlabel    #13033     
    switchlabel    #13033     
    switchlabel    #13033     
    switchlabel    #13033     
    switchlabel    #13033     
    switchlabel    #13033     
    switchlabel    #13033     
    switchlabel    #13033     
    switchlabel    #13033     
    switchlabel    #13033     
    switchlabel    #13033     
    switchlabel    #13033     
    switchlabel    #13061     
    switchlabel    #13033     
    switchlabel    #13033     
    switchlabel    #13044     
    switchlabel    #13033     
    switchlabel    #13062     
    switchlabel    #13033     
    switchlabel    #13063     
    endswitch                 
#13034: 
    push           &mm_decls.ttbasetype 
    push           mm_lib.jeval.p u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           20         i64 
    casejumpeq     #13064     i64 0
    push           4          i64 
    casejumpeq     #13064     i64 0
    push           18         i64 
    casejumpeq     #13064     i64 0
    push           19         i64 
    casejumpeq     #13064     i64 0
    push           23         i64 
    casejumpeq     #13065     i64 0
    push           2          i64 
    casejumpeq     #13065     i64 0
    push           21         i64 
    casejumpeq     #13065     i64 0
    push           22         i64 
    casejumpeq     #13065     i64 0
    push           16         i64 
    casejumpeq     #13066     i64 0
    push           17         i64 
    casejumpeq     #13066     i64 0
    push           1          i64 
    casejumpeq     #13066     i64 0
    push           5          i64 
    casejumpeq     #13067     i64 0
    push           3          i64 
    casejumpeq     #13068     i64 0
    push           7          i64 
    casejumpeq     #13069     i64 0
    push           9          i64 
    casejumpeq     #13070     i64 0
    popstack                  i64 
    jump           #13071     
#13064: 
    setargs                   2 0
    push           &mm_lib.jeval.str 
    push           mm_lib.jeval.p u64 
    push           16         
    pushptroff                i64 1 0
    callproc       &msysp.getstrint 
    jump           #13072     
#13065: 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           mm_lib.jeval.p u64 
    push           16         
    pushptroff                u64 1 0
    callfn         &msysp.strword u64 
    push           &mm_lib.jeval.str 
    callproc       &strcpy    
    jump           #13072     
#13066: 
    push           mm_lib.jeval.p u64 
    push           16         
    pushptroff                u64 1 0
    push           &mm_lib.jeval.str 
    push           1          i64 
    popptroff                 u8 1 -1
    push           0          u64 
    push           &mm_lib.jeval.str 
    push           0          i64 
    popptroff                 u8 1 -1
    jump           #13072     
#13067: 
    setargs                   1 0
    push           &mm_lib.jeval.str 
    callproc       &msysp.m$print_startstr 
    setargs                   3 0
    push           0          i64 
    push           mm_lib.jeval.p u64 
    push           16         
    pushptroff                i128 1 0
    callproc       &msysp.m$print_i128 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13072     
#13068: 
    setargs                   1 0
    push           &mm_lib.jeval.str 
    callproc       &msysp.m$print_startstr 
    setargs                   3 0
    push           0          i64 
    push           mm_lib.jeval.p u64 
    push           16         
    pushptroff                u128 1 0
    callproc       &msysp.m$print_u128 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13072     
#13069: 
    setargs                   1 0
    push           &mm_lib.jeval.str 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    push           0          i64 
    push           mm_lib.jeval.p u64 
    push           16         
    pushptroff                r64 1 0
    callproc       &msysp.m$print_r64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13072     
#13070: 
    push           mm_lib.jeval.p u64 
    push           48         
    pushptroff                i32 1 0
    push           10         i64 
    jumpne         #13073     i64 
    push           mm_lib.jeval.p u64 
    push           44         
    pushptroff                u8 1 0
    jumpfalse      #13073     i64 
    push           mm_lib.jeval.p u64 
    push           40         
    pushptroff                u32 1 0
    push           250        i64 
    jumple         #13074     i64 
    setargs                   2 0
    push           "LONGSTR)" u64 
    push           &mm_lib.jeval.str 
    callproc       &strcpy    
    jump           #13075     
#13074: 
    setargs                   2 0
    push           &mm_lib.jeval.str 
    push           mm_lib.jeval.p u64 
    push           16         
    pushptroff                u64 1 0
    callproc       &mm_lib.convertstring 
#13075: 
    setargs                   2 0
    push           "\""       u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    setargs                   2 0
    push           &mm_lib.jeval.str 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    setargs                   2 0
    push           "\""       u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    jump           #13031     
    jump           #13076     
#13073: 
    setargs                   1 0
    push           &mm_lib.jeval.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           mm_lib.jeval.p u64 
    push           16         
    pushptroff                u64 1 0
    callproc       &msysp.m$print_ptr_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13076: 
    jump           #13072     
#13071: 
    setargs                   2 0
    push           "<EVAL/CONST PROBABLY VOID>" u64 
    push           &mm_lib.jeval.str 
    callproc       &sprintf   
#13072: 
    setargs                   2 0
    push           &mm_lib.jeval.str 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    jump           #13077     
#13036: 
    setargs                   2 0
    push           mm_lib.jeval.p u64 
    push           16         
    pushptroff                u64 1 0
    pushptr                   u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    jump           #13077     
#13045: 
    setargs                   2 0
    push           &pc_tables.pclnames 
    push           mm_lib.jeval.p u64 
    push           60         
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    push           &mm_lib.jeval.str 
    callproc       &strcpy    
    setargs                   2 0
    push           "("        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    setargs                   2 0
    push           mm_lib.jeval.a u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    setargs                   2 0
    push           &mm_lib.jeval.str 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    setargs                   2 0
    push           mm_lib.jeval.b u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    setargs                   2 0
    push           ")"        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    jump           #13077     
#13039: 
    setargs                   2 0
    push           &pc_tables.pclnames 
    push           mm_lib.jeval.p u64 
    push           60         
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    push           &mm_lib.jeval.str 
    callproc       &strcpy    
    setargs                   2 0
    push           &mm_lib.jeval.str 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    setargs                   2 0
    push           "("        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    push           mm_lib.jeval.a u64 
    pushptr                   u8 
    push           65         i64 
    jumpne         #13078     i64 
    setargs                   2 0
    setargs                   2 0
    push           1          i64 
    push           mm_lib.jeval.a u64 
    push           16         
    pushptroff                i64 1 0
    callfn         &mm_lib.strmode u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    jump           #13079     
#13078: 
    setargs                   2 0
    push           mm_lib.jeval.a u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
#13079: 
    setargs                   2 0
    push           ")"        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    jump           #13077     
#13044: 
    setargs                   2 0
    push           mm_lib.jeval.a u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    setargs                   2 0
    push           "("        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    push           mm_lib.jeval.b u64 
    pop            mm_lib.jeval.q u64 
    jump           #13080     
#13081: 
    setargs                   2 0
    push           mm_lib.jeval.q u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    push           mm_lib.jeval.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_lib.jeval.q u64 
    push           mm_lib.jeval.q u64 
    jumpfalse      #13082     u64 
    setargs                   2 0
    push           ","        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
#13082: 
#13080: 
    push           mm_lib.jeval.q u64 
    jumptrue       #13081     u64 
#13083: 
    setargs                   2 0
    push           ")"        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    jump           #13077     
#13048: 
    setargs                   2 0
    push           mm_lib.jeval.a u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    push           mm_lib.jeval.p u64 
    pushptr                   u8 
    push           53         i64 
    jumpeq         #13084     i64 
    push           mm_lib.jeval.p u64 
    pushptr                   u8 
    push           54         i64 
    jumpne         #13085     i64 
#13084: 
    setargs                   2 0
    push           "."        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
#13085: 
    setargs                   2 0
    push           "["        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    setargs                   2 0
    push           mm_lib.jeval.b u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    setargs                   2 0
    push           "]"        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    jump           #13077     
#13049: 
    setargs                   2 0
    push           mm_lib.jeval.a u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    setargs                   2 0
    push           "."        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    setargs                   2 0
    push           mm_lib.jeval.b u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    jump           #13077     
#13040: 
    setargs                   2 0
    push           "("        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    push           mm_lib.jeval.a u64 
    pop            mm_lib.jeval.q u64 
    jump           #13086     
#13087: 
    setargs                   2 0
    push           mm_lib.jeval.q u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    push           mm_lib.jeval.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_lib.jeval.q u64 
    push           mm_lib.jeval.q u64 
    jumpfalse      #13088     u64 
    setargs                   2 0
    push           ","        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
#13088: 
#13086: 
    push           mm_lib.jeval.q u64 
    jumptrue       #13087     u64 
#13089: 
    setargs                   2 0
    push           ")"        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    jump           #13077     
#13041: 
    setargs                   2 0
    push           "("        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    setargs                   2 0
    push           mm_lib.jeval.a u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    setargs                   2 0
    push           ".."       u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    setargs                   2 0
    push           mm_lib.jeval.b u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    setargs                   2 0
    push           ")"        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    jump           #13077     
#13043: 
    setargs                   2 0
    push           mm_lib.jeval.a u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    setargs                   2 0
    push           ":="       u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    setargs                   2 0
    push           mm_lib.jeval.b u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    jump           #13077     
#13063: 
    setargs                   2 0
    push           "("        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    setargs                   2 0
    push           mm_lib.jeval.a u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    setargs                   2 0
    push           "|"        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    setargs                   2 0
    push           mm_lib.jeval.b u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    setargs                   2 0
    push           "|"        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    setargs                   2 0
    push           mm_lib.jeval.p u64 
    push           32         
    pushptroff                u64 1 0
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    setargs                   2 0
    push           ")"        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    jump           #13077     
#13056: 
    setargs                   2 0
    setargs                   2 0
    push           1          i64 
    push           mm_lib.jeval.p u64 
    push           48         
    pushptroff                i32 1 0
    callfn         &mm_lib.strmode u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    jump           #13077     
#13053: 
    setargs                   2 0
    setargs                   2 0
    push           1          i64 
    push           mm_lib.jeval.p u64 
    push           52         
    pushptroff                i32 1 0
    callfn         &mm_lib.strmode u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    setargs                   2 0
    push           "("        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    setargs                   2 0
    push           mm_lib.jeval.a u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    setargs                   2 0
    push           ")"        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    jump           #13077     
#13054: 
    setargs                   2 0
    push           "shorten(" u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    setargs                   2 0
    push           mm_lib.jeval.a u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    setargs                   2 0
    push           ")"        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    jump           #13077     
#13055: 
    setargs                   2 0
    push           "cast("    u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    setargs                   2 0
    push           mm_lib.jeval.a u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    setargs                   2 0
    push           ")"        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    jump           #13077     
#13042: 
    setargs                   2 0
    push           mm_lib.jeval.a u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    setargs                   2 0
    push           ":"        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    push           mm_lib.jeval.b u64 
    jumpfalse      #13090     u64 
    setargs                   2 0
    push           mm_lib.jeval.p u64 
    push           24         
    pushptroff                u64 1 0
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    jump           #13091     
#13090: 
    setargs                   2 0
    push           "-"        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mlibp.gs_str 
#13091: 
    jump           #13077     
#13050: 
    setargs                   2 0
    push           mm_lib.jeval.a u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    setargs                   2 0
    push           "^"        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    jump           #13077     
#13047: 
    setargs                   2 0
    push           "("        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    setargs                   2 0
    push           mm_lib.jeval.a u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    setargs                   2 0
    push           ","        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    setargs                   2 0
    push           mm_lib.jeval.b u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    setargs                   2 0
    push           ","        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    setargs                   2 0
    push           mm_lib.jeval.p u64 
    push           32         
    pushptroff                u64 1 0
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    setargs                   2 0
    push           ")"        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    jump           #13077     
#13037: 
    setargs                   2 0
    push           "<JBLOCK>" u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    jump           #13077     
#13035: 
    setargs                   2 0
    push           "<nullunit>" u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mlibp.gs_str 
    jump           #13077     
#13051: 
    setargs                   2 0
    push           "&"        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    setargs                   2 0
    push           mm_lib.jeval.a u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    push           mm_lib.jeval.b u64 
    jumpfalse      #13092     u64 
    setargs                   2 0
    push           "+"        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           mm_lib.jeval.b u64 
    push           16         
    pushptroff                i64 1 0
    push           mm_lib.jeval.dest u64 
    callproc       &mlibp.gs_strint 
#13092: 
    jump           #13077     
#13052: 
    setargs                   2 0
    push           "&."       u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    setargs                   2 0
    push           mm_lib.jeval.a u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    jump           #13077     
#13058: 
    setargs                   2 0
    push           "TYPESTR(" u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    setargs                   2 0
    push           mm_lib.jeval.a u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    setargs                   2 0
    push           ")"        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_support.gs_additem 
    jump           #13077     
#13060: 
    setargs                   2 0
    push           "$"        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           &mm_tables.jtagnames 
    push           mm_lib.jeval.p u64 
    pushptr                   u8 
    pushptroff                u64 8 0
    push           2          i64 
    addrefoff                 u64 1 0
    push           mm_lib.jeval.dest u64 
    callproc       &mlibp.gs_str 
    jump           #13077     
#13059: 
    setargs                   2 0
    push           mm_lib.jeval.a u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    setargs                   2 0
    push           "."        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           &mm_tables.bitfieldnames 
    push           mm_lib.jeval.p u64 
    push           40         
    pushptroff                i16 1 0
    pushptroff                u64 8 -8
    push           mm_lib.jeval.dest u64 
    callproc       &mlibp.gs_str 
    jump           #13077     
#13061: 
    setargs                   2 0
    push           mm_lib.jeval.a u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    setargs                   2 0
    push           ":"        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           mm_lib.jeval.b u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    jump           #13077     
#13057: 
    setargs                   2 0
    push           "typeof("  u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           mm_lib.jeval.a u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    setargs                   2 0
    push           ")"        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mlibp.gs_str 
    jump           #13077     
#13062: 
    setargs                   2 0
    push           &mm_tables.sysfnnames 
    push           mm_lib.jeval.p u64 
    push           40         
    pushptroff                i16 1 0
    pushptroff                u64 8 -8
    push           6          i64 
    addrefoff                 u64 1 0
    push           mm_lib.jeval.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           "("        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mlibp.gs_str 
    push           mm_lib.jeval.a u64 
    jumpfalse      #13093     u64 
    setargs                   2 0
    push           mm_lib.jeval.a u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
#13093: 
    setargs                   2 0
    push           ")"        u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mlibp.gs_str 
    jump           #13077     
#13046: 
    setargs                   2 0
    push           "incr "    u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           mm_lib.jeval.a u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    jump           #13077     
#13038: 
    setargs                   2 0
    push           "newstrinclude " u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           mm_lib.jeval.a u64 
    push           mm_lib.jeval.dest u64 
    callproc       &mm_lib.jeval 
    jump           #13077     
#13033: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &mm_tables.jtagnames 
    push           mm_lib.jeval.p u64 
    pushptr                   u8 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           mm_lib.jeval.p u64 
    push           "CAN'T DO JEVAL" u64 
    callproc       &mm_support.gerror 
#13077: 
#13031: 
    retproc                   
End


Proc mm_lib.strmode: u64
    param          mm_lib.strmode.m i64 
    param          mm_lib.strmode.expand i64 
    procentry                 
    setargs                   3 0
    push           &mm_lib.strmode.str 
    push           mm_lib.strmode.expand i64 
    push           mm_lib.strmode.m i64 
    callproc       &mm_lib.istrmode 
    push           &mm_lib.strmode.str 
    setret                    u64 
    jump           #13095     
#13095: 
    retfn                     u64 
End


Proc mm_lib.strmode2: u64
    param          mm_lib.strmode2.m i64 
    param          mm_lib.strmode2.expand i64 
    procentry                 
    setargs                   3 0
    push           &mm_lib.strmode2.str 
    push           mm_lib.strmode2.expand i64 
    push           mm_lib.strmode2.m i64 
    callproc       &mm_lib.istrmode 
    push           &mm_lib.strmode2.str 
    setret                    u64 
    jump           #13097     
#13097: 
    retfn                     u64 
End


Proc mm_lib.istrmode:
    param          mm_lib.istrmode.m i64 
    param          mm_lib.istrmode.expand i64 
    param          mm_lib.istrmode.dest u64 
    local          mm_lib.istrmode.d u64 
    local          mm_lib.istrmode.q u64 
    local          mm_lib.istrmode.e u64 
    local          mm_lib.istrmode.value i64 
    local          mm_lib.istrmode.needcomma i64 
    local          mm_lib.istrmode.x i64 
    local          mm_lib.istrmode.i i64 
    local          mm_lib.istrmode.target i64 
    local          mm_lib.istrmode.mbase i64 
    local          mm_lib.istrmode.n i64 
    local          mm_lib.istrmode.sxx block:16 
    local          mm_lib.istrmode.xx u64 
    local          mm_lib.istrmode.sdim u64 
    local          mm_lib.istrmode.slength u64 
    local          mm_lib.istrmode.strdim block:100 
    local          mm_lib.istrmode.prefix u64 
    local          mm_lib.istrmode.tn block:32 
    procentry                 
    push           &mm_lib.istrmode.sxx 
    pop            mm_lib.istrmode.xx u64 
    push           mm_lib.istrmode.m i64 
    push           0          i64 
    jumpge         #13099     i64 
    setargs                   2 0
    push           "XX*"      u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcpy    
    push           &mm_decls.typenames 
    push           mm_lib.istrmode.m i64 
    neg                       i64 
    pushptroff                block:32 32 0
    pop            mm_lib.istrmode.tn block:32 
    push           &mm_lib.istrmode.tn 
    push           16         
    pushptroff                u64 1 0
    push           0          u64 
    jumpne         #13100     u64 
    setargs                   2 0
    push           "typeof("  u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcat    
    setargs                   2 0
    push           &mm_lib.istrmode.tn 
    push           8          
    pushptroff                u64 1 0
    pushptr                   u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcat    
    setargs                   2 0
    push           ")"        u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcat    
    jump           #13101     
#13100: 
    push           &mm_lib.istrmode.tn 
    push           8          
    pushptroff                u64 1 0
    jumpfalse      #13102     u64 
    setargs                   2 0
    push           &mm_lib.istrmode.tn 
    push           8          
    pushptroff                u64 1 0
    pushptr                   u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcat    
    setargs                   2 0
    push           "."        u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcat    
#13102: 
    setargs                   2 0
    push           &mm_lib.istrmode.tn 
    push           16         
    pushptroff                u64 1 0
    pushptr                   u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcat    
#13101: 
    jump           #13103     
#13099: 
    push           mm_lib.istrmode.m i64 
    push           33         i64 
    jumpge         #13104     i64 
    push           mm_lib.istrmode.m i64 
    push           9          i64 
    jumpeq         #13104     i64 
    setargs                   2 0
    setargs                   1 0
    push           mm_lib.istrmode.m i64 
    callfn         &mm_lib.typename u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcpy    
    jump           #13103     
#13104: 
    push           &mm_decls.ttbasetype 
    push           mm_lib.istrmode.m i64 
    pushptroff                i32 4 0
    store          mm_lib.istrmode.mbase i64 
    push           9          i64 
    casejumpeq     #13105     i64 0
    push           11         i64 
    casejumpeq     #13106     i64 0
    push           12         i64 
    casejumpeq     #13107     i64 0
    push           24         i64 
    casejumpeq     #13108     i64 0
    push           13         i64 
    casejumpeq     #13109     i64 0
    push           0          i64 
    casejumpeq     #13110     i64 0
    push           33         i64 
    casejumpeq     #13111     i64 0
    push           27         i64 
    casejumpeq     #13112     i64 0
    push           31         i64 
    casejumpeq     #13113     i64 0
    push           30         i64 
    casejumpeq     #13114     i64 0
    popstack                  i64 
    jump           #13115     
#13105: 
    setargs                   2 0
    push           "ref "     u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcpy    
    push           &mm_decls.tttarget 
    push           mm_lib.istrmode.m i64 
    pushptroff                i32 4 0
    pop            mm_lib.istrmode.target i64 
    push           mm_lib.istrmode.target i64 
    push           0          i64 
    jumplt         #13116     i64 
    push           &mm_decls.ttbasetype 
    push           mm_lib.istrmode.target i64 
    pushptroff                i32 4 0
    push           13         i64 
    jumpne         #13116     i64 
    setargs                   2 0
    setargs                   1 0
    push           mm_lib.istrmode.target i64 
    callfn         &mm_lib.typename u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcat    
    jump           #13117     
#13116: 
    setargs                   3 0
    push           mm_lib.istrmode.dest u64 
    setargs                   1 0
    push           mm_lib.istrmode.dest u64 
    callfn         &strlen    i64 
    addrefoff                 u64 1 0
    push           0          i64 
    push           &mm_decls.tttarget 
    push           mm_lib.istrmode.m i64 
    pushptroff                i32 4 0
    callproc       &mm_lib.istrmode 
#13117: 
    jump           #13118     
#13106: 
    push           &mm_decls.ttdimexpr 
    push           mm_lib.istrmode.m i64 
    pushptroff                u64 8 0
    jumpfalse      #13119     u64 
    setargs                   2 0
    push           &mm_lib.istrmode.strdim 
    setargs                   1 0
    push           &mm_decls.ttdimexpr 
    push           mm_lib.istrmode.m i64 
    pushptroff                u64 8 0
    callfn         &mm_lib.strexpr u64 
    callproc       &mm_support.gs_copytostr 
    setargs                   1 0
    push           mm_lib.istrmode.dest u64 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "@[#]"     u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           &mm_lib.istrmode.strdim 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13120     
#13119: 
    push           &mm_decls.ttlength 
    push           mm_lib.istrmode.m i64 
    pushptroff                i32 4 0
    jumpfalse      #13121     i64 
    push           &mm_decls.ttlower 
    push           mm_lib.istrmode.m i64 
    pushptroff                i32 4 0
    push           1          i64 
    jumpne         #13122     i64 
    setargs                   1 0
    push           mm_lib.istrmode.dest u64 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "[#]"      u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           &mm_decls.ttlength 
    push           mm_lib.istrmode.m i64 
    pushptroff                i32 4 0
    push           &mm_decls.ttlower 
    push           mm_lib.istrmode.m i64 
    pushptroff                i32 4 0
    add                       i64 
    push           1          i64 
    sub                       i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13123     
#13122: 
    setargs                   1 0
    push           mm_lib.istrmode.dest u64 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "[#..#]"   u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           &mm_decls.ttlower 
    push           mm_lib.istrmode.m i64 
    pushptroff                i32 4 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           &mm_decls.ttlength 
    push           mm_lib.istrmode.m i64 
    pushptroff                i32 4 0
    push           &mm_decls.ttlower 
    push           mm_lib.istrmode.m i64 
    pushptroff                i32 4 0
    add                       i64 
    push           1          i64 
    sub                       i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13123: 
    jump           #13124     
#13121: 
    push           &mm_decls.ttlower 
    push           mm_lib.istrmode.m i64 
    pushptroff                i32 4 0
    push           1          i64 
    jumpne         #13125     i64 
    setargs                   1 0
    push           mm_lib.istrmode.dest u64 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "[]"       u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13126     
#13125: 
    setargs                   1 0
    push           mm_lib.istrmode.dest u64 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "[#:]"     u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           &mm_decls.ttlower 
    push           mm_lib.istrmode.m i64 
    pushptroff                i32 4 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13126: 
#13124: 
#13120: 
    setargs                   3 0
    push           mm_lib.istrmode.dest u64 
    setargs                   1 0
    push           mm_lib.istrmode.dest u64 
    callfn         &strlen    i64 
    addrefoff                 u64 1 0
    push           0          i64 
    push           &mm_decls.tttarget 
    push           mm_lib.istrmode.m i64 
    pushptroff                i32 4 0
    callproc       &mm_lib.istrmode 
    jump           #13118     
#13107: 
    push           &mm_tables.stdnames 
    push           mm_lib.istrmode.mbase i64 
    pushptroff                u64 8 0
    pop            mm_lib.istrmode.prefix u64 
    push           &mm_decls.ttdimexpr 
    push           mm_lib.istrmode.m i64 
    pushptroff                u64 8 0
    jumpfalse      #13127     u64 
    setargs                   2 0
    push           &mm_lib.istrmode.strdim 
    setargs                   1 0
    push           &mm_decls.ttdimexpr 
    push           mm_lib.istrmode.m i64 
    pushptroff                u64 8 0
    callfn         &mm_lib.strexpr u64 
    callproc       &mm_support.gs_copytostr 
    setargs                   1 0
    push           mm_lib.istrmode.dest u64 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "@#[#:]"   u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           mm_lib.istrmode.prefix u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_lib.istrmode.strdim 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13128     
#13127: 
    push           &mm_decls.ttlower 
    push           mm_lib.istrmode.m i64 
    pushptroff                i32 4 0
    push           1          i64 
    jumpne         #13129     i64 
    setargs                   2 0
    push           mm_lib.istrmode.prefix u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcpy    
    setargs                   2 0
    push           "[]"       u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcat    
    jump           #13130     
#13129: 
    setargs                   1 0
    push           mm_lib.istrmode.dest u64 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "#[#:]"    u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           mm_lib.istrmode.prefix u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_decls.ttlower 
    push           mm_lib.istrmode.m i64 
    pushptroff                i32 4 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13130: 
#13128: 
    setargs                   3 0
    push           mm_lib.istrmode.dest u64 
    setargs                   1 0
    push           mm_lib.istrmode.dest u64 
    callfn         &strlen    i64 
    addrefoff                 u64 1 0
    push           0          i64 
    push           &mm_decls.tttarget 
    push           mm_lib.istrmode.m i64 
    pushptroff                i32 4 0
    callproc       &mm_lib.istrmode 
    jump           #13118     
#13108: 
    push           &mm_decls.ttnamedef 
    push           mm_lib.istrmode.m i64 
    pushptroff                u64 8 0
    pop            mm_lib.istrmode.d u64 
    push           mm_lib.istrmode.expand i64 
    jumptrue       #13131     i64 
    setargs                   2 0
    push           mm_lib.istrmode.d u64 
    pushptr                   u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcpy    
    jump           #13103     
#13131: 
    setargs                   2 0
    push           "enum("    u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcpy    
    push           1          i64 
    pop            mm_lib.istrmode.value i64 
    push           0          i64 
    pop            mm_lib.istrmode.needcomma i64 
    push           mm_lib.istrmode.d u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_lib.istrmode.q u64 
    jump           #13132     
#13133: 
    push           mm_lib.istrmode.needcomma i64 
    jumpfalse      #13134     i64 
    setargs                   2 0
    push           ","        u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcat    
#13134: 
    push           1          i64 
    pop            mm_lib.istrmode.needcomma i64 
    setargs                   2 0
    push           mm_lib.istrmode.q u64 
    pushptr                   u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcat    
    push           mm_lib.istrmode.q u64 
    push           32         
    pushptroff                u64 1 0
    pop            mm_lib.istrmode.q u64 
#13132: 
    push           mm_lib.istrmode.q u64 
    jumptrue       #13133     u64 
#13135: 
    setargs                   2 0
    push           ")"        u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcat    
    jump           #13118     
#13109: 
    push           mm_lib.istrmode.expand i64 
    jumptrue       #13136     i64 
    setargs                   2 0
    setargs                   1 0
    push           mm_lib.istrmode.m i64 
    callfn         &mm_lib.typename u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcpy    
    jump           #13103     
#13136: 
    setargs                   2 0
    push           ""         u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcpy    
    push           mm_lib.istrmode.expand i64 
    push           2          i64 
    jumpeq         #13137     i64 
    setargs                   2 0
    setargs                   1 0
    push           &mm_decls.ttbasetype 
    push           mm_lib.istrmode.m i64 
    pushptroff                i32 4 0
    callfn         &mm_lib.typename u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcat    
#13137: 
    setargs                   2 0
    push           "("        u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcat    
    push           &mm_decls.ttnamedef 
    push           mm_lib.istrmode.m i64 
    pushptroff                u64 8 0
    pop            mm_lib.istrmode.d u64 
    push           0          i64 
    pop            mm_lib.istrmode.needcomma i64 
    push           mm_lib.istrmode.d u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_lib.istrmode.q u64 
    jump           #13138     
#13139: 
    push           mm_lib.istrmode.needcomma i64 
    jumpfalse      #13140     i64 
    setargs                   2 0
    push           ","        u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcat    
#13140: 
    push           1          i64 
    pop            mm_lib.istrmode.needcomma i64 
    setargs                   3 0
    push           mm_lib.istrmode.dest u64 
    setargs                   1 0
    push           mm_lib.istrmode.dest u64 
    callfn         &strlen    i64 
    addrefoff                 u64 1 0
    push           0          i64 
    push           mm_lib.istrmode.q u64 
    push           72         
    pushptroff                i32 1 0
    callproc       &mm_lib.istrmode 
    setargs                   2 0
    push           " "        u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcat    
    setargs                   2 0
    push           mm_lib.istrmode.q u64 
    pushptr                   u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcat    
    push           mm_lib.istrmode.q u64 
    push           32         
    pushptroff                u64 1 0
    pop            mm_lib.istrmode.q u64 
#13138: 
    push           mm_lib.istrmode.q u64 
    jumptrue       #13139     u64 
#13141: 
    setargs                   2 0
    push           ")"        u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcat    
    jump           #13118     
#13110: 
    setargs                   2 0
    push           "void"     u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcpy    
    jump           #13118     
#13111: 
    setargs                   2 0
    setargs                   1 0
    push           mm_lib.istrmode.m i64 
    callfn         &mm_lib.typename u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcpy    
    jump           #13118     
#13112: 
    push           &mm_decls.ttnamedef 
    push           mm_lib.istrmode.m i64 
    pushptroff                u64 8 0
    pop            mm_lib.istrmode.d u64 
    setargs                   2 0
    push           "proc("    u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcpy    
    push           mm_lib.istrmode.d u64 
    push           104        
    pushptroff                u64 1 0
    pop            mm_lib.istrmode.q u64 
    push           0          i64 
    pop            mm_lib.istrmode.needcomma i64 
    jump           #13142     
#13143: 
    push           mm_lib.istrmode.needcomma i64 
    jumpfalse      #13144     i64 
    setargs                   2 0
    push           ","        u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcat    
#13144: 
    push           1          i64 
    pop            mm_lib.istrmode.needcomma i64 
    setargs                   3 0
    push           mm_lib.istrmode.dest u64 
    setargs                   1 0
    push           mm_lib.istrmode.dest u64 
    callfn         &strlen    i64 
    addrefoff                 u64 1 0
    push           0          i64 
    push           mm_lib.istrmode.q u64 
    push           72         
    pushptroff                i32 1 0
    callproc       &mm_lib.istrmode 
    setargs                   2 0
    push           " "        u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcat    
    setargs                   2 0
    push           mm_lib.istrmode.q u64 
    pushptr                   u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcat    
    push           mm_lib.istrmode.q u64 
    push           32         
    pushptroff                u64 1 0
    pop            mm_lib.istrmode.q u64 
#13142: 
    push           mm_lib.istrmode.q u64 
    push           0          u64 
    jumpne         #13143     u64 
#13145: 
    setargs                   2 0
    push           ")"        u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcat    
    push           mm_lib.istrmode.d u64 
    push           72         
    pushptroff                i32 1 0
    push           0          i64 
    jumpeq         #13146     i64 
    setargs                   3 0
    push           mm_lib.istrmode.dest u64 
    setargs                   1 0
    push           mm_lib.istrmode.dest u64 
    callfn         &strlen    i64 
    addrefoff                 u64 1 0
    push           0          i64 
    push           mm_lib.istrmode.d u64 
    push           72         
    pushptroff                i32 1 0
    callproc       &mm_lib.istrmode 
#13146: 
    jump           #13118     
#13113: 
    setargs                   2 0
    push           "Tuple("   u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcpy    
    push           &mm_decls.ttlength 
    push           mm_lib.istrmode.m i64 
    pushptroff                i32 4 0
    pop            mm_lib.istrmode.n i64 
#13147: 
    push           1          i64 
    pop            mm_lib.istrmode.i i64 
    push           mm_lib.istrmode.n i64 
    push           1          i64 
    jumplt         #13148     i64 
#13149: 
    setargs                   3 0
    push           mm_lib.istrmode.dest u64 
    setargs                   1 0
    push           mm_lib.istrmode.dest u64 
    callfn         &strlen    i64 
    addrefoff                 u64 1 0
    push           0          i64 
    push           &mm_decls.ttmult 
    push           mm_lib.istrmode.m i64 
    pushptroff                u64 8 0
    push           mm_lib.istrmode.i i64 
    pushptroff                i32 4 -4
    callproc       &mm_lib.istrmode 
    push           mm_lib.istrmode.i i64 
    push           mm_lib.istrmode.n i64 
    jumpge         #13150     i64 
    setargs                   2 0
    push           ","        u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcat    
#13150: 
#13151: 
    forup          #13149     i64 1
    opnd           mm_lib.istrmode.i 
    opnd           mm_lib.istrmode.n 
#13148: 
    setargs                   2 0
    push           ")"        u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcat    
    jump           #13118     
#13114: 
    setargs                   2 0
    push           "bitfield" u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcpy    
    jump           #13118     
#13115: 
    push           &mm_decls.ttbasetype 
    push           mm_lib.istrmode.m i64 
    pushptroff                i32 4 0
    push           33         i64 
    jumpge         #13152     i64 
    setargs                   2 0
    push           "Alias for:" u64 
    push           mm_lib.istrmode.dest u64 
    callproc       &strcpy    
    setargs                   3 0
    push           mm_lib.istrmode.dest u64 
    setargs                   1 0
    push           mm_lib.istrmode.dest u64 
    callfn         &strlen    i64 
    addrefoff                 u64 1 0
    push           0          i64 
    push           &mm_decls.tttarget 
    push           mm_lib.istrmode.m i64 
    pushptroff                i32 4 0
    callproc       &mm_lib.istrmode 
    jump           #13153     
#13152: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    setargs                   1 0
    push           mm_lib.istrmode.m i64 
    callfn         &mm_lib.typename u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    setargs                   2 0
    push           1          i64 
    push           &mm_decls.ttbasetype 
    push           mm_lib.istrmode.m i64 
    pushptroff                i32 4 0
    callfn         &mm_lib.strmode u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "NEWSTRMODE" u64 
    callproc       &mm_support.mcerror 
#13153: 
#13118: 
#13103: 
    retproc                   
End


Proc mm_lib.addtoproclist:
    param          mm_lib.addtoproclist.d u64 
    local          mm_lib.addtoproclist.pp u64 
    procentry                 
    setargs                   1 0
    push           16         i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            mm_lib.addtoproclist.pp u64 
    push           mm_decls.proclist u64 
    push           0          u64 
    jumpne         #13155     u64 
    push           mm_lib.addtoproclist.pp u64 
    store          mm_decls.proclistx u64 
    pop            mm_decls.proclist u64 
    jump           #13156     
#13155: 
    push           mm_lib.addtoproclist.pp u64 
    push           mm_decls.proclistx u64 
    push           8          
    popptroff                 u64 1 0
    push           mm_lib.addtoproclist.pp u64 
    pop            mm_decls.proclistx u64 
#13156: 
    push           mm_lib.addtoproclist.d u64 
    push           mm_lib.addtoproclist.pp u64 
    push           0          
    popptroff                 u64 1 0
#13157: 
    retproc                   
End


Proc mm_lib.addstatic:
    param          mm_lib.addstatic.d u64 
    local          mm_lib.addstatic.pp u64 
    procentry                 
    setargs                   1 0
    push           16         i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            mm_lib.addstatic.pp u64 
    push           mm_decls.staticlist u64 
    push           0          u64 
    jumpne         #13159     u64 
    push           mm_lib.addstatic.pp u64 
    store          mm_decls.staticlistx u64 
    pop            mm_decls.staticlist u64 
    jump           #13160     
#13159: 
    push           mm_lib.addstatic.pp u64 
    push           mm_decls.staticlistx u64 
    push           8          
    popptroff                 u64 1 0
    push           mm_lib.addstatic.pp u64 
    pop            mm_decls.staticlistx u64 
#13160: 
    push           mm_lib.addstatic.d u64 
    push           mm_lib.addstatic.pp u64 
    push           0          
    popptroff                 u64 1 0
#13161: 
    retproc                   
End


Proc mm_lib.addconst:
    param          mm_lib.addconst.d u64 
    local          mm_lib.addconst.pp u64 
    procentry                 
    setargs                   1 0
    push           16         i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            mm_lib.addconst.pp u64 
    push           mm_decls.constlist u64 
    push           0          u64 
    jumpne         #13163     u64 
    push           mm_lib.addconst.pp u64 
    store          mm_decls.constlistx u64 
    pop            mm_decls.constlist u64 
    jump           #13164     
#13163: 
    push           mm_lib.addconst.pp u64 
    push           mm_decls.constlistx u64 
    push           8          
    popptroff                 u64 1 0
    push           mm_lib.addconst.pp u64 
    pop            mm_decls.constlistx u64 
#13164: 
    push           mm_lib.addconst.d u64 
    push           mm_lib.addconst.pp u64 
    push           0          
    popptroff                 u64 1 0
#13165: 
    retproc                   
End


Proc mm_lib.typename: u64
    param          mm_lib.typename.m i64 
    procentry                 
    push           mm_lib.typename.m i64 
    push           0          i64 
    jumplt         #13167     i64 
    push           &mm_decls.ttname 
    push           mm_lib.typename.m i64 
    pushptroff                u64 8 0
    setret                    u64 
    jump           #13168     
#13167: 
    push           &mm_decls.typenames 
    push           mm_lib.typename.m i64 
    neg                       i64 
    addrefoff                 block:32 32 0
    push           16         
    pushptroff                u64 1 0
    pushptr                   u64 
    setret                    u64 
    jump           #13168     
#13168: 
    retfn                     u64 
End


Proc mm_lib.allocunitrec: u64
    local          mm_lib.allocunitrec.p u64 
    local          mm_lib.allocunitrec.q u64 
    local          mm_lib.allocunitrec.nwords i64 
    procentry                 
    push           &mm_lib.remainingunits 
    loaddecr                  i64 1
    jumpfalse      #13170     i64 
    push           mm_lib.unitheapptr u64 
    pop            mm_lib.allocunitrec.p u64 
    push           &mm_lib.unitheapptr 
    incr                      u64 64
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    push           mm_lib.allocunitrec.p u64 
    push           4          
    popptroff                 u32 1 0
    push           mm_decls.currmoduleno i64 
    push           mm_lib.allocunitrec.p u64 
    push           56         
    popptroff                 u8 1 0
    push           mm_lib.allocunitrec.p u64 
    setret                    u64 
    jump           #13171     
#13170: 
    setargs                   1 0
    push           2097152    i64 
    callfn         &mlibp.pcm_alloc u64 
    store          mm_lib.unitheapptr u64 
    pop            mm_lib.allocunitrec.p u64 
    setargs                   3 0
    push           2097152    u64 
    push           0          i64 
    push           mm_lib.allocunitrec.p u64 
    callproc       &memset    
    push           32767      i64 
    pop            mm_lib.remainingunits i64 
    push           &mm_lib.unitheapptr 
    incr                      u64 64
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    push           mm_lib.allocunitrec.p u64 
    push           4          
    popptroff                 u32 1 0
    push           mm_decls.currmoduleno i64 
    push           mm_lib.allocunitrec.p u64 
    push           56         
    popptroff                 u8 1 0
    push           mm_lib.allocunitrec.p u64 
    setret                    u64 
    jump           #13171     
#13171: 
    retfn                     u64 
End


Proc mm_lib.createdupldef: u64
    param          mm_lib.createdupldef.owner u64 
    param          mm_lib.createdupldef.symptr u64 
    param          mm_lib.createdupldef.id i64 
    local          mm_lib.createdupldef.p u64 
    local          mm_lib.createdupldef.q u64 
    procentry                 
    setargs                   0 0
    callfn         &mm_lib.newstrec u64 
    pop            mm_lib.createdupldef.p u64 
    push           mm_lib.createdupldef.symptr u64 
    pushptr                   u64 
    push           mm_lib.createdupldef.p u64 
    push           0          
    popptroff                 u64 1 0
    push           mm_lib.createdupldef.symptr u64 
    push           76         
    pushptroff                u8 1 0
    push           mm_lib.createdupldef.p u64 
    push           76         
    popptroff                 u8 1 0
    push           79         i64 
    push           mm_lib.createdupldef.p u64 
    push           77         
    popptroff                 u8 1 0
    push           mm_lib.createdupldef.owner u64 
    push           mm_lib.createdupldef.p u64 
    push           8          
    popptroff                 u64 1 0
    push           mm_lib.createdupldef.id i64 
    push           mm_lib.createdupldef.p u64 
    push           78         
    popptroff                 u8 1 0
    push           mm_lib.createdupldef.symptr u64 
    push           40         
    pushptroff                u64 1 0
    push           mm_lib.createdupldef.p u64 
    push           40         
    popptroff                 u64 1 0
    push           mm_lib.createdupldef.p u64 
    push           mm_lib.createdupldef.symptr u64 
    push           40         
    popptroff                 u64 1 0
    push           mm_lib.createdupldef.owner u64 
    jumpfalse      #13173     u64 
    push           mm_lib.createdupldef.owner u64 
    push           16         
    pushptroff                u64 1 0
    push           0          u64 
    jumpne         #13174     u64 
    push           mm_lib.createdupldef.p u64 
    push           mm_lib.createdupldef.owner u64 
    push           24         
    storeptroff               u64 1 0
    push           mm_lib.createdupldef.owner u64 
    push           16         
    popptroff                 u64 1 0
    jump           #13175     
#13174: 
    push           mm_lib.createdupldef.p u64 
    push           mm_lib.createdupldef.owner u64 
    push           24         
    pushptroff                u64 1 0
    push           32         
    popptroff                 u64 1 0
    push           mm_lib.createdupldef.p u64 
    push           mm_lib.createdupldef.owner u64 
    push           24         
    popptroff                 u64 1 0
#13175: 
#13173: 
    push           mm_lib.createdupldef.p u64 
    setret                    u64 
    jump           #13176     
#13176: 
    retfn                     u64 
End


Proc mm_lib.createnewmoduledef: u64
    param          mm_lib.createnewmoduledef.owner u64 
    param          mm_lib.createnewmoduledef.symptr u64 
    local          mm_lib.createnewmoduledef.p u64 
    local          mm_lib.createnewmoduledef.q u64 
    procentry                 
    setargs                   3 0
    push           2          i64 
    push           mm_lib.createnewmoduledef.symptr u64 
    push           mm_lib.createnewmoduledef.owner u64 
    callfn         &mm_lib.createdupldef u64 
    pop            mm_lib.createnewmoduledef.p u64 
    push           mm_lib.createnewmoduledef.p u64 
    setret                    u64 
    jump           #13178     
#13178: 
    retfn                     u64 
End


Proc mm_lib.duplunit: u64
    param          mm_lib.duplunit.p u64 
    param          mm_lib.duplunit.lineno i64 
    local          mm_lib.duplunit.q u64 
    procentry                 
    push           mm_lib.duplunit.p u64 
    push           0          u64 
    jumpne         #13180     u64 
    push           0          u64 
    setret                    u64 
    jump           #13181     
#13180: 
    setargs                   1 0
    push           mm_lib.duplunit.p u64 
    pushptr                   u8 
    callfn         &mm_lib.createunit0 u64 
    pop            mm_lib.duplunit.q u64 
    push           mm_lib.duplunit.p u64 
    pushptr                   block:64 
    push           mm_lib.duplunit.q u64 
    popptr                    block:64 
    push           0          u64 
    push           mm_lib.duplunit.q u64 
    push           8          
    popptroff                 u64 1 0
    push           mm_lib.duplunit.q u64 
    push           1          
    pushptroff                u8 1 0
    jumpfalse      #13182     i64 
    setargs                   2 0
    push           0          i64 
    push           mm_lib.duplunit.q u64 
    push           16         
    pushptroff                u64 1 0
    callfn         &mm_lib.duplunit u64 
    push           mm_lib.duplunit.q u64 
    push           16         
    popptroff                 u64 1 0
    push           1          i64 
    push           mm_lib.duplunit.q u64 
    push           1          
    popptroff                 u8 1 0
#13182: 
    push           mm_lib.duplunit.q u64 
    push           2          
    pushptroff                u8 1 0
    jumpfalse      #13183     i64 
    setargs                   2 0
    push           0          i64 
    push           mm_lib.duplunit.q u64 
    push           24         
    pushptroff                u64 1 0
    callfn         &mm_lib.duplunit u64 
    push           mm_lib.duplunit.q u64 
    push           24         
    popptroff                 u64 1 0
    push           1          i64 
    push           mm_lib.duplunit.q u64 
    push           2          
    popptroff                 u8 1 0
#13183: 
    push           mm_lib.duplunit.q u64 
    push           3          
    pushptroff                u8 1 0
    jumpfalse      #13184     i64 
    setargs                   2 0
    push           0          i64 
    push           mm_lib.duplunit.q u64 
    push           32         
    pushptroff                u64 1 0
    callfn         &mm_lib.duplunit u64 
    push           mm_lib.duplunit.q u64 
    push           32         
    popptroff                 u64 1 0
    push           1          i64 
    push           mm_lib.duplunit.q u64 
    push           3          
    popptroff                 u8 1 0
#13184: 
    push           mm_lib.duplunit.q u64 
    setret                    u64 
    jump           #13181     
#13181: 
    retfn                     u64 
End


Proc mm_lib.checkblockreturn: i64
    param          mm_lib.checkblockreturn.p u64 
    local          mm_lib.checkblockreturn.e u64 
    local          mm_lib.checkblockreturn.wt u64 
    local          mm_lib.checkblockreturn.m i64 
    local          mm_lib.checkblockreturn.res i64 
    procentry                 
    push           mm_lib.checkblockreturn.p u64 
    push           0          u64 
    jumpne         #13186     u64 
    push           0          i64 
    setret                    i64 
    jump           #13187     
#13186: 
    push           mm_lib.checkblockreturn.p u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_lib.checkblockreturn.m i64 
    push           mm_lib.checkblockreturn.p u64 
    pushptr                   u8 
    push           97         i64 
    casejumpeq     #13188     i64 0
    push           134        i64 
    casejumpeq     #13189     i64 0
    push           100        i64 
    casejumpeq     #13190     i64 0
    push           101        i64 
    casejumpeq     #13191     i64 0
    push           5          i64 
    casejumpeq     #13192     i64 0
    push           115        i64 
    casejumpeq     #13193     i64 0
    push           117        i64 
    casejumpeq     #13193     i64 0
    push           116        i64 
    casejumpeq     #13193     i64 0
    push           118        i64 
    casejumpeq     #13193     i64 0
    push           8          i64 
    casejumpeq     #13194     i64 0
    popstack                  i64 
    jump           #13195     
#13188: 
    push           1          i64 
    setret                    i64 
    jump           #13187     
    jump           #13196     
#13189: 
    push           1          i64 
    setret                    i64 
    jump           #13187     
    jump           #13196     
#13190: 
    push           1          i64 
    push           mm_lib.checkblockreturn.p u64 
    push           40         
    popptroff                 u8 1 0
    startmult                 
    setargs                   1 0
    push           mm_lib.checkblockreturn.p u64 
    push           24         
    pushptroff                u64 1 0
    callfn         &mm_lib.checkblockreturn i64 
    jumpfalse      #13197     i64 
    setargs                   1 0
    push           mm_lib.checkblockreturn.p u64 
    push           32         
    pushptroff                u64 1 0
    callfn         &mm_lib.checkblockreturn i64 
    jumpfalse      #13197     i64 
    push           1          
    resetmult                 
    jump           #13198     
#13197: 
    push           0          
    endmult                   
#13198: 
    setret                    i64 
    jump           #13187     
    jump           #13196     
#13191: 
    push           mm_lib.checkblockreturn.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_lib.checkblockreturn.e u64 
    push           1          i64 
    push           mm_lib.checkblockreturn.p u64 
    push           40         
    popptroff                 u8 1 0
    jump           #13199     
#13200: 
    setargs                   1 0
    push           mm_lib.checkblockreturn.e u64 
    push           24         
    pushptroff                u64 1 0
    callfn         &mm_lib.checkblockreturn i64 
    jumptrue       #13201     i64 
    push           0          i64 
    setret                    i64 
    jump           #13187     
#13201: 
    push           mm_lib.checkblockreturn.e u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_lib.checkblockreturn.e u64 
#13199: 
    push           mm_lib.checkblockreturn.e u64 
    jumptrue       #13200     u64 
#13202: 
    setargs                   1 0
    push           mm_lib.checkblockreturn.p u64 
    push           24         
    pushptroff                u64 1 0
    callfn         &mm_lib.checkblockreturn i64 
    setret                    i64 
    jump           #13187     
    jump           #13196     
#13192: 
    push           mm_lib.checkblockreturn.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_lib.checkblockreturn.e u64 
    push           mm_lib.checkblockreturn.e u64 
    jumpfalse      #13203     u64 
    jump           #13204     
#13205: 
    push           mm_lib.checkblockreturn.e u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_lib.checkblockreturn.e u64 
#13204: 
    push           mm_lib.checkblockreturn.e u64 
    jumpfalse      #13206     u64 
    push           mm_lib.checkblockreturn.e u64 
    push           8          
    pushptroff                u64 1 0
    jumptrue       #13205     u64 
#13206: 
#13207: 
    setargs                   1 0
    push           mm_lib.checkblockreturn.e u64 
    callfn         &mm_lib.checkblockreturn i64 
    setret                    i64 
    jump           #13187     
#13203: 
    jump           #13196     
#13193: 
    push           1          i64 
    push           mm_lib.checkblockreturn.p u64 
    push           40         
    popptroff                 u8 1 0
    push           mm_lib.checkblockreturn.p u64 
    push           24         
    pushptroff                u64 1 0
    pop            mm_lib.checkblockreturn.wt u64 
    jump           #13208     
#13209: 
    setargs                   1 0
    push           mm_lib.checkblockreturn.wt u64 
    push           24         
    pushptroff                u64 1 0
    callfn         &mm_lib.checkblockreturn i64 
    jumptrue       #13210     i64 
    push           0          i64 
    setret                    i64 
    jump           #13187     
#13210: 
    push           mm_lib.checkblockreturn.wt u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_lib.checkblockreturn.wt u64 
#13208: 
    push           mm_lib.checkblockreturn.wt u64 
    jumptrue       #13209     u64 
#13211: 
    setargs                   1 0
    push           mm_lib.checkblockreturn.p u64 
    push           32         
    pushptroff                u64 1 0
    callfn         &mm_lib.checkblockreturn i64 
    setret                    i64 
    jump           #13187     
    jump           #13196     
#13194: 
    push           1          i64 
    setret                    i64 
    jump           #13187     
    jump           #13196     
#13195: 
#13196: 
    startmult                 
    push           &mm_tables.jisexpr 
    push           mm_lib.checkblockreturn.p u64 
    pushptr                   u8 
    pushptroff                u8 1 0
    jumpfalse      #13212     i64 
    push           mm_lib.checkblockreturn.m i64 
    push           0          i64 
    jumpeq         #13212     i64 
    push           1          i64 
    resetmult                 
    jump           #13213     
#13212: 
    push           0          i64 
    endmult                   
#13213: 
    setret                    i64 
    jump           #13187     
#13187: 
    retfn                     i64 
End


Proc mm_lib.isconstunit: i64
    param          mm_lib.isconstunit.a u64 
    procentry                 
    push           mm_lib.isconstunit.a u64 
    push           58         
    pushptroff                u8 1 0
    setret                    i64 
    jump           #13215     
#13215: 
    retfn                     i64 
End


Proc mm_lib.getownername:
    param          mm_lib.getownername.d u64 
    param          mm_lib.getownername.dest u64 
    local          mm_lib.getownername.owner u64 
    procentry                 
    push           mm_lib.getownername.d u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_lib.getownername.owner u64 
    push           mm_lib.getownername.owner u64 
    push           0          u64 
    jumpeq         #13217     u64 
    push           mm_lib.getownername.owner u64 
    push           78         
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #13218     i64 
#13217: 
    jump           #13219     
#13218: 
    setargs                   2 0
    push           mm_lib.getownername.dest u64 
    push           mm_lib.getownername.owner u64 
    callproc       &mm_lib.getownername 
    setargs                   2 0
    push           mm_lib.getownername.owner u64 
    pushptr                   u64 
    push           mm_lib.getownername.dest u64 
    callproc       &strcat    
    setargs                   2 0
    push           "."        u64 
    push           mm_lib.getownername.dest u64 
    callproc       &strcat    
#13219: 
    retproc                   
End


Proc mm_lib.getalignment: i64
    param          mm_lib.getalignment.m i64 
    local          mm_lib.getalignment.a i64 
    procentry                 
    push           &mm_decls.ttbasetype 
    push           mm_lib.getalignment.m i64 
    pushptroff                i32 4 0
    push           11         i64 
    casejumpeq     #13221     i64 0
    push           13         i64 
    casejumpeq     #13222     i64 0
    popstack                  i64 
    jump           #13223     
#13221: 
    setargs                   1 0
    push           &mm_decls.tttarget 
    push           mm_lib.getalignment.m i64 
    pushptroff                i32 4 0
    callfn         &mm_lib.getalignment i64 
    setret                    i64 
    jump           #13224     
    jump           #13225     
#13222: 
    push           16         i64 
    setret                    i64 
    jump           #13224     
    jump           #13225     
#13223: 
#13225: 
    push           &mm_decls.ttsize 
    push           mm_lib.getalignment.m i64 
    pushptroff                i32 4 0
    pop            mm_lib.getalignment.a i64 
    push           mm_lib.getalignment.a i64 
    push           1          i64 
    casejumpeq     #13226     i64 0
    push           2          i64 
    casejumpeq     #13226     i64 0
    push           4          i64 
    casejumpeq     #13226     i64 0
    push           8          i64 
    casejumpeq     #13226     i64 0
    push           16         i64 
    casejumpeq     #13226     i64 0
    push           0          i64 
    casejumpeq     #13227     i64 0
    popstack                  i64 
    jump           #13228     
#13226: 
    push           mm_lib.getalignment.a i64 
    setret                    i64 
    jump           #13224     
    jump           #13229     
#13227: 
    push           8          i64 
    setret                    i64 
    jump           #13224     
    jump           #13229     
#13228: 
#13229: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    setargs                   2 0
    push           1          i64 
    push           mm_lib.getalignment.m i64 
    callfn         &mm_lib.strmode u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           0          u64 
    push           "GETALIGN SIZE NOT 1248" u64 
    callproc       &mm_support.gerror 
    push           0          i64 
    setret                    i64 
    jump           #13224     
#13224: 
    retfn                     i64 
End


Proc mm_lib.ispoweroftwo: i64
    param          mm_lib.ispoweroftwo.x i64 
    local          mm_lib.ispoweroftwo.a i64 
    local          mm_lib.ispoweroftwo.n i64 
    local          mm_lib.ispoweroftwo.av_1 i64 
    procentry                 
    push           1          i64 
    pop            mm_lib.ispoweroftwo.a i64 
    push           0          i64 
    pop            mm_lib.ispoweroftwo.n i64 
#13231: 
    push           60         i64 
    pop            mm_lib.ispoweroftwo.av_1 i64 
#13232: 
    push           &mm_lib.ispoweroftwo.n 
    incr                      i64 1
    push           mm_lib.ispoweroftwo.a i64 
    push           1          i64 
    shl                       i64 
    pop            mm_lib.ispoweroftwo.a i64 
    push           mm_lib.ispoweroftwo.a i64 
    push           mm_lib.ispoweroftwo.x i64 
    jumpne         #13233     i64 
    push           mm_lib.ispoweroftwo.n i64 
    setret                    i64 
    jump           #13234     
#13233: 
#13235: 
    to             #13232     
    opnd           mm_lib.ispoweroftwo.av_1 
#13236: 
    push           0          i64 
    setret                    i64 
    jump           #13234     
#13234: 
    retfn                     i64 
End


Proc mm_lib.addlistunit:
    param          mm_lib.addlistunit.ulist u64 
    param          mm_lib.addlistunit.ulistx u64 
    param          mm_lib.addlistunit.p u64 
    procentry                 
    push           mm_lib.addlistunit.ulist u64 
    pushptr                   u64 
    push           0          u64 
    jumpne         #13238     u64 
    push           mm_lib.addlistunit.p u64 
    push           mm_lib.addlistunit.ulistx u64 
    storeptr                  u64 
    push           mm_lib.addlistunit.ulist u64 
    popptr                    u64 
    jump           #13239     
#13238: 
    push           mm_lib.addlistunit.p u64 
    push           mm_lib.addlistunit.ulistx u64 
    pushptr                   u64 
    push           8          
    popptroff                 u64 1 0
#13239: 
    push           mm_lib.addlistunit.p u64 
    push           mm_lib.addlistunit.ulistx u64 
    popptr                    u64 
#13240: 
    retproc                   
End


Proc mm_lib.storemode: i64
    param          mm_lib.storemode.owner u64 
    param          mm_lib.storemode.m i64 
    param          mm_lib.storemode.pmode u64 
    local          mm_lib.storemode.r u64 
    procentry                 
    push           mm_lib.storemode.m i64 
    push           0          i64 
    jumplt         #13242     i64 
    push           mm_lib.storemode.m i64 
    push           mm_lib.storemode.pmode u64 
    popptr                    i32 
    push           mm_lib.storemode.m i64 
    setret                    i64 
    jump           #13243     
#13242: 
    push           &mm_decls.typenames 
    push           mm_lib.storemode.m i64 
    neg                       i64 
    addrefoff                 block:32 32 0
    pop            mm_lib.storemode.r u64 
    push           mm_lib.storemode.r u64 
    push           24         
    pushptroff                u64 1 0
    push           0          u64 
    jumpne         #13244     u64 
    push           mm_lib.storemode.owner u64 
    push           mm_lib.storemode.r u64 
    push           0          
    popptroff                 u64 1 0
    push           mm_lib.storemode.m i64 
    push           mm_lib.storemode.pmode u64 
    popptr                    i32 
    push           mm_lib.storemode.pmode u64 
    push           mm_lib.storemode.r u64 
    push           24         
    popptroff                 u64 1 0
    push           mm_lib.storemode.r u64 
    push           24         
    pushptroff                u64 1 0
    push           0          u64 
    jumpne         #13245     u64 
    setargs                   1 0
    push           "PMODE=NIL" u64 
    callproc       &mm_support.serror 
#13245: 
    push           mm_lib.storemode.m i64 
    setret                    i64 
    jump           #13243     
#13244: 
    setargs                   2 0
    push           mm_lib.storemode.r u64 
    push           16         
    pushptroff                u64 1 0
    push           mm_lib.storemode.r u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &mm_lib.newtypename i64 
    pop            mm_lib.storemode.m i64 
    push           &mm_decls.typenames 
    push           mm_lib.storemode.m i64 
    neg                       i64 
    addrefoff                 block:32 32 0
    pop            mm_lib.storemode.r u64 
    push           mm_lib.storemode.owner u64 
    push           mm_lib.storemode.r u64 
    push           0          
    popptroff                 u64 1 0
    push           mm_lib.storemode.m i64 
    push           mm_lib.storemode.pmode u64 
    popptr                    i32 
    push           mm_lib.storemode.pmode u64 
    push           mm_lib.storemode.r u64 
    push           24         
    popptroff                 u64 1 0
    push           mm_lib.storemode.m i64 
    setret                    i64 
    jump           #13243     
#13243: 
    retfn                     i64 
End


Proc mm_lib.gettypebase: i64
    param          mm_lib.gettypebase.m i64 
    procentry                 
    startmult                 
    push           &mm_decls.ttbasetype 
    push           mm_lib.gettypebase.m i64 
    pushptroff                i32 4 0
    switch         #13247     6 23
    opnd           #13248     
#13247: 
    switchlabel    #13249     
    switchlabel    #13248     
    switchlabel    #13248     
    switchlabel    #13248     
    switchlabel    #13248     
    switchlabel    #13248     
    switchlabel    #13248     
    switchlabel    #13248     
    switchlabel    #13248     
    switchlabel    #13248     
    switchlabel    #13250     
    switchlabel    #13250     
    switchlabel    #13251     
    switchlabel    #13251     
    switchlabel    #13251     
    switchlabel    #13252     
    switchlabel    #13252     
    switchlabel    #13252     
    endswitch                 
#13251: 
    push           4          i64 
    resetmult                 
    jump           #13253     
#13252: 
    push           4          i64 
    resetmult                 
    jump           #13253     
#13249: 
    push           7          i64 
    resetmult                 
    jump           #13253     
#13250: 
    push           1          i64 
    resetmult                 
    jump           #13253     
#13248: 
    push           mm_lib.gettypebase.m i64 
    endmult                   
#13253: 
    setret                    i64 
    jump           #13254     
#13254: 
    retfn                     i64 
End


Proc mm_lib.writegsfile:
    param          mm_lib.writegsfile.filename u64 
    param          mm_lib.writegsfile.d u64 
    local          mm_lib.writegsfile.f u64 
    procentry                 
    setargs                   2 0
    push           "w"        u64 
    push           mm_lib.writegsfile.filename u64 
    callfn         &fopen     u64 
    pop            mm_lib.writegsfile.f u64 
    setargs                   2 0
    push           mm_lib.writegsfile.f u64 
    push           mm_lib.writegsfile.d u64 
    callproc       &mlibp.gs_println 
    setargs                   1 0
    push           mm_lib.writegsfile.f u64 
    callproc       &fclose    
#13256: 
    retproc                   
End


Proc mm_lib.addtolog:
    param          mm_lib.addtolog.filename u64 
    param          mm_lib.addtolog.logdest u64 
    local          mm_lib.addtolog.f u64 
    local          mm_lib.addtolog.c i64 
    procentry                 
    setargs                   2 0
    push           "rb"       u64 
    push           mm_lib.addtolog.filename u64 
    callfn         &fopen     u64 
    pop            mm_lib.addtolog.f u64 
    push           mm_lib.addtolog.f u64 
    push           0          u64 
    jumpne         #13258     u64 
    jump           #13259     
#13258: 
#13260: 
    setargs                   1 0
    push           mm_lib.addtolog.f u64 
    callfn         &fgetc     i32 
    pop            mm_lib.addtolog.c i64 
    push           mm_lib.addtolog.c i64 
    push           -1         i64 
    jumpne         #13261     i64 
    jump           #13262     
#13261: 
    setargs                   2 0
    push           mm_lib.addtolog.logdest u64 
    push           mm_lib.addtolog.c i64 
    callproc       &fputc     
    jump           #13260     
#13262: 
    setargs                   1 0
    push           mm_lib.addtolog.f u64 
    callproc       &fclose    
#13259: 
    retproc                   
End


Proc mm_lib.getprocretmodes: u64
    param          mm_lib.getprocretmodes.p u64 
    local          mm_lib.getprocretmodes.d u64 
    local          mm_lib.getprocretmodes.a u64 
    procentry                 
    push           mm_lib.getprocretmodes.p u64 
    pushptr                   u8 
    push           31         i64 
    jumpeq         #13264     i64 
    setargs                   2 0
    push           0          u64 
    push           "multass/need multfn" u64 
    callproc       &mm_support.txerror 
#13264: 
    push           mm_lib.getprocretmodes.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_lib.getprocretmodes.a u64 
    startmult                 
    push           mm_lib.getprocretmodes.a u64 
    pushptr                   u8 
    push           3          i64 
    casejumpeq     #13265     i64 0
    popstack                  i64 
    jump           #13266     
#13265: 
    push           mm_lib.getprocretmodes.a u64 
    push           16         
    pushptroff                u64 1 0
    resetmult                 
    jump           #13267     
#13266: 
    push           &mm_decls.ttnamedef 
    push           &mm_decls.tttarget 
    push           mm_lib.getprocretmodes.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    pushptroff                u64 8 0
    endmult                   
#13267: 
    setret                    u64 
    jump           #13268     
#13268: 
    retfn                     u64 
End


Proc mm_lib.getmemmode: i64
    param          mm_lib.getmemmode.p u64 
    procentry                 
    push           mm_lib.getmemmode.p u64 
    push           52         
    pushptroff                i32 1 0
    jumpfalse      #13270     i64 
    push           mm_lib.getmemmode.p u64 
    push           52         
    pushptroff                i32 1 0
    setret                    i64 
    jump           #13271     
#13270: 
    push           mm_lib.getmemmode.p u64 
    push           48         
    pushptroff                i32 1 0
    setret                    i64 
    jump           #13271     
#13271: 
    retfn                     i64 
End


Proc mm_lib.isnum: i64
    param          mm_lib.isnum.m i64 
    procentry                 
    push           mm_lib.isnum.m i64 
    push           1          i64 
    jumplt         #13273     i64 
    push           mm_lib.isnum.m i64 
    push           7          i64 
    jumpgt         #13273     i64 
    push           1          i64 
    setret                    i64 
    jump           #13274     
#13273: 
    push           0          i64 
    setret                    i64 
    jump           #13274     
#13274: 
    retfn                     i64 
End


Proc mm_lib.isboolunit: i64
    param          mm_lib.isboolunit.p u64 
    procentry                 
    startmult                 
    push           mm_lib.isboolunit.p u64 
    pushptr                   u8 
    push           34         i64 
    casejumpeq     #13276     i64 0
    push           14         i64 
    casejumpeq     #13276     i64 0
    push           15         i64 
    casejumpeq     #13276     i64 0
    push           17         i64 
    casejumpeq     #13276     i64 0
    push           18         i64 
    casejumpeq     #13276     i64 0
    push           42         i64 
    casejumpeq     #13276     i64 0
    push           43         i64 
    casejumpeq     #13276     i64 0
    push           35         i64 
    casejumpeq     #13276     i64 0
    popstack                  i64 
    jump           #13277     
#13276: 
    push           1          i64 
    resetmult                 
    jump           #13278     
#13277: 
    push           0          i64 
    endmult                   
#13278: 
    setret                    i64 
    jump           #13279     
#13279: 
    retfn                     i64 
End


Proc mm_lib.addcclib:
    param          mm_lib.addcclib.name u64 
    local          mm_lib.addcclib.i i64 
    procentry                 
#13281: 
    push           1          i64 
    pop            mm_lib.addcclib.i i64 
    push           mm_decls.ncclibs i64 
    push           1          i64 
    jumplt         #13282     i64 
#13283: 
    setargs                   2 0
    push           &mm_decls.cclibtable 
    push           mm_lib.addcclib.i i64 
    pushptroff                u64 8 -8
    push           mm_lib.addcclib.name u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #13284     i64 
    jump           #13285     
#13284: 
#13286: 
    forup          #13283     i64 1
    opnd           mm_lib.addcclib.i 
    opnd           mm_decls.ncclibs 
#13282: 
    push           mm_decls.ncclibs i64 
    push           10         i64 
    jumplt         #13287     i64 
    setargs                   1 0
    push           "Too many cclibs" u64 
    callproc       &mm_support.serror 
#13287: 
    setargs                   1 0
    push           mm_lib.addcclib.name u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &mm_decls.cclibtable 
    push           &mm_decls.ncclibs 
    incrload                  i64 1
    popptroff                 u64 8 -8
#13285: 
    retproc                   
End


Proc mm_lib.getpclmode: i64
    param          mm_lib.getpclmode.t i64 
    local          mm_lib.getpclmode.u i64 
    procentry                 
    push           &mm_tables.stdtopcl 
    push           &mm_decls.ttbasetype 
    push           mm_lib.getpclmode.t i64 
    pushptroff                i32 4 0
    pushptroff                u8 1 0
    pop            mm_lib.getpclmode.u i64 
    push           mm_lib.getpclmode.u i64 
    setret                    i64 
    jump           #13289     
#13289: 
    retfn                     i64 
End


Proc mm_diags.printoverloads:
    param          mm_diags.printoverloads.f u64 
    local          mm_diags.printoverloads.p u64 
    local          mm_diags.printoverloads.av_1 i64 
    local          mm_diags.printoverloads.i i64 
    procentry                 
    setargs                   1 0
    push           mm_diags.printoverloads.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "OVERLOADS" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13291: 
    push           1          i64 
    pop            mm_diags.printoverloads.i i64 
    push           143        i64 
    pop            mm_diags.printoverloads.av_1 i64 
    push           mm_diags.printoverloads.av_1 i64 
    push           1          i64 
    jumplt         #13292     i64 
#13293: 
    push           &mm_decls.overloadtable 
    push           mm_diags.printoverloads.i i64 
    pushptroff                u64 8 0
    pop            mm_diags.printoverloads.p u64 
    push           mm_diags.printoverloads.p u64 
    jumpfalse      #13294     u64 
    jump           #13295     
#13296: 
    push           mm_diags.printoverloads.p u64 
    push           4          
    pushptroff                i32 1 0
    jumpfalse      #13297     i64 
    setargs                   1 0
    push           mm_diags.printoverloads.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "operator (#)(#,#)#" u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           &mm_tables.jtagnames 
    push           mm_diags.printoverloads.i i64 
    pushptroff                u64 8 0
    push           2          i64 
    addrefoff                 u64 1 0
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    setargs                   2 0
    push           1          i64 
    push           mm_diags.printoverloads.p u64 
    pushptr                   i32 
    callfn         &mm_lib.strmode u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    setargs                   2 0
    push           1          i64 
    push           mm_diags.printoverloads.p u64 
    push           4          
    pushptroff                i32 1 0
    callfn         &mm_lib.strmode u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    setargs                   2 0
    push           1          i64 
    push           mm_diags.printoverloads.p u64 
    push           8          
    pushptroff                i32 1 0
    callfn         &mm_lib.strmode u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13298     
#13297: 
    setargs                   1 0
    push           mm_diags.printoverloads.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "operator (#)(#)#" u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           &mm_tables.jtagnames 
    push           mm_diags.printoverloads.i i64 
    pushptroff                u64 8 0
    push           2          i64 
    addrefoff                 u64 1 0
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    setargs                   2 0
    push           1          i64 
    push           mm_diags.printoverloads.p u64 
    pushptr                   i32 
    callfn         &mm_lib.strmode u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    setargs                   2 0
    push           1          i64 
    push           mm_diags.printoverloads.p u64 
    push           8          
    pushptroff                i32 1 0
    callfn         &mm_lib.strmode u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13298: 
    push           mm_diags.printoverloads.p u64 
    push           16         
    pushptroff                u64 1 0
    jumpfalse      #13299     u64 
    setargs                   1 0
    push           mm_diags.printoverloads.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "="        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_diags.printoverloads.p u64 
    push           16         
    pushptroff                u64 1 0
    callproc       &msysp.m$print_ptr_nf 
    setargs                   1 0
    setargs                   1 0
    push           mm_diags.printoverloads.p u64 
    push           16         
    pushptroff                u64 1 0
    callfn         &mm_lib.strexpr u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13299: 
    setargs                   1 0
    push           mm_diags.printoverloads.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           mm_diags.printoverloads.p u64 
    push           24         
    pushptroff                u64 1 0
    pop            mm_diags.printoverloads.p u64 
#13295: 
    push           mm_diags.printoverloads.p u64 
    jumptrue       #13296     u64 
#13300: 
    setargs                   1 0
    push           mm_diags.printoverloads.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13294: 
#13301: 
    forup          #13293     i64 1
    opnd           mm_diags.printoverloads.i 
    opnd           mm_diags.printoverloads.av_1 
#13292: 
#13302: 
    retproc                   
End


Proc mm_diags.printst:
    param          mm_diags.printst.f u64 
    param          mm_diags.printst.p u64 
    param          mm_diags.printst.level i64 
    local          mm_diags.printst.q u64 
    procentry                 
    push           mm_diags.printst.p u64 
    push           77         
    pushptroff                u8 1 0
    push           79         i64 
    jumpeq         #13304     i64 
    setargs                   1 0
    push           "PRINTST not name" u64 
    callproc       &mm_support.mcerror 
#13304: 
    setargs                   3 0
    push           mm_diags.printst.level i64 
    push           mm_diags.printst.p u64 
    push           mm_diags.printst.f u64 
    callproc       &mm_diags.printstrec 
    push           mm_diags.printst.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_diags.printst.q u64 
    jump           #13305     
#13306: 
    setargs                   3 0
    push           mm_diags.printst.level i64 
    push           1          i64 
    add                       i64 
    push           mm_diags.printst.q u64 
    push           mm_diags.printst.f u64 
    callproc       &mm_diags.printst 
    push           mm_diags.printst.q u64 
    push           32         
    pushptroff                u64 1 0
    pop            mm_diags.printst.q u64 
#13305: 
    push           mm_diags.printst.q u64 
    push           0          u64 
    jumpne         #13306     u64 
#13307: 
#13308: 
    retproc                   
End


Proc mm_diags.printstrec:
    param          mm_diags.printstrec.f u64 
    param          mm_diags.printstrec.p u64 
    param          mm_diags.printstrec.level i64 
    local          mm_diags.printstrec.dd block:128 
    local          mm_diags.printstrec.q u64 
    local          mm_diags.printstrec.v block:16 
    local          mm_diags.printstrec.d u64 
    local          mm_diags.printstrec.col i64 
    local          mm_diags.printstrec.offset i64 
    local          mm_diags.printstrec.n i64 
    local          mm_diags.printstrec.str block:256 
    local          mm_diags.printstrec.av_1 i64 
    procentry                 
    push           &mm_diags.printstrec.v 
    pop            mm_diags.printstrec.d u64 
    setargs                   1 0
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_init 
    push           0          i64 
    pop            mm_diags.printstrec.offset i64 
#13310: 
    push           mm_diags.printstrec.level i64 
    pop            mm_diags.printstrec.av_1 i64 
    push           mm_diags.printstrec.av_1 i64 
    push           0          i64 
    jumple         #13311     i64 
#13312: 
    setargs                   2 0
    push           "    "     u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    push           &mm_diags.printstrec.offset 
    push           4          i64 
    addto                     i64 
#13313: 
    to             #13312     
    opnd           mm_diags.printstrec.av_1 
#13311: 
    setargs                   2 0
    push           ":"        u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    setargs                   4 0
    push           45         i64 
    push           28         i64 
    push           mm_diags.printstrec.offset i64 
    sub                       i64 
    push           mm_diags.printstrec.p u64 
    pushptr                   u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_leftstr 
    setargs                   4 0
    push           46         i64 
    push           12         i64 
    push           &mm_tables.namenames 
    push           mm_diags.printstrec.p u64 
    push           78         
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_leftstr 
    setargs                   1 0
    push           mm_diags.printstrec.d u64 
    callfn         &mlibp.gs_getcol i64 
    pop            mm_diags.printstrec.col i64 
    push           mm_diags.printstrec.p u64 
    pushptr                   block:128 
    pop            mm_diags.printstrec.dd block:128 
    setargs                   2 0
    push           "["        u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    push           mm_diags.printstrec.p u64 
    push           92         
    pushptroff                u16 1 0
    push           14         i64 
    dotindex                  i64 
    jumpfalse      #13314     u64 
    setargs                   2 0
    push           "Imp "     u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    jump           #13315     
#13314: 
    setargs                   2 0
    startmult                 
    push           mm_diags.printstrec.p u64 
    push           92         
    pushptroff                u16 1 0
    push           0          i64 
    push           1          i64 
    dotslice                  i64 
    switch         #13316     1 3
    opnd           #13317     
#13316: 
    switchlabel    #13318     
    switchlabel    #13319     
    switchlabel    #13320     
    endswitch                 
#13318: 
    push           "Prog "    u64 
    resetmult                 
    jump           #13321     
#13319: 
    push           "Exp "     u64 
    resetmult                 
    jump           #13321     
#13320: 
    push           "ExpQ "    u64 
    resetmult                 
    jump           #13321     
#13317: 
    push           "Loc "     u64 
    endmult                   
#13321: 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
#13315: 
    push           &mm_diags.printstrec.dd 
    push           92         
    pushptroff                u16 1 0
    push           2          i64 
    dotindex                  i64 
    jumpfalse      #13322     u64 
    setargs                   2 0
    push           "Stat"     u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
#13322: 
    push           &mm_diags.printstrec.dd 
    push           115        
    pushptroff                u8 1 0
    jumpfalse      #13323     i64 
    setargs                   2 0
    push           &mm_tables.fflangnames 
    push           &mm_diags.printstrec.dd 
    push           115        
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_strsp 
#13323: 
    push           &mm_diags.printstrec.dd 
    push           78         
    pushptroff                u8 1 0
    push           13         i64 
    jumpne         #13324     i64 
    push           &mm_diags.printstrec.dd 
    push           104        
    pushptroff                u8 1 0
    jumpfalse      #13324     i64 
    setargs                   2 0
    push           &mm_tables.parammodenames 
    push           &mm_diags.printstrec.dd 
    push           104        
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
#13324: 
    push           &mm_diags.printstrec.dd 
    push           117        
    pushptroff                u8 1 0
    jumpfalse      #13325     i64 
    setargs                   2 0
    push           "@@"       u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           &mm_diags.printstrec.dd 
    push           117        
    pushptroff                u8 1 0
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_strint 
    setargs                   2 0
    push           " maxalign:" u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           &mm_diags.printstrec.dd 
    push           122        
    pushptroff                i16 1 0
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_strint 
    setargs                   2 0
    push           " "        u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
#13325: 
    push           &mm_diags.printstrec.dd 
    push           105        
    pushptroff                u8 1 0
    jumpfalse      #13326     i64 
    setargs                   2 0
    push           "Opt "     u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
#13326: 
    push           &mm_diags.printstrec.dd 
    push           117        
    pushptroff                u8 1 0
    jumpfalse      #13327     i64 
    setargs                   2 0
    push           "Var:"     u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           &mm_diags.printstrec.dd 
    push           117        
    pushptroff                u8 1 0
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_strint 
    setargs                   2 0
    push           " "        u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
#13327: 
    push           &mm_diags.printstrec.dd 
    push           94         
    pushptroff                u8 1 0
    jumpfalse      #13328     i64 
    setargs                   1 0
    push           &mm_diags.printstrec.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "Modno#"   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           &mm_diags.printstrec.dd 
    push           94         
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           &mm_diags.printstrec.str 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
#13328: 
    push           &mm_diags.printstrec.dd 
    push           92         
    pushptroff                u16 1 0
    push           3          i64 
    dotindex                  i64 
    jumpfalse      #13329     u64 
    setargs                   2 0
    push           "U "       u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
#13329: 
    push           &mm_diags.printstrec.dd 
    push           118        
    pushptroff                u8 1 0
    jumpfalse      #13330     i64 
    setargs                   2 0
    push           "Threaded " u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
#13330: 
    setargs                   2 0
    push           "]"        u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    setargs                   3 0
    push           61         i64 
    push           mm_diags.printstrec.col i64 
    push           10         i64 
    add                       i64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_padto 
    push           mm_diags.printstrec.p u64 
    push           8          
    pushptroff                u64 1 0
    jumpfalse      #13331     u64 
    setargs                   1 0
    push           &mm_diags.printstrec.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "(#)"      u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           mm_diags.printstrec.p u64 
    push           8          
    pushptroff                u64 1 0
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   4 0
    push           45         i64 
    push           18         i64 
    push           &mm_diags.printstrec.str 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_leftstr 
    jump           #13332     
#13331: 
    setargs                   4 0
    push           45         i64 
    push           18         i64 
    push           "()"       u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_leftstr 
#13332: 
    push           mm_diags.printstrec.p u64 
    push           72         
    pushptroff                i32 1 0
    push           0          i64 
    casejumpeq     #13333     i64 0
    popstack                  i64 
    jump           #13334     
#13333: 
    setargs                   2 0
    push           "Void "    u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    jump           #13335     
#13334: 
    setargs                   2 0
    push           mm_diags.printstrec.p u64 
    push           72         
    pushptroff                i32 1 0
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_strint 
    setargs                   2 0
    push           ":"        u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    setargs                   2 0
    push           1          i64 
    push           mm_diags.printstrec.p u64 
    push           72         
    pushptroff                i32 1 0
    callfn         &mm_lib.strmode u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           " "        u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
#13335: 
    push           mm_diags.printstrec.p u64 
    push           78         
    pushptroff                u8 1 0
    push           14         i64 
    casejumpeq     #13336     i64 0
    push           13         i64 
    casejumpeq     #13336     i64 0
    push           15         i64 
    casejumpeq     #13337     i64 0
    push           5          i64 
    casejumpeq     #13338     i64 0
    push           8          i64 
    casejumpeq     #13338     i64 0
    push           6          i64 
    casejumpeq     #13339     i64 0
    push           11         i64 
    casejumpeq     #13340     i64 0
    push           12         i64 
    casejumpeq     #13341     i64 0
    push           10         i64 
    casejumpeq     #13342     i64 0
    push           4          i64 
    casejumpeq     #13343     i64 0
    push           16         i64 
    casejumpeq     #13344     i64 0
    push           3          i64 
    casejumpeq     #13345     i64 0
    popstack                  i64 
    jump           #13346     
#13336: 
    setargs                   2 0
    push           " Offset:" u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           mm_diags.printstrec.p u64 
    push           84         
    pushptroff                i32 1 0
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_strint 
    push           mm_diags.printstrec.p u64 
    push           72         
    pushptroff                i32 1 0
    push           30         i64 
    jumpne         #13347     i64 
    setargs                   2 0
    push           " Bitoffset:" u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           mm_diags.printstrec.p u64 
    push           118        
    pushptroff                u8 1 0
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_strint 
    setargs                   2 0
    push           ":"        u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           mm_diags.printstrec.p u64 
    push           116        
    pushptroff                u8 1 0
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_strint 
#13347: 
    setargs                   1 0
    push           &mm_diags.printstrec.str 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    push           "v"        u64 
    push           mm_diags.printstrec.p u64 
    push           111        
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64 
    setargs                   2 0
    push           ".*"       u64 
    push           mm_diags.printstrec.p u64 
    push           104        
    addrefoff                 u64 1 0
    callproc       &msysp.m$print_str 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           " UFLAGS:" u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           &mm_diags.printstrec.str 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           "-"        u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           mm_diags.printstrec.p u64 
    push           111        
    pushptroff                u8 1 0
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_strint 
    push           mm_diags.printstrec.p u64 
    push           64         
    pushptroff                u64 1 0
    jumpfalse      #13348     u64 
    setargs                   2 0
    push           "/:="      u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    setargs                   1 0
    push           mm_diags.printstrec.p u64 
    push           64         
    pushptroff                u64 1 0
    callfn         &mm_lib.strexpr u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_strvar 
#13348: 
    push           mm_diags.printstrec.p u64 
    push           78         
    pushptroff                u8 1 0
    push           13         i64 
    jumpne         #13349     i64 
    push           mm_diags.printstrec.p u64 
    push           106        
    pushptroff                u8 1 0
    jumpfalse      #13349     i64 
    setargs                   2 0
    push           "..."      u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
#13349: 
    jump           #13350     
#13337: 
    setargs                   2 0
    push           "Index:"   u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           mm_diags.printstrec.p u64 
    push           84         
    pushptroff                i32 1 0
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_strint 
    jump           #13350     
#13338: 
    setargs                   2 0
    push           "Index:"   u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           mm_diags.printstrec.p u64 
    push           80         
    pushptroff                i32 1 0
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_strint 
    setargs                   2 0
    push           " Nret:"   u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           mm_diags.printstrec.p u64 
    push           116        
    pushptroff                u8 1 0
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_strint 
    jump           #13350     
#13339: 
    setargs                   2 0
    push           "Index/PCaddr:" u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           mm_diags.printstrec.p u64 
    push           80         
    pushptroff                i32 1 0
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_strint 
    push           mm_diags.printstrec.p u64 
    push           96         
    pushptroff                u64 1 0
    jumpfalse      #13351     u64 
    setargs                   2 0
    push           " Truename:" u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           mm_diags.printstrec.p u64 
    push           96         
    pushptroff                u64 1 0
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
#13351: 
    jump           #13350     
#13340: 
    push           mm_diags.printstrec.p u64 
    push           64         
    pushptroff                u64 1 0
    jumpfalse      #13352     u64 
    setargs                   2 0
    push           "="        u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    setargs                   1 0
    push           mm_diags.printstrec.p u64 
    push           64         
    pushptroff                u64 1 0
    callfn         &mm_lib.strexpr u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_strvar 
#13352: 
    jump           #13350     
#13341: 
    push           mm_diags.printstrec.p u64 
    push           64         
    pushptroff                u64 1 0
    jumpfalse      #13353     u64 
    setargs                   2 0
    push           ":="       u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    setargs                   1 0
    push           mm_diags.printstrec.p u64 
    push           64         
    pushptroff                u64 1 0
    callfn         &mm_lib.strexpr u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_strvar 
#13353: 
    jump           #13350     
#13342: 
    setargs                   2 0
    push           "Const:"   u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    setargs                   1 0
    push           mm_diags.printstrec.p u64 
    push           64         
    pushptroff                u64 1 0
    callfn         &mm_lib.strexpr u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_strvar 
    jump           #13350     
#13343: 
    push           mm_diags.printstrec.p u64 
    push           112        
    pushptroff                i32 1 0
    jumpfalse      #13354     i64 
    setargs                   2 0
    push           "Baseclass:" u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           "<HAS BASECLASS>" u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
#13354: 
    jump           #13350     
#13344: 
    setargs                   2 0
    push           "Enum:"    u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           mm_diags.printstrec.p u64 
    push           80         
    pushptroff                i32 1 0
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_strint 
    jump           #13350     
#13345: 
    setargs                   2 0
    push           "DLL#:"    u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           mm_diags.printstrec.p u64 
    push           113        
    pushptroff                u8 1 0
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_strint 
    jump           #13350     
#13346: 
#13350: 
    push           mm_diags.printstrec.p u64 
    push           92         
    pushptroff                u16 1 0
    push           12         i64 
    dotindex                  i64 
    jumpfalse      #13355     u64 
    setargs                   2 0
    push           " @"       u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           mm_diags.printstrec.p u64 
    push           96         
    pushptroff                u64 1 0
    pushptr                   u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
#13355: 
    push           mm_diags.printstrec.p u64 
    push           92         
    pushptroff                u16 1 0
    push           13         i64 
    dotindex                  i64 
    jumpfalse      #13356     u64 
    setargs                   2 0
    setargs                   1 0
    push           mm_diags.printstrec.p u64 
    push           96         
    pushptroff                u64 1 0
    callfn         &mm_lib.strexpr u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_strvar 
#13356: 
    setargs                   2 0
    push           " Module# " u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           mm_diags.printstrec.p u64 
    push           94         
    pushptroff                u8 1 0
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_strint 
    setargs                   2 0
    push           " Lineno:" u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           mm_diags.printstrec.p u64 
    push           88         
    pushptroff                u32 1 0
    push           0          i64 
    push           23         i64 
    dotslice                  i64 
    push           16777215   i64 
    iand                      i64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_strint 
    setargs                   2 0
    push           mm_diags.printstrec.f u64 
    push           mm_diags.printstrec.d u64 
    callproc       &mlibp.gs_println 
    push           mm_diags.printstrec.p u64 
    push           78         
    pushptroff                u8 1 0
    push           10         i64 
    casejumpeq     #13357     i64 0
    push           12         i64 
    casejumpeq     #13357     i64 0
    push           11         i64 
    casejumpeq     #13357     i64 0
    push           20         i64 
    casejumpeq     #13357     i64 0
    popstack                  i64 
    jump           #13358     
#13357: 
    push           mm_diags.printstrec.p u64 
    push           64         
    pushptroff                u64 1 0
    jumpfalse      #13359     u64 
    setargs                   4 0
    push           mm_diags.printstrec.f u64 
    push           "*"        u64 
    push           0          i64 
    push           mm_diags.printstrec.p u64 
    push           64         
    pushptroff                u64 1 0
    callproc       &mm_diags.printunit 
#13359: 
    jump           #13360     
#13358: 
#13360: 
#13361: 
    retproc                   
End


Proc mm_diags.printstflat:
    param          mm_diags.printstflat.f u64 
    local          mm_diags.printstflat.i i64 
    local          mm_diags.printstflat.p u64 
    local          mm_diags.printstflat.av_1 i64 
    procentry                 
    setargs                   1 0
    push           mm_diags.printstflat.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "GLOBAL SYMBOL TABLE:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13363: 
    push           0          i64 
    pop            mm_diags.printstflat.i i64 
    push           32766      i64 
    pop            mm_diags.printstflat.av_1 i64 
    push           mm_diags.printstflat.av_1 i64 
    push           0          i64 
    jumplt         #13364     i64 
#13365: 
    push           &mm_lex.hashtable 
    push           mm_diags.printstflat.i i64 
    addrefoff                 block:128 128 0
    pop            mm_diags.printstflat.p u64 
    push           mm_diags.printstflat.p u64 
    pushptr                   u64 
    jumpfalse      #13366     u64 
    push           mm_diags.printstflat.p u64 
    push           77         
    pushptroff                u8 1 0
    push           79         i64 
    casejumpeq     #13367     i64 0
    popstack                  i64 
    jump           #13368     
#13367: 
    setargs                   1 0
    push           mm_diags.printstflat.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           mm_diags.printstflat.i i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           mm_diags.printstflat.p u64 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   1 0
    push           ":"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_diags.printstflat.p u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_tables.symbolnames 
    push           mm_diags.printstflat.p u64 
    push           77         
    pushptroff                u8 1 0
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_tables.namenames 
    push           mm_diags.printstflat.p u64 
    push           78         
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           mm_diags.printstflat.p u64 
    push           40         
    pushptroff                u64 1 0
    pop            mm_diags.printstflat.p u64 
    jump           #13369     
#13370: 
    setargs                   1 0
    push           mm_diags.printstflat.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "\t"       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_diags.printstflat.p u64 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   1 0
    push           mm_diags.printstflat.p u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_tables.symbolnames 
    push           mm_diags.printstflat.p u64 
    push           77         
    pushptroff                u8 1 0
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_tables.namenames 
    push           mm_diags.printstflat.p u64 
    push           78         
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "(From"    u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    startmult                 
    push           mm_diags.printstflat.p u64 
    push           8          
    pushptroff                u64 1 0
    jumpfalse      #13371     u64 
    push           mm_diags.printstflat.p u64 
    push           8          
    pushptroff                u64 1 0
    pushptr                   u64 
    resetmult                 
    jump           #13372     
#13371: 
    push           "-"        u64 
    endmult                   
#13372: 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           ")"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           mm_diags.printstflat.p u64 
    push           40         
    pushptroff                u64 1 0
    pop            mm_diags.printstflat.p u64 
#13369: 
    push           mm_diags.printstflat.p u64 
    jumptrue       #13370     u64 
#13373: 
    jump           #13374     
#13368: 
#13374: 
#13366: 
#13375: 
    forup          #13365     i64 1
    opnd           mm_diags.printstflat.i 
    opnd           mm_diags.printstflat.av_1 
#13364: 
#13376: 
    retproc                   
End


Proc mm_diags.printcode:
    param          mm_diags.printcode.f u64 
    param          mm_diags.printcode.caption u64 
    local          mm_diags.printcode.p u64 
    local          mm_diags.printcode.pp u64 
    procentry                 
    push           mm_decls.proclist u64 
    pop            mm_diags.printcode.pp u64 
    jump           #13378     
#13379: 
    push           mm_diags.printcode.pp u64 
    pushptr                   u64 
    pop            mm_diags.printcode.p u64 
    setargs                   1 0
    push           mm_diags.printcode.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           mm_diags.printcode.p u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           "="        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    startmult                 
    push           mm_diags.printcode.p u64 
    push           92         
    pushptroff                u16 1 0
    push           0          i64 
    push           1          i64 
    dotslice                  i64 
    switch         #13380     1 3
    opnd           #13381     
#13380: 
    switchlabel    #13382     
    switchlabel    #13383     
    switchlabel    #13384     
    endswitch                 
#13382: 
    push           "Global"   u64 
    resetmult                 
    jump           #13385     
#13383: 
    push           "Export"   u64 
    resetmult                 
    jump           #13385     
#13384: 
    push           "ExportQ"  u64 
    resetmult                 
    jump           #13385     
#13381: 
    push           "Local"    u64 
    endmult                   
#13385: 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           mm_diags.printcode.p u64 
    push           8          
    pushptroff                u64 1 0
    push           78         
    pushptroff                u8 1 0
    push           4          i64 
    jumpne         #13386     i64 
    setargs                   1 0
    push           mm_diags.printcode.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           " in record" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_diags.printcode.p u64 
    push           8          
    pushptroff                u64 1 0
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13386: 
    setargs                   1 0
    push           mm_diags.printcode.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   4 0
    push           mm_diags.printcode.f u64 
    push           "1"        u64 
    push           0          i64 
    push           mm_diags.printcode.p u64 
    push           64         
    pushptroff                u64 1 0
    callproc       &mm_diags.printunit 
    setargs                   1 0
    push           mm_diags.printcode.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           mm_diags.printcode.pp u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_diags.printcode.pp u64 
#13378: 
    push           mm_diags.printcode.pp u64 
    jumptrue       #13379     u64 
#13387: 
#13388: 
    retproc                   
End


Proc mm_diags.printunit:
    param          mm_diags.printunit.p u64 
    param          mm_diags.printunit.level i64 
    param          mm_diags.printunit.prefix u64 
    param          mm_diags.printunit.dev u64 
    local          mm_diags.printunit.q u64 
    local          mm_diags.printunit.d u64 
    local          mm_diags.printunit.t i64 
    local          mm_diags.printunit.idname u64 
    local          mm_diags.printunit.a i64 
    local          mm_diags.printunit.x32 r32 
    local          mm_diags.printunit.av_1 i64 
    local          mm_diags.printunit.i i64 
    procentry                 
    push           mm_diags.printunit.p u64 
    push           0          u64 
    jumpne         #13390     u64 
    jump           #13391     
#13390: 
    push           mm_diags.printunit.p u64 
    push           4          
    pushptroff                u32 1 0
    push           0          i64 
    push           23         i64 
    dotslice                  i64 
    jumpfalse      #13392     u64 
    push           mm_diags.printunit.p u64 
    push           4          
    pushptroff                u32 1 0
    push           0          i64 
    push           23         i64 
    dotslice                  i64 
    pop            mm_diags.currlineno i64 
    push           mm_diags.printunit.p u64 
    push           4          
    pushptroff                u32 1 0
    push           24         i64 
    push           31         i64 
    dotslice                  i64 
    pop            mm_diags.currfileno i64 
#13392: 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           mm_diags.printunit.p u64 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   1 0
    push           ":"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    setargs                   3 0
    push           mm_diags.printunit.p u64 
    push           mm_diags.printunit.prefix u64 
    push           mm_diags.printunit.level i64 
    callfn         &mm_diags.getprefix u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           &mm_tables.jtagnames 
    push           mm_diags.printunit.p u64 
    pushptr                   u8 
    pushptroff                u64 8 0
    push           2          i64 
    addrefoff                 u64 1 0
    pop            mm_diags.printunit.idname u64 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           mm_diags.printunit.idname u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           ": "       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           mm_diags.printunit.p u64 
    pushptr                   u8 
    push           3          i64 
    casejumpeq     #13393     i64 0
    push           109        i64 
    casejumpeq     #13394     i64 0
    push           1          i64 
    casejumpeq     #13395     i64 0
    push           7          i64 
    casejumpeq     #13396     i64 0
    push           65         i64 
    casejumpeq     #13397     i64 0
    push           72         i64 
    casejumpeq     #13398     i64 0
    push           61         i64 
    casejumpeq     #13399     i64 0
    push           64         i64 
    casejumpeq     #13399     i64 0
    push           19         i64 
    casejumpeq     #13400     i64 0
    push           25         i64 
    casejumpeq     #13400     i64 0
    push           51         i64 
    casejumpeq     #13401     i64 0
    push           48         i64 
    casejumpeq     #13402     i64 0
    push           57         i64 
    casejumpeq     #13402     i64 0
    push           113        i64 
    casejumpeq     #13403     i64 0
    push           111        i64 
    casejumpeq     #13403     i64 0
    push           110        i64 
    casejumpeq     #13403     i64 0
    push           112        i64 
    casejumpeq     #13403     i64 0
    push           98         i64 
    casejumpeq     #13404     i64 0
    push           8          i64 
    casejumpeq     #13405     i64 0
    push           10         i64 
    casejumpeq     #13406     i64 0
    push           11         i64 
    casejumpeq     #13407     i64 0
    push           12         i64 
    casejumpeq     #13408     i64 0
    push           21         i64 
    casejumpeq     #13409     i64 0
    push           35         i64 
    casejumpeq     #13410     i64 0
    popstack                  i64 
    jump           #13411     
#13393: 
    push           mm_diags.printunit.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_diags.printunit.d u64 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           mm_diags.printunit.d u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_tables.namenames 
    push           mm_diags.printunit.d u64 
    push           78         
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           mm_diags.printunit.d u64 
    push           64         
    pushptroff                u64 1 0
    jumpfalse      #13412     u64 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           " {"       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           &mm_tables.jtagnames 
    push           mm_diags.printunit.d u64 
    push           64         
    pushptroff                u64 1 0
    pushptr                   u8 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           "}"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13412: 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           " "        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    setargs                   1 0
    push           mm_diags.printunit.d u64 
    callfn         &mm_lib.getdottedname u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    startmult                 
    push           mm_diags.printunit.p u64 
    push           40         
    pushptroff                u8 1 0
    jumpfalse      #13413     i64 
    push           " {Dotted}" u64 
    resetmult                 
    jump           #13414     
#13413: 
    push           ""         u64 
    endmult                   
#13414: 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           mm_diags.printunit.p u64 
    push           32         
    pushptroff                u64 1 0
    jumpfalse      #13415     u64 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           " Lastcall:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_diags.printunit.p u64 
    push           32         
    pushptroff                u64 1 0
    callproc       &msysp.m$print_ptr_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13415: 
    push           mm_diags.printunit.p u64 
    push           40         
    pushptroff                u8 1 0
    jumpfalse      #13416     i64 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           " Addroffirst." u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13416: 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           " Moduleno:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_diags.printunit.p u64 
    push           56         
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           mm_diags.printunit.p u64 
    push           41         
    pushptroff                u8 1 0
    jumpfalse      #13417     i64 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           " AV:"     u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   2 0
    push           0          i64 
    push           mm_diags.printunit.p u64 
    push           41         
    pushptroff                u8 1 0
    truncate                  u64 u8 
    callproc       &msysp.m$print_c8 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13417: 
    jump           #13418     
#13394: 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           mm_diags.printunit.p u64 
    push           16         
    pushptroff                u64 1 0
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13418     
#13395: 
    push           mm_diags.printunit.p u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_diags.printunit.t i64 
    push           mm_diags.printunit.p u64 
    push           16         
    pushptroff                i64 1 0
    pop            mm_diags.printunit.a i64 
    push           mm_diags.printunit.t i64 
    push           10         i64 
    jumpne         #13419     i64 
    push           mm_diags.printunit.p u64 
    push           40         
    pushptroff                u32 1 0
    push           256        i64 
    jumple         #13420     i64 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "\""       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           "(LONGSTR)" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "\" *"     u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           mm_diags.printunit.p u64 
    push           40         
    pushptroff                u32 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13421     
#13420: 
    push           mm_diags.printunit.p u64 
    push           40         
    pushptroff                u32 1 0
    jumpfalse      #13422     i64 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "\""       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           mm_diags.printunit.p u64 
    push           16         
    pushptroff                u64 1 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           "\" *"     u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           mm_diags.printunit.p u64 
    push           40         
    pushptroff                u32 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13421     
#13422: 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "\"\""     u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13421: 
    jump           #13423     
#13419: 
    push           &mm_decls.ttbasetype 
    push           mm_diags.printunit.t i64 
    pushptroff                i32 4 0
    push           4          i64 
    casejumpeq     #13424     i64 0
    push           20         i64 
    casejumpeq     #13424     i64 0
    push           19         i64 
    casejumpeq     #13424     i64 0
    push           18         i64 
    casejumpeq     #13424     i64 0
    push           2          i64 
    casejumpeq     #13425     i64 0
    push           23         i64 
    casejumpeq     #13425     i64 0
    push           22         i64 
    casejumpeq     #13425     i64 0
    push           21         i64 
    casejumpeq     #13425     i64 0
    push           1          i64 
    casejumpeq     #13426     i64 0
    push           16         i64 
    casejumpeq     #13426     i64 0
    push           17         i64 
    casejumpeq     #13426     i64 0
    push           6          i64 
    casejumpeq     #13427     i64 0
    push           7          i64 
    casejumpeq     #13428     i64 0
    push           9          i64 
    casejumpeq     #13429     i64 0
    push           5          i64 
    casejumpeq     #13430     i64 0
    push           3          i64 
    casejumpeq     #13431     i64 0
    popstack                  i64 
    jump           #13432     
#13424: 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           mm_diags.printunit.a i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13433     
#13425: 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   2 0
    push           0          i64 
    push           mm_diags.printunit.a u64 
    callproc       &msysp.m$print_u64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13433     
#13426: 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    setargs                   1 0
    push           mm_diags.printunit.a i64 
    callfn         &mlibp.chr u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13433     
#13427: 
    push           mm_diags.printunit.p u64 
    push           16         
    pushptroff                r64 1 0
    fnarrow                   r32 r64 
    pop            mm_diags.printunit.x32 r32 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   2 0
    push           0          i64 
    push           mm_diags.printunit.x32 r32 
    fwiden                    r64 r32 
    callproc       &msysp.m$print_r64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13433     
#13428: 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   2 0
    push           0          i64 
    push           mm_diags.printunit.p u64 
    push           16         
    pushptroff                r64 1 0
    callproc       &msysp.m$print_r64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13433     
#13429: 
    push           mm_diags.printunit.p u64 
    push           16         
    pushptroff                i64 1 0
    jumpfalse      #13434     i64 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "#"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           mm_diags.printunit.p u64 
    push           16         
    pushptroff                i64 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           mm_diags.printunit.p u64 
    push           40         
    pushptroff                u32 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13435     
#13434: 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "NIL"      u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13435: 
    jump           #13433     
#13430: 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   3 0
    push           0          i64 
    push           mm_diags.printunit.p u64 
    push           16         
    pushptroff                i128 1 0
    callproc       &msysp.m$print_i128 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13433     
#13431: 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   3 0
    push           0          i64 
    push           mm_diags.printunit.p u64 
    push           16         
    pushptroff                u128 1 0
    callproc       &msysp.m$print_u128 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13433     
#13432: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "TYPENAME(T)=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    setargs                   1 0
    push           mm_diags.printunit.t i64 
    callfn         &mm_lib.typename u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    setargs                   1 0
    push           &mm_decls.ttbasetype 
    push           mm_diags.printunit.t i64 
    pushptroff                i32 4 0
    callfn         &mm_lib.typename u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "<PRINTUNIT BAD CONST PROBABLY VOID" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13433: 
#13423: 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           " "        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    setargs                   1 0
    push           mm_diags.printunit.t i64 
    callfn         &mm_lib.typename u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           mm_diags.printunit.p u64 
    push           44         
    pushptroff                u8 1 0
    jumpfalse      #13436     i64 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           " <isstr>" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13436: 
    push           mm_diags.printunit.p u64 
    push           40         
    pushptroff                i32 1 0
    jumpfalse      #13437     i64 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           " *L"      u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           mm_diags.printunit.p u64 
    push           40         
    pushptroff                i32 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13437: 
    jump           #13418     
#13396: 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           mm_diags.printunit.p u64 
    push           16         
    pushptroff                u64 1 0
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "Len:"     u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_diags.printunit.p u64 
    push           40         
    pushptroff                u32 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13418     
#13397: 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    setargs                   1 0
    push           mm_diags.printunit.p u64 
    push           48         
    pushptroff                i32 1 0
    callfn         &mm_lib.typename u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    setargs                   1 0
    push           mm_diags.printunit.p u64 
    push           16         
    pushptroff                i64 1 0
    callfn         &mm_lib.typename u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13418     
#13398: 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           &mm_tables.bitfieldnames 
    push           mm_diags.printunit.p u64 
    push           40         
    pushptroff                i16 1 0
    pushptroff                u64 8 -8
    push           3          i64 
    addrefoff                 u64 1 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13418     
#13399: 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           " Convmode:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    setargs                   2 0
    push           1          i64 
    push           mm_diags.printunit.p u64 
    push           52         
    pushptroff                i32 1 0
    callfn         &mm_lib.strmode u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13418     
#13400: 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "Len:"     u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_diags.printunit.p u64 
    push           40         
    pushptroff                u32 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           " Makeax:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_diags.printunit.p u64 
    push           40         
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13418     
#13401: 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "Offset:"  u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_diags.printunit.p u64 
    push           40         
    pushptroff                u32 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13418     
#13402: 
    jump           #13418     
#13403: 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "#"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           mm_diags.printunit.p u64 
    push           40         
    pushptroff                i32 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13418     
#13404: 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           &mm_tables.sysfnnames 
    push           mm_diags.printunit.p u64 
    push           40         
    pushptroff                i16 1 0
    pushptroff                u64 8 -8
    push           6          i64 
    addrefoff                 u64 1 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13418     
#13405: 
    jump           #13418     
#13406: 
    jump           #13418     
#13407: 
    jump           #13418     
#13408: 
    jump           #13418     
#13409: 
    jump           #13418     
#13410: 
#13438: 
    push           1          i64 
    pop            mm_diags.printunit.i i64 
    push           4          i64 
    pop            mm_diags.printunit.av_1 i64 
    push           mm_diags.printunit.av_1 i64 
    push           1          i64 
    jumplt         #13439     i64 
#13440: 
    push           mm_diags.printunit.p u64 
    push           40         
    addrefoff                 u64 1 0
    push           mm_diags.printunit.i i64 
    pushptroff                u8 1 -1
    push           0          i64 
    jumpne         #13441     i64 
    jump           #13439     
#13441: 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           &pc_tables.pclnames 
    push           mm_diags.printunit.p u64 
    push           40         
    addrefoff                 u64 1 0
    push           mm_diags.printunit.i i64 
    pushptroff                u8 1 -1
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           " "        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13442: 
    forup          #13440     i64 1
    opnd           mm_diags.printunit.i 
    opnd           mm_diags.printunit.av_1 
#13439: 
    jump           #13418     
#13411: 
#13418: 
    push           mm_diags.printunit.p u64 
    pushptr                   u8 
    push           3          i64 
    casejumpeq     #13443     i64 0
    push           57         i64 
    casejumpeq     #13443     i64 0
    push           48         i64 
    casejumpeq     #13443     i64 0
    push           51         i64 
    casejumpeq     #13443     i64 0
    push           96         i64 
    casejumpeq     #13443     i64 0
    push           31         i64 
    casejumpeq     #13443     i64 0
    push           29         i64 
    casejumpeq     #13443     i64 0
    popstack                  i64 
    jump           #13444     
#13443: 
    push           mm_diags.printunit.p u64 
    push           52         
    pushptroff                i32 1 0
    push           0          i64 
    jumpne         #13445     i64 
    jump           #13446     
#13445: 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           " WIDEN FROM:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    setargs                   2 0
    push           1          i64 
    push           mm_diags.printunit.p u64 
    push           52         
    pushptroff                i32 1 0
    callfn         &mm_lib.strmode u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13446: 
    jump           #13447     
#13444: 
#13447: 
    push           mm_diags.printunit.p u64 
    push           58         
    pushptroff                u8 1 0
    jumpfalse      #13448     i64 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           " Is const" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13448: 
    push           mm_diags.printunit.p u64 
    pushptr                   u8 
    push           36         i64 
    casejumpeq     #13449     i64 0
    push           38         i64 
    casejumpeq     #13449     i64 0
    push           37         i64 
    casejumpeq     #13449     i64 0
    push           39         i64 
    casejumpeq     #13449     i64 0
    push           34         i64 
    casejumpeq     #13449     i64 0
    push           40         i64 
    casejumpeq     #13449     i64 0
    push           61         i64 
    casejumpeq     #13449     i64 0
    push           14         i64 
    casejumpeq     #13449     i64 0
    push           15         i64 
    casejumpeq     #13449     i64 0
    push           17         i64 
    casejumpeq     #13449     i64 0
    push           18         i64 
    casejumpeq     #13449     i64 0
    popstack                  i64 
    jump           #13450     
#13449: 
    push           mm_diags.printunit.p u64 
    push           60         
    pushptroff                u8 1 0
    jumpfalse      #13451     i64 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           " Pcl<#:#>" u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           &pc_tables.pclnames 
    push           mm_diags.printunit.p u64 
    push           60         
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pc_tables.pstdnames 
    push           mm_diags.printunit.p u64 
    push           61         
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13452     
#13451: 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           " no-op"   u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13452: 
    jump           #13453     
#13450: 
#13453: 
    setargs                   1 0
    push           mm_diags.printunit.dev u64 
    callproc       &msysp.m$print_startfile 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           mm_diags.printunit.p u64 
    push           1          
    pushptroff                u8 1 0
    jumpfalse      #13454     i64 
    setargs                   4 0
    push           "1"        u64 
    push           mm_diags.printunit.level i64 
    push           1          i64 
    add                       i64 
    push           mm_diags.printunit.p u64 
    push           16         
    pushptroff                u64 1 0
    push           mm_diags.printunit.dev u64 
    callproc       &mm_diags.printunitlist 
#13454: 
    push           mm_diags.printunit.p u64 
    push           2          
    pushptroff                u8 1 0
    jumpfalse      #13455     i64 
    setargs                   4 0
    push           "2"        u64 
    push           mm_diags.printunit.level i64 
    push           1          i64 
    add                       i64 
    push           mm_diags.printunit.p u64 
    push           24         
    pushptroff                u64 1 0
    push           mm_diags.printunit.dev u64 
    callproc       &mm_diags.printunitlist 
#13455: 
    push           mm_diags.printunit.p u64 
    push           3          
    pushptroff                u8 1 0
    jumpfalse      #13456     i64 
    setargs                   4 0
    push           "3"        u64 
    push           mm_diags.printunit.level i64 
    push           1          i64 
    add                       i64 
    push           mm_diags.printunit.p u64 
    push           32         
    pushptroff                u64 1 0
    push           mm_diags.printunit.dev u64 
    callproc       &mm_diags.printunitlist 
#13456: 
#13391: 
    retproc                   
End


Proc mm_diags.printunitlist:
    param          mm_diags.printunitlist.dev u64 
    param          mm_diags.printunitlist.p u64 
    param          mm_diags.printunitlist.level i64 
    param          mm_diags.printunitlist.prefix u64 
    procentry                 
    push           mm_diags.printunitlist.p u64 
    push           0          u64 
    jumpne         #13458     u64 
    jump           #13459     
#13458: 
    jump           #13460     
#13461: 
    setargs                   4 0
    push           mm_diags.printunitlist.dev u64 
    push           mm_diags.printunitlist.prefix u64 
    push           mm_diags.printunitlist.level i64 
    push           mm_diags.printunitlist.p u64 
    callproc       &mm_diags.printunit 
    push           mm_diags.printunitlist.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_diags.printunitlist.p u64 
#13460: 
    push           mm_diags.printunitlist.p u64 
    jumptrue       #13461     u64 
#13462: 
#13459: 
    retproc                   
End


Proc mm_diags.getprefix: u64
    param          mm_diags.getprefix.level i64 
    param          mm_diags.getprefix.prefix u64 
    param          mm_diags.getprefix.p u64 
    local          mm_diags.getprefix.indentstr block:1024 
    local          mm_diags.getprefix.modestr block:16384 
    local          mm_diags.getprefix.isexpr u64 
    local          mm_diags.getprefix.av_1 i64 
    procentry                 
    push           0          u64 
    push           &mm_diags.getprefix.indentstr 
    push           1          i64 
    popptroff                 u8 1 -1
    push           mm_diags.getprefix.level i64 
    push           10         i64 
    jumple         #13464     i64 
    push           10         i64 
    pop            mm_diags.getprefix.level i64 
#13464: 
#13465: 
    push           mm_diags.getprefix.level i64 
    pop            mm_diags.getprefix.av_1 i64 
    push           mm_diags.getprefix.av_1 i64 
    push           0          i64 
    jumple         #13466     i64 
#13467: 
    setargs                   2 0
    push           "- "       u64 
    push           &mm_diags.getprefix.indentstr 
    callproc       &strcat    
#13468: 
    to             #13467     
    opnd           mm_diags.getprefix.av_1 
#13466: 
    push           "S"        u64 
    pop            mm_diags.getprefix.isexpr u64 
    push           &mm_tables.jisexpr 
    push           mm_diags.getprefix.p u64 
    pushptr                   u8 
    pushptroff                u8 1 0
    jumpfalse      #13469     i64 
    push           "E"        u64 
    pop            mm_diags.getprefix.isexpr u64 
#13469: 
    push           mm_diags.getprefix.p u64 
    pushptr                   u8 
    push           100        i64 
    casejumpeq     #13470     i64 0
    push           117        i64 
    casejumpeq     #13470     i64 0
    push           115        i64 
    casejumpeq     #13470     i64 0
    push           120        i64 
    casejumpeq     #13470     i64 0
    popstack                  i64 
    jump           #13471     
#13470: 
    push           mm_diags.getprefix.p u64 
    push           48         
    pushptroff                i32 1 0
    push           0          i64 
    jumpne         #13472     i64 
    push           "S"        u64 
    pop            mm_diags.getprefix.isexpr u64 
#13472: 
    jump           #13473     
#13471: 
#13473: 
    setargs                   1 0
    push           &mm_diags.getprefix.modestr 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "# #:#"    u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           mm_diags.getprefix.isexpr u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    startmult                 
    push           mm_diags.getprefix.p u64 
    push           59         
    pushptroff                u8 1 0
    jumpfalse      #13474     i64 
    push           "RES"      u64 
    resetmult                 
    jump           #13475     
#13474: 
    push           "---"      u64 
    endmult                   
#13475: 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    setargs                   2 0
    push           1          i64 
    push           mm_diags.getprefix.p u64 
    push           48         
    pushptroff                i32 1 0
    callfn         &mm_lib.strmode u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           0          u64 
    push           &mm_diags.getprefix.modestr 
    push           256        i64 
    popptroff                 u8 1 -1
    setargs                   2 0
    push           "-----------------------------" u64 
    push           &mm_diags.getprefix.modestr 
    callproc       &strcat    
    push           32         u64 
    push           &mm_diags.getprefix.modestr 
    push           17         i64 
    popptroff                 u8 1 -1
    push           0          u64 
    push           &mm_diags.getprefix.modestr 
    push           18         i64 
    popptroff                 u8 1 -1
    setargs                   2 0
    setargs                   0 0
    callfn         &mm_diags.getlineinfok u64 
    push           &mm_diags.getprefix.str 
    callproc       &strcpy    
    setargs                   2 0
    push           &mm_diags.getprefix.modestr 
    push           &mm_diags.getprefix.str 
    callproc       &strcat    
    setargs                   2 0
    push           &mm_diags.getprefix.indentstr 
    push           &mm_diags.getprefix.str 
    callproc       &strcat    
    setargs                   2 0
    push           mm_diags.getprefix.prefix u64 
    push           &mm_diags.getprefix.str 
    callproc       &strcat    
    push           mm_diags.getprefix.prefix u64 
    pushptr                   u8 
    jumpfalse      #13476     u64 
    setargs                   2 0
    push           " "        u64 
    push           &mm_diags.getprefix.str 
    callproc       &strcat    
#13476: 
    push           &mm_diags.getprefix.str 
    setret                    u64 
    jump           #13477     
#13477: 
    retfn                     u64 
End


Proc mm_diags.getlineinfok: u64
    procentry                 
    setargs                   1 0
    push           &mm_diags.getlineinfok.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "# # "     u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   2 0
    push           "Z2"       u64 
    push           mm_diags.currfileno i64 
    callproc       &msysp.m$print_i64 
    setargs                   2 0
    push           "z4"       u64 
    push           mm_diags.currlineno i64 
    callproc       &msysp.m$print_i64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           &mm_diags.getlineinfok.str 
    setret                    u64 
    jump           #13479     
#13479: 
    retfn                     u64 
End


Proc mm_diags.printmodelist:
    param          mm_diags.printmodelist.f u64 
    local          mm_diags.printmodelist.mbase i64 
    local          mm_diags.printmodelist.av_1 i64 
    local          mm_diags.printmodelist.m i64 
    local          mm_diags.printmodelist.i i64 
    procentry                 
    setargs                   1 0
    push           mm_diags.printmodelist.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "MODELIST" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_decls.ntypes i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13481: 
    push           0          i64 
    pop            mm_diags.printmodelist.m i64 
    push           mm_decls.ntypes i64 
    push           0          i64 
    jumplt         #13482     i64 
#13483: 
    setargs                   1 0
    push           mm_diags.printmodelist.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   2 0
    push           "4"        u64 
    push           mm_diags.printmodelist.m i64 
    callproc       &msysp.m$print_i64 
    setargs                   1 0
    setargs                   2 0
    push           1          i64 
    push           mm_diags.printmodelist.m i64 
    callfn         &mm_lib.strmode u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           &mm_decls.ttbasetype 
    push           mm_diags.printmodelist.m i64 
    pushptroff                i32 4 0
    pop            mm_diags.printmodelist.mbase i64 
    setargs                   1 0
    push           mm_diags.printmodelist.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           mm_diags.printmodelist.tab u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "Basetype:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_diags.printmodelist.mbase i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    setargs                   2 0
    push           1          i64 
    push           mm_diags.printmodelist.mbase i64 
    callfn         &mm_lib.strmode u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           mm_diags.printmodelist.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           mm_diags.printmodelist.tab u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "ttname:"  u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_decls.ttname 
    push           mm_diags.printmodelist.m i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           mm_diags.printmodelist.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           mm_diags.printmodelist.tab u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "ttnamedef:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_decls.ttnamedef 
    push           mm_diags.printmodelist.m i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_ptr_nf 
    setargs                   1 0
    startmult                 
    push           &mm_decls.ttnamedef 
    push           mm_diags.printmodelist.m i64 
    pushptroff                u64 8 0
    jumpfalse      #13484     u64 
    push           &mm_decls.ttnamedef 
    push           mm_diags.printmodelist.m i64 
    pushptroff                u64 8 0
    pushptr                   u64 
    resetmult                 
    jump           #13485     
#13484: 
    push           "-"        u64 
    endmult                   
#13485: 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           mm_diags.printmodelist.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           mm_diags.printmodelist.tab u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "Target:"  u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    setargs                   2 0
    push           1          i64 
    push           &mm_decls.tttarget 
    push           mm_diags.printmodelist.m i64 
    pushptroff                i32 4 0
    callfn         &mm_lib.strmode u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           mm_diags.printmodelist.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           mm_diags.printmodelist.tab u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "Code:"    u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   2 0
    push           "c"        u64 
    push           &mm_tables.stdcodes 
    push           mm_diags.printmodelist.mbase i64 
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           mm_diags.printmodelist.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           mm_diags.printmodelist.tab u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "Size:"    u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_decls.ttsize 
    push           mm_diags.printmodelist.m i64 
    pushptroff                i32 4 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           "Sizeset"  u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_decls.ttsizeset 
    push           mm_diags.printmodelist.m i64 
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           mm_diags.printmodelist.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "# Bounds: #..#  Length:#" u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           mm_diags.printmodelist.tab u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_decls.ttlower 
    push           mm_diags.printmodelist.m i64 
    pushptroff                i32 4 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           &mm_decls.ttlower 
    push           mm_diags.printmodelist.m i64 
    pushptroff                i32 4 0
    push           &mm_decls.ttlength 
    push           mm_diags.printmodelist.m i64 
    pushptroff                i32 4 0
    add                       i64 
    push           1          i64 
    sub                       i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           &mm_decls.ttlength 
    push           mm_diags.printmodelist.m i64 
    pushptroff                i32 4 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           mm_diags.printmodelist.mbase i64 
    push           31         i64 
    jumpne         #13486     i64 
    setargs                   1 0
    push           mm_diags.printmodelist.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           mm_diags.printmodelist.tab u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "Mult:"    u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13487: 
    push           1          i64 
    pop            mm_diags.printmodelist.i i64 
    push           &mm_decls.ttlength 
    push           mm_diags.printmodelist.m i64 
    pushptroff                i32 4 0
    pop            mm_diags.printmodelist.av_1 i64 
    push           mm_diags.printmodelist.av_1 i64 
    push           1          i64 
    jumplt         #13488     i64 
#13489: 
    setargs                   1 0
    push           mm_diags.printmodelist.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    setargs                   2 0
    push           1          i64 
    push           &mm_decls.ttmult 
    push           mm_diags.printmodelist.m i64 
    pushptroff                u64 8 0
    push           mm_diags.printmodelist.i i64 
    pushptroff                i32 4 -4
    callfn         &mm_lib.strmode u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           " "        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13490: 
    forup          #13489     i64 1
    opnd           mm_diags.printmodelist.i 
    opnd           mm_diags.printmodelist.av_1 
#13488: 
    setargs                   1 0
    push           mm_diags.printmodelist.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13486: 
    setargs                   1 0
    push           mm_diags.printmodelist.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           mm_diags.printmodelist.tab u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "Keytype:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    setargs                   2 0
    push           1          i64 
    push           &mm_decls.ttkeytype 
    push           mm_diags.printmodelist.m i64 
    pushptroff                i32 4 0
    callfn         &mm_lib.strmode u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           mm_diags.printmodelist.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           mm_diags.printmodelist.tab u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "Isint:"   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_decls.ttisint 
    push           mm_diags.printmodelist.m i64 
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           mm_diags.printmodelist.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           mm_diags.printmodelist.tab u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "Isword:"  u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_decls.ttisword 
    push           mm_diags.printmodelist.m i64 
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           mm_diags.printmodelist.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           mm_diags.printmodelist.tab u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "Isreal:"  u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_decls.ttisreal 
    push           mm_diags.printmodelist.m i64 
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           mm_diags.printmodelist.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           mm_diags.printmodelist.tab u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "Isinteger:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_decls.ttisinteger 
    push           mm_diags.printmodelist.m i64 
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           mm_diags.printmodelist.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           mm_diags.printmodelist.tab u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "Isallnum:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_decls.ttisallnum 
    push           mm_diags.printmodelist.m i64 
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           mm_diags.printmodelist.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           mm_diags.printmodelist.tab u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "Ismainnum:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_decls.ttismainnum 
    push           mm_diags.printmodelist.m i64 
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           mm_diags.printmodelist.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           mm_diags.printmodelist.tab u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "Isshort:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_decls.ttisshort 
    push           mm_diags.printmodelist.m i64 
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           mm_diags.printmodelist.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           mm_diags.printmodelist.tab u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "Isref:"   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_decls.ttisref 
    push           mm_diags.printmodelist.m i64 
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           mm_diags.printmodelist.f u64 
    callproc       &msysp.m$print_startfile 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13491: 
    forup          #13483     i64 1
    opnd           mm_diags.printmodelist.m 
    opnd           mm_decls.ntypes 
#13482: 
#13492: 
    retproc                   
End


Proc mm_libsources_dummy.findstdlib: u64
    param          mm_libsources_dummy.findstdlib.name u64 
    procentry                 
    push           0          u64 
    setret                    u64 
    jump           #13494     
#13494: 
    retfn                     u64 
End


Proc mm_parse.parsemodule: i64
    param          mm_parse.parsemodule.n i64 
    local          mm_parse.parsemodule.m block:456 
    local          mm_parse.parsemodule.p u64 
    local          mm_parse.parsemodule.owner u64 
    local          mm_parse.parsemodule.globalflag i64 
    local          mm_parse.parsemodule.status i64 
    procentry                 
    setargs                   0 0
    callproc       &mm_parse.initparser 
    push           &mm_decls.moduletable 
    push           mm_parse.parsemodule.n i64 
    pushptroff                block:456 456 0
    pop            mm_parse.parsemodule.m block:456 
    push           mm_parse.parsemodule.n i64 
    pop            mm_decls.currmoduleno i64 
    push           &mm_decls.moduletable 
    push           mm_parse.parsemodule.n i64 
    addrefoff                 block:456 456 0
    push           8          
    pushptroff                u64 1 0
    pop            mm_decls.stmodule u64 
    push           mm_decls.stmodule u64 
    pop            mm_decls.currproc u64 
    setargs                   1 0
    push           mm_parse.parsemodule.n i64 
    callproc       &mm_lex.starttkscan 
    push           mm_decls.stmodule u64 
    pop            mm_parse.parsemodule.owner u64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           mm_parse.parsemodule.owner u64 
    callfn         &mm_parse.readmoduledefs i64 
    pop            mm_parse.parsemodule.status i64 
    push           mm_parse.parsemodule.status i64 
    jumptrue       #13496     i64 
    push           0          i64 
    setret                    i64 
    jump           #13497     
#13496: 
    push           mm_parse.parsemodule.status i64 
    setret                    i64 
    jump           #13497     
#13497: 
    retfn                     i64 
End


Proc mm_parse.readmoduledefs: i64
    param          mm_parse.readmoduledefs.owner u64 
    local          mm_parse.readmoduledefs.p u64 
    local          mm_parse.readmoduledefs.dimport u64 
    local          mm_parse.readmoduledefs.stimport u64 
    local          mm_parse.readmoduledefs.globalflag i64 
    local          mm_parse.readmoduledefs.i i64 
    local          mm_parse.readmoduledefs.callbackflag i64 
    local          mm_parse.readmoduledefs.name u64 
    procentry                 
    push           0          i64 
    pop            mm_parse.readmoduledefs.globalflag i64 
    push           0          i64 
    pop            mm_parse.readmoduledefs.callbackflag i64 
#13499: 
    push           &mm_decls.lx 
    pushptr                   u8 
    switch         #13500     2 170
    opnd           #13501     
#13500: 
    switchlabel    #13502     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13503     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13504     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13505     
    switchlabel    #13501     
    switchlabel    #13506     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13504     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13504     
    switchlabel    #13501     
    switchlabel    #13504     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13504     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13507     
    switchlabel    #13507     
    switchlabel    #13501     
    switchlabel    #13508     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13509     
    switchlabel    #13510     
    switchlabel    #13511     
    switchlabel    #13512     
    switchlabel    #13513     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13504     
    switchlabel    #13514     
    switchlabel    #13515     
    switchlabel    #13504     
    switchlabel    #13501     
    switchlabel    #13504     
    switchlabel    #13516     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13517     
    switchlabel    #13518     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13508     
    switchlabel    #13519     
    switchlabel    #13520     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13501     
    switchlabel    #13521     
    endswitch                 
#13520: 
    push           mm_parse.readmoduledefs.globalflag i64 
    jumpfalse      #13522     i64 
    setargs                   1 0
    push           "global global?" u64 
    callproc       &mm_support.serror 
#13522: 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    pop            mm_parse.readmoduledefs.globalflag i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #13523     
#13507: 
    setargs                   3 0
    push           mm_parse.readmoduledefs.callbackflag i64 
    push           mm_parse.readmoduledefs.globalflag i64 
    push           mm_parse.readmoduledefs.owner u64 
    callproc       &mm_parse.readprocdef 
    push           0          i64 
    pop            mm_parse.readmoduledefs.callbackflag i64 
    push           0          i64 
    pop            mm_parse.readmoduledefs.globalflag i64 
    jump           #13523     
#13504: 
    setargs                   5 0
    push           0          i64 
    push           11         i64 
    push           0          i64 
    push           mm_parse.readmoduledefs.globalflag i64 
    push           mm_parse.readmoduledefs.owner u64 
    callproc       &mm_parse.readvardef 
    push           0          i64 
    pop            mm_parse.readmoduledefs.globalflag i64 
    jump           #13523     
#13514: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   5 0
    push           143        i64 
    push           11         i64 
    push           0          i64 
    push           mm_parse.readmoduledefs.globalflag i64 
    push           mm_parse.readmoduledefs.owner u64 
    callproc       &mm_parse.readvardef 
    push           0          i64 
    pop            mm_parse.readmoduledefs.globalflag i64 
    jump           #13523     
#13515: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   5 0
    push           144        i64 
    push           11         i64 
    push           0          i64 
    push           mm_parse.readmoduledefs.globalflag i64 
    push           mm_parse.readmoduledefs.owner u64 
    callproc       &mm_parse.readvardef 
    push           0          i64 
    pop            mm_parse.readmoduledefs.globalflag i64 
    jump           #13523     
#13510: 
    setargs                   1 0
    push           mm_parse.readmoduledefs.owner u64 
    callproc       &mm_parse.readimportmodule 
    jump           #13523     
#13511: 
    setargs                   1 0
    push           75         i64 
    callproc       &mm_parse.lexchecksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #13523     
#13512: 
#13524: 
    setargs                   0 0
    callproc       &mm_lex.lex 
#13525: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           6          i64 
    setjumpeq      #13526     i64 
    push           66         i64 
    setjumpne      #13524     i64 
#13526: 
#13527: 
    jump           #13523     
#13513: 
    setargs                   2 0
    push           mm_parse.readmoduledefs.globalflag i64 
    push           mm_parse.readmoduledefs.owner u64 
    callproc       &mm_parse.readtypedef 
    push           0          i64 
    pop            mm_parse.readmoduledefs.globalflag i64 
    jump           #13523     
#13517: 
    setargs                   2 0
    push           mm_parse.readmoduledefs.globalflag i64 
    push           mm_parse.readmoduledefs.owner u64 
    callproc       &mm_parse.readconstdef 
    push           0          i64 
    pop            mm_parse.readmoduledefs.globalflag i64 
    jump           #13523     
#13508: 
    setargs                   2 0
    push           mm_parse.readmoduledefs.globalflag i64 
    push           mm_parse.readmoduledefs.owner u64 
    callproc       &mm_parse.readclassdef 
    push           0          i64 
    pop            mm_parse.readmoduledefs.globalflag i64 
    jump           #13523     
#13518: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   3 0
    push           mm_parse.readmoduledefs.globalflag i64 
    push           0          i64 
    push           mm_parse.readmoduledefs.owner u64 
    callproc       &mm_parse.readenumtype 
    push           0          i64 
    pop            mm_parse.readmoduledefs.globalflag i64 
    jump           #13523     
#13521: 
    setargs                   2 0
    push           mm_parse.readmoduledefs.globalflag i64 
    push           mm_parse.readmoduledefs.owner u64 
    callproc       &mm_parse.readtabledef 
    push           0          i64 
    pop            mm_parse.readmoduledefs.globalflag i64 
    jump           #13523     
#13506: 
    setargs                   1 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    callproc       &mm_parse.adddocstring 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #13523     
#13509: 
    push           mm_parse.readmoduledefs.globalflag i64 
    jumpfalse      #13528     i64 
    setargs                   1 0
    push           "glob/import?" u64 
    callproc       &mm_support.serror 
#13528: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           32         i64 
    jumpne         #13529     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
#13529: 
    setargs                   1 0
    push           79         i64 
    callproc       &mm_parse.checksymbol 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    pop            mm_parse.readmoduledefs.dimport u64 
    setargs                   1 0
    push           mm_parse.readmoduledefs.dimport u64 
    pushptr                   u64 
    callfn         &mm_support.mapimport u64 
    pop            mm_parse.readmoduledefs.name u64 
#13530: 
    push           1          i64 
    pop            mm_parse.readmoduledefs.i i64 
    push           mm_decls.nmodules i64 
    push           1          i64 
    jumplt         #13531     i64 
#13532: 
    setargs                   2 0
    push           &mm_decls.moduletable 
    push           mm_parse.readmoduledefs.i i64 
    addrefoff                 block:456 456 0
    pushptr                   u64 
    push           mm_parse.readmoduledefs.name u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #13533     i64 
    push           &mm_decls.moduletable 
    push           mm_parse.readmoduledefs.i i64 
    addrefoff                 block:456 456 0
    push           8          
    pushptroff                u64 1 0
    pop            mm_parse.readmoduledefs.stimport u64 
    jump           #13534     
#13533: 
#13535: 
    forup          #13532     i64 1
    opnd           mm_parse.readmoduledefs.i 
    opnd           mm_decls.nmodules 
#13531: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Import stmt out of position?" u64 
    callproc       &mm_support.serror 
#13534: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    push           mm_parse.readmoduledefs.stimport u64 
    push           mm_parse.readmoduledefs.dimport u64 
    callproc       &mm_parse.domappedalias 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           79         i64 
    jumpne         #13536     i64 
    setargs                   2 0
    push           "as"       u64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    pushptr                   u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #13536     i64 
    setargs                   1 0
    push           mm_parse.readmoduledefs.dimport u64 
    callproc       &mm_parse.readimportalias 
#13536: 
    jump           #13523     
#13503: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #13523     
#13505: 
    jump           #13537     
    jump           #13523     
#13519: 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    push           4          i64 
    jumpne         #13538     i64 
    push           4          i64 
    pop            mm_parse.readmoduledefs.callbackflag i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #13539     
#13538: 
    jump           #13540     
#13539: 
    jump           #13523     
#13516: 
    setargs                   2 0
    push           mm_parse.readmoduledefs.globalflag i64 
    push           mm_parse.readmoduledefs.owner u64 
    callproc       &mm_parse.readmacrodef 
    push           0          i64 
    pop            mm_parse.readmoduledefs.globalflag i64 
    jump           #13523     
#13502: 
    setargs                   1 0
    push           "MODULE/DOT" u64 
    callproc       &mm_support.serror 
    jump           #13523     
#13501: 
!error::
#13540: 
    setargs                   1 0
    push           "symbol"   u64 
    callproc       &mm_lex.ps 
    setargs                   1 0
    push           "Not allowed at module level" u64 
    callproc       &mm_support.serror 
#13523: 
    jump           #13499     
#13537: 
    push           1          i64 
    setret                    i64 
    jump           #13541     
#13541: 
    retfn                     i64 
End


Proc mm_parse.initparser:
    local          mm_parse.initparser.tabledataname u64 
    procentry                 
    push           mm_decls.nullunit u64 
    jumptrue       #13543     u64 
    setargs                   1 0
    push           2          i64 
    callfn         &mm_lib.createunit0 u64 
    pop            mm_decls.nullunit u64 
#13543: 
    push           0          i64 
    pop            mm_parse.try_level i64 
    push           0          u64 
    pop            mm_decls.currproc u64 
    push           0          i64 
    pop            mm_parse.varattribs i64 
    push           0          i64 
    pop            mm_parse.intabledata i64 
    push           0          i64 
    pop            mm_parse.inreadprint i64 
    push           0          i64 
    pop            mm_parse.inparamlist i64 
    push           0          i64 
    pop            mm_parse.inrecordbody i64 
    push           0          i64 
    pop            mm_parse.inimportmodule i64 
    push           ""         u64 
    pop            mm_parse.initparser.tabledataname u64 
    push           0          i64 
    pop            mm_parse.labelseen i64 
    push           0          i64 
    pop            mm_parse.ndollar i64 
#13544: 
    retproc                   
End


Proc mm_parse.skipsemi:
    procentry                 
    jump           #13546     
#13547: 
    setargs                   0 0
    callproc       &mm_lex.lex 
#13546: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           6          i64 
    jumpeq         #13547     i64 
#13548: 
#13549: 
    retproc                   
End


Proc mm_parse.makeblock: u64
    param          mm_parse.makeblock.p u64 
    procentry                 
    setargs                   2 0
    push           mm_parse.makeblock.p u64 
    push           5          i64 
    callfn         &mm_lib.createunit1 u64 
    setret                    u64 
    jump           #13551     
#13551: 
    retfn                     u64 
End


Proc mm_parse.makestmtblock: u64
    param          mm_parse.makestmtblock.p u64 
    procentry                 
    setargs                   2 0
    push           mm_parse.makestmtblock.p u64 
    push           6          i64 
    callfn         &mm_lib.createunit1 u64 
    setret                    u64 
    jump           #13553     
#13553: 
    retfn                     u64 
End


Proc mm_parse.checkequals:
    procentry                 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           46         i64 
    jumpeq         #13555     i64 
    setargs                   1 0
    push           "\"=\" expected" u64 
    callproc       &mm_support.serror 
#13555: 
#13556: 
    retproc                   
End


Proc mm_parse.getcurrline: i64
    procentry                 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    setret                    i64 
    jump           #13558     
#13558: 
    retfn                     i64 
End


Proc mm_parse.checkbegin: i64
    param          mm_parse.checkbegin.fbrack i64 
    local          mm_parse.checkbegin.closesym i64 
    procentry                 
    setargs                   0 0
    callproc       &mm_parse.skipsemi 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           12         i64 
    jumpne         #13560     i64 
    push           mm_parse.checkbegin.fbrack i64 
    jumpfalse      #13560     i64 
    push           13         i64 
    pop            mm_parse.checkbegin.closesym i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #13561     
#13560: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           16         i64 
    jumpne         #13562     i64 
    push           17         i64 
    pop            mm_parse.checkbegin.closesym i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #13561     
#13562: 
    push           104        i64 
    pop            mm_parse.checkbegin.closesym i64 
#13561: 
    push           mm_parse.checkbegin.closesym i64 
    setret                    i64 
    jump           #13563     
#13563: 
    retfn                     i64 
End


Proc mm_parse.checkbeginend:
    param          mm_parse.checkbeginend.closesym i64 
    param          mm_parse.checkbeginend.kwd i64 
    param          mm_parse.checkbeginend.startline i64 
    procentry                 
    setargs                   0 0
    callproc       &mm_parse.skipsemi 
    push           mm_parse.checkbeginend.closesym i64 
    push           13         i64 
    jumpeq         #13565     i64 
    push           mm_parse.checkbeginend.closesym i64 
    push           17         i64 
    jumpne         #13566     i64 
#13565: 
    setargs                   1 0
    push           mm_parse.checkbeginend.closesym i64 
    callproc       &mm_parse.checksymbol 
    jump           #13567     
#13566: 
    setargs                   4 0
    push           mm_parse.checkbeginend.startline i64 
    push           0          i64 
    push           mm_parse.checkbeginend.kwd i64 
    push           mm_parse.checkbeginend.closesym i64 
    callproc       &mm_parse.checkend 
#13567: 
    setargs                   0 0
    callproc       &mm_lex.lex 
#13568: 
    retproc                   
End


Proc mm_parse.checkend:
    param          mm_parse.checkend.endsym i64 
    param          mm_parse.checkend.endkwd1 i64 
    param          mm_parse.checkend.endkwd2 i64 
    param          mm_parse.checkend.startline i64 
    local          mm_parse.checkend.str block:100 
    procentry                 
    push           mm_parse.checkend.endsym i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    jumpne         #13570     i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           13         i64 
    jumpne         #13570     i64 
    jump           #13571     
#13570: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           104        i64 
    jumpeq         #13572     i64 
    setargs                   2 0
    push           "Bad 'end' " u64 
    push           &mm_parse.checkend.str 
    callproc       &strcpy    
!error::
#13573: 
    push           mm_parse.checkend.startline i64 
    jumpfalse      #13574     i64 
    setargs                   1 0
    push           &mm_parse.checkend.str 
    setargs                   1 0
    push           &mm_parse.checkend.str 
    callfn         &strlen    i64 
    addrefoff                 u64 1 0
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           " (from line #)" u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           mm_parse.checkend.startline i64 
    push           16777215   i64 
    iand                      i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13574: 
    setargs                   1 0
    push           &mm_parse.checkend.str 
    callproc       &mm_support.serror 
#13572: 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #13575     i64 
    jump           #13571     
#13575: 
    push           mm_parse.checkend.endkwd1 i64 
    jumpfalse      #13576     i64 
    push           mm_parse.checkend.endkwd1 i64 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    jumpeq         #13577     i64 
#13576: 
    push           mm_parse.checkend.endkwd2 i64 
    jumpfalse      #13578     i64 
    push           mm_parse.checkend.endkwd2 i64 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    jumpeq         #13577     i64 
#13578: 
    setargs                   2 0
    push           "Mismatched 'end'" u64 
    push           &mm_parse.checkend.str 
    callproc       &strcpy    
    jump           #13573     
#13577: 
#13571: 
    retproc                   
End


Proc mm_parse.readvardef: u64
    param          mm_parse.readvardef.owner u64 
    param          mm_parse.readvardef.isglobal i64 
    param          mm_parse.readvardef.isstatic i64 
    param          mm_parse.readvardef.varid i64 
    param          mm_parse.readvardef.k i64 
    local          mm_parse.readvardef.ulist u64 
    local          mm_parse.readvardef.ulistx u64 
    local          mm_parse.readvardef.p u64 
    local          mm_parse.readvardef.nvars i64 
    local          mm_parse.readvardef.m i64 
    local          mm_parse.readvardef.stname u64 
    procentry                 
    push           0          u64 
    store          mm_parse.readvardef.ulistx u64 
    pop            mm_parse.readvardef.ulist u64 
    setargs                   0 0
    callfn         &mm_parse.istypestarter i64 
    jumpfalse      #13580     i64 
    setargs                   2 0
    push           0          i64 
    push           mm_parse.readvardef.owner u64 
    callfn         &mm_parse.readtypespec i64 
    pop            mm_parse.readvardef.m i64 
    jump           #13581     
#13580: 
    push           mm_parse.readvardef.k i64 
    jumpfalse      #13582     i64 
    push           25         i64 
    pop            mm_parse.readvardef.m i64 
    jump           #13581     
#13582: 
    setargs                   1 0
    push           "Readvar?" u64 
    callproc       &mm_support.serror 
#13581: 
    push           0          i64 
    pop            mm_parse.readvardef.nvars i64 
    jump           #13583     
#13584: 
    push           &mm_parse.readvardef.nvars 
    incr                      i64 1
    setargs                   3 0
    push           mm_parse.readvardef.varid i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           mm_parse.readvardef.owner u64 
    callfn         &mm_lib.getduplnameptr u64 
    pop            mm_parse.readvardef.stname u64 
    push           mm_parse.readvardef.isglobal u64 
    push           mm_parse.readvardef.stname u64 
    push           92         
    addrefoff                 u64 1 0
    push           0          i64 
    push           1          i64 
    popdotslice               u16 
    push           mm_parse.readvardef.isstatic u64 
    push           mm_parse.readvardef.stname u64 
    push           92         
    addrefoff                 u64 1 0
    push           2          i64 
    popdotindex               u16 
    push           mm_parse.readvardef.k i64 
    push           144        i64 
    seteq                     i64 
    push           mm_parse.readvardef.stname u64 
    push           92         
    addrefoff                 u64 1 0
    push           6          i64 
    popdotindex               u16 
    push           mm_parse.readvardef.varid i64 
    push           7          i64 
    jumpne         #13585     i64 
    push           1          u64 
    push           mm_parse.readvardef.stname u64 
    push           92         
    addrefoff                 u64 1 0
    push           14         i64 
    popdotindex               u16 
#13585: 
    setargs                   2 0
    push           mm_parse.readvardef.stname u64 
    push           mm_parse.readvardef.owner u64 
    callproc       &mm_lib.adddef 
    push           mm_parse.readvardef.varid i64 
    push           11         i64 
    jumpne         #13586     i64 
    setargs                   1 0
    push           mm_parse.readvardef.stname u64 
    callproc       &mm_lib.addstatic 
#13586: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           7          i64 
    jumpne         #13587     i64 
    push           mm_parse.readvardef.m i64 
    push           25         i64 
    jumpeq         #13588     i64 
    setargs                   1 0
    push           "Mixed var T x:T" u64 
    callproc       &mm_support.serror 
#13588: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    push           0          i64 
    push           mm_parse.readvardef.owner u64 
    callfn         &mm_parse.readtypespec i64 
    pop            mm_parse.readvardef.m i64 
#13587: 
    setargs                   3 0
    push           mm_parse.readvardef.stname u64 
    push           72         
    addrefoff                 u64 1 0
    push           mm_parse.readvardef.m i64 
    push           mm_parse.readvardef.owner u64 
    callproc       &mm_lib.storemode 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           9          i64 
    setjumpeq      #13589     i64 
    push           46         i64 
    setjumpne      #13590     i64 
#13589: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           9          i64 
    jumpne         #13591     i64 
    push           mm_parse.readvardef.varid i64 
    push           11         i64 
    jumpne         #13592     i64 
    setargs                   1 0
    push           "Need = on static not :=" u64 
    callproc       &mm_support.serror 
#13592: 
    jump           #13593     
#13591: 
    push           mm_parse.readvardef.varid i64 
    push           12         i64 
    jumpne         #13594     i64 
    setargs                   1 0
    push           "Need 'static' for '='" u64 
    callproc       &mm_support.serror 
    setargs                   1 0
    push           mm_parse.readvardef.stname u64 
    callproc       &mm_lib.addstatic 
#13594: 
#13593: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           177        i64 
    jumpne         #13595     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.readvardef.varid i64 
    push           12         i64 
    jumpeq         #13596     i64 
    setargs                   1 0
    push           "empty: not frame" u64 
    callproc       &mm_support.serror 
#13596: 
    setargs                   2 0
    setargs                   1 0
    push           mm_parse.readvardef.stname u64 
    callfn         &mm_lib.createname u64 
    push           142        i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readvardef.p u64 
    setargs                   3 0
    push           mm_parse.readvardef.p u64 
    push           &mm_parse.readvardef.ulistx 
    push           &mm_parse.readvardef.ulist 
    callproc       &mm_lib.addlistunit 
    jump           #13597     
#13595: 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    push           mm_parse.readvardef.stname u64 
    push           64         
    popptroff                 u64 1 0
    push           1          u64 
    push           mm_parse.readvardef.stname u64 
    push           92         
    addrefoff                 u64 1 0
    push           10         i64 
    popdotindex               u16 
    push           mm_parse.readvardef.varid i64 
    push           12         i64 
    jumpne         #13598     i64 
    setargs                   3 0
    push           mm_parse.readvardef.stname u64 
    push           64         
    pushptroff                u64 1 0
    setargs                   1 0
    push           mm_parse.readvardef.stname u64 
    callfn         &mm_lib.createname u64 
    push           29         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readvardef.p u64 
    push           1          i64 
    push           mm_parse.readvardef.p u64 
    push           57         
    popptroff                 u8 1 0
    setargs                   3 0
    push           mm_parse.readvardef.p u64 
    push           &mm_parse.readvardef.ulistx 
    push           &mm_parse.readvardef.ulist 
    callproc       &mm_lib.addlistunit 
#13598: 
#13597: 
    jump           #13599     
#13590: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           21         i64 
    jumpne         #13600     i64 
    push           mm_parse.readvardef.k i64 
    push           144        i64 
    jumpne         #13601     i64 
    setargs                   1 0
    push           "let@"     u64 
    callproc       &mm_support.serror 
#13601: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           1          u64 
    push           mm_parse.readvardef.stname u64 
    push           92         
    addrefoff                 u64 1 0
    push           13         i64 
    popdotindex               u16 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    push           mm_parse.readvardef.stname u64 
    push           96         
    popptroff                 u64 1 0
    jump           #13599     
#13600: 
    push           mm_parse.readvardef.k i64 
    push           144        i64 
    jumpne         #13602     i64 
    setargs                   1 0
    push           "let needs :=/=" u64 
    callproc       &mm_support.serror 
#13602: 
#13599: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpeq         #13603     i64 
    jump           #13604     
#13603: 
    setargs                   0 0
    callproc       &mm_lex.lex 
#13583: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           79         i64 
    jumpeq         #13584     i64 
#13604: 
    push           mm_parse.readvardef.nvars i64 
    push           0          i64 
    jumpne         #13605     i64 
    setargs                   1 0
    push           "No vars declared" u64 
    callproc       &mm_support.serror 
#13605: 
    push           mm_parse.readvardef.ulist u64 
    setret                    u64 
    jump           #13606     
#13606: 
    retfn                     u64 
End


Proc mm_parse.readconstdef:
    param          mm_parse.readconstdef.owner u64 
    param          mm_parse.readconstdef.isglobal i64 
    local          mm_parse.readconstdef.nconsts i64 
    local          mm_parse.readconstdef.deft i64 
    local          mm_parse.readconstdef.m i64 
    local          mm_parse.readconstdef.stname u64 
    procentry                 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           0          i64 
    pop            mm_parse.readconstdef.nconsts i64 
    setargs                   0 0
    callfn         &mm_parse.istypestarter i64 
    jumpfalse      #13608     i64 
    setargs                   2 0
    push           0          i64 
    push           mm_parse.readconstdef.owner u64 
    callfn         &mm_parse.readtypespec i64 
    pop            mm_parse.readconstdef.deft i64 
    jump           #13609     
#13608: 
    push           25         i64 
    pop            mm_parse.readconstdef.deft i64 
#13609: 
    jump           #13610     
#13611: 
    setargs                   3 0
    push           10         i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           mm_parse.readconstdef.owner u64 
    callfn         &mm_lib.getduplnameptr u64 
    pop            mm_parse.readconstdef.stname u64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callproc       &mm_parse.checkequals 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           1          i64 
    callfn         &mm_parse.readconstexpr u64 
    push           mm_parse.readconstdef.stname u64 
    push           64         
    popptroff                 u64 1 0
    push           mm_parse.readconstdef.deft i64 
    pop            mm_parse.readconstdef.m i64 
    setargs                   3 0
    push           mm_parse.readconstdef.stname u64 
    push           72         
    addrefoff                 u64 1 0
    push           mm_parse.readconstdef.m i64 
    push           mm_parse.readconstdef.owner u64 
    callproc       &mm_lib.storemode 
    push           &mm_parse.readconstdef.nconsts 
    incr                      i64 1
    push           mm_parse.readconstdef.isglobal u64 
    push           mm_parse.readconstdef.stname u64 
    push           92         
    addrefoff                 u64 1 0
    push           0          i64 
    push           1          i64 
    popdotslice               u16 
    setargs                   2 0
    push           mm_parse.readconstdef.stname u64 
    push           mm_parse.readconstdef.owner u64 
    callproc       &mm_lib.adddef 
    push           mm_parse.readconstdef.isglobal i64 
    push           2          i64 
    jumpne         #13612     i64 
    setargs                   1 0
    push           mm_parse.readconstdef.stname u64 
    callproc       &mm_lib.addconst 
#13612: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpeq         #13613     i64 
    jump           #13614     
#13613: 
    setargs                   0 0
    callproc       &mm_lex.lex 
#13610: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           79         i64 
    jumpeq         #13611     i64 
#13614: 
    push           mm_parse.readconstdef.nconsts i64 
    push           0          i64 
    jumpne         #13615     i64 
    setargs                   1 0
    push           "No consts declared" u64 
    callproc       &mm_support.serror 
#13615: 
#13616: 
    retproc                   
End


Proc mm_parse.readlbrack: u64
    local          mm_parse.readlbrack.ulist u64 
    local          mm_parse.readlbrack.ulistx u64 
    local          mm_parse.readlbrack.p u64 
    local          mm_parse.readlbrack.q u64 
    local          mm_parse.readlbrack.r u64 
    local          mm_parse.readlbrack.plower u64 
    local          mm_parse.readlbrack.oldirp i64 
    local          mm_parse.readlbrack.length i64 
    procentry                 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           0          u64 
    store          mm_parse.readlbrack.ulistx u64 
    pop            mm_parse.readlbrack.ulist u64 
    push           0          u64 
    pop            mm_parse.readlbrack.plower u64 
    push           0          i64 
    pop            mm_parse.readlbrack.length i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           21         i64 
    jumpne         #13618     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.inreadprint i64 
    pop            mm_parse.readlbrack.oldirp i64 
    push           1          i64 
    pop            mm_parse.inreadprint i64 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readlbrack.plower u64 
    push           mm_parse.readlbrack.oldirp i64 
    pop            mm_parse.inreadprint i64 
    setargs                   1 0
    push           7          i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #13619     
#13618: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           70         i64 
    jumpne         #13620     i64 
    push           mm_lex.nexttoken u64 
    pushptr                   u8 
    push           7          i64 
    jumpne         #13620     i64 
    setargs                   2 0
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    callfn         &mm_lib.createconstunit u64 
    pop            mm_parse.readlbrack.plower u64 
    push           1          i64 
    push           mm_parse.readlbrack.plower u64 
    push           62         
    popptroff                 u8 1 0
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #13619     
#13620: 
    push           &mm_tables.symboloptypes 
    push           &mm_decls.lx 
    pushptr                   u8 
    pushptroff                u8 1 -1
    push           1          i64 
    jumpne         #13621     i64 
    push           mm_lex.nexttoken u64 
    pushptr                   u8 
    push           13         i64 
    jumpne         #13621     i64 
    setargs                   1 0
    push           66         i64 
    callfn         &mm_lib.createunit0 u64 
    pop            mm_parse.readlbrack.p u64 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    push           mm_parse.readlbrack.p u64 
    push           40         
    popptroff                 i16 1 0
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.readlbrack.p u64 
    setret                    u64 
    jump           #13622     
    jump           #13619     
#13621: 
    push           &mm_tables.symboloptypes 
    push           &mm_decls.lx 
    pushptr                   u8 
    pushptroff                u8 1 -1
    push           1          i64 
    jumpne         #13623     i64 
    push           mm_lex.nexttoken u64 
    pushptr                   u8 
    push           9          i64 
    jumpne         #13623     i64 
    setargs                   1 0
    push           66         i64 
    callfn         &mm_lib.createunit0 u64 
    pop            mm_parse.readlbrack.p u64 
    push           &mm_tables.symbolgentoops 
    push           &mm_decls.lx 
    pushptr                   u8 
    pushptroff                u8 1 -1
    push           mm_parse.readlbrack.p u64 
    push           60         
    popptroff                 u8 1 0
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           13         i64 
    callproc       &mm_parse.lexchecksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.readlbrack.p u64 
    setret                    u64 
    jump           #13622     
    jump           #13619     
#13623: 
    setargs                   0 0
    callfn         &mm_parse.istypestarter i64 
    jumpfalse      #13624     i64 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readlbrack.p u64 
    setargs                   1 0
    push           13         i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.readlbrack.p u64 
    setret                    u64 
    jump           #13622     
#13624: 
#13619: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           13         i64 
    casejumpeq     #13625     i64 0
    popstack                  i64 
    jump           #13626     
#13625: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           19         i64 
    callfn         &mm_lib.createunit0 u64 
    pop            mm_parse.readlbrack.p u64 
    push           mm_parse.readlbrack.plower u64 
    push           mm_parse.readlbrack.p u64 
    push           24         
    popptroff                 u64 1 0
    push           0          i64 
    push           mm_parse.readlbrack.p u64 
    push           40         
    popptroff                 u32 1 0
    push           mm_parse.readlbrack.p u64 
    setret                    u64 
    jump           #13622     
    jump           #13627     
#13626: 
    setargs                   0 0
    callfn         &mm_parse.readxunit u64 
    pop            mm_parse.readlbrack.p u64 
#13627: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           13         i64 
    casejumpeq     #13628     i64 0
    push           5          i64 
    casejumpeq     #13629     i64 0
    push           19         i64 
    casejumpeq     #13630     i64 0
    popstack                  i64 
    jump           #13631     
#13628: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.readlbrack.p u64 
    setret                    u64 
    jump           #13622     
    jump           #13632     
#13629: 
    push           1          i64 
    pop            mm_parse.readlbrack.length i64 
    push           mm_lex.nexttoken u64 
    pushptr                   u8 
    push           13         i64 
    jumpne         #13633     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    push           mm_parse.readlbrack.p u64 
    push           19         i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readlbrack.p u64 
    push           mm_parse.readlbrack.length i64 
    push           mm_parse.readlbrack.p u64 
    push           40         
    popptroff                 u32 1 0
    push           mm_parse.readlbrack.plower u64 
    push           mm_parse.readlbrack.p u64 
    push           24         
    popptroff                 u64 1 0
    push           mm_parse.readlbrack.p u64 
    setret                    u64 
    jump           #13622     
#13633: 
    push           mm_parse.readlbrack.p u64 
    store          mm_parse.readlbrack.ulistx u64 
    pop            mm_parse.readlbrack.ulist u64 
#13634: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           13         i64 
    jumpne         #13635     i64 
    jump           #13636     
#13635: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpne         #13637     i64 
    setargs                   1 0
    push           ",, null expr not allowed" u64 
    callproc       &mm_support.serror 
#13637: 
    setargs                   3 0
    setargs                   0 0
    callfn         &mm_parse.readxunit u64 
    push           &mm_parse.readlbrack.ulistx 
    push           &mm_parse.readlbrack.ulist 
    callproc       &mm_lib.addlistunit 
    push           &mm_parse.readlbrack.length 
    incr                      i64 1
    setargs                   0 0
    callproc       &mm_parse.skipsemi 
#13638: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpeq         #13634     i64 
#13636: 
    setargs                   1 0
    push           13         i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    push           mm_parse.readlbrack.ulist u64 
    push           19         i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readlbrack.p u64 
    push           mm_parse.readlbrack.length i64 
    push           mm_parse.readlbrack.p u64 
    push           40         
    popptroff                 u32 1 0
    push           mm_parse.readlbrack.plower u64 
    push           mm_parse.readlbrack.p u64 
    push           24         
    popptroff                 u64 1 0
    push           mm_parse.readlbrack.p u64 
    setret                    u64 
    jump           #13622     
    jump           #13632     
#13630: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.readxunit u64 
    pop            mm_parse.readlbrack.q u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           19         i64 
    casejumpeq     #13639     i64 0
    push           13         i64 
    casejumpeq     #13640     i64 0
    popstack                  i64 
    jump           #13641     
#13639: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           0          i64 
    callfn         &mm_parse.readsunit u64 
    pop            mm_parse.readlbrack.r u64 
    setargs                   1 0
    push           13         i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   4 0
    push           mm_parse.readlbrack.r u64 
    push           mm_parse.readlbrack.q u64 
    setargs                   1 0
    push           mm_parse.readlbrack.p u64 
    callfn         &mm_parse.fixcond u64 
    push           100        i64 
    callfn         &mm_lib.createunit3 u64 
    setret                    u64 
    jump           #13622     
    jump           #13642     
#13640: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   4 0
    push           0          u64 
    push           mm_parse.readlbrack.q u64 
    setargs                   1 0
    push           mm_parse.readlbrack.p u64 
    callfn         &mm_parse.fixcond u64 
    push           100        i64 
    callfn         &mm_lib.createunit3 u64 
    setret                    u64 
    jump           #13622     
    jump           #13642     
#13641: 
#13642: 
    setargs                   3 0
    push           mm_parse.readlbrack.q u64 
    push           &mm_parse.readlbrack.ulistx 
    push           &mm_parse.readlbrack.ulist 
    callproc       &mm_lib.addlistunit 
    setargs                   1 0
    push           5          i64 
    callproc       &mm_parse.checksymbol 
    push           mm_lex.nexttoken u64 
    pushptr                   u8 
    push           19         i64 
    jumpeq         #13643     i64 
#13644: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   3 0
    setargs                   0 0
    callfn         &mm_parse.readxunit u64 
    push           &mm_parse.readlbrack.ulistx 
    push           &mm_parse.readlbrack.ulist 
    callproc       &mm_lib.addlistunit 
#13645: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpeq         #13644     i64 
#13646: 
    setargs                   1 0
    push           19         i64 
    callproc       &mm_parse.checksymbol 
    jump           #13647     
#13643: 
    setargs                   0 0
    callproc       &mm_lex.lex 
#13647: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.readxunit u64 
    pop            mm_parse.readlbrack.r u64 
    setargs                   1 0
    push           13         i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   4 0
    push           mm_parse.readlbrack.r u64 
    push           mm_parse.readlbrack.ulist u64 
    push           mm_parse.readlbrack.p u64 
    push           120        i64 
    callfn         &mm_lib.createunit3 u64 
    setret                    u64 
    jump           #13622     
    jump           #13632     
#13631: 
    setargs                   1 0
    push           "(x ..."   u64 
    callproc       &mm_support.serror 
#13632: 
    push           0          u64 
    setret                    u64 
    jump           #13622     
#13622: 
    retfn                     u64 
End


Proc mm_parse.addlistparam:
    param          mm_parse.addlistparam.ulist u64 
    param          mm_parse.addlistparam.ulistx u64 
    param          mm_parse.addlistparam.p u64 
    procentry                 
    push           mm_parse.addlistparam.ulist u64 
    pushptr                   u64 
    push           0          u64 
    jumpne         #13649     u64 
    push           mm_parse.addlistparam.p u64 
    push           mm_parse.addlistparam.ulistx u64 
    storeptr                  u64 
    push           mm_parse.addlistparam.ulist u64 
    popptr                    u64 
    jump           #13650     
#13649: 
    push           mm_parse.addlistparam.p u64 
    push           mm_parse.addlistparam.ulistx u64 
    pushptr                   u64 
    push           96         
    popptroff                 u64 1 0
#13650: 
    push           mm_parse.addlistparam.p u64 
    push           mm_parse.addlistparam.ulistx u64 
    popptr                    u64 
#13651: 
    retproc                   
End


Proc mm_parse.readcast: u64
    local          mm_parse.readcast.p u64 
    local          mm_parse.readcast.opc i64 
    local          mm_parse.readcast.t i64 
    procentry                 
    setargs                   2 0
    push           0          i64 
    push           mm_decls.currproc u64 
    callfn         &mm_parse.readtypespec i64 
    pop            mm_parse.readcast.t i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           13         i64 
    casejumpeq     #13653     i64 0
    push           21         i64 
    casejumpeq     #13654     i64 0
    push           2          i64 
    casejumpeq     #13655     i64 0
    popstack                  i64 
    jump           #13656     
#13653: 
    setargs                   1 0
    push           65         i64 
    callfn         &mm_lib.createunit0 u64 
    pop            mm_parse.readcast.p u64 
    push           29         i64 
    push           mm_parse.readcast.p u64 
    push           48         
    popptroff                 i32 1 0
    push           mm_parse.readcast.p u64 
    setret                    u64 
    jump           #13657     
    jump           #13658     
#13654: 
    push           64         i64 
    pop            mm_parse.readcast.opc i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #13658     
#13655: 
    push           mm_lex.nexttoken u64 
    pushptr                   u8 
    push           139        i64 
    jumpne         #13659     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           65         i64 
    callfn         &mm_lib.createunit0 u64 
    pop            mm_parse.readcast.p u64 
    push           mm_parse.readcast.t i64 
    push           mm_parse.readcast.p u64 
    push           16         
    popptroff                 i64 1 0
    push           29         i64 
    push           mm_parse.readcast.p u64 
    push           48         
    popptroff                 i32 1 0
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #13660     
#13659: 
    setargs                   1 0
    push           65         i64 
    callfn         &mm_lib.createunit0 u64 
    pop            mm_parse.readcast.p u64 
    push           mm_parse.readcast.t i64 
    push           mm_parse.readcast.p u64 
    push           16         
    popptroff                 i64 1 0
#13660: 
    push           mm_parse.readcast.p u64 
    setret                    u64 
    jump           #13657     
    jump           #13658     
#13656: 
    push           61         i64 
    pop            mm_parse.readcast.opc i64 
#13658: 
    setargs                   1 0
    push           12         i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readcast.p u64 
    setargs                   1 0
    push           13         i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    push           mm_parse.readcast.p u64 
    push           mm_parse.readcast.opc i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readcast.p u64 
    setargs                   3 0
    push           mm_parse.readcast.p u64 
    push           52         
    addrefoff                 u64 1 0
    push           mm_parse.readcast.t i64 
    push           mm_decls.currproc u64 
    callproc       &mm_lib.storemode 
    push           mm_parse.readcast.p u64 
    setret                    u64 
    jump           #13657     
#13657: 
    retfn                     u64 
End


Proc mm_parse.readopc: u64
    local          mm_parse.readopc.p u64 
    local          mm_parse.readopc.q u64 
    local          mm_parse.readopc.r u64 
    local          mm_parse.readopc.tag i64 
    local          mm_parse.readopc.opc i64 
    local          mm_parse.readopc.firstsym i64 
    procentry                 
    push           &mm_decls.lx 
    pushptr                   u8 
    pop            mm_parse.readopc.firstsym i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           62         i64 
    casejumpeq     #13662     i64 0
    push           63         i64 
    casejumpeq     #13663     i64 0
    popstack                  i64 
    jump           #13664     
#13662: 
    push           37         i64 
    pop            mm_parse.readopc.tag i64 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    pop            mm_parse.readopc.opc i64 
    jump           #13665     
#13663: 
    push           36         i64 
    pop            mm_parse.readopc.tag i64 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    pop            mm_parse.readopc.opc i64 
    jump           #13665     
#13664: 
    push           37         i64 
    pop            mm_parse.readopc.tag i64 
    push           &mm_tables.symbolgenops 
    push           mm_parse.readopc.firstsym i64 
    pushptroff                u8 1 -1
    pop            mm_parse.readopc.opc i64 
#13665: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.readopc.firstsym i64 
    push           30         i64 
    casejumpeq     #13666     i64 0
    push           31         i64 
    casejumpeq     #13667     i64 0
    push           41         i64 
    casejumpeq     #13668     i64 0
    push           42         i64 
    casejumpeq     #13668     i64 0
    push           63         i64 
    casejumpeq     #13668     i64 0
    popstack                  i64 
    jump           #13669     
#13666: 
    setargs                   0 0
    callfn         &mm_parse.readterm2 u64 
    setret                    u64 
    jump           #13670     
    jump           #13671     
#13667: 
    push           128        i64 
    pop            mm_parse.readopc.opc i64 
    jump           #13671     
#13668: 
    setargs                   0 0
    callfn         &mm_parse.readterm2 u64 
    pop            mm_parse.readopc.p u64 
    push           mm_parse.readopc.p u64 
    pushptr                   u8 
    push           19         i64 
    jumpne         #13672     i64 
    push           mm_parse.readopc.p u64 
    push           40         
    pushptroff                u32 1 0
    push           2          i64 
    jumpeq         #13673     i64 
    setargs                   1 0
    push           "Needs (x,y)" u64 
    callproc       &mm_support.serror 
#13673: 
    push           mm_parse.readopc.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_parse.readopc.q u64 
    push           mm_parse.readopc.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_parse.readopc.r u64 
    push           0          u64 
    push           mm_parse.readopc.q u64 
    push           8          
    popptroff                 u64 1 0
    setargs                   3 0
    push           mm_parse.readopc.r u64 
    push           mm_parse.readopc.q u64 
    push           36         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readopc.p u64 
    push           mm_parse.readopc.opc i64 
    push           mm_parse.readopc.p u64 
    push           60         
    popptroff                 u8 1 0
    push           mm_parse.readopc.p u64 
    setret                    u64 
    jump           #13670     
    jump           #13674     
#13672: 
    setargs                   1 0
    push           "READOPC/SINGLE OPND?" u64 
    callproc       &mm_support.serror 
    setargs                   2 0
    push           mm_parse.readopc.p u64 
    push           mm_parse.readopc.opc i64 
    callfn         &mm_lib.createunit1 u64 
    setret                    u64 
    jump           #13670     
#13674: 
    jump           #13671     
#13669: 
    push           &mm_tables.symboloptypes 
    push           mm_parse.readopc.firstsym i64 
    pushptroff                u8 1 -1
    push           1          i64 
    jumpne         #13675     i64 
    setargs                   1 0
    push           "Can't be used as unary op" u64 
    callproc       &mm_support.serror 
#13675: 
#13671: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           9          i64 
    jumpne         #13676     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           39         i64 
    pop            mm_parse.readopc.tag i64 
    push           mm_parse.readopc.firstsym i64 
    push           31         i64 
    casejumpeq     #13677     i64 0
    popstack                  i64 
    jump           #13678     
#13677: 
    push           175        i64 
    pop            mm_parse.readopc.opc i64 
    jump           #13679     
#13678: 
    push           &mm_tables.symbolgentoops 
    push           mm_parse.readopc.firstsym i64 
    pushptroff                u8 1 -1
    pop            mm_parse.readopc.opc i64 
    push           mm_parse.readopc.opc i64 
    push           0          i64 
    jumpne         #13680     i64 
    setargs                   1 0
    push           "op:= not available" u64 
    callproc       &mm_support.serror 
#13680: 
#13679: 
#13676: 
    setargs                   2 0
    setargs                   0 0
    callfn         &mm_parse.readterm2 u64 
    store          mm_parse.readopc.q u64 
    push           mm_parse.readopc.tag i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readopc.p u64 
    push           mm_parse.readopc.opc i64 
    push           mm_parse.readopc.p u64 
    push           60         
    popptroff                 u8 1 0
    push           mm_parse.readopc.q u64 
    pushptr                   u8 
    push           19         i64 
    jumpne         #13681     i64 
    setargs                   1 0
    push           "Too many opnds" u64 
    callproc       &mm_support.serror 
#13681: 
    push           mm_parse.readopc.p u64 
    setret                    u64 
    jump           #13670     
#13670: 
    retfn                     u64 
End


Proc mm_parse.readsprint: u64
    local          mm_parse.readsprint.oldinreadprint i64 
    local          mm_parse.readsprint.opc i64 
    local          mm_parse.readsprint.isfprint i64 
    local          mm_parse.readsprint.pformat u64 
    local          mm_parse.readsprint.pdev u64 
    local          mm_parse.readsprint.printlist u64 
    local          mm_parse.readsprint.printlistx u64 
    local          mm_parse.readsprint.p u64 
    procentry                 
    push           mm_parse.inreadprint i64 
    pop            mm_parse.readsprint.oldinreadprint i64 
    push           1          i64 
    pop            mm_parse.inreadprint i64 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    pop            mm_parse.readsprint.opc i64 
    setargs                   1 0
    push           12         i64 
    callproc       &mm_parse.lexchecksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.readsprint.opc i64 
    push           129        i64 
    casejumpeq     #13683     i64 0
    push           126        i64 
    casejumpeq     #13683     i64 0
    popstack                  i64 
    jump           #13684     
#13683: 
    push           1          i64 
    pop            mm_parse.readsprint.isfprint i64 
    jump           #13685     
#13684: 
    push           0          i64 
    pop            mm_parse.readsprint.isfprint i64 
#13685: 
    push           0          u64 
    store          mm_parse.readsprint.printlistx u64 
    pop            mm_parse.readsprint.printlist u64 
    push           0          u64 
    store          mm_parse.readsprint.pdev u64 
    pop            mm_parse.readsprint.pformat u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           21         i64 
    jumpne         #13686     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readsprint.pdev u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpne         #13687     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #13688     
#13687: 
    jump           #13689     
#13688: 
#13686: 
    push           mm_parse.readsprint.isfprint i64 
    jumpfalse      #13690     i64 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readsprint.pformat u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpne         #13691     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #13692     
#13691: 
    jump           #13689     
#13692: 
#13690: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           13         i64 
    jumpne         #13693     i64 
    jump           #13689     
#13693: 
#13694: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpne         #13695     i64 
    setargs                   3 0
    setargs                   1 0
    push           94         i64 
    callfn         &mm_lib.createunit0 u64 
    push           &mm_parse.readsprint.printlistx 
    push           &mm_parse.readsprint.printlist 
    callproc       &mm_lib.addlistunit 
    jump           #13696     
#13695: 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readsprint.p u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           7          i64 
    jumpne         #13697     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   3 0
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    push           mm_parse.readsprint.p u64 
    push           93         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readsprint.p u64 
#13697: 
    setargs                   3 0
    push           mm_parse.readsprint.p u64 
    push           &mm_parse.readsprint.printlistx 
    push           &mm_parse.readsprint.printlist 
    callproc       &mm_lib.addlistunit 
#13696: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpeq         #13698     i64 
    jump           #13699     
#13698: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #13694     
#13699: 
    setargs                   1 0
    push           13         i64 
    callproc       &mm_parse.checksymbol 
!finish::
#13689: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.readsprint.oldinreadprint i64 
    pop            mm_parse.inreadprint i64 
    push           mm_parse.readsprint.opc i64 
    push           122        i64 
    jumpeq         #13700     i64 
    push           mm_parse.readsprint.opc i64 
    push           124        i64 
    jumpne         #13701     i64 
#13700: 
    push           mm_parse.readsprint.printlist u64 
    push           0          u64 
    jumpne         #13701     u64 
    setargs                   1 0
    push           "No print items" u64 
    callproc       &mm_support.serror 
#13701: 
    startmult                 
    push           mm_parse.readsprint.isfprint i64 
    jumpfalse      #13702     i64 
    push           mm_parse.readsprint.pformat u64 
    pushptr                   u8 
    push           2          i64 
    jumpne         #13703     i64 
    setargs                   1 0
    push           "No fmt str" u64 
    callproc       &mm_support.serror 
#13703: 
    setargs                   4 0
    push           mm_parse.readsprint.printlist u64 
    push           mm_parse.readsprint.pformat u64 
    push           mm_parse.readsprint.pdev u64 
    push           mm_parse.readsprint.opc i64 
    callfn         &mm_lib.createunit3 u64 
    resetmult                 
    jump           #13704     
#13702: 
    setargs                   3 0
    push           mm_parse.readsprint.printlist u64 
    push           mm_parse.readsprint.pdev u64 
    push           mm_parse.readsprint.opc i64 
    callfn         &mm_lib.createunit2 u64 
    endmult                   
#13704: 
    setret                    u64 
    jump           #13705     
#13705: 
    retfn                     u64 
End


Proc mm_parse.readsread: u64
    local          mm_parse.readsread.oldinreadprint i64 
    local          mm_parse.readsread.opc i64 
    local          mm_parse.readsread.pformat u64 
    local          mm_parse.readsread.pdev u64 
    local          mm_parse.readsread.p u64 
    local          mm_parse.readsread.readlist u64 
    local          mm_parse.readsread.readlistx u64 
    procentry                 
    push           mm_parse.inreadprint i64 
    pop            mm_parse.readsread.oldinreadprint i64 
    push           1          i64 
    pop            mm_parse.inreadprint i64 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    pop            mm_parse.readsread.opc i64 
    setargs                   1 0
    push           12         i64 
    callproc       &mm_parse.lexchecksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           0          u64 
    store          mm_parse.readsread.readlistx u64 
    pop            mm_parse.readsread.readlist u64 
    push           0          u64 
    store          mm_parse.readsread.pdev u64 
    pop            mm_parse.readsread.pformat u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           21         i64 
    jumpne         #13707     i64 
    push           mm_parse.readsread.opc i64 
    push           130        i64 
    jumpne         #13708     i64 
    setargs                   1 0
    push           "@ on read" u64 
    callproc       &mm_support.serror 
#13708: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readsread.pdev u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpne         #13709     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #13710     
#13709: 
    jump           #13711     
#13710: 
#13707: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           13         i64 
    jumpne         #13712     i64 
    jump           #13711     
#13712: 
#13713: 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readsread.p u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           7          i64 
    jumpne         #13714     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   3 0
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    push           mm_parse.readsread.p u64 
    push           93         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readsread.p u64 
#13714: 
    setargs                   3 0
    push           mm_parse.readsread.p u64 
    push           &mm_parse.readsread.readlistx 
    push           &mm_parse.readsread.readlist 
    callproc       &mm_lib.addlistunit 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpeq         #13715     i64 
    jump           #13716     
#13715: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #13713     
#13716: 
    setargs                   1 0
    push           13         i64 
    callproc       &mm_parse.checksymbol 
!finish::
#13711: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.readsread.oldinreadprint i64 
    pop            mm_parse.inreadprint i64 
    push           mm_parse.readsread.opc i64 
    push           130        i64 
    jumpne         #13717     i64 
    push           mm_parse.readsread.readlist u64 
    push           0          u64 
    jumpne         #13717     u64 
    setargs                   1 0
    push           "No read items" u64 
    callproc       &mm_support.serror 
#13717: 
    setargs                   3 0
    push           mm_parse.readsread.readlist u64 
    push           mm_parse.readsread.pdev u64 
    push           mm_parse.readsread.opc i64 
    callfn         &mm_lib.createunit2 u64 
    setret                    u64 
    jump           #13718     
#13718: 
    retfn                     u64 
End


Proc mm_parse.readcompilervar: u64
    local          mm_parse.readcompilervar.str block:100 
    local          mm_parse.readcompilervar.tm block:16 
    local          mm_parse.readcompilervar.p u64 
    local          mm_parse.readcompilervar.currmodule u64 
    procentry                 
    push           &mm_decls.moduletable 
    push           mm_decls.currmoduleno i64 
    addrefoff                 block:456 456 0
    pop            mm_parse.readcompilervar.currmodule u64 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    switch         #13720     75 90
    opnd           #13721     
#13720: 
    switchlabel    #13722     
    switchlabel    #13723     
    switchlabel    #13724     
    switchlabel    #13725     
    switchlabel    #13726     
    switchlabel    #13727     
    switchlabel    #13728     
    switchlabel    #13729     
    switchlabel    #13721     
    switchlabel    #13730     
    switchlabel    #13731     
    switchlabel    #13732     
    switchlabel    #13733     
    switchlabel    #13734     
    switchlabel    #13735     
    switchlabel    #13735     
    endswitch                 
#13733: 
    setargs                   2 0
    push           9          i64 
    push           0          u64 
    callfn         &mm_lib.createconstunit u64 
    pop            mm_parse.readcompilervar.p u64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.readcompilervar.p u64 
    setret                    u64 
    jump           #13736     
    jump           #13737     
#13734: 
    setargs                   2 0
    push           7          i64 
    push           3.1415926535897931e+000 r64 
    typepun                   i64 void 0
    callfn         &mm_lib.createconstunit u64 
    pop            mm_parse.readcompilervar.p u64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.readcompilervar.p u64 
    setret                    u64 
    jump           #13736     
    jump           #13737     
#13722: 
    setargs                   1 0
    push           75         i64 
    callfn         &mm_lib.createunit0 u64 
    pop            mm_parse.readcompilervar.p u64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.readcompilervar.p u64 
    setret                    u64 
    jump           #13736     
    jump           #13737     
#13723: 
    setargs                   2 0
    push           &mm_parse.readcompilervar.str 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    push           0          i64 
    push           23         i64 
    dotslice                  i64 
    callproc       &msysp.getstrint 
    jump           #13737     
#13724: 
    setargs                   2 0
    push           mm_decls.stmodule u64 
    pushptr                   u64 
    push           &mm_parse.readcompilervar.str 
    callproc       &strcpy    
    jump           #13737     
#13725: 
    setargs                   2 0
    push           &mm_decls.sourcefilepaths 
    push           mm_parse.readcompilervar.currmodule u64 
    push           16         
    pushptroff                i64 1 0
    pushptroff                u64 8 0
    push           &mm_parse.readcompilervar.str 
    callproc       &strcpy    
    jump           #13737     
#13726: 
    setargs                   2 0
    push           mm_decls.currproc u64 
    pushptr                   u64 
    push           &mm_parse.readcompilervar.str 
    callproc       &strcpy    
    jump           #13737     
#13727: 
    setargs                   1 0
    push           &mm_parse.readcompilervar.tm 
    callproc       &mwindowsp.os_getsystime 
    setargs                   1 0
    push           &mm_parse.readcompilervar.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "#-#-#"    u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           &mm_parse.readcompilervar.tm 
    push           6          
    pushptroff                u16 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           &mm_parse.readcompilervar.monthnames 
    push           &mm_parse.readcompilervar.tm 
    push           2          
    pushptroff                u16 1 0
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   2 0
    push           "4"        u64 
    push           &mm_parse.readcompilervar.tm 
    pushptr                   u16 
    callproc       &msysp.m$print_i64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13737     
#13728: 
    setargs                   1 0
    push           &mm_parse.readcompilervar.tm 
    callproc       &mwindowsp.os_getsystime 
    setargs                   1 0
    push           &mm_parse.readcompilervar.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "#:#:#"    u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   2 0
    push           "z2"       u64 
    push           &mm_parse.readcompilervar.tm 
    push           8          
    pushptroff                u16 1 0
    callproc       &msysp.m$print_i64 
    setargs                   2 0
    push           "z2"       u64 
    push           &mm_parse.readcompilervar.tm 
    push           10         
    pushptroff                u16 1 0
    callproc       &msysp.m$print_i64 
    setargs                   2 0
    push           "z2"       u64 
    push           &mm_parse.readcompilervar.tm 
    push           12         
    pushptroff                u16 1 0
    callproc       &msysp.m$print_i64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #13737     
#13730: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    push           4          i64 
    push           mm_decls.targetbits u64 
    callfn         &mm_lib.createconstunit u64 
    setret                    u64 
    jump           #13736     
    jump           #13737     
#13731: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    push           4          i64 
    push           mm_decls.targetsize u64 
    callfn         &mm_lib.createconstunit u64 
    setret                    u64 
    jump           #13736     
    jump           #13737     
#13732: 
    setargs                   2 0
    push           "wx64"     u64 
    push           &mm_parse.readcompilervar.str 
    callproc       &strcpy    
    jump           #13737     
#13729: 
    setargs                   2 0
    push           "Compiler:BX Experimental" u64 
    push           &mm_parse.readcompilervar.str 
    callproc       &strcpy    
    jump           #13737     
#13735: 
    setargs                   2 0
    push           4          i64 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    push           89         i64 
    seteq                     i64 
    callfn         &mm_lib.createconstunit u64 
    pop            mm_parse.readcompilervar.p u64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.readcompilervar.p u64 
    setret                    u64 
    jump           #13736     
    jump           #13737     
#13721: 
    setargs                   2 0
    push           &mm_tables.jtagnames 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    push           "compiler var not impl: #" u64 
    callproc       &mm_support.serror_s 
#13737: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    push           -1         i64 
    setargs                   1 0
    push           &mm_parse.readcompilervar.str 
    callfn         &mlibp.pcm_copyheapstring u64 
    callfn         &mm_lib.createstringconstunit u64 
    setret                    u64 
    jump           #13736     
#13736: 
    retfn                     u64 
End


Proc mm_parse.readcastx: u64
    local          mm_parse.readcastx.opc i64 
    local          mm_parse.readcastx.m i64 
    local          mm_parse.readcastx.p u64 
    procentry                 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           61         i64 
    pop            mm_parse.readcastx.opc i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           21         i64 
    jumpne         #13739     i64 
    push           64         i64 
    pop            mm_parse.readcastx.opc i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
#13739: 
    setargs                   1 0
    push           12         i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           0          i64 
    pop            mm_parse.readcastx.m i64 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readcastx.p u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpeq         #13740     i64 
    push           mm_parse.readcastx.opc i64 
    push           64         i64 
    jumpne         #13741     i64 
    setargs                   1 0
    push           "@ type missing" u64 
    callproc       &mm_support.serror 
#13741: 
    push           63         i64 
    pop            mm_parse.readcastx.opc i64 
    jump           #13742     
#13740: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    push           0          i64 
    push           mm_decls.currproc u64 
    callfn         &mm_parse.readtypespec i64 
    pop            mm_parse.readcastx.m i64 
#13742: 
    setargs                   1 0
    push           13         i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    push           mm_parse.readcastx.p u64 
    push           mm_parse.readcastx.opc i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readcastx.p u64 
    setargs                   3 0
    push           mm_parse.readcastx.p u64 
    push           52         
    addrefoff                 u64 1 0
    push           mm_parse.readcastx.m i64 
    push           mm_decls.currproc u64 
    callproc       &mm_lib.storemode 
    push           mm_parse.readcastx.p u64 
    setret                    u64 
    jump           #13743     
#13743: 
    retfn                     u64 
End


Proc mm_parse.checksymbol:
    param          mm_parse.checksymbol.symbol i64 
    local          mm_parse.checksymbol.str block:100 
    procentry                 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           mm_parse.checksymbol.symbol i64 
    jumpeq         #13745     i64 
    setargs                   1 0
    push           &mm_parse.checksymbol.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "# expected, not #" u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           &mm_tables.symbolnames 
    push           mm_parse.checksymbol.symbol i64 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_tables.symbolnames 
    push           &mm_decls.lx 
    pushptr                   u8 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           &mm_parse.checksymbol.str 
    callproc       &mm_support.serror 
#13745: 
#13746: 
    retproc                   
End


Proc mm_parse.lexchecksymbol:
    param          mm_parse.lexchecksymbol.symbol i64 
    procentry                 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           mm_parse.lexchecksymbol.symbol i64 
    callproc       &mm_parse.checksymbol 
#13748: 
    retproc                   
End


Proc mm_parse.readtypespec: i64
    param          mm_parse.readtypespec.owner u64 
    param          mm_parse.readtypespec.typedefx i64 
    local          mm_parse.readtypespec.d u64 
    local          mm_parse.readtypespec.e u64 
    local          mm_parse.readtypespec.t i64 
    local          mm_parse.readtypespec.kwd i64 
    local          mm_parse.readtypespec.fflang i64 
    local          mm_parse.readtypespec.sltype i64 
    local          mm_parse.readtypespec.w i64 
    local          mm_parse.readtypespec.x u64 
    local          mm_parse.readtypespec.pupper u64 
    local          mm_parse.readtypespec.plx u64 
    local          mm_parse.readtypespec.dim u64 
    local          mm_parse.readtypespec.length u64 
    local          mm_parse.readtypespec.dims block:240 
    local          mm_parse.readtypespec.ndims i64 
    local          mm_parse.readtypespec.i i64 
    local          mm_parse.readtypespec.n i64 
    local          mm_parse.readtypespec.k i64 
    procentry                 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           14         i64 
    casejumpeq     #13750     i64 0
    push           91         i64 
    casejumpeq     #13751     i64 0
    push           79         i64 
    casejumpeq     #13752     i64 0
    push           152        i64 
    casejumpeq     #13753     i64 0
    push           12         i64 
    casejumpeq     #13754     i64 0
    push           132        i64 
    casejumpeq     #13755     i64 0
    push           133        i64 
    casejumpeq     #13755     i64 0
    push           134        i64 
    casejumpeq     #13756     i64 0
    push           142        i64 
    casejumpeq     #13757     i64 0
    push           96         i64 
    casejumpeq     #13758     i64 0
    push           93         i64 
    casejumpeq     #13759     i64 0
    push           145        i64 
    casejumpeq     #13760     i64 0
    popstack                  i64 
    jump           #13761     
#13750: 
!arraybounds::
#13762: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           0          i64 
    pop            mm_parse.readtypespec.ndims i64 
    push           1          i64 
    pop            mm_parse.inreadprint i64 
#13763: 
    push           0          u64 
    pop            mm_parse.readtypespec.length u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           15         i64 
    jumpeq         #13764     i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpne         #13765     i64 
#13764: 
    push           0          u64 
    pop            mm_parse.readtypespec.dim u64 
    jump           #13766     
#13765: 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readtypespec.dim u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           15         i64 
    casejumpeq     #13767     i64 0
    push           5          i64 
    casejumpeq     #13767     i64 0
    push           7          i64 
    casejumpeq     #13768     i64 0
    popstack                  i64 
    jump           #13769     
#13767: 
    jump           #13770     
#13768: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpeq         #13771     i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           15         i64 
    jumpeq         #13771     i64 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readtypespec.length u64 
    setargs                   3 0
    push           mm_parse.readtypespec.length u64 
    push           mm_parse.readtypespec.dim u64 
    push           28         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readtypespec.dim u64 
    jump           #13772     
#13771: 
    setargs                   2 0
    push           mm_parse.readtypespec.dim u64 
    push           28         i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readtypespec.dim u64 
#13772: 
    jump           #13770     
#13769: 
#13770: 
#13766: 
    push           mm_parse.readtypespec.ndims i64 
    push           30         i64 
    jumplt         #13773     i64 
    setargs                   1 0
    push           "Too many array dims" u64 
    callproc       &mm_support.serror 
#13773: 
    push           mm_parse.readtypespec.dim u64 
    push           &mm_parse.readtypespec.dims 
    push           &mm_parse.readtypespec.ndims 
    incrload                  i64 1
    popptroff                 u64 8 -8
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpeq         #13774     i64 
    jump           #13775     
#13774: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #13763     
#13775: 
    push           0          i64 
    pop            mm_parse.inreadprint i64 
    setargs                   1 0
    push           15         i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    push           0          i64 
    push           mm_parse.readtypespec.owner u64 
    callfn         &mm_parse.readtypespec i64 
    pop            mm_parse.readtypespec.t i64 
#13776: 
    push           mm_parse.readtypespec.ndims i64 
    pop            mm_parse.readtypespec.i i64 
    push           mm_parse.readtypespec.i i64 
    push           1          i64 
    jumplt         #13777     i64 
#13778: 
    setargs                   4 0
    startmult                 
    push           mm_parse.readtypespec.i i64 
    push           1          i64 
    jumpne         #13779     i64 
    push           mm_parse.readtypespec.typedefx i64 
    resetmult                 
    jump           #13780     
#13779: 
    push           0          i64 
    endmult                   
#13780: 
    push           &mm_parse.readtypespec.dims 
    push           mm_parse.readtypespec.i i64 
    pushptroff                u64 8 -8
    push           mm_parse.readtypespec.t i64 
    push           mm_parse.readtypespec.owner u64 
    callfn         &mm_lib.createarraymode i64 
    pop            mm_parse.readtypespec.t i64 
#13781: 
    fordown        #13778     i64 1
    opnd           mm_parse.readtypespec.i 
    opnd           1          
#13777: 
    push           mm_parse.readtypespec.t i64 
    setret                    i64 
    jump           #13782     
    jump           #13783     
#13751: 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    pop            mm_parse.readtypespec.t i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #13783     
#13752: 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    pop            mm_parse.readtypespec.d u64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           2          i64 
    jumpne         #13784     i64 
    setargs                   1 0
    push           79         i64 
    callproc       &mm_parse.lexchecksymbol 
    setargs                   2 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           mm_parse.readtypespec.d u64 
    callfn         &mm_lib.newtypename i64 
    pop            mm_parse.readtypespec.t i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #13785     
#13784: 
    setargs                   2 0
    push           mm_parse.readtypespec.d u64 
    push           0          u64 
    callfn         &mm_lib.newtypename i64 
    pop            mm_parse.readtypespec.t i64 
#13785: 
    jump           #13783     
#13753: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   3 0
    push           0          i64 
    push           mm_parse.readtypespec.typedefx i64 
    push           mm_parse.readtypespec.owner u64 
    callfn         &mm_parse.readenumtype i64 
    pop            mm_parse.readtypespec.t i64 
    jump           #13783     
#13754: 
    setargs                   3 0
    push           0          i64 
    push           mm_parse.readtypespec.typedefx i64 
    push           mm_parse.readtypespec.owner u64 
    callfn         &mm_parse.readenumtype i64 
    pop            mm_parse.readtypespec.t i64 
    jump           #13783     
#13755: 
    setargs                   1 0
    push           "Use 'record name =' syntax" u64 
    callproc       &mm_support.serror 
    jump           #13783     
#13756: 
    setargs                   1 0
    push           "Top-level union not allowed" u64 
    callproc       &mm_support.serror 
    jump           #13783     
#13757: 
    push           0          i64 
    pop            mm_parse.readtypespec.fflang i64 
!retry::
#13786: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           111        i64 
    jumpne         #13787     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
#13787: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           129        i64 
    casejumpeq     #13788     i64 0
    push           130        i64 
    casejumpeq     #13788     i64 0
    push           157        i64 
    casejumpeq     #13789     i64 0
    popstack                  i64 
    jump           #13790     
#13788: 
    setargs                   3 0
    push           mm_parse.readtypespec.fflang i64 
    push           mm_parse.readtypespec.typedefx i64 
    push           mm_parse.readtypespec.owner u64 
    callfn         &mm_parse.readrefproc i64 
    pop            mm_parse.readtypespec.t i64 
    jump           #13791     
#13789: 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    pop            mm_parse.readtypespec.fflang i64 
    jump           #13786     
    jump           #13791     
#13790: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           91         i64 
    jumpne         #13792     i64 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    push           16         i64 
    casejumpeq     #13793     i64 0
    popstack                  i64 
    jump           #13794     
#13793: 
    push           10         i64 
    pop            mm_parse.readtypespec.t i64 
    push           mm_parse.readtypespec.typedefx i64 
    jumpfalse      #13795     i64 
    push           16         i64 
    push           &mm_decls.tttarget 
    push           mm_parse.readtypespec.typedefx i64 
    popptroff                 i32 4 0
#13795: 
    jump           #13796     
#13794: 
    jump           #13797     
#13796: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #13798     
#13792: 
!readtarget::
#13797: 
    setargs                   2 0
    push           0          i64 
    push           mm_parse.readtypespec.owner u64 
    callfn         &mm_parse.readtypespec i64 
    pop            mm_parse.readtypespec.t i64 
    setargs                   3 0
    push           mm_parse.readtypespec.typedefx i64 
    push           mm_parse.readtypespec.t i64 
    push           mm_parse.readtypespec.owner u64 
    callfn         &mm_lib.createrefmode i64 
    pop            mm_parse.readtypespec.t i64 
#13798: 
#13791: 
    jump           #13783     
#13758: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           10         i64 
    pop            mm_parse.readtypespec.t i64 
    push           mm_parse.readtypespec.typedefx i64 
    jumpfalse      #13799     i64 
    push           16         i64 
    push           &mm_decls.tttarget 
    push           mm_parse.readtypespec.typedefx i64 
    popptroff                 i32 4 0
#13799: 
    jump           #13783     
#13759: 
    setargs                   1 0
    push           12         i64 
    callproc       &mm_parse.lexchecksymbol 
    setargs                   1 0
    push           79         i64 
    callproc       &mm_parse.lexchecksymbol 
    setargs                   2 0
    push           0          u64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    callfn         &mm_lib.newtypename i64 
    pop            mm_parse.readtypespec.t i64 
    setargs                   1 0
    push           13         i64 
    callproc       &mm_parse.lexchecksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #13783     
#13760: 
    setargs                   3 0
    push           mm_parse.readtypespec.typedefx i64 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    push           mm_parse.readtypespec.owner u64 
    callfn         &mm_parse.readslicetype i64 
    pop            mm_parse.readtypespec.t i64 
    jump           #13783     
#13761: 
    setargs                   1 0
    push           "Bad type starter" u64 
    callproc       &mm_support.serror 
#13783: 
    push           mm_parse.readtypespec.typedefx i64 
    jumpfalse      #13800     i64 
    push           &mm_decls.ttbasetype 
    push           mm_parse.readtypespec.t i64 
    pushptroff                i32 4 0
    push           &mm_decls.ttbasetype 
    push           mm_parse.readtypespec.typedefx i64 
    popptroff                 i32 4 0
#13800: 
    push           mm_parse.readtypespec.t i64 
    setret                    i64 
    jump           #13782     
#13782: 
    retfn                     i64 
End


Proc mm_parse.readslicetype: i64
    param          mm_parse.readslicetype.owner u64 
    param          mm_parse.readslicetype.slicetype i64 
    param          mm_parse.readslicetype.typedefx i64 
    local          mm_parse.readslicetype.plower u64 
    local          mm_parse.readslicetype.t i64 
    procentry                 
    setargs                   1 0
    push           14         i64 
    callproc       &mm_parse.lexchecksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           15         i64 
    jumpeq         #13802     i64 
    push           1          i64 
    pop            mm_parse.inreadprint i64 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readslicetype.plower u64 
    push           0          i64 
    pop            mm_parse.inreadprint i64 
    setargs                   1 0
    push           7          i64 
    callproc       &mm_parse.checksymbol 
    setargs                   1 0
    push           15         i64 
    callproc       &mm_parse.lexchecksymbol 
    jump           #13803     
#13802: 
    push           0          u64 
    pop            mm_parse.readslicetype.plower u64 
#13803: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    push           mm_parse.readslicetype.typedefx i64 
    push           mm_parse.readslicetype.owner u64 
    callfn         &mm_parse.readtypespec i64 
    pop            mm_parse.readslicetype.t i64 
    setargs                   5 0
    push           mm_parse.readslicetype.typedefx i64 
    push           mm_parse.readslicetype.plower u64 
    push           mm_parse.readslicetype.t i64 
    push           mm_parse.readslicetype.slicetype i64 
    push           mm_parse.readslicetype.owner u64 
    callfn         &mm_lib.createslicemode i64 
    setret                    i64 
    jump           #13804     
#13804: 
    retfn                     i64 
End


Proc mm_parse.readslist: u64
    param          mm_parse.readslist.iscall i64 
    param          mm_parse.readslist.donulls i64 
    local          mm_parse.readslist.ulist u64 
    local          mm_parse.readslist.ulistx u64 
    local          mm_parse.readslist.oldinparamlist i64 
    procentry                 
    push           0          u64 
    store          mm_parse.readslist.ulistx u64 
    pop            mm_parse.readslist.ulist u64 
    setargs                   0 0
    callproc       &mm_parse.skipsemi 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           13         i64 
    jumpne         #13806     i64 
    push           mm_parse.readslist.ulist u64 
    setret                    u64 
    jump           #13807     
#13806: 
    push           mm_parse.inparamlist i64 
    pop            mm_parse.readslist.oldinparamlist i64 
    push           mm_parse.readslist.iscall i64 
    pop            mm_parse.inparamlist i64 
#13808: 
    setargs                   0 0
    callproc       &mm_parse.skipsemi 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    casejumpeq     #13809     i64 0
    push           13         i64 
    casejumpeq     #13810     i64 0
    popstack                  i64 
    jump           #13811     
#13809: 
    push           mm_parse.readslist.donulls i64 
    jumpfalse      #13812     i64 
    setargs                   3 0
    setargs                   1 0
    push           2          i64 
    callfn         &mm_lib.createunit0 u64 
    push           &mm_parse.readslist.ulistx 
    push           &mm_parse.readslist.ulist 
    callproc       &mm_lib.addlistunit 
    jump           #13813     
#13812: 
    setargs                   1 0
    push           "null comma expr not allowed" u64 
    callproc       &mm_support.serror 
#13813: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #13814     
#13810: 
    push           mm_parse.readslist.donulls i64 
    jumpfalse      #13815     i64 
    setargs                   3 0
    push           mm_decls.nullunit u64 
    push           &mm_parse.readslist.ulistx 
    push           &mm_parse.readslist.ulist 
    callproc       &mm_lib.addlistunit 
#13815: 
    jump           #13816     
    jump           #13814     
#13811: 
    setargs                   3 0
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    push           &mm_parse.readslist.ulistx 
    push           &mm_parse.readslist.ulist 
    callproc       &mm_lib.addlistunit 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    setjumpeq      #13817     i64 
    push           6          i64 
    setjumpne      #13818     i64 
#13817: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           13         i64 
    jumpne         #13819     i64 
    jump           #13816     
#13819: 
    jump           #13820     
#13818: 
    setargs                   0 0
    callproc       &mm_parse.skipsemi 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           13         i64 
    jumpne         #13821     i64 
    jump           #13816     
#13821: 
    setargs                   1 0
    push           "SLIST?"   u64 
    callproc       &mm_support.serror 
#13820: 
#13814: 
    jump           #13808     
#13816: 
    push           mm_parse.readslist.oldinparamlist i64 
    pop            mm_parse.inparamlist i64 
    push           mm_parse.readslist.ulist u64 
    setret                    u64 
    jump           #13807     
#13807: 
    retfn                     u64 
End


Proc mm_parse.readindex: u64
    param          mm_parse.readindex.p u64 
    param          mm_parse.readindex.dot i64 
    local          mm_parse.readindex.q u64 
    local          mm_parse.readindex.plower u64 
    local          mm_parse.readindex.pupper u64 
    procentry                 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.readindex.dot i64 
    jumptrue       #13823     i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           15         i64 
    casejumpeq     #13824     i64 0
    push           27         i64 
    casejumpeq     #13825     i64 0
    push           7          i64 
    casejumpeq     #13825     i64 0
    popstack                  i64 
    jump           #13826     
#13824: 
!fullslice::
#13827: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    setargs                   2 0
    push           0          i64 
    push           mm_parse.readindex.p u64 
    callfn         &mm_lib.duplunit u64 
    push           37         i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readindex.plower u64 
    push           201        i64 
    push           mm_parse.readindex.plower u64 
    push           60         
    popptroff                 u8 1 0
    setargs                   2 0
    setargs                   2 0
    push           0          i64 
    push           mm_parse.readindex.p u64 
    callfn         &mm_lib.duplunit u64 
    push           37         i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readindex.pupper u64 
    push           202        i64 
    push           mm_parse.readindex.pupper u64 
    push           60         
    popptroff                 u8 1 0
    setargs                   3 0
    setargs                   3 0
    push           mm_parse.readindex.pupper u64 
    push           mm_parse.readindex.plower u64 
    push           20         i64 
    callfn         &mm_lib.createunit2 u64 
    push           mm_parse.readindex.p u64 
    push           50         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readindex.p u64 
    push           mm_parse.readindex.p u64 
    setret                    u64 
    jump           #13828     
    jump           #13829     
#13825: 
    setargs                   1 0
    push           15         i64 
    callproc       &mm_parse.lexchecksymbol 
    jump           #13827     
    jump           #13829     
#13826: 
#13829: 
#13823: 
#13830: 
    push           mm_parse.ndollar i64 
    push           10         i64 
    jumplt         #13831     i64 
    setargs                   1 0
    push           "Too many nested a[$]" u64 
    callproc       &mm_support.serror 
#13831: 
    push           mm_parse.readindex.p u64 
    push           &mm_parse.dollarstack 
    push           &mm_parse.ndollar 
    incrload                  i64 1
    popptroff                 u64 8 -8
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readindex.q u64 
    push           &mm_parse.ndollar 
    decr                      i64 1
    push           mm_parse.readindex.q u64 
    pushptr                   u8 
    push           20         i64 
    jumpne         #13832     i64 
    setargs                   3 0
    push           mm_parse.readindex.q u64 
    push           mm_parse.readindex.p u64 
    startmult                 
    push           mm_parse.readindex.dot i64 
    jumpfalse      #13833     i64 
    push           54         i64 
    resetmult                 
    jump           #13834     
#13833: 
    push           50         i64 
    endmult                   
#13834: 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readindex.p u64 
    jump           #13835     
#13832: 
    setargs                   3 0
    push           mm_parse.readindex.q u64 
    push           mm_parse.readindex.p u64 
    startmult                 
    push           mm_parse.readindex.dot i64 
    jumpfalse      #13836     i64 
    push           53         i64 
    resetmult                 
    jump           #13837     
#13836: 
    push           48         i64 
    endmult                   
#13837: 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readindex.p u64 
#13835: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpeq         #13838     i64 
    jump           #13839     
#13838: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #13830     
#13839: 
    setargs                   1 0
    push           15         i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.readindex.p u64 
    setret                    u64 
    jump           #13828     
#13828: 
    retfn                     u64 
End


Proc mm_parse.readdotsuffix: u64
    param          mm_parse.readdotsuffix.p u64 
    local          mm_parse.readdotsuffix.q u64 
    local          mm_parse.readdotsuffix.t i64 
    procentry                 
    jump           #13841     
#13842: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    switch         #13843     14 139
    opnd           #13844     
#13843: 
    switchlabel    #13845     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13846     
    switchlabel    #13847     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13848     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13849     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13850     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13851     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13844     
    switchlabel    #13852     
    endswitch                 
#13845: 
    setargs                   2 0
    push           1          i64 
    push           mm_parse.readdotsuffix.p u64 
    callfn         &mm_parse.readindex u64 
    pop            mm_parse.readdotsuffix.p u64 
    jump           #13853     
#13850: 
    setargs                   3 0
    setargs                   1 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    callfn         &mm_lib.createname u64 
    push           mm_parse.readdotsuffix.p u64 
    push           51         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readdotsuffix.p u64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #13853     
#13848: 
!doprop::
#13854: 
    setargs                   2 0
    push           mm_parse.readdotsuffix.p u64 
    push           37         i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readdotsuffix.p u64 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    push           mm_parse.readdotsuffix.p u64 
    push           60         
    popptroff                 u8 1 0
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #13853     
#13849: 
    setargs                   2 0
    push           mm_parse.readdotsuffix.p u64 
    push           72         i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readdotsuffix.p u64 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    push           mm_parse.readdotsuffix.p u64 
    push           40         
    popptroff                 i16 1 0
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #13853     
#13852: 
    push           mm_parse.readdotsuffix.p u64 
    pushptr                   u8 
    push           65         i64 
    casejumpeq     #13855     i64 0
    popstack                  i64 
    jump           #13856     
#13855: 
    jump           #13857     
#13856: 
    setargs                   2 0
    push           mm_parse.readdotsuffix.p u64 
    push           70         i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readdotsuffix.p u64 
#13857: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #13853     
#13847: 
    push           209        i64 
    push           &mm_decls.lx 
    push           1          
    popptroff                 u8 1 0
    jump           #13854     
    jump           #13853     
#13846: 
    push           208        i64 
    push           &mm_decls.lx 
    push           1          
    popptroff                 u8 1 0
    jump           #13854     
    jump           #13853     
#13851: 
    push           mm_parse.readdotsuffix.p u64 
    pushptr                   u8 
    push           65         i64 
    jumpne         #13858     i64 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    push           8          i64 
    jumpne         #13858     i64 
    setargs                   3 0
    setargs                   2 0
    push           mm_parse.readdotsuffix.p u64 
    push           37         i64 
    callfn         &mm_lib.createunit1 u64 
    setargs                   2 0
    push           mm_parse.readdotsuffix.p u64 
    push           37         i64 
    callfn         &mm_lib.createunit1 u64 
    push           20         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readdotsuffix.q u64 
    push           208        i64 
    push           mm_parse.readdotsuffix.q u64 
    push           16         
    pushptroff                u64 1 0
    push           60         
    popptroff                 u8 1 0
    push           209        i64 
    push           mm_parse.readdotsuffix.q u64 
    push           24         
    pushptroff                u64 1 0
    push           60         
    popptroff                 u8 1 0
    jump           #13859     
#13858: 
    jump           #13860     
#13859: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.readdotsuffix.q u64 
    pop            mm_parse.readdotsuffix.p u64 
    jump           #13853     
#13844: 
!error::
#13860: 
    setargs                   1 0
    push           "Unknown dot suffix" u64 
    callproc       &mm_support.serror 
#13853: 
#13841: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           2          i64 
    jumpeq         #13842     i64 
#13861: 
    push           mm_parse.readdotsuffix.p u64 
    setret                    u64 
    jump           #13862     
#13862: 
    retfn                     u64 
End


Proc mm_parse.readconstexpr: u64
    param          mm_parse.readconstexpr.needconst i64 
    procentry                 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    setret                    u64 
    jump           #13864     
#13864: 
    retfn                     u64 
End


Proc mm_parse.readconstint: i64
    local          mm_parse.readconstint.x i64 
    procentry                 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           70         i64 
    jumpne         #13866     i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                i64 1 0
    pop            mm_parse.readconstint.x i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.readconstint.x i64 
    setret                    i64 
    jump           #13867     
    jump           #13868     
#13866: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           31         i64 
    jumpne         #13869     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           70         i64 
    jumpne         #13870     i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                i64 1 0
    pop            mm_parse.readconstint.x i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.readconstint.x i64 
    neg                       i64 
    setret                    i64 
    jump           #13867     
#13870: 
#13869: 
#13868: 
    setargs                   1 0
    push           "Can't do complex expr" u64 
    callproc       &mm_support.serror 
    push           0          i64 
    setret                    i64 
    jump           #13867     
#13867: 
    retfn                     i64 
End


Proc mm_parse.readprocdef:
    param          mm_parse.readprocdef.procowner u64 
    param          mm_parse.readprocdef.isglobal i64 
    param          mm_parse.readprocdef.fflang i64 
    local          mm_parse.readprocdef.kwd i64 
    local          mm_parse.readprocdef.startline i64 
    local          mm_parse.readprocdef.closesym i64 
    local          mm_parse.readprocdef.stproc u64 
    local          mm_parse.readprocdef.q u64 
    local          mm_parse.readprocdef.stname u64 
    local          mm_parse.readprocdef.i i64 
    procentry                 
    push           &mm_decls.lx 
    pushptr                   u8 
    pop            mm_parse.readprocdef.kwd i64 
    push           0          i64 
    pop            mm_parse.yieldseen i64 
    push           0          i64 
    pop            mm_parse.nforloops i64 
    setargs                   3 0
    push           mm_parse.readprocdef.fflang i64 
    push           mm_parse.readprocdef.isglobal i64 
    push           mm_parse.readprocdef.procowner u64 
    callfn         &mm_parse.readprocdecl u64 
    pop            mm_parse.readprocdef.stproc u64 
    setargs                   0 0
    callproc       &mm_parse.checkequals 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.getcurrline i64 
    pop            mm_parse.readprocdef.startline i64 
    setargs                   1 0
    push           0          i64 
    callfn         &mm_parse.checkbegin i64 
    pop            mm_parse.readprocdef.closesym i64 
    setargs                   1 0
    push           mm_parse.readprocdef.stproc u64 
    callproc       &mm_parse.pushproc 
    push           0          i64 
    pop            mm_lib.nextavindex i64 
    push           mm_parse.dretvar u64 
    jumpfalse      #13872     u64 
    setargs                   3 0
    push           12         i64 
    push           mm_parse.dretvar u64 
    push           mm_parse.readprocdef.stproc u64 
    callfn         &mm_lib.getduplnameptr u64 
    pop            mm_parse.readprocdef.stname u64 
    setargs                   3 0
    push           mm_parse.readprocdef.stname u64 
    push           72         
    addrefoff                 u64 1 0
    push           mm_parse.readprocdef.stproc u64 
    push           72         
    pushptroff                i32 1 0
    push           mm_parse.readprocdef.procowner u64 
    callproc       &mm_lib.storemode 
    setargs                   2 0
    push           mm_parse.readprocdef.stname u64 
    push           mm_parse.readprocdef.stproc u64 
    callproc       &mm_lib.adddef 
#13872: 
    setargs                   1 0
    push           mm_parse.readprocdef.stproc u64 
    callproc       &mm_lib.addtoproclist 
    setargs                   1 0
    push           0          i64 
    callfn         &mm_parse.readsunit u64 
    push           mm_parse.readprocdef.stproc u64 
    push           64         
    popptroff                 u64 1 0
    setargs                   3 0
    push           mm_parse.readprocdef.startline i64 
    push           mm_parse.readprocdef.kwd i64 
    push           mm_parse.readprocdef.closesym i64 
    callproc       &mm_parse.checkbeginend 
    push           mm_parse.yieldseen i64 
    jumpfalse      #13873     i64 
    push           9          i64 
    push           mm_parse.readprocdef.stproc u64 
    push           78         
    popptroff                 u8 1 0
#13873: 
    push           mm_decls.ndocstrings i64 
    jumpfalse      #13874     i64 
    push           mm_parse.docfile u64 
    jumpfalse      #13874     u64 
    push           mm_parse.readprocdef.stproc u64 
    push           92         
    pushptroff                u16 1 0
    push           0          i64 
    push           1          i64 
    dotslice                  i64 
    push           2          i64 
    jumpne         #13874     i64 
    setargs                   1 0
    push           mm_parse.docfile u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           "proc"     u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_parse.readprocdef.stproc u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#13875: 
    push           1          i64 
    pop            mm_parse.readprocdef.i i64 
    push           mm_decls.ndocstrings i64 
    push           1          i64 
    jumplt         #13876     i64 
#13877: 
    setargs                   1 0
    push           mm_parse.docfile u64 
    callproc       &msysp.m$print_startfile 
    setargs                   1 0
    push           &mm_decls.docstrings 
    push           mm_parse.readprocdef.i i64 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    setargs                   1 0
    push           &mm_decls.docstrings 
    push           mm_parse.readprocdef.i i64 
    pushptroff                u64 8 -8
    push           1          i64 
    addrefoff                 u64 1 0
    callfn         &strlen    i64 
    push           &mm_decls.docstrings 
    push           mm_parse.readprocdef.i i64 
    pushptroff                u64 8 -8
    callproc       &mlibp.pcm_free 
#13878: 
    forup          #13877     i64 1
    opnd           mm_parse.readprocdef.i 
    opnd           mm_decls.ndocstrings 
#13876: 
    setargs                   1 0
    push           mm_parse.docfile u64 
    callproc       &msysp.m$print_startfile 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           0          i64 
    pop            mm_decls.ndocstrings i64 
#13874: 
    setargs                   0 0
    callproc       &mm_parse.popproc 
#13879: 
    retproc                   
End


Proc mm_parse.readprocdecl: u64
    param          mm_parse.readprocdecl.procowner u64 
    param          mm_parse.readprocdecl.isglobal i64 
    param          mm_parse.readprocdecl.fflang i64 
    local          mm_parse.readprocdecl.kwd i64 
    local          mm_parse.readprocdecl.varparams i64 
    local          mm_parse.readprocdecl.try_level i64 
    local          mm_parse.readprocdecl.nparams i64 
    local          mm_parse.readprocdecl.nretvalues i64 
    local          mm_parse.readprocdecl.isthreaded i64 
    local          mm_parse.readprocdecl.retmodes block:32 
    local          mm_parse.readprocdecl.metadata u64 
    local          mm_parse.readprocdecl.truename u64 
    local          mm_parse.readprocdecl.pequiv u64 
    local          mm_parse.readprocdecl.stproc u64 
    local          mm_parse.readprocdecl.owner u64 
    local          mm_parse.readprocdecl.paramlist u64 
    local          mm_parse.readprocdecl.nameptr u64 
    procentry                 
    push           &mm_decls.lx 
    pushptr                   u8 
    pop            mm_parse.readprocdecl.kwd i64 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    pop            mm_parse.readprocdecl.isthreaded i64 
    push           0          u64 
    pop            mm_parse.readprocdecl.pequiv u64 
    push           ""         u64 
    pop            mm_parse.readprocdecl.metadata u64 
    push           0          u64 
    pop            mm_parse.readprocdecl.truename u64 
    push           0          i64 
    pop            mm_parse.readprocdecl.varparams i64 
    push           0          i64 
    pop            mm_parse.readprocdecl.try_level i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           75         i64 
    jumpne         #13881     i64 
    setargs                   1 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    callfn         &mlibp.pcm_copyheapstring u64 
    pop            mm_parse.readprocdecl.truename u64 
    setargs                   1 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    callproc       &mlibp.convlcstring 
    setargs                   1 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    callfn         &mm_lex.addnamestr u64 
    push           &mm_decls.lx 
    push           8          
    popptroff                 u64 1 0
    jump           #13882     
#13881: 
    setargs                   1 0
    push           79         i64 
    callproc       &mm_parse.checksymbol 
#13882: 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    pop            mm_parse.readprocdecl.nameptr u64 
    setargs                   3 0
    startmult                 
    push           mm_parse.insidedllimport i64 
    jumpfalse      #13883     i64 
    push           6          i64 
    resetmult                 
    jump           #13884     
#13883: 
    push           5          i64 
    endmult                   
#13884: 
    push           mm_parse.readprocdecl.nameptr u64 
    push           mm_parse.readprocdecl.procowner u64 
    callfn         &mm_lib.getduplnameptr u64 
    pop            mm_parse.readprocdecl.stproc u64 
    push           mm_parse.insidedllimport i64 
    jumpfalse      #13885     i64 
    push           1          i64 
    pop            mm_parse.readprocdecl.isglobal i64 
#13885: 
    push           mm_parse.readprocdecl.isthreaded i64 
    push           mm_parse.readprocdecl.stproc u64 
    push           118        
    popptroff                 u8 1 0
    push           mm_parse.readprocdecl.truename u64 
    jumpfalse      #13886     u64 
    push           mm_parse.readprocdecl.truename u64 
    push           mm_parse.readprocdecl.stproc u64 
    push           96         
    popptroff                 u64 1 0
#13886: 
    push           mm_parse.readprocdecl.stproc u64 
    pushptr                   u64 
    pushptr                   u8 
    push           36         u64 
    jumpne         #13887     u64 
    setargs                   2 0
    push           "$init"    u64 
    push           mm_parse.readprocdecl.stproc u64 
    pushptr                   u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #13887     i64 
    push           mm_parse.readprocdecl.stproc u64 
    push           &mm_decls.moduletable 
    push           mm_decls.stmodule u64 
    push           94         
    pushptroff                u8 1 0
    addrefoff                 block:456 456 0
    push           440        
    popptroff                 u64 1 0
#13887: 
    setargs                   2 0
    push           mm_parse.readprocdecl.stproc u64 
    push           mm_parse.readprocdecl.procowner u64 
    callproc       &mm_lib.adddef 
    push           mm_parse.readprocdecl.stproc u64 
    push           78         
    pushptroff                u8 1 0
    push           6          i64 
    jumpne         #13888     i64 
    push           1          u64 
    push           mm_parse.readprocdecl.stproc u64 
    push           92         
    addrefoff                 u64 1 0
    push           14         i64 
    popdotindex               u16 
#13888: 
    push           mm_parse.readprocdecl.stproc u64 
    pop            mm_parse.readprocdecl.owner u64 
    setargs                   1 0
    push           mm_parse.readprocdecl.stproc u64 
    callproc       &mm_parse.pushproc 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           0          u64 
    pop            mm_parse.readprocdecl.paramlist u64 
    push           0          i64 
    pop            mm_parse.readprocdecl.retmodes i64 
    push           0          i64 
    pop            mm_parse.readprocdecl.nparams i64 
    push           0          i64 
    pop            mm_parse.readprocdecl.nretvalues i64 
    push           0          i64 
    pop            mm_parse.readprocdecl.nretvalues i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           12         i64 
    jumpne         #13889     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           13         i64 
    jumpeq         #13890     i64 
    setargs                   5 0
    push           &mm_parse.readprocdecl.nparams 
    push           &mm_parse.readprocdecl.varparams 
    push           mm_parse.readprocdecl.fflang i64 
    push           mm_parse.readprocdecl.stproc u64 
    push           mm_parse.readprocdecl.procowner u64 
    callfn         &mm_parse.readparams u64 
    pop            mm_parse.readprocdecl.paramlist u64 
    setargs                   1 0
    push           13         i64 
    callproc       &mm_parse.checksymbol 
#13890: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           7          i64 
    jumpeq         #13891     i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           11         i64 
    jumpne         #13892     i64 
#13891: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    push           &mm_parse.readprocdecl.retmodes 
    push           mm_parse.readprocdecl.owner u64 
    callfn         &mm_parse.readreturntype i64 
    pop            mm_parse.readprocdecl.nretvalues i64 
    jump           #13893     
#13892: 
    push           &mm_decls.typestarterset 
    push           &mm_decls.lx 
    pushptr                   u8 
    pushptroff                u8 1 0
    jumptrue       #13894     i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           79         i64 
    jumpne         #13895     i64 
#13894: 
    setargs                   2 0
    push           &mm_parse.readprocdecl.retmodes 
    push           mm_parse.readprocdecl.owner u64 
    callfn         &mm_parse.readreturntype i64 
    pop            mm_parse.readprocdecl.nretvalues i64 
#13895: 
#13893: 
    jump           #13896     
#13889: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           7          i64 
    jumpeq         #13897     i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           11         i64 
    jumpne         #13898     i64 
#13897: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    push           &mm_parse.readprocdecl.retmodes 
    push           mm_parse.readprocdecl.owner u64 
    callfn         &mm_parse.readreturntype i64 
    pop            mm_parse.readprocdecl.nretvalues i64 
#13898: 
#13896: 
    push           0          u64 
    pop            mm_parse.dretvar u64 
    push           mm_parse.readprocdecl.nretvalues i64 
    push           1          i64 
    jumpne         #13899     i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           79         i64 
    jumpne         #13900     i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    pop            mm_parse.dretvar u64 
    setargs                   0 0
    callproc       &mm_lex.lex 
#13900: 
#13899: 
    push           mm_parse.readprocdecl.nretvalues i64 
    jumptrue       #13901     i64 
    push           mm_parse.readprocdecl.kwd i64 
    push           130        i64 
    jumpne         #13901     i64 
    setargs                   1 0
    push           "Function needs ret type" u64 
    callproc       &mm_support.serror 
#13901: 
    push           mm_parse.readprocdecl.nretvalues i64 
    jumpfalse      #13902     i64 
    push           mm_parse.readprocdecl.kwd i64 
    push           130        i64 
    jumpeq         #13902     i64 
    setargs                   1 0
    push           "Proc can't return value" u64 
    callproc       &mm_support.serror 
#13902: 
    push           mm_parse.readprocdecl.paramlist u64 
    push           mm_parse.readprocdecl.stproc u64 
    push           104        
    popptroff                 u64 1 0
    push           mm_parse.readprocdecl.nretvalues i64 
    push           mm_parse.readprocdecl.stproc u64 
    push           116        
    popptroff                 u8 1 0
    push           mm_parse.readprocdecl.nretvalues i64 
    push           0          i64 
    casejumpeq     #13903     i64 0
    push           1          i64 
    casejumpeq     #13904     i64 0
    popstack                  i64 
    jump           #13905     
#13903: 
    push           0          i64 
    push           mm_parse.readprocdecl.stproc u64 
    push           72         
    popptroff                 i32 1 0
    jump           #13906     
#13904: 
    setargs                   3 0
    push           mm_parse.readprocdecl.stproc u64 
    push           72         
    addrefoff                 u64 1 0
    push           &mm_parse.readprocdecl.retmodes 
    push           1          i64 
    pushptroff                i64 8 -8
    push           mm_parse.readprocdecl.procowner u64 
    callproc       &mm_lib.storemode 
    jump           #13906     
#13905: 
    setargs                   4 0
    push           0          i64 
    push           mm_parse.readprocdecl.nretvalues i64 
    push           &mm_parse.readprocdecl.retmodes 
    makeslice                 u128 
    push           mm_parse.readprocdecl.procowner u64 
    callfn         &mm_lib.createtuplemode i64 
    push           mm_parse.readprocdecl.stproc u64 
    push           72         
    popptroff                 i32 1 0
#13906: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           21         i64 
    jumpne         #13907     i64 
    setargs                   1 0
    push           79         i64 
    callproc       &mm_parse.lexchecksymbol 
    setargs                   1 0
    push           "READPROCDEF @" u64 
    callproc       &mm_support.serror 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           1          u64 
    push           mm_parse.readprocdecl.stproc u64 
    push           92         
    addrefoff                 u64 1 0
    push           13         i64 
    popdotindex               u16 
#13907: 
    push           0          u64 
    push           mm_parse.readprocdecl.stproc u64 
    push           64         
    popptroff                 u64 1 0
    push           mm_parse.readprocdecl.fflang i64 
    push           2          i64 
    casejumpeq     #13908     i64 0
    push           1          i64 
    casejumpeq     #13908     i64 0
    popstack                  i64 
    jump           #13909     
#13908: 
    jump           #13910     
#13909: 
    push           mm_parse.readprocdecl.procowner u64 
    push           78         
    pushptroff                u8 1 0
    push           2          i64 
    casejumpeq     #13911     i64 0
    push           3          i64 
    casejumpeq     #13912     i64 0
    popstack                  i64 
    jump           #13913     
#13911: 
    jump           #13914     
#13912: 
    setargs                   1 0
    push           "Need FF specifier" u64 
    callproc       &mm_support.serror 
    jump           #13914     
#13913: 
#13914: 
#13910: 
    push           mm_parse.readprocdecl.isglobal u64 
    push           mm_parse.readprocdecl.stproc u64 
    push           92         
    addrefoff                 u64 1 0
    push           0          i64 
    push           1          i64 
    popdotslice               u16 
    push           mm_parse.readprocdecl.varparams i64 
    push           mm_parse.readprocdecl.stproc u64 
    push           117        
    popptroff                 u8 1 0
    push           mm_parse.readprocdecl.fflang i64 
    push           mm_parse.readprocdecl.stproc u64 
    push           115        
    popptroff                 u8 1 0
    push           mm_parse.readprocdecl.procowner u64 
    push           mm_decls.stmodule u64 
    jumpne         #13915     u64 
    push           mm_parse.readprocdecl.stproc u64 
    push           76         
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #13916     i64 
    setargs                   2 0
    push           "start"    u64 
    push           mm_parse.readprocdecl.stproc u64 
    pushptr                   u64 
    callfn         &mlibp.eqstring i64 
    jumptrue       #13917     i64 
#13916: 
#13915: 
    push           mm_parse.readprocdecl.stproc u64 
    push           76         
    pushptroff                u8 1 0
    push           4          i64 
    jumpne         #13918     i64 
    setargs                   2 0
    push           "main"     u64 
    push           mm_parse.readprocdecl.stproc u64 
    pushptr                   u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #13918     i64 
#13917: 
    push           2          u64 
    push           mm_parse.readprocdecl.stproc u64 
    push           92         
    addrefoff                 u64 1 0
    push           0          i64 
    push           1          i64 
    popdotslice               u16 
#13918: 
    setargs                   0 0
    callproc       &mm_parse.popproc 
    push           mm_parse.readprocdecl.stproc u64 
    setret                    u64 
    jump           #13919     
#13919: 
    retfn                     u64 
End


Proc mm_parse.readparams: u64
    param          mm_parse.readparams.procowner u64 
    param          mm_parse.readparams.owner u64 
    param          mm_parse.readparams.fflang i64 
    param          mm_parse.readparams.varparams u64 
    param          mm_parse.readparams.nparams u64 
    local          mm_parse.readparams.stlist u64 
    local          mm_parse.readparams.stlistx u64 
    local          mm_parse.readparams.stname u64 
    local          mm_parse.readparams.d u64 
    local          mm_parse.readparams.parammode i64 
    local          mm_parse.readparams.pmode i64 
    local          mm_parse.readparams.m i64 
    local          mm_parse.readparams.pmprefix i64 
    local          mm_parse.readparams.str block:30 
    procentry                 
    push           0          u64 
    store          mm_parse.readparams.stlistx u64 
    pop            mm_parse.readparams.stlist u64 
    push           0          i64 
    pop            mm_parse.readparams.pmode i64 
    push           0          i64 
    push           mm_parse.readparams.nparams u64 
    popptr                    i64 
    push           0          i64 
    pop            mm_parse.readparams.pmprefix i64 
    push           0          i64 
    pop            mm_parse.readparams.parammode i64 
    push           mm_parse.readparams.fflang i64 
    push           0          i64 
    jumpne         #13921     i64 
    push           3          i64 
    pop            mm_parse.readparams.fflang i64 
#13921: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           95         i64 
    setjumpeq      #13922     i64 
    push           24         i64 
    setjumpne      #13923     i64 
#13922: 
    push           2          i64 
    pop            mm_parse.readparams.parammode i64 
    push           1          i64 
    pop            mm_parse.readparams.pmprefix i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #13924     
#13923: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           50         i64 
    jumpne         #13925     i64 
    push           1          i64 
    pop            mm_parse.readparams.parammode i64 
    push           1          i64 
    pop            mm_parse.readparams.pmprefix i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
#13925: 
#13924: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           79         i64 
    jumpne         #13926     i64 
    push           mm_lex.nexttoken u64 
    pushptr                   u8 
    push           5          i64 
    setjumpeq      #13927     i64 
    push           13         i64 
    setjumpne      #13926     i64 
#13927: 
    setargs                   2 0
    push           0          i64 
    push           mm_parse.readparams.procowner u64 
    callfn         &mm_parse.readtypespec i64 
    pop            mm_parse.readparams.pmode i64 
!typesonly::
#13928: 
    setargs                   7 0
    push           mm_parse.readparams.parammode i64 
    push           mm_parse.readparams.pmode i64 
    push           mm_parse.readparams.nparams u64 
    push           mm_parse.readparams.varparams u64 
    push           mm_parse.readparams.fflang i64 
    push           mm_parse.readparams.owner u64 
    push           mm_parse.readparams.procowner u64 
    callfn         &mm_parse.readparams_types u64 
    setret                    u64 
    jump           #13929     
    jump           #13930     
#13926: 
    setargs                   2 0
    push           0          i64 
    push           mm_parse.readparams.procowner u64 
    callfn         &mm_parse.readtypespec i64 
    pop            mm_parse.readparams.pmode i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    setjumpeq      #13931     i64 
    push           13         i64 
    setjumpne      #13932     i64 
#13931: 
    jump           #13928     
#13932: 
#13930: 
    push           mm_parse.readparams.pmprefix i64 
    jumpfalse      #13933     i64 
    setargs                   1 0
    push           "&/out must be applied to param name" u64 
    callproc       &mm_support.serror 
#13933: 
    jump           #13934     
#13935: 
    setargs                   0 0
    callfn         &mm_parse.istypestarter i64 
    jumpfalse      #13936     i64 
    setargs                   2 0
    push           0          i64 
    push           mm_parse.readparams.procowner u64 
    callfn         &mm_parse.readtypespec i64 
    pop            mm_parse.readparams.pmode i64 
#13936: 
!gotmode::
#13934: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           50         i64 
    casejumpeq     #13937     i64 0
    push           95         i64 
    casejumpeq     #13938     i64 0
    push           24         i64 
    casejumpeq     #13938     i64 0
    popstack                  i64 
    jump           #13939     
#13937: 
    push           1          i64 
    pop            mm_parse.readparams.parammode i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           7          i64 
    jumpne         #13940     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
#13940: 
    jump           #13941     
#13938: 
    push           2          i64 
    pop            mm_parse.readparams.parammode i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           7          i64 
    jumpne         #13942     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
#13942: 
    jump           #13941     
#13939: 
#13941: 
    setargs                   1 0
    push           79         i64 
    callproc       &mm_parse.checksymbol 
    push           mm_parse.readparams.nparams u64 
    incr                      i64 1
    setargs                   3 0
    push           13         i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           mm_parse.readparams.owner u64 
    callfn         &mm_lib.getduplnameptr u64 
    pop            mm_parse.readparams.stname u64 
    setargs                   2 0
    push           mm_parse.readparams.stname u64 
    push           mm_parse.readparams.owner u64 
    callproc       &mm_lib.adddef 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.readparams.parammode i64 
    push           2          i64 
    jumpne         #13943     i64 
    setargs                   3 0
    push           0          i64 
    push           mm_parse.readparams.pmode i64 
    push           mm_parse.readparams.procowner u64 
    callfn         &mm_lib.createrefmode i64 
    pop            mm_parse.readparams.m i64 
    jump           #13944     
#13943: 
    push           mm_parse.readparams.pmode i64 
    pop            mm_parse.readparams.m i64 
#13944: 
    setargs                   3 0
    push           mm_parse.readparams.stname u64 
    push           72         
    addrefoff                 u64 1 0
    push           mm_parse.readparams.m i64 
    push           mm_parse.readparams.owner u64 
    callproc       &mm_lib.storemode 
    push           mm_parse.readparams.parammode i64 
    push           mm_parse.readparams.stname u64 
    push           104        
    popptroff                 u8 1 0
    setargs                   3 0
    push           mm_parse.readparams.stname u64 
    push           &mm_parse.readparams.stlistx 
    push           &mm_parse.readparams.stlist 
    callproc       &mm_parse.addlistparam 
    push           0          i64 
    pop            mm_parse.readparams.parammode i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           9          i64 
    casejumpeq     #13945     i64 0
    push           46         i64 
    casejumpeq     #13946     i64 0
    popstack                  i64 
    jump           #13947     
#13945: 
    setargs                   0 0
    callproc       &mm_lex.lex 
!dodefvalue::
#13948: 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    push           mm_parse.readparams.stname u64 
    push           64         
    popptroff                 u64 1 0
    push           1          u64 
    push           mm_parse.readparams.stname u64 
    push           92         
    addrefoff                 u64 1 0
    push           10         i64 
    popdotindex               u16 
    push           1          i64 
    push           mm_parse.readparams.stname u64 
    push           105        
    popptroff                 u8 1 0
    jump           #13949     
#13946: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #13948     
    jump           #13949     
#13947: 
#13949: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    casejumpeq     #13950     i64 0
    push           13         i64 
    casejumpeq     #13951     i64 0
    popstack                  i64 
    jump           #13952     
#13950: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #13953     
#13951: 
    jump           #13954     
    jump           #13953     
#13952: 
    setargs                   1 0
    push           "nameparams1" u64 
    callproc       &mm_support.serror 
#13953: 
    jump           #13935     
#13954: 
    push           mm_parse.readparams.stlist u64 
    setret                    u64 
    jump           #13929     
#13929: 
    retfn                     u64 
End


Proc mm_parse.readparams_types: u64
    param          mm_parse.readparams_types.procowner u64 
    param          mm_parse.readparams_types.owner u64 
    param          mm_parse.readparams_types.fflang i64 
    param          mm_parse.readparams_types.varparams u64 
    param          mm_parse.readparams_types.nparams u64 
    param          mm_parse.readparams_types.pmode i64 
    param          mm_parse.readparams_types.parammode i64 
    local          mm_parse.readparams_types.stlist u64 
    local          mm_parse.readparams_types.stlistx u64 
    local          mm_parse.readparams_types.stname u64 
    local          mm_parse.readparams_types.firstparam i64 
    local          mm_parse.readparams_types.m i64 
    local          mm_parse.readparams_types.str block:30 
    procentry                 
    push           0          u64 
    store          mm_parse.readparams_types.stlistx u64 
    pop            mm_parse.readparams_types.stlist u64 
    push           0          u64 
    pop            mm_parse.readparams_types.stname u64 
    push           0          i64 
    push           mm_parse.readparams_types.nparams u64 
    popptr                    i64 
    jump           #13956     
#13957: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           28         i64 
    jumpne         #13958     i64 
    push           mm_parse.readparams_types.nparams u64 
    pushptr                   i64 
    push           1          i64 
    add                       i64 
    push           mm_parse.readparams_types.varparams u64 
    popptr                    i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           13         i64 
    callproc       &mm_parse.checksymbol 
    jump           #13959     
#13958: 
    setargs                   2 0
    push           0          i64 
    push           mm_parse.readparams_types.procowner u64 
    callfn         &mm_parse.readtypespec i64 
    pop            mm_parse.readparams_types.pmode i64 
!gotmode::
#13956: 
    push           mm_parse.readparams_types.nparams u64 
    incr                      i64 1
    setargs                   1 0
    push           &mm_parse.readparams_types.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "$"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           mm_parse.readparams_types.nparams u64 
    pushptr                   i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   3 0
    push           13         i64 
    setargs                   1 0
    push           &mm_parse.readparams_types.str 
    callfn         &mm_lex.addnamestr u64 
    push           mm_parse.readparams_types.owner u64 
    callfn         &mm_lib.getduplnameptr u64 
    pop            mm_parse.readparams_types.stname u64 
    setargs                   2 0
    push           mm_parse.readparams_types.stname u64 
    push           mm_parse.readparams_types.owner u64 
    callproc       &mm_lib.adddef 
    push           mm_parse.readparams_types.parammode i64 
    push           2          i64 
    jumpne         #13960     i64 
    setargs                   3 0
    push           0          i64 
    push           mm_parse.readparams_types.pmode i64 
    push           mm_parse.readparams_types.procowner u64 
    callfn         &mm_lib.createrefmode i64 
    pop            mm_parse.readparams_types.m i64 
    jump           #13961     
#13960: 
    push           mm_parse.readparams_types.pmode i64 
    pop            mm_parse.readparams_types.m i64 
#13961: 
    setargs                   3 0
    push           mm_parse.readparams_types.stname u64 
    push           72         
    addrefoff                 u64 1 0
    push           mm_parse.readparams_types.m i64 
    push           mm_parse.readparams_types.owner u64 
    callproc       &mm_lib.storemode 
    push           mm_parse.readparams_types.parammode i64 
    push           mm_parse.readparams_types.stname u64 
    push           104        
    popptroff                 u8 1 0
    setargs                   3 0
    push           mm_parse.readparams_types.stname u64 
    push           &mm_parse.readparams_types.stlistx 
    push           &mm_parse.readparams_types.stlist 
    callproc       &mm_parse.addlistparam 
    push           0          i64 
    pop            mm_parse.readparams_types.parammode i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           9          i64 
    casejumpeq     #13962     i64 0
    push           46         i64 
    casejumpeq     #13962     i64 0
    push           79         i64 
    casejumpeq     #13963     i64 0
    popstack                  i64 
    jump           #13964     
#13962: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    push           mm_parse.readparams_types.stname u64 
    push           64         
    popptroff                 u64 1 0
    push           1          u64 
    push           mm_parse.readparams_types.stname u64 
    push           92         
    addrefoff                 u64 1 0
    push           10         i64 
    popdotindex               u16 
    jump           #13965     
#13963: 
    setargs                   1 0
    push           "Can't mixed unnamed/named params" u64 
    callproc       &mm_support.serror 
    jump           #13965     
#13964: 
#13965: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    casejumpeq     #13966     i64 0
    push           13         i64 
    casejumpeq     #13967     i64 0
    popstack                  i64 
    jump           #13968     
#13966: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           24         i64 
    jumpne         #13969     i64 
    push           2          i64 
    pop            mm_parse.readparams_types.parammode i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
#13969: 
    jump           #13970     
#13967: 
    jump           #13959     
    jump           #13970     
#13968: 
    setargs                   1 0
    push           "typeparams3" u64 
    callproc       &mm_support.serror 
#13970: 
    jump           #13957     
#13959: 
    push           mm_parse.readparams_types.stlist u64 
    setret                    u64 
    jump           #13971     
#13971: 
    retfn                     u64 
End


Proc mm_parse.readcondsuffix: u64
    param          mm_parse.readcondsuffix.p u64 
    local          mm_parse.readcondsuffix.q u64 
    procentry                 
    startmult                 
    push           &mm_decls.lx 
    pushptr                   u8 
    switch         #13973     105 109
    opnd           #13974     
#13973: 
    switchlabel    #13975     
    switchlabel    #13974     
    switchlabel    #13974     
    switchlabel    #13974     
    switchlabel    #13976     
    endswitch                 
#13976: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   3 0
    setargs                   2 0
    push           mm_parse.readcondsuffix.p u64 
    push           5          i64 
    callfn         &mm_lib.createunit1 u64 
    setargs                   1 0
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    callfn         &mm_parse.fixcond u64 
    push           100        i64 
    callfn         &mm_lib.createunit2 u64 
    resetmult                 
    jump           #13977     
#13975: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    setargs                   1 0
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    callfn         &mm_parse.fixcond u64 
    push           17         i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readcondsuffix.q u64 
    push           131        i64 
    push           mm_parse.readcondsuffix.q u64 
    push           60         
    popptroff                 u8 1 0
    setargs                   3 0
    setargs                   2 0
    push           mm_parse.readcondsuffix.p u64 
    push           5          i64 
    callfn         &mm_lib.createunit1 u64 
    push           mm_parse.readcondsuffix.q u64 
    push           100        i64 
    callfn         &mm_lib.createunit2 u64 
    resetmult                 
    jump           #13977     
#13974: 
    push           mm_parse.readcondsuffix.p u64 
    endmult                   
#13977: 
    setret                    u64 
    jump           #13978     
#13978: 
    retfn                     u64 
End


Proc mm_parse.readif: u64
    local          mm_parse.readif.pos1 i64 
    local          mm_parse.readif.kwd i64 
    local          mm_parse.readif.pos2 i64 
    local          mm_parse.readif.pthen u64 
    local          mm_parse.readif.pcond u64 
    local          mm_parse.readif.plist u64 
    local          mm_parse.readif.plistx u64 
    local          mm_parse.readif.pelse u64 
    local          mm_parse.readif.p u64 
    local          mm_parse.readif.pelsif u64 
    procentry                 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    pop            mm_parse.readif.pos1 i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    pop            mm_parse.readif.kwd i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    setargs                   1 0
    push           0          i64 
    callfn         &mm_parse.readsunit u64 
    callfn         &mm_parse.fixcond u64 
    pop            mm_parse.readif.pcond u64 
    setargs                   0 0
    callproc       &mm_parse.skipsemi 
    setargs                   1 0
    push           98         i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           0          i64 
    callfn         &mm_parse.readsunit u64 
    pop            mm_parse.readif.pthen u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           99         i64 
    jumpne         #13980     i64 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    pop            mm_parse.readif.pos2 i64 
    setargs                   3 0
    push           mm_parse.readif.pthen u64 
    push           mm_parse.readif.pcond u64 
    push           92         i64 
    callfn         &mm_lib.createunit2 u64 
    store          mm_parse.readif.plistx u64 
    pop            mm_parse.readif.plist u64 
    jump           #13981     
#13982: 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    pop            mm_parse.readif.pos2 i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    callfn         &mm_parse.fixcond u64 
    pop            mm_parse.readif.pcond u64 
    setargs                   1 0
    push           98         i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           0          i64 
    callfn         &mm_parse.readsunit u64 
    pop            mm_parse.readif.pthen u64 
    setargs                   3 0
    push           mm_parse.readif.pthen u64 
    push           mm_parse.readif.pcond u64 
    push           92         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readif.pelsif u64 
    push           mm_parse.readif.pos2 i64 
    push           mm_parse.readif.pelsif u64 
    push           4          
    popptroff                 u32 1 0
    setargs                   3 0
    push           mm_parse.readif.pelsif u64 
    push           &mm_parse.readif.plistx 
    push           &mm_parse.readif.plist 
    callproc       &mm_lib.addlistunit 
#13981: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           99         i64 
    jumpeq         #13982     i64 
#13983: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           100        i64 
    casejumpeq     #13984     i64 0
    push           101        i64 
    casejumpeq     #13985     i64 0
    push           102        i64 
    casejumpeq     #13985     i64 0
    popstack                  i64 
    jump           #13986     
#13984: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           0          i64 
    callfn         &mm_parse.readsunit u64 
    pop            mm_parse.readif.pelse u64 
    setargs                   4 0
    push           0          i64 
    push           0          i64 
    push           mm_parse.readif.kwd i64 
    push           104        i64 
    callproc       &mm_parse.checkend 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #13987     
#13985: 
    push           mm_parse.readif.kwd i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    setargs                   1 0
    setargs                   0 0
    callfn         &mm_parse.readswitchcase u64 
    callfn         &mm_parse.makeblock u64 
    pop            mm_parse.readif.pelse u64 
    jump           #13987     
#13986: 
    push           0          u64 
    pop            mm_parse.readif.pelse u64 
    setargs                   4 0
    push           0          i64 
    push           0          i64 
    push           mm_parse.readif.kwd i64 
    push           104        i64 
    callproc       &mm_parse.checkend 
    setargs                   0 0
    callproc       &mm_lex.lex 
#13987: 
    setargs                   3 0
    push           mm_parse.readif.pelse u64 
    push           mm_parse.readif.plist u64 
    push           101        i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readif.p u64 
    push           mm_parse.readif.pos1 i64 
    push           mm_parse.readif.p u64 
    push           4          
    popptroff                 u32 1 0
    push           mm_parse.readif.p u64 
    setret                    u64 
    jump           #13988     
#13980: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           100        i64 
    casejumpeq     #13989     i64 0
    push           101        i64 
    casejumpeq     #13990     i64 0
    push           102        i64 
    casejumpeq     #13990     i64 0
    popstack                  i64 
    jump           #13991     
#13989: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           0          i64 
    callfn         &mm_parse.readsunit u64 
    pop            mm_parse.readif.pelse u64 
    setargs                   4 0
    push           0          i64 
    push           0          i64 
    push           mm_parse.readif.kwd i64 
    push           104        i64 
    callproc       &mm_parse.checkend 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #13992     
#13990: 
    push           mm_parse.readif.kwd i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    setargs                   1 0
    setargs                   0 0
    callfn         &mm_parse.readswitchcase u64 
    callfn         &mm_parse.makeblock u64 
    pop            mm_parse.readif.pelse u64 
    jump           #13992     
#13991: 
    push           0          u64 
    pop            mm_parse.readif.pelse u64 
    setargs                   4 0
    push           0          i64 
    push           0          i64 
    push           mm_parse.readif.kwd i64 
    push           104        i64 
    callproc       &mm_parse.checkend 
    setargs                   0 0
    callproc       &mm_lex.lex 
#13992: 
    setargs                   4 0
    push           mm_parse.readif.pelse u64 
    push           mm_parse.readif.pthen u64 
    push           mm_parse.readif.pcond u64 
    push           100        i64 
    callfn         &mm_lib.createunit3 u64 
    pop            mm_parse.readif.p u64 
    push           mm_parse.readif.pos1 i64 
    push           mm_parse.readif.p u64 
    push           4          
    popptroff                 u32 1 0
    push           mm_parse.readif.p u64 
    setret                    u64 
    jump           #13988     
#13988: 
    retfn                     u64 
End


Proc mm_parse.readgoto: u64
    param          mm_parse.readgoto.gototag i64 
    local          mm_parse.readgoto.d u64 
    local          mm_parse.readgoto.p u64 
    procentry                 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #13994     i64 
    setargs                   1 0
    push           111        i64 
    callproc       &mm_parse.lexchecksymbol 
#13994: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           79         i64 
    jumpne         #13995     i64 
    push           mm_lex.nexttoken u64 
    pushptr                   u8 
    push           18         i64 
    jumpeq         #13995     i64 
    push           mm_lex.nexttoken u64 
    pushptr                   u8 
    push           14         i64 
    jumpeq         #13995     i64 
    push           mm_lex.nexttoken u64 
    pushptr                   u8 
    push           2          i64 
    jumpeq         #13995     i64 
    setargs                   1 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    callfn         &mm_lib.createname u64 
    pop            mm_parse.readgoto.p u64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #13996     
#13995: 
    setargs                   1 0
    push           "GOTO LABEL EXPR" u64 
    callproc       &mm_support.serror 
#13996: 
    setargs                   1 0
    setargs                   2 0
    push           mm_parse.readgoto.p u64 
    push           mm_parse.readgoto.gototag i64 
    callfn         &mm_lib.createunit1 u64 
    callfn         &mm_parse.readcondsuffix u64 
    setret                    u64 
    jump           #13997     
#13997: 
    retfn                     u64 
End


Proc mm_parse.readunless: u64
    local          mm_parse.readunless.pos i64 
    local          mm_parse.readunless.pcond u64 
    local          mm_parse.readunless.pthen u64 
    local          mm_parse.readunless.pelse u64 
    local          mm_parse.readunless.p u64 
    local          mm_parse.readunless.q u64 
    procentry                 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    pop            mm_parse.readunless.pos i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    setargs                   1 0
    push           0          i64 
    callfn         &mm_parse.readsunit u64 
    callfn         &mm_parse.fixcond u64 
    pop            mm_parse.readunless.pcond u64 
    setargs                   1 0
    push           98         i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           0          i64 
    callfn         &mm_parse.readsunit u64 
    pop            mm_parse.readunless.pthen u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           100        i64 
    jumpne         #13999     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           0          i64 
    callfn         &mm_parse.readsunit u64 
    pop            mm_parse.readunless.pelse u64 
    jump           #14000     
#13999: 
    push           0          u64 
    pop            mm_parse.readunless.pelse u64 
#14000: 
    setargs                   4 0
    push           0          i64 
    push           0          i64 
    push           105        i64 
    push           104        i64 
    callproc       &mm_parse.checkend 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   4 0
    push           mm_parse.readunless.pelse u64 
    push           mm_parse.readunless.pthen u64 
    setargs                   2 0
    push           mm_parse.readunless.pcond u64 
    push           17         i64 
    callfn         &mm_lib.createunit1 u64 
    store          mm_parse.readunless.q u64 
    push           100        i64 
    callfn         &mm_lib.createunit3 u64 
    pop            mm_parse.readunless.p u64 
    push           131        i64 
    push           mm_parse.readunless.q u64 
    push           60         
    popptroff                 u8 1 0
    push           mm_parse.readunless.pos i64 
    push           mm_parse.readunless.p u64 
    push           4          
    popptroff                 u32 1 0
    push           mm_parse.readunless.p u64 
    setret                    u64 
    jump           #14001     
#14001: 
    retfn                     u64 
End


Proc mm_parse.readswitchcase: u64
    local          mm_parse.readswitchcase.pos1 i64 
    local          mm_parse.readswitchcase.kwd i64 
    local          mm_parse.readswitchcase.opc i64 
    local          mm_parse.readswitchcase.pos2 i64 
    local          mm_parse.readswitchcase.rangeused i64 
    local          mm_parse.readswitchcase.nwhen i64 
    local          mm_parse.readswitchcase.pexpr u64 
    local          mm_parse.readswitchcase.pwhenlist u64 
    local          mm_parse.readswitchcase.pwhenlistx u64 
    local          mm_parse.readswitchcase.pwhen u64 
    local          mm_parse.readswitchcase.pwhenx u64 
    local          mm_parse.readswitchcase.pelse u64 
    local          mm_parse.readswitchcase.p u64 
    local          mm_parse.readswitchcase.pthen u64 
    local          mm_parse.readswitchcase.pwhenthen u64 
    local          mm_parse.readswitchcase.q u64 
    procentry                 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    pop            mm_parse.readswitchcase.pos1 i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    pop            mm_parse.readswitchcase.kwd i64 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    pop            mm_parse.readswitchcase.opc i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callproc       &mm_parse.skipsemi 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           109        i64 
    jumpne         #14003     i64 
    push           mm_parse.readswitchcase.kwd i64 
    push           122        i64 
    jumpne         #14004     i64 
    setargs                   1 0
    push           "switch expr missing" u64 
    callproc       &mm_support.serror 
#14004: 
    push           0          u64 
    pop            mm_parse.readswitchcase.pexpr u64 
    jump           #14005     
#14003: 
    setargs                   1 0
    push           0          i64 
    callfn         &mm_parse.readsunit u64 
    pop            mm_parse.readswitchcase.pexpr u64 
#14005: 
    push           0          u64 
    store          mm_parse.readswitchcase.pwhenlistx u64 
    pop            mm_parse.readswitchcase.pwhenlist u64 
    push           0          i64 
    pop            mm_parse.readswitchcase.rangeused i64 
    push           0          i64 
    pop            mm_parse.readswitchcase.nwhen i64 
    setargs                   0 0
    callproc       &mm_parse.skipsemi 
    jump           #14006     
#14007: 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    pop            mm_parse.readswitchcase.pos2 i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           0          u64 
    store          mm_parse.readswitchcase.pwhenx u64 
    pop            mm_parse.readswitchcase.pwhen u64 
#14008: 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readswitchcase.p u64 
    push           &mm_parse.readswitchcase.nwhen 
    incr                      i64 1
    push           mm_parse.readswitchcase.pos2 i64 
    push           mm_parse.readswitchcase.p u64 
    push           4          
    popptroff                 u32 1 0
    push           mm_parse.readswitchcase.p u64 
    pushptr                   u8 
    push           20         i64 
    jumpne         #14009     i64 
    push           1          i64 
    pop            mm_parse.readswitchcase.rangeused i64 
#14009: 
    setargs                   3 0
    push           mm_parse.readswitchcase.p u64 
    push           &mm_parse.readswitchcase.pwhenx 
    push           &mm_parse.readswitchcase.pwhen 
    callproc       &mm_lib.addlistunit 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpeq         #14010     i64 
    jump           #14011     
#14010: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #14008     
#14011: 
    setargs                   1 0
    push           98         i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           0          i64 
    callfn         &mm_parse.readsunit u64 
    pop            mm_parse.readswitchcase.pthen u64 
    setargs                   3 0
    push           mm_parse.readswitchcase.pthen u64 
    push           mm_parse.readswitchcase.pwhen u64 
    push           91         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readswitchcase.pwhenthen u64 
    push           mm_parse.readswitchcase.pos2 i64 
    push           mm_parse.readswitchcase.pwhenthen u64 
    push           4          
    popptroff                 u32 1 0
    setargs                   3 0
    push           mm_parse.readswitchcase.pwhenthen u64 
    push           &mm_parse.readswitchcase.pwhenlistx 
    push           &mm_parse.readswitchcase.pwhenlist 
    callproc       &mm_lib.addlistunit 
#14006: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           109        i64 
    jumpeq         #14007     i64 
#14012: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           100        i64 
    casejumpeq     #14013     i64 0
    push           99         i64 
    casejumpeq     #14014     i64 0
    push           101        i64 
    casejumpeq     #14015     i64 0
    push           102        i64 
    casejumpeq     #14015     i64 0
    popstack                  i64 
    jump           #14016     
#14013: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           0          i64 
    callfn         &mm_parse.readsunit u64 
    pop            mm_parse.readswitchcase.pelse u64 
    setargs                   4 0
    push           0          i64 
    push           0          i64 
    push           mm_parse.readswitchcase.kwd i64 
    push           104        i64 
    callproc       &mm_parse.checkend 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #14017     
#14014: 
    push           mm_parse.readswitchcase.kwd i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    setargs                   1 0
    setargs                   0 0
    callfn         &mm_parse.readif u64 
    callfn         &mm_parse.makeblock u64 
    pop            mm_parse.readswitchcase.pelse u64 
    jump           #14017     
#14015: 
    push           mm_parse.readswitchcase.kwd i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    setargs                   1 0
    setargs                   0 0
    callfn         &mm_parse.readswitchcase u64 
    callfn         &mm_parse.makeblock u64 
    pop            mm_parse.readswitchcase.pelse u64 
    jump           #14017     
#14016: 
    push           0          u64 
    pop            mm_parse.readswitchcase.pelse u64 
    setargs                   4 0
    push           0          i64 
    push           0          i64 
    push           mm_parse.readswitchcase.kwd i64 
    push           104        i64 
    callproc       &mm_parse.checkend 
    setargs                   0 0
    callproc       &mm_lex.lex 
#14017: 
    setargs                   4 0
    push           mm_parse.readswitchcase.pelse u64 
    push           mm_parse.readswitchcase.pwhenlist u64 
    push           mm_parse.readswitchcase.pexpr u64 
    push           mm_parse.readswitchcase.opc i64 
    callfn         &mm_lib.createunit3 u64 
    pop            mm_parse.readswitchcase.p u64 
    push           mm_parse.readswitchcase.pos1 i64 
    push           mm_parse.readswitchcase.p u64 
    push           4          
    popptroff                 u32 1 0
    push           mm_parse.readswitchcase.p u64 
    setret                    u64 
    jump           #14018     
#14018: 
    retfn                     u64 
End


Proc mm_parse.readstop: u64
    local          mm_parse.readstop.p u64 
    local          mm_parse.readstop.i i64 
    procentry                 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_tables.exprstarter 
    push           &mm_decls.lx 
    pushptr                   u8 
    pushptroff                u8 1 -1
    jumpfalse      #14020     i64 
    setargs                   2 0
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    push           134        i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readstop.p u64 
    jump           #14021     
#14020: 
    setargs                   1 0
    push           134        i64 
    callfn         &mm_lib.createunit0 u64 
    pop            mm_parse.readstop.p u64 
#14021: 
    setargs                   1 0
    push           mm_parse.readstop.p u64 
    callfn         &mm_parse.readcondsuffix u64 
    setret                    u64 
    jump           #14022     
#14022: 
    retfn                     u64 
End


Proc mm_parse.readreturn: u64
    local          mm_parse.readreturn.p u64 
    local          mm_parse.readreturn.q u64 
    local          mm_parse.readreturn.r u64 
    procentry                 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_tables.exprstarter 
    push           &mm_decls.lx 
    pushptr                   u8 
    pushptroff                u8 1 -1
    jumpfalse      #14024     i64 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readreturn.q u64 
    setargs                   2 0
    push           mm_parse.readreturn.q u64 
    push           97         i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readreturn.p u64 
    push           1          i64 
    push           mm_parse.readreturn.p u64 
    push           40         
    popptroff                 u32 1 0
    jump           #14025     
#14024: 
    setargs                   1 0
    push           97         i64 
    callfn         &mm_lib.createunit0 u64 
    pop            mm_parse.readreturn.p u64 
    push           0          i64 
    push           mm_parse.readreturn.p u64 
    push           40         
    popptroff                 u32 1 0
#14025: 
    setargs                   1 0
    push           mm_parse.readreturn.p u64 
    callfn         &mm_parse.readcondsuffix u64 
    setret                    u64 
    jump           #14026     
#14026: 
    retfn                     u64 
End


Proc mm_parse.readdo: u64
    local          mm_parse.readdo.p u64 
    local          mm_parse.readdo.pos i64 
    procentry                 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    pop            mm_parse.readdo.pos i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           0          i64 
    callfn         &mm_parse.readsunit u64 
    pop            mm_parse.readdo.p u64 
    setargs                   4 0
    push           0          i64 
    push           0          i64 
    push           113        i64 
    push           104        i64 
    callproc       &mm_parse.checkend 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    push           mm_parse.readdo.p u64 
    push           114        i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readdo.p u64 
    push           mm_parse.readdo.pos i64 
    push           mm_parse.readdo.p u64 
    push           4          
    popptroff                 u32 1 0
    push           mm_parse.readdo.p u64 
    setret                    u64 
    jump           #14028     
#14028: 
    retfn                     u64 
End


Proc mm_parse.readto: u64
    local          mm_parse.readto.pos i64 
    local          mm_parse.readto.id i64 
    local          mm_parse.readto.p u64 
    local          mm_parse.readto.pcount u64 
    local          mm_parse.readto.pbody u64 
    procentry                 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    pop            mm_parse.readto.pos i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readto.pcount u64 
    setargs                   1 0
    push           113        i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           0          i64 
    callfn         &mm_parse.readsunit u64 
    pop            mm_parse.readto.pbody u64 
    setargs                   4 0
    push           0          i64 
    push           113        i64 
    push           111        i64 
    push           104        i64 
    callproc       &mm_parse.checkend 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           12         i64 
    pop            mm_parse.readto.id i64 
    push           mm_decls.currproc u64 
    push           78         
    pushptroff                u8 1 0
    push           5          i64 
    jumpeq         #14030     i64 
    push           11         i64 
    pop            mm_parse.readto.id i64 
#14030: 
    setargs                   4 0
    setargs                   1 0
    setargs                   2 0
    push           mm_parse.readto.id i64 
    push           mm_decls.currproc u64 
    callfn         &mm_lib.getavname u64 
    callfn         &mm_lib.createname u64 
    push           mm_parse.readto.pbody u64 
    push           mm_parse.readto.pcount u64 
    push           99         i64 
    callfn         &mm_lib.createunit3 u64 
    pop            mm_parse.readto.p u64 
    push           mm_parse.readto.pos i64 
    push           mm_parse.readto.p u64 
    push           4          
    popptroff                 u32 1 0
    push           mm_parse.readto.p u64 
    setret                    u64 
    jump           #14031     
#14031: 
    retfn                     u64 
End


Proc mm_parse.readwhile: u64
    local          mm_parse.readwhile.pos i64 
    local          mm_parse.readwhile.pcond u64 
    local          mm_parse.readwhile.pbody u64 
    local          mm_parse.readwhile.pincr u64 
    local          mm_parse.readwhile.p u64 
    procentry                 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    pop            mm_parse.readwhile.pos i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    setargs                   1 0
    push           1          i64 
    callfn         &mm_parse.readsunit u64 
    callfn         &mm_parse.fixcond u64 
    pop            mm_parse.readwhile.pcond u64 
    push           0          u64 
    pop            mm_parse.readwhile.pincr u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpne         #14033     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           1          i64 
    callfn         &mm_parse.readsunit u64 
    pop            mm_parse.readwhile.pincr u64 
#14033: 
    setargs                   1 0
    push           113        i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           0          i64 
    callfn         &mm_parse.readsunit u64 
    pop            mm_parse.readwhile.pbody u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           120        i64 
    jumpne         #14034     i64 
    push           mm_parse.readwhile.pincr u64 
    jumpfalse      #14035     u64 
    setargs                   1 0
    push           "Double incr" u64 
    callproc       &mm_support.serror 
#14035: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           0          i64 
    callfn         &mm_parse.readsunit u64 
    pop            mm_parse.readwhile.pincr u64 
#14034: 
    setargs                   4 0
    push           0          i64 
    push           113        i64 
    push           114        i64 
    push           104        i64 
    callproc       &mm_parse.checkend 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   4 0
    push           mm_parse.readwhile.pincr u64 
    push           mm_parse.readwhile.pbody u64 
    push           mm_parse.readwhile.pcond u64 
    push           106        i64 
    callfn         &mm_lib.createunit3 u64 
    pop            mm_parse.readwhile.p u64 
    push           mm_parse.readwhile.pos i64 
    push           mm_parse.readwhile.p u64 
    push           4          
    popptroff                 u32 1 0
    push           mm_parse.readwhile.p u64 
    setret                    u64 
    jump           #14036     
#14036: 
    retfn                     u64 
End


Proc mm_parse.readrepeat: u64
    local          mm_parse.readrepeat.pos i64 
    local          mm_parse.readrepeat.pbody u64 
    local          mm_parse.readrepeat.pcond u64 
    local          mm_parse.readrepeat.p u64 
    procentry                 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    pop            mm_parse.readrepeat.pos i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           0          i64 
    callfn         &mm_parse.readsunit u64 
    pop            mm_parse.readrepeat.pbody u64 
    setargs                   1 0
    push           116        i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    callfn         &mm_parse.fixcond u64 
    pop            mm_parse.readrepeat.pcond u64 
    setargs                   3 0
    push           mm_parse.readrepeat.pcond u64 
    push           mm_parse.readrepeat.pbody u64 
    push           107        i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readrepeat.p u64 
    push           mm_parse.readrepeat.pos i64 
    push           mm_parse.readrepeat.p u64 
    push           4          
    popptroff                 u32 1 0
    push           mm_parse.readrepeat.p u64 
    setret                    u64 
    jump           #14038     
#14038: 
    retfn                     u64 
End


Proc mm_parse.readloopcontrol: u64
    local          mm_parse.readloopcontrol.opc i64 
    local          mm_parse.readloopcontrol.p u64 
    procentry                 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    pop            mm_parse.readloopcontrol.opc i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           79         i64 
    jumpne         #14040     i64 
    setargs                   2 0
    push           "all"      u64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    pushptr                   u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #14040     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    setargs                   2 0
    push           4          i64 
    push           0          u64 
    callfn         &mm_lib.createconstunit u64 
    push           mm_parse.readloopcontrol.opc i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readloopcontrol.p u64 
    jump           #14041     
#14040: 
    push           &mm_tables.exprstarter 
    push           &mm_decls.lx 
    pushptr                   u8 
    pushptroff                u8 1 -1
    jumpfalse      #14042     i64 
    setargs                   2 0
    setargs                   1 0
    push           1          i64 
    callfn         &mm_parse.readconstexpr u64 
    push           mm_parse.readloopcontrol.opc i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readloopcontrol.p u64 
    jump           #14041     
#14042: 
    setargs                   2 0
    setargs                   2 0
    push           4          i64 
    push           1          u64 
    callfn         &mm_lib.createconstunit u64 
    push           mm_parse.readloopcontrol.opc i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readloopcontrol.p u64 
#14041: 
    setargs                   1 0
    push           mm_parse.readloopcontrol.p u64 
    callfn         &mm_parse.readcondsuffix u64 
    setret                    u64 
    jump           #14043     
#14043: 
    retfn                     u64 
End


Proc mm_parse.readprint: u64
    local          mm_parse.readprint.oldinreadprint i64 
    local          mm_parse.readprint.opc i64 
    local          mm_parse.readprint.isfprint i64 
    local          mm_parse.readprint.fshowname i64 
    local          mm_parse.readprint.length i64 
    local          mm_parse.readprint.pformat u64 
    local          mm_parse.readprint.pdev u64 
    local          mm_parse.readprint.printlist u64 
    local          mm_parse.readprint.printlistx u64 
    local          mm_parse.readprint.p u64 
    local          mm_parse.readprint.q u64 
    local          mm_parse.readprint.expr u64 
    local          mm_parse.readprint.s u64 
    procentry                 
    push           mm_parse.inreadprint i64 
    pop            mm_parse.readprint.oldinreadprint i64 
    push           1          i64 
    pop            mm_parse.inreadprint i64 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    pop            mm_parse.readprint.opc i64 
    push           mm_parse.readprint.opc i64 
    push           124        i64 
    casejumpeq     #14045     i64 0
    push           125        i64 
    casejumpeq     #14045     i64 0
    push           126        i64 
    casejumpeq     #14045     i64 0
    push           127        i64 
    casejumpeq     #14045     i64 0
    popstack                  i64 
    jump           #14046     
#14045: 
    push           1          i64 
    pop            mm_parse.readprint.isfprint i64 
    jump           #14047     
#14046: 
    push           0          i64 
    pop            mm_parse.readprint.isfprint i64 
#14047: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           0          u64 
    store          mm_parse.readprint.printlistx u64 
    pop            mm_parse.readprint.printlist u64 
    push           0          u64 
    store          mm_parse.readprint.pdev u64 
    pop            mm_parse.readprint.pformat u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           21         i64 
    jumpne         #14048     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readprint.pdev u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpne         #14049     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #14050     
#14049: 
    jump           #14051     
#14050: 
#14048: 
    push           mm_parse.readprint.isfprint i64 
    jumpfalse      #14052     i64 
    push           &mm_tables.exprstarter 
    push           &mm_decls.lx 
    pushptr                   u8 
    pushptroff                u8 1 -1
    jumptrue       #14053     i64 
    push           mm_parse.readprint.opc i64 
    push           127        i64 
    jumpne         #14053     i64 
    jump           #14051     
#14053: 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readprint.pformat u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpne         #14054     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #14055     
#14054: 
    jump           #14051     
#14055: 
#14052: 
    push           &mm_tables.exprstarter 
    push           &mm_decls.lx 
    pushptr                   u8 
    pushptroff                u8 1 -1
    jumptrue       #14056     i64 
    jump           #14051     
#14056: 
#14057: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    casejumpeq     #14058     i64 0
    push           168        i64 
    casejumpeq     #14059     i64 0
    popstack                  i64 
    jump           #14060     
#14058: 
    setargs                   3 0
    setargs                   1 0
    push           94         i64 
    callfn         &mm_lib.createunit0 u64 
    push           &mm_parse.readprint.printlistx 
    push           &mm_parse.readprint.printlist 
    callproc       &mm_lib.addlistunit 
    jump           #14061     
#14059: 
    setargs                   3 0
    setargs                   1 0
    push           95         i64 
    callfn         &mm_lib.createunit0 u64 
    push           &mm_parse.readprint.printlistx 
    push           &mm_parse.readprint.printlist 
    callproc       &mm_lib.addlistunit 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #14061     
#14060: 
    push           0          i64 
    pop            mm_parse.readprint.fshowname i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           46         i64 
    jumpne         #14062     i64 
    push           1          i64 
    pop            mm_parse.readprint.fshowname i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
#14062: 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readprint.p u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           7          i64 
    jumpne         #14063     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   3 0
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    push           mm_parse.readprint.p u64 
    push           93         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readprint.p u64 
#14063: 
    push           mm_parse.readprint.fshowname i64 
    jumpfalse      #14064     i64 
    setargs                   1 0
    push           mm_parse.readprint.p u64 
    callfn         &mm_lib.strexpr u64 
    pop            mm_parse.readprint.expr u64 
    setargs                   3 0
    push           -1         i64 
    push           "="        u64 
    push           mm_parse.readprint.expr u64 
    callproc       &mlibp.strbuffer_add 
    push           mm_parse.readprint.expr u64 
    pushptr                   u64 
    pop            mm_parse.readprint.s u64 
    setargs                   2 0
    push           mm_parse.readprint.expr u64 
    push           8          
    pushptroff                i32 1 0
    push           mm_parse.readprint.expr u64 
    pushptr                   u64 
    callproc       &mlibp.iconvucn 
    setargs                   3 0
    setargs                   2 0
    push           mm_parse.readprint.expr u64 
    push           8          
    pushptroff                i32 1 0
    push           mm_parse.readprint.s u64 
    callfn         &mm_lib.createstringconstunit u64 
    store          mm_parse.readprint.q u64 
    push           &mm_parse.readprint.printlistx 
    push           &mm_parse.readprint.printlist 
    callproc       &mm_lib.addlistunit 
#14064: 
    setargs                   3 0
    push           mm_parse.readprint.p u64 
    push           &mm_parse.readprint.printlistx 
    push           &mm_parse.readprint.printlist 
    callproc       &mm_lib.addlistunit 
#14061: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpeq         #14065     i64 
    jump           #14066     
#14065: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #14057     
#14066: 
!finish::
#14051: 
    push           mm_parse.readprint.oldinreadprint i64 
    pop            mm_parse.inreadprint i64 
    push           mm_parse.readprint.opc i64 
    push           122        i64 
    jumpne         #14067     i64 
    push           mm_parse.readprint.printlist u64 
    push           0          u64 
    jumpne         #14067     u64 
    setargs                   1 0
    push           "No print items" u64 
    callproc       &mm_support.serror 
#14067: 
    push           mm_parse.readprint.opc i64 
    push           124        i64 
    jumpne         #14068     i64 
    push           mm_parse.readprint.printlist u64 
    push           0          u64 
    jumpne         #14068     u64 
    push           mm_parse.readprint.pformat u64 
    push           0          u64 
    jumpne         #14068     u64 
    setargs                   1 0
    push           "No print items" u64 
    callproc       &mm_support.serror 
#14068: 
    push           mm_parse.readprint.opc i64 
    push           126        i64 
    jumpne         #14069     i64 
    push           mm_parse.readprint.printlist u64 
    push           0          u64 
    jumpne         #14069     u64 
    push           mm_parse.readprint.pformat u64 
    push           0          u64 
    jumpne         #14069     u64 
    setargs                   1 0
    push           "No cprint items" u64 
    callproc       &mm_support.serror 
#14069: 
    startmult                 
    push           mm_parse.readprint.isfprint i64 
    jumpfalse      #14070     i64 
    push           mm_parse.readprint.pformat u64 
    push           0          u64 
    jumpne         #14071     u64 
    push           mm_parse.readprint.opc i64 
    push           127        i64 
    jumpeq         #14071     i64 
    setargs                   1 0
    push           "No fmt str" u64 
    callproc       &mm_support.serror 
#14071: 
    setargs                   4 0
    push           mm_parse.readprint.printlist u64 
    push           mm_parse.readprint.pformat u64 
    push           mm_parse.readprint.pdev u64 
    push           mm_parse.readprint.opc i64 
    callfn         &mm_lib.createunit3 u64 
    resetmult                 
    jump           #14072     
#14070: 
    setargs                   3 0
    push           mm_parse.readprint.printlist u64 
    push           mm_parse.readprint.pdev u64 
    push           mm_parse.readprint.opc i64 
    callfn         &mm_lib.createunit2 u64 
    endmult                   
#14072: 
    setret                    u64 
    jump           #14073     
#14073: 
    retfn                     u64 
End


Proc mm_parse.readread: u64
    local          mm_parse.readread.oldinreadprint i64 
    local          mm_parse.readread.opc i64 
    local          mm_parse.readread.pformat u64 
    local          mm_parse.readread.pdev u64 
    local          mm_parse.readread.readlist u64 
    local          mm_parse.readread.readlistx u64 
    local          mm_parse.readread.p u64 
    local          mm_parse.readread.pread u64 
    procentry                 
    push           mm_parse.inreadprint i64 
    pop            mm_parse.readread.oldinreadprint i64 
    push           1          i64 
    pop            mm_parse.inreadprint i64 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    pop            mm_parse.readread.opc i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           0          u64 
    store          mm_parse.readread.readlistx u64 
    pop            mm_parse.readread.readlist u64 
    push           0          u64 
    store          mm_parse.readread.pdev u64 
    pop            mm_parse.readread.pformat u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           21         i64 
    jumpne         #14075     i64 
    push           mm_parse.readread.opc i64 
    push           130        i64 
    jumpne         #14076     i64 
    setargs                   1 0
    push           "@ on read" u64 
    callproc       &mm_support.serror 
#14076: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readread.pdev u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpne         #14077     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
#14077: 
#14075: 
    push           mm_parse.readread.opc i64 
    push           131        i64 
    jumpne         #14078     i64 
    setargs                   3 0
    setargs                   2 0
    push           mm_parse.readread.pdev u64 
    push           131        i64 
    callfn         &mm_lib.createunit1 u64 
    push           &mm_parse.readread.readlistx 
    push           &mm_parse.readread.readlist 
    callproc       &mm_lib.addlistunit 
#14078: 
    push           &mm_tables.exprstarter 
    push           &mm_decls.lx 
    pushptr                   u8 
    pushptroff                u8 1 -1
    jumptrue       #14079     i64 
    jump           #14080     
#14079: 
#14081: 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readread.p u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           7          i64 
    jumpne         #14082     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readread.pformat u64 
    jump           #14083     
#14082: 
    push           0          u64 
    pop            mm_parse.readread.pformat u64 
#14083: 
    setargs                   2 0
    push           mm_parse.readread.pformat u64 
    push           130        i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readread.pread u64 
    setargs                   3 0
    push           mm_parse.readread.pread u64 
    push           mm_parse.readread.p u64 
    push           29         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readread.p u64 
    setargs                   3 0
    push           mm_parse.readread.p u64 
    push           &mm_parse.readread.readlistx 
    push           &mm_parse.readread.readlist 
    callproc       &mm_lib.addlistunit 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpeq         #14084     i64 
    jump           #14085     
#14084: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #14081     
#14085: 
!finish::
#14080: 
    push           mm_parse.readread.oldinreadprint i64 
    pop            mm_parse.inreadprint i64 
    push           mm_parse.readread.opc i64 
    push           130        i64 
    jumpne         #14086     i64 
    push           mm_parse.readread.readlist u64 
    push           0          u64 
    jumpne         #14086     u64 
    setargs                   1 0
    push           "No read items" u64 
    callproc       &mm_support.serror 
#14086: 
    setargs                   1 0
    push           mm_parse.readread.readlist u64 
    callfn         &mm_parse.makestmtblock u64 
    setret                    u64 
    jump           #14087     
#14087: 
    retfn                     u64 
End


Proc mm_parse.readtry: u64
    local          mm_parse.readtry.ptry u64 
    local          mm_parse.readtry.pexceptlist u64 
    local          mm_parse.readtry.pexceptlistx u64 
    local          mm_parse.readtry.px u64 
    local          mm_parse.readtry.q u64 
    local          mm_parse.readtry.exlist u64 
    local          mm_parse.readtry.exlistx u64 
    procentry                 
    push           &mm_parse.try_level 
    incr                      i64 1
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           0          i64 
    callfn         &mm_parse.readsunit u64 
    pop            mm_parse.readtry.ptry u64 
    push           0          u64 
    store          mm_parse.readtry.pexceptlistx u64 
    pop            mm_parse.readtry.pexceptlist u64 
    jump           #14089     
#14090: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           0          u64 
    store          mm_parse.readtry.exlistx u64 
    pop            mm_parse.readtry.exlist u64 
#14091: 
    setargs                   3 0
    setargs                   1 0
    push           1          i64 
    callfn         &mm_parse.readconstexpr u64 
    push           &mm_parse.readtry.exlistx 
    push           &mm_parse.readtry.exlist 
    callproc       &mm_lib.addlistunit 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpeq         #14092     i64 
    jump           #14093     
#14092: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #14091     
#14093: 
    setargs                   1 0
    push           98         i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           0          i64 
    callfn         &mm_parse.readsunit u64 
    pop            mm_parse.readtry.px u64 
    setargs                   3 0
    setargs                   3 0
    push           mm_parse.readtry.px u64 
    push           mm_parse.readtry.exlist u64 
    push           136        i64 
    callfn         &mm_lib.createunit2 u64 
    push           &mm_parse.readtry.pexceptlistx 
    push           &mm_parse.readtry.pexceptlist 
    callproc       &mm_lib.addlistunit 
#14089: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           161        i64 
    jumpeq         #14090     i64 
#14094: 
    setargs                   4 0
    push           0          i64 
    push           0          i64 
    push           160        i64 
    push           104        i64 
    callproc       &mm_parse.checkend 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_parse.try_level 
    decr                      i64 1
    setargs                   3 0
    push           mm_parse.readtry.pexceptlist u64 
    push           mm_parse.readtry.ptry u64 
    push           135        i64 
    callfn         &mm_lib.createunit2 u64 
    setret                    u64 
    jump           #14095     
#14095: 
    retfn                     u64 
End


Proc mm_parse.readraise: u64
    local          mm_parse.readraise.p u64 
    procentry                 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readraise.p u64 
    setargs                   2 0
    push           mm_parse.readraise.p u64 
    push           138        i64 
    callfn         &mm_lib.createunit1 u64 
    setret                    u64 
    jump           #14097     
#14097: 
    retfn                     u64 
End


Proc mm_parse.readfor: u64
    local          mm_parse.readfor.pos i64 
    local          mm_parse.readfor.opc i64 
    local          mm_parse.readfor.kwd i64 
    local          mm_parse.readfor.pindex u64 
    local          mm_parse.readfor.plocal u64 
    local          mm_parse.readfor.pfrom u64 
    local          mm_parse.readfor.pto u64 
    local          mm_parse.readfor.pstep u64 
    local          mm_parse.readfor.ptoinit u64 
    local          mm_parse.readfor.plist u64 
    local          mm_parse.readfor.passign u64 
    local          mm_parse.readfor.pcond u64 
    local          mm_parse.readfor.pbody u64 
    local          mm_parse.readfor.pelse u64 
    local          mm_parse.readfor.p u64 
    local          mm_parse.readfor.i i64 
    procentry                 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    pop            mm_parse.readfor.pos i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           0          u64 
    pop            mm_parse.readfor.plocal u64 
    push           0          u64 
    pop            mm_parse.readfor.ptoinit u64 
    setargs                   0 0
    callfn         &mm_parse.readname u64 
    pop            mm_parse.readfor.pindex u64 
    push           mm_parse.nforloops i64 
    push           10         i64 
    jumplt         #14099     i64 
    setargs                   1 0
    push           "Too many for-loops" u64 
    callproc       &mm_support.serror 
#14099: 
#14100: 
    push           1          i64 
    pop            mm_parse.readfor.i i64 
    push           mm_parse.nforloops i64 
    push           1          i64 
    jumplt         #14101     i64 
#14102: 
    push           &mm_parse.forindexvars 
    push           mm_parse.readfor.i i64 
    pushptroff                u64 8 -8
    push           mm_parse.readfor.pindex u64 
    push           16         
    pushptroff                u64 1 0
    jumpne         #14103     u64 
    setargs                   1 0
    push           "Re-using nested loop index" u64 
    callproc       &mm_support.serror 
#14103: 
#14104: 
    forup          #14102     i64 1
    opnd           mm_parse.readfor.i 
    opnd           mm_parse.nforloops 
#14101: 
    push           mm_parse.readfor.pindex u64 
    push           16         
    pushptroff                u64 1 0
    push           &mm_parse.forindexvars 
    push           &mm_parse.nforloops 
    incrload                  i64 1
    popptroff                 u64 8 -8
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpne         #14105     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.readname u64 
    pop            mm_parse.readfor.plocal u64 
#14105: 
    push           102        i64 
    pop            mm_parse.readfor.opc i64 
    push           0          u64 
    pop            mm_parse.readfor.pstep u64 
    push           0          u64 
    pop            mm_parse.readfor.pcond u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           50         i64 
    setjumpeq      #14106     i64 
    push           52         i64 
    setjumpne      #14107     i64 
#14106: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           41         i64 
    jumpne         #14108     i64 
    push           103        i64 
    pop            mm_parse.readfor.opc i64 
#14108: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readfor.plist u64 
    push           mm_parse.readfor.plist u64 
    pushptr                   u8 
    push           37         i64 
    jumpne         #14109     i64 
    push           mm_parse.readfor.plist u64 
    push           60         
    pushptroff                u8 1 0
    push           203        i64 
    jumpne         #14109     i64 
    setargs                   1 0
    push           mm_parse.readfor.plist u64 
    push           16         
    pushptroff                u64 1 0
    callfn         &mm_lib.getrangelwbunit u64 
    pop            mm_parse.readfor.pfrom u64 
    setargs                   1 0
    push           mm_parse.readfor.plist u64 
    push           16         
    pushptroff                u64 1 0
    callfn         &mm_lib.getrangeupbunit u64 
    pop            mm_parse.readfor.pto u64 
    jump           #14110     
#14109: 
    push           mm_parse.readfor.plist u64 
    pushptr                   u8 
    push           20         i64 
    jumpne         #14111     i64 
    push           mm_parse.readfor.plist u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_parse.readfor.pfrom u64 
    push           mm_parse.readfor.plist u64 
    push           24         
    pushptroff                u64 1 0
    pop            mm_parse.readfor.pto u64 
    jump           #14110     
#14111: 
    startmult                 
    push           mm_parse.readfor.opc i64 
    push           102        i64 
    jumpne         #14112     i64 
    push           104        i64 
    resetmult                 
    jump           #14113     
#14112: 
    push           105        i64 
    endmult                   
#14113: 
    pop            mm_parse.readfor.opc i64 
    setargs                   1 0
    setargs                   2 0
    push           0          i64 
    push           mm_parse.readfor.plist u64 
    callfn         &mm_lib.duplunit u64 
    callfn         &mm_lib.getrangelwbunit u64 
    pop            mm_parse.readfor.pfrom u64 
    setargs                   1 0
    setargs                   2 0
    push           0          i64 
    push           mm_parse.readfor.plist u64 
    callfn         &mm_lib.duplunit u64 
    callfn         &mm_lib.getrangeupbunit u64 
    pop            mm_parse.readfor.pto u64 
#14110: 
    jump           #14114     
#14107: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           9          i64 
    jumpne         #14115     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readfor.pfrom u64 
    jump           #14116     
#14115: 
    setargs                   2 0
    push           4          i64 
    push           1          u64 
    callfn         &mm_lib.createconstunit u64 
    pop            mm_parse.readfor.pfrom u64 
#14116: 
    setargs                   1 0
    push           111        i64 
    callproc       &mm_parse.checksymbol 
    startmult                 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #14117     i64 
    push           103        i64 
    resetmult                 
    jump           #14118     
#14117: 
    push           102        i64 
    endmult                   
#14118: 
    pop            mm_parse.readfor.opc i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readfor.pto u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           112        i64 
    jumpne         #14119     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           0          i64 
    callfn         &mm_parse.readconstexpr u64 
    pop            mm_parse.readfor.pstep u64 
    push           mm_parse.readfor.pstep u64 
    pushptr                   u8 
    push           1          i64 
    jumpne         #14120     i64 
    push           mm_parse.readfor.pstep u64 
    push           16         
    pushptroff                i64 1 0
    push           1          i64 
    jumpne         #14121     i64 
    push           0          u64 
    pop            mm_parse.readfor.pstep u64 
#14121: 
#14120: 
#14119: 
#14114: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           109        i64 
    jumpne         #14122     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    callfn         &mm_parse.fixcond u64 
    pop            mm_parse.readfor.pcond u64 
#14122: 
    setargs                   1 0
    push           113        i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           0          i64 
    callfn         &mm_parse.readsunit u64 
    pop            mm_parse.readfor.pbody u64 
    push           0          u64 
    pop            mm_parse.readfor.pelse u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           100        i64 
    jumpne         #14123     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           0          i64 
    callfn         &mm_parse.readsunit u64 
    pop            mm_parse.readfor.pelse u64 
#14123: 
    setargs                   4 0
    push           0          i64 
    push           113        i64 
    push           110        i64 
    push           104        i64 
    callproc       &mm_parse.checkend 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.readfor.pcond u64 
    push           0          u64 
    jumpeq         #14124     u64 
    setargs                   1 0
    setargs                   3 0
    push           mm_parse.readfor.pbody u64 
    push           mm_parse.readfor.pcond u64 
    push           100        i64 
    callfn         &mm_lib.createunit2 u64 
    callfn         &mm_parse.makeblock u64 
    pop            mm_parse.readfor.pbody u64 
#14124: 
    push           mm_parse.readfor.pelse u64 
    push           mm_parse.readfor.pbody u64 
    push           8          
    popptroff                 u64 1 0
    push           mm_parse.readfor.opc i64 
    push           102        i64 
    casejumpeq     #14125     i64 0
    push           103        i64 
    casejumpeq     #14125     i64 0
    popstack                  i64 
    jump           #14126     
#14125: 
    push           mm_parse.readfor.plocal u64 
    jumpfalse      #14127     u64 
    setargs                   1 0
    push           "for i,x?" u64 
    callproc       &mm_support.serror 
#14127: 
    push           73         i64 
    push           mm_parse.readfor.pindex u64 
    push           41         
    popptroff                 u8 1 0
    push           mm_parse.readfor.pto u64 
    pushptr                   u8 
    push           1          i64 
    setjumpeq      #14128     i64 
    push           3          i64 
    setjumpeqx     #14128     i64 
    setargs                   1 0
    setargs                   2 0
    push           12         i64 
    push           mm_decls.currproc u64 
    callfn         &mm_lib.getavname u64 
    callfn         &mm_lib.createname u64 
    pop            mm_parse.readfor.plocal u64 
    push           73         i64 
    push           mm_parse.readfor.plocal u64 
    push           41         
    popptroff                 u8 1 0
    setargs                   3 0
    push           mm_parse.readfor.pto u64 
    push           mm_parse.readfor.plocal u64 
    push           29         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readfor.ptoinit u64 
    push           mm_parse.readfor.ptoinit u64 
    push           mm_parse.readfor.pindex u64 
    push           8          
    popptroff                 u64 1 0
    push           mm_parse.readfor.plocal u64 
    pop            mm_parse.readfor.pto u64 
#14128: 
    push           mm_parse.readfor.pto u64 
    push           mm_parse.readfor.pfrom u64 
    push           8          
    popptroff                 u64 1 0
    push           mm_parse.readfor.pstep u64 
    push           mm_parse.readfor.pto u64 
    push           8          
    popptroff                 u64 1 0
    setargs                   4 0
    push           mm_parse.readfor.pbody u64 
    push           mm_parse.readfor.pfrom u64 
    push           mm_parse.readfor.pindex u64 
    push           mm_parse.readfor.opc i64 
    callfn         &mm_lib.createunit3 u64 
    pop            mm_parse.readfor.p u64 
    jump           #14129     
#14126: 
    push           mm_parse.readfor.plocal u64 
    push           0          u64 
    jumpne         #14130     u64 
    push           mm_parse.readfor.pindex u64 
    pop            mm_parse.readfor.plocal u64 
    setargs                   1 0
    setargs                   2 0
    push           12         i64 
    push           mm_decls.currproc u64 
    callfn         &mm_lib.getavname u64 
    callfn         &mm_lib.createname u64 
    pop            mm_parse.readfor.pindex u64 
#14130: 
    push           73         i64 
    push           mm_parse.readfor.pindex u64 
    push           41         
    popptroff                 u8 1 0
    push           76         i64 
    push           mm_parse.readfor.plocal u64 
    push           41         
    popptroff                 u8 1 0
    push           mm_parse.readfor.plocal u64 
    push           mm_parse.readfor.pindex u64 
    push           8          
    popptroff                 u64 1 0
    push           mm_parse.readfor.pfrom u64 
    push           mm_parse.readfor.plocal u64 
    push           8          
    popptroff                 u64 1 0
    push           mm_parse.readfor.pto u64 
    push           mm_parse.readfor.pfrom u64 
    push           8          
    popptroff                 u64 1 0
    setargs                   3 0
    setargs                   3 0
    setargs                   2 0
    push           0          i64 
    push           mm_parse.readfor.pindex u64 
    callfn         &mm_lib.duplunit u64 
    setargs                   2 0
    push           0          i64 
    push           mm_parse.readfor.plist u64 
    callfn         &mm_lib.duplunit u64 
    push           48         i64 
    callfn         &mm_lib.createunit2 u64 
    setargs                   2 0
    push           0          i64 
    push           mm_parse.readfor.plocal u64 
    callfn         &mm_lib.duplunit u64 
    push           29         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readfor.passign u64 
    push           mm_parse.readfor.passign u64 
    push           mm_parse.readfor.plist u64 
    push           8          
    popptroff                 u64 1 0
    setargs                   4 0
    push           mm_parse.readfor.pbody u64 
    push           mm_parse.readfor.plist u64 
    push           mm_parse.readfor.pindex u64 
    push           mm_parse.readfor.opc i64 
    callfn         &mm_lib.createunit3 u64 
    pop            mm_parse.readfor.p u64 
#14129: 
    push           mm_parse.readfor.pos i64 
    push           mm_parse.readfor.p u64 
    push           4          
    popptroff                 u32 1 0
    push           &mm_parse.nforloops 
    decr                      i64 1
    push           mm_parse.readfor.p u64 
    setret                    u64 
    jump           #14131     
#14131: 
    retfn                     u64 
End


Proc mm_parse.readname: u64
    local          mm_parse.readname.p u64 
    procentry                 
    setargs                   0 0
    callfn         &mm_parse.readterm2 u64 
    pop            mm_parse.readname.p u64 
    push           mm_parse.readname.p u64 
    pushptr                   u8 
    push           3          i64 
    jumpeq         #14133     i64 
    setargs                   1 0
    push           "Name expected" u64 
    callproc       &mm_support.serror 
#14133: 
    push           mm_parse.readname.p u64 
    setret                    u64 
    jump           #14134     
#14134: 
    retfn                     u64 
End


Proc mm_parse.readtypedef:
    param          mm_parse.readtypedef.owner u64 
    param          mm_parse.readtypedef.isglobal i64 
    local          mm_parse.readtypedef.sttype u64 
    local          mm_parse.readtypedef.stname u64 
    local          mm_parse.readtypedef.t i64 
    local          mm_parse.readtypedef.m i64 
    procentry                 
    setargs                   1 0
    push           79         i64 
    callproc       &mm_parse.lexchecksymbol 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    pop            mm_parse.readtypedef.stname u64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callproc       &mm_parse.checkequals 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   3 0
    push           4          i64 
    push           mm_parse.readtypedef.stname u64 
    push           mm_parse.readtypedef.owner u64 
    callfn         &mm_lib.getduplnameptr u64 
    pop            mm_parse.readtypedef.sttype u64 
    setargs                   2 0
    push           mm_parse.readtypedef.sttype u64 
    push           mm_parse.readtypedef.owner u64 
    callproc       &mm_lib.adddef 
    setargs                   1 0
    push           mm_parse.readtypedef.sttype u64 
    callfn         &mm_lib.createusertype i64 
    pop            mm_parse.readtypedef.m i64 
    push           1          i64 
    push           &mm_decls.ttusercat 
    push           mm_parse.readtypedef.m i64 
    popptroff                 u8 1 0
    setargs                   2 0
    push           mm_parse.readtypedef.m i64 
    push           mm_parse.readtypedef.sttype u64 
    callfn         &mm_parse.readtypespec i64 
    pop            mm_parse.readtypedef.t i64 
    push           mm_parse.readtypedef.isglobal u64 
    push           mm_parse.readtypedef.sttype u64 
    push           92         
    addrefoff                 u64 1 0
    push           0          i64 
    push           1          i64 
    popdotslice               u16 
    setargs                   3 0
    push           mm_parse.readtypedef.sttype u64 
    push           72         
    addrefoff                 u64 1 0
    push           mm_parse.readtypedef.t i64 
    push           mm_parse.readtypedef.owner u64 
    callproc       &mm_lib.storemode 
    push           mm_parse.readtypedef.t i64 
    push           0          i64 
    jumplt         #14136     i64 
    push           &mm_decls.ttisallnum 
    push           mm_parse.readtypedef.t i64 
    pushptroff                u8 1 0
    jumpfalse      #14137     i64 
    push           mm_parse.readtypedef.t i64 
    push           &mm_decls.tttarget 
    push           mm_parse.readtypedef.m i64 
    popptroff                 i32 4 0
    jump           #14138     
#14137: 
    push           &mm_decls.ttisref 
    push           mm_parse.readtypedef.t i64 
    pushptroff                u8 1 0
    jumpfalse      #14139     i64 
    jump           #14138     
#14139: 
    push           &mm_decls.ttbasetype 
    push           mm_parse.readtypedef.t i64 
    pushptroff                i32 4 0
    push           11         i64 
    casejumpeq     #14140     i64 0
    push           12         i64 
    casejumpeq     #14141     i64 0
    push           13         i64 
    casejumpeq     #14142     i64 0
    push           24         i64 
    casejumpeq     #14143     i64 0
    popstack                  i64 
    jump           #14144     
#14140: 
    jump           #14145     
#14141: 
    jump           #14145     
#14142: 
    jump           #14145     
#14143: 
    jump           #14145     
#14144: 
    push           mm_parse.readtypedef.t i64 
    push           &mm_decls.tttarget 
    push           mm_parse.readtypedef.m i64 
    popptroff                 i32 4 0
#14145: 
#14138: 
    jump           #14146     
#14136: 
    setargs                   3 0
    push           &mm_decls.tttarget 
    push           mm_parse.readtypedef.m i64 
    addrefoff                 i32 4 0
    push           mm_parse.readtypedef.t i64 
    push           mm_parse.readtypedef.owner u64 
    callproc       &mm_lib.storemode 
#14146: 
    push           mm_parse.readtypedef.t i64 
    push           0          i64 
    jumplt         #14147     i64 
    setargs                   2 0
    push           mm_parse.readtypedef.t i64 
    push           mm_parse.readtypedef.m i64 
    callproc       &mm_lib.copyttvalues 
    jump           #14148     
#14147: 
    push           32         i64 
    push           &mm_decls.ttbasetype 
    push           mm_parse.readtypedef.m i64 
    popptroff                 i32 4 0
#14148: 
#14149: 
    retproc                   
End


Proc mm_parse.readrecordfields:
    param          mm_parse.readrecordfields.owner u64 
    param          mm_parse.readrecordfields.m i64 
    local          mm_parse.readrecordfields.nvars i64 
    local          mm_parse.readrecordfields.stname u64 
    local          mm_parse.readrecordfields.stbitfield u64 
    procentry                 
    push           0          i64 
    pop            mm_parse.readrecordfields.nvars i64 
    jump           #14151     
#14152: 
    setargs                   3 0
    push           14         i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           mm_parse.readrecordfields.owner u64 
    callfn         &mm_lib.getduplnameptr u64 
    pop            mm_parse.readrecordfields.stname u64 
    setargs                   3 0
    push           mm_parse.readrecordfields.stname u64 
    push           72         
    addrefoff                 u64 1 0
    push           mm_parse.readrecordfields.m i64 
    push           mm_parse.readrecordfields.owner u64 
    callproc       &mm_lib.storemode 
    push           &mm_parse.readrecordfields.nvars 
    incr                      i64 1
    push           &mm_parse.unionpend 
    push           7          
    pushptroff                u8 1 0
    jumpfalse      #14153     i64 
    setargs                   2 0
    push           &mm_parse.unionpend 
    push           mm_parse.readrecordfields.stname u64 
    push           104        
    addrefoff                 u64 1 0
    callproc       &mm_lib.unionstr_copy 
    setargs                   2 0
    push           &mm_parse.unionpend 
    push           &mm_parse.unionstring 
    callproc       &mm_lib.unionstr_concat 
    setargs                   1 0
    push           &mm_parse.unionpend 
    callproc       &mm_lib.unionstr_clear 
    jump           #14154     
#14153: 
    setargs                   1 0
    push           mm_parse.readrecordfields.stname u64 
    push           104        
    addrefoff                 u64 1 0
    callproc       &mm_lib.unionstr_clear 
#14154: 
    push           mm_parse.readrecordfields.stname u64 
    pop            mm_parse.unionlastvar u64 
    setargs                   2 0
    push           mm_parse.readrecordfields.stname u64 
    push           mm_parse.readrecordfields.owner u64 
    callproc       &mm_lib.adddef 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           21         i64 
    casejumpeq     #14155     i64 0
    push           22         i64 
    casejumpeq     #14156     i64 0
    push           7          i64 
    casejumpeq     #14157     i64 0
    popstack                  i64 
    jump           #14158     
#14155: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           1          u64 
    push           mm_parse.readrecordfields.stname u64 
    push           92         
    addrefoff                 u64 1 0
    push           12         i64 
    popdotindex               u16 
    setargs                   1 0
    push           mm_parse.readrecordfields.owner u64 
    callfn         &mm_parse.readequivfield u64 
    push           mm_parse.readrecordfields.stname u64 
    push           96         
    popptroff                 u64 1 0
    jump           #14159     
#14156: 
    setargs                   1 0
    push           70         i64 
    callproc       &mm_parse.lexchecksymbol 
    push           &mm_decls.lx 
    push           8          
    pushptroff                i64 1 0
    push           1          i64 
    casejumpeq     #14160     i64 0
    push           2          i64 
    casejumpeq     #14160     i64 0
    push           4          i64 
    casejumpeq     #14160     i64 0
    push           8          i64 
    casejumpeq     #14160     i64 0
    push           16         i64 
    casejumpeq     #14160     i64 0
    push           0          i64 
    casejumpeq     #14161     i64 0
    popstack                  i64 
    jump           #14162     
#14160: 
    push           &mm_decls.lx 
    push           8          
    pushptroff                i64 1 0
    push           mm_parse.readrecordfields.stname u64 
    push           117        
    popptroff                 u8 1 0
    jump           #14163     
#14161: 
    push           255        i64 
    push           mm_parse.readrecordfields.stname u64 
    push           117        
    popptroff                 u8 1 0
    jump           #14163     
#14162: 
    setargs                   1 0
    push           "@@ bad align" u64 
    callproc       &mm_support.serror 
#14163: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #14159     
#14157: 
    setargs                   1 0
    push           12         i64 
    callproc       &mm_parse.lexchecksymbol 
#14164: 
    setargs                   1 0
    push           79         i64 
    callproc       &mm_parse.lexchecksymbol 
    setargs                   3 0
    push           14         i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           mm_parse.readrecordfields.owner u64 
    callfn         &mm_lib.getduplnameptr u64 
    pop            mm_parse.readrecordfields.stbitfield u64 
    push           30         i64 
    push           mm_parse.readrecordfields.stbitfield u64 
    push           72         
    popptroff                 i32 1 0
    setargs                   2 0
    push           mm_parse.readrecordfields.stbitfield u64 
    push           mm_parse.readrecordfields.owner u64 
    callproc       &mm_lib.adddef 
    push           1          u64 
    push           mm_parse.readrecordfields.stbitfield u64 
    push           92         
    addrefoff                 u64 1 0
    push           12         i64 
    popdotindex               u16 
    push           mm_parse.readrecordfields.stname u64 
    push           mm_parse.readrecordfields.stbitfield u64 
    push           96         
    popptroff                 u64 1 0
    setargs                   1 0
    push           7          i64 
    callproc       &mm_parse.lexchecksymbol 
    setargs                   1 0
    push           70         i64 
    callproc       &mm_parse.lexchecksymbol 
    push           &mm_decls.lx 
    push           8          
    pushptroff                i64 1 0
    push           mm_parse.readrecordfields.stbitfield u64 
    push           116        
    popptroff                 u8 1 0
    setargs                   0 0
    callproc       &mm_lex.lex 
#14165: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpeq         #14164     i64 
#14166: 
    setargs                   1 0
    push           13         i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #14159     
#14158: 
#14159: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpeq         #14167     i64 
    jump           #14168     
#14167: 
    setargs                   0 0
    callproc       &mm_lex.lex 
#14151: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           79         i64 
    jumpeq         #14152     i64 
#14168: 
    push           mm_parse.readrecordfields.nvars i64 
    push           0          i64 
    jumpne         #14169     i64 
    setargs                   1 0
    push           "No fields declared" u64 
    callproc       &mm_support.serror 
#14169: 
#14170: 
    retproc                   
End


Proc mm_parse.readtabledef:
    param          mm_parse.readtabledef.owner u64 
    param          mm_parse.readtabledef.isglobal i64 
    local          mm_parse.readtabledef.i i64 
    local          mm_parse.readtabledef.ncols i64 
    local          mm_parse.readtabledef.nrows i64 
    local          mm_parse.readtabledef.enums i64 
    local          mm_parse.readtabledef.nextenumvalue i64 
    local          mm_parse.readtabledef.firstval i64 
    local          mm_parse.readtabledef.lastval i64 
    local          mm_parse.readtabledef.startline i64 
    local          mm_parse.readtabledef.closesym i64 
    local          mm_parse.readtabledef.ltype i64 
    local          mm_parse.readtabledef.plower u64 
    local          mm_parse.readtabledef.enumtypename u64 
    local          mm_parse.readtabledef.stvar u64 
    local          mm_parse.readtabledef.stenum u64 
    local          mm_parse.readtabledef.stgen u64 
    local          mm_parse.readtabledef.varnameptrs block:160 
    local          mm_parse.readtabledef.varlisttypes block:160 
    local          mm_parse.readtabledef.plist block:160 
    local          mm_parse.readtabledef.plistx block:160 
    local          mm_parse.readtabledef.enumvalues block:4000 
    procentry                 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           0          i64 
    pop            mm_parse.readtabledef.enums i64 
    push           0          u64 
    pop            mm_parse.readtabledef.enumtypename u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           12         i64 
    jumpne         #14172     i64 
    push           1          i64 
    pop            mm_parse.readtabledef.enums i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           79         i64 
    jumpne         #14173     i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    pushptr                   u64 
    pop            mm_parse.readtabledef.enumtypename u64 
    setargs                   0 0
    callproc       &mm_lex.lex 
#14173: 
    setargs                   1 0
    push           13         i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
#14172: 
    push           1          i64 
    pop            mm_parse.readtabledef.nextenumvalue i64 
    push           0          i64 
    pop            mm_parse.readtabledef.nrows i64 
    push           0          i64 
    pop            mm_parse.readtabledef.ncols i64 
    jump           #14174     
#14175: 
    setargs                   2 0
    push           0          i64 
    push           mm_parse.readtabledef.owner u64 
    callfn         &mm_parse.readtypespec i64 
    pop            mm_parse.readtabledef.ltype i64 
    setargs                   1 0
    push           79         i64 
    callproc       &mm_parse.checksymbol 
    push           &mm_parse.readtabledef.ncols 
    incrload                  i64 1
    push           20         i64 
    jumple         #14176     i64 
    setargs                   1 0
    push           "tabledata/too many columns" u64 
    callproc       &mm_support.serror 
#14176: 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           &mm_parse.readtabledef.varnameptrs 
    push           mm_parse.readtabledef.ncols i64 
    popptroff                 u64 8 -8
    push           mm_parse.readtabledef.ltype i64 
    push           &mm_parse.readtabledef.varlisttypes 
    push           mm_parse.readtabledef.ncols i64 
    popptroff                 i64 8 -8
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpne         #14177     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #14178     
#14177: 
    jump           #14179     
#14178: 
#14174: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           46         i64 
    jumpne         #14175     i64 
#14179: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callproc       &mm_parse.skipsemi 
    setargs                   0 0
    callfn         &mm_parse.getcurrline i64 
    pop            mm_parse.readtabledef.startline i64 
    setargs                   1 0
    push           0          i64 
    callfn         &mm_parse.checkbegin i64 
    pop            mm_parse.readtabledef.closesym i64 
    setargs                   0 0
    callproc       &mm_parse.skipsemi 
    push           0          i64 
    store          mm_parse.readtabledef.lastval i64 
    pop            mm_parse.readtabledef.firstval i64 
#14180: 
    push           1          i64 
    pop            mm_parse.readtabledef.i i64 
    push           mm_parse.readtabledef.ncols i64 
    push           1          i64 
    jumplt         #14181     i64 
#14182: 
    push           0          u64 
    push           &mm_parse.readtabledef.plistx 
    push           mm_parse.readtabledef.i i64 
    storeptroff               u64 8 -8
    push           &mm_parse.readtabledef.plist 
    push           mm_parse.readtabledef.i i64 
    popptroff                 u64 8 -8
#14183: 
    forup          #14182     i64 1
    opnd           mm_parse.readtabledef.i 
    opnd           mm_parse.readtabledef.ncols 
#14181: 
    push           1          i64 
    pop            mm_parse.intabledata i64 
#14184: 
    setargs                   0 0
    callproc       &mm_parse.skipsemi 
    setargs                   1 0
    push           12         i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_parse.readtabledef.nrows 
    incrload                  i64 1
    push           500        i64 
    jumple         #14185     i64 
    setargs                   1 0
    push           "tabledata:too many rows" u64 
    callproc       &mm_support.serror 
#14185: 
    push           mm_parse.readtabledef.enums i64 
    jumpfalse      #14186     i64 
    setargs                   1 0
    push           79         i64 
    callproc       &mm_parse.checksymbol 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    pop            mm_parse.readtabledef.stgen u64 
    push           mm_parse.readtabledef.stgen u64 
    pushptr                   u64 
    pop            mm_parse.tabledataname u64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           46         i64 
    jumpne         #14187     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.readconstint i64 
    pop            mm_parse.readtabledef.nextenumvalue i64 
#14187: 
    push           mm_parse.readtabledef.nextenumvalue i64 
    push           &mm_parse.readtabledef.enumvalues 
    push           mm_parse.readtabledef.nrows i64 
    popptroff                 i64 8 -8
    setargs                   3 0
    push           10         i64 
    push           mm_parse.readtabledef.stgen u64 
    push           mm_parse.readtabledef.owner u64 
    callfn         &mm_lib.getduplnameptr u64 
    pop            mm_parse.readtabledef.stenum u64 
    push           4          i64 
    push           mm_parse.readtabledef.stenum u64 
    push           72         
    popptroff                 i32 1 0
    setargs                   2 0
    push           4          i64 
    push           mm_parse.readtabledef.nextenumvalue u64 
    callfn         &mm_lib.createconstunit u64 
    push           mm_parse.readtabledef.stenum u64 
    push           64         
    popptroff                 u64 1 0
    push           mm_parse.readtabledef.isglobal u64 
    push           mm_parse.readtabledef.stenum u64 
    push           92         
    addrefoff                 u64 1 0
    push           0          i64 
    push           1          i64 
    popdotslice               u16 
    setargs                   2 0
    push           mm_parse.readtabledef.stenum u64 
    push           mm_parse.readtabledef.owner u64 
    callproc       &mm_lib.adddef 
    push           mm_parse.readtabledef.nrows i64 
    push           1          i64 
    jumpne         #14188     i64 
    push           mm_parse.readtabledef.nextenumvalue i64 
    pop            mm_parse.readtabledef.firstval i64 
#14188: 
    push           mm_parse.readtabledef.nextenumvalue i64 
    pop            mm_parse.readtabledef.lastval i64 
    push           &mm_parse.readtabledef.nextenumvalue 
    incr                      i64 1
    push           mm_parse.readtabledef.ncols i64 
    jumpfalse      #14189     i64 
    setargs                   1 0
    push           5          i64 
    callproc       &mm_parse.checksymbol 
#14189: 
    setargs                   0 0
    callproc       &mm_lex.lex 
#14186: 
#14190: 
    push           1          i64 
    pop            mm_parse.readtabledef.i i64 
    push           mm_parse.readtabledef.ncols i64 
    push           1          i64 
    jumplt         #14191     i64 
#14192: 
    setargs                   3 0
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    push           &mm_parse.readtabledef.plistx 
    push           mm_parse.readtabledef.i i64 
    addrefoff                 u64 8 -8
    push           &mm_parse.readtabledef.plist 
    push           mm_parse.readtabledef.i i64 
    addrefoff                 u64 8 -8
    callproc       &mm_lib.addlistunit 
    push           mm_parse.readtabledef.i i64 
    push           mm_parse.readtabledef.ncols i64 
    jumpne         #14193     i64 
    setargs                   1 0
    push           13         i64 
    callproc       &mm_parse.checksymbol 
    jump           #14194     
#14193: 
    setargs                   1 0
    push           5          i64 
    callproc       &mm_parse.checksymbol 
#14194: 
    setargs                   0 0
    callproc       &mm_lex.lex 
#14195: 
    forup          #14192     i64 1
    opnd           mm_parse.readtabledef.i 
    opnd           mm_parse.readtabledef.ncols 
#14191: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpeq         #14196     i64 
    jump           #14197     
#14196: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           mm_parse.readtabledef.closesym i64 
    jumpne         #14198     i64 
    jump           #14197     
#14198: 
    jump           #14184     
#14197: 
    push           0          i64 
    pop            mm_parse.intabledata i64 
    setargs                   0 0
    callproc       &mm_parse.skipsemi 
    setargs                   3 0
    push           mm_parse.readtabledef.startline i64 
    push           170        i64 
    push           mm_parse.readtabledef.closesym i64 
    callproc       &mm_parse.checkbeginend 
    push           mm_parse.readtabledef.nrows i64 
    push           0          i64 
    jumpne         #14199     i64 
    setargs                   1 0
    push           "No table data" u64 
    callproc       &mm_support.serror 
#14199: 
#14200: 
    push           1          i64 
    pop            mm_parse.readtabledef.i i64 
    push           mm_parse.readtabledef.ncols i64 
    push           1          i64 
    jumplt         #14201     i64 
#14202: 
    setargs                   3 0
    push           11         i64 
    push           &mm_parse.readtabledef.varnameptrs 
    push           mm_parse.readtabledef.i i64 
    pushptroff                u64 8 -8
    push           mm_parse.readtabledef.owner u64 
    callfn         &mm_lib.getduplnameptr u64 
    pop            mm_parse.readtabledef.stvar u64 
    setargs                   2 0
    push           &mm_parse.readtabledef.plist 
    push           mm_parse.readtabledef.i i64 
    pushptroff                u64 8 -8
    push           19         i64 
    callfn         &mm_lib.createunit1 u64 
    push           mm_parse.readtabledef.stvar u64 
    push           64         
    popptroff                 u64 1 0
    push           mm_parse.readtabledef.nrows i64 
    push           mm_parse.readtabledef.stvar u64 
    push           64         
    pushptroff                u64 1 0
    push           40         
    popptroff                 u32 1 0
    setargs                   3 0
    push           mm_parse.readtabledef.stvar u64 
    push           72         
    addrefoff                 u64 1 0
    push           &mm_parse.readtabledef.varlisttypes 
    push           mm_parse.readtabledef.i i64 
    pushptroff                i64 8 -8
    push           mm_parse.readtabledef.owner u64 
    callproc       &mm_lib.storemode 
    push           mm_parse.readtabledef.isglobal u64 
    push           mm_parse.readtabledef.stvar u64 
    push           92         
    addrefoff                 u64 1 0
    push           0          i64 
    push           1          i64 
    popdotslice               u16 
    setargs                   2 0
    push           mm_parse.readtabledef.stvar u64 
    push           mm_parse.readtabledef.owner u64 
    callproc       &mm_lib.adddef 
    setargs                   1 0
    push           mm_parse.readtabledef.stvar u64 
    callproc       &mm_lib.addstatic 
#14203: 
    forup          #14202     i64 1
    opnd           mm_parse.readtabledef.i 
    opnd           mm_parse.readtabledef.ncols 
#14201: 
#14204: 
    retproc                   
End


Proc mm_parse.readclassdef:
    param          mm_parse.readclassdef.owner u64 
    param          mm_parse.readclassdef.isglobal i64 
    local          mm_parse.readclassdef.kwd i64 
    local          mm_parse.readclassdef.baseclass i64 
    local          mm_parse.readclassdef.m i64 
    local          mm_parse.readclassdef.startline i64 
    local          mm_parse.readclassdef.closesym i64 
    local          mm_parse.readclassdef.mrec i64 
    local          mm_parse.readclassdef.normalexit i64 
    local          mm_parse.readclassdef.isrecord i64 
    local          mm_parse.readclassdef.align i64 
    local          mm_parse.readclassdef.nameptr u64 
    local          mm_parse.readclassdef.sttype u64 
    local          mm_parse.readclassdef.newd u64 
    local          mm_parse.readclassdef.d u64 
    local          mm_parse.readclassdef.e u64 
    procentry                 
    push           &mm_decls.lx 
    pushptr                   u8 
    pop            mm_parse.readclassdef.kwd i64 
    push           mm_parse.readclassdef.kwd i64 
    push           132        i64 
    seteq                     i64 
    pop            mm_parse.readclassdef.isrecord i64 
    setargs                   1 0
    push           79         i64 
    callproc       &mm_parse.lexchecksymbol 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    pop            mm_parse.readclassdef.nameptr u64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           0          i64 
    pop            mm_parse.readclassdef.baseclass i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           12         i64 
    jumpne         #14206     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    push           0          i64 
    push           mm_parse.readclassdef.owner u64 
    callfn         &mm_parse.readtypespec i64 
    pop            mm_parse.readclassdef.baseclass i64 
    setargs                   1 0
    push           13         i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
#14206: 
    setargs                   0 0
    callproc       &mm_parse.checkequals 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           0          i64 
    pop            mm_parse.readclassdef.align i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           21         i64 
    jumpne         #14207     i64 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #14208     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.readconstint i64 
    pop            mm_parse.readclassdef.align i64 
    jump           #14209     
#14208: 
    setargs                   0 0
    callproc       &mm_lex.lex 
#14209: 
    push           1          i64 
    pop            mm_parse.readclassdef.align i64 
#14207: 
    setargs                   3 0
    push           4          i64 
    push           mm_parse.readclassdef.nameptr u64 
    push           mm_parse.readclassdef.owner u64 
    callfn         &mm_lib.getduplnameptr u64 
    pop            mm_parse.readclassdef.sttype u64 
    setargs                   2 0
    push           mm_parse.readclassdef.sttype u64 
    push           mm_parse.readclassdef.owner u64 
    callproc       &mm_lib.adddef 
    setargs                   1 0
    push           mm_parse.readclassdef.sttype u64 
    callfn         &mm_lib.createusertype i64 
    pop            mm_parse.readclassdef.m i64 
    setargs                   2 0
    push           mm_parse.readclassdef.m i64 
    push           mm_parse.readclassdef.owner u64 
    callfn         &mm_lib.createrecordmode i64 
    pop            mm_parse.readclassdef.mrec i64 
    setargs                   3 0
    push           mm_parse.readclassdef.sttype u64 
    push           72         
    addrefoff                 u64 1 0
    push           mm_parse.readclassdef.mrec i64 
    push           mm_parse.readclassdef.owner u64 
    callproc       &mm_lib.storemode 
    setargs                   3 0
    push           mm_parse.readclassdef.sttype u64 
    push           112        
    addrefoff                 u64 1 0
    push           mm_parse.readclassdef.baseclass i64 
    push           mm_parse.readclassdef.owner u64 
    callproc       &mm_lib.storemode 
    push           mm_parse.readclassdef.align i64 
    push           mm_parse.readclassdef.sttype u64 
    push           117        
    popptroff                 u8 1 0
    setargs                   1 0
    push           1          i64 
    callfn         &mm_parse.checkbegin i64 
    pop            mm_parse.readclassdef.closesym i64 
    setargs                   0 0
    callfn         &mm_parse.getcurrline i64 
    pop            mm_parse.readclassdef.startline i64 
    setargs                   2 0
    push           mm_parse.readclassdef.kwd i64 
    push           mm_parse.readclassdef.sttype u64 
    callproc       &mm_parse.readclassbody 
    setargs                   3 0
    push           mm_parse.readclassdef.startline i64 
    push           mm_parse.readclassdef.kwd i64 
    push           mm_parse.readclassdef.closesym i64 
    callproc       &mm_parse.checkbeginend 
    push           mm_parse.readclassdef.isglobal u64 
    push           mm_parse.readclassdef.sttype u64 
    push           92         
    addrefoff                 u64 1 0
    push           0          i64 
    push           1          i64 
    popdotslice               u16 
#14210: 
    retproc                   
End


Proc mm_parse.readclassbody:
    param          mm_parse.readclassbody.owner u64 
    param          mm_parse.readclassbody.classkwd i64 
    local          mm_parse.readclassbody.kwd i64 
    local          mm_parse.readclassbody.t i64 
    local          mm_parse.readclassbody.d u64 
    procentry                 
    setargs                   1 0
    push           &mm_parse.unionstring 
    callproc       &mm_lib.unionstr_clear 
    setargs                   1 0
    push           &mm_parse.unionpend 
    callproc       &mm_lib.unionstr_clear 
#14212: 
    push           &mm_decls.lx 
    pushptr                   u8 
    switch         #14213     6 170
    opnd           #14214     
#14213: 
    switchlabel    #14215     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14216     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14216     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14217     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14216     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14218     
    switchlabel    #14218     
    switchlabel    #14214     
    switchlabel    #14219     
    switchlabel    #14220     
    switchlabel    #14220     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14221     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14222     
    switchlabel    #14223     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14224     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14225     
    switchlabel    #14226     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14219     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14214     
    switchlabel    #14227     
    endswitch                 
#14225: 
    setargs                   2 0
    push           0          i64 
    push           mm_parse.readclassbody.owner u64 
    callproc       &mm_parse.readconstdef 
    jump           #14212     
#14218: 
    push           &mm_decls.lx 
    pushptr                   u8 
    pop            mm_parse.readclassbody.kwd i64 
    push           mm_parse.readclassbody.owner u64 
    push           92         
    pushptroff                u16 1 0
    push           14         i64 
    dotindex                  i64 
    jumpfalse      #14228     u64 
    setargs                   3 0
    push           0          i64 
    push           0          i64 
    push           mm_parse.readclassbody.owner u64 
    callproc       &mm_parse.readprocdecl 
    jump           #14229     
#14228: 
    setargs                   3 0
    push           0          i64 
    push           0          i64 
    push           mm_parse.readclassbody.owner u64 
    callproc       &mm_parse.readprocdef 
#14229: 
    jump           #14212     
#14219: 
    setargs                   2 0
    push           0          i64 
    push           mm_parse.readclassbody.owner u64 
    callproc       &mm_parse.readclassdef 
    jump           #14212     
#14221: 
    setargs                   2 0
    push           0          i64 
    push           mm_parse.readclassbody.owner u64 
    callproc       &mm_parse.readtypedef 
    jump           #14212     
#14217: 
    setargs                   1 0
    push           "Class eof?" u64 
    callproc       &mm_support.serror 
    jump           #14230     
    jump           #14212     
#14215: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #14212     
#14226: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   3 0
    push           0          i64 
    push           0          i64 
    push           mm_parse.readclassbody.owner u64 
    callproc       &mm_parse.readenumtype 
    jump           #14212     
#14227: 
    setargs                   2 0
    push           0          i64 
    push           mm_parse.readclassbody.owner u64 
    callproc       &mm_parse.readtabledef 
    jump           #14212     
#14224: 
    setargs                   2 0
    push           0          i64 
    push           mm_parse.readclassbody.owner u64 
    callproc       &mm_parse.readmacrodef 
    jump           #14212     
#14220: 
    setargs                   2 0
    startmult                 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           133        i64 
    jumpne         #14231     i64 
    push           83         i64 
    resetmult                 
    jump           #14232     
#14231: 
    push           85         i64 
    endmult                   
#14232: 
    push           &mm_parse.unionpend 
    callproc       &mm_lib.unionstr_append 
    push           0          u64 
    pop            mm_parse.unionlastvar u64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #14212     
#14216: 
    push           &mm_parse.unionstring 
    push           7          
    pushptroff                u8 1 0
    jumpfalse      #14233     i64 
    setargs                   4 0
    push           0          i64 
    push           0          i64 
    startmult                 
    setargs                   1 0
    push           &mm_parse.unionstring 
    callfn         &mm_lib.unionstr_last i64 
    push           83         i64 
    jumpne         #14234     i64 
    push           133        i64 
    resetmult                 
    jump           #14235     
#14234: 
    push           134        i64 
    endmult                   
#14235: 
    push           104        i64 
    callproc       &mm_parse.checkend 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.unionlastvar u64 
    push           0          u64 
    jumpeq         #14236     u64 
    push           &mm_parse.unionpend 
    push           7          
    pushptroff                u8 1 0
    jumpfalse      #14237     i64 
#14236: 
    setargs                   1 0
    push           "Empty union group" u64 
    callproc       &mm_support.serror 
#14237: 
    setargs                   1 0
    push           mm_parse.unionlastvar u64 
    push           104        
    addrefoff                 u64 1 0
    callfn         &mm_lib.unionstr_last i64 
    push           69         i64 
    casejumpeq     #14238     i64 0
    push           42         i64 
    casejumpeq     #14238     i64 0
    popstack                  i64 
    jump           #14239     
#14238: 
    jump           #14240     
#14239: 
    setargs                   2 0
    push           42         i64 
    push           mm_parse.unionlastvar u64 
    push           104        
    addrefoff                 u64 1 0
    callproc       &mm_lib.unionstr_append 
#14240: 
    setargs                   2 0
    push           69         i64 
    push           mm_parse.unionlastvar u64 
    push           104        
    addrefoff                 u64 1 0
    callproc       &mm_lib.unionstr_append 
    push           &mm_parse.unionstring 
    push           7          
    addrefoff                 u64 1 0
    decr                      u8 1
    jump           #14241     
#14233: 
    jump           #14230     
#14241: 
    jump           #14212     
#14222: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.istypestarter i64 
    jumpfalse      #14242     i64 
!readmut::
#14243: 
    push           &mm_parse.insiderecord 
    incr                      i64 1
    setargs                   2 0
    push           0          i64 
    push           mm_parse.readclassbody.owner u64 
    callfn         &mm_parse.readtypespec i64 
    pop            mm_parse.readclassbody.t i64 
    push           &mm_parse.insiderecord 
    decr                      i64 1
    jump           #14244     
#14242: 
    setargs                   1 0
    push           "need type" u64 
    callproc       &mm_support.serror 
#14244: 
    setargs                   2 0
    push           mm_parse.readclassbody.t i64 
    push           mm_parse.readclassbody.owner u64 
    callproc       &mm_parse.readrecordfields 
    jump           #14212     
#14223: 
    setargs                   1 0
    push           "Let not allowed" u64 
    callproc       &mm_support.serror 
    jump           #14212     
#14214: 
    setargs                   0 0
    callfn         &mm_parse.istypestarter i64 
    jumpfalse      #14245     i64 
    jump           #14243     
    jump           #14246     
#14245: 
    jump           #14230     
#14246: 
    jump           #14212     
#14230: 
#14247: 
    retproc                   
End


Proc mm_parse.readenumtype: i64
    param          mm_parse.readenumtype.owner u64 
    param          mm_parse.readenumtype.typedefx i64 
    param          mm_parse.readenumtype.isglobal i64 
    local          mm_parse.readenumtype.enumowner u64 
    local          mm_parse.readenumtype.stname u64 
    local          mm_parse.readenumtype.nameptr u64 
    local          mm_parse.readenumtype.isanon i64 
    local          mm_parse.readenumtype.index i64 
    local          mm_parse.readenumtype.startline i64 
    local          mm_parse.readenumtype.closesym i64 
    local          mm_parse.readenumtype.knownindex i64 
    local          mm_parse.readenumtype.pone u64 
    local          mm_parse.readenumtype.pindex u64 
    procentry                 
    push           mm_parse.readenumtype.owner u64 
    pop            mm_parse.readenumtype.enumowner u64 
    push           0          i64 
    pop            mm_parse.readenumtype.isanon i64 
    push           mm_parse.readenumtype.typedefx i64 
    jumptrue       #14249     i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           79         i64 
    jumpne         #14250     i64 
    setargs                   3 0
    push           4          i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           mm_parse.readenumtype.owner u64 
    callfn         &mm_lib.getduplnameptr u64 
    pop            mm_parse.readenumtype.stname u64 
    push           mm_parse.readenumtype.stname u64 
    pop            mm_parse.readenumtype.owner u64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callproc       &mm_parse.checkequals 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    push           mm_parse.readenumtype.owner u64 
    push           mm_parse.readenumtype.enumowner u64 
    callproc       &mm_lib.adddef 
    jump           #14251     
#14250: 
    push           1          i64 
    pop            mm_parse.readenumtype.isanon i64 
#14251: 
    setargs                   1 0
    push           12         i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #14252     
#14249: 
    push           &mm_decls.ttnamedef 
    push           mm_parse.readenumtype.typedefx i64 
    pushptroff                u64 8 0
    pop            mm_parse.readenumtype.owner u64 
    setargs                   0 0
    callfn         &mm_parse.getcurrline i64 
    pop            mm_parse.readenumtype.startline i64 
    setargs                   1 0
    push           1          i64 
    callfn         &mm_parse.checkbegin i64 
    pop            mm_parse.readenumtype.closesym i64 
#14252: 
    setargs                   2 0
    push           4          i64 
    push           1          u64 
    callfn         &mm_lib.createconstunit u64 
    pop            mm_parse.readenumtype.pone u64 
    push           mm_parse.readenumtype.pone u64 
    pop            mm_parse.readenumtype.pindex u64 
    push           1          i64 
    pop            mm_parse.readenumtype.knownindex i64 
    push           1          i64 
    pop            mm_parse.readenumtype.index i64 
    jump           #14253     
#14254: 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    pop            mm_parse.readenumtype.nameptr u64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           46         i64 
    jumpne         #14255     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readenumtype.pindex u64 
    push           0          i64 
    pop            mm_parse.readenumtype.knownindex i64 
    push           mm_parse.readenumtype.pindex u64 
    pushptr                   u8 
    push           1          i64 
    jumpne         #14256     i64 
    push           1          i64 
    pop            mm_parse.readenumtype.knownindex i64 
    push           mm_parse.readenumtype.pindex u64 
    push           16         
    pushptroff                i64 1 0
    pop            mm_parse.readenumtype.index i64 
#14256: 
#14255: 
    push           mm_parse.readenumtype.isanon i64 
    jumptrue       #14257     i64 
    setargs                   3 0
    push           16         i64 
    push           mm_parse.readenumtype.nameptr u64 
    push           mm_parse.readenumtype.owner u64 
    callfn         &mm_lib.getduplnameptr u64 
    pop            mm_parse.readenumtype.stname u64 
    jump           #14258     
#14257: 
    setargs                   3 0
    push           10         i64 
    push           mm_parse.readenumtype.nameptr u64 
    push           mm_parse.readenumtype.enumowner u64 
    callfn         &mm_lib.getduplnameptr u64 
    pop            mm_parse.readenumtype.stname u64 
#14258: 
    push           mm_parse.readenumtype.knownindex i64 
    jumpfalse      #14259     i64 
    setargs                   2 0
    push           4          i64 
    push           mm_parse.readenumtype.index u64 
    callfn         &mm_lib.createconstunit u64 
    pop            mm_parse.readenumtype.pindex u64 
    push           mm_parse.readenumtype.pindex u64 
    push           mm_parse.readenumtype.stname u64 
    push           64         
    popptroff                 u64 1 0
    push           &mm_parse.readenumtype.index 
    incr                      i64 1
    jump           #14260     
#14259: 
    push           mm_parse.readenumtype.pindex u64 
    push           mm_parse.readenumtype.stname u64 
    push           64         
    popptroff                 u64 1 0
    setargs                   3 0
    push           mm_parse.readenumtype.pone u64 
    push           mm_parse.readenumtype.pindex u64 
    push           36         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readenumtype.pindex u64 
    push           101        i64 
    push           mm_parse.readenumtype.pindex u64 
    push           60         
    popptroff                 u8 1 0
#14260: 
    push           4          i64 
    push           mm_parse.readenumtype.stname u64 
    push           72         
    popptroff                 i32 1 0
    push           mm_parse.readenumtype.isanon i64 
    jumptrue       #14261     i64 
    setargs                   2 0
    push           mm_parse.readenumtype.stname u64 
    push           mm_parse.readenumtype.owner u64 
    callproc       &mm_lib.adddef 
    jump           #14262     
#14261: 
    setargs                   2 0
    push           mm_parse.readenumtype.stname u64 
    push           mm_parse.readenumtype.enumowner u64 
    callproc       &mm_lib.adddef 
#14262: 
    push           mm_parse.readenumtype.isglobal u64 
    push           mm_parse.readenumtype.stname u64 
    push           92         
    addrefoff                 u64 1 0
    push           0          i64 
    push           1          i64 
    popdotslice               u16 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpeq         #14263     i64 
    jump           #14264     
#14263: 
    setargs                   0 0
    callproc       &mm_lex.lex 
#14253: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           79         i64 
    jumpeq         #14254     i64 
#14264: 
    push           mm_parse.readenumtype.typedefx i64 
    jumptrue       #14265     i64 
    setargs                   1 0
    push           13         i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #14266     
#14265: 
    setargs                   3 0
    push           mm_parse.readenumtype.startline i64 
    push           152        i64 
    push           mm_parse.readenumtype.closesym i64 
    callproc       &mm_parse.checkbeginend 
#14266: 
    startmult                 
    push           mm_parse.readenumtype.isanon i64 
    jumptrue       #14267     i64 
    setargs                   2 0
    push           mm_parse.readenumtype.typedefx i64 
    push           mm_parse.readenumtype.owner u64 
    callfn         &mm_lib.createenummode i64 
    pop            mm_parse.readenumtype.typedefx i64 
    push           mm_parse.readenumtype.typedefx i64 
    resetmult                 
    jump           #14268     
#14267: 
    push           0          i64 
    endmult                   
#14268: 
    setret                    i64 
    jump           #14269     
#14269: 
    retfn                     i64 
End


Proc mm_parse.readimportmodule:
    param          mm_parse.readimportmodule.owner u64 
    local          mm_parse.readimportmodule.isnew i64 
    local          mm_parse.readimportmodule.startline i64 
    local          mm_parse.readimportmodule.closesym i64 
    local          mm_parse.readimportmodule.d u64 
    local          mm_parse.readimportmodule.stname u64 
    local          mm_parse.readimportmodule.stname0 u64 
    procentry                 
    push           mm_parse.insidedllimport i64 
    jumpfalse      #14271     i64 
    setargs                   1 0
    push           "nested importdll" u64 
    callproc       &mm_support.serror 
#14271: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           75         i64 
    jumpne         #14272     i64 
    setargs                   1 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    callfn         &mm_lex.addnamestr u64 
    pop            mm_parse.readimportmodule.stname u64 
    jump           #14273     
#14272: 
    setargs                   1 0
    push           79         i64 
    callproc       &mm_parse.checksymbol 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    pop            mm_parse.readimportmodule.stname u64 
#14273: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callproc       &mm_parse.checkequals 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           1          i64 
    pop            mm_parse.readimportmodule.isnew i64 
    push           mm_parse.readimportmodule.stname u64 
    push           40         
    pushptroff                u64 1 0
    pop            mm_parse.readimportmodule.d u64 
    jump           #14274     
#14275: 
    push           mm_parse.readimportmodule.d u64 
    push           78         
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #14276     i64 
    push           mm_parse.readimportmodule.d u64 
    pop            mm_parse.readimportmodule.stname u64 
    push           0          i64 
    pop            mm_parse.readimportmodule.isnew i64 
    jump           #14277     
#14276: 
    push           mm_parse.readimportmodule.d u64 
    push           40         
    pushptroff                u64 1 0
    pop            mm_parse.readimportmodule.d u64 
#14274: 
    push           mm_parse.readimportmodule.d u64 
    jumptrue       #14275     u64 
#14277: 
    push           mm_parse.readimportmodule.isnew i64 
    jumpfalse      #14278     i64 
    setargs                   3 0
    push           3          i64 
    push           mm_parse.readimportmodule.stname u64 
    push           mm_decls.stmodule u64 
    callfn         &mm_lib.getduplnameptr u64 
    pop            mm_parse.readimportmodule.stname u64 
    setargs                   2 0
    push           "sys"      u64 
    push           mm_parse.readimportmodule.stname u64 
    pushptr                   u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #14279     i64 
    push           mm_parse.readimportmodule.stname u64 
    pop            mm_decls.stsysmodule u64 
#14279: 
    setargs                   2 0
    push           mm_parse.readimportmodule.stname u64 
    push           mm_decls.stmodule u64 
    callproc       &mm_lib.adddef 
    push           mm_decls.ndllnametable i64 
    push           50         i64 
    jumplt         #14280     i64 
    setargs                   1 0
    push           "Too many DLL libs" u64 
    callproc       &mm_support.serror 
#14280: 
    push           mm_parse.readimportmodule.stname u64 
    pushptr                   u64 
    push           &mm_decls.dllnametable 
    push           &mm_decls.ndllnametable 
    incrload                  i64 1
    popptroff                 u64 8 -8
    push           mm_decls.ndllnametable i64 
    push           mm_parse.readimportmodule.stname u64 
    push           113        
    popptroff                 u8 1 0
#14278: 
    setargs                   0 0
    callfn         &mm_parse.getcurrline i64 
    pop            mm_parse.readimportmodule.startline i64 
    setargs                   1 0
    push           0          i64 
    callfn         &mm_parse.checkbegin i64 
    pop            mm_parse.readimportmodule.closesym i64 
    push           1          i64 
    pop            mm_parse.insidedllimport i64 
    setargs                   1 0
    push           mm_parse.readimportmodule.owner u64 
    callproc       &mm_parse.readimportbody 
    push           0          i64 
    pop            mm_parse.insidedllimport i64 
    setargs                   3 0
    push           mm_parse.readimportmodule.startline i64 
    push           136        i64 
    push           mm_parse.readimportmodule.closesym i64 
    callproc       &mm_parse.checkbeginend 
#14281: 
    retproc                   
End


Proc mm_parse.readimportbody:
    param          mm_parse.readimportbody.owner u64 
    local          mm_parse.readimportbody.pos i64 
    local          mm_parse.readimportbody.fflang i64 
    procentry                 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    pop            mm_parse.readimportbody.pos i64 
#14283: 
    setargs                   0 0
    callproc       &mm_parse.skipsemi 
    push           &mm_decls.lx 
    pushptr                   u8 
    switch         #14284     66 157
    opnd           #14285     
#14284: 
    switchlabel    #14286     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14287     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14288     
    switchlabel    #14288     
    switchlabel    #14285     
    switchlabel    #14289     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14290     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14291     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14292     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14285     
    switchlabel    #14289     
    switchlabel    #14293     
    endswitch                 
#14293: 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    pop            mm_parse.readimportbody.fflang i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           129        i64 
    casejumpeq     #14294     i64 0
    push           130        i64 
    casejumpeq     #14294     i64 0
    popstack                  i64 
    jump           #14295     
#14294: 
    setargs                   3 0
    push           mm_parse.readimportbody.fflang i64 
    push           0          i64 
    push           mm_parse.readimportbody.owner u64 
    callproc       &mm_parse.readprocdecl 
    jump           #14296     
#14295: 
#14296: 
    jump           #14297     
#14288: 
    setargs                   3 0
    push           0          i64 
    push           0          i64 
    push           mm_parse.readimportbody.owner u64 
    callproc       &mm_parse.readprocdecl 
    jump           #14297     
#14290: 
    setargs                   2 0
    push           1          i64 
    push           mm_parse.readimportbody.owner u64 
    callproc       &mm_parse.readtypedef 
    jump           #14297     
#14292: 
    setargs                   2 0
    push           1          i64 
    push           mm_parse.readimportbody.owner u64 
    callproc       &mm_parse.readconstdef 
    jump           #14297     
#14289: 
    setargs                   2 0
    push           1          i64 
    push           mm_parse.readimportbody.owner u64 
    callproc       &mm_parse.readclassdef 
    jump           #14297     
#14291: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   5 0
    push           143        i64 
    push           7          i64 
    push           0          i64 
    push           1          i64 
    push           mm_parse.readimportbody.owner u64 
    callproc       &mm_parse.readvardef 
    jump           #14297     
#14286: 
    jump           #14298     
    jump           #14297     
#14287: 
    jump           #14298     
    jump           #14297     
#14285: 
    setargs                   1 0
    push           "symbol"   u64 
    callproc       &mm_lex.ps 
    setargs                   1 0
    push           "Not allowed in importmodule" u64 
    callproc       &mm_support.serror 
#14297: 
    jump           #14283     
#14298: 
#14299: 
    retproc                   
End


Proc mm_parse.readequivfield: u64
    param          mm_parse.readequivfield.owner u64 
    local          mm_parse.readequivfield.p u64 
    local          mm_parse.readequivfield.d u64 
    procentry                 
    setargs                   1 0
    push           79         i64 
    callproc       &mm_parse.checksymbol 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    pop            mm_parse.readequivfield.d u64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.readequivfield.owner u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_parse.readequivfield.p u64 
    jump           #14301     
#14302: 
    setargs                   2 0
    push           mm_parse.readequivfield.d u64 
    pushptr                   u64 
    push           mm_parse.readequivfield.p u64 
    pushptr                   u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #14303     i64 
    push           mm_parse.readequivfield.p u64 
    setret                    u64 
    jump           #14304     
#14303: 
    push           mm_parse.readequivfield.p u64 
    push           32         
    pushptroff                u64 1 0
    pop            mm_parse.readequivfield.p u64 
#14301: 
    push           mm_parse.readequivfield.p u64 
    jumptrue       #14302     u64 
#14305: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mm_parse.readequivfield.d u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Can't find @ field" u64 
    callproc       &mm_support.serror 
    push           0          u64 
    setret                    u64 
    jump           #14304     
#14304: 
    retfn                     u64 
End


Proc mm_parse.readrefproc: i64
    param          mm_parse.readrefproc.owner u64 
    param          mm_parse.readrefproc.typedefx i64 
    param          mm_parse.readrefproc.fflang i64 
    local          mm_parse.readrefproc.kwd i64 
    local          mm_parse.readrefproc.prettype i64 
    local          mm_parse.readrefproc.m i64 
    local          mm_parse.readrefproc.varparams i64 
    local          mm_parse.readrefproc.nparams i64 
    local          mm_parse.readrefproc.retmodes block:32 
    local          mm_parse.readrefproc.paramlist u64 
    local          mm_parse.readrefproc.stproc u64 
    local          mm_parse.readrefproc.rettype2 i64 
    local          mm_parse.readrefproc.rettype3 i64 
    local          mm_parse.readrefproc.nretvalues i64 
    local          mm_parse.readrefproc.name u64 
    procentry                 
    push           &mm_decls.lx 
    pushptr                   u8 
    pop            mm_parse.readrefproc.kwd i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           0          u64 
    pop            mm_parse.readrefproc.paramlist u64 
    push           0          i64 
    pop            mm_parse.readrefproc.prettype i64 
    push           0          i64 
    pop            mm_parse.readrefproc.nretvalues i64 
    setargs                   0 0
    callfn         &mm_lib.nextautotype u64 
    pop            mm_parse.readrefproc.name u64 
    setargs                   3 0
    push           4          i64 
    setargs                   1 0
    push           mm_parse.readrefproc.name u64 
    callfn         &mm_lex.addnamestr u64 
    push           mm_decls.stmodule u64 
    callfn         &mm_lib.getduplnameptr u64 
    pop            mm_parse.readrefproc.stproc u64 
    setargs                   2 0
    push           mm_parse.readrefproc.stproc u64 
    push           mm_decls.stmodule u64 
    callproc       &mm_lib.adddef 
    push           0          i64 
    push           &mm_parse.readrefproc.retmodes 
    push           1          i64 
    popptroff                 i64 8 -8
    push           mm_parse.readrefproc.kwd i64 
    push           130        i64 
    jumpne         #14307     i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           12         i64 
    jumpne         #14308     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           13         i64 
    jumpeq         #14309     i64 
    setargs                   5 0
    push           &mm_parse.readrefproc.nparams 
    push           &mm_parse.readrefproc.varparams 
    push           0          i64 
    push           mm_parse.readrefproc.stproc u64 
    push           mm_parse.readrefproc.owner u64 
    callfn         &mm_parse.readparams u64 
    pop            mm_parse.readrefproc.paramlist u64 
    setargs                   1 0
    push           13         i64 
    callproc       &mm_parse.checksymbol 
#14309: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           7          i64 
    jumpeq         #14310     i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           11         i64 
    jumpne         #14311     i64 
#14310: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    push           &mm_parse.readrefproc.retmodes 
    push           mm_parse.readrefproc.stproc u64 
    callfn         &mm_parse.readreturntype i64 
    pop            mm_parse.readrefproc.nretvalues i64 
    jump           #14312     
#14311: 
    push           &mm_decls.typestarterset 
    push           &mm_decls.lx 
    pushptr                   u8 
    pushptroff                u8 1 0
    jumptrue       #14313     i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           79         i64 
    jumpne         #14314     i64 
#14313: 
    setargs                   2 0
    push           &mm_parse.readrefproc.retmodes 
    push           mm_parse.readrefproc.stproc u64 
    callfn         &mm_parse.readreturntype i64 
    pop            mm_parse.readrefproc.nretvalues i64 
#14314: 
#14312: 
    jump           #14315     
#14308: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           7          i64 
    jumpeq         #14316     i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           11         i64 
    jumpne         #14317     i64 
#14316: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    push           &mm_parse.readrefproc.retmodes 
    push           mm_parse.readrefproc.stproc u64 
    callfn         &mm_parse.readreturntype i64 
    pop            mm_parse.readrefproc.nretvalues i64 
#14317: 
#14315: 
    push           mm_parse.readrefproc.nretvalues i64 
    push           0          i64 
    jumpne         #14318     i64 
    setargs                   1 0
    push           "Function needs return type" u64 
    callproc       &mm_support.serror 
#14318: 
    push           mm_parse.readrefproc.nretvalues i64 
    jumpfalse      #14319     i64 
    push           mm_parse.readrefproc.kwd i64 
    push           129        i64 
    jumpne         #14319     i64 
    setargs                   1 0
    push           "Proc can't return value" u64 
    callproc       &mm_support.serror 
#14319: 
    jump           #14320     
#14307: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           12         i64 
    jumpne         #14321     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           13         i64 
    jumpeq         #14322     i64 
    setargs                   5 0
    push           &mm_parse.readrefproc.nparams 
    push           &mm_parse.readrefproc.varparams 
    push           0          i64 
    push           mm_parse.readrefproc.stproc u64 
    push           mm_parse.readrefproc.owner u64 
    callfn         &mm_parse.readparams u64 
    pop            mm_parse.readrefproc.paramlist u64 
    setargs                   1 0
    push           13         i64 
    callproc       &mm_parse.checksymbol 
#14322: 
    setargs                   0 0
    callproc       &mm_lex.lex 
#14321: 
    push           &mm_decls.typestarterset 
    push           &mm_decls.lx 
    pushptr                   u8 
    pushptroff                u8 1 0
    jumptrue       #14323     i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           7          i64 
    jumpeq         #14323     i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           11         i64 
    jumpne         #14324     i64 
#14323: 
    setargs                   1 0
    push           "proc can't have ret value" u64 
    callproc       &mm_support.serror 
#14324: 
#14320: 
    setargs                   6 0
    push           mm_parse.readrefproc.typedefx i64 
    push           mm_parse.readrefproc.prettype i64 
    push           mm_parse.readrefproc.kwd i64 
    push           mm_parse.readrefproc.paramlist u64 
    push           mm_parse.readrefproc.stproc u64 
    push           mm_parse.readrefproc.owner u64 
    callfn         &mm_lib.createrefprocmode i64 
    pop            mm_parse.readrefproc.m i64 
    setargs                   3 0
    push           mm_parse.readrefproc.stproc u64 
    push           72         
    addrefoff                 u64 1 0
    push           &mm_parse.readrefproc.retmodes 
    push           1          i64 
    pushptroff                i64 8 -8
    push           mm_parse.readrefproc.owner u64 
    callproc       &mm_lib.storemode 
    push           mm_parse.readrefproc.nretvalues i64 
    push           mm_parse.readrefproc.stproc u64 
    push           116        
    popptroff                 u8 1 0
    push           mm_parse.readrefproc.stproc u64 
    push           &mm_decls.ttnamedef 
    push           mm_parse.readrefproc.m i64 
    popptroff                 u64 8 0
    push           mm_parse.readrefproc.fflang i64 
    push           mm_parse.readrefproc.stproc u64 
    push           115        
    popptroff                 u8 1 0
    push           mm_parse.readrefproc.m i64 
    setret                    i64 
    jump           #14325     
#14325: 
    retfn                     i64 
End


Proc mm_parse.pushproc:
    param          mm_parse.pushproc.p u64 
    procentry                 
    push           mm_parse.nprocstack i64 
    push           10         i64 
    jumplt         #14327     i64 
    setargs                   1 0
    push           "Too many nested proc" u64 
    callproc       &mm_support.serror 
#14327: 
    push           mm_decls.currproc u64 
    push           &mm_parse.procstack 
    push           &mm_parse.nprocstack 
    incrload                  i64 1
    popptroff                 u64 8 -8
    push           mm_parse.pushproc.p u64 
    pop            mm_decls.currproc u64 
#14328: 
    retproc                   
End


Proc mm_parse.popproc:
    procentry                 
    push           mm_parse.nprocstack i64 
    jumpfalse      #14330     i64 
    push           &mm_parse.procstack 
    push           &mm_parse.nprocstack 
    loaddecr                  i64 1
    pushptroff                u64 8 -8
    pop            mm_decls.currproc u64 
    jump           #14331     
#14330: 
    push           mm_decls.stmodule u64 
    pop            mm_decls.currproc u64 
#14331: 
#14332: 
    retproc                   
End


Proc mm_parse.readassemline: u64
    procentry                 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           1          i64 
    callfn         &mm_parse.assembleline u64 
    setret                    u64 
    jump           #14334     
#14334: 
    retfn                     u64 
End


Proc mm_parse.readassemblock: u64
    local          mm_parse.readassemblock.ulist u64 
    local          mm_parse.readassemblock.ulistx u64 
    local          mm_parse.readassemblock.u u64 
    procentry                 
    push           0          u64 
    store          mm_parse.readassemblock.ulistx u64 
    pop            mm_parse.readassemblock.ulist u64 
#14336: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           66         i64 
    casejumpeq     #14337     i64 0
    push           104        i64 
    casejumpeq     #14338     i64 0
    push           6          i64 
    casejumpeq     #14339     i64 0
    popstack                  i64 
    jump           #14340     
#14337: 
    setargs                   1 0
    push           "EOF: 'End' missing in Assembler code" u64 
    callproc       &mm_support.serror 
    jump           #14341     
#14338: 
    setargs                   4 0
    push           0          i64 
    push           0          i64 
    push           175        i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    callproc       &mm_parse.checkend 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #14342     
    jump           #14341     
#14339: 
    jump           #14341     
#14340: 
    setargs                   1 0
    push           0          i64 
    callfn         &mm_parse.assembleline u64 
    pop            mm_parse.readassemblock.u u64 
    setargs                   3 0
    push           mm_parse.readassemblock.u u64 
    push           &mm_parse.readassemblock.ulistx 
    push           &mm_parse.readassemblock.ulist 
    callproc       &mm_lib.addlistunit 
#14341: 
    jump           #14336     
#14342: 
    setargs                   1 0
    push           mm_parse.readassemblock.ulist u64 
    callfn         &mm_parse.makeblock u64 
    setret                    u64 
    jump           #14343     
#14343: 
    retfn                     u64 
End


Proc mm_parse.assembleline: u64
    param          mm_parse.assembleline.oneline i64 
    local          mm_parse.assembleline.dlist u64 
    local          mm_parse.assembleline.dlistx u64 
    local          mm_parse.assembleline.p u64 
    local          mm_parse.assembleline.pname u64 
    local          mm_parse.assembleline.q u64 
    local          mm_parse.assembleline.name u64 
    local          mm_parse.assembleline.opc i64 
    local          mm_parse.assembleline.noperands i64 
    local          mm_parse.assembleline.stname u64 
    procentry                 
    push           0          u64 
    store          mm_parse.assembleline.dlistx u64 
    pop            mm_parse.assembleline.dlist u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           79         i64 
    jumpne         #14345     i64 
    push           mm_lex.nexttoken u64 
    pushptr                   u8 
    push           7          i64 
    setjumpeq      #14346     i64 
    push           8          i64 
    setjumpne      #14345     i64 
#14346: 
    setargs                   1 0
    push           109        i64 
    callfn         &mm_lib.createunit0 u64 
    pop            mm_parse.assembleline.p u64 
    setargs                   3 0
    push           17         i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           mm_decls.currproc u64 
    callfn         &mm_lib.getduplnameptr u64 
    pop            mm_parse.assembleline.stname u64 
    push           mm_parse.assembleline.stname u64 
    push           mm_parse.assembleline.p u64 
    push           16         
    popptroff                 u64 1 0
    setargs                   2 0
    push           mm_parse.assembleline.stname u64 
    push           mm_decls.currproc u64 
    callproc       &mm_lib.adddef 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.assembleline.oneline i64 
    jumpfalse      #14347     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
#14347: 
    push           mm_parse.assembleline.p u64 
    setret                    u64 
    jump           #14348     
    jump           #14349     
#14345: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           32         i64 
    jumpne         #14350     i64 
    setargs                   1 0
    push           79         i64 
    callproc       &mm_parse.lexchecksymbol 
    setargs                   1 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    callfn         &mm_lib.createname u64 
    pop            mm_parse.assembleline.pname u64 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    push           mm_parse.assembleline.pname u64 
    push           4          
    popptroff                 u32 1 0
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           6          i64 
    jumpeq         #14351     i64 
#14352: 
    setargs                   3 0
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    push           &mm_parse.assembleline.dlistx 
    push           &mm_parse.assembleline.dlist 
    callproc       &mm_lib.addlistunit 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpne         #14353     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
#14353: 
#14354: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           6          i64 
    setjumpeq      #14355     i64 
    push           66         i64 
    setjumpne      #14352     i64 
#14355: 
#14356: 
#14351: 
    setargs                   3 0
    push           mm_parse.assembleline.dlist u64 
    push           mm_parse.assembleline.pname u64 
    push           9          i64 
    callfn         &mm_lib.createunit2 u64 
    setret                    u64 
    jump           #14348     
#14350: 
#14349: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           43         i64 
    casejumpeq     #14357     i64 0
    push           44         i64 
    casejumpeq     #14358     i64 0
    push           45         i64 
    casejumpeq     #14359     i64 0
    push           54         i64 
    casejumpeq     #14360     i64 0
    popstack                  i64 
    jump           #14361     
#14357: 
    push           39         i64 
    pop            mm_parse.assembleline.opc i64 
!doop::
#14362: 
    setargs                   1 0
    push           8          i64 
    callfn         &mm_lib.createunit0 u64 
    pop            mm_parse.assembleline.p u64 
    push           mm_parse.assembleline.opc i64 
    push           mm_parse.assembleline.p u64 
    push           40         
    popptroff                 i16 1 0
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #14363     
#14358: 
    push           40         i64 
    pop            mm_parse.assembleline.opc i64 
    jump           #14362     
    jump           #14363     
#14359: 
    push           41         i64 
    pop            mm_parse.assembleline.opc i64 
    jump           #14362     
    jump           #14363     
#14360: 
    push           52         i64 
    pop            mm_parse.assembleline.opc i64 
    jump           #14362     
    jump           #14363     
#14361: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           79         i64 
    jumpne         #14364     i64 
    setargs                   1 0
    push           8          i64 
    callfn         &mm_lib.createunit0 u64 
    pop            mm_parse.assembleline.p u64 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    push           90         i64 
    casejumpeq     #14365     i64 0
    push           86         i64 
    casejumpeq     #14366     i64 0
    push           87         i64 
    casejumpeq     #14367     i64 0
    push           88         i64 
    casejumpeq     #14368     i64 0
    popstack                  i64 
    jump           #14369     
#14365: 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           80         
    pushptroff                i32 1 0
    push           mm_parse.assembleline.p u64 
    push           40         
    popptroff                 i16 1 0
    jump           #14370     
#14366: 
    push           27         i64 
    push           mm_parse.assembleline.p u64 
    push           40         
    popptroff                 i16 1 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           80         
    pushptroff                i32 1 0
    push           mm_parse.assembleline.p u64 
    push           45         
    popptroff                 u8 1 0
    jump           #14370     
#14367: 
    push           59         i64 
    push           mm_parse.assembleline.p u64 
    push           40         
    popptroff                 i16 1 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           80         
    pushptroff                i32 1 0
    push           mm_parse.assembleline.p u64 
    push           45         
    popptroff                 u8 1 0
    jump           #14370     
#14368: 
    push           16         i64 
    push           mm_parse.assembleline.p u64 
    push           40         
    popptroff                 i16 1 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           80         
    pushptroff                i32 1 0
    push           mm_parse.assembleline.p u64 
    push           45         
    popptroff                 u8 1 0
    jump           #14370     
#14369: 
    setargs                   1 0
    push           "ASM"      u64 
    callproc       &mm_lex.ps 
    setargs                   1 0
    push           "x64 op expected" u64 
    callproc       &mm_support.serror 
#14370: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #14371     
#14364: 
    setargs                   1 0
    push           "ASM"      u64 
    callproc       &mm_lex.ps 
    setargs                   1 0
    push           "ASM???"   u64 
    callproc       &mm_support.serror 
#14371: 
#14363: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           6          i64 
    setjumpeq      #14372     i64 
    push           66         i64 
    setjumpeqx     #14372     i64 
    push           0          i64 
    pop            mm_parse.assembleline.noperands i64 
#14373: 
    setargs                   0 0
    callfn         &mm_parse.readassemopnd u64 
    pop            mm_parse.assembleline.q u64 
    push           &mm_parse.assembleline.noperands 
    incr                      i64 1
    push           mm_parse.assembleline.noperands i64 
    push           1          i64 
    casejumpeq     #14374     i64 0
    push           2          i64 
    casejumpeq     #14375     i64 0
    push           3          i64 
    casejumpeq     #14376     i64 0
    popstack                  i64 
    jump           #14377     
#14374: 
    push           mm_parse.assembleline.q u64 
    push           mm_parse.assembleline.p u64 
    push           16         
    popptroff                 u64 1 0
    push           1          i64 
    push           mm_parse.assembleline.p u64 
    push           1          
    popptroff                 u8 1 0
    jump           #14378     
#14375: 
    push           mm_parse.assembleline.q u64 
    push           mm_parse.assembleline.p u64 
    push           24         
    popptroff                 u64 1 0
    push           1          i64 
    push           mm_parse.assembleline.p u64 
    push           2          
    popptroff                 u8 1 0
    jump           #14378     
#14376: 
    push           mm_parse.assembleline.q u64 
    push           mm_parse.assembleline.p u64 
    push           32         
    popptroff                 u64 1 0
    push           1          i64 
    push           mm_parse.assembleline.p u64 
    push           3          
    popptroff                 u8 1 0
    jump           #14378     
#14377: 
    setargs                   1 0
    push           "Too many asm opnds" u64 
    callproc       &mm_support.serror 
#14378: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpeq         #14379     i64 
    jump           #14380     
    jump           #14381     
#14379: 
    setargs                   0 0
    callproc       &mm_lex.lex 
#14381: 
    jump           #14373     
#14380: 
#14372: 
    setargs                   1 0
    push           6          i64 
    callproc       &mm_parse.checksymbol 
    push           mm_parse.assembleline.p u64 
    setret                    u64 
    jump           #14348     
#14348: 
    retfn                     u64 
End


Proc mm_parse.readassemopnd: u64
    local          mm_parse.readassemopnd.p u64 
    local          mm_parse.readassemopnd.reg i64 
    local          mm_parse.readassemopnd.regix i64 
    local          mm_parse.readassemopnd.scale i64 
    local          mm_parse.readassemopnd.prefixmode i64 
    local          mm_parse.readassemopnd.pcode u64 
    procentry                 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           70         i64 
    casejumpeq     #14383     i64 0
    push           72         i64 
    casejumpeq     #14383     i64 0
    push           79         i64 
    casejumpeq     #14384     i64 0
    push           30         i64 
    casejumpeq     #14385     i64 0
    push           31         i64 
    casejumpeq     #14385     i64 0
    push           91         i64 
    casejumpeq     #14386     i64 0
    push           14         i64 
    casejumpeq     #14387     i64 0
    popstack                  i64 
    jump           #14388     
#14383: 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    setret                    u64 
    jump           #14389     
    jump           #14390     
#14384: 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           79         
    pushptroff                u8 1 0
    push           82         i64 
    casejumpeq     #14391     i64 0
    push           83         i64 
    casejumpeq     #14392     i64 0
    popstack                  i64 
    jump           #14393     
#14391: 
    setargs                   1 0
    push           10         i64 
    callfn         &mm_lib.createunit0 u64 
    pop            mm_parse.readassemopnd.p u64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           80         
    pushptroff                i32 1 0
    push           mm_parse.readassemopnd.p u64 
    push           40         
    popptroff                 i32 1 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           122        
    pushptroff                i16 1 0
    push           mm_parse.readassemopnd.p u64 
    push           44         
    popptroff                 u8 1 0
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.readassemopnd.p u64 
    setret                    u64 
    jump           #14389     
    jump           #14394     
#14392: 
    setargs                   1 0
    push           11         i64 
    callfn         &mm_lib.createunit0 u64 
    pop            mm_parse.readassemopnd.p u64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           80         
    pushptroff                i32 1 0
    push           mm_parse.readassemopnd.p u64 
    push           40         
    popptroff                 i32 1 0
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.readassemopnd.p u64 
    setret                    u64 
    jump           #14389     
    jump           #14394     
#14393: 
#14394: 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    setret                    u64 
    jump           #14389     
    jump           #14390     
#14385: 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    setret                    u64 
    jump           #14389     
    jump           #14390     
#14386: 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    push           21         i64 
    casejumpeq     #14395     i64 0
    push           22         i64 
    casejumpeq     #14395     i64 0
    push           23         i64 
    casejumpeq     #14395     i64 0
    push           2          i64 
    casejumpeq     #14395     i64 0
    popstack                  i64 
    jump           #14396     
#14395: 
    jump           #14397     
#14396: 
    setargs                   1 0
    push           "Bad prefix" u64 
    callproc       &mm_support.serror 
#14397: 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    pop            mm_parse.readassemopnd.prefixmode i64 
    setargs                   1 0
    push           14         i64 
    callproc       &mm_parse.lexchecksymbol 
    jump           #14398     
    jump           #14390     
#14387: 
    push           0          i64 
    pop            mm_parse.readassemopnd.prefixmode i64 
!gotprefix::
#14398: 
    push           0          i64 
    store          mm_parse.readassemopnd.regix i64 
    pop            mm_parse.readassemopnd.reg i64 
    push           0          u64 
    pop            mm_parse.readassemopnd.pcode u64 
    push           1          i64 
    pop            mm_parse.readassemopnd.scale i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           79         i64 
    jumpne         #14399     i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           79         
    pushptroff                u8 1 0
    push           82         i64 
    jumpne         #14399     i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           80         
    pushptroff                i32 1 0
    pop            mm_parse.readassemopnd.reg i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
#14399: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           30         i64 
    jumpne         #14400     i64 
    push           mm_lex.nexttoken u64 
    pushptr                   u8 
    push           79         i64 
    jumpne         #14400     i64 
    push           mm_lex.nexttoken u64 
    push           8          
    pushptroff                u64 1 0
    push           79         
    pushptroff                u8 1 0
    push           82         i64 
    jumpne         #14400     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
#14400: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           79         i64 
    jumpne         #14401     i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           79         
    pushptroff                u8 1 0
    push           82         i64 
    jumpne         #14401     i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           80         
    pushptroff                i32 1 0
    pop            mm_parse.readassemopnd.regix i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
#14401: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           32         i64 
    jumpne         #14402     i64 
    setargs                   1 0
    push           70         i64 
    callproc       &mm_parse.lexchecksymbol 
    push           &mm_decls.lx 
    push           8          
    pushptroff                i64 1 0
    store          mm_parse.readassemopnd.scale i64 
    push           1          i64 
    casejumpeq     #14403     i64 0
    push           2          i64 
    casejumpeq     #14403     i64 0
    push           4          i64 
    casejumpeq     #14403     i64 0
    push           8          i64 
    casejumpeq     #14403     i64 0
    popstack                  i64 
    jump           #14404     
#14403: 
    jump           #14405     
#14404: 
    setargs                   1 0
    push           "Bad scale" u64 
    callproc       &mm_support.serror 
#14405: 
    setargs                   0 0
    callproc       &mm_lex.lex 
#14402: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           30         i64 
    casejumpeq     #14406     i64 0
    push           31         i64 
    casejumpeq     #14406     i64 0
    push           70         i64 
    casejumpeq     #14406     i64 0
    push           79         i64 
    casejumpeq     #14406     i64 0
    push           12         i64 
    casejumpeq     #14406     i64 0
    push           176        i64 
    casejumpeq     #14406     i64 0
    popstack                  i64 
    jump           #14407     
#14406: 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readassemopnd.pcode u64 
    jump           #14408     
#14407: 
#14408: 
    setargs                   1 0
    push           15         i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    push           mm_parse.readassemopnd.pcode u64 
    push           12         i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readassemopnd.p u64 
    push           mm_parse.readassemopnd.regix i64 
    push           0          i64 
    jumpne         #14409     i64 
    push           mm_parse.readassemopnd.scale i64 
    push           1          i64 
    jumple         #14409     i64 
    push           mm_parse.readassemopnd.reg i64 
    pop            mm_parse.readassemopnd.regix i64 
    push           0          i64 
    pop            mm_parse.readassemopnd.reg i64 
#14409: 
    push           mm_parse.readassemopnd.pcode u64 
    push           0          u64 
    jumpne         #14410     u64 
    push           mm_parse.readassemopnd.reg i64 
    push           mm_parse.readassemopnd.regix i64 
    add                       i64 
    push           0          i64 
    jumpne         #14410     i64 
    setargs                   1 0
    push           "Empty []" u64 
    callproc       &mm_support.serror 
#14410: 
    push           mm_parse.readassemopnd.reg i64 
    push           mm_parse.readassemopnd.p u64 
    push           40         
    popptroff                 u8 1 0
    push           mm_parse.readassemopnd.regix i64 
    push           mm_parse.readassemopnd.p u64 
    push           41         
    popptroff                 u8 1 0
    push           mm_parse.readassemopnd.scale i64 
    push           mm_parse.readassemopnd.p u64 
    push           42         
    popptroff                 u8 1 0
    push           mm_parse.readassemopnd.prefixmode i64 
    push           mm_parse.readassemopnd.p u64 
    push           43         
    popptroff                 u8 1 0
    push           mm_parse.readassemopnd.p u64 
    setret                    u64 
    jump           #14389     
    jump           #14390     
#14388: 
    setargs                   1 0
    push           "BAD OPND" u64 
    callproc       &mm_lex.ps 
    setargs                   1 0
    push           "ASM: Bad operand?" u64 
    callproc       &mm_support.serror 
#14390: 
    push           0          u64 
    setret                    u64 
    jump           #14389     
#14389: 
    retfn                     u64 
End


Proc mm_parse.makeastring: u64
    local          mm_parse.makeastring.ulist u64 
    local          mm_parse.makeastring.ulistx u64 
    local          mm_parse.makeastring.p u64 
    local          mm_parse.makeastring.pconst u64 
    local          mm_parse.makeastring.s u64 
    local          mm_parse.makeastring.length i64 
    local          mm_parse.makeastring.av_1 i64 
    procentry                 
    push           0          u64 
    store          mm_parse.makeastring.ulistx u64 
    pop            mm_parse.makeastring.ulist u64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    pop            mm_parse.makeastring.s u64 
    push           mm_lex.astringlength i64 
    pop            mm_parse.makeastring.length i64 
#14412: 
    push           mm_lex.astringlength i64 
    pop            mm_parse.makeastring.av_1 i64 
    push           mm_parse.makeastring.av_1 i64 
    push           0          i64 
    jumple         #14413     i64 
#14414: 
    setargs                   2 0
    push           4          i64 
    push           mm_parse.makeastring.s u64 
    pushptr                   u8 
    callfn         &mm_lib.createconstunit u64 
    pop            mm_parse.makeastring.pconst u64 
    setargs                   3 0
    push           mm_parse.makeastring.pconst u64 
    push           &mm_parse.makeastring.ulistx 
    push           &mm_parse.makeastring.ulist 
    callproc       &mm_lib.addlistunit 
    push           &mm_parse.makeastring.s 
    incr                      u64 1
#14415: 
    to             #14414     
    opnd           mm_parse.makeastring.av_1 
#14413: 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    push           90         i64 
    jumpne         #14416     i64 
    setargs                   2 0
    push           4          i64 
    push           0          u64 
    callfn         &mm_lib.createconstunit u64 
    pop            mm_parse.makeastring.pconst u64 
    setargs                   3 0
    push           mm_parse.makeastring.pconst u64 
    push           &mm_parse.makeastring.ulistx 
    push           &mm_parse.makeastring.ulist 
    callproc       &mm_lib.addlistunit 
    push           &mm_parse.makeastring.length 
    incr                      i64 1
#14416: 
    setargs                   2 0
    push           mm_parse.makeastring.ulist u64 
    push           19         i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.makeastring.p u64 
    push           mm_parse.makeastring.length i64 
    push           mm_parse.makeastring.p u64 
    push           40         
    popptroff                 u32 1 0
    push           mm_parse.makeastring.p u64 
    setret                    u64 
    jump           #14417     
#14417: 
    retfn                     u64 
End


Proc mm_parse.readreturntype: i64
    param          mm_parse.readreturntype.owner u64 
    param          mm_parse.readreturntype.retmodes u64 
    local          mm_parse.readreturntype.nretvalues i64 
    procentry                 
    setargs                   2 0
    push           0          i64 
    push           mm_parse.readreturntype.owner u64 
    callfn         &mm_parse.readtypespec i64 
    push           mm_parse.readreturntype.retmodes u64 
    push           1          i64 
    popptroff                 i64 8 -8
    push           1          i64 
    pop            mm_parse.readreturntype.nretvalues i64 
    jump           #14419     
#14420: 
    push           mm_parse.readreturntype.nretvalues i64 
    push           4          i64 
    jumplt         #14421     i64 
    setargs                   1 0
    push           "Too many return values" u64 
    callproc       &mm_support.serror 
#14421: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    push           0          i64 
    push           mm_parse.readreturntype.owner u64 
    callfn         &mm_parse.readtypespec i64 
    push           mm_parse.readreturntype.retmodes u64 
    push           &mm_parse.readreturntype.nretvalues 
    incrload                  i64 1
    popptroff                 i64 8 -8
#14419: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    jumpeq         #14420     i64 
#14422: 
    push           mm_parse.readreturntype.nretvalues i64 
    setret                    i64 
    jump           #14423     
#14423: 
    retfn                     i64 
End


Proc mm_parse.readset: u64
    local          mm_parse.readset.length i64 
    local          mm_parse.readset.nkeyvalues i64 
    local          mm_parse.readset.oldirp i64 
    local          mm_parse.readset.p u64 
    local          mm_parse.readset.ulist u64 
    local          mm_parse.readset.ulistx u64 
    procentry                 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           15         i64 
    casejumpeq     #14425     i64 0
    push           7          i64 
    casejumpeq     #14426     i64 0
    popstack                  i64 
    jump           #14427     
#14425: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    push           0          u64 
    push           21         i64 
    callfn         &mm_lib.createunit1 u64 
    setret                    u64 
    jump           #14428     
    jump           #14429     
#14426: 
    setargs                   1 0
    push           15         i64 
    callproc       &mm_parse.lexchecksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    push           0          u64 
    push           22         i64 
    callfn         &mm_lib.createunit1 u64 
    setret                    u64 
    jump           #14428     
    jump           #14429     
#14427: 
#14429: 
    push           0          i64 
    pop            mm_parse.readset.length i64 
    push           0          i64 
    pop            mm_parse.readset.nkeyvalues i64 
    push           0          u64 
    store          mm_parse.readset.ulistx u64 
    pop            mm_parse.readset.ulist u64 
#14430: 
    push           mm_parse.inreadprint i64 
    pop            mm_parse.readset.oldirp i64 
    push           0          i64 
    pop            mm_parse.inreadprint i64 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readset.p u64 
    push           mm_parse.readset.oldirp i64 
    pop            mm_parse.inreadprint i64 
    push           mm_parse.readset.p u64 
    pushptr                   u8 
    push           28         i64 
    jumpne         #14431     i64 
    push           &mm_parse.readset.nkeyvalues 
    incr                      i64 1
#14431: 
    push           &mm_parse.readset.length 
    incr                      i64 1
    setargs                   3 0
    push           mm_parse.readset.p u64 
    push           &mm_parse.readset.ulistx 
    push           &mm_parse.readset.ulist 
    callproc       &mm_lib.addlistunit 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           5          i64 
    casejumpeq     #14432     i64 0
    push           6          i64 
    casejumpeq     #14433     i64 0
    push           15         i64 
    casejumpeq     #14434     i64 0
    popstack                  i64 
    jump           #14435     
#14432: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           15         i64 
    jumpne         #14436     i64 
    jump           #14437     
#14436: 
    jump           #14438     
#14433: 
    setargs                   1 0
    push           15         i64 
    callproc       &mm_parse.lexchecksymbol 
    jump           #14437     
    jump           #14438     
#14434: 
    jump           #14437     
    jump           #14438     
#14435: 
    setargs                   1 0
    push           "readset?" u64 
    callproc       &mm_support.serror 
#14438: 
    setargs                   0 0
    callproc       &mm_parse.skipsemi 
    jump           #14430     
#14437: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.readset.nkeyvalues i64 
    jumpfalse      #14439     i64 
    push           mm_parse.readset.length i64 
    push           mm_parse.readset.nkeyvalues i64 
    jumple         #14440     i64 
    setargs                   1 0
    push           "dict: mixed elements" u64 
    callproc       &mm_support.serror 
#14440: 
    setargs                   2 0
    push           mm_parse.readset.ulist u64 
    push           22         i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readset.p u64 
    jump           #14441     
#14439: 
    setargs                   2 0
    push           mm_parse.readset.ulist u64 
    push           21         i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readset.p u64 
#14441: 
    push           mm_parse.readset.length i64 
    push           mm_parse.readset.p u64 
    push           40         
    popptroff                 u32 1 0
    push           mm_parse.readset.p u64 
    setret                    u64 
    jump           #14428     
#14428: 
    retfn                     u64 
End


Proc mm_parse.istypestarter: i64
    procentry                 
    push           &mm_decls.typestarterset 
    push           &mm_decls.lx 
    pushptr                   u8 
    pushptroff                u8 1 0
    jumpfalse      #14443     i64 
    push           1          i64 
    setret                    i64 
    jump           #14444     
#14443: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           79         i64 
    jumpne         #14445     i64 
    push           mm_lex.nexttoken u64 
    pushptr                   u8 
    push           79         i64 
    casejumpeq     #14446     i64 0
    push           2          i64 
    casejumpeq     #14447     i64 0
    push           24         i64 
    casejumpeq     #14448     i64 0
    popstack                  i64 
    jump           #14449     
#14446: 
    push           1          i64 
    setret                    i64 
    jump           #14444     
    jump           #14450     
#14447: 
    push           mm_lex.nexttoken u64 
    push           1          i64 
    addrefoff                 u64 16 0
    pushptr                   u8 
    push           79         i64 
    jumpne         #14451     i64 
    push           mm_lex.nexttoken u64 
    push           2          i64 
    addrefoff                 u64 16 0
    pushptr                   u8 
    push           79         i64 
    jumpne         #14451     i64 
    push           1          i64 
    setret                    i64 
    jump           #14444     
#14451: 
    jump           #14450     
#14448: 
    push           1          i64 
    setret                    i64 
    jump           #14444     
    jump           #14450     
#14449: 
#14450: 
#14445: 
    push           0          i64 
    setret                    i64 
    jump           #14444     
#14444: 
    retfn                     i64 
End


Proc mm_parse.readassignment: u64
    local          mm_parse.readassignment.p u64 
    local          mm_parse.readassignment.pos i64 
    local          mm_parse.readassignment.opc i64 
    procentry                 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           79         i64 
    jumpne         #14453     i64 
    push           mm_lex.nexttoken u64 
    pushptr                   u8 
    push           9          i64 
    jumpne         #14453     i64 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    pop            mm_parse.readassignment.pos i64 
    setargs                   1 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    callfn         &mm_lib.createname u64 
    pop            mm_parse.readassignment.p u64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   3 0
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    push           mm_parse.readassignment.p u64 
    push           29         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readassignment.p u64 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    push           mm_parse.readassignment.p u64 
    push           4          
    popptroff                 u32 1 0
    push           mm_parse.readassignment.p u64 
    setret                    u64 
    jump           #14454     
#14453: 
    setargs                   0 0
    callfn         &mm_parse.readorterms u64 
    pop            mm_parse.readassignment.p u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    store          mm_parse.readassignment.opc i64 
    push           9          i64 
    jumpne         #14455     i64 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    pop            mm_parse.readassignment.pos i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           177        i64 
    jumpne         #14456     i64 
    setargs                   2 0
    push           mm_parse.readassignment.p u64 
    push           142        i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readassignment.p u64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #14457     
#14456: 
    setargs                   3 0
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    push           mm_parse.readassignment.p u64 
    push           29         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readassignment.p u64 
#14457: 
    push           mm_parse.readassignment.pos i64 
    push           mm_parse.readassignment.p u64 
    push           4          
    popptroff                 u32 1 0
#14455: 
    push           mm_parse.readassignment.p u64 
    setret                    u64 
    jump           #14454     
#14454: 
    retfn                     u64 
End


Proc mm_parse.readorterms: u64
    local          mm_parse.readorterms.p u64 
    local          mm_parse.readorterms.pos i64 
    procentry                 
    setargs                   0 0
    callfn         &mm_parse.readandterms u64 
    pop            mm_parse.readorterms.p u64 
    jump           #14459     
#14460: 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    pop            mm_parse.readorterms.pos i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           9          i64 
    jumpne         #14461     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   3 0
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    push           mm_parse.readorterms.p u64 
    push           38         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readorterms.p u64 
    push           172        i64 
    push           mm_parse.readorterms.p u64 
    push           60         
    popptroff                 u8 1 0
    push           mm_parse.readorterms.pos i64 
    push           mm_parse.readorterms.p u64 
    push           4          
    popptroff                 u32 1 0
    jump           #14462     
#14461: 
    setargs                   3 0
    setargs                   0 0
    callfn         &mm_parse.readandterms u64 
    push           mm_parse.readorterms.p u64 
    push           15         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readorterms.p u64 
    push           124        i64 
    push           mm_parse.readorterms.p u64 
    push           60         
    popptroff                 u8 1 0
    push           mm_parse.readorterms.pos i64 
    push           mm_parse.readorterms.p u64 
    push           4          
    popptroff                 u32 1 0
#14459: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           44         i64 
    jumpeq         #14460     i64 
#14462: 
    push           mm_parse.readorterms.p u64 
    setret                    u64 
    jump           #14463     
#14463: 
    retfn                     u64 
End


Proc mm_parse.readandterms: u64
    local          mm_parse.readandterms.p u64 
    local          mm_parse.readandterms.pos i64 
    procentry                 
    setargs                   0 0
    callfn         &mm_parse.readcmpterms u64 
    pop            mm_parse.readandterms.p u64 
    jump           #14465     
#14466: 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    pop            mm_parse.readandterms.pos i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           9          i64 
    jumpne         #14467     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   3 0
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    push           mm_parse.readandterms.p u64 
    push           38         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readandterms.p u64 
    push           171        i64 
    push           mm_parse.readandterms.p u64 
    push           60         
    popptroff                 u8 1 0
    push           mm_parse.readandterms.pos i64 
    push           mm_parse.readandterms.p u64 
    push           4          
    popptroff                 u32 1 0
    jump           #14468     
#14467: 
    setargs                   3 0
    setargs                   0 0
    callfn         &mm_parse.readcmpterms u64 
    push           mm_parse.readandterms.p u64 
    push           14         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readandterms.p u64 
    push           123        i64 
    push           mm_parse.readandterms.p u64 
    push           60         
    popptroff                 u8 1 0
    push           mm_parse.readandterms.pos i64 
    push           mm_parse.readandterms.p u64 
    push           4          
    popptroff                 u32 1 0
#14465: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           43         i64 
    jumpeq         #14466     i64 
#14468: 
    push           mm_parse.readandterms.p u64 
    setret                    u64 
    jump           #14469     
#14469: 
    retfn                     u64 
End


Proc mm_parse.readcmpterms: u64
    local          mm_parse.readcmpterms.p u64 
    local          mm_parse.readcmpterms.pos i64 
    local          mm_parse.readcmpterms.opc i64 
    local          mm_parse.readcmpterms.n i64 
    local          mm_parse.readcmpterms.ulist u64 
    local          mm_parse.readcmpterms.ulistx u64 
    local          mm_parse.readcmpterms.q u64 
    local          mm_parse.readcmpterms.genops block:4 
    procentry                 
    setargs                   0 0
    callfn         &mm_parse.readinterms u64 
    pop            mm_parse.readcmpterms.p u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           46         i64 
    setjumpeq      #14471     i64 
    push           47         i64 
    setjumpeqx     #14471     i64 
    push           mm_parse.readcmpterms.p u64 
    setret                    u64 
    jump           #14472     
#14471: 
    push           mm_parse.readcmpterms.p u64 
    store          mm_parse.readcmpterms.ulistx u64 
    pop            mm_parse.readcmpterms.ulist u64 
    setargs                   2 0
    push           mm_parse.readcmpterms.p u64 
    push           35         i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readcmpterms.p u64 
    push           0          i64 
    pop            mm_parse.readcmpterms.n i64 
    push           &mm_parse.readcmpterms.genops 
    clear                     block:4 
#14473: 
    push           &mm_decls.lx 
    pushptr                   u8 
    switch         #14474     46 47
    opnd           #14475     
#14474: 
    switchlabel    #14476     
    switchlabel    #14476     
    endswitch                 
#14476: 
    push           &mm_parse.readcmpterms.n 
    incr                      i64 1
    push           mm_parse.readcmpterms.n i64 
    push           4          i64 
    jumple         #14477     i64 
    setargs                   1 0
    push           "cmpchain: Too many items" u64 
    callproc       &mm_support.serror 
#14477: 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    push           &mm_parse.readcmpterms.genops 
    push           mm_parse.readcmpterms.n i64 
    popptroff                 u8 1 -1
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    pop            mm_parse.readcmpterms.pos i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.readinterms u64 
    pop            mm_parse.readcmpterms.q u64 
    setargs                   3 0
    push           mm_parse.readcmpterms.q u64 
    push           &mm_parse.readcmpterms.ulistx 
    push           &mm_parse.readcmpterms.ulist 
    callproc       &mm_lib.addlistunit 
    push           mm_parse.readcmpterms.pos i64 
    push           mm_parse.readcmpterms.q u64 
    push           4          
    popptroff                 u32 1 0
    jump           #14473     
#14475: 
    jump           #14478     
    jump           #14473     
#14478: 
    push           mm_parse.readcmpterms.n i64 
    push           1          i64 
    jumpne         #14479     i64 
    push           34         i64 
    push           mm_parse.readcmpterms.p u64 
    push           0          
    popptroff                 u8 1 0
    push           mm_parse.readcmpterms.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_parse.readcmpterms.q u64 
    push           &mm_parse.readcmpterms.genops 
    push           1          i64 
    pushptroff                u8 1 -1
    push           mm_parse.readcmpterms.p u64 
    push           60         
    popptroff                 u8 1 0
    push           mm_parse.readcmpterms.q u64 
    push           8          
    pushptroff                u64 1 0
    push           mm_parse.readcmpterms.p u64 
    push           24         
    popptroff                 u64 1 0
    push           0          u64 
    push           mm_parse.readcmpterms.q u64 
    push           8          
    popptroff                 u64 1 0
    push           1          i64 
    push           mm_parse.readcmpterms.p u64 
    push           2          
    popptroff                 u8 1 0
    jump           #14480     
#14479: 
    push           mm_parse.readcmpterms.genops block:4 
    push           mm_parse.readcmpterms.p u64 
    push           40         
    popptroff                 block:4 1 0
#14480: 
    push           mm_parse.readcmpterms.p u64 
    setret                    u64 
    jump           #14472     
#14472: 
    retfn                     u64 
End


Proc mm_parse.readinterms: u64
    local          mm_parse.readinterms.p u64 
    local          mm_parse.readinterms.pos i64 
    local          mm_parse.readinterms.opc i64 
    procentry                 
    setargs                   0 0
    callfn         &mm_parse.readrangeterm u64 
    pop            mm_parse.readinterms.p u64 
#14482: 
    push           &mm_decls.lx 
    pushptr                   u8 
    switch         #14483     50 51
    opnd           #14484     
#14483: 
    switchlabel    #14485     
    switchlabel    #14485     
    endswitch                 
#14485: 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    pop            mm_parse.readinterms.opc i64 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    pop            mm_parse.readinterms.pos i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   3 0
    setargs                   0 0
    callfn         &mm_parse.readrangeterm u64 
    push           mm_parse.readinterms.p u64 
    push           36         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readinterms.p u64 
    push           mm_parse.readinterms.opc i64 
    push           mm_parse.readinterms.p u64 
    push           60         
    popptroff                 u8 1 0
    push           mm_parse.readinterms.pos i64 
    push           mm_parse.readinterms.p u64 
    push           4          
    popptroff                 u32 1 0
    jump           #14482     
#14484: 
    jump           #14486     
    jump           #14482     
#14486: 
    push           mm_parse.readinterms.p u64 
    setret                    u64 
    jump           #14487     
#14487: 
    retfn                     u64 
End


Proc mm_parse.readrangeterm: u64
    local          mm_parse.readrangeterm.p u64 
    local          mm_parse.readrangeterm.pos i64 
    local          mm_parse.readrangeterm.opc i64 
    procentry                 
    setargs                   0 0
    callfn         &mm_parse.readaddterms u64 
    pop            mm_parse.readrangeterm.p u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           27         i64 
    jumpne         #14489     i64 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    pop            mm_parse.readrangeterm.pos i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   3 0
    setargs                   0 0
    callfn         &mm_parse.readaddterms u64 
    push           mm_parse.readrangeterm.p u64 
    push           20         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readrangeterm.p u64 
    push           mm_parse.readrangeterm.pos i64 
    push           mm_parse.readrangeterm.p u64 
    push           4          
    popptroff                 u32 1 0
#14489: 
    push           mm_parse.readrangeterm.p u64 
    setret                    u64 
    jump           #14490     
#14490: 
    retfn                     u64 
End


Proc mm_parse.readaddterms: u64
    local          mm_parse.readaddterms.p u64 
    local          mm_parse.readaddterms.pos i64 
    local          mm_parse.readaddterms.sym i64 
    local          mm_parse.readaddterms.tag i64 
    local          mm_parse.readaddterms.genop i64 
    procentry                 
    setargs                   0 0
    callfn         &mm_parse.readmulterms u64 
    pop            mm_parse.readaddterms.p u64 
#14492: 
    push           &mm_decls.lx 
    pushptr                   u8 
    store          mm_parse.readaddterms.sym i64 
    switch         #14493     30 42
    opnd           #14494     
#14493: 
    switchlabel    #14495     
    switchlabel    #14495     
    switchlabel    #14494     
    switchlabel    #14494     
    switchlabel    #14494     
    switchlabel    #14494     
    switchlabel    #14495     
    switchlabel    #14495     
    switchlabel    #14495     
    switchlabel    #14494     
    switchlabel    #14494     
    switchlabel    #14495     
    switchlabel    #14495     
    endswitch                 
#14495: 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    pop            mm_parse.readaddterms.pos i64 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    pop            mm_parse.readaddterms.genop i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           9          i64 
    jumpne         #14496     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   3 0
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    push           mm_parse.readaddterms.p u64 
    push           38         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readaddterms.p u64 
    push           &mm_tables.symbolgentoops 
    push           mm_parse.readaddterms.sym i64 
    pushptroff                u8 1 -1
    push           mm_parse.readaddterms.p u64 
    push           60         
    popptroff                 u8 1 0
    push           mm_parse.readaddterms.pos i64 
    push           mm_parse.readaddterms.p u64 
    push           4          
    popptroff                 u32 1 0
    jump           #14497     
#14496: 
    setargs                   3 0
    setargs                   0 0
    callfn         &mm_parse.readmulterms u64 
    push           mm_parse.readaddterms.p u64 
    push           36         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readaddterms.p u64 
    push           &mm_tables.symbolgenops 
    push           mm_parse.readaddterms.sym i64 
    pushptroff                u8 1 -1
    push           mm_parse.readaddterms.p u64 
    push           60         
    popptroff                 u8 1 0
    push           mm_parse.readaddterms.pos i64 
    push           mm_parse.readaddterms.p u64 
    push           4          
    popptroff                 u32 1 0
    jump           #14492     
#14494: 
    jump           #14497     
    jump           #14492     
#14497: 
    push           mm_parse.readaddterms.p u64 
    setret                    u64 
    jump           #14498     
#14498: 
    retfn                     u64 
End


Proc mm_parse.readmulterms: u64
    local          mm_parse.readmulterms.p u64 
    local          mm_parse.readmulterms.pos i64 
    local          mm_parse.readmulterms.sym i64 
    procentry                 
    setargs                   0 0
    callfn         &mm_parse.readpowerterms u64 
    pop            mm_parse.readmulterms.p u64 
#14500: 
    push           &mm_decls.lx 
    pushptr                   u8 
    store          mm_parse.readmulterms.sym i64 
    switch         #14501     32 40
    opnd           #14502     
#14501: 
    switchlabel    #14503     
    switchlabel    #14503     
    switchlabel    #14503     
    switchlabel    #14503     
    switchlabel    #14502     
    switchlabel    #14502     
    switchlabel    #14502     
    switchlabel    #14503     
    switchlabel    #14503     
    endswitch                 
#14503: 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    pop            mm_parse.readmulterms.pos i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           9          i64 
    jumpne         #14504     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   3 0
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    push           mm_parse.readmulterms.p u64 
    push           38         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readmulterms.p u64 
    push           &mm_tables.symbolgentoops 
    push           mm_parse.readmulterms.sym i64 
    pushptroff                u8 1 -1
    push           mm_parse.readmulterms.p u64 
    push           60         
    popptroff                 u8 1 0
    push           mm_parse.readmulterms.pos i64 
    push           mm_parse.readmulterms.p u64 
    push           4          
    popptroff                 u32 1 0
    jump           #14505     
#14504: 
    setargs                   3 0
    setargs                   0 0
    callfn         &mm_parse.readpowerterms u64 
    push           mm_parse.readmulterms.p u64 
    push           36         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readmulterms.p u64 
    push           &mm_tables.symbolgenops 
    push           mm_parse.readmulterms.sym i64 
    pushptroff                u8 1 -1
    push           mm_parse.readmulterms.p u64 
    push           60         
    popptroff                 u8 1 0
    push           mm_parse.readmulterms.pos i64 
    push           mm_parse.readmulterms.p u64 
    push           4          
    popptroff                 u32 1 0
    jump           #14500     
#14502: 
    jump           #14505     
    jump           #14500     
#14505: 
    push           mm_parse.readmulterms.p u64 
    setret                    u64 
    jump           #14506     
#14506: 
    retfn                     u64 
End


Proc mm_parse.readpowerterms: u64
    local          mm_parse.readpowerterms.p u64 
    local          mm_parse.readpowerterms.pos i64 
    procentry                 
    setargs                   0 0
    callfn         &mm_parse.readterm2 u64 
    pop            mm_parse.readpowerterms.p u64 
    jump           #14508     
#14509: 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    pop            mm_parse.readpowerterms.pos i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   3 0
    setargs                   0 0
    callfn         &mm_parse.readpowerterms u64 
    push           mm_parse.readpowerterms.p u64 
    push           36         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readpowerterms.p u64 
    push           150        i64 
    push           mm_parse.readpowerterms.p u64 
    push           60         
    popptroff                 u8 1 0
    push           mm_parse.readpowerterms.pos i64 
    push           mm_parse.readpowerterms.p u64 
    push           4          
    popptroff                 u32 1 0
#14508: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           48         i64 
    jumpeq         #14509     i64 
#14510: 
    push           mm_parse.readpowerterms.p u64 
    setret                    u64 
    jump           #14511     
#14511: 
    retfn                     u64 
End


Proc mm_parse.readterm2: u64
    local          mm_parse.readterm2.p u64 
    local          mm_parse.readterm2.q u64 
    local          mm_parse.readterm2.r u64 
    local          mm_parse.readterm2.pbyte u64 
    local          mm_parse.readterm2.a u64 
    local          mm_parse.readterm2.oldipl i64 
    local          mm_parse.readterm2.opc i64 
    local          mm_parse.readterm2.oldinrp i64 
    local          mm_parse.readterm2.pos i64 
    local          mm_parse.readterm2.shift i64 
    local          mm_parse.readterm2.t i64 
    procentry                 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    pop            mm_parse.readterm2.pos i64 
    setargs                   0 0
    callfn         &mm_parse.readterm u64 
    pop            mm_parse.readterm2.p u64 
#14513: 
    push           &mm_decls.lx 
    pushptr                   u8 
    switch         #14514     2 69
    opnd           #14515     
#14514: 
    switchlabel    #14516     
    switchlabel    #14515     
    switchlabel    #14517     
    switchlabel    #14515     
    switchlabel    #14515     
    switchlabel    #14518     
    switchlabel    #14515     
    switchlabel    #14515     
    switchlabel    #14515     
    switchlabel    #14515     
    switchlabel    #14519     
    switchlabel    #14515     
    switchlabel    #14520     
    switchlabel    #14515     
    switchlabel    #14515     
    switchlabel    #14515     
    switchlabel    #14521     
    switchlabel    #14515     
    switchlabel    #14515     
    switchlabel    #14515     
    switchlabel    #14515     
    switchlabel    #14515     
    switchlabel    #14515     
    switchlabel    #14515     
    switchlabel    #14515     
    switchlabel    #14515     
    switchlabel    #14515     
    switchlabel    #14515     
    switchlabel    #14515     
    switchlabel    #14515     
    switchlabel    #14515     
    switchlabel    #14515     
    switchlabel    #14515     
    switchlabel    #14515     
    switchlabel    #14515     
    switchlabel    #14515     
    switchlabel    #14515     
    switchlabel    #14515     
    switchlabel    #14515     
    switchlabel    #14515     
    switchlabel    #14515     
    switchlabel    #14515     
    switchlabel    #14515     
    switchlabel    #14515     
    switchlabel    #14515     
    switchlabel    #14515     
    switchlabel    #14515     
    switchlabel    #14515     
    switchlabel    #14515     
    switchlabel    #14515     
    switchlabel    #14515     
    switchlabel    #14515     
    switchlabel    #14515     
    switchlabel    #14515     
    switchlabel    #14515     
    switchlabel    #14515     
    switchlabel    #14515     
    switchlabel    #14515     
    switchlabel    #14515     
    switchlabel    #14515     
    switchlabel    #14515     
    switchlabel    #14515     
    switchlabel    #14515     
    switchlabel    #14515     
    switchlabel    #14515     
    switchlabel    #14515     
    switchlabel    #14515     
    switchlabel    #14522     
    endswitch                 
#14519: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.inreadprint i64 
    pop            mm_parse.readterm2.oldinrp i64 
    push           0          i64 
    pop            mm_parse.inreadprint i64 
    setargs                   2 0
    push           1          i64 
    push           1          i64 
    callfn         &mm_parse.readslist u64 
    pop            mm_parse.readterm2.q u64 
    setargs                   1 0
    push           13         i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           mm_parse.readterm2.p u64 
    pushptr                   u8 
    push           98         i64 
    jumpne         #14523     i64 
    push           mm_parse.readterm2.q u64 
    push           mm_parse.readterm2.p u64 
    push           16         
    popptroff                 u64 1 0
    push           1          i64 
    push           mm_parse.readterm2.p u64 
    push           1          
    popptroff                 u8 1 0
    jump           #14524     
#14523: 
    setargs                   3 0
    push           mm_parse.readterm2.q u64 
    push           mm_parse.readterm2.p u64 
    push           31         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readterm2.p u64 
#14524: 
    push           mm_parse.readterm2.oldinrp i64 
    pop            mm_parse.inreadprint i64 
    setargs                   1 0
    push           mm_parse.readterm2.p u64 
    callfn         &mm_parse.readcondsuffix u64 
    pop            mm_parse.readterm2.p u64 
    jump           #14513     
#14521: 
    setargs                   2 0
    push           mm_parse.readterm2.p u64 
    push           57         i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readterm2.p u64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #14513     
#14520: 
    setargs                   2 0
    push           0          i64 
    push           mm_parse.readterm2.p u64 
    callfn         &mm_parse.readindex u64 
    pop            mm_parse.readterm2.p u64 
    jump           #14513     
#14516: 
    setargs                   1 0
    push           mm_parse.readterm2.p u64 
    callfn         &mm_parse.readdotsuffix u64 
    pop            mm_parse.readterm2.p u64 
    jump           #14513     
#14518: 
    push           mm_parse.inreadprint i64 
    jumpfalse      #14525     i64 
    jump           #14526     
#14525: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readterm2.q u64 
    setargs                   3 0
    push           mm_parse.readterm2.q u64 
    push           mm_parse.readterm2.p u64 
    startmult                 
    push           mm_parse.inparamlist i64 
    jumpfalse      #14527     i64 
    push           27         i64 
    resetmult                 
    jump           #14528     
#14527: 
    push           28         i64 
    endmult                   
#14528: 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readterm2.p u64 
    jump           #14513     
#14522: 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    push           152        i64 
    casejumpeq     #14529     i64 0
    push           153        i64 
    casejumpeq     #14530     i64 0
    popstack                  i64 
    jump           #14531     
#14529: 
    push           156        i64 
    pop            mm_parse.readterm2.opc i64 
    jump           #14532     
#14530: 
    push           157        i64 
    pop            mm_parse.readterm2.opc i64 
    jump           #14532     
#14531: 
#14532: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    push           mm_parse.readterm2.p u64 
    push           40         i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readterm2.p u64 
    push           mm_parse.readterm2.opc i64 
    push           mm_parse.readterm2.p u64 
    push           60         
    popptroff                 u8 1 0
    jump           #14513     
#14517: 
    setargs                   1 0
    push           14         i64 
    callproc       &mm_parse.lexchecksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readterm2.q u64 
    push           mm_parse.readterm2.q u64 
    pushptr                   u8 
    push           20         i64 
    jumpne         #14533     i64 
    setargs                   3 0
    push           mm_parse.readterm2.q u64 
    push           mm_parse.readterm2.p u64 
    push           55         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readterm2.p u64 
    jump           #14534     
#14533: 
    setargs                   3 0
    push           mm_parse.readterm2.q u64 
    push           mm_parse.readterm2.p u64 
    push           56         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readterm2.p u64 
#14534: 
    setargs                   1 0
    push           15         i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #14513     
#14515: 
    jump           #14526     
    jump           #14513     
#14526: 
    push           mm_parse.readterm2.pos i64 
    push           mm_parse.readterm2.p u64 
    push           4          
    popptroff                 u32 1 0
    push           mm_parse.readterm2.p u64 
    setret                    u64 
    jump           #14535     
#14535: 
    retfn                     u64 
End


Proc mm_parse.readterm: u64
    local          mm_parse.readterm.p u64 
    local          mm_parse.readterm.q u64 
    local          mm_parse.readterm.r u64 
    local          mm_parse.readterm.pbyte u64 
    local          mm_parse.readterm.a u64 
    local          mm_parse.readterm.oldipl i64 
    local          mm_parse.readterm.opc i64 
    local          mm_parse.readterm.oldinrp i64 
    local          mm_parse.readterm.pos i64 
    local          mm_parse.readterm.shift i64 
    local          mm_parse.readterm.t i64 
    local          mm_parse.readterm.length i64 
    local          mm_parse.readterm.aa u128 
    procentry                 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    pop            mm_parse.readterm.pos i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    switch         #14537     4 177
    opnd           #14538     
#14537: 
    switchlabel    #14539     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14540     
    switchlabel    #14538     
    switchlabel    #14541     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14542     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14543     
    switchlabel    #14543     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14543     
    switchlabel    #14543     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14544     
    switchlabel    #14545     
    switchlabel    #14543     
    switchlabel    #14543     
    switchlabel    #14543     
    switchlabel    #14543     
    switchlabel    #14543     
    switchlabel    #14538     
    switchlabel    #14543     
    switchlabel    #14543     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14546     
    switchlabel    #14547     
    switchlabel    #14548     
    switchlabel    #14547     
    switchlabel    #14549     
    switchlabel    #14538     
    switchlabel    #14550     
    switchlabel    #14551     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14552     
    switchlabel    #14538     
    switchlabel    #14553     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14554     
    switchlabel    #14538     
    switchlabel    #14554     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14554     
    switchlabel    #14555     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14556     
    switchlabel    #14557     
    switchlabel    #14557     
    switchlabel    #14558     
    switchlabel    #14538     
    switchlabel    #14559     
    switchlabel    #14560     
    switchlabel    #14538     
    switchlabel    #14561     
    switchlabel    #14562     
    switchlabel    #14563     
    switchlabel    #14538     
    switchlabel    #14564     
    switchlabel    #14565     
    switchlabel    #14566     
    switchlabel    #14538     
    switchlabel    #14567     
    switchlabel    #14557     
    switchlabel    #14557     
    switchlabel    #14568     
    switchlabel    #14569     
    switchlabel    #14570     
    switchlabel    #14571     
    switchlabel    #14571     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14554     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14572     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14573     
    switchlabel    #14574     
    switchlabel    #14575     
    switchlabel    #14576     
    switchlabel    #14577     
    switchlabel    #14578     
    switchlabel    #14579     
    switchlabel    #14538     
    switchlabel    #14538     
    switchlabel    #14580     
    switchlabel    #14581     
    switchlabel    #14582     
    switchlabel    #14583     
    switchlabel    #14584     
    switchlabel    #14585     
    endswitch                 
#14552: 
    push           mm_lex.nexttoken u64 
    pushptr                   u8 
    push           21         i64 
    jumpne         #14586     i64 
    setargs                   0 0
    callfn         &mm_parse.readcast u64 
    pop            mm_parse.readterm.p u64 
    jump           #14587     
#14586: 
    setargs                   1 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    callfn         &mm_lib.createname u64 
    pop            mm_parse.readterm.p u64 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    push           mm_parse.readterm.p u64 
    push           4          
    popptroff                 u32 1 0
    setargs                   0 0
    callproc       &mm_lex.lex 
#14587: 
    jump           #14588     
#14547: 
    setargs                   2 0
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    callfn         &mm_lib.createconstunit u64 
    pop            mm_parse.readterm.p u64 
    push           1          i64 
    push           mm_parse.readterm.p u64 
    push           62         
    popptroff                 u8 1 0
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #14588     
#14550: 
    setargs                   2 0
    push           -1         i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    callfn         &mm_lib.createstringconstunit u64 
    pop            mm_parse.readterm.p u64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #14588     
#14551: 
    setargs                   0 0
    callfn         &mm_parse.makeastring u64 
    pop            mm_parse.readterm.p u64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #14588     
#14548: 
    setargs                   1 0
    push           "DEC CONST" u64 
    callproc       &mm_support.serror 
    jump           #14588     
#14549: 
    setargs                   1 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    callfn         &strlen    i64 
    pop            mm_parse.readterm.length i64 
    push           mm_parse.readterm.length i64 
    push           16         i64 
    jumple         #14589     i64 
    setargs                   1 0
    push           "Char const too long" u64 
    callproc       &mm_support.serror 
#14589: 
    push           mm_parse.readterm.length i64 
    push           8          i64 
    jumple         #14590     i64 
    push           0          i64 
    widenw                    u128 i64 
    pop            mm_parse.readterm.aa u128 
    setargs                   3 0
    push           mm_parse.readterm.length u64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           &mm_parse.readterm.aa 
    callproc       &memcpy    
    setargs                   2 0
    push           3          i64 
    push           &mm_parse.readterm.aa 
    callfn         &mm_lib.createconstunit u64 
    pop            mm_parse.readterm.p u64 
    jump           #14591     
#14590: 
    push           0          u64 
    pop            mm_parse.readterm.a u64 
    push           mm_parse.readterm.length i64 
    jumpfalse      #14592     i64 
    setargs                   3 0
    push           mm_parse.readterm.length u64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           &mm_parse.readterm.a 
    callproc       &memcpy    
#14592: 
    setargs                   2 0
    push           1          i64 
    push           mm_parse.readterm.a u64 
    callfn         &mm_lib.createconstunit u64 
    pop            mm_parse.readterm.p u64 
#14591: 
    push           1          i64 
    push           mm_parse.readterm.p u64 
    push           62         
    popptroff                 u8 1 0
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #14588     
#14540: 
    setargs                   0 0
    callfn         &mm_parse.readlbrack u64 
    pop            mm_parse.readterm.p u64 
    jump           #14588     
#14554: 
    setargs                   0 0
    callfn         &mm_parse.readcast u64 
    pop            mm_parse.readterm.p u64 
    jump           #14588     
#14543: 
    setargs                   0 0
    callfn         &mm_parse.readopc u64 
    pop            mm_parse.readterm.p u64 
    jump           #14588     
#14544: 
    push           mm_lex.nexttoken u64 
    pushptr                   u8 
    push           9          i64 
    jumpne         #14593     i64 
    setargs                   0 0
    callfn         &mm_parse.readopc u64 
    pop            mm_parse.readterm.p u64 
    jump           #14594     
#14593: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    setargs                   0 0
    callfn         &mm_parse.readterm2 u64 
    push           17         i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readterm.p u64 
    push           131        i64 
    push           mm_parse.readterm.p u64 
    push           60         
    popptroff                 u8 1 0
#14594: 
    jump           #14588     
#14545: 
    push           mm_lex.nexttoken u64 
    pushptr                   u8 
    push           9          i64 
    jumpne         #14595     i64 
    setargs                   0 0
    callfn         &mm_parse.readopc u64 
    pop            mm_parse.readterm.p u64 
    jump           #14596     
#14595: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    setargs                   0 0
    callfn         &mm_parse.readterm2 u64 
    push           18         i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readterm.p u64 
    push           132        i64 
    push           mm_parse.readterm.p u64 
    push           60         
    popptroff                 u8 1 0
#14596: 
    jump           #14588     
#14541: 
    setargs                   0 0
    callfn         &mm_parse.readset u64 
    pop            mm_parse.readterm.p u64 
    jump           #14588     
#14546: 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    pop            mm_parse.readterm.opc i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    setargs                   0 0
    callfn         &mm_parse.readterm2 u64 
    push           40         i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readterm.p u64 
    push           mm_parse.readterm.opc i64 
    push           mm_parse.readterm.p u64 
    push           60         
    popptroff                 u8 1 0
    jump           #14588     
#14569: 
    setargs                   0 0
    callfn         &mm_parse.readsprint u64 
    pop            mm_parse.readterm.p u64 
    jump           #14588     
#14571: 
    setargs                   0 0
    callfn         &mm_parse.readsread u64 
    pop            mm_parse.readterm.p u64 
    jump           #14588     
#14542: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    setargs                   0 0
    callfn         &mm_parse.readterm2 u64 
    push           59         i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readterm.p u64 
    push           mm_parse.readterm.p u64 
    push           16         
    pushptroff                u64 1 0
    pushptr                   u8 
    push           31         i64 
    jumpne         #14597     i64 
    push           mm_parse.readterm.p u64 
    push           16         
    pushptroff                u64 1 0
    push           24         
    pushptroff                u64 1 0
    jumpfalse      #14598     u64 
    setargs                   1 0
    push           "Params not allowed" u64 
    callproc       &mm_support.serror 
#14598: 
    push           mm_parse.readterm.p u64 
    push           16         
    pushptroff                u64 1 0
    push           16         
    pushptroff                u64 1 0
    push           mm_parse.readterm.p u64 
    push           16         
    popptroff                 u64 1 0
#14597: 
    jump           #14588     
#14539: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    setargs                   0 0
    callfn         &mm_parse.readterm2 u64 
    push           60         i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readterm.p u64 
    jump           #14588     
#14577: 
    setargs                   0 0
    callfn         &mm_parse.readcompilervar u64 
    pop            mm_parse.readterm.p u64 
    jump           #14588     
#14582: 
    setargs                   2 0
    push           4          i64 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    callfn         &mm_lib.createconstunit u64 
    pop            mm_parse.readterm.p u64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #14588     
#14578: 
    push           mm_parse.intabledata i64 
    jumpfalse      #14599     i64 
    setargs                   2 0
    push           -1         i64 
    push           mm_parse.tabledataname u64 
    callfn         &mm_lib.createstringconstunit u64 
    pop            mm_parse.readterm.p u64 
    jump           #14600     
#14599: 
    push           mm_parse.ndollar i64 
    push           0          i64 
    jumpgt         #14601     i64 
    setargs                   1 0
    push           "[$] No array" u64 
    callproc       &mm_support.serror 
#14601: 
    setargs                   2 0
    push           &mm_parse.dollarstack 
    push           mm_parse.ndollar i64 
    pushptroff                u64 8 -8
    push           37         i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readterm.p u64 
    push           202        i64 
    push           mm_parse.readterm.p u64 
    push           60         
    popptroff                 u8 1 0
#14600: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #14588     
#14575: 
    setargs                   0 0
    callfn         &mm_parse.readcastx u64 
    pop            mm_parse.readterm.p u64 
    jump           #14588     
#14576: 
    setargs                   1 0
    push           12         i64 
    callproc       &mm_parse.lexchecksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           65         i64 
    callfn         &mm_lib.createunit0 u64 
    pop            mm_parse.readterm.p u64 
    setargs                   2 0
    push           0          i64 
    push           mm_decls.currproc u64 
    callfn         &mm_parse.readtypespec i64 
    push           mm_parse.readterm.p u64 
    push           16         
    popptroff                 i64 1 0
    setargs                   1 0
    push           13         i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #14588     
#14580: 
    setargs                   1 0
    push           12         i64 
    callproc       &mm_parse.lexchecksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readterm.p u64 
    setargs                   1 0
    push           5          i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readterm.q u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           13         i64 
    jumpne         #14602     i64 
    push           mm_parse.readterm.q u64 
    pushptr                   u8 
    push           20         i64 
    jumpne         #14602     i64 
    push           mm_parse.readterm.q u64 
    push           24         
    pushptroff                u64 1 0
    pop            mm_parse.readterm.r u64 
    push           mm_parse.readterm.q u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_parse.readterm.q u64 
    jump           #14603     
#14602: 
    setargs                   1 0
    push           5          i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readterm.r u64 
    setargs                   1 0
    push           13         i64 
    callproc       &mm_parse.checksymbol 
#14603: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   3 0
    push           mm_parse.readterm.q u64 
    push           mm_parse.readterm.p u64 
    push           36         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readterm.q u64 
    push           115        i64 
    push           mm_parse.readterm.q u64 
    push           60         
    popptroff                 u8 1 0
    setargs                   3 0
    push           mm_parse.readterm.r u64 
    push           mm_parse.readterm.q u64 
    push           36         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readterm.p u64 
    push           114        i64 
    push           mm_parse.readterm.p u64 
    push           60         
    popptroff                 u8 1 0
    jump           #14588     
#14567: 
    setargs                   1 0
    push           108        i64 
    callfn         &mm_parse.readgoto u64 
    pop            mm_parse.readterm.p u64 
    jump           #14588     
#14555: 
    setargs                   0 0
    callfn         &mm_parse.readif u64 
    pop            mm_parse.readterm.p u64 
    jump           #14588     
#14556: 
    setargs                   0 0
    callfn         &mm_parse.readunless u64 
    pop            mm_parse.readterm.p u64 
    jump           #14588     
#14557: 
    setargs                   0 0
    callfn         &mm_parse.readswitchcase u64 
    pop            mm_parse.readterm.p u64 
    jump           #14588     
#14558: 
    setargs                   0 0
    callfn         &mm_parse.readrecase u64 
    pop            mm_parse.readterm.p u64 
    jump           #14588     
#14559: 
    setargs                   0 0
    callfn         &mm_parse.readfor u64 
    pop            mm_parse.readterm.p u64 
    jump           #14588     
#14560: 
    setargs                   0 0
    callfn         &mm_parse.readto u64 
    pop            mm_parse.readterm.p u64 
    jump           #14588     
#14561: 
    setargs                   0 0
    callfn         &mm_parse.readdo u64 
    pop            mm_parse.readterm.p u64 
    jump           #14588     
#14562: 
    setargs                   0 0
    callfn         &mm_parse.readwhile u64 
    pop            mm_parse.readterm.p u64 
    jump           #14588     
#14563: 
    setargs                   0 0
    callfn         &mm_parse.readrepeat u64 
    pop            mm_parse.readterm.p u64 
    jump           #14588     
#14566: 
    setargs                   0 0
    callfn         &mm_parse.readloopcontrol u64 
    pop            mm_parse.readterm.p u64 
    jump           #14588     
#14564: 
    setargs                   0 0
    callfn         &mm_parse.readreturn u64 
    pop            mm_parse.readterm.p u64 
    jump           #14588     
#14565: 
    setargs                   0 0
    callfn         &mm_parse.readstop u64 
    pop            mm_parse.readterm.p u64 
    jump           #14588     
#14568: 
    setargs                   0 0
    callfn         &mm_parse.readprint u64 
    pop            mm_parse.readterm.p u64 
    jump           #14588     
#14570: 
    setargs                   0 0
    callfn         &mm_parse.readread u64 
    pop            mm_parse.readterm.p u64 
    jump           #14588     
#14572: 
    setargs                   0 0
    callfn         &mm_parse.readtry u64 
    pop            mm_parse.readterm.p u64 
    jump           #14588     
#14573: 
    setargs                   0 0
    callfn         &mm_parse.readraise u64 
    pop            mm_parse.readterm.p u64 
    jump           #14588     
#14574: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    push           137        i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readterm.p u64 
    push           1          i64 
    pop            mm_parse.yieldseen i64 
    jump           #14588     
#14581: 
    setargs                   1 0
    push           12         i64 
    callproc       &mm_parse.lexchecksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readterm.p u64 
    setargs                   1 0
    push           5          i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readterm.q u64 
    setargs                   1 0
    push           13         i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   3 0
    push           mm_parse.readterm.q u64 
    push           mm_parse.readterm.p u64 
    push           119        i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_parse.readterm.p u64 
    jump           #14588     
#14579: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    push           139        i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readterm.p u64 
    jump           #14588     
#14583: 
    push           1          i64 
    push           mm_decls.currproc u64 
    push           112        
    popptroff                 u8 1 0
    push           1          i64 
    pop            mm_decls.assemmode i64 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #14604     i64 
    setargs                   0 0
    callfn         &mm_parse.readassemline u64 
    pop            mm_parse.readterm.p u64 
    jump           #14605     
#14604: 
    setargs                   0 0
    callfn         &mm_parse.readassemblock u64 
    pop            mm_parse.readterm.p u64 
#14605: 
    push           0          i64 
    pop            mm_decls.assemmode i64 
    jump           #14588     
#14584: 
    setargs                   1 0
    push           98         i64 
    callfn         &mm_lib.createunit0 u64 
    pop            mm_parse.readterm.p u64 
    push           &mm_decls.lx 
    push           1          
    pushptroff                u8 1 0
    push           mm_parse.readterm.p u64 
    push           40         
    popptroff                 i16 1 0
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #14588     
#14553: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    setargs                   0 0
    callfn         &mm_parse.readterm2 u64 
    push           13         i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readterm.p u64 
    jump           #14588     
#14585: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   2 0
    setargs                   0 0
    callfn         &mm_parse.readterm2 u64 
    push           142        i64 
    callfn         &mm_lib.createunit1 u64 
    pop            mm_parse.readterm.p u64 
    jump           #14588     
#14538: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &mm_tables.symbolnames 
    push           &mm_decls.lx 
    pushptr                   u8 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "LX.SYMBOL=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_decls.lx 
    pushptr                   u8 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "readterm?" u64 
    callproc       &mm_support.serror 
#14588: 
    push           mm_parse.readterm.pos i64 
    push           mm_parse.readterm.p u64 
    push           4          
    popptroff                 u32 1 0
    push           mm_parse.readterm.p u64 
    setret                    u64 
    jump           #14606     
#14606: 
    retfn                     u64 
End


Proc mm_parse.readxunit: u64
    procentry                 
    setargs                   1 0
    push           0          i64 
    callfn         &mm_parse.readsunit u64 
    setret                    u64 
    jump           #14608     
#14608: 
    retfn                     u64 
End


Proc mm_parse.readsunit: u64
    param          mm_parse.readsunit.inwhile i64 
    local          mm_parse.readsunit.pos i64 
    local          mm_parse.readsunit.m i64 
    local          mm_parse.readsunit.sym i64 
    local          mm_parse.readsunit.opc i64 
    local          mm_parse.readsunit.ulist u64 
    local          mm_parse.readsunit.ulistx u64 
    local          mm_parse.readsunit.p u64 
    local          mm_parse.readsunit.q u64 
    local          mm_parse.readsunit.r u64 
    local          mm_parse.readsunit.stname u64 
    procentry                 
    push           &mm_decls.lx 
    push           4          
    pushptroff                u32 1 0
    pop            mm_parse.readsunit.pos i64 
    push           0          u64 
    store          mm_parse.readsunit.ulistx u64 
    pop            mm_parse.readsunit.ulist u64 
#14610: 
    jump           #14611     
#14612: 
    setargs                   0 0
    callproc       &mm_lex.lex 
#14611: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           6          i64 
    jumpeq         #14612     i64 
#14613: 
    push           &mm_decls.lx 
    pushptr                   u8 
    switch         #14614     6 170
    opnd           #14615     
#14614: 
    switchlabel    #14616     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14617     
    switchlabel    #14618     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14617     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14619     
    switchlabel    #14615     
    switchlabel    #14620     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14621     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14618     
    switchlabel    #14615     
    switchlabel    #14618     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14618     
    switchlabel    #14615     
    switchlabel    #14617     
    switchlabel    #14617     
    switchlabel    #14617     
    switchlabel    #14617     
    switchlabel    #14617     
    switchlabel    #14615     
    switchlabel    #14617     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14617     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14622     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14617     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14623     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14624     
    switchlabel    #14624     
    switchlabel    #14615     
    switchlabel    #14625     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14626     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14618     
    switchlabel    #14627     
    switchlabel    #14627     
    switchlabel    #14618     
    switchlabel    #14615     
    switchlabel    #14618     
    switchlabel    #14628     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14629     
    switchlabel    #14630     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14625     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14631     
    switchlabel    #14615     
    switchlabel    #14617     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14615     
    switchlabel    #14632     
    endswitch                 
#14631: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           144        i64 
    setjumpeq      #14633     i64 
    push           143        i64 
    setjumpne      #14634     i64 
#14633: 
    push           &mm_decls.lx 
    pushptr                   u8 
    pop            mm_parse.readsunit.opc i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #14635     
#14634: 
    push           0          i64 
    pop            mm_parse.readsunit.opc i64 
#14635: 
    setargs                   5 0
    push           mm_parse.readsunit.opc i64 
    push           11         i64 
    push           1          i64 
    push           0          i64 
    push           mm_decls.currproc u64 
    callproc       &mm_parse.readvardef 
    jump           #14636     
#14624: 
    setargs                   3 0
    push           0          i64 
    push           0          i64 
    push           mm_decls.currproc u64 
    callproc       &mm_parse.readprocdef 
    jump           #14636     
#14618: 
    push           mm_lex.nexttoken u64 
    pushptr                   u8 
    push           12         i64 
    setjumpeq      #14637     i64 
    push           21         i64 
    setjumpeq      #14637     i64 
    push           2          i64 
    setjumpne      #14638     i64 
#14637: 
    jump           #14639     
    jump           #14640     
#14638: 
    push           0          i64 
    pop            mm_parse.readsunit.sym i64 
    jump           #14641     
#14640: 
    jump           #14636     
#14627: 
    push           &mm_decls.lx 
    pushptr                   u8 
    pop            mm_parse.readsunit.sym i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
!dovar::
#14641: 
    setargs                   5 0
    push           mm_parse.readsunit.sym i64 
    push           12         i64 
    push           0          i64 
    push           0          i64 
    push           mm_decls.currproc u64 
    callfn         &mm_parse.readvardef u64 
    pop            mm_parse.readsunit.q u64 
    jump           #14642     
#14643: 
    push           mm_parse.readsunit.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_parse.readsunit.r u64 
    push           0          u64 
    push           mm_parse.readsunit.q u64 
    push           8          
    popptroff                 u64 1 0
    setargs                   3 0
    push           mm_parse.readsunit.q u64 
    push           &mm_parse.readsunit.ulistx 
    push           &mm_parse.readsunit.ulist 
    callproc       &mm_lib.addlistunit 
    push           mm_parse.readsunit.r u64 
    pop            mm_parse.readsunit.q u64 
#14642: 
    push           mm_parse.readsunit.q u64 
    jumptrue       #14643     u64 
#14644: 
    jump           #14636     
#14626: 
    setargs                   2 0
    push           0          i64 
    push           mm_decls.currproc u64 
    callproc       &mm_parse.readtypedef 
    jump           #14636     
#14629: 
    setargs                   2 0
    push           0          i64 
    push           mm_decls.currproc u64 
    callproc       &mm_parse.readconstdef 
    jump           #14636     
#14625: 
    setargs                   2 0
    push           0          i64 
    push           mm_decls.currproc u64 
    callproc       &mm_parse.readclassdef 
    jump           #14636     
#14620: 
    setargs                   1 0
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    callproc       &mm_parse.adddocstring 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #14636     
#14630: 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   3 0
    push           0          i64 
    push           0          i64 
    push           mm_decls.currproc u64 
    callproc       &mm_parse.readenumtype 
    jump           #14636     
#14628: 
    setargs                   2 0
    push           0          i64 
    push           mm_decls.currproc u64 
    callproc       &mm_parse.readmacrodef 
    jump           #14636     
#14632: 
    setargs                   2 0
    push           0          i64 
    push           mm_decls.currproc u64 
    callproc       &mm_parse.readtabledef 
    jump           #14636     
#14619: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mm_decls.currproc u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Unexpected EOF in proc" u64 
    callproc       &mm_support.serror 
    jump           #14636     
#14617: 
    jump           #14645     
    jump           #14636     
#14621: 
    push           mm_lex.nexttoken u64 
    pushptr                   u8 
    push           8          i64 
    casejumpeq     #14646     i64 0
    push           79         i64 
    casejumpeq     #14647     i64 0
    popstack                  i64 
    jump           #14648     
#14646: 
    setargs                   1 0
    push           109        i64 
    callfn         &mm_lib.createunit0 u64 
    pop            mm_parse.readsunit.p u64 
    setargs                   3 0
    push           17         i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           mm_decls.currproc u64 
    callfn         &mm_lib.getduplnameptr u64 
    pop            mm_parse.readsunit.stname u64 
    setargs                   2 0
    push           mm_parse.readsunit.stname u64 
    push           mm_decls.currproc u64 
    callproc       &mm_lib.adddef 
    push           mm_parse.readsunit.stname u64 
    push           mm_parse.readsunit.p u64 
    push           16         
    popptroff                 u64 1 0
    push           mm_parse.try_level i64 
    push           mm_parse.readsunit.p u64 
    push           40         
    popptroff                 i32 1 0
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           6          i64 
    push           &mm_decls.lx 
    push           0          
    popptroff                 u8 1 0
    setargs                   3 0
    push           mm_parse.readsunit.p u64 
    push           &mm_parse.readsunit.ulistx 
    push           &mm_parse.readsunit.ulist 
    callproc       &mm_lib.addlistunit 
    jump           #14649     
#14647: 
    push           143        i64 
    pop            mm_parse.readsunit.sym i64 
    jump           #14641     
    jump           #14639     
    jump           #14649     
#14648: 
    jump           #14639     
#14649: 
    jump           #14636     
#14622: 
    push           mm_parse.readsunit.inwhile i64 
    jumpfalse      #14650     i64 
    jump           #14645     
#14650: 
    jump           #14639     
    jump           #14636     
#14616: 
    jump           #14636     
#14623: 
    jump           #14645     
    jump           #14636     
#14615: 
!doexec::
#14639: 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    pop            mm_parse.readsunit.p u64 
!doexec2::
#14651: 
    push           mm_parse.readsunit.p u64 
    pushptr                   u8 
    push           3          i64 
    jumpne         #14652     i64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           79         i64 
    jumpne         #14652     i64 
    setargs                   1 0
    push           "Possibly var/let needed" u64 
    callproc       &mm_support.serror 
#14652: 
    setargs                   3 0
    push           mm_parse.readsunit.p u64 
    push           &mm_parse.readsunit.ulistx 
    push           &mm_parse.readsunit.ulist 
    callproc       &mm_lib.addlistunit 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           113        i64 
    jumpne         #14653     i64 
    jump           #14645     
#14653: 
#14636: 
#14654: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           6          i64 
    jumpeq         #14610     i64 
#14645: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           13         i64 
    casejumpeq     #14655     i64 0
    push           98         i64 
    casejumpeq     #14655     i64 0
    push           99         i64 
    casejumpeq     #14655     i64 0
    push           100        i64 
    casejumpeq     #14655     i64 0
    push           116        i64 
    casejumpeq     #14655     i64 0
    push           109        i64 
    casejumpeq     #14655     i64 0
    push           113        i64 
    casejumpeq     #14655     i64 0
    push           101        i64 
    casejumpeq     #14655     i64 0
    push           102        i64 
    casejumpeq     #14655     i64 0
    push           161        i64 
    casejumpeq     #14655     i64 0
    push           104        i64 
    casejumpeq     #14655     i64 0
    push           17         i64 
    casejumpeq     #14655     i64 0
    push           5          i64 
    casejumpeq     #14655     i64 0
    push           19         i64 
    casejumpeq     #14655     i64 0
    push           120        i64 
    casejumpeq     #14655     i64 0
    popstack                  i64 
    jump           #14656     
#14655: 
    jump           #14657     
#14656: 
    setargs                   1 0
    push           "Readsunit: \";\" expected, or bad unit starter" u64 
    callproc       &mm_support.serror 
#14657: 
    startmult                 
    push           mm_parse.readsunit.ulist u64 
    push           0          u64 
    jumpeq         #14658     u64 
    push           mm_parse.readsunit.ulist u64 
    push           8          
    pushptroff                u64 1 0
    jumpfalse      #14659     u64 
#14658: 
    setargs                   2 0
    push           mm_parse.readsunit.ulist u64 
    push           5          i64 
    callfn         &mm_lib.createunit1 u64 
    resetmult                 
    jump           #14660     
#14659: 
    push           mm_parse.readsunit.ulist u64 
    endmult                   
#14660: 
    setret                    u64 
    jump           #14661     
#14661: 
    retfn                     u64 
End


Proc mm_parse.readmacrodef:
    param          mm_parse.readmacrodef.owner u64 
    param          mm_parse.readmacrodef.isglobal i64 
    local          mm_parse.readmacrodef.nameptr u64 
    local          mm_parse.readmacrodef.stmacro u64 
    local          mm_parse.readmacrodef.paramlist u64 
    local          mm_parse.readmacrodef.paramlistx u64 
    local          mm_parse.readmacrodef.stname u64 
    procentry                 
    setargs                   1 0
    push           79         i64 
    callproc       &mm_parse.lexchecksymbol 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    pop            mm_parse.readmacrodef.nameptr u64 
    setargs                   3 0
    push           20         i64 
    push           mm_parse.readmacrodef.nameptr u64 
    push           mm_parse.readmacrodef.owner u64 
    callfn         &mm_lib.getduplnameptr u64 
    pop            mm_parse.readmacrodef.stmacro u64 
    setargs                   2 0
    push           mm_parse.readmacrodef.stmacro u64 
    push           mm_parse.readmacrodef.owner u64 
    callproc       &mm_lib.adddef 
    push           mm_parse.readmacrodef.stmacro u64 
    pop            mm_parse.readmacrodef.owner u64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           0          u64 
    store          mm_parse.readmacrodef.paramlistx u64 
    pop            mm_parse.readmacrodef.paramlist u64 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           12         i64 
    jumpne         #14663     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           13         i64 
    jumpeq         #14664     i64 
#14665: 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           79         i64 
    casejumpeq     #14666     i64 0
    popstack                  i64 
    jump           #14667     
#14666: 
    setargs                   3 0
    push           21         i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           mm_parse.readmacrodef.owner u64 
    callfn         &mm_lib.getduplnameptr u64 
    pop            mm_parse.readmacrodef.stname u64 
    setargs                   2 0
    push           mm_parse.readmacrodef.stname u64 
    push           mm_parse.readmacrodef.owner u64 
    callproc       &mm_lib.adddef 
    setargs                   3 0
    push           mm_parse.readmacrodef.stname u64 
    push           &mm_parse.readmacrodef.paramlistx 
    push           &mm_parse.readmacrodef.paramlist 
    callproc       &mm_parse.addlistparam 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           mm_parse.readmacrodef.stname u64 
    push           104        
    popptroff                 u64 1 0
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           13         i64 
    jumpne         #14668     i64 
    jump           #14669     
#14668: 
    setargs                   1 0
    push           5          i64 
    callproc       &mm_parse.checksymbol 
    setargs                   0 0
    callproc       &mm_lex.lex 
    jump           #14670     
#14667: 
    setargs                   1 0
    push           "macro def params" u64 
    callproc       &mm_support.serror 
#14670: 
    jump           #14665     
#14669: 
#14664: 
    setargs                   0 0
    callproc       &mm_lex.lex 
#14663: 
    push           mm_parse.readmacrodef.paramlist u64 
    push           mm_parse.readmacrodef.stmacro u64 
    push           104        
    popptroff                 u64 1 0
    push           mm_parse.readmacrodef.isglobal u64 
    push           mm_parse.readmacrodef.stmacro u64 
    push           92         
    addrefoff                 u64 1 0
    push           0          i64 
    push           1          i64 
    popdotslice               u16 
    setargs                   0 0
    callproc       &mm_parse.checkequals 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    push           mm_parse.readmacrodef.stmacro u64 
    push           64         
    popptroff                 u64 1 0
#14671: 
    retproc                   
End


Proc mm_parse.readimportalias:
    param          mm_parse.readimportalias.dimport u64 
    local          mm_parse.readimportalias.stmacro u64 
    procentry                 
    setargs                   1 0
    push           79         i64 
    callproc       &mm_parse.lexchecksymbol 
    setargs                   3 0
    push           20         i64 
    push           &mm_decls.lx 
    push           8          
    pushptroff                u64 1 0
    push           mm_decls.stmodule u64 
    callfn         &mm_lib.getduplnameptr u64 
    pop            mm_parse.readimportalias.stmacro u64 
    setargs                   2 0
    push           mm_parse.readimportalias.stmacro u64 
    push           mm_decls.stmodule u64 
    callproc       &mm_lib.adddef 
    setargs                   0 0
    callproc       &mm_lex.lex 
    push           0          u64 
    push           mm_parse.readimportalias.stmacro u64 
    push           104        
    popptroff                 u64 1 0
    setargs                   1 0
    push           mm_parse.readimportalias.dimport u64 
    callfn         &mm_lib.createname u64 
    push           mm_parse.readimportalias.stmacro u64 
    push           64         
    popptroff                 u64 1 0
#14673: 
    retproc                   
End


Proc mm_parse.domappedalias:
    param          mm_parse.domappedalias.dimport u64 
    param          mm_parse.domappedalias.stimport u64 
    local          mm_parse.domappedalias.stmacro u64 
    procentry                 
    setargs                   2 0
    push           mm_parse.domappedalias.stimport u64 
    pushptr                   u64 
    push           mm_parse.domappedalias.dimport u64 
    pushptr                   u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #14675     i64 
    jump           #14676     
#14675: 
    setargs                   3 0
    push           20         i64 
    push           mm_parse.domappedalias.dimport u64 
    push           mm_decls.stmodule u64 
    callfn         &mm_lib.getduplnameptr u64 
    pop            mm_parse.domappedalias.stmacro u64 
    setargs                   2 0
    push           mm_parse.domappedalias.stmacro u64 
    push           mm_decls.stmodule u64 
    callproc       &mm_lib.adddef 
    push           0          u64 
    push           mm_parse.domappedalias.stmacro u64 
    push           104        
    popptroff                 u64 1 0
    setargs                   1 0
    push           mm_parse.domappedalias.stimport u64 
    callfn         &mm_lib.createname u64 
    push           mm_parse.domappedalias.stmacro u64 
    push           64         
    popptroff                 u64 1 0
#14676: 
    retproc                   
End


Proc mm_parse.readrecase: u64
    procentry                 
    setargs                   0 0
    callproc       &mm_lex.lex 
    startmult                 
    push           &mm_decls.lx 
    pushptr                   u8 
    push           100        i64 
    jumpne         #14678     i64 
    setargs                   0 0
    callproc       &mm_lex.lex 
    setargs                   1 0
    push           121        i64 
    callfn         &mm_lib.createunit0 u64 
    resetmult                 
    jump           #14679     
#14678: 
    setargs                   2 0
    setargs                   0 0
    callfn         &mm_parse.readassignment u64 
    push           121        i64 
    callfn         &mm_lib.createunit1 u64 
    endmult                   
#14679: 
    setret                    u64 
    jump           #14680     
#14680: 
    retfn                     u64 
End


Proc mm_parse.adddocstring:
    param          mm_parse.adddocstring.s u64 
    procentry                 
    push           mm_decls.ndocstrings i64 
    push           20         i64 
    jumple         #14682     i64 
    setargs                   1 0
    push           "Too many docstrings" u64 
    callproc       &mm_support.serror 
#14682: 
    setargs                   2 0
    setargs                   1 0
    push           mm_parse.adddocstring.s u64 
    callfn         &strlen    i64 
    push           mm_parse.adddocstring.s u64 
    callfn         &mlibp.pcm_copyheapstringn u64 
    push           &mm_decls.docstrings 
    push           &mm_decls.ndocstrings 
    incrload                  i64 1
    popptroff                 u64 8 -8
#14683: 
    retproc                   
End


Proc mm_parse.fixcond: u64
    param          mm_parse.fixcond.p u64 
    procentry                 
    setargs                   1 0
    push           mm_parse.fixcond.p u64 
    callfn         &mm_lib.isboolunit i64 
    jumptrue       #14685     i64 
    setargs                   2 0
    push           18         i64 
    push           mm_parse.fixcond.p u64 
    callproc       &mm_lib.insertunit 
    push           132        i64 
    push           mm_parse.fixcond.p u64 
    push           60         
    popptroff                 u8 1 0
#14685: 
    push           mm_parse.fixcond.p u64 
    setret                    u64 
    jump           #14686     
#14686: 
    retfn                     u64 
End


Proc pci_mcl.axerror:
    param          pci_mcl.axerror.mess u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "MCL Error: #" u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           pci_mcl.axerror.mess u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#14688: 
    retproc                   
End


Proc pc_genmcl.genmcl:
    param          pc_genmcl.genmcl.optim i64 
    procentry                 
    push           pc_libpcl.mcldone i64 
    jumpfalse      #14690     i64 
    jump           #14691     
#14690: 
    setargs                   0 0
    callproc       &pc_genmcl.inithandlers 
    push           pc_genmcl.genmcl.optim i64 
    pop            pc_decls.optimflag i64 
    setargs                   0 0
    callproc       &pc_libmcl.mclinit 
    push           pc_libpcl.pcstart u64 
    pop            pc_genmcl.currpcl u64 
    push           pc_libpcl.labelno i64 
    pop            pci_mcl.mlabelno i64 
    push           0          i64 
    pop            pci_mcl.mseqno i64 
#14692: 
    setargs                   1 0
    push           pc_genmcl.currpcl u64 
    callproc       &pc_genmcl.convertpcl 
    push           &pc_genmcl.currpcl 
    incr                      u64 32
#14693: 
    push           pc_genmcl.currpcl u64 
    push           1          
    pushptroff                u8 1 0
    push           11         i64 
    jumpne         #14692     i64 
#14694: 
    setargs                   0 0
    callproc       &pc_libmcl.genabsneg 
    setargs                   0 0
    callproc       &pc_libmcl.genstringtable 
    setargs                   0 0
    callproc       &pc_libmcl.genrealtable 
    setargs                   0 0
    callproc       &pc_libmcl.genrtsproctable 
    setargs                   0 0
    callproc       &pc_libmcl.genfunctiontable 
    setargs                   3 0
    push           0          u64 
    push           0          u64 
    push           10         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           0          u64 
    push           10         i64 
    callproc       &pc_libmcl.genmc 
    push           1          i64 
    pop            pc_libpcl.mcldone i64 
#14691: 
    retproc                   
End


Proc pc_genmcl.convertpcl:
    param          pc_genmcl.convertpcl.p u64 
    local          pc_genmcl.convertpcl.str block:1256 
    local          pc_genmcl.convertpcl.ss u64 
    local          pc_genmcl.convertpcl.m i64 
    procentry                 
    push           pc_genmcl.convertpcl.p u64 
    push           24         
    pushptroff                u32 1 0
    pop            pci_mcl.mseqno i64 
    setargs                   1 0
    push           pc_genmcl.convertpcl.p u64 
    push           &pc_genmcl.px_handlertable 
    push           pc_genmcl.convertpcl.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callprocptr               
#14696: 
    retproc                   
End


Proc pc_genmcl.inithandlers:
    local          pc_genmcl.inithandlers.name u64 
    local          pc_genmcl.inithandlers.n i64 
    local          pc_genmcl.inithandlers.av_1 i64 
    local          pc_genmcl.inithandlers.av_2 i64 
    local          pc_genmcl.inithandlers.i i64 
    local          pc_genmcl.inithandlers.k i64 
    procentry                 
    push           pc_genmcl.inithandlers.initdone u8 
    jumpfalse      #14698     i64 
    jump           #14699     
#14698: 
    getnprocs                 i64 
    pop            pc_genmcl.inithandlers.n i64 
#14700: 
    push           1          i64 
    pop            pc_genmcl.inithandlers.i i64 
    push           pc_genmcl.inithandlers.n i64 
    push           1          i64 
    jumplt         #14701     i64 
#14702: 
    push           pc_genmcl.inithandlers.i i64 
    getprocname               i64 
    pop            pc_genmcl.inithandlers.name u64 
    setargs                   3 0
    push           3          i64 
    push           "px_"      u64 
    push           pc_genmcl.inithandlers.name u64 
    callfn         &mlibp.eqbytes i64 
    jumpfalse      #14703     i64 
#14704: 
    push           0          i64 
    pop            pc_genmcl.inithandlers.k i64 
    push           217        i64 
    pop            pc_genmcl.inithandlers.av_1 i64 
    push           pc_genmcl.inithandlers.av_1 i64 
    push           0          i64 
    jumplt         #14705     i64 
#14706: 
    setargs                   2 0
    push           pc_genmcl.inithandlers.name u64 
    push           3          i64 
    addrefoff                 u64 1 0
    push           &pc_tables.pclnames 
    push           pc_genmcl.inithandlers.k i64 
    pushptroff                u64 8 0
    push           1          i64 
    addrefoff                 u64 1 0
    callfn         &mlibp.eqstring i64 
    jumpfalse      #14707     i64 
    push           pc_genmcl.inithandlers.i i64 
    getprocaddr               i64 
    push           &pc_genmcl.px_handlertable 
    push           pc_genmcl.inithandlers.k i64 
    popptroff                 u64 8 0
    jump           #14708     
#14707: 
#14709: 
    forup          #14706     i64 1
    opnd           pc_genmcl.inithandlers.k 
    opnd           pc_genmcl.inithandlers.av_1 
#14705: 
    setargs                   2 0
    push           pc_genmcl.inithandlers.name u64 
    push           "Invalid handler name:" u64 
    callproc       &pc_genmcl.gerrorc 
#14708: 
#14703: 
#14710: 
    forup          #14702     i64 1
    opnd           pc_genmcl.inithandlers.i 
    opnd           pc_genmcl.inithandlers.n 
#14701: 
#14711: 
    push           0          i64 
    pop            pc_genmcl.inithandlers.i i64 
    push           217        i64 
    pop            pc_genmcl.inithandlers.av_2 i64 
    push           pc_genmcl.inithandlers.av_2 i64 
    push           0          i64 
    jumplt         #14712     i64 
#14713: 
    push           &pc_genmcl.px_handlertable 
    push           pc_genmcl.inithandlers.i i64 
    pushptroff                u64 8 0
    jumptrue       #14714     u64 
    push           &pc_genmcl.unimpl 
    push           &pc_genmcl.px_handlertable 
    push           pc_genmcl.inithandlers.i i64 
    popptroff                 u64 8 0
#14714: 
#14715: 
    forup          #14713     i64 1
    opnd           pc_genmcl.inithandlers.i 
    opnd           pc_genmcl.inithandlers.av_2 
#14712: 
    push           1          i64 
    pop            pc_genmcl.inithandlers.initdone u8 
#14699: 
    retproc                   
End


Proc pc_genmcl.unimpl:
    param          pc_genmcl.unimpl.p u64 
    local          pc_genmcl.unimpl.str block:300 
    procentry                 
    setargs                   1 0
    push           &pc_genmcl.unimpl.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "Unimplemented Opcode:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pc_tables.pclnames 
    push           pc_genmcl.unimpl.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           &pc_genmcl.unimpl.str 
    callproc       &pc_libmcl.mgencomment 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Unimplemented Opcode:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pc_tables.pclnames 
    push           pc_genmcl.unimpl.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#14717: 
    retproc                   
End


Proc pc_genmcl.gerrorc:
    param          pc_genmcl.gerrorc.mess u64 
    param          pc_genmcl.gerrorc.param u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "MCL Gen error:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_genmcl.gerrorc.mess u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           pc_genmcl.gerrorc.param u64 
    jumpfalse      #14719     u64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           ":"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_genmcl.gerrorc.param u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#14719: 
    push           1          i64 
    stop                      
#14720: 
    retproc                   
End


Proc pc_genmcl.px_zero:
    param          pc_genmcl.px_zero.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_zero.p u64 
    callproc       &pc_genmcl.unimpl 
#14722: 
    retproc                   
End


Proc pc_genmcl.px_nop:
    param          pc_genmcl.px_nop.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_nop.p u64 
    callproc       &pc_genmcl.unimpl 
#14724: 
    retproc                   
End


Proc pc_genmcl.px_stop:
    param          pc_genmcl.px_stop.p u64 
    local          pc_genmcl.px_stop.d u64 
    procentry                 
    setargs                   2 0
    push           11         i64 
    push           1          i64 
    callproc       &pc_stackmcl.loadparam 
    setargs                   1 0
    push           "exit"     u64 
    callfn         &pc_libpcl.pcl_makesymbol u64 
    pop            pc_genmcl.px_stop.d u64 
    push           1          u64 
    push           pc_genmcl.px_stop.d u64 
    push           46         
    addrefoff                 u64 1 0
    push           1          i64 
    popdotindex               u16 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_stop.d u64 
    callfn         &pc_libmcl.mgenmemaddr u64 
    push           22         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#14726: 
    retproc                   
End


Proc pc_genmcl.px_comment:
    param          pc_genmcl.px_comment.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_comment.p u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &pc_libmcl.mgencomment 
#14728: 
    retproc                   
End


Proc pc_genmcl.px_importdll:
    param          pc_genmcl.px_importdll.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_importdll.p u64 
    callproc       &pc_genmcl.unimpl 
#14730: 
    retproc                   
End


Proc pc_genmcl.px_istatic:
    param          pc_genmcl.px_istatic.p u64 
    procentry                 
    setargs                   2 0
    push           pc_genmcl.px_istatic.p u64 
    push           16         
    pushptroff                i32 1 0
    push           73         i64 
    callproc       &pc_libmcl.setsegment 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_istatic.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmemaddr u64 
    push           6          i64 
    callproc       &pc_libmcl.genmc 
#14732: 
    retproc                   
End


Proc pc_genmcl.px_zstatic:
    param          pc_genmcl.px_zstatic.p u64 
    local          pc_genmcl.px_zstatic.d u64 
    procentry                 
    push           pc_genmcl.px_zstatic.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_genmcl.px_zstatic.d u64 
    setargs                   2 0
    push           pc_genmcl.px_zstatic.p u64 
    push           16         
    pushptroff                i32 1 0
    push           90         i64 
    callproc       &pc_libmcl.setsegment 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_zstatic.d u64 
    callfn         &pc_libmcl.mgenmemaddr u64 
    push           6          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_zstatic.p u64 
    push           4          
    pushptroff                i32 1 0
    callfn         &pc_libmcl.mgenint u64 
    push           124        i64 
    callproc       &pc_libmcl.genmc 
#14734: 
    retproc                   
End


Proc pc_genmcl.px_equiv:
    param          pc_genmcl.px_equiv.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_equiv.p u64 
    callproc       &pc_genmcl.unimpl 
#14736: 
    retproc                   
End


Proc pc_genmcl.px_procdef:
    param          pc_genmcl.px_procdef.p u64 
    local          pc_genmcl.px_procdef.name u64 
    procentry                 
    push           pc_genmcl.currpcl u64 
    pop            pci_mcl.procdefpcl u64 
    push           pc_genmcl.currpcl u64 
    push           8          
    pushptroff                u64 1 0
    pop            pci_mcl.procdef u64 
    push           pci_mcl.procdef u64 
    pushptr                   u64 
    pop            pc_genmcl.px_procdef.name u64 
    setargs                   2 0
    push           16         i64 
    push           67         i64 
    callproc       &pc_libmcl.setsegment 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.procdef u64 
    callfn         &pc_libmcl.mgenmemaddr u64 
    push           6          i64 
    callproc       &pc_libmcl.genmc 
    push           0          i64 
    store          pci_mcl.nparams i64 
    pop            pci_mcl.nlocals i64 
#14738: 
    retproc                   
End


Proc pc_genmcl.px_procentry:
    param          pc_genmcl.px_procentry.p u64 
    local          pc_genmcl.px_procentry.np i64 
    local          pc_genmcl.px_procentry.regoffset i64 
    local          pc_genmcl.px_procentry.offset i64 
    local          pc_genmcl.px_procentry.dreg i64 
    local          pc_genmcl.px_procentry.xreg i64 
    local          pc_genmcl.px_procentry.nregparams i64 
    local          pc_genmcl.px_procentry.nspill i64 
    local          pc_genmcl.px_procentry.hasequiv i64 
    local          pc_genmcl.px_procentry.ax u64 
    local          pc_genmcl.px_procentry.d u64 
    local          pc_genmcl.px_procentry.i i64 
    procentry                 
    push           0          i64 
    pop            pci_mcl.framebytes i64 
    push           0          i64 
    pop            pci_mcl.frameoffset i64 
    push           0          i64 
    pop            pci_mcl.paramoffset i64 
    push           0          i64 
    pop            pci_mcl.needstackframe i64 
    push           0          i64 
    store          pci_mcl.nxsaveregs i64 
    pop            pci_mcl.ndsaveregs i64 
    push           0          i64 
    pop            pci_mcl.ndsavepush i64 
    push           0          i64 
    store          pc_genmcl.px_procentry.nspill i64 
    pop            pc_genmcl.px_procentry.nregparams i64 
    push           0          i64 
    pop            pci_mcl.needshadow48 i64 
    push           0          i64 
    pop            pci_mcl.needshadow32 i64 
    push           0          i64 
    pop            pc_genmcl.px_procentry.hasequiv i64 
    push           pci_mcl.inf_assem i64 
    jumpfalse      #14740     i64 
    jump           #14741     
#14740: 
    push           pci_mcl.passno i64 
    push           2          i64 
    jumpne         #14742     i64 
    push           pci_mcl.inf_leafproc i64 
    jumpfalse      #14742     i64 
    push           11         i64 
    pop            pc_genmcl.px_procentry.dreg i64 
    push           1          i64 
    pop            pc_genmcl.px_procentry.xreg i64 
#14743: 
    push           1          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.nparams i64 
    push           1          i64 
    jumplt         #14744     i64 
#14745: 
    push           pc_genmcl.px_procentry.i i64 
    push           4          i64 
    jumple         #14746     i64 
    jump           #14744     
#14746: 
    push           &pci_mcl.paramdefs 
    push           pc_genmcl.px_procentry.i i64 
    pushptroff                u64 8 -8
    pop            pc_genmcl.px_procentry.d u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_procentry.d u64 
    push           16         
    pushptroff                u64 1 0
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #14747     i64 0
    push           3          i64 
    casejumpeq     #14748     i64 0
    popstack                  i64 
    jump           #14749     
#14747: 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           2          i64 
    dotindex                  i64 
    jumptrue       #14750     u64 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           5          i64 
    dotindex                  i64 
    jumptrue       #14750     u64 
    push           pc_genmcl.px_procentry.d u64 
    push           49         
    pushptroff                i16 1 0
    jumpfalse      #14750     i64 
    push           pc_genmcl.px_procentry.dreg i64 
    push           pc_genmcl.px_procentry.d u64 
    push           48         
    popptroff                 u8 1 0
    push           1          i64 
    push           &pci_mcl.isregvar 
    push           pc_genmcl.px_procentry.dreg i64 
    popptroff                 u8 1 -1
    push           pc_genmcl.px_procentry.dreg i64 
    push           11         i64 
    jumpne         #14751     i64 
    push           1          i64 
    pop            pci_mcl.inf_r10used i64 
#14751: 
    push           pc_genmcl.px_procentry.dreg i64 
    push           12         i64 
    jumpne         #14752     i64 
    push           1          i64 
    pop            pci_mcl.inf_r11used i64 
#14752: 
    push           pc_genmcl.px_procentry.dreg i64 
    push           14         i64 
    jumpne         #14753     i64 
    push           1          i64 
    pop            pci_mcl.inf_r13used i64 
#14753: 
    push           &pc_genmcl.px_procentry.nregparams 
    incr                      i64 1
#14750: 
    jump           #14754     
#14748: 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           2          i64 
    dotindex                  i64 
    jumptrue       #14755     u64 
    push           pc_genmcl.px_procentry.d u64 
    push           49         
    pushptroff                i16 1 0
    jumpfalse      #14755     i64 
    push           pc_genmcl.px_procentry.xreg i64 
    push           pc_genmcl.px_procentry.d u64 
    push           48         
    popptroff                 u8 1 0
    push           1          i64 
    push           &pci_mcl.isxregvar 
    push           pc_genmcl.px_procentry.dreg i64 
    popptroff                 u8 1 -1
    push           &pc_genmcl.px_procentry.nregparams 
    incr                      i64 1
#14755: 
    jump           #14754     
#14749: 
#14754: 
    push           &pc_genmcl.px_procentry.dreg 
    incr                      i64 1
    push           &pc_genmcl.px_procentry.xreg 
    incr                      i64 1
#14756: 
    forup          #14745     i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.nparams 
#14744: 
#14742: 
    push           pci_mcl.passno i64 
    push           2          i64 
    jumpne         #14757     i64 
    push           10         i64 
    pop            pc_genmcl.px_procentry.dreg i64 
    push           16         i64 
    pop            pc_genmcl.px_procentry.xreg i64 
#14758: 
    push           1          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.nlocals i64 
    push           1          i64 
    jumplt         #14759     i64 
#14760: 
    push           &pci_mcl.localdefs 
    push           pc_genmcl.px_procentry.i i64 
    pushptroff                u64 8 -8
    pop            pc_genmcl.px_procentry.d u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_procentry.d u64 
    push           16         
    pushptroff                u64 1 0
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #14761     i64 0
    push           3          i64 
    casejumpeq     #14762     i64 0
    popstack                  i64 
    jump           #14763     
#14761: 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           2          i64 
    dotindex                  i64 
    jumptrue       #14764     u64 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           5          i64 
    dotindex                  i64 
    jumptrue       #14764     u64 
    push           pc_genmcl.px_procentry.d u64 
    push           49         
    pushptroff                i16 1 0
    jumpfalse      #14764     i64 
    push           pc_genmcl.px_procentry.dreg i64 
    push           pci_mcl.inf_highreg i64 
    jumple         #14765     i64 
    push           pc_genmcl.px_procentry.dreg i64 
    push           4          i64 
    jumpge         #14766     i64 
#14765: 
    jump           #14767     
#14766: 
    push           pc_genmcl.px_procentry.dreg i64 
    push           &pci_mcl.dsaveregs 
    push           &pci_mcl.ndsaveregs 
    incrload                  i64 1
    popptroff                 i64 8 -8
    push           pc_genmcl.px_procentry.dreg i64 
    push           pc_genmcl.px_procentry.d u64 
    push           48         
    popptroff                 u8 1 0
    push           1          i64 
    push           &pci_mcl.isregvar 
    push           pc_genmcl.px_procentry.dreg i64 
    popptroff                 u8 1 -1
    push           &pc_genmcl.px_procentry.dreg 
    decr                      i64 1
#14764: 
    jump           #14768     
#14762: 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           2          i64 
    dotindex                  i64 
    jumptrue       #14769     u64 
    push           pc_genmcl.px_procentry.d u64 
    push           49         
    pushptroff                i16 1 0
    jumpfalse      #14769     i64 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           5          i64 
    dotindex                  i64 
    jumptrue       #14769     u64 
    push           pc_genmcl.px_procentry.xreg i64 
    push           pci_mcl.inf_highxreg i64 
    jumple         #14770     i64 
    push           pc_genmcl.px_procentry.xreg i64 
    push           7          i64 
    jumpge         #14771     i64 
#14770: 
    jump           #14767     
#14771: 
    push           pc_genmcl.px_procentry.xreg i64 
    push           &pci_mcl.xsaveregs 
    push           &pci_mcl.nxsaveregs 
    incrload                  i64 1
    popptroff                 i64 8 -8
    push           pc_genmcl.px_procentry.xreg i64 
    push           pc_genmcl.px_procentry.d u64 
    push           48         
    popptroff                 u8 1 0
    push           1          i64 
    push           &pci_mcl.isxregvar 
    push           pc_genmcl.px_procentry.dreg i64 
    popptroff                 u8 1 -1
    push           &pc_genmcl.px_procentry.xreg 
    decr                      i64 1
#14769: 
    jump           #14768     
#14763: 
#14768: 
#14767: 
    forup          #14760     i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.nlocals 
#14759: 
    push           pci_mcl.inf_leafproc i64 
    jumptrue       #14772     i64 
#14773: 
    push           1          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.nparams i64 
    push           1          i64 
    jumplt         #14774     i64 
#14775: 
    push           pc_genmcl.px_procentry.i i64 
    push           4          i64 
    jumple         #14776     i64 
    jump           #14774     
#14776: 
    push           &pci_mcl.paramdefs 
    push           pc_genmcl.px_procentry.i i64 
    pushptroff                u64 8 -8
    pop            pc_genmcl.px_procentry.d u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_procentry.d u64 
    push           16         
    pushptroff                u64 1 0
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #14777     i64 0
    push           3          i64 
    casejumpeq     #14778     i64 0
    popstack                  i64 
    jump           #14779     
#14777: 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           2          i64 
    dotindex                  i64 
    jumptrue       #14780     u64 
    push           pc_genmcl.px_procentry.d u64 
    push           49         
    pushptroff                i16 1 0
    jumpfalse      #14780     i64 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           5          i64 
    dotindex                  i64 
    jumptrue       #14780     u64 
    push           pc_genmcl.px_procentry.dreg i64 
    push           pci_mcl.inf_highreg i64 
    jumple         #14781     i64 
    push           pc_genmcl.px_procentry.dreg i64 
    push           4          i64 
    jumpge         #14782     i64 
#14781: 
    jump           #14783     
#14782: 
    push           pc_genmcl.px_procentry.dreg i64 
    push           &pci_mcl.dsaveregs 
    push           &pci_mcl.ndsaveregs 
    incrload                  i64 1
    popptroff                 i64 8 -8
    push           pc_genmcl.px_procentry.dreg i64 
    push           pc_genmcl.px_procentry.d u64 
    push           48         
    popptroff                 u8 1 0
    push           1          i64 
    push           &pci_mcl.isregvar 
    push           pc_genmcl.px_procentry.dreg i64 
    popptroff                 u8 1 -1
    push           &pc_genmcl.px_procentry.dreg 
    decr                      i64 1
    push           &pc_genmcl.px_procentry.nregparams 
    incr                      i64 1
#14780: 
    jump           #14784     
#14778: 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           2          i64 
    dotindex                  i64 
    jumptrue       #14785     u64 
    push           pc_genmcl.px_procentry.d u64 
    push           49         
    pushptroff                i16 1 0
    jumpfalse      #14785     i64 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           5          i64 
    dotindex                  i64 
    jumptrue       #14785     u64 
    push           pc_genmcl.px_procentry.xreg i64 
    push           pci_mcl.inf_highxreg i64 
    jumple         #14786     i64 
    push           pc_genmcl.px_procentry.xreg i64 
    push           7          i64 
    jumpge         #14787     i64 
#14786: 
    jump           #14783     
#14787: 
    push           pc_genmcl.px_procentry.xreg i64 
    push           &pci_mcl.xsaveregs 
    push           &pci_mcl.nxsaveregs 
    incrload                  i64 1
    popptroff                 i64 8 -8
    push           pc_genmcl.px_procentry.xreg i64 
    push           pc_genmcl.px_procentry.d u64 
    push           48         
    popptroff                 u8 1 0
    push           1          i64 
    push           &pci_mcl.isxregvar 
    push           pc_genmcl.px_procentry.dreg i64 
    popptroff                 u8 1 -1
    push           &pc_genmcl.px_procentry.xreg 
    decr                      i64 1
    push           &pc_genmcl.px_procentry.nregparams 
    incr                      i64 1
#14785: 
    jump           #14784     
#14779: 
#14784: 
#14783: 
    forup          #14775     i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.nparams 
#14774: 
#14772: 
#14757: 
!skip::
#14741: 
#14788: 
    push           1          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.nparams i64 
    push           1          i64 
    jumplt         #14789     i64 
#14790: 
    push           &pci_mcl.paramdefs 
    push           pc_genmcl.px_procentry.i i64 
    pushptroff                u64 8 -8
    pop            pc_genmcl.px_procentry.d u64 
    push           pc_genmcl.px_procentry.d u64 
    push           48         
    pushptroff                u8 1 0
    jumptrue       #14791     i64 
    push           pc_genmcl.px_procentry.i i64 
    push           1          i64 
    jumple         #14792     i64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_procentry.d u64 
    push           16         
    pushptroff                u64 1 0
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #14792     i64 
    push           &pci_mcl.paramdefs 
    push           pc_genmcl.px_procentry.i i64 
    pushptroff                u64 8 -16
    push           pc_genmcl.px_procentry.d u64 
    jumpne         #14792     u64 
    jump           #14793     
#14792: 
    push           pci_mcl.paramoffset i64 
    push           16         i64 
    add                       i64 
    push           pc_genmcl.px_procentry.d u64 
    push           32         
    popptroff                 i32 1 0
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_procentry.d u64 
    push           32         
    pushptroff                i32 1 0
    callfn         &pc_libmcl.mgenint u64 
    setargs                   1 0
    setargs                   1 0
    push           pc_genmcl.px_procentry.d u64 
    callfn         &pc_libmcl.getfullname u64 
    callfn         &pc_libmcl.mgenname u64 
    push           7          i64 
    callproc       &pc_libmcl.genmc 
#14793: 
    jump           #14794     
#14791: 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_procentry.d u64 
    push           16         
    pushptroff                u64 1 0
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #14795     i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_procentry.d u64 
    push           48         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   1 0
    setargs                   1 0
    push           pc_genmcl.px_procentry.d u64 
    callfn         &pc_libmcl.getfullname u64 
    callfn         &pc_libmcl.mgenname u64 
    push           8          i64 
    callproc       &pc_libmcl.genmc 
    jump           #14794     
#14795: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_procentry.d u64 
    push           48         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenxreg u64 
    setargs                   1 0
    setargs                   1 0
    push           pc_genmcl.px_procentry.d u64 
    callfn         &pc_libmcl.getfullname u64 
    callfn         &pc_libmcl.mgenname u64 
    push           8          i64 
    callproc       &pc_libmcl.genmc 
#14794: 
    push           &pci_mcl.paramoffset 
    push           8          i64 
    addto                     i64 
#14796: 
    forup          #14790     i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.nparams 
#14789: 
#14797: 
    push           4          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.inf_highreg i64 
    push           4          i64 
    jumplt         #14798     i64 
#14799: 
    push           pc_genmcl.px_procentry.i i64 
    push           &pci_mcl.dsaveregs 
    push           &pci_mcl.ndsaveregs 
    incrload                  i64 1
    popptroff                 i64 8 -8
#14800: 
    forup          #14799     i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.inf_highreg 
#14798: 
#14801: 
    push           7          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.inf_highxreg i64 
    push           7          i64 
    jumplt         #14802     i64 
#14803: 
    push           pc_genmcl.px_procentry.i i64 
    push           &pci_mcl.xsaveregs 
    push           &pci_mcl.nxsaveregs 
    incrload                  i64 1
    popptroff                 i64 8 -8
#14804: 
    forup          #14803     i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.inf_highxreg 
#14802: 
    push           pci_mcl.nparams i64 
    push           4          i64 
    jumple         #14805     i64 
    push           1          i64 
    pop            pci_mcl.needstackframe i64 
    push           4          i64 
    push           pc_genmcl.px_procentry.nregparams i64 
    sub                       i64 
    pop            pc_genmcl.px_procentry.nspill i64 
    jump           #14806     
#14805: 
    push           pci_mcl.ndsaveregs i64 
    pop            pci_mcl.ndsavepush i64 
    push           0          i64 
    pop            pci_mcl.ndsaveregs i64 
    push           pci_mcl.nparams i64 
    push           pc_genmcl.px_procentry.nregparams i64 
    sub                       i64 
    pop            pc_genmcl.px_procentry.nspill i64 
    push           pc_genmcl.px_procentry.nspill i64 
    jumpfalse      #14807     i64 
    push           1          i64 
    pop            pci_mcl.needstackframe i64 
#14807: 
#14806: 
#14808: 
    push           1          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.nlocals i64 
    push           1          i64 
    jumplt         #14809     i64 
#14810: 
    push           &pci_mcl.localdefs 
    push           pc_genmcl.px_procentry.i i64 
    pushptroff                u64 8 -8
    pop            pc_genmcl.px_procentry.d u64 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           6          i64 
    dotindex                  i64 
    jumpfalse      #14811     u64 
    push           1          i64 
    pop            pc_genmcl.px_procentry.hasequiv i64 
    jump           #14812     
#14811: 
    push           pc_genmcl.px_procentry.d u64 
    push           48         
    pushptroff                u8 1 0
    jumptrue       #14813     i64 
    push           &pci_mcl.frameoffset 
    setargs                   1 0
    push           pc_genmcl.px_procentry.d u64 
    push           16         
    pushptroff                u64 1 0
    push           4          
    pushptroff                i32 1 0
    callfn         &pc_libmcl.roundsizetg i64 
    subto                     i64 
    push           pci_mcl.frameoffset i64 
    push           pc_genmcl.px_procentry.d u64 
    push           32         
    popptroff                 i32 1 0
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_procentry.d u64 
    push           32         
    pushptroff                i32 1 0
    callfn         &pc_libmcl.mgenint u64 
    setargs                   1 0
    setargs                   1 0
    push           pc_genmcl.px_procentry.d u64 
    callfn         &pc_libmcl.getfullname u64 
    callfn         &pc_libmcl.mgenname u64 
    push           7          i64 
    callproc       &pc_libmcl.genmc 
    jump           #14812     
#14813: 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_procentry.d u64 
    push           16         
    pushptroff                u64 1 0
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #14814     i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_procentry.d u64 
    push           48         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   1 0
    setargs                   1 0
    push           pc_genmcl.px_procentry.d u64 
    callfn         &pc_libmcl.getfullname u64 
    callfn         &pc_libmcl.mgenname u64 
    push           8          i64 
    callproc       &pc_libmcl.genmc 
    jump           #14812     
#14814: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_procentry.d u64 
    push           48         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenxreg u64 
    setargs                   1 0
    setargs                   1 0
    push           pc_genmcl.px_procentry.d u64 
    callfn         &pc_libmcl.getfullname u64 
    callfn         &pc_libmcl.mgenname u64 
    push           8          i64 
    callproc       &pc_libmcl.genmc 
#14812: 
#14815: 
    forup          #14810     i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.nlocals 
#14809: 
    push           pc_genmcl.px_procentry.hasequiv i64 
    jumpfalse      #14816     i64 
#14817: 
    push           1          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.nlocals i64 
    push           1          i64 
    jumplt         #14818     i64 
#14819: 
    push           &pci_mcl.localdefs 
    push           pc_genmcl.px_procentry.i i64 
    pushptroff                u64 8 -8
    pop            pc_genmcl.px_procentry.d u64 
    push           pc_genmcl.px_procentry.d u64 
    push           46         
    pushptroff                u16 1 0
    push           6          i64 
    dotindex                  i64 
    jumpfalse      #14820     u64 
    setargs                   2 0
    push           ""         u64 
    push           "D.ATVAR NOT READY" u64 
    callproc       &pc_libmcl.merror 
#14820: 
#14821: 
    forup          #14819     i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.nlocals 
#14818: 
#14816: 
    push           &pci_mcl.frameoffset 
    push           pci_mcl.ndsaveregs i64 
    push           8          i64 
    mul                       i64 
    subto                     i64 
    push           pci_mcl.frameoffset i64 
    pop            pci_mcl.dsaveoffset i64 
    push           &pci_mcl.frameoffset 
    push           pci_mcl.nxsaveregs i64 
    push           8          i64 
    mul                       i64 
    subto                     i64 
    push           pci_mcl.frameoffset i64 
    pop            pci_mcl.xsaveoffset i64 
    push           pci_mcl.frameoffset i64 
    neg                       i64 
    pop            pci_mcl.framebytes i64 
    push           pci_mcl.nlocals i64 
    jumptrue       #14822     i64 
    push           pci_mcl.nparams i64 
    jumpfalse      #14823     i64 
#14822: 
    push           pci_mcl.procdef u64 
    push           46         
    pushptroff                u16 1 0
    push           7          i64 
    dotindex                  i64 
    jumpfalse      #14823     u64 
    setargs                   2 0
    push           ""         u64 
    push           "params/locals in threaded?" u64 
    callproc       &pc_libmcl.merror 
#14823: 
    push           pci_mcl.framebytes i64 
    jumpfalse      #14824     i64 
    push           1          i64 
    pop            pci_mcl.needstackframe i64 
#14824: 
    jump           #14825     
#14826: 
    push           &pci_mcl.framebytes 
    incr                      i64 1
#14825: 
    push           pci_mcl.framebytes i64 
    push           15         i64 
    iand                      i64 
    jumptrue       #14826     i64 
#14827: 
    push           pci_mcl.needstackframe i64 
    jumpfalse      #14828     i64 
    push           pci_mcl.ndsavepush i64 
    push           0          i64 
    dotindex                  i64 
    jumpfalse      #14828     u64 
    push           &pci_mcl.framebytes 
    push           8          i64 
    addto                     i64 
#14828: 
    push           pci_mcl.needstackframe i64 
    jumpfalse      #14829     i64 
    push           pci_mcl.inf_leafproc i64 
    jumptrue       #14829     i64 
    push           &pci_mcl.framebytes 
    push           32         i64 
    addto                     i64 
#14829: 
    push           pci_mcl.needstackframe i64 
    jumpfalse      #14830     i64 
    push           pci_mcl.ndsavepush i64 
    jumpfalse      #14830     i64 
    push           1          i64 
    pop            pci_mcl.needshadow48 i64 
#14830: 
    push           pci_mcl.needstackframe i64 
    jumptrue       #14831     i64 
    push           pci_mcl.inf_leafproc i64 
    jumptrue       #14831     i64 
    push           pci_mcl.procdef u64 
    push           46         
    pushptroff                u16 1 0
    push           7          i64 
    dotindex                  i64 
    jumptrue       #14831     u64 
    startmult                 
    push           pci_mcl.ndsavepush i64 
    push           0          i64 
    dotindex                  i64 
    jumpfalse      #14832     u64 
    push           32         i64 
    resetmult                 
    jump           #14833     
#14832: 
    push           40         i64 
    endmult                   
#14833: 
    pop            pci_mcl.needshadow32 i64 
#14831: 
#14834: 
    push           1          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.ndsavepush i64 
    push           1          i64 
    jumplt         #14835     i64 
#14836: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           &pci_mcl.dsaveregs 
    push           pc_genmcl.px_procentry.i i64 
    pushptroff                i64 8 -8
    callfn         &pc_libmcl.mgenreg u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
#14837: 
    forup          #14836     i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.ndsavepush 
#14835: 
    push           pci_mcl.needshadow48 i64 
    jumpfalse      #14838     i64 
    setargs                   1 0
    push           48         i64 
    callproc       &pc_stackmcl.pushstack 
#14838: 
    push           pci_mcl.needstackframe i64 
    jumpfalse      #14839     i64 
    setargs                   3 0
    push           0          u64 
    push           pci_mcl.dframeopnd u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pci_mcl.dstackopnd u64 
    push           pci_mcl.dframeopnd u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           pci_mcl.framebytes i64 
    jumpfalse      #14840     i64 
    setargs                   1 0
    push           pci_mcl.framebytes i64 
    callproc       &pc_stackmcl.pushstack 
#14840: 
    jump           #14841     
#14839: 
    push           pci_mcl.needshadow32 i64 
    jumpfalse      #14842     i64 
    setargs                   1 0
    push           pci_mcl.needshadow32 i64 
    callproc       &pc_stackmcl.pushstack 
#14842: 
#14841: 
    push           pci_mcl.dsaveoffset i64 
    pop            pc_genmcl.px_procentry.offset i64 
#14843: 
    push           1          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.ndsaveregs i64 
    push           1          i64 
    jumplt         #14844     i64 
#14845: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           &pci_mcl.dsaveregs 
    push           pc_genmcl.px_procentry.i i64 
    pushptroff                i64 8 -8
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           8          i64 
    push           pc_genmcl.px_procentry.offset i64 
    push           1          i64 
    push           0          i64 
    push           15         i64 
    callfn         &pc_libmcl.mgenindex u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_genmcl.px_procentry.offset 
    push           8          i64 
    addto                     i64 
#14846: 
    forup          #14845     i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.ndsaveregs 
#14844: 
    push           pci_mcl.xsaveoffset i64 
    pop            pc_genmcl.px_procentry.offset i64 
#14847: 
    push           1          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.nxsaveregs i64 
    push           1          i64 
    jumplt         #14848     i64 
#14849: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           &pci_mcl.xsaveregs 
    push           pc_genmcl.px_procentry.i i64 
    pushptroff                i64 8 -8
    callfn         &pc_libmcl.mgenxreg u64 
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           8          i64 
    push           pc_genmcl.px_procentry.offset i64 
    push           1          i64 
    push           0          i64 
    push           15         i64 
    callfn         &pc_libmcl.mgenindex u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_genmcl.px_procentry.offset 
    push           8          i64 
    addto                     i64 
#14850: 
    forup          #14849     i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.nxsaveregs 
#14848: 
    push           16         i64 
    pop            pc_genmcl.px_procentry.offset i64 
    push           0          i64 
    pop            pc_genmcl.px_procentry.regoffset i64 
#14851: 
    push           1          i64 
    pop            pc_genmcl.px_procentry.i i64 
    push           pci_mcl.nparams i64 
    push           1          i64 
    jumplt         #14852     i64 
#14853: 
    push           pc_genmcl.px_procentry.regoffset i64 
    push           3          i64 
    jumple         #14854     i64 
    jump           #14852     
#14854: 
    push           &pci_mcl.paramdefs 
    push           pc_genmcl.px_procentry.i i64 
    pushptroff                u64 8 -8
    pop            pc_genmcl.px_procentry.d u64 
    push           pc_genmcl.px_procentry.d u64 
    push           48         
    pushptroff                u8 1 0
    jumptrue       #14855     i64 
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           8          i64 
    push           pc_genmcl.px_procentry.offset i64 
    push           1          i64 
    push           0          i64 
    push           15         i64 
    callfn         &pc_libmcl.mgenindex u64 
    pop            pc_genmcl.px_procentry.ax u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_procentry.d u64 
    push           16         
    pushptroff                u64 1 0
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           3          i64 
    casejumpeq     #14856     i64 0
    push           2          i64 
    casejumpeq     #14857     i64 0
    popstack                  i64 
    jump           #14858     
#14856: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    push           pc_genmcl.px_procentry.regoffset i64 
    add                       i64 
    callfn         &pc_libmcl.mgenxreg u64 
    push           pc_genmcl.px_procentry.ax u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #14859     
#14857: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    push           pc_genmcl.px_procentry.regoffset i64 
    add                       i64 
    callfn         &pc_libmcl.mgenxreg u64 
    setargs                   2 0
    push           4          i64 
    push           pc_genmcl.px_procentry.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    jump           #14859     
#14858: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_procentry.regoffset i64 
    push           11         i64 
    add                       i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           pc_genmcl.px_procentry.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
#14859: 
    jump           #14860     
#14855: 
    push           pc_genmcl.px_procentry.d u64 
    push           48         
    pushptroff                u8 1 0
    jumpfalse      #14861     i64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_procentry.d u64 
    push           16         
    pushptroff                u64 1 0
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           3          i64 
    casejumpeq     #14862     i64 0
    push           1          i64 
    casejumpeq     #14863     i64 0
    popstack                  i64 
    jump           #14864     
#14862: 
    push           pc_genmcl.px_procentry.d u64 
    push           48         
    pushptroff                u8 1 0
    push           1          i64 
    push           pc_genmcl.px_procentry.regoffset i64 
    add                       i64 
    jumpeq         #14865     i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    push           pc_genmcl.px_procentry.regoffset i64 
    add                       i64 
    callfn         &pc_libmcl.mgenxreg u64 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_procentry.d u64 
    push           48         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenxreg u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
#14865: 
    jump           #14866     
#14863: 
    push           pc_genmcl.px_procentry.d u64 
    push           48         
    pushptroff                u8 1 0
    push           11         i64 
    push           pc_genmcl.px_procentry.regoffset i64 
    add                       i64 
    jumpeq         #14867     i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_procentry.regoffset i64 
    push           11         i64 
    add                       i64 
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_procentry.d u64 
    push           48         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
#14867: 
    jump           #14866     
#14864: 
#14866: 
#14861: 
#14860: 
    push           &pc_genmcl.px_procentry.offset 
    push           8          i64 
    addto                     i64 
    push           &pc_genmcl.px_procentry.regoffset 
    incr                      i64 1
#14868: 
    forup          #14853     i64 1
    opnd           pc_genmcl.px_procentry.i 
    opnd           pci_mcl.nparams 
#14852: 
#14869: 
    retproc                   
End


Proc pc_genmcl.px_endproc:
    param          pc_genmcl.px_endproc.p u64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    push           0          u64 
    push           2          i64 
    callproc       &pc_libmcl.genmc 
#14871: 
    retproc                   
End


Proc pc_genmcl.px_endprogram:
    param          pc_genmcl.px_endprogram.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_endprogram.p u64 
    callproc       &pc_genmcl.unimpl 
#14873: 
    retproc                   
End


Proc pc_genmcl.px_extproc:
    param          pc_genmcl.px_extproc.p u64 
    procentry                 
#14875: 
    retproc                   
End


Proc pc_genmcl.px_extparam:
    param          pc_genmcl.px_extparam.p u64 
    procentry                 
#14877: 
    retproc                   
End


Proc pc_genmcl.px_extvariadics:
    param          pc_genmcl.px_extvariadics.p u64 
    procentry                 
#14879: 
    retproc                   
End


Proc pc_genmcl.px_endextproc:
    param          pc_genmcl.px_endextproc.p u64 
    procentry                 
#14881: 
    retproc                   
End


Proc pc_genmcl.px_local:
    param          pc_genmcl.px_local.p u64 
    procentry                 
    push           pci_mcl.nlocals i64 
    push           256        i64 
    jumplt         #14883     i64 
    setargs                   2 0
    push           ""         u64 
    push           "Too many locals" u64 
    callproc       &pc_libmcl.merror 
#14883: 
    push           &pci_mcl.nlocals 
    incr                      i64 1
    push           &pc_tables.pcat 
    push           pc_genmcl.px_local.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #14884     i64 0
    push           3          i64 
    casejumpeq     #14885     i64 0
    popstack                  i64 
    jump           #14886     
#14884: 
    push           &pci_mcl.inf_proclocals 
    incr                      i64 1
    jump           #14887     
#14885: 
    push           &pci_mcl.inf_procxlocals 
    incr                      i64 1
    jump           #14887     
#14886: 
#14887: 
    push           pc_genmcl.px_local.p u64 
    push           8          
    pushptroff                u64 1 0
    push           &pci_mcl.localdefs 
    push           pci_mcl.nlocals i64 
    popptroff                 u64 8 -8
#14888: 
    retproc                   
End


Proc pc_genmcl.px_param:
    param          pc_genmcl.px_param.p u64 
    procentry                 
    push           pci_mcl.nparams i64 
    push           32         i64 
    jumplt         #14890     i64 
    setargs                   2 0
    push           ""         u64 
    push           "Too many params" u64 
    callproc       &pc_libmcl.merror 
#14890: 
    push           &pci_mcl.nparams 
    incr                      i64 1
    push           pc_genmcl.px_param.p u64 
    push           8          
    pushptroff                u64 1 0
    push           &pci_mcl.paramdefs 
    push           pci_mcl.nparams i64 
    popptroff                 u64 8 -8
    push           &pc_tables.pcat 
    push           pc_genmcl.px_param.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #14891     i64 
    push           &pci_mcl.nparams 
    incr                      i64 1
    push           pc_genmcl.px_param.p u64 
    push           8          
    pushptroff                u64 1 0
    push           &pci_mcl.paramdefs 
    push           pci_mcl.nparams i64 
    popptroff                 u64 8 -8
#14891: 
#14892: 
    retproc                   
End


Proc pc_genmcl.px_label:
    param          pc_genmcl.px_label.p u64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_label.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
#14894: 
    retproc                   
End


Proc pc_genmcl.px_labelname:
    param          pc_genmcl.px_labelname.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_labelname.p u64 
    callproc       &pc_genmcl.unimpl 
#14896: 
    retproc                   
End


Proc pc_genmcl.px_push:
    param          pc_genmcl.px_push.p u64 
    procentry                 
    push           pc_genmcl.px_push.p u64 
    pushptr                   u8 
    push           1          i64 
    casejumpeq     #14898     i64 0
    push           2          i64 
    casejumpeq     #14899     i64 0
    push           4          i64 
    casejumpeq     #14900     i64 0
    push           5          i64 
    casejumpeq     #14901     i64 0
    push           7          i64 
    casejumpeq     #14902     i64 0
    push           8          i64 
    casejumpeq     #14903     i64 0
    push           6          i64 
    casejumpeq     #14904     i64 0
    popstack                  i64 
    jump           #14905     
#14898: 
    setargs                   1 0
    push           pc_genmcl.px_push.p u64 
    callproc       &pc_stackmcl.addmem 
    jump           #14906     
#14899: 
    setargs                   1 0
    push           pc_genmcl.px_push.p u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &pc_stackmcl.addmemaddr 
    jump           #14906     
#14900: 
    setargs                   1 0
    push           pc_genmcl.px_push.p u64 
    push           8          
    pushptroff                i64 1 0
    callproc       &pc_stackmcl.addint 
    jump           #14906     
#14901: 
    setargs                   1 0
    push           pc_genmcl.px_push.p u64 
    push           8          
    pushptroff                r64 1 0
    callproc       &pc_stackmcl.addreal 
    jump           #14906     
#14902: 
    setargs                   1 0
    push           pc_genmcl.px_push.p u64 
    push           8          
    pushptroff                r32 1 0
    fwiden                    r64 r32 
    callproc       &pc_stackmcl.addreal32 
    jump           #14906     
#14903: 
    setargs                   1 0
    push           pc_genmcl.px_push.p u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &pc_stackmcl.addstring 
    jump           #14906     
#14904: 
    setargs                   1 0
    push           pc_genmcl.px_push.p u64 
    push           8          
    addrefoff                 u64 1 0
    callproc       &pc_stackmcl.addint128 
    jump           #14906     
#14905: 
    setargs                   2 0
    push           &pc_tables.opndnames 
    push           pc_genmcl.px_push.p u64 
    pushptr                   u8 
    pushptroff                u64 8 0
    push           "push"     u64 
    callproc       &pc_libmcl.merror 
#14906: 
#14907: 
    retproc                   
End


Proc pc_genmcl.px_pop:
    param          pc_genmcl.px_pop.p u64 
    local          pc_genmcl.px_pop.ax u64 
    local          pc_genmcl.px_pop.bx u64 
    local          pc_genmcl.px_pop.i i64 
    procentry                 
    push           pc_genmcl.px_pop.p u64 
    pushptr                   u8 
    push           1          i64 
    casejumpeq     #14909     i64 0
    popstack                  i64 
    jump           #14910     
#14909: 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_pop.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #14911     i64 0
    push           3          i64 
    casejumpeq     #14912     i64 0
    push           2          i64 
    casejumpeq     #14913     i64 0
    push           5          i64 
    casejumpeq     #14914     i64 0
    push           4          i64 
    casejumpeq     #14915     i64 0
    push           6          i64 
    casejumpeq     #14916     i64 0
    popstack                  i64 
    jump           #14917     
#14911: 
#14918: 
    push           1          i64 
    pop            pc_genmcl.px_pop.i i64 
    push           pci_mcl.noperands i64 
    push           1          i64 
    jumplt         #14919     i64 
#14920: 
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.px_pop.i i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           3          i64 
    casejumpeq     #14921     i64 0
    push           5          i64 
    casejumpeq     #14922     i64 0
    popstack                  i64 
    jump           #14923     
#14921: 
    jump           #14919     
    jump           #14924     
#14922: 
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.px_pop.i i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    push           pc_genmcl.px_pop.p u64 
    push           8          
    pushptroff                u64 1 0
    jumpne         #14925     u64 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_pop.i i64 
    callproc       &pc_stackmcl.genopnd_ld 
#14925: 
    jump           #14924     
#14923: 
#14924: 
#14926: 
    forup          #14920     i64 1
    opnd           pc_genmcl.px_pop.i 
    opnd           pci_mcl.noperands 
#14919: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    setargs                   1 0
    push           pc_genmcl.px_pop.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #14927     
#14912: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    setargs                   1 0
    push           pc_genmcl.px_pop.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #14927     
#14913: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    setargs                   1 0
    push           pc_genmcl.px_pop.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    jump           #14927     
#14914: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    setargs                   1 0
    push           pc_genmcl.px_pop.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_genmcl.px_pop.p u64 
    push           1          
    pushptroff                u8 1 0
    push           23         i64 
    jumpeq         #14928     i64 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#14928: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    setargs                   1 0
    push           pc_genmcl.px_pop.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmemhigh u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_genmcl.px_pop.p u64 
    push           1          
    pushptroff                u8 1 0
    push           23         i64 
    jumpeq         #14929     i64 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#14929: 
    jump           #14930     
    jump           #14927     
#14915: 
    setargs                   3 0
    setargs                   2 0
    push           pc_genmcl.px_pop.p u64 
    push           4          
    pushptroff                i32 1 0
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    setargs                   1 0
    push           pc_genmcl.px_pop.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #14927     
#14916: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.px_pop.bx u64 
    setargs                   1 0
    push           pc_genmcl.px_pop.p u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &pc_stackmcl.addmemaddr 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.px_pop.ax u64 
    setargs                   3 0
    push           pc_genmcl.px_pop.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_genmcl.px_pop.bx u64 
    push           pc_genmcl.px_pop.ax u64 
    callproc       &pc_libmcl.copyblock 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #14927     
#14917: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "POPMEM"   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_genmcl.px_pop.p u64 
    push           3          
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#14927: 
    jump           #14931     
#14910: 
    setargs                   2 0
    push           pc_genmcl.px_pop.p u64 
    pushptr                   u8 
    push           "POP"      u64 
    callproc       &pc_libmcl.merroropnd 
#14931: 
    push           pc_genmcl.px_pop.p u64 
    push           1          
    pushptroff                u8 1 0
    push           23         i64 
    jumpeq         #14932     i64 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#14932: 
#14930: 
    retproc                   
End


Proc pc_genmcl.px_store:
    param          pc_genmcl.px_store.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_store.p u64 
    callproc       &pc_genmcl.px_pop 
#14934: 
    retproc                   
End


Proc pc_genmcl.px_pushnc:
    param          pc_genmcl.px_pushnc.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_pushnc.p u64 
    callproc       &pc_genmcl.unimpl 
#14936: 
    retproc                   
End


Proc pc_genmcl.px_opnd:
    param          pc_genmcl.px_opnd.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_opnd.p u64 
    callproc       &pc_genmcl.unimpl 
#14938: 
    retproc                   
End


Proc pc_genmcl.px_type:
    param          pc_genmcl.px_type.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_type.p u64 
    callproc       &pc_genmcl.unimpl 
#14940: 
    retproc                   
End


Proc pc_genmcl.px_pushptroff:
    param          pc_genmcl.px_pushptroff.p u64 
    local          pc_genmcl.px_pushptroff.ax u64 
    local          pc_genmcl.px_pushptroff.bx u64 
    local          pc_genmcl.px_pushptroff.cx u64 
    local          pc_genmcl.px_pushptroff.fx u64 
    local          pc_genmcl.px_pushptroff.m i64 
    procentry                 
    push           pc_genmcl.px_pushptroff.p u64 
    push           3          
    pushptroff                u8 1 0
    pop            pc_genmcl.px_pushptroff.m i64 
    setargs                   1 0
    push           pc_genmcl.px_pushptroff.p u64 
    callfn         &pc_genmcl.do_addrmode u64 
    pop            pc_genmcl.px_pushptroff.cx u64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #14942     i64 
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           1          
    popptroff                 u8 1 0
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
#14942: 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_pushptroff.ax u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_pushptroff.m i64 
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #14943     i64 0
    push           3          i64 
    casejumpeq     #14944     i64 0
    push           2          i64 
    casejumpeq     #14945     i64 0
    push           4          i64 
    casejumpeq     #14946     i64 0
    push           5          i64 
    casejumpeq     #14947     i64 0
    push           6          i64 
    casejumpeq     #14948     i64 0
    popstack                  i64 
    jump           #14949     
#14943: 
    setargs                   3 0
    push           pc_genmcl.px_pushptroff.cx u64 
    push           pc_genmcl.px_pushptroff.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #14950     
#14944: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_x64 
    setargs                   2 0
    push           3          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_pushptroff.fx u64 
    setargs                   3 0
    push           pc_genmcl.px_pushptroff.cx u64 
    push           pc_genmcl.px_pushptroff.fx u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #14950     
#14945: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_x32 
    setargs                   2 0
    push           3          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_pushptroff.fx u64 
    setargs                   3 0
    setargs                   2 0
    push           4          i64 
    push           pc_genmcl.px_pushptroff.cx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           pc_genmcl.px_pushptroff.fx u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #14950     
#14946: 
    push           pc_genmcl.px_pushptroff.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_genmcl.px_pushptroff.cx u64 
    push           8          
    popptroff                 u8 1 0
    setargs                   3 0
    push           pc_genmcl.px_pushptroff.cx u64 
    push           pc_genmcl.px_pushptroff.ax u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_genmcl.px_pushptroff.m i64 
    pushptroff                u8 1 0
    jumpfalse      #14951     i64 
    push           19         i64 
    resetmult                 
    jump           #14952     
#14951: 
    push           20         i64 
    endmult                   
#14952: 
    callproc       &pc_libmcl.genmc 
    jump           #14950     
#14947: 
    setargs                   0 0
    callfn         &pc_stackmcl.genopnd_d64 u64 
    pop            pc_genmcl.px_pushptroff.bx u64 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   2 0
    push           3          i64 
    push           2          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   3 0
    setargs                   3 0
    push           8          i64 
    push           8          i64 
    push           pc_genmcl.px_pushptroff.cx u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           pc_genmcl.px_pushptroff.bx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_pushptroff.cx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           pc_genmcl.px_pushptroff.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.setwideopnd 
    jump           #14953     
    jump           #14950     
#14948: 
    setargs                   3 0
    push           pc_genmcl.px_pushptroff.cx u64 
    push           pc_genmcl.px_pushptroff.ax u64 
    push           15         i64 
    callproc       &pc_libmcl.genmc 
    jump           #14950     
#14949: 
    setargs                   2 0
    push           pc_genmcl.px_pushptroff.m i64 
    push           "pushptroff" u64 
    callproc       &pc_libmcl.merrort 
#14950: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#14953: 
    retproc                   
End


Proc pc_genmcl.px_popptroff:
    param          pc_genmcl.px_popptroff.p u64 
    local          pc_genmcl.px_popptroff.ax u64 
    local          pc_genmcl.px_popptroff.bx u64 
    local          pc_genmcl.px_popptroff.cx u64 
    local          pc_genmcl.px_popptroff.px u64 
    local          pc_genmcl.px_popptroff.m i64 
    procentry                 
    push           pc_genmcl.px_popptroff.p u64 
    push           3          
    pushptroff                u8 1 0
    pop            pc_genmcl.px_popptroff.m i64 
    setargs                   1 0
    push           pc_genmcl.px_popptroff.p u64 
    callfn         &pc_genmcl.do_addrmode u64 
    pop            pc_genmcl.px_popptroff.px u64 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_popptroff.cx u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_popptroff.m i64 
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #14955     i64 0
    push           3          i64 
    casejumpeq     #14956     i64 0
    push           2          i64 
    casejumpeq     #14957     i64 0
    push           4          i64 
    casejumpeq     #14958     i64 0
    push           5          i64 
    casejumpeq     #14959     i64 0
    push           6          i64 
    casejumpeq     #14960     i64 0
    popstack                  i64 
    jump           #14961     
#14955: 
    setargs                   3 0
    push           pc_genmcl.px_popptroff.cx u64 
    push           pc_genmcl.px_popptroff.px u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #14962     
#14956: 
    setargs                   3 0
    push           pc_genmcl.px_popptroff.cx u64 
    push           pc_genmcl.px_popptroff.px u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #14962     
#14957: 
    setargs                   3 0
    push           pc_genmcl.px_popptroff.cx u64 
    setargs                   2 0
    push           4          i64 
    push           pc_genmcl.px_popptroff.px u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    jump           #14962     
#14958: 
    push           pc_genmcl.px_popptroff.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_genmcl.px_popptroff.px u64 
    push           8          
    popptroff                 u8 1 0
    setargs                   3 0
    setargs                   2 0
    push           pc_genmcl.px_popptroff.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_genmcl.px_popptroff.cx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           pc_genmcl.px_popptroff.px u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #14962     
#14959: 
    setargs                   3 0
    push           pc_genmcl.px_popptroff.cx u64 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_popptroff.px u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           4          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    setargs                   3 0
    push           8          i64 
    push           8          i64 
    push           pc_genmcl.px_popptroff.px u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #14962     
#14960: 
    setargs                   3 0
    push           pc_genmcl.px_popptroff.p u64 
    push           4          
    pushptroff                i32 1 0
    setargs                   2 0
    push           0          i64 
    push           pc_genmcl.px_popptroff.cx u64 
    callfn         &pc_libmcl.makeopndind u64 
    push           pc_genmcl.px_popptroff.px u64 
    callproc       &pc_libmcl.copyblock 
    jump           #14962     
#14961: 
    setargs                   2 0
    push           pc_genmcl.px_popptroff.m i64 
    push           "popptroff " u64 
    callproc       &pc_libmcl.merrort 
#14962: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    push           pc_genmcl.px_popptroff.p u64 
    push           1          
    pushptroff                u8 1 0
    push           31         i64 
    jumpne         #14963     i64 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_popptroff.m i64 
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #14964     i64 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#14964: 
#14963: 
#14965: 
    retproc                   
End


Proc pc_genmcl.px_storeptroff:
    param          pc_genmcl.px_storeptroff.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_storeptroff.p u64 
    callproc       &pc_genmcl.px_popptroff 
#14967: 
    retproc                   
End


Proc pc_genmcl.px_pushptr:
    param          pc_genmcl.px_pushptr.p u64 
    local          pc_genmcl.px_pushptr.ax u64 
    local          pc_genmcl.px_pushptr.px u64 
    local          pc_genmcl.px_pushptr.cx u64 
    local          pc_genmcl.px_pushptr.fx u64 
    local          pc_genmcl.px_pushptr.bx u64 
    local          pc_genmcl.px_pushptr.m i64 
    procentry                 
    push           pc_genmcl.px_pushptr.p u64 
    push           3          
    pushptroff                u8 1 0
    pop            pc_genmcl.px_pushptr.m i64 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.isregvaropnd i64 
    jumpfalse      #14969     i64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_pushptr.m i64 
    pushptroff                u8 1 0
    push           6          i64 
    jumpeq         #14969     i64 
    setargs                   3 0
    push           0          i64 
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenireg u64 
    pop            pc_genmcl.px_pushptr.cx u64 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_genmcl.makeregopnd u64 
    pop            pc_genmcl.px_pushptr.ax u64 
    jump           #14970     
#14969: 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           11         i64 
    jumpne         #14971     i64 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    pop            pc_genmcl.px_pushptr.cx u64 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_genmcl.makeregopnd u64 
    pop            pc_genmcl.px_pushptr.ax u64 
    jump           #14970     
#14971: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_pushptr.ax u64 
    setargs                   2 0
    push           0          i64 
    push           pc_genmcl.px_pushptr.ax u64 
    callfn         &pc_libmcl.makeopndind u64 
    pop            pc_genmcl.px_pushptr.cx u64 
#14970: 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_pushptr.m i64 
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #14972     i64 0
    push           4          i64 
    casejumpeq     #14973     i64 0
    push           3          i64 
    casejumpeq     #14974     i64 0
    push           2          i64 
    casejumpeq     #14975     i64 0
    push           5          i64 
    casejumpeq     #14976     i64 0
    push           6          i64 
    casejumpeq     #14977     i64 0
    popstack                  i64 
    jump           #14978     
#14972: 
    setargs                   3 0
    push           pc_genmcl.px_pushptr.cx u64 
    push           pc_genmcl.px_pushptr.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #14979     
#14973: 
    setargs                   3 0
    setargs                   2 0
    push           pc_genmcl.px_pushptr.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_genmcl.px_pushptr.cx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           pc_genmcl.px_pushptr.ax u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_genmcl.px_pushptr.m i64 
    pushptroff                u8 1 0
    jumpfalse      #14980     i64 
    push           19         i64 
    resetmult                 
    jump           #14981     
#14980: 
    push           20         i64 
    endmult                   
#14981: 
    callproc       &pc_libmcl.genmc 
    jump           #14979     
#14974: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_x64 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_pushptr.fx u64 
    setargs                   3 0
    push           pc_genmcl.px_pushptr.cx u64 
    push           pc_genmcl.px_pushptr.fx u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #14979     
#14975: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_x32 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_pushptr.fx u64 
    setargs                   3 0
    setargs                   2 0
    push           4          i64 
    push           pc_genmcl.px_pushptr.cx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           pc_genmcl.px_pushptr.fx u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #14979     
#14976: 
    setargs                   0 0
    callfn         &pc_stackmcl.genopnd_d64 u64 
    pop            pc_genmcl.px_pushptr.bx u64 
    setargs                   3 0
    push           pc_genmcl.px_pushptr.cx u64 
    push           pc_genmcl.px_pushptr.bx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   3 0
    push           0          i64 
    push           8          i64 
    push           pc_genmcl.px_pushptr.cx u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           pc_genmcl.px_pushptr.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.setwideopnd 
    jump           #14979     
#14977: 
    jump           #14979     
#14978: 
    setargs                   1 0
    push           "****PUSHPTR" u64 
    callproc       &pc_libmcl.mgencomment 
#14979: 
#14982: 
    retproc                   
End


Proc pc_genmcl.px_popptr:
    param          pc_genmcl.px_popptr.p u64 
    local          pc_genmcl.px_popptr.ax u64 
    local          pc_genmcl.px_popptr.bx u64 
    local          pc_genmcl.px_popptr.cx u64 
    local          pc_genmcl.px_popptr.px u64 
    local          pc_genmcl.px_popptr.m i64 
    procentry                 
    push           pc_genmcl.px_popptr.p u64 
    push           3          
    pushptroff                u8 1 0
    pop            pc_genmcl.px_popptr.m i64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_popptr.bx u64 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.isregvaropnd i64 
    jumpfalse      #14984     i64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_popptr.m i64 
    pushptroff                u8 1 0
    push           6          i64 
    jumpeq         #14984     i64 
    setargs                   3 0
    push           0          i64 
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenireg u64 
    pop            pc_genmcl.px_popptr.ax u64 
    jump           #14985     
#14984: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.px_popptr.ax u64 
#14985: 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_popptr.m i64 
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #14986     i64 0
    push           4          i64 
    casejumpeq     #14987     i64 0
    push           3          i64 
    casejumpeq     #14988     i64 0
    push           2          i64 
    casejumpeq     #14989     i64 0
    push           5          i64 
    casejumpeq     #14990     i64 0
    push           6          i64 
    casejumpeq     #14991     i64 0
    popstack                  i64 
    jump           #14992     
#14986: 
    setargs                   3 0
    push           pc_genmcl.px_popptr.bx u64 
    push           pc_genmcl.px_popptr.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #14993     
#14987: 
    setargs                   3 0
    setargs                   2 0
    push           &pc_tables.psize 
    push           pc_genmcl.px_popptr.m i64 
    pushptroff                u8 1 0
    push           pc_genmcl.px_popptr.bx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    setargs                   2 0
    push           &pc_tables.psize 
    push           pc_genmcl.px_popptr.m i64 
    pushptroff                u8 1 0
    push           pc_genmcl.px_popptr.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #14993     
#14988: 
    setargs                   3 0
    push           pc_genmcl.px_popptr.bx u64 
    push           pc_genmcl.px_popptr.ax u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #14993     
#14989: 
    setargs                   3 0
    push           pc_genmcl.px_popptr.bx u64 
    setargs                   2 0
    push           4          i64 
    push           pc_genmcl.px_popptr.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    jump           #14993     
#14990: 
    setargs                   3 0
    push           pc_genmcl.px_popptr.bx u64 
    push           pc_genmcl.px_popptr.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    setargs                   3 0
    push           0          i64 
    push           8          i64 
    push           pc_genmcl.px_popptr.ax u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #14993     
#14991: 
    setargs                   3 0
    push           pc_genmcl.px_popptr.p u64 
    push           4          
    pushptroff                i32 1 0
    setargs                   2 0
    push           0          i64 
    push           pc_genmcl.px_popptr.bx u64 
    callfn         &pc_libmcl.makeopndind u64 
    push           pc_genmcl.px_popptr.ax u64 
    callproc       &pc_libmcl.copyblock 
    jump           #14993     
#14992: 
    setargs                   2 0
    push           pc_genmcl.px_popptr.m i64 
    push           "popptr "  u64 
    callproc       &pc_libmcl.merrort 
#14993: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    push           pc_genmcl.px_popptr.p u64 
    push           1          
    pushptroff                u8 1 0
    push           34         i64 
    jumpne         #14994     i64 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_popptr.m i64 
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #14995     i64 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#14995: 
#14994: 
#14996: 
    retproc                   
End


Proc pc_genmcl.px_storeptr:
    param          pc_genmcl.px_storeptr.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_storeptr.p u64 
    callproc       &pc_genmcl.px_popptr 
#14998: 
    retproc                   
End


Proc pc_genmcl.px_dotindex:
    param          pc_genmcl.px_dotindex.p u64 
    local          pc_genmcl.px_dotindex.ax u64 
    local          pc_genmcl.px_dotindex.i i64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpeq         #15000     i64 
    setargs                   2 0
    push           ""         u64 
    push           "dotix i not imm" u64 
    callproc       &pc_libmcl.merror 
#15000: 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_dotindex.ax u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    pop            pc_genmcl.px_dotindex.i i64 
    push           pc_genmcl.px_dotindex.i i64 
    jumpfalse      #15001     i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_dotindex.i i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_dotindex.ax u64 
    push           46         i64 
    callproc       &pc_libmcl.genmc 
#15001: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_libmcl.mgenint u64 
    setargs                   2 0
    push           4          i64 
    push           pc_genmcl.px_dotindex.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           39         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#15002: 
    retproc                   
End


Proc pc_genmcl.px_popdotindex:
    param          pc_genmcl.px_popdotindex.p u64 
    local          pc_genmcl.px_popdotindex.ax u64 
    local          pc_genmcl.px_popdotindex.bx u64 
    local          pc_genmcl.px_popdotindex.cx u64 
    local          pc_genmcl.px_popdotindex.rx u64 
    local          pc_genmcl.px_popdotindex.mx u64 
    local          pc_genmcl.px_popdotindex.i i64 
    local          pc_genmcl.px_popdotindex.size i64 
    local          pc_genmcl.px_popdotindex.cxfmt i64 
    local          pc_genmcl.px_popdotindex.rhs i64 
    local          pc_genmcl.px_popdotindex.axoffset i64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           3          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #15004     i64 
    push           pci_mcl.pclstack u64 
    push           3          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    pop            pc_genmcl.px_popdotindex.rhs i64 
    push           0          u64 
    pop            pc_genmcl.px_popdotindex.cx u64 
    jump           #15005     
#15004: 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_popdotindex.cx u64 
#15005: 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpeq         #15006     i64 
    setargs                   2 0
    push           ""         u64 
    push           "popdotix i not imm" u64 
    callproc       &pc_libmcl.merror 
#15006: 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    pop            pc_genmcl.px_popdotindex.i i64 
    push           pc_genmcl.px_popdotindex.p u64 
    push           4          
    pushptroff                i32 1 0
    pop            pc_genmcl.px_popdotindex.size i64 
    push           2          i64 
    pop            pc_genmcl.px_popdotindex.axoffset i64 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_d64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_popdotindex.rx u64 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_d64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_popdotindex.mx u64 
    setargs                   2 0
    push           pc_genmcl.px_popdotindex.size i64 
    push           pc_genmcl.px_popdotindex.axoffset i64 
    push           2          i64 
    add                       i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.px_popdotindex.ax u64 
    setargs                   3 0
    push           pc_genmcl.px_popdotindex.ax u64 
    push           pc_genmcl.px_popdotindex.rx u64 
    startmult                 
    push           pc_genmcl.px_popdotindex.size i64 
    push           8          i64 
    jumpne         #15007     i64 
    push           12         i64 
    resetmult                 
    jump           #15008     
#15007: 
    push           20         i64 
    endmult                   
#15008: 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    push           pc_genmcl.px_popdotindex.i i64 
    shl                       i64 
    inot                      i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_popdotindex.mx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.px_popdotindex.mx u64 
    push           pc_genmcl.px_popdotindex.rx u64 
    push           39         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_genmcl.px_popdotindex.cx u64 
    jumpfalse      #15009     u64 
    push           pc_genmcl.px_popdotindex.i i64 
    jumpfalse      #15010     i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_popdotindex.i i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_popdotindex.cx u64 
    push           44         i64 
    callproc       &pc_libmcl.genmc 
#15010: 
    setargs                   3 0
    push           pc_genmcl.px_popdotindex.cx u64 
    push           pc_genmcl.px_popdotindex.rx u64 
    push           40         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15011     
#15009: 
    push           pc_genmcl.px_popdotindex.rhs i64 
    push           0          i64 
    jumpeq         #15012     i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    push           pc_genmcl.px_popdotindex.i i64 
    shl                       i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_popdotindex.rx u64 
    push           40         i64 
    callproc       &pc_libmcl.genmc 
#15012: 
#15011: 
    setargs                   3 0
    setargs                   2 0
    push           pc_genmcl.px_popdotindex.size i64 
    push           pc_genmcl.px_popdotindex.rx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           pc_genmcl.px_popdotindex.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    push           pc_genmcl.px_popdotindex.p u64 
    push           1          
    pushptroff                u8 1 0
    push           37         i64 
    jumpne         #15013     i64 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#15013: 
#15014: 
    retproc                   
End


Proc pc_genmcl.px_storedotindex:
    param          pc_genmcl.px_storedotindex.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_storedotindex.p u64 
    callproc       &pc_genmcl.px_popdotindex 
#15016: 
    retproc                   
End


Proc pc_genmcl.px_dotslice:
    param          pc_genmcl.px_dotslice.p u64 
    local          pc_genmcl.px_dotslice.ax u64 
    local          pc_genmcl.px_dotslice.mx u64 
    local          pc_genmcl.px_dotslice.mx4 u64 
    local          pc_genmcl.px_dotslice.i i64 
    local          pc_genmcl.px_dotslice.j i64 
    local          pc_genmcl.px_dotslice.mask u64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #15018     i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpeq         #15019     i64 
#15018: 
    setargs                   2 0
    push           ""         u64 
    push           "dotslice i/j not imm" u64 
    callproc       &pc_libmcl.merror 
#15019: 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_dotslice.ax u64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    pop            pc_genmcl.px_dotslice.i i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    pop            pc_genmcl.px_dotslice.j i64 
    push           pc_genmcl.px_dotslice.i i64 
    jumpfalse      #15020     i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_dotslice.i i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_dotslice.ax u64 
    push           46         i64 
    callproc       &pc_libmcl.genmc 
#15020: 
    push           -1         u64 
    push           pc_genmcl.px_dotslice.j i64 
    push           pc_genmcl.px_dotslice.i i64 
    sub                       i64 
    push           1          i64 
    add                       i64 
    shl                       u64 
    inot                      u64 
    pop            pc_genmcl.px_dotslice.mask u64 
    push           pc_genmcl.px_dotslice.mask u64 
    push           2147483647 u64 
    jumpgt         #15021     u64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_dotslice.mask i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_dotslice.ax u64 
    push           39         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15022     
#15021: 
    setargs                   1 0
    push           2          i64 
    callfn         &pc_genmcl.makeregopnd u64 
    pop            pc_genmcl.px_dotslice.mx u64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_dotslice.mask i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_dotslice.mx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.px_dotslice.mx u64 
    push           pc_genmcl.px_dotslice.ax u64 
    push           39         i64 
    callproc       &pc_libmcl.genmc 
#15022: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#15023: 
    retproc                   
End


Proc pc_genmcl.px_popdotslice:
    param          pc_genmcl.px_popdotslice.p u64 
    local          pc_genmcl.px_popdotslice.ax u64 
    local          pc_genmcl.px_popdotslice.rx u64 
    local          pc_genmcl.px_popdotslice.mx u64 
    local          pc_genmcl.px_popdotslice.mx4 u64 
    local          pc_genmcl.px_popdotslice.dx u64 
    local          pc_genmcl.px_popdotslice.i i64 
    local          pc_genmcl.px_popdotslice.j i64 
    local          pc_genmcl.px_popdotslice.size i64 
    local          pc_genmcl.px_popdotslice.mask u64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #15025     i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpeq         #15026     i64 
#15025: 
    setargs                   2 0
    push           ""         u64 
    push           "popdotslice i/j not imm" u64 
    callproc       &pc_libmcl.merror 
#15026: 
    setargs                   2 0
    push           8          i64 
    push           4          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_popdotslice.dx u64 
    push           pc_genmcl.px_popdotslice.p u64 
    push           4          
    pushptroff                i32 1 0
    pop            pc_genmcl.px_popdotslice.size i64 
    setargs                   2 0
    push           pc_genmcl.px_popdotslice.size i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.px_popdotslice.ax u64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    pop            pc_genmcl.px_popdotslice.i i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    pop            pc_genmcl.px_popdotslice.j i64 
    setargs                   1 0
    push           2          i64 
    callfn         &pc_genmcl.makeregopnd u64 
    pop            pc_genmcl.px_popdotslice.mx u64 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_genmcl.makeregopnd u64 
    pop            pc_genmcl.px_popdotslice.rx u64 
    setargs                   3 0
    push           pc_genmcl.px_popdotslice.p u64 
    push           3          
    pushptroff                u8 1 0
    push           pc_genmcl.px_popdotslice.ax u64 
    push           pc_genmcl.px_popdotslice.rx u64 
    callproc       &pc_genmcl.loadtoreg 
    push           -1         u64 
    push           pc_genmcl.px_popdotslice.j i64 
    push           pc_genmcl.px_popdotslice.i i64 
    sub                       i64 
    push           1          i64 
    add                       i64 
    shl                       u64 
    inot                      u64 
    push           pc_genmcl.px_popdotslice.i i64 
    shl                       u64 
    inot                      u64 
    pop            pc_genmcl.px_popdotslice.mask u64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_popdotslice.mask i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_popdotslice.mx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_genmcl.px_popdotslice.i i64 
    jumpfalse      #15027     i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_popdotslice.i i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_popdotslice.dx u64 
    push           44         i64 
    callproc       &pc_libmcl.genmc 
#15027: 
    setargs                   3 0
    push           pc_genmcl.px_popdotslice.mx u64 
    push           pc_genmcl.px_popdotslice.rx u64 
    push           39         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.px_popdotslice.dx u64 
    push           pc_genmcl.px_popdotslice.rx u64 
    push           40         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.px_popdotslice.size i64 
    push           pc_genmcl.px_popdotslice.rx u64 
    push           pc_genmcl.px_popdotslice.ax u64 
    callproc       &pc_genmcl.storefromreg 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    push           pc_genmcl.px_popdotslice.p u64 
    push           1          
    pushptroff                u8 1 0
    push           40         i64 
    jumpne         #15028     i64 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#15028: 
#15029: 
    retproc                   
End


Proc pc_genmcl.px_storedotslice:
    param          pc_genmcl.px_storedotslice.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_storedotslice.p u64 
    callproc       &pc_genmcl.px_popdotslice 
#15031: 
    retproc                   
End


Proc pc_genmcl.px_popstack:
    param          pc_genmcl.px_popstack.p u64 
    procentry                 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#15033: 
    retproc                   
End


Proc pc_genmcl.px_eval:
    param          pc_genmcl.px_eval.p u64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           4          
    pushptroff                u8 1 0
    push           76         i64 
    jumpne         #15035     i64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callproc       &pc_stackmcl.genopnd_ld 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callproc       &pc_stackmcl.genopnd_ld 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #15036     
#15035: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callproc       &pc_stackmcl.genopnd_ld 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#15036: 
#15037: 
    retproc                   
End


Proc pc_genmcl.px_callproc:
    param          pc_genmcl.px_callproc.p u64 
    local          pc_genmcl.px_callproc.nslots i64 
    local          pc_genmcl.px_callproc.nargs i64 
    local          pc_genmcl.px_callproc.av_1 i64 
    procentry                 
    push           &pci_mcl.callargs 
    push           pci_mcl.ncalldepth i64 
    pushptroff                u8 1 -1
    pop            pc_genmcl.px_callproc.nargs i64 
    setargs                   2 0
    push           0          i64 
    push           pc_genmcl.px_callproc.p u64 
    callfn         &pc_genmcl.do_pushparams i64 
    pop            pc_genmcl.px_callproc.nslots i64 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_callproc.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmemaddr u64 
    push           22         i64 
    callproc       &pc_libmcl.genmc 
#15039: 
    push           pc_genmcl.px_callproc.nargs i64 
    pop            pc_genmcl.px_callproc.av_1 i64 
    push           pc_genmcl.px_callproc.av_1 i64 
    push           0          i64 
    jumple         #15040     i64 
#15041: 
    setargs                   0 0
    callproc       &pc_stackmcl.poparg 
#15042: 
    to             #15041     
    opnd           pc_genmcl.px_callproc.av_1 
#15040: 
    setargs                   1 0
    push           pc_genmcl.px_callproc.nslots i64 
    callproc       &pc_stackmcl.popslots 
#15043: 
    retproc                   
End


Proc pc_genmcl.px_callprocptr:
    param          pc_genmcl.px_callprocptr.p u64 
    local          pc_genmcl.px_callprocptr.nslots i64 
    local          pc_genmcl.px_callprocptr.nargs i64 
    local          pc_genmcl.px_callprocptr.av_1 i64 
    procentry                 
    push           &pci_mcl.callargs 
    push           pci_mcl.ncalldepth i64 
    pushptroff                u8 1 -1
    pop            pc_genmcl.px_callprocptr.nargs i64 
    setargs                   2 0
    push           1          i64 
    push           pc_genmcl.px_callprocptr.p u64 
    callfn         &pc_genmcl.do_pushparams i64 
    pop            pc_genmcl.px_callprocptr.nslots i64 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    push           22         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#15045: 
    push           pc_genmcl.px_callprocptr.nargs i64 
    pop            pc_genmcl.px_callprocptr.av_1 i64 
    push           pc_genmcl.px_callprocptr.av_1 i64 
    push           0          i64 
    jumple         #15046     i64 
#15047: 
    setargs                   0 0
    callproc       &pc_stackmcl.poparg 
#15048: 
    to             #15047     
    opnd           pc_genmcl.px_callprocptr.av_1 
#15046: 
    setargs                   1 0
    push           pc_genmcl.px_callprocptr.nslots i64 
    callproc       &pc_stackmcl.popslots 
#15049: 
    retproc                   
End


Proc pc_genmcl.px_retproc:
    param          pc_genmcl.px_retproc.p u64 
    local          pc_genmcl.px_retproc.offset i64 
    local          pc_genmcl.px_retproc.i i64 
    procentry                 
    push           pci_mcl.dsaveoffset i64 
    pop            pc_genmcl.px_retproc.offset i64 
#15051: 
    push           1          i64 
    pop            pc_genmcl.px_retproc.i i64 
    push           pci_mcl.ndsaveregs i64 
    push           1          i64 
    jumplt         #15052     i64 
#15053: 
    setargs                   3 0
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           8          i64 
    push           pc_genmcl.px_retproc.offset i64 
    push           1          i64 
    push           0          i64 
    push           15         i64 
    callfn         &pc_libmcl.mgenindex u64 
    setargs                   2 0
    push           8          i64 
    push           &pci_mcl.dsaveregs 
    push           pc_genmcl.px_retproc.i i64 
    pushptroff                i64 8 -8
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_genmcl.px_retproc.offset 
    push           8          i64 
    addto                     i64 
#15054: 
    forup          #15053     i64 1
    opnd           pc_genmcl.px_retproc.i 
    opnd           pci_mcl.ndsaveregs 
#15052: 
    push           pci_mcl.xsaveoffset i64 
    pop            pc_genmcl.px_retproc.offset i64 
#15055: 
    push           1          i64 
    pop            pc_genmcl.px_retproc.i i64 
    push           pci_mcl.nxsaveregs i64 
    push           1          i64 
    jumplt         #15056     i64 
#15057: 
    setargs                   3 0
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           8          i64 
    push           pc_genmcl.px_retproc.offset i64 
    push           1          i64 
    push           0          i64 
    push           15         i64 
    callfn         &pc_libmcl.mgenindex u64 
    setargs                   2 0
    push           8          i64 
    push           &pci_mcl.xsaveregs 
    push           pc_genmcl.px_retproc.i i64 
    pushptroff                i64 8 -8
    callfn         &pc_libmcl.mgenxreg u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_genmcl.px_retproc.offset 
    push           8          i64 
    addto                     i64 
#15058: 
    forup          #15057     i64 1
    opnd           pc_genmcl.px_retproc.i 
    opnd           pci_mcl.nxsaveregs 
#15056: 
    push           pci_mcl.needstackframe i64 
    jumpfalse      #15059     i64 
    push           pci_mcl.framebytes i64 
    jumpfalse      #15060     i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.framebytes i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pci_mcl.dstackopnd u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
#15060: 
    setargs                   3 0
    push           0          u64 
    push           pci_mcl.dframeopnd u64 
    push           14         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15061     
#15059: 
    push           pci_mcl.needshadow32 i64 
    jumpfalse      #15062     i64 
    setargs                   1 0
    push           pci_mcl.needshadow32 i64 
    callproc       &pc_stackmcl.popstack 
#15062: 
#15061: 
    push           pci_mcl.needshadow48 i64 
    jumpfalse      #15063     i64 
    setargs                   1 0
    push           48         i64 
    callproc       &pc_stackmcl.popstack 
#15063: 
#15064: 
    push           pci_mcl.ndsavepush i64 
    pop            pc_genmcl.px_retproc.i i64 
    push           pc_genmcl.px_retproc.i i64 
    push           1          i64 
    jumplt         #15065     i64 
#15066: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           &pci_mcl.dsaveregs 
    push           pc_genmcl.px_retproc.i i64 
    pushptroff                i64 8 -8
    callfn         &pc_libmcl.mgenreg u64 
    push           14         i64 
    callproc       &pc_libmcl.genmc 
#15067: 
    fordown        #15066     i64 1
    opnd           pc_genmcl.px_retproc.i 
    opnd           1          
#15065: 
    setargs                   3 0
    push           0          u64 
    push           0          u64 
    push           23         i64 
    callproc       &pc_libmcl.genmc 
#15068: 
    retproc                   
End


Proc pc_genmcl.px_callfn:
    param          pc_genmcl.px_callfn.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_callfn.p u64 
    callproc       &pc_genmcl.px_callproc 
    setargs                   1 0
    push           pc_genmcl.px_callfn.p u64 
    callproc       &pc_genmcl.dogetretvalue 
#15070: 
    retproc                   
End


Proc pc_genmcl.px_callfnptr:
    param          pc_genmcl.px_callfnptr.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_callfnptr.p u64 
    callproc       &pc_genmcl.px_callprocptr 
    setargs                   1 0
    push           pc_genmcl.px_callfnptr.p u64 
    callproc       &pc_genmcl.dogetretvalue 
#15072: 
    retproc                   
End


Proc pc_genmcl.px_retfn:
    param          pc_genmcl.px_retfn.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_retfn.p u64 
    callproc       &pc_genmcl.px_retproc 
#15074: 
    retproc                   
End


Proc pc_genmcl.px_jump:
    param          pc_genmcl.px_jump.p u64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_jump.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    push           26         i64 
    callproc       &pc_libmcl.genmc 
#15076: 
    retproc                   
End


Proc pc_genmcl.px_jumpptr:
    param          pc_genmcl.px_jumpptr.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_jumpptr.p u64 
    callproc       &pc_genmcl.unimpl 
#15078: 
    retproc                   
End


Proc pc_genmcl.px_jumpeq:
    param          pc_genmcl.px_jumpeq.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_jumpeq.p u64 
    callproc       &pc_genmcl.dojumpcc 
#15080: 
    retproc                   
End


Proc pc_genmcl.px_jumpne:
    param          pc_genmcl.px_jumpne.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_jumpne.p u64 
    callproc       &pc_genmcl.dojumpcc 
#15082: 
    retproc                   
End


Proc pc_genmcl.px_jumplt:
    param          pc_genmcl.px_jumplt.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_jumplt.p u64 
    callproc       &pc_genmcl.dojumpcc 
#15084: 
    retproc                   
End


Proc pc_genmcl.px_jumple:
    param          pc_genmcl.px_jumple.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_jumple.p u64 
    callproc       &pc_genmcl.dojumpcc 
#15086: 
    retproc                   
End


Proc pc_genmcl.px_jumpge:
    param          pc_genmcl.px_jumpge.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_jumpge.p u64 
    callproc       &pc_genmcl.dojumpcc 
#15088: 
    retproc                   
End


Proc pc_genmcl.px_jumpgt:
    param          pc_genmcl.px_jumpgt.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_jumpgt.p u64 
    callproc       &pc_genmcl.dojumpcc 
#15090: 
    retproc                   
End


Proc pc_genmcl.px_jumptrue:
    param          pc_genmcl.px_jumptrue.p u64 
    procentry                 
    setargs                   2 0
    push           5          i64 
    push           pc_genmcl.px_jumptrue.p u64 
    callproc       &pc_genmcl.dojumptruefalse 
#15092: 
    retproc                   
End


Proc pc_genmcl.px_jumpfalse:
    param          pc_genmcl.px_jumpfalse.p u64 
    procentry                 
    setargs                   2 0
    push           4          i64 
    push           pc_genmcl.px_jumpfalse.p u64 
    callproc       &pc_genmcl.dojumptruefalse 
#15094: 
    retproc                   
End


Proc pc_genmcl.px_jumpinrange:
    param          pc_genmcl.px_jumpinrange.p u64 
    local          pc_genmcl.px_jumpinrange.ax u64 
    local          pc_genmcl.px_jumpinrange.bx u64 
    local          pc_genmcl.px_jumpinrange.cx u64 
    local          pc_genmcl.px_jumpinrange.lx u64 
    local          pc_genmcl.px_jumpinrange.nolx u64 
    local          pc_genmcl.px_jumpinrange.nolab i64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_jumpinrange.ax u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_jumpinrange.bx u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_jumpinrange.cx u64 
    setargs                   1 0
    push           pc_genmcl.px_jumpinrange.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    pop            pc_genmcl.px_jumpinrange.lx u64 
    setargs                   3 0
    push           pc_genmcl.px_jumpinrange.bx u64 
    push           pc_genmcl.px_jumpinrange.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    setargs                   0 0
    callfn         &pc_libmcl.mcreatefwdlabel i64 
    store          pc_genmcl.px_jumpinrange.nolab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    pop            pc_genmcl.px_jumpinrange.nolx u64 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.px_jumpinrange.nolx u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_genmcl.px_jumpinrange.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #15096     i64 
    push           12         i64 
    resetmult                 
    jump           #15097     
#15096: 
    push           2          i64 
    endmult                   
#15097: 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.px_jumpinrange.cx u64 
    push           pc_genmcl.px_jumpinrange.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.px_jumpinrange.lx u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_genmcl.px_jumpinrange.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #15098     i64 
    push           14         i64 
    resetmult                 
    jump           #15099     
#15098: 
    push           6          i64 
    endmult                   
#15099: 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   1 0
    push           pc_genmcl.px_jumpinrange.nolab i64 
    callproc       &pc_libmcl.mdefinefwdlabel 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#15100: 
    retproc                   
End


Proc pc_genmcl.px_jumpnotinrange:
    param          pc_genmcl.px_jumpnotinrange.p u64 
    local          pc_genmcl.px_jumpnotinrange.ax u64 
    local          pc_genmcl.px_jumpnotinrange.bx u64 
    local          pc_genmcl.px_jumpnotinrange.cx u64 
    local          pc_genmcl.px_jumpnotinrange.lx u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_jumpnotinrange.ax u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_jumpnotinrange.bx u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_jumpnotinrange.cx u64 
    setargs                   1 0
    push           pc_genmcl.px_jumpnotinrange.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    pop            pc_genmcl.px_jumpnotinrange.lx u64 
    setargs                   3 0
    push           pc_genmcl.px_jumpnotinrange.bx u64 
    push           pc_genmcl.px_jumpnotinrange.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.px_jumpnotinrange.lx u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_genmcl.px_jumpnotinrange.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #15102     i64 
    push           12         i64 
    resetmult                 
    jump           #15103     
#15102: 
    push           2          i64 
    endmult                   
#15103: 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.px_jumpnotinrange.cx u64 
    push           pc_genmcl.px_jumpnotinrange.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.px_jumpnotinrange.lx u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_genmcl.px_jumpnotinrange.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #15104     i64 
    push           15         i64 
    resetmult                 
    jump           #15105     
#15104: 
    push           7          i64 
    endmult                   
#15105: 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#15106: 
    retproc                   
End


Proc pc_genmcl.px_setjumpeq:
    param          pc_genmcl.px_setjumpeq.p u64 
    procentry                 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_setjumpeq.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    push           4          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#15108: 
    retproc                   
End


Proc pc_genmcl.px_setjumpeqx:
    param          pc_genmcl.px_setjumpeqx.p u64 
    procentry                 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_setjumpeqx.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    push           4          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#15110: 
    retproc                   
End


Proc pc_genmcl.px_setjumpne:
    param          pc_genmcl.px_setjumpne.p u64 
    procentry                 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_setjumpne.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    push           5          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#15112: 
    retproc                   
End


Proc pc_genmcl.px_seteq:
    param          pc_genmcl.px_seteq.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_seteq.p u64 
    callproc       &pc_genmcl.dosetcc 
#15114: 
    retproc                   
End


Proc pc_genmcl.px_setne:
    param          pc_genmcl.px_setne.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_setne.p u64 
    callproc       &pc_genmcl.dosetcc 
#15116: 
    retproc                   
End


Proc pc_genmcl.px_setlt:
    param          pc_genmcl.px_setlt.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_setlt.p u64 
    callproc       &pc_genmcl.dosetcc 
#15118: 
    retproc                   
End


Proc pc_genmcl.px_setle:
    param          pc_genmcl.px_setle.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_setle.p u64 
    callproc       &pc_genmcl.dosetcc 
#15120: 
    retproc                   
End


Proc pc_genmcl.px_setge:
    param          pc_genmcl.px_setge.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_setge.p u64 
    callproc       &pc_genmcl.dosetcc 
#15122: 
    retproc                   
End


Proc pc_genmcl.px_setgt:
    param          pc_genmcl.px_setgt.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_setgt.p u64 
    callproc       &pc_genmcl.dosetcc 
#15124: 
    retproc                   
End


Proc pc_genmcl.px_casejumpeq:
    param          pc_genmcl.px_casejumpeq.p u64 
    procentry                 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_casejumpeq.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    push           4          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#15126: 
    retproc                   
End


Proc pc_genmcl.px_selecteq:
    param          pc_genmcl.px_selecteq.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_selecteq.p u64 
    callproc       &pc_genmcl.doselectcc 
#15128: 
    retproc                   
End


Proc pc_genmcl.px_selectne:
    param          pc_genmcl.px_selectne.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_selectne.p u64 
    callproc       &pc_genmcl.doselectcc 
#15130: 
    retproc                   
End


Proc pc_genmcl.px_selectlt:
    param          pc_genmcl.px_selectlt.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_selectlt.p u64 
    callproc       &pc_genmcl.doselectcc 
#15132: 
    retproc                   
End


Proc pc_genmcl.px_selectle:
    param          pc_genmcl.px_selectle.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_selectle.p u64 
    callproc       &pc_genmcl.doselectcc 
#15134: 
    retproc                   
End


Proc pc_genmcl.px_selectge:
    param          pc_genmcl.px_selectge.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_selectge.p u64 
    callproc       &pc_genmcl.doselectcc 
#15136: 
    retproc                   
End


Proc pc_genmcl.px_selectgt:
    param          pc_genmcl.px_selectgt.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_selectgt.p u64 
    callproc       &pc_genmcl.doselectcc 
#15138: 
    retproc                   
End


Proc pc_genmcl.px_selecttrue:
    param          pc_genmcl.px_selecttrue.p u64 
    local          pc_genmcl.px_selecttrue.ax u64 
    local          pc_genmcl.px_selecttrue.bx u64 
    local          pc_genmcl.px_selecttrue.cx u64 
    local          pc_genmcl.px_selecttrue.dx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_selecttrue.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #15140     i64 
    setargs                   2 0
    push           pc_genmcl.px_selecttrue.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "selecttrue" u64 
    callproc       &pc_libmcl.merrort 
#15140: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_selecttrue.ax u64 
    setargs                   3 0
    push           pc_genmcl.px_selecttrue.ax u64 
    push           pc_genmcl.px_selecttrue.ax u64 
    push           42         i64 
    callproc       &pc_libmcl.genmc 
    push           1          i64 
    pop            pci_mcl.noxorclear u8 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_selecttrue.dx u64 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_selecttrue.cx u64 
    push           0          i64 
    pop            pci_mcl.noxorclear u8 
    setargs                   4 0
    push           pc_genmcl.px_selecttrue.dx u64 
    push           pc_genmcl.px_selecttrue.cx u64 
    push           4          i64 
    push           16         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#15141: 
    retproc                   
End


Proc pc_genmcl.px_to:
    param          pc_genmcl.px_to.p u64 
    local          pc_genmcl.px_to.q u64 
    local          pc_genmcl.px_to.ax u64 
    procentry                 
    push           pc_genmcl.px_to.p u64 
    push           1          i64 
    addrefoff                 u64 32 0
    store          pc_genmcl.currpcl u64 
    pop            pc_genmcl.px_to.q u64 
    setargs                   1 0
    push           pc_genmcl.px_to.q u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    pop            pc_genmcl.px_to.ax u64 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.px_to.ax u64 
    push           54         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_to.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    push           5          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
#15143: 
    retproc                   
End


Proc pc_genmcl.px_forup:
    param          pc_genmcl.px_forup.p u64 
    procentry                 
    setargs                   4 0
    push           14         i64 
    push           29         i64 
    push           53         i64 
    push           pc_genmcl.px_forup.p u64 
    callproc       &pc_genmcl.do_for 
#15145: 
    retproc                   
End


Proc pc_genmcl.px_fordown:
    param          pc_genmcl.px_fordown.p u64 
    procentry                 
    setargs                   4 0
    push           13         i64 
    push           30         i64 
    push           54         i64 
    push           pc_genmcl.px_fordown.p u64 
    callproc       &pc_genmcl.do_for 
#15147: 
    retproc                   
End


Proc pc_genmcl.px_swap:
    param          pc_genmcl.px_swap.p u64 
    local          pc_genmcl.px_swap.ax u64 
    local          pc_genmcl.px_swap.bx u64 
    local          pc_genmcl.px_swap.px u64 
    local          pc_genmcl.px_swap.qx u64 
    procentry                 
    setargs                   2 0
    push           pc_genmcl.px_swap.p u64 
    push           4          
    pushptroff                i32 1 0
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.px_swap.px u64 
    setargs                   2 0
    push           pc_genmcl.px_swap.p u64 
    push           4          
    pushptroff                i32 1 0
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.px_swap.qx u64 
    setargs                   2 0
    push           pc_genmcl.px_swap.p u64 
    push           4          
    pushptroff                i32 1 0
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_genmcl.px_swap.ax u64 
    setargs                   2 0
    push           pc_genmcl.px_swap.p u64 
    push           4          
    pushptroff                i32 1 0
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_genmcl.px_swap.bx u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_swap.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #15149     i64 0
    push           4          i64 
    casejumpeq     #15149     i64 0
    popstack                  i64 
    jump           #15150     
#15149: 
    setargs                   3 0
    push           pc_genmcl.px_swap.px u64 
    push           pc_genmcl.px_swap.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.px_swap.qx u64 
    push           pc_genmcl.px_swap.bx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.px_swap.ax u64 
    push           pc_genmcl.px_swap.qx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.px_swap.bx u64 
    push           pc_genmcl.px_swap.px u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15151     
#15150: 
    setargs                   2 0
    push           pc_genmcl.px_swap.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "swap"     u64 
    callproc       &pc_libmcl.merrort 
#15151: 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_genmcl.px_swap.ax u64 
    push           10         
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_genmcl.px_swap.ax u64 
    push           10         
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_genmcl.px_swap.bx u64 
    push           10         
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_genmcl.px_swap.bx u64 
    push           10         
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#15152: 
    retproc                   
End


Proc pc_genmcl.px_makeslice:
    param          pc_genmcl.px_makeslice.p u64 
    procentry                 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.setwideopnd 
#15154: 
    retproc                   
End


Proc pc_genmcl.px_switch:
    param          pc_genmcl.px_switch.p u64 
    local          pc_genmcl.px_switch.minlab i64 
    local          pc_genmcl.px_switch.maxlab i64 
    local          pc_genmcl.px_switch.jumplab i64 
    local          pc_genmcl.px_switch.elselab i64 
    local          pc_genmcl.px_switch.ax u64 
    procentry                 
    push           pc_genmcl.px_switch.p u64 
    push           16         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_switch.minlab i64 
    push           pc_genmcl.px_switch.p u64 
    push           20         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_switch.maxlab i64 
    push           pc_genmcl.px_switch.p u64 
    push           8          
    pushptroff                i64 1 0
    pop            pc_genmcl.px_switch.jumplab i64 
    push           pc_genmcl.px_switch.p u64 
    push           1          i64 
    addrefoff                 u64 32 0
    pop            pc_genmcl.currpcl u64 
    push           pc_genmcl.currpcl u64 
    push           8          
    pushptroff                i64 1 0
    pop            pc_genmcl.px_switch.elselab i64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_switch.ax u64 
    push           pc_genmcl.px_switch.minlab i64 
    push           0          i64 
    jumpeq         #15156     i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_switch.minlab i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_switch.ax u64 
    push           30         i64 
    callproc       &pc_libmcl.genmc 
#15156: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_switch.maxlab i64 
    push           pc_genmcl.px_switch.minlab i64 
    sub                       i64 
    push           1          i64 
    add                       i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_switch.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_switch.elselab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           3          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           0          u64 
    setargs                   7 0
    push           0          u64 
    push           pc_genmcl.px_switch.jumplab i64 
    push           0          i64 
    push           0          i64 
    push           8          i64 
    push           pc_genmcl.px_switch.ax u64 
    push           10         
    pushptroff                u8 1 0
    push           0          i64 
    callfn         &pc_libmcl.mgenindex u64 
    push           26         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   2 0
    push           1          i64 
    push           73         i64 
    callproc       &pc_libmcl.setsegment 
#15157: 
    retproc                   
End


Proc pc_genmcl.px_switchlabel:
    param          pc_genmcl.px_switchlabel.p u64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_switchlabel.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    push           117        i64 
    callproc       &pc_libmcl.genmc 
#15159: 
    retproc                   
End


Proc pc_genmcl.px_endswitch:
    param          pc_genmcl.px_endswitch.p u64 
    procentry                 
    setargs                   2 0
    push           1          i64 
    push           67         i64 
    callproc       &pc_libmcl.setsegment 
#15161: 
    retproc                   
End


Proc pc_genmcl.px_clear:
    param          pc_genmcl.px_clear.p u64 
    local          pc_genmcl.px_clear.ax u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.px_clear.ax u64 
    setargs                   2 0
    push           pc_genmcl.px_clear.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_genmcl.px_clear.ax u64 
    callproc       &pc_libmcl.clearblock 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#15163: 
    retproc                   
End


Proc pc_genmcl.px_csegment:
    param          pc_genmcl.px_csegment.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_csegment.p u64 
    callproc       &pc_genmcl.unimpl 
#15165: 
    retproc                   
End


Proc pc_genmcl.px_isegment:
    param          pc_genmcl.px_isegment.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_isegment.p u64 
    callproc       &pc_genmcl.unimpl 
#15167: 
    retproc                   
End


Proc pc_genmcl.px_zsegment:
    param          pc_genmcl.px_zsegment.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_zsegment.p u64 
    callproc       &pc_genmcl.unimpl 
#15169: 
    retproc                   
End


Proc pc_genmcl.px_rosegment:
    param          pc_genmcl.px_rosegment.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_rosegment.p u64 
    callproc       &pc_genmcl.unimpl 
#15171: 
    retproc                   
End


Proc pc_genmcl.px_data:
    param          pc_genmcl.px_data.p u64 
    local          pc_genmcl.px_data.ax u64 
    local          pc_genmcl.px_data.opc i64 
    procentry                 
    push           pc_genmcl.px_data.p u64 
    pushptr                   u8 
    push           4          i64 
    casejumpeq     #15173     i64 0
    push           5          i64 
    casejumpeq     #15174     i64 0
    push           7          i64 
    casejumpeq     #15174     i64 0
    push           8          i64 
    casejumpeq     #15175     i64 0
    push           2          i64 
    casejumpeq     #15176     i64 0
    popstack                  i64 
    jump           #15177     
#15173: 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_data.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenint u64 
    pop            pc_genmcl.px_data.ax u64 
    jump           #15178     
#15174: 
    setargs                   2 0
    push           pc_genmcl.px_data.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_genmcl.px_data.p u64 
    push           8          
    pushptroff                r64 1 0
    callfn         &pc_libmcl.mgenrealimm u64 
    pop            pc_genmcl.px_data.ax u64 
    jump           #15178     
#15175: 
    setargs                   1 0
    setargs                   1 0
    push           pc_genmcl.px_data.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.getstringindex i64 
    callfn         &pc_libmcl.mgenlabel u64 
    pop            pc_genmcl.px_data.ax u64 
    jump           #15178     
#15176: 
    setargs                   1 0
    push           pc_genmcl.px_data.p u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmemaddr u64 
    pop            pc_genmcl.px_data.ax u64 
    push           pc_genmcl.px_data.p u64 
    push           20         
    pushptroff                i32 1 0
    push           pc_genmcl.px_data.ax u64 
    push           14         
    popptroff                 i32 1 0
    jump           #15178     
#15177: 
    setargs                   2 0
    push           &pc_tables.opndnames 
    push           pc_genmcl.px_data.p u64 
    pushptr                   u8 
    pushptroff                u64 8 0
    push           "db/dq optype? #" u64 
    callproc       &pc_libmcl.merror 
#15178: 
    push           pc_genmcl.px_data.p u64 
    push           4          
    pushptroff                i32 1 0
    push           1          i64 
    casejumpeq     #15179     i64 0
    push           2          i64 
    casejumpeq     #15180     i64 0
    push           4          i64 
    casejumpeq     #15181     i64 0
    push           8          i64 
    casejumpeq     #15182     i64 0
    popstack                  i64 
    jump           #15183     
#15179: 
    push           114        i64 
    pop            pc_genmcl.px_data.opc i64 
    jump           #15184     
#15180: 
    push           115        i64 
    pop            pc_genmcl.px_data.opc i64 
    jump           #15184     
#15181: 
    push           116        i64 
    pop            pc_genmcl.px_data.opc i64 
    jump           #15184     
#15182: 
    push           117        i64 
    pop            pc_genmcl.px_data.opc i64 
    jump           #15184     
#15183: 
    setargs                   2 0
    push           ""         u64 
    push           "DATA/not 1248" u64 
    callproc       &pc_libmcl.merror 
#15184: 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.px_data.ax u64 
    push           pc_genmcl.px_data.opc i64 
    callproc       &pc_libmcl.genmc 
#15185: 
    retproc                   
End


Proc pc_genmcl.px_db:
    param          pc_genmcl.px_db.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_db.p u64 
    callproc       &pc_genmcl.unimpl 
#15187: 
    retproc                   
End


Proc pc_genmcl.px_dw:
    param          pc_genmcl.px_dw.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_dw.p u64 
    callproc       &pc_genmcl.unimpl 
#15189: 
    retproc                   
End


Proc pc_genmcl.px_dd:
    param          pc_genmcl.px_dd.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_dd.p u64 
    callproc       &pc_genmcl.unimpl 
#15191: 
    retproc                   
End


Proc pc_genmcl.px_dq:
    param          pc_genmcl.px_dq.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_dq.p u64 
    callproc       &pc_genmcl.unimpl 
#15193: 
    retproc                   
End


Proc pc_genmcl.px_dstring:
    param          pc_genmcl.px_dstring.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_dstring.p u64 
    callproc       &pc_genmcl.unimpl 
#15195: 
    retproc                   
End


Proc pc_genmcl.px_dstringz:
    param          pc_genmcl.px_dstringz.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_dstringz.p u64 
    callproc       &pc_genmcl.unimpl 
#15197: 
    retproc                   
End


Proc pc_genmcl.px_reserve:
    param          pc_genmcl.px_reserve.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_reserve.p u64 
    callproc       &pc_genmcl.unimpl 
#15199: 
    retproc                   
End


Proc pc_genmcl.px_assem:
    param          pc_genmcl.px_assem.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_assem.p u64 
    callproc       &pc_genmcl.unimpl 
#15201: 
    retproc                   
End


Proc pc_genmcl.px_add:
    param          pc_genmcl.px_add.p u64 
    local          pc_genmcl.px_add.ax u64 
    local          pc_genmcl.px_add.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_add.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #15203     i64 0
    push           3          i64 
    casejumpeq     #15204     i64 0
    push           2          i64 
    casejumpeq     #15205     i64 0
    push           5          i64 
    casejumpeq     #15206     i64 0
    popstack                  i64 
    jump           #15207     
#15203: 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_add.ax u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #15208     i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    push           1          i64 
    jumpne         #15208     i64 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.px_add.ax u64 
    push           53         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15209     
#15208: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_add.bx u64 
    setargs                   3 0
    push           pc_genmcl.px_add.bx u64 
    push           pc_genmcl.px_add.ax u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
#15209: 
    jump           #15210     
#15204: 
    setargs                   1 0
    push           68         i64 
    callproc       &pc_genmcl.dobin_float 
    jump           #15210     
#15205: 
    setargs                   1 0
    push           64         i64 
    callproc       &pc_genmcl.dobin_float 
    jump           #15210     
#15206: 
    setargs                   3 0
    push           31         i64 
    push           29         i64 
    push           pc_genmcl.px_add.p u64 
    callproc       &pc_genmcl.dobin_i128 
    jump           #15211     
    jump           #15210     
#15207: 
    setargs                   2 0
    push           pc_genmcl.px_add.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "add:"     u64 
    callproc       &pc_libmcl.merrort 
#15210: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#15211: 
    retproc                   
End


Proc pc_genmcl.px_sub:
    param          pc_genmcl.px_sub.p u64 
    local          pc_genmcl.px_sub.ax u64 
    local          pc_genmcl.px_sub.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_sub.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #15213     i64 0
    push           3          i64 
    casejumpeq     #15214     i64 0
    push           2          i64 
    casejumpeq     #15215     i64 0
    push           5          i64 
    casejumpeq     #15216     i64 0
    popstack                  i64 
    jump           #15217     
#15213: 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_sub.ax u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #15218     i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    push           1          i64 
    jumpne         #15218     i64 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.px_sub.ax u64 
    push           54         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15219     
#15218: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_sub.bx u64 
    setargs                   3 0
    push           pc_genmcl.px_sub.bx u64 
    push           pc_genmcl.px_sub.ax u64 
    push           30         i64 
    callproc       &pc_libmcl.genmc 
#15219: 
    jump           #15220     
#15214: 
    setargs                   1 0
    push           69         i64 
    callproc       &pc_genmcl.dobin_float 
    jump           #15220     
#15215: 
    setargs                   1 0
    push           65         i64 
    callproc       &pc_genmcl.dobin_float 
    jump           #15220     
#15216: 
    setargs                   3 0
    push           32         i64 
    push           30         i64 
    push           pc_genmcl.px_sub.p u64 
    callproc       &pc_genmcl.dobin_i128 
    jump           #15221     
    jump           #15220     
#15217: 
    setargs                   2 0
    push           pc_genmcl.px_sub.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "sub:"     u64 
    callproc       &pc_libmcl.merrort 
#15220: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#15221: 
    retproc                   
End


Proc pc_genmcl.px_mul:
    param          pc_genmcl.px_mul.p u64 
    local          pc_genmcl.px_mul.ax u64 
    local          pc_genmcl.px_mul.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_mul.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #15223     i64 0
    push           3          i64 
    casejumpeq     #15224     i64 0
    push           2          i64 
    casejumpeq     #15225     i64 0
    push           5          i64 
    casejumpeq     #15226     i64 0
    popstack                  i64 
    jump           #15227     
#15223: 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_mul.ax u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #15228     i64 
    setargs                   2 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    push           pc_genmcl.px_mul.ax u64 
    callproc       &pc_genmcl.mulimm 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #15229     
#15228: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_mul.bx u64 
    setargs                   3 0
    push           pc_genmcl.px_mul.bx u64 
    push           pc_genmcl.px_mul.ax u64 
    push           35         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15230     
#15224: 
    setargs                   1 0
    push           70         i64 
    callproc       &pc_genmcl.dobin_float 
    jump           #15230     
#15225: 
    setargs                   1 0
    push           66         i64 
    callproc       &pc_genmcl.dobin_float 
    jump           #15230     
#15226: 
    setargs                   3 0
    push           5          i64 
    push           4          i64 
    push           4          i64 
    callproc       &pc_genmcl.do_syscall 
    jump           #15229     
    jump           #15230     
#15227: 
    setargs                   2 0
    push           pc_genmcl.px_mul.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "mul:"     u64 
    callproc       &pc_libmcl.merrort 
#15230: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#15229: 
    retproc                   
End


Proc pc_genmcl.px_div:
    param          pc_genmcl.px_div.p u64 
    local          pc_genmcl.px_div.ax u64 
    local          pc_genmcl.px_div.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_div.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           3          i64 
    casejumpeq     #15232     i64 0
    push           2          i64 
    casejumpeq     #15233     i64 0
    popstack                  i64 
    jump           #15234     
#15232: 
    setargs                   1 0
    push           71         i64 
    callproc       &pc_genmcl.dobin_float 
    jump           #15235     
#15233: 
    setargs                   1 0
    push           67         i64 
    callproc       &pc_genmcl.dobin_float 
    jump           #15235     
#15234: 
    setargs                   2 0
    push           pc_genmcl.px_div.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "div:"     u64 
    callproc       &pc_libmcl.merrort 
#15235: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#15236: 
    retproc                   
End


Proc pc_genmcl.px_idiv:
    param          pc_genmcl.px_idiv.p u64 
    procentry                 
    push           pc_genmcl.px_idiv.p u64 
    push           3          
    pushptroff                u8 1 0
    push           9          i64 
    casejumpeq     #15238     i64 0
    push           4          i64 
    casejumpeq     #15239     i64 0
    push           10         i64 
    casejumpeq     #15240     i64 0
    push           5          i64 
    casejumpeq     #15241     i64 0
    popstack                  i64 
    jump           #15242     
#15238: 
    setargs                   3 0
    push           1          i64 
    push           1          i64 
    push           pc_genmcl.px_idiv.p u64 
    callproc       &pc_genmcl.do_divrem 
    jump           #15243     
#15239: 
    setargs                   3 0
    push           1          i64 
    push           0          i64 
    push           pc_genmcl.px_idiv.p u64 
    callproc       &pc_genmcl.do_divrem 
    jump           #15243     
#15240: 
    setargs                   3 0
    push           5          i64 
    push           4          i64 
    push           5          i64 
    callproc       &pc_genmcl.do_syscall 
    jump           #15243     
#15241: 
    setargs                   3 0
    push           5          i64 
    push           4          i64 
    push           5          i64 
    callproc       &pc_genmcl.do_syscall 
    jump           #15243     
#15242: 
    setargs                   2 0
    push           pc_genmcl.px_idiv.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "idiv:"    u64 
    callproc       &pc_libmcl.merrort 
#15243: 
#15244: 
    retproc                   
End


Proc pc_genmcl.px_irem:
    param          pc_genmcl.px_irem.p u64 
    procentry                 
    push           pc_genmcl.px_irem.p u64 
    push           3          
    pushptroff                u8 1 0
    push           9          i64 
    casejumpeq     #15246     i64 0
    push           4          i64 
    casejumpeq     #15247     i64 0
    popstack                  i64 
    jump           #15248     
#15246: 
    setargs                   3 0
    push           0          i64 
    push           1          i64 
    push           pc_genmcl.px_irem.p u64 
    callproc       &pc_genmcl.do_divrem 
    jump           #15249     
#15247: 
    setargs                   3 0
    push           0          i64 
    push           0          i64 
    push           pc_genmcl.px_irem.p u64 
    callproc       &pc_genmcl.do_divrem 
    jump           #15249     
#15248: 
    setargs                   2 0
    push           pc_genmcl.px_irem.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "irem:"    u64 
    callproc       &pc_libmcl.merrort 
#15249: 
#15250: 
    retproc                   
End


Proc pc_genmcl.px_iand:
    param          pc_genmcl.px_iand.p u64 
    procentry                 
    setargs                   2 0
    push           39         i64 
    push           pc_genmcl.px_iand.p u64 
    callproc       &pc_genmcl.dobitwise 
#15252: 
    retproc                   
End


Proc pc_genmcl.px_ior:
    param          pc_genmcl.px_ior.p u64 
    procentry                 
    setargs                   2 0
    push           40         i64 
    push           pc_genmcl.px_ior.p u64 
    callproc       &pc_genmcl.dobitwise 
#15254: 
    retproc                   
End


Proc pc_genmcl.px_ixor:
    param          pc_genmcl.px_ixor.p u64 
    procentry                 
    setargs                   2 0
    push           41         i64 
    push           pc_genmcl.px_ixor.p u64 
    callproc       &pc_genmcl.dobitwise 
#15256: 
    retproc                   
End


Proc pc_genmcl.px_shl:
    param          pc_genmcl.px_shl.p u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_shl.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #15258     i64 0
    popstack                  i64 
    jump           #15259     
#15258: 
    setargs                   2 0
    push           44         i64 
    push           pc_genmcl.px_shl.p u64 
    callproc       &pc_genmcl.do_shift 
    jump           #15260     
#15259: 
    setargs                   2 0
    push           pc_genmcl.px_shl.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "shl:"     u64 
    callproc       &pc_libmcl.merrort 
#15260: 
#15261: 
    retproc                   
End


Proc pc_genmcl.px_shr:
    param          pc_genmcl.px_shr.p u64 
    procentry                 
    push           pc_genmcl.px_shr.p u64 
    push           3          
    pushptroff                u8 1 0
    push           9          i64 
    casejumpeq     #15263     i64 0
    push           4          i64 
    casejumpeq     #15264     i64 0
    popstack                  i64 
    jump           #15265     
#15263: 
    setargs                   2 0
    push           45         i64 
    push           pc_genmcl.px_shr.p u64 
    callproc       &pc_genmcl.do_shift 
    jump           #15266     
#15264: 
    setargs                   2 0
    push           46         i64 
    push           pc_genmcl.px_shr.p u64 
    callproc       &pc_genmcl.do_shift 
    jump           #15266     
#15265: 
    setargs                   2 0
    push           pc_genmcl.px_shr.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "shr:"     u64 
    callproc       &pc_libmcl.merrort 
#15266: 
#15267: 
    retproc                   
End


Proc pc_genmcl.px_in:
    param          pc_genmcl.px_in.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_in.p u64 
    callproc       &pc_genmcl.unimpl 
#15269: 
    retproc                   
End


Proc pc_genmcl.px_notin:
    param          pc_genmcl.px_notin.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_notin.p u64 
    callproc       &pc_genmcl.unimpl 
#15271: 
    retproc                   
End


Proc pc_genmcl.px_min:
    param          pc_genmcl.px_min.p u64 
    procentry                 
    push           pc_genmcl.px_min.p u64 
    push           3          
    pushptroff                u8 1 0
    push           9          i64 
    casejumpeq     #15273     i64 0
    push           4          i64 
    casejumpeq     #15274     i64 0
    push           12         i64 
    casejumpeq     #15275     i64 0
    push           11         i64 
    casejumpeq     #15276     i64 0
    popstack                  i64 
    jump           #15277     
#15273: 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genmcl.domax_int 
    jump           #15278     
#15274: 
    setargs                   1 0
    push           7          i64 
    callproc       &pc_genmcl.domax_int 
    jump           #15278     
#15275: 
    setargs                   1 0
    push           112        i64 
    callproc       &pc_genmcl.domax_float 
    jump           #15278     
#15276: 
    setargs                   1 0
    push           110        i64 
    callproc       &pc_genmcl.domax_float 
    jump           #15278     
#15277: 
    setargs                   2 0
    push           pc_genmcl.px_min.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "min:"     u64 
    callproc       &pc_libmcl.merrort 
#15278: 
#15279: 
    retproc                   
End


Proc pc_genmcl.px_max:
    param          pc_genmcl.px_max.p u64 
    procentry                 
    push           pc_genmcl.px_max.p u64 
    push           3          
    pushptroff                u8 1 0
    push           9          i64 
    casejumpeq     #15281     i64 0
    push           4          i64 
    casejumpeq     #15282     i64 0
    push           12         i64 
    casejumpeq     #15283     i64 0
    push           11         i64 
    casejumpeq     #15284     i64 0
    popstack                  i64 
    jump           #15285     
#15281: 
    setargs                   1 0
    push           12         i64 
    callproc       &pc_genmcl.domax_int 
    jump           #15286     
#15282: 
    setargs                   1 0
    push           2          i64 
    callproc       &pc_genmcl.domax_int 
    jump           #15286     
#15283: 
    setargs                   1 0
    push           113        i64 
    callproc       &pc_genmcl.domax_float 
    jump           #15286     
#15284: 
    setargs                   1 0
    push           111        i64 
    callproc       &pc_genmcl.domax_float 
    jump           #15286     
#15285: 
    setargs                   2 0
    push           pc_genmcl.px_max.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "max:"     u64 
    callproc       &pc_libmcl.merrort 
#15286: 
#15287: 
    retproc                   
End


Proc pc_genmcl.px_eq:
    param          pc_genmcl.px_eq.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_eq.p u64 
    callproc       &pc_genmcl.unimpl 
#15289: 
    retproc                   
End


Proc pc_genmcl.px_ne:
    param          pc_genmcl.px_ne.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_ne.p u64 
    callproc       &pc_genmcl.unimpl 
#15291: 
    retproc                   
End


Proc pc_genmcl.px_lt:
    param          pc_genmcl.px_lt.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_lt.p u64 
    callproc       &pc_genmcl.unimpl 
#15293: 
    retproc                   
End


Proc pc_genmcl.px_le:
    param          pc_genmcl.px_le.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_le.p u64 
    callproc       &pc_genmcl.unimpl 
#15295: 
    retproc                   
End


Proc pc_genmcl.px_ge:
    param          pc_genmcl.px_ge.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_ge.p u64 
    callproc       &pc_genmcl.unimpl 
#15297: 
    retproc                   
End


Proc pc_genmcl.px_gt:
    param          pc_genmcl.px_gt.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_gt.p u64 
    callproc       &pc_genmcl.unimpl 
#15299: 
    retproc                   
End


Proc pc_genmcl.px_same:
    param          pc_genmcl.px_same.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_same.p u64 
    callproc       &pc_genmcl.unimpl 
#15301: 
    retproc                   
End


Proc pc_genmcl.px_andl:
    param          pc_genmcl.px_andl.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_andl.p u64 
    callproc       &pc_genmcl.unimpl 
#15303: 
    retproc                   
End


Proc pc_genmcl.px_orl:
    param          pc_genmcl.px_orl.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_orl.p u64 
    callproc       &pc_genmcl.unimpl 
#15305: 
    retproc                   
End


Proc pc_genmcl.px_addrefoff:
    param          pc_genmcl.px_addrefoff.p u64 
    local          pc_genmcl.px_addrefoff.ax u64 
    local          pc_genmcl.px_addrefoff.cx u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_addrefoff.p u64 
    callfn         &pc_genmcl.do_addrmode u64 
    pop            pc_genmcl.px_addrefoff.cx u64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #15307     i64 
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           1          
    popptroff                 u8 1 0
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
#15307: 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_addrefoff.ax u64 
    setargs                   3 0
    push           pc_genmcl.px_addrefoff.cx u64 
    push           pc_genmcl.px_addrefoff.ax u64 
    push           15         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#15308: 
    retproc                   
End


Proc pc_genmcl.px_subref:
    param          pc_genmcl.px_subref.p u64 
    local          pc_genmcl.px_subref.ax u64 
    local          pc_genmcl.px_subref.bx u64 
    local          pc_genmcl.px_subref.n i64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_subref.ax u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_subref.bx u64 
    setargs                   3 0
    push           pc_genmcl.px_subref.bx u64 
    push           pc_genmcl.px_subref.ax u64 
    push           30         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_genmcl.px_subref.p u64 
    push           16         
    pushptroff                i32 1 0
    push           1          i64 
    jumple         #15310     i64 
    setargs                   1 0
    push           pc_genmcl.px_subref.p u64 
    push           16         
    pushptroff                i32 1 0
    callfn         &pc_libmcl.ispoweroftwo i64 
    pop            pc_genmcl.px_subref.n i64 
    push           pc_genmcl.px_subref.n i64 
    jumpfalse      #15311     i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_subref.n i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_subref.ax u64 
    push           46         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15312     
#15311: 
    setargs                   2 0
    push           ""         u64 
    push           "SUB/REF NOT POWER OF TWO" u64 
    callproc       &pc_libmcl.merror 
#15312: 
#15310: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#15313: 
    retproc                   
End


Proc pc_genmcl.px_subrefoff:
    param          pc_genmcl.px_subrefoff.p u64 
    local          pc_genmcl.px_subrefoff.scale i64 
    local          pc_genmcl.px_subrefoff.extra i64 
    local          pc_genmcl.px_subrefoff.offset i64 
    local          pc_genmcl.px_subrefoff.ax u64 
    local          pc_genmcl.px_subrefoff.bx u64 
    procentry                 
    push           pc_genmcl.px_subrefoff.p u64 
    push           16         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_subrefoff.scale i64 
    push           pc_genmcl.px_subrefoff.p u64 
    push           20         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_subrefoff.extra i64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_subrefoff.ax u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #15315     i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    push           pc_genmcl.px_subrefoff.scale i64 
    mul                       i64 
    push           pc_genmcl.px_subrefoff.extra i64 
    add                       i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_subrefoff.ax u64 
    push           30         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15316     
#15315: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_subrefoff.bx u64 
    setargs                   2 0
    push           pc_genmcl.px_subrefoff.scale i64 
    push           pc_genmcl.px_subrefoff.bx u64 
    callfn         &pc_genmcl.scaleindex i64 
    pop            pc_genmcl.px_subrefoff.scale i64 
    push           pc_genmcl.px_subrefoff.scale i64 
    push           1          i64 
    jumple         #15317     i64 
    setargs                   2 0
    push           pc_genmcl.px_subrefoff.scale i64 
    push           pc_genmcl.px_subrefoff.bx u64 
    callproc       &pc_genmcl.mulimm 
#15317: 
    setargs                   3 0
    push           pc_genmcl.px_subrefoff.bx u64 
    push           pc_genmcl.px_subrefoff.ax u64 
    push           30         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_genmcl.px_subrefoff.extra i64 
    jumpfalse      #15318     i64 
    setargs                   2 0
    push           ""         u64 
    push           "SUBREF/EXTRA" u64 
    callproc       &pc_libmcl.merror 
#15318: 
#15316: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#15319: 
    retproc                   
End


Proc pc_genmcl.px_neg:
    param          pc_genmcl.px_neg.p u64 
    local          pc_genmcl.px_neg.ax u64 
    local          pc_genmcl.px_neg.axlow u64 
    local          pc_genmcl.px_neg.axhigh u64 
    local          pc_genmcl.px_neg.bxlow u64 
    local          pc_genmcl.px_neg.bxhigh u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_neg.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #15321     i64 0
    push           3          i64 
    casejumpeq     #15322     i64 0
    push           2          i64 
    casejumpeq     #15323     i64 0
    push           5          i64 
    casejumpeq     #15324     i64 0
    popstack                  i64 
    jump           #15325     
#15321: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_neg.ax u64 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.px_neg.ax u64 
    push           51         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15326     
#15322: 
    push           pci_mcl.labneg64 i64 
    jumptrue       #15327     i64 
    setargs                   0 0
    callfn         &pc_libmcl.mcreatefwdlabel i64 
    pop            pci_mcl.labneg64 i64 
#15327: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.labneg64 i64 
    callfn         &pc_libmcl.mgenlabelmem u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    push           74         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15326     
#15323: 
    push           pci_mcl.labneg32 i64 
    jumptrue       #15328     i64 
    setargs                   0 0
    callfn         &pc_libmcl.mcreatefwdlabel i64 
    pop            pci_mcl.labneg32 i64 
#15328: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.labneg32 i64 
    callfn         &pc_libmcl.mgenlabelmem u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    push           75         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15326     
#15324: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_neg.axlow u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_neg.axhigh u64 
    setargs                   0 0
    callfn         &pc_stackmcl.genopnd_d64 u64 
    pop            pc_genmcl.px_neg.bxhigh u64 
    setargs                   0 0
    callfn         &pc_stackmcl.genopnd_d64 u64 
    pop            pc_genmcl.px_neg.bxlow u64 
    setargs                   3 0
    push           pc_genmcl.px_neg.bxlow u64 
    push           pc_genmcl.px_neg.bxlow u64 
    push           41         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.px_neg.bxhigh u64 
    push           pc_genmcl.px_neg.bxhigh u64 
    push           41         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.px_neg.axlow u64 
    push           pc_genmcl.px_neg.bxlow u64 
    push           30         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.px_neg.axhigh u64 
    push           pc_genmcl.px_neg.bxhigh u64 
    push           32         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   2 0
    push           3          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   2 0
    push           4          i64 
    push           2          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #15326     
#15325: 
    setargs                   2 0
    push           pc_genmcl.px_neg.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "neg"      u64 
    callproc       &pc_libmcl.merrort 
#15326: 
#15329: 
    retproc                   
End


Proc pc_genmcl.px_abs:
    param          pc_genmcl.px_abs.p u64 
    local          pc_genmcl.px_abs.ax u64 
    local          pc_genmcl.px_abs.lx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_abs.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #15331     i64 0
    push           3          i64 
    casejumpeq     #15332     i64 0
    push           2          i64 
    casejumpeq     #15333     i64 0
    popstack                  i64 
    jump           #15334     
#15331: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_abs.ax u64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           0          i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_abs.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    callfn         &pc_libmcl.mgenlabel u64 
    store          pc_genmcl.px_abs.lx u64 
    push           13         i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.px_abs.ax u64 
    push           51         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.px_abs.lx u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    jump           #15335     
#15332: 
    push           pci_mcl.labneg64 i64 
    jumptrue       #15336     i64 
    setargs                   0 0
    callfn         &pc_libmcl.mcreatefwdlabel i64 
    pop            pci_mcl.labneg64 i64 
#15336: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.labneg64 i64 
    callfn         &pc_libmcl.mgenlabelmem u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    push           74         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15335     
#15333: 
    push           pci_mcl.labneg32 i64 
    jumptrue       #15337     i64 
    setargs                   0 0
    callfn         &pc_libmcl.mcreatefwdlabel i64 
    pop            pci_mcl.labneg32 i64 
#15337: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.labneg32 i64 
    callfn         &pc_libmcl.mgenlabelmem u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    push           75         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15335     
#15334: 
    setargs                   2 0
    push           pc_genmcl.px_abs.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "abs"      u64 
    callproc       &pc_libmcl.merrort 
#15335: 
#15338: 
    retproc                   
End


Proc pc_genmcl.px_inot:
    param          pc_genmcl.px_inot.p u64 
    local          pc_genmcl.px_inot.ax u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_inot.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #15340     i64 0
    popstack                  i64 
    jump           #15341     
#15340: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_inot.ax u64 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.px_inot.ax u64 
    push           52         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15342     
#15341: 
    setargs                   2 0
    push           pc_genmcl.px_inot.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "inot"     u64 
    callproc       &pc_libmcl.merrort 
#15342: 
#15343: 
    retproc                   
End


Proc pc_genmcl.px_notl:
    param          pc_genmcl.px_notl.p u64 
    local          pc_genmcl.px_notl.ax u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_notl.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #15345     i64 0
    popstack                  i64 
    jump           #15346     
#15345: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_notl.ax u64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_notl.ax u64 
    push           41         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15347     
#15346: 
    setargs                   2 0
    push           pc_genmcl.px_notl.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "notl"     u64 
    callproc       &pc_libmcl.merrort 
#15347: 
#15348: 
    retproc                   
End


Proc pc_genmcl.px_istruel:
    param          pc_genmcl.px_istruel.p u64 
    local          pc_genmcl.px_istruel.ax u64 
    local          pc_genmcl.px_istruel.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_istruel.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #15350     i64 0
    popstack                  i64 
    jump           #15351     
#15350: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_istruel.ax u64 
    setargs                   3 0
    push           pc_genmcl.px_istruel.ax u64 
    push           pc_genmcl.px_istruel.ax u64 
    push           42         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   2 0
    push           1          i64 
    push           pc_genmcl.px_istruel.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    store          pc_genmcl.px_istruel.bx u64 
    push           5          i64 
    push           59         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.px_istruel.bx u64 
    setargs                   2 0
    push           4          i64 
    push           pc_genmcl.px_istruel.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           20         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15352     
#15351: 
    setargs                   2 0
    push           pc_genmcl.px_istruel.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "istruel"  u64 
    callproc       &pc_libmcl.merrort 
#15352: 
#15353: 
    retproc                   
End


Proc pc_genmcl.px_sqr:
    param          pc_genmcl.px_sqr.p u64 
    local          pc_genmcl.px_sqr.ax u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_sqr.ax u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_sqr.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #15355     i64 0
    push           3          i64 
    casejumpeq     #15356     i64 0
    push           2          i64 
    casejumpeq     #15357     i64 0
    popstack                  i64 
    jump           #15358     
#15355: 
    setargs                   3 0
    push           pc_genmcl.px_sqr.ax u64 
    push           pc_genmcl.px_sqr.ax u64 
    push           35         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15359     
#15356: 
    setargs                   3 0
    push           pc_genmcl.px_sqr.ax u64 
    push           pc_genmcl.px_sqr.ax u64 
    push           70         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15359     
#15357: 
    setargs                   3 0
    push           pc_genmcl.px_sqr.ax u64 
    push           pc_genmcl.px_sqr.ax u64 
    push           66         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15359     
#15358: 
    setargs                   2 0
    push           pc_genmcl.px_sqr.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "sqr"      u64 
    callproc       &pc_libmcl.merrort 
#15359: 
#15360: 
    retproc                   
End


Proc pc_genmcl.px_sqrt:
    param          pc_genmcl.px_sqrt.p u64 
    local          pc_genmcl.px_sqrt.ax u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_sqrt.ax u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_sqrt.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           3          i64 
    casejumpeq     #15362     i64 0
    push           2          i64 
    casejumpeq     #15363     i64 0
    popstack                  i64 
    jump           #15364     
#15362: 
    setargs                   3 0
    push           pc_genmcl.px_sqrt.ax u64 
    push           pc_genmcl.px_sqrt.ax u64 
    push           62         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15365     
#15363: 
    setargs                   3 0
    push           pc_genmcl.px_sqrt.ax u64 
    push           pc_genmcl.px_sqrt.ax u64 
    push           63         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15365     
#15364: 
    setargs                   2 0
    push           pc_genmcl.px_sqrt.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "sqrt"     u64 
    callproc       &pc_libmcl.merrort 
#15365: 
#15366: 
    retproc                   
End


Proc pc_genmcl.px_sin:
    param          pc_genmcl.px_sin.p u64 
    procentry                 
    setargs                   2 0
    push           "sin*"     u64 
    push           pc_genmcl.px_sin.p u64 
    callproc       &pc_genmcl.domaths 
#15368: 
    retproc                   
End


Proc pc_genmcl.px_cos:
    param          pc_genmcl.px_cos.p u64 
    procentry                 
    setargs                   2 0
    push           "cos*"     u64 
    push           pc_genmcl.px_cos.p u64 
    callproc       &pc_genmcl.domaths 
#15370: 
    retproc                   
End


Proc pc_genmcl.px_tan:
    param          pc_genmcl.px_tan.p u64 
    procentry                 
    setargs                   2 0
    push           "tan*"     u64 
    push           pc_genmcl.px_tan.p u64 
    callproc       &pc_genmcl.domaths 
#15372: 
    retproc                   
End


Proc pc_genmcl.px_asin:
    param          pc_genmcl.px_asin.p u64 
    procentry                 
    setargs                   2 0
    push           "asin*"    u64 
    push           pc_genmcl.px_asin.p u64 
    callproc       &pc_genmcl.domaths 
#15374: 
    retproc                   
End


Proc pc_genmcl.px_acos:
    param          pc_genmcl.px_acos.p u64 
    procentry                 
    setargs                   2 0
    push           "acos*"    u64 
    push           pc_genmcl.px_acos.p u64 
    callproc       &pc_genmcl.domaths 
#15376: 
    retproc                   
End


Proc pc_genmcl.px_atan:
    param          pc_genmcl.px_atan.p u64 
    procentry                 
    setargs                   2 0
    push           "atan*"    u64 
    push           pc_genmcl.px_atan.p u64 
    callproc       &pc_genmcl.domaths 
#15378: 
    retproc                   
End


Proc pc_genmcl.px_ln:
    param          pc_genmcl.px_ln.p u64 
    procentry                 
    setargs                   2 0
    push           "log*"     u64 
    push           pc_genmcl.px_ln.p u64 
    callproc       &pc_genmcl.domaths 
#15380: 
    retproc                   
End


Proc pc_genmcl.px_log:
    param          pc_genmcl.px_log.p u64 
    procentry                 
    setargs                   2 0
    push           "log10*"   u64 
    push           pc_genmcl.px_log.p u64 
    callproc       &pc_genmcl.domaths 
#15382: 
    retproc                   
End


Proc pc_genmcl.px_exp:
    param          pc_genmcl.px_exp.p u64 
    procentry                 
    setargs                   2 0
    push           "exp*"     u64 
    push           pc_genmcl.px_exp.p u64 
    callproc       &pc_genmcl.domaths 
#15384: 
    retproc                   
End


Proc pc_genmcl.px_round:
    param          pc_genmcl.px_round.p u64 
    procentry                 
    setargs                   2 0
    push           "round*"   u64 
    push           pc_genmcl.px_round.p u64 
    callproc       &pc_genmcl.domaths 
#15386: 
    retproc                   
End


Proc pc_genmcl.px_floor:
    param          pc_genmcl.px_floor.p u64 
    procentry                 
    setargs                   2 0
    push           "floor*"   u64 
    push           pc_genmcl.px_floor.p u64 
    callproc       &pc_genmcl.domaths 
#15388: 
    retproc                   
End


Proc pc_genmcl.px_ceil:
    param          pc_genmcl.px_ceil.p u64 
    procentry                 
    setargs                   2 0
    push           "ceil*"    u64 
    push           pc_genmcl.px_ceil.p u64 
    callproc       &pc_genmcl.domaths 
#15390: 
    retproc                   
End


Proc pc_genmcl.px_fract:
    param          pc_genmcl.px_fract.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_fract.p u64 
    callproc       &pc_genmcl.unimpl 
#15392: 
    retproc                   
End


Proc pc_genmcl.px_sign:
    param          pc_genmcl.px_sign.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_sign.p u64 
    callproc       &pc_genmcl.unimpl 
#15394: 
    retproc                   
End


Proc pc_genmcl.px_atan2:
    param          pc_genmcl.px_atan2.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_atan2.p u64 
    callproc       &pc_genmcl.unimpl 
#15396: 
    retproc                   
End


Proc pc_genmcl.px_power:
    param          pc_genmcl.px_power.p u64 
    local          pc_genmcl.px_power.ax u64 
    local          pc_genmcl.px_power.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_power.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #15398     i64 0
    popstack                  i64 
    jump           #15399     
#15398: 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   3 0
    push           1          i64 
    push           2          i64 
    push           2          i64 
    callproc       &pc_genmcl.do_syscall 
    jump           #15400     
    jump           #15401     
#15399: 
    setargs                   2 0
    push           pc_genmcl.px_power.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "power:"   u64 
    callproc       &pc_libmcl.merrort 
#15401: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#15400: 
    retproc                   
End


Proc pc_genmcl.px_fmod:
    param          pc_genmcl.px_fmod.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_fmod.p u64 
    callproc       &pc_genmcl.unimpl 
#15403: 
    retproc                   
End


Proc pc_genmcl.px_incr:
    param          pc_genmcl.px_incr.p u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_incr.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #15405     i64 0
    push           4          i64 
    casejumpeq     #15405     i64 0
    popstack                  i64 
    jump           #15406     
#15405: 
    setargs                   3 0
    push           29         i64 
    push           53         i64 
    push           pc_genmcl.px_incr.p u64 
    callproc       &pc_genmcl.doincr 
    jump           #15407     
#15406: 
    setargs                   2 0
    push           pc_genmcl.px_incr.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "incr"     u64 
    callproc       &pc_libmcl.merrort 
#15407: 
#15408: 
    retproc                   
End


Proc pc_genmcl.px_decr:
    param          pc_genmcl.px_decr.p u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_decr.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #15410     i64 0
    push           4          i64 
    casejumpeq     #15410     i64 0
    popstack                  i64 
    jump           #15411     
#15410: 
    setargs                   3 0
    push           30         i64 
    push           54         i64 
    push           pc_genmcl.px_decr.p u64 
    callproc       &pc_genmcl.doincr 
    jump           #15412     
#15411: 
    setargs                   2 0
    push           pc_genmcl.px_decr.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "decr"     u64 
    callproc       &pc_libmcl.merrort 
#15412: 
#15413: 
    retproc                   
End


Proc pc_genmcl.px_incrload:
    param          pc_genmcl.px_incrload.p u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_incrload.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #15415     i64 0
    push           4          i64 
    casejumpeq     #15415     i64 0
    popstack                  i64 
    jump           #15416     
#15415: 
    setargs                   3 0
    push           29         i64 
    push           53         i64 
    push           pc_genmcl.px_incrload.p u64 
    callproc       &pc_genmcl.doincrload 
    jump           #15417     
#15416: 
    setargs                   2 0
    push           pc_genmcl.px_incrload.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "incrload" u64 
    callproc       &pc_libmcl.merrort 
#15417: 
#15418: 
    retproc                   
End


Proc pc_genmcl.px_decrload:
    param          pc_genmcl.px_decrload.p u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_decrload.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #15420     i64 0
    push           4          i64 
    casejumpeq     #15420     i64 0
    popstack                  i64 
    jump           #15421     
#15420: 
    setargs                   3 0
    push           30         i64 
    push           54         i64 
    push           pc_genmcl.px_decrload.p u64 
    callproc       &pc_genmcl.doincrload 
    jump           #15422     
#15421: 
    setargs                   2 0
    push           pc_genmcl.px_decrload.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "decrload" u64 
    callproc       &pc_libmcl.merrort 
#15422: 
#15423: 
    retproc                   
End


Proc pc_genmcl.px_loadincr:
    param          pc_genmcl.px_loadincr.p u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_loadincr.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #15425     i64 0
    push           4          i64 
    casejumpeq     #15425     i64 0
    popstack                  i64 
    jump           #15426     
#15425: 
    setargs                   3 0
    push           29         i64 
    push           53         i64 
    push           pc_genmcl.px_loadincr.p u64 
    callproc       &pc_genmcl.doloadincr 
    jump           #15427     
#15426: 
    setargs                   2 0
    push           pc_genmcl.px_loadincr.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "loadincr" u64 
    callproc       &pc_libmcl.merrort 
#15427: 
#15428: 
    retproc                   
End


Proc pc_genmcl.px_loaddecr:
    param          pc_genmcl.px_loaddecr.p u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_loaddecr.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #15430     i64 0
    push           4          i64 
    casejumpeq     #15430     i64 0
    popstack                  i64 
    jump           #15431     
#15430: 
    setargs                   3 0
    push           30         i64 
    push           54         i64 
    push           pc_genmcl.px_loaddecr.p u64 
    callproc       &pc_genmcl.doloadincr 
    jump           #15432     
#15431: 
    setargs                   2 0
    push           pc_genmcl.px_loaddecr.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "loaddecr" u64 
    callproc       &pc_libmcl.merrort 
#15432: 
#15433: 
    retproc                   
End


Proc pc_genmcl.px_addto:
    param          pc_genmcl.px_addto.p u64 
    local          pc_genmcl.px_addto.ax u64 
    local          pc_genmcl.px_addto.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_addto.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #15435     i64 0
    push           4          i64 
    casejumpeq     #15435     i64 0
    push           3          i64 
    casejumpeq     #15436     i64 0
    push           2          i64 
    casejumpeq     #15437     i64 0
    popstack                  i64 
    jump           #15438     
#15435: 
    setargs                   2 0
    push           29         i64 
    push           pc_genmcl.px_addto.p u64 
    callproc       &pc_genmcl.dobinto_int 
    jump           #15439     
#15436: 
    setargs                   2 0
    push           68         i64 
    push           pc_genmcl.px_addto.p u64 
    callproc       &pc_genmcl.dobinto_float 
    jump           #15439     
#15437: 
    setargs                   2 0
    push           64         i64 
    push           pc_genmcl.px_addto.p u64 
    callproc       &pc_genmcl.dobinto_float32 
    jump           #15439     
#15438: 
    setargs                   2 0
    push           pc_genmcl.px_addto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "addto:"   u64 
    callproc       &pc_libmcl.merrort 
#15439: 
#15440: 
    retproc                   
End


Proc pc_genmcl.px_subto:
    param          pc_genmcl.px_subto.p u64 
    local          pc_genmcl.px_subto.ax u64 
    local          pc_genmcl.px_subto.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_subto.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #15442     i64 0
    push           4          i64 
    casejumpeq     #15442     i64 0
    push           3          i64 
    casejumpeq     #15443     i64 0
    push           2          i64 
    casejumpeq     #15444     i64 0
    popstack                  i64 
    jump           #15445     
#15442: 
    setargs                   2 0
    push           30         i64 
    push           pc_genmcl.px_subto.p u64 
    callproc       &pc_genmcl.dobinto_int 
    jump           #15446     
#15443: 
    setargs                   2 0
    push           69         i64 
    push           pc_genmcl.px_subto.p u64 
    callproc       &pc_genmcl.dobinto_float 
    jump           #15446     
#15444: 
    setargs                   2 0
    push           65         i64 
    push           pc_genmcl.px_subto.p u64 
    callproc       &pc_genmcl.dobinto_float32 
    jump           #15446     
#15445: 
    setargs                   2 0
    push           pc_genmcl.px_subto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "subto:"   u64 
    callproc       &pc_libmcl.merrort 
#15446: 
#15447: 
    retproc                   
End


Proc pc_genmcl.px_multo:
    param          pc_genmcl.px_multo.p u64 
    local          pc_genmcl.px_multo.ax u64 
    local          pc_genmcl.px_multo.bx u64 
    local          pc_genmcl.px_multo.cx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_multo.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #15449     i64 0
    push           3          i64 
    casejumpeq     #15450     i64 0
    push           2          i64 
    casejumpeq     #15451     i64 0
    popstack                  i64 
    jump           #15452     
#15449: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_d64 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.px_multo.ax u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_multo.bx u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_multo.cx u64 
    setargs                   3 0
    push           pc_genmcl.px_multo.ax u64 
    push           pc_genmcl.px_multo.cx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #15453     i64 
    setargs                   2 0
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    push           pc_genmcl.px_multo.cx u64 
    callproc       &pc_genmcl.mulimm 
    jump           #15454     
#15453: 
    setargs                   3 0
    push           pc_genmcl.px_multo.bx u64 
    push           pc_genmcl.px_multo.cx u64 
    push           35         i64 
    callproc       &pc_libmcl.genmc 
#15454: 
    setargs                   3 0
    push           pc_genmcl.px_multo.cx u64 
    push           pc_genmcl.px_multo.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #15455     
#15450: 
    setargs                   2 0
    push           70         i64 
    push           pc_genmcl.px_multo.p u64 
    callproc       &pc_genmcl.dobinto_float 
    jump           #15455     
#15451: 
    setargs                   2 0
    push           66         i64 
    push           pc_genmcl.px_multo.p u64 
    callproc       &pc_genmcl.dobinto_float32 
    jump           #15455     
#15452: 
    setargs                   2 0
    push           pc_genmcl.px_multo.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "multo:"   u64 
    callproc       &pc_libmcl.merrort 
#15455: 
#15456: 
    retproc                   
End


Proc pc_genmcl.px_divto:
    param          pc_genmcl.px_divto.p u64 
    local          pc_genmcl.px_divto.ax u64 
    local          pc_genmcl.px_divto.bx u64 
    local          pc_genmcl.px_divto.cx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_divto.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           3          i64 
    casejumpeq     #15458     i64 0
    push           2          i64 
    casejumpeq     #15459     i64 0
    popstack                  i64 
    jump           #15460     
#15458: 
    setargs                   2 0
    push           71         i64 
    push           pc_genmcl.px_divto.p u64 
    callproc       &pc_genmcl.dobinto_float 
    jump           #15461     
#15459: 
    setargs                   2 0
    push           67         i64 
    push           pc_genmcl.px_divto.p u64 
    callproc       &pc_genmcl.dobinto_float32 
    jump           #15461     
#15460: 
    setargs                   2 0
    push           pc_genmcl.px_divto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "divto:"   u64 
    callproc       &pc_libmcl.merrort 
#15461: 
#15462: 
    retproc                   
End


Proc pc_genmcl.px_idivto:
    param          pc_genmcl.px_idivto.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_idivto.p u64 
    callproc       &pc_genmcl.unimpl 
#15464: 
    retproc                   
End


Proc pc_genmcl.px_iremto:
    param          pc_genmcl.px_iremto.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_iremto.p u64 
    callproc       &pc_genmcl.unimpl 
#15466: 
    retproc                   
End


Proc pc_genmcl.px_iandto:
    param          pc_genmcl.px_iandto.p u64 
    local          pc_genmcl.px_iandto.ax u64 
    local          pc_genmcl.px_iandto.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_iandto.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #15468     i64 0
    push           4          i64 
    casejumpeq     #15468     i64 0
    popstack                  i64 
    jump           #15469     
#15468: 
    setargs                   2 0
    push           39         i64 
    push           pc_genmcl.px_iandto.p u64 
    callproc       &pc_genmcl.dobinto_int 
    jump           #15470     
#15469: 
    setargs                   2 0
    push           pc_genmcl.px_iandto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "iandto:"  u64 
    callproc       &pc_libmcl.merrort 
#15470: 
#15471: 
    retproc                   
End


Proc pc_genmcl.px_iorto:
    param          pc_genmcl.px_iorto.p u64 
    local          pc_genmcl.px_iorto.ax u64 
    local          pc_genmcl.px_iorto.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_iorto.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #15473     i64 0
    push           4          i64 
    casejumpeq     #15473     i64 0
    popstack                  i64 
    jump           #15474     
#15473: 
    setargs                   2 0
    push           40         i64 
    push           pc_genmcl.px_iorto.p u64 
    callproc       &pc_genmcl.dobinto_int 
    jump           #15475     
#15474: 
    setargs                   2 0
    push           pc_genmcl.px_iorto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "iorto:"   u64 
    callproc       &pc_libmcl.merrort 
#15475: 
#15476: 
    retproc                   
End


Proc pc_genmcl.px_ixorto:
    param          pc_genmcl.px_ixorto.p u64 
    local          pc_genmcl.px_ixorto.ax u64 
    local          pc_genmcl.px_ixorto.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_ixorto.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #15478     i64 0
    push           4          i64 
    casejumpeq     #15478     i64 0
    popstack                  i64 
    jump           #15479     
#15478: 
    setargs                   2 0
    push           41         i64 
    push           pc_genmcl.px_ixorto.p u64 
    callproc       &pc_genmcl.dobinto_int 
    jump           #15480     
#15479: 
    setargs                   2 0
    push           pc_genmcl.px_ixorto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "ixorto:"  u64 
    callproc       &pc_libmcl.merrort 
#15480: 
#15481: 
    retproc                   
End


Proc pc_genmcl.px_shlto:
    param          pc_genmcl.px_shlto.p u64 
    procentry                 
    push           pc_genmcl.px_shlto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           9          i64 
    casejumpeq     #15483     i64 0
    push           4          i64 
    casejumpeq     #15483     i64 0
    popstack                  i64 
    jump           #15484     
#15483: 
    setargs                   2 0
    push           44         i64 
    push           pc_genmcl.px_shlto.p u64 
    callproc       &pc_genmcl.do_shiftnto 
    jump           #15485     
#15484: 
    setargs                   2 0
    push           pc_genmcl.px_shlto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "shlto:"   u64 
    callproc       &pc_libmcl.merrort 
#15485: 
#15486: 
    retproc                   
End


Proc pc_genmcl.px_shrto:
    param          pc_genmcl.px_shrto.p u64 
    procentry                 
    push           pc_genmcl.px_shrto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           9          i64 
    casejumpeq     #15488     i64 0
    push           4          i64 
    casejumpeq     #15489     i64 0
    popstack                  i64 
    jump           #15490     
#15488: 
    setargs                   2 0
    push           45         i64 
    push           pc_genmcl.px_shrto.p u64 
    callproc       &pc_genmcl.do_shiftnto 
    jump           #15491     
#15489: 
    setargs                   2 0
    push           46         i64 
    push           pc_genmcl.px_shrto.p u64 
    callproc       &pc_genmcl.do_shiftnto 
    jump           #15491     
#15490: 
    setargs                   2 0
    push           pc_genmcl.px_shrto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "shrto:"   u64 
    callproc       &pc_libmcl.merrort 
#15491: 
#15492: 
    retproc                   
End


Proc pc_genmcl.px_minto:
    param          pc_genmcl.px_minto.p u64 
    procentry                 
    push           pc_genmcl.px_minto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           9          i64 
    casejumpeq     #15494     i64 0
    push           4          i64 
    casejumpeq     #15495     i64 0
    push           12         i64 
    casejumpeq     #15496     i64 0
    push           11         i64 
    casejumpeq     #15497     i64 0
    popstack                  i64 
    jump           #15498     
#15494: 
    setargs                   1 0
    push           14         i64 
    callproc       &pc_genmcl.domaxto_int 
    jump           #15499     
#15495: 
    setargs                   1 0
    push           6          i64 
    callproc       &pc_genmcl.domaxto_int 
    jump           #15499     
#15496: 
    setargs                   1 0
    push           6          i64 
    callproc       &pc_genmcl.domaxto_r64 
    jump           #15499     
#15497: 
    setargs                   1 0
    push           6          i64 
    callproc       &pc_genmcl.domaxto_r32 
    jump           #15499     
#15498: 
    setargs                   2 0
    push           pc_genmcl.px_minto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "minto:"   u64 
    callproc       &pc_libmcl.merrort 
#15499: 
#15500: 
    retproc                   
End


Proc pc_genmcl.px_maxto:
    param          pc_genmcl.px_maxto.p u64 
    procentry                 
    push           pc_genmcl.px_maxto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           9          i64 
    casejumpeq     #15502     i64 0
    push           4          i64 
    casejumpeq     #15503     i64 0
    push           12         i64 
    casejumpeq     #15504     i64 0
    push           11         i64 
    casejumpeq     #15505     i64 0
    popstack                  i64 
    jump           #15506     
#15502: 
    setargs                   1 0
    push           13         i64 
    callproc       &pc_genmcl.domaxto_int 
    jump           #15507     
#15503: 
    setargs                   1 0
    push           3          i64 
    callproc       &pc_genmcl.domaxto_int 
    jump           #15507     
#15504: 
    setargs                   1 0
    push           3          i64 
    callproc       &pc_genmcl.domaxto_r64 
    jump           #15507     
#15505: 
    setargs                   1 0
    push           3          i64 
    callproc       &pc_genmcl.domaxto_r32 
    jump           #15507     
#15506: 
    setargs                   2 0
    push           pc_genmcl.px_maxto.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "maxto:"   u64 
    callproc       &pc_libmcl.merrort 
#15507: 
#15508: 
    retproc                   
End


Proc pc_genmcl.px_andlto:
    param          pc_genmcl.px_andlto.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_andlto.p u64 
    callproc       &pc_genmcl.unimpl 
#15510: 
    retproc                   
End


Proc pc_genmcl.px_orlto:
    param          pc_genmcl.px_orlto.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_orlto.p u64 
    callproc       &pc_genmcl.unimpl 
#15512: 
    retproc                   
End


Proc pc_genmcl.px_addrefoffto:
    param          pc_genmcl.px_addrefoffto.p u64 
    local          pc_genmcl.px_addrefoffto.scale i64 
    local          pc_genmcl.px_addrefoffto.extra i64 
    local          pc_genmcl.px_addrefoffto.offset i64 
    local          pc_genmcl.px_addrefoffto.ax u64 
    local          pc_genmcl.px_addrefoffto.bx u64 
    local          pc_genmcl.px_addrefoffto.rx u64 
    local          pc_genmcl.px_addrefoffto.reg i64 
    local          pc_genmcl.px_addrefoffto.size i64 
    procentry                 
    push           pc_genmcl.px_addrefoffto.p u64 
    push           16         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_addrefoffto.scale i64 
    push           pc_genmcl.px_addrefoffto.p u64 
    push           20         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_addrefoffto.extra i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    push           pc_genmcl.px_addrefoffto.scale i64 
    mul                       i64 
    push           pc_genmcl.px_addrefoffto.extra i64 
    add                       i64 
    pop            pc_genmcl.px_addrefoffto.offset i64 
    setargs                   1 0
    push           2          i64 
    callfn         &pc_libmcl.ismemaddr i64 
    jumpfalse      #15514     i64 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    pop            pc_genmcl.px_addrefoffto.ax u64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    pop            pc_genmcl.px_addrefoffto.reg i64 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_addrefoffto.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_genmcl.px_addrefoffto.rx u64 
    setargs                   3 0
    push           pc_genmcl.px_addrefoffto.ax u64 
    push           pc_genmcl.px_addrefoffto.rx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #15515     i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_addrefoffto.offset i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_addrefoffto.rx u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15516     
#15515: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_addrefoffto.bx u64 
    setargs                   2 0
    push           pc_genmcl.px_addrefoffto.scale i64 
    push           pc_genmcl.px_addrefoffto.bx u64 
    callproc       &pc_genmcl.mulimm 
    setargs                   3 0
    push           pc_genmcl.px_addrefoffto.bx u64 
    push           pc_genmcl.px_addrefoffto.rx u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
#15516: 
    setargs                   3 0
    push           pc_genmcl.px_addrefoffto.rx u64 
    push           pc_genmcl.px_addrefoffto.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_genmcl.px_addrefoffto.reg i64 
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_genmcl.px_addrefoffto.reg i64 
    popptroff                 u8 1 -1
    jump           #15517     
#15514: 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.px_addrefoffto.ax u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #15518     i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_addrefoffto.offset i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_addrefoffto.ax u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15519     
#15518: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_addrefoffto.bx u64 
    setargs                   2 0
    push           pc_genmcl.px_addrefoffto.scale i64 
    push           pc_genmcl.px_addrefoffto.bx u64 
    callproc       &pc_genmcl.mulimm 
    setargs                   3 0
    push           pc_genmcl.px_addrefoffto.bx u64 
    push           pc_genmcl.px_addrefoffto.ax u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
#15519: 
#15517: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#15520: 
    retproc                   
End


Proc pc_genmcl.px_subrefoffto:
    param          pc_genmcl.px_subrefoffto.p u64 
    local          pc_genmcl.px_subrefoffto.scale i64 
    local          pc_genmcl.px_subrefoffto.extra i64 
    local          pc_genmcl.px_subrefoffto.ax u64 
    local          pc_genmcl.px_subrefoffto.bx u64 
    procentry                 
    push           pc_genmcl.px_subrefoffto.p u64 
    push           16         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_subrefoffto.scale i64 
    push           pc_genmcl.px_subrefoffto.p u64 
    push           20         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_subrefoffto.extra i64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.px_subrefoffto.ax u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #15522     i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    push           pc_genmcl.px_subrefoffto.scale i64 
    mul                       i64 
    push           pc_genmcl.px_subrefoffto.extra i64 
    add                       i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_subrefoffto.ax u64 
    push           30         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15523     
#15522: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_subrefoffto.bx u64 
    setargs                   2 0
    push           pc_genmcl.px_subrefoffto.scale i64 
    push           pc_genmcl.px_subrefoffto.bx u64 
    callfn         &pc_genmcl.scaleindex i64 
    pop            pc_genmcl.px_subrefoffto.scale i64 
    push           pc_genmcl.px_subrefoffto.scale i64 
    push           1          i64 
    jumple         #15524     i64 
    setargs                   2 0
    push           pc_genmcl.px_subrefoffto.scale i64 
    push           pc_genmcl.px_subrefoffto.bx u64 
    callproc       &pc_genmcl.mulimm 
#15524: 
    setargs                   3 0
    push           pc_genmcl.px_subrefoffto.bx u64 
    push           pc_genmcl.px_subrefoffto.ax u64 
    push           30         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_genmcl.px_subrefoffto.extra i64 
    jumpfalse      #15525     i64 
    setargs                   2 0
    push           ""         u64 
    push           "SUBTOREF/EXTRA" u64 
    callproc       &pc_libmcl.merror 
#15525: 
#15523: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#15526: 
    retproc                   
End


Proc pc_genmcl.px_negto:
    param          pc_genmcl.px_negto.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_negto.p u64 
    callproc       &pc_genmcl.unimpl 
#15528: 
    retproc                   
End


Proc pc_genmcl.px_absto:
    param          pc_genmcl.px_absto.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_absto.p u64 
    callproc       &pc_genmcl.unimpl 
#15530: 
    retproc                   
End


Proc pc_genmcl.px_inotto:
    param          pc_genmcl.px_inotto.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_inotto.p u64 
    callproc       &pc_genmcl.unimpl 
#15532: 
    retproc                   
End


Proc pc_genmcl.px_notlto:
    param          pc_genmcl.px_notlto.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_notlto.p u64 
    callproc       &pc_genmcl.unimpl 
#15534: 
    retproc                   
End


Proc pc_genmcl.px_istruelto:
    param          pc_genmcl.px_istruelto.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_istruelto.p u64 
    callproc       &pc_genmcl.unimpl 
#15536: 
    retproc                   
End


Proc pc_genmcl.px_typepun:
    param          pc_genmcl.px_typepun.p u64 
    local          pc_genmcl.px_typepun.ax u64 
    local          pc_genmcl.px_typepun.bx u64 
    local          pc_genmcl.px_typepun.cx u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_typepun.bx u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_typepun.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #15538     i64 0
    push           3          i64 
    casejumpeq     #15539     i64 0
    push           4          i64 
    casejumpeq     #15540     i64 0
    popstack                  i64 
    jump           #15541     
#15538: 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           2          i64 
    casejumpeq     #15542     i64 0
    push           1          i64 
    casejumpeq     #15543     i64 0
    popstack                  i64 
    jump           #15544     
#15542: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_d64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_typepun.ax u64 
    setargs                   3 0
    push           pc_genmcl.px_typepun.bx u64 
    push           pc_genmcl.px_typepun.ax u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #15545     
#15543: 
    jump           #15545     
#15544: 
    jump           #15546     
#15545: 
    jump           #15547     
#15539: 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           1          i64 
    casejumpeq     #15548     i64 0
    popstack                  i64 
    jump           #15549     
#15548: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_x64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_typepun.ax u64 
    setargs                   3 0
    push           pc_genmcl.px_typepun.bx u64 
    push           pc_genmcl.px_typepun.ax u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #15550     
#15549: 
    jump           #15546     
#15550: 
    jump           #15547     
#15540: 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           3          i64 
    casejumpeq     #15551     i64 0
    push           1          i64 
    casejumpeq     #15552     i64 0
    popstack                  i64 
    jump           #15553     
#15551: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_d64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_typepun.ax u64 
    setargs                   2 0
    push           4          i64 
    push           pc_genmcl.px_typepun.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    pop            pc_genmcl.px_typepun.cx u64 
    setargs                   3 0
    push           pc_genmcl.px_typepun.bx u64 
    push           pc_genmcl.px_typepun.cx u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   3 0
    push           pc_genmcl.px_typepun.cx u64 
    push           pc_genmcl.px_typepun.ax u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_genmcl.px_typepun.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #15554     i64 
    push           19         i64 
    resetmult                 
    jump           #15555     
#15554: 
    push           20         i64 
    endmult                   
#15555: 
    callproc       &pc_libmcl.genmc 
    jump           #15556     
#15552: 
    jump           #15556     
#15553: 
    jump           #15546     
#15556: 
    jump           #15547     
#15541: 
!error::
#15546: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "PSTDNAMES[P.MODE]=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pc_tables.pstdnames 
    push           pc_genmcl.px_typepun.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "FMTNAMES[PCLSTACK[1].FMT]=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pci_mcl.fmtnames 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "TYPEPUN"  u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           ""         u64 
    push           "TYPEPUN"  u64 
    callproc       &pc_libmcl.merror 
#15547: 
#15557: 
    retproc                   
End


Proc pc_genmcl.px_softconv:
    param          pc_genmcl.px_softconv.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_softconv.p u64 
    callproc       &pc_genmcl.unimpl 
#15559: 
    retproc                   
End


Proc pc_genmcl.px_widen:
    param          pc_genmcl.px_widen.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_widen.p u64 
    callproc       &pc_genmcl.unimpl 
#15561: 
    retproc                   
End


Proc pc_genmcl.px_narrow:
    param          pc_genmcl.px_narrow.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_narrow.p u64 
    callproc       &pc_genmcl.unimpl 
#15563: 
    retproc                   
End


Proc pc_genmcl.px_float:
    param          pc_genmcl.px_float.p u64 
    local          pc_genmcl.px_float.ax u64 
    local          pc_genmcl.px_float.fx u64 
    local          pc_genmcl.px_float.lab i64 
    local          pc_genmcl.px_float.lab2 i64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_float.ax u64 
    push           pc_genmcl.px_float.p u64 
    push           16         
    pushptroff                i32 1 0
    push           9          i64 
    casejumpeq     #15565     i64 0
    push           4          i64 
    casejumpeq     #15566     i64 0
    popstack                  i64 
    jump           #15567     
#15565: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_x64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_float.fx u64 
    setargs                   3 0
    push           pc_genmcl.px_float.ax u64 
    push           pc_genmcl.px_float.fx u64 
    push           85         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    jump           #15568     
#15566: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_x64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_float.fx u64 
    setargs                   0 0
    callfn         &pc_libmcl.mcreatefwdlabel i64 
    pop            pc_genmcl.px_float.lab i64 
    setargs                   0 0
    callfn         &pc_libmcl.mcreatefwdlabel i64 
    pop            pc_genmcl.px_float.lab2 i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           0          i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_float.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_float.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           12         i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.px_float.ax u64 
    push           pc_genmcl.px_float.fx u64 
    push           85         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.px_float.lab2 i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           26         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           pc_genmcl.px_float.lab i64 
    callproc       &pc_libmcl.mdefinefwdlabel 
    push           pci_mcl.labmask63 i64 
    jumptrue       #15569     i64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pci_mcl.labmask63 i64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pci_mcl.laboffset64 i64 
#15569: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.labmask63 i64 
    callfn         &pc_libmcl.mgenlabelmem u64 
    push           pc_genmcl.px_float.ax u64 
    push           39         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.px_float.ax u64 
    push           pc_genmcl.px_float.fx u64 
    push           85         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.laboffset64 i64 
    callfn         &pc_libmcl.mgenlabelmem u64 
    push           pc_genmcl.px_float.fx u64 
    push           68         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           pc_genmcl.px_float.lab2 i64 
    callproc       &pc_libmcl.mdefinefwdlabel 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    jump           #15568     
#15567: 
    setargs                   2 0
    push           pc_genmcl.px_float.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "float"    u64 
    callproc       &pc_libmcl.merrort 
#15568: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#15570: 
    retproc                   
End


Proc pc_genmcl.px_fix:
    param          pc_genmcl.px_fix.p u64 
    local          pc_genmcl.px_fix.fx u64 
    local          pc_genmcl.px_fix.ax u64 
    local          pc_genmcl.px_fix.newmode i64 
    local          pc_genmcl.px_fix.oldmode i64 
    procentry                 
    push           pc_genmcl.px_fix.p u64 
    push           3          
    pushptroff                u8 1 0
    pop            pc_genmcl.px_fix.newmode i64 
    push           pc_genmcl.px_fix.p u64 
    push           16         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_fix.oldmode i64 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_fix.newmode i64 
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #15572     i64 0
    popstack                  i64 
    jump           #15573     
#15572: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_fix.fx u64 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_d64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.px_fix.ax u64 
    setargs                   3 0
    push           pc_genmcl.px_fix.fx u64 
    push           pc_genmcl.px_fix.ax u64 
    startmult                 
    push           pc_genmcl.px_fix.oldmode i64 
    push           12         i64 
    jumpne         #15574     i64 
    push           83         i64 
    resetmult                 
    jump           #15575     
#15574: 
    push           82         i64 
    endmult                   
#15575: 
    callproc       &pc_libmcl.genmc 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #15576     
#15573: 
    setargs                   2 0
    push           pc_genmcl.px_fix.newmode i64 
    push           "fix->"    u64 
    callproc       &pc_libmcl.merrort 
#15576: 
#15577: 
    retproc                   
End


Proc pc_genmcl.px_truncate:
    param          pc_genmcl.px_truncate.p u64 
    local          pc_genmcl.px_truncate.ax u64 
    local          pc_genmcl.px_truncate.mask i64 
    procentry                 
    push           &pc_tables.psize 
    push           pc_genmcl.px_truncate.p u64 
    push           16         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #15579     i64 0
    push           2          i64 
    casejumpeq     #15580     i64 0
    push           4          i64 
    casejumpeq     #15581     i64 0
    popstack                  i64 
    jump           #15582     
#15579: 
    push           255        i64 
    pop            pc_genmcl.px_truncate.mask i64 
    jump           #15583     
#15580: 
    push           65535      i64 
    pop            pc_genmcl.px_truncate.mask i64 
    jump           #15583     
#15581: 
    push           4294967295 i64 
    pop            pc_genmcl.px_truncate.mask i64 
    jump           #15583     
#15582: 
#15583: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_truncate.ax u64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.px_truncate.mask i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_truncate.ax u64 
    push           39         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           &pc_tables.psize 
    push           pc_genmcl.px_truncate.p u64 
    push           16         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    push           pc_genmcl.px_truncate.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           pc_genmcl.px_truncate.ax u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_genmcl.px_truncate.p u64 
    push           16         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    jumpfalse      #15584     i64 
    push           19         i64 
    resetmult                 
    jump           #15585     
#15584: 
    push           20         i64 
    endmult                   
#15585: 
    callproc       &pc_libmcl.genmc 
#15586: 
    retproc                   
End


Proc pc_genmcl.px_fwiden:
    param          pc_genmcl.px_fwiden.p u64 
    local          pc_genmcl.px_fwiden.fx u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_fwiden.fx u64 
    setargs                   3 0
    push           pc_genmcl.px_fwiden.fx u64 
    push           pc_genmcl.px_fwiden.fx u64 
    push           87         i64 
    callproc       &pc_libmcl.genmc 
    push           2          i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
#15588: 
    retproc                   
End


Proc pc_genmcl.px_fnarrow:
    param          pc_genmcl.px_fnarrow.p u64 
    local          pc_genmcl.px_fnarrow.ax u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_fnarrow.ax u64 
    setargs                   3 0
    push           pc_genmcl.px_fnarrow.ax u64 
    push           pc_genmcl.px_fnarrow.ax u64 
    push           86         i64 
    callproc       &pc_libmcl.genmc 
    push           3          i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
#15590: 
    retproc                   
End


Proc pc_genmcl.px_softtruncw:
    param          pc_genmcl.px_softtruncw.p u64 
    local          pc_genmcl.px_softtruncw.ax u64 
    local          pc_genmcl.px_softtruncw.bx u64 
    local          pc_genmcl.px_softtruncw.bx2 u64 
    local          pc_genmcl.px_softtruncw.lx u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_softtruncw.ax u64 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.unsetwideopnd 
#15592: 
    retproc                   
End


Proc pc_genmcl.px_widenw:
    param          pc_genmcl.px_widenw.p u64 
    local          pc_genmcl.px_widenw.ax u64 
    local          pc_genmcl.px_widenw.bx u64 
    local          pc_genmcl.px_widenw.bx2 u64 
    local          pc_genmcl.px_widenw.lx u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_widenw.ax u64 
    setargs                   0 0
    callfn         &pc_stackmcl.genopnd_d64 u64 
    pop            pc_genmcl.px_widenw.bx u64 
    setargs                   2 0
    push           4          i64 
    push           pc_genmcl.px_widenw.bx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    pop            pc_genmcl.px_widenw.bx2 u64 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    push           &pc_tables.psigned 
    push           pc_genmcl.px_widenw.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #15594     i64 
    setargs                   3 0
    push           pc_genmcl.px_widenw.bx2 u64 
    push           pc_genmcl.px_widenw.bx2 u64 
    push           41         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           0          i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.px_widenw.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    callfn         &pc_libmcl.mgenlabel u64 
    store          pc_genmcl.px_widenw.lx u64 
    push           13         i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.px_widenw.bx u64 
    push           52         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.px_widenw.lx u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    jump           #15595     
#15594: 
    setargs                   3 0
    push           pc_genmcl.px_widenw.bx2 u64 
    push           pc_genmcl.px_widenw.bx2 u64 
    push           41         i64 
    callproc       &pc_libmcl.genmc 
#15595: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.setwideopnd 
#15596: 
    retproc                   
End


Proc pc_genmcl.px_len:
    param          pc_genmcl.px_len.p u64 
    procentry                 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.unsetwideopnd 
#15598: 
    retproc                   
End


Proc pc_genmcl.px_lwb:
    param          pc_genmcl.px_lwb.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_lwb.p u64 
    callproc       &pc_genmcl.unimpl 
#15600: 
    retproc                   
End


Proc pc_genmcl.px_upb:
    param          pc_genmcl.px_upb.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_upb.p u64 
    callproc       &pc_genmcl.unimpl 
#15602: 
    retproc                   
End


Proc pc_genmcl.px_bounds:
    param          pc_genmcl.px_bounds.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_bounds.p u64 
    callproc       &pc_genmcl.unimpl 
#15604: 
    retproc                   
End


Proc pc_genmcl.px_lenstr:
    param          pc_genmcl.px_lenstr.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_lenstr.p u64 
    callproc       &pc_genmcl.unimpl 
#15606: 
    retproc                   
End


Proc pc_genmcl.px_bitwidth:
    param          pc_genmcl.px_bitwidth.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_bitwidth.p u64 
    callproc       &pc_genmcl.unimpl 
#15608: 
    retproc                   
End


Proc pc_genmcl.px_bytesize:
    param          pc_genmcl.px_bytesize.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_bytesize.p u64 
    callproc       &pc_genmcl.unimpl 
#15610: 
    retproc                   
End


Proc pc_genmcl.px_bytes:
    param          pc_genmcl.px_bytes.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_bytes.p u64 
    callproc       &pc_genmcl.unimpl 
#15612: 
    retproc                   
End


Proc pc_genmcl.px_minvalue:
    param          pc_genmcl.px_minvalue.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_minvalue.p u64 
    callproc       &pc_genmcl.unimpl 
#15614: 
    retproc                   
End


Proc pc_genmcl.px_maxvalue:
    param          pc_genmcl.px_maxvalue.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_maxvalue.p u64 
    callproc       &pc_genmcl.unimpl 
#15616: 
    retproc                   
End


Proc pc_genmcl.px_typestr:
    param          pc_genmcl.px_typestr.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_typestr.p u64 
    callproc       &pc_genmcl.unimpl 
#15618: 
    retproc                   
End


Proc pc_genmcl.px_error:
    param          pc_genmcl.px_error.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_error.p u64 
    callproc       &pc_genmcl.unimpl 
#15620: 
    retproc                   
End


Proc pc_genmcl.px_arraytoslice:
    param          pc_genmcl.px_arraytoslice.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_arraytoslice.p u64 
    callproc       &pc_genmcl.unimpl 
#15622: 
    retproc                   
End


Proc pc_genmcl.px_ichartoslice:
    param          pc_genmcl.px_ichartoslice.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_ichartoslice.p u64 
    callproc       &pc_genmcl.unimpl 
#15624: 
    retproc                   
End


Proc pc_genmcl.px_softtruncshort:
    param          pc_genmcl.px_softtruncshort.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_softtruncshort.p u64 
    callproc       &pc_genmcl.unimpl 
#15626: 
    retproc                   
End


Proc pc_genmcl.px_charaxtoichar:
    param          pc_genmcl.px_charaxtoichar.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_charaxtoichar.p u64 
    callproc       &pc_genmcl.unimpl 
#15628: 
    retproc                   
End


Proc pc_genmcl.px_sliceptr:
    param          pc_genmcl.px_sliceptr.p u64 
    procentry                 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.unsetwideopnd 
#15630: 
    retproc                   
End


Proc pc_genmcl.px_startmult:
    param          pc_genmcl.px_startmult.p u64 
    procentry                 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.pushallopnds 
#15632: 
    retproc                   
End


Proc pc_genmcl.px_resetmult:
    param          pc_genmcl.px_resetmult.p u64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           3          
    pushptroff                u8 1 0
    jumpfalse      #15634     i64 
    setargs                   2 0
    push           ""         u64 
    push           "RESETMULT/XREG" u64 
    callproc       &pc_libmcl.merror 
    jump           #15635     
#15634: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.movetoreg 
#15635: 
    push           pc_genmcl.px_resetmult.p u64 
    push           1          
    pushptroff                u8 1 0
    push           192        i64 
    jumpne         #15636     i64 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#15636: 
#15637: 
    retproc                   
End


Proc pc_genmcl.px_endmult:
    param          pc_genmcl.px_endmult.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_endmult.p u64 
    callproc       &pc_genmcl.px_resetmult 
#15639: 
    retproc                   
End


Proc pc_genmcl.px_setret:
    param          pc_genmcl.px_setret.p u64 
    procentry                 
    setargs                   2 0
    push           1          i64 
    push           1          i64 
    callproc       &pc_genmcl.do_setret 
    push           0          i64 
    push           &pci_mcl.regset 
    push           1          i64 
    popptroff                 u8 1 -1
    push           0          i64 
    push           &pci_mcl.xregset 
    push           1          i64 
    popptroff                 u8 1 -1
#15641: 
    retproc                   
End


Proc pc_genmcl.px_setretmult:
    param          pc_genmcl.px_setretmult.p u64 
    local          pc_genmcl.px_setretmult.k i64 
    local          pc_genmcl.px_setretmult.wide i64 
    local          pc_genmcl.px_setretmult.av_1 i64 
    local          pc_genmcl.px_setretmult.i i64 
    procentry                 
    push           0          i64 
    pop            pc_genmcl.px_setretmult.k i64 
#15643: 
    push           1          i64 
    pop            pc_genmcl.px_setretmult.i i64 
    push           pc_genmcl.px_setretmult.p u64 
    push           16         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_setretmult.av_1 i64 
    push           pc_genmcl.px_setretmult.av_1 i64 
    push           1          i64 
    jumplt         #15644     i64 
#15645: 
    push           &pc_genmcl.px_setretmult.k 
    incr                      i64 1
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           4          
    pushptroff                u8 1 0
    pop            pc_genmcl.px_setretmult.wide i64 
    setargs                   2 0
    push           &pc_genmcl.multxregs 
    push           pc_genmcl.px_setretmult.k i64 
    pushptroff                i64 8 -8
    push           &pc_genmcl.multregs 
    push           pc_genmcl.px_setretmult.k i64 
    pushptroff                i64 8 -8
    callproc       &pc_genmcl.do_setret 
#15646: 
    forup          #15645     i64 1
    opnd           pc_genmcl.px_setretmult.i 
    opnd           pc_genmcl.px_setretmult.av_1 
#15644: 
#15647: 
    push           1          i64 
    pop            pc_genmcl.px_setretmult.i i64 
    push           pc_genmcl.px_setretmult.k i64 
    push           1          i64 
    jumplt         #15648     i64 
#15649: 
    push           0          i64 
    push           &pci_mcl.xregset 
    push           &pc_genmcl.multxregs 
    push           pc_genmcl.px_setretmult.i i64 
    pushptroff                i64 8 -8
    storeptroff               u8 1 -1
    push           &pci_mcl.regset 
    push           &pc_genmcl.multregs 
    push           pc_genmcl.px_setretmult.i i64 
    pushptroff                i64 8 -8
    popptroff                 u8 1 -1
#15650: 
    forup          #15649     i64 1
    opnd           pc_genmcl.px_setretmult.i 
    opnd           pc_genmcl.px_setretmult.k 
#15648: 
#15651: 
    retproc                   
End


Proc pc_genmcl.px_setargs:
    param          pc_genmcl.px_setargs.p u64 
    local          pc_genmcl.px_setargs.nslots i64 
    local          pc_genmcl.px_setargs.shadow i64 
    local          pc_genmcl.px_setargs.align i64 
    local          pc_genmcl.px_setargs.nargs i64 
    local          pc_genmcl.px_setargs.opcode i64 
    local          pc_genmcl.px_setargs.nvars i64 
    procentry                 
    push           pc_genmcl.px_setargs.p u64 
    jumpfalse      #15653     u64 
    push           pc_genmcl.px_setargs.p u64 
    push           16         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_setargs.nargs i64 
    push           pc_genmcl.px_setargs.p u64 
    push           20         
    pushptroff                i32 1 0
    pop            pc_genmcl.px_setargs.nvars i64 
    push           pc_genmcl.px_setargs.p u64 
    push           1          
    pushptroff                u8 1 0
    pop            pc_genmcl.px_setargs.opcode i64 
    jump           #15654     
#15653: 
    push           pci_mcl.sa_nargs i64 
    pop            pc_genmcl.px_setargs.nargs i64 
    push           0          i64 
    pop            pc_genmcl.px_setargs.nvars i64 
    push           0          i64 
    pop            pc_genmcl.px_setargs.opcode i64 
#15654: 
    push           0          i64 
    pop            pc_genmcl.px_setargs.nslots i64 
    push           0          i64 
    pop            pc_genmcl.px_setargs.shadow i64 
    push           0          i64 
    pop            pc_genmcl.px_setargs.align i64 
    push           pc_genmcl.px_setargs.opcode i64 
    push           196        i64 
    casejumpeq     #15655     i64 0
    popstack                  i64 
    jump           #15656     
#15655: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.saveallopnds 
    jump           #15657     
#15656: 
    setargs                   1 0
    push           pc_genmcl.px_setargs.nargs i64 
    push           1          i64 
    add                       i64 
    callproc       &pc_stackmcl.saveallopnds 
#15657: 
    push           pc_genmcl.px_setargs.nargs i64 
    push           4          i64 
    jumpgt         #15658     i64 
    push           pci_mcl.mstackdepth i64 
    push           0          i64 
    jumpne         #15659     i64 
    jump           #15660     
#15659: 
    push           1          i64 
    pop            pc_genmcl.px_setargs.shadow i64 
    push           pci_mcl.mstackdepth i64 
    push           0          i64 
    dotindex                  i64 
    pop            pc_genmcl.px_setargs.align i64 
    push           4          i64 
    pop            pc_genmcl.px_setargs.nslots i64 
#15660: 
    jump           #15661     
#15658: 
    push           1          i64 
    pop            pc_genmcl.px_setargs.shadow i64 
    push           pc_genmcl.px_setargs.nargs i64 
    pop            pc_genmcl.px_setargs.nslots i64 
    push           pci_mcl.mstackdepth i64 
    push           pc_genmcl.px_setargs.nslots i64 
    add                       i64 
    push           0          i64 
    dotindex                  i64 
    pop            pc_genmcl.px_setargs.align i64 
#15661: 
    push           &pc_genmcl.px_setargs.nslots 
    push           pc_genmcl.px_setargs.align i64 
    addto                     i64 
    push           pc_genmcl.px_setargs.align i64 
    jumpfalse      #15662     i64 
    push           pc_genmcl.px_setargs.opcode i64 
    push           196        i64 
    jumpne         #15663     i64 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.pushslots 
    push           0          i64 
    pop            pc_genmcl.px_setargs.align i64 
#15663: 
#15662: 
    push           pci_mcl.ncalldepth i64 
    push           16         i64 
    jumplt         #15664     i64 
    setargs                   2 0
    push           ""         u64 
    push           "Too many nested calls" u64 
    callproc       &pc_libmcl.merror 
#15664: 
    push           &pci_mcl.ncalldepth 
    incr                      i64 1
    push           pci_mcl.ncalldepth i64 
    push           1          i64 
    jumpge         #15665     i64 
    setargs                   1 0
    push           "CALLDEPTH?" u64 
    callproc       &mlibp.abortprogram 
#15665: 
    push           pc_genmcl.px_setargs.nargs i64 
    push           &pci_mcl.callargs 
    push           pci_mcl.ncalldepth i64 
    popptroff                 u8 1 -1
    push           pc_genmcl.px_setargs.nvars i64 
    push           &pci_mcl.callnvars 
    push           pci_mcl.ncalldepth i64 
    popptroff                 u8 1 -1
    push           pc_genmcl.px_setargs.nslots i64 
    push           &pci_mcl.callslots 
    push           pci_mcl.ncalldepth i64 
    popptroff                 i64 8 -8
    push           pc_genmcl.px_setargs.shadow i64 
    push           &pci_mcl.callshadow 
    push           pci_mcl.ncalldepth i64 
    popptroff                 i64 8 -8
    push           pc_genmcl.px_setargs.align i64 
    push           &pci_mcl.callalign 
    push           pci_mcl.ncalldepth i64 
    popptroff                 u8 1 -1
#15666: 
    retproc                   
End


Proc pc_genmcl.px_duplstack:
    param          pc_genmcl.px_duplstack.p u64 
    local          pc_genmcl.px_duplstack.ax u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_duplstack.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           5          i64 
    jumplt         #15668     i64 
    setargs                   2 0
    push           pc_genmcl.px_duplstack.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "duplstack" u64 
    callproc       &pc_libmcl.merrort 
#15668: 
    setargs                   0 0
    callproc       &pc_stackmcl.duploperand 
#15669: 
    retproc                   
End


Proc pc_genmcl.px_swapstack:
    param          pc_genmcl.px_swapstack.p u64 
    procentry                 
    setargs                   2 0
    push           pc_genmcl.px_swapstack.p u64 
    push           16         
    pushptroff                i32 1 0
    push           1          i64 
    add                       i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
#15671: 
    retproc                   
End


Proc pc_genmcl.px_getnprocs:
    param          pc_genmcl.px_getnprocs.p u64 
    procentry                 
    setargs                   0 0
    callproc       &pc_genmcl.dosetfntable 
    setargs                   2 0
    push           0          i64 
    push           pci_mcl.lab_funcnprocs i64 
    callproc       &pc_stackmcl.addlabel 
#15673: 
    retproc                   
End


Proc pc_genmcl.px_getprocname:
    param          pc_genmcl.px_getprocname.p u64 
    local          pc_genmcl.px_getprocname.ax u64 
    procentry                 
    setargs                   0 0
    callproc       &pc_genmcl.dosetfntable 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_getprocname.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #15675     i64 0
    popstack                  i64 
    jump           #15676     
#15675: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_getprocname.ax u64 
    setargs                   3 0
    setargs                   7 0
    push           0          u64 
    push           pci_mcl.lab_funcnametable i64 
    push           0          i64 
    push           -8         i64 
    push           8          i64 
    push           pc_genmcl.px_getprocname.ax u64 
    push           10         
    pushptroff                u8 1 0
    push           0          i64 
    callfn         &pc_libmcl.mgenindex u64 
    push           pc_genmcl.px_getprocname.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15677     
#15676: 
    setargs                   2 0
    push           pc_genmcl.px_getprocname.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "gpn"      u64 
    callproc       &pc_libmcl.merrort 
#15677: 
#15678: 
    retproc                   
End


Proc pc_genmcl.px_getprocaddr:
    param          pc_genmcl.px_getprocaddr.p u64 
    local          pc_genmcl.px_getprocaddr.ax u64 
    procentry                 
    setargs                   0 0
    callproc       &pc_genmcl.dosetfntable 
    push           &pc_tables.pcat 
    push           pc_genmcl.px_getprocaddr.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #15680     i64 0
    popstack                  i64 
    jump           #15681     
#15680: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.px_getprocaddr.ax u64 
    setargs                   3 0
    setargs                   7 0
    push           0          u64 
    push           pci_mcl.lab_funcaddrtable i64 
    push           0          i64 
    push           -8         i64 
    push           8          i64 
    push           pc_genmcl.px_getprocaddr.ax u64 
    push           10         
    pushptroff                u8 1 0
    push           0          i64 
    callfn         &pc_libmcl.mgenindex u64 
    push           pc_genmcl.px_getprocaddr.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15682     
#15681: 
    setargs                   2 0
    push           pc_genmcl.px_getprocaddr.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "gpa"      u64 
    callproc       &pc_libmcl.merrort 
#15682: 
#15683: 
    retproc                   
End


Proc pc_genmcl.px_last:
    param          pc_genmcl.px_last.p u64 
    procentry                 
    setargs                   1 0
    push           pc_genmcl.px_last.p u64 
    callproc       &pc_genmcl.unimpl 
#15685: 
    retproc                   
End


Proc pc_genmcl.dobin_float:
    param          pc_genmcl.dobin_float.opc i64 
    local          pc_genmcl.dobin_float.ax u64 
    local          pc_genmcl.dobin_float.bx u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dobin_float.ax u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dobin_float.bx u64 
    setargs                   3 0
    push           pc_genmcl.dobin_float.bx u64 
    push           pc_genmcl.dobin_float.ax u64 
    push           pc_genmcl.dobin_float.opc i64 
    callproc       &pc_libmcl.genmc 
#15687: 
    retproc                   
End


Proc pc_genmcl.do_pushparams: i64
    param          pc_genmcl.do_pushparams.p u64 
    param          pc_genmcl.do_pushparams.isptr i64 
    local          pc_genmcl.do_pushparams.pushedslots i64 
    local          pc_genmcl.do_pushparams.nparams i64 
    local          pc_genmcl.do_pushparams.nvars i64 
    local          pc_genmcl.do_pushparams.nargs i64 
    procentry                 
    push           pc_genmcl.do_pushparams.p u64 
    jumpfalse      #15689     u64 
    push           &pci_mcl.callargs 
    push           pci_mcl.ncalldepth i64 
    pushptroff                u8 1 -1
    pop            pc_genmcl.do_pushparams.nargs i64 
    push           &pci_mcl.callnvars 
    push           pci_mcl.ncalldepth i64 
    pushptroff                u8 1 -1
    pop            pc_genmcl.do_pushparams.nvars i64 
    jump           #15690     
#15689: 
    push           pci_mcl.sa_nargs i64 
    pop            pc_genmcl.do_pushparams.nargs i64 
    push           0          i64 
    pop            pc_genmcl.do_pushparams.isptr i64 
    push           0          i64 
    pop            pc_genmcl.do_pushparams.nvars i64 
#15690: 
    push           pc_genmcl.do_pushparams.nargs i64 
    push           pci_mcl.inf_maxargs i64 
    jumple         #15691     i64 
    push           pc_genmcl.do_pushparams.nargs i64 
    push           4          i64 
    jumpgt         #15691     i64 
    push           pc_genmcl.do_pushparams.nargs i64 
    pop            pci_mcl.inf_maxargs i64 
#15691: 
    push           pc_genmcl.do_pushparams.nargs i64 
    pop            pc_genmcl.do_pushparams.nparams i64 
    push           pc_genmcl.do_pushparams.nparams i64 
    push           4          i64 
    jumple         #15692     i64 
    setargs                   1 0
    push           pc_genmcl.do_pushparams.isptr i64 
    push           4          i64 
    add                       i64 
    push           1          i64 
    add                       i64 
    callproc       &pc_stackmcl.pushallopnds 
#15692: 
    setargs                   3 0
    push           pc_genmcl.do_pushparams.isptr i64 
    push           pc_genmcl.do_pushparams.nvars i64 
    push           pc_genmcl.do_pushparams.nparams i64 
    callproc       &pc_genmcl.do_pushlowparams 
    push           &pci_mcl.callshadow 
    push           pci_mcl.ncalldepth i64 
    pushptroff                i64 8 -8
    jumpfalse      #15693     i64 
    setargs                   1 0
    push           &pci_mcl.callalign 
    push           pci_mcl.ncalldepth i64 
    pushptroff                u8 1 -1
    push           4          i64 
    add                       i64 
    callproc       &pc_stackmcl.pushslots 
#15693: 
    push           &pci_mcl.callslots 
    push           pci_mcl.ncalldepth i64 
    pushptroff                i64 8 -8
    pop            pc_genmcl.do_pushparams.pushedslots i64 
    push           &pci_mcl.ncalldepth 
    decr                      i64 1
    push           pc_genmcl.do_pushparams.pushedslots i64 
    setret                    i64 
    jump           #15694     
#15694: 
    retfn                     i64 
End


Proc pc_genmcl.do_pushlowparams:
    param          pc_genmcl.do_pushlowparams.nparams i64 
    param          pc_genmcl.do_pushlowparams.nvariadics i64 
    param          pc_genmcl.do_pushlowparams.isptr i64 
    local          pc_genmcl.do_pushlowparams.ireg i64 
    local          pc_genmcl.do_pushlowparams.xreg i64 
    local          pc_genmcl.do_pushlowparams.j i64 
    local          pc_genmcl.do_pushlowparams.i i64 
    procentry                 
    push           pc_genmcl.do_pushlowparams.nparams i64 
    push           0          i64 
    jumpne         #15696     i64 
    jump           #15697     
#15696: 
    push           &pc_genmcl.do_pushlowparams.nparams 
    push           4          i64 
    minto                     i64 
#15698: 
    push           1          i64 
    pop            pc_genmcl.do_pushlowparams.i i64 
    push           pc_genmcl.do_pushlowparams.nparams i64 
    push           1          i64 
    jumplt         #15699     i64 
#15700: 
    push           pc_genmcl.do_pushlowparams.i i64 
    push           pc_genmcl.do_pushlowparams.isptr i64 
    add                       i64 
    pop            pc_genmcl.do_pushlowparams.j i64 
    push           11         i64 
    push           pc_genmcl.do_pushlowparams.i i64 
    add                       i64 
    push           1          i64 
    sub                       i64 
    pop            pc_genmcl.do_pushlowparams.ireg i64 
    push           1          i64 
    push           pc_genmcl.do_pushlowparams.i i64 
    add                       i64 
    push           1          i64 
    sub                       i64 
    pop            pc_genmcl.do_pushlowparams.xreg i64 
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.do_pushlowparams.j i64 
    addrefoff                 block:15 15 -15
    push           3          
    pushptroff                u8 1 0
    jumpfalse      #15701     i64 
    push           pc_genmcl.do_pushlowparams.nvariadics i64 
    jumpfalse      #15702     i64 
    push           pc_genmcl.do_pushlowparams.i i64 
    push           pc_genmcl.do_pushlowparams.nvariadics i64 
    jumpge         #15703     i64 
#15702: 
    push           0          i64 
    pop            pc_genmcl.do_pushlowparams.ireg i64 
#15703: 
    jump           #15704     
#15701: 
    push           0          i64 
    pop            pc_genmcl.do_pushlowparams.xreg i64 
#15704: 
    push           pc_genmcl.do_pushlowparams.ireg i64 
    jumpfalse      #15705     i64 
    setargs                   2 0
    push           pc_genmcl.do_pushlowparams.ireg i64 
    push           pc_genmcl.do_pushlowparams.j i64 
    callproc       &pc_stackmcl.loadparam 
#15705: 
    push           pc_genmcl.do_pushlowparams.xreg i64 
    jumpfalse      #15706     i64 
    setargs                   2 0
    push           pc_genmcl.do_pushlowparams.xreg i64 
    push           pc_genmcl.do_pushlowparams.j i64 
    callproc       &pc_stackmcl.loadxparam 
#15706: 
#15707: 
    forup          #15700     i64 1
    opnd           pc_genmcl.do_pushlowparams.i 
    opnd           pc_genmcl.do_pushlowparams.nparams 
#15699: 
#15697: 
    retproc                   
End


Proc pc_genmcl.do_for:
    param          pc_genmcl.do_for.p u64 
    param          pc_genmcl.do_for.incop i64 
    param          pc_genmcl.do_for.addop i64 
    param          pc_genmcl.do_for.cond i64 
    local          pc_genmcl.do_for.q u64 
    local          pc_genmcl.do_for.r u64 
    local          pc_genmcl.do_for.ax u64 
    local          pc_genmcl.do_for.bx u64 
    local          pc_genmcl.do_for.cx u64 
    local          pc_genmcl.do_for.dx u64 
    local          pc_genmcl.do_for.mx u64 
    local          pc_genmcl.do_for.reg i64 
    procentry                 
    push           pc_genmcl.do_for.p u64 
    push           1          i64 
    addrefoff                 u64 32 0
    pop            pc_genmcl.do_for.q u64 
    push           pc_genmcl.do_for.q u64 
    push           1          i64 
    addrefoff                 u64 32 0
    store          pc_genmcl.currpcl u64 
    pop            pc_genmcl.do_for.r u64 
    setargs                   1 0
    push           pc_genmcl.do_for.q u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    pop            pc_genmcl.do_for.mx u64 
    push           pc_genmcl.do_for.q u64 
    push           8          
    pushptroff                u64 1 0
    push           48         
    pushptroff                u8 1 0
    jumpfalse      #15709     i64 
    push           pc_genmcl.do_for.p u64 
    push           16         
    pushptroff                i32 1 0
    push           1          i64 
    jumpne         #15710     i64 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.do_for.mx u64 
    push           pc_genmcl.do_for.incop i64 
    callproc       &pc_libmcl.genmc 
    jump           #15711     
#15710: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.do_for.p u64 
    push           16         
    pushptroff                i32 1 0
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.do_for.mx u64 
    push           pc_genmcl.do_for.addop i64 
    callproc       &pc_libmcl.genmc 
#15711: 
    push           pc_genmcl.do_for.mx u64 
    pop            pc_genmcl.do_for.ax u64 
    jump           #15712     
#15709: 
    setargs                   2 0
    push           8          i64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_genmcl.do_for.ax u64 
    setargs                   3 0
    push           pc_genmcl.do_for.mx u64 
    push           pc_genmcl.do_for.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_genmcl.do_for.p u64 
    push           16         
    pushptroff                i32 1 0
    push           1          i64 
    jumpne         #15713     i64 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.do_for.ax u64 
    push           pc_genmcl.do_for.incop i64 
    callproc       &pc_libmcl.genmc 
    jump           #15714     
#15713: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.do_for.p u64 
    push           16         
    pushptroff                i32 1 0
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.do_for.ax u64 
    push           pc_genmcl.do_for.addop i64 
    callproc       &pc_libmcl.genmc 
#15714: 
    setargs                   3 0
    push           pc_genmcl.do_for.ax u64 
    push           pc_genmcl.do_for.mx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
#15712: 
    push           pc_genmcl.do_for.r u64 
    pushptr                   u8 
    push           4          i64 
    jumpne         #15715     i64 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.do_for.r u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenint u64 
    pop            pc_genmcl.do_for.bx u64 
    jump           #15716     
#15715: 
    setargs                   1 0
    push           pc_genmcl.do_for.r u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    pop            pc_genmcl.do_for.bx u64 
#15716: 
    setargs                   3 0
    push           pc_genmcl.do_for.bx u64 
    push           pc_genmcl.do_for.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_genmcl.do_for.ax u64 
    push           10         
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_genmcl.do_for.ax u64 
    push           10         
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.do_for.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    push           pc_genmcl.do_for.cond i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
#15717: 
    retproc                   
End


Proc pc_genmcl.dojumpcc:
    param          pc_genmcl.dojumpcc.p u64 
    local          pc_genmcl.dojumpcc.m i64 
    local          pc_genmcl.dojumpcc.cond i64 
    local          pc_genmcl.dojumpcc.ax u64 
    local          pc_genmcl.dojumpcc.bx u64 
    procentry                 
    push           pc_genmcl.dojumpcc.p u64 
    push           3          
    pushptroff                u8 1 0
    pop            pc_genmcl.dojumpcc.m i64 
    push           pc_genmcl.dojumpcc.p u64 
    push           3          
    pushptroff                u8 1 0
    push           10         i64 
    setjumpeq      #15719     i64 
    push           5          i64 
    setjumpne      #15720     i64 
#15719: 
    setargs                   1 0
    push           pc_genmcl.dojumpcc.p u64 
    callproc       &pc_genmcl.dojumpcc_i128 
    jump           #15721     
#15720: 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dojumpcc.ax u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dojumpcc.bx u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.dojumpcc.m i64 
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #15722     i64 0
    push           2          i64 
    casejumpeq     #15723     i64 0
    push           3          i64 
    casejumpeq     #15724     i64 0
    popstack                  i64 
    jump           #15725     
#15722: 
    push           &pc_tables.psigned 
    push           pc_genmcl.dojumpcc.m i64 
    pushptroff                u8 1 0
    jumpfalse      #15726     i64 
    push           &pc_genmcl.scondcodes 
    push           pc_genmcl.dojumpcc.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u8 1 -52
    pop            pc_genmcl.dojumpcc.cond i64 
    jump           #15727     
#15726: 
    push           &pc_genmcl.ucondcodes 
    push           pc_genmcl.dojumpcc.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u8 1 -52
    pop            pc_genmcl.dojumpcc.cond i64 
#15727: 
    setargs                   3 0
    push           pc_genmcl.dojumpcc.bx u64 
    push           pc_genmcl.dojumpcc.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15728     
#15723: 
    push           &pc_genmcl.ucondcodes 
    push           pc_genmcl.dojumpcc.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u8 1 -52
    pop            pc_genmcl.dojumpcc.cond i64 
    setargs                   3 0
    push           pc_genmcl.dojumpcc.bx u64 
    push           pc_genmcl.dojumpcc.ax u64 
    push           72         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15728     
#15724: 
    push           &pc_genmcl.ucondcodes 
    push           pc_genmcl.dojumpcc.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u8 1 -52
    pop            pc_genmcl.dojumpcc.cond i64 
    setargs                   3 0
    push           pc_genmcl.dojumpcc.bx u64 
    push           pc_genmcl.dojumpcc.ax u64 
    push           73         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15728     
#15725: 
    setargs                   2 0
    push           pc_genmcl.dojumpcc.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "jumpcc:"  u64 
    callproc       &pc_libmcl.merrort 
#15728: 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.dojumpcc.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    push           pc_genmcl.dojumpcc.cond i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#15721: 
    retproc                   
End


Proc pc_genmcl.dosetcc:
    param          pc_genmcl.dosetcc.p u64 
    local          pc_genmcl.dosetcc.m i64 
    local          pc_genmcl.dosetcc.cond i64 
    local          pc_genmcl.dosetcc.ax u64 
    local          pc_genmcl.dosetcc.bx u64 
    procentry                 
    push           pc_genmcl.dosetcc.p u64 
    push           3          
    pushptroff                u8 1 0
    pop            pc_genmcl.dosetcc.m i64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dosetcc.ax u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dosetcc.bx u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.dosetcc.m i64 
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #15730     i64 0
    push           2          i64 
    casejumpeq     #15731     i64 0
    push           3          i64 
    casejumpeq     #15732     i64 0
    popstack                  i64 
    jump           #15733     
#15730: 
    push           &pc_tables.psigned 
    push           pc_genmcl.dosetcc.m i64 
    pushptroff                u8 1 0
    jumpfalse      #15734     i64 
    push           &pc_genmcl.scondcodes 
    push           pc_genmcl.dosetcc.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u8 1 -65
    pop            pc_genmcl.dosetcc.cond i64 
    jump           #15735     
#15734: 
    push           &pc_genmcl.ucondcodes 
    push           pc_genmcl.dosetcc.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u8 1 -65
    pop            pc_genmcl.dosetcc.cond i64 
#15735: 
    setargs                   3 0
    push           pc_genmcl.dosetcc.bx u64 
    push           pc_genmcl.dosetcc.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15736     
#15731: 
    push           &pc_genmcl.ucondcodes 
    push           pc_genmcl.dosetcc.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u8 1 -65
    pop            pc_genmcl.dosetcc.cond i64 
    setargs                   3 0
    push           pc_genmcl.dosetcc.bx u64 
    push           pc_genmcl.dosetcc.ax u64 
    push           72         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15736     
#15732: 
    push           &pc_genmcl.ucondcodes 
    push           pc_genmcl.dosetcc.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u8 1 -65
    pop            pc_genmcl.dosetcc.cond i64 
    setargs                   3 0
    push           pc_genmcl.dosetcc.bx u64 
    push           pc_genmcl.dosetcc.ax u64 
    push           73         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15736     
#15733: 
    setargs                   2 0
    push           pc_genmcl.dosetcc.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "setcc:"   u64 
    callproc       &pc_libmcl.merrort 
#15736: 
    setargs                   4 0
    push           0          u64 
    setargs                   2 0
    push           1          i64 
    push           pc_genmcl.dosetcc.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    store          pc_genmcl.dosetcc.bx u64 
    push           pc_genmcl.dosetcc.cond i64 
    push           59         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.dosetcc.bx u64 
    setargs                   2 0
    push           4          i64 
    push           pc_genmcl.dosetcc.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           20         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#15737: 
    retproc                   
End


Proc pc_genmcl.do_setretfloat:
    param          pc_genmcl.do_setretfloat.destreg i64 
    local          pc_genmcl.do_setretfloat.currreg i64 
    local          pc_genmcl.do_setretfloat.ax u64 
    local          pc_genmcl.do_setretfloat.rx u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.do_setretfloat.destreg i64 
    callfn         &pc_libmcl.mgenxreg u64 
    pop            pc_genmcl.do_setretfloat.rx u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.do_setretfloat.ax u64 
    push           pc_genmcl.do_setretfloat.ax u64 
    push           10         
    pushptroff                u8 1 0
    pop            pc_genmcl.do_setretfloat.currreg i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           2          i64 
    casejumpeq     #15739     i64 0
    popstack                  i64 
    jump           #15740     
#15739: 
    push           pc_genmcl.do_setretfloat.currreg i64 
    push           pc_genmcl.do_setretfloat.destreg i64 
    jumpeq         #15741     i64 
    push           &pci_mcl.regset 
    push           pc_genmcl.do_setretfloat.destreg i64 
    pushptroff                u8 1 -1
    jumpfalse      #15742     i64 
    setargs                   2 0
    push           ""         u64 
    push           "setretfloat/dest in use" u64 
    callproc       &pc_libmcl.merror 
    jump           #15743     
#15742: 
    setargs                   3 0
    push           pc_genmcl.do_setretfloat.ax u64 
    push           pc_genmcl.do_setretfloat.rx u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    push           1          i64 
    push           &pci_mcl.xregset 
    push           pc_genmcl.do_setretfloat.destreg i64 
    popptroff                 u8 1 -1
#15743: 
#15741: 
    jump           #15744     
#15740: 
    setargs                   2 0
    push           ""         u64 
    push           "setretf?" u64 
    callproc       &pc_libmcl.merror 
#15744: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#15745: 
    retproc                   
End


Proc pc_genmcl.do_setret:
    param          pc_genmcl.do_setret.destreg i64 
    param          pc_genmcl.do_setret.destxreg i64 
    local          pc_genmcl.do_setret.currreg i64 
    local          pc_genmcl.do_setret.ax u64 
    local          pc_genmcl.do_setret.rx u64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           3          
    pushptroff                u8 1 0
    jumpfalse      #15747     i64 
    setargs                   1 0
    push           pc_genmcl.do_setret.destxreg i64 
    callproc       &pc_genmcl.do_setretfloat 
    jump           #15748     
#15747: 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.do_setret.destreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_genmcl.do_setret.rx u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.do_setret.ax u64 
    push           pc_genmcl.do_setret.ax u64 
    push           10         
    pushptroff                u8 1 0
    pop            pc_genmcl.do_setret.currreg i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #15749     i64 0
    popstack                  i64 
    jump           #15750     
#15749: 
    push           pc_genmcl.do_setret.currreg i64 
    push           pc_genmcl.do_setret.destreg i64 
    jumpeq         #15751     i64 
    push           &pci_mcl.regset 
    push           pc_genmcl.do_setret.destreg i64 
    pushptroff                u8 1 -1
    jumpfalse      #15752     i64 
    setargs                   1 0
    push           pc_genmcl.do_setret.destreg i64 
    callproc       &pc_stackmcl.swapopndregs 
    setargs                   3 0
    push           pc_genmcl.do_setret.ax u64 
    push           pc_genmcl.do_setret.rx u64 
    push           28         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15753     
#15752: 
    setargs                   3 0
    push           pc_genmcl.do_setret.ax u64 
    push           pc_genmcl.do_setret.rx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
#15753: 
#15751: 
    jump           #15754     
#15750: 
    setargs                   2 0
    push           ""         u64 
    push           "setret?"  u64 
    callproc       &pc_libmcl.merror 
#15754: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    push           1          i64 
    push           &pci_mcl.regset 
    push           pc_genmcl.do_setret.destreg i64 
    popptroff                 u8 1 -1
    push           0          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_genmcl.do_setret.destreg i64 
    popptroff                 u8 1 -1
#15748: 
    retproc                   
End


Proc pc_genmcl.dogetretvalue:
    param          pc_genmcl.dogetretvalue.p u64 
    local          pc_genmcl.dogetretvalue.reg i64 
    local          pc_genmcl.dogetretvalue.xreg i64 
    local          pc_genmcl.dogetretvalue.i i64 
    local          pc_genmcl.dogetretvalue.n i64 
    local          pc_genmcl.dogetretvalue.cats block:80 
    procentry                 
    push           pc_genmcl.dogetretvalue.p u64 
    push           1          i64 
    addrefoff                 u64 32 0
    push           1          
    pushptroff                u8 1 0
    push           27         i64 
    jumpne         #15756     i64 
    push           0          i64 
    pop            pc_genmcl.dogetretvalue.n i64 
    jump           #15757     
#15758: 
    push           &pc_tables.pcat 
    push           pc_genmcl.dogetretvalue.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           &pc_genmcl.dogetretvalue.cats 
    push           &pc_genmcl.dogetretvalue.n 
    incrload                  i64 1
    popptroff                 i64 8 -8
#15757: 
    push           &pc_genmcl.dogetretvalue.p 
    incrload                  u64 32
    push           1          
    pushptroff                u8 1 0
    push           27         i64 
    jumpeq         #15758     i64 
#15759: 
    push           pc_genmcl.dogetretvalue.p u64 
    push           1          i64 
    subrefoff                 u64 32 0
    pop            pc_genmcl.currpcl u64 
#15760: 
    push           pc_genmcl.dogetretvalue.n i64 
    pop            pc_genmcl.dogetretvalue.i i64 
    push           pc_genmcl.dogetretvalue.i i64 
    push           1          i64 
    jumplt         #15761     i64 
#15762: 
    push           &pc_genmcl.dogetretvalue.cats 
    push           pc_genmcl.dogetretvalue.i i64 
    pushptroff                i64 8 -8
    push           4          i64 
    casejumpeq     #15763     i64 0
    push           5          i64 
    casejumpeq     #15763     i64 0
    popstack                  i64 
    jump           #15764     
#15763: 
    setargs                   2 0
    push           ""         u64 
    push           "Short/wide mulret type" u64 
    callproc       &pc_libmcl.merror 
    jump           #15765     
#15764: 
#15765: 
    setargs                   3 0
    push           &pc_genmcl.dogetretvalue.cats 
    push           pc_genmcl.dogetretvalue.i i64 
    pushptroff                i64 8 -8
    push           &pc_genmcl.multxregs 
    push           pc_genmcl.dogetretvalue.i i64 
    pushptroff                i64 8 -8
    push           &pc_genmcl.multregs 
    push           pc_genmcl.dogetretvalue.i i64 
    pushptroff                i64 8 -8
    callproc       &pc_genmcl.dogetretvalue_n 
#15766: 
    fordown        #15762     i64 1
    opnd           pc_genmcl.dogetretvalue.i 
    opnd           1          
#15761: 
    jump           #15767     
#15756: 
    setargs                   3 0
    push           &pc_tables.pcat 
    push           pc_genmcl.dogetretvalue.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    push           1          i64 
    callproc       &pc_genmcl.dogetretvalue_n 
    push           &pc_tables.pcat 
    push           pc_genmcl.dogetretvalue.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           4          i64 
    jumpne         #15768     i64 
    setargs                   3 0
    setargs                   2 0
    push           pc_genmcl.dogetretvalue.p u64 
    push           4          
    pushptroff                i32 1 0
    push           1          i64 
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_libmcl.mgenreg u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_genmcl.dogetretvalue.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #15769     i64 
    push           19         i64 
    resetmult                 
    jump           #15770     
#15769: 
    push           20         i64 
    endmult                   
#15770: 
    callproc       &pc_libmcl.genmc 
#15768: 
#15767: 
#15771: 
    retproc                   
End


Proc pc_genmcl.dogetretvalue_n:
    param          pc_genmcl.dogetretvalue_n.reg i64 
    param          pc_genmcl.dogetretvalue_n.xreg i64 
    param          pc_genmcl.dogetretvalue_n.cat i64 
    procentry                 
    push           pc_genmcl.dogetretvalue_n.cat i64 
    push           1          i64 
    casejumpeq     #15773     i64 0
    push           4          i64 
    casejumpeq     #15773     i64 0
    push           3          i64 
    casejumpeq     #15774     i64 0
    push           2          i64 
    casejumpeq     #15775     i64 0
    push           5          i64 
    casejumpeq     #15776     i64 0
    popstack                  i64 
    jump           #15777     
#15773: 
    setargs                   1 0
    push           pc_genmcl.dogetretvalue_n.reg i64 
    callproc       &pc_stackmcl.addreg0 
    jump           #15778     
#15774: 
    setargs                   2 0
    push           2          i64 
    push           pc_genmcl.dogetretvalue_n.xreg i64 
    callproc       &pc_stackmcl.addxreg0 
    jump           #15778     
#15775: 
    setargs                   2 0
    push           3          i64 
    push           pc_genmcl.dogetretvalue_n.xreg i64 
    callproc       &pc_stackmcl.addxreg0 
    jump           #15778     
#15776: 
    setargs                   1 0
    push           pc_genmcl.dogetretvalue_n.reg i64 
    callproc       &pc_stackmcl.addwidereg0 
    jump           #15778     
#15777: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pc_tables.pstdnames 
    push           pc_genmcl.dogetretvalue_n.cat i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           ""         u64 
    push           "getretval/n?" u64 
    callproc       &pc_libmcl.merror 
#15778: 
#15779: 
    retproc                   
End


Proc pc_genmcl.do_shift:
    param          pc_genmcl.do_shift.p u64 
    param          pc_genmcl.do_shift.opc i64 
    local          pc_genmcl.do_shift.ax u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.do_shift.ax u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #15781     i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.do_shift.ax u64 
    push           pc_genmcl.do_shift.opc i64 
    callproc       &pc_libmcl.genmc 
    jump           #15782     
#15781: 
    push           pci_mcl.inf_r10used i64 
    jumpfalse      #15783     i64 
    setargs                   2 0
    push           ""         u64 
    push           "shift:cl in use" u64 
    callproc       &pc_libmcl.merror 
#15783: 
    setargs                   2 0
    push           11         i64 
    push           1          i64 
    callproc       &pc_stackmcl.loadparam 
    setargs                   3 0
    setargs                   2 0
    push           1          i64 
    push           11         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           pc_genmcl.do_shift.ax u64 
    push           pc_genmcl.do_shift.opc i64 
    callproc       &pc_libmcl.genmc 
#15782: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#15784: 
    retproc                   
End


Proc pc_genmcl.mulimm:
    param          pc_genmcl.mulimm.ax u64 
    param          pc_genmcl.mulimm.n i64 
    local          pc_genmcl.mulimm.shifts i64 
    local          pc_genmcl.mulimm.m i64 
    procentry                 
    push           pc_genmcl.mulimm.n i64 
    push           0          i64 
    casejumpeq     #15786     i64 0
    push           1          i64 
    casejumpeq     #15787     i64 0
    push           -1         i64 
    casejumpeq     #15788     i64 0
    popstack                  i64 
    jump           #15789     
#15786: 
    setargs                   3 0
    push           pc_genmcl.mulimm.ax u64 
    push           pc_genmcl.mulimm.ax u64 
    push           41         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15790     
    jump           #15791     
#15787: 
    jump           #15790     
    jump           #15791     
#15788: 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.mulimm.ax u64 
    push           51         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15790     
    jump           #15791     
#15789: 
#15791: 
    push           0          i64 
    pop            pc_genmcl.mulimm.shifts i64 
    push           pc_genmcl.mulimm.n i64 
    pop            pc_genmcl.mulimm.m i64 
    jump           #15792     
#15793: 
    push           &pc_genmcl.mulimm.m 
    push           1          i64 
    shrto                     i64 
    push           &pc_genmcl.mulimm.shifts 
    incr                      i64 1
#15792: 
    push           pc_genmcl.mulimm.m i64 
    push           0          i64 
    dotindex                  i64 
    jumpfalse      #15793     i64 
#15794: 
    push           pc_genmcl.mulimm.shifts i64 
    jumpfalse      #15795     i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.mulimm.shifts i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.mulimm.ax u64 
    push           44         i64 
    callproc       &pc_libmcl.genmc 
#15795: 
    push           pc_genmcl.mulimm.m i64 
    push           1          i64 
    casejumpeq     #15796     i64 0
    push           3          i64 
    casejumpeq     #15797     i64 0
    push           5          i64 
    casejumpeq     #15797     i64 0
    push           9          i64 
    casejumpeq     #15797     i64 0
    popstack                  i64 
    jump           #15798     
#15796: 
    jump           #15790     
    jump           #15799     
#15797: 
    setargs                   3 0
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           0          i64 
    push           0          i64 
    push           pc_genmcl.mulimm.m i64 
    push           1          i64 
    sub                       i64 
    push           pc_genmcl.mulimm.ax u64 
    push           10         
    pushptroff                u8 1 0
    push           pc_genmcl.mulimm.ax u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenindex u64 
    push           pc_genmcl.mulimm.ax u64 
    push           15         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15799     
#15798: 
    push           pc_genmcl.mulimm.shifts i64 
    jumpfalse      #15800     i64 
    push           35         i64 
    push           pci_mcl.mccodex u64 
    push           24         
    popptroff                 u8 1 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.mulimm.n i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pci_mcl.mccodex u64 
    push           16         
    popptroff                 u64 1 0
    jump           #15801     
#15800: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.mulimm.n i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.mulimm.ax u64 
    push           35         i64 
    callproc       &pc_libmcl.genmc 
#15801: 
#15799: 
#15790: 
    retproc                   
End


Proc pc_genmcl.dojumptruefalse:
    param          pc_genmcl.dojumptruefalse.p u64 
    param          pc_genmcl.dojumptruefalse.cond i64 
    local          pc_genmcl.dojumptruefalse.ax u64 
    local          pc_genmcl.dojumptruefalse.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.dojumptruefalse.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #15803     i64 0
    popstack                  i64 
    jump           #15804     
#15803: 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dojumptruefalse.ax u64 
    setargs                   3 0
    push           pc_genmcl.dojumptruefalse.ax u64 
    push           pc_genmcl.dojumptruefalse.ax u64 
    push           42         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.dojumptruefalse.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    push           pc_genmcl.dojumptruefalse.cond i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    jump           #15805     
#15804: 
    setargs                   2 0
    push           pc_genmcl.dojumptruefalse.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "jumptrue/false" u64 
    callproc       &pc_libmcl.merrort 
#15805: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#15806: 
    retproc                   
End


Proc pc_genmcl.dobitwise:
    param          pc_genmcl.dobitwise.p u64 
    param          pc_genmcl.dobitwise.opc i64 
    local          pc_genmcl.dobitwise.ax u64 
    local          pc_genmcl.dobitwise.bx u64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.dobitwise.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #15808     i64 0
    push           5          i64 
    casejumpeq     #15809     i64 0
    popstack                  i64 
    jump           #15810     
#15808: 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dobitwise.ax u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dobitwise.bx u64 
    setargs                   3 0
    push           pc_genmcl.dobitwise.bx u64 
    push           pc_genmcl.dobitwise.ax u64 
    push           pc_genmcl.dobitwise.opc i64 
    callproc       &pc_libmcl.genmc 
    jump           #15811     
#15809: 
    setargs                   3 0
    push           pc_genmcl.dobitwise.opc i64 
    push           pc_genmcl.dobitwise.opc i64 
    push           pc_genmcl.dobitwise.p u64 
    callproc       &pc_genmcl.dobin_i128 
    jump           #15812     
    jump           #15811     
#15810: 
    setargs                   2 0
    push           pc_genmcl.dobitwise.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "bitwise:" u64 
    callproc       &pc_libmcl.merrort 
#15811: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#15812: 
    retproc                   
End


Proc pc_genmcl.do_addrmode: u64
    param          pc_genmcl.do_addrmode.p u64 
    local          pc_genmcl.do_addrmode.px u64 
    local          pc_genmcl.do_addrmode.ax u64 
    local          pc_genmcl.do_addrmode.bx u64 
    local          pc_genmcl.do_addrmode.m i64 
    local          pc_genmcl.do_addrmode.scale i64 
    local          pc_genmcl.do_addrmode.extra i64 
    local          pc_genmcl.do_addrmode.offset i64 
    local          pc_genmcl.do_addrmode.reg i64 
    local          pc_genmcl.do_addrmode.regix i64 
    local          pc_genmcl.do_addrmode.d u64 
    procentry                 
    push           pc_genmcl.do_addrmode.p u64 
    push           16         
    pushptroff                i32 1 0
    pop            pc_genmcl.do_addrmode.scale i64 
    push           pc_genmcl.do_addrmode.p u64 
    push           20         
    pushptroff                i32 1 0
    pop            pc_genmcl.do_addrmode.extra i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    push           pc_genmcl.do_addrmode.scale i64 
    mul                       i64 
    push           pc_genmcl.do_addrmode.extra i64 
    add                       i64 
    pop            pc_genmcl.do_addrmode.offset i64 
    push           pc_genmcl.do_addrmode.p u64 
    push           3          
    pushptroff                u8 1 0
    pop            pc_genmcl.do_addrmode.m i64 
    push           0          u64 
    pop            pc_genmcl.do_addrmode.px u64 
    setargs                   1 0
    push           2          i64 
    callfn         &pc_libmcl.isregvaropnd i64 
    jumpfalse      #15814     i64 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.isregvaropnd i64 
    jumpfalse      #15815     i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_genmcl.do_addrmode.reg i64 
    setargs                   3 0
    push           1          i64 
    push           &pc_genmcl.do_addrmode.scale 
    push           pc_genmcl.do_addrmode.reg i64 
    callfn         &pc_genmcl.scaleregvar i64 
    pop            pc_genmcl.do_addrmode.regix i64 
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           0          i64 
    push           pc_genmcl.do_addrmode.extra i64 
    push           pc_genmcl.do_addrmode.scale i64 
    push           pc_genmcl.do_addrmode.regix i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenindex u64 
    pop            pc_genmcl.do_addrmode.px u64 
    jump           #15816     
#15815: 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.isimm64 i64 
    jumpfalse      #15817     i64 
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           0          i64 
    push           pc_genmcl.do_addrmode.offset i64 
    push           1          i64 
    push           0          i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenindex u64 
    pop            pc_genmcl.do_addrmode.px u64 
    jump           #15816     
#15817: 
    setargs                   2 0
    push           pc_genmcl.do_addrmode.scale i64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    store          pc_genmcl.do_addrmode.bx u64 
    callfn         &pc_genmcl.scaleindex i64 
    pop            pc_genmcl.do_addrmode.scale i64 
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           0          i64 
    push           pc_genmcl.do_addrmode.extra i64 
    push           pc_genmcl.do_addrmode.scale i64 
    push           pc_genmcl.do_addrmode.bx u64 
    push           10         
    pushptroff                u8 1 0
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenindex u64 
    pop            pc_genmcl.do_addrmode.px u64 
#15816: 
    jump           #15818     
#15814: 
    setargs                   1 0
    push           2          i64 
    callfn         &pc_libmcl.ismemaddr i64 
    jumpfalse      #15819     i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    pop            pc_genmcl.do_addrmode.d u64 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.isregvaropnd i64 
    jumpfalse      #15820     i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_genmcl.do_addrmode.reg i64 
    setargs                   3 0
    push           1          i64 
    push           &pc_genmcl.do_addrmode.scale 
    push           pc_genmcl.do_addrmode.reg i64 
    callfn         &pc_genmcl.scaleregvar i64 
    pop            pc_genmcl.do_addrmode.regix i64 
    setargs                   7 0
    push           pc_genmcl.do_addrmode.d u64 
    push           0          i64 
    push           0          i64 
    push           pc_genmcl.do_addrmode.extra i64 
    push           pc_genmcl.do_addrmode.scale i64 
    push           pc_genmcl.do_addrmode.regix i64 
    push           0          i64 
    callfn         &pc_libmcl.mgenindex u64 
    pop            pc_genmcl.do_addrmode.px u64 
    jump           #15821     
#15820: 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.isimm64 i64 
    jumpfalse      #15822     i64 
    setargs                   7 0
    push           pc_genmcl.do_addrmode.d u64 
    push           0          i64 
    push           0          i64 
    push           pc_genmcl.do_addrmode.offset i64 
    push           1          i64 
    push           0          i64 
    push           0          i64 
    callfn         &pc_libmcl.mgenindex u64 
    pop            pc_genmcl.do_addrmode.px u64 
    jump           #15821     
#15822: 
    setargs                   2 0
    push           pc_genmcl.do_addrmode.scale i64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    store          pc_genmcl.do_addrmode.bx u64 
    callfn         &pc_genmcl.scaleindex i64 
    pop            pc_genmcl.do_addrmode.scale i64 
    setargs                   7 0
    push           pc_genmcl.do_addrmode.d u64 
    push           0          i64 
    push           0          i64 
    push           pc_genmcl.do_addrmode.extra i64 
    push           pc_genmcl.do_addrmode.scale i64 
    push           pc_genmcl.do_addrmode.bx u64 
    push           10         
    pushptroff                u8 1 0
    push           0          i64 
    callfn         &pc_libmcl.mgenindex u64 
    pop            pc_genmcl.do_addrmode.px u64 
#15821: 
    jump           #15818     
#15819: 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.do_addrmode.ax u64 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.isregvaropnd i64 
    jumpfalse      #15823     i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_genmcl.do_addrmode.reg i64 
    setargs                   3 0
    push           1          i64 
    push           &pc_genmcl.do_addrmode.scale 
    push           pc_genmcl.do_addrmode.reg i64 
    callfn         &pc_genmcl.scaleregvar i64 
    pop            pc_genmcl.do_addrmode.regix i64 
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           0          i64 
    push           pc_genmcl.do_addrmode.extra i64 
    push           pc_genmcl.do_addrmode.scale i64 
    push           pc_genmcl.do_addrmode.regix i64 
    push           pc_genmcl.do_addrmode.ax u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenindex u64 
    pop            pc_genmcl.do_addrmode.px u64 
    jump           #15824     
#15823: 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.isimm64 i64 
    jumpfalse      #15825     i64 
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           0          i64 
    push           pc_genmcl.do_addrmode.offset i64 
    push           1          i64 
    push           0          i64 
    push           pc_genmcl.do_addrmode.ax u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenindex u64 
    pop            pc_genmcl.do_addrmode.px u64 
    jump           #15824     
#15825: 
    setargs                   2 0
    push           pc_genmcl.do_addrmode.scale i64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    store          pc_genmcl.do_addrmode.bx u64 
    callfn         &pc_genmcl.scaleindex i64 
    pop            pc_genmcl.do_addrmode.scale i64 
    setargs                   7 0
    push           0          u64 
    push           0          i64 
    push           0          i64 
    push           pc_genmcl.do_addrmode.extra i64 
    push           pc_genmcl.do_addrmode.scale i64 
    push           pc_genmcl.do_addrmode.bx u64 
    push           10         
    pushptroff                u8 1 0
    push           pc_genmcl.do_addrmode.ax u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenindex u64 
    pop            pc_genmcl.do_addrmode.px u64 
#15824: 
#15818: 
    push           pc_genmcl.do_addrmode.px u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #15826     i64 
    push           pc_genmcl.do_addrmode.p u64 
    push           4          
    pushptroff                i32 1 0
    push           pc_genmcl.do_addrmode.px u64 
    push           8          
    popptroff                 u8 1 0
#15826: 
    push           pc_genmcl.do_addrmode.px u64 
    setret                    u64 
    jump           #15827     
#15827: 
    retfn                     u64 
End


Proc pc_genmcl.scaleregvar: i64
    param          pc_genmcl.scaleregvar.reg i64 
    param          pc_genmcl.scaleregvar.scale u64 
    param          pc_genmcl.scaleregvar.n i64 
    local          pc_genmcl.scaleregvar.regix i64 
    local          pc_genmcl.scaleregvar.ax u64 
    procentry                 
    push           pc_genmcl.scaleregvar.scale u64 
    pushptr                   i64 
    push           1          i64 
    setjumpeq      #15829     i64 
    push           2          i64 
    setjumpeq      #15829     i64 
    push           4          i64 
    setjumpeq      #15829     i64 
    push           8          i64 
    setjumpne      #15830     i64 
#15829: 
    push           pc_genmcl.scaleregvar.reg i64 
    setret                    i64 
    jump           #15831     
#15830: 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    pop            pc_genmcl.scaleregvar.regix i64 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.scaleregvar.regix i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_genmcl.scaleregvar.ax u64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.scaleregvar.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           pc_genmcl.scaleregvar.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.scaleregvar.n i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.scaleregvar.n i64 
    addrefoff                 block:15 15 -15
    push           1          
    popptroff                 u8 1 0
    push           pc_genmcl.scaleregvar.regix i64 
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.scaleregvar.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    setargs                   2 0
    push           pc_genmcl.scaleregvar.scale u64 
    pushptr                   i64 
    push           pc_genmcl.scaleregvar.ax u64 
    callproc       &pc_genmcl.mulimm 
    push           1          i64 
    push           pc_genmcl.scaleregvar.scale u64 
    popptr                    i64 
    push           pc_genmcl.scaleregvar.regix i64 
    setret                    i64 
    jump           #15831     
#15831: 
    retfn                     i64 
End


Proc pc_genmcl.scaleindex: i64
    param          pc_genmcl.scaleindex.ax u64 
    param          pc_genmcl.scaleindex.scale i64 
    local          pc_genmcl.scaleindex.n i64 
    procentry                 
    push           pc_genmcl.scaleindex.scale i64 
    push           1          i64 
    setjumpeq      #15833     i64 
    push           2          i64 
    setjumpeq      #15833     i64 
    push           4          i64 
    setjumpeq      #15833     i64 
    push           8          i64 
    setjumpne      #15834     i64 
#15833: 
    push           pc_genmcl.scaleindex.scale i64 
    setret                    i64 
    jump           #15835     
#15834: 
    setargs                   2 0
    push           pc_genmcl.scaleindex.scale i64 
    push           pc_genmcl.scaleindex.ax u64 
    callproc       &pc_genmcl.mulimm 
    push           1          i64 
    setret                    i64 
    jump           #15835     
#15835: 
    retfn                     i64 
End


Proc pc_genmcl.makeregopnd: u64
    param          pc_genmcl.makeregopnd.n i64 
    local          pc_genmcl.makeregopnd.ax u64 
    procentry                 
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.makeregopnd.n i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.makeregopnd.n i64 
    addrefoff                 block:15 15 -15
    push           1          
    popptroff                 u8 1 0
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.makeregopnd.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.makeregopnd.n i64 
    callfn         &pc_stackmcl.genopnd u64 
    setret                    u64 
    jump           #15837     
#15837: 
    retfn                     u64 
End


Proc pc_genmcl.dobinto_int:
    param          pc_genmcl.dobinto_int.p u64 
    param          pc_genmcl.dobinto_int.opc i64 
    local          pc_genmcl.dobinto_int.ax u64 
    local          pc_genmcl.dobinto_int.bx u64 
    local          pc_genmcl.dobinto_int.rx u64 
    local          pc_genmcl.dobinto_int.reg i64 
    local          pc_genmcl.dobinto_int.size i64 
    procentry                 
    push           pc_genmcl.dobinto_int.p u64 
    push           4          
    pushptroff                i32 1 0
    pop            pc_genmcl.dobinto_int.size i64 
    push           pc_genmcl.dobinto_int.size i64 
    push           8          i64 
    jumpne         #15839     i64 
    setargs                   1 0
    push           2          i64 
    callfn         &pc_libmcl.ismemaddr i64 
    jumpfalse      #15839     i64 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    pop            pc_genmcl.dobinto_int.ax u64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    pop            pc_genmcl.dobinto_int.reg i64 
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.dobinto_int.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_genmcl.dobinto_int.rx u64 
    setargs                   3 0
    push           pc_genmcl.dobinto_int.ax u64 
    push           pc_genmcl.dobinto_int.rx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dobinto_int.bx u64 
    setargs                   3 0
    push           pc_genmcl.dobinto_int.bx u64 
    push           pc_genmcl.dobinto_int.rx u64 
    push           pc_genmcl.dobinto_int.opc i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.dobinto_int.rx u64 
    push           pc_genmcl.dobinto_int.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_genmcl.dobinto_int.reg i64 
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_genmcl.dobinto_int.reg i64 
    popptroff                 u8 1 -1
    jump           #15840     
#15839: 
    setargs                   2 0
    push           pc_genmcl.dobinto_int.size i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.dobinto_int.ax u64 
    setargs                   2 0
    push           pc_genmcl.dobinto_int.size i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dobinto_int.bx u64 
    setargs                   3 0
    push           pc_genmcl.dobinto_int.bx u64 
    push           pc_genmcl.dobinto_int.ax u64 
    push           pc_genmcl.dobinto_int.opc i64 
    callproc       &pc_libmcl.genmc 
#15840: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#15841: 
    retproc                   
End


Proc pc_genmcl.dobinto_float:
    param          pc_genmcl.dobinto_float.p u64 
    param          pc_genmcl.dobinto_float.opc i64 
    local          pc_genmcl.dobinto_float.ax u64 
    local          pc_genmcl.dobinto_float.bx u64 
    local          pc_genmcl.dobinto_float.cx u64 
    procentry                 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_x64 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.dobinto_float.ax u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dobinto_float.bx u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dobinto_float.cx u64 
    setargs                   3 0
    push           pc_genmcl.dobinto_float.ax u64 
    push           pc_genmcl.dobinto_float.cx u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.dobinto_float.bx u64 
    push           pc_genmcl.dobinto_float.cx u64 
    push           pc_genmcl.dobinto_float.opc i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.dobinto_float.cx u64 
    push           pc_genmcl.dobinto_float.ax u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#15843: 
    retproc                   
End


Proc pc_genmcl.dobinto_float32:
    param          pc_genmcl.dobinto_float32.p u64 
    param          pc_genmcl.dobinto_float32.opc i64 
    local          pc_genmcl.dobinto_float32.ax u64 
    local          pc_genmcl.dobinto_float32.bx u64 
    local          pc_genmcl.dobinto_float32.cx u64 
    procentry                 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_x32 
    setargs                   2 0
    push           4          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.dobinto_float32.ax u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dobinto_float32.bx u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dobinto_float32.cx u64 
    setargs                   3 0
    push           pc_genmcl.dobinto_float32.ax u64 
    push           pc_genmcl.dobinto_float32.cx u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.dobinto_float32.bx u64 
    push           pc_genmcl.dobinto_float32.cx u64 
    push           pc_genmcl.dobinto_float32.opc i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.dobinto_float32.cx u64 
    push           pc_genmcl.dobinto_float32.ax u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#15845: 
    retproc                   
End


Proc pc_genmcl.doselectcc:
    param          pc_genmcl.doselectcc.p u64 
    local          pc_genmcl.doselectcc.ax u64 
    local          pc_genmcl.doselectcc.bx u64 
    local          pc_genmcl.doselectcc.cx u64 
    local          pc_genmcl.doselectcc.dx u64 
    local          pc_genmcl.doselectcc.cond i64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.doselectcc.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #15847     i64 
    setargs                   2 0
    push           pc_genmcl.doselectcc.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "selectcc" u64 
    callproc       &pc_libmcl.merrort 
#15847: 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.doselectcc.ax u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.doselectcc.bx u64 
    setargs                   3 0
    push           pc_genmcl.doselectcc.bx u64 
    push           pc_genmcl.doselectcc.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    push           1          i64 
    pop            pci_mcl.noxorclear u8 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.doselectcc.dx u64 
    setargs                   2 0
    push           8          i64 
    push           4          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.doselectcc.cx u64 
    push           0          i64 
    pop            pci_mcl.noxorclear u8 
    push           &pc_tables.psigned 
    push           pc_genmcl.doselectcc.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #15848     i64 
    push           &pc_genmcl.scondcodes 
    push           pc_genmcl.doselectcc.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u8 1 -72
    pop            pc_genmcl.doselectcc.cond i64 
    jump           #15849     
#15848: 
    push           &pc_genmcl.ucondcodes 
    push           pc_genmcl.doselectcc.p u64 
    push           1          
    pushptroff                u8 1 0
    pushptroff                u8 1 -72
    pop            pc_genmcl.doselectcc.cond i64 
#15849: 
    setargs                   4 0
    push           pc_genmcl.doselectcc.dx u64 
    push           pc_genmcl.doselectcc.cx u64 
    setargs                   1 0
    push           pc_genmcl.doselectcc.cond i64 
    callfn         &pc_genmcl.reversemcond i64 
    push           16         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#15850: 
    retproc                   
End


Proc pc_genmcl.reversemcond: i64
    param          pc_genmcl.reversemcond.cond i64 
    procentry                 
    push           pc_genmcl.reversemcond.cond i64 
    push           4          i64 
    casejumpeq     #15852     i64 0
    push           5          i64 
    casejumpeq     #15853     i64 0
    push           12         i64 
    casejumpeq     #15854     i64 0
    push           14         i64 
    casejumpeq     #15855     i64 0
    push           13         i64 
    casejumpeq     #15856     i64 0
    push           15         i64 
    casejumpeq     #15857     i64 0
    push           2          i64 
    casejumpeq     #15858     i64 0
    push           6          i64 
    casejumpeq     #15859     i64 0
    push           3          i64 
    casejumpeq     #15860     i64 0
    push           7          i64 
    casejumpeq     #15861     i64 0
    popstack                  i64 
    jump           #15862     
#15852: 
    push           5          i64 
    setret                    i64 
    jump           #15863     
    jump           #15864     
#15853: 
    push           5          i64 
    setret                    i64 
    jump           #15863     
    jump           #15864     
#15854: 
    push           13         i64 
    setret                    i64 
    jump           #15863     
    jump           #15864     
#15855: 
    push           15         i64 
    setret                    i64 
    jump           #15863     
    jump           #15864     
#15856: 
    push           12         i64 
    setret                    i64 
    jump           #15863     
    jump           #15864     
#15857: 
    push           14         i64 
    setret                    i64 
    jump           #15863     
    jump           #15864     
#15858: 
    push           3          i64 
    setret                    i64 
    jump           #15863     
    jump           #15864     
#15859: 
    push           7          i64 
    setret                    i64 
    jump           #15863     
    jump           #15864     
#15860: 
    push           2          i64 
    setret                    i64 
    jump           #15863     
    jump           #15864     
#15861: 
    push           3          i64 
    setret                    i64 
    jump           #15863     
    jump           #15864     
#15862: 
#15864: 
    push           0          i64 
    setret                    i64 
    jump           #15863     
#15863: 
    retfn                     i64 
End


Proc pc_genmcl.do_divrem:
    param          pc_genmcl.do_divrem.p u64 
    param          pc_genmcl.do_divrem.issigned i64 
    param          pc_genmcl.do_divrem.isdiv i64 
    local          pc_genmcl.do_divrem.opc i64 
    local          pc_genmcl.do_divrem.n i64 
    local          pc_genmcl.do_divrem.shifts i64 
    procentry                 
    setargs                   2 0
    push           0          i64 
    push           2          i64 
    callproc       &pc_stackmcl.loadopnd 
    push           pc_genmcl.do_divrem.isdiv i64 
    jumpfalse      #15866     i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #15866     i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    pop            pc_genmcl.do_divrem.n i64 
    push           pc_genmcl.do_divrem.n i64 
    push           0          i64 
    casejumpeq     #15867     i64 0
    push           1          i64 
    casejumpeq     #15868     i64 0
    popstack                  i64 
    jump           #15869     
#15867: 
    setargs                   2 0
    push           ""         u64 
    push           "Divide by zero" u64 
    callproc       &pc_libmcl.merror 
    jump           #15870     
#15868: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #15871     
    jump           #15870     
#15869: 
    setargs                   1 0
    push           pc_genmcl.do_divrem.n i64 
    callfn         &pc_libmcl.ispoweroftwo i64 
    pop            pc_genmcl.do_divrem.shifts i64 
    push           pc_genmcl.do_divrem.shifts i64 
    jumpfalse      #15872     i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.do_divrem.shifts i64 
    callfn         &pc_libmcl.mgenint u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    startmult                 
    push           pc_genmcl.do_divrem.issigned i64 
    jumpfalse      #15873     i64 
    push           45         i64 
    resetmult                 
    jump           #15874     
#15873: 
    push           46         i64 
    endmult                   
#15874: 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    jump           #15871     
#15872: 
#15870: 
#15866: 
    setargs                   2 0
    push           0          i64 
    push           1          i64 
    callproc       &pc_stackmcl.loadopnd 
    setargs                   0 0
    callproc       &pc_genmcl.saverdx 
    setargs                   0 0
    callproc       &pc_genmcl.fixdivopnds 
    push           pc_genmcl.do_divrem.issigned i64 
    jumpfalse      #15875     i64 
    setargs                   3 0
    push           0          u64 
    push           0          u64 
    push           58         i64 
    callproc       &pc_libmcl.genmc 
    push           37         i64 
    pop            pc_genmcl.do_divrem.opc i64 
    jump           #15876     
#15875: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           12         i64 
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   2 0
    push           8          i64 
    push           12         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           41         i64 
    callproc       &pc_libmcl.genmc 
    push           38         i64 
    pop            pc_genmcl.do_divrem.opc i64 
#15876: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           pc_genmcl.do_divrem.p u64 
    push           4          
    pushptroff                i32 1 0
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    push           pc_genmcl.do_divrem.opc i64 
    callproc       &pc_libmcl.genmc 
    push           pc_genmcl.do_divrem.isdiv i64 
    jumptrue       #15877     i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           12         i64 
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           28         i64 
    callproc       &pc_libmcl.genmc 
#15877: 
    setargs                   0 0
    callproc       &pc_genmcl.restorerdx 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#15871: 
    retproc                   
End


Proc pc_genmcl.fixdivopnds:
    local          pc_genmcl.fixdivopnds.regx i64 
    local          pc_genmcl.fixdivopnds.regy i64 
    local          pc_genmcl.fixdivopnds.zop i64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_genmcl.fixdivopnds.regx i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_genmcl.fixdivopnds.regy i64 
    push           pc_genmcl.fixdivopnds.regx i64 
    push           1          i64 
    jumpne         #15879     i64 
    jump           #15880     
#15879: 
    push           pc_genmcl.fixdivopnds.regy i64 
    push           1          i64 
    jumpne         #15881     i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    push           28         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    jump           #15880     
#15881: 
    push           &pci_mcl.regset 
    push           1          i64 
    pushptroff                u8 1 -1
    push           0          i64 
    jumpne         #15882     i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           28         i64 
    callproc       &pc_libmcl.genmc 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_genmcl.fixdivopnds.regx i64 
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    push           1          i64 
    push           &pci_mcl.regset 
    push           1          i64 
    popptroff                 u8 1 -1
    jump           #15880     
#15882: 
#15883: 
    push           pci_mcl.noperands i64 
    pop            pc_genmcl.fixdivopnds.zop i64 
    push           pc_genmcl.fixdivopnds.zop i64 
    push           1          i64 
    jumplt         #15884     i64 
#15885: 
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.fixdivopnds.zop i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #15886     i64 
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.fixdivopnds.zop i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #15886     i64 
    jump           #15884     
#15886: 
#15887: 
    fordown        #15885     i64 1
    opnd           pc_genmcl.fixdivopnds.zop 
    opnd           1          
#15884: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           28         i64 
    callproc       &pc_libmcl.genmc 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    addrefoff                 u64 1 0
    push           pci_mcl.pclstack u64 
    push           pc_genmcl.fixdivopnds.zop i64 
    addrefoff                 block:15 15 -15
    push           2          
    addrefoff                 u64 1 0
    swap                      u8 
#15880: 
    retproc                   
End


Proc pc_genmcl.saverdx:
    procentry                 
    push           pci_mcl.inf_r11used i64 
    jumpfalse      #15889     i64 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           12         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
#15889: 
#15890: 
    retproc                   
End


Proc pc_genmcl.restorerdx:
    procentry                 
    push           pci_mcl.inf_r11used i64 
    jumpfalse      #15892     i64 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           12         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           14         i64 
    callproc       &pc_libmcl.genmc 
#15892: 
#15893: 
    retproc                   
End


Proc pc_genmcl.doincr:
    param          pc_genmcl.doincr.p u64 
    param          pc_genmcl.doincr.incrop i64 
    param          pc_genmcl.doincr.addop i64 
    procentry                 
    push           pc_genmcl.doincr.p u64 
    push           16         
    pushptroff                i32 1 0
    push           1          i64 
    jumpne         #15895     i64 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.ismemaddr i64 
    jumpfalse      #15896     i64 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           pc_genmcl.doincr.incrop i64 
    callproc       &pc_libmcl.genmc 
    jump           #15897     
#15896: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    push           pc_genmcl.doincr.incrop i64 
    callproc       &pc_libmcl.genmc 
#15897: 
    jump           #15898     
#15895: 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.ismemaddr i64 
    jumpfalse      #15899     i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.doincr.p u64 
    push           16         
    pushptroff                i32 1 0
    callfn         &pc_libmcl.mgenint u64 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           pc_genmcl.doincr.addop i64 
    callproc       &pc_libmcl.genmc 
    jump           #15900     
#15899: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.doincr.p u64 
    push           16         
    pushptroff                i32 1 0
    callfn         &pc_libmcl.mgenint u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    push           pc_genmcl.doincr.addop i64 
    callproc       &pc_libmcl.genmc 
#15900: 
#15898: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#15901: 
    retproc                   
End


Proc pc_genmcl.doincrload:
    param          pc_genmcl.doincrload.p u64 
    param          pc_genmcl.doincrload.incrop i64 
    param          pc_genmcl.doincrload.addop i64 
    local          pc_genmcl.doincrload.ax u64 
    local          pc_genmcl.doincrload.mx u64 
    procentry                 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.ismemaddr i64 
    jumpfalse      #15903     i64 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    pop            pc_genmcl.doincrload.mx u64 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_genmcl.makeregopnd u64 
    pop            pc_genmcl.doincrload.ax u64 
    jump           #15904     
#15903: 
    setargs                   2 0
    push           pc_genmcl.doincrload.p u64 
    push           4          
    pushptroff                i32 1 0
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.doincrload.mx u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.doincrload.ax u64 
#15904: 
    push           pc_genmcl.doincrload.p u64 
    push           16         
    pushptroff                i32 1 0
    push           1          i64 
    jumpne         #15905     i64 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.doincrload.mx u64 
    push           pc_genmcl.doincrload.incrop i64 
    callproc       &pc_libmcl.genmc 
    jump           #15906     
#15905: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.doincrload.p u64 
    push           16         
    pushptroff                i32 1 0
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.doincrload.mx u64 
    push           pc_genmcl.doincrload.addop i64 
    callproc       &pc_libmcl.genmc 
#15906: 
    push           &pc_tables.pcat 
    push           pc_genmcl.doincrload.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           4          i64 
    jumpne         #15907     i64 
    setargs                   3 0
    push           pc_genmcl.doincrload.mx u64 
    push           pc_genmcl.doincrload.ax u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_genmcl.doincrload.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #15908     i64 
    push           19         i64 
    resetmult                 
    jump           #15909     
#15908: 
    push           20         i64 
    endmult                   
#15909: 
    callproc       &pc_libmcl.genmc 
    jump           #15910     
#15907: 
    setargs                   3 0
    push           pc_genmcl.doincrload.mx u64 
    push           pc_genmcl.doincrload.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
#15910: 
#15911: 
    retproc                   
End


Proc pc_genmcl.doloadincr:
    param          pc_genmcl.doloadincr.p u64 
    param          pc_genmcl.doloadincr.incrop i64 
    param          pc_genmcl.doloadincr.addop i64 
    local          pc_genmcl.doloadincr.ax u64 
    local          pc_genmcl.doloadincr.mx u64 
    procentry                 
    setargs                   1 0
    push           1          i64 
    callfn         &pc_libmcl.ismemaddr i64 
    jumpfalse      #15913     i64 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    pop            pc_genmcl.doloadincr.mx u64 
    jump           #15914     
#15913: 
    setargs                   2 0
    push           pc_genmcl.doloadincr.p u64 
    push           4          
    pushptroff                i32 1 0
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.doloadincr.mx u64 
#15914: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_d64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.doloadincr.ax u64 
    push           &pc_tables.pcat 
    push           pc_genmcl.doloadincr.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           4          i64 
    jumpne         #15915     i64 
    setargs                   3 0
    push           pc_genmcl.doloadincr.mx u64 
    push           pc_genmcl.doloadincr.ax u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_genmcl.doloadincr.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #15916     i64 
    push           19         i64 
    resetmult                 
    jump           #15917     
#15916: 
    push           20         i64 
    endmult                   
#15917: 
    callproc       &pc_libmcl.genmc 
    jump           #15918     
#15915: 
    setargs                   3 0
    push           pc_genmcl.doloadincr.mx u64 
    push           pc_genmcl.doloadincr.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
#15918: 
    push           pc_genmcl.doloadincr.p u64 
    push           16         
    pushptroff                i32 1 0
    push           1          i64 
    jumpne         #15919     i64 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.doloadincr.mx u64 
    push           pc_genmcl.doloadincr.incrop i64 
    callproc       &pc_libmcl.genmc 
    jump           #15920     
#15919: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_genmcl.doloadincr.p u64 
    push           16         
    pushptroff                i32 1 0
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.doloadincr.mx u64 
    push           pc_genmcl.doloadincr.addop i64 
    callproc       &pc_libmcl.genmc 
#15920: 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.swapopnds 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#15921: 
    retproc                   
End


Proc pc_genmcl.dobin_i128:
    param          pc_genmcl.dobin_i128.p u64 
    param          pc_genmcl.dobin_i128.opc1 i64 
    param          pc_genmcl.dobin_i128.opc2 i64 
    local          pc_genmcl.dobin_i128.axl u64 
    local          pc_genmcl.dobin_i128.axh u64 
    local          pc_genmcl.dobin_i128.bxl u64 
    local          pc_genmcl.dobin_i128.bxh u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dobin_i128.axl u64 
    setargs                   2 0
    push           8          i64 
    push           4          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dobin_i128.axh u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dobin_i128.bxl u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dobin_i128.bxh u64 
    setargs                   3 0
    push           pc_genmcl.dobin_i128.bxl u64 
    push           pc_genmcl.dobin_i128.axl u64 
    push           pc_genmcl.dobin_i128.opc1 i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.dobin_i128.bxh u64 
    push           pc_genmcl.dobin_i128.axh u64 
    push           pc_genmcl.dobin_i128.opc2 i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#15923: 
    retproc                   
End


Proc pc_genmcl.dojumpcc_i128:
    param          pc_genmcl.dojumpcc_i128.p u64 
    local          pc_genmcl.dojumpcc_i128.axlow u64 
    local          pc_genmcl.dojumpcc_i128.axhigh u64 
    local          pc_genmcl.dojumpcc_i128.bxlow u64 
    local          pc_genmcl.dojumpcc_i128.bxhigh u64 
    local          pc_genmcl.dojumpcc_i128.cx u64 
    local          pc_genmcl.dojumpcc_i128.dx u64 
    local          pc_genmcl.dojumpcc_i128.lxtrue u64 
    local          pc_genmcl.dojumpcc_i128.lxfalse u64 
    procentry                 
    push           pc_genmcl.dojumpcc_i128.p u64 
    push           3          
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #15925     i64 
    push           pc_genmcl.dojumpcc_i128.p u64 
    push           1          
    pushptroff                u8 1 0
    push           52         i64 
    setjumpeq      #15925     i64 
    push           53         i64 
    setjumpeqx     #15925     i64 
    setargs                   1 0
    push           pc_genmcl.dojumpcc_i128.p u64 
    callproc       &pc_genmcl.dojumpcc_u128 
    jump           #15926     
#15925: 
    setargs                   1 0
    push           pc_genmcl.dojumpcc_i128.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    pop            pc_genmcl.dojumpcc_i128.lxtrue u64 
    setargs                   2 0
    push           8          i64 
    push           4          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dojumpcc_i128.axhigh u64 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dojumpcc_i128.axlow u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dojumpcc_i128.bxhigh u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dojumpcc_i128.bxlow u64 
    push           pc_genmcl.dojumpcc_i128.p u64 
    push           1          
    pushptroff                u8 1 0
    push           52         i64 
    casejumpeq     #15927     i64 0
    push           53         i64 
    casejumpeq     #15928     i64 0
    popstack                  i64 
    jump           #15929     
#15927: 
    setargs                   3 0
    push           pc_genmcl.dojumpcc_i128.bxlow u64 
    push           pc_genmcl.dojumpcc_i128.axlow u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_libmcl.mgenlabel u64 
    store          pc_genmcl.dojumpcc_i128.lxfalse u64 
    push           5          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.dojumpcc_i128.bxhigh u64 
    push           pc_genmcl.dojumpcc_i128.axhigh u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_i128.lxtrue u64 
    push           4          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_i128.lxfalse u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    jump           #15930     
#15928: 
    setargs                   3 0
    push           pc_genmcl.dojumpcc_i128.bxlow u64 
    push           pc_genmcl.dojumpcc_i128.axlow u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_i128.lxtrue u64 
    push           5          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.dojumpcc_i128.bxhigh u64 
    push           pc_genmcl.dojumpcc_i128.axhigh u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_i128.lxtrue u64 
    push           5          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    jump           #15930     
#15929: 
    setargs                   3 0
    push           pc_genmcl.dojumpcc_i128.bxlow u64 
    push           pc_genmcl.dojumpcc_i128.axlow u64 
    push           30         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.dojumpcc_i128.bxhigh u64 
    push           pc_genmcl.dojumpcc_i128.axhigh u64 
    push           32         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pci_mcl.zero_opnd u64 
    push           pc_genmcl.dojumpcc_i128.axhigh u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_tables.psigned 
    push           pc_genmcl.dojumpcc_i128.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #15931     i64 
    push           pc_genmcl.dojumpcc_i128.p u64 
    push           1          
    pushptroff                u8 1 0
    push           54         i64 
    casejumpeq     #15932     i64 0
    push           55         i64 
    casejumpeq     #15933     i64 0
    push           57         i64 
    casejumpeq     #15934     i64 0
    push           56         i64 
    casejumpeq     #15935     i64 0
    popstack                  i64 
    jump           #15936     
#15932: 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_i128.lxtrue u64 
    push           12         i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    jump           #15937     
#15933: 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_i128.lxtrue u64 
    push           12         i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.dojumpcc_i128.axhigh u64 
    push           pc_genmcl.dojumpcc_i128.axlow u64 
    push           40         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_i128.lxtrue u64 
    push           4          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    jump           #15937     
#15934: 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_libmcl.mgenlabel u64 
    store          pc_genmcl.dojumpcc_i128.lxfalse u64 
    push           12         i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.dojumpcc_i128.axhigh u64 
    push           pc_genmcl.dojumpcc_i128.axlow u64 
    push           40         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_i128.lxtrue u64 
    push           5          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_i128.lxfalse u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    jump           #15937     
#15935: 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_i128.lxtrue u64 
    push           13         i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    jump           #15937     
#15936: 
#15937: 
    jump           #15938     
#15931: 
    setargs                   2 0
    push           pc_genmcl.dojumpcc_i128.p u64 
    push           3          
    pushptroff                u8 1 0
    push           "jumpcc/rel" u64 
    callproc       &pc_libmcl.merrort 
#15938: 
#15930: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#15926: 
    retproc                   
End


Proc pc_genmcl.dojumpcc_u128:
    param          pc_genmcl.dojumpcc_u128.p u64 
    local          pc_genmcl.dojumpcc_u128.lxtrue u64 
    local          pc_genmcl.dojumpcc_u128.lxfalse u64 
    local          pc_genmcl.dojumpcc_u128.ax1 u64 
    local          pc_genmcl.dojumpcc_u128.bx1 u64 
    local          pc_genmcl.dojumpcc_u128.ax2 u64 
    local          pc_genmcl.dojumpcc_u128.bx2 u64 
    local          pc_genmcl.dojumpcc_u128.cond1 i64 
    local          pc_genmcl.dojumpcc_u128.cond2 i64 
    local          pc_genmcl.dojumpcc_u128.cond3 i64 
    procentry                 
    push           pc_genmcl.dojumpcc_u128.p u64 
    push           1          
    pushptroff                u8 1 0
    push           57         i64 
    casejumpeq     #15940     i64 0
    push           56         i64 
    casejumpeq     #15941     i64 0
    push           54         i64 
    casejumpeq     #15942     i64 0
    push           55         i64 
    casejumpeq     #15943     i64 0
    popstack                  i64 
    jump           #15944     
#15940: 
    push           7          i64 
    pop            pc_genmcl.dojumpcc_u128.cond1 i64 
    push           2          i64 
    pop            pc_genmcl.dojumpcc_u128.cond2 i64 
    push           7          i64 
    pop            pc_genmcl.dojumpcc_u128.cond3 i64 
    jump           #15945     
#15941: 
    push           7          i64 
    pop            pc_genmcl.dojumpcc_u128.cond1 i64 
    push           2          i64 
    pop            pc_genmcl.dojumpcc_u128.cond2 i64 
    push           3          i64 
    pop            pc_genmcl.dojumpcc_u128.cond3 i64 
    jump           #15945     
#15942: 
    push           2          i64 
    pop            pc_genmcl.dojumpcc_u128.cond1 i64 
    push           7          i64 
    pop            pc_genmcl.dojumpcc_u128.cond2 i64 
    push           2          i64 
    pop            pc_genmcl.dojumpcc_u128.cond3 i64 
    jump           #15945     
#15943: 
    push           2          i64 
    pop            pc_genmcl.dojumpcc_u128.cond1 i64 
    push           7          i64 
    pop            pc_genmcl.dojumpcc_u128.cond2 i64 
    push           6          i64 
    pop            pc_genmcl.dojumpcc_u128.cond3 i64 
    jump           #15945     
#15944: 
    setargs                   2 0
    push           ""         u64 
    push           "JCC/U128" u64 
    callproc       &pc_libmcl.merror 
#15945: 
    setargs                   1 0
    push           pc_genmcl.dojumpcc_u128.p u64 
    push           8          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    pop            pc_genmcl.dojumpcc_u128.lxtrue u64 
    setargs                   1 0
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    callfn         &pc_libmcl.mgenlabel u64 
    pop            pc_genmcl.dojumpcc_u128.lxfalse u64 
    setargs                   2 0
    push           8          i64 
    push           4          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dojumpcc_u128.ax2 u64 
    setargs                   2 0
    push           8          i64 
    push           3          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.dojumpcc_u128.ax1 u64 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dojumpcc_u128.bx2 u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.dojumpcc_u128.bx1 u64 
    setargs                   3 0
    push           pc_genmcl.dojumpcc_u128.bx2 u64 
    push           pc_genmcl.dojumpcc_u128.ax2 u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_u128.lxtrue u64 
    push           pc_genmcl.dojumpcc_u128.cond1 i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_u128.lxfalse u64 
    push           pc_genmcl.dojumpcc_u128.cond2 i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.dojumpcc_u128.bx1 u64 
    push           pc_genmcl.dojumpcc_u128.ax1 u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_u128.lxtrue u64 
    push           pc_genmcl.dojumpcc_u128.cond3 i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.dojumpcc_u128.lxfalse u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#15946: 
    retproc                   
End


Proc pc_genmcl.do_syscall:
    param          pc_genmcl.do_syscall.fnindex i64 
    param          pc_genmcl.do_syscall.nargs i64 
    param          pc_genmcl.do_syscall.retcat i64 
    local          pc_genmcl.do_syscall.nslots i64 
    local          pc_genmcl.do_syscall.av_1 i64 
    procentry                 
    push           pc_genmcl.do_syscall.nargs i64 
    pop            pci_mcl.sa_nargs i64 
    setargs                   1 0
    push           0          u64 
    callproc       &pc_genmcl.px_setargs 
    setargs                   2 0
    push           0          i64 
    push           0          u64 
    callfn         &pc_genmcl.do_pushparams i64 
    pop            pc_genmcl.do_syscall.nslots i64 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    setargs                   1 0
    push           pc_genmcl.do_syscall.fnindex i64 
    callfn         &pc_libmcl.getrtsproclabel i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           22         i64 
    callproc       &pc_libmcl.genmc 
    push           8          i64 
    push           pci_mcl.mccodex u64 
    push           8          
    pushptroff                u64 1 0
    push           8          
    popptroff                 u8 1 0
#15948: 
    push           pci_mcl.sa_nargs i64 
    pop            pc_genmcl.do_syscall.av_1 i64 
    push           pc_genmcl.do_syscall.av_1 i64 
    push           0          i64 
    jumple         #15949     i64 
#15950: 
    setargs                   0 0
    callproc       &pc_stackmcl.poparg 
#15951: 
    to             #15950     
    opnd           pc_genmcl.do_syscall.av_1 
#15949: 
    setargs                   1 0
    push           pc_genmcl.do_syscall.nslots i64 
    callproc       &pc_stackmcl.popslots 
    setargs                   1 0
    push           pc_genmcl.do_syscall.retcat i64 
    callproc       &pc_genmcl.getretvalue_bycat 
#15952: 
    retproc                   
End


Proc pc_genmcl.getretvalue_bycat:
    param          pc_genmcl.getretvalue_bycat.cat i64 
    procentry                 
    push           pc_genmcl.getretvalue_bycat.cat i64 
    push           0          i64 
    casejumpeq     #15954     i64 0
    push           1          i64 
    casejumpeq     #15955     i64 0
    push           3          i64 
    casejumpeq     #15956     i64 0
    push           2          i64 
    casejumpeq     #15957     i64 0
    push           5          i64 
    casejumpeq     #15958     i64 0
    popstack                  i64 
    jump           #15959     
#15954: 
    jump           #15960     
    jump           #15961     
#15955: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.addreg0 
    jump           #15961     
#15956: 
    setargs                   2 0
    push           2          i64 
    push           1          i64 
    callproc       &pc_stackmcl.addxreg0 
    jump           #15961     
#15957: 
    setargs                   2 0
    push           3          i64 
    push           1          i64 
    callproc       &pc_stackmcl.addxreg0 
    jump           #15961     
#15958: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.addwidereg0 
    jump           #15961     
#15959: 
    setargs                   2 0
    push           ""         u64 
    push           "getval bycat" u64 
    callproc       &pc_libmcl.merror 
#15961: 
#15960: 
    retproc                   
End


Proc pc_genmcl.px_pushlabel:
    param          pc_genmcl.px_pushlabel.p u64 
    procentry                 
    push           pc_genmcl.px_pushlabel.p u64 
    pushptr                   u8 
    push           3          i64 
    jumpeq         #15963     i64 
    setargs                   2 0
    push           ""         u64 
    push           "pushlabel" u64 
    callproc       &pc_libmcl.merror 
#15963: 
    setargs                   1 0
    push           pc_genmcl.px_pushlabel.p u64 
    push           8          
    pushptroff                i64 1 0
    callproc       &pc_stackmcl.addlabeladdr 
#15964: 
    retproc                   
End


Proc pc_genmcl.do_shiftnto:
    param          pc_genmcl.do_shiftnto.p u64 
    param          pc_genmcl.do_shiftnto.opc i64 
    local          pc_genmcl.do_shiftnto.px u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.do_shiftnto.px u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #15966     i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenint u64 
    push           pc_genmcl.do_shiftnto.px u64 
    push           pc_genmcl.do_shiftnto.opc i64 
    callproc       &pc_libmcl.genmc 
    jump           #15967     
#15966: 
    push           pci_mcl.inf_r10used i64 
    jumpfalse      #15968     i64 
    setargs                   2 0
    push           ""         u64 
    push           "shiftto:cl in use" u64 
    callproc       &pc_libmcl.merror 
#15968: 
    setargs                   2 0
    push           11         i64 
    push           1          i64 
    callproc       &pc_stackmcl.loadparam 
    setargs                   3 0
    setargs                   2 0
    push           1          i64 
    push           11         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           pc_genmcl.do_shiftnto.px u64 
    push           pc_genmcl.do_shiftnto.opc i64 
    callproc       &pc_libmcl.genmc 
#15967: 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#15969: 
    retproc                   
End


Proc pc_genmcl.domax_float:
    param          pc_genmcl.domax_float.opc i64 
    local          pc_genmcl.domax_float.ax u64 
    local          pc_genmcl.domax_float.bx u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.domax_float.ax u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.domax_float.bx u64 
    setargs                   3 0
    push           pc_genmcl.domax_float.bx u64 
    push           pc_genmcl.domax_float.ax u64 
    push           pc_genmcl.domax_float.opc i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#15971: 
    retproc                   
End


Proc pc_genmcl.domax_int:
    param          pc_genmcl.domax_int.cond i64 
    local          pc_genmcl.domax_int.ax u64 
    local          pc_genmcl.domax_int.bx u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.domax_int.ax u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.domax_int.bx u64 
    setargs                   3 0
    push           pc_genmcl.domax_int.bx u64 
    push           pc_genmcl.domax_int.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           pc_genmcl.domax_int.bx u64 
    push           pc_genmcl.domax_int.ax u64 
    push           pc_genmcl.domax_int.cond i64 
    push           16         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#15973: 
    retproc                   
End


Proc pc_genmcl.domaxto_r64:
    param          pc_genmcl.domaxto_r64.cond i64 
    local          pc_genmcl.domaxto_r64.px u64 
    local          pc_genmcl.domaxto_r64.ax u64 
    local          pc_genmcl.domaxto_r64.bx u64 
    local          pc_genmcl.domaxto_r64.lx u64 
    local          pc_genmcl.domaxto_r64.lab i64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.domaxto_r64.px u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.domaxto_r64.bx u64 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_x64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.domaxto_r64.ax u64 
    setargs                   3 0
    push           pc_genmcl.domaxto_r64.px u64 
    push           pc_genmcl.domaxto_r64.ax u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.domaxto_r64.bx u64 
    push           pc_genmcl.domaxto_r64.ax u64 
    push           73         i64 
    callproc       &pc_libmcl.genmc 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pc_genmcl.domaxto_r64.lab i64 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.domaxto_r64.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    store          pc_genmcl.domaxto_r64.lx u64 
    push           pc_genmcl.domaxto_r64.cond i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.domaxto_r64.bx u64 
    push           pc_genmcl.domaxto_r64.px u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.domaxto_r64.lx u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#15975: 
    retproc                   
End


Proc pc_genmcl.domaxto_r32:
    param          pc_genmcl.domaxto_r32.cond i64 
    local          pc_genmcl.domaxto_r32.px u64 
    local          pc_genmcl.domaxto_r32.ax u64 
    local          pc_genmcl.domaxto_r32.bx u64 
    local          pc_genmcl.domaxto_r32.lx u64 
    local          pc_genmcl.domaxto_r32.lab i64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.domaxto_r32.px u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.domaxto_r32.bx u64 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_x32 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_genmcl.domaxto_r32.ax u64 
    setargs                   3 0
    push           pc_genmcl.domaxto_r32.px u64 
    push           pc_genmcl.domaxto_r32.ax u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_genmcl.domaxto_r32.bx u64 
    push           pc_genmcl.domaxto_r32.ax u64 
    push           72         i64 
    callproc       &pc_libmcl.genmc 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pc_genmcl.domaxto_r32.lab i64 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.domaxto_r32.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    store          pc_genmcl.domaxto_r32.lx u64 
    push           pc_genmcl.domaxto_r32.cond i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.domaxto_r32.bx u64 
    push           pc_genmcl.domaxto_r32.px u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.domaxto_r32.lx u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#15977: 
    retproc                   
End


Proc pc_genmcl.domaxto_int:
    param          pc_genmcl.domaxto_int.cond i64 
    local          pc_genmcl.domaxto_int.ax u64 
    local          pc_genmcl.domaxto_int.bx u64 
    local          pc_genmcl.domaxto_int.lx u64 
    local          pc_genmcl.domaxto_int.lab i64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           2          i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    pop            pc_genmcl.domaxto_int.ax u64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd_ld u64 
    pop            pc_genmcl.domaxto_int.bx u64 
    setargs                   3 0
    push           pc_genmcl.domaxto_int.bx u64 
    push           pc_genmcl.domaxto_int.ax u64 
    push           43         i64 
    callproc       &pc_libmcl.genmc 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pc_genmcl.domaxto_int.lab i64 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.domaxto_int.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    store          pc_genmcl.domaxto_int.lx u64 
    push           pc_genmcl.domaxto_int.cond i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    setargs                   3 0
    push           pc_genmcl.domaxto_int.bx u64 
    push           pc_genmcl.domaxto_int.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           pc_genmcl.domaxto_int.lx u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
    setargs                   0 0
    callproc       &pc_stackmcl.delopnd 
#15979: 
    retproc                   
End


Proc pc_genmcl.dosetfntable:
    procentry                 
    push           pci_mcl.lab_funcnametable i64 
    push           0          i64 
    jumpne         #15981     i64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pci_mcl.lab_funcnametable i64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pci_mcl.lab_funcaddrtable i64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pci_mcl.lab_funcnprocs i64 
#15981: 
#15982: 
    retproc                   
End


Proc pc_genmcl.loadtoreg:
    param          pc_genmcl.loadtoreg.rx u64 
    param          pc_genmcl.loadtoreg.ax u64 
    param          pc_genmcl.loadtoreg.m i64 
    procentry                 
    push           &pc_tables.pcat 
    push           pc_genmcl.loadtoreg.m i64 
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #15984     i64 
    setargs                   3 0
    push           pc_genmcl.loadtoreg.ax u64 
    push           pc_genmcl.loadtoreg.rx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15985     
#15984: 
    push           &pc_tables.psigned 
    push           pc_genmcl.loadtoreg.m i64 
    pushptroff                u8 1 0
    jumpfalse      #15986     i64 
    setargs                   3 0
    push           pc_genmcl.loadtoreg.ax u64 
    push           pc_genmcl.loadtoreg.rx u64 
    push           19         i64 
    callproc       &pc_libmcl.genmc 
    jump           #15985     
#15986: 
    setargs                   3 0
    push           pc_genmcl.loadtoreg.ax u64 
    push           pc_genmcl.loadtoreg.rx u64 
    push           20         i64 
    callproc       &pc_libmcl.genmc 
#15985: 
#15987: 
    retproc                   
End


Proc pc_genmcl.storefromreg:
    param          pc_genmcl.storefromreg.ax u64 
    param          pc_genmcl.storefromreg.rx u64 
    param          pc_genmcl.storefromreg.size i64 
    procentry                 
    setargs                   3 0
    setargs                   2 0
    push           pc_genmcl.storefromreg.size i64 
    push           pc_genmcl.storefromreg.rx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           pc_genmcl.storefromreg.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
#15989: 
    retproc                   
End


Proc pc_genmcl.domaths:
    param          pc_genmcl.domaths.p u64 
    param          pc_genmcl.domaths.opname u64 
    local          pc_genmcl.domaths.nslots i64 
    procentry                 
    push           1          i64 
    push           pc_genmcl.domaths.p u64 
    push           16         
    popptroff                 i32 1 0
    setargs                   1 0
    push           pc_genmcl.domaths.p u64 
    callproc       &pc_genmcl.px_setargs 
    setargs                   2 0
    push           0          i64 
    push           pc_genmcl.domaths.p u64 
    callfn         &pc_genmcl.do_pushparams i64 
    pop            pc_genmcl.domaths.nslots i64 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_genmcl.domaths.opname u64 
    callfn         &pc_libmcl.mgenextname u64 
    push           22         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_stackmcl.poparg 
    setargs                   1 0
    push           pc_genmcl.domaths.nslots i64 
    callproc       &pc_stackmcl.popslots 
    setargs                   1 0
    push           pc_genmcl.domaths.p u64 
    callproc       &pc_genmcl.dogetretvalue 
#15991: 
    retproc                   
End


Proc pc_libmcl.mclinit:
    local          pc_libmcl.mclinit.a u64 
    local          pc_libmcl.mclinit.r i64 
    local          pc_libmcl.mclinit.s i64 
    local          pc_libmcl.mclinit.av_1 i64 
    local          pc_libmcl.mclinit.i i64 
    procentry                 
#15993: 
    push           1          i64 
    pop            pc_libmcl.mclinit.r i64 
#15994: 
    setargs                   2 0
    push           1          i64 
    push           pc_libmcl.mclinit.r i64 
    callfn         &pc_libmcl.mgenreg0 u64 
    push           &pci_mcl.regtable 
    push           pc_libmcl.mclinit.r i64 
    addrefoff                 block:128 128 -128
    push           1          i64 
    popptroff                 u64 8 -8
    setargs                   2 0
    push           2          i64 
    push           pc_libmcl.mclinit.r i64 
    callfn         &pc_libmcl.mgenreg0 u64 
    push           &pci_mcl.regtable 
    push           pc_libmcl.mclinit.r i64 
    addrefoff                 block:128 128 -128
    push           2          i64 
    popptroff                 u64 8 -8
    setargs                   2 0
    push           4          i64 
    push           pc_libmcl.mclinit.r i64 
    callfn         &pc_libmcl.mgenreg0 u64 
    push           &pci_mcl.regtable 
    push           pc_libmcl.mclinit.r i64 
    addrefoff                 block:128 128 -128
    push           4          i64 
    popptroff                 u64 8 -8
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.mclinit.r i64 
    callfn         &pc_libmcl.mgenreg0 u64 
    push           &pci_mcl.regtable 
    push           pc_libmcl.mclinit.r i64 
    addrefoff                 block:128 128 -128
    push           8          i64 
    popptroff                 u64 8 -8
    setargs                   2 0
    push           16         i64 
    push           pc_libmcl.mclinit.r i64 
    callfn         &pc_libmcl.mgenreg0 u64 
    push           &pci_mcl.regtable 
    push           pc_libmcl.mclinit.r i64 
    addrefoff                 block:128 128 -128
    push           16         i64 
    popptroff                 u64 8 -8
    push           &pci_mcl.regtable 
    push           pc_libmcl.mclinit.r i64 
    addrefoff                 block:128 128 -128
    push           8          i64 
    pushptroff                u64 8 -8
    push           &pc_libmcl.rd 
    push           pc_libmcl.mclinit.r i64 
    popptroff                 u64 8 -16
#15995: 
    forup          #15994     i64 1
    opnd           pc_libmcl.mclinit.r 
    opnd           16         
#15996: 
    setargs                   2 0
    push           8          i64 
    push           0          i64 
    callfn         &pc_libmcl.mgenint0 u64 
    pop            pci_mcl.zero_opnd u64 
#15997: 
    push           0          i64 
    pop            pc_libmcl.mclinit.i i64 
#15998: 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.mclinit.i i64 
    callfn         &pc_libmcl.mgenint0 u64 
    push           &pci_mcl.smallinttable 
    push           pc_libmcl.mclinit.i i64 
    popptroff                 u64 8 0
#15999: 
    forup          #15998     i64 1
    opnd           pc_libmcl.mclinit.i 
    opnd           32         
#16000: 
#16001: 
    push           -128       i64 
    pop            pc_libmcl.mclinit.i i64 
    push           64         i64 
    pop            pc_libmcl.mclinit.av_1 i64 
    push           pc_libmcl.mclinit.av_1 i64 
    push           -128       i64 
    jumplt         #16002     i64 
#16003: 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mclinit.a u64 
    push           3          i64 
    push           pc_libmcl.mclinit.a u64 
    push           9          
    popptroff                 u8 1 0
    push           15         i64 
    push           pc_libmcl.mclinit.a u64 
    push           10         
    popptroff                 u8 1 0
    push           8          i64 
    push           pc_libmcl.mclinit.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mclinit.i i64 
    push           pc_libmcl.mclinit.a u64 
    push           14         
    popptroff                 i32 1 0
    push           pc_libmcl.mclinit.a u64 
    push           &pci_mcl.frameregtable 
    push           pc_libmcl.mclinit.i i64 
    popptroff                 u64 8 1024
#16004: 
    forup          #16003     i64 1
    opnd           pc_libmcl.mclinit.i 
    opnd           pc_libmcl.mclinit.av_1 
#16002: 
    setargs                   2 0
    push           8          i64 
    push           15         i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pci_mcl.dframeopnd u64 
    setargs                   2 0
    push           8          i64 
    push           16         i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pci_mcl.dstackopnd u64 
    setargs                   0 0
    callproc       &pc_libmcl.initmcdest 
    setargs                   2 0
    push           1          i64 
    push           67         i64 
    callproc       &pc_libmcl.setsegment 
    setargs                   1 0
    push           8192       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pci_mcl.stringtable u64 
    setargs                   1 0
    push           4096       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pci_mcl.stringlabtable u64 
    setargs                   1 0
    push           128        i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pci_mcl.realtable u64 
    setargs                   1 0
    push           64         i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pci_mcl.reallabtable u64 
    push           0          i64 
    pop            pci_mcl.nstrings i64 
    push           0          i64 
    pop            pci_mcl.nreals i64 
    push           1024       i64 
    pop            pci_mcl.stringtablesize i64 
    push           16         i64 
    pop            pci_mcl.realtablesize i64 
    push           &pci_mcl.pclopndstack 
    push           2985       
    addrefoff                 u8 1 0
    pop            pci_mcl.pclstack u64 
    push           0          i64 
    pop            pci_mcl.lab_funcnametable i64 
    push           0          i64 
    pop            pci_mcl.lab_funcaddrtable i64 
#16005: 
    retproc                   
End


Proc pc_libmcl.initmcdest:
    procentry                 
    push           0          u64 
    store          pci_mcl.mccodex u64 
    pop            pci_mcl.mccode u64 
    push           &pci_mcl.rtsproclabels 
    clear                     block:48 
#16007: 
    retproc                   
End


Proc pc_libmcl.genmc:
    param          pc_libmcl.genmc.opcode i64 
    param          pc_libmcl.genmc.a u64 
    param          pc_libmcl.genmc.b u64 
    local          pc_libmcl.genmc.m u64 
    local          pc_libmcl.genmc.oldm u64 
    local          pc_libmcl.genmc.labno i64 
    procentry                 
    setargs                   1 0
    push           59         i64 
    callfn         &mlibp.pcm_allocz u64 
    pop            pc_libmcl.genmc.m u64 
    push           pc_libmcl.genmc.opcode i64 
    push           pc_libmcl.genmc.m u64 
    push           24         
    popptroff                 u8 1 0
    push           pc_libmcl.genmc.a u64 
    push           pc_libmcl.genmc.m u64 
    push           8          
    popptroff                 u64 1 0
    push           pc_libmcl.genmc.b u64 
    push           pc_libmcl.genmc.m u64 
    push           16         
    popptroff                 u64 1 0
    push           pc_libmcl.genmc.opcode i64 
    push           22         i64 
    casejumpeq     #16009     i64 0
    push           15         i64 
    casejumpeq     #16010     i64 0
    push           9          i64 
    casejumpeq     #16011     i64 0
    popstack                  i64 
    jump           #16012     
#16009: 
    push           &pci_mcl.inf_proccalls 
    incr                      i64 1
    jump           #16013     
#16010: 
    push           pc_libmcl.genmc.b u64 
    jumpfalse      #16014     u64 
    push           pc_libmcl.genmc.b u64 
    push           12         
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #16014     i64 
    push           1          u64 
    push           pc_libmcl.genmc.b u64 
    pushptr                   u64 
    push           46         
    addrefoff                 u64 1 0
    push           2          i64 
    popdotindex               u16 
#16014: 
    jump           #16013     
#16011: 
    push           pc_libmcl.genmc.a u64 
    pushptr                   i64 
    pop            pc_libmcl.genmc.labno i64 
    push           pc_libmcl.genmc.labno i64 
    push           80000      i64 
    jumple         #16015     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "LABNO="   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libmcl.genmc.labno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           80000      i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           ""         u64 
    push           "Too many labels" u64 
    callproc       &pc_libmcl.merror 
#16015: 
    push           pc_libmcl.genmc.m u64 
    push           &pci_mcl.labeltable 
    push           pc_libmcl.genmc.labno i64 
    popptroff                 u64 8 -8
    jump           #16013     
#16012: 
#16013: 
    push           pci_mcl.mccode u64 
    jumpfalse      #16016     u64 
    push           pc_libmcl.genmc.m u64 
    push           pci_mcl.mccodex u64 
    push           0          
    popptroff                 u64 1 0
    push           pc_libmcl.genmc.m u64 
    pop            pci_mcl.mccodex u64 
    jump           #16017     
#16016: 
    push           pc_libmcl.genmc.m u64 
    store          pci_mcl.mccodex u64 
    pop            pci_mcl.mccode u64 
#16017: 
#16018: 
    retproc                   
End


Proc pc_libmcl.genmc_cond:
    param          pc_libmcl.genmc_cond.opcode i64 
    param          pc_libmcl.genmc_cond.cond i64 
    param          pc_libmcl.genmc_cond.a u64 
    param          pc_libmcl.genmc_cond.b u64 
    procentry                 
    setargs                   3 0
    push           pc_libmcl.genmc_cond.b u64 
    push           pc_libmcl.genmc_cond.a u64 
    push           pc_libmcl.genmc_cond.opcode i64 
    callproc       &pc_libmcl.genmc 
    push           pc_libmcl.genmc_cond.cond i64 
    push           pci_mcl.mccodex u64 
    push           25         
    popptroff                 u8 1 0
#16020: 
    retproc                   
End


Proc pc_libmcl.genmc_str:
    param          pc_libmcl.genmc_str.opcode i64 
    param          pc_libmcl.genmc_str.s u64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           -1         i64 
    push           pc_libmcl.genmc_str.s u64 
    callfn         &pc_libmcl.mgenstring u64 
    push           pc_libmcl.genmc_str.opcode i64 
    callproc       &pc_libmcl.genmc 
#16022: 
    retproc                   
End


Proc pc_libmcl.newmclopnd: u64
    local          pc_libmcl.newmclopnd.a u64 
    procentry                 
    setargs                   1 0
    push           19         i64 
    callfn         &mlibp.pcm_allocz u64 
    pop            pc_libmcl.newmclopnd.a u64 
    push           pc_libmcl.newmclopnd.a u64 
    setret                    u64 
    jump           #16024     
#16024: 
    retfn                     u64 
End


Proc pc_libmcl.duplopnd: u64
    param          pc_libmcl.duplopnd.a u64 
    local          pc_libmcl.duplopnd.b u64 
    procentry                 
    setargs                   1 0
    push           19         i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pc_libmcl.duplopnd.b u64 
    push           pc_libmcl.duplopnd.a u64 
    pushptr                   block:19 
    push           pc_libmcl.duplopnd.b u64 
    popptr                    block:19 
    push           pc_libmcl.duplopnd.b u64 
    setret                    u64 
    jump           #16026     
#16026: 
    retfn                     u64 
End


Proc pc_libmcl.mgenxreg: u64
    param          pc_libmcl.mgenxreg.xreg i64 
    param          pc_libmcl.mgenxreg.size i64 
    local          pc_libmcl.mgenxreg.a u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenxreg.a u64 
    push           5          i64 
    push           pc_libmcl.mgenxreg.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenxreg.xreg i64 
    push           pc_libmcl.mgenxreg.a u64 
    push           10         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenxreg.size i64 
    push           pc_libmcl.mgenxreg.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenxreg.a u64 
    setret                    u64 
    jump           #16028     
#16028: 
    retfn                     u64 
End


Proc pc_libmcl.mgenindex: u64
    param          pc_libmcl.mgenindex.areg i64 
    param          pc_libmcl.mgenindex.ireg i64 
    param          pc_libmcl.mgenindex.scale i64 
    param          pc_libmcl.mgenindex.offset i64 
    param          pc_libmcl.mgenindex.size i64 
    param          pc_libmcl.mgenindex.labno i64 
    param          pc_libmcl.mgenindex.def u64 
    local          pc_libmcl.mgenindex.a u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenindex.a u64 
    push           3          i64 
    push           pc_libmcl.mgenindex.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenindex.areg i64 
    push           pc_libmcl.mgenindex.a u64 
    push           10         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenindex.ireg i64 
    push           pc_libmcl.mgenindex.a u64 
    push           11         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenindex.scale i64 
    push           pc_libmcl.mgenindex.a u64 
    push           13         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenindex.size i64 
    push           pc_libmcl.mgenindex.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenindex.offset i64 
    push           pc_libmcl.mgenindex.a u64 
    push           14         
    popptroff                 i32 1 0
    push           pc_libmcl.mgenindex.labno i64 
    jumpfalse      #16030     i64 
    push           pc_libmcl.mgenindex.labno i64 
    push           pc_libmcl.mgenindex.a u64 
    push           0          
    popptroff                 i64 1 0
    push           7          i64 
    push           pc_libmcl.mgenindex.a u64 
    push           12         
    popptroff                 u8 1 0
    jump           #16031     
#16030: 
    push           pc_libmcl.mgenindex.def u64 
    jumpfalse      #16032     u64 
    push           pc_libmcl.mgenindex.def u64 
    push           pc_libmcl.mgenindex.a u64 
    push           0          
    popptroff                 u64 1 0
    push           pc_libmcl.mgenindex.def u64 
    push           49         
    addrefoff                 u64 1 0
    incr                      i16 1
    push           5          i64 
    push           pc_libmcl.mgenindex.a u64 
    push           12         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenindex.def u64 
    push           27         
    pushptroff                u8 1 0
    push           17         i64 
    setjumpeq      #16033     i64 
    push           18         i64 
    setjumpne      #16034     i64 
#16033: 
    push           15         i64 
    push           pc_libmcl.mgenindex.a u64 
    push           10         
    popptroff                 u8 1 0
#16034: 
#16032: 
#16031: 
    push           pc_libmcl.mgenindex.a u64 
    setret                    u64 
    jump           #16035     
#16035: 
    retfn                     u64 
End


Proc pc_libmcl.getmclstr: u64
    local          pc_libmcl.getmclstr.d u64 
    local          pc_libmcl.getmclstr.e u64 
    local          pc_libmcl.getmclstr.m u64 
    local          pc_libmcl.getmclstr.str2 block:32 
    local          pc_libmcl.getmclstr.str3 block:32 
    local          pc_libmcl.getmclstr.i i64 
    procentry                 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_init 
    push           pci_mcl.mccode u64 
    pop            pc_libmcl.getmclstr.m u64 
    push           1          i64 
    pop            pc_libmcl.getmclstr.i i64 
    jump           #16037     
#16038: 
    setargs                   2 0
    push           pc_libmcl.getmclstr.m u64 
    push           pc_libmcl.getmclstr.i i64 
    callproc       &pc_libmcl.writemcl 
    push           &pc_libmcl.getmclstr.i 
    incr                      i64 1
    push           pc_libmcl.getmclstr.m u64 
    pushptr                   u64 
    pop            pc_libmcl.getmclstr.m u64 
#16037: 
    push           pc_libmcl.getmclstr.m u64 
    jumptrue       #16038     u64 
#16039: 
    push           pci_mcl.dest u64 
    setret                    u64 
    jump           #16040     
#16040: 
    retfn                     u64 
End


Proc pc_libmcl.mgencomment:
    param          pc_libmcl.mgencomment.s u64 
    procentry                 
    push           pc_libmcl.mgencomment.s u64 
    push           0          u64 
    jumpeq         #16042     u64 
    push           pc_libmcl.mgencomment.s u64 
    pushptr                   u8 
    push           0          i64 
    jumpne         #16043     i64 
#16042: 
    setargs                   3 0
    push           0          u64 
    push           0          u64 
    push           4          i64 
    callproc       &pc_libmcl.genmc 
    jump           #16044     
#16043: 
    setargs                   2 0
    push           pc_libmcl.mgencomment.s u64 
    push           3          i64 
    callproc       &pc_libmcl.genmc_str 
#16044: 
#16045: 
    retproc                   
End


Proc pc_libmcl.mgenstring: u64
    param          pc_libmcl.mgenstring.s u64 
    param          pc_libmcl.mgenstring.length i64 
    local          pc_libmcl.mgenstring.a u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenstring.a u64 
    push           2          i64 
    push           pc_libmcl.mgenstring.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenstring.length i64 
    push           0          i64 
    jumpge         #16047     i64 
    setargs                   1 0
    push           pc_libmcl.mgenstring.s u64 
    callfn         &strlen    i64 
    pop            pc_libmcl.mgenstring.length i64 
#16047: 
    setargs                   1 0
    push           pc_libmcl.mgenstring.length i64 
    push           1          i64 
    add                       i64 
    callfn         &mlibp.pcm_alloc u64 
    push           pc_libmcl.mgenstring.a u64 
    push           0          
    popptroff                 u64 1 0
    setargs                   3 0
    push           pc_libmcl.mgenstring.length u64 
    push           pc_libmcl.mgenstring.s u64 
    push           pc_libmcl.mgenstring.a u64 
    pushptr                   u64 
    callproc       &memcpy    
    push           0          u64 
    push           pc_libmcl.mgenstring.a u64 
    pushptr                   u64 
    push           pc_libmcl.mgenstring.length i64 
    popptroff                 u8 1 0
    push           4          i64 
    push           pc_libmcl.mgenstring.a u64 
    push           12         
    popptroff                 u8 1 0
    push           8          i64 
    push           pc_libmcl.mgenstring.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenstring.a u64 
    setret                    u64 
    jump           #16048     
#16048: 
    retfn                     u64 
End


Proc pc_libmcl.mgenname: u64
    param          pc_libmcl.mgenname.s u64 
    local          pc_libmcl.mgenname.str block:64 
    local          pc_libmcl.mgenname.a u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenname.a u64 
    push           2          i64 
    push           pc_libmcl.mgenname.a u64 
    push           9          
    popptroff                 u8 1 0
    setargs                   1 0
    push           pc_libmcl.mgenname.s u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           pc_libmcl.mgenname.a u64 
    push           0          
    popptroff                 u64 1 0
    push           8          i64 
    push           pc_libmcl.mgenname.a u64 
    push           12         
    popptroff                 u8 1 0
    push           8          i64 
    push           pc_libmcl.mgenname.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenname.a u64 
    setret                    u64 
    jump           #16050     
#16050: 
    retfn                     u64 
End


Proc pc_libmcl.writemcl:
    param          pc_libmcl.writemcl.index i64 
    param          pc_libmcl.writemcl.mcl u64 
    procentry                 
    push           pc_libmcl.writemcl.mcl u64 
    push           24         
    pushptroff                u8 1 0
    push           5          i64 
    casejumpeq     #16052     i64 0
    popstack                  i64 
    jump           #16053     
#16052: 
    jump           #16054     
#16053: 
    setargs                   1 0
    push           pc_libmcl.writemcl.mcl u64 
    callproc       &pc_libmcl.strmcl 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_line 
#16054: 
#16055: 
    retproc                   
End


Proc pc_libmcl.strmcl:
    param          pc_libmcl.strmcl.mcl u64 
    local          pc_libmcl.strmcl.opcname block:128 
    local          pc_libmcl.strmcl.a u64 
    local          pc_libmcl.strmcl.b u64 
    local          pc_libmcl.strmcl.opcode i64 
    local          pc_libmcl.strmcl.cond i64 
    local          pc_libmcl.strmcl.sizepref i64 
    local          pc_libmcl.strmcl.s u64 
    local          pc_libmcl.strmcl.comment u64 
    local          pc_libmcl.strmcl.d u64 
    procentry                 
    push           pc_libmcl.strmcl.mcl u64 
    push           24         
    pushptroff                u8 1 0
    pop            pc_libmcl.strmcl.opcode i64 
    push           pc_libmcl.strmcl.mcl u64 
    push           25         
    pushptroff                u8 1 0
    pop            pc_libmcl.strmcl.cond i64 
    push           pc_libmcl.strmcl.mcl u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_libmcl.strmcl.a u64 
    push           pc_libmcl.strmcl.mcl u64 
    push           16         
    pushptroff                u64 1 0
    pop            pc_libmcl.strmcl.b u64 
    push           0          u64 
    pop            pc_libmcl.strmcl.comment u64 
    push           pc_libmcl.strmcl.opcode i64 
    push           1          i64 
    casejumpeq     #16057     i64 0
    push           2          i64 
    casejumpeq     #16058     i64 0
    push           4          i64 
    casejumpeq     #16059     i64 0
    push           3          i64 
    casejumpeq     #16060     i64 0
    push           5          i64 
    casejumpeq     #16061     i64 0
    push           6          i64 
    casejumpeq     #16062     i64 0
    push           9          i64 
    casejumpeq     #16063     i64 0
    push           7          i64 
    casejumpeq     #16064     i64 0
    push           8          i64 
    casejumpeq     #16065     i64 0
    popstack                  i64 
    jump           #16066     
#16057: 
    setargs                   1 0
    push           ";Proc "   u64 
    callproc       &pc_libmcl.asmstr 
    setargs                   1 0
    push           pc_libmcl.strmcl.a u64 
    pushptr                   u64 
    pushptr                   u64 
    callproc       &pc_libmcl.asmstr 
    push           pc_libmcl.strmcl.a u64 
    pushptr                   u64 
    pop            pci_mcl.currasmproc u64 
    jump           #16067     
    jump           #16068     
#16058: 
    setargs                   1 0
    push           ";End "    u64 
    callproc       &pc_libmcl.asmstr 
    push           0          u64 
    pop            pci_mcl.currasmproc u64 
    jump           #16067     
    jump           #16068     
#16059: 
    jump           #16067     
    jump           #16068     
#16060: 
    setargs                   1 0
    push           59         i64 
    callproc       &pc_libmcl.asmchar 
    setargs                   1 0
    push           pc_libmcl.strmcl.a u64 
    pushptr                   u64 
    callproc       &pc_libmcl.asmstr 
    jump           #16069     
    jump           #16067     
    jump           #16068     
#16061: 
    setargs                   1 0
    push           "; <deleted>" u64 
    callproc       &pc_libmcl.asmstr 
    jump           #16069     
    jump           #16067     
    jump           #16068     
#16062: 
    push           pc_libmcl.strmcl.a u64 
    pushptr                   u64 
    pop            pc_libmcl.strmcl.d u64 
    push           pc_libmcl.strmcl.a u64 
    push           12         
    pushptroff                u8 1 0
    push           5          i64 
    casejumpeq     #16070     i64 0
    push           4          i64 
    casejumpeq     #16071     i64 0
    popstack                  i64 
    jump           #16072     
#16070: 
    setargs                   1 0
    setargs                   1 0
    push           pc_libmcl.strmcl.d u64 
    callfn         &pc_libmcl.getfullname u64 
    callproc       &pc_libmcl.asmstr 
    jump           #16073     
#16071: 
    setargs                   1 0
    push           pc_libmcl.strmcl.a u64 
    pushptr                   u64 
    callproc       &pc_libmcl.asmstr 
    jump           #16067     
    jump           #16073     
#16072: 
    setargs                   2 0
    push           ""         u64 
    push           "strmcl/lab" u64 
    callproc       &pc_libmcl.merror 
#16073: 
    setargs                   1 0
    push           ":"        u64 
    callproc       &pc_libmcl.asmstr 
    push           pc_libmcl.strmcl.d u64 
    push           46         
    pushptroff                u16 1 0
    push           3          i64 
    dotindex                  i64 
    jumpfalse      #16074     u64 
    setargs                   1 0
    push           "\n"       u64 
    callproc       &pc_libmcl.asmstr 
    setargs                   1 0
    setargs                   1 0
    push           pc_libmcl.strmcl.d u64 
    pushptr                   u64 
    callfn         &pc_libpcl.getbasename u64 
    callproc       &pc_libmcl.asmstr 
    setargs                   1 0
    push           "::"       u64 
    callproc       &pc_libmcl.asmstr 
#16074: 
    jump           #16067     
    jump           #16068     
#16063: 
    setargs                   1 0
    push           &pc_libmcl.strmcl.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "L#:"      u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           pc_libmcl.strmcl.a u64 
    pushptr                   i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           &pc_libmcl.strmcl.str 
    callproc       &pc_libmcl.asmstr 
    jump           #16067     
    jump           #16068     
#16064: 
    setargs                   1 0
    push           "          " u64 
    callproc       &pc_libmcl.asmstr 
    setargs                   1 0
    push           pc_libmcl.strmcl.a u64 
    pushptr                   u64 
    callproc       &pc_libmcl.asmstr 
    setargs                   1 0
    push           " = "      u64 
    callproc       &pc_libmcl.asmstr 
    setargs                   3 0
    push           0          i64 
    push           0          i64 
    push           pc_libmcl.strmcl.b u64 
    callproc       &pc_libmcl.asmopnd 
    jump           #16067     
    jump           #16068     
#16065: 
    setargs                   1 0
    push           "          " u64 
    callproc       &pc_libmcl.asmstr 
    setargs                   1 0
    push           pc_libmcl.strmcl.a u64 
    pushptr                   u64 
    callproc       &pc_libmcl.asmstr 
    setargs                   1 0
    push           " = "      u64 
    callproc       &pc_libmcl.asmstr 
    push           pc_libmcl.strmcl.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #16075     i64 0
    popstack                  i64 
    jump           #16076     
#16075: 
    setargs                   1 0
    setargs                   2 0
    push           pc_libmcl.strmcl.b u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_libmcl.strmcl.b u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.getregname u64 
    callproc       &pc_libmcl.asmstr 
    jump           #16077     
#16076: 
    setargs                   1 0
    setargs                   2 0
    push           pc_libmcl.strmcl.b u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_libmcl.strmcl.b u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.fgetregname u64 
    callproc       &pc_libmcl.asmstr 
#16077: 
    jump           #16067     
    jump           #16068     
#16066: 
#16068: 
    push           pc_libmcl.strmcl.opcode i64 
    push           27         i64 
    casejumpeq     #16078     i64 0
    push           59         i64 
    casejumpeq     #16079     i64 0
    push           16         i64 
    casejumpeq     #16080     i64 0
    push           22         i64 
    casejumpeq     #16081     i64 0
    push           39         i64 
    casejumpeq     #16082     i64 0
    push           40         i64 
    casejumpeq     #16083     i64 0
    push           41         i64 
    casejumpeq     #16084     i64 0
    push           52         i64 
    casejumpeq     #16085     i64 0
    popstack                  i64 
    jump           #16086     
#16078: 
    setargs                   1 0
    push           &pc_libmcl.strmcl.opcname 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "j"        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           &pci_mcl.asmcondnames 
    push           pc_libmcl.strmcl.cond i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #16087     
#16079: 
    setargs                   1 0
    push           &pc_libmcl.strmcl.opcname 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "set"      u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           &pci_mcl.asmcondnames 
    push           pc_libmcl.strmcl.cond i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #16087     
#16080: 
    setargs                   1 0
    push           &pc_libmcl.strmcl.opcname 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "cmov"     u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           &pci_mcl.asmcondnames 
    push           pc_libmcl.strmcl.cond i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #16087     
#16081: 
    setargs                   2 0
    push           "call"     u64 
    push           &pc_libmcl.strmcl.opcname 
    callproc       &strcpy    
    jump           #16087     
#16082: 
    setargs                   2 0
    push           "and"      u64 
    push           &pc_libmcl.strmcl.opcname 
    callproc       &strcpy    
    jump           #16087     
#16083: 
    setargs                   2 0
    push           "or"       u64 
    push           &pc_libmcl.strmcl.opcname 
    callproc       &strcpy    
    jump           #16087     
#16084: 
    setargs                   2 0
    push           "xor"      u64 
    push           &pc_libmcl.strmcl.opcname 
    callproc       &strcpy    
    jump           #16087     
#16085: 
    setargs                   2 0
    push           "not"      u64 
    push           &pc_libmcl.strmcl.opcname 
    callproc       &strcpy    
    jump           #16087     
#16086: 
    push           pc_libmcl.strmcl.opcode i64 
    push           148        i64 
    jumple         #16088     i64 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_libmcl.strmcl.opcode i64 
    callfn         &msysp.strint u64 
    push           &pc_libmcl.strmcl.opcname 
    callproc       &strcpy    
    jump           #16089     
#16088: 
    setargs                   2 0
    push           &pci_mcl.mclnames 
    push           pc_libmcl.strmcl.opcode i64 
    pushptroff                u64 8 -8
    push           2          i64 
    addrefoff                 u64 1 0
    push           &pc_libmcl.strmcl.opcname 
    callproc       &strcpy    
#16089: 
#16087: 
    setargs                   3 0
    push           " "        u64 
    push           10         i64 
    push           &pc_libmcl.strmcl.opcname 
    callproc       &mlibp.ipadstr 
    setargs                   2 0
    push           "  "       u64 
    push           &pc_libmcl.strmcl.str 
    callproc       &strcpy    
    setargs                   3 0
    push           " "        u64 
    push           10         i64 
    push           &pc_libmcl.strmcl.str 
    callproc       &mlibp.ipadstr 
    setargs                   2 0
    push           &pc_libmcl.strmcl.opcname 
    push           &pc_libmcl.strmcl.str 
    callproc       &strcat    
    setargs                   1 0
    push           &pc_libmcl.strmcl.str 
    callproc       &pc_libmcl.asmstr 
    push           pc_libmcl.strmcl.a u64 
    jumpfalse      #16090     u64 
    push           pc_libmcl.strmcl.b u64 
    jumpfalse      #16090     u64 
    setargs                   3 0
    push           pc_libmcl.strmcl.b u64 
    push           pc_libmcl.strmcl.a u64 
    push           pc_libmcl.strmcl.opcode i64 
    callfn         &pc_libmcl.needsizeprefix i64 
    pop            pc_libmcl.strmcl.sizepref i64 
    setargs                   3 0
    push           0          i64 
    push           pc_libmcl.strmcl.sizepref i64 
    push           pc_libmcl.strmcl.a u64 
    callproc       &pc_libmcl.asmopnd 
    setargs                   1 0
    push           ",\t"      u64 
    callproc       &pc_libmcl.asmstr 
    setargs                   3 0
    push           0          i64 
    push           pc_libmcl.strmcl.sizepref i64 
    push           pc_libmcl.strmcl.b u64 
    callproc       &pc_libmcl.asmopnd 
    jump           #16091     
#16090: 
    push           pc_libmcl.strmcl.a u64 
    jumpfalse      #16092     u64 
    push           pc_libmcl.strmcl.a u64 
    push           9          
    pushptroff                u8 1 0
    jumpfalse      #16092     i64 
    push           pc_libmcl.strmcl.opcode i64 
    push           22         i64 
    jumpne         #16093     i64 
    setargs                   3 0
    push           0          i64 
    push           0          i64 
    push           pc_libmcl.strmcl.a u64 
    callproc       &pc_libmcl.asmopnd 
    jump           #16094     
#16093: 
    setargs                   3 0
    push           0          i64 
    push           1          i64 
    push           pc_libmcl.strmcl.a u64 
    callproc       &pc_libmcl.asmopnd 
#16094: 
#16092: 
#16091: 
!docomments::
#16069: 
#16067: 
    retproc                   
End


Proc pc_libmcl.asmopnd:
    param          pc_libmcl.asmopnd.a u64 
    param          pc_libmcl.asmopnd.sizeprefix i64 
    param          pc_libmcl.asmopnd.debug i64 
    procentry                 
    setargs                   1 0
    setargs                   3 0
    push           pc_libmcl.asmopnd.debug i64 
    push           pc_libmcl.asmopnd.sizeprefix i64 
    push           pc_libmcl.asmopnd.a u64 
    callfn         &pc_libmcl.stropnd u64 
    callproc       &pc_libmcl.asmstr 
#16096: 
    retproc                   
End


Proc pc_libmcl.setsegment:
    param          pc_libmcl.setsegment.seg i64 
    param          pc_libmcl.setsegment.align i64 
    local          pc_libmcl.setsegment.opc i64 
    local          pc_libmcl.setsegment.oldalign i64 
    procentry                 
    push           pc_libmcl.setsegment.seg i64 
    push           pci_mcl.currsegment i64 
    jumpeq         #16098     i64 
    push           pc_libmcl.setsegment.seg i64 
    push           73         i64 
    casejumpeq     #16099     i64 0
    push           90         i64 
    casejumpeq     #16100     i64 0
    push           67         i64 
    casejumpeq     #16101     i64 0
    push           82         i64 
    casejumpeq     #16102     i64 0
    popstack                  i64 
    jump           #16103     
#16099: 
    push           120        i64 
    pop            pc_libmcl.setsegment.opc i64 
    jump           #16104     
#16100: 
    push           121        i64 
    pop            pc_libmcl.setsegment.opc i64 
    jump           #16104     
#16101: 
    push           122        i64 
    pop            pc_libmcl.setsegment.opc i64 
    jump           #16104     
#16102: 
    setargs                   2 0
    push           ""         u64 
    push           "CAN'T DO RODATA SEG" u64 
    callproc       &pc_libmcl.merror 
    jump           #16104     
#16103: 
    setargs                   2 0
    push           ""         u64 
    push           "BAD SEG CODE" u64 
    callproc       &pc_libmcl.merror 
#16104: 
    push           pci_mcl.mccodex u64 
    jumpfalse      #16105     u64 
    push           pci_mcl.mccodex u64 
    push           24         
    pushptroff                u8 1 0
    push           120        i64 
    setjumpeq      #16106     i64 
    push           121        i64 
    setjumpeq      #16106     i64 
    push           122        i64 
    setjumpne      #16105     i64 
#16106: 
    push           pc_libmcl.setsegment.opc i64 
    push           pci_mcl.mccodex u64 
    push           24         
    popptroff                 u8 1 0
    jump           #16107     
#16105: 
    setargs                   3 0
    push           0          u64 
    push           0          u64 
    push           pc_libmcl.setsegment.opc i64 
    callproc       &pc_libmcl.genmc 
#16107: 
    push           pc_libmcl.setsegment.seg i64 
    pop            pci_mcl.currsegment i64 
#16098: 
    push           pc_libmcl.setsegment.align i64 
    push           1          i64 
    jumple         #16108     i64 
    push           pci_mcl.mccodex u64 
    push           24         
    pushptroff                u8 1 0
    push           123        i64 
    jumpne         #16109     i64 
    push           pci_mcl.mccodex u64 
    push           8          
    pushptroff                u64 1 0
    pushptr                   i64 
    pop            pc_libmcl.setsegment.oldalign i64 
    push           pc_libmcl.setsegment.oldalign i64 
    push           pc_libmcl.setsegment.align i64 
    jumplt         #16110     i64 
    jump           #16111     
#16110: 
#16109: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.setsegment.align i64 
    callfn         &pc_libmcl.mgenint u64 
    push           123        i64 
    callproc       &pc_libmcl.genmc 
#16108: 
#16111: 
    retproc                   
End


Proc pc_libmcl.getsizeprefix: u64
    param          pc_libmcl.getsizeprefix.size i64 
    param          pc_libmcl.getsizeprefix.enable i64 
    procentry                 
    push           pc_libmcl.getsizeprefix.enable i64 
    jumptrue       #16113     i64 
    push           ""         u64 
    setret                    u64 
    jump           #16114     
#16113: 
    push           pc_libmcl.getsizeprefix.size i64 
    push           1          i64 
    casejumpeq     #16115     i64 0
    push           2          i64 
    casejumpeq     #16116     i64 0
    push           4          i64 
    casejumpeq     #16117     i64 0
    push           8          i64 
    casejumpeq     #16118     i64 0
    push           16         i64 
    casejumpeq     #16119     i64 0
    popstack                  i64 
    jump           #16120     
#16115: 
    push           "byte "    u64 
    setret                    u64 
    jump           #16114     
    jump           #16121     
#16116: 
    push           "word16 "  u64 
    setret                    u64 
    jump           #16114     
    jump           #16121     
#16117: 
    push           "word32 "  u64 
    setret                    u64 
    jump           #16114     
    jump           #16121     
#16118: 
    push           "word64 "  u64 
    setret                    u64 
    jump           #16114     
    jump           #16121     
#16119: 
    push           "word128 " u64 
    setret                    u64 
    jump           #16114     
    jump           #16121     
#16120: 
#16121: 
    push           ""         u64 
    setret                    u64 
    jump           #16114     
#16114: 
    retfn                     u64 
End


Proc pc_libmcl.needsizeprefix: i64
    param          pc_libmcl.needsizeprefix.opcode i64 
    param          pc_libmcl.needsizeprefix.a u64 
    param          pc_libmcl.needsizeprefix.b u64 
    procentry                 
    push           pc_libmcl.needsizeprefix.opcode i64 
    push           19         i64 
    casejumpeq     #16123     i64 0
    push           20         i64 
    casejumpeq     #16123     i64 0
    push           84         i64 
    casejumpeq     #16123     i64 0
    push           85         i64 
    casejumpeq     #16123     i64 0
    push           80         i64 
    casejumpeq     #16124     i64 0
    push           81         i64 
    casejumpeq     #16124     i64 0
    push           82         i64 
    casejumpeq     #16124     i64 0
    push           83         i64 
    casejumpeq     #16124     i64 0
    push           44         i64 
    casejumpeq     #16125     i64 0
    push           46         i64 
    casejumpeq     #16125     i64 0
    push           45         i64 
    casejumpeq     #16125     i64 0
    popstack                  i64 
    jump           #16126     
#16123: 
    push           1          i64 
    setret                    i64 
    jump           #16127     
    jump           #16128     
#16124: 
    push           1          i64 
    setret                    i64 
    jump           #16127     
    jump           #16128     
#16125: 
    push           pc_libmcl.needsizeprefix.a u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #16129     i64 
    push           1          i64 
    setret                    i64 
    jump           #16127     
#16129: 
    push           0          i64 
    setret                    i64 
    jump           #16127     
    jump           #16128     
#16126: 
#16128: 
    push           pc_libmcl.needsizeprefix.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #16130     i64 
    push           pc_libmcl.needsizeprefix.a u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpeq         #16130     i64 
    push           pc_libmcl.needsizeprefix.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #16130     i64 
    push           pc_libmcl.needsizeprefix.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #16131     i64 
#16130: 
    push           0          i64 
    setret                    i64 
    jump           #16127     
#16131: 
    push           1          i64 
    setret                    i64 
    jump           #16127     
#16127: 
    retfn                     i64 
End


Proc pc_libmcl.changeopndsize: u64
    param          pc_libmcl.changeopndsize.a u64 
    param          pc_libmcl.changeopndsize.size i64 
    local          pc_libmcl.changeopndsize.b u64 
    procentry                 
    push           pc_libmcl.changeopndsize.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_libmcl.changeopndsize.size i64 
    jumpeq         #16133     i64 
    push           pc_libmcl.changeopndsize.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #16134     i64 
    push           &pci_mcl.regtable 
    push           pc_libmcl.changeopndsize.a u64 
    push           10         
    pushptroff                u8 1 0
    addrefoff                 block:128 128 -128
    push           pc_libmcl.changeopndsize.size i64 
    pushptroff                u64 8 -8
    pop            pc_libmcl.changeopndsize.b u64 
    jump           #16135     
#16134: 
    setargs                   1 0
    push           pc_libmcl.changeopndsize.a u64 
    callfn         &pc_libmcl.duplopnd u64 
    pop            pc_libmcl.changeopndsize.b u64 
    push           pc_libmcl.changeopndsize.size i64 
    push           pc_libmcl.changeopndsize.b u64 
    push           8          
    popptroff                 u8 1 0
#16135: 
    push           pc_libmcl.changeopndsize.b u64 
    setret                    u64 
    jump           #16136     
#16133: 
    push           pc_libmcl.changeopndsize.a u64 
    setret                    u64 
    jump           #16136     
#16136: 
    retfn                     u64 
End


Proc pc_libmcl.makeopndind: u64
    param          pc_libmcl.makeopndind.a u64 
    param          pc_libmcl.makeopndind.size i64 
    local          pc_libmcl.makeopndind.b u64 
    procentry                 
    push           pc_libmcl.makeopndind.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #16138     i64 
    setargs                   2 0
    push           ""         u64 
    push           "makeopndind" u64 
    callproc       &pc_libmcl.merror 
#16138: 
    setargs                   3 0
    push           0          i64 
    push           pc_libmcl.makeopndind.size i64 
    push           pc_libmcl.makeopndind.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenireg u64 
    setret                    u64 
    jump           #16139     
#16139: 
    retfn                     u64 
End


Proc pc_libmcl.applyoffset: u64
    param          pc_libmcl.applyoffset.a u64 
    param          pc_libmcl.applyoffset.offset i64 
    param          pc_libmcl.applyoffset.size i64 
    local          pc_libmcl.applyoffset.b u64 
    procentry                 
    push           pc_libmcl.applyoffset.offset i64 
    push           0          i64 
    jumpne         #16141     i64 
    push           pc_libmcl.applyoffset.size i64 
    push           0          i64 
    jumpne         #16141     i64 
    push           pc_libmcl.applyoffset.a u64 
    setret                    u64 
    jump           #16142     
#16141: 
    setargs                   1 0
    push           pc_libmcl.applyoffset.a u64 
    callfn         &pc_libmcl.duplopnd u64 
    pop            pc_libmcl.applyoffset.b u64 
    push           pc_libmcl.applyoffset.b u64 
    push           14         
    addrefoff                 u64 1 0
    push           pc_libmcl.applyoffset.offset i64 
    addto                     i32 
    push           pc_libmcl.applyoffset.size i64 
    jumpfalse      #16143     i64 
    push           pc_libmcl.applyoffset.size i64 
    push           pc_libmcl.applyoffset.b u64 
    push           8          
    popptroff                 u8 1 0
#16143: 
    push           pc_libmcl.applyoffset.b u64 
    setret                    u64 
    jump           #16142     
#16142: 
    retfn                     u64 
End


Proc pc_libmcl.mgenint: u64
    param          pc_libmcl.mgenint.x i64 
    param          pc_libmcl.mgenint.size i64 
    procentry                 
    push           pc_libmcl.mgenint.x i64 
    push           0          i64 
    push           32         i64 
    jumpnotinrange #16145     i64 
    push           pc_libmcl.mgenint.size i64 
    push           8          i64 
    jumpne         #16145     i64 
    push           &pci_mcl.smallinttable 
    push           pc_libmcl.mgenint.x i64 
    pushptroff                u64 8 0
    setret                    u64 
    jump           #16146     
#16145: 
    setargs                   2 0
    push           pc_libmcl.mgenint.size i64 
    push           pc_libmcl.mgenint.x i64 
    callfn         &pc_libmcl.mgenint0 u64 
    setret                    u64 
    jump           #16146     
#16146: 
    retfn                     u64 
End


Proc pc_libmcl.mgenint0: u64
    param          pc_libmcl.mgenint0.x i64 
    param          pc_libmcl.mgenint0.size i64 
    local          pc_libmcl.mgenint0.a u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenint0.a u64 
    push           2          i64 
    push           pc_libmcl.mgenint0.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenint0.x i64 
    push           pc_libmcl.mgenint0.a u64 
    push           0          
    popptroff                 i64 1 0
    push           1          i64 
    push           pc_libmcl.mgenint0.a u64 
    push           12         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenint0.size i64 
    push           pc_libmcl.mgenint0.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenint0.a u64 
    setret                    u64 
    jump           #16148     
#16148: 
    retfn                     u64 
End


Proc pc_libmcl.mgenrealmem: u64
    param          pc_libmcl.mgenrealmem.x r64 
    param          pc_libmcl.mgenrealmem.size i64 
    local          pc_libmcl.mgenrealmem.a u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenrealmem.a u64 
    push           3          i64 
    push           pc_libmcl.mgenrealmem.a u64 
    push           9          
    popptroff                 u8 1 0
    setargs                   2 0
    push           pc_libmcl.mgenrealmem.size i64 
    push           pc_libmcl.mgenrealmem.x r64 
    callfn         &pc_libmcl.getrealindex i64 
    push           pc_libmcl.mgenrealmem.a u64 
    push           0          
    popptroff                 i64 1 0
    push           7          i64 
    push           pc_libmcl.mgenrealmem.a u64 
    push           12         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenrealmem.size i64 
    push           pc_libmcl.mgenrealmem.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenrealmem.a u64 
    setret                    u64 
    jump           #16150     
#16150: 
    retfn                     u64 
End


Proc pc_libmcl.mgenrealimm: u64
    param          pc_libmcl.mgenrealimm.x r64 
    param          pc_libmcl.mgenrealimm.size i64 
    local          pc_libmcl.mgenrealimm.a u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenrealimm.a u64 
    push           2          i64 
    push           pc_libmcl.mgenrealimm.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenrealimm.x r64 
    push           pc_libmcl.mgenrealimm.a u64 
    push           0          
    popptroff                 r64 1 0
    push           2          i64 
    push           pc_libmcl.mgenrealimm.a u64 
    push           12         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenrealimm.size i64 
    push           pc_libmcl.mgenrealimm.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenrealimm.a u64 
    setret                    u64 
    jump           #16152     
#16152: 
    retfn                     u64 
End


Proc pc_libmcl.mgenlabel: u64
    param          pc_libmcl.mgenlabel.x i64 
    local          pc_libmcl.mgenlabel.a u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenlabel.a u64 
    push           2          i64 
    push           pc_libmcl.mgenlabel.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenlabel.x i64 
    push           0          i64 
    jumpne         #16154     i64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pc_libmcl.mgenlabel.x i64 
#16154: 
    push           pc_libmcl.mgenlabel.x i64 
    push           pc_libmcl.mgenlabel.a u64 
    push           0          
    popptroff                 i64 1 0
    push           7          i64 
    push           pc_libmcl.mgenlabel.a u64 
    push           12         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenlabel.a u64 
    setret                    u64 
    jump           #16155     
#16155: 
    retfn                     u64 
End


Proc pc_libmcl.mgenlabelmem: u64
    param          pc_libmcl.mgenlabelmem.x i64 
    local          pc_libmcl.mgenlabelmem.a u64 
    procentry                 
    setargs                   1 0
    push           pc_libmcl.mgenlabelmem.x i64 
    callfn         &pc_libmcl.mgenlabel u64 
    pop            pc_libmcl.mgenlabelmem.a u64 
    push           3          i64 
    push           pc_libmcl.mgenlabelmem.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenlabelmem.a u64 
    setret                    u64 
    jump           #16157     
#16157: 
    retfn                     u64 
End


Proc pc_libmcl.mgenregvar: u64
    param          pc_libmcl.mgenregvar.d u64 
    local          pc_libmcl.mgenregvar.a u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.mgenregvar.d u64 
    push           48         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_libmcl.mgenregvar.a u64 
    push           1          i64 
    push           &pci_mcl.isregvar 
    push           pc_libmcl.mgenregvar.d u64 
    push           48         
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    push           pc_libmcl.mgenregvar.a u64 
    setret                    u64 
    jump           #16159     
#16159: 
    retfn                     u64 
End


Proc pc_libmcl.mgenxregvar: u64
    param          pc_libmcl.mgenxregvar.d u64 
    local          pc_libmcl.mgenxregvar.a u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.mgenxregvar.d u64 
    push           48         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenxreg u64 
    pop            pc_libmcl.mgenxregvar.a u64 
    push           1          i64 
    push           &pci_mcl.isxregvar 
    push           pc_libmcl.mgenxregvar.d u64 
    push           48         
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    push           pc_libmcl.mgenxregvar.a u64 
    setret                    u64 
    jump           #16161     
#16161: 
    retfn                     u64 
End


Proc pc_libmcl.mgenmem: u64
    param          pc_libmcl.mgenmem.d u64 
    local          pc_libmcl.mgenmem.a u64 
    local          pc_libmcl.mgenmem.p u64 
    local          pc_libmcl.mgenmem.reg i64 
    procentry                 
    push           pc_libmcl.mgenmem.d u64 
    push           16         
    pushptroff                u64 1 0
    pop            pc_libmcl.mgenmem.p u64 
    push           pc_libmcl.mgenmem.d u64 
    push           48         
    pushptroff                u8 1 0
    jumpfalse      #16163     i64 
    push           &pc_tables.pfloat 
    push           pc_libmcl.mgenmem.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #16164     i64 
    setargs                   1 0
    push           pc_libmcl.mgenmem.d u64 
    callfn         &pc_libmcl.mgenxregvar u64 
    setret                    u64 
    jump           #16165     
    jump           #16166     
#16164: 
    setargs                   1 0
    push           pc_libmcl.mgenmem.d u64 
    callfn         &pc_libmcl.mgenregvar u64 
    setret                    u64 
    jump           #16165     
#16166: 
#16163: 
    push           0          i64 
    pop            pc_libmcl.mgenmem.reg i64 
    push           pc_libmcl.mgenmem.d u64 
    push           27         
    pushptroff                u8 1 0
    push           17         i64 
    setjumpeq      #16167     i64 
    push           18         i64 
    setjumpne      #16168     i64 
#16167: 
    push           pci_mcl.foptimise u8 
    jumptrue       #16169     i64 
    push           pc_libmcl.mgenmem.d u64 
    push           32         
    pushptroff                i32 1 0
    push           -128       i64 
    push           64         i64 
    jumpnotinrange #16169     i64 
    push           pc_libmcl.mgenmem.p u64 
    push           4          
    pushptroff                i32 1 0
    push           8          i64 
    jumpne         #16169     i64 
    push           &pci_mcl.frameregtable 
    push           pc_libmcl.mgenmem.d u64 
    push           32         
    pushptroff                i32 1 0
    pushptroff                u64 8 1024
    setret                    u64 
    jump           #16165     
#16169: 
    push           15         i64 
    pop            pc_libmcl.mgenmem.reg i64 
#16168: 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenmem.a u64 
    push           3          i64 
    push           pc_libmcl.mgenmem.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenmem.reg i64 
    push           pc_libmcl.mgenmem.a u64 
    push           10         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenmem.d u64 
    push           pc_libmcl.mgenmem.a u64 
    push           0          
    popptroff                 u64 1 0
    push           pc_libmcl.mgenmem.d u64 
    push           49         
    addrefoff                 u64 1 0
    incr                      i16 1
    push           5          i64 
    push           pc_libmcl.mgenmem.a u64 
    push           12         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenmem.p u64 
    push           4          
    pushptroff                i32 1 0
    push           8          i64 
    min                       i64 
    push           pc_libmcl.mgenmem.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenmem.a u64 
    setret                    u64 
    jump           #16165     
#16165: 
    retfn                     u64 
End


Proc pc_libmcl.mgenmemhigh: u64
    param          pc_libmcl.mgenmemhigh.d u64 
    local          pc_libmcl.mgenmemhigh.a u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenmemhigh.a u64 
    push           3          i64 
    push           pc_libmcl.mgenmemhigh.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenmemhigh.d u64 
    push           27         
    pushptroff                u8 1 0
    push           17         i64 
    setjumpeq      #16171     i64 
    push           18         i64 
    setjumpne      #16172     i64 
#16171: 
    push           15         i64 
    push           pc_libmcl.mgenmemhigh.a u64 
    push           10         
    popptroff                 u8 1 0
#16172: 
    push           pc_libmcl.mgenmemhigh.d u64 
    push           49         
    addrefoff                 u64 1 0
    incr                      i16 1
    push           pc_libmcl.mgenmemhigh.d u64 
    push           pc_libmcl.mgenmemhigh.a u64 
    push           0          
    popptroff                 u64 1 0
    push           5          i64 
    push           pc_libmcl.mgenmemhigh.a u64 
    push           12         
    popptroff                 u8 1 0
    push           8          i64 
    push           pc_libmcl.mgenmemhigh.a u64 
    push           14         
    popptroff                 i32 1 0
    push           8          i64 
    push           pc_libmcl.mgenmemhigh.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenmemhigh.a u64 
    setret                    u64 
    jump           #16173     
#16173: 
    retfn                     u64 
End


Proc pc_libmcl.mgenmemaddr: u64
    param          pc_libmcl.mgenmemaddr.d u64 
    local          pc_libmcl.mgenmemaddr.a u64 
    procentry                 
    push           1          u64 
    push           pc_libmcl.mgenmemaddr.d u64 
    push           46         
    addrefoff                 u64 1 0
    push           2          i64 
    popdotindex               u16 
    push           pc_libmcl.mgenmemaddr.d u64 
    push           49         
    addrefoff                 u64 1 0
    incr                      i16 1
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenmemaddr.a u64 
    push           2          i64 
    push           pc_libmcl.mgenmemaddr.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenmemaddr.d u64 
    push           pc_libmcl.mgenmemaddr.a u64 
    push           0          
    popptroff                 u64 1 0
    push           pc_libmcl.mgenmemaddr.d u64 
    push           49         
    addrefoff                 u64 1 0
    incr                      i16 1
    push           5          i64 
    push           pc_libmcl.mgenmemaddr.a u64 
    push           12         
    popptroff                 u8 1 0
    push           8          i64 
    push           pc_libmcl.mgenmemaddr.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenmemaddr.a u64 
    setret                    u64 
    jump           #16175     
#16175: 
    retfn                     u64 
End


Proc pc_libmcl.mgenreg: u64
    param          pc_libmcl.mgenreg.reg i64 
    param          pc_libmcl.mgenreg.size i64 
    procentry                 
    push           &pci_mcl.regtable 
    push           pc_libmcl.mgenreg.reg i64 
    addrefoff                 block:128 128 -128
    push           pc_libmcl.mgenreg.size i64 
    pushptroff                u64 8 -8
    setret                    u64 
    jump           #16177     
    setargs                   2 0
    push           pc_libmcl.mgenreg.size i64 
    push           pc_libmcl.mgenreg.reg i64 
    callfn         &pc_libmcl.mgenreg0 u64 
    setret                    u64 
    jump           #16177     
#16177: 
    retfn                     u64 
End


Proc pc_libmcl.mgenreg0: u64
    param          pc_libmcl.mgenreg0.reg i64 
    param          pc_libmcl.mgenreg0.size i64 
    local          pc_libmcl.mgenreg0.a u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenreg0.a u64 
    push           1          i64 
    push           pc_libmcl.mgenreg0.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenreg0.reg i64 
    push           pc_libmcl.mgenreg0.a u64 
    push           10         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenreg0.size i64 
    push           pc_libmcl.mgenreg0.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenreg0.a u64 
    setret                    u64 
    jump           #16179     
#16179: 
    retfn                     u64 
End


Proc pc_libmcl.mgenireg: u64
    param          pc_libmcl.mgenireg.reg i64 
    param          pc_libmcl.mgenireg.size i64 
    param          pc_libmcl.mgenireg.offset i64 
    local          pc_libmcl.mgenireg.a u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.newmclopnd u64 
    pop            pc_libmcl.mgenireg.a u64 
    push           3          i64 
    push           pc_libmcl.mgenireg.a u64 
    push           9          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenireg.reg i64 
    push           pc_libmcl.mgenireg.a u64 
    push           10         
    popptroff                 u8 1 0
    push           pc_libmcl.mgenireg.size i64 
    push           pc_libmcl.mgenireg.a u64 
    push           8          
    popptroff                 u8 1 0
    push           pc_libmcl.mgenireg.offset i64 
    push           pc_libmcl.mgenireg.a u64 
    push           14         
    popptroff                 i32 1 0
    push           pc_libmcl.mgenireg.a u64 
    setret                    u64 
    jump           #16181     
#16181: 
    retfn                     u64 
End


Proc pc_libmcl.roundsizetg: i64
    param          pc_libmcl.roundsizetg.size i64 
    procentry                 
    jump           #16183     
#16184: 
    push           &pc_libmcl.roundsizetg.size 
    incr                      i64 1
#16183: 
    push           pc_libmcl.roundsizetg.size i64 
    push           7          i64 
    iand                      i64 
    jumptrue       #16184     i64 
#16185: 
    push           pc_libmcl.roundsizetg.size i64 
    setret                    i64 
    jump           #16186     
#16186: 
    retfn                     i64 
End


Proc pc_libmcl.getregname: u64
    param          pc_libmcl.getregname.reg i64 
    param          pc_libmcl.getregname.size i64 
    local          pc_libmcl.getregname.str2 block:16 
    local          pc_libmcl.getregname.rs u64 
    local          pc_libmcl.getregname.size2 i64 
    procentry                 
    push           pc_libmcl.getregname.size i64 
    pop            pc_libmcl.getregname.size2 i64 
    push           pc_libmcl.getregname.size2 i64 
    push           16         i64 
    jumple         #16188     i64 
    push           17         i64 
    pop            pc_libmcl.getregname.size2 i64 
#16188: 
    push           pc_libmcl.getregname.reg i64 
    push           0          i64 
    casejumpeq     #16189     i64 0
    push           15         i64 
    casejumpeq     #16190     i64 0
    push           16         i64 
    casejumpeq     #16191     i64 0
    popstack                  i64 
    jump           #16192     
#16189: 
    push           "-"        u64 
    setret                    u64 
    jump           #16193     
    jump           #16194     
#16190: 
    push           "frame"    u64 
    pop            pc_libmcl.getregname.rs u64 
    jump           #16194     
#16191: 
    push           "stack"    u64 
    pop            pc_libmcl.getregname.rs u64 
    jump           #16194     
#16192: 
    setargs                   2 0
    push           &pc_libmcl.getregname.str2 
    push           pc_libmcl.getregname.reg i64 
    push           1          i64 
    sub                       i64 
    callproc       &msysp.getstrint 
    push           &pc_libmcl.getregname.str2 
    pop            pc_libmcl.getregname.rs u64 
#16194: 
    setargs                   1 0
    push           &pc_libmcl.getregname.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           &pc_libmcl.getregname.prefix 
    push           pc_libmcl.getregname.size2 i64 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           pc_libmcl.getregname.rs u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           &pc_libmcl.getregname.str 
    setret                    u64 
    jump           #16193     
#16193: 
    retfn                     u64 
End


Proc pc_libmcl.fgetregname: u64
    param          pc_libmcl.fgetregname.reg i64 
    param          pc_libmcl.fgetregname.size i64 
    procentry                 
    push           pc_libmcl.fgetregname.reg i64 
    push           0          i64 
    jumpne         #16196     i64 
    push           "-"        u64 
    setret                    u64 
    jump           #16197     
#16196: 
    setargs                   1 0
    push           &pc_libmcl.fgetregname.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "XMM"      u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           pc_libmcl.fgetregname.reg i64 
    push           1          i64 
    sub                       i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           &pc_libmcl.fgetregname.str 
    setret                    u64 
    jump           #16197     
#16197: 
    retfn                     u64 
End


Proc pc_libmcl.sameoperand: i64
    param          pc_libmcl.sameoperand.a u64 
    param          pc_libmcl.sameoperand.b u64 
    procentry                 
    setargs                   3 0
    push           19         u64 
    push           pc_libmcl.sameoperand.b u64 
    push           pc_libmcl.sameoperand.a u64 
    callfn         &memcmp    i32 
    push           0          i64 
    seteq                     i64 
    setret                    i64 
    jump           #16199     
#16199: 
    retfn                     i64 
End


Proc pc_libmcl.sameregopnd: i64
    param          pc_libmcl.sameregopnd.a u64 
    param          pc_libmcl.sameregopnd.b u64 
    procentry                 
    push           pc_libmcl.sameregopnd.a u64 
    push           9          
    pushptroff                u8 1 0
    push           pc_libmcl.sameregopnd.b u64 
    push           9          
    pushptroff                u8 1 0
    jumpne         #16201     i64 
    push           pc_libmcl.sameregopnd.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #16202     i64 
#16201: 
    push           0          i64 
    setret                    i64 
    jump           #16203     
#16202: 
    push           pc_libmcl.sameregopnd.a u64 
    push           10         
    pushptroff                u8 1 0
    push           pc_libmcl.sameregopnd.b u64 
    push           10         
    pushptroff                u8 1 0
    seteq                     i64 
    setret                    i64 
    jump           #16203     
#16203: 
    retfn                     i64 
End


Proc pc_libmcl.getstringindex: i64
    param          pc_libmcl.getstringindex.s u64 
    procentry                 
    push           pc_libmcl.getstringindex.s u64 
    push           0          u64 
    jumpne         #16205     u64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pci_mcl.kk0used i64 
    push           pci_mcl.kk0used i64 
    setret                    i64 
    jump           #16206     
#16205: 
    push           pci_mcl.nstrings i64 
    push           pci_mcl.stringtablesize i64 
    jumplt         #16207     i64 
    setargs                   0 0
    callproc       &pc_libmcl.extendstringtable 
#16207: 
    push           pci_mcl.nstrings i64 
    jumpfalse      #16208     i64 
    setargs                   2 0
    push           pc_libmcl.getstringindex.s u64 
    push           pci_mcl.stringtable u64 
    push           pci_mcl.nstrings i64 
    pushptroff                u64 8 -8
    callfn         &mlibp.eqstring i64 
    jumpfalse      #16208     i64 
    push           pci_mcl.stringlabtable u64 
    push           pci_mcl.nstrings i64 
    pushptroff                i32 4 -4
    setret                    i64 
    jump           #16206     
#16208: 
    push           pc_libmcl.getstringindex.s u64 
    push           pci_mcl.stringtable u64 
    push           &pci_mcl.nstrings 
    incrload                  i64 1
    popptroff                 u64 8 -8
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    push           pci_mcl.stringlabtable u64 
    push           pci_mcl.nstrings i64 
    popptroff                 i32 4 -4
    push           pci_mcl.mlabelno i64 
    setret                    i64 
    jump           #16206     
#16206: 
    retfn                     i64 
End


Proc pc_libmcl.getrealindex: i64
    param          pc_libmcl.getrealindex.x r64 
    param          pc_libmcl.getrealindex.size i64 
    procentry                 
    push           pci_mcl.nreals i64 
    push           pci_mcl.realtablesize i64 
    jumplt         #16210     i64 
    setargs                   0 0
    callproc       &pc_libmcl.extendrealtable 
#16210: 
    push           pc_libmcl.getrealindex.x r64 
    push           pci_mcl.realtable u64 
    push           &pci_mcl.nreals 
    incrload                  i64 1
    popptroff                 r64 8 -8
    push           &pci_mcl.mlabelno 
    incr                      i64 1
    startmult                 
    push           pc_libmcl.getrealindex.size i64 
    push           8          i64 
    jumpne         #16211     i64 
    push           pci_mcl.mlabelno i64 
    resetmult                 
    jump           #16212     
#16211: 
    push           pci_mcl.mlabelno i64 
    neg                       i64 
    endmult                   
#16212: 
    push           pci_mcl.reallabtable u64 
    push           pci_mcl.nreals i64 
    popptroff                 i32 4 -4
    push           pci_mcl.mlabelno i64 
    setret                    i64 
    jump           #16213     
#16213: 
    retfn                     i64 
End


Proc pc_libmcl.extendstringtable:
    local          pc_libmcl.extendstringtable.oldstringtable u64 
    local          pc_libmcl.extendstringtable.oldstringlabtable u64 
    local          pc_libmcl.extendstringtable.oldstringtablesize i64 
    local          pc_libmcl.extendstringtable.i i64 
    procentry                 
    push           pci_mcl.stringtablesize i64 
    pop            pc_libmcl.extendstringtable.oldstringtablesize i64 
    push           pci_mcl.stringtable u64 
    pop            pc_libmcl.extendstringtable.oldstringtable u64 
    push           pci_mcl.stringlabtable u64 
    pop            pc_libmcl.extendstringtable.oldstringlabtable u64 
    push           &pci_mcl.stringtablesize 
    push           2          i64 
    multo                     i64 
    setargs                   1 0
    push           8          i64 
    push           pci_mcl.stringtablesize i64 
    mul                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pci_mcl.stringtable u64 
    setargs                   1 0
    push           4          i64 
    push           pci_mcl.stringtablesize i64 
    mul                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pci_mcl.stringlabtable u64 
#16215: 
    push           1          i64 
    pop            pc_libmcl.extendstringtable.i i64 
    push           pci_mcl.nstrings i64 
    push           1          i64 
    jumplt         #16216     i64 
#16217: 
    push           pc_libmcl.extendstringtable.oldstringtable u64 
    push           pc_libmcl.extendstringtable.i i64 
    pushptroff                u64 8 -8
    push           pci_mcl.stringtable u64 
    push           pc_libmcl.extendstringtable.i i64 
    popptroff                 u64 8 -8
    push           pc_libmcl.extendstringtable.oldstringlabtable u64 
    push           pc_libmcl.extendstringtable.i i64 
    pushptroff                i32 4 -4
    push           pci_mcl.stringlabtable u64 
    push           pc_libmcl.extendstringtable.i i64 
    popptroff                 i32 4 -4
#16218: 
    forup          #16217     i64 1
    opnd           pc_libmcl.extendstringtable.i 
    opnd           pci_mcl.nstrings 
#16216: 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.extendstringtable.oldstringtablesize i64 
    mul                       i64 
    push           pc_libmcl.extendstringtable.oldstringtable u64 
    callproc       &mlibp.pcm_free 
    setargs                   2 0
    push           4          i64 
    push           pc_libmcl.extendstringtable.oldstringtablesize i64 
    mul                       i64 
    push           pc_libmcl.extendstringtable.oldstringlabtable u64 
    callproc       &mlibp.pcm_free 
#16219: 
    retproc                   
End


Proc pc_libmcl.extendrealtable:
    local          pc_libmcl.extendrealtable.oldrealtable u64 
    local          pc_libmcl.extendrealtable.oldreallabtable u64 
    local          pc_libmcl.extendrealtable.oldrealtablesize i64 
    local          pc_libmcl.extendrealtable.i i64 
    procentry                 
    push           pci_mcl.realtablesize i64 
    pop            pc_libmcl.extendrealtable.oldrealtablesize i64 
    push           pci_mcl.realtable u64 
    pop            pc_libmcl.extendrealtable.oldrealtable u64 
    push           pci_mcl.reallabtable u64 
    pop            pc_libmcl.extendrealtable.oldreallabtable u64 
    push           &pci_mcl.realtablesize 
    push           2          i64 
    multo                     i64 
    setargs                   1 0
    push           8          i64 
    push           pci_mcl.realtablesize i64 
    mul                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pci_mcl.realtable u64 
    setargs                   1 0
    push           4          i64 
    push           pci_mcl.realtablesize i64 
    mul                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pci_mcl.reallabtable u64 
#16221: 
    push           1          i64 
    pop            pc_libmcl.extendrealtable.i i64 
    push           pci_mcl.nreals i64 
    push           1          i64 
    jumplt         #16222     i64 
#16223: 
    push           pc_libmcl.extendrealtable.oldrealtable u64 
    push           pc_libmcl.extendrealtable.i i64 
    pushptroff                r64 8 -8
    push           pci_mcl.realtable u64 
    push           pc_libmcl.extendrealtable.i i64 
    popptroff                 r64 8 -8
    push           pc_libmcl.extendrealtable.oldreallabtable u64 
    push           pc_libmcl.extendrealtable.i i64 
    pushptroff                i32 4 -4
    push           pci_mcl.reallabtable u64 
    push           pc_libmcl.extendrealtable.i i64 
    popptroff                 i32 4 -4
#16224: 
    forup          #16223     i64 1
    opnd           pc_libmcl.extendrealtable.i 
    opnd           pci_mcl.nreals 
#16222: 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.extendrealtable.oldrealtablesize i64 
    mul                       i64 
    push           pc_libmcl.extendrealtable.oldrealtable u64 
    callproc       &mlibp.pcm_free 
    setargs                   2 0
    push           4          i64 
    push           pc_libmcl.extendrealtable.oldrealtablesize i64 
    mul                       i64 
    push           pc_libmcl.extendrealtable.oldreallabtable u64 
    callproc       &mlibp.pcm_free 
#16225: 
    retproc                   
End


Proc pc_libmcl.asmstr:
    param          pc_libmcl.asmstr.s u64 
    procentry                 
    setargs                   2 0
    push           pc_libmcl.asmstr.s u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
#16227: 
    retproc                   
End


Proc pc_libmcl.asmchar:
    param          pc_libmcl.asmchar.c i64 
    procentry                 
    setargs                   2 0
    push           pc_libmcl.asmchar.c i64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_char 
#16229: 
    retproc                   
End


Proc pc_libmcl.getfullname: u64
    param          pc_libmcl.getfullname.d u64 
    local          pc_libmcl.getfullname.name u64 
    procentry                 
    push           pc_libmcl.getfullname.d u64 
    pushptr                   u64 
    pop            pc_libmcl.getfullname.name u64 
    push           pc_libmcl.getfullname.d u64 
    push           48         
    pushptroff                u8 1 0
    jumpfalse      #16231     i64 
    setargs                   1 0
    push           &pc_libmcl.getfullname.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "#.#"      u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    startmult                 
    push           pc_libmcl.getfullname.d u64 
    push           46         
    pushptroff                u16 1 0
    push           4          i64 
    dotindex                  i64 
    jumpfalse      #16232     u64 
    push           "X"        u64 
    resetmult                 
    jump           #16233     
#16232: 
    push           "R"        u64 
    endmult                   
#16233: 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libmcl.getfullname.name u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           &pc_libmcl.getfullname.str 
    setret                    u64 
    jump           #16234     
#16231: 
    startmult                 
    push           pc_libmcl.getfullname.d u64 
    push           46         
    pushptroff                u16 1 0
    push           8          i64 
    dotindex                  i64 
    jumpfalse      #16235     u64 
    push           pc_libmcl.getfullname.d u64 
    push           46         
    pushptroff                u16 1 0
    push           1          i64 
    dotindex                  i64 
    jumpfalse      #16235     u64 
    setargs                   2 0
    push           "`"        u64 
    push           &pc_libmcl.getfullname.str 
    callproc       &strcpy    
    setargs                   2 0
    push           pc_libmcl.getfullname.name u64 
    push           &pc_libmcl.getfullname.str 
    callproc       &strcat    
    setargs                   2 0
    push           "*"        u64 
    push           &pc_libmcl.getfullname.str 
    callfn         &strcat    u64 
    resetmult                 
    jump           #16236     
#16235: 
    push           pc_libmcl.getfullname.d u64 
    push           46         
    pushptroff                u16 1 0
    push           1          i64 
    dotindex                  i64 
    jumpfalse      #16237     u64 
    setargs                   2 0
    push           pc_libmcl.getfullname.name u64 
    push           &pc_libmcl.getfullname.str 
    callproc       &strcpy    
    setargs                   2 0
    push           "*"        u64 
    push           &pc_libmcl.getfullname.str 
    callfn         &strcat    u64 
    resetmult                 
    jump           #16236     
#16237: 
    push           pc_libmcl.getfullname.name u64 
    endmult                   
#16236: 
    setret                    u64 
    jump           #16234     
#16234: 
    retfn                     u64 
End


Proc pc_libmcl.getfulltempname: u64
    param          pc_libmcl.getfulltempname.tempno i64 
    procentry                 
    push           "TEMP"     u64 
    setret                    u64 
    jump           #16239     
#16239: 
    retfn                     u64 
End


Proc pc_libmcl.merror:
    param          pc_libmcl.merror.mess u64 
    param          pc_libmcl.merror.param u64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "MCL Error: # (#) [#]" u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           pc_libmcl.merror.mess u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libmcl.merror.param u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.mseqno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#16241: 
    retproc                   
End


Proc pc_libmcl.merrort:
    param          pc_libmcl.merrort.mess u64 
    param          pc_libmcl.merrort.t i64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "MCL Type not supported: # (#) [#]" u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           pc_libmcl.merrort.mess u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pc_tables.pstdnames 
    push           pc_libmcl.merrort.t i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.mseqno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#16243: 
    retproc                   
End


Proc pc_libmcl.merroropnd:
    param          pc_libmcl.merroropnd.mess u64 
    param          pc_libmcl.merroropnd.opndtype i64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "MCL Opnd not supported: # (#) [#]" u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           pc_libmcl.merroropnd.mess u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pc_tables.opndnames 
    push           pc_libmcl.merroropnd.opndtype i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.mseqno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#16245: 
    retproc                   
End


Proc pc_libmcl.genstringtable:
    local          pc_libmcl.genstringtable.i i64 
    local          pc_libmcl.genstringtable.col i64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           73         i64 
    callproc       &pc_libmcl.setsegment 
    push           pci_mcl.kk0used i64 
    jumpfalse      #16247     i64 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.kk0used i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_libmcl.gendb 
#16247: 
    push           pci_mcl.nstrings i64 
    jumptrue       #16248     i64 
    jump           #16249     
#16248: 
#16250: 
    push           1          i64 
    pop            pc_libmcl.genstringtable.i i64 
    push           pci_mcl.nstrings i64 
    push           1          i64 
    jumplt         #16251     i64 
#16252: 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.stringlabtable u64 
    push           pc_libmcl.genstringtable.i i64 
    pushptroff                i32 4 -4
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   2 0
    push           1          i64 
    push           pci_mcl.stringtable u64 
    push           pc_libmcl.genstringtable.i i64 
    pushptroff                u64 8 -8
    callproc       &pc_libmcl.genstring 
#16253: 
    forup          #16252     i64 1
    opnd           pc_libmcl.genstringtable.i 
    opnd           pci_mcl.nstrings 
#16251: 
#16249: 
    retproc                   
End


Proc pc_libmcl.genstring:
    param          pc_libmcl.genstring.s u64 
    param          pc_libmcl.genstring.doterm i64 
    local          pc_libmcl.genstring.i i64 
    local          pc_libmcl.genstring.c i64 
    local          pc_libmcl.genstring.seqlen i64 
    local          pc_libmcl.genstring.length i64 
    local          pc_libmcl.genstring.seq u64 
    local          pc_libmcl.genstring.av_1 i64 
    procentry                 
    setargs                   1 0
    push           pc_libmcl.genstring.s u64 
    callfn         &strlen    i64 
    pop            pc_libmcl.genstring.length i64 
    push           pc_libmcl.genstring.length i64 
    push           0          i64 
    jumpne         #16255     i64 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_libmcl.gendb 
    jump           #16256     
#16255: 
    push           0          i64 
    pop            pc_libmcl.genstring.seqlen i64 
#16257: 
    push           pc_libmcl.genstring.length i64 
    pop            pc_libmcl.genstring.av_1 i64 
    push           pc_libmcl.genstring.av_1 i64 
    push           0          i64 
    jumple         #16258     i64 
#16259: 
    push           &pc_libmcl.genstring.s 
    loadincr                  u64 1
    pushptr                   u8 
    pop            pc_libmcl.genstring.c i64 
    push           pc_libmcl.genstring.c i64 
    push           32         i64 
    jumplt         #16260     i64 
    push           pc_libmcl.genstring.c i64 
    push           127        i64 
    jumpge         #16260     i64 
    push           pc_libmcl.genstring.c i64 
    push           34         i64 
    jumpne         #16261     i64 
#16260: 
    push           pc_libmcl.genstring.seqlen i64 
    jumpfalse      #16262     i64 
    setargs                   2 0
    push           pc_libmcl.genstring.seqlen i64 
    push           pc_libmcl.genstring.seq u64 
    callproc       &pc_libmcl.gendbstring 
    push           0          i64 
    pop            pc_libmcl.genstring.seqlen i64 
#16262: 
    setargs                   1 0
    push           pc_libmcl.genstring.c i64 
    callproc       &pc_libmcl.gendb 
    jump           #16263     
#16261: 
    push           pc_libmcl.genstring.seqlen i64 
    push           0          i64 
    jumpne         #16264     i64 
    push           1          i64 
    pop            pc_libmcl.genstring.seqlen i64 
    push           pc_libmcl.genstring.s u64 
    push           1          i64 
    subrefoff                 u64 1 0
    pop            pc_libmcl.genstring.seq u64 
    jump           #16265     
#16264: 
    push           &pc_libmcl.genstring.seqlen 
    incr                      i64 1
#16265: 
#16263: 
#16266: 
    to             #16259     
    opnd           pc_libmcl.genstring.av_1 
#16258: 
    push           pc_libmcl.genstring.seqlen i64 
    jumpfalse      #16267     i64 
    setargs                   2 0
    push           pc_libmcl.genstring.seqlen i64 
    push           pc_libmcl.genstring.seq u64 
    callproc       &pc_libmcl.gendbstring 
#16267: 
    push           pc_libmcl.genstring.doterm i64 
    jumpfalse      #16268     i64 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_libmcl.gendb 
#16268: 
#16256: 
    retproc                   
End


Proc pc_libmcl.gendb:
    param          pc_libmcl.gendb.a i64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.gendb.a i64 
    callfn         &pc_libmcl.mgenint u64 
    push           114        i64 
    callproc       &pc_libmcl.genmc 
#16270: 
    retproc                   
End


Proc pc_libmcl.gendbstring:
    param          pc_libmcl.gendbstring.s u64 
    param          pc_libmcl.gendbstring.length i64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           pc_libmcl.gendbstring.length i64 
    push           pc_libmcl.gendbstring.s u64 
    callfn         &pc_libmcl.mgenstring u64 
    push           114        i64 
    callproc       &pc_libmcl.genmc 
#16272: 
    retproc                   
End


Proc pc_libmcl.gendq:
    param          pc_libmcl.gendq.a i64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.gendq.a i64 
    callfn         &pc_libmcl.mgenint u64 
    push           117        i64 
    callproc       &pc_libmcl.genmc 
#16274: 
    retproc                   
End


Proc pc_libmcl.gendqname:
    param          pc_libmcl.gendqname.d u64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.gendqname.d u64 
    callfn         &pc_libmcl.mgenmemaddr u64 
    push           117        i64 
    callproc       &pc_libmcl.genmc 
#16276: 
    retproc                   
End


Proc pc_libmcl.gendqlabel:
    param          pc_libmcl.gendqlabel.lab i64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.gendqlabel.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           117        i64 
    callproc       &pc_libmcl.genmc 
#16278: 
    retproc                   
End


Proc pc_libmcl.genrealtable:
    local          pc_libmcl.genrealtable.x r64 
    local          pc_libmcl.genrealtable.i i64 
    procentry                 
    push           pci_mcl.nreals i64 
    jumptrue       #16280     i64 
    jump           #16281     
#16280: 
    setargs                   1 0
    push           "Real Table" u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   2 0
    push           8          i64 
    push           73         i64 
    callproc       &pc_libmcl.setsegment 
#16282: 
    push           1          i64 
    pop            pc_libmcl.genrealtable.i i64 
    push           pci_mcl.nreals i64 
    push           1          i64 
    jumplt         #16283     i64 
#16284: 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.reallabtable u64 
    push           pc_libmcl.genrealtable.i i64 
    pushptroff                i32 4 -4
    abs                       i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    push           pci_mcl.realtable u64 
    push           pc_libmcl.genrealtable.i i64 
    pushptroff                r64 8 -8
    pop            pc_libmcl.genrealtable.x r64 
    push           pci_mcl.reallabtable u64 
    push           pc_libmcl.genrealtable.i i64 
    pushptroff                i32 4 -4
    push           0          i64 
    jumple         #16285     i64 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.genrealtable.x r64 
    callfn         &pc_libmcl.mgenrealimm u64 
    push           117        i64 
    callproc       &pc_libmcl.genmc 
    jump           #16286     
#16285: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           4          i64 
    push           pc_libmcl.genrealtable.x r64 
    callfn         &pc_libmcl.mgenrealimm u64 
    push           116        i64 
    callproc       &pc_libmcl.genmc 
#16286: 
#16287: 
    forup          #16284     i64 1
    opnd           pc_libmcl.genrealtable.i 
    opnd           pci_mcl.nreals 
#16283: 
#16281: 
    retproc                   
End


Proc pc_libmcl.genabsneg:
    procentry                 
    setargs                   2 0
    push           16         i64 
    push           73         i64 
    callproc       &pc_libmcl.setsegment 
    push           pci_mcl.lababs32 i64 
    jumpfalse      #16289     i64 
    setargs                   1 0
    push           "lababs32" u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.lababs32 i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           9223372034707292159 i64 
    callproc       &pc_libmcl.gendq 
    setargs                   1 0
    push           9223372034707292159 i64 
    callproc       &pc_libmcl.gendq 
#16289: 
    push           pci_mcl.lababs64 i64 
    jumpfalse      #16290     i64 
    setargs                   1 0
    push           "lababs64" u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.lababs64 i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           9223372036854775807 i64 
    callproc       &pc_libmcl.gendq 
    setargs                   1 0
    push           9223372036854775807 i64 
    callproc       &pc_libmcl.gendq 
#16290: 
    push           pci_mcl.labneg32 i64 
    jumpfalse      #16291     i64 
    setargs                   1 0
    push           "labneg32" u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.labneg32 i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           -9223372034707292160 i64 
    callproc       &pc_libmcl.gendq 
    setargs                   1 0
    push           -9223372034707292160 i64 
    callproc       &pc_libmcl.gendq 
#16291: 
    push           pci_mcl.labneg64 i64 
    jumpfalse      #16292     i64 
    setargs                   1 0
    push           "labneg64" u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.labneg64 i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           -9223372036854775808 i64 
    callproc       &pc_libmcl.gendq 
    setargs                   1 0
    push           -9223372036854775808 i64 
    callproc       &pc_libmcl.gendq 
#16292: 
    push           pci_mcl.labzero i64 
    jumpfalse      #16293     i64 
    setargs                   1 0
    push           "labzero"  u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.labzero i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_libmcl.gendq 
#16293: 
    push           pci_mcl.labmask63 i64 
    jumpfalse      #16294     i64 
    setargs                   1 0
    push           "mask63/offset64" u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.labmask63 i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           9223372036854775807 i64 
    callproc       &pc_libmcl.gendq 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.laboffset64 i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           4890909195324358656 i64 
    callproc       &pc_libmcl.gendq 
#16294: 
#16295: 
    retproc                   
End


Proc pc_libmcl.mdefinelabel: i64
    procentry                 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    push           pci_mcl.mlabelno i64 
    setret                    i64 
    jump           #16297     
#16297: 
    retfn                     i64 
End


Proc pc_libmcl.mcreatefwdlabel: i64
    procentry                 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    setret                    i64 
    jump           #16299     
#16299: 
    retfn                     i64 
End


Proc pc_libmcl.mdefinefwdlabel:
    param          pc_libmcl.mdefinefwdlabel.lab i64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.mdefinefwdlabel.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
#16301: 
    retproc                   
End


Proc pc_libmcl.stropnd: u64
    param          pc_libmcl.stropnd.a u64 
    param          pc_libmcl.stropnd.sizeprefix i64 
    param          pc_libmcl.stropnd.debug i64 
    local          pc_libmcl.stropnd.str2 block:128 
    local          pc_libmcl.stropnd.plus u64 
    local          pc_libmcl.stropnd.t u64 
    local          pc_libmcl.stropnd.offset i64 
    local          pc_libmcl.stropnd.tc i64 
    procentry                 
    push           0          u64 
    push           &pc_libmcl.stropnd.str 
    push           1          i64 
    popptroff                 u8 1 -1
    push           pc_libmcl.stropnd.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #16303     i64 0
    push           2          i64 
    casejumpeq     #16304     i64 0
    push           3          i64 
    casejumpeq     #16305     i64 0
    push           5          i64 
    casejumpeq     #16306     i64 0
    popstack                  i64 
    jump           #16307     
#16303: 
    setargs                   2 0
    push           pc_libmcl.stropnd.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_libmcl.stropnd.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.strreg u64 
    setret                    u64 
    jump           #16308     
    jump           #16309     
#16304: 
    setargs                   2 0
    setargs                   1 0
    push           pc_libmcl.stropnd.a u64 
    callfn         &pc_libmcl.strvalue u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcpy    
    jump           #16309     
#16305: 
    push           pc_libmcl.stropnd.a u64 
    push           12         
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #16310     i64 0
    push           2          i64 
    casejumpeq     #16311     i64 0
    push           3          i64 
    casejumpeq     #16312     i64 0
    popstack                  i64 
    jump           #16313     
#16310: 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_libmcl.stropnd.a u64 
    pushptr                   i64 
    callfn         &msysp.strint u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcpy    
    jump           #16314     
#16311: 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_libmcl.stropnd.a u64 
    pushptr                   r64 
    callfn         &msysp.strreal u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcpy    
    jump           #16314     
#16312: 
    setargs                   1 0
    push           &pc_libmcl.stropnd.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "M#"       u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   2 0
    push           0          i64 
    push           pc_libmcl.stropnd.a u64 
    pushptr                   r64 
    callproc       &msysp.m$print_r64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #16314     
#16313: 
#16314: 
    setargs                   2 0
    setargs                   2 0
    push           pc_libmcl.stropnd.sizeprefix i64 
    push           pc_libmcl.stropnd.a u64 
    push           8          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.getsizeprefix u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcat    
    setargs                   2 0
    push           "["        u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcat    
    push           ""         u64 
    pop            pc_libmcl.stropnd.plus u64 
    push           pc_libmcl.stropnd.a u64 
    push           10         
    pushptroff                u8 1 0
    jumpfalse      #16315     i64 
    setargs                   2 0
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.stropnd.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.strreg u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcat    
    push           "+"        u64 
    pop            pc_libmcl.stropnd.plus u64 
#16315: 
    push           pc_libmcl.stropnd.a u64 
    push           11         
    pushptroff                u8 1 0
    jumpfalse      #16316     i64 
    setargs                   2 0
    push           pc_libmcl.stropnd.plus u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcat    
    setargs                   2 0
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.stropnd.a u64 
    push           11         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.strreg u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcat    
    push           "+"        u64 
    pop            pc_libmcl.stropnd.plus u64 
    push           pc_libmcl.stropnd.a u64 
    push           13         
    pushptroff                u8 1 0
    push           1          i64 
    jumple         #16317     i64 
    setargs                   2 0
    push           "*"        u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcat    
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_libmcl.stropnd.a u64 
    push           13         
    pushptroff                u8 1 0
    callfn         &msysp.strint u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcat    
#16317: 
#16316: 
    push           pc_libmcl.stropnd.a u64 
    push           12         
    pushptroff                u8 1 0
    push           5          i64 
    setjumpeq      #16318     i64 
    push           7          i64 
    setjumpeq      #16318     i64 
    push           6          i64 
    setjumpne      #16319     i64 
#16318: 
    push           pc_libmcl.stropnd.plus u64 
    pushptr                   u8 
    push           43         u64 
    jumpne         #16320     u64 
    setargs                   2 0
    push           pc_libmcl.stropnd.plus u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcat    
#16320: 
    setargs                   2 0
    setargs                   1 0
    push           pc_libmcl.stropnd.a u64 
    callfn         &pc_libmcl.strvalue u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcat    
    jump           #16321     
#16319: 
    push           pc_libmcl.stropnd.a u64 
    push           14         
    pushptroff                i32 1 0
    store          pc_libmcl.stropnd.offset i64 
    jumpfalse      #16322     i64 
    setargs                   1 0
    push           &pc_libmcl.stropnd.str2 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    push           "+"        u64 
    push           pc_libmcl.stropnd.offset i64 
    callproc       &msysp.m$print_i64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           &pc_libmcl.stropnd.str2 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcat    
#16322: 
#16321: 
    setargs                   2 0
    push           "]"        u64 
    push           &pc_libmcl.stropnd.str 
    callproc       &strcat    
    jump           #16309     
#16306: 
    setargs                   2 0
    push           pc_libmcl.stropnd.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_libmcl.stropnd.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.strxreg u64 
    setret                    u64 
    jump           #16308     
    jump           #16309     
#16307: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "BAD OPND" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_libmcl.stropnd.a u64 
    push           9          
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           "<BAD OPND>" u64 
    setret                    u64 
    jump           #16308     
#16309: 
    push           &pc_libmcl.stropnd.str 
    setret                    u64 
    jump           #16308     
#16308: 
    retfn                     u64 
End


Proc pc_libmcl.strreg: u64
    param          pc_libmcl.strreg.reg i64 
    param          pc_libmcl.strreg.size i64 
    local          pc_libmcl.strreg.d u64 
    procentry                 
    setargs                   2 0
    push           0          i64 
    push           pc_libmcl.strreg.reg i64 
    callfn         &pc_libmcl.checkregvar u64 
    pop            pc_libmcl.strreg.d u64 
    startmult                 
    push           pc_libmcl.strreg.size i64 
    push           8          i64 
    jumpne         #16324     i64 
    push           pc_libmcl.strreg.d u64 
    jumpfalse      #16324     u64 
    setargs                   1 0
    push           pc_libmcl.strreg.d u64 
    callfn         &pc_libmcl.getfullname u64 
    resetmult                 
    jump           #16325     
#16324: 
    setargs                   2 0
    push           pc_libmcl.strreg.size i64 
    push           pc_libmcl.strreg.reg i64 
    callfn         &pc_libmcl.getregname u64 
    endmult                   
#16325: 
    setret                    u64 
    jump           #16326     
#16326: 
    retfn                     u64 
End


Proc pc_libmcl.checkregvar: u64
    param          pc_libmcl.checkregvar.reg i64 
    param          pc_libmcl.checkregvar.isfloat i64 
    procentry                 
    push           0          u64 
    setret                    u64 
    jump           #16328     
#16328: 
    retfn                     u64 
End


Proc pc_libmcl.strxreg: u64
    param          pc_libmcl.strxreg.reg i64 
    param          pc_libmcl.strxreg.size i64 
    local          pc_libmcl.strxreg.d u64 
    procentry                 
    setargs                   2 0
    push           1          i64 
    push           pc_libmcl.strxreg.reg i64 
    callfn         &pc_libmcl.checkregvar u64 
    pop            pc_libmcl.strxreg.d u64 
    startmult                 
    push           pc_libmcl.strxreg.size i64 
    push           8          i64 
    jumpne         #16330     i64 
    push           pc_libmcl.strxreg.d u64 
    jumpfalse      #16330     u64 
    setargs                   1 0
    push           pc_libmcl.strxreg.d u64 
    callfn         &pc_libmcl.getfullname u64 
    resetmult                 
    jump           #16331     
#16330: 
    setargs                   2 0
    push           pc_libmcl.strxreg.size i64 
    push           pc_libmcl.strxreg.reg i64 
    callfn         &pc_libmcl.fgetregname u64 
    endmult                   
#16331: 
    setret                    u64 
    jump           #16332     
#16332: 
    retfn                     u64 
End


Proc pc_libmcl.strvalue: u64
    param          pc_libmcl.strvalue.a u64 
    local          pc_libmcl.strvalue.str2 block:128 
    local          pc_libmcl.strvalue.def u64 
    local          pc_libmcl.strvalue.value i64 
    local          pc_libmcl.strvalue.offset i64 
    local          pc_libmcl.strvalue.length i64 
    local          pc_libmcl.strvalue.ss u64 
    procentry                 
    push           pc_libmcl.strvalue.a u64 
    pushptr                   u64 
    pop            pc_libmcl.strvalue.def u64 
    push           pc_libmcl.strvalue.a u64 
    pushptr                   i64 
    pop            pc_libmcl.strvalue.value i64 
    setargs                   2 0
    push           ""         u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcpy    
    push           pc_libmcl.strvalue.a u64 
    push           12         
    pushptroff                u8 1 0
    push           5          i64 
    casejumpeq     #16334     i64 0
    push           6          i64 
    casejumpeq     #16335     i64 0
    push           1          i64 
    casejumpeq     #16336     i64 0
    push           2          i64 
    casejumpeq     #16337     i64 0
    push           3          i64 
    casejumpeq     #16338     i64 0
    push           4          i64 
    casejumpeq     #16339     i64 0
    push           8          i64 
    casejumpeq     #16340     i64 0
    push           9          i64 
    casejumpeq     #16341     i64 0
    push           7          i64 
    casejumpeq     #16342     i64 0
    popstack                  i64 
    jump           #16343     
#16334: 
    setargs                   2 0
    setargs                   1 0
    push           pc_libmcl.strvalue.def u64 
    callfn         &pc_libmcl.getfullname u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
!addoffset::
#16344: 
    push           pc_libmcl.strvalue.a u64 
    push           14         
    pushptroff                i32 1 0
    store          pc_libmcl.strvalue.offset i64 
    jumpfalse      #16345     i64 
    setargs                   1 0
    push           &pc_libmcl.strvalue.str2 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    startmult                 
    push           pc_libmcl.strvalue.offset i64 
    push           0          i64 
    jumple         #16346     i64 
    push           "+"        u64 
    resetmult                 
    jump           #16347     
#16346: 
    push           ""         u64 
    endmult                   
#16347: 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           pc_libmcl.strvalue.offset i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           &pc_libmcl.strvalue.str2 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
#16345: 
    jump           #16348     
#16335: 
    setargs                   2 0
    setargs                   1 0
    push           pc_libmcl.strvalue.a u64 
    pushptr                   i64 
    callfn         &pc_libmcl.getfulltempname u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
    jump           #16348     
#16336: 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_libmcl.strvalue.value i64 
    callfn         &msysp.strint u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
    jump           #16348     
#16337: 
    setargs                   1 0
    push           &pc_libmcl.strvalue.str 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    push           "20.20"    u64 
    push           pc_libmcl.strvalue.a u64 
    pushptr                   r64 
    callproc       &msysp.m$print_r64 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #16348     
#16338: 
    setargs                   2 0
    push           "M"        u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_libmcl.strvalue.a u64 
    pushptr                   r64 
    callfn         &msysp.strreal u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
    jump           #16348     
#16339: 
    setargs                   2 0
    push           "\""       u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
    setargs                   2 0
    push           pc_libmcl.strvalue.a u64 
    pushptr                   u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
    setargs                   2 0
    push           "\""       u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
    jump           #16348     
#16340: 
    setargs                   2 0
    push           pc_libmcl.strvalue.a u64 
    pushptr                   u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
    jump           #16348     
#16341: 
    setargs                   2 0
    push           "XXX"      u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
    jump           #16348     
#16342: 
    setargs                   2 0
    push           "L"        u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pc_libmcl.strvalue.a u64 
    pushptr                   i64 
    callfn         &msysp.strint u64 
    push           &pc_libmcl.strvalue.str 
    callproc       &strcat    
    jump           #16344     
    jump           #16348     
#16343: 
#16348: 
    push           &pc_libmcl.strvalue.str 
    setret                    u64 
    jump           #16349     
#16349: 
    retfn                     u64 
End


Proc pc_libmcl.writegsfile:
    param          pc_libmcl.writegsfile.filename u64 
    param          pc_libmcl.writegsfile.d u64 
    local          pc_libmcl.writegsfile.f u64 
    procentry                 
    setargs                   2 0
    push           "w"        u64 
    push           pc_libmcl.writegsfile.filename u64 
    callfn         &fopen     u64 
    pop            pc_libmcl.writegsfile.f u64 
    setargs                   2 0
    push           pc_libmcl.writegsfile.f u64 
    push           pc_libmcl.writegsfile.d u64 
    callproc       &mlibp.gs_println 
    setargs                   1 0
    push           pc_libmcl.writegsfile.f u64 
    callproc       &fclose    
#16351: 
    retproc                   
End


Proc pc_libmcl.ismemaddr: i64
    param          pc_libmcl.ismemaddr.n i64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           pc_libmcl.ismemaddr.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           11         i64 
    jumpne         #16353     i64 
    push           1          i64 
    setret                    i64 
    jump           #16354     
#16353: 
    push           0          i64 
    setret                    i64 
    jump           #16354     
#16354: 
    retfn                     i64 
End


Proc pc_libmcl.isimm64: i64
    param          pc_libmcl.isimm64.n i64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           pc_libmcl.isimm64.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    jumpne         #16356     i64 
    push           1          i64 
    setret                    i64 
    jump           #16357     
#16356: 
    push           0          i64 
    setret                    i64 
    jump           #16357     
#16357: 
    retfn                     i64 
End


Proc pc_libmcl.isregvaropnd: i64
    param          pc_libmcl.isregvaropnd.n i64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           pc_libmcl.isregvaropnd.n i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           7          i64 
    jumpne         #16359     i64 
    push           1          i64 
    setret                    i64 
    jump           #16360     
#16359: 
    push           0          i64 
    setret                    i64 
    jump           #16360     
#16360: 
    retfn                     i64 
End


Proc pc_libmcl.copyblock:
    param          pc_libmcl.copyblock.ax u64 
    param          pc_libmcl.copyblock.bx u64 
    param          pc_libmcl.copyblock.n i64 
    local          pc_libmcl.copyblock.rx u64 
    local          pc_libmcl.copyblock.rcount u64 
    local          pc_libmcl.copyblock.nwords i64 
    local          pc_libmcl.copyblock.lab i64 
    local          pc_libmcl.copyblock.oddbytes i64 
    local          pc_libmcl.copyblock.offset i64 
    local          pc_libmcl.copyblock.workreg i64 
    local          pc_libmcl.copyblock.countreg i64 
    local          pc_libmcl.copyblock.av_1 i64 
    procentry                 
    push           pc_libmcl.copyblock.n i64 
    push           8          i64 
    irem                      i64 
    pop            pc_libmcl.copyblock.oddbytes i64 
    push           &pc_libmcl.copyblock.n 
    push           pc_libmcl.copyblock.oddbytes i64 
    subto                     i64 
    push           pc_libmcl.copyblock.n i64 
    push           8          i64 
    idiv                      i64 
    pop            pc_libmcl.copyblock.nwords i64 
    setargs                   2 0
    push           8          i64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    store          pc_libmcl.copyblock.workreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_libmcl.copyblock.rx u64 
    push           0          i64 
    pop            pc_libmcl.copyblock.offset i64 
    push           1          i64 
    push           pc_libmcl.copyblock.nwords i64 
    jumpgt         #16362     i64 
    push           pc_libmcl.copyblock.nwords i64 
    push           4          i64 
    jumpgt         #16362     i64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.copyblock.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    pop            pc_libmcl.copyblock.ax u64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.copyblock.bx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    pop            pc_libmcl.copyblock.bx u64 
#16363: 
    push           pc_libmcl.copyblock.nwords i64 
    pop            pc_libmcl.copyblock.av_1 i64 
    push           pc_libmcl.copyblock.av_1 i64 
    push           0          i64 
    jumple         #16364     i64 
#16365: 
    setargs                   3 0
    setargs                   3 0
    push           0          i64 
    push           pc_libmcl.copyblock.offset i64 
    push           pc_libmcl.copyblock.bx u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           pc_libmcl.copyblock.rx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_libmcl.copyblock.rx u64 
    setargs                   3 0
    push           0          i64 
    push           pc_libmcl.copyblock.offset i64 
    push           pc_libmcl.copyblock.ax u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_libmcl.copyblock.offset 
    push           8          i64 
    addto                     i64 
#16366: 
    to             #16365     
    opnd           pc_libmcl.copyblock.av_1 
#16364: 
    jump           #16367     
#16362: 
    push           pc_libmcl.copyblock.nwords i64 
    push           0          i64 
    jumpeq         #16368     i64 
    setargs                   2 0
    push           8          i64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    store          pc_libmcl.copyblock.countreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_libmcl.copyblock.rcount u64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pc_libmcl.copyblock.lab i64 
    setargs                   1 0
    push           pc_libmcl.copyblock.ax u64 
    callfn         &pc_libmcl.makesimpleaddr u64 
    pop            pc_libmcl.copyblock.ax u64 
    setargs                   1 0
    push           pc_libmcl.copyblock.bx u64 
    callfn         &pc_libmcl.makesimpleaddr u64 
    pop            pc_libmcl.copyblock.bx u64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.copyblock.nwords i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_libmcl.copyblock.rcount u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.copyblock.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_libmcl.copyblock.bx u64 
    push           pc_libmcl.copyblock.rx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_libmcl.copyblock.rx u64 
    push           pc_libmcl.copyblock.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           8          i64 
    callfn         &pc_libmcl.mgenint u64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.copyblock.ax u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           8          i64 
    callfn         &pc_libmcl.mgenint u64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.copyblock.bx u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           pc_libmcl.copyblock.rcount u64 
    push           54         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.copyblock.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           5          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    push           0          i64 
    pop            pc_libmcl.copyblock.offset i64 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_libmcl.copyblock.countreg i64 
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_libmcl.copyblock.countreg i64 
    popptroff                 u8 1 -1
#16368: 
#16367: 
    push           pc_libmcl.copyblock.oddbytes i64 
    jumpfalse      #16369     i64 
    push           pc_libmcl.copyblock.oddbytes i64 
    pop            pc_libmcl.copyblock.n i64 
    push           pc_libmcl.copyblock.n i64 
    push           4          i64 
    jumplt         #16370     i64 
    setargs                   2 0
    push           4          i64 
    push           pc_libmcl.copyblock.rx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    pop            pc_libmcl.copyblock.rx u64 
    setargs                   3 0
    setargs                   3 0
    push           4          i64 
    push           pc_libmcl.copyblock.offset i64 
    push           pc_libmcl.copyblock.bx u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           pc_libmcl.copyblock.rx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_libmcl.copyblock.rx u64 
    setargs                   3 0
    push           4          i64 
    push           pc_libmcl.copyblock.offset i64 
    push           pc_libmcl.copyblock.ax u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_libmcl.copyblock.n 
    push           4          i64 
    subto                     i64 
    push           &pc_libmcl.copyblock.offset 
    push           4          i64 
    addto                     i64 
#16370: 
    push           pc_libmcl.copyblock.n i64 
    push           2          i64 
    jumplt         #16371     i64 
    setargs                   2 0
    push           2          i64 
    push           pc_libmcl.copyblock.rx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    pop            pc_libmcl.copyblock.rx u64 
    setargs                   3 0
    setargs                   3 0
    push           2          i64 
    push           pc_libmcl.copyblock.offset i64 
    push           pc_libmcl.copyblock.bx u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           pc_libmcl.copyblock.rx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_libmcl.copyblock.rx u64 
    setargs                   3 0
    push           2          i64 
    push           pc_libmcl.copyblock.offset i64 
    push           pc_libmcl.copyblock.ax u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_libmcl.copyblock.n 
    push           2          i64 
    subto                     i64 
    push           &pc_libmcl.copyblock.offset 
    push           2          i64 
    addto                     i64 
#16371: 
    push           pc_libmcl.copyblock.n i64 
    push           1          i64 
    jumpne         #16372     i64 
    setargs                   2 0
    push           1          i64 
    push           pc_libmcl.copyblock.rx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    pop            pc_libmcl.copyblock.rx u64 
    setargs                   3 0
    setargs                   3 0
    push           1          i64 
    push           pc_libmcl.copyblock.offset i64 
    push           pc_libmcl.copyblock.bx u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           pc_libmcl.copyblock.rx u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_libmcl.copyblock.rx u64 
    setargs                   3 0
    push           1          i64 
    push           pc_libmcl.copyblock.offset i64 
    push           pc_libmcl.copyblock.ax u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
#16372: 
#16369: 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_libmcl.copyblock.workreg i64 
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_libmcl.copyblock.workreg i64 
    popptroff                 u8 1 -1
#16373: 
    retproc                   
End


Proc pc_libmcl.makesimpleaddr: u64
    param          pc_libmcl.makesimpleaddr.ax u64 
    local          pc_libmcl.makesimpleaddr.bx u64 
    local          pc_libmcl.makesimpleaddr.newreg i64 
    procentry                 
    push           pc_libmcl.makesimpleaddr.ax u64 
    push           10         
    pushptroff                u8 1 0
    jumpfalse      #16375     i64 
    push           pc_libmcl.makesimpleaddr.ax u64 
    push           11         
    pushptroff                u8 1 0
    jumptrue       #16375     i64 
    push           pc_libmcl.makesimpleaddr.ax u64 
    setret                    u64 
    jump           #16376     
#16375: 
    startmult                 
    push           pc_libmcl.makesimpleaddr.ax u64 
    push           10         
    pushptroff                u8 1 0
    jumpfalse      #16377     i64 
    push           pc_libmcl.makesimpleaddr.ax u64 
    push           10         
    pushptroff                u8 1 0
    resetmult                 
    jump           #16378     
#16377: 
    startmult                 
    push           pc_libmcl.makesimpleaddr.ax u64 
    push           11         
    pushptroff                u8 1 0
    jumpfalse      #16379     i64 
    push           pc_libmcl.makesimpleaddr.ax u64 
    push           11         
    pushptroff                u8 1 0
    resetmult                 
    jump           #16380     
#16379: 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    endmult                   
#16380: 
    endmult                   
#16378: 
    pop            pc_libmcl.makesimpleaddr.newreg i64 
    setargs                   3 0
    push           0          i64 
    push           8          i64 
    push           pc_libmcl.makesimpleaddr.newreg i64 
    callfn         &pc_libmcl.mgenireg u64 
    pop            pc_libmcl.makesimpleaddr.bx u64 
    setargs                   3 0
    push           pc_libmcl.makesimpleaddr.ax u64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.makesimpleaddr.newreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           15         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_libmcl.makesimpleaddr.bx u64 
    setret                    u64 
    jump           #16376     
#16376: 
    retfn                     u64 
End


Proc pc_libmcl.ispoweroftwo: i64
    param          pc_libmcl.ispoweroftwo.x i64 
    local          pc_libmcl.ispoweroftwo.a i64 
    local          pc_libmcl.ispoweroftwo.n i64 
    local          pc_libmcl.ispoweroftwo.av_1 i64 
    procentry                 
    push           1          i64 
    pop            pc_libmcl.ispoweroftwo.a i64 
    push           0          i64 
    pop            pc_libmcl.ispoweroftwo.n i64 
#16382: 
    push           60         i64 
    pop            pc_libmcl.ispoweroftwo.av_1 i64 
#16383: 
    push           &pc_libmcl.ispoweroftwo.n 
    incr                      i64 1
    push           pc_libmcl.ispoweroftwo.a i64 
    push           1          i64 
    shl                       i64 
    pop            pc_libmcl.ispoweroftwo.a i64 
    push           pc_libmcl.ispoweroftwo.a i64 
    push           pc_libmcl.ispoweroftwo.x i64 
    jumpne         #16384     i64 
    push           pc_libmcl.ispoweroftwo.n i64 
    setret                    i64 
    jump           #16385     
#16384: 
#16386: 
    to             #16383     
    opnd           pc_libmcl.ispoweroftwo.av_1 
#16387: 
    push           0          i64 
    setret                    i64 
    jump           #16385     
#16385: 
    retfn                     i64 
End


Proc pc_libmcl.getrtsproclabel: i64
    param          pc_libmcl.getrtsproclabel.fnindex i64 
    procentry                 
    push           &pci_mcl.rtsproclabels 
    push           pc_libmcl.getrtsproclabel.fnindex i64 
    pushptroff                i64 8 -8
    push           0          i64 
    jumpne         #16389     i64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    push           &pci_mcl.rtsproclabels 
    push           pc_libmcl.getrtsproclabel.fnindex i64 
    popptroff                 i64 8 -8
    push           pci_mcl.mlabelno i64 
    setret                    i64 
    jump           #16390     
#16389: 
    push           &pci_mcl.rtsproclabels 
    push           pc_libmcl.getrtsproclabel.fnindex i64 
    pushptroff                i64 8 -8
    setret                    i64 
    jump           #16390     
#16390: 
    retfn                     i64 
End


Proc pc_libmcl.genrtsproctable:
    local          pc_libmcl.genrtsproctable.str block:256 
    local          pc_libmcl.genrtsproctable.proclab i64 
    local          pc_libmcl.genrtsproctable.d u64 
    local          pc_libmcl.genrtsproctable.av_1 i64 
    local          pc_libmcl.genrtsproctable.i i64 
    procentry                 
    setargs                   2 0
    push           16         i64 
    push           67         i64 
    callproc       &pc_libmcl.setsegment 
#16392: 
    push           1          i64 
    pop            pc_libmcl.genrtsproctable.i i64 
    push           6          i64 
    pop            pc_libmcl.genrtsproctable.av_1 i64 
    push           pc_libmcl.genrtsproctable.av_1 i64 
    push           1          i64 
    jumplt         #16393     i64 
#16394: 
    push           &pci_mcl.rtsproclabels 
    push           pc_libmcl.genrtsproctable.i i64 
    pushptroff                i64 8 -8
    jumpfalse      #16395     i64 
    setargs                   1 0
    push           &pc_libmcl.genrtsproctable.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "Generating code for" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pc_tables.rtsnames 
    push           pc_libmcl.genrtsproctable.i i64 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           &pc_libmcl.genrtsproctable.str 
    callproc       &pc_libmcl.mgencomment 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           &pci_mcl.rtsproclabels 
    push           pc_libmcl.genrtsproctable.i i64 
    pushptroff                i64 8 -8
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_decls.rtsproctable 
    push           pc_libmcl.genrtsproctable.i i64 
    pushptroff                u64 8 -8
    jumptrue       #16396     u64 
    push           pc_libmcl.genrtsproctable.i i64 
    push           4          i64 
    casejumpeq     #16397     i64 0
    push           5          i64 
    casejumpeq     #16398     i64 0
    popstack                  i64 
    jump           #16399     
#16397: 
    setargs                   0 0
    callproc       &pc_libmcl.genrts_mul_i128 
    jump           #16400     
#16398: 
    setargs                   0 0
    callproc       &pc_libmcl.genrts_div_i128 
    jump           #16400     
#16399: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pc_tables.rtsnames 
    push           pc_libmcl.genrtsproctable.i i64 
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           ""         u64 
    push           "RTS fn not defined" u64 
    callproc       &pc_libmcl.merror 
#16400: 
    setargs                   1 0
    push           ""         u64 
    callproc       &pc_libmcl.mgencomment 
    jump           #16401     
#16396: 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           &pc_decls.rtsproctable 
    push           pc_libmcl.genrtsproctable.i i64 
    pushptroff                u64 8 -8
    callfn         &pc_libmcl.mgenmemaddr u64 
    push           26         i64 
    callproc       &pc_libmcl.genmc 
#16401: 
#16395: 
#16402: 
    forup          #16394     i64 1
    opnd           pc_libmcl.genrtsproctable.i 
    opnd           pc_libmcl.genrtsproctable.av_1 
#16393: 
#16403: 
    retproc                   
End


Proc pc_libmcl.genrts_mul_i128:
    procentry                 
    setargs                   1 0
    push           "<code for mul-i128>" u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   0 0
    callproc       &pc_libmcl.genrtsentry 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           7          i64 
    pushptroff                u64 8 -16
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           8          i64 
    pushptroff                u64 8 -16
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           10         i64 
    pushptroff                u64 8 -16
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           12         i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           10         i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           11         i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           1          i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           14         i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           1          i64 
    pushptroff                u64 8 -16
    push           35         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           1          i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           7          i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           10         i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           1          i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           13         i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           1          i64 
    pushptroff                u64 8 -16
    push           35         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           1          i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           8          i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           11         i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           1          i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           13         i64 
    pushptroff                u64 8 -16
    push           33         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           7          i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           12         i64 
    pushptroff                u64 8 -16
    push           29         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           8          i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           12         i64 
    pushptroff                u64 8 -16
    push           29         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           12         i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           2          i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           10         i64 
    pushptroff                u64 8 -16
    push           14         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           8          i64 
    pushptroff                u64 8 -16
    push           14         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           7          i64 
    pushptroff                u64 8 -16
    push           14         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_libmcl.genrtsexit 
#16405: 
    retproc                   
End


Proc pc_libmcl.genrts_div_i128:
    procentry                 
    setargs                   1 0
    push           "<code for div-i128>" u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   0 0
    callproc       &pc_libmcl.genrtsentry 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           7          i64 
    pushptroff                u64 8 -16
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           10         i64 
    pushptroff                u64 8 -16
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           12         i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           10         i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           10         i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           1          i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           12         i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           12         i64 
    pushptroff                u64 8 -16
    push           41         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           13         i64 
    pushptroff                u64 8 -16
    push           38         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           1          i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           7          i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           13         i64 
    pushptroff                u64 8 -16
    push           34         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           1          i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           10         i64 
    pushptroff                u64 8 -16
    push           30         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           11         i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           1          i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           10         i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           12         i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           13         i64 
    pushptroff                u64 8 -16
    push           38         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           &pc_libmcl.rd 
    push           7          i64 
    pushptroff                u64 8 -16
    push           &pc_libmcl.rd 
    push           2          i64 
    pushptroff                u64 8 -16
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           10         i64 
    pushptroff                u64 8 -16
    push           14         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           &pc_libmcl.rd 
    push           7          i64 
    pushptroff                u64 8 -16
    push           14         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   0 0
    callproc       &pc_libmcl.genrtsexit 
#16407: 
    retproc                   
End


Proc pc_libmcl.genrtsentry:
    procentry                 
    setargs                   3 0
    push           0          u64 
    push           pci_mcl.dframeopnd u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pci_mcl.dstackopnd u64 
    push           pci_mcl.dframeopnd u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           32         i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pci_mcl.dstackopnd u64 
    push           30         i64 
    callproc       &pc_libmcl.genmc 
#16409: 
    retproc                   
End


Proc pc_libmcl.genrtsexit:
    procentry                 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           32         i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pci_mcl.dstackopnd u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           pci_mcl.dframeopnd u64 
    push           14         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           0          u64 
    push           23         i64 
    callproc       &pc_libmcl.genmc 
#16411: 
    retproc                   
End


Proc pc_libmcl.clearblock:
    param          pc_libmcl.clearblock.ax u64 
    param          pc_libmcl.clearblock.n i64 
    local          pc_libmcl.clearblock.rx u64 
    local          pc_libmcl.clearblock.rcount u64 
    local          pc_libmcl.clearblock.nwords i64 
    local          pc_libmcl.clearblock.lab i64 
    local          pc_libmcl.clearblock.oddbytes i64 
    local          pc_libmcl.clearblock.offset i64 
    local          pc_libmcl.clearblock.workreg i64 
    local          pc_libmcl.clearblock.countreg i64 
    local          pc_libmcl.clearblock.av_1 i64 
    local          pc_libmcl.clearblock.i i64 
    procentry                 
    push           pc_libmcl.clearblock.n i64 
    push           8          i64 
    irem                      i64 
    pop            pc_libmcl.clearblock.oddbytes i64 
    push           &pc_libmcl.clearblock.n 
    push           pc_libmcl.clearblock.oddbytes i64 
    subto                     i64 
    push           pc_libmcl.clearblock.n i64 
    push           8          i64 
    idiv                      i64 
    pop            pc_libmcl.clearblock.nwords i64 
    setargs                   2 0
    push           8          i64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    store          pc_libmcl.clearblock.workreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_libmcl.clearblock.rx u64 
    setargs                   3 0
    push           pc_libmcl.clearblock.rx u64 
    push           pc_libmcl.clearblock.rx u64 
    push           41         i64 
    callproc       &pc_libmcl.genmc 
    push           0          i64 
    pop            pc_libmcl.clearblock.offset i64 
    push           1          i64 
    push           pc_libmcl.clearblock.nwords i64 
    jumpgt         #16413     i64 
    push           pc_libmcl.clearblock.nwords i64 
    push           8          i64 
    jumpgt         #16413     i64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.clearblock.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    pop            pc_libmcl.clearblock.ax u64 
#16414: 
    push           pc_libmcl.clearblock.nwords i64 
    pop            pc_libmcl.clearblock.av_1 i64 
    push           pc_libmcl.clearblock.av_1 i64 
    push           0          i64 
    jumple         #16415     i64 
#16416: 
    setargs                   3 0
    push           pc_libmcl.clearblock.rx u64 
    setargs                   3 0
    push           0          i64 
    push           pc_libmcl.clearblock.offset i64 
    push           pc_libmcl.clearblock.ax u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_libmcl.clearblock.offset 
    push           8          i64 
    addto                     i64 
#16417: 
    to             #16416     
    opnd           pc_libmcl.clearblock.av_1 
#16415: 
    jump           #16418     
#16413: 
    push           pc_libmcl.clearblock.nwords i64 
    push           0          i64 
    jumpeq         #16419     i64 
    push           pc_libmcl.clearblock.nwords i64 
    push           3          i64 
    iand                      i64 
    jumpfalse      #16420     i64 
    setargs                   2 0
    push           8          i64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    store          pc_libmcl.clearblock.countreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_libmcl.clearblock.rcount u64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pc_libmcl.clearblock.lab i64 
    setargs                   1 0
    push           pc_libmcl.clearblock.ax u64 
    callfn         &pc_libmcl.makesimpleaddr u64 
    pop            pc_libmcl.clearblock.ax u64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.clearblock.nwords i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_libmcl.clearblock.rcount u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.clearblock.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           pc_libmcl.clearblock.rx u64 
    push           pc_libmcl.clearblock.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           8          i64 
    callfn         &pc_libmcl.mgenint u64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.clearblock.ax u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           pc_libmcl.clearblock.rcount u64 
    push           54         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.clearblock.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           5          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    push           0          i64 
    pop            pc_libmcl.clearblock.offset i64 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_libmcl.clearblock.countreg i64 
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_libmcl.clearblock.countreg i64 
    popptroff                 u8 1 -1
    jump           #16421     
#16420: 
    setargs                   2 0
    push           8          i64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    store          pc_libmcl.clearblock.countreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_libmcl.clearblock.rcount u64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pc_libmcl.clearblock.lab i64 
    setargs                   1 0
    push           pc_libmcl.clearblock.ax u64 
    callfn         &pc_libmcl.makesimpleaddr u64 
    pop            pc_libmcl.clearblock.ax u64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.clearblock.nwords i64 
    push           4          i64 
    idiv                      i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_libmcl.clearblock.rcount u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.clearblock.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
#16422: 
    push           1          i64 
    pop            pc_libmcl.clearblock.i i64 
#16423: 
    setargs                   3 0
    push           pc_libmcl.clearblock.rx u64 
    setargs                   3 0
    push           0          i64 
    push           pc_libmcl.clearblock.offset i64 
    push           pc_libmcl.clearblock.ax u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_libmcl.clearblock.offset 
    push           8          i64 
    addto                     i64 
#16424: 
    forup          #16423     i64 1
    opnd           pc_libmcl.clearblock.i 
    opnd           4          
#16425: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           32         i64 
    callfn         &pc_libmcl.mgenint u64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.clearblock.ax u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    push           pc_libmcl.clearblock.rcount u64 
    push           54         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   4 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.clearblock.lab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           5          i64 
    push           27         i64 
    callproc       &pc_libmcl.genmc_cond 
    push           0          i64 
    pop            pc_libmcl.clearblock.offset i64 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_libmcl.clearblock.countreg i64 
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_libmcl.clearblock.countreg i64 
    popptroff                 u8 1 -1
#16421: 
#16419: 
#16418: 
    push           pc_libmcl.clearblock.oddbytes i64 
    jumpfalse      #16426     i64 
    push           pc_libmcl.clearblock.oddbytes i64 
    pop            pc_libmcl.clearblock.n i64 
    push           pc_libmcl.clearblock.n i64 
    push           4          i64 
    jumplt         #16427     i64 
    setargs                   2 0
    push           4          i64 
    push           pc_libmcl.clearblock.rx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    pop            pc_libmcl.clearblock.rx u64 
    setargs                   3 0
    push           pc_libmcl.clearblock.rx u64 
    setargs                   3 0
    push           4          i64 
    push           pc_libmcl.clearblock.offset i64 
    push           pc_libmcl.clearblock.ax u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_libmcl.clearblock.n 
    push           4          i64 
    subto                     i64 
    push           &pc_libmcl.clearblock.offset 
    push           4          i64 
    addto                     i64 
#16427: 
    push           pc_libmcl.clearblock.n i64 
    push           2          i64 
    jumplt         #16428     i64 
    setargs                   2 0
    push           2          i64 
    push           pc_libmcl.clearblock.rx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    pop            pc_libmcl.clearblock.rx u64 
    setargs                   3 0
    push           pc_libmcl.clearblock.rx u64 
    setargs                   3 0
    push           2          i64 
    push           pc_libmcl.clearblock.offset i64 
    push           pc_libmcl.clearblock.ax u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_libmcl.clearblock.n 
    push           2          i64 
    subto                     i64 
    push           &pc_libmcl.clearblock.offset 
    push           2          i64 
    addto                     i64 
#16428: 
    push           pc_libmcl.clearblock.n i64 
    push           1          i64 
    jumpne         #16429     i64 
    setargs                   2 0
    push           1          i64 
    push           pc_libmcl.clearblock.rx u64 
    callfn         &pc_libmcl.changeopndsize u64 
    pop            pc_libmcl.clearblock.rx u64 
    setargs                   3 0
    push           pc_libmcl.clearblock.rx u64 
    setargs                   3 0
    push           1          i64 
    push           pc_libmcl.clearblock.offset i64 
    push           pc_libmcl.clearblock.ax u64 
    callfn         &pc_libmcl.applyoffset u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
#16429: 
#16426: 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_libmcl.clearblock.workreg i64 
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_libmcl.clearblock.workreg i64 
    popptroff                 u8 1 -1
#16430: 
    retproc                   
End


Proc pc_libmcl.genfunctiontable:
    local          pc_libmcl.genfunctiontable.str block:256 
    local          pc_libmcl.genfunctiontable.s u64 
    local          pc_libmcl.genfunctiontable.t u64 
    local          pc_libmcl.genfunctiontable.currpcl u64 
    local          pc_libmcl.genfunctiontable.firststringlab i64 
    local          pc_libmcl.genfunctiontable.nextlab i64 
    local          pc_libmcl.genfunctiontable.nprocs i64 
    procentry                 
    push           pci_mcl.lab_funcaddrtable i64 
    push           0          i64 
    jumpne         #16432     i64 
    jump           #16433     
#16432: 
    setargs                   1 0
    push           "Function Table" u64 
    callproc       &pc_libmcl.mgencomment 
    push           0          i64 
    pop            pc_libmcl.genfunctiontable.nprocs i64 
    setargs                   2 0
    push           16         i64 
    push           67         i64 
    callproc       &pc_libmcl.setsegment 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.lab_funcaddrtable i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    push           pc_libpcl.pcstart u64 
    pop            pc_libmcl.genfunctiontable.currpcl u64 
#16434: 
    push           pc_libmcl.genfunctiontable.currpcl u64 
    push           1          
    pushptroff                u8 1 0
    push           8          i64 
    jumpne         #16435     i64 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.genfunctiontable.currpcl u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmemaddr u64 
    push           117        i64 
    callproc       &pc_libmcl.genmc 
    push           &pc_libmcl.genfunctiontable.nprocs 
    incr                      i64 1
#16435: 
    push           &pc_libmcl.genfunctiontable.currpcl 
    incr                      u64 32
#16436: 
    push           pc_libmcl.genfunctiontable.currpcl u64 
    push           1          
    pushptroff                u8 1 0
    push           11         i64 
    jumpne         #16434     i64 
#16437: 
    push           0          i64 
    pop            pc_libmcl.genfunctiontable.firststringlab i64 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.lab_funcnametable i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    push           pc_libpcl.pcstart u64 
    pop            pc_libmcl.genfunctiontable.currpcl u64 
#16438: 
    push           pc_libmcl.genfunctiontable.currpcl u64 
    push           1          
    pushptroff                u8 1 0
    push           8          i64 
    jumpne         #16439     i64 
    push           pc_libmcl.genfunctiontable.firststringlab i64 
    push           0          i64 
    jumpne         #16440     i64 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    store          pc_libmcl.genfunctiontable.nextlab i64 
    pop            pc_libmcl.genfunctiontable.firststringlab i64 
    jump           #16441     
#16440: 
    push           &pci_mcl.mlabelno 
    incrload                  i64 1
    pop            pc_libmcl.genfunctiontable.nextlab i64 
#16441: 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.genfunctiontable.nextlab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           117        i64 
    callproc       &pc_libmcl.genmc 
#16439: 
    push           &pc_libmcl.genfunctiontable.currpcl 
    incr                      u64 32
#16442: 
    push           pc_libmcl.genfunctiontable.currpcl u64 
    push           1          
    pushptroff                u8 1 0
    push           11         i64 
    jumpne         #16438     i64 
#16443: 
    push           pc_libmcl.genfunctiontable.firststringlab i64 
    pop            pc_libmcl.genfunctiontable.nextlab i64 
    push           pc_libpcl.pcstart u64 
    pop            pc_libmcl.genfunctiontable.currpcl u64 
#16444: 
    push           pc_libmcl.genfunctiontable.currpcl u64 
    push           1          
    pushptroff                u8 1 0
    push           8          i64 
    jumpne         #16445     i64 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pc_libmcl.genfunctiontable.nextlab i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    push           pc_libmcl.genfunctiontable.currpcl u64 
    push           8          
    pushptroff                u64 1 0
    pushptr                   u64 
    pop            pc_libmcl.genfunctiontable.s u64 
    push           pc_libmcl.genfunctiontable.s u64 
    pop            pc_libmcl.genfunctiontable.t u64 
    jump           #16446     
#16447: 
    push           pc_libmcl.genfunctiontable.s u64 
    pushptr                   u8 
    push           46         u64 
    jumpne         #16448     u64 
    push           pc_libmcl.genfunctiontable.s u64 
    push           1          i64 
    addrefoff                 u64 1 0
    pop            pc_libmcl.genfunctiontable.t u64 
#16448: 
    push           &pc_libmcl.genfunctiontable.s 
    incr                      u64 1
#16446: 
    push           pc_libmcl.genfunctiontable.s u64 
    pushptr                   u8 
    jumptrue       #16447     u64 
#16449: 
    setargs                   2 0
    push           1          i64 
    push           pc_libmcl.genfunctiontable.t u64 
    callproc       &pc_libmcl.genstring 
    push           &pc_libmcl.genfunctiontable.nextlab 
    incr                      i64 1
#16445: 
    push           &pc_libmcl.genfunctiontable.currpcl 
    incr                      u64 32
#16450: 
    push           pc_libmcl.genfunctiontable.currpcl u64 
    push           1          
    pushptroff                u8 1 0
    push           11         i64 
    jumpne         #16444     i64 
#16451: 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.lab_funcnprocs i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           9          i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pc_libmcl.genfunctiontable.nprocs i64 
    callfn         &pc_libmcl.mgenint u64 
    push           117        i64 
    callproc       &pc_libmcl.genmc 
#16433: 
    retproc                   
End


Proc pc_libmcl.mgenextname: u64
    param          pc_libmcl.mgenextname.s u64 
    local          pc_libmcl.mgenextname.str block:64 
    local          pc_libmcl.mgenextname.d u64 
    procentry                 
    setargs                   2 0
    push           pc_libmcl.mgenextname.s u64 
    push           &pc_libmcl.mgenextname.str 
    callproc       &strcpy    
    push           0          u64 
    push           &pc_libmcl.mgenextname.str 
    setargs                   1 0
    push           pc_libmcl.mgenextname.s u64 
    callfn         &strlen    i64 
    popptroff                 u8 1 -1
    setargs                   1 0
    push           51         i64 
    callfn         &mlibp.pcm_allocz u64 
    pop            pc_libmcl.mgenextname.d u64 
    setargs                   1 0
    push           &pc_libmcl.mgenextname.str 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           pc_libmcl.mgenextname.d u64 
    push           0          
    popptroff                 u64 1 0
    push           1          u64 
    push           pc_libmcl.mgenextname.d u64 
    push           46         
    addrefoff                 u64 1 0
    push           1          i64 
    popdotindex               u16 
    setargs                   1 0
    push           pc_libmcl.mgenextname.d u64 
    callfn         &pc_libmcl.mgenmemaddr u64 
    setret                    u64 
    jump           #16453     
#16453: 
    retfn                     u64 
End


Proc pc_stackmcl.resetopnds1:
    local          pc_stackmcl.resetopnds1.av_1 i64 
    local          pc_stackmcl.resetopnds1.i i64 
    procentry                 
    push           pci_mcl.mstackdepth i64 
    jumpfalse      #16455     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "1:HW stack not empty" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.procdef u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "MSTACKDEPTH=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.mstackdepth i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           0          i64 
    pop            pci_mcl.mstackdepth i64 
#16455: 
    push           pci_mcl.noperands i64 
    jumpfalse      #16456     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "1:Reset:pcl stack not empty:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.procdef u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "NOPERANDS=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.noperands i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           0          i64 
    pop            pci_mcl.noperands i64 
#16456: 
#16457: 
    push           1          i64 
    pop            pc_stackmcl.resetopnds1.i i64 
    push           16         i64 
    pop            pc_stackmcl.resetopnds1.av_1 i64 
    push           pc_stackmcl.resetopnds1.av_1 i64 
    push           1          i64 
    jumplt         #16458     i64 
#16459: 
    push           &pci_mcl.regset 
    push           pc_stackmcl.resetopnds1.i i64 
    pushptroff                u8 1 -1
    jumptrue       #16460     i64 
    push           &pci_mcl.xregset 
    push           pc_stackmcl.resetopnds1.i i64 
    pushptroff                u8 1 -1
    jumpfalse      #16461     i64 
#16460: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Reset: reg flag set" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.procdef u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #16458     
#16461: 
#16462: 
    forup          #16459     i64 1
    opnd           pc_stackmcl.resetopnds1.i 
    opnd           pc_stackmcl.resetopnds1.av_1 
#16458: 
    push           pci_mcl.inf_proccalls i64 
    push           0          i64 
    jumpne         #16463     i64 
    push           1          i64 
    pop            pci_mcl.inf_leafproc i64 
#16463: 
    push           &pci_mcl.regset 
    clear                     block:16 
    push           &pci_mcl.xregset 
    clear                     block:16 
    push           &pci_mcl.isregvar 
    clear                     block:16 
    push           &pci_mcl.isxregvar 
    clear                     block:16 
    push           pci_mcl.foptimise u8 
    jumptrue       #16464     i64 
    push           0          i64 
    pop            pci_mcl.inf_proccalls i64 
    push           0          i64 
    pop            pci_mcl.inf_maxargs i64 
    push           0          i64 
    pop            pci_mcl.inf_proclocals i64 
    push           0          i64 
    pop            pci_mcl.inf_procxlocals i64 
    push           0          i64 
    pop            pci_mcl.inf_leafproc i64 
    push           0          i64 
    store          pci_mcl.inf_highxreg i64 
    pop            pci_mcl.inf_highreg i64 
    push           0          i64 
    pop            pci_mcl.inf_assem i64 
    jump           #16465     
#16464: 
    push           0          i64 
    pop            pci_mcl.inf_proccalls i64 
    push           0          i64 
    pop            pci_mcl.inf_maxargs i64 
    push           0          i64 
    pop            pci_mcl.inf_proclocals i64 
    push           0          i64 
    pop            pci_mcl.inf_procxlocals i64 
#16465: 
#16466: 
    retproc                   
End


Proc pc_stackmcl.resetopnds2:
    local          pc_stackmcl.resetopnds2.av_1 i64 
    local          pc_stackmcl.resetopnds2.i i64 
    procentry                 
    push           pci_mcl.mstackdepth i64 
    jumpfalse      #16468     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "2:HW stack not empty" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.procdef u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "MSTACKDEPTH=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.mstackdepth i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#16468: 
    push           pci_mcl.noperands i64 
    jumpfalse      #16469     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "2:Reset:pcl stack not empty:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.procdef u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "NOPERANDS=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.noperands i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           0          i64 
    pop            pci_mcl.noperands i64 
#16469: 
#16470: 
    push           1          i64 
    pop            pc_stackmcl.resetopnds2.i i64 
    push           16         i64 
    pop            pc_stackmcl.resetopnds2.av_1 i64 
    push           pc_stackmcl.resetopnds2.av_1 i64 
    push           1          i64 
    jumplt         #16471     i64 
#16472: 
    push           &pci_mcl.regset 
    push           pc_stackmcl.resetopnds2.i i64 
    pushptroff                u8 1 -1
    jumptrue       #16473     i64 
    push           &pci_mcl.xregset 
    push           pc_stackmcl.resetopnds2.i i64 
    pushptroff                u8 1 -1
    jumpfalse      #16474     i64 
#16473: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "2:Reset: reg flag set" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pci_mcl.regnames 
    push           pc_stackmcl.resetopnds2.i i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.procdef u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #16471     
#16474: 
#16475: 
    forup          #16472     i64 1
    opnd           pc_stackmcl.resetopnds2.i 
    opnd           pc_stackmcl.resetopnds2.av_1 
#16471: 
    push           0          i64 
    pop            pci_mcl.inf_proccalls i64 
    push           0          i64 
    pop            pci_mcl.inf_maxargs i64 
    push           0          i64 
    pop            pci_mcl.inf_proclocals i64 
    push           0          i64 
    pop            pci_mcl.inf_procxlocals i64 
    push           0          i64 
    pop            pci_mcl.inf_leafproc i64 
    push           0          i64 
    store          pci_mcl.inf_highxreg i64 
    pop            pci_mcl.inf_highreg i64 
    push           0          i64 
    pop            pci_mcl.inf_assem i64 
    push           0          i64 
    store          pci_mcl.inf_r13used i64 
    store          pci_mcl.inf_r11used i64 
    pop            pci_mcl.inf_r10used i64 
    push           &pci_mcl.regset 
    clear                     block:16 
    push           &pci_mcl.xregset 
    clear                     block:16 
    push           &pci_mcl.isregvar 
    clear                     block:16 
    push           &pci_mcl.isxregvar 
    clear                     block:16 
#16476: 
    retproc                   
End


Proc pc_stackmcl.newopnd:
    param          pc_stackmcl.newopnd.fmt i64 
    procentry                 
    push           pci_mcl.noperands i64 
    push           200        i64 
    jumplt         #16478     i64 
    setargs                   2 0
    push           ""         u64 
    push           "PCL stack overflow" u64 
    callproc       &pc_libmcl.merror 
#16478: 
    push           &pci_mcl.noperands 
    incr                      i64 1
    push           pci_mcl.pclstack u64 
    push           0          i64 
    addrefoff                 block:15 15 -15
    pop            pci_mcl.pclstack u64 
    push           pci_mcl.pclstackzero block:15 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    popptroff                 block:15 15 -15
    push           pc_stackmcl.newopnd.fmt i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
    push           &pci_mcl.loccodes 
    push           pc_stackmcl.newopnd.fmt i64 
    pushptroff                u8 1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           1          
    popptroff                 u8 1 0
    push           0          i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    push           &pci_mcl.floatloc 
    push           pc_stackmcl.newopnd.fmt i64 
    pushptroff                u8 1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           3          
    popptroff                 u8 1 0
#16479: 
    retproc                   
End


Proc pc_stackmcl.duploperand:
    local          pc_stackmcl.duploperand.reg i64 
    procentry                 
    push           &pci_mcl.noperands 
    incr                      i64 1
    push           pci_mcl.pclstack u64 
    push           0          i64 
    addrefoff                 block:15 15 -15
    pop            pci_mcl.pclstack u64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    pushptroff                block:15 15 -15
    push           pci_mcl.pclstack u64 
    push           1          i64 
    popptroff                 block:15 15 -15
    push           &pci_mcl.loccodes 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u8 1 0
    push           4          i64 
    casejumpeq     #16481     i64 0
    push           5          i64 
    casejumpeq     #16482     i64 0
    push           7          i64 
    casejumpeq     #16483     i64 0
    push           1          i64 
    casejumpeq     #16484     i64 0
    push           2          i64 
    casejumpeq     #16485     i64 0
    push           3          i64 
    casejumpeq     #16486     i64 0
    popstack                  i64 
    jump           #16487     
#16481: 
    jump           #16488     
#16482: 
    jump           #16488     
#16483: 
    jump           #16488     
#16484: 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    pop            pc_stackmcl.duploperand.reg i64 
    push           pc_stackmcl.duploperand.reg i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.duploperand.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #16488     
#16485: 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextxreg i64 
    pop            pc_stackmcl.duploperand.reg i64 
    push           pc_stackmcl.duploperand.reg i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.duploperand.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenxreg u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #16488     
#16486: 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    pop            pc_stackmcl.duploperand.reg i64 
    setargs                   3 0
    push           pci_mcl.dstackopnd u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.duploperand.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.duploperand.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    jump           #16488     
#16487: 
#16488: 
#16489: 
    retproc                   
End


Proc pc_stackmcl.addint:
    param          pc_stackmcl.addint.a i64 
    procentry                 
    setargs                   1 0
    push           7          i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addint.a i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    popptroff                 i64 1 0
#16491: 
    retproc                   
End


Proc pc_stackmcl.addint128:
    param          pc_stackmcl.addint128.p u64 
    procentry                 
    setargs                   1 0
    push           7          i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addint128.p u64 
    push           1          i64 
    pushptroff                i64 8 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    popptroff                 i64 1 0
    setargs                   1 0
    push           7          i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addint128.p u64 
    pushptr                   i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    popptroff                 i64 1 0
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.setwideopnd 
#16493: 
    retproc                   
End


Proc pc_stackmcl.addreal:
    param          pc_stackmcl.addreal.x r64 
    procentry                 
    setargs                   1 0
    push           8          i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addreal.x r64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    popptroff                 r64 1 0
#16495: 
    retproc                   
End


Proc pc_stackmcl.addreal32:
    param          pc_stackmcl.addreal32.x r64 
    procentry                 
    setargs                   1 0
    push           9          i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addreal32.x r64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    popptroff                 r64 1 0
#16497: 
    retproc                   
End


Proc pc_stackmcl.addstring:
    param          pc_stackmcl.addstring.s u64 
    procentry                 
    setargs                   1 0
    push           10         i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addstring.s u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    popptroff                 u64 1 0
#16499: 
    retproc                   
End


Proc pc_stackmcl.addmem:
    param          pc_stackmcl.addmem.p u64 
    local          pc_stackmcl.addmem.ax u64 
    local          pc_stackmcl.addmem.d u64 
    procentry                 
    push           pc_stackmcl.addmem.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_stackmcl.addmem.d u64 
    push           &pc_tables.pcat 
    push           pc_stackmcl.addmem.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #16501     i64 0
    push           3          i64 
    casejumpeq     #16502     i64 0
    push           2          i64 
    casejumpeq     #16503     i64 0
    push           5          i64 
    casejumpeq     #16504     i64 0
    push           6          i64 
    casejumpeq     #16505     i64 0
    push           4          i64 
    casejumpeq     #16506     i64 0
    popstack                  i64 
    jump           #16507     
#16501: 
    push           pc_stackmcl.addmem.d u64 
    push           48         
    pushptroff                u8 1 0
    jumpfalse      #16508     i64 
    setargs                   1 0
    push           18         i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addmem.d u64 
    push           48         
    pushptroff                u8 1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    jump           #16509     
#16508: 
    setargs                   1 0
    push           14         i64 
    callproc       &pc_stackmcl.newopnd 
#16509: 
    jump           #16510     
#16502: 
    push           pc_stackmcl.addmem.d u64 
    push           48         
    pushptroff                u8 1 0
    jumpfalse      #16511     i64 
    setargs                   1 0
    push           19         i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addmem.d u64 
    push           48         
    pushptroff                u8 1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    jump           #16512     
#16511: 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_stackmcl.newopnd 
#16512: 
    jump           #16510     
#16503: 
    setargs                   1 0
    push           16         i64 
    callproc       &pc_stackmcl.newopnd 
    jump           #16510     
#16504: 
    setargs                   1 0
    push           17         i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addmem.d u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    popptroff                 u64 1 0
    push           72         i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           4          
    popptroff                 u8 1 0
    setargs                   1 0
    push           14         i64 
    callproc       &pc_stackmcl.newopnd 
    push           76         i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           4          
    popptroff                 u8 1 0
    jump           #16510     
#16505: 
    setargs                   1 0
    push           11         i64 
    callproc       &pc_stackmcl.newopnd 
    jump           #16510     
#16506: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_d64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    pop            pc_stackmcl.addmem.ax u64 
    setargs                   3 0
    setargs                   1 0
    push           pc_stackmcl.addmem.d u64 
    callfn         &pc_libmcl.mgenmem u64 
    push           pc_stackmcl.addmem.ax u64 
    startmult                 
    push           &pc_tables.psigned 
    push           pc_stackmcl.addmem.p u64 
    push           3          
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumpfalse      #16513     i64 
    push           19         i64 
    resetmult                 
    jump           #16514     
#16513: 
    push           20         i64 
    endmult                   
#16514: 
    callproc       &pc_libmcl.genmc 
    jump           #16515     
    jump           #16510     
#16507: 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_d64 
    setargs                   2 0
    push           ""         u64 
    push           "ADDMEM?"  u64 
    callproc       &pc_libmcl.merror 
#16510: 
    push           pc_stackmcl.addmem.d u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    popptroff                 u64 1 0
#16515: 
    retproc                   
End


Proc pc_stackmcl.addmemaddr:
    param          pc_stackmcl.addmemaddr.d u64 
    procentry                 
    setargs                   1 0
    push           11         i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addmemaddr.d u64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    popptroff                 u64 1 0
#16517: 
    retproc                   
End


Proc pc_stackmcl.addlabeladdr:
    param          pc_stackmcl.addlabeladdr.lab i64 
    procentry                 
    setargs                   1 0
    push           13         i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addlabeladdr.lab i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    popptroff                 i64 1 0
#16519: 
    retproc                   
End


Proc pc_stackmcl.addlabel:
    param          pc_stackmcl.addlabel.lab i64 
    param          pc_stackmcl.addlabel.offset i64 
    procentry                 
    setargs                   1 0
    push           12         i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addlabel.lab i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           7          
    popptroff                 i64 1 0
    push           pc_stackmcl.addlabel.offset i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           5          
    popptroff                 i16 1 0
#16521: 
    retproc                   
End


Proc pc_stackmcl.addreg0:
    param          pc_stackmcl.addreg0.reg i64 
    procentry                 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addreg0.reg i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    push           &pci_mcl.regset 
    push           pc_stackmcl.addreg0.reg i64 
    pushptroff                u8 1 -1
    jumpfalse      #16523     i64 
    setargs                   2 0
    push           ""         u64 
    push           "addreg0/reg in use" u64 
    callproc       &pc_libmcl.merror 
#16523: 
    push           1          i64 
    push           &pci_mcl.regset 
    push           pc_stackmcl.addreg0.reg i64 
    popptroff                 u8 1 -1
#16524: 
    retproc                   
End


Proc pc_stackmcl.addwidereg0:
    param          pc_stackmcl.addwidereg0.reg i64 
    local          pc_stackmcl.addwidereg0.reg2 i64 
    procentry                 
    push           pc_stackmcl.addwidereg0.reg i64 
    push           1          i64 
    add                       i64 
    pop            pc_stackmcl.addwidereg0.reg2 i64 
    push           pc_stackmcl.addwidereg0.reg2 i64 
    push           4          i64 
    jumpne         #16526     i64 
    push           11         i64 
    pop            pc_stackmcl.addwidereg0.reg2 i64 
#16526: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.newopnd 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addwidereg0.reg2 i64 
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    push           pc_stackmcl.addwidereg0.reg i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    push           &pci_mcl.regset 
    push           pc_stackmcl.addwidereg0.reg i64 
    pushptroff                u8 1 -1
    jumpfalse      #16527     i64 
    setargs                   2 0
    push           ""         u64 
    push           "addwidereg/reg(s) in use" u64 
    callproc       &pc_libmcl.merror 
#16527: 
    push           1          i64 
    push           &pci_mcl.regset 
    push           pc_stackmcl.addwidereg0.reg i64 
    popptroff                 u8 1 -1
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.setwideopnd 
#16528: 
    retproc                   
End


Proc pc_stackmcl.addxreg0:
    param          pc_stackmcl.addxreg0.reg i64 
    param          pc_stackmcl.addxreg0.fmt i64 
    procentry                 
    setargs                   1 0
    push           pc_stackmcl.addxreg0.fmt i64 
    callproc       &pc_stackmcl.newopnd 
    push           pc_stackmcl.addxreg0.reg i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    push           &pci_mcl.xregset 
    push           pc_stackmcl.addxreg0.reg i64 
    pushptroff                u8 1 -1
    jumpfalse      #16530     i64 
    setargs                   2 0
    push           ""         u64 
    push           "addxreg0/reg in use" u64 
    callproc       &pc_libmcl.merror 
#16530: 
    push           1          i64 
    push           &pci_mcl.xregset 
    push           pc_stackmcl.addxreg0.reg i64 
    popptroff                 u8 1 -1
#16531: 
    retproc                   
End


Proc pc_stackmcl.addreg_d64:
    procentry                 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_stackmcl.newopnd 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
#16533: 
    retproc                   
End


Proc pc_stackmcl.addreg_x64:
    procentry                 
    setargs                   1 0
    push           2          i64 
    callproc       &pc_stackmcl.newopnd 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextxreg i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
#16535: 
    retproc                   
End


Proc pc_stackmcl.addreg_x32:
    procentry                 
    setargs                   1 0
    push           3          i64 
    callproc       &pc_stackmcl.newopnd 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextxreg i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
#16537: 
    retproc                   
End


Proc pc_stackmcl.stropndstack: u64
    param          pc_stackmcl.stropndstack.indent i64 
    local          pc_stackmcl.stropndstack.str2 block:512 
    local          pc_stackmcl.stropndstack.s u64 
    local          pc_stackmcl.stropndstack.t u64 
    local          pc_stackmcl.stropndstack.pc block:15 
    local          pc_stackmcl.stropndstack.i i64 
    local          pc_stackmcl.stropndstack.r i64 
    procentry                 
    push           &pc_stackmcl.stropndstack.str 
    pop            pc_stackmcl.stropndstack.s u64 
    push           pc_stackmcl.stropndstack.indent i64 
    jumpfalse      #16539     i64 
    setargs                   1 0
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "                                     (" u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #16540     
#16539: 
    setargs                   1 0
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "("        u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#16540: 
#16541: 
    push           pci_mcl.noperands i64 
    pop            pc_stackmcl.stropndstack.i i64 
    push           pc_stackmcl.stropndstack.i i64 
    push           1          i64 
    jumplt         #16542     i64 
#16543: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.stropndstack.i i64 
    pushptroff                block:15 15 -15
    pop            pc_stackmcl.stropndstack.pc block:15 
    push           &pc_stackmcl.stropndstack.pc 
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #16544     i64 0
    push           7          i64 
    casejumpeq     #16545     i64 0
    push           2          i64 
    casejumpeq     #16546     i64 0
    push           8          i64 
    casejumpeq     #16547     i64 0
    push           3          i64 
    casejumpeq     #16548     i64 0
    push           5          i64 
    casejumpeq     #16549     i64 0
    popstack                  i64 
    jump           #16550     
#16544: 
    setargs                   2 0
    push           &pci_mcl.regnames 
    push           &pc_stackmcl.stropndstack.pc 
    push           2          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #16551     
#16545: 
    setargs                   2 0
    push           &pci_mcl.regnames 
    push           &pc_stackmcl.stropndstack.pc 
    push           2          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           "="        u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           &pc_stackmcl.stropndstack.pc 
    push           7          
    pushptroff                u64 1 0
    pushptr                   u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #16551     
#16546: 
    setargs                   2 0
    push           &pci_mcl.xregnames 
    push           &pc_stackmcl.stropndstack.pc 
    push           2          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           ":"        u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           &pci_mcl.fmtnames 
    push           &pc_stackmcl.stropndstack.pc 
    pushptr                   u8 
    pushptroff                u64 8 0
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #16551     
#16547: 
    setargs                   2 0
    push           &pci_mcl.xregnames 
    push           &pc_stackmcl.stropndstack.pc 
    push           2          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           "="        u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           &pc_stackmcl.stropndstack.pc 
    push           7          
    pushptroff                u64 1 0
    pushptr                   u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #16551     
#16548: 
    setargs                   2 0
    push           "T"        u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #16551     
#16549: 
    setargs                   2 0
    push           "M:"       u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           &pc_stackmcl.stropndstack.pc 
    push           7          
    pushptroff                u64 1 0
    pushptr                   u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #16551     
#16550: 
    push           &pc_stackmcl.stropndstack.pc 
    pushptr                   u8 
    push           7          i64 
    casejumpeq     #16552     i64 0
    push           8          i64 
    casejumpeq     #16553     i64 0
    push           10         i64 
    casejumpeq     #16554     i64 0
    push           11         i64 
    casejumpeq     #16555     i64 0
    push           13         i64 
    casejumpeq     #16556     i64 0
    push           12         i64 
    casejumpeq     #16557     i64 0
    popstack                  i64 
    jump           #16558     
#16552: 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           &pc_stackmcl.stropndstack.pc 
    push           7          
    pushptroff                i64 1 0
    callfn         &msysp.strint u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #16559     
#16553: 
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           &pc_stackmcl.stropndstack.pc 
    push           7          
    pushptroff                r64 1 0
    callfn         &msysp.strreal u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #16559     
#16554: 
    push           &pc_stackmcl.stropndstack.pc 
    push           7          
    pushptroff                u64 1 0
    pop            pc_stackmcl.stropndstack.t u64 
    setargs                   1 0
    push           pc_stackmcl.stropndstack.t u64 
    callfn         &strlen    i64 
    push           20         i64 
    jumple         #16560     i64 
    setargs                   2 0
    push           "LONG STR" u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #16561     
#16560: 
    setargs                   2 0
    push           "\""       u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           pc_stackmcl.stropndstack.s u64 
    setargs                   1 0
    push           pc_stackmcl.stropndstack.s u64 
    callfn         &strlen    i64 
    addrefoff                 u64 1 0
    push           pc_stackmcl.stropndstack.t u64 
    callproc       &pc_libpcl.convertstring 
    setargs                   2 0
    push           "\""       u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
#16561: 
    jump           #16559     
#16555: 
    setargs                   2 0
    push           "&"        u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           &pc_stackmcl.stropndstack.pc 
    push           7          
    pushptroff                u64 1 0
    pushptr                   u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #16559     
#16556: 
    setargs                   2 0
    push           "&#"       u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           &pc_stackmcl.stropndstack.pc 
    push           7          
    pushptroff                i64 1 0
    callfn         &msysp.strint u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #16559     
#16557: 
    setargs                   2 0
    push           "#"        u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           &pc_stackmcl.stropndstack.pc 
    push           7          
    pushptroff                i64 1 0
    callfn         &msysp.strint u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    jump           #16559     
#16558: 
    setargs                   2 0
    push           &pci_mcl.fmtnames 
    push           &pc_stackmcl.stropndstack.pc 
    pushptr                   u8 
    pushptroff                u64 8 0
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
#16559: 
#16551: 
    push           &pc_stackmcl.stropndstack.pc 
    push           4          
    pushptroff                u8 1 0
    jumpfalse      #16562     i64 
    setargs                   2 0
    startmult                 
    push           &pc_stackmcl.stropndstack.pc 
    push           4          
    pushptroff                u8 1 0
    push           72         i64 
    jumpne         #16563     i64 
    push           "(H)"      u64 
    resetmult                 
    jump           #16564     
#16563: 
    push           "(L)"      u64 
    endmult                   
#16564: 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
#16562: 
    push           pc_stackmcl.stropndstack.i i64 
    push           1          i64 
    jumple         #16565     i64 
    setargs                   2 0
    push           ","        u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
#16565: 
#16566: 
    fordown        #16543     i64 1
    opnd           pc_stackmcl.stropndstack.i 
    opnd           1          
#16542: 
    setargs                   2 0
    push           ") ("      u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
#16567: 
    push           1          i64 
    pop            pc_stackmcl.stropndstack.r i64 
#16568: 
    setargs                   2 0
    startmult                 
    push           &pci_mcl.regset 
    push           pc_stackmcl.stropndstack.r i64 
    pushptroff                u8 1 -1
    jumpfalse      #16569     i64 
    push           "1 "       u64 
    resetmult                 
    jump           #16570     
#16569: 
    push           "0 "       u64 
    endmult                   
#16570: 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
#16571: 
    forup          #16568     i64 1
    opnd           pc_stackmcl.stropndstack.r 
    opnd           10         
#16572: 
    setargs                   2 0
    push           ") ("      u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
#16573: 
    push           1          i64 
    pop            pc_stackmcl.stropndstack.r i64 
#16574: 
    setargs                   2 0
    startmult                 
    push           &pci_mcl.xregset 
    push           pc_stackmcl.stropndstack.r i64 
    pushptroff                u8 1 -1
    jumpfalse      #16575     i64 
    push           "1 "       u64 
    resetmult                 
    jump           #16576     
#16575: 
    push           "0 "       u64 
    endmult                   
#16576: 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
#16577: 
    forup          #16574     i64 1
    opnd           pc_stackmcl.stropndstack.r 
    opnd           7          
#16578: 
    setargs                   2 0
    push           ") hwstack:" u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pci_mcl.mstackdepth i64 
    callfn         &msysp.strint u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           " noperands:" u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pci_mcl.noperands i64 
    callfn         &msysp.strint u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           " ncalldepth:" u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           pci_mcl.ncalldepth i64 
    callfn         &msysp.strint u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    push           " callslots[]:" u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    setargs                   2 0
    setargs                   2 0
    push           0          u64 
    push           &pci_mcl.callslots 
    push           pci_mcl.ncalldepth i64 
    pushptroff                i64 8 -8
    callfn         &msysp.strint u64 
    push           pc_stackmcl.stropndstack.s u64 
    callproc       &strcat    
    push           pc_stackmcl.stropndstack.s u64 
    setret                    u64 
    jump           #16579     
#16579: 
    retfn                     u64 
End


Proc pc_stackmcl.loadopnd:
    param          pc_stackmcl.loadopnd.n i64 
    param          pc_stackmcl.loadopnd.nvreg i64 
    local          pc_stackmcl.loadopnd.reg i64 
    local          pc_stackmcl.loadopnd.value i64 
    local          pc_stackmcl.loadopnd.ax u64 
    procentry                 
    push           pc_stackmcl.loadopnd.n i64 
    push           pci_mcl.noperands i64 
    jumple         #16581     i64 
    setargs                   1 0
    push           "UNDERFLOW" u64 
    callproc       &pc_libmcl.mgencomment 
    jump           #16582     
    setargs                   2 0
    push           ""         u64 
    push           "loadopnd/underflow" u64 
    callproc       &pc_libmcl.merror 
#16581: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #16583     i64 
    jump           #16582     
#16583: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #16584     i64 
    jump           #16582     
#16584: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           3          
    pushptroff                u8 1 0
    jumpfalse      #16585     i64 
    setargs                   1 0
    push           pc_stackmcl.loadopnd.nvreg i64 
    callfn         &pc_stackmcl.getnextxreg i64 
    pop            pc_stackmcl.loadopnd.reg i64 
    jump           #16586     
#16585: 
    setargs                   1 0
    push           pc_stackmcl.loadopnd.nvreg i64 
    callfn         &pc_stackmcl.getnextreg i64 
    pop            pc_stackmcl.loadopnd.reg i64 
#16586: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           2          i64 
    casejumpeq     #16587     i64 0
    popstack                  i64 
    jump           #16588     
#16587: 
    setargs                   2 0
    push           ""         u64 
    push           "LOADOPND/XREG" u64 
    callproc       &pc_libmcl.merror 
    jump           #16589     
#16588: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           7          i64 
    casejumpeq     #16590     i64 0
    push           8          i64 
    casejumpeq     #16591     i64 0
    push           9          i64 
    casejumpeq     #16592     i64 0
    push           10         i64 
    casejumpeq     #16593     i64 0
    push           13         i64 
    casejumpeq     #16594     i64 0
    push           12         i64 
    casejumpeq     #16595     i64 0
    push           14         i64 
    casejumpeq     #16596     i64 0
    push           15         i64 
    casejumpeq     #16597     i64 0
    push           16         i64 
    casejumpeq     #16598     i64 0
    push           17         i64 
    casejumpeq     #16599     i64 0
    push           18         i64 
    casejumpeq     #16600     i64 0
    push           19         i64 
    casejumpeq     #16601     i64 0
    push           4          i64 
    casejumpeq     #16602     i64 0
    push           5          i64 
    casejumpeq     #16603     i64 0
    push           6          i64 
    casejumpeq     #16604     i64 0
    push           11         i64 
    casejumpeq     #16605     i64 0
    popstack                  i64 
    jump           #16606     
#16590: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    pop            pc_stackmcl.loadopnd.value i64 
    push           pc_stackmcl.loadopnd.value i64 
    push           0          i64 
    jumpne         #16607     i64 
    push           pci_mcl.noxorclear u8 
    jumptrue       #16607     i64 
    setargs                   2 0
    push           4          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_stackmcl.loadopnd.ax u64 
    setargs                   3 0
    push           pc_stackmcl.loadopnd.ax u64 
    push           pc_stackmcl.loadopnd.ax u64 
    push           41         i64 
    callproc       &pc_libmcl.genmc 
    jump           #16608     
#16607: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenint u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
#16608: 
    jump           #16609     
#16591: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                r64 1 0
    callfn         &pc_libmcl.mgenrealmem u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenxreg u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #16609     
#16592: 
    setargs                   3 0
    setargs                   2 0
    push           4          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                r64 1 0
    callfn         &pc_libmcl.mgenrealmem u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenxreg u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    jump           #16609     
#16593: 
    setargs                   3 0
    setargs                   1 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.getstringindex i64 
    callfn         &pc_libmcl.mgenlabel u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #16609     
#16594: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabel u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #16609     
#16595: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenlabelmem u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           5          
    pushptroff                i16 1 0
    push           pci_mcl.mccodex u64 
    push           16         
    pushptroff                u64 1 0
    push           14         
    popptroff                 i32 1 0
    jump           #16609     
#16596: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #16609     
#16597: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenxreg u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #16609     
#16598: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenxreg u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    jump           #16609     
#16599: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmemhigh u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #16609     
#16600: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenregvar u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #16609     
#16601: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenxregvar u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenxreg u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #16609     
#16602: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           14         i64 
    callproc       &pc_libmcl.genmc 
    push           &pci_mcl.mstackdepth 
    decr                      i64 1
    jump           #16609     
#16603: 
    push           pci_mcl.inf_r13used i64 
    jumpfalse      #16610     i64 
    setargs                   2 0
    push           ""         u64 
    push           "R13 in use" u64 
    callproc       &pc_libmcl.merror 
#16610: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           14         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           14         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           14         i64 
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenxreg u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    push           &pci_mcl.mstackdepth 
    decr                      i64 1
    jump           #16609     
#16604: 
    push           pci_mcl.inf_r13used i64 
    jumpfalse      #16611     i64 
    setargs                   2 0
    push           ""         u64 
    push           "R13 in use" u64 
    callproc       &pc_libmcl.merror 
#16611: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           14         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           14         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    setargs                   2 0
    push           4          i64 
    push           14         i64 
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenxreg u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    push           &pci_mcl.mstackdepth 
    decr                      i64 1
    jump           #16609     
#16605: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadopnd.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           15         i64 
    callproc       &pc_libmcl.genmc 
    jump           #16609     
#16606: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.stropndstack u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           &pci_mcl.fmtnames 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u64 8 0
    push           "LOADOPND??" u64 
    callproc       &pc_libmcl.merror 
#16609: 
#16589: 
    push           pc_stackmcl.loadopnd.reg i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    push           &pci_mcl.loadfmt 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u8 1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
    push           &pci_mcl.loccodes 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u8 1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadopnd.n i64 
    addrefoff                 block:15 15 -15
    push           1          
    popptroff                 u8 1 0
#16582: 
    retproc                   
End


Proc pc_stackmcl.loadparam:
    param          pc_stackmcl.loadparam.n i64 
    param          pc_stackmcl.loadparam.reg i64 
    local          pc_stackmcl.loadparam.oldreg i64 
    local          pc_stackmcl.loadparam.value i64 
    local          pc_stackmcl.loadparam.ax u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadparam.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_stackmcl.loadparam.ax u64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_stackmcl.loadparam.oldreg i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           1          i64 
    casejumpeq     #16613     i64 0
    push           18         i64 
    casejumpeq     #16613     i64 0
    push           2          i64 
    casejumpeq     #16614     i64 0
    push           19         i64 
    casejumpeq     #16614     i64 0
    push           3          i64 
    casejumpeq     #16615     i64 0
    push           7          i64 
    casejumpeq     #16616     i64 0
    push           8          i64 
    casejumpeq     #16617     i64 0
    push           10         i64 
    casejumpeq     #16618     i64 0
    push           14         i64 
    casejumpeq     #16619     i64 0
    push           17         i64 
    casejumpeq     #16620     i64 0
    push           11         i64 
    casejumpeq     #16621     i64 0
    push           15         i64 
    casejumpeq     #16622     i64 0
    push           4          i64 
    casejumpeq     #16623     i64 0
    popstack                  i64 
    jump           #16624     
#16613: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadparam.oldreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           pc_stackmcl.loadparam.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_stackmcl.loadparam.oldreg i64 
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_stackmcl.loadparam.oldreg i64 
    popptroff                 u8 1 -1
    jump           #16625     
#16614: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadparam.oldreg i64 
    callfn         &pc_libmcl.mgenxreg u64 
    push           pc_stackmcl.loadparam.ax u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #16626     
    jump           #16625     
#16615: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadparam.oldreg i64 
    callfn         &pc_libmcl.mgenxreg u64 
    setargs                   2 0
    push           4          i64 
    push           pc_stackmcl.loadparam.ax u64 
    callfn         &pc_libmcl.changeopndsize u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    jump           #16626     
    jump           #16625     
#16616: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    pop            pc_stackmcl.loadparam.value i64 
    push           pc_stackmcl.loadparam.value i64 
    push           0          i64 
    jumpne         #16627     i64 
    setargs                   2 0
    push           4          i64 
    push           pc_stackmcl.loadparam.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_stackmcl.loadparam.ax u64 
    setargs                   3 0
    push           pc_stackmcl.loadparam.ax u64 
    push           pc_stackmcl.loadparam.ax u64 
    push           41         i64 
    callproc       &pc_libmcl.genmc 
    jump           #16628     
#16627: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenint u64 
    push           pc_stackmcl.loadparam.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
#16628: 
    jump           #16625     
#16617: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                r64 1 0
    callfn         &pc_libmcl.mgenrealmem u64 
    push           pc_stackmcl.loadparam.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #16625     
#16618: 
    setargs                   3 0
    setargs                   1 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.getstringindex i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           pc_stackmcl.loadparam.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #16625     
#16619: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           pc_stackmcl.loadparam.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #16625     
#16620: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmemhigh u64 
    push           pc_stackmcl.loadparam.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #16625     
#16621: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           pc_stackmcl.loadparam.ax u64 
    push           15         i64 
    callproc       &pc_libmcl.genmc 
    jump           #16625     
#16622: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           pc_stackmcl.loadparam.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    jump           #16625     
#16623: 
    setargs                   3 0
    push           0          u64 
    push           pc_stackmcl.loadparam.ax u64 
    push           14         i64 
    callproc       &pc_libmcl.genmc 
    push           &pci_mcl.mstackdepth 
    decr                      i64 1
    jump           #16625     
#16624: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "LOADPARAM:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pci_mcl.fmtnames 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "LOADPARAM??" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "****LOADPARAM??" u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   2 0
    push           &pci_mcl.fmtnames 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u64 8 0
    push           "LOADPARAM??" u64 
    callproc       &pc_libmcl.merror 
#16625: 
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    push           1          
    popptroff                 u8 1 0
    push           pc_stackmcl.loadparam.reg i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadparam.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
#16626: 
    retproc                   
End


Proc pc_stackmcl.loadxparam:
    param          pc_stackmcl.loadxparam.n i64 
    param          pc_stackmcl.loadxparam.reg i64 
    local          pc_stackmcl.loadxparam.ax u64 
    procentry                 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.loadxparam.reg i64 
    callfn         &pc_libmcl.mgenxreg u64 
    pop            pc_stackmcl.loadxparam.ax u64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadxparam.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           1          i64 
    casejumpeq     #16630     i64 0
    push           18         i64 
    casejumpeq     #16630     i64 0
    push           2          i64 
    casejumpeq     #16631     i64 0
    push           19         i64 
    casejumpeq     #16631     i64 0
    push           3          i64 
    casejumpeq     #16632     i64 0
    push           8          i64 
    casejumpeq     #16633     i64 0
    push           9          i64 
    casejumpeq     #16634     i64 0
    push           14         i64 
    casejumpeq     #16635     i64 0
    push           15         i64 
    casejumpeq     #16635     i64 0
    push           16         i64 
    casejumpeq     #16636     i64 0
    popstack                  i64 
    jump           #16637     
#16630: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadxparam.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    push           pc_stackmcl.loadxparam.ax u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #16638     
#16631: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadxparam.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenxreg u64 
    push           pc_stackmcl.loadxparam.ax u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #16638     
#16632: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadxparam.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenxreg u64 
    push           pc_stackmcl.loadxparam.ax u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    jump           #16638     
#16633: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadxparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                r64 1 0
    callfn         &pc_libmcl.mgenrealmem u64 
    push           pc_stackmcl.loadxparam.ax u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #16638     
#16634: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadxparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                r64 1 0
    callfn         &pc_libmcl.mgenrealmem u64 
    push           pc_stackmcl.loadxparam.ax u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    jump           #16638     
#16635: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadxparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           pc_stackmcl.loadxparam.ax u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    jump           #16638     
#16636: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadxparam.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           pc_stackmcl.loadxparam.ax u64 
    push           17         i64 
    callproc       &pc_libmcl.genmc 
    jump           #16638     
#16637: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "??LOADXPARAM" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_stackmcl.loadxparam.n i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           pci_mcl.noperands i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "****LOADXPARAM??" u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   2 0
    push           &pci_mcl.fmtnames 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.loadxparam.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u64 8 0
    push           "LOADXPARAM??" u64 
    callproc       &pc_libmcl.merror 
#16638: 
#16639: 
    retproc                   
End


Proc pc_stackmcl.genopnd: u64
    param          pc_stackmcl.genopnd.index i64 
    param          pc_stackmcl.genopnd.size i64 
    local          pc_stackmcl.genopnd.ax u64 
    local          pc_stackmcl.genopnd.reg i64 
    local          pc_stackmcl.genopnd.value i64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #16641     i64 0
    push           7          i64 
    casejumpeq     #16642     i64 0
    push           2          i64 
    casejumpeq     #16643     i64 0
    push           8          i64 
    casejumpeq     #16644     i64 0
    popstack                  i64 
    jump           #16645     
#16641: 
    setargs                   2 0
    push           pc_stackmcl.genopnd.size i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    setret                    u64 
    jump           #16646     
    jump           #16647     
#16642: 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenregvar u64 
    setret                    u64 
    jump           #16646     
    jump           #16647     
#16643: 
    setargs                   2 0
    push           pc_stackmcl.genopnd.size i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenxreg u64 
    setret                    u64 
    jump           #16646     
    jump           #16647     
#16644: 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenxregvar u64 
    setret                    u64 
    jump           #16646     
    jump           #16647     
#16645: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           14         i64 
    casejumpeq     #16648     i64 0
    push           15         i64 
    casejumpeq     #16648     i64 0
    push           16         i64 
    casejumpeq     #16648     i64 0
    push           17         i64 
    casejumpeq     #16649     i64 0
    push           7          i64 
    casejumpeq     #16650     i64 0
    push           8          i64 
    casejumpeq     #16651     i64 0
    push           9          i64 
    casejumpeq     #16652     i64 0
    push           11         i64 
    casejumpeq     #16653     i64 0
    push           10         i64 
    casejumpeq     #16654     i64 0
    popstack                  i64 
    jump           #16655     
#16648: 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    setret                    u64 
    jump           #16646     
    jump           #16656     
#16649: 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmemhigh u64 
    setret                    u64 
    jump           #16646     
    jump           #16656     
#16650: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    pop            pc_stackmcl.genopnd.value i64 
    push           -2147483648 i64 
    push           pc_stackmcl.genopnd.value i64 
    jumpgt         #16657     i64 
    push           pc_stackmcl.genopnd.value i64 
    push           2147483647 i64 
    jumpgt         #16657     i64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.genopnd.value i64 
    callfn         &pc_libmcl.mgenint u64 
    setret                    u64 
    jump           #16646     
#16657: 
    setargs                   2 0
    push           8          i64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_stackmcl.genopnd.ax u64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.genopnd.value i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pc_stackmcl.genopnd.ax u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_stackmcl.genopnd.ax u64 
    push           10         
    pushptroff                u8 1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           1          
    popptroff                 u8 1 0
    push           pc_stackmcl.genopnd.ax u64 
    setret                    u64 
    jump           #16646     
    jump           #16656     
#16651: 
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                r64 1 0
    callfn         &pc_libmcl.mgenrealmem u64 
    setret                    u64 
    jump           #16646     
    jump           #16656     
#16652: 
    setargs                   2 0
    push           4          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                r64 1 0
    callfn         &pc_libmcl.mgenrealmem u64 
    setret                    u64 
    jump           #16646     
    jump           #16656     
#16653: 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    pop            pc_stackmcl.genopnd.reg i64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.genopnd.reg i64 
    callfn         &pc_libmcl.mgenreg u64 
    pop            pc_stackmcl.genopnd.ax u64 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           pc_stackmcl.genopnd.ax u64 
    push           15         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_stackmcl.genopnd.ax u64 
    push           10         
    pushptroff                u8 1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           1          
    popptroff                 u8 1 0
    push           pc_stackmcl.genopnd.ax u64 
    setret                    u64 
    jump           #16646     
    jump           #16656     
#16654: 
    setargs                   3 0
    setargs                   1 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.getstringindex i64 
    callfn         &pc_libmcl.mgenlabel u64 
    setargs                   2 0
    push           8          i64 
    setargs                   1 0
    push           0          i64 
    callfn         &pc_stackmcl.getnextreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    store          pc_stackmcl.genopnd.ax u64 
    push           15         i64 
    callproc       &pc_libmcl.genmc 
    push           pc_stackmcl.genopnd.ax u64 
    push           10         
    pushptroff                u8 1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
    push           1          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           1          
    popptroff                 u8 1 0
    push           pc_stackmcl.genopnd.ax u64 
    setret                    u64 
    jump           #16646     
    jump           #16656     
#16655: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "LOCNAMES[PCLSTACK[INDEX].LOC]=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pci_mcl.locnames 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "FMTNAMES[PCLSTACK[INDEX].FMT]=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pci_mcl.fmtnames 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd.index i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "GENOPND??" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "****GENOPND??" u64 
    callproc       &pc_libmcl.mgencomment 
#16656: 
#16647: 
    push           0          u64 
    setret                    u64 
    jump           #16646     
#16646: 
    retfn                     u64 
End


Proc pc_stackmcl.genopnd_ld: u64
    param          pc_stackmcl.genopnd_ld.index i64 
    param          pc_stackmcl.genopnd_ld.size i64 
    procentry                 
    setargs                   2 0
    push           0          i64 
    push           pc_stackmcl.genopnd_ld.index i64 
    callproc       &pc_stackmcl.loadopnd 
    setargs                   2 0
    push           pc_stackmcl.genopnd_ld.size i64 
    push           pc_stackmcl.genopnd_ld.index i64 
    callfn         &pc_stackmcl.genopnd u64 
    setret                    u64 
    jump           #16659     
#16659: 
    retfn                     u64 
End


Proc pc_stackmcl.genopnd_ind: u64
    param          pc_stackmcl.genopnd_ind.index i64 
    param          pc_stackmcl.genopnd_ind.size i64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd_ind.index i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #16661     i64 0
    popstack                  i64 
    jump           #16662     
#16661: 
    setargs                   3 0
    push           0          i64 
    push           pc_stackmcl.genopnd_ind.size i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd_ind.index i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenireg u64 
    setret                    u64 
    jump           #16663     
    setargs                   3 0
    push           0          i64 
    push           pc_stackmcl.genopnd_ind.size i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd_ind.index i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenireg u64 
    setret                    u64 
    jump           #16663     
    setargs                   3 0
    push           0          i64 
    push           pc_stackmcl.genopnd_ind.size i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.genopnd_ind.index i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenireg u64 
    setret                    u64 
    jump           #16663     
    jump           #16664     
#16662: 
#16664: 
    setargs                   2 0
    push           0          i64 
    push           pc_stackmcl.genopnd_ind.index i64 
    callproc       &pc_stackmcl.loadopnd 
    setargs                   2 0
    push           pc_stackmcl.genopnd_ind.size i64 
    push           pc_stackmcl.genopnd_ind.index i64 
    callfn         &pc_stackmcl.genopnd_ind u64 
    setret                    u64 
    jump           #16663     
#16663: 
    retfn                     u64 
End


Proc pc_stackmcl.genopnd_d64: u64
    procentry                 
    setargs                   0 0
    callproc       &pc_stackmcl.addreg_d64 
    setargs                   2 0
    push           8          i64 
    push           1          i64 
    callfn         &pc_stackmcl.genopnd u64 
    setret                    u64 
    jump           #16666     
#16666: 
    retfn                     u64 
End


Proc pc_stackmcl.setwideopnd:
    param          pc_stackmcl.setwideopnd.n i64 
    procentry                 
    push           76         i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.setwideopnd.n i64 
    addrefoff                 block:15 15 -15
    push           4          
    popptroff                 u8 1 0
    push           72         i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.setwideopnd.n i64 
    addrefoff                 block:15 15 0
    push           4          
    popptroff                 u8 1 0
#16668: 
    retproc                   
End


Proc pc_stackmcl.unsetwideopnd:
    param          pc_stackmcl.unsetwideopnd.n i64 
    procentry                 
    push           0          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.unsetwideopnd.n i64 
    addrefoff                 block:15 15 -15
    push           4          
    popptroff                 u8 1 0
#16670: 
    retproc                   
End


Proc pc_stackmcl.getnextreg: i64
    param          pc_stackmcl.getnextreg.nvreg i64 
    local          pc_stackmcl.getnextreg.reg i64 
    local          pc_stackmcl.getnextreg.firstreg i64 
    local          pc_stackmcl.getnextreg.r i64 
    local          pc_stackmcl.getnextreg.i i64 
    procentry                 
    startmult                 
    push           pc_stackmcl.getnextreg.nvreg i64 
    jumpfalse      #16672     i64 
    push           4          i64 
    resetmult                 
    jump           #16673     
#16672: 
    push           1          i64 
    endmult                   
#16673: 
    pop            pc_stackmcl.getnextreg.firstreg i64 
#16674: 
    push           pc_stackmcl.getnextreg.firstreg i64 
    pop            pc_stackmcl.getnextreg.r i64 
    push           pc_stackmcl.getnextreg.r i64 
    push           10         i64 
    jumpgt         #16675     i64 
#16676: 
    push           &pci_mcl.regset 
    push           pc_stackmcl.getnextreg.r i64 
    pushptroff                u8 1 -1
    push           0          i64 
    jumpne         #16677     i64 
    push           1          i64 
    push           &pci_mcl.regset 
    push           pc_stackmcl.getnextreg.r i64 
    popptroff                 u8 1 -1
    push           &pci_mcl.inf_highreg 
    push           pc_stackmcl.getnextreg.r i64 
    maxto                     i64 
    push           pc_stackmcl.getnextreg.r i64 
    setret                    i64 
    jump           #16678     
#16677: 
#16679: 
    forup          #16676     i64 1
    opnd           pc_stackmcl.getnextreg.r 
    opnd           10         
#16675: 
#16680: 
    push           pci_mcl.noperands i64 
    pop            pc_stackmcl.getnextreg.i i64 
    push           pc_stackmcl.getnextreg.i i64 
    push           1          i64 
    jumplt         #16681     i64 
#16682: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.getnextreg.i i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #16683     i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.getnextreg.i i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_stackmcl.getnextreg.reg i64 
    push           pc_stackmcl.getnextreg.reg i64 
    push           pc_stackmcl.getnextreg.firstreg i64 
    jumplt         #16684     i64 
    setargs                   1 0
    push           pc_stackmcl.getnextreg.i i64 
    callproc       &pc_stackmcl.pushopnd 
    setargs                   1 0
    push           pc_stackmcl.getnextreg.nvreg i64 
    callfn         &pc_stackmcl.getnextreg i64 
    setret                    i64 
    jump           #16678     
#16684: 
#16683: 
#16685: 
    fordown        #16682     i64 1
    opnd           pc_stackmcl.getnextreg.i 
    opnd           1          
#16681: 
    setargs                   2 0
    push           ""         u64 
    push           "NO FREE REGS" u64 
    callproc       &pc_libmcl.merror 
    push           0          i64 
    setret                    i64 
    jump           #16678     
#16678: 
    retfn                     i64 
End


Proc pc_stackmcl.getnextxreg: i64
    param          pc_stackmcl.getnextxreg.nvreg i64 
    local          pc_stackmcl.getnextxreg.reg i64 
    local          pc_stackmcl.getnextxreg.firstreg i64 
    local          pc_stackmcl.getnextxreg.r i64 
    local          pc_stackmcl.getnextxreg.i i64 
    procentry                 
    startmult                 
    push           pc_stackmcl.getnextxreg.nvreg i64 
    jumpfalse      #16687     i64 
    push           7          i64 
    resetmult                 
    jump           #16688     
#16687: 
    push           5          i64 
    endmult                   
#16688: 
    pop            pc_stackmcl.getnextxreg.firstreg i64 
#16689: 
    push           pc_stackmcl.getnextxreg.firstreg i64 
    pop            pc_stackmcl.getnextxreg.r i64 
    push           pc_stackmcl.getnextxreg.r i64 
    push           10         i64 
    jumpgt         #16690     i64 
#16691: 
    push           &pci_mcl.xregset 
    push           pc_stackmcl.getnextxreg.r i64 
    pushptroff                u8 1 -1
    push           0          i64 
    jumpne         #16692     i64 
    push           1          i64 
    push           &pci_mcl.xregset 
    push           pc_stackmcl.getnextxreg.r i64 
    popptroff                 u8 1 -1
    push           &pci_mcl.inf_highxreg 
    push           pc_stackmcl.getnextxreg.r i64 
    maxto                     i64 
    push           pc_stackmcl.getnextxreg.r i64 
    setret                    i64 
    jump           #16693     
#16692: 
#16694: 
    forup          #16691     i64 1
    opnd           pc_stackmcl.getnextxreg.r 
    opnd           10         
#16690: 
#16695: 
    push           pci_mcl.noperands i64 
    pop            pc_stackmcl.getnextxreg.i i64 
    push           pc_stackmcl.getnextxreg.i i64 
    push           1          i64 
    jumplt         #16696     i64 
#16697: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.getnextxreg.i i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #16698     i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.getnextxreg.i i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_stackmcl.getnextxreg.reg i64 
    push           pc_stackmcl.getnextxreg.reg i64 
    push           pc_stackmcl.getnextxreg.firstreg i64 
    jumplt         #16699     i64 
    setargs                   1 0
    push           pc_stackmcl.getnextxreg.i i64 
    callproc       &pc_stackmcl.pushopnd 
    setargs                   1 0
    push           pc_stackmcl.getnextxreg.nvreg i64 
    callfn         &pc_stackmcl.getnextxreg i64 
    setret                    i64 
    jump           #16693     
#16699: 
#16698: 
#16700: 
    fordown        #16697     i64 1
    opnd           pc_stackmcl.getnextxreg.i 
    opnd           1          
#16696: 
    setargs                   2 0
    push           ""         u64 
    push           "NO FREE XREGS" u64 
    callproc       &pc_libmcl.merror 
    push           0          i64 
    setret                    i64 
    jump           #16693     
#16693: 
    retfn                     i64 
End


Proc pc_stackmcl.delopnd:
    procentry                 
    push           pci_mcl.noperands i64 
    push           0          i64 
    jumpgt         #16702     i64 
    setargs                   1 0
    push           "****DELND/UNDERFLOW" u64 
    callproc       &pc_libmcl.mgencomment 
    jump           #16703     
    setargs                   2 0
    push           ""         u64 
    push           "popopnd/underflow" u64 
    callproc       &pc_libmcl.merror 
#16702: 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #16704     i64 0
    push           7          i64 
    casejumpeq     #16704     i64 0
    push           2          i64 
    casejumpeq     #16705     i64 0
    push           8          i64 
    casejumpeq     #16705     i64 0
    push           5          i64 
    casejumpeq     #16706     i64 0
    push           4          i64 
    casejumpeq     #16707     i64 0
    popstack                  i64 
    jump           #16708     
#16704: 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    jump           #16709     
#16705: 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callproc       &pc_stackmcl.freexreg 
    jump           #16709     
#16706: 
    jump           #16709     
#16707: 
    jump           #16709     
#16708: 
    setargs                   2 0
    push           &pci_mcl.locnames 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    push           "Can't pop opnd: #" u64 
    callproc       &pc_libmcl.merror 
#16709: 
    push           &pci_mcl.noperands 
    decr                      i64 1
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    pop            pci_mcl.pclstack u64 
#16703: 
    retproc                   
End


Proc pc_stackmcl.freexreg:
    param          pc_stackmcl.freexreg.xr i64 
    procentry                 
    push           0          i64 
    push           &pci_mcl.xregset 
    push           pc_stackmcl.freexreg.xr i64 
    popptroff                 u8 1 -1
#16711: 
    retproc                   
End


Proc pc_stackmcl.pushopnd:
    param          pc_stackmcl.pushopnd.n i64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #16713     i64 0
    push           7          i64 
    casejumpeq     #16714     i64 0
    push           2          i64 
    casejumpeq     #16715     i64 0
    push           3          i64 
    casejumpeq     #16716     i64 0
    popstack                  i64 
    jump           #16717     
#16713: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    jump           #16718     
#16714: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenreg u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    jump           #16718     
#16715: 
    push           pci_mcl.inf_r13used i64 
    jumpfalse      #16719     i64 
    setargs                   2 0
    push           ""         u64 
    push           "2:R13 in use" u64 
    callproc       &pc_libmcl.merror 
#16719: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callfn         &pc_libmcl.mgenxreg u64 
    setargs                   2 0
    push           8          i64 
    push           14         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           18         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           14         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callproc       &pc_stackmcl.freexreg 
    jump           #16718     
#16716: 
    jump           #16720     
    jump           #16718     
#16717: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           17         i64 
    casejumpeq     #16721     i64 0
    push           14         i64 
    casejumpeq     #16722     i64 0
    push           15         i64 
    casejumpeq     #16722     i64 0
    push           16         i64 
    casejumpeq     #16723     i64 0
    push           7          i64 
    casejumpeq     #16724     i64 0
    push           8          i64 
    casejumpeq     #16725     i64 0
    push           10         i64 
    casejumpeq     #16726     i64 0
    push           11         i64 
    casejumpeq     #16727     i64 0
    popstack                  i64 
    jump           #16728     
#16721: 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmemhigh u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    jump           #16729     
#16722: 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    jump           #16729     
#16723: 
    push           pci_mcl.inf_r13used i64 
    jumpfalse      #16730     i64 
    setargs                   2 0
    push           ""         u64 
    push           "4:R13 in use" u64 
    callproc       &pc_libmcl.merror 
#16730: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    setargs                   2 0
    push           4          i64 
    push           14         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           14         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    jump           #16729     
#16724: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                i64 1 0
    callfn         &pc_libmcl.mgenint u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    jump           #16729     
#16725: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                r64 1 0
    callfn         &pc_libmcl.mgenrealmem u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    jump           #16729     
#16726: 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.getstringindex i64 
    callfn         &pc_libmcl.mgenlabel u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    jump           #16729     
#16727: 
    push           pci_mcl.inf_r13used i64 
    jumpfalse      #16731     i64 
    setargs                   2 0
    push           ""         u64 
    push           "3:R13 in use" u64 
    callproc       &pc_libmcl.merror 
#16731: 
    setargs                   3 0
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           7          
    pushptroff                u64 1 0
    callfn         &pc_libmcl.mgenmem u64 
    setargs                   2 0
    push           8          i64 
    push           14         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           15         i64 
    callproc       &pc_libmcl.genmc 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           8          i64 
    push           14         i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           13         i64 
    callproc       &pc_libmcl.genmc 
    jump           #16729     
#16728: 
    setargs                   2 0
    push           &pci_mcl.fmtnames 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u64 8 0
    push           "Can't push opnd: #" u64 
    callproc       &pc_libmcl.merror 
#16729: 
#16718: 
    push           3          i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           1          
    popptroff                 u8 1 0
    push           &pci_mcl.pushfmt 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u8 1 0
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.pushopnd.n i64 
    addrefoff                 block:15 15 -15
    push           0          
    popptroff                 u8 1 0
    push           &pci_mcl.mstackdepth 
    incr                      i64 1
#16720: 
    retproc                   
End


Proc pc_stackmcl.pushallopnds:
    param          pc_stackmcl.pushallopnds.n i64 
    local          pc_stackmcl.pushallopnds.i i64 
    procentry                 
#16733: 
    push           pci_mcl.noperands i64 
    pop            pc_stackmcl.pushallopnds.i i64 
    push           pc_stackmcl.pushallopnds.i i64 
    push           pc_stackmcl.pushallopnds.n i64 
    jumplt         #16734     i64 
#16735: 
    setargs                   1 0
    push           pc_stackmcl.pushallopnds.i i64 
    callproc       &pc_stackmcl.pushopnd 
#16736: 
    fordown        #16735     i64 1
    opnd           pc_stackmcl.pushallopnds.i 
    opnd           pc_stackmcl.pushallopnds.n 
#16734: 
#16737: 
    retproc                   
End


Proc pc_stackmcl.poparg:
    procentry                 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #16739     i64 0
    push           2          i64 
    casejumpeq     #16740     i64 0
    push           3          i64 
    casejumpeq     #16741     i64 0
    push           4          i64 
    casejumpeq     #16742     i64 0
    push           5          i64 
    casejumpeq     #16743     i64 0
    push           7          i64 
    casejumpeq     #16744     i64 0
    push           8          i64 
    casejumpeq     #16745     i64 0
    popstack                  i64 
    jump           #16746     
#16739: 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    popptroff                 u8 1 -1
    jump           #16747     
#16740: 
    setargs                   1 0
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    callproc       &pc_stackmcl.freexreg 
    jump           #16747     
#16741: 
    jump           #16747     
#16742: 
    jump           #16747     
#16743: 
    jump           #16747     
#16744: 
    jump           #16747     
#16745: 
    jump           #16747     
#16746: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "POPARG:"  u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pci_mcl.locnames 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "****POPARG?" u64 
    callproc       &pc_libmcl.mgencomment 
    setargs                   2 0
    push           &pci_mcl.locnames 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    push           "poparg? #" u64 
    callproc       &pc_libmcl.merror 
#16747: 
    push           &pci_mcl.noperands 
    decr                      i64 1
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    pop            pci_mcl.pclstack u64 
#16748: 
    retproc                   
End


Proc pc_stackmcl.pushslots:
    param          pc_stackmcl.pushslots.nslots i64 
    procentry                 
    setargs                   1 0
    push           pc_stackmcl.pushslots.nslots i64 
    push           8          i64 
    mul                       i64 
    callproc       &pc_stackmcl.pushstack 
    push           &pci_mcl.mstackdepth 
    push           pc_stackmcl.pushslots.nslots i64 
    addto                     i64 
#16750: 
    retproc                   
End


Proc pc_stackmcl.popslots:
    param          pc_stackmcl.popslots.nslots i64 
    procentry                 
    setargs                   1 0
    push           pc_stackmcl.popslots.nslots i64 
    push           8          i64 
    mul                       i64 
    callproc       &pc_stackmcl.popstack 
    push           &pci_mcl.mstackdepth 
    push           pc_stackmcl.popslots.nslots i64 
    subto                     i64 
#16752: 
    retproc                   
End


Proc pc_stackmcl.pushstack:
    param          pc_stackmcl.pushstack.n i64 
    procentry                 
    push           pc_stackmcl.pushstack.n i64 
    jumpfalse      #16754     i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.pushstack.n i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pci_mcl.dstackopnd u64 
    push           30         i64 
    callproc       &pc_libmcl.genmc 
#16754: 
#16755: 
    retproc                   
End


Proc pc_stackmcl.popstack:
    param          pc_stackmcl.popstack.n i64 
    procentry                 
    push           pc_stackmcl.popstack.n i64 
    jumpfalse      #16757     i64 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.popstack.n i64 
    callfn         &pc_libmcl.mgenint u64 
    push           pci_mcl.dstackopnd u64 
    push           29         i64 
    callproc       &pc_libmcl.genmc 
#16757: 
#16758: 
    retproc                   
End


Proc pc_stackmcl.saveopnd:
    param          pc_stackmcl.saveopnd.n i64 
    local          pc_stackmcl.saveopnd.reg i64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.saveopnd.n i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #16760     i64 0
    push           2          i64 
    casejumpeq     #16761     i64 0
    push           3          i64 
    casejumpeq     #16762     i64 0
    push           7          i64 
    casejumpeq     #16763     i64 0
    push           8          i64 
    casejumpeq     #16763     i64 0
    push           4          i64 
    casejumpeq     #16764     i64 0
    popstack                  i64 
    jump           #16765     
#16760: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.saveopnd.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_stackmcl.saveopnd.reg i64 
    push           pc_stackmcl.saveopnd.reg i64 
    push           1          i64 
    push           3          i64 
    jumpnotinrange #16766     i64 
    setargs                   1 0
    push           pc_stackmcl.saveopnd.n i64 
    callproc       &pc_stackmcl.pushopnd 
#16766: 
    jump           #16767     
#16761: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.saveopnd.n i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_stackmcl.saveopnd.reg i64 
    push           pc_stackmcl.saveopnd.reg i64 
    push           1          i64 
    push           6          i64 
    jumpnotinrange #16768     i64 
    setargs                   1 0
    push           pc_stackmcl.saveopnd.n i64 
    callproc       &pc_stackmcl.pushopnd 
#16768: 
    jump           #16767     
#16762: 
    jump           #16767     
#16763: 
    jump           #16767     
#16764: 
    setargs                   1 0
    push           pc_stackmcl.saveopnd.n i64 
    callproc       &pc_stackmcl.pushopnd 
    jump           #16767     
#16765: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.saveopnd.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    push           17         i64 
    casejumpeq     #16769     i64 0
    push           14         i64 
    casejumpeq     #16770     i64 0
    push           15         i64 
    casejumpeq     #16770     i64 0
    push           16         i64 
    casejumpeq     #16770     i64 0
    popstack                  i64 
    jump           #16771     
#16769: 
    setargs                   1 0
    push           pc_stackmcl.saveopnd.n i64 
    callproc       &pc_stackmcl.pushopnd 
    jump           #16772     
#16770: 
    setargs                   1 0
    push           pc_stackmcl.saveopnd.n i64 
    callproc       &pc_stackmcl.pushopnd 
    jump           #16772     
#16771: 
    setargs                   2 0
    push           &pci_mcl.fmtnames 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.saveopnd.n i64 
    addrefoff                 block:15 15 -15
    pushptr                   u8 
    pushptroff                u64 8 0
    push           "Can't save opnd: #" u64 
    callproc       &pc_libmcl.merror 
#16772: 
#16767: 
#16773: 
    retproc                   
End


Proc pc_stackmcl.saveallopnds:
    param          pc_stackmcl.saveallopnds.n i64 
    local          pc_stackmcl.saveallopnds.i i64 
    procentry                 
#16775: 
    push           pci_mcl.noperands i64 
    pop            pc_stackmcl.saveallopnds.i i64 
    push           pc_stackmcl.saveallopnds.i i64 
    push           pc_stackmcl.saveallopnds.n i64 
    jumplt         #16776     i64 
#16777: 
    setargs                   1 0
    push           pc_stackmcl.saveallopnds.i i64 
    callproc       &pc_stackmcl.saveopnd 
#16778: 
    fordown        #16777     i64 1
    opnd           pc_stackmcl.saveallopnds.i 
    opnd           pc_stackmcl.saveallopnds.n 
#16776: 
#16779: 
    retproc                   
End


Proc pc_stackmcl.movetoreg:
    param          pc_stackmcl.movetoreg.newreg i64 
    local          pc_stackmcl.movetoreg.oldreg i64 
    procentry                 
    setargs                   2 0
    push           0          i64 
    push           1          i64 
    callproc       &pc_stackmcl.loadopnd 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_stackmcl.movetoreg.oldreg i64 
    push           pc_stackmcl.movetoreg.oldreg i64 
    push           pc_stackmcl.movetoreg.newreg i64 
    jumpne         #16781     i64 
    jump           #16782     
#16781: 
    push           &pci_mcl.regset 
    push           pc_stackmcl.movetoreg.newreg i64 
    pushptroff                u8 1 -1
    jumpfalse      #16783     i64 
    setargs                   2 0
    push           ""         u64 
    push           "movereg/reg in use" u64 
    callproc       &pc_libmcl.merror 
#16783: 
    setargs                   3 0
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.movetoreg.oldreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    setargs                   2 0
    push           8          i64 
    push           pc_stackmcl.movetoreg.newreg i64 
    callfn         &pc_libmcl.mgenreg u64 
    push           12         i64 
    callproc       &pc_libmcl.genmc 
    push           0          i64 
    push           &pci_mcl.regset 
    push           pc_stackmcl.movetoreg.oldreg i64 
    popptroff                 u8 1 -1
    push           1          i64 
    push           pci_mcl.mccodex u64 
    push           43         
    addrefoff                 u64 1 0
    push           pc_stackmcl.movetoreg.oldreg i64 
    popptroff                 u8 1 -1
    push           pc_stackmcl.movetoreg.newreg i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    popptroff                 u8 1 0
    push           1          i64 
    push           &pci_mcl.regset 
    push           pc_stackmcl.movetoreg.newreg i64 
    popptroff                 u8 1 -1
    push           pc_stackmcl.movetoreg.newreg i64 
    push           11         i64 
    jumplt         #16784     i64 
    push           &pci_mcl.inf_highreg 
    push           pc_stackmcl.movetoreg.newreg i64 
    maxto                     i64 
#16784: 
#16782: 
    retproc                   
End


Proc pc_stackmcl.swapopnds:
    param          pc_stackmcl.swapopnds.m i64 
    param          pc_stackmcl.swapopnds.n i64 
    local          pc_stackmcl.swapopnds.t block:15 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.swapopnds.m i64 
    pushptroff                block:15 15 -15
    pop            pc_stackmcl.swapopnds.t block:15 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.swapopnds.n i64 
    pushptroff                block:15 15 -15
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.swapopnds.m i64 
    popptroff                 block:15 15 -15
    push           pc_stackmcl.swapopnds.t block:15 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.swapopnds.n i64 
    popptroff                 block:15 15 -15
#16786: 
    retproc                   
End


Proc pc_stackmcl.swapopndregs:
    param          pc_stackmcl.swapopndregs.reg2 i64 
    local          pc_stackmcl.swapopndregs.reg1 i64 
    local          pc_stackmcl.swapopndregs.i i64 
    procentry                 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    pop            pc_stackmcl.swapopndregs.reg1 i64 
#16788: 
    push           2          i64 
    pop            pc_stackmcl.swapopndregs.i i64 
    push           pci_mcl.noperands i64 
    push           2          i64 
    jumplt         #16789     i64 
#16790: 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.swapopndregs.i i64 
    addrefoff                 block:15 15 -15
    push           1          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #16791     i64 
    push           pci_mcl.pclstack u64 
    push           pc_stackmcl.swapopndregs.i i64 
    addrefoff                 block:15 15 -15
    push           2          
    pushptroff                u8 1 0
    push           pc_stackmcl.swapopndregs.reg2 i64 
    jumpne         #16791     i64 
    push           pci_mcl.pclstack u64 
    push           1          i64 
    addrefoff                 block:15 15 -15
    push           2          
    addrefoff                 u64 1 0
    push           pci_mcl.pclstack u64 
    push           2          i64 
    addrefoff                 block:15 15 -15
    push           2          
    addrefoff                 u64 1 0
    swap                      u8 
    jump           #16792     
#16791: 
#16793: 
    forup          #16790     i64 1
    opnd           pc_stackmcl.swapopndregs.i 
    opnd           pci_mcl.noperands 
#16789: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           pci_mcl.procdef u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           ""         u64 
    push           "swapopndregs/reg not found" u64 
    callproc       &pc_libmcl.merror 
#16794: 
#16792: 
    retproc                   
End


Proc pc_stackmcl.showopndstack:
    procentry                 
    setargs                   1 0
    setargs                   1 0
    push           1          i64 
    callfn         &pc_stackmcl.stropndstack u64 
    callproc       &pc_libmcl.mgencomment 
#16796: 
    retproc                   
End


Proc pc_genss.genss:
    local          pc_genss.genss.index i64 
    local          pc_genss.genss.m u64 
    procentry                 
    setargs                   1 0
    push           pci_mcl.mlabelno i64 
    callproc       &pc_genss.initlib 
    push           0          i64 
    pop            pci_mcl.ss_zdatalen i64 
    setargs                   1 0
    push           1024       i64 
    callfn         &pc_genss.buffercreate u64 
    pop            pci_mcl.ss_zdata u64 
    setargs                   1 0
    push           1024       i64 
    callfn         &pc_genss.buffercreate u64 
    pop            pci_mcl.ss_idata u64 
    setargs                   1 0
    push           1024       i64 
    callfn         &pc_genss.buffercreate u64 
    pop            pci_mcl.ss_code u64 
    push           0          u64 
    pop            pci_mcl.ss_idatarelocs u64 
    push           0          u64 
    pop            pci_mcl.ss_coderelocs u64 
    push           0          i64 
    pop            pci_mcl.ss_nsymbols i64 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_genss.switchseg 
    push           9999       i64 
    pop            pci_mcl.alineno i64 
    push           0          u64 
    pop            pc_genss.extraparam u64 
    setargs                   0 0
    callproc       &pc_genss.fixregvar 
    push           pci_mcl.mccode u64 
    pop            pc_genss.genss.m u64 
    push           0          i64 
    pop            pc_genss.genss.index i64 
    jump           #16798     
#16799: 
    setargs                   2 0
    push           &pc_genss.genss.index 
    incrload                  i64 1
    push           pc_genss.genss.m u64 
    callproc       &pc_genss.doinstr 
    push           pc_genss.genss.m u64 
    pushptr                   u64 
    pop            pc_genss.genss.m u64 
#16798: 
    push           pc_genss.genss.m u64 
    jumptrue       #16799     u64 
#16800: 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_genss.switchseg 
    setargs                   1 0
    push           pci_mcl.ss_zdata u64 
    callfn         &pc_genss.bufferlength i64 
    jumpfalse      #16801     i64 
    setargs                   1 0
    push           "Zdata contains code or data" u64 
    callproc       &pci_mcl.axerror 
#16801: 
#16802: 
    retproc                   
End


Proc pc_genss.doinstr:
    param          pc_genss.doinstr.m u64 
    param          pc_genss.doinstr.index i64 
    local          pc_genss.doinstr.a u64 
    local          pc_genss.doinstr.b u64 
    local          pc_genss.doinstr.d u64 
    local          pc_genss.doinstr.e u64 
    local          pc_genss.doinstr.x i64 
    local          pc_genss.doinstr.offset i64 
    local          pc_genss.doinstr.shortjmp i64 
    local          pc_genss.doinstr.n i64 
    local          pc_genss.doinstr.av_1 i64 
    local          pc_genss.doinstr.av_2 i64 
    procentry                 
    setargs                   2 0
    push           1024       i64 
    push           pc_genss.currdata u64 
    callproc       &pc_genss.buffercheck 
    push           0          i64 
    store          pc_genss.f3override i64 
    store          pc_genss.f2override i64 
    store          pc_genss.addroverride i64 
    store          pc_genss.sizeoverride i64 
    pop            pc_genss.rex i64 
    push           pc_genss.doinstr.m u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_genss.doinstr.a u64 
    push           pc_genss.doinstr.m u64 
    push           16         
    pushptroff                u64 1 0
    pop            pc_genss.doinstr.b u64 
    push           &pc_genss.instrno 
    incr                      i64 1
    push           pc_genss.instrno i64 
    pop            pci_mcl.alineno i64 
    push           pc_genss.doinstr.m u64 
    pop            pc_genss.currmcl u64 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    switch         #16804     1 148
    opnd           #16805     
#16804: 
    switchlabel    #16806     
    switchlabel    #16807     
    switchlabel    #16808     
    switchlabel    #16809     
    switchlabel    #16810     
    switchlabel    #16811     
    switchlabel    #16812     
    switchlabel    #16813     
    switchlabel    #16814     
    switchlabel    #16815     
    switchlabel    #16816     
    switchlabel    #16817     
    switchlabel    #16818     
    switchlabel    #16819     
    switchlabel    #16820     
    switchlabel    #16821     
    switchlabel    #16822     
    switchlabel    #16823     
    switchlabel    #16824     
    switchlabel    #16825     
    switchlabel    #16826     
    switchlabel    #16827     
    switchlabel    #16828     
    switchlabel    #16805     
    switchlabel    #16829     
    switchlabel    #16830     
    switchlabel    #16831     
    switchlabel    #16832     
    switchlabel    #16833     
    switchlabel    #16833     
    switchlabel    #16833     
    switchlabel    #16833     
    switchlabel    #16834     
    switchlabel    #16834     
    switchlabel    #16835     
    switchlabel    #16805     
    switchlabel    #16834     
    switchlabel    #16834     
    switchlabel    #16833     
    switchlabel    #16833     
    switchlabel    #16833     
    switchlabel    #16836     
    switchlabel    #16833     
    switchlabel    #16837     
    switchlabel    #16837     
    switchlabel    #16837     
    switchlabel    #16837     
    switchlabel    #16837     
    switchlabel    #16837     
    switchlabel    #16837     
    switchlabel    #16834     
    switchlabel    #16834     
    switchlabel    #16838     
    switchlabel    #16838     
    switchlabel    #16839     
    switchlabel    #16840     
    switchlabel    #16841     
    switchlabel    #16842     
    switchlabel    #16843     
    switchlabel    #16844     
    switchlabel    #16844     
    switchlabel    #16845     
    switchlabel    #16846     
    switchlabel    #16846     
    switchlabel    #16846     
    switchlabel    #16846     
    switchlabel    #16846     
    switchlabel    #16845     
    switchlabel    #16845     
    switchlabel    #16845     
    switchlabel    #16845     
    switchlabel    #16847     
    switchlabel    #16848     
    switchlabel    #16849     
    switchlabel    #16850     
    switchlabel    #16849     
    switchlabel    #16850     
    switchlabel    #16849     
    switchlabel    #16849     
    switchlabel    #16851     
    switchlabel    #16852     
    switchlabel    #16853     
    switchlabel    #16854     
    switchlabel    #16855     
    switchlabel    #16856     
    switchlabel    #16857     
    switchlabel    #16858     
    switchlabel    #16859     
    switchlabel    #16859     
    switchlabel    #16805     
    switchlabel    #16805     
    switchlabel    #16860     
    switchlabel    #16860     
    switchlabel    #16860     
    switchlabel    #16861     
    switchlabel    #16861     
    switchlabel    #16861     
    switchlabel    #16862     
    switchlabel    #16862     
    switchlabel    #16862     
    switchlabel    #16862     
    switchlabel    #16863     
    switchlabel    #16863     
    switchlabel    #16863     
    switchlabel    #16863     
    switchlabel    #16863     
    switchlabel    #16863     
    switchlabel    #16863     
    switchlabel    #16863     
    switchlabel    #16846     
    switchlabel    #16846     
    switchlabel    #16845     
    switchlabel    #16845     
    switchlabel    #16864     
    switchlabel    #16865     
    switchlabel    #16866     
    switchlabel    #16867     
    switchlabel    #16868     
    switchlabel    #16869     
    switchlabel    #16870     
    switchlabel    #16871     
    switchlabel    #16872     
    switchlabel    #16873     
    switchlabel    #16874     
    switchlabel    #16874     
    switchlabel    #16874     
    switchlabel    #16874     
    switchlabel    #16875     
    switchlabel    #16876     
    switchlabel    #16876     
    switchlabel    #16876     
    switchlabel    #16877     
    switchlabel    #16878     
    switchlabel    #16879     
    switchlabel    #16880     
    switchlabel    #16881     
    switchlabel    #16882     
    switchlabel    #16883     
    switchlabel    #16884     
    switchlabel    #16885     
    switchlabel    #16886     
    switchlabel    #16886     
    switchlabel    #16886     
    switchlabel    #16886     
    switchlabel    #16886     
    switchlabel    #16886     
    switchlabel    #16886     
    switchlabel    #16815     
    endswitch                 
#16806: 
    jump           #16887     
#16807: 
    jump           #16887     
#16812: 
    jump           #16887     
#16813: 
    jump           #16887     
#16810: 
    push           &pc_genss.ndeleted 
    incr                      i64 1
    jump           #16887     
#16811: 
    push           pc_genss.doinstr.a u64 
    push           12         
    pushptroff                u8 1 0
    push           4          i64 
    casejumpeq     #16888     i64 0
    push           5          i64 
    casejumpeq     #16889     i64 0
    popstack                  i64 
    jump           #16890     
#16888: 
    jump           #16891     
#16889: 
    push           pc_genss.doinstr.a u64 
    pushptr                   u64 
    pop            pc_genss.doinstr.d u64 
    push           2          i64 
    push           pc_genss.doinstr.d u64 
    push           29         
    popptroff                 u8 1 0
    push           pc_genss.currseg i64 
    push           pc_genss.doinstr.d u64 
    push           30         
    popptroff                 u8 1 0
    setargs                   1 0
    push           6          i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           pc_genss.doinstr.d u64 
    push           32         
    popptroff                 i32 1 0
    push           pc_genss.doinstr.d u64 
    push           46         
    pushptroff                u16 1 0
    push           3          i64 
    dotindex                  i64 
    jumpfalse      #16892     u64 
    setargs                   1 0
    push           pc_genss.doinstr.d u64 
    callproc       &pc_genss.getstindex 
#16892: 
    setargs                   1 0
    push           pc_genss.doinstr.d u64 
    callproc       &pc_genss.dofwdrefs 
    jump           #16891     
#16890: 
#16891: 
    jump           #16887     
#16814: 
    push           pci_mcl.labeldeftable u64 
    push           pc_genss.doinstr.a u64 
    pushptr                   i64 
    pushptroff                u64 8 -8
    pop            pc_genss.doinstr.d u64 
    push           2          i64 
    push           pc_genss.doinstr.d u64 
    push           29         
    popptroff                 u8 1 0
    push           pc_genss.currseg i64 
    push           pc_genss.doinstr.d u64 
    push           30         
    popptroff                 u8 1 0
    setargs                   1 0
    push           6          i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           pc_genss.doinstr.d u64 
    push           32         
    popptroff                 i32 1 0
    setargs                   1 0
    push           pc_genss.doinstr.d u64 
    callproc       &pc_genss.dofwdrefs 
    jump           #16887     
#16827: 
    setargs                   1 0
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_call 
    jump           #16887     
#16830: 
    setargs                   2 0
    push           pc_genss.doinstr.m u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_jmp 
    jump           #16887     
#16831: 
    setargs                   2 0
    push           1          i64 
    push           pc_genss.doinstr.a u64 
    callfn         &pc_genss.getdef u64 
    pop            pc_genss.doinstr.d u64 
    setargs                   2 0
    setargs                   1 0
    push           7          i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           1          i64 
    add                       i64 
    push           pc_genss.doinstr.d u64 
    callfn         &pc_genss.getrel32 i64 
    pop            pc_genss.doinstr.offset i64 
    push           pc_genss.doinstr.offset i64 
    push           0          i64 
    jumpge         #16893     i64 
    push           pc_genss.doinstr.offset i64 
    push           -126       i64 
    jumpge         #16894     i64 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           128        i64 
    push           pc_genss.doinstr.m u64 
    push           25         
    pushptroff                u8 1 0
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.doinstr.offset i64 
    push           4          i64 
    sub                       i64 
    callproc       &pc_genss.gendword 
    jump           #16895     
#16894: 
    setargs                   1 0
    push           112        i64 
    push           pc_genss.doinstr.m u64 
    push           25         
    pushptroff                u8 1 0
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.doinstr.offset i64 
    callproc       &pc_genss.genbyte 
#16895: 
    jump           #16896     
#16893: 
    setargs                   2 0
    push           pc_genss.doinstr.d u64 
    push           pc_genss.doinstr.m u64 
    callfn         &pc_genss.checkshortjump i64 
    pop            pc_genss.doinstr.shortjmp i64 
    push           pc_genss.doinstr.shortjmp i64 
    jumptrue       #16897     i64 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           128        i64 
    push           pc_genss.doinstr.m u64 
    push           25         
    pushptroff                u8 1 0
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.genrel32 
    jump           #16898     
#16897: 
    setargs                   1 0
    push           112        i64 
    push           pc_genss.doinstr.m u64 
    push           25         
    pushptroff                u8 1 0
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.genrel8 
#16898: 
#16896: 
    jump           #16887     
#16864: 
    setargs                   2 0
    push           1          i64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.genopnd 
    jump           #16887     
#16865: 
    setargs                   2 0
    push           2          i64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.genopnd 
    jump           #16887     
#16866: 
    setargs                   2 0
    push           4          i64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.genopnd 
    jump           #16887     
#16867: 
    setargs                   2 0
    push           8          i64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.genopnd 
    jump           #16887     
#16868: 
    setargs                   1 0
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.genrel32 
    jump           #16887     
#16869: 
    setargs                   1 0
    push           pc_genss.doinstr.a u64 
    pushptr                   i64 
    callproc       &pc_genss.switchseg 
    jump           #16887     
#16872: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_genss.switchseg 
    jump           #16887     
#16870: 
    setargs                   1 0
    push           2          i64 
    callproc       &pc_genss.switchseg 
    jump           #16887     
#16871: 
    setargs                   1 0
    push           3          i64 
    callproc       &pc_genss.switchseg 
    jump           #16887     
#16815: 
    setargs                   1 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    callproc       &pc_genss.genbyte 
    jump           #16887     
#16839: 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           152        i64 
    callproc       &pc_genss.genbyte 
    jump           #16887     
#16840: 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           153        i64 
    callproc       &pc_genss.genbyte 
    jump           #16887     
#16841: 
    setargs                   1 0
    push           153        i64 
    callproc       &pc_genss.genbyte 
    jump           #16887     
#16842: 
    setargs                   1 0
    push           72         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           153        i64 
    callproc       &pc_genss.genbyte 
    jump           #16887     
#16828: 
    setargs                   1 0
    push           195        i64 
    callproc       &pc_genss.genbyte 
    jump           #16887     
#16829: 
    push           pc_genss.doinstr.a u64 
    push           9          
    pushptroff                u8 1 0
    push           2          i64 
    jumpeq         #16899     i64 
    setargs                   1 0
    push           "retn?"    u64 
    callproc       &pci_mcl.axerror 
#16899: 
    setargs                   1 0
    push           194        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.doinstr.a u64 
    pushptr                   i64 
    callproc       &pc_genss.genword 
    jump           #16887     
#16818: 
    setargs                   1 0
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_push 
    jump           #16887     
#16819: 
    setargs                   1 0
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_pop 
    jump           #16887     
#16838: 
    setargs                   2 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_inc 
    jump           #16887     
#16834: 
    setargs                   2 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_neg 
    jump           #16887     
#16833: 
    setargs                   3 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_arith 
    jump           #16887     
#16817: 
    setargs                   2 0
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_mov 
    jump           #16887     
#16820: 
    setargs                   2 0
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_lea 
    jump           #16887     
#16824: 
    setargs                   3 0
    push           190        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_movsx 
    jump           #16887     
#16825: 
    setargs                   3 0
    push           182        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_movsx 
    jump           #16887     
#16826: 
    setargs                   2 0
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_movsxd 
    jump           #16887     
#16832: 
    setargs                   2 0
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_exch 
    jump           #16887     
#16835: 
    setargs                   2 0
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_imul2 
    jump           #16887     
#16874: 
    push           pc_genss.doinstr.a u64 
    push           9          
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #16900     i64 
    push           pc_genss.doinstr.a u64 
    pushptr                   i64 
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    mul                       i64 
    pop            pc_genss.doinstr.n i64 
    push           pc_genss.currseg i64 
    push           1          i64 
    casejumpeq     #16901     i64 0
    push           2          i64 
    casejumpeq     #16902     i64 0
    popstack                  i64 
    jump           #16903     
#16901: 
#16904: 
    push           pc_genss.doinstr.n i64 
    pop            pc_genss.doinstr.av_1 i64 
    push           pc_genss.doinstr.av_1 i64 
    push           0          i64 
    jumple         #16905     i64 
#16906: 
    setargs                   1 0
    push           144        i64 
    callproc       &pc_genss.genbyte 
#16907: 
    to             #16906     
    opnd           pc_genss.doinstr.av_1 
#16905: 
    jump           #16908     
#16902: 
#16909: 
    push           pc_genss.doinstr.n i64 
    pop            pc_genss.doinstr.av_2 i64 
    push           pc_genss.doinstr.av_2 i64 
    push           0          i64 
    jumple         #16910     i64 
#16911: 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_genss.genbyte 
#16912: 
    to             #16911     
    opnd           pc_genss.doinstr.av_2 
#16910: 
    jump           #16908     
#16903: 
    push           &pci_mcl.ss_zdatalen 
    push           pc_genss.doinstr.n i64 
    addto                     i64 
#16908: 
    jump           #16913     
#16900: 
    setargs                   1 0
    push           "resb?"    u64 
    callproc       &pci_mcl.axerror 
#16913: 
    jump           #16887     
#16873: 
    push           pc_genss.doinstr.a u64 
    push           9          
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #16914     i64 
    push           pc_genss.doinstr.a u64 
    pushptr                   i64 
    pop            pc_genss.doinstr.x i64 
    push           pc_genss.doinstr.x i64 
    push           1          i64 
    jumplt         #16915     i64 
    push           pc_genss.doinstr.x i64 
    push           16384      i64 
    jumple         #16916     i64 
#16915: 
    setargs                   1 0
    push           "align2"   u64 
    callproc       &pci_mcl.axerror 
#16916: 
    push           pc_genss.currseg i64 
    push           3          i64 
    jumpeq         #16917     i64 
    jump           #16918     
#16919: 
    setargs                   1 0
    startmult                 
    push           pc_genss.currseg i64 
    push           1          i64 
    jumpne         #16920     i64 
    push           144        i64 
    resetmult                 
    jump           #16921     
#16920: 
    push           0          i64 
    endmult                   
#16921: 
    callproc       &pc_genss.genbyte 
#16918: 
    setargs                   1 0
    push           pc_genss.currdata u64 
    callfn         &pc_genss.bufferlength i64 
    push           pc_genss.doinstr.x i64 
    irem                      i64 
    jumptrue       #16919     i64 
#16922: 
    jump           #16923     
#16917: 
    jump           #16924     
#16925: 
    push           &pci_mcl.ss_zdatalen 
    incr                      i64 1
#16924: 
    push           pci_mcl.ss_zdatalen i64 
    push           pc_genss.doinstr.x i64 
    irem                      i64 
    jumptrue       #16925     i64 
#16926: 
#16923: 
    jump           #16927     
#16914: 
    setargs                   1 0
    push           "align?"   u64 
    callproc       &pci_mcl.axerror 
#16927: 
    jump           #16887     
#16837: 
    setargs                   3 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_shift 
    jump           #16887     
#16836: 
    setargs                   2 0
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_test 
    jump           #16887     
#16876: 
    setargs                   2 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_loop 
    jump           #16887     
#16877: 
    setargs                   2 0
    push           4          i64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_jcxz 
    jump           #16887     
#16878: 
    setargs                   2 0
    push           8          i64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_jcxz 
    jump           #16887     
#16875: 
    setargs                   1 0
    push           215        i64 
    callproc       &pc_genss.genbyte 
    jump           #16887     
#16843: 
    setargs                   2 0
    push           pc_genss.doinstr.a u64 
    push           pc_genss.doinstr.m u64 
    push           25         
    pushptroff                u8 1 0
    callproc       &pc_genss.do_setcc 
    jump           #16887     
#16822: 
    setargs                   3 0
    push           4          i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_movxmm 
    jump           #16887     
#16823: 
    setargs                   3 0
    push           8          i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_movxmm 
    jump           #16887     
#16846: 
    setargs                   4 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           243        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_arithxmm 
    jump           #16887     
#16845: 
    setargs                   4 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           242        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_arithxmm 
    jump           #16887     
#16850: 
    setargs                   4 0
    push           4          i64 
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_logicxmm 
    jump           #16887     
#16849: 
    setargs                   4 0
    push           8          i64 
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_logicxmm 
    jump           #16887     
#16847: 
    setargs                   4 0
    push           47         i64 
    push           0          i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_arithxmm 
    jump           #16887     
#16848: 
    setargs                   4 0
    push           47         i64 
    push           102        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_arithxmm 
    jump           #16887     
#16858: 
    setargs                   3 0
    push           243        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_convertfloat 
    jump           #16887     
#16857: 
    setargs                   3 0
    push           242        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_convertfloat 
    jump           #16887     
#16851: 
    setargs                   4 0
    push           45         i64 
    push           243        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_fix 
    jump           #16887     
#16852: 
    setargs                   4 0
    push           45         i64 
    push           242        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_fix 
    jump           #16887     
#16853: 
    setargs                   4 0
    push           44         i64 
    push           243        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_fix 
    jump           #16887     
#16854: 
    setargs                   4 0
    push           44         i64 
    push           242        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_fix 
    jump           #16887     
#16855: 
    setargs                   3 0
    push           243        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_float 
    jump           #16887     
#16856: 
    setargs                   3 0
    push           242        i64 
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_float 
    jump           #16887     
#16816: 
    push           pc_genss.doinstr.a u64 
    pop            pc_genss.extraparam u64 
    jump           #16887     
#16821: 
    setargs                   3 0
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    push           pc_genss.doinstr.m u64 
    push           25         
    pushptroff                u8 1 0
    callproc       &pc_genss.do_cmovcc 
    jump           #16887     
#16863: 
    setargs                   1 0
    push           217        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    callproc       &pc_genss.genbyte 
    jump           #16887     
#16860: 
    setargs                   3 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           1          i64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_fmem 
    jump           #16887     
#16861: 
    setargs                   3 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           0          i64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_fmem 
    jump           #16887     
#16862: 
    setargs                   1 0
    push           222        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    callproc       &pc_genss.genbyte 
    jump           #16887     
#16879: 
    setargs                   1 0
    push           166        i64 
    callproc       &pc_genss.genbyte 
    jump           #16887     
#16880: 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           167        i64 
    callproc       &pc_genss.genbyte 
    jump           #16887     
#16881: 
    setargs                   1 0
    push           167        i64 
    callproc       &pc_genss.genbyte 
    jump           #16887     
#16882: 
    setargs                   1 0
    push           72         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           167        i64 
    callproc       &pc_genss.genbyte 
    jump           #16887     
#16883: 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    callproc       &pc_genss.genbyte 
    jump           #16887     
#16859: 
    setargs                   3 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_movdqx 
    jump           #16887     
#16885: 
    setargs                   1 0
    push           219        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           227        i64 
    callproc       &pc_genss.genbyte 
    jump           #16887     
#16886: 
    setargs                   1 0
    push           217        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    callproc       &pc_genss.genbyte 
    jump           #16887     
#16884: 
    setargs                   2 0
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_popcnt 
    jump           #16887     
#16844: 
    setargs                   3 0
    push           &pci_mcl.mclcodes 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    push           pc_genss.doinstr.b u64 
    push           pc_genss.doinstr.a u64 
    callproc       &pc_genss.do_bsf 
    jump           #16887     
#16808: 
    push           &pc_genss.ncomments 
    incr                      i64 1
    jump           #16887     
#16809: 
    push           &pc_genss.nblanks 
    incr                      i64 1
    jump           #16887     
#16805: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "*** Can't do opcode" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pci_mcl.mclnames 
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    pushptroff                u64 8 -8
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "line"     u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.alineno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           "M.OPCODE=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_genss.doinstr.m u64 
    push           24         
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           "M_HALT="  u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           148        i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "STOPPING" u64 
    callproc       &pci_mcl.axerror 
#16887: 
#16928: 
    retproc                   
End


Proc pc_genss.genbyte:
    param          pc_genss.genbyte.x i64 
    procentry                 
    push           pc_genss.genbyte.x i64 
    push           pc_genss.currdata u64 
    push           8          
    addrefoff                 u64 1 0
    loadincr                  u64 1
    popptr                    u8 
#16930: 
    retproc                   
End


Proc pc_genss.genword:
    param          pc_genss.genword.x i64 
    procentry                 
    setargs                   2 0
    push           pc_genss.genword.x i64 
    push           pc_genss.currdata u64 
    callproc       &pc_genss.addword 
#16932: 
    retproc                   
End


Proc pc_genss.gendword:
    param          pc_genss.gendword.x i64 
    procentry                 
    setargs                   2 0
    push           pc_genss.gendword.x i64 
    push           pc_genss.currdata u64 
    callproc       &pc_genss.adddword 
#16934: 
    retproc                   
End


Proc pc_genss.genqword:
    param          pc_genss.genqword.x i64 
    procentry                 
    setargs                   2 0
    push           pc_genss.genqword.x i64 
    push           pc_genss.currdata u64 
    callproc       &pc_genss.addqword 
#16936: 
    retproc                   
End


Proc pc_genss.genopnd:
    param          pc_genss.genopnd.a u64 
    param          pc_genss.genopnd.size i64 
    local          pc_genss.genopnd.s u64 
    local          pc_genss.genopnd.x i64 
    local          pc_genss.genopnd.length i64 
    local          pc_genss.genopnd.x32 r32 
    procentry                 
    push           pc_genss.genopnd.size i64 
    push           0          i64 
    jumpne         #16938     i64 
    push           pc_genss.genopnd.a u64 
    push           8          
    pushptroff                u8 1 0
    pop            pc_genss.genopnd.size i64 
#16938: 
    push           pc_genss.genopnd.a u64 
    push           12         
    pushptroff                u8 1 0
    push           4          i64 
    casejumpeq     #16939     i64 0
    push           8          i64 
    casejumpeq     #16940     i64 0
    popstack                  i64 
    jump           #16941     
#16939: 
    push           pc_genss.genopnd.a u64 
    pushptr                   u64 
    pop            pc_genss.genopnd.s u64 
    setargs                   1 0
    push           pc_genss.genopnd.s u64 
    callfn         &strlen    i64 
    pop            pc_genss.genopnd.length i64 
    push           pc_genss.genopnd.length i64 
    push           100        i64 
    jumple         #16942     i64 
    setargs                   2 0
    push           1024       i64 
    push           pc_genss.genopnd.length i64 
    push           1          i64 
    add                       i64 
    max                       i64 
    push           pc_genss.currdata u64 
    callproc       &pc_genss.buffercheck 
#16942: 
    jump           #16943     
#16944: 
    setargs                   1 0
    push           &pc_genss.genopnd.s 
    loadincr                  u64 1
    pushptr                   u8 
    callproc       &pc_genss.genbyte 
#16943: 
    push           pc_genss.genopnd.s u64 
    pushptr                   u8 
    jumptrue       #16944     u64 
#16945: 
    jump           #16946     
    jump           #16947     
#16940: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "GENSS/NAME OPND" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #16947     
#16941: 
#16947: 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.genopnd.a u64 
    callfn         &pc_genss.getdef u64 
    jumpfalse      #16948     u64 
    push           pc_genss.genopnd.size i64 
    push           2          i64 
    jumpgt         #16948     i64 
    setargs                   1 0
    push           "8/16-BIT RELOC" u64 
    callproc       &pci_mcl.axerror 
#16948: 
    push           pc_genss.genopnd.size i64 
    push           1          i64 
    casejumpeq     #16949     i64 0
    push           2          i64 
    casejumpeq     #16950     i64 0
    push           4          i64 
    casejumpeq     #16951     i64 0
    push           8          i64 
    casejumpeq     #16952     i64 0
    popstack                  i64 
    jump           #16953     
#16949: 
    setargs                   1 0
    push           pc_genss.genopnd.a u64 
    pushptr                   i64 
    callproc       &pc_genss.genbyte 
    jump           #16954     
#16950: 
    setargs                   1 0
    push           pc_genss.genopnd.a u64 
    pushptr                   i64 
    callproc       &pc_genss.genword 
    jump           #16954     
#16951: 
    push           pc_genss.genopnd.a u64 
    push           12         
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #16955     i64 0
    push           2          i64 
    casejumpeq     #16956     i64 0
    push           3          i64 
    casejumpeq     #16957     i64 0
    push           4          i64 
    casejumpeq     #16958     i64 0
    push           5          i64 
    casejumpeq     #16959     i64 0
    push           7          i64 
    casejumpeq     #16959     i64 0
    push           8          i64 
    casejumpeq     #16960     i64 0
    popstack                  i64 
    jump           #16961     
#16955: 
    setargs                   1 0
    push           pc_genss.genopnd.a u64 
    pushptr                   i64 
    callproc       &pc_genss.gendword 
    jump           #16962     
#16956: 
    push           pc_genss.genopnd.a u64 
    pushptr                   r64 
    fnarrow                   r32 r64 
    pop            pc_genss.genopnd.x32 r32 
    setargs                   1 0
    push           pc_genss.genopnd.x32 r32 
    typepun                   i32 void 0
    callproc       &pc_genss.gendword 
    jump           #16962     
#16957: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\t\tOPND/REALMEM4" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #16962     
#16958: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\t\tOPND/STRINGIMM4" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #16962     
#16959: 
    setargs                   1 0
    push           pc_genss.genopnd.a u64 
    callproc       &pc_genss.genabs32 
    jump           #16962     
#16960: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\t\tOPND/NAME4" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #16962     
#16961: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pci_mcl.valtypenames 
    push           pc_genss.genopnd.a u64 
    push           12         
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "OPND/4/VALTYPE?" u64 
    callproc       &pci_mcl.axerror 
#16962: 
    jump           #16954     
#16952: 
    push           pc_genss.genopnd.a u64 
    push           12         
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #16963     i64 0
    push           2          i64 
    casejumpeq     #16964     i64 0
    push           3          i64 
    casejumpeq     #16965     i64 0
    push           4          i64 
    casejumpeq     #16966     i64 0
    push           5          i64 
    casejumpeq     #16967     i64 0
    push           7          i64 
    casejumpeq     #16967     i64 0
    push           8          i64 
    casejumpeq     #16968     i64 0
    popstack                  i64 
    jump           #16969     
#16963: 
    setargs                   1 0
    push           pc_genss.genopnd.a u64 
    pushptr                   i64 
    callproc       &pc_genss.genqword 
    jump           #16970     
#16964: 
    setargs                   1 0
    push           pc_genss.genopnd.a u64 
    pushptr                   r64 
    typepun                   i64 void 0
    callproc       &pc_genss.genqword 
    jump           #16970     
#16965: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\t\tOPND/REALMEM8" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.alineno i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #16970     
#16966: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\t\tOPND/STRINGIMM8" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #16970     
#16967: 
    setargs                   1 0
    push           pc_genss.genopnd.a u64 
    callproc       &pc_genss.genabs64 
    jump           #16970     
#16968: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\t\tOPND/NAME8" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #16970     
#16969: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "HERE"     u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pci_mcl.valtypenames 
    push           pc_genss.genopnd.a u64 
    push           12         
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "OPND/8/VALTYPE?" u64 
    callproc       &pci_mcl.axerror 
#16970: 
    jump           #16954     
#16953: 
#16954: 
#16946: 
    retproc                   
End


Proc pc_genss.addrelocitem:
    param          pc_genss.addrelocitem.reloctype i64 
    param          pc_genss.addrelocitem.d u64 
    local          pc_genss.addrelocitem.r u64 
    local          pc_genss.addrelocitem.stindex i64 
    local          pc_genss.addrelocitem.adjust i64 
    procentry                 
    setargs                   1 0
    push           pc_genss.addrelocitem.d u64 
    callfn         &pc_genss.getstindex i64 
    pop            pc_genss.addrelocitem.stindex i64 
    push           4          i64 
    pop            pc_genss.addrelocitem.adjust i64 
    push           pc_genss.addrelocitem.reloctype i64 
    push           1          i64 
    jumpne         #16972     i64 
    push           8          i64 
    pop            pc_genss.addrelocitem.adjust i64 
#16972: 
    setargs                   1 0
    push           32         i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pc_genss.addrelocitem.r u64 
    push           pc_genss.currrelocs u64 
    push           pc_genss.addrelocitem.r u64 
    push           0          
    popptroff                 u64 1 0
    push           pc_genss.addrelocitem.reloctype i64 
    push           pc_genss.addrelocitem.r u64 
    push           8          
    popptroff                 i64 1 0
    setargs                   1 0
    push           1          i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           pc_genss.addrelocitem.adjust i64 
    sub                       i64 
    push           pc_genss.addrelocitem.r u64 
    push           16         
    popptroff                 i64 1 0
    push           pc_genss.addrelocitem.stindex i64 
    push           pc_genss.addrelocitem.r u64 
    push           24         
    popptroff                 i64 1 0
    push           &pc_genss.nrelocs 
    incr                      i64 1
    push           pc_genss.addrelocitem.r u64 
    pop            pc_genss.currrelocs u64 
#16973: 
    retproc                   
End


Proc pc_genss.getstindex: i64
    param          pc_genss.getstindex.d u64 
    procentry                 
    push           pc_genss.getstindex.d u64 
    push           36         
    pushptroff                i32 1 0
    push           0          i64 
    jumpne         #16975     i64 
    push           pci_mcl.ss_nsymbols i64 
    push           pci_mcl.ss_symboltablesize i64 
    jumplt         #16976     i64 
    setargs                   0 0
    callproc       &pc_genss.extendsymboltable 
#16976: 
    push           &pci_mcl.ss_nsymbols 
    incrload                  i64 1
    push           pc_genss.getstindex.d u64 
    push           36         
    popptroff                 i32 1 0
    push           pc_genss.getstindex.d u64 
    push           pci_mcl.ss_symboltable u64 
    push           pc_genss.getstindex.d u64 
    push           36         
    pushptroff                i32 1 0
    popptroff                 u64 8 -8
    push           pc_genss.getstindex.d u64 
    push           30         
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #16977     i64 
    push           pc_genss.getstindex.d u64 
    push           46         
    pushptroff                u16 1 0
    push           1          i64 
    dotindex                  i64 
    jumpfalse      #16978     u64 
    push           1          i64 
    push           pc_genss.getstindex.d u64 
    push           30         
    popptroff                 u8 1 0
#16978: 
#16977: 
#16975: 
    push           pc_genss.getstindex.d u64 
    push           36         
    pushptroff                i32 1 0
    setret                    i64 
    jump           #16979     
#16979: 
    retfn                     i64 
End


Proc pc_genss.genrel32:
    param          pc_genss.genrel32.a u64 
    local          pc_genss.genrel32.d u64 
    procentry                 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.genrel32.a u64 
    callfn         &pc_genss.getdef u64 
    pop            pc_genss.genrel32.d u64 
    push           pc_genss.genrel32.d u64 
    push           0          u64 
    jumpne         #16981     u64 
    setargs                   1 0
    push           pc_genss.genrel32.a u64 
    pushptr                   i64 
    callproc       &pc_genss.gendword 
    jump           #16982     
#16981: 
    push           pc_genss.genrel32.d u64 
    push           29         
    pushptroff                u8 1 0
    push           2          i64 
    casejumpeq     #16983     i64 0
    push           1          i64 
    casejumpeq     #16984     i64 0
    popstack                  i64 
    jump           #16985     
#16983: 
    push           pc_genss.genrel32.d u64 
    push           30         
    pushptroff                u8 1 0
    push           pc_genss.currseg i64 
    jumpeq         #16986     i64 
    setargs                   1 0
    push           "Rel label across segments" u64 
    callproc       &pci_mcl.axerror 
#16986: 
    setargs                   1 0
    push           pc_genss.genrel32.d u64 
    push           32         
    pushptroff                i32 1 0
    setargs                   1 0
    push           2          i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           4          i64 
    add                       i64 
    sub                       i64 
    push           pc_genss.genrel32.a u64 
    push           14         
    pushptroff                i32 1 0
    add                       i64 
    callproc       &pc_genss.gendword 
    jump           #16987     
#16984: 
    setargs                   4 0
    push           0          i64 
    push           4          i64 
    setargs                   1 0
    push           3          i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           pc_genss.genrel32.d u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_genss.addfwdref u64 
    push           pc_genss.genrel32.d u64 
    push           8          
    popptroff                 u64 1 0
    setargs                   1 0
    push           pc_genss.genrel32.a u64 
    push           14         
    pushptroff                i32 1 0
    callproc       &pc_genss.gendword 
    jump           #16987     
#16985: 
    setargs                   1 0
    push           pc_genss.genrel32.a u64 
    push           14         
    pushptroff                i32 1 0
    callproc       &pc_genss.gendword 
    setargs                   2 0
    push           pc_genss.genrel32.d u64 
    push           4          i64 
    callproc       &pc_genss.addrelocitem 
#16987: 
#16982: 
    retproc                   
End


Proc pc_genss.getdef: u64
    param          pc_genss.getdef.a u64 
    param          pc_genss.getdef.dneeded i64 
    local          pc_genss.getdef.d u64 
    procentry                 
    push           pc_genss.getdef.a u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    setjumpeq      #16989     i64 
    push           2          i64 
    setjumpne      #16990     i64 
#16989: 
    push           pc_genss.getdef.a u64 
    push           12         
    pushptroff                u8 1 0
    push           7          i64 
    casejumpeq     #16991     i64 0
    push           5          i64 
    casejumpeq     #16992     i64 0
    popstack                  i64 
    jump           #16993     
#16991: 
    push           pci_mcl.labeldeftable u64 
    push           pc_genss.getdef.a u64 
    pushptr                   i64 
    pushptroff                u64 8 -8
    setret                    u64 
    jump           #16994     
    jump           #16995     
#16992: 
    push           pc_genss.getdef.a u64 
    pushptr                   u64 
    pop            pc_genss.getdef.d u64 
    push           pc_genss.getdef.d u64 
    push           29         
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #16996     i64 
    push           pc_genss.getdef.d u64 
    push           46         
    pushptroff                u16 1 0
    push           1          i64 
    dotindex                  i64 
    jumptrue       #16997     u64 
    push           1          i64 
    push           pc_genss.getdef.d u64 
    push           29         
    popptroff                 u8 1 0
#16997: 
#16996: 
    push           pc_genss.getdef.d u64 
    setret                    u64 
    jump           #16994     
    jump           #16995     
#16993: 
#16995: 
#16990: 
    push           pc_genss.getdef.dneeded i64 
    jumpfalse      #16998     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pci_mcl.opndnames_ma 
    push           pc_genss.getdef.a u64 
    push           9          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pci_mcl.valtypenames 
    push           pc_genss.getdef.a u64 
    push           12         
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "getdef/no def" u64 
    callproc       &pci_mcl.axerror 
#16998: 
    push           0          u64 
    setret                    u64 
    jump           #16994     
#16994: 
    retfn                     u64 
End


Proc pc_genss.genabs32:
    param          pc_genss.genabs32.a u64 
    local          pc_genss.genabs32.d u64 
    procentry                 
    setargs                   2 0
    push           1          i64 
    push           pc_genss.genabs32.a u64 
    callfn         &pc_genss.getdef u64 
    pop            pc_genss.genabs32.d u64 
    push           pc_genss.genabs32.d u64 
    push           29         
    pushptroff                u8 1 0
    push           2          i64 
    casejumpeq     #17000     i64 0
    push           1          i64 
    casejumpeq     #17001     i64 0
    popstack                  i64 
    jump           #17002     
#17000: 
    setargs                   1 0
    push           pc_genss.genabs32.d u64 
    push           32         
    pushptroff                i32 1 0
    push           pc_genss.genabs32.a u64 
    push           14         
    pushptroff                i32 1 0
    add                       i64 
    callproc       &pc_genss.gendword 
    setargs                   2 0
    push           pc_genss.genabs32.d u64 
    push           2          i64 
    callproc       &pc_genss.addrelocitem 
    jump           #17003     
#17001: 
    setargs                   4 0
    push           pc_genss.currseg i64 
    push           2          i64 
    setargs                   1 0
    push           4          i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           pc_genss.genabs32.d u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_genss.addfwdref u64 
    push           pc_genss.genabs32.d u64 
    push           8          
    popptroff                 u64 1 0
    push           pc_genss.genabs32.d u64 
    push           16         
    pushptroff                u64 1 0
    jumpfalse      #17004     u64 
    push           pc_genss.genabs32.d u64 
    push           16         
    pushptroff                u64 1 0
    push           1          
    pushptroff                u8 1 0
    push           17         i64 
    setjumpeq      #17005     i64 
    push           18         i64 
    setjumpne      #17004     i64 
#17005: 
    setargs                   1 0
    push           pc_genss.genabs32.d u64 
    push           32         
    pushptroff                i32 1 0
    push           pc_genss.genabs32.a u64 
    push           14         
    pushptroff                i32 1 0
    add                       i64 
    callproc       &pc_genss.gendword 
    jump           #17006     
#17004: 
    setargs                   1 0
    push           pc_genss.genabs32.a u64 
    push           14         
    pushptroff                i32 1 0
    callproc       &pc_genss.gendword 
    setargs                   2 0
    push           pc_genss.genabs32.d u64 
    push           2          i64 
    callproc       &pc_genss.addrelocitem 
#17006: 
    jump           #17003     
#17002: 
    setargs                   1 0
    push           pc_genss.genabs32.a u64 
    push           14         
    pushptroff                i32 1 0
    callproc       &pc_genss.gendword 
    setargs                   2 0
    push           pc_genss.genabs32.d u64 
    push           2          i64 
    callproc       &pc_genss.addrelocitem 
#17003: 
#17007: 
    retproc                   
End


Proc pc_genss.genabs64:
    param          pc_genss.genabs64.a u64 
    local          pc_genss.genabs64.d u64 
    procentry                 
    setargs                   2 0
    push           1          i64 
    push           pc_genss.genabs64.a u64 
    callfn         &pc_genss.getdef u64 
    pop            pc_genss.genabs64.d u64 
    push           pc_genss.genabs64.d u64 
    push           29         
    pushptroff                u8 1 0
    push           2          i64 
    casejumpeq     #17009     i64 0
    push           1          i64 
    casejumpeq     #17010     i64 0
    popstack                  i64 
    jump           #17011     
#17009: 
    setargs                   1 0
    push           pc_genss.genabs64.d u64 
    push           32         
    pushptroff                i32 1 0
    push           pc_genss.genabs64.a u64 
    push           14         
    pushptroff                i32 1 0
    add                       i64 
    callproc       &pc_genss.genqword 
    setargs                   2 0
    push           pc_genss.genabs64.d u64 
    push           1          i64 
    callproc       &pc_genss.addrelocitem 
    jump           #17012     
#17010: 
    setargs                   4 0
    push           pc_genss.currseg i64 
    push           1          i64 
    setargs                   1 0
    push           5          i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           pc_genss.genabs64.d u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_genss.addfwdref u64 
    push           pc_genss.genabs64.d u64 
    push           8          
    popptroff                 u64 1 0
    push           pc_genss.genabs64.d u64 
    push           16         
    pushptroff                u64 1 0
    jumpfalse      #17013     u64 
    push           pc_genss.genabs64.d u64 
    push           16         
    pushptroff                u64 1 0
    push           1          
    pushptroff                u8 1 0
    push           17         i64 
    setjumpeq      #17014     i64 
    push           18         i64 
    setjumpne      #17013     i64 
#17014: 
    setargs                   1 0
    push           pc_genss.genabs64.d u64 
    push           32         
    pushptroff                i32 1 0
    push           pc_genss.genabs64.a u64 
    push           14         
    pushptroff                i32 1 0
    add                       i64 
    callproc       &pc_genss.genqword 
    jump           #17015     
#17013: 
    setargs                   1 0
    push           pc_genss.genabs64.a u64 
    push           14         
    pushptroff                i32 1 0
    callproc       &pc_genss.genqword 
    setargs                   2 0
    push           pc_genss.genabs64.d u64 
    push           1          i64 
    callproc       &pc_genss.addrelocitem 
#17015: 
    jump           #17012     
#17011: 
    setargs                   1 0
    push           pc_genss.genabs64.a u64 
    push           14         
    pushptroff                i32 1 0
    callproc       &pc_genss.genqword 
    setargs                   2 0
    push           pc_genss.genabs64.d u64 
    push           1          i64 
    callproc       &pc_genss.addrelocitem 
#17012: 
#17016: 
    retproc                   
End


Proc pc_genss.getrel32: i64
    param          pc_genss.getrel32.d u64 
    param          pc_genss.getrel32.offset i64 
    procentry                 
    startmult                 
    push           pc_genss.getrel32.d u64 
    push           29         
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #17018     i64 
    push           pc_genss.getrel32.d u64 
    push           30         
    pushptroff                u8 1 0
    push           pc_genss.currseg i64 
    jumpeq         #17019     i64 
    setargs                   1 0
    push           "Rel label across segments2" u64 
    callproc       &pci_mcl.axerror 
#17019: 
    push           pc_genss.getrel32.d u64 
    push           32         
    pushptroff                i32 1 0
    push           pc_genss.getrel32.offset i64 
    push           1          i64 
    add                       i64 
    sub                       i64 
    resetmult                 
    jump           #17020     
#17018: 
    push           2147483647 i64 
    endmult                   
#17020: 
    setret                    i64 
    jump           #17021     
#17021: 
    retfn                     i64 
End


Proc pc_genss.dofwdrefs:
    param          pc_genss.dofwdrefs.d u64 
    local          pc_genss.dofwdrefs.f u64 
    local          pc_genss.dofwdrefs.offset i64 
    local          pc_genss.dofwdrefs.seg i64 
    local          pc_genss.dofwdrefs.p8 u64 
    local          pc_genss.dofwdrefs.p32 u64 
    local          pc_genss.dofwdrefs.p64 u64 
    local          pc_genss.dofwdrefs.data u64 
    procentry                 
    push           pc_genss.dofwdrefs.d u64 
    push           8          
    pushptroff                u64 1 0
    push           0          u64 
    jumpne         #17023     u64 
    jump           #17024     
#17023: 
    push           pc_genss.dofwdrefs.d u64 
    push           8          
    pushptroff                u64 1 0
    pop            pc_genss.dofwdrefs.f u64 
    jump           #17025     
#17026: 
    push           pc_genss.dofwdrefs.f u64 
    push           8          
    pushptroff                i32 1 0
    pop            pc_genss.dofwdrefs.offset i64 
    push           pc_genss.dofwdrefs.f u64 
    push           12         
    pushptroff                i16 1 0
    push           4          i64 
    casejumpeq     #17027     i64 0
    push           2          i64 
    casejumpeq     #17028     i64 0
    push           1          i64 
    casejumpeq     #17028     i64 0
    push           6          i64 
    casejumpeq     #17029     i64 0
    popstack                  i64 
    jump           #17030     
#17027: 
    setargs                   2 0
    push           pc_genss.dofwdrefs.offset i64 
    push           pc_genss.currdata u64 
    callfn         &pc_genss.bufferelemptr u64 
    pop            pc_genss.dofwdrefs.p32 u64 
    push           pc_genss.dofwdrefs.d u64 
    push           32         
    pushptroff                i32 1 0
    push           pc_genss.dofwdrefs.offset i64 
    sub                       i64 
    push           4          i64 
    sub                       i64 
    push           pc_genss.dofwdrefs.p32 u64 
    popptr                    i32 
    jump           #17031     
#17028: 
    push           pc_genss.dofwdrefs.f u64 
    push           14         
    pushptroff                i16 1 0
    push           1          i64 
    casejumpeq     #17032     i64 0
    push           3          i64 
    casejumpeq     #17033     i64 0
    push           2          i64 
    casejumpeq     #17034     i64 0
    popstack                  i64 
    jump           #17035     
#17032: 
    push           pci_mcl.ss_code u64 
    pop            pc_genss.dofwdrefs.data u64 
    jump           #17036     
#17033: 
    setargs                   1 0
    push           "Fwd ref in zdata" u64 
    callproc       &pci_mcl.axerror 
    jump           #17036     
#17034: 
    push           pci_mcl.ss_idata u64 
    pop            pc_genss.dofwdrefs.data u64 
    jump           #17036     
#17035: 
#17036: 
    setargs                   2 0
    push           pc_genss.dofwdrefs.offset i64 
    push           pc_genss.dofwdrefs.data u64 
    callfn         &pc_genss.bufferelemptr u64 
    pop            pc_genss.dofwdrefs.p32 u64 
    push           pc_genss.dofwdrefs.f u64 
    push           12         
    pushptroff                i16 1 0
    push           2          i64 
    jumpne         #17037     i64 
    push           pc_genss.dofwdrefs.p32 u64 
    pushptr                   i32 
    push           pc_genss.dofwdrefs.d u64 
    push           32         
    pushptroff                i32 1 0
    add                       i64 
    push           pc_genss.dofwdrefs.p32 u64 
    popptr                    i32 
    jump           #17038     
#17037: 
    push           pc_genss.dofwdrefs.p32 u64 
    pop            pc_genss.dofwdrefs.p64 u64 
    push           pc_genss.dofwdrefs.p64 u64 
    pushptr                   i64 
    push           pc_genss.dofwdrefs.d u64 
    push           32         
    pushptroff                i32 1 0
    add                       i64 
    push           pc_genss.dofwdrefs.p64 u64 
    popptr                    i64 
#17038: 
    jump           #17031     
#17029: 
    setargs                   2 0
    push           pc_genss.dofwdrefs.offset i64 
    push           pc_genss.currdata u64 
    callfn         &pc_genss.bufferelemptr u64 
    pop            pc_genss.dofwdrefs.p8 u64 
    push           pc_genss.dofwdrefs.d u64 
    push           32         
    pushptroff                i32 1 0
    push           pc_genss.dofwdrefs.offset i64 
    sub                       i64 
    push           1          i64 
    sub                       i64 
    push           pc_genss.dofwdrefs.p8 u64 
    popptr                    u8 
    jump           #17031     
#17030: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pc_objdecls.relocnames 
    push           pc_genss.dofwdrefs.f u64 
    push           12         
    pushptroff                i16 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "DOFWDREFS/CAN'T DO RELTYPE" u64 
    callproc       &pci_mcl.axerror 
#17031: 
    push           pc_genss.dofwdrefs.f u64 
    pushptr                   u64 
    pop            pc_genss.dofwdrefs.f u64 
#17025: 
    push           pc_genss.dofwdrefs.f u64 
    jumptrue       #17026     u64 
#17039: 
#17024: 
    retproc                   
End


Proc pc_genss.genrex:
    procentry                 
    push           pc_genss.sizeoverride i64 
    jumpfalse      #17041     i64 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
#17041: 
    push           pc_genss.addroverride i64 
    jumpfalse      #17042     i64 
    setargs                   1 0
    push           103        i64 
    callproc       &pc_genss.genbyte 
#17042: 
    push           pc_genss.rex i64 
    jumpfalse      #17043     i64 
    push           pc_genss.rex i64 
    push           64         i64 
    jumpge         #17044     i64 
    setargs                   1 0
    push           64         i64 
    push           pc_genss.rex i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    jump           #17045     
#17044: 
    setargs                   1 0
    push           pc_genss.rex i64 
    callproc       &pc_genss.genbyte 
#17045: 
#17043: 
#17046: 
    retproc                   
End


Proc pc_genss.isbytesized: i64
    param          pc_genss.isbytesized.x i64 
    procentry                 
    startmult                 
    push           -128       i64 
    push           pc_genss.isbytesized.x i64 
    jumpgt         #17048     i64 
    push           pc_genss.isbytesized.x i64 
    push           127        i64 
    jumpgt         #17048     i64 
    push           1          
    resetmult                 
    jump           #17049     
#17048: 
    push           0          
    endmult                   
#17049: 
    setret                    i64 
    jump           #17050     
#17050: 
    retfn                     i64 
End


Proc pc_genss.isdwordsized: i64
    param          pc_genss.isdwordsized.x i64 
    procentry                 
    startmult                 
    push           -2147483648 i64 
    push           pc_genss.isdwordsized.x i64 
    jumpgt         #17052     i64 
    push           pc_genss.isdwordsized.x i64 
    push           2147483647 i64 
    jumpgt         #17052     i64 
    push           1          
    resetmult                 
    jump           #17053     
#17052: 
    push           0          
    endmult                   
#17053: 
    setret                    i64 
    jump           #17054     
#17054: 
    retfn                     i64 
End


Proc pc_genss.do_push:
    param          pc_genss.do_push.a u64 
    local          pc_genss.do_push.code i64 
    local          pc_genss.do_push.am i64 
    procentry                 
    push           pc_genss.do_push.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #17056     i64 0
    push           2          i64 
    casejumpeq     #17057     i64 0
    push           3          i64 
    casejumpeq     #17058     i64 0
    popstack                  i64 
    jump           #17059     
#17056: 
    push           pc_genss.do_push.a u64 
    push           8          
    pushptroff                u8 1 0
    push           8          i64 
    jumpeq         #17060     i64 
    setargs                   1 0
    push           "pushreg not 64-bit" u64 
    callproc       &pci_mcl.axerror 
#17060: 
    push           &pci_mcl.regcodes 
    push           pc_genss.do_push.a u64 
    push           10         
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    pop            pc_genss.do_push.code i64 
    push           pc_genss.do_push.code i64 
    push           8          i64 
    jumplt         #17061     i64 
    push           1          i64 
    pop            pc_genss.rex i64 
    push           &pc_genss.do_push.code 
    push           7          i64 
    iandto                    i64 
#17061: 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           80         i64 
    push           pc_genss.do_push.code i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    jump           #17062     
#17057: 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_push.a u64 
    callfn         &pc_genss.getdef u64 
    jumpfalse      #17063     u64 
    setargs                   1 0
    push           104        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           4          i64 
    push           pc_genss.do_push.a u64 
    callproc       &pc_genss.genopnd 
    jump           #17064     
#17063: 
    setargs                   1 0
    push           pc_genss.do_push.a u64 
    pushptr                   i64 
    callfn         &pc_genss.isbytesized i64 
    jumpfalse      #17065     i64 
    setargs                   1 0
    push           106        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_push.a u64 
    pushptr                   i64 
    callproc       &pc_genss.genbyte 
    jump           #17064     
#17065: 
    setargs                   1 0
    push           pc_genss.do_push.a u64 
    pushptr                   i64 
    callfn         &pc_genss.isdwordsized i64 
    jumpfalse      #17066     i64 
    setargs                   1 0
    push           104        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_push.a u64 
    pushptr                   i64 
    callproc       &pc_genss.gendword 
    jump           #17064     
#17066: 
    setargs                   1 0
    push           "push imm value too large" u64 
    callproc       &pci_mcl.axerror 
#17064: 
    jump           #17062     
#17058: 
    push           pc_genss.do_push.a u64 
    push           8          
    pushptroff                u8 1 0
    push           8          i64 
    jumpeq         #17067     i64 
    setargs                   1 0
    push           "push not 64-bit" u64 
    callproc       &pci_mcl.axerror 
#17067: 
    setargs                   2 0
    push           6          i64 
    push           pc_genss.do_push.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_push.am i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           255        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_push.am i64 
    push           pc_genss.do_push.a u64 
    callproc       &pc_genss.genamode 
    jump           #17062     
#17059: 
    setargs                   1 0
    push           "push opnd?" u64 
    callproc       &pci_mcl.axerror 
#17062: 
#17068: 
    retproc                   
End


Proc pc_genss.do_pop:
    param          pc_genss.do_pop.a u64 
    local          pc_genss.do_pop.code i64 
    local          pc_genss.do_pop.am i64 
    procentry                 
    push           pc_genss.do_pop.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #17070     i64 0
    push           3          i64 
    casejumpeq     #17071     i64 0
    popstack                  i64 
    jump           #17072     
#17070: 
    push           pc_genss.do_pop.a u64 
    push           8          
    pushptroff                u8 1 0
    push           8          i64 
    jumpeq         #17073     i64 
    setargs                   1 0
    push           "popreg not 64-bit" u64 
    callproc       &pci_mcl.axerror 
#17073: 
    push           &pci_mcl.regcodes 
    push           pc_genss.do_pop.a u64 
    push           10         
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    pop            pc_genss.do_pop.code i64 
    push           pc_genss.do_pop.code i64 
    push           8          i64 
    jumplt         #17074     i64 
    push           1          i64 
    pop            pc_genss.rex i64 
    push           &pc_genss.do_pop.code 
    push           7          i64 
    iandto                    i64 
#17074: 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           88         i64 
    push           pc_genss.do_pop.code i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    jump           #17075     
#17071: 
    push           pc_genss.do_pop.a u64 
    push           8          
    pushptroff                u8 1 0
    push           8          i64 
    jumpeq         #17076     i64 
    setargs                   1 0
    push           "pop not 64-bit" u64 
    callproc       &pci_mcl.axerror 
#17076: 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_pop.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_pop.am i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           143        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_pop.am i64 
    push           pc_genss.do_pop.a u64 
    callproc       &pc_genss.genamode 
    jump           #17075     
#17072: 
    setargs                   1 0
    push           "pop opnd?" u64 
    callproc       &pci_mcl.axerror 
#17075: 
#17077: 
    retproc                   
End


Proc pc_genss.do_inc:
    param          pc_genss.do_inc.a u64 
    param          pc_genss.do_inc.code i64 
    local          pc_genss.do_inc.opc i64 
    local          pc_genss.do_inc.am i64 
    procentry                 
    startmult                 
    push           pc_genss.do_inc.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #17079     i64 
    push           254        i64 
    resetmult                 
    jump           #17080     
#17079: 
    push           255        i64 
    endmult                   
#17080: 
    pop            pc_genss.do_inc.opc i64 
    push           pc_genss.do_inc.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #17081     i64 0
    push           3          i64 
    casejumpeq     #17081     i64 0
    popstack                  i64 
    jump           #17082     
#17081: 
    setargs                   2 0
    push           pc_genss.do_inc.code i64 
    push           pc_genss.do_inc.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_inc.am i64 
    setargs                   1 0
    push           pc_genss.do_inc.a u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_inc.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           pc_genss.do_inc.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_inc.am i64 
    push           pc_genss.do_inc.a u64 
    callproc       &pc_genss.genamode 
    jump           #17083     
#17082: 
    setargs                   1 0
    push           "inc/opnd?" u64 
    callproc       &pci_mcl.axerror 
#17083: 
#17084: 
    retproc                   
End


Proc pc_genss.do_neg:
    param          pc_genss.do_neg.a u64 
    param          pc_genss.do_neg.code i64 
    local          pc_genss.do_neg.opc i64 
    local          pc_genss.do_neg.am i64 
    procentry                 
    startmult                 
    push           pc_genss.do_neg.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #17086     i64 
    push           246        i64 
    resetmult                 
    jump           #17087     
#17086: 
    push           247        i64 
    endmult                   
#17087: 
    pop            pc_genss.do_neg.opc i64 
    push           pc_genss.do_neg.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #17088     i64 0
    push           3          i64 
    casejumpeq     #17088     i64 0
    popstack                  i64 
    jump           #17089     
#17088: 
    setargs                   2 0
    push           pc_genss.do_neg.code i64 
    push           pc_genss.do_neg.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_neg.am i64 
    setargs                   1 0
    push           pc_genss.do_neg.a u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_neg.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           pc_genss.do_neg.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_neg.am i64 
    push           pc_genss.do_neg.a u64 
    callproc       &pc_genss.genamode 
    jump           #17090     
#17089: 
    setargs                   1 0
    push           "neg/div/etc opnd?" u64 
    callproc       &pci_mcl.axerror 
#17090: 
#17091: 
    retproc                   
End


Proc pc_genss.genamode:
    param          pc_genss.genamode.a u64 
    param          pc_genss.genamode.am i64 
    local          pc_genss.genamode.sib i64 
    local          pc_genss.genamode.mode i64 
    local          pc_genss.genamode.dispsize i64 
    local          pc_genss.genamode.offset i64 
    local          pc_genss.genamode.d u64 
    procentry                 
    push           pc_genss.genamode.am i64 
    push           16         i64 
    shr                       i64 
    pop            pc_genss.genamode.sib i64 
    push           pc_genss.genamode.am i64 
    push           8          i64 
    shr                       i64 
    push           255        i64 
    iand                      i64 
    pop            pc_genss.genamode.mode i64 
    push           pc_genss.genamode.am i64 
    push           255        i64 
    iand                      i64 
    pop            pc_genss.genamode.dispsize i64 
    setargs                   1 0
    push           pc_genss.genamode.mode i64 
    callproc       &pc_genss.genbyte 
    push           pc_genss.genamode.sib i64 
    push           0          i64 
    jumplt         #17093     i64 
    setargs                   1 0
    push           pc_genss.genamode.sib i64 
    callproc       &pc_genss.genbyte 
#17093: 
    push           pc_genss.genamode.dispsize i64 
    push           0          i64 
    casejumpeq     #17094     i64 0
    push           1          i64 
    casejumpeq     #17095     i64 0
    push           4          i64 
    casejumpeq     #17096     i64 0
    popstack                  i64 
    jump           #17097     
#17094: 
    jump           #17098     
#17095: 
    setargs                   2 0
    push           &pc_genss.genamode.offset 
    push           pc_genss.genamode.a u64 
    callproc       &pc_genss.getdispsize 
    setargs                   1 0
    push           pc_genss.genamode.offset i64 
    callproc       &pc_genss.genbyte 
    jump           #17098     
#17096: 
    push           pc_genss.genamode.a u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    casejumpeq     #17099     i64 0
    popstack                  i64 
    jump           #17100     
#17099: 
    push           pc_genss.genamode.a u64 
    push           12         
    pushptroff                u8 1 0
    push           5          i64 
    casejumpeq     #17101     i64 0
    push           7          i64 
    casejumpeq     #17101     i64 0
    push           0          i64 
    casejumpeq     #17102     i64 0
    popstack                  i64 
    jump           #17103     
#17101: 
    setargs                   1 0
    push           pc_genss.genamode.a u64 
    callproc       &pc_genss.genabs32 
    jump           #17104     
#17102: 
    setargs                   2 0
    push           &pc_genss.genamode.offset 
    push           pc_genss.genamode.a u64 
    callproc       &pc_genss.getdispsize 
    setargs                   1 0
    push           pc_genss.genamode.offset i64 
    callproc       &pc_genss.gendword 
    jump           #17104     
#17103: 
    setargs                   1 0
    push           "genam/3"  u64 
    callproc       &pci_mcl.axerror 
#17104: 
    jump           #17105     
#17100: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pci_mcl.opndnames_ma 
    push           pc_genss.genamode.a u64 
    push           9          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "GENAMODE/MODE?" u64 
    callproc       &pci_mcl.axerror 
#17105: 
    jump           #17098     
#17097: 
    setargs                   1 0
    push           "genamode size 2/8" u64 
    callproc       &pci_mcl.axerror 
#17098: 
#17106: 
    retproc                   
End


Proc pc_genss.makemodrm: i64
    param          pc_genss.makemodrm.mode i64 
    param          pc_genss.makemodrm.opc i64 
    param          pc_genss.makemodrm.rm i64 
    procentry                 
    push           pc_genss.makemodrm.mode i64 
    push           6          i64 
    shl                       i64 
    push           pc_genss.makemodrm.opc i64 
    push           3          i64 
    shl                       i64 
    add                       i64 
    push           pc_genss.makemodrm.rm i64 
    add                       i64 
    setret                    i64 
    jump           #17108     
#17108: 
    retfn                     i64 
End


Proc pc_genss.setopsize:
    param          pc_genss.setopsize.a u64 
    procentry                 
    push           pc_genss.setopsize.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #17110     i64 0
    push           2          i64 
    casejumpeq     #17111     i64 0
    push           8          i64 
    casejumpeq     #17112     i64 0
    push           4          i64 
    casejumpeq     #17113     i64 0
    popstack                  i64 
    jump           #17114     
#17110: 
    jump           #17115     
#17111: 
    push           1          i64 
    pop            pc_genss.sizeoverride i64 
    jump           #17115     
#17112: 
    push           &pc_genss.rex 
    push           8          i64 
    iorto                     i64 
    jump           #17115     
#17113: 
    jump           #17115     
#17114: 
    setargs                   1 0
    push           "Operand size not set" u64 
    callproc       &pci_mcl.axerror 
#17115: 
#17116: 
    retproc                   
End


Proc pc_genss.setaddrsize:
    param          pc_genss.setaddrsize.a u64 
    procentry                 
    push           pc_genss.setaddrsize.a u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #17118     i64 
    push           pc_genss.setaddrsize.a u64 
    push           18         
    pushptroff                u8 1 0
    push           4          i64 
    jumpne         #17118     i64 
    push           1          i64 
    pop            pc_genss.addroverride i64 
#17118: 
#17119: 
    retproc                   
End


Proc pc_genss.getdispsize: i64
    param          pc_genss.getdispsize.a u64 
    param          pc_genss.getdispsize.offset u64 
    local          pc_genss.getdispsize.d u64 
    procentry                 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.getdispsize.a u64 
    callfn         &pc_genss.getdef u64 
    pop            pc_genss.getdispsize.d u64 
    push           pc_genss.getdispsize.a u64 
    push           14         
    pushptroff                i32 1 0
    push           pc_genss.getdispsize.offset u64 
    popptr                    i64 
    push           pc_genss.getdispsize.d u64 
    jumpfalse      #17121     u64 
    push           pc_genss.getdispsize.d u64 
    push           16         
    pushptroff                u64 1 0
    jumpfalse      #17122     u64 
    push           pc_genss.getdispsize.d u64 
    push           16         
    pushptroff                u64 1 0
    push           1          
    pushptroff                u8 1 0
    push           17         i64 
    setjumpeq      #17123     i64 
    push           18         i64 
    setjumpne      #17122     i64 
#17123: 
    push           pc_genss.getdispsize.offset u64 
    push           pc_genss.getdispsize.d u64 
    push           32         
    pushptroff                i32 1 0
    addto                     i64 
    jump           #17124     
#17122: 
    push           4          i64 
    setret                    i64 
    jump           #17125     
#17124: 
#17121: 
    startmult                 
    push           pc_genss.getdispsize.offset u64 
    pushptr                   i64 
    jumpfalse      #17126     i64 
    startmult                 
    setargs                   1 0
    push           pc_genss.getdispsize.offset u64 
    pushptr                   i64 
    callfn         &pc_genss.isbytesized i64 
    jumpfalse      #17127     i64 
    push           1          i64 
    resetmult                 
    jump           #17128     
#17127: 
    push           4          i64 
    endmult                   
#17128: 
    resetmult                 
    jump           #17129     
#17126: 
    push           0          i64 
    endmult                   
#17129: 
    setret                    i64 
    jump           #17125     
#17125: 
    retfn                     i64 
End


Proc pc_genss.genrm: i64
    param          pc_genss.genrm.a u64 
    param          pc_genss.genrm.opc i64 
    local          pc_genss.genrm.mode i64 
    local          pc_genss.genrm.rm i64 
    local          pc_genss.genrm.scale i64 
    local          pc_genss.genrm.dispsize i64 
    local          pc_genss.genrm.sib i64 
    local          pc_genss.genrm.index i64 
    local          pc_genss.genrm.base i64 
    local          pc_genss.genrm.reg i64 
    local          pc_genss.genrm.regix i64 
    local          pc_genss.genrm.code i64 
    local          pc_genss.genrm.offset i64 
    procentry                 
    push           0          i64 
    store          pc_genss.genrm.rm i64 
    pop            pc_genss.genrm.mode i64 
    push           0          i64 
    pop            pc_genss.genrm.scale i64 
    push           0          i64 
    pop            pc_genss.genrm.dispsize i64 
    push           -1         i64 
    pop            pc_genss.genrm.sib i64 
    push           pc_genss.genrm.a u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #17131     i64 
    push           pc_genss.genrm.a u64 
    push           18         
    pushptroff                u8 1 0
    push           4          i64 
    jumpne         #17131     i64 
    push           1          i64 
    pop            pc_genss.addroverride i64 
#17131: 
    push           pc_genss.genrm.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #17132     i64 0
    push           3          i64 
    casejumpeq     #17133     i64 0
    push           5          i64 
    casejumpeq     #17134     i64 0
    popstack                  i64 
    jump           #17135     
#17132: 
    setargs                   1 0
    push           pc_genss.genrm.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcodeb i64 
    pop            pc_genss.genrm.code i64 
    setargs                   3 0
    push           pc_genss.genrm.dispsize i64 
    push           pc_genss.genrm.sib i64 
    setargs                   3 0
    push           pc_genss.genrm.code i64 
    push           pc_genss.genrm.opc i64 
    push           3          i64 
    callfn         &pc_genss.makemodrm i64 
    callfn         &pc_genss.makeam i64 
    setret                    i64 
    jump           #17136     
    jump           #17137     
#17133: 
    jump           #17137     
#17134: 
    setargs                   1 0
    push           pc_genss.genrm.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcodebx i64 
    pop            pc_genss.genrm.code i64 
    setargs                   3 0
    push           pc_genss.genrm.dispsize i64 
    push           pc_genss.genrm.sib i64 
    setargs                   3 0
    push           pc_genss.genrm.code i64 
    push           pc_genss.genrm.opc i64 
    push           3          i64 
    callfn         &pc_genss.makemodrm i64 
    callfn         &pc_genss.makeam i64 
    setret                    i64 
    jump           #17136     
    jump           #17137     
#17135: 
    setargs                   1 0
    push           "genrm not mem" u64 
    callproc       &pci_mcl.axerror 
#17137: 
    push           pc_genss.genrm.a u64 
    push           10         
    pushptroff                u8 1 0
    pop            pc_genss.genrm.reg i64 
    push           pc_genss.genrm.a u64 
    push           11         
    pushptroff                u8 1 0
    pop            pc_genss.genrm.regix i64 
    push           pc_genss.genrm.reg i64 
    push           pc_genss.genrm.regix i64 
    jumpne         #17138     i64 
    push           pc_genss.genrm.regix i64 
    push           0          i64 
    jumpne         #17138     i64 
    push           0          i64 
    pop            pc_genss.genrm.mode i64 
    push           4          i64 
    pop            pc_genss.genrm.rm i64 
    push           1          i64 
    pop            pc_genss.genrm.scale i64 
    push           4          i64 
    pop            pc_genss.genrm.index i64 
    push           5          i64 
    pop            pc_genss.genrm.base i64 
    push           4          i64 
    pop            pc_genss.genrm.dispsize i64 
    jump           #17139     
#17138: 
    push           pc_genss.genrm.a u64 
    push           13         
    pushptroff                u8 1 0
    push           1          i64 
    jumpgt         #17140     i64 
    push           pc_genss.genrm.regix i64 
    push           0          i64 
    jumpne         #17140     i64 
    setargs                   2 0
    push           &pc_genss.genrm.offset 
    push           pc_genss.genrm.a u64 
    callfn         &pc_genss.getdispsize i64 
    pop            pc_genss.genrm.dispsize i64 
    push           pc_genss.genrm.dispsize i64 
    jumpfalse      #17141     i64 
    startmult                 
    push           pc_genss.genrm.dispsize i64 
    push           1          i64 
    jumpne         #17142     i64 
    push           1          i64 
    resetmult                 
    jump           #17143     
#17142: 
    push           2          i64 
    endmult                   
#17143: 
    pop            pc_genss.genrm.mode i64 
#17141: 
    push           &pci_mcl.regcodes 
    push           pc_genss.genrm.reg i64 
    pushptroff                u8 1 0
    pop            pc_genss.genrm.rm i64 
    push           pc_genss.genrm.rm i64 
    push           4          i64 
    jumpeq         #17144     i64 
    push           pc_genss.genrm.rm i64 
    push           12         i64 
    jumpeq         #17144     i64 
    push           pc_genss.genrm.rm i64 
    pop            pc_genss.genrm.base i64 
    push           pc_genss.genrm.rm i64 
    push           5          i64 
    jumpeq         #17145     i64 
    push           pc_genss.genrm.rm i64 
    push           13         i64 
    jumpne         #17146     i64 
#17145: 
    push           pc_genss.genrm.dispsize i64 
    push           0          i64 
    jumpne         #17146     i64 
    push           1          i64 
    pop            pc_genss.genrm.mode i64 
    push           1          i64 
    pop            pc_genss.genrm.dispsize i64 
#17146: 
    push           0          i64 
    pop            pc_genss.genrm.index i64 
    jump           #17147     
#17144: 
    push           4          i64 
    pop            pc_genss.genrm.index i64 
    push           pc_genss.genrm.rm i64 
    pop            pc_genss.genrm.base i64 
    push           1          i64 
    pop            pc_genss.genrm.scale i64 
#17147: 
    jump           #17139     
#17140: 
    push           pc_genss.genrm.regix i64 
    jumpfalse      #17148     i64 
    push           pc_genss.genrm.reg i64 
    push           0          i64 
    jumpne         #17148     i64 
    push           4          i64 
    pop            pc_genss.genrm.dispsize i64 
    push           0          i64 
    pop            pc_genss.genrm.mode i64 
    push           4          i64 
    pop            pc_genss.genrm.rm i64 
    startmult                 
    push           pc_genss.genrm.a u64 
    push           13         
    pushptroff                u8 1 0
    jumpfalse      #17149     i64 
    push           pc_genss.genrm.a u64 
    push           13         
    pushptroff                u8 1 0
    resetmult                 
    jump           #17150     
#17149: 
    push           1          i64 
    endmult                   
#17150: 
    pop            pc_genss.genrm.scale i64 
    push           5          i64 
    pop            pc_genss.genrm.base i64 
    push           &pci_mcl.regcodes 
    push           pc_genss.genrm.regix i64 
    pushptroff                u8 1 0
    pop            pc_genss.genrm.index i64 
    push           pc_genss.genrm.regix i64 
    push           16         i64 
    jumpne         #17151     i64 
    setargs                   1 0
    push           "Scaled rstack?" u64 
    callproc       &pci_mcl.axerror 
#17151: 
    jump           #17139     
#17148: 
    setargs                   2 0
    push           &pc_genss.genrm.offset 
    push           pc_genss.genrm.a u64 
    callfn         &pc_genss.getdispsize i64 
    pop            pc_genss.genrm.dispsize i64 
    push           pc_genss.genrm.dispsize i64 
    jumpfalse      #17152     i64 
    startmult                 
    push           pc_genss.genrm.dispsize i64 
    push           1          i64 
    jumpne         #17153     i64 
    push           1          i64 
    resetmult                 
    jump           #17154     
#17153: 
    push           2          i64 
    endmult                   
#17154: 
    pop            pc_genss.genrm.mode i64 
#17152: 
    push           4          i64 
    pop            pc_genss.genrm.rm i64 
    startmult                 
    push           pc_genss.genrm.a u64 
    push           13         
    pushptroff                u8 1 0
    jumpfalse      #17155     i64 
    push           pc_genss.genrm.a u64 
    push           13         
    pushptroff                u8 1 0
    resetmult                 
    jump           #17156     
#17155: 
    push           1          i64 
    endmult                   
#17156: 
    pop            pc_genss.genrm.scale i64 
    push           pc_genss.genrm.reg i64 
    push           0          i64 
    jumpne         #17157     i64 
    push           5          i64 
    pop            pc_genss.genrm.base i64 
    jump           #17158     
#17157: 
    push           pc_genss.genrm.reg i64 
    push           15         i64 
    setjumpeq      #17159     i64 
    push           8          i64 
    setjumpne      #17160     i64 
#17159: 
    push           pc_genss.genrm.dispsize i64 
    push           0          i64 
    jumpne         #17160     i64 
    push           1          i64 
    pop            pc_genss.genrm.mode i64 
    push           1          i64 
    pop            pc_genss.genrm.dispsize i64 
#17160: 
    push           &pci_mcl.regcodes 
    push           pc_genss.genrm.reg i64 
    pushptroff                u8 1 0
    pop            pc_genss.genrm.base i64 
#17158: 
    push           pc_genss.genrm.regix i64 
    push           0          i64 
    jumpne         #17161     i64 
    push           4          i64 
    pop            pc_genss.genrm.index i64 
    jump           #17162     
#17161: 
    push           &pci_mcl.regcodes 
    push           pc_genss.genrm.regix i64 
    pushptroff                u8 1 0
    pop            pc_genss.genrm.index i64 
#17162: 
    push           pc_genss.genrm.regix i64 
    jumpfalse      #17163     i64 
    push           pc_genss.genrm.reg i64 
    jumptrue       #17163     i64 
    push           4          i64 
    pop            pc_genss.genrm.dispsize i64 
#17163: 
    push           pc_genss.genrm.regix i64 
    push           16         i64 
    jumpne         #17164     i64 
    push           pc_genss.genrm.scale i64 
    push           1          i64 
    jumple         #17164     i64 
    setargs                   1 0
    push           "Can't scale rstack" u64 
    callproc       &pci_mcl.axerror 
#17164: 
#17139: 
    push           pc_genss.genrm.index i64 
    push           8          i64 
    jumplt         #17165     i64 
    push           &pc_genss.rex 
    push           2          i64 
    iorto                     i64 
    push           &pc_genss.genrm.index 
    push           7          i64 
    iandto                    i64 
#17165: 
    push           pc_genss.genrm.base i64 
    push           8          i64 
    jumplt         #17166     i64 
    push           &pc_genss.rex 
    push           1          i64 
    iorto                     i64 
    push           &pc_genss.genrm.base 
    push           7          i64 
    iandto                    i64 
#17166: 
    push           pc_genss.genrm.scale i64 
    jumpfalse      #17167     i64 
    push           &pc_genss.genrm.scaletable 
    push           pc_genss.genrm.scale i64 
    pushptroff                i64 8 -8
    push           6          i64 
    shl                       i64 
    push           pc_genss.genrm.index i64 
    push           3          i64 
    shl                       i64 
    add                       i64 
    push           pc_genss.genrm.base i64 
    add                       i64 
    pop            pc_genss.genrm.sib i64 
#17167: 
    push           &pc_genss.genrm.rm 
    push           7          i64 
    iandto                    i64 
    setargs                   3 0
    push           pc_genss.genrm.dispsize i64 
    push           pc_genss.genrm.sib i64 
    setargs                   3 0
    push           pc_genss.genrm.rm i64 
    push           pc_genss.genrm.opc i64 
    push           pc_genss.genrm.mode i64 
    callfn         &pc_genss.makemodrm i64 
    callfn         &pc_genss.makeam i64 
    setret                    i64 
    jump           #17136     
#17136: 
    retfn                     i64 
End


Proc pc_genss.makeam: i64
    param          pc_genss.makeam.m i64 
    param          pc_genss.makeam.s i64 
    param          pc_genss.makeam.d i64 
    procentry                 
    push           pc_genss.makeam.s i64 
    push           16         i64 
    shl                       i64 
    push           pc_genss.makeam.m i64 
    push           8          i64 
    shl                       i64 
    add                       i64 
    push           pc_genss.makeam.d i64 
    add                       i64 
    setret                    i64 
    jump           #17169     
#17169: 
    retfn                     i64 
End


Proc pc_genss.do_arith:
    param          pc_genss.do_arith.a u64 
    param          pc_genss.do_arith.b u64 
    param          pc_genss.do_arith.code i64 
    local          pc_genss.do_arith.am i64 
    local          pc_genss.do_arith.regcode i64 
    local          pc_genss.do_arith.opc i64 
    local          pc_genss.do_arith.dispsize i64 
    local          pc_genss.do_arith.x i64 
    procentry                 
    push           pc_genss.do_arith.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #17171     i64 0
    push           3          i64 
    casejumpeq     #17172     i64 0
    popstack                  i64 
    jump           #17173     
#17171: 
    push           pc_genss.do_arith.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #17174     i64 0
    push           3          i64 
    casejumpeq     #17174     i64 0
    push           2          i64 
    casejumpeq     #17175     i64 0
    popstack                  i64 
    jump           #17176     
#17174: 
    setargs                   1 0
    push           pc_genss.do_arith.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_arith.regcode i64 
    setargs                   2 0
    push           pc_genss.do_arith.regcode i64 
    push           pc_genss.do_arith.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_arith.am i64 
    setargs                   1 0
    push           pc_genss.do_arith.a u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_arith.b u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_arith.a u64 
    callproc       &pc_genss.setopsize 
    push           pc_genss.do_arith.code i64 
    push           3          i64 
    shl                       i64 
    startmult                 
    push           pc_genss.do_arith.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #17177     i64 
    push           2          i64 
    resetmult                 
    jump           #17178     
#17177: 
    push           3          i64 
    endmult                   
#17178: 
    ior                       i64 
    pop            pc_genss.do_arith.opc i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           pc_genss.do_arith.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_arith.am i64 
    push           pc_genss.do_arith.b u64 
    callproc       &pc_genss.genamode 
    jump           #17179     
#17175: 
!doregimm::
#17180: 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_arith.b u64 
    callfn         &pc_genss.getdef u64 
    jumpfalse      #17181     u64 
    push           pc_genss.do_arith.code i64 
    push           0          i64 
    jumplt         #17182     i64 
    push           pc_genss.do_arith.code i64 
    push           7          i64 
    jumple         #17183     i64 
#17182: 
    setargs                   1 0
    push           "non-add arith/label" u64 
    callproc       &pci_mcl.axerror 
#17183: 
    push           pc_genss.do_arith.a u64 
    push           8          
    pushptroff                u8 1 0
    push           4          i64 
    jumpge         #17184     i64 
    setargs                   1 0
    push           "add imm/size" u64 
    callproc       &pci_mcl.axerror 
#17184: 
    setargs                   2 0
    push           pc_genss.do_arith.code i64 
    push           pc_genss.do_arith.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_arith.am i64 
    setargs                   1 0
    push           pc_genss.do_arith.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           129        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_arith.am i64 
    push           pc_genss.do_arith.a u64 
    callproc       &pc_genss.genamode 
    setargs                   2 0
    push           4          i64 
    push           pc_genss.do_arith.b u64 
    callproc       &pc_genss.genopnd 
    jump           #17185     
#17181: 
    push           pc_genss.do_arith.b u64 
    pushptr                   i64 
    pop            pc_genss.do_arith.x i64 
    push           1          i64 
    pop            pc_genss.do_arith.dispsize i64 
    push           pc_genss.do_arith.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #17186     i64 
    push           128        i64 
    pop            pc_genss.do_arith.opc i64 
    jump           #17187     
#17186: 
    push           -128       i64 
    push           pc_genss.do_arith.x i64 
    jumpgt         #17188     i64 
    push           pc_genss.do_arith.x i64 
    push           127        i64 
    jumpgt         #17188     i64 
    push           131        i64 
    pop            pc_genss.do_arith.opc i64 
    jump           #17187     
#17188: 
    push           -2147483648 i64 
    push           pc_genss.do_arith.x i64 
    jumpgt         #17189     i64 
    push           pc_genss.do_arith.x i64 
    push           4294967295 i64 
    jumple         #17190     i64 
#17189: 
    setargs                   1 0
    push           "3:exceeding word32 value" u64 
    callproc       &pci_mcl.axerror 
#17190: 
    push           129        i64 
    pop            pc_genss.do_arith.opc i64 
    startmult                 
    push           pc_genss.do_arith.a u64 
    push           8          
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #17191     i64 
    push           2          i64 
    resetmult                 
    jump           #17192     
#17191: 
    push           4          i64 
    endmult                   
#17192: 
    pop            pc_genss.do_arith.dispsize i64 
#17187: 
    setargs                   2 0
    push           pc_genss.do_arith.code i64 
    push           pc_genss.do_arith.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_arith.am i64 
    setargs                   1 0
    push           pc_genss.do_arith.a u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_arith.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           pc_genss.do_arith.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_arith.am i64 
    push           pc_genss.do_arith.a u64 
    callproc       &pc_genss.genamode 
    push           pc_genss.do_arith.dispsize i64 
    push           1          i64 
    casejumpeq     #17193     i64 0
    push           2          i64 
    casejumpeq     #17194     i64 0
    push           4          i64 
    casejumpeq     #17195     i64 0
    popstack                  i64 
    jump           #17196     
#17193: 
    setargs                   1 0
    push           pc_genss.do_arith.x i64 
    callproc       &pc_genss.genbyte 
    jump           #17197     
#17194: 
    setargs                   1 0
    push           pc_genss.do_arith.x i64 
    callproc       &pc_genss.genword 
    jump           #17197     
#17195: 
    setargs                   1 0
    push           pc_genss.do_arith.x i64 
    callproc       &pc_genss.gendword 
    jump           #17197     
#17196: 
#17197: 
    jump           #17179     
#17176: 
    setargs                   1 0
    push           "ADD reg,???" u64 
    callproc       &pci_mcl.axerror 
#17179: 
    jump           #17198     
#17172: 
    push           pc_genss.do_arith.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #17199     i64 0
    push           2          i64 
    casejumpeq     #17200     i64 0
    popstack                  i64 
    jump           #17201     
#17199: 
    setargs                   1 0
    push           pc_genss.do_arith.b u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_arith.regcode i64 
    setargs                   2 0
    push           pc_genss.do_arith.regcode i64 
    push           pc_genss.do_arith.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_arith.am i64 
    setargs                   1 0
    push           pc_genss.do_arith.b u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_arith.b u64 
    callproc       &pc_genss.setopsize 
    push           pc_genss.do_arith.code i64 
    push           3          i64 
    shl                       i64 
    startmult                 
    push           pc_genss.do_arith.b u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #17202     i64 
    push           0          i64 
    resetmult                 
    jump           #17203     
#17202: 
    push           1          i64 
    endmult                   
#17203: 
    ior                       i64 
    pop            pc_genss.do_arith.opc i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           pc_genss.do_arith.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_arith.am i64 
    push           pc_genss.do_arith.a u64 
    callproc       &pc_genss.genamode 
    jump           #17204     
#17200: 
    jump           #17180     
    jump           #17204     
#17201: 
    setargs                   1 0
    push           "ADD mem,???" u64 
    callproc       &pci_mcl.axerror 
#17204: 
    jump           #17198     
#17173: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pci_mcl.opndnames_ma 
    push           pc_genss.do_arith.a u64 
    push           9          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Can't add to this opnd" u64 
    callproc       &pci_mcl.axerror 
#17198: 
#17185: 
    retproc                   
End


Proc pc_genss.do_mov:
    param          pc_genss.do_mov.a u64 
    param          pc_genss.do_mov.b u64 
    local          pc_genss.do_mov.regcode i64 
    local          pc_genss.do_mov.am i64 
    local          pc_genss.do_mov.value i64 
    procentry                 
    push           pc_genss.do_mov.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #17206     i64 0
    push           3          i64 
    casejumpeq     #17207     i64 0
    popstack                  i64 
    jump           #17208     
#17206: 
    push           pc_genss.do_mov.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #17209     i64 0
    push           3          i64 
    casejumpeq     #17209     i64 0
    push           2          i64 
    casejumpeq     #17210     i64 0
    popstack                  i64 
    jump           #17211     
#17209: 
    push           pc_genss.do_mov.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_mov.b u64 
    push           8          
    pushptroff                u8 1 0
    jumpeq         #17212     i64 
    push           pc_genss.do_mov.b u64 
    push           8          
    pushptroff                u8 1 0
    jumpfalse      #17212     i64 
    setargs                   1 0
    push           "1:Opnd size mismatch" u64 
    callproc       &pci_mcl.axerror 
#17212: 
    setargs                   1 0
    push           pc_genss.do_mov.a u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_mov.b u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_mov.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_mov.regcode i64 
    setargs                   2 0
    push           pc_genss.do_mov.regcode i64 
    push           pc_genss.do_mov.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_mov.am i64 
    setargs                   1 0
    push           pc_genss.do_mov.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    startmult                 
    push           pc_genss.do_mov.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #17213     i64 
    push           138        i64 
    resetmult                 
    jump           #17214     
#17213: 
    push           139        i64 
    endmult                   
#17214: 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_mov.am i64 
    push           pc_genss.do_mov.b u64 
    callproc       &pc_genss.genamode 
    jump           #17215     
#17210: 
    push           pc_genss.do_mov.b u64 
    pushptr                   i64 
    pop            pc_genss.do_mov.value i64 
    setargs                   1 0
    push           pc_genss.do_mov.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcodeb i64 
    pop            pc_genss.do_mov.regcode i64 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_mov.b u64 
    callfn         &pc_genss.getdef u64 
    jumpfalse      #17216     u64 
    push           pc_genss.do_mov.a u64 
    push           8          
    pushptroff                u8 1 0
    push           2          i64 
    jumpgt         #17216     i64 
    setargs                   1 0
    push           "mov imm?" u64 
    callproc       &pci_mcl.axerror 
#17216: 
    push           pc_genss.do_mov.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #17217     i64 0
    push           2          i64 
    casejumpeq     #17218     i64 0
    push           4          i64 
    casejumpeq     #17219     i64 0
    popstack                  i64 
    jump           #17220     
#17217: 
    setargs                   1 0
    push           pc_genss.do_mov.a u64 
    callproc       &pc_genss.checkhighreg 
    push           pc_genss.do_mov.a u64 
    push           10         
    pushptroff                u8 1 0
    push           6          i64 
    casejumpeq     #17221     i64 0
    push           4          i64 
    casejumpeq     #17221     i64 0
    push           15         i64 
    casejumpeq     #17221     i64 0
    push           16         i64 
    casejumpeq     #17221     i64 0
    popstack                  i64 
    jump           #17222     
#17221: 
    push           &pc_genss.rex 
    push           64         i64 
    iorto                     i64 
    jump           #17223     
#17222: 
#17223: 
    push           -128       i64 
    push           pc_genss.do_mov.value i64 
    jumpgt         #17224     i64 
    push           pc_genss.do_mov.value i64 
    push           255        i64 
    jumple         #17225     i64 
#17224: 
    setargs                   1 0
    push           "exceeding byte value" u64 
    callproc       &pci_mcl.axerror 
#17225: 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           176        i64 
    push           pc_genss.do_mov.regcode i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_mov.value i64 
    callproc       &pc_genss.genbyte 
    jump           #17226     
#17218: 
    push           -32768     i64 
    push           pc_genss.do_mov.value i64 
    jumpgt         #17227     i64 
    push           pc_genss.do_mov.value i64 
    push           65535      i64 
    jumple         #17228     i64 
#17227: 
    setargs                   1 0
    push           "exceeding word16 value" u64 
    callproc       &pci_mcl.axerror 
#17228: 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           184        i64 
    push           pc_genss.do_mov.regcode i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_mov.value i64 
    callproc       &pc_genss.genword 
    jump           #17226     
#17219: 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_mov.b u64 
    callfn         &pc_genss.getdef u64 
    jumpfalse      #17229     u64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           184        i64 
    push           pc_genss.do_mov.regcode i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           4          i64 
    push           pc_genss.do_mov.b u64 
    callproc       &pc_genss.genopnd 
    jump           #17230     
#17229: 
    push           -2147483648 i64 
    push           pc_genss.do_mov.value i64 
    jumpgt         #17231     i64 
    push           pc_genss.do_mov.value i64 
    push           4294967295 i64 
    truncate                  i64 u32 
    jumple         #17232     i64 
#17231: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           pc_genss.do_mov.value i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           pc_genss.do_mov.value u64 
    callproc       &msysp.m$print_ptr_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "1:exceeding word32 value" u64 
    callproc       &pci_mcl.axerror 
#17232: 
!doreg32::
#17233: 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           184        i64 
    push           pc_genss.do_mov.regcode i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_mov.value i64 
    callproc       &pc_genss.gendword 
#17230: 
    jump           #17226     
#17220: 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_mov.b u64 
    callfn         &pc_genss.getdef u64 
    jumpfalse      #17234     u64 
    push           &pc_genss.rex 
    push           8          i64 
    iorto                     i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           184        i64 
    push           pc_genss.do_mov.regcode i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           8          i64 
    push           pc_genss.do_mov.b u64 
    callproc       &pc_genss.genopnd 
    jump           #17235     
#17234: 
    push           pc_genss.do_mov.value i64 
    push           0          i64 
    jumplt         #17236     i64 
    push           pc_genss.do_mov.value i64 
    push           4294967295 i64 
    jumpgt         #17236     i64 
    jump           #17233     
#17236: 
    push           &pc_genss.rex 
    push           8          i64 
    iorto                     i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           184        i64 
    push           pc_genss.do_mov.regcode i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_mov.value i64 
    callproc       &pc_genss.genqword 
#17235: 
#17226: 
    jump           #17215     
#17211: 
    setargs                   1 0
    push           "MOV REG/??" u64 
    callproc       &pci_mcl.axerror 
#17215: 
    jump           #17237     
#17207: 
    push           pc_genss.do_mov.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #17238     i64 0
    push           2          i64 
    casejumpeq     #17239     i64 0
    popstack                  i64 
    jump           #17240     
#17238: 
    push           pc_genss.do_mov.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_mov.b u64 
    push           8          
    pushptroff                u8 1 0
    jumpeq         #17241     i64 
    push           pc_genss.do_mov.a u64 
    push           8          
    pushptroff                u8 1 0
    jumpfalse      #17241     i64 
    setargs                   1 0
    push           "2:Opnd size mismatch" u64 
    callproc       &pci_mcl.axerror 
#17241: 
    setargs                   1 0
    push           pc_genss.do_mov.b u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_mov.regcode i64 
    setargs                   1 0
    push           pc_genss.do_mov.b u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   2 0
    push           pc_genss.do_mov.regcode i64 
    push           pc_genss.do_mov.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_mov.am i64 
    setargs                   1 0
    push           pc_genss.do_mov.b u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    startmult                 
    push           pc_genss.do_mov.b u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #17242     i64 
    push           136        i64 
    resetmult                 
    jump           #17243     
#17242: 
    push           137        i64 
    endmult                   
#17243: 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_mov.am i64 
    push           pc_genss.do_mov.a u64 
    callproc       &pc_genss.genamode 
    jump           #17244     
#17239: 
    push           pc_genss.do_mov.b u64 
    pushptr                   i64 
    pop            pc_genss.do_mov.value i64 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_mov.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_mov.am i64 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_mov.b u64 
    callfn         &pc_genss.getdef u64 
    jumpfalse      #17245     u64 
    push           pc_genss.do_mov.a u64 
    push           8          
    pushptroff                u8 1 0
    push           2          i64 
    jumpgt         #17245     i64 
    setargs                   1 0
    push           "mov imm?" u64 
    callproc       &pci_mcl.axerror 
#17245: 
    push           pc_genss.do_mov.a u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #17246     i64 
    push           1          i64 
    push           pc_genss.do_mov.a u64 
    push           8          
    popptroff                 u8 1 0
#17246: 
    push           pc_genss.do_mov.a u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    casejumpeq     #17247     i64 0
    push           1          i64 
    casejumpeq     #17247     i64 0
    push           2          i64 
    casejumpeq     #17248     i64 0
    push           4          i64 
    casejumpeq     #17249     i64 0
    push           8          i64 
    casejumpeq     #17249     i64 0
    popstack                  i64 
    jump           #17250     
#17247: 
    push           -128       i64 
    push           pc_genss.do_mov.value i64 
    jumpgt         #17251     i64 
    push           pc_genss.do_mov.value i64 
    push           255        i64 
    jumple         #17252     i64 
#17251: 
    setargs                   1 0
    push           "exceeding byte value" u64 
    callproc       &pci_mcl.axerror 
#17252: 
    setargs                   1 0
    push           pc_genss.do_mov.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           198        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_mov.am i64 
    push           pc_genss.do_mov.a u64 
    callproc       &pc_genss.genamode 
    setargs                   1 0
    push           pc_genss.do_mov.value i64 
    callproc       &pc_genss.genbyte 
    jump           #17253     
#17248: 
    push           -32768     i64 
    push           pc_genss.do_mov.value i64 
    jumpgt         #17254     i64 
    push           pc_genss.do_mov.value i64 
    push           65535      i64 
    jumple         #17255     i64 
#17254: 
    setargs                   1 0
    push           "exceeding word16 value" u64 
    callproc       &pci_mcl.axerror 
#17255: 
    setargs                   1 0
    push           pc_genss.do_mov.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           199        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_mov.am i64 
    push           pc_genss.do_mov.a u64 
    callproc       &pc_genss.genamode 
    setargs                   1 0
    push           pc_genss.do_mov.value i64 
    callproc       &pc_genss.genword 
    jump           #17253     
#17249: 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_mov.b u64 
    callfn         &pc_genss.getdef u64 
    jumptrue       #17256     u64 
    push           -2147483648 i64 
    push           pc_genss.do_mov.value i64 
    jumpgt         #17257     i64 
    push           pc_genss.do_mov.value i64 
    push           4294967295 i64 
    jumple         #17258     i64 
#17257: 
    setargs                   1 0
    push           "2:exceeding word32 value" u64 
    callproc       &pci_mcl.axerror 
#17258: 
#17256: 
    setargs                   1 0
    push           pc_genss.do_mov.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           199        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_mov.am i64 
    push           pc_genss.do_mov.a u64 
    callproc       &pc_genss.genamode 
    setargs                   2 0
    push           4          i64 
    push           pc_genss.do_mov.b u64 
    callproc       &pc_genss.genopnd 
    jump           #17253     
#17250: 
#17253: 
    jump           #17244     
#17240: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pci_mcl.opndnames_ma 
    push           pc_genss.do_mov.a u64 
    push           9          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pci_mcl.opndnames_ma 
    push           pc_genss.do_mov.b u64 
    push           9          
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "MOV MEM/?" u64 
    callproc       &pci_mcl.axerror 
#17244: 
    jump           #17237     
#17208: 
    setargs                   1 0
    push           "MOV ?/.." u64 
    callproc       &pci_mcl.axerror 
#17237: 
#17259: 
    retproc                   
End


Proc pc_genss.getregcoder: i64
    param          pc_genss.getregcoder.reg i64 
    local          pc_genss.getregcoder.regcode i64 
    procentry                 
    push           &pci_mcl.regcodes 
    push           pc_genss.getregcoder.reg i64 
    pushptroff                u8 1 0
    pop            pc_genss.getregcoder.regcode i64 
    push           pc_genss.getregcoder.regcode i64 
    push           8          i64 
    jumplt         #17261     i64 
    push           &pc_genss.getregcoder.regcode 
    push           8          i64 
    subto                     i64 
    push           &pc_genss.rex 
    push           4          i64 
    iorto                     i64 
#17261: 
    push           pc_genss.getregcoder.regcode i64 
    setret                    i64 
    jump           #17262     
#17262: 
    retfn                     i64 
End


Proc pc_genss.getregcodeb: i64
    param          pc_genss.getregcodeb.reg i64 
    local          pc_genss.getregcodeb.regcode i64 
    procentry                 
    push           &pci_mcl.regcodes 
    push           pc_genss.getregcodeb.reg i64 
    pushptroff                u8 1 0
    pop            pc_genss.getregcodeb.regcode i64 
    push           pc_genss.getregcodeb.regcode i64 
    push           8          i64 
    jumplt         #17264     i64 
    push           &pc_genss.getregcodeb.regcode 
    push           8          i64 
    subto                     i64 
    push           &pc_genss.rex 
    push           1          i64 
    iorto                     i64 
#17264: 
    push           pc_genss.getregcodeb.regcode i64 
    setret                    i64 
    jump           #17265     
#17265: 
    retfn                     i64 
End


Proc pc_genss.getregcodebx: i64
    param          pc_genss.getregcodebx.reg i64 
    local          pc_genss.getregcodebx.regcode i64 
    procentry                 
    push           pc_genss.getregcodebx.reg i64 
    push           1          i64 
    sub                       i64 
    pop            pc_genss.getregcodebx.regcode i64 
    push           pc_genss.getregcodebx.regcode i64 
    push           8          i64 
    jumplt         #17267     i64 
    push           &pc_genss.getregcodebx.regcode 
    push           8          i64 
    subto                     i64 
    push           &pc_genss.rex 
    push           1          i64 
    iorto                     i64 
#17267: 
    push           pc_genss.getregcodebx.regcode i64 
    setret                    i64 
    jump           #17268     
#17268: 
    retfn                     i64 
End


Proc pc_genss.getregcoderx: i64
    param          pc_genss.getregcoderx.reg i64 
    local          pc_genss.getregcoderx.regcode i64 
    procentry                 
    push           pc_genss.getregcoderx.reg i64 
    push           1          i64 
    sub                       i64 
    pop            pc_genss.getregcoderx.regcode i64 
    push           pc_genss.getregcoderx.regcode i64 
    push           8          i64 
    jumplt         #17270     i64 
    push           &pc_genss.getregcoderx.regcode 
    push           8          i64 
    subto                     i64 
    push           &pc_genss.rex 
    push           4          i64 
    iorto                     i64 
#17270: 
    push           pc_genss.getregcoderx.regcode i64 
    setret                    i64 
    jump           #17271     
#17271: 
    retfn                     i64 
End


Proc pc_genss.do_lea:
    param          pc_genss.do_lea.a u64 
    param          pc_genss.do_lea.b u64 
    local          pc_genss.do_lea.regcode i64 
    local          pc_genss.do_lea.am i64 
    procentry                 
    push           pc_genss.do_lea.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #17273     i64 
    push           pc_genss.do_lea.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpeq         #17274     i64 
#17273: 
    setargs                   1 0
    push           "LEA not reg/mem" u64 
    callproc       &pci_mcl.axerror 
#17274: 
    push           pc_genss.do_lea.a u64 
    push           8          
    pushptroff                u8 1 0
    push           4          i64 
    jumpge         #17275     i64 
    setargs                   1 0
    push           "LEA size error" u64 
    callproc       &pci_mcl.axerror 
#17275: 
    setargs                   1 0
    push           pc_genss.do_lea.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_lea.regcode i64 
    setargs                   2 0
    push           pc_genss.do_lea.regcode i64 
    push           pc_genss.do_lea.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_lea.am i64 
    setargs                   1 0
    push           pc_genss.do_lea.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           141        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_lea.am i64 
    push           pc_genss.do_lea.b u64 
    callproc       &pc_genss.genamode 
#17276: 
    retproc                   
End


Proc pc_genss.do_movsx:
    param          pc_genss.do_movsx.a u64 
    param          pc_genss.do_movsx.b u64 
    param          pc_genss.do_movsx.opc i64 
    local          pc_genss.do_movsx.am i64 
    local          pc_genss.do_movsx.regcode i64 
    procentry                 
    push           pc_genss.do_movsx.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #17278     i64 
    setargs                   1 0
    push           "movsx not reg" u64 
    callproc       &pci_mcl.axerror 
#17278: 
    push           pc_genss.do_movsx.a u64 
    push           8          
    pushptroff                u8 1 0
    push           8          i64 
    jumpne         #17279     i64 
    push           pc_genss.do_movsx.b u64 
    push           8          
    pushptroff                u8 1 0
    push           4          i64 
    jumpne         #17279     i64 
    push           pc_genss.do_movsx.opc i64 
    push           190        i64 
    jumpne         #17280     i64 
    setargs                   2 0
    push           pc_genss.do_movsx.b u64 
    push           pc_genss.do_movsx.a u64 
    callproc       &pc_genss.do_movsxd 
    jump           #17281     
#17280: 
    push           &pci_mcl.regtable 
    push           pc_genss.do_movsx.a u64 
    push           10         
    pushptroff                u8 1 0
    addrefoff                 block:128 128 -128
    push           4          i64 
    pushptroff                u64 8 -8
    pop            pc_genss.do_movsx.a u64 
    setargs                   2 0
    push           pc_genss.do_movsx.b u64 
    push           pc_genss.do_movsx.a u64 
    callproc       &pc_genss.do_mov 
#17281: 
    jump           #17282     
#17279: 
    push           pc_genss.do_movsx.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #17283     i64 
    push           pc_genss.do_movsx.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_movsx.b u64 
    push           8          
    pushptroff                u8 1 0
    jumpgt         #17284     i64 
#17283: 
    setargs                   1 0
    push           "movsx size error" u64 
    callproc       &pci_mcl.axerror 
#17284: 
    push           pc_genss.do_movsx.opc i64 
    push           182        i64 
    jumpne         #17285     i64 
    push           pc_genss.do_movsx.b u64 
    push           8          
    pushptroff                u8 1 0
    push           4          i64 
    jumpne         #17285     i64 
    setargs                   1 0
    push           "movsx 4=>8 bytes?" u64 
    callproc       &pci_mcl.axerror 
#17285: 
    push           pc_genss.do_movsx.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #17286     i64 0
    push           3          i64 
    casejumpeq     #17287     i64 0
    popstack                  i64 
    jump           #17288     
#17286: 
    jump           #17289     
#17287: 
    push           pc_genss.do_movsx.b u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #17290     i64 
    setargs                   1 0
    push           "movsx need size prefix" u64 
    callproc       &pci_mcl.axerror 
#17290: 
    push           pc_genss.do_movsx.b u64 
    push           8          
    pushptroff                u8 1 0
    push           8          i64 
    jumpne         #17291     i64 
    setargs                   1 0
    push           "movsx size 8" u64 
    callproc       &pci_mcl.axerror 
#17291: 
    jump           #17289     
#17288: 
    setargs                   1 0
    push           "movsx not reg/mem" u64 
    callproc       &pci_mcl.axerror 
#17289: 
    setargs                   1 0
    push           pc_genss.do_movsx.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_movsx.regcode i64 
    setargs                   2 0
    push           pc_genss.do_movsx.regcode i64 
    push           pc_genss.do_movsx.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_movsx.am i64 
    setargs                   1 0
    push           pc_genss.do_movsx.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   1 0
    push           pc_genss.do_movsx.b u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    startmult                 
    push           pc_genss.do_movsx.b u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #17292     i64 
    push           pc_genss.do_movsx.opc i64 
    resetmult                 
    jump           #17293     
#17292: 
    push           pc_genss.do_movsx.opc i64 
    push           1          i64 
    add                       i64 
    endmult                   
#17293: 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_movsx.am i64 
    push           pc_genss.do_movsx.b u64 
    callproc       &pc_genss.genamode 
#17282: 
    retproc                   
End


Proc pc_genss.checkhighreg:
    param          pc_genss.checkhighreg.a u64 
    procentry                 
    push           pc_genss.checkhighreg.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #17295     i64 
    push           pc_genss.checkhighreg.a u64 
    push           10         
    pushptroff                u8 1 0
    push           6          i64 
    casejumpeq     #17296     i64 0
    push           4          i64 
    casejumpeq     #17296     i64 0
    push           15         i64 
    casejumpeq     #17296     i64 0
    push           16         i64 
    casejumpeq     #17296     i64 0
    popstack                  i64 
    jump           #17297     
#17296: 
    push           &pc_genss.rex 
    push           64         i64 
    iorto                     i64 
    jump           #17298     
#17297: 
#17298: 
#17295: 
#17299: 
    retproc                   
End


Proc pc_genss.do_exch:
    param          pc_genss.do_exch.a u64 
    param          pc_genss.do_exch.b u64 
    local          pc_genss.do_exch.regcode i64 
    local          pc_genss.do_exch.am i64 
    procentry                 
    push           pc_genss.do_exch.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #17301     i64 
    push           pc_genss.do_exch.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #17301     i64 
    push           pc_genss.do_exch.a u64 
    push           10         
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #17302     i64 
    push           pc_genss.do_exch.b u64 
    push           10         
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #17301     i64 
#17302: 
    push           pc_genss.do_exch.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #17301     i64 
    push           pc_genss.do_exch.a u64 
    push           10         
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #17303     i64 
    push           &pc_genss.do_exch.a 
    push           &pc_genss.do_exch.b 
    swap                      u64 
#17303: 
    push           pc_genss.do_exch.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_exch.b u64 
    push           8          
    pushptroff                u8 1 0
    jumpeq         #17304     i64 
    setargs                   1 0
    push           "exch size" u64 
    callproc       &pci_mcl.axerror 
#17304: 
    setargs                   1 0
    push           pc_genss.do_exch.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   1 0
    push           pc_genss.do_exch.b u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcodeb i64 
    pop            pc_genss.do_exch.regcode i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           144        i64 
    push           pc_genss.do_exch.regcode i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    jump           #17305     
#17301: 
    push           pc_genss.do_exch.a u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #17306     i64 
    push           &pc_genss.do_exch.a 
    push           &pc_genss.do_exch.b 
    swap                      u64 
#17306: 
    push           pc_genss.do_exch.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #17307     i64 
    push           pc_genss.do_exch.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #17308     i64 
    push           pc_genss.do_exch.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpeq         #17308     i64 
#17307: 
    setargs                   1 0
    push           "exch opnds" u64 
    callproc       &pci_mcl.axerror 
#17308: 
    push           pc_genss.do_exch.b u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #17309     i64 
    push           pc_genss.do_exch.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #17309     i64 
    push           pc_genss.do_exch.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_exch.b u64 
    push           8          
    popptroff                 u8 1 0
#17309: 
    push           pc_genss.do_exch.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_exch.b u64 
    push           8          
    pushptroff                u8 1 0
    jumpeq         #17310     i64 
    setargs                   1 0
    push           "exch size" u64 
    callproc       &pci_mcl.axerror 
#17310: 
    push           pc_genss.do_exch.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #17311     i64 
    setargs                   1 0
    push           pc_genss.do_exch.a u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_exch.b u64 
    callproc       &pc_genss.checkhighreg 
#17311: 
    setargs                   1 0
    push           pc_genss.do_exch.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_exch.regcode i64 
    setargs                   2 0
    push           pc_genss.do_exch.regcode i64 
    push           pc_genss.do_exch.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_exch.am i64 
    setargs                   1 0
    push           pc_genss.do_exch.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    startmult                 
    push           pc_genss.do_exch.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #17312     i64 
    push           134        i64 
    resetmult                 
    jump           #17313     
#17312: 
    push           135        i64 
    endmult                   
#17313: 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_exch.am i64 
    push           pc_genss.do_exch.b u64 
    callproc       &pc_genss.genamode 
#17305: 
    retproc                   
End


Proc pc_genss.do_movsxd:
    param          pc_genss.do_movsxd.a u64 
    param          pc_genss.do_movsxd.b u64 
    local          pc_genss.do_movsxd.regcode i64 
    local          pc_genss.do_movsxd.am i64 
    procentry                 
    push           pc_genss.do_movsxd.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #17315     i64 
    push           pc_genss.do_movsxd.b u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #17315     i64 
    push           4          i64 
    push           pc_genss.do_movsxd.b u64 
    push           8          
    popptroff                 u8 1 0
#17315: 
    push           pc_genss.do_movsxd.a u64 
    push           8          
    pushptroff                u8 1 0
    push           8          i64 
    jumpne         #17316     i64 
    push           pc_genss.do_movsxd.b u64 
    push           8          
    pushptroff                u8 1 0
    push           4          i64 
    jumple         #17317     i64 
#17316: 
    setargs                   1 0
    push           "movsxd size" u64 
    callproc       &pci_mcl.axerror 
#17317: 
    push           pc_genss.do_movsxd.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #17318     i64 
    push           pc_genss.do_movsxd.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #17319     i64 
    push           pc_genss.do_movsxd.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpeq         #17319     i64 
#17318: 
    setargs                   1 0
    push           "movsxd opnds" u64 
    callproc       &pci_mcl.axerror 
#17319: 
    setargs                   1 0
    push           pc_genss.do_movsxd.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_movsxd.regcode i64 
    setargs                   2 0
    push           pc_genss.do_movsxd.regcode i64 
    push           pc_genss.do_movsxd.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_movsxd.am i64 
    setargs                   1 0
    push           pc_genss.do_movsxd.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           99         i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_movsxd.am i64 
    push           pc_genss.do_movsxd.b u64 
    callproc       &pc_genss.genamode 
#17320: 
    retproc                   
End


Proc pc_genss.do_imul2:
    param          pc_genss.do_imul2.a u64 
    param          pc_genss.do_imul2.b u64 
    local          pc_genss.do_imul2.regcode i64 
    local          pc_genss.do_imul2.am i64 
    local          pc_genss.do_imul2.opc i64 
    local          pc_genss.do_imul2.value i64 
    procentry                 
    push           pc_genss.do_imul2.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #17322     i64 
    setargs                   1 0
    push           "imul2 opnds" u64 
    callproc       &pci_mcl.axerror 
#17322: 
    push           pc_genss.do_imul2.b u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #17323     i64 
    push           pc_genss.do_imul2.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_imul2.b u64 
    push           8          
    popptroff                 u8 1 0
#17323: 
    push           pc_genss.do_imul2.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #17324     i64 
    setargs                   1 0
    push           "imul2 byte" u64 
    callproc       &pci_mcl.axerror 
#17324: 
    push           pc_genss.do_imul2.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #17325     i64 0
    push           3          i64 
    casejumpeq     #17325     i64 0
    push           2          i64 
    casejumpeq     #17326     i64 0
    popstack                  i64 
    jump           #17327     
#17325: 
    push           pc_genss.do_imul2.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_imul2.b u64 
    push           8          
    pushptroff                u8 1 0
    jumpeq         #17328     i64 
    setargs                   1 0
    push           "imul2 size" u64 
    callproc       &pci_mcl.axerror 
#17328: 
    setargs                   1 0
    push           pc_genss.do_imul2.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_imul2.regcode i64 
    setargs                   2 0
    push           pc_genss.do_imul2.regcode i64 
    push           pc_genss.do_imul2.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_imul2.am i64 
    setargs                   1 0
    push           pc_genss.do_imul2.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           175        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_imul2.am i64 
    push           pc_genss.do_imul2.b u64 
    callproc       &pc_genss.genamode 
    jump           #17329     
#17326: 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_imul2.b u64 
    callfn         &pc_genss.getdef u64 
    jumpfalse      #17330     u64 
    setargs                   1 0
    push           "mul/label" u64 
    callproc       &pci_mcl.axerror 
#17330: 
    push           pc_genss.do_imul2.b u64 
    pushptr                   i64 
    pop            pc_genss.do_imul2.value i64 
    setargs                   1 0
    push           pc_genss.do_imul2.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_imul2.regcode i64 
    setargs                   1 0
    push           pc_genss.do_imul2.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcodeb i64 
    pop            pc_genss.do_imul2.regcode i64 
    push           192        i64 
    push           pc_genss.do_imul2.regcode i64 
    push           3          i64 
    shl                       i64 
    add                       i64 
    push           pc_genss.do_imul2.regcode i64 
    add                       i64 
    pop            pc_genss.do_imul2.opc i64 
    setargs                   1 0
    push           pc_genss.do_imul2.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    push           -128       i64 
    push           pc_genss.do_imul2.value i64 
    jumpgt         #17331     i64 
    push           pc_genss.do_imul2.value i64 
    push           127        i64 
    jumpgt         #17331     i64 
    setargs                   1 0
    push           107        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_imul2.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_imul2.value i64 
    callproc       &pc_genss.genbyte 
    jump           #17332     
#17331: 
    push           pc_genss.do_imul2.a u64 
    push           8          
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #17333     i64 
    setargs                   1 0
    push           105        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_imul2.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_imul2.value i64 
    callproc       &pc_genss.genword 
    jump           #17332     
#17333: 
    setargs                   1 0
    push           105        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_imul2.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_imul2.value i64 
    callproc       &pc_genss.gendword 
#17332: 
    jump           #17329     
#17327: 
    setargs                   1 0
    push           "imul2 opnds" u64 
    callproc       &pci_mcl.axerror 
#17329: 
#17334: 
    retproc                   
End


Proc pc_genss.do_shift:
    param          pc_genss.do_shift.a u64 
    param          pc_genss.do_shift.b u64 
    param          pc_genss.do_shift.opc i64 
    local          pc_genss.do_shift.am i64 
    local          pc_genss.do_shift.w i64 
    procentry                 
    push           pc_genss.do_shift.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #17336     i64 
    push           pc_genss.do_shift.a u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpeq         #17336     i64 
    setargs                   1 0
    push           "shift opnds1?" u64 
    callproc       &pci_mcl.axerror 
#17336: 
    setargs                   2 0
    push           pc_genss.do_shift.opc i64 
    push           pc_genss.do_shift.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_shift.am i64 
    setargs                   1 0
    push           pc_genss.do_shift.a u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_shift.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    startmult                 
    push           pc_genss.do_shift.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #17337     i64 
    push           0          i64 
    resetmult                 
    jump           #17338     
#17337: 
    push           1          i64 
    endmult                   
#17338: 
    pop            pc_genss.do_shift.w i64 
    push           pc_genss.do_shift.b u64 
    push           9          
    pushptroff                u8 1 0
    push           2          i64 
    casejumpeq     #17339     i64 0
    push           1          i64 
    casejumpeq     #17340     i64 0
    popstack                  i64 
    jump           #17341     
#17339: 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_shift.b u64 
    callfn         &pc_genss.getdef u64 
    jumpfalse      #17342     u64 
    setargs                   1 0
    push           "shift/label" u64 
    callproc       &pci_mcl.axerror 
#17342: 
    push           pc_genss.do_shift.b u64 
    pushptr                   i64 
    push           1          i64 
    jumpne         #17343     i64 
    setargs                   1 0
    push           208        i64 
    push           pc_genss.do_shift.w i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_shift.am i64 
    push           pc_genss.do_shift.a u64 
    callproc       &pc_genss.genamode 
    jump           #17344     
#17343: 
    setargs                   1 0
    push           192        i64 
    push           pc_genss.do_shift.w i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_shift.am i64 
    push           pc_genss.do_shift.a u64 
    callproc       &pc_genss.genamode 
    setargs                   1 0
    push           pc_genss.do_shift.b u64 
    pushptr                   i64 
    callproc       &pc_genss.genbyte 
#17344: 
    jump           #17345     
#17340: 
    push           pc_genss.do_shift.b u64 
    push           10         
    pushptroff                u8 1 0
    push           11         i64 
    jumpne         #17346     i64 
    push           pc_genss.do_shift.b u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #17347     i64 
#17346: 
    setargs                   1 0
    push           "cl or b10 needed" u64 
    callproc       &pci_mcl.axerror 
#17347: 
    setargs                   1 0
    push           210        i64 
    push           pc_genss.do_shift.w i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_shift.am i64 
    push           pc_genss.do_shift.a u64 
    callproc       &pc_genss.genamode 
    jump           #17345     
#17341: 
    setargs                   1 0
    push           "shift opnds2?" u64 
    callproc       &pci_mcl.axerror 
#17345: 
#17348: 
    retproc                   
End


Proc pc_genss.do_test:
    param          pc_genss.do_test.a u64 
    param          pc_genss.do_test.b u64 
    local          pc_genss.do_test.value i64 
    local          pc_genss.do_test.opc i64 
    local          pc_genss.do_test.am i64 
    local          pc_genss.do_test.regcode i64 
    procentry                 
    push           pc_genss.do_test.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #17350     i64 
    push           pc_genss.do_test.a u64 
    push           10         
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #17350     i64 
    push           pc_genss.do_test.b u64 
    push           9          
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #17350     i64 
    push           pc_genss.do_test.b u64 
    pushptr                   i64 
    pop            pc_genss.do_test.value i64 
    push           pc_genss.do_test.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #17351     i64 0
    push           2          i64 
    casejumpeq     #17352     i64 0
    push           4          i64 
    casejumpeq     #17353     i64 0
    popstack                  i64 
    jump           #17354     
#17351: 
    setargs                   1 0
    push           168        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_test.value i64 
    callproc       &pc_genss.genbyte 
    jump           #17355     
#17352: 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           169        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_test.value i64 
    callproc       &pc_genss.genword 
    jump           #17355     
#17353: 
    setargs                   1 0
    push           169        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_test.value i64 
    callproc       &pc_genss.gendword 
    jump           #17355     
#17354: 
    setargs                   1 0
    push           72         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           169        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_test.value i64 
    callproc       &pc_genss.gendword 
#17355: 
    jump           #17356     
#17350: 
    push           pc_genss.do_test.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #17357     i64 
    push           pc_genss.do_test.a u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #17358     i64 
#17357: 
    push           pc_genss.do_test.b u64 
    push           9          
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #17358     i64 
    startmult                 
    push           pc_genss.do_test.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #17359     i64 
    push           246        i64 
    resetmult                 
    jump           #17360     
#17359: 
    push           247        i64 
    endmult                   
#17360: 
    pop            pc_genss.do_test.opc i64 
    push           pc_genss.do_test.b u64 
    pushptr                   i64 
    pop            pc_genss.do_test.value i64 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_test.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_test.am i64 
    setargs                   1 0
    push           pc_genss.do_test.a u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_test.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           pc_genss.do_test.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_test.am i64 
    push           pc_genss.do_test.a u64 
    callproc       &pc_genss.genamode 
    push           pc_genss.do_test.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #17361     i64 0
    push           2          i64 
    casejumpeq     #17362     i64 0
    popstack                  i64 
    jump           #17363     
#17361: 
    setargs                   1 0
    push           pc_genss.do_test.value i64 
    callproc       &pc_genss.genbyte 
    jump           #17364     
#17362: 
    setargs                   1 0
    push           pc_genss.do_test.value i64 
    callproc       &pc_genss.genword 
    jump           #17364     
#17363: 
    setargs                   1 0
    push           pc_genss.do_test.value i64 
    callproc       &pc_genss.gendword 
#17364: 
    jump           #17356     
#17358: 
    push           pc_genss.do_test.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #17365     i64 
    push           pc_genss.do_test.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #17366     i64 
    push           pc_genss.do_test.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #17365     i64 
#17366: 
!doregmem::
#17367: 
    setargs                   1 0
    push           pc_genss.do_test.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_test.regcode i64 
    setargs                   2 0
    push           pc_genss.do_test.regcode i64 
    push           pc_genss.do_test.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_test.am i64 
    setargs                   1 0
    push           pc_genss.do_test.a u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_test.b u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   1 0
    push           pc_genss.do_test.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    startmult                 
    push           pc_genss.do_test.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #17368     i64 
    push           132        i64 
    resetmult                 
    jump           #17369     
#17368: 
    push           133        i64 
    endmult                   
#17369: 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_test.am i64 
    push           pc_genss.do_test.b u64 
    callproc       &pc_genss.genamode 
    jump           #17356     
#17365: 
    push           pc_genss.do_test.a u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #17370     i64 
    push           pc_genss.do_test.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #17370     i64 
    push           &pc_genss.do_test.a 
    push           &pc_genss.do_test.b 
    swap                      u64 
    jump           #17367     
    jump           #17356     
#17370: 
    setargs                   1 0
    push           "test opnds" u64 
    callproc       &pci_mcl.axerror 
#17356: 
#17371: 
    retproc                   
End


Proc pc_genss.do_loop:
    param          pc_genss.do_loop.a u64 
    param          pc_genss.do_loop.opc i64 
    local          pc_genss.do_loop.offset i64 
    procentry                 
    setargs                   2 0
    setargs                   1 0
    push           9          i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           1          i64 
    add                       i64 
    setargs                   2 0
    push           1          i64 
    push           pc_genss.do_loop.a u64 
    callfn         &pc_genss.getdef u64 
    callfn         &pc_genss.getrel32 i64 
    pop            pc_genss.do_loop.offset i64 
    push           pc_genss.do_loop.offset i64 
    push           0          i64 
    jumpge         #17373     i64 
    push           pc_genss.do_loop.offset i64 
    push           -126       i64 
    jumpge         #17374     i64 
    setargs                   1 0
    push           "loop jmp out of range" u64 
    callproc       &pci_mcl.axerror 
#17374: 
    setargs                   1 0
    push           pc_genss.do_loop.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_loop.offset i64 
    callproc       &pc_genss.genbyte 
    jump           #17375     
#17373: 
    setargs                   1 0
    push           "Can't do loopxx fwd jump" u64 
    callproc       &pci_mcl.axerror 
#17375: 
#17376: 
    retproc                   
End


Proc pc_genss.do_jcxz:
    param          pc_genss.do_jcxz.a u64 
    param          pc_genss.do_jcxz.opsize i64 
    local          pc_genss.do_jcxz.offset i64 
    procentry                 
    setargs                   2 0
    setargs                   1 0
    push           10         i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           1          i64 
    add                       i64 
    setargs                   2 0
    push           1          i64 
    push           pc_genss.do_jcxz.a u64 
    callfn         &pc_genss.getdef u64 
    callfn         &pc_genss.getrel32 i64 
    pop            pc_genss.do_jcxz.offset i64 
    push           pc_genss.do_jcxz.offset i64 
    push           0          i64 
    jumpge         #17378     i64 
    push           pc_genss.do_jcxz.offset i64 
    push           -126       i64 
    jumpge         #17379     i64 
    setargs                   1 0
    push           "jcxz jmp out of range" u64 
    callproc       &pci_mcl.axerror 
#17379: 
    push           pc_genss.do_jcxz.opsize i64 
    push           4          i64 
    jumpne         #17380     i64 
    setargs                   1 0
    push           103        i64 
    callproc       &pc_genss.genbyte 
#17380: 
    setargs                   1 0
    push           227        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_jcxz.offset i64 
    callproc       &pc_genss.genbyte 
    jump           #17381     
#17378: 
    setargs                   1 0
    push           "Can't do jcxz fwd jump" u64 
    callproc       &pci_mcl.axerror 
#17381: 
#17382: 
    retproc                   
End


Proc pc_genss.do_setcc:
    param          pc_genss.do_setcc.cond i64 
    param          pc_genss.do_setcc.a u64 
    local          pc_genss.do_setcc.am i64 
    procentry                 
    push           pc_genss.do_setcc.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #17384     i64 
    push           pc_genss.do_setcc.a u64 
    push           10         
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #17385     i64 
#17384: 
    push           pc_genss.do_setcc.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumple         #17386     i64 
#17385: 
    setargs                   1 0
    push           "setcc opnd/size" u64 
    callproc       &pci_mcl.axerror 
#17386: 
    setargs                   2 0
    push           0          i64 
    push           pc_genss.do_setcc.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_setcc.am i64 
    setargs                   1 0
    push           pc_genss.do_setcc.a u64 
    callproc       &pc_genss.checkhighreg 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           144        i64 
    push           pc_genss.do_setcc.cond i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_setcc.am i64 
    push           pc_genss.do_setcc.a u64 
    callproc       &pc_genss.genamode 
#17387: 
    retproc                   
End


Proc pc_genss.do_movxmm:
    param          pc_genss.do_movxmm.a u64 
    param          pc_genss.do_movxmm.b u64 
    param          pc_genss.do_movxmm.size i64 
    local          pc_genss.do_movxmm.am i64 
    local          pc_genss.do_movxmm.regcode i64 
    local          pc_genss.do_movxmm.regcode1 i64 
    local          pc_genss.do_movxmm.regcode2 i64 
    procentry                 
    push           pc_genss.do_movxmm.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #17389     i64 0
    push           5          i64 
    casejumpeq     #17390     i64 0
    push           3          i64 
    casejumpeq     #17391     i64 0
    popstack                  i64 
    jump           #17392     
#17389: 
    push           pc_genss.do_movxmm.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    casejumpeq     #17393     i64 0
    popstack                  i64 
    jump           #17394     
#17393: 
    push           pc_genss.do_movxmm.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_movxmm.size i64 
    jumpeq         #17395     i64 
    setargs                   1 0
    push           "1:movdq size" u64 
    callproc       &pci_mcl.axerror 
#17395: 
    setargs                   1 0
    push           pc_genss.do_movxmm.b u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_movxmm.regcode i64 
    setargs                   2 0
    push           pc_genss.do_movxmm.regcode i64 
    push           pc_genss.do_movxmm.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_movxmm.am i64 
    setargs                   1 0
    push           pc_genss.do_movxmm.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           126        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_movxmm.am i64 
    push           pc_genss.do_movxmm.b u64 
    callproc       &pc_genss.genamode 
    jump           #17396     
#17394: 
    setargs                   1 0
    push           "movdq reg,?" u64 
    callproc       &pci_mcl.axerror 
#17396: 
    jump           #17397     
#17390: 
    push           pc_genss.do_movxmm.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #17398     i64 0
    push           5          i64 
    casejumpeq     #17399     i64 0
    push           3          i64 
    casejumpeq     #17400     i64 0
    popstack                  i64 
    jump           #17401     
#17398: 
    push           pc_genss.do_movxmm.b u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_movxmm.size i64 
    jumpeq         #17402     i64 
    setargs                   1 0
    push           "3:movdq size" u64 
    callproc       &pci_mcl.axerror 
#17402: 
    setargs                   1 0
    push           pc_genss.do_movxmm.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_movxmm.regcode i64 
    setargs                   2 0
    push           pc_genss.do_movxmm.regcode i64 
    push           pc_genss.do_movxmm.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_movxmm.am i64 
    setargs                   1 0
    push           pc_genss.do_movxmm.b u64 
    callproc       &pc_genss.setopsize 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           110        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_movxmm.am i64 
    push           pc_genss.do_movxmm.a u64 
    callproc       &pc_genss.genamode 
    jump           #17403     
#17399: 
    setargs                   1 0
    push           pc_genss.do_movxmm.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_movxmm.regcode1 i64 
    setargs                   1 0
    push           pc_genss.do_movxmm.b u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcodebx i64 
    pop            pc_genss.do_movxmm.regcode2 i64 
    setargs                   1 0
    push           243        i64 
    callproc       &pc_genss.genbyte 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           126        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           192        i64 
    push           pc_genss.do_movxmm.regcode1 i64 
    push           3          i64 
    shl                       i64 
    add                       i64 
    push           pc_genss.do_movxmm.regcode2 i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    jump           #17403     
#17400: 
    push           pc_genss.do_movxmm.b u64 
    push           8          
    pushptroff                u8 1 0
    jumpfalse      #17404     i64 
    push           pc_genss.do_movxmm.b u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_movxmm.size i64 
    jumpeq         #17404     i64 
    setargs                   1 0
    push           "4:movdq size" u64 
    callproc       &pci_mcl.axerror 
#17404: 
    setargs                   1 0
    push           pc_genss.do_movxmm.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_movxmm.regcode i64 
    setargs                   2 0
    push           pc_genss.do_movxmm.regcode i64 
    push           pc_genss.do_movxmm.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_movxmm.am i64 
    push           pc_genss.do_movxmm.size i64 
    push           4          i64 
    jumpne         #17405     i64 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           110        i64 
    callproc       &pc_genss.genbyte 
    jump           #17406     
#17405: 
    setargs                   1 0
    push           243        i64 
    callproc       &pc_genss.genbyte 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           126        i64 
    callproc       &pc_genss.genbyte 
#17406: 
    setargs                   2 0
    push           pc_genss.do_movxmm.am i64 
    push           pc_genss.do_movxmm.b u64 
    callproc       &pc_genss.genamode 
    jump           #17403     
#17401: 
    setargs                   1 0
    push           "movdq xreg,?" u64 
    callproc       &pci_mcl.axerror 
#17403: 
    jump           #17397     
#17391: 
    push           pc_genss.do_movxmm.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    casejumpeq     #17407     i64 0
    popstack                  i64 
    jump           #17408     
#17407: 
    push           pc_genss.do_movxmm.a u64 
    push           8          
    pushptroff                u8 1 0
    jumpfalse      #17409     i64 
    push           pc_genss.do_movxmm.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_movxmm.size i64 
    jumpeq         #17409     i64 
    setargs                   1 0
    push           "5:movdq size" u64 
    callproc       &pci_mcl.axerror 
#17409: 
    setargs                   1 0
    push           pc_genss.do_movxmm.b u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_movxmm.regcode i64 
    setargs                   2 0
    push           pc_genss.do_movxmm.regcode i64 
    push           pc_genss.do_movxmm.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_movxmm.am i64 
    push           pc_genss.do_movxmm.size i64 
    push           4          i64 
    jumpne         #17410     i64 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           126        i64 
    callproc       &pc_genss.genbyte 
    jump           #17411     
#17410: 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           214        i64 
    callproc       &pc_genss.genbyte 
#17411: 
    setargs                   2 0
    push           pc_genss.do_movxmm.am i64 
    push           pc_genss.do_movxmm.a u64 
    callproc       &pc_genss.genamode 
    jump           #17412     
#17408: 
    setargs                   1 0
    push           "movdq mem,?" u64 
    callproc       &pci_mcl.axerror 
#17412: 
    jump           #17397     
#17392: 
    setargs                   1 0
    push           "movdq opnds" u64 
    callproc       &pci_mcl.axerror 
#17397: 
#17413: 
    retproc                   
End


Proc pc_genss.do_arithxmm:
    param          pc_genss.do_arithxmm.a u64 
    param          pc_genss.do_arithxmm.b u64 
    param          pc_genss.do_arithxmm.prefix i64 
    param          pc_genss.do_arithxmm.opc i64 
    local          pc_genss.do_arithxmm.am i64 
    local          pc_genss.do_arithxmm.regcode i64 
    procentry                 
    push           pc_genss.do_arithxmm.a u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #17415     i64 
    push           pc_genss.do_arithxmm.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpeq         #17416     i64 
    push           pc_genss.do_arithxmm.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpeq         #17416     i64 
#17415: 
    setargs                   1 0
    push           "arithxmm opnds" u64 
    callproc       &pci_mcl.axerror 
#17416: 
    push           pc_genss.do_arithxmm.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #17417     i64 
    setargs                   1 0
    push           pc_genss.do_arithxmm.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_arithxmm.regcode i64 
    setargs                   2 0
    push           pc_genss.do_arithxmm.regcode i64 
    push           pc_genss.do_arithxmm.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_arithxmm.am i64 
    push           pc_genss.do_arithxmm.prefix i64 
    jumpfalse      #17418     i64 
    setargs                   1 0
    push           pc_genss.do_arithxmm.prefix i64 
    callproc       &pc_genss.genbyte 
#17418: 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_arithxmm.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_arithxmm.am i64 
    push           pc_genss.do_arithxmm.a u64 
    callproc       &pc_genss.genamode 
    jump           #17419     
#17417: 
    setargs                   1 0
    push           pc_genss.do_arithxmm.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_arithxmm.regcode i64 
    setargs                   2 0
    push           pc_genss.do_arithxmm.regcode i64 
    push           pc_genss.do_arithxmm.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_arithxmm.am i64 
    push           pc_genss.do_arithxmm.prefix i64 
    jumpfalse      #17420     i64 
    setargs                   1 0
    push           pc_genss.do_arithxmm.prefix i64 
    callproc       &pc_genss.genbyte 
#17420: 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_arithxmm.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_arithxmm.am i64 
    push           pc_genss.do_arithxmm.b u64 
    callproc       &pc_genss.genamode 
#17419: 
#17421: 
    retproc                   
End


Proc pc_genss.do_logicxmm:
    param          pc_genss.do_logicxmm.a u64 
    param          pc_genss.do_logicxmm.b u64 
    param          pc_genss.do_logicxmm.opc i64 
    param          pc_genss.do_logicxmm.size i64 
    local          pc_genss.do_logicxmm.am i64 
    local          pc_genss.do_logicxmm.regcode i64 
    procentry                 
    push           pc_genss.do_logicxmm.a u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #17423     i64 
    push           pc_genss.do_logicxmm.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpeq         #17424     i64 
    push           pc_genss.do_logicxmm.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpeq         #17424     i64 
#17423: 
    setargs                   1 0
    push           "logicxmm opnds" u64 
    callproc       &pci_mcl.axerror 
#17424: 
    push           pc_genss.do_logicxmm.size i64 
    push           8          i64 
    jumpne         #17425     i64 
    setargs                   1 0
    push           102        i64 
    callproc       &pc_genss.genbyte 
#17425: 
    push           pc_genss.do_logicxmm.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #17426     i64 
    setargs                   1 0
    push           pc_genss.do_logicxmm.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_logicxmm.regcode i64 
    setargs                   2 0
    push           pc_genss.do_logicxmm.regcode i64 
    push           pc_genss.do_logicxmm.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_logicxmm.am i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_logicxmm.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_logicxmm.am i64 
    push           pc_genss.do_logicxmm.b u64 
    callproc       &pc_genss.genamode 
    jump           #17427     
#17426: 
    setargs                   1 0
    push           pc_genss.do_logicxmm.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_logicxmm.regcode i64 
    setargs                   2 0
    push           pc_genss.do_logicxmm.regcode i64 
    push           pc_genss.do_logicxmm.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_logicxmm.am i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_logicxmm.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_logicxmm.am i64 
    push           pc_genss.do_logicxmm.b u64 
    callproc       &pc_genss.genamode 
#17427: 
#17428: 
    retproc                   
End


Proc pc_genss.do_convertfloat:
    param          pc_genss.do_convertfloat.a u64 
    param          pc_genss.do_convertfloat.b u64 
    param          pc_genss.do_convertfloat.prefix i64 
    local          pc_genss.do_convertfloat.am i64 
    local          pc_genss.do_convertfloat.regcode i64 
    procentry                 
    push           pc_genss.do_convertfloat.a u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #17430     i64 
    push           pc_genss.do_convertfloat.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpeq         #17431     i64 
    push           pc_genss.do_convertfloat.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpeq         #17431     i64 
#17430: 
    setargs                   1 0
    push           "convertfloat opnds" u64 
    callproc       &pci_mcl.axerror 
#17431: 
    setargs                   1 0
    push           pc_genss.do_convertfloat.prefix i64 
    callproc       &pc_genss.genbyte 
    push           pc_genss.do_convertfloat.a u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #17432     i64 
    setargs                   1 0
    push           pc_genss.do_convertfloat.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_convertfloat.regcode i64 
    setargs                   2 0
    push           pc_genss.do_convertfloat.regcode i64 
    push           pc_genss.do_convertfloat.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_convertfloat.am i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           90         i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_convertfloat.am i64 
    push           pc_genss.do_convertfloat.b u64 
    callproc       &pc_genss.genamode 
    jump           #17433     
#17432: 
    setargs                   1 0
    push           pc_genss.do_convertfloat.b u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_convertfloat.regcode i64 
    setargs                   2 0
    push           pc_genss.do_convertfloat.regcode i64 
    push           pc_genss.do_convertfloat.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_convertfloat.am i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           90         i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_convertfloat.am i64 
    push           pc_genss.do_convertfloat.b u64 
    callproc       &pc_genss.genamode 
#17433: 
#17434: 
    retproc                   
End


Proc pc_genss.do_fix:
    param          pc_genss.do_fix.a u64 
    param          pc_genss.do_fix.b u64 
    param          pc_genss.do_fix.prefix i64 
    param          pc_genss.do_fix.opc i64 
    local          pc_genss.do_fix.am i64 
    local          pc_genss.do_fix.regcode i64 
    procentry                 
    push           pc_genss.do_fix.a u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #17436     i64 
    push           pc_genss.do_fix.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpeq         #17437     i64 
    push           pc_genss.do_fix.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpeq         #17437     i64 
#17436: 
    setargs                   1 0
    push           "fix opnds" u64 
    callproc       &pci_mcl.axerror 
#17437: 
    setargs                   1 0
    push           pc_genss.do_fix.prefix i64 
    callproc       &pc_genss.genbyte 
    push           pc_genss.do_fix.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #17438     i64 
    setargs                   1 0
    push           pc_genss.do_fix.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_fix.regcode i64 
    setargs                   2 0
    push           pc_genss.do_fix.regcode i64 
    push           pc_genss.do_fix.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_fix.am i64 
    setargs                   1 0
    push           pc_genss.do_fix.a u64 
    callproc       &pc_genss.setopsize 
    jump           #17439     
#17438: 
    setargs                   1 0
    push           pc_genss.do_fix.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_fix.regcode i64 
    setargs                   2 0
    push           pc_genss.do_fix.regcode i64 
    push           pc_genss.do_fix.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_fix.am i64 
    setargs                   1 0
    push           pc_genss.do_fix.a u64 
    callproc       &pc_genss.setopsize 
#17439: 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_fix.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_fix.am i64 
    push           pc_genss.do_fix.b u64 
    callproc       &pc_genss.genamode 
#17440: 
    retproc                   
End


Proc pc_genss.do_float:
    param          pc_genss.do_float.a u64 
    param          pc_genss.do_float.b u64 
    param          pc_genss.do_float.prefix i64 
    local          pc_genss.do_float.am i64 
    local          pc_genss.do_float.regcode i64 
    procentry                 
    push           pc_genss.do_float.a u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #17442     i64 
    push           pc_genss.do_float.b u64 
    push           9          
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #17443     i64 
    push           pc_genss.do_float.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpeq         #17443     i64 
#17442: 
    setargs                   1 0
    push           "float opnds" u64 
    callproc       &pci_mcl.axerror 
#17443: 
    push           pc_genss.do_float.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #17444     i64 
    push           pc_genss.do_float.b u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #17445     i64 
    push           4          i64 
    push           pc_genss.do_float.b u64 
    push           8          
    popptroff                 u8 1 0
#17445: 
    push           pc_genss.do_float.b u64 
    push           8          
    pushptroff                u8 1 0
    push           4          i64 
    jumpeq         #17446     i64 
    push           pc_genss.do_float.b u64 
    push           8          
    pushptroff                u8 1 0
    push           8          i64 
    jumpeq         #17446     i64 
    setargs                   1 0
    push           "float size" u64 
    callproc       &pci_mcl.axerror 
#17446: 
#17444: 
    setargs                   1 0
    push           pc_genss.do_float.prefix i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_float.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_float.regcode i64 
    setargs                   2 0
    push           pc_genss.do_float.regcode i64 
    push           pc_genss.do_float.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_float.am i64 
    setargs                   1 0
    push           pc_genss.do_float.b u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           42         i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_float.am i64 
    push           pc_genss.do_float.b u64 
    callproc       &pc_genss.genamode 
#17447: 
    retproc                   
End


Proc pc_genss.do_call:
    param          pc_genss.do_call.a u64 
    local          pc_genss.do_call.am i64 
    local          pc_genss.do_call.regcode i64 
    procentry                 
    push           pc_genss.do_call.a u64 
    push           9          
    pushptroff                u8 1 0
    push           2          i64 
    casejumpeq     #17449     i64 0
    popstack                  i64 
    jump           #17450     
#17449: 
    setargs                   1 0
    push           232        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_call.a u64 
    callproc       &pc_genss.genrel32 
    jump           #17451     
#17450: 
    push           pc_genss.do_call.a u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    casejumpeq     #17452     i64 0
    push           1          i64 
    casejumpeq     #17453     i64 0
    push           2          i64 
    casejumpeq     #17453     i64 0
    push           4          i64 
    casejumpeq     #17453     i64 0
    popstack                  i64 
    jump           #17454     
#17452: 
    push           8          i64 
    push           pc_genss.do_call.a u64 
    push           8          
    popptroff                 u8 1 0
    jump           #17455     
#17453: 
    setargs                   1 0
    push           "call[]size" u64 
    callproc       &pci_mcl.axerror 
    jump           #17455     
#17454: 
#17455: 
    setargs                   2 0
    push           2          i64 
    push           pc_genss.do_call.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_call.am i64 
    setargs                   1 0
    push           pc_genss.do_call.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   1 0
    push           pc_genss.do_call.a u64 
    callproc       &pc_genss.setaddrsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           255        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_call.am i64 
    push           pc_genss.do_call.a u64 
    callproc       &pc_genss.genamode 
#17451: 
#17456: 
    retproc                   
End


Proc pc_genss.do_jmp:
    param          pc_genss.do_jmp.a u64 
    param          pc_genss.do_jmp.m u64 
    local          pc_genss.do_jmp.am i64 
    local          pc_genss.do_jmp.regcode i64 
    local          pc_genss.do_jmp.offset i64 
    local          pc_genss.do_jmp.shortjmp i64 
    local          pc_genss.do_jmp.d u64 
    procentry                 
    push           pc_genss.do_jmp.a u64 
    push           9          
    pushptroff                u8 1 0
    push           2          i64 
    casejumpeq     #17458     i64 0
    popstack                  i64 
    jump           #17459     
#17458: 
    push           pc_genss.do_jmp.a u64 
    push           12         
    pushptroff                u8 1 0
    push           7          i64 
    casejumpeq     #17460     i64 0
    push           5          i64 
    casejumpeq     #17460     i64 0
    popstack                  i64 
    jump           #17461     
#17460: 
    setargs                   2 0
    push           1          i64 
    push           pc_genss.do_jmp.a u64 
    callfn         &pc_genss.getdef u64 
    pop            pc_genss.do_jmp.d u64 
    setargs                   2 0
    setargs                   1 0
    push           11         i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           1          i64 
    add                       i64 
    push           pc_genss.do_jmp.d u64 
    callfn         &pc_genss.getrel32 i64 
    push           pc_genss.do_jmp.a u64 
    push           14         
    pushptroff                i32 1 0
    add                       i64 
    pop            pc_genss.do_jmp.offset i64 
    push           pc_genss.do_jmp.offset i64 
    push           0          i64 
    jumpge         #17462     i64 
    push           pc_genss.do_jmp.offset i64 
    push           -126       i64 
    jumple         #17462     i64 
    setargs                   1 0
    push           235        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_jmp.offset i64 
    callproc       &pc_genss.genbyte 
    jump           #17463     
#17462: 
    push           0          i64 
    pop            pc_genss.do_jmp.shortjmp i64 
    push           pc_genss.do_jmp.offset i64 
    push           0          i64 
    jumple         #17464     i64 
    setargs                   2 0
    push           pc_genss.do_jmp.d u64 
    push           pc_genss.do_jmp.m u64 
    callfn         &pc_genss.checkshortjump i64 
    pop            pc_genss.do_jmp.shortjmp i64 
#17464: 
    push           pc_genss.do_jmp.shortjmp i64 
    jumptrue       #17465     i64 
    setargs                   1 0
    push           233        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_jmp.a u64 
    callproc       &pc_genss.genrel32 
    jump           #17466     
#17465: 
    setargs                   1 0
    push           235        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_jmp.a u64 
    callproc       &pc_genss.genrel8 
#17466: 
#17463: 
    jump           #17467     
#17461: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pci_mcl.valtypenames 
    push           pc_genss.do_jmp.a u64 
    push           12         
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "JMP/IMM NOT LABELNO" u64 
    callproc       &pci_mcl.axerror 
#17467: 
    jump           #17468     
#17459: 
    push           pc_genss.do_jmp.a u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    casejumpeq     #17469     i64 0
    push           1          i64 
    casejumpeq     #17470     i64 0
    push           2          i64 
    casejumpeq     #17470     i64 0
    push           4          i64 
    casejumpeq     #17470     i64 0
    popstack                  i64 
    jump           #17471     
#17469: 
    push           8          i64 
    push           pc_genss.do_jmp.a u64 
    push           8          
    popptroff                 u8 1 0
    jump           #17472     
#17470: 
    setargs                   1 0
    push           "jmp[]size" u64 
    callproc       &pci_mcl.axerror 
    jump           #17472     
#17471: 
#17472: 
    setargs                   2 0
    push           4          i64 
    push           pc_genss.do_jmp.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_jmp.am i64 
    setargs                   1 0
    push           pc_genss.do_jmp.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   1 0
    push           pc_genss.do_jmp.a u64 
    callproc       &pc_genss.setaddrsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           255        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_jmp.am i64 
    push           pc_genss.do_jmp.a u64 
    callproc       &pc_genss.genamode 
#17468: 
#17473: 
    retproc                   
End


Proc pc_genss.getcurrdatalen: i64
    param          pc_genss.getcurrdatalen.id i64 
    procentry                 
    push           pc_genss.currseg i64 
    push           3          i64 
    jumpne         #17475     i64 
    push           pci_mcl.ss_zdatalen i64 
    setret                    i64 
    jump           #17476     
#17475: 
    setargs                   1 0
    push           pc_genss.currdata u64 
    callfn         &pc_genss.bufferlength i64 
    setret                    i64 
    jump           #17476     
#17476: 
    retfn                     i64 
End


Proc pc_genss.do_cmovcc:
    param          pc_genss.do_cmovcc.cond i64 
    param          pc_genss.do_cmovcc.a u64 
    param          pc_genss.do_cmovcc.b u64 
    local          pc_genss.do_cmovcc.am i64 
    local          pc_genss.do_cmovcc.regcode i64 
    procentry                 
    push           pc_genss.do_cmovcc.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_cmovcc.b u64 
    push           8          
    pushptroff                u8 1 0
    jumpeq         #17478     i64 
    push           pc_genss.do_cmovcc.b u64 
    push           8          
    pushptroff                u8 1 0
    jumpfalse      #17478     i64 
    setargs                   1 0
    push           "3:Opnd size mismatch" u64 
    callproc       &pci_mcl.axerror 
#17478: 
    push           pc_genss.do_cmovcc.a u64 
    push           8          
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #17479     i64 
    setargs                   1 0
    push           "cmov/byte" u64 
    callproc       &pci_mcl.axerror 
#17479: 
    setargs                   1 0
    push           pc_genss.do_cmovcc.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoder i64 
    pop            pc_genss.do_cmovcc.regcode i64 
    setargs                   2 0
    push           pc_genss.do_cmovcc.regcode i64 
    push           pc_genss.do_cmovcc.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_cmovcc.am i64 
    setargs                   1 0
    push           pc_genss.do_cmovcc.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           64         i64 
    push           pc_genss.do_cmovcc.cond i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_cmovcc.am i64 
    push           pc_genss.do_cmovcc.b u64 
    callproc       &pc_genss.genamode 
#17480: 
    retproc                   
End


Proc pc_genss.do_fmem:
    param          pc_genss.do_fmem.a u64 
    param          pc_genss.do_fmem.freal i64 
    param          pc_genss.do_fmem.code i64 
    local          pc_genss.do_fmem.am i64 
    local          pc_genss.do_fmem.regcode i64 
    local          pc_genss.do_fmem.mf i64 
    procentry                 
    push           pc_genss.do_fmem.a u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpeq         #17482     i64 
    setargs                   1 0
    push           "fmem/not mem" u64 
    callproc       &pci_mcl.axerror 
#17482: 
    push           pc_genss.do_fmem.freal i64 
    jumpfalse      #17483     i64 
    push           pc_genss.do_fmem.a u64 
    push           8          
    pushptroff                u8 1 0
    push           4          i64 
    casejumpeq     #17484     i64 0
    push           8          i64 
    casejumpeq     #17485     i64 0
    push           16         i64 
    casejumpeq     #17486     i64 0
    popstack                  i64 
    jump           #17487     
#17484: 
    push           0          i64 
    pop            pc_genss.do_fmem.mf i64 
    jump           #17488     
#17485: 
    push           2          i64 
    pop            pc_genss.do_fmem.mf i64 
    jump           #17488     
#17486: 
    push           1          i64 
    pop            pc_genss.do_fmem.mf i64 
    push           pc_genss.do_fmem.code i64 
    push           0          i64 
    casejumpeq     #17489     i64 0
    push           3          i64 
    casejumpeq     #17490     i64 0
    popstack                  i64 
    jump           #17491     
#17489: 
    push           5          i64 
    pop            pc_genss.do_fmem.code i64 
    jump           #17492     
#17490: 
    push           7          i64 
    pop            pc_genss.do_fmem.code i64 
    jump           #17492     
#17491: 
    setargs                   1 0
    push           "r80 not allowed" u64 
    callproc       &pci_mcl.axerror 
#17492: 
    jump           #17488     
#17487: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "SIZE="    u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_genss.do_fmem.a u64 
    push           8          
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "fmem size" u64 
    callproc       &pci_mcl.axerror 
#17488: 
    jump           #17493     
#17483: 
    push           pc_genss.do_fmem.a u64 
    push           8          
    pushptroff                u8 1 0
    push           2          i64 
    casejumpeq     #17494     i64 0
    push           4          i64 
    casejumpeq     #17495     i64 0
    push           8          i64 
    casejumpeq     #17496     i64 0
    popstack                  i64 
    jump           #17497     
#17494: 
    push           3          i64 
    pop            pc_genss.do_fmem.mf i64 
    jump           #17498     
#17495: 
    push           1          i64 
    pop            pc_genss.do_fmem.mf i64 
    jump           #17498     
#17496: 
    push           3          i64 
    pop            pc_genss.do_fmem.mf i64 
    push           pc_genss.do_fmem.code i64 
    push           0          i64 
    casejumpeq     #17499     i64 0
    push           3          i64 
    casejumpeq     #17500     i64 0
    popstack                  i64 
    jump           #17501     
#17499: 
    push           5          i64 
    pop            pc_genss.do_fmem.code i64 
    jump           #17502     
#17500: 
    push           7          i64 
    pop            pc_genss.do_fmem.code i64 
    jump           #17502     
#17501: 
    setargs                   1 0
    push           "fst i64?" u64 
    callproc       &pci_mcl.axerror 
#17502: 
    jump           #17498     
#17497: 
    setargs                   1 0
    push           "fmem int size" u64 
    callproc       &pci_mcl.axerror 
#17498: 
#17493: 
    setargs                   2 0
    push           pc_genss.do_fmem.code i64 
    push           pc_genss.do_fmem.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_fmem.am i64 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           217        i64 
    push           pc_genss.do_fmem.mf i64 
    push           1          i64 
    shl                       i64 
    add                       i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_fmem.am i64 
    push           pc_genss.do_fmem.a u64 
    callproc       &pc_genss.genamode 
#17503: 
    retproc                   
End


Proc pc_genss.genrel8:
    param          pc_genss.genrel8.a u64 
    local          pc_genss.genrel8.d u64 
    procentry                 
    setargs                   2 0
    push           1          i64 
    push           pc_genss.genrel8.a u64 
    callfn         &pc_genss.getdef u64 
    pop            pc_genss.genrel8.d u64 
    push           pc_genss.genrel8.d u64 
    push           29         
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #17505     i64 
    setargs                   4 0
    push           0          i64 
    push           6          i64 
    setargs                   1 0
    push           3          i64 
    callfn         &pc_genss.getcurrdatalen i64 
    push           pc_genss.genrel8.d u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &pc_genss.addfwdref u64 
    push           pc_genss.genrel8.d u64 
    push           8          
    popptroff                 u64 1 0
    setargs                   1 0
    push           0          i64 
    callproc       &pc_genss.genbyte 
    jump           #17506     
#17505: 
    setargs                   1 0
    push           "genrel8"  u64 
    callproc       &pci_mcl.axerror 
#17506: 
#17507: 
    retproc                   
End


Proc pc_genss.checkshortjump: i64
    param          pc_genss.checkshortjump.m u64 
    param          pc_genss.checkshortjump.d u64 
    local          pc_genss.checkshortjump.n i64 
    procentry                 
    push           0          i64 
    pop            pc_genss.checkshortjump.n i64 
    push           pc_genss.checkshortjump.m u64 
    pushptr                   u64 
    pop            pc_genss.checkshortjump.m u64 
    jump           #17509     
#17510: 
    push           pc_genss.checkshortjump.m u64 
    push           24         
    pushptroff                u8 1 0
    push           9          i64 
    casejumpeq     #17511     i64 0
    push           3          i64 
    casejumpeq     #17512     i64 0
    push           4          i64 
    casejumpeq     #17512     i64 0
    popstack                  i64 
    jump           #17513     
#17511: 
    push           pc_genss.checkshortjump.m u64 
    push           8          
    pushptroff                u64 1 0
    pushptr                   i64 
    push           pc_genss.checkshortjump.d u64 
    push           40         
    pushptroff                i32 1 0
    jumpne         #17514     i64 
    push           1          i64 
    setret                    i64 
    jump           #17515     
#17514: 
    jump           #17516     
#17512: 
    jump           #17516     
#17513: 
    push           &pc_genss.checkshortjump.n 
    incr                      i64 1
#17516: 
    push           pc_genss.checkshortjump.m u64 
    pushptr                   u64 
    pop            pc_genss.checkshortjump.m u64 
#17509: 
    push           pc_genss.checkshortjump.m u64 
    jumpfalse      #17517     u64 
    push           pc_genss.checkshortjump.n i64 
    push           8          i64 
    jumple         #17510     i64 
#17517: 
#17518: 
    push           0          i64 
    setret                    i64 
    jump           #17515     
#17515: 
    retfn                     i64 
End


Proc pc_genss.addfwdref: u64
    param          pc_genss.addfwdref.p u64 
    param          pc_genss.addfwdref.offset i64 
    param          pc_genss.addfwdref.reltype i64 
    param          pc_genss.addfwdref.seg i64 
    local          pc_genss.addfwdref.q u64 
    procentry                 
    setargs                   1 0
    push           16         i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pc_genss.addfwdref.q u64 
    push           pc_genss.addfwdref.p u64 
    push           pc_genss.addfwdref.q u64 
    push           0          
    popptroff                 u64 1 0
    push           pc_genss.addfwdref.offset i64 
    push           pc_genss.addfwdref.q u64 
    push           8          
    popptroff                 i32 1 0
    push           pc_genss.addfwdref.reltype i64 
    push           pc_genss.addfwdref.q u64 
    push           12         
    popptroff                 i16 1 0
    push           pc_genss.addfwdref.seg i64 
    push           pc_genss.addfwdref.q u64 
    push           14         
    popptroff                 i16 1 0
    push           pc_genss.addfwdref.q u64 
    setret                    u64 
    jump           #17520     
#17520: 
    retfn                     u64 
End


Proc pc_genss.switchseg:
    param          pc_genss.switchseg.newseg i64 
    procentry                 
    push           pc_genss.switchseg.newseg i64 
    push           pc_genss.currseg i64 
    jumpne         #17522     i64 
    jump           #17523     
#17522: 
    push           pc_genss.currseg i64 
    push           1          i64 
    casejumpeq     #17524     i64 0
    push           2          i64 
    casejumpeq     #17525     i64 0
    popstack                  i64 
    jump           #17526     
#17524: 
    push           pc_genss.currrelocs u64 
    pop            pci_mcl.ss_coderelocs u64 
    push           pc_genss.nrelocs i64 
    pop            pci_mcl.ss_ncoderelocs i64 
    jump           #17527     
#17525: 
    push           pc_genss.currrelocs u64 
    pop            pci_mcl.ss_idatarelocs u64 
    push           pc_genss.nrelocs i64 
    pop            pci_mcl.ss_nidatarelocs i64 
    jump           #17527     
#17526: 
#17527: 
    push           pc_genss.switchseg.newseg i64 
    pop            pc_genss.currseg i64 
    push           pc_genss.currseg i64 
    push           1          i64 
    casejumpeq     #17528     i64 0
    push           2          i64 
    casejumpeq     #17529     i64 0
    push           3          i64 
    casejumpeq     #17530     i64 0
    popstack                  i64 
    jump           #17531     
#17528: 
    push           pci_mcl.ss_code u64 
    pop            pc_genss.currdata u64 
    push           pci_mcl.ss_coderelocs u64 
    pop            pc_genss.currrelocs u64 
    push           pci_mcl.ss_ncoderelocs i64 
    pop            pc_genss.nrelocs i64 
    jump           #17532     
#17529: 
    push           pci_mcl.ss_idata u64 
    pop            pc_genss.currdata u64 
    push           pci_mcl.ss_idatarelocs u64 
    pop            pc_genss.currrelocs u64 
    push           pci_mcl.ss_nidatarelocs i64 
    pop            pc_genss.nrelocs i64 
    jump           #17532     
#17530: 
    push           pci_mcl.ss_zdata u64 
    pop            pc_genss.currdata u64 
    jump           #17532     
#17531: 
#17532: 
#17523: 
    retproc                   
End


Proc pc_genss.do_movdqx:
    param          pc_genss.do_movdqx.a u64 
    param          pc_genss.do_movdqx.b u64 
    param          pc_genss.do_movdqx.opc i64 
    local          pc_genss.do_movdqx.am i64 
    local          pc_genss.do_movdqx.regcode i64 
    procentry                 
    push           pc_genss.do_movdqx.a u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    casejumpeq     #17534     i64 0
    push           3          i64 
    casejumpeq     #17535     i64 0
    popstack                  i64 
    jump           #17536     
#17534: 
    push           pc_genss.do_movdqx.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    casejumpeq     #17537     i64 0
    push           3          i64 
    casejumpeq     #17538     i64 0
    popstack                  i64 
    jump           #17539     
#17537: 
    setargs                   1 0
    push           pc_genss.do_movdqx.b u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcodebx i64 
    pop            pc_genss.do_movdqx.regcode i64 
    setargs                   2 0
    push           pc_genss.do_movdqx.regcode i64 
    push           pc_genss.do_movdqx.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_movdqx.am i64 
    setargs                   1 0
    push           pc_genss.do_movdqx.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           111        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_movdqx.am i64 
    push           pc_genss.do_movdqx.a u64 
    callproc       &pc_genss.genamode 
    jump           #17540     
#17538: 
    setargs                   1 0
    push           pc_genss.do_movdqx.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_movdqx.regcode i64 
    setargs                   2 0
    push           pc_genss.do_movdqx.regcode i64 
    push           pc_genss.do_movdqx.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_movdqx.am i64 
    setargs                   1 0
    push           pc_genss.do_movdqx.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           111        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_movdqx.am i64 
    push           pc_genss.do_movdqx.b u64 
    callproc       &pc_genss.genamode 
    jump           #17540     
#17539: 
    setargs                   1 0
    push           "movdqx?"  u64 
    callproc       &pci_mcl.axerror 
#17540: 
    jump           #17541     
#17535: 
    push           pc_genss.do_movdqx.b u64 
    push           9          
    pushptroff                u8 1 0
    push           5          i64 
    casejumpeq     #17542     i64 0
    popstack                  i64 
    jump           #17543     
#17542: 
    setargs                   1 0
    push           pc_genss.do_movdqx.b u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcoderx i64 
    pop            pc_genss.do_movdqx.regcode i64 
    setargs                   2 0
    push           pc_genss.do_movdqx.regcode i64 
    push           pc_genss.do_movdqx.a u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_movdqx.am i64 
    setargs                   1 0
    push           pc_genss.do_movdqx.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           127        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_movdqx.am i64 
    push           pc_genss.do_movdqx.a u64 
    callproc       &pc_genss.genamode 
    jump           #17544     
#17543: 
    setargs                   1 0
    push           "movdqx"   u64 
    callproc       &pci_mcl.axerror 
#17544: 
    jump           #17541     
#17536: 
    setargs                   1 0
    push           "movdqx"   u64 
    callproc       &pci_mcl.axerror 
#17541: 
#17545: 
    retproc                   
End


Proc pc_genss.do_popcnt:
    param          pc_genss.do_popcnt.a u64 
    param          pc_genss.do_popcnt.b u64 
    local          pc_genss.do_popcnt.am i64 
    local          pc_genss.do_popcnt.regcode i64 
    procentry                 
    push           pc_genss.do_popcnt.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #17547     i64 
    push           pc_genss.do_popcnt.b u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #17548     i64 
    push           8          i64 
    push           pc_genss.do_popcnt.b u64 
    push           8          
    popptroff                 u8 1 0
#17548: 
#17547: 
    setargs                   1 0
    push           243        i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_popcnt.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcodebx i64 
    pop            pc_genss.do_popcnt.regcode i64 
    setargs                   2 0
    push           pc_genss.do_popcnt.regcode i64 
    push           pc_genss.do_popcnt.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_popcnt.am i64 
    setargs                   1 0
    push           pc_genss.do_popcnt.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           184        i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_popcnt.am i64 
    push           pc_genss.do_popcnt.b u64 
    callproc       &pc_genss.genamode 
#17549: 
    retproc                   
End


Proc pc_genss.do_bsf:
    param          pc_genss.do_bsf.a u64 
    param          pc_genss.do_bsf.b u64 
    param          pc_genss.do_bsf.opc i64 
    local          pc_genss.do_bsf.am i64 
    local          pc_genss.do_bsf.regcode i64 
    procentry                 
    push           pc_genss.do_bsf.b u64 
    push           9          
    pushptroff                u8 1 0
    push           3          i64 
    jumpne         #17551     i64 
    push           pc_genss.do_bsf.b u64 
    push           8          
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #17552     i64 
    push           8          i64 
    push           pc_genss.do_bsf.b u64 
    push           8          
    popptroff                 u8 1 0
#17552: 
#17551: 
    push           pc_genss.do_bsf.a u64 
    push           8          
    pushptroff                u8 1 0
    push           pc_genss.do_bsf.b u64 
    push           8          
    pushptroff                u8 1 0
    jumpeq         #17553     i64 
    setargs                   1 0
    push           "bsf size" u64 
    callproc       &pci_mcl.axerror 
#17553: 
    setargs                   1 0
    push           pc_genss.do_bsf.a u64 
    push           10         
    pushptroff                u8 1 0
    callfn         &pc_genss.getregcodebx i64 
    pop            pc_genss.do_bsf.regcode i64 
    setargs                   2 0
    push           pc_genss.do_bsf.regcode i64 
    push           pc_genss.do_bsf.b u64 
    callfn         &pc_genss.genrm i64 
    pop            pc_genss.do_bsf.am i64 
    setargs                   1 0
    push           pc_genss.do_bsf.a u64 
    callproc       &pc_genss.setopsize 
    setargs                   0 0
    callproc       &pc_genss.genrex 
    setargs                   1 0
    push           15         i64 
    callproc       &pc_genss.genbyte 
    setargs                   1 0
    push           pc_genss.do_bsf.opc i64 
    callproc       &pc_genss.genbyte 
    setargs                   2 0
    push           pc_genss.do_bsf.am i64 
    push           pc_genss.do_bsf.b u64 
    callproc       &pc_genss.genamode 
#17554: 
    retproc                   
End


Proc pc_genss.extendsymboltable:
    local          pc_genss.extendsymboltable.oldsymboltable u64 
    local          pc_genss.extendsymboltable.oldsymboltablesize i64 
    local          pc_genss.extendsymboltable.i i64 
    procentry                 
    push           pci_mcl.ss_symboltablesize i64 
    pop            pc_genss.extendsymboltable.oldsymboltablesize i64 
    push           pci_mcl.ss_symboltable u64 
    pop            pc_genss.extendsymboltable.oldsymboltable u64 
    push           &pci_mcl.ss_symboltablesize 
    push           2          i64 
    multo                     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "EXTENDING SYMBOL TABLE TO" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pci_mcl.ss_symboltablesize i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           8          i64 
    push           pci_mcl.ss_symboltablesize i64 
    mul                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pci_mcl.ss_symboltable u64 
#17556: 
    push           1          i64 
    pop            pc_genss.extendsymboltable.i i64 
    push           pci_mcl.ss_nsymbols i64 
    push           1          i64 
    jumplt         #17557     i64 
#17558: 
    push           pc_genss.extendsymboltable.oldsymboltable u64 
    push           pc_genss.extendsymboltable.i i64 
    pushptroff                u64 8 -8
    push           pci_mcl.ss_symboltable u64 
    push           pc_genss.extendsymboltable.i i64 
    popptroff                 u64 8 -8
#17559: 
    forup          #17558     i64 1
    opnd           pc_genss.extendsymboltable.i 
    opnd           pci_mcl.ss_nsymbols 
#17557: 
    setargs                   2 0
    push           8          i64 
    push           pc_genss.extendsymboltable.oldsymboltablesize i64 
    mul                       i64 
    push           pc_genss.extendsymboltable.oldsymboltable u64 
    callproc       &mlibp.pcm_free 
#17560: 
    retproc                   
End


Proc pc_genss.fixregvar:
    local          pc_genss.fixregvar.m u64 
    procentry                 
    push           pci_mcl.mccode u64 
    pop            pc_genss.fixregvar.m u64 
#17562: 
    retproc                   
End


Proc pc_genss.initlib:
    param          pc_genss.initlib.nlabels i64 
    local          pc_genss.initlib.str block:256 
    local          pc_genss.initlib.i i64 
    procentry                 
    setargs                   1 0
    push           262144     i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pci_mcl.ss_symboltable u64 
    push           32768      i64 
    pop            pci_mcl.ss_symboltablesize i64 
    push           0          i64 
    pop            pci_mcl.ss_nsymbols i64 
    setargs                   1 0
    push           pc_genss.initlib.nlabels i64 
    push           8          i64 
    mul                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pci_mcl.labeldeftable u64 
#17564: 
    push           1          i64 
    pop            pc_genss.initlib.i i64 
    push           pc_genss.initlib.nlabels i64 
    push           1          i64 
    jumplt         #17565     i64 
#17566: 
    setargs                   1 0
    push           51         i64 
    callfn         &mlibp.pcm_allocz u64 
    push           pci_mcl.labeldeftable u64 
    push           pc_genss.initlib.i i64 
    popptroff                 u64 8 -8
    push           pc_genss.initlib.i i64 
    push           pci_mcl.labeldeftable u64 
    push           pc_genss.initlib.i i64 
    pushptroff                u64 8 -8
    push           40         
    popptroff                 i32 1 0
    setargs                   1 0
    push           &pc_genss.initlib.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "(L#)"     u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           pc_genss.initlib.i i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           &pc_genss.initlib.str 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           pci_mcl.labeldeftable u64 
    push           pc_genss.initlib.i i64 
    pushptroff                u64 8 -8
    push           0          
    popptroff                 u64 1 0
    push           1          i64 
    push           pci_mcl.labeldeftable u64 
    push           pc_genss.initlib.i i64 
    pushptroff                u64 8 -8
    push           29         
    popptroff                 u8 1 0
#17567: 
    forup          #17566     i64 1
    opnd           pc_genss.initlib.i 
    opnd           pc_genss.initlib.nlabels 
#17565: 
#17568: 
    retproc                   
End


Proc pc_genss.buffercreate: u64
    param          pc_genss.buffercreate.size i64 
    local          pc_genss.buffercreate.a u64 
    procentry                 
    setargs                   1 0
    push           32         i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pc_genss.buffercreate.a u64 
    push           pc_genss.buffercreate.size i64 
    push           pc_genss.buffercreate.a u64 
    push           24         
    popptroff                 i64 1 0
    setargs                   1 0
    push           pc_genss.buffercreate.a u64 
    push           24         
    pushptroff                i64 1 0
    callfn         &mlibp.pcm_alloc u64 
    push           pc_genss.buffercreate.a u64 
    push           8          
    storeptroff               u64 1 0
    push           pc_genss.buffercreate.a u64 
    push           0          
    popptroff                 u64 1 0
    push           pc_genss.buffercreate.a u64 
    pushptr                   u64 
    push           pc_genss.buffercreate.a u64 
    push           24         
    pushptroff                i64 1 0
    addrefoff                 u64 1 0
    push           pc_genss.buffercreate.a u64 
    push           16         
    popptroff                 u64 1 0
    push           pc_genss.buffercreate.a u64 
    setret                    u64 
    jump           #17570     
#17570: 
    retfn                     u64 
End


Proc pc_genss.bufferexpand:
    param          pc_genss.bufferexpand.a u64 
    local          pc_genss.bufferexpand.newalloc i64 
    local          pc_genss.bufferexpand.usedbytes i64 
    local          pc_genss.bufferexpand.p u64 
    procentry                 
    push           pc_genss.bufferexpand.a u64 
    push           24         
    pushptroff                i64 1 0
    push           2          i64 
    mul                       i64 
    pop            pc_genss.bufferexpand.newalloc i64 
    push           pc_genss.bufferexpand.a u64 
    push           8          
    pushptroff                u64 1 0
    push           pc_genss.bufferexpand.a u64 
    pushptr                   u64 
    subref                    i64 1
    pop            pc_genss.bufferexpand.usedbytes i64 
    push           pc_genss.bufferexpand.usedbytes i64 
    push           pc_genss.bufferexpand.a u64 
    push           24         
    pushptroff                i64 1 0
    jumple         #17572     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "dbuffer error" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           0          
    stop                      
#17572: 
    setargs                   1 0
    push           pc_genss.bufferexpand.newalloc i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            pc_genss.bufferexpand.p u64 
    setargs                   3 0
    push           pc_genss.bufferexpand.usedbytes u64 
    push           pc_genss.bufferexpand.a u64 
    pushptr                   u64 
    push           pc_genss.bufferexpand.p u64 
    callproc       &memcpy    
    push           pc_genss.bufferexpand.p u64 
    push           pc_genss.bufferexpand.a u64 
    push           0          
    popptroff                 u64 1 0
    push           pc_genss.bufferexpand.p u64 
    push           pc_genss.bufferexpand.usedbytes i64 
    addrefoff                 u64 1 0
    push           pc_genss.bufferexpand.a u64 
    push           8          
    popptroff                 u64 1 0
    push           pc_genss.bufferexpand.newalloc i64 
    push           pc_genss.bufferexpand.a u64 
    push           24         
    popptroff                 i64 1 0
    push           pc_genss.bufferexpand.p u64 
    push           pc_genss.bufferexpand.newalloc i64 
    addrefoff                 u64 1 0
    push           pc_genss.bufferexpand.a u64 
    push           16         
    popptroff                 u64 1 0
#17573: 
    retproc                   
End


Proc pc_genss.buffercheck:
    param          pc_genss.buffercheck.a u64 
    param          pc_genss.buffercheck.n i64 
    procentry                 
    jump           #17575     
#17576: 
    setargs                   1 0
    push           pc_genss.buffercheck.a u64 
    callproc       &pc_genss.bufferexpand 
#17575: 
    push           pc_genss.buffercheck.a u64 
    push           16         
    pushptroff                u64 1 0
    push           pc_genss.buffercheck.a u64 
    push           8          
    pushptroff                u64 1 0
    subref                    i64 1
    push           pc_genss.buffercheck.n i64 
    jumplt         #17576     i64 
#17577: 
#17578: 
    retproc                   
End


Proc pc_genss.bufferlength: i64
    param          pc_genss.bufferlength.a u64 
    procentry                 
    push           pc_genss.bufferlength.a u64 
    push           8          
    pushptroff                u64 1 0
    push           pc_genss.bufferlength.a u64 
    pushptr                   u64 
    subref                    i64 1
    setret                    i64 
    jump           #17580     
#17580: 
    retfn                     i64 
End


Proc pc_genss.bufferelemptr: u64
    param          pc_genss.bufferelemptr.a u64 
    param          pc_genss.bufferelemptr.offset i64 
    procentry                 
    push           pc_genss.bufferelemptr.a u64 
    pushptr                   u64 
    push           pc_genss.bufferelemptr.offset i64 
    addrefoff                 u64 1 0
    setret                    u64 
    jump           #17582     
#17582: 
    retfn                     u64 
End


Proc pc_genss.addword:
    param          pc_genss.addword.a u64 
    param          pc_genss.addword.x i64 
    procentry                 
    push           pc_genss.addword.x i64 
    push           pc_genss.addword.a u64 
    push           8          
    pushptroff                u64 1 0
    popptr                    u16 
    push           pc_genss.addword.a u64 
    push           8          
    addrefoff                 u64 1 0
    incr                      u64 2
#17584: 
    retproc                   
End


Proc pc_genss.adddword:
    param          pc_genss.adddword.a u64 
    param          pc_genss.adddword.x i64 
    procentry                 
    push           pc_genss.adddword.x i64 
    push           pc_genss.adddword.a u64 
    push           8          
    pushptroff                u64 1 0
    popptr                    u32 
    push           pc_genss.adddword.a u64 
    push           8          
    addrefoff                 u64 1 0
    incr                      u64 4
#17586: 
    retproc                   
End


Proc pc_genss.addqword:
    param          pc_genss.addqword.a u64 
    param          pc_genss.addqword.x i64 
    procentry                 
    push           pc_genss.addqword.x u64 
    push           pc_genss.addqword.a u64 
    push           8          
    pushptroff                u64 1 0
    popptr                    u64 
    push           pc_genss.addqword.a u64 
    push           8          
    addrefoff                 u64 1 0
    incr                      u64 8
#17588: 
    retproc                   
End


Proc mm_name.rx_typetable:
    local          mm_name.rx_typetable.d u64 
    local          mm_name.rx_typetable.i i64 
    procentry                 
#17590: 
    push           33         i64 
    pop            mm_name.rx_typetable.i i64 
    push           mm_decls.ntypes i64 
    push           33         i64 
    jumplt         #17591     i64 
#17592: 
    push           &mm_decls.ttbasetype 
    push           mm_name.rx_typetable.i i64 
    pushptroff                i32 4 0
    push           13         i64 
    jumpne         #17593     i64 
    push           &mm_decls.ttnamedef 
    push           mm_name.rx_typetable.i i64 
    pushptroff                u64 8 0
    pop            mm_name.rx_typetable.d u64 
    push           mm_name.rx_typetable.d u64 
    push           112        
    pushptroff                i32 1 0
    jumpfalse      #17594     i64 
    setargs                   1 0
    push           mm_name.rx_typetable.d u64 
    callproc       &mm_name.do_baseclass 
#17594: 
#17593: 
#17595: 
    forup          #17592     i64 1
    opnd           mm_name.rx_typetable.i 
    opnd           mm_decls.ntypes 
#17591: 
#17596: 
    retproc                   
End


Proc mm_name.rx_unit:
    param          mm_name.rx_unit.owner u64 
    param          mm_name.rx_unit.p u64 
    local          mm_name.rx_unit.d u64 
    local          mm_name.rx_unit.a u64 
    local          mm_name.rx_unit.b u64 
    local          mm_name.rx_unit.n i64 
    local          mm_name.rx_unit.oldnoexpand i64 
    local          mm_name.rx_unit.oldnoassem i64 
    local          mm_name.rx_unit.oldtag i64 
    local          mm_name.rx_unit.useparams i64 
    procentry                 
    push           mm_name.rx_unit.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_name.rx_unit.a u64 
    push           mm_name.rx_unit.p u64 
    push           24         
    pushptroff                u64 1 0
    pop            mm_name.rx_unit.b u64 
    push           mm_name.rx_unit.p u64 
    push           4          
    pushptroff                u32 1 0
    pop            mm_tables.mlineno i64 
    push           mm_name.rx_unit.p u64 
    pushptr                   u8 
    switch         #17598     3 96
    opnd           #17599     
#17598: 
    switchlabel    #17600     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17601     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17602     
    switchlabel    #17602     
    switchlabel    #17599     
    switchlabel    #17603     
    switchlabel    #17604     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17605     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17606     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17607     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17599     
    switchlabel    #17606     
    endswitch                 
#17600: 
    setargs                   2 0
    push           mm_name.rx_unit.p u64 
    push           mm_name.rx_unit.owner u64 
    callproc       &mm_name.resolvename 
    push           mm_name.rx_unit.p u64 
    pushptr                   u8 
    push           3          i64 
    jumpne         #17608     i64 
    push           mm_name.rx_unit.p u64 
    push           16         
    pushptroff                u64 1 0
    push           78         
    pushptroff                u8 1 0
    push           20         i64 
    jumpne         #17608     i64 
    push           mm_name.noexpand i64 
    jumptrue       #17608     i64 
    push           &mm_name.macrolevels 
    incr                      i64 1
    setargs                   3 0
    push           0          u64 
    push           mm_name.rx_unit.p u64 
    push           mm_name.rx_unit.p u64 
    callproc       &mm_name.expandmacro 
    setargs                   2 0
    push           mm_name.rx_unit.p u64 
    push           mm_name.rx_unit.owner u64 
    callproc       &mm_name.rx_unit 
    push           &mm_name.macrolevels 
    decr                      i64 1
#17608: 
    jump           #17609     
#17605: 
    setargs                   2 0
    push           mm_name.rx_unit.b u64 
    push           mm_name.rx_unit.owner u64 
    callproc       &mm_name.rx_unit 
    jump           #17609     
#17607: 
    push           mm_name.rx_unit.b u64 
    pushptr                   u8 
    push           3          i64 
    jumpne         #17610     i64 
    setargs                   5 0
    push           0          i64 
    push           0          i64 
    push           mm_name.rx_unit.b u64 
    push           56         
    pushptroff                u8 1 0
    push           mm_name.rx_unit.b u64 
    push           16         
    pushptroff                u64 1 0
    push           mm_name.rx_unit.owner u64 
    callfn         &mm_name.resolvetopname u64 
    pop            mm_name.rx_unit.d u64 
#17610: 
    setargs                   2 0
    push           mm_name.rx_unit.p u64 
    push           mm_name.rx_unit.owner u64 
    callproc       &mm_name.resolvedot 
    jump           #17609     
#17606: 
    push           mm_name.rx_unit.p u64 
    pushptr                   u8 
    pop            mm_name.rx_unit.oldtag i64 
    push           mm_name.rx_unit.a u64 
    pushptr                   u8 
    push           3          i64 
    jumpne         #17611     i64 
    push           mm_name.noexpand i64 
    pop            mm_name.rx_unit.oldnoexpand i64 
    push           1          i64 
    pop            mm_name.noexpand i64 
    setargs                   2 0
    push           mm_name.rx_unit.a u64 
    push           mm_name.rx_unit.owner u64 
    callproc       &mm_name.rx_unit 
    push           mm_name.rx_unit.oldnoexpand i64 
    pop            mm_name.noexpand i64 
    jump           #17612     
#17611: 
    setargs                   2 0
    push           mm_name.rx_unit.a u64 
    push           mm_name.rx_unit.owner u64 
    callproc       &mm_name.rx_unit 
#17612: 
    setargs                   2 0
    push           mm_name.rx_unit.b u64 
    push           mm_name.rx_unit.owner u64 
    callproc       &mm_name.rx_unitlist 
    push           mm_name.rx_unit.a u64 
    pushptr                   u8 
    push           3          i64 
    jumpne         #17613     i64 
    push           mm_name.rx_unit.a u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_name.rx_unit.d u64 
    push           mm_name.rx_unit.d u64 
    push           78         
    pushptroff                u8 1 0
    push           4          i64 
    casejumpeq     #17614     i64 0
    push           20         i64 
    casejumpeq     #17615     i64 0
    popstack                  i64 
    jump           #17616     
#17614: 
    push           61         i64 
    push           mm_name.rx_unit.p u64 
    push           0          
    popptroff                 u8 1 0
    setargs                   3 0
    push           mm_name.rx_unit.p u64 
    push           52         
    addrefoff                 u64 1 0
    push           mm_name.rx_unit.d u64 
    push           72         
    pushptroff                i32 1 0
    push           mm_name.rx_unit.owner u64 
    callproc       &mm_lib.storemode 
    push           mm_name.rx_unit.b u64 
    push           mm_name.rx_unit.p u64 
    push           16         
    popptroff                 u64 1 0
    push           0          u64 
    push           mm_name.rx_unit.p u64 
    push           24         
    popptroff                 u64 1 0
    push           0          i64 
    push           mm_name.rx_unit.p u64 
    push           2          
    popptroff                 u8 1 0
    push           mm_name.rx_unit.b u64 
    push           8          
    pushptroff                u64 1 0
    jumpfalse      #17617     u64 
    setargs                   2 0
    push           mm_name.rx_unit.b u64 
    push           19         i64 
    callfn         &mm_lib.createunit1 u64 
    push           mm_name.rx_unit.p u64 
    push           16         
    popptroff                 u64 1 0
    push           0          i64 
    pop            mm_name.rx_unit.n i64 
    jump           #17618     
#17619: 
    push           &mm_name.rx_unit.n 
    incr                      i64 1
    push           mm_name.rx_unit.b u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_name.rx_unit.b u64 
#17618: 
    push           mm_name.rx_unit.b u64 
    jumptrue       #17619     u64 
#17620: 
    push           mm_name.rx_unit.n i64 
    push           mm_name.rx_unit.p u64 
    push           16         
    pushptroff                u64 1 0
    push           40         
    popptroff                 u32 1 0
#17617: 
    jump           #17621     
#17615: 
    push           &mm_name.macrolevels 
    incr                      i64 1
    push           mm_name.rx_unit.d u64 
    push           16         
    pushptroff                u64 1 0
    jumpfalse      #17622     u64 
    setargs                   3 0
    push           mm_name.rx_unit.b u64 
    push           mm_name.rx_unit.a u64 
    push           mm_name.rx_unit.p u64 
    callproc       &mm_name.expandmacro 
    push           0          u64 
    pop            mm_name.rx_unit.b u64 
    push           0          i64 
    pop            mm_name.rx_unit.useparams i64 
    jump           #17623     
#17622: 
    setargs                   3 0
    push           0          u64 
    push           mm_name.rx_unit.a u64 
    push           mm_name.rx_unit.p u64 
    callproc       &mm_name.expandmacro 
    push           1          i64 
    pop            mm_name.rx_unit.useparams i64 
#17623: 
    setargs                   2 0
    push           mm_name.rx_unit.p u64 
    push           mm_name.rx_unit.owner u64 
    callproc       &mm_name.rx_unit 
    push           &mm_name.macrolevels 
    decr                      i64 1
    push           mm_name.rx_unit.useparams i64 
    jumpfalse      #17624     i64 
    push           mm_name.rx_unit.p u64 
    pushptr                   u8 
    push           96         i64 
    setjumpeq      #17624     i64 
    push           31         i64 
    setjumpeqx     #17624     i64 
    setargs                   2 0
    push           mm_name.rx_unit.oldtag i64 
    push           mm_name.rx_unit.p u64 
    callproc       &mm_lib.insertunit 
    push           mm_name.rx_unit.b u64 
    push           mm_name.rx_unit.p u64 
    push           24         
    popptroff                 u64 1 0
    push           1          i64 
    push           mm_name.rx_unit.p u64 
    push           2          
    popptroff                 u8 1 0
#17624: 
    jump           #17621     
#17616: 
    push           mm_name.rx_unit.d u64 
    push           72         
    pushptroff                i32 1 0
    push           0          i64 
    jumpne         #17625     i64 
    push           96         i64 
    push           mm_name.rx_unit.p u64 
    push           0          
    popptroff                 u8 1 0
#17625: 
#17621: 
#17613: 
    jump           #17609     
#17602: 
    setargs                   2 0
    push           mm_name.rx_unit.a u64 
    push           mm_name.rx_unit.owner u64 
    callproc       &mm_name.rx_unit 
    setargs                   2 0
    push           mm_name.rx_unit.b u64 
    push           mm_name.rx_unit.owner u64 
    callproc       &mm_name.rx_unit 
    setargs                   1 0
    push           mm_name.rx_unit.a u64 
    callfn         &mm_lib.isboolunit i64 
    jumptrue       #17626     i64 
    setargs                   2 0
    push           18         i64 
    push           mm_name.rx_unit.a u64 
    callproc       &mm_lib.insertunit 
    push           132        i64 
    push           mm_name.rx_unit.a u64 
    push           60         
    popptroff                 u8 1 0
#17626: 
    setargs                   1 0
    push           mm_name.rx_unit.b u64 
    callfn         &mm_lib.isboolunit i64 
    jumptrue       #17627     i64 
    setargs                   2 0
    push           18         i64 
    push           mm_name.rx_unit.b u64 
    callproc       &mm_lib.insertunit 
    push           132        i64 
    push           mm_name.rx_unit.b u64 
    push           60         
    popptroff                 u8 1 0
#17627: 
    jump           #17609     
#17604: 
!doistruel::
#17628: 
    setargs                   2 0
    push           mm_name.rx_unit.a u64 
    push           mm_name.rx_unit.owner u64 
    callproc       &mm_name.rx_unit 
    setargs                   1 0
    push           mm_name.rx_unit.a u64 
    callfn         &mm_lib.isboolunit i64 
    jumpfalse      #17629     i64 
    setargs                   2 0
    push           mm_name.rx_unit.a u64 
    push           mm_name.rx_unit.p u64 
    callproc       &mm_lib.deleteunit 
#17629: 
    jump           #17630     
    jump           #17609     
#17603: 
    setargs                   2 0
    push           mm_name.rx_unit.a u64 
    push           mm_name.rx_unit.owner u64 
    callproc       &mm_name.rx_unit 
    push           mm_name.rx_unit.a u64 
    pushptr                   u8 
    push           17         i64 
    jumpne         #17631     i64 
    setargs                   2 0
    push           mm_name.rx_unit.a u64 
    push           mm_name.rx_unit.p u64 
    callproc       &mm_lib.deleteunit 
    push           18         i64 
    push           mm_name.rx_unit.p u64 
    push           0          
    popptroff                 u8 1 0
    push           132        i64 
    push           mm_name.rx_unit.p u64 
    push           60         
    popptroff                 u8 1 0
    push           mm_name.rx_unit.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_name.rx_unit.a u64 
    jump           #17628     
#17631: 
    setargs                   1 0
    push           mm_name.rx_unit.a u64 
    callfn         &mm_lib.isboolunit i64 
    jumptrue       #17632     i64 
    setargs                   2 0
    push           18         i64 
    push           mm_name.rx_unit.a u64 
    callproc       &mm_lib.insertunit 
    push           132        i64 
    push           mm_name.rx_unit.a u64 
    push           60         
    popptroff                 u8 1 0
    push           mm_name.rx_unit.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_name.rx_unit.a u64 
#17632: 
    jump           #17630     
    jump           #17609     
#17601: 
    setargs                   2 0
    push           mm_name.rx_unit.a u64 
    push           mm_name.rx_unit.owner u64 
    callproc       &mm_name.resolvename 
    push           mm_name.noexpand i64 
    jumptrue       #17633     i64 
    push           &mm_name.macrolevels 
    incr                      i64 1
    push           mm_name.noassem i64 
    pop            mm_name.rx_unit.oldnoassem i64 
    push           1          i64 
    pop            mm_name.noassem i64 
    setargs                   3 0
    push           mm_name.rx_unit.b u64 
    push           mm_name.rx_unit.a u64 
    push           mm_name.rx_unit.p u64 
    callproc       &mm_name.expandmacro 
    push           mm_name.rx_unit.oldnoassem i64 
    pop            mm_name.noassem i64 
    setargs                   2 0
    push           mm_name.rx_unit.p u64 
    push           mm_name.rx_unit.owner u64 
    callproc       &mm_name.rx_unit 
    push           &mm_name.macrolevels 
    decr                      i64 1
#17633: 
    jump           #17609     
#17599: 
!doabc::
#17630: 
    push           mm_name.rx_unit.p u64 
    push           1          
    pushptroff                u8 1 0
    jumpfalse      #17634     i64 
    setargs                   2 0
    push           mm_name.rx_unit.a u64 
    push           mm_name.rx_unit.owner u64 
    callproc       &mm_name.rx_unitlist 
#17634: 
    push           mm_name.rx_unit.p u64 
    push           2          
    pushptroff                u8 1 0
    jumpfalse      #17635     i64 
    setargs                   2 0
    push           mm_name.rx_unit.b u64 
    push           mm_name.rx_unit.owner u64 
    callproc       &mm_name.rx_unitlist 
#17635: 
    push           mm_name.rx_unit.p u64 
    push           3          
    pushptroff                u8 1 0
    jumpfalse      #17636     i64 
    setargs                   2 0
    push           mm_name.rx_unit.p u64 
    push           32         
    pushptroff                u64 1 0
    push           mm_name.rx_unit.owner u64 
    callproc       &mm_name.rx_unitlist 
#17636: 
#17609: 
#17637: 
    retproc                   
End


Proc mm_name.rx_module: i64
    param          mm_name.rx_module.n i64 
    local          mm_name.rx_module.m block:456 
    local          mm_name.rx_module.stmodule u64 
    local          mm_name.rx_module.d u64 
    local          mm_name.rx_module.globalflag i64 
    local          mm_name.rx_module.status i64 
    procentry                 
    push           mm_name.rx_module.n i64 
    pop            mm_decls.currmoduleno i64 
    setargs                   2 0
    push           &mm_decls.moduletable 
    push           mm_name.rx_module.n i64 
    addrefoff                 block:456 456 0
    push           8          
    pushptroff                u64 1 0
    push           mm_decls.stprogram u64 
    callproc       &mm_name.rx_passdef 
    push           1          i64 
    setret                    i64 
    jump           #17639     
#17639: 
    retfn                     i64 
End


Proc mm_name.rx_deflist:
    param          mm_name.rx_deflist.owner u64 
    param          mm_name.rx_deflist.p u64 
    local          mm_name.rx_deflist.pstart u64 
    procentry                 
    push           mm_name.rx_deflist.p u64 
    pop            mm_name.rx_deflist.pstart u64 
    jump           #17641     
#17642: 
    setargs                   2 0
    push           mm_name.rx_deflist.p u64 
    push           mm_name.rx_deflist.owner u64 
    callproc       &mm_name.rx_passdef 
    push           mm_name.rx_deflist.p u64 
    push           32         
    pushptroff                u64 1 0
    pop            mm_name.rx_deflist.p u64 
#17641: 
    push           mm_name.rx_deflist.p u64 
    jumptrue       #17642     u64 
#17643: 
#17644: 
    retproc                   
End


Proc mm_name.rx_passdef:
    param          mm_name.rx_passdef.owner u64 
    param          mm_name.rx_passdef.p u64 
    local          mm_name.rx_passdef.d u64 
    procentry                 
    push           mm_name.rx_passdef.p u64 
    push           78         
    pushptroff                u8 1 0
    push           2          i64 
    casejumpeq     #17646     i64 0
    push           3          i64 
    casejumpeq     #17646     i64 0
    push           5          i64 
    casejumpeq     #17647     i64 0
    push           6          i64 
    casejumpeq     #17648     i64 0
    push           10         i64 
    casejumpeq     #17649     i64 0
    push           11         i64 
    casejumpeq     #17649     i64 0
    push           12         i64 
    casejumpeq     #17649     i64 0
    push           13         i64 
    casejumpeq     #17649     i64 0
    push           4          i64 
    casejumpeq     #17650     i64 0
    popstack                  i64 
    jump           #17651     
#17646: 
    setargs                   2 0
    push           mm_name.rx_passdef.p u64 
    push           16         
    pushptroff                u64 1 0
    push           mm_name.rx_passdef.p u64 
    callproc       &mm_name.rx_deflist 
    jump           #17652     
#17647: 
    setargs                   2 0
    push           mm_name.rx_passdef.p u64 
    push           16         
    pushptroff                u64 1 0
    push           mm_name.rx_passdef.p u64 
    callproc       &mm_name.rx_deflist 
    push           mm_name.rx_passdef.p u64 
    pop            mm_name.currstproc u64 
    setargs                   2 0
    push           mm_name.rx_passdef.p u64 
    push           64         
    pushptroff                u64 1 0
    push           mm_name.rx_passdef.p u64 
    callproc       &mm_name.rx_unit 
    push           0          u64 
    pop            mm_name.currstproc u64 
    jump           #17652     
#17648: 
    setargs                   2 0
    push           mm_name.rx_passdef.p u64 
    push           16         
    pushptroff                u64 1 0
    push           mm_name.rx_passdef.p u64 
    callproc       &mm_name.rx_deflist 
    jump           #17652     
#17649: 
    push           mm_name.rx_passdef.p u64 
    push           92         
    pushptroff                u16 1 0
    push           13         i64 
    dotindex                  i64 
    jumpfalse      #17653     u64 
    setargs                   2 0
    push           mm_name.rx_passdef.p u64 
    push           96         
    pushptroff                u64 1 0
    push           mm_name.rx_passdef.owner u64 
    callproc       &mm_name.rx_unit 
#17653: 
    push           mm_name.rx_passdef.p u64 
    push           64         
    pushptroff                u64 1 0
    jumpfalse      #17654     u64 
    setargs                   2 0
    push           mm_name.rx_passdef.p u64 
    push           64         
    pushptroff                u64 1 0
    push           mm_name.rx_passdef.owner u64 
    callproc       &mm_name.rx_unit 
#17654: 
    jump           #17652     
#17650: 
    setargs                   2 0
    push           mm_name.rx_passdef.p u64 
    push           16         
    pushptroff                u64 1 0
    push           mm_name.rx_passdef.p u64 
    callproc       &mm_name.rx_deflist 
    jump           #17652     
#17651: 
#17652: 
#17655: 
    retproc                   
End


Proc mm_name.rx_unitlist:
    param          mm_name.rx_unitlist.owner u64 
    param          mm_name.rx_unitlist.p u64 
    procentry                 
    jump           #17657     
#17658: 
    setargs                   2 0
    push           mm_name.rx_unitlist.p u64 
    push           mm_name.rx_unitlist.owner u64 
    callproc       &mm_name.rx_unit 
    push           mm_name.rx_unitlist.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_name.rx_unitlist.p u64 
#17657: 
    push           mm_name.rx_unitlist.p u64 
    jumptrue       #17658     u64 
#17659: 
#17660: 
    retproc                   
End


Proc mm_name.resolvetopname: u64
    param          mm_name.resolvetopname.owner u64 
    param          mm_name.resolvetopname.stnewname u64 
    param          mm_name.resolvetopname.moduleno i64 
    param          mm_name.resolvetopname.fmodule i64 
    param          mm_name.resolvetopname.fdoambig i64 
    local          mm_name.resolvetopname.i i64 
    local          mm_name.resolvetopname.m i64 
    local          mm_name.resolvetopname.extcount i64 
    local          mm_name.resolvetopname.modno i64 
    local          mm_name.resolvetopname.p u64 
    local          mm_name.resolvetopname.powner u64 
    local          mm_name.resolvetopname.d u64 
    local          mm_name.resolvetopname.e u64 
    local          mm_name.resolvetopname.dlldef u64 
    local          mm_name.resolvetopname.extdef u64 
    local          mm_name.resolvetopname.moddef u64 
    local          mm_name.resolvetopname.extmod u64 
    local          mm_name.resolvetopname.q u64 
    local          mm_name.resolvetopname.ambiglist block:80 
    local          mm_name.resolvetopname.ndupl i64 
    procentry                 
    push           mm_name.resolvetopname.owner u64 
    push           78         
    pushptroff                u8 1 0
    push           5          i64 
    jumpne         #17662     i64 
    push           mm_name.resolvetopname.owner u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_name.resolvetopname.q u64 
    jump           #17663     
#17664: 
    push           mm_name.resolvetopname.q u64 
    push           48         
    pushptroff                u64 1 0
    push           mm_name.resolvetopname.stnewname u64 
    jumpne         #17665     u64 
    push           mm_name.resolvetopname.q u64 
    setret                    u64 
    jump           #17666     
#17665: 
    push           mm_name.resolvetopname.q u64 
    push           32         
    pushptroff                u64 1 0
    pop            mm_name.resolvetopname.q u64 
#17663: 
    push           mm_name.resolvetopname.q u64 
    jumptrue       #17664     u64 
#17667: 
#17662: 
    push           mm_name.resolvetopname.stnewname u64 
    push           40         
    pushptroff                u64 1 0
    pop            mm_name.resolvetopname.p u64 
    push           0          i64 
    pop            mm_name.resolvetopname.extcount i64 
    push           0          u64 
    store          mm_name.resolvetopname.moddef u64 
    store          mm_name.resolvetopname.extdef u64 
    store          mm_name.resolvetopname.dlldef u64 
    pop            mm_name.resolvetopname.extmod u64 
    push           0          i64 
    pop            mm_name.resolvetopname.ndupl i64 
    jump           #17668     
#17669: 
    push           &mm_name.resolvetopname.ndupl 
    incr                      i64 1
    push           mm_name.resolvetopname.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_name.resolvetopname.powner u64 
    push           mm_name.resolvetopname.powner u64 
    push           78         
    pushptroff                u8 1 0
    switch         #17670     1 5
    opnd           #17671     
#17670: 
    switchlabel    #17672     
    switchlabel    #17673     
    switchlabel    #17674     
    switchlabel    #17675     
    switchlabel    #17676     
    endswitch                 
#17676: 
    push           mm_name.resolvetopname.powner u64 
    push           mm_name.resolvetopname.owner u64 
    jumpne         #17677     u64 
    push           mm_name.resolvetopname.p u64 
    setret                    u64 
    jump           #17666     
#17677: 
    jump           #17678     
#17673: 
    push           mm_name.resolvetopname.powner u64 
    push           94         
    pushptroff                u8 1 0
    push           mm_name.resolvetopname.moduleno i64 
    jumpne         #17679     i64 
    push           mm_name.resolvetopname.owner u64 
    push           78         
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #17680     i64 
    push           mm_name.resolvetopname.p u64 
    setret                    u64 
    jump           #17666     
#17680: 
    push           mm_name.resolvetopname.p u64 
    pop            mm_name.resolvetopname.moddef u64 
    jump           #17681     
#17679: 
    push           &mm_decls.moduletable 
    push           mm_name.resolvetopname.moduleno i64 
    addrefoff                 block:456 456 0
    push           40         
    addrefoff                 u64 1 0
    push           mm_name.resolvetopname.powner u64 
    push           94         
    pushptroff                u8 1 0
    pushptroff                u8 1 -1
    jumpfalse      #17682     i64 
    push           mm_name.resolvetopname.p u64 
    push           92         
    pushptroff                u16 1 0
    push           0          i64 
    push           1          i64 
    dotslice                  i64 
    jumpfalse      #17683     u64 
    push           &mm_name.resolvetopname.extcount 
    incr                      i64 1
    push           mm_name.resolvetopname.p u64 
    pop            mm_name.resolvetopname.extdef u64 
    push           mm_name.resolvetopname.extcount i64 
    push           10         i64 
    jumpge         #17684     i64 
    push           mm_name.resolvetopname.extdef u64 
    push           &mm_name.resolvetopname.ambiglist 
    push           mm_name.resolvetopname.extcount i64 
    popptroff                 u64 8 -8
#17684: 
#17683: 
#17682: 
#17681: 
    jump           #17678     
#17674: 
    push           mm_name.resolvetopname.powner u64 
    push           8          
    pushptroff                u64 1 0
    push           94         
    pushptroff                u8 1 0
    pop            mm_name.resolvetopname.modno i64 
    push           mm_name.resolvetopname.modno i64 
    push           mm_name.resolvetopname.moduleno i64 
    jumpeq         #17685     i64 
    push           &mm_decls.moduletable 
    push           mm_name.resolvetopname.moduleno i64 
    addrefoff                 block:456 456 0
    push           40         
    addrefoff                 u64 1 0
    push           mm_name.resolvetopname.modno i64 
    pushptroff                u8 1 -1
    jumpfalse      #17686     i64 
#17685: 
    push           mm_name.resolvetopname.p u64 
    pop            mm_name.resolvetopname.dlldef u64 
#17686: 
    jump           #17678     
#17675: 
    push           mm_name.resolvetopname.powner u64 
    push           mm_name.resolvetopname.owner u64 
    jumpne         #17687     u64 
    push           mm_name.resolvetopname.p u64 
    setret                    u64 
    jump           #17666     
#17687: 
    push           mm_name.resolvetopname.powner u64 
    push           mm_name.resolvetopname.owner u64 
    push           8          
    pushptroff                u64 1 0
    jumpne         #17688     u64 
    push           mm_name.resolvetopname.p u64 
    setret                    u64 
    jump           #17666     
#17688: 
    jump           #17678     
#17672: 
    push           mm_name.resolvetopname.p u64 
    push           78         
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #17689     i64 
    push           mm_name.resolvetopname.p u64 
    push           94         
    pushptroff                u8 1 0
    push           mm_name.resolvetopname.moduleno i64 
    jumpne         #17690     i64 
    push           mm_name.resolvetopname.fmodule i64 
    jumpfalse      #17691     i64 
    push           mm_name.resolvetopname.p u64 
    setret                    u64 
    jump           #17666     
#17691: 
    jump           #17692     
#17690: 
    push           mm_name.resolvetopname.p u64 
    pop            mm_name.resolvetopname.extmod u64 
#17692: 
#17689: 
    jump           #17678     
#17671: 
#17678: 
    push           mm_name.resolvetopname.p u64 
    push           40         
    pushptroff                u64 1 0
    pop            mm_name.resolvetopname.p u64 
#17668: 
    push           mm_name.resolvetopname.p u64 
    jumptrue       #17669     u64 
#17693: 
    push           mm_name.resolvetopname.moddef u64 
    jumpfalse      #17694     u64 
    push           mm_name.resolvetopname.moddef u64 
    setret                    u64 
    jump           #17666     
#17694: 
    push           mm_name.resolvetopname.extdef u64 
    jumpfalse      #17695     u64 
    push           mm_name.resolvetopname.extcount i64 
    push           1          i64 
    jumple         #17696     i64 
    push           mm_name.resolvetopname.fdoambig i64 
    jumpfalse      #17696     i64 
#17697: 
    push           1          i64 
    pop            mm_name.resolvetopname.i i64 
    push           mm_name.resolvetopname.extcount i64 
    push           1          i64 
    jumplt         #17698     i64 
#17699: 
    push           &mm_name.resolvetopname.ambiglist 
    push           mm_name.resolvetopname.i i64 
    pushptroff                u64 8 -8
    pop            mm_name.resolvetopname.extdef u64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mm_name.resolvetopname.i i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           mm_name.resolvetopname.extdef u64 
    push           8          
    pushptroff                u64 1 0
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_tables.namenames 
    push           mm_name.resolvetopname.extdef u64 
    push           8          
    pushptroff                u64 1 0
    push           78         
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#17700: 
    forup          #17699     i64 1
    opnd           mm_name.resolvetopname.i 
    opnd           mm_name.resolvetopname.extcount 
#17698: 
    setargs                   3 0
    push           0          u64 
    push           mm_name.resolvetopname.extdef u64 
    pushptr                   u64 
    push           "Ambiguous ext name: #" u64 
    callproc       &mm_support.rxerror_s 
#17696: 
    push           mm_name.resolvetopname.extdef u64 
    setret                    u64 
    jump           #17666     
#17695: 
    push           mm_name.resolvetopname.extmod u64 
    jumpfalse      #17701     u64 
    push           mm_name.resolvetopname.extmod u64 
    setret                    u64 
    jump           #17666     
#17701: 
    push           mm_name.resolvetopname.dlldef u64 
    setret                    u64 
    jump           #17666     
#17666: 
    retfn                     u64 
End


Proc mm_name.resolvename:
    param          mm_name.resolvename.owner u64 
    param          mm_name.resolvename.p u64 
    local          mm_name.resolvename.d u64 
    local          mm_name.resolvename.e u64 
    local          mm_name.resolvename.q u64 
    local          mm_name.resolvename.moduleno i64 
    local          mm_name.resolvename.mode i64 
    procentry                 
    push           mm_name.resolvename.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_name.resolvename.d u64 
    push           mm_name.resolvename.p u64 
    push           56         
    pushptroff                u8 1 0
    pop            mm_name.resolvename.moduleno i64 
    push           mm_name.resolvename.d u64 
    push           78         
    pushptroff                u8 1 0
    push           0          i64 
    jumpeq         #17703     i64 
    jump           #17704     
#17703: 
    setargs                   5 0
    push           1          i64 
    push           mm_name.allowmodname i64 
    push           mm_name.resolvename.moduleno i64 
    push           mm_name.resolvename.d u64 
    push           mm_name.resolvename.owner u64 
    callfn         &mm_name.resolvetopname u64 
    pop            mm_name.resolvename.e u64 
    push           mm_name.resolvename.e u64 
    jumptrue       #17705     u64 
    push           0          i64 
    pop            mm_name.resolvename.mode i64 
    push           mm_name.resolvename.p u64 
    push           41         
    pushptroff                u8 1 0
    push           73         i64 
    casejumpeq     #17706     i64 0
    push           84         i64 
    casejumpeq     #17706     i64 0
    push           83         i64 
    casejumpeq     #17706     i64 0
    push           76         i64 
    casejumpeq     #17707     i64 0
    push           65         i64 
    casejumpeq     #17707     i64 0
    popstack                  i64 
    jump           #17708     
#17706: 
    push           4          i64 
    pop            mm_name.resolvename.mode i64 
    jump           #17709     
#17707: 
    push           26         i64 
    pop            mm_name.resolvename.mode i64 
    jump           #17709     
#17708: 
#17709: 
    push           mm_name.resolvename.mode i64 
    push           0          i64 
    jumpne         #17710     i64 
    setargs                   3 0
    push           mm_name.resolvename.p u64 
    push           mm_name.resolvename.d u64 
    pushptr                   u64 
    push           "Undefined: #" u64 
    callproc       &mm_support.rxerror_s 
    jump           #17711     
#17710: 
    setargs                   4 0
    push           mm_name.resolvename.mode i64 
    push           mm_name.resolvename.moduleno i64 
    push           mm_name.resolvename.d u64 
    push           mm_name.resolvename.owner u64 
    callfn         &mm_name.addframevar u64 
    pop            mm_name.resolvename.e u64 
    push           mm_name.resolvename.p u64 
    push           4          
    pushptroff                u32 1 0
    push           0          i64 
    push           23         i64 
    dotslice                  i64 
    push           mm_name.resolvename.e u64 
    push           88         
    addrefoff                 u64 1 0
    push           0          i64 
    push           23         i64 
    popdotslice               u32 
    push           mm_name.resolvename.mode i64 
    push           26         i64 
    jumpeq         #17712     i64 
    push           1          u64 
    push           mm_name.resolvename.e u64 
    push           92         
    addrefoff                 u64 1 0
    push           6          i64 
    popdotindex               u16 
#17712: 
#17711: 
#17705: 
    push           1          u64 
    push           mm_name.resolvename.e u64 
    push           92         
    addrefoff                 u64 1 0
    push           3          i64 
    popdotindex               u16 
    push           mm_name.resolvename.e u64 
    push           78         
    pushptroff                u8 1 0
    push           13         i64 
    jumpne         #17713     i64 
    push           mm_name.resolvename.e u64 
    push           104        
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #17713     i64 
    push           57         i64 
    push           mm_name.resolvename.p u64 
    push           0          
    popptroff                 u8 1 0
    setargs                   1 0
    push           mm_name.resolvename.e u64 
    callfn         &mm_lib.createname u64 
    push           mm_name.resolvename.p u64 
    push           16         
    popptroff                 u64 1 0
    push           1          i64 
    push           mm_name.resolvename.p u64 
    push           1          
    popptroff                 u8 1 0
    push           0          i64 
    push           mm_name.resolvename.p u64 
    push           3          
    storeptroff               u8 1 0
    push           mm_name.resolvename.p u64 
    push           2          
    popptroff                 u8 1 0
    jump           #17714     
#17713: 
    push           mm_name.resolvename.e u64 
    push           mm_name.resolvename.p u64 
    push           16         
    popptroff                 u64 1 0
#17714: 
#17704: 
    retproc                   
End


Proc mm_name.finddupl: u64
    param          mm_name.finddupl.d u64 
    param          mm_name.finddupl.pdupl u64 
    procentry                 
    push           mm_name.finddupl.pdupl u64 
    push           78         
    pushptroff                u8 1 0
    push           0          i64 
    jumpeq         #17716     i64 
    push           mm_name.finddupl.pdupl u64 
    setret                    u64 
    jump           #17717     
#17716: 
    push           mm_name.finddupl.pdupl u64 
    push           40         
    pushptroff                u64 1 0
    pop            mm_name.finddupl.pdupl u64 
    jump           #17718     
#17719: 
    push           mm_name.finddupl.pdupl u64 
    push           8          
    pushptroff                u64 1 0
    push           mm_name.finddupl.d u64 
    jumpne         #17720     u64 
    push           mm_name.finddupl.pdupl u64 
    setret                    u64 
    jump           #17717     
#17720: 
    push           mm_name.finddupl.pdupl u64 
    push           40         
    pushptroff                u64 1 0
    pop            mm_name.finddupl.pdupl u64 
#17718: 
    push           mm_name.finddupl.pdupl u64 
    jumptrue       #17719     u64 
#17721: 
    push           0          u64 
    setret                    u64 
    jump           #17717     
#17717: 
    retfn                     u64 
End


Proc mm_name.resolvedot:
    param          mm_name.resolvedot.owner u64 
    param          mm_name.resolvedot.p u64 
    local          mm_name.resolvedot.lhs u64 
    local          mm_name.resolvedot.rhs u64 
    local          mm_name.resolvedot.d u64 
    local          mm_name.resolvedot.e u64 
    local          mm_name.resolvedot.t u64 
    local          mm_name.resolvedot.f u64 
    local          mm_name.resolvedot.m i64 
    procentry                 
    push           mm_name.resolvedot.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_name.resolvedot.lhs u64 
    push           mm_name.resolvedot.p u64 
    push           24         
    pushptroff                u64 1 0
    pop            mm_name.resolvedot.rhs u64 
    push           mm_name.resolvedot.rhs u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_name.resolvedot.e u64 
    setargs                   2 0
    push           mm_name.resolvedot.lhs u64 
    push           mm_name.resolvedot.owner u64 
    callproc       &mm_name.rx_unit 
    push           mm_name.resolvedot.lhs u64 
    pushptr                   u8 
    push           3          i64 
    casejumpeq     #17723     i64 0
    popstack                  i64 
    jump           #17724     
#17723: 
    push           mm_name.resolvedot.lhs u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_name.resolvedot.d u64 
    push           mm_name.resolvedot.d u64 
    push           78         
    pushptroff                u8 1 0
    push           2          i64 
    casejumpeq     #17725     i64 0
    push           4          i64 
    casejumpeq     #17725     i64 0
    push           5          i64 
    casejumpeq     #17725     i64 0
    push           4          i64 
    casejumpeq     #17725     i64 0
    push           3          i64 
    casejumpeq     #17725     i64 0
    push           12         i64 
    casejumpeq     #17726     i64 0
    push           11         i64 
    casejumpeq     #17726     i64 0
    push           13         i64 
    casejumpeq     #17726     i64 0
    popstack                  i64 
    jump           #17727     
#17725: 
    setargs                   2 0
    push           mm_name.resolvedot.e u64 
    push           mm_name.resolvedot.d u64 
    callfn         &mm_name.finddupl u64 
    pop            mm_name.resolvedot.e u64 
    push           mm_name.resolvedot.e u64 
    jumpfalse      #17728     u64 
    push           3          i64 
    push           mm_name.resolvedot.p u64 
    push           0          
    popptroff                 u8 1 0
    push           0          u64 
    push           mm_name.resolvedot.p u64 
    push           24         
    storeptroff               u64 1 0
    push           mm_name.resolvedot.p u64 
    push           16         
    popptroff                 u64 1 0
    push           0          i64 
    push           mm_name.resolvedot.p u64 
    push           2          
    storeptroff               u8 1 0
    push           mm_name.resolvedot.p u64 
    push           1          
    popptroff                 u8 1 0
    push           mm_name.resolvedot.e u64 
    push           mm_name.resolvedot.p u64 
    push           16         
    popptroff                 u64 1 0
    push           mm_name.resolvedot.e u64 
    push           78         
    pushptroff                u8 1 0
    push           16         i64 
    casejumpeq     #17729     i64 0
    push           10         i64 
    casejumpeq     #17730     i64 0
    popstack                  i64 
    jump           #17731     
#17729: 
    jump           #17732     
#17730: 
    jump           #17732     
#17731: 
#17732: 
    jump           #17733     
#17728: 
    setargs                   3 0
    push           mm_name.resolvedot.p u64 
    push           mm_name.resolvedot.p u64 
    push           24         
    pushptroff                u64 1 0
    push           16         
    pushptroff                u64 1 0
    pushptr                   u64 
    push           "Can't resolve .#" u64 
    callproc       &mm_support.rxerror_s 
#17733: 
    jump           #17734     
#17726: 
    push           mm_name.resolvedot.d u64 
    push           72         
    pushptroff                i32 1 0
    pop            mm_name.resolvedot.m i64 
    push           &mm_decls.ttbasetype 
    push           mm_name.resolvedot.m i64 
    pushptroff                i32 4 0
    push           13         i64 
    casejumpeq     #17735     i64 0
    push           9          i64 
    casejumpeq     #17736     i64 0
    popstack                  i64 
    jump           #17737     
#17735: 
    jump           #17738     
#17736: 
#17739: 
    push           &mm_decls.tttarget 
    push           mm_name.resolvedot.m i64 
    pushptroff                i32 4 0
    pop            mm_name.resolvedot.m i64 
    push           &mm_decls.ttbasetype 
    push           mm_name.resolvedot.m i64 
    pushptroff                i32 4 0
    push           13         i64 
    casejumpeq     #17740     i64 0
    push           9          i64 
    casejumpeq     #17741     i64 0
    popstack                  i64 
    jump           #17742     
#17740: 
    jump           #17743     
    jump           #17744     
#17741: 
    jump           #17744     
#17742: 
    setargs                   2 0
    push           0          u64 
    push           "2:record expected" u64 
    callproc       &mm_support.rxerror 
#17744: 
    jump           #17739     
#17743: 
    jump           #17738     
#17737: 
    setargs                   2 0
    push           0          u64 
    push           "record expected" u64 
    callproc       &mm_support.rxerror 
#17738: 
    push           &mm_decls.ttnamedef 
    push           mm_name.resolvedot.m i64 
    pushptroff                u64 8 0
    pop            mm_name.resolvedot.t u64 
    setargs                   2 0
    push           mm_name.resolvedot.e u64 
    push           mm_name.resolvedot.t u64 
    callfn         &mm_name.finddupl u64 
    pop            mm_name.resolvedot.e u64 
    push           mm_name.resolvedot.e u64 
    jumpfalse      #17745     u64 
    push           mm_name.resolvedot.e u64 
    push           mm_name.resolvedot.p u64 
    push           24         
    pushptroff                u64 1 0
    push           16         
    popptroff                 u64 1 0
    jump           #17746     
#17745: 
    setargs                   3 0
    push           0          u64 
    push           mm_name.resolvedot.rhs u64 
    push           16         
    pushptroff                u64 1 0
    pushptr                   u64 
    push           "Not a field: #" u64 
    callproc       &mm_support.rxerror_s 
#17746: 
    jump           #17734     
#17727: 
#17734: 
    jump           #17747     
#17724: 
    push           mm_name.resolvedot.e u64 
    push           40         
    pushptroff                u64 1 0
    jumptrue       #17748     u64 
    setargs                   3 0
    push           0          u64 
    push           mm_name.resolvedot.e u64 
    pushptr                   u64 
    push           "Not a field: #" u64 
    callproc       &mm_support.rxerror_s 
#17748: 
#17747: 
#17749: 
    retproc                   
End


Proc mm_name.fixmode:
    param          mm_name.fixmode.p u64 
    local          mm_name.fixmode.pmode u64 
    local          mm_name.fixmode.a u64 
    local          mm_name.fixmode.d u64 
    local          mm_name.fixmode.e u64 
    local          mm_name.fixmode.f u64 
    local          mm_name.fixmode.owner u64 
    local          mm_name.fixmode.m i64 
    local          mm_name.fixmode.moduleno i64 
    procentry                 
    push           mm_name.fixmode.p u64 
    push           24         
    pushptroff                u64 1 0
    pop            mm_name.fixmode.pmode u64 
    push           mm_name.fixmode.pmode u64 
    pushptr                   i32 
    neg                       i64 
    pop            mm_name.fixmode.m i64 
    push           mm_name.fixmode.p u64 
    pushptr                   u64 
    store          mm_name.fixmode.owner u64 
    pop            mm_name.fixmode.d u64 
    jump           #17751     
#17752: 
    push           mm_name.fixmode.d u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_name.fixmode.d u64 
#17751: 
    push           mm_name.fixmode.d u64 
    push           78         
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #17752     i64 
#17753: 
    push           mm_name.fixmode.d u64 
    push           94         
    pushptroff                u8 1 0
    pop            mm_name.fixmode.moduleno i64 
    push           mm_name.fixmode.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_name.fixmode.a u64 
    push           mm_name.fixmode.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_name.fixmode.d u64 
    push           mm_name.fixmode.a u64 
    push           0          u64 
    jumpne         #17754     u64 
    push           mm_name.fixmode.d u64 
    jumpfalse      #17754     u64 
    setargs                   5 0
    push           1          i64 
    push           0          i64 
    push           mm_name.fixmode.moduleno i64 
    push           mm_name.fixmode.d u64 
    push           mm_name.fixmode.owner u64 
    callfn         &mm_name.resolvetopname u64 
    pop            mm_name.fixmode.e u64 
    jump           #17755     
#17754: 
    push           mm_name.fixmode.d u64 
    push           0          u64 
    jumpne         #17756     u64 
    push           mm_name.fixmode.a u64 
    jumpfalse      #17756     u64 
    setargs                   2 0
    push           0          u64 
    push           "Fixmode can't do typeof yet" u64 
    callproc       &mm_support.rxerror 
    jump           #17755     
#17756: 
    setargs                   5 0
    push           1          i64 
    push           0          i64 
    push           mm_name.fixmode.moduleno i64 
    push           mm_name.fixmode.a u64 
    push           mm_name.fixmode.owner u64 
    callfn         &mm_name.resolvetopname u64 
    pop            mm_name.fixmode.e u64 
    push           mm_name.fixmode.e u64 
    jumpfalse      #17757     u64 
    push           mm_name.fixmode.e u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_name.fixmode.f u64 
    push           0          u64 
    pop            mm_name.fixmode.e u64 
    jump           #17758     
#17759: 
    push           mm_name.fixmode.f u64 
    push           78         
    pushptroff                u8 1 0
    push           4          i64 
    jumpne         #17760     i64 
    push           mm_name.fixmode.f u64 
    push           48         
    pushptroff                u64 1 0
    push           mm_name.fixmode.d u64 
    jumpne         #17760     u64 
    push           mm_name.fixmode.f u64 
    pop            mm_name.fixmode.e u64 
    jump           #17761     
#17760: 
    push           mm_name.fixmode.f u64 
    push           32         
    pushptroff                u64 1 0
    pop            mm_name.fixmode.f u64 
#17758: 
    push           mm_name.fixmode.f u64 
    jumptrue       #17759     u64 
#17761: 
#17757: 
#17755: 
    push           mm_name.fixmode.e u64 
    jumpfalse      #17762     u64 
    push           mm_name.fixmode.e u64 
    push           78         
    pushptroff                u8 1 0
    push           4          i64 
    jumpne         #17762     i64 
    push           mm_name.fixmode.e u64 
    push           72         
    pushptroff                i32 1 0
    push           mm_name.fixmode.pmode u64 
    popptr                    i32 
    jump           #17763     
#17762: 
    setargs                   3 0
    push           0          u64 
    push           mm_name.fixmode.d u64 
    pushptr                   u64 
    push           "2:Can't resolve tentative type: #" u64 
    callproc       &mm_support.rxerror_s 
#17763: 
#17764: 
    retproc                   
End


Proc mm_name.fixusertypes:
    local          mm_name.fixusertypes.p u64 
    local          mm_name.fixusertypes.npasses i64 
    local          mm_name.fixusertypes.notresolved i64 
    local          mm_name.fixusertypes.m i64 
    local          mm_name.fixusertypes.zerosizes i64 
    local          mm_name.fixusertypes.d u64 
    local          mm_name.fixusertypes.i i64 
    procentry                 
    push           0          i64 
    pop            mm_name.fixusertypes.npasses i64 
#17766: 
    push           &mm_name.fixusertypes.npasses 
    incr                      i64 1
    push           0          i64 
    pop            mm_name.fixusertypes.notresolved i64 
#17767: 
    push           1          i64 
    pop            mm_name.fixusertypes.i i64 
    push           mm_decls.ntypenames i64 
    push           1          i64 
    jumplt         #17768     i64 
#17769: 
    push           &mm_decls.typenames 
    push           mm_name.fixusertypes.i i64 
    addrefoff                 block:32 32 0
    pop            mm_name.fixusertypes.p u64 
    push           mm_name.fixusertypes.p u64 
    push           24         
    pushptroff                u64 1 0
    pushptr                   i32 
    push           0          i64 
    jumpge         #17770     i64 
    push           &mm_decls.typenamepos 
    push           mm_name.fixusertypes.i i64 
    addrefoff                 block:4 4 0
    pushptr                   u32 
    pop            mm_tables.mlineno i64 
    setargs                   1 0
    push           mm_name.fixusertypes.p u64 
    callproc       &mm_name.fixmode 
    push           mm_name.fixusertypes.p u64 
    push           24         
    pushptroff                u64 1 0
    pushptr                   i32 
    push           0          i64 
    jumpge         #17771     i64 
    push           &mm_name.fixusertypes.notresolved 
    incr                      i64 1
#17771: 
#17770: 
#17772: 
    forup          #17769     i64 1
    opnd           mm_name.fixusertypes.i 
    opnd           mm_decls.ntypenames 
#17768: 
    push           mm_name.fixusertypes.npasses i64 
    push           5          i64 
    jumple         #17773     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Type phase errors - check these user types:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#17774: 
    push           1          i64 
    pop            mm_name.fixusertypes.i i64 
    push           mm_decls.ntypenames i64 
    push           1          i64 
    jumplt         #17775     i64 
#17776: 
    push           &mm_decls.typenames 
    push           mm_name.fixusertypes.i i64 
    addrefoff                 block:32 32 0
    pop            mm_name.fixusertypes.p u64 
    push           mm_name.fixusertypes.p u64 
    push           24         
    pushptroff                u64 1 0
    pushptr                   i32 
    push           0          i64 
    jumpge         #17777     i64 
    push           mm_name.fixusertypes.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_name.fixusertypes.d u64 
    push           mm_name.fixusertypes.d u64 
    push           0          u64 
    jumpne         #17778     u64 
    push           mm_name.fixusertypes.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_name.fixusertypes.d u64 
#17778: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "\t"       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_name.fixusertypes.d u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#17777: 
#17779: 
    forup          #17776     i64 1
    opnd           mm_name.fixusertypes.i 
    opnd           mm_decls.ntypenames 
#17775: 
    setargs                   2 0
    push           0          u64 
    push           "Fixtypes: too many passes (cyclic ref?)" u64 
    callproc       &mm_support.rxerror 
#17773: 
#17780: 
    push           mm_name.fixusertypes.notresolved i64 
    push           0          i64 
    jumpne         #17766     i64 
#17781: 
#17782: 
    retproc                   
End


Proc mm_name.fixblockparams:
    local          mm_name.fixblockparams.pp u64 
    local          mm_name.fixblockparams.d u64 
    local          mm_name.fixblockparams.e u64 
    procentry                 
    jump           #17784     
    push           mm_decls.proclist u64 
    pop            mm_name.fixblockparams.pp u64 
    jump           #17785     
#17786: 
    push           mm_name.fixblockparams.pp u64 
    pushptr                   u64 
    pop            mm_name.fixblockparams.d u64 
    push           mm_name.fixblockparams.d u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_name.fixblockparams.e u64 
    jump           #17787     
#17788: 
    push           mm_name.fixblockparams.e u64 
    push           78         
    pushptroff                u8 1 0
    push           13         i64 
    jumpne         #17789     i64 
    push           &mm_decls.ttbasetype 
    push           mm_name.fixblockparams.e u64 
    push           72         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           13         i64 
    setjumpeq      #17790     i64 
    push           11         i64 
    setjumpne      #17791     i64 
#17790: 
    push           2          i64 
    push           mm_name.fixblockparams.e u64 
    push           104        
    popptroff                 u8 1 0
    setargs                   3 0
    push           0          i64 
    push           mm_name.fixblockparams.e u64 
    push           72         
    pushptroff                i32 1 0
    push           mm_name.fixblockparams.d u64 
    callfn         &mm_lib.createrefmode i64 
    push           mm_name.fixblockparams.e u64 
    push           72         
    popptroff                 i32 1 0
#17791: 
#17789: 
    push           mm_name.fixblockparams.e u64 
    push           32         
    pushptroff                u64 1 0
    pop            mm_name.fixblockparams.e u64 
#17787: 
    push           mm_name.fixblockparams.e u64 
    jumptrue       #17788     u64 
#17792: 
    push           mm_name.fixblockparams.pp u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_name.fixblockparams.pp u64 
#17785: 
    push           mm_name.fixblockparams.pp u64 
    jumptrue       #17786     u64 
#17793: 
#17784: 
    retproc                   
End


Proc mm_name.resolve_equiv_name: u64
    param          mm_name.resolve_equiv_name.owner u64 
    param          mm_name.resolve_equiv_name.p u64 
    procentry                 
    push           mm_name.resolve_equiv_name.p u64 
    push           78         
    pushptroff                u8 1 0
    push           14         i64 
    jumpne         #17795     i64 
    push           mm_name.resolve_equiv_name.p u64 
    setret                    u64 
    jump           #17796     
#17795: 
    setargs                   2 0
    push           0          u64 
    push           "RESOLVE EQUIV FIELD/COMPLEX" u64 
    callproc       &mm_support.rxerror 
    push           0          u64 
    setret                    u64 
    jump           #17796     
#17796: 
    retfn                     u64 
End


Proc mm_name.addframevar: u64
    param          mm_name.addframevar.owner u64 
    param          mm_name.addframevar.d u64 
    param          mm_name.addframevar.moduleno i64 
    param          mm_name.addframevar.mode i64 
    local          mm_name.addframevar.e u64 
    procentry                 
    setargs                   3 0
    push           12         i64 
    push           mm_name.addframevar.d u64 
    push           mm_name.addframevar.owner u64 
    callfn         &mm_lib.getduplnameptr u64 
    pop            mm_name.addframevar.e u64 
    setargs                   3 0
    push           mm_name.addframevar.e u64 
    push           72         
    addrefoff                 u64 1 0
    push           mm_name.addframevar.mode i64 
    push           mm_name.addframevar.owner u64 
    callproc       &mm_lib.storemode 
    setargs                   2 0
    push           mm_name.addframevar.e u64 
    push           mm_name.addframevar.owner u64 
    callproc       &mm_lib.adddef 
    push           mm_name.addframevar.e u64 
    setret                    u64 
    jump           #17798     
#17798: 
    retfn                     u64 
End


Proc mm_name.copylistunit: u64
    param          mm_name.copylistunit.p u64 
    local          mm_name.copylistunit.q u64 
    local          mm_name.copylistunit.plist u64 
    local          mm_name.copylistunit.plistx u64 
    procentry                 
    push           0          u64 
    store          mm_name.copylistunit.plistx u64 
    pop            mm_name.copylistunit.plist u64 
    jump           #17800     
#17801: 
    setargs                   1 0
    push           mm_name.copylistunit.p u64 
    callfn         &mm_name.copyunit u64 
    pop            mm_name.copylistunit.q u64 
    setargs                   3 0
    push           mm_name.copylistunit.q u64 
    push           &mm_name.copylistunit.plistx 
    push           &mm_name.copylistunit.plist 
    callproc       &mm_lib.addlistunit 
    push           mm_name.copylistunit.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_name.copylistunit.p u64 
#17800: 
    push           mm_name.copylistunit.p u64 
    jumptrue       #17801     u64 
#17802: 
    push           mm_name.copylistunit.plist u64 
    setret                    u64 
    jump           #17803     
#17803: 
    retfn                     u64 
End


Proc mm_name.copyunit: u64
    param          mm_name.copyunit.p u64 
    local          mm_name.copyunit.q u64 
    local          mm_name.copyunit.d u64 
    local          mm_name.copyunit.i i64 
    procentry                 
    push           mm_name.copyunit.p u64 
    push           0          u64 
    jumpne         #17805     u64 
    push           0          u64 
    setret                    u64 
    jump           #17806     
#17805: 
    push           mm_name.copyunit.p u64 
    pushptr                   u8 
    push           3          i64 
    jumpne         #17807     i64 
    push           mm_name.copyunit.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_name.copyunit.d u64 
#17808: 
    push           1          i64 
    pop            mm_name.copyunit.i i64 
    push           mm_name.nmacroparams i64 
    push           1          i64 
    jumplt         #17809     i64 
#17810: 
    push           &mm_name.macroparamsgen 
    push           mm_name.copyunit.i i64 
    pushptroff                u64 8 -8
    push           mm_name.copyunit.d u64 
    jumpne         #17811     u64 
    setargs                   1 0
    push           &mm_name.macroargs 
    push           mm_name.copyunit.i i64 
    pushptroff                u64 8 -8
    callfn         &mm_name.copyunit u64 
    setret                    u64 
    jump           #17806     
    jump           #17809     
#17811: 
#17812: 
    forup          #17810     i64 1
    opnd           mm_name.copyunit.i 
    opnd           mm_name.nmacroparams 
#17809: 
#17807: 
    setargs                   1 0
    push           mm_name.copyunit.p u64 
    pushptr                   u8 
    callfn         &mm_lib.createunit0 u64 
    pop            mm_name.copyunit.q u64 
    push           mm_name.copyunit.p u64 
    pushptr                   block:64 
    push           mm_name.copyunit.q u64 
    popptr                    block:64 
    push           0          u64 
    push           mm_name.copyunit.q u64 
    push           8          
    popptroff                 u64 1 0
    push           mm_name.copyunit.q u64 
    push           1          
    pushptroff                u8 1 0
    jumpfalse      #17813     i64 
    setargs                   1 0
    push           mm_name.copyunit.q u64 
    push           16         
    pushptroff                u64 1 0
    callfn         &mm_name.copylistunit u64 
    push           mm_name.copyunit.q u64 
    push           16         
    popptroff                 u64 1 0
    push           1          i64 
    push           mm_name.copyunit.q u64 
    push           1          
    popptroff                 u8 1 0
#17813: 
    push           mm_name.copyunit.q u64 
    push           2          
    pushptroff                u8 1 0
    jumpfalse      #17814     i64 
    setargs                   1 0
    push           mm_name.copyunit.q u64 
    push           24         
    pushptroff                u64 1 0
    callfn         &mm_name.copylistunit u64 
    push           mm_name.copyunit.q u64 
    push           24         
    popptroff                 u64 1 0
    push           1          i64 
    push           mm_name.copyunit.q u64 
    push           2          
    popptroff                 u8 1 0
#17814: 
    push           mm_name.copyunit.q u64 
    push           3          
    pushptroff                u8 1 0
    jumpfalse      #17815     i64 
    setargs                   1 0
    push           mm_name.copyunit.q u64 
    push           32         
    pushptroff                u64 1 0
    callfn         &mm_name.copylistunit u64 
    push           mm_name.copyunit.q u64 
    push           32         
    popptroff                 u64 1 0
    push           1          i64 
    push           mm_name.copyunit.q u64 
    push           3          
    popptroff                 u8 1 0
#17815: 
    push           mm_name.copyunit.q u64 
    setret                    u64 
    jump           #17806     
#17806: 
    retfn                     u64 
End


Proc mm_name.replaceunit:
    param          mm_name.replaceunit.p u64 
    param          mm_name.replaceunit.q u64 
    local          mm_name.replaceunit.pnext u64 
    procentry                 
    push           mm_name.replaceunit.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_name.replaceunit.pnext u64 
    push           mm_name.replaceunit.q u64 
    pushptr                   block:64 
    push           mm_name.replaceunit.p u64 
    popptr                    block:64 
    push           mm_name.replaceunit.pnext u64 
    push           mm_name.replaceunit.p u64 
    push           8          
    popptroff                 u64 1 0
#17817: 
    retproc                   
End


Proc mm_name.expandmacro:
    param          mm_name.expandmacro.p u64 
    param          mm_name.expandmacro.a u64 
    param          mm_name.expandmacro.b u64 
    local          mm_name.expandmacro.d u64 
    local          mm_name.expandmacro.pm u64 
    local          mm_name.expandmacro.pnew u64 
    local          mm_name.expandmacro.ignoreargs i64 
    procentry                 
    push           mm_name.macrolevels i64 
    push           10         i64 
    jumple         #17819     i64 
    setargs                   2 0
    push           0          u64 
    push           "Too many macro levels (recursive macro?)" u64 
    callproc       &mm_support.rxerror 
#17819: 
    push           mm_name.expandmacro.a u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_name.expandmacro.d u64 
    push           mm_name.expandmacro.d u64 
    push           104        
    pushptroff                u64 1 0
    pop            mm_name.expandmacro.pm u64 
    push           0          i64 
    pop            mm_name.nmacroparams i64 
    jump           #17820     
#17821: 
    push           mm_name.nmacroparams i64 
    push           50         i64 
    jumplt         #17822     i64 
    setargs                   2 0
    push           0          u64 
    push           "macro param overflow" u64 
    callproc       &mm_support.rxerror 
#17822: 
    push           mm_name.expandmacro.pm u64 
    push           &mm_name.macroparams 
    push           &mm_name.nmacroparams 
    incrload                  i64 1
    popptroff                 u64 8 -8
    push           mm_name.expandmacro.pm u64 
    push           104        
    pushptroff                u64 1 0
    push           &mm_name.macroparamsgen 
    push           mm_name.nmacroparams i64 
    popptroff                 u64 8 -8
    push           mm_name.expandmacro.pm u64 
    push           96         
    pushptroff                u64 1 0
    pop            mm_name.expandmacro.pm u64 
#17820: 
    push           mm_name.expandmacro.pm u64 
    jumptrue       #17821     u64 
#17823: 
    push           0          i64 
    pop            mm_name.nmacroargs i64 
    jump           #17824     
#17825: 
    push           mm_name.nmacroargs i64 
    push           50         i64 
    jumplt         #17826     i64 
    setargs                   2 0
    push           0          u64 
    push           "macro arg overflow" u64 
    callproc       &mm_support.rxerror 
#17826: 
    push           mm_name.expandmacro.b u64 
    push           &mm_name.macroargs 
    push           &mm_name.nmacroargs 
    incrload                  i64 1
    popptroff                 u64 8 -8
    push           mm_name.expandmacro.b u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_name.expandmacro.b u64 
#17824: 
    push           mm_name.expandmacro.b u64 
    jumptrue       #17825     u64 
#17827: 
    push           mm_name.nmacroargs i64 
    push           mm_name.nmacroparams i64 
    jumpge         #17828     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "NMACROARGS=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_name.nmacroargs i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           mm_name.nmacroparams i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           0          u64 
    push           "Too few macro args" u64 
    callproc       &mm_support.rxerror 
#17828: 
    push           0          i64 
    pop            mm_name.expandmacro.ignoreargs i64 
    push           mm_name.nmacroargs i64 
    push           0          i64 
    jumple         #17829     i64 
    push           mm_name.nmacroparams i64 
    push           0          i64 
    jumpne         #17829     i64 
    push           1          i64 
    pop            mm_name.expandmacro.ignoreargs i64 
    push           0          i64 
    store          mm_name.nmacroparams i64 
    pop            mm_name.nmacroargs i64 
    jump           #17830     
#17829: 
    push           mm_name.nmacroargs i64 
    push           mm_name.nmacroparams i64 
    jumple         #17831     i64 
    setargs                   2 0
    push           0          u64 
    push           "Too many macro args" u64 
    callproc       &mm_support.rxerror 
#17831: 
#17830: 
    setargs                   1 0
    push           mm_name.expandmacro.d u64 
    push           64         
    pushptroff                u64 1 0
    callfn         &mm_name.copyunit u64 
    pop            mm_name.expandmacro.pnew u64 
    push           mm_name.expandmacro.ignoreargs i64 
    jumptrue       #17832     i64 
    setargs                   2 0
    push           mm_name.expandmacro.pnew u64 
    push           mm_name.expandmacro.p u64 
    callproc       &mm_name.replaceunit 
    jump           #17833     
#17832: 
    push           mm_name.expandmacro.pnew u64 
    push           mm_name.expandmacro.p u64 
    push           16         
    popptroff                 u64 1 0
#17833: 
#17834: 
    retproc                   
End


Proc mm_name.duplfield:
    param          mm_name.duplfield.owner u64 
    param          mm_name.duplfield.p u64 
    param          mm_name.duplfield.q u64 
    procentry                 
    push           mm_name.duplfield.p u64 
    push           64         
    pushptroff                u64 1 0
    jumpfalse      #17836     u64 
    setargs                   1 0
    push           "DUPLFIELD" u64 
    callproc       &mm_support.serror 
#17836: 
    push           mm_name.duplfield.p u64 
    push           92         
    pushptroff                u16 1 0
    push           12         i64 
    dotindex                  i64 
    push           mm_name.duplfield.q u64 
    push           92         
    addrefoff                 u64 1 0
    push           12         i64 
    popdotindex               u16 
    push           mm_name.duplfield.p u64 
    push           92         
    pushptroff                u16 1 0
    push           mm_name.duplfield.q u64 
    push           92         
    popptroff                 u16 1 0
    push           mm_name.duplfield.p u64 
    push           104        
    pushptroff                block:8 1 0
    push           mm_name.duplfield.q u64 
    push           104        
    popptroff                 block:8 1 0
    setargs                   3 0
    push           mm_name.duplfield.q u64 
    push           72         
    addrefoff                 u64 1 0
    push           mm_name.duplfield.p u64 
    push           72         
    pushptroff                i32 1 0
    push           mm_name.duplfield.owner u64 
    callproc       &mm_lib.storemode 
#17837: 
    retproc                   
End


Proc mm_name.do_baseclass:
    param          mm_name.do_baseclass.p u64 
    local          mm_name.do_baseclass.d u64 
    local          mm_name.do_baseclass.e u64 
    local          mm_name.do_baseclass.newd u64 
    local          mm_name.do_baseclass.dbase u64 
    local          mm_name.do_baseclass.normalexit i64 
    procentry                 
    push           &mm_decls.ttnamedef 
    push           mm_name.do_baseclass.p u64 
    push           112        
    pushptroff                i32 1 0
    pushptroff                u64 8 0
    pop            mm_name.do_baseclass.dbase u64 
    push           mm_name.do_baseclass.dbase u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_name.do_baseclass.d u64 
    jump           #17839     
#17840: 
    push           mm_name.do_baseclass.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_name.do_baseclass.e u64 
    push           1          i64 
    pop            mm_name.do_baseclass.normalexit i64 
    jump           #17841     
#17842: 
    setargs                   2 0
    push           mm_name.do_baseclass.e u64 
    pushptr                   u64 
    push           mm_name.do_baseclass.d u64 
    pushptr                   u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #17843     i64 
    push           0          i64 
    pop            mm_name.do_baseclass.normalexit i64 
    jump           #17844     
#17843: 
    push           mm_name.do_baseclass.e u64 
    push           32         
    pushptroff                u64 1 0
    pop            mm_name.do_baseclass.e u64 
#17841: 
    push           mm_name.do_baseclass.e u64 
    jumptrue       #17842     u64 
#17844: 
    push           mm_name.do_baseclass.normalexit i64 
    jumpfalse      #17845     i64 
    push           mm_name.do_baseclass.d u64 
    push           78         
    pushptroff                u8 1 0
    push           5          i64 
    casejumpeq     #17846     i64 0
    push           22         i64 
    casejumpeq     #17846     i64 0
    popstack                  i64 
    jump           #17847     
#17846: 
    setargs                   3 0
    push           22         i64 
    push           mm_name.do_baseclass.d u64 
    push           mm_name.do_baseclass.p u64 
    callfn         &mm_lib.getduplnameptr u64 
    pop            mm_name.do_baseclass.newd u64 
    push           mm_name.do_baseclass.d u64 
    push           mm_name.do_baseclass.newd u64 
    push           96         
    popptroff                 u64 1 0
    jump           #17848     
#17847: 
    setargs                   3 0
    push           mm_name.do_baseclass.d u64 
    push           78         
    pushptroff                u8 1 0
    push           mm_name.do_baseclass.d u64 
    push           mm_name.do_baseclass.p u64 
    callfn         &mm_lib.getduplnameptr u64 
    pop            mm_name.do_baseclass.newd u64 
    setargs                   3 0
    push           mm_name.do_baseclass.newd u64 
    push           mm_name.do_baseclass.d u64 
    push           mm_name.do_baseclass.p u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &mm_name.duplfield 
#17848: 
    setargs                   2 0
    push           mm_name.do_baseclass.newd u64 
    push           mm_name.do_baseclass.p u64 
    callproc       &mm_lib.adddef 
#17845: 
    push           mm_name.do_baseclass.d u64 
    push           32         
    pushptroff                u64 1 0
    pop            mm_name.do_baseclass.d u64 
#17839: 
    push           mm_name.do_baseclass.d u64 
    jumptrue       #17840     u64 
#17849: 
#17850: 
    retproc                   
End


Proc mm_type.$init:
    procentry                 
    setargs                   0 0
    callproc       &mm_tables.inittypetables 
#17852: 
    retproc                   
End


Proc mm_type.tx_allprocs:
    local          mm_type.tx_allprocs.pp u64 
    local          mm_type.tx_allprocs.pcode u64 
    procentry                 
    push           mm_decls.proclist u64 
    pop            mm_type.tx_allprocs.pp u64 
    jump           #17854     
#17855: 
    push           mm_type.tx_allprocs.pp u64 
    pushptr                   u64 
    pop            mm_decls.currproc u64 
    push           mm_decls.currproc u64 
    push           64         
    pushptroff                u64 1 0
    pop            mm_type.tx_allprocs.pcode u64 
    push           &mm_decls.ttisshort 
    push           mm_decls.currproc u64 
    push           72         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    jumpfalse      #17856     i64 
    push           mm_decls.currproc u64 
    push           88         
    pushptroff                u32 1 0
    pop            mm_tables.mlineno i64 
    setargs                   2 0
    push           0          u64 
    push           "proc short ret type" u64 
    callproc       &mm_support.txerror 
#17856: 
    setargs                   3 0
    push           0          i64 
    startmult                 
    push           mm_decls.currproc u64 
    push           116        
    pushptroff                u8 1 0
    push           1          i64 
    jumple         #17857     i64 
    push           31         i64 
    resetmult                 
    jump           #17858     
#17857: 
    push           mm_decls.currproc u64 
    push           72         
    pushptroff                i32 1 0
    endmult                   
#17858: 
    push           mm_type.tx_allprocs.pcode u64 
    callproc       &mm_type.tpass 
    push           &mm_decls.ttbasetype 
    push           mm_decls.currproc u64 
    push           72         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           0          i64 
    casejumpeq     #17859     i64 0
    push           31         i64 
    casejumpeq     #17860     i64 0
    popstack                  i64 
    jump           #17861     
#17859: 
    jump           #17862     
#17860: 
    jump           #17862     
#17861: 
    push           mm_type.tx_allprocs.pcode u64 
    pushptr                   u8 
    push           97         i64 
    jumpeq         #17863     i64 
    setargs                   2 0
    push           97         i64 
    push           mm_type.tx_allprocs.pcode u64 
    callproc       &mm_lib.insertunit 
    push           mm_decls.currproc u64 
    push           72         
    pushptroff                i32 1 0
    push           mm_type.tx_allprocs.pcode u64 
    push           48         
    popptroff                 i32 1 0
    push           1          i64 
    push           mm_type.tx_allprocs.pcode u64 
    push           59         
    popptroff                 u8 1 0
#17863: 
#17862: 
    push           mm_type.tx_allprocs.pp u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_allprocs.pp u64 
#17854: 
    push           mm_type.tx_allprocs.pp u64 
    jumptrue       #17855     u64 
#17864: 
#17865: 
    retproc                   
End


Proc mm_type.tpass:
    param          mm_type.tpass.p u64 
    param          mm_type.tpass.t i64 
    param          mm_type.tpass.lv i64 
    local          mm_type.tpass.d u64 
    local          mm_type.tpass.a u64 
    local          mm_type.tpass.b u64 
    local          mm_type.tpass.c u64 
    local          mm_type.tpass.oldmlineno i64 
    local          mm_type.tpass.m i64 
    local          mm_type.tpass.nparams i64 
    local          mm_type.tpass.paramtype i64 
    local          mm_type.tpass.restype i64 
    procentry                 
    push           mm_type.tpass.p u64 
    push           0          u64 
    jumpne         #17867     u64 
    jump           #17868     
#17867: 
    push           mm_tables.mlineno i64 
    pop            mm_type.tpass.oldmlineno i64 
    push           mm_type.tpass.p u64 
    push           4          
    pushptroff                u32 1 0
    pop            mm_tables.mlineno i64 
    push           mm_type.tpass.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    push           24         
    pushptroff                u64 1 0
    pop            mm_type.tpass.b u64 
    push           mm_type.tpass.t i64 
    push           0          i64 
    setne                     i64 
    push           mm_type.tpass.p u64 
    push           59         
    popptroff                 u8 1 0
    push           mm_type.tpass.p u64 
    pushptr                   u8 
    switch         #17869     1 142
    opnd           #17870     
#17869: 
    switchlabel    #17871     
    switchlabel    #17870     
    switchlabel    #17872     
    switchlabel    #17870     
    switchlabel    #17873     
    switchlabel    #17873     
    switchlabel    #17871     
    switchlabel    #17874     
    switchlabel    #17870     
    switchlabel    #17875     
    switchlabel    #17875     
    switchlabel    #17876     
    switchlabel    #17877     
    switchlabel    #17878     
    switchlabel    #17878     
    switchlabel    #17878     
    switchlabel    #17879     
    switchlabel    #17880     
    switchlabel    #17881     
    switchlabel    #17882     
    switchlabel    #17883     
    switchlabel    #17870     
    switchlabel    #17870     
    switchlabel    #17884     
    switchlabel    #17885     
    switchlabel    #17870     
    switchlabel    #17870     
    switchlabel    #17870     
    switchlabel    #17886     
    switchlabel    #17886     
    switchlabel    #17887     
    switchlabel    #17870     
    switchlabel    #17870     
    switchlabel    #17888     
    switchlabel    #17889     
    switchlabel    #17890     
    switchlabel    #17891     
    switchlabel    #17892     
    switchlabel    #17893     
    switchlabel    #17894     
    switchlabel    #17870     
    switchlabel    #17870     
    switchlabel    #17870     
    switchlabel    #17870     
    switchlabel    #17870     
    switchlabel    #17870     
    switchlabel    #17895     
    switchlabel    #17896     
    switchlabel    #17870     
    switchlabel    #17897     
    switchlabel    #17898     
    switchlabel    #17870     
    switchlabel    #17899     
    switchlabel    #17899     
    switchlabel    #17870     
    switchlabel    #17899     
    switchlabel    #17900     
    switchlabel    #17870     
    switchlabel    #17901     
    switchlabel    #17902     
    switchlabel    #17903     
    switchlabel    #17904     
    switchlabel    #17905     
    switchlabel    #17906     
    switchlabel    #17907     
    switchlabel    #17870     
    switchlabel    #17870     
    switchlabel    #17908     
    switchlabel    #17908     
    switchlabel    #17909     
    switchlabel    #17910     
    switchlabel    #17911     
    switchlabel    #17870     
    switchlabel    #17870     
    switchlabel    #17912     
    switchlabel    #17870     
    switchlabel    #17913     
    switchlabel    #17913     
    switchlabel    #17870     
    switchlabel    #17870     
    switchlabel    #17870     
    switchlabel    #17870     
    switchlabel    #17870     
    switchlabel    #17870     
    switchlabel    #17870     
    switchlabel    #17870     
    switchlabel    #17870     
    switchlabel    #17870     
    switchlabel    #17870     
    switchlabel    #17870     
    switchlabel    #17870     
    switchlabel    #17870     
    switchlabel    #17914     
    switchlabel    #17915     
    switchlabel    #17915     
    switchlabel    #17887     
    switchlabel    #17916     
    switchlabel    #17917     
    switchlabel    #17918     
    switchlabel    #17919     
    switchlabel    #17920     
    switchlabel    #17921     
    switchlabel    #17921     
    switchlabel    #17922     
    switchlabel    #17922     
    switchlabel    #17923     
    switchlabel    #17924     
    switchlabel    #17925     
    switchlabel    #17926     
    switchlabel    #17927     
    switchlabel    #17927     
    switchlabel    #17927     
    switchlabel    #17927     
    switchlabel    #17928     
    switchlabel    #17929     
    switchlabel    #17929     
    switchlabel    #17930     
    switchlabel    #17930     
    switchlabel    #17931     
    switchlabel    #17932     
    switchlabel    #17933     
    switchlabel    #17934     
    switchlabel    #17934     
    switchlabel    #17934     
    switchlabel    #17934     
    switchlabel    #17870     
    switchlabel    #17870     
    switchlabel    #17870     
    switchlabel    #17870     
    switchlabel    #17935     
    switchlabel    #17936     
    switchlabel    #17870     
    switchlabel    #17870     
    switchlabel    #17937     
    switchlabel    #17870     
    switchlabel    #17870     
    switchlabel    #17870     
    switchlabel    #17870     
    switchlabel    #17938     
    switchlabel    #17870     
    switchlabel    #17870     
    switchlabel    #17939     
    endswitch                 
#17872: 
    setargs                   3 0
    push           mm_type.tpass.lv i64 
    push           mm_type.tpass.t i64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_name 
    jump           #17940     
#17871: 
    jump           #17940     
#17907: 
    push           4          i64 
    push           mm_type.tpass.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #17940     
#17908: 
    setargs                   2 0
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_bytesize 
    jump           #17940     
#17890: 
    setargs                   3 0
    push           mm_type.tpass.b u64 
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_bin 
    jump           #17940     
#17891: 
    setargs                   2 0
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_unary 
    jump           #17940     
#17892: 
    setargs                   3 0
    push           mm_type.tpass.b u64 
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_binto 
    jump           #17940     
#17893: 
    setargs                   2 0
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_unaryto 
    jump           #17940     
#17886: 
    setargs                   4 0
    push           mm_type.tpass.t i64 
    push           mm_type.tpass.b u64 
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_assign 
    jump           #17940     
#17885: 
    jump           #17941     
#17942: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tpass.a u64 
    callproc       &mm_type.tpass 
    push           mm_type.tpass.a u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tpass.a u64 
#17941: 
    push           mm_type.tpass.a u64 
    jumptrue       #17942     u64 
#17943: 
    jump           #17940     
#17888: 
    setargs                   3 0
    push           mm_type.tpass.b u64 
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_cmp 
    jump           #17940     
#17901: 
    push           mm_type.tpass.a u64 
    pushptr                   u8 
    push           57         i64 
    jumpne         #17944     i64 
    setargs                   2 0
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_lib.deleteunit 
    setargs                   2 0
    push           mm_type.tpass.p u64 
    push           16         
    pushptroff                u64 1 0
    push           mm_type.tpass.p u64 
    callproc       &mm_lib.deleteunit 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tpass.t i64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tpass 
    jump           #17945     
#17944: 
    setargs                   3 0
    push           1          i64 
    push           26         i64 
    push           mm_type.tpass.a u64 
    callproc       &mm_type.tpass 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tpass.a u64 
    push           48         
    pushptroff                i32 1 0
    push           0          u64 
    callfn         &mm_lib.createrefmode i64 
    push           mm_type.tpass.p u64 
    push           48         
    popptroff                 i32 1 0
#17945: 
    jump           #17940     
#17902: 
    setargs                   3 0
    push           mm_type.tpass.t i64 
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_addroffirst 
    jump           #17940     
#17919: 
    setargs                   6 0
    push           mm_type.tpass.lv i64 
    push           mm_type.tpass.t i64 
    push           mm_type.tpass.p u64 
    push           32         
    pushptroff                u64 1 0
    push           mm_type.tpass.b u64 
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_if 
    jump           #17940     
#17920: 
    setargs                   5 0
    push           mm_type.tpass.lv i64 
    push           mm_type.tpass.t i64 
    push           mm_type.tpass.b u64 
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_longif 
    jump           #17940     
#17896: 
    setargs                   5 0
    push           mm_type.tpass.lv i64 
    push           mm_type.tpass.t i64 
    push           mm_type.tpass.b u64 
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_index 
    jump           #17940     
#17900: 
    setargs                   4 0
    push           mm_type.tpass.lv i64 
    push           mm_type.tpass.t i64 
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_ptr 
    jump           #17940     
#17887: 
    setargs                   4 0
    push           mm_type.tpass.t i64 
    push           mm_type.tpass.b u64 
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_callproc 
    jump           #17940     
#17898: 
    setargs                   4 0
    push           mm_type.tpass.lv i64 
    push           mm_type.tpass.b u64 
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_dot 
    jump           #17940     
#17878: 
    setargs                   3 0
    push           mm_type.tpass.b u64 
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_andl 
    jump           #17940     
#17879: 
    setargs                   2 0
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_notl 
    jump           #17940     
#17880: 
    setargs                   2 0
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_istruel 
    jump           #17940     
#17903: 
    setargs                   3 0
    push           1          i64 
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_convert 
    jump           #17940     
#17906: 
    setargs                   2 0
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_typepun 
    jump           #17940     
#17895: 
    setargs                   2 0
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_sliceptr 
    jump           #17940     
#17894: 
    setargs                   3 0
    push           mm_type.tpass.t i64 
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_incrto 
    jump           #17940     
#17882: 
    setargs                   3 0
    push           mm_type.tpass.b u64 
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_makerange 
    jump           #17940     
#17883: 
    setargs                   3 0
    push           mm_type.tpass.t i64 
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_makeset 
    jump           #17940     
#17931: 
    setargs                   3 0
    push           mm_type.tpass.b u64 
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_swap 
    jump           #17940     
#17932: 
    setargs                   6 0
    push           mm_type.tpass.lv i64 
    push           mm_type.tpass.t i64 
    push           mm_type.tpass.p u64 
    push           32         
    pushptroff                u64 1 0
    push           mm_type.tpass.b u64 
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_select 
    jump           #17940     
#17930: 
    setargs                   6 0
    push           mm_type.tpass.lv i64 
    push           mm_type.tpass.t i64 
    push           mm_type.tpass.p u64 
    push           32         
    pushptroff                u64 1 0
    push           mm_type.tpass.b u64 
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_switch 
    jump           #17940     
#17929: 
    setargs                   6 0
    push           mm_type.tpass.lv i64 
    push           mm_type.tpass.t i64 
    push           mm_type.tpass.p u64 
    push           32         
    pushptroff                u64 1 0
    push           mm_type.tpass.b u64 
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_case 
    jump           #17940     
#17884: 
    setargs                   3 0
    push           mm_type.tpass.t i64 
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_exprlist 
    jump           #17940     
#17899: 
    setargs                   4 0
    push           mm_type.tpass.lv i64 
    push           mm_type.tpass.b u64 
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_dotindex 
    jump           #17940     
#17897: 
    setargs                   3 0
    push           mm_type.tpass.b u64 
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_slice 
    jump           #17940     
#17873: 
    setargs                   4 0
    push           mm_type.tpass.lv i64 
    push           mm_type.tpass.t i64 
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_block 
    jump           #17940     
#17938: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tpass.a u64 
    callproc       &mm_type.tpass 
    jump           #17940     
#17928: 
    setargs                   3 0
    push           0          i64 
    push           0          i64 
    push           mm_type.tpass.a u64 
    callproc       &mm_type.tpass 
    jump           #17940     
#17916: 
    setargs                   3 0
    push           mm_type.tpass.t i64 
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_return 
    jump           #17940     
#17934: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tpass.a u64 
    callproc       &mm_type.tx_unitlist 
    setargs                   1 0
    push           mm_type.tpass.a u64 
    callproc       &mm_type.fixchararray 
    jump           #17946     
#17947: 
    push           mm_type.tpass.b u64 
    pushptr                   u8 
    push           93         i64 
    jumpne         #17948     i64 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tpass.b u64 
    push           16         
    pushptroff                u64 1 0
    store          mm_type.tpass.c u64 
    callproc       &mm_type.tpass 
    setargs                   3 0
    push           0          i64 
    push           10         i64 
    push           mm_type.tpass.b u64 
    push           24         
    pushptroff                u64 1 0
    callproc       &mm_type.tpass 
    jump           #17949     
#17948: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tpass.b u64 
    store          mm_type.tpass.c u64 
    callproc       &mm_type.tpass 
#17949: 
    setargs                   1 0
    push           mm_type.tpass.c u64 
    callproc       &mm_type.fixchararray 
    push           mm_type.tpass.b u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tpass.b u64 
#17946: 
    push           mm_type.tpass.b u64 
    jumptrue       #17947     u64 
#17950: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tpass.p u64 
    push           32         
    pushptroff                u64 1 0
    callproc       &mm_type.tx_unitlist 
    jump           #17940     
#17921: 
    setargs                   3 0
    push           mm_type.tpass.p u64 
    push           32         
    pushptroff                u64 1 0
    push           mm_type.tpass.b u64 
    push           mm_type.tpass.a u64 
    callproc       &mm_type.tx_for 
    jump           #17940     
#17922: 
    setargs                   3 0
    push           mm_type.tpass.p u64 
    push           32         
    pushptroff                u64 1 0
    push           mm_type.tpass.b u64 
    push           mm_type.tpass.a u64 
    callproc       &mm_type.tx_forall 
    jump           #17940     
#17918: 
    setargs                   3 0
    push           0          i64 
    push           4          i64 
    push           mm_type.tpass.a u64 
    callproc       &mm_type.tpass 
    setargs                   3 0
    push           0          i64 
    push           0          i64 
    push           mm_type.tpass.b u64 
    callproc       &mm_type.tpass 
    setargs                   3 0
    push           0          i64 
    push           4          i64 
    push           mm_type.tpass.p u64 
    push           32         
    pushptroff                u64 1 0
    callproc       &mm_type.tpass 
    jump           #17940     
#17905: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tpass.a u64 
    callproc       &mm_type.tpass 
    push           mm_type.tpass.t i64 
    push           26         i64 
    jumpne         #17951     i64 
    setargs                   2 0
    push           0          u64 
    push           "cast() needs type" u64 
    callproc       &mm_support.txerror 
#17951: 
    setargs                   3 0
    push           1          i64 
    push           mm_type.tpass.t i64 
    push           mm_type.tpass.a u64 
    callproc       &mm_type.coerceunit 
    setargs                   2 0
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_lib.deleteunit 
    jump           #17940     
#17881: 
    setargs                   4 0
    push           mm_type.tpass.lv i64 
    push           mm_type.tpass.t i64 
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_makelist 
    jump           #17940     
#17937: 
    setargs                   3 0
    push           0          i64 
    push           4          i64 
    push           mm_type.tpass.a u64 
    callproc       &mm_type.tpass 
    jump           #17940     
#17927: 
    setargs                   2 0
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_exit 
    jump           #17940     
#17925: 
    setargs                   2 0
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_goto 
    jump           #17940     
#17926: 
    jump           #17940     
#17923: 
    setargs                   1 0
    push           mm_type.tpass.a u64 
    callproc       &mm_type.tcond 
    setargs                   1 0
    push           mm_type.tpass.a u64 
    callfn         &mm_type.iscondtrue i64 
    jumpfalse      #17952     i64 
    push           114        i64 
    push           mm_type.tpass.p u64 
    push           0          
    popptroff                 u8 1 0
    push           mm_type.tpass.b u64 
    push           mm_type.tpass.p u64 
    push           16         
    popptroff                 u64 1 0
    push           0          i64 
    push           mm_type.tpass.p u64 
    push           2          
    popptroff                 u8 1 0
    jump           #17953     
#17952: 
    setargs                   1 0
    push           mm_type.tpass.a u64 
    callfn         &mm_type.iscondfalse i64 
    jumpfalse      #17954     i64 
    push           2          i64 
    push           mm_type.tpass.p u64 
    push           0          
    popptroff                 u8 1 0
    push           0          i64 
    push           mm_type.tpass.p u64 
    push           2          
    storeptroff               u8 1 0
    push           mm_type.tpass.p u64 
    push           1          
    popptroff                 u8 1 0
#17954: 
#17953: 
    setargs                   3 0
    push           0          i64 
    push           0          i64 
    push           mm_type.tpass.b u64 
    callproc       &mm_type.tpass 
    setargs                   3 0
    push           0          i64 
    push           0          i64 
    push           mm_type.tpass.p u64 
    push           32         
    pushptroff                u64 1 0
    callproc       &mm_type.tpass 
    jump           #17940     
#17924: 
    setargs                   3 0
    push           0          i64 
    push           0          i64 
    push           mm_type.tpass.a u64 
    callproc       &mm_type.tpass 
    setargs                   1 0
    push           mm_type.tpass.b u64 
    callproc       &mm_type.tcond 
    setargs                   1 0
    push           mm_type.tpass.b u64 
    callfn         &mm_type.iscondtrue i64 
    jumptrue       #17955     i64 
    setargs                   1 0
    push           mm_type.tpass.b u64 
    callfn         &mm_type.iscondfalse i64 
    jumpfalse      #17956     i64 
#17955: 
    setargs                   2 0
    push           0          u64 
    push           "repeat/const cond" u64 
    callproc       &mm_support.txerror 
#17956: 
    jump           #17940     
#17915: 
    jump           #17940     
#17874: 
    push           mm_type.tpass.t i64 
    push           0          i64 
    jumpeq         #17957     i64 
    push           mm_type.tpass.t i64 
    push           mm_type.tpass.p u64 
    push           48         
    popptroff                 i32 1 0
#17957: 
    push           1          i64 
    pop            mm_type.inassem i64 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tpass.a u64 
    callproc       &mm_type.tx_unitlist 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tpass.b u64 
    callproc       &mm_type.tx_unitlist 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tpass.p u64 
    push           32         
    pushptroff                u64 1 0
    callproc       &mm_type.tx_unitlist 
    push           0          i64 
    pop            mm_type.inassem i64 
    jump           #17940     
#17875: 
    jump           #17940     
#17876: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tpass.a u64 
    callproc       &mm_type.tpass 
    jump           #17940     
#17909: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tpass.a u64 
    callproc       &mm_type.tpass 
    push           mm_type.tpass.a u64 
    pushptr                   u8 
    push           65         i64 
    jumpne         #17958     i64 
    push           mm_type.tpass.a u64 
    push           16         
    pushptroff                i64 1 0
    push           mm_type.tpass.p u64 
    push           16         
    popptroff                 i64 1 0
    jump           #17959     
#17958: 
    push           mm_type.tpass.a u64 
    push           48         
    pushptroff                i32 1 0
    push           mm_type.tpass.p u64 
    push           16         
    popptroff                 i64 1 0
#17959: 
    push           65         i64 
    push           mm_type.tpass.p u64 
    push           0          
    popptroff                 u8 1 0
    push           4          i64 
    push           mm_type.tpass.p u64 
    push           48         
    popptroff                 i32 1 0
    push           0          i64 
    push           mm_type.tpass.p u64 
    push           1          
    popptroff                 u8 1 0
    jump           #17940     
#17910: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tpass.a u64 
    callproc       &mm_type.tpass 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "TYPESTR"  u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    setargs                   2 0
    push           1          i64 
    push           mm_type.tpass.a u64 
    push           48         
    pushptroff                i32 1 0
    callfn         &mm_lib.strmode u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           mm_type.tpass.a u64 
    pushptr                   u8 
    push           65         i64 
    jumpne         #17960     i64 
    push           mm_type.tpass.a u64 
    push           16         
    pushptroff                i64 1 0
    pop            mm_type.tpass.m i64 
    jump           #17961     
#17960: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tpass.a u64 
    callproc       &mm_type.tpass 
    push           mm_type.tpass.a u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.tpass.m i64 
#17961: 
    push           1          i64 
    push           mm_type.tpass.p u64 
    push           0          
    popptroff                 u8 1 0
    push           10         i64 
    push           mm_type.tpass.p u64 
    push           48         
    popptroff                 i32 1 0
    push           0          u64 
    push           mm_type.tpass.p u64 
    push           16         
    popptroff                 u64 1 0
    push           0          i64 
    push           mm_type.tpass.p u64 
    push           1          
    popptroff                 u8 1 0
    setargs                   1 0
    setargs                   2 0
    push           0          i64 
    push           mm_type.tpass.m i64 
    callfn         &mm_lib.strmode u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           mm_type.tpass.p u64 
    push           16         
    popptroff                 u64 1 0
    setargs                   1 0
    push           mm_type.tpass.p u64 
    push           16         
    pushptroff                u64 1 0
    callfn         &strlen    i64 
    push           mm_type.tpass.p u64 
    push           40         
    popptroff                 u32 1 0
    push           1          i64 
    push           mm_type.tpass.p u64 
    push           44         
    popptroff                 u8 1 0
    jump           #17940     
#17914: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tpass.a u64 
    callproc       &mm_type.tpass 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tpass.b u64 
    callproc       &mm_type.tpass 
    jump           #17940     
#17936: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tpass.a u64 
    callproc       &mm_type.tpass 
    jump           #17940     
#17935: 
    push           mm_type.tpass.a u64 
    jumpfalse      #17962     u64 
    setargs                   3 0
    push           0          i64 
    push           1          i64 
    push           mm_type.tpass.a u64 
    callproc       &mm_type.tpass 
#17962: 
    push           &mm_decls.ttisallnum 
    push           mm_type.tpass.t i64 
    pushptroff                u8 1 0
    jumpfalse      #17963     i64 
    setargs                   1 0
    push           mm_type.tpass.t i64 
    callfn         &mm_lib.gettypebase i64 
    pop            mm_type.tpass.t i64 
#17963: 
    push           mm_type.tpass.t i64 
    push           mm_type.tpass.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #17940     
#17933: 
    push           mm_type.tpass.a u64 
    jumpfalse      #17964     u64 
    setargs                   3 0
    push           0          i64 
    push           4          i64 
    push           mm_type.tpass.a u64 
    callproc       &mm_type.tpass 
    push           mm_type.tpass.a u64 
    pushptr                   u8 
    push           1          i64 
    jumpeq         #17965     i64 
    setargs                   2 0
    push           0          u64 
    push           "recase must be const" u64 
    callproc       &mm_support.txerror 
#17965: 
#17964: 
    jump           #17940     
#17912: 
    push           4          i64 
    push           mm_type.tpass.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #17940     
#17913: 
    push           10         i64 
    push           mm_type.tpass.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #17940     
#17911: 
    setargs                   3 0
    push           mm_type.tpass.lv i64 
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_bitfield 
    jump           #17940     
#17917: 
    push           0          i64 
    pop            mm_type.tpass.restype i64 
    push           0          i64 
    pop            mm_type.tpass.paramtype i64 
    push           mm_type.tpass.p u64 
    push           40         
    pushptroff                i16 1 0
    push           30         i64 
    casejumpeq     #17966     i64 0
    push           31         i64 
    casejumpeq     #17967     i64 0
    push           32         i64 
    casejumpeq     #17968     i64 0
    popstack                  i64 
    jump           #17969     
#17966: 
    push           4          i64 
    pop            mm_type.tpass.restype i64 
    jump           #17970     
#17967: 
    push           4          i64 
    pop            mm_type.tpass.paramtype i64 
    push           10         i64 
    pop            mm_type.tpass.restype i64 
    jump           #17970     
#17968: 
    push           4          i64 
    pop            mm_type.tpass.paramtype i64 
    push           9          i64 
    pop            mm_type.tpass.restype i64 
    jump           #17970     
#17969: 
#17970: 
    push           mm_type.tpass.paramtype i64 
    push           0          i64 
    jumpeq         #17971     i64 
    push           mm_type.tpass.a u64 
    push           0          u64 
    jumpne         #17972     u64 
    setargs                   2 0
    push           0          u64 
    push           "sys: arg missing" u64 
    callproc       &mm_support.txerror 
#17972: 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tpass.paramtype i64 
    push           mm_type.tpass.a u64 
    callproc       &mm_type.tpass 
    push           mm_type.tpass.a u64 
    push           8          
    pushptroff                u64 1 0
    jumpfalse      #17973     u64 
    setargs                   2 0
    push           0          u64 
    push           "sys: too many args" u64 
    callproc       &mm_support.txerror 
#17973: 
    jump           #17974     
#17971: 
    push           mm_type.tpass.a u64 
    jumpfalse      #17975     u64 
    setargs                   2 0
    push           0          u64 
    push           "sys: too many args" u64 
    callproc       &mm_support.txerror 
#17975: 
#17974: 
    push           mm_type.tpass.restype i64 
    push           mm_type.tpass.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #17940     
#17889: 
    setargs                   2 0
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_cmpchain 
    jump           #17940     
#17939: 
    setargs                   3 0
    push           1          i64 
    push           26         i64 
    push           mm_type.tpass.a u64 
    callproc       &mm_type.tpass 
    jump           #17940     
#17904: 
    jump           #17940     
#17877: 
    setargs                   2 0
    push           mm_type.tpass.a u64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tx_strinclude 
    jump           #17940     
#17870: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "TXUNIT: CAN'T DO:" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_tables.jtagnames 
    push           mm_type.tpass.p u64 
    pushptr                   u8 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
!doelse::
#17976: 
    push           mm_type.tpass.p u64 
    push           1          
    pushptroff                u8 1 0
    jumpfalse      #17977     i64 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tpass.t i64 
    push           mm_type.tpass.a u64 
    callproc       &mm_type.tx_unitlist 
#17977: 
    push           mm_type.tpass.p u64 
    push           2          
    pushptroff                u8 1 0
    jumpfalse      #17978     i64 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tpass.t i64 
    push           mm_type.tpass.b u64 
    callproc       &mm_type.tx_unitlist 
#17978: 
    push           mm_type.tpass.p u64 
    push           3          
    pushptroff                u8 1 0
    jumpfalse      #17979     i64 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tpass.t i64 
    push           mm_type.tpass.p u64 
    push           32         
    pushptroff                u64 1 0
    callproc       &mm_type.tx_unitlist 
#17979: 
#17940: 
    setargs                   1 0
    push           mm_type.tpass.p u64 
    callproc       &mm_type.tevaluate 
    push           mm_type.tpass.p u64 
    pushptr                   u8 
    push           19         i64 
    casejumpeq     #17980     i64 0
    push           97         i64 
    casejumpeq     #17980     i64 0
    popstack                  i64 
    jump           #17981     
#17980: 
    jump           #17982     
#17981: 
    push           mm_type.tpass.t i64 
    push           26         i64 
    jumpeq         #17983     i64 
    push           mm_type.tpass.t i64 
    push           0          i64 
    jumpeq         #17983     i64 
    push           mm_type.tpass.p u64 
    push           48         
    pushptroff                i32 1 0
    push           mm_type.tpass.t i64 
    jumpeq         #17983     i64 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tpass.t i64 
    push           mm_type.tpass.p u64 
    callproc       &mm_type.coerceunit 
#17983: 
#17982: 
    push           mm_type.tpass.t i64 
    push           0          i64 
    jumpne         #17984     i64 
    push           mm_type.tpass.p u64 
    pushptr                   u8 
    push           1          i64 
    casejumpeq     #17985     i64 0
    push           36         i64 
    casejumpeq     #17985     i64 0
    push           37         i64 
    casejumpeq     #17985     i64 0
    push           34         i64 
    casejumpeq     #17985     i64 0
    push           3          i64 
    casejumpeq     #17986     i64 0
    popstack                  i64 
    jump           #17987     
#17985: 
    setargs                   2 0
    push           0          u64 
    push           "Eval needed" u64 
    callproc       &mm_support.txerror 
    jump           #17988     
#17986: 
    push           &mm_decls.ttisref 
    push           mm_type.tpass.p u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    jumpfalse      #17989     i64 
    push           &mm_decls.tttarget 
    push           mm_type.tpass.p u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           28         i64 
    jumpeq         #17990     i64 
#17989: 
    setargs                   2 0
    push           0          u64 
    push           "Eval needed2" u64 
    callproc       &mm_support.txerror 
#17990: 
    jump           #17988     
#17987: 
#17988: 
#17984: 
    push           mm_type.tpass.oldmlineno i64 
    pop            mm_tables.mlineno i64 
#17868: 
    retproc                   
End


Proc mm_type.tx_block:
    param          mm_type.tx_block.p u64 
    param          mm_type.tx_block.a u64 
    param          mm_type.tx_block.t i64 
    param          mm_type.tx_block.lv i64 
    procentry                 
    jump           #17992     
#17993: 
    setargs                   3 0
    push           0          i64 
    push           0          i64 
    push           mm_type.tx_block.a u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_block.a u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_block.a u64 
#17992: 
    push           mm_type.tx_block.a u64 
    jumpfalse      #17994     u64 
    push           mm_type.tx_block.a u64 
    push           8          
    pushptroff                u64 1 0
    jumptrue       #17993     u64 
#17994: 
#17995: 
    push           mm_type.tx_block.a u64 
    jumpfalse      #17996     u64 
    setargs                   3 0
    push           mm_type.tx_block.lv i64 
    push           mm_type.tx_block.t i64 
    push           mm_type.tx_block.a u64 
    callproc       &mm_type.tx_unitlist 
    startmult                 
    push           mm_type.tx_block.t i64 
    push           0          i64 
    jumpeq         #17997     i64 
    push           mm_type.tx_block.a u64 
    push           48         
    pushptroff                i32 1 0
    resetmult                 
    jump           #17998     
#17997: 
    push           0          i64 
    endmult                   
#17998: 
    push           mm_type.tx_block.p u64 
    push           48         
    popptroff                 i32 1 0
#17996: 
#17999: 
    retproc                   
End


Proc mm_type.tx_typetable:
    local          mm_type.tx_typetable.d u64 
    local          mm_type.tx_typetable.i i64 
    procentry                 
#18001: 
    push           33         i64 
    pop            mm_type.tx_typetable.i i64 
    push           mm_decls.ntypes i64 
    push           33         i64 
    jumplt         #18002     i64 
#18003: 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_typetable.i i64 
    pushptroff                i32 4 0
    push           13         i64 
    jumpne         #18004     i64 
    setargs                   1 0
    push           &mm_decls.ttnamedef 
    push           mm_type.tx_typetable.i i64 
    pushptroff                u64 8 0
    store          mm_type.tx_typetable.d u64 
    callproc       &mm_type.tx_passdef 
#18004: 
    setargs                   1 0
    push           mm_type.tx_typetable.i i64 
    callproc       &mm_type.setmodesize 
#18005: 
    forup          #18003     i64 1
    opnd           mm_type.tx_typetable.i 
    opnd           mm_decls.ntypes 
#18002: 
#18006: 
    retproc                   
End


Proc mm_type.setmodesize:
    param          mm_type.setmodesize.m i64 
    local          mm_type.setmodesize.size i64 
    local          mm_type.setmodesize.target i64 
    procentry                 
    push           &mm_decls.ttsize 
    push           mm_type.setmodesize.m i64 
    pushptroff                i32 4 0
    jumpfalse      #18008     i64 
    jump           #18009     
#18008: 
    push           &mm_decls.ttlineno 
    push           mm_type.setmodesize.m i64 
    pushptroff                i32 4 0
    pop            mm_tables.mlineno i64 
    push           &mm_decls.ttbasetype 
    push           mm_type.setmodesize.m i64 
    pushptroff                i32 4 0
    push           11         i64 
    casejumpeq     #18010     i64 0
    push           13         i64 
    casejumpeq     #18011     i64 0
    push           0          i64 
    casejumpeq     #18012     i64 0
    push           27         i64 
    casejumpeq     #18012     i64 0
    push           12         i64 
    casejumpeq     #18013     i64 0
    push           25         i64 
    casejumpeq     #18014     i64 0
    push           26         i64 
    casejumpeq     #18015     i64 0
    push           32         i64 
    casejumpeq     #18016     i64 0
    push           24         i64 
    casejumpeq     #18017     i64 0
    push           31         i64 
    casejumpeq     #18018     i64 0
    popstack                  i64 
    jump           #18019     
#18010: 
    setargs                   1 0
    push           mm_type.setmodesize.m i64 
    callproc       &mm_type.setarraysize 
    jump           #18020     
#18011: 
    setargs                   1 0
    push           mm_type.setmodesize.m i64 
    callproc       &mm_type.setrecordsize 
    jump           #18020     
#18012: 
    jump           #18020     
#18013: 
    setargs                   1 0
    push           mm_type.setmodesize.m i64 
    callproc       &mm_type.setslicesize 
    jump           #18020     
#18014: 
    setargs                   2 0
    push           0          u64 
    push           "SETMODESIZE/AUTO?" u64 
    callproc       &mm_support.txerror 
    jump           #18020     
#18015: 
    jump           #18020     
#18016: 
    push           &mm_decls.tttarget 
    push           mm_type.setmodesize.m i64 
    pushptroff                i32 4 0
    pop            mm_type.setmodesize.target i64 
    setargs                   1 0
    push           mm_type.setmodesize.target i64 
    callproc       &mm_type.setmodesize 
    push           &mm_decls.ttbasetype 
    push           mm_type.setmodesize.target i64 
    pushptroff                i32 4 0
    push           &mm_decls.ttbasetype 
    push           mm_type.setmodesize.m i64 
    popptroff                 i32 4 0
    push           &mm_decls.ttsize 
    push           mm_type.setmodesize.target i64 
    pushptroff                i32 4 0
    push           &mm_decls.ttsize 
    push           mm_type.setmodesize.m i64 
    popptroff                 i32 4 0
    push           &mm_decls.ttlower 
    push           mm_type.setmodesize.target i64 
    pushptroff                i32 4 0
    push           &mm_decls.ttlower 
    push           mm_type.setmodesize.m i64 
    popptroff                 i32 4 0
    push           &mm_decls.ttlength 
    push           mm_type.setmodesize.target i64 
    pushptroff                i32 4 0
    push           &mm_decls.ttlength 
    push           mm_type.setmodesize.m i64 
    popptroff                 i32 4 0
    push           &mm_decls.ttnamedef 
    push           mm_type.setmodesize.target i64 
    pushptroff                u64 8 0
    push           &mm_decls.ttnamedef 
    push           mm_type.setmodesize.m i64 
    popptroff                 u64 8 0
    jump           #18020     
#18017: 
    push           8          i64 
    push           &mm_decls.ttsize 
    push           mm_type.setmodesize.m i64 
    popptroff                 i32 4 0
    jump           #18020     
#18018: 
    jump           #18020     
#18019: 
    push           &mm_decls.ttsize 
    push           &mm_decls.ttbasetype 
    push           mm_type.setmodesize.m i64 
    pushptroff                i32 4 0
    pushptroff                i32 4 0
    store          mm_type.setmodesize.size i64 
    jumpfalse      #18021     i64 
    push           mm_type.setmodesize.size i64 
    push           &mm_decls.ttsize 
    push           mm_type.setmodesize.m i64 
    popptroff                 i32 4 0
    jump           #18009     
#18021: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "SIZE 0:"  u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    setargs                   2 0
    push           1          i64 
    push           mm_type.setmodesize.m i64 
    callfn         &mm_lib.strmode u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "M="       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_type.setmodesize.m i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           "STDNAMES[TTBASETYPE[M]]=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_tables.stdnames 
    push           &mm_decls.ttbasetype 
    push           mm_type.setmodesize.m i64 
    pushptroff                i32 4 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Can't set mode size" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#18020: 
#18009: 
    retproc                   
End


Proc mm_type.setarraysize:
    param          mm_type.setarraysize.m i64 
    local          mm_type.setarraysize.lower i64 
    local          mm_type.setarraysize.length i64 
    local          mm_type.setarraysize.elemsize i64 
    local          mm_type.setarraysize.target i64 
    local          mm_type.setarraysize.size i64 
    local          mm_type.setarraysize.pdim u64 
    local          mm_type.setarraysize.a u64 
    local          mm_type.setarraysize.b u64 
    procentry                 
    push           &mm_decls.ttsizeset 
    push           mm_type.setarraysize.m i64 
    pushptroff                u8 1 0
    jumpfalse      #18023     i64 
    jump           #18024     
#18023: 
    push           &mm_decls.ttdimexpr 
    push           mm_type.setarraysize.m i64 
    pushptroff                u64 8 0
    pop            mm_type.setarraysize.pdim u64 
    push           mm_type.setarraysize.pdim u64 
    jumpfalse      #18025     u64 
    push           mm_type.setarraysize.pdim u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_type.setarraysize.a u64 
    push           mm_type.setarraysize.pdim u64 
    push           24         
    pushptroff                u64 1 0
    pop            mm_type.setarraysize.b u64 
    setargs                   2 0
    push           mm_type.setarraysize.pdim u64 
    push           &mm_decls.ttowner 
    push           mm_type.setarraysize.m i64 
    pushptroff                u64 8 0
    callproc       &mm_name.rx_unit 
    push           mm_type.setarraysize.pdim u64 
    pushptr                   u8 
    push           20         i64 
    casejumpeq     #18026     i64 0
    push           28         i64 
    casejumpeq     #18027     i64 0
    popstack                  i64 
    jump           #18028     
#18026: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.setarraysize.a u64 
    callproc       &mm_type.tpass 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.setarraysize.b u64 
    callproc       &mm_type.tpass 
    setargs                   2 0
    push           26         i64 
    push           mm_type.setarraysize.a u64 
    callfn         &mm_type.getconstint i64 
    pop            mm_type.setarraysize.lower i64 
    setargs                   2 0
    push           26         i64 
    push           mm_type.setarraysize.b u64 
    callfn         &mm_type.getconstint i64 
    push           mm_type.setarraysize.lower i64 
    sub                       i64 
    push           1          i64 
    add                       i64 
    pop            mm_type.setarraysize.length i64 
    jump           #18029     
#18027: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.setarraysize.a u64 
    callproc       &mm_type.tpass 
    setargs                   2 0
    push           26         i64 
    push           mm_type.setarraysize.a u64 
    callfn         &mm_type.getconstint i64 
    pop            mm_type.setarraysize.lower i64 
    push           mm_type.setarraysize.b u64 
    jumpfalse      #18030     u64 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.setarraysize.b u64 
    callproc       &mm_type.tpass 
    setargs                   2 0
    push           26         i64 
    push           mm_type.setarraysize.b u64 
    callfn         &mm_type.getconstint i64 
    pop            mm_type.setarraysize.length i64 
    jump           #18031     
#18030: 
    push           0          i64 
    pop            mm_type.setarraysize.length i64 
#18031: 
    jump           #18029     
#18028: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.setarraysize.pdim u64 
    callproc       &mm_type.tpass 
    setargs                   2 0
    push           26         i64 
    push           mm_type.setarraysize.pdim u64 
    callfn         &mm_type.getconstint i64 
    pop            mm_type.setarraysize.length i64 
    push           1          i64 
    pop            mm_type.setarraysize.lower i64 
#18029: 
    jump           #18032     
#18025: 
    push           1          i64 
    pop            mm_type.setarraysize.lower i64 
    push           0          i64 
    pop            mm_type.setarraysize.length i64 
#18032: 
    push           0          u64 
    push           &mm_decls.ttdimexpr 
    push           mm_type.setarraysize.m i64 
    popptroff                 u64 8 0
    push           mm_type.setarraysize.lower i64 
    push           &mm_decls.ttlower 
    push           mm_type.setarraysize.m i64 
    popptroff                 i32 4 0
    push           mm_type.setarraysize.length i64 
    push           &mm_decls.ttlength 
    push           mm_type.setarraysize.m i64 
    popptroff                 i32 4 0
    push           &mm_decls.tttarget 
    push           mm_type.setarraysize.m i64 
    pushptroff                i32 4 0
    pop            mm_type.setarraysize.target i64 
    setargs                   1 0
    push           mm_type.setarraysize.target i64 
    callproc       &mm_type.setmodesize 
    push           &mm_decls.ttsize 
    push           &mm_decls.tttarget 
    push           mm_type.setarraysize.m i64 
    pushptroff                i32 4 0
    pushptroff                i32 4 0
    pop            mm_type.setarraysize.elemsize i64 
    push           mm_type.setarraysize.length i64 
    push           mm_type.setarraysize.elemsize i64 
    mul                       i64 
    store          mm_type.setarraysize.size i64 
    push           &mm_decls.ttsize 
    push           mm_type.setarraysize.m i64 
    popptroff                 i32 4 0
    push           1          i64 
    push           &mm_decls.ttsizeset 
    push           mm_type.setarraysize.m i64 
    popptroff                 u8 1 0
#18024: 
    retproc                   
End


Proc mm_type.setslicesize:
    param          mm_type.setslicesize.m i64 
    local          mm_type.setslicesize.pdim u64 
    procentry                 
    push           &mm_decls.ttsize 
    push           mm_type.setslicesize.m i64 
    pushptroff                i32 4 0
    jumpfalse      #18034     i64 
    jump           #18035     
#18034: 
    push           &mm_decls.ttdimexpr 
    push           mm_type.setslicesize.m i64 
    pushptroff                u64 8 0
    pop            mm_type.setslicesize.pdim u64 
    push           mm_type.setslicesize.pdim u64 
    jumpfalse      #18036     u64 
    setargs                   2 0
    push           mm_type.setslicesize.pdim u64 
    push           &mm_decls.ttowner 
    push           mm_type.setslicesize.m i64 
    pushptroff                u64 8 0
    callproc       &mm_name.rx_unit 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.setslicesize.pdim u64 
    callproc       &mm_type.tpass 
    setargs                   2 0
    push           26         i64 
    push           mm_type.setslicesize.pdim u64 
    callfn         &mm_type.getconstint i64 
    push           &mm_decls.ttlower 
    push           mm_type.setslicesize.m i64 
    popptroff                 i32 4 0
    push           0          u64 
    push           &mm_decls.ttdimexpr 
    push           mm_type.setslicesize.m i64 
    popptroff                 u64 8 0
    jump           #18037     
#18036: 
    push           1          i64 
    push           &mm_decls.ttlower 
    push           mm_type.setslicesize.m i64 
    popptroff                 i32 4 0
#18037: 
    setargs                   1 0
    push           &mm_decls.tttarget 
    push           mm_type.setslicesize.m i64 
    pushptroff                i32 4 0
    callproc       &mm_type.setmodesize 
    push           &mm_decls.ttsize 
    push           12         i64 
    pushptroff                i32 4 0
    push           &mm_decls.ttsize 
    push           mm_type.setslicesize.m i64 
    popptroff                 i32 4 0
#18035: 
    retproc                   
End


Proc mm_type.tcond:
    param          mm_type.tcond.p u64 
    local          mm_type.tcond.a u64 
    local          mm_type.tcond.b u64 
    procentry                 
    push           mm_type.tcond.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_type.tcond.a u64 
    push           mm_type.tcond.p u64 
    push           24         
    pushptroff                u64 1 0
    pop            mm_type.tcond.b u64 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tcond.p u64 
    callproc       &mm_type.tpass 
#18039: 
    retproc                   
End


Proc mm_type.tx_module: i64
    param          mm_type.tx_module.n i64 
    local          mm_type.tx_module.m block:456 
    local          mm_type.tx_module.stmodule u64 
    local          mm_type.tx_module.d u64 
    local          mm_type.tx_module.globalflag i64 
    local          mm_type.tx_module.status i64 
    procentry                 
    push           mm_type.tx_module.n i64 
    pop            mm_decls.currmoduleno i64 
    setargs                   1 0
    push           &mm_decls.moduletable 
    push           mm_type.tx_module.n i64 
    addrefoff                 block:456 456 0
    push           8          
    pushptroff                u64 1 0
    callproc       &mm_type.tx_passdef 
    push           1          i64 
    setret                    i64 
    jump           #18041     
#18041: 
    retfn                     i64 
End


Proc mm_type.tx_passdef:
    param          mm_type.tx_passdef.p u64 
    local          mm_type.tx_passdef.d u64 
    local          mm_type.tx_passdef.oldmlineno i64 
    local          mm_type.tx_passdef.q u64 
    procentry                 
    push           mm_type.tx_passdef.p u64 
    push           92         
    pushptroff                u16 1 0
    push           4          i64 
    dotindex                  i64 
    jumpfalse      #18043     u64 
    jump           #18044     
#18043: 
    push           mm_tables.mlineno i64 
    pop            mm_type.tx_passdef.oldmlineno i64 
    push           mm_type.tx_passdef.p u64 
    push           88         
    pushptroff                u32 1 0
    pop            mm_tables.mlineno i64 
    push           mm_type.tx_passdef.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_type.tx_passdef.d u64 
    jump           #18045     
#18046: 
    setargs                   1 0
    push           mm_type.tx_passdef.d u64 
    callproc       &mm_type.tx_passdef 
    push           mm_type.tx_passdef.d u64 
    push           32         
    pushptroff                u64 1 0
    pop            mm_type.tx_passdef.d u64 
#18045: 
    push           mm_type.tx_passdef.d u64 
    jumptrue       #18046     u64 
#18047: 
    push           mm_type.tx_passdef.p u64 
    push           64         
    pushptroff                u64 1 0
    pop            mm_type.tx_passdef.q u64 
    push           mm_type.tx_passdef.p u64 
    push           78         
    pushptroff                u8 1 0
    push           5          i64 
    casejumpeq     #18048     i64 0
    push           10         i64 
    casejumpeq     #18049     i64 0
    push           16         i64 
    casejumpeq     #18049     i64 0
    push           11         i64 
    casejumpeq     #18050     i64 0
    push           12         i64 
    casejumpeq     #18050     i64 0
    push           13         i64 
    casejumpeq     #18050     i64 0
    popstack                  i64 
    jump           #18051     
#18048: 
    push           0          u64 
    pop            mm_decls.currproc u64 
    jump           #18052     
#18049: 
    setargs                   1 0
    push           mm_type.tx_passdef.p u64 
    callproc       &mm_type.tx_namedconst 
    jump           #18052     
#18050: 
    setargs                   1 0
    push           mm_type.tx_passdef.p u64 
    callproc       &mm_type.tx_namedef 
    jump           #18052     
#18051: 
#18052: 
    push           1          u64 
    push           mm_type.tx_passdef.p u64 
    push           92         
    addrefoff                 u64 1 0
    push           4          i64 
    popdotindex               u16 
    push           mm_type.tx_passdef.oldmlineno i64 
    pop            mm_tables.mlineno i64 
#18044: 
    retproc                   
End


Proc mm_type.tx_unitlist:
    param          mm_type.tx_unitlist.p u64 
    param          mm_type.tx_unitlist.t i64 
    param          mm_type.tx_unitlist.lv i64 
    procentry                 
    jump           #18054     
#18055: 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_unitlist.t i64 
    push           mm_type.tx_unitlist.p u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_unitlist.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_unitlist.p u64 
#18054: 
    push           mm_type.tx_unitlist.p u64 
    jumptrue       #18055     u64 
#18056: 
#18057: 
    retproc                   
End


Proc mm_type.tx_namedef:
    param          mm_type.tx_namedef.d u64 
    local          mm_type.tx_namedef.m i64 
    local          mm_type.tx_namedef.mold i64 
    local          mm_type.tx_namedef.dcode u64 
    local          mm_type.tx_namedef.pequiv u64 
    procentry                 
    push           mm_type.tx_namedef.d u64 
    push           72         
    pushptroff                i32 1 0
    pop            mm_type.tx_namedef.m i64 
    setargs                   1 0
    push           mm_type.tx_namedef.m i64 
    callproc       &mm_type.setmodesize 
    push           mm_type.tx_namedef.d u64 
    push           92         
    pushptroff                u16 1 0
    push           5          i64 
    dotindex                  i64 
    jumpfalse      #18059     u64 
    setargs                   2 0
    push           0          u64 
    push           "Circular reference detected" u64 
    callproc       &mm_support.txerror 
#18059: 
    push           mm_type.tx_namedef.d u64 
    push           92         
    pushptroff                u16 1 0
    push           4          i64 
    dotindex                  i64 
    jumpfalse      #18060     u64 
    jump           #18061     
#18060: 
    push           mm_type.tx_namedef.d u64 
    push           64         
    pushptroff                u64 1 0
    pop            mm_type.tx_namedef.dcode u64 
    push           1          u64 
    push           mm_type.tx_namedef.d u64 
    push           92         
    addrefoff                 u64 1 0
    push           5          i64 
    popdotindex               u16 
    push           mm_type.tx_namedef.d u64 
    push           92         
    pushptroff                u16 1 0
    push           13         i64 
    dotindex                  i64 
    jumpfalse      #18062     u64 
    push           mm_type.tx_namedef.d u64 
    push           96         
    pushptroff                u64 1 0
    pop            mm_type.tx_namedef.pequiv u64 
    push           mm_type.tx_namedef.pequiv u64 
    pushptr                   u8 
    push           59         i64 
    jumpne         #18063     i64 
    setargs                   2 0
    push           mm_type.tx_namedef.pequiv u64 
    push           16         
    pushptroff                u64 1 0
    push           mm_type.tx_namedef.pequiv u64 
    callproc       &mm_lib.deleteunit 
#18063: 
    push           mm_type.tx_namedef.pequiv u64 
    pushptr                   u8 
    push           3          i64 
    jumpeq         #18064     i64 
    setargs                   2 0
    push           0          u64 
    push           "@name needed" u64 
    callproc       &mm_support.txerror 
#18064: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_namedef.pequiv u64 
    callproc       &mm_type.tpass 
#18062: 
    push           mm_type.tx_namedef.dcode u64 
    jumpfalse      #18065     u64 
    push           mm_type.tx_namedef.d u64 
    push           78         
    pushptroff                u8 1 0
    push           12         i64 
    jumpeq         #18065     i64 
    push           mm_type.tx_namedef.m i64 
    pop            mm_type.tx_namedef.mold i64 
    setargs                   1 0
    push           mm_type.tx_namedef.m i64 
    callfn         &mm_lib.gettypebase i64 
    pop            mm_type.tx_namedef.m i64 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_namedef.m i64 
    pushptroff                i32 4 0
    push           12         i64 
    jumpne         #18066     i64 
    push           mm_type.tx_namedef.dcode u64 
    pushptr                   u8 
    push           1          i64 
    jumpne         #18066     i64 
    push           mm_type.tx_namedef.dcode u64 
    push           48         
    pushptroff                i32 1 0
    push           10         i64 
    jumpne         #18066     i64 
    setargs                   3 0
    push           0          i64 
    push           10         i64 
    push           mm_type.tx_namedef.dcode u64 
    callproc       &mm_type.tpass 
    jump           #18067     
#18066: 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_namedef.m i64 
    push           mm_type.tx_namedef.dcode u64 
    callproc       &mm_type.tpass 
#18067: 
    push           0          u64 
    push           mm_type.tx_namedef.d u64 
    push           92         
    addrefoff                 u64 1 0
    push           5          i64 
    popdotindex               u16 
    push           1          u64 
    push           mm_type.tx_namedef.d u64 
    push           92         
    addrefoff                 u64 1 0
    push           4          i64 
    popdotindex               u16 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_namedef.m i64 
    pushptroff                i32 4 0
    push           11         i64 
    jumpne         #18068     i64 
    push           &mm_decls.ttlength 
    push           mm_type.tx_namedef.m i64 
    pushptroff                i32 4 0
    push           0          i64 
    jumpne         #18068     i64 
    push           mm_type.tx_namedef.dcode u64 
    push           48         
    pushptroff                i32 1 0
    push           mm_type.tx_namedef.d u64 
    push           72         
    popptroff                 i32 1 0
#18068: 
    push           mm_type.tx_namedef.mold i64 
    push           mm_type.tx_namedef.m i64 
    jumpeq         #18069     i64 
    push           &mm_decls.ttisinteger 
    push           mm_type.tx_namedef.m i64 
    pushptroff                u8 1 0
    jumpfalse      #18070     i64 
    push           &mm_decls.ttisshort 
    push           mm_type.tx_namedef.mold i64 
    pushptroff                u8 1 0
    jumpfalse      #18070     i64 
    setargs                   2 0
    push           62         i64 
    push           mm_type.tx_namedef.d u64 
    push           64         
    pushptroff                u64 1 0
    callproc       &mm_lib.insertunit 
    push           mm_type.tx_namedef.mold i64 
    push           mm_type.tx_namedef.d u64 
    push           64         
    pushptroff                u64 1 0
    push           48         
    popptroff                 i32 1 0
    jump           #18071     
#18070: 
    push           mm_type.tx_namedef.mold i64 
    push           6          i64 
    jumpne         #18072     i64 
    push           mm_type.tx_namedef.mold i64 
    push           mm_type.tx_namedef.d u64 
    push           64         
    pushptroff                u64 1 0
    push           48         
    popptroff                 i32 1 0
#18072: 
#18071: 
#18069: 
    push           mm_type.tx_namedef.d u64 
    push           78         
    pushptroff                u8 1 0
    push           11         i64 
    jumpne         #18073     i64 
    setargs                   1 0
    push           mm_type.tx_namedef.d u64 
    push           64         
    pushptroff                u64 1 0
    callproc       &mm_type.checkconstexpr 
#18073: 
    jump           #18074     
#18065: 
    push           mm_type.tx_namedef.dcode u64 
    jumpfalse      #18075     u64 
    push           mm_type.tx_namedef.d u64 
    push           78         
    pushptroff                u8 1 0
    push           12         i64 
    jumpne         #18075     i64 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_namedef.m i64 
    pushptroff                i32 4 0
    push           11         i64 
    jumpne         #18075     i64 
    push           &mm_decls.ttlength 
    push           mm_type.tx_namedef.m i64 
    pushptroff                i32 4 0
    push           0          i64 
    jumpne         #18075     i64 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_namedef.m i64 
    push           mm_type.tx_namedef.dcode u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_namedef.dcode u64 
    push           48         
    pushptroff                i32 1 0
    push           mm_type.tx_namedef.d u64 
    push           72         
    popptroff                 i32 1 0
    push           0          u64 
    push           mm_type.tx_namedef.d u64 
    push           92         
    addrefoff                 u64 1 0
    push           5          i64 
    popdotindex               u16 
    push           1          u64 
    push           mm_type.tx_namedef.d u64 
    push           92         
    addrefoff                 u64 1 0
    push           4          i64 
    popdotindex               u16 
    jump           #18074     
#18075: 
    push           0          u64 
    push           mm_type.tx_namedef.d u64 
    push           92         
    addrefoff                 u64 1 0
    push           5          i64 
    popdotindex               u16 
    push           1          u64 
    push           mm_type.tx_namedef.d u64 
    push           92         
    addrefoff                 u64 1 0
    push           4          i64 
    popdotindex               u16 
#18074: 
#18061: 
    retproc                   
End


Proc mm_type.tx_namedconst:
    param          mm_type.tx_namedconst.d u64 
    local          mm_type.tx_namedconst.m i64 
    local          mm_type.tx_namedconst.q u64 
    procentry                 
    push           mm_type.tx_namedconst.d u64 
    push           92         
    pushptroff                u16 1 0
    push           5          i64 
    dotindex                  i64 
    jumpfalse      #18077     u64 
    setargs                   2 0
    push           0          u64 
    push           "Circular const reference detected" u64 
    callproc       &mm_support.txerror 
#18077: 
    push           mm_type.tx_namedconst.d u64 
    push           92         
    pushptroff                u16 1 0
    push           4          i64 
    dotindex                  i64 
    jumpfalse      #18078     u64 
    jump           #18079     
#18078: 
    push           mm_type.tx_namedconst.d u64 
    push           64         
    pushptroff                u64 1 0
    pop            mm_type.tx_namedconst.q u64 
    push           mm_type.tx_namedconst.d u64 
    push           72         
    pushptroff                i32 1 0
    pop            mm_type.tx_namedconst.m i64 
    push           1          u64 
    push           mm_type.tx_namedconst.d u64 
    push           92         
    addrefoff                 u64 1 0
    push           5          i64 
    popdotindex               u16 
    setargs                   2 0
    startmult                 
    push           mm_type.tx_namedconst.m i64 
    push           25         i64 
    jumpne         #18080     i64 
    push           26         i64 
    resetmult                 
    jump           #18081     
#18080: 
    push           mm_type.tx_namedconst.m i64 
    endmult                   
#18081: 
    push           mm_type.tx_namedconst.q u64 
    callproc       &mm_type.tx_expr 
    push           0          u64 
    push           mm_type.tx_namedconst.d u64 
    push           92         
    addrefoff                 u64 1 0
    push           5          i64 
    popdotindex               u16 
    setargs                   1 0
    push           mm_type.tx_namedconst.q u64 
    callproc       &mm_type.checkconstexpr 
    push           mm_type.tx_namedconst.m i64 
    push           25         i64 
    jumpne         #18082     i64 
    push           mm_type.tx_namedconst.q u64 
    push           48         
    pushptroff                i32 1 0
    push           mm_type.tx_namedconst.d u64 
    push           72         
    popptroff                 i32 1 0
#18082: 
    push           1          u64 
    push           mm_type.tx_namedconst.d u64 
    push           92         
    addrefoff                 u64 1 0
    push           4          i64 
    popdotindex               u16 
#18079: 
    retproc                   
End


Proc mm_type.tx_expr:
    param          mm_type.tx_expr.p u64 
    param          mm_type.tx_expr.t i64 
    procentry                 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_expr.t i64 
    push           mm_type.tx_expr.p u64 
    callproc       &mm_type.tpass 
#18084: 
    retproc                   
End


Proc mm_type.checkconstexpr:
    param          mm_type.checkconstexpr.p u64 
    local          mm_type.checkconstexpr.q u64 
    local          mm_type.checkconstexpr.pmode i64 
    procentry                 
    push           mm_type.checkconstexpr.p u64 
    pushptr                   u8 
    push           1          i64 
    casejumpeq     #18086     i64 0
    push           19         i64 
    casejumpeq     #18087     i64 0
    push           61         i64 
    casejumpeq     #18088     i64 0
    push           62         i64 
    casejumpeq     #18089     i64 0
    push           59         i64 
    casejumpeq     #18090     i64 0
    push           60         i64 
    casejumpeq     #18090     i64 0
    push           3          i64 
    casejumpeq     #18091     i64 0
    popstack                  i64 
    jump           #18092     
#18086: 
    jump           #18093     
    jump           #18094     
#18087: 
    push           mm_type.checkconstexpr.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_type.checkconstexpr.q u64 
    jump           #18095     
#18096: 
    setargs                   1 0
    push           mm_type.checkconstexpr.q u64 
    callproc       &mm_type.checkconstexpr 
    push           mm_type.checkconstexpr.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.checkconstexpr.q u64 
#18095: 
    push           mm_type.checkconstexpr.q u64 
    jumptrue       #18096     u64 
#18097: 
    jump           #18094     
#18088: 
    push           &mm_decls.ttbasetype 
    push           mm_type.checkconstexpr.p u64 
    push           16         
    pushptroff                u64 1 0
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           9          i64 
    jumpne         #18098     i64 
    push           &mm_decls.tttarget 
    push           mm_type.checkconstexpr.p u64 
    push           16         
    pushptroff                u64 1 0
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           0          i64 
    jumpne         #18099     i64 
    push           mm_type.checkconstexpr.p u64 
    push           48         
    pushptroff                i32 1 0
    push           mm_type.checkconstexpr.p u64 
    push           16         
    pushptroff                u64 1 0
    push           48         
    popptroff                 i32 1 0
    setargs                   2 0
    push           mm_type.checkconstexpr.p u64 
    push           16         
    pushptroff                u64 1 0
    push           mm_type.checkconstexpr.p u64 
    callproc       &mm_lib.deleteunit 
    jump           #18100     
#18099: 
    jump           #18101     
#18100: 
#18098: 
    jump           #18101     
    jump           #18094     
#18089: 
    setargs                   1 0
    push           mm_type.checkconstexpr.p u64 
    push           16         
    pushptroff                u64 1 0
    callproc       &mm_type.checkconstexpr 
    jump           #18094     
#18090: 
    push           mm_type.checkconstexpr.p u64 
    push           16         
    pushptroff                u64 1 0
    pushptr                   u8 
    push           3          i64 
    casejumpeq     #18102     i64 0
    popstack                  i64 
    jump           #18103     
#18102: 
    jump           #18104     
#18103: 
    jump           #18101     
#18104: 
    jump           #18094     
#18091: 
    push           mm_type.checkconstexpr.p u64 
    push           16         
    pushptroff                u64 1 0
    push           78         
    pushptroff                u8 1 0
    push           14         i64 
    jumpne         #18105     i64 
    jump           #18093     
#18105: 
    jump           #18101     
    jump           #18094     
#18092: 
!error::
#18101: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &mm_tables.jtagnames 
    push           mm_type.checkconstexpr.p u64 
    pushptr                   u8 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    setargs                   2 0
    push           1          i64 
    push           mm_type.checkconstexpr.p u64 
    push           48         
    pushptroff                i32 1 0
    callfn         &mm_lib.strmode u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   4 0
    push           0          u64 
    push           "*"        u64 
    push           0          i64 
    push           mm_type.checkconstexpr.p u64 
    callproc       &mm_diags.printunit 
    setargs                   2 0
    push           0          u64 
    push           "Getconstexpr: not const" u64 
    callproc       &mm_support.txerror 
#18094: 
#18093: 
    retproc                   
End


Proc mm_type.getconstint: i64
    param          mm_type.getconstint.q u64 
    param          mm_type.getconstint.t i64 
    procentry                 
    setargs                   1 0
    push           mm_type.getconstint.q u64 
    callproc       &mm_type.checkconstexpr 
    push           &mm_decls.ttisinteger 
    push           mm_type.getconstint.q u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    jumpfalse      #18107     i64 
    push           &mm_decls.ttsize 
    push           mm_type.getconstint.q u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           16         i64 
    jumpne         #18108     i64 
    setargs                   2 0
    push           0          u64 
    push           "GETCONSTINT/128" u64 
    callproc       &mm_support.gerror 
#18108: 
    push           mm_type.getconstint.q u64 
    push           16         
    pushptroff                i64 1 0
    setret                    i64 
    jump           #18109     
    jump           #18110     
#18107: 
    push           &mm_decls.ttisreal 
    push           mm_type.getconstint.q u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    jumpfalse      #18111     i64 
    push           mm_type.getconstint.q u64 
    push           16         
    pushptroff                r64 1 0
    fix                       i64 r64 
    setret                    i64 
    jump           #18109     
    jump           #18110     
#18111: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    setargs                   2 0
    push           1          i64 
    push           mm_type.getconstint.q u64 
    push           48         
    pushptroff                i32 1 0
    callfn         &mm_lib.strmode u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           0          u64 
    push           "Getconstint: not int32/64" u64 
    callproc       &mm_support.txerror 
#18110: 
    push           0          i64 
    setret                    i64 
    jump           #18109     
#18109: 
    retfn                     i64 
End


Proc mm_type.makenewconst:
    param          mm_type.makenewconst.p u64 
    param          mm_type.makenewconst.x i64 
    param          mm_type.makenewconst.t i64 
    procentry                 
    push           1          i64 
    push           mm_type.makenewconst.p u64 
    push           0          
    popptroff                 u8 1 0
    push           0          u64 
    push           mm_type.makenewconst.p u64 
    push           24         
    storeptroff               u64 1 0
    push           mm_type.makenewconst.p u64 
    push           16         
    popptroff                 u64 1 0
    push           0          i64 
    push           mm_type.makenewconst.p u64 
    push           2          
    storeptroff               u8 1 0
    push           mm_type.makenewconst.p u64 
    push           1          
    popptroff                 u8 1 0
    push           mm_type.makenewconst.x i64 
    push           mm_type.makenewconst.p u64 
    push           16         
    popptroff                 i64 1 0
    push           1          i64 
    push           mm_type.makenewconst.p u64 
    push           58         
    popptroff                 u8 1 0
    push           mm_type.makenewconst.t i64 
    push           0          i64 
    jumpeq         #18113     i64 
    push           mm_type.makenewconst.t i64 
    push           mm_type.makenewconst.p u64 
    push           48         
    popptroff                 i32 1 0
#18113: 
#18114: 
    retproc                   
End


Proc mm_type.tx_name:
    param          mm_type.tx_name.p u64 
    param          mm_type.tx_name.t i64 
    param          mm_type.tx_name.lv i64 
    local          mm_type.tx_name.d u64 
    local          mm_type.tx_name.oldmlineno i64 
    local          mm_type.tx_name.pcode u64 
    procentry                 
    push           mm_tables.mlineno i64 
    pop            mm_type.tx_name.oldmlineno i64 
    push           mm_type.tx_name.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_type.tx_name.d u64 
    push           mm_type.tx_name.d u64 
    push           88         
    pushptroff                u32 1 0
    pop            mm_tables.mlineno i64 
    push           mm_type.tx_name.d u64 
    push           78         
    pushptroff                u8 1 0
    switch         #18116     2 18
    opnd           #18117     
#18116: 
    switchlabel    #18118     
    switchlabel    #18117     
    switchlabel    #18119     
    switchlabel    #18120     
    switchlabel    #18120     
    switchlabel    #18121     
    switchlabel    #18117     
    switchlabel    #18117     
    switchlabel    #18122     
    switchlabel    #18123     
    switchlabel    #18123     
    switchlabel    #18123     
    switchlabel    #18124     
    switchlabel    #18117     
    switchlabel    #18122     
    switchlabel    #18125     
    switchlabel    #18125     
    endswitch                 
#18122: 
    push           mm_type.tx_name.lv i64 
    jumpfalse      #18126     i64 
    setargs                   2 0
    push           0          u64 
    push           "&const"   u64 
    callproc       &mm_support.txerror 
#18126: 
    setargs                   1 0
    push           mm_type.tx_name.d u64 
    callproc       &mm_type.tx_namedconst 
    push           mm_type.tx_name.d u64 
    push           64         
    pushptroff                u64 1 0
    pop            mm_type.tx_name.pcode u64 
    push           1          i64 
    push           mm_type.tx_name.p u64 
    push           0          
    popptroff                 u8 1 0
    push           0          u64 
    push           mm_type.tx_name.p u64 
    push           16         
    popptroff                 u64 1 0
    push           0          u64 
    push           mm_type.tx_name.p u64 
    push           16         
    popptroff                 u64 1 0
    push           0          u64 
    push           mm_type.tx_name.p u64 
    push           32         
    popptroff                 u64 1 0
    push           0          i64 
    push           mm_type.tx_name.p u64 
    push           3          
    storeptroff               u8 1 0
    push           mm_type.tx_name.p u64 
    push           1          
    popptroff                 u8 1 0
    push           mm_type.tx_name.pcode u64 
    pushptr                   u8 
    push           61         i64 
    jumpne         #18127     i64 
    push           mm_type.tx_name.pcode u64 
    push           16         
    pushptroff                u64 1 0
    push           16         
    pushptroff                i64 1 0
    push           mm_type.tx_name.p u64 
    push           16         
    popptroff                 i64 1 0
    jump           #18128     
#18127: 
    push           mm_type.tx_name.pcode u64 
    push           16         
    pushptroff                i64 1 0
    push           mm_type.tx_name.p u64 
    push           16         
    popptroff                 i64 1 0
#18128: 
    push           mm_type.tx_name.pcode u64 
    push           40         
    pushptroff                u32 1 0
    push           mm_type.tx_name.p u64 
    push           40         
    popptroff                 u32 1 0
    push           mm_type.tx_name.d u64 
    push           72         
    pushptroff                i32 1 0
    push           mm_type.tx_name.p u64 
    push           48         
    popptroff                 i32 1 0
    push           1          i64 
    push           mm_type.tx_name.p u64 
    push           58         
    popptroff                 u8 1 0
    push           mm_type.tx_name.pcode u64 
    push           44         
    pushptroff                u8 1 0
    push           mm_type.tx_name.p u64 
    push           44         
    popptroff                 u8 1 0
    jump           #18129     
#18123: 
    push           mm_type.tx_name.d u64 
    push           92         
    pushptroff                u16 1 0
    push           6          i64 
    dotindex                  i64 
    jumpfalse      #18130     u64 
    push           mm_type.tx_name.lv i64 
    jumpfalse      #18130     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mm_type.tx_name.d u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "LV="      u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_type.tx_name.lv i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   2 0
    push           0          i64 
    push           mm_type.tx_name.d u64 
    push           92         
    pushptroff                u16 1 0
    push           6          i64 
    dotindex                  i64 
    callproc       &msysp.m$print_u64 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           0          u64 
    push           "Can't use 'let' as lvalue" u64 
    callproc       &mm_support.txerror 
#18130: 
    setargs                   1 0
    push           mm_type.tx_name.d u64 
    callproc       &mm_type.tx_namedef 
    push           mm_type.inassem i64 
    jumptrue       #18131     i64 
    push           mm_type.tx_name.d u64 
    push           72         
    pushptroff                i32 1 0
    push           mm_type.tx_name.p u64 
    push           48         
    popptroff                 i32 1 0
    setargs                   2 0
    push           mm_type.tx_name.lv i64 
    push           mm_type.tx_name.p u64 
    callproc       &mm_type.twiden 
    jump           #18132     
#18131: 
    push           10         i64 
    push           mm_type.tx_name.p u64 
    push           48         
    popptroff                 i32 1 0
#18132: 
    jump           #18129     
#18120: 
    push           mm_tables.trefproc i64 
    push           mm_type.tx_name.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #18129     
#18125: 
    push           mm_tables.treflabel i64 
    push           mm_type.tx_name.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #18129     
#18118: 
    setargs                   3 0
    push           0          u64 
    push           mm_type.tx_name.d u64 
    pushptr                   u64 
    push           "Module name can't be used on it's own: #" u64 
    callproc       &mm_support.txerror_s 
    jump           #18129     
#18124: 
    push           1          i64 
    push           mm_type.tx_name.p u64 
    push           0          
    popptroff                 u8 1 0
    push           0          u64 
    push           mm_type.tx_name.p u64 
    push           16         
    popptroff                 u64 1 0
    push           0          u64 
    push           mm_type.tx_name.p u64 
    push           16         
    popptroff                 u64 1 0
    push           0          u64 
    push           mm_type.tx_name.p u64 
    push           32         
    popptroff                 u64 1 0
    push           0          i64 
    push           mm_type.tx_name.p u64 
    push           3          
    storeptroff               u8 1 0
    push           mm_type.tx_name.p u64 
    push           1          
    popptroff                 u8 1 0
    push           mm_type.tx_name.d u64 
    push           84         
    pushptroff                i32 1 0
    push           mm_type.tx_name.p u64 
    push           16         
    popptroff                 i64 1 0
    push           4          i64 
    push           mm_type.tx_name.p u64 
    push           48         
    popptroff                 i32 1 0
    push           1          i64 
    push           mm_type.tx_name.p u64 
    push           58         
    popptroff                 u8 1 0
    jump           #18129     
#18119: 
    push           65         i64 
    push           mm_type.tx_name.p u64 
    push           0          
    popptroff                 u8 1 0
    push           mm_type.tx_name.d u64 
    push           72         
    pushptroff                i32 1 0
    push           mm_type.tx_name.p u64 
    push           16         
    popptroff                 i64 1 0
    push           4          i64 
    push           mm_type.tx_name.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #18129     
#18121: 
    push           mm_type.tx_name.d u64 
    push           64         
    pushptroff                u64 1 0
    jumpfalse      #18133     u64 
    setargs                   2 0
    push           0          u64 
    push           "Can't init dllvar" u64 
    callproc       &mm_support.txerror 
#18133: 
    push           mm_type.tx_name.d u64 
    push           72         
    pushptroff                i32 1 0
    push           mm_type.tx_name.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #18129     
#18117: 
    push           mm_type.tx_name.p u64 
    push           4          
    pushptroff                u32 1 0
    pop            mm_tables.mlineno i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &mm_tables.namenames 
    push           mm_type.tx_name.d u64 
    push           78         
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   3 0
    push           mm_type.tx_name.d u64 
    pushptr                   u64 
    push           &mm_tables.namenames 
    push           mm_type.tx_name.d u64 
    push           78         
    pushptroff                u8 1 0
    pushptroff                u64 8 0
    push           "TNAME? # #" u64 
    callproc       &mm_support.txerror_ss 
#18129: 
    push           mm_type.tx_name.oldmlineno i64 
    pop            mm_tables.mlineno i64 
#18134: 
    retproc                   
End


Proc mm_type.tx_bin:
    param          mm_type.tx_bin.p u64 
    param          mm_type.tx_bin.a u64 
    param          mm_type.tx_bin.b u64 
    local          mm_type.tx_bin.amode i64 
    local          mm_type.tx_bin.bmode i64 
    local          mm_type.tx_bin.abase i64 
    local          mm_type.tx_bin.bbase i64 
    local          mm_type.tx_bin.cmode i64 
    local          mm_type.tx_bin.relop i64 
    procentry                 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_bin.a u64 
    callproc       &mm_type.tpass 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_bin.b u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_bin.a u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.tx_bin.amode i64 
    push           mm_type.tx_bin.b u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.tx_bin.bmode i64 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_bin.amode i64 
    pushptroff                i32 4 0
    pop            mm_type.tx_bin.abase i64 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_bin.bmode i64 
    pushptroff                i32 4 0
    pop            mm_type.tx_bin.bbase i64 
    push           0          i64 
    pop            mm_type.tx_bin.relop i64 
    push           mm_type.tx_bin.p u64 
    push           60         
    pushptroff                u8 1 0
    push           101        i64 
    casejumpeq     #18136     i64 0
    push           102        i64 
    casejumpeq     #18137     i64 0
    push           110        i64 
    casejumpeq     #18138     i64 0
    push           111        i64 
    casejumpeq     #18138     i64 0
    push           116        i64 
    casejumpeq     #18139     i64 0
    push           117        i64 
    casejumpeq     #18139     i64 0
    push           118        i64 
    casejumpeq     #18139     i64 0
    push           119        i64 
    casejumpeq     #18139     i64 0
    push           120        i64 
    casejumpeq     #18139     i64 0
    push           121        i64 
    casejumpeq     #18139     i64 0
    push           112        i64 
    casejumpeq     #18140     i64 0
    push           113        i64 
    casejumpeq     #18140     i64 0
    popstack                  i64 
    jump           #18141     
#18136: 
    push           mm_type.tx_bin.abase i64 
    push           9          i64 
    jumpne         #18142     i64 
    push           mm_type.tx_bin.bbase i64 
    push           9          i64 
    jumpne         #18142     i64 
    push           mm_type.tx_bin.a u64 
    push           44         
    pushptroff                u8 1 0
    jumpfalse      #18143     i64 
    push           mm_type.tx_bin.b u64 
    push           44         
    pushptroff                u8 1 0
    jumpfalse      #18143     i64 
    setargs                   1 0
    push           mm_type.tx_bin.p u64 
    callproc       &mm_type.combinestrings 
    jump           #18144     
#18143: 
    setargs                   2 0
    push           0          u64 
    push           "ref+ref"  u64 
    callproc       &mm_support.txerror 
#18142: 
    push           mm_type.tx_bin.abase i64 
    push           9          i64 
    jumpne         #18145     i64 
    push           mm_type.tx_bin.bbase i64 
    push           7          i64 
    jumpgt         #18145     i64 
    setargs                   3 0
    push           0          i64 
    push           4          i64 
    push           mm_type.tx_bin.b u64 
    callproc       &mm_type.coerceunit 
    push           125        i64 
    push           mm_type.tx_bin.p u64 
    push           60         
    popptroff                 u8 1 0
    push           mm_type.tx_bin.amode i64 
    push           mm_type.tx_bin.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #18144     
#18145: 
    jump           #18146     
#18137: 
    push           mm_type.tx_bin.abase i64 
    push           9          i64 
    jumpne         #18147     i64 
    push           mm_type.tx_bin.bbase i64 
    push           9          i64 
    jumpne         #18147     i64 
    setargs                   2 0
    push           mm_type.tx_bin.bmode i64 
    push           mm_type.tx_bin.amode i64 
    callfn         &mm_type.comparemodes i64 
    jumptrue       #18148     i64 
    setargs                   2 0
    push           0          u64 
    push           "ref-ref: not compat" u64 
    callproc       &mm_support.txerror 
#18148: 
    push           127        i64 
    push           mm_type.tx_bin.p u64 
    push           60         
    popptroff                 u8 1 0
    push           4          i64 
    push           mm_type.tx_bin.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #18144     
    jump           #18149     
#18147: 
    push           mm_type.tx_bin.abase i64 
    push           9          i64 
    jumpne         #18150     i64 
    push           mm_type.tx_bin.bbase i64 
    push           7          i64 
    jumpgt         #18150     i64 
    setargs                   3 0
    push           0          i64 
    push           4          i64 
    push           mm_type.tx_bin.b u64 
    callproc       &mm_type.coerceunit 
    push           126        i64 
    push           mm_type.tx_bin.p u64 
    push           60         
    popptroff                 u8 1 0
    push           mm_type.tx_bin.amode i64 
    push           mm_type.tx_bin.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #18144     
#18150: 
#18149: 
    jump           #18146     
#18138: 
    setargs                   3 0
    push           0          i64 
    push           4          i64 
    push           mm_type.tx_bin.b u64 
    callproc       &mm_type.coerceunit 
    push           mm_type.tx_bin.amode i64 
    push           mm_type.tx_bin.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #18144     
    jump           #18146     
#18139: 
    push           mm_type.tx_bin.abase i64 
    push           mm_type.tx_bin.bbase i64 
    jumpne         #18151     i64 
    push           mm_type.tx_bin.bbase i64 
    push           9          i64 
    jumpne         #18151     i64 
    push           4          i64 
    push           mm_type.tx_bin.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #18144     
#18151: 
    push           mm_type.tx_bin.p u64 
    push           60         
    pushptroff                u8 1 0
    push           116        i64 
    setjumpeq      #18152     i64 
    push           117        i64 
    setjumpeqx     #18152     i64 
    push           1          i64 
    pop            mm_type.tx_bin.relop i64 
#18152: 
    jump           #18146     
#18140: 
    setargs                   1 0
    push           mm_type.tx_bin.abase i64 
    callfn         &mm_lib.isnum i64 
    jumptrue       #18153     i64 
    setargs                   2 0
    push           0          u64 
    push           "IN lhs not int" u64 
    callproc       &mm_support.txerror 
#18153: 
    push           mm_type.tx_bin.b u64 
    pushptr                   u8 
    push           20         i64 
    casejumpeq     #18154     i64 0
    push           21         i64 
    casejumpeq     #18154     i64 0
    popstack                  i64 
    jump           #18155     
#18154: 
    startmult                 
    push           mm_type.tx_bin.b u64 
    pushptr                   u8 
    push           20         i64 
    jumpne         #18156     i64 
    push           42         i64 
    resetmult                 
    jump           #18157     
#18156: 
    push           43         i64 
    endmult                   
#18157: 
    push           mm_type.tx_bin.p u64 
    push           0          
    popptroff                 u8 1 0
    push           4          i64 
    push           mm_type.tx_bin.p u64 
    push           48         
    popptroff                 i32 1 0
    push           mm_type.tx_bin.p u64 
    push           60         
    pushptroff                u8 1 0
    push           113        i64 
    jumpne         #18158     i64 
    setargs                   1 0
    push           mm_type.tx_bin.p u64 
    callproc       &mm_type.addnotl 
#18158: 
    jump           #18144     
    jump           #18159     
#18155: 
    setargs                   2 0
    push           0          u64 
    push           "IN ?"     u64 
    callproc       &mm_support.txerror 
#18159: 
    jump           #18146     
#18141: 
#18146: 
    setargs                   1 0
    push           mm_type.tx_bin.abase i64 
    callfn         &mm_lib.isnum i64 
    jumpfalse      #18160     i64 
    setargs                   1 0
    push           mm_type.tx_bin.bbase i64 
    callfn         &mm_lib.isnum i64 
    jumpfalse      #18160     i64 
    push           mm_type.tx_bin.relop i64 
    jumpfalse      #18161     i64 
    push           &mm_decls.ttsize 
    push           mm_type.tx_bin.abase i64 
    pushptroff                i32 4 0
    push           16         i64 
    jumpge         #18161     i64 
    push           mm_type.tx_bin.abase i64 
    push           2          i64 
    jumpne         #18162     i64 
    push           mm_type.tx_bin.bbase i64 
    push           2          i64 
    jumpeq         #18162     i64 
    push           mm_type.tx_bin.b u64 
    pushptr                   u8 
    push           1          i64 
    jumpne         #18163     i64 
    push           mm_type.tx_bin.b u64 
    push           62         
    pushptroff                u8 1 0
    jumpfalse      #18163     i64 
    push           mm_type.tx_bin.b u64 
    push           16         
    pushptroff                i64 1 0
    push           63         i64 
    dotindex                  i64 
    push           0          i64 
    jumpne         #18163     i64 
    push           2          i64 
    push           mm_type.tx_bin.b u64 
    push           48         
    storeptroff               i32 1 0
    pop            mm_type.tx_bin.bbase i64 
#18163: 
    jump           #18164     
#18162: 
    push           mm_type.tx_bin.abase i64 
    push           2          i64 
    jumpeq         #18165     i64 
    push           mm_type.tx_bin.bbase i64 
    push           2          i64 
    jumpne         #18165     i64 
    push           mm_type.tx_bin.a u64 
    pushptr                   u8 
    push           1          i64 
    jumpne         #18166     i64 
    push           mm_type.tx_bin.a u64 
    push           62         
    pushptroff                u8 1 0
    jumpfalse      #18166     i64 
    push           mm_type.tx_bin.a u64 
    push           16         
    pushptroff                i64 1 0
    push           63         i64 
    dotindex                  i64 
    push           0          i64 
    jumpne         #18166     i64 
    push           2          i64 
    push           mm_type.tx_bin.a u64 
    push           48         
    storeptroff               i32 1 0
    pop            mm_type.tx_bin.abase i64 
#18166: 
#18165: 
#18164: 
    push           mm_type.tx_bin.abase i64 
    push           2          i64 
    jumpne         #18167     i64 
    push           mm_type.tx_bin.bbase i64 
    push           2          i64 
    jumpne         #18168     i64 
#18167: 
    push           mm_type.tx_bin.abase i64 
    push           2          i64 
    jumpeq         #18169     i64 
    push           mm_type.tx_bin.bbase i64 
    push           2          i64 
    jumpne         #18169     i64 
#18168: 
    setargs                   2 0
    push           0          u64 
    push           "Mixed sign" u64 
    callproc       &mm_support.txerror 
#18169: 
#18161: 
    push           &mm_tables.typerank 
    push           mm_type.tx_bin.abase i64 
    pushptroff                i64 8 -8
    push           &mm_tables.typerank 
    push           mm_type.tx_bin.bbase i64 
    pushptroff                i64 8 -8
    jumplt         #18170     i64 
    push           mm_type.tx_bin.abase i64 
    pop            mm_type.tx_bin.cmode i64 
    jump           #18171     
#18170: 
    push           mm_type.tx_bin.bbase i64 
    pop            mm_type.tx_bin.cmode i64 
#18171: 
    push           mm_type.tx_bin.p u64 
    push           60         
    pushptroff                u8 1 0
    push           104        i64 
    jumpne         #18172     i64 
    push           &mm_decls.ttisinteger 
    push           mm_type.tx_bin.cmode i64 
    pushptroff                u8 1 0
    jumpfalse      #18172     i64 
    push           105        i64 
    push           mm_type.tx_bin.p u64 
    push           60         
    popptroff                 u8 1 0
#18172: 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_bin.cmode i64 
    push           mm_type.tx_bin.a u64 
    callproc       &mm_type.coerceunit 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_bin.cmode i64 
    push           mm_type.tx_bin.b u64 
    callproc       &mm_type.coerceunit 
    jump           #18173     
#18160: 
    setargs                   2 0
    push           mm_type.tx_bin.bmode i64 
    push           mm_type.tx_bin.amode i64 
    callfn         &mm_type.comparemodes i64 
    jumptrue       #18174     i64 
    setargs                   3 0
    setargs                   2 0
    push           1          i64 
    push           mm_type.tx_bin.bmode i64 
    callfn         &mm_lib.strmode2 u64 
    setargs                   2 0
    push           1          i64 
    push           mm_type.tx_bin.amode i64 
    callfn         &mm_lib.strmode u64 
    push           "BIN: modes not compatible: # #" u64 
    callproc       &mm_support.txerror_ss 
#18174: 
    push           mm_type.tx_bin.amode i64 
    pop            mm_type.tx_bin.cmode i64 
    setargs                   1 0
    setargs                   1 0
    push           mm_type.tx_bin.abase i64 
    callfn         &mm_type.getnewbase i64 
    callfn         &mm_lib.getpclmode i64 
    push           mm_type.tx_bin.p u64 
    push           61         
    popptroff                 u8 1 0
#18173: 
    push           &mm_tables.intresult 
    push           mm_type.tx_bin.p u64 
    push           60         
    pushptroff                u8 1 0
    pushptroff                u8 1 0
    jumptrue       #18175     i64 
    push           mm_type.tx_bin.p u64 
    push           60         
    pushptroff                u8 1 0
    push           126        i64 
    jumpne         #18176     i64 
#18175: 
    push           4          i64 
    pop            mm_type.tx_bin.cmode i64 
#18176: 
    push           mm_type.tx_bin.cmode i64 
    push           mm_type.tx_bin.p u64 
    push           48         
    popptroff                 i32 1 0
#18144: 
    retproc                   
End


Proc mm_type.tx_binto:
    param          mm_type.tx_binto.p u64 
    param          mm_type.tx_binto.a u64 
    param          mm_type.tx_binto.b u64 
    local          mm_type.tx_binto.abase i64 
    local          mm_type.tx_binto.bbase i64 
    local          mm_type.tx_binto.amode i64 
    local          mm_type.tx_binto.bmode i64 
    local          mm_type.tx_binto.opc i64 
    procentry                 
    setargs                   3 0
    push           1          i64 
    push           26         i64 
    push           mm_type.tx_binto.a u64 
    callproc       &mm_type.tpass 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_binto.b u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_binto.a u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.tx_binto.amode i64 
    push           mm_type.tx_binto.b u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.tx_binto.bmode i64 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_binto.amode i64 
    pushptroff                i32 4 0
    pop            mm_type.tx_binto.abase i64 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_binto.bmode i64 
    pushptroff                i32 4 0
    pop            mm_type.tx_binto.bbase i64 
    push           mm_type.tx_binto.p u64 
    push           60         
    pushptroff                u8 1 0
    push           161        i64 
    jumpne         #18178     i64 
    push           &mm_decls.ttisinteger 
    push           mm_type.tx_binto.abase i64 
    pushptroff                u8 1 0
    jumpfalse      #18178     i64 
    push           162        i64 
    push           mm_type.tx_binto.p u64 
    push           60         
    popptroff                 u8 1 0
#18178: 
    push           0          i64 
    push           mm_type.tx_binto.p u64 
    push           48         
    popptroff                 i32 1 0
    push           mm_type.tx_binto.p u64 
    push           60         
    pushptroff                u8 1 0
    push           158        i64 
    casejumpeq     #18179     i64 0
    push           159        i64 
    casejumpeq     #18180     i64 0
    push           167        i64 
    casejumpeq     #18181     i64 0
    push           168        i64 
    casejumpeq     #18181     i64 0
    popstack                  i64 
    jump           #18182     
#18179: 
    push           mm_type.tx_binto.abase i64 
    push           9          i64 
    jumpne         #18183     i64 
    push           mm_type.tx_binto.bbase i64 
    push           9          i64 
    jumpne         #18183     i64 
    setargs                   2 0
    push           0          u64 
    push           "to:ref+ref" u64 
    callproc       &mm_support.txerror 
#18183: 
    push           mm_type.tx_binto.abase i64 
    push           9          i64 
    jumpne         #18184     i64 
    push           mm_type.tx_binto.bbase i64 
    push           7          i64 
    jumpgt         #18184     i64 
    setargs                   3 0
    push           0          i64 
    push           4          i64 
    push           mm_type.tx_binto.b u64 
    callproc       &mm_type.coerceunit 
    push           173        i64 
    push           mm_type.tx_binto.p u64 
    push           60         
    popptroff                 u8 1 0
    jump           #18185     
#18184: 
    jump           #18186     
#18180: 
    push           mm_type.tx_binto.abase i64 
    push           9          i64 
    jumpne         #18187     i64 
    push           mm_type.tx_binto.bbase i64 
    push           7          i64 
    jumpgt         #18187     i64 
    setargs                   3 0
    push           0          i64 
    push           4          i64 
    push           mm_type.tx_binto.b u64 
    callproc       &mm_type.coerceunit 
    push           174        i64 
    push           mm_type.tx_binto.p u64 
    push           60         
    popptroff                 u8 1 0
    jump           #18185     
#18187: 
    jump           #18186     
#18181: 
    setargs                   3 0
    push           0          i64 
    push           4          i64 
    push           mm_type.tx_binto.b u64 
    callproc       &mm_type.coerceunit 
    setargs                   1 0
    push           mm_type.tx_binto.abase i64 
    callfn         &mm_lib.getpclmode i64 
    push           mm_type.tx_binto.p u64 
    push           61         
    popptroff                 u8 1 0
    jump           #18185     
    jump           #18186     
#18182: 
#18186: 
    setargs                   1 0
    push           mm_type.tx_binto.abase i64 
    callfn         &mm_lib.isnum i64 
    jumpfalse      #18188     i64 
    setargs                   1 0
    push           mm_type.tx_binto.bbase i64 
    callfn         &mm_lib.isnum i64 
    jumpfalse      #18188     i64 
    setargs                   1 0
    push           mm_type.tx_binto.abase i64 
    callfn         &mm_lib.getpclmode i64 
    push           mm_type.tx_binto.p u64 
    push           61         
    popptroff                 u8 1 0
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_binto.abase i64 
    push           mm_type.tx_binto.b u64 
    callproc       &mm_type.coerceunit 
    jump           #18189     
#18188: 
    push           &mm_decls.ttisshort 
    push           mm_type.tx_binto.abase i64 
    pushptroff                u8 1 0
    jumpfalse      #18190     i64 
    setargs                   1 0
    push           mm_type.tx_binto.bbase i64 
    callfn         &mm_lib.isnum i64 
    jumpfalse      #18190     i64 
    setargs                   1 0
    push           mm_type.tx_binto.abase i64 
    callfn         &mm_lib.getpclmode i64 
    push           mm_type.tx_binto.p u64 
    push           61         
    popptroff                 u8 1 0
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_binto.abase i64 
    push           mm_type.tx_binto.b u64 
    callproc       &mm_type.coerceunit 
    jump           #18189     
#18190: 
    setargs                   2 0
    push           mm_type.tx_binto.bmode i64 
    push           mm_type.tx_binto.amode i64 
    callfn         &mm_type.comparemodes i64 
    jumptrue       #18191     i64 
    setargs                   3 0
    setargs                   2 0
    push           1          i64 
    push           mm_type.tx_binto.bmode i64 
    callfn         &mm_lib.strmode u64 
    setargs                   2 0
    push           1          i64 
    push           mm_type.tx_binto.amode i64 
    callfn         &mm_lib.strmode u64 
    push           "BIN: modes not compatible: # #" u64 
    callproc       &mm_support.txerror_ss 
#18191: 
    setargs                   1 0
    setargs                   1 0
    push           mm_type.tx_binto.amode i64 
    callfn         &mm_type.getnewbase i64 
    callfn         &mm_lib.getpclmode i64 
    push           mm_type.tx_binto.p u64 
    push           61         
    popptroff                 u8 1 0
#18189: 
#18185: 
    retproc                   
End


Proc mm_type.getdominantmode: i64
    param          mm_type.getdominantmode.amode i64 
    param          mm_type.getdominantmode.bmode i64 
    local          mm_type.getdominantmode.abase i64 
    local          mm_type.getdominantmode.bbase i64 
    procentry                 
    push           &mm_decls.ttbasetype 
    push           mm_type.getdominantmode.amode i64 
    pushptroff                i32 4 0
    pop            mm_type.getdominantmode.abase i64 
    push           &mm_decls.ttbasetype 
    push           mm_type.getdominantmode.bmode i64 
    pushptroff                i32 4 0
    pop            mm_type.getdominantmode.bbase i64 
    startmult                 
    push           mm_type.getdominantmode.abase i64 
    push           7          i64 
    jumpgt         #18193     i64 
    push           mm_type.getdominantmode.bbase i64 
    push           7          i64 
    jumpgt         #18193     i64 
    startmult                 
    push           &mm_tables.typerank 
    push           mm_type.getdominantmode.abase i64 
    pushptroff                i64 8 -8
    push           &mm_tables.typerank 
    push           mm_type.getdominantmode.bbase i64 
    pushptroff                i64 8 -8
    jumplt         #18194     i64 
    push           mm_type.getdominantmode.abase i64 
    resetmult                 
    jump           #18195     
#18194: 
    push           mm_type.getdominantmode.bbase i64 
    endmult                   
#18195: 
    resetmult                 
    jump           #18196     
#18193: 
    setargs                   2 0
    push           mm_type.getdominantmode.bmode i64 
    push           mm_type.getdominantmode.amode i64 
    callfn         &mm_type.comparemodes i64 
    jumptrue       #18197     i64 
    setargs                   2 0
    push           0          u64 
    push           "Getdom: no dominant mode" u64 
    callproc       &mm_support.txerror 
#18197: 
    push           mm_type.getdominantmode.amode i64 
    endmult                   
#18196: 
    setret                    i64 
    jump           #18198     
#18198: 
    retfn                     i64 
End


Proc mm_type.getdominantmodepp: i64
    param          mm_type.getdominantmodepp.a u64 
    param          mm_type.getdominantmodepp.b u64 
    local          mm_type.getdominantmodepp.amode i64 
    local          mm_type.getdominantmodepp.bmode i64 
    local          mm_type.getdominantmodepp.abase i64 
    local          mm_type.getdominantmodepp.bbase i64 
    procentry                 
    push           mm_type.getdominantmodepp.a u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.getdominantmodepp.amode i64 
    push           mm_type.getdominantmodepp.b u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.getdominantmodepp.bmode i64 
    push           &mm_decls.ttbasetype 
    push           mm_type.getdominantmodepp.amode i64 
    pushptroff                i32 4 0
    pop            mm_type.getdominantmodepp.abase i64 
    push           &mm_decls.ttbasetype 
    push           mm_type.getdominantmodepp.bmode i64 
    pushptroff                i32 4 0
    pop            mm_type.getdominantmodepp.bbase i64 
    startmult                 
    push           mm_type.getdominantmodepp.abase i64 
    push           7          i64 
    jumpgt         #18200     i64 
    push           mm_type.getdominantmodepp.bbase i64 
    push           7          i64 
    jumpgt         #18200     i64 
    startmult                 
    push           &mm_tables.typerank 
    push           mm_type.getdominantmodepp.abase i64 
    pushptroff                i64 8 -8
    push           &mm_tables.typerank 
    push           mm_type.getdominantmodepp.bbase i64 
    pushptroff                i64 8 -8
    jumplt         #18201     i64 
    push           mm_type.getdominantmodepp.abase i64 
    resetmult                 
    jump           #18202     
#18201: 
    push           mm_type.getdominantmodepp.bbase i64 
    endmult                   
#18202: 
    resetmult                 
    jump           #18203     
#18200: 
    setargs                   2 0
    push           mm_type.getdominantmodepp.bmode i64 
    push           mm_type.getdominantmodepp.amode i64 
    callfn         &mm_type.comparemodes i64 
    jumptrue       #18204     i64 
    setargs                   2 0
    push           0          u64 
    push           "Getdom: no dominant mode" u64 
    callproc       &mm_support.txerror 
#18204: 
    push           mm_type.getdominantmodepp.amode i64 
    endmult                   
#18203: 
    setret                    i64 
    jump           #18205     
#18205: 
    retfn                     i64 
End


Proc mm_type.tx_cmp:
    param          mm_type.tx_cmp.p u64 
    param          mm_type.tx_cmp.a u64 
    param          mm_type.tx_cmp.b u64 
    local          mm_type.tx_cmp.abase i64 
    local          mm_type.tx_cmp.bbase i64 
    local          mm_type.tx_cmp.atype i64 
    local          mm_type.tx_cmp.btype i64 
    local          mm_type.tx_cmp.u i64 
    local          mm_type.tx_cmp.v i64 
    procentry                 
    setargs                   3 0
    push           mm_type.tx_cmp.b u64 
    push           mm_type.tx_cmp.a u64 
    push           mm_type.tx_cmp.p u64 
    callproc       &mm_type.tx_bin 
#18207: 
    retproc                   
End


Proc mm_type.tx_cmpchain:
    param          mm_type.tx_cmpchain.p u64 
    param          mm_type.tx_cmpchain.a u64 
    local          mm_type.tx_cmpchain.u i64 
    local          mm_type.tx_cmpchain.genop i64 
    local          mm_type.tx_cmpchain.q u64 
    local          mm_type.tx_cmpchain.r u64 
    local          mm_type.tx_cmpchain.av_1 i64 
    local          mm_type.tx_cmpchain.i i64 
    procentry                 
    push           mm_type.tx_cmpchain.a u64 
    pop            mm_type.tx_cmpchain.q u64 
    jump           #18209     
#18210: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_cmpchain.q u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_cmpchain.q u64 
    push           mm_type.tx_cmpchain.a u64 
    jumpne         #18211     u64 
    push           mm_type.tx_cmpchain.q u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.tx_cmpchain.u i64 
    jump           #18212     
#18211: 
    setargs                   2 0
    push           mm_type.tx_cmpchain.q u64 
    push           48         
    pushptroff                i32 1 0
    push           mm_type.tx_cmpchain.u i64 
    callfn         &mm_type.getdominantmode i64 
    pop            mm_type.tx_cmpchain.u i64 
#18212: 
    push           mm_type.tx_cmpchain.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_cmpchain.q u64 
#18209: 
    push           mm_type.tx_cmpchain.q u64 
    jumptrue       #18210     u64 
#18213: 
    push           mm_type.tx_cmpchain.a u64 
    pop            mm_type.tx_cmpchain.q u64 
    push           mm_type.tx_cmpchain.a u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_cmpchain.r u64 
    jump           #18214     
#18215: 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_cmpchain.u i64 
    push           mm_type.tx_cmpchain.q u64 
    callproc       &mm_type.coerceunit 
    push           mm_type.tx_cmpchain.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_cmpchain.q u64 
#18214: 
    push           mm_type.tx_cmpchain.q u64 
    jumptrue       #18215     u64 
#18216: 
#18217: 
    push           1          i64 
    pop            mm_type.tx_cmpchain.i i64 
    push           4          i64 
    pop            mm_type.tx_cmpchain.av_1 i64 
    push           mm_type.tx_cmpchain.av_1 i64 
    push           1          i64 
    jumplt         #18218     i64 
#18219: 
    push           mm_type.tx_cmpchain.p u64 
    push           40         
    addrefoff                 u64 1 0
    push           mm_type.tx_cmpchain.i i64 
    pushptroff                u8 1 -1
    pop            mm_type.tx_cmpchain.genop i64 
    push           mm_type.tx_cmpchain.genop i64 
    push           0          i64 
    jumpne         #18220     i64 
    jump           #18218     
#18220: 
    setargs                   1 0
    push           mm_type.tx_cmpchain.u i64 
    callfn         &mm_lib.getpclmode i64 
    push           mm_type.tx_cmpchain.p u64 
    push           32         
    addrefoff                 u64 1 0
    push           mm_type.tx_cmpchain.i i64 
    popptroff                 i16 2 -2
#18221: 
    forup          #18219     i64 1
    opnd           mm_type.tx_cmpchain.i 
    opnd           mm_type.tx_cmpchain.av_1 
#18218: 
    push           4          i64 
    push           mm_type.tx_cmpchain.p u64 
    push           48         
    popptroff                 i32 1 0
#18222: 
    retproc                   
End


Proc mm_type.tx_callproc:
    param          mm_type.tx_callproc.p u64 
    param          mm_type.tx_callproc.a u64 
    param          mm_type.tx_callproc.pargs u64 
    param          mm_type.tx_callproc.t i64 
    local          mm_type.tx_callproc.q u64 
    local          mm_type.tx_callproc.d u64 
    local          mm_type.tx_callproc.e u64 
    local          mm_type.tx_callproc.pm u64 
    local          mm_type.tx_callproc.paramlist block:800 
    local          mm_type.tx_callproc.arglist block:800 
    local          mm_type.tx_callproc.newarglist block:800 
    local          mm_type.tx_callproc.nparams i64 
    local          mm_type.tx_callproc.i i64 
    local          mm_type.tx_callproc.j i64 
    local          mm_type.tx_callproc.k i64 
    local          mm_type.tx_callproc.nargs i64 
    local          mm_type.tx_callproc.m i64 
    local          mm_type.tx_callproc.kwdused i64 
    local          mm_type.tx_callproc.qm i64 
    local          mm_type.tx_callproc.name u64 
    local          mm_type.tx_callproc.ulist u64 
    local          mm_type.tx_callproc.ulistx u64 
    procentry                 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_callproc.a u64 
    callproc       &mm_type.tpass 
    push           0          i64 
    store          mm_type.tx_callproc.nparams i64 
    pop            mm_type.tx_callproc.nargs i64 
!retry::
#18224: 
    push           mm_type.tx_callproc.a u64 
    pushptr                   u8 
    push           3          i64 
    casejumpeq     #18225     i64 0
    push           100        i64 
    casejumpeq     #18226     i64 0
    push           120        i64 
    casejumpeq     #18226     i64 0
    popstack                  i64 
    jump           #18227     
#18225: 
    push           mm_type.tx_callproc.a u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_type.tx_callproc.d u64 
    push           mm_type.tx_callproc.d u64 
    push           78         
    pushptroff                u8 1 0
    push           5          i64 
    setjumpeq      #18228     i64 
    push           6          i64 
    setjumpne      #18229     i64 
#18228: 
!getparams::
#18230: 
    push           mm_type.tx_callproc.d u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_type.tx_callproc.e u64 
    jump           #18231     
#18232: 
    push           mm_type.tx_callproc.e u64 
    push           78         
    pushptroff                u8 1 0
    push           13         i64 
    jumpne         #18233     i64 
    push           mm_type.tx_callproc.nparams i64 
    push           100        i64 
    jumplt         #18234     i64 
    setargs                   2 0
    push           0          u64 
    push           "Param overflow" u64 
    callproc       &mm_support.txerror 
#18234: 
    push           mm_type.tx_callproc.e u64 
    push           &mm_type.tx_callproc.paramlist 
    push           &mm_type.tx_callproc.nparams 
    incrload                  i64 1
    popptroff                 u64 8 -8
#18233: 
    push           mm_type.tx_callproc.e u64 
    push           32         
    pushptroff                u64 1 0
    pop            mm_type.tx_callproc.e u64 
#18231: 
    push           mm_type.tx_callproc.e u64 
    jumptrue       #18232     u64 
#18235: 
    jump           #18236     
#18229: 
    jump           #18237     
#18238: 
    setargs                   2 0
    push           57         i64 
    push           mm_type.tx_callproc.a u64 
    callproc       &mm_lib.insertunit 
    push           &mm_decls.tttarget 
    push           mm_type.tx_callproc.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           mm_type.tx_callproc.a u64 
    push           48         
    popptroff                 i32 1 0
#18237: 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_callproc.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           9          i64 
    jumpeq         #18238     i64 
#18239: 
    jump           #18240     
#18236: 
    jump           #18241     
#18226: 
    setargs                   2 0
    push           0          u64 
    push           "Can't do ifx/function" u64 
    callproc       &mm_support.txerror 
    jump           #18241     
#18227: 
!dorefproc::
#18240: 
    push           mm_type.tx_callproc.a u64 
    pushptr                   u8 
    push           51         i64 
    jumpne         #18242     i64 
    setargs                   3 0
    push           mm_type.tx_callproc.pargs u64 
    push           mm_type.tx_callproc.a u64 
    push           mm_type.tx_callproc.p u64 
    callproc       &mm_type.tmethodcall 
    push           mm_type.tx_callproc.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_type.tx_callproc.a u64 
    push           mm_type.tx_callproc.p u64 
    push           24         
    pushptroff                u64 1 0
    pop            mm_type.tx_callproc.pargs u64 
    jump           #18224     
#18242: 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_callproc.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           27         i64 
    jumpeq         #18243     i64 
    setargs                   2 0
    push           0          u64 
    push           "Function pointer expected" u64 
    callproc       &mm_support.txerror 
#18243: 
    push           &mm_decls.ttnamedef 
    push           mm_type.tx_callproc.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                u64 8 0
    pop            mm_type.tx_callproc.d u64 
    push           mm_type.tx_callproc.d u64 
    push           0          u64 
    jumpne         #18244     u64 
    setargs                   2 0
    push           0          u64 
    push           "Function expected" u64 
    callproc       &mm_support.txerror 
#18244: 
    jump           #18230     
#18241: 
    push           mm_type.tx_callproc.pargs u64 
    pop            mm_type.tx_callproc.q u64 
    jump           #18245     
#18246: 
    push           mm_type.tx_callproc.nargs i64 
    push           100        i64 
    jumplt         #18247     i64 
    setargs                   2 0
    push           0          u64 
    push           "Param overflow" u64 
    callproc       &mm_support.txerror 
#18247: 
    push           mm_type.tx_callproc.q u64 
    push           &mm_type.tx_callproc.arglist 
    push           &mm_type.tx_callproc.nargs 
    incrload                  i64 1
    popptroff                 u64 8 -8
    push           mm_type.tx_callproc.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_callproc.q u64 
#18245: 
    push           mm_type.tx_callproc.q u64 
    jumptrue       #18246     u64 
#18248: 
    push           mm_type.tx_callproc.d u64 
    push           72         
    pushptroff                i32 1 0
    push           mm_type.tx_callproc.p u64 
    push           48         
    popptroff                 i32 1 0
    push           mm_type.tx_callproc.p u64 
    push           48         
    pushptroff                i32 1 0
    push           0          i64 
    jumpne         #18249     i64 
    push           mm_type.tx_callproc.p u64 
    pushptr                   u8 
    push           31         i64 
    jumpne         #18249     i64 
    push           96         i64 
    push           mm_type.tx_callproc.p u64 
    push           0          
    popptroff                 u8 1 0
#18249: 
    push           mm_type.tx_callproc.p u64 
    push           48         
    pushptroff                i32 1 0
    jumpfalse      #18250     i64 
    push           mm_type.tx_callproc.t i64 
    push           0          i64 
    jumpeq         #18250     i64 
    setargs                   2 0
    push           0          i64 
    push           mm_type.tx_callproc.p u64 
    callproc       &mm_type.twiden 
#18250: 
    push           mm_type.tx_callproc.d u64 
    push           117        
    pushptroff                u8 1 0
    jumpfalse      #18251     i64 
#18252: 
    push           1          i64 
    pop            mm_type.tx_callproc.i i64 
    push           mm_type.tx_callproc.nargs i64 
    push           1          i64 
    jumplt         #18253     i64 
#18254: 
    push           mm_type.tx_callproc.i i64 
    push           mm_type.tx_callproc.nparams i64 
    jumpgt         #18255     i64 
    setargs                   3 0
    push           0          i64 
    push           &mm_type.tx_callproc.paramlist 
    push           mm_type.tx_callproc.i i64 
    pushptroff                u64 8 -8
    push           72         
    pushptroff                i32 1 0
    push           &mm_type.tx_callproc.arglist 
    push           mm_type.tx_callproc.i i64 
    pushptroff                u64 8 -8
    callproc       &mm_type.tpass 
    jump           #18256     
#18255: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           &mm_type.tx_callproc.arglist 
    push           mm_type.tx_callproc.i i64 
    pushptroff                u64 8 -8
    callproc       &mm_type.tpass 
#18256: 
#18257: 
    forup          #18254     i64 1
    opnd           mm_type.tx_callproc.i 
    opnd           mm_type.tx_callproc.nargs 
#18253: 
    push           mm_type.tx_callproc.t i64 
    push           0          i64 
    jumpne         #18258     i64 
    push           96         i64 
    push           mm_type.tx_callproc.p u64 
    push           0          
    popptroff                 u8 1 0
#18258: 
    jump           #18259     
#18251: 
    push           0          i64 
    pop            mm_type.tx_callproc.k i64 
    push           0          i64 
    pop            mm_type.tx_callproc.kwdused i64 
#18260: 
    push           1          i64 
    pop            mm_type.tx_callproc.i i64 
    push           mm_type.tx_callproc.nparams i64 
    push           1          i64 
    jumplt         #18261     i64 
#18262: 
    push           0          u64 
    push           &mm_type.tx_callproc.newarglist 
    push           mm_type.tx_callproc.i i64 
    popptroff                 u64 8 -8
#18263: 
    forup          #18262     i64 1
    opnd           mm_type.tx_callproc.i 
    opnd           mm_type.tx_callproc.nparams 
#18261: 
#18264: 
    push           1          i64 
    pop            mm_type.tx_callproc.i i64 
    push           mm_type.tx_callproc.nargs i64 
    push           1          i64 
    jumplt         #18265     i64 
#18266: 
    push           &mm_type.tx_callproc.arglist 
    push           mm_type.tx_callproc.i i64 
    pushptroff                u64 8 -8
    pop            mm_type.tx_callproc.q u64 
    push           mm_type.tx_callproc.q u64 
    pushptr                   u8 
    switch         #18267     2 27
    opnd           #18268     
#18267: 
    switchlabel    #18269     
    switchlabel    #18268     
    switchlabel    #18268     
    switchlabel    #18268     
    switchlabel    #18268     
    switchlabel    #18268     
    switchlabel    #18268     
    switchlabel    #18268     
    switchlabel    #18268     
    switchlabel    #18268     
    switchlabel    #18268     
    switchlabel    #18268     
    switchlabel    #18268     
    switchlabel    #18268     
    switchlabel    #18268     
    switchlabel    #18268     
    switchlabel    #18268     
    switchlabel    #18268     
    switchlabel    #18268     
    switchlabel    #18268     
    switchlabel    #18268     
    switchlabel    #18268     
    switchlabel    #18268     
    switchlabel    #18268     
    switchlabel    #18268     
    switchlabel    #18270     
    endswitch                 
#18270: 
    push           mm_type.tx_callproc.q u64 
    push           16         
    pushptroff                u64 1 0
    push           16         
    pushptroff                u64 1 0
    pushptr                   u64 
    pop            mm_type.tx_callproc.name u64 
#18271: 
    push           1          i64 
    pop            mm_type.tx_callproc.j i64 
    push           mm_type.tx_callproc.nparams i64 
    push           1          i64 
    jumplt         #18272     i64 
#18273: 
    setargs                   2 0
    push           mm_type.tx_callproc.name u64 
    push           &mm_type.tx_callproc.paramlist 
    push           mm_type.tx_callproc.j i64 
    pushptroff                u64 8 -8
    pushptr                   u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #18274     i64 
    jump           #18275     
#18274: 
#18276: 
    forup          #18273     i64 1
    opnd           mm_type.tx_callproc.j 
    opnd           mm_type.tx_callproc.nparams 
#18272: 
    setargs                   3 0
    push           0          u64 
    push           mm_type.tx_callproc.name u64 
    push           "Can't find kwd param: #" u64 
    callproc       &mm_support.txerror_s 
#18275: 
    push           &mm_type.tx_callproc.newarglist 
    push           mm_type.tx_callproc.j i64 
    pushptroff                u64 8 -8
    jumpfalse      #18277     u64 
    setargs                   3 0
    push           0          u64 
    push           mm_type.tx_callproc.name u64 
    push           "Kwd: # already used or was implicit" u64 
    callproc       &mm_support.txerror_s 
#18277: 
    push           mm_type.tx_callproc.q u64 
    push           24         
    pushptroff                u64 1 0
    push           &mm_type.tx_callproc.newarglist 
    push           mm_type.tx_callproc.j i64 
    popptroff                 u64 8 -8
    push           1          i64 
    pop            mm_type.tx_callproc.kwdused i64 
    jump           #18278     
#18269: 
    push           mm_type.tx_callproc.kwdused i64 
    jumpfalse      #18279     i64 
    setargs                   2 0
    push           0          u64 
    push           "Normal param follows kwd" u64 
    callproc       &mm_support.txerror 
#18279: 
    push           0          u64 
    pop            mm_type.tx_callproc.q u64 
    jump           #18280     
    jump           #18278     
#18268: 
!doregparam::
#18280: 
    push           mm_type.tx_callproc.kwdused i64 
    jumpfalse      #18281     i64 
    setargs                   2 0
    push           0          u64 
    push           "Normal param follows kwd" u64 
    callproc       &mm_support.txerror 
#18281: 
    push           mm_type.tx_callproc.k i64 
    push           mm_type.tx_callproc.nparams i64 
    jumplt         #18282     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "K="       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_type.tx_callproc.k i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           "NPARAMS=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_type.tx_callproc.nparams i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           0          u64 
    push           "Too many params supplied" u64 
    callproc       &mm_support.txerror 
#18282: 
    push           mm_type.tx_callproc.q u64 
    push           &mm_type.tx_callproc.newarglist 
    push           &mm_type.tx_callproc.k 
    incrload                  i64 1
    popptroff                 u64 8 -8
#18278: 
#18283: 
    forup          #18266     i64 1
    opnd           mm_type.tx_callproc.i 
    opnd           mm_type.tx_callproc.nargs 
#18265: 
#18284: 
    push           1          i64 
    pop            mm_type.tx_callproc.i i64 
    push           mm_type.tx_callproc.nparams i64 
    push           1          i64 
    jumplt         #18285     i64 
#18286: 
    push           &mm_type.tx_callproc.newarglist 
    push           mm_type.tx_callproc.i i64 
    pushptroff                u64 8 -8
    pop            mm_type.tx_callproc.q u64 
    push           &mm_type.tx_callproc.paramlist 
    push           mm_type.tx_callproc.i i64 
    pushptroff                u64 8 -8
    pop            mm_type.tx_callproc.pm u64 
    push           mm_type.tx_callproc.q u64 
    push           0          u64 
    jumpne         #18287     u64 
    push           mm_type.tx_callproc.pm u64 
    push           105        
    pushptroff                u8 1 0
    jumptrue       #18288     i64 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           0          u64 
    push           mm_type.tx_callproc.i i64 
    callfn         &msysp.strint u64 
    push           "Param not optional: #" u64 
    callproc       &mm_support.txerror_s 
#18288: 
    push           mm_type.tx_callproc.pm u64 
    push           64         
    pushptroff                u64 1 0
    jumpfalse      #18289     u64 
    setargs                   2 0
    push           mm_type.tx_callproc.p u64 
    push           4          
    pushptroff                u32 1 0
    push           0          i64 
    push           23         i64 
    dotslice                  i64 
    push           mm_type.tx_callproc.pm u64 
    push           64         
    pushptroff                u64 1 0
    callfn         &mm_lib.duplunit u64 
    push           &mm_type.tx_callproc.newarglist 
    push           mm_type.tx_callproc.i i64 
    popptroff                 u64 8 -8
    jump           #18290     
#18289: 
    setargs                   2 0
    push           4          i64 
    push           0          u64 
    callfn         &mm_lib.createconstunit u64 
    push           &mm_type.tx_callproc.newarglist 
    push           mm_type.tx_callproc.i i64 
    popptroff                 u64 8 -8
#18290: 
#18287: 
#18291: 
    forup          #18286     i64 1
    opnd           mm_type.tx_callproc.i 
    opnd           mm_type.tx_callproc.nparams 
#18285: 
    push           0          u64 
    pop            mm_type.tx_callproc.ulist u64 
#18292: 
    push           1          i64 
    pop            mm_type.tx_callproc.i i64 
    push           mm_type.tx_callproc.nparams i64 
    push           1          i64 
    jumplt         #18293     i64 
#18294: 
    push           &mm_type.tx_callproc.paramlist 
    push           mm_type.tx_callproc.i i64 
    pushptroff                u64 8 -8
    pop            mm_type.tx_callproc.pm u64 
    push           &mm_type.tx_callproc.newarglist 
    push           mm_type.tx_callproc.i i64 
    pushptroff                u64 8 -8
    pop            mm_type.tx_callproc.q u64 
    push           mm_type.tx_callproc.pm u64 
    push           104        
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #18295     i64 
    setargs                   3 0
    push           1          i64 
    push           26         i64 
    push           mm_type.tx_callproc.q u64 
    callproc       &mm_type.tpass 
    push           &mm_decls.tttarget 
    push           mm_type.tx_callproc.pm u64 
    push           72         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    pop            mm_type.tx_callproc.m i64 
    push           mm_type.tx_callproc.q u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.tx_callproc.qm i64 
    setargs                   2 0
    push           mm_type.tx_callproc.m i64 
    push           mm_type.tx_callproc.qm i64 
    callfn         &mm_type.comparemodes i64 
    jumptrue       #18296     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "STRMODE(QM)=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    setargs                   2 0
    push           1          i64 
    push           mm_type.tx_callproc.qm i64 
    callfn         &mm_lib.strmode u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "STRMODE(M)=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    setargs                   2 0
    push           1          i64 
    push           mm_type.tx_callproc.m i64 
    callfn         &mm_lib.strmode u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           0          u64 
    push           "&param: type mismatch" u64 
    callproc       &mm_support.txerror 
#18296: 
    setargs                   2 0
    push           59         i64 
    push           mm_type.tx_callproc.q u64 
    callproc       &mm_lib.insertunit 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_callproc.qm i64 
    push           0          u64 
    callfn         &mm_lib.createrefmode i64 
    push           mm_type.tx_callproc.q u64 
    push           48         
    popptroff                 i32 1 0
    jump           #18297     
#18295: 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_callproc.pm u64 
    push           72         
    pushptroff                i32 1 0
    push           mm_type.tx_callproc.q u64 
    callproc       &mm_type.tpass 
#18297: 
    push           mm_type.tx_callproc.ulist u64 
    push           0          u64 
    jumpne         #18298     u64 
    push           mm_type.tx_callproc.q u64 
    pop            mm_type.tx_callproc.ulist u64 
    jump           #18299     
#18298: 
    push           mm_type.tx_callproc.q u64 
    push           mm_type.tx_callproc.ulistx u64 
    push           8          
    popptroff                 u64 1 0
#18299: 
    push           mm_type.tx_callproc.q u64 
    pop            mm_type.tx_callproc.ulistx u64 
    push           0          u64 
    push           mm_type.tx_callproc.q u64 
    push           8          
    popptroff                 u64 1 0
#18300: 
    forup          #18294     i64 1
    opnd           mm_type.tx_callproc.i 
    opnd           mm_type.tx_callproc.nparams 
#18293: 
    push           mm_type.tx_callproc.ulist u64 
    push           mm_type.tx_callproc.p u64 
    push           24         
    popptroff                 u64 1 0
    push           mm_type.tx_callproc.t i64 
    push           0          i64 
    jumpne         #18301     i64 
    push           96         i64 
    push           mm_type.tx_callproc.p u64 
    push           0          
    popptroff                 u8 1 0
#18301: 
#18259: 
    retproc                   
End


Proc mm_type.tx_unary:
    param          mm_type.tx_unary.p u64 
    param          mm_type.tx_unary.a u64 
    local          mm_type.tx_unary.opc i64 
    local          mm_type.tx_unary.size i64 
    local          mm_type.tx_unary.amode i64 
    local          mm_type.tx_unary.mbase i64 
    local          mm_type.tx_unary.tmax i64 
    local          mm_type.tx_unary.x i64 
    local          mm_type.tx_unary.xhigh i64 
    procentry                 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_unary.a u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_unary.a u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.tx_unary.amode i64 
    push           mm_type.tx_unary.p u64 
    push           60         
    pushptroff                u8 1 0
    switch         #18303     134 210
    opnd           #18304     
#18303: 
    switchlabel    #18305     
    switchlabel    #18305     
    switchlabel    #18305     
    switchlabel    #18305     
    switchlabel    #18305     
    switchlabel    #18305     
    switchlabel    #18306     
    switchlabel    #18306     
    switchlabel    #18304     
    switchlabel    #18306     
    switchlabel    #18304     
    switchlabel    #18304     
    switchlabel    #18304     
    switchlabel    #18304     
    switchlabel    #18304     
    switchlabel    #18304     
    switchlabel    #18304     
    switchlabel    #18304     
    switchlabel    #18304     
    switchlabel    #18304     
    switchlabel    #18304     
    switchlabel    #18304     
    switchlabel    #18304     
    switchlabel    #18304     
    switchlabel    #18304     
    switchlabel    #18304     
    switchlabel    #18304     
    switchlabel    #18304     
    switchlabel    #18304     
    switchlabel    #18304     
    switchlabel    #18304     
    switchlabel    #18304     
    switchlabel    #18304     
    switchlabel    #18304     
    switchlabel    #18304     
    switchlabel    #18304     
    switchlabel    #18304     
    switchlabel    #18304     
    switchlabel    #18304     
    switchlabel    #18304     
    switchlabel    #18304     
    switchlabel    #18304     
    switchlabel    #18304     
    switchlabel    #18304     
    switchlabel    #18304     
    switchlabel    #18304     
    switchlabel    #18304     
    switchlabel    #18304     
    switchlabel    #18304     
    switchlabel    #18304     
    switchlabel    #18304     
    switchlabel    #18304     
    switchlabel    #18304     
    switchlabel    #18304     
    switchlabel    #18304     
    switchlabel    #18304     
    switchlabel    #18304     
    switchlabel    #18304     
    switchlabel    #18304     
    switchlabel    #18304     
    switchlabel    #18304     
    switchlabel    #18304     
    switchlabel    #18304     
    switchlabel    #18304     
    switchlabel    #18304     
    switchlabel    #18304     
    switchlabel    #18307     
    switchlabel    #18307     
    switchlabel    #18307     
    switchlabel    #18307     
    switchlabel    #18304     
    switchlabel    #18308     
    switchlabel    #18308     
    switchlabel    #18304     
    switchlabel    #18309     
    switchlabel    #18309     
    switchlabel    #18310     
    endswitch                 
#18307: 
    setargs                   2 0
    push           mm_type.tx_unary.a u64 
    push           mm_type.tx_unary.p u64 
    callproc       &mm_type.do_bounds 
    jump           #18311     
    jump           #18312     
#18308: 
    push           &mm_decls.ttsize 
    startmult                 
    push           mm_type.tx_unary.a u64 
    pushptr                   u8 
    push           65         i64 
    jumpne         #18313     i64 
    push           mm_type.tx_unary.a u64 
    push           16         
    pushptroff                i64 1 0
    resetmult                 
    jump           #18314     
#18313: 
    push           mm_type.tx_unary.amode i64 
    endmult                   
#18314: 
    pushptroff                i32 4 0
    startmult                 
    push           mm_type.tx_unary.p u64 
    push           60         
    pushptroff                u8 1 0
    push           206        i64 
    jumpne         #18315     i64 
    push           1          i64 
    resetmult                 
    jump           #18316     
#18315: 
    push           8          i64 
    endmult                   
#18316: 
    mul                       i64 
    pop            mm_type.tx_unary.size i64 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_unary.size i64 
    push           mm_type.tx_unary.p u64 
    callproc       &mm_type.makenewconst 
    push           4          i64 
    push           mm_type.tx_unary.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #18311     
    jump           #18312     
#18309: 
    push           4          i64 
    pop            mm_type.tx_unary.tmax i64 
    push           mm_type.tx_unary.a u64 
    pushptr                   u8 
    push           65         i64 
    jumpne         #18317     i64 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_unary.a u64 
    push           16         
    pushptroff                i64 1 0
    pushptroff                i32 4 0
    pop            mm_type.tx_unary.mbase i64 
    jump           #18318     
#18317: 
    push           &mm_decls.ttbasetype 
    setargs                   1 0
    push           mm_type.tx_unary.a u64 
    callfn         &mm_lib.getmemmode i64 
    pushptroff                i32 4 0
    pop            mm_type.tx_unary.mbase i64 
#18318: 
    push           mm_type.tx_unary.p u64 
    push           60         
    pushptroff                u8 1 0
    push           208        i64 
    jumpne         #18319     i64 
    push           mm_type.tx_unary.mbase i64 
    push           18         i64 
    casejumpeq     #18320     i64 0
    push           19         i64 
    casejumpeq     #18321     i64 0
    push           20         i64 
    casejumpeq     #18322     i64 0
    push           4          i64 
    casejumpeq     #18323     i64 0
    push           5          i64 
    casejumpeq     #18324     i64 0
    push           3          i64 
    casejumpeq     #18325     i64 0
    push           21         i64 
    casejumpeq     #18326     i64 0
    push           22         i64 
    casejumpeq     #18326     i64 0
    push           23         i64 
    casejumpeq     #18326     i64 0
    push           2          i64 
    casejumpeq     #18326     i64 0
    push           3          i64 
    casejumpeq     #18326     i64 0
    push           16         i64 
    casejumpeq     #18326     i64 0
    push           17         i64 
    casejumpeq     #18326     i64 0
    push           1          i64 
    casejumpeq     #18326     i64 0
    popstack                  i64 
    jump           #18327     
#18320: 
    push           -128       i64 
    pop            mm_type.tx_unary.x i64 
    jump           #18328     
#18321: 
    push           -32768     i64 
    pop            mm_type.tx_unary.x i64 
    jump           #18328     
#18322: 
    push           -2147483648 i64 
    pop            mm_type.tx_unary.x i64 
    jump           #18328     
#18323: 
    push           -9223372036854775808 i64 
    pop            mm_type.tx_unary.x i64 
    jump           #18328     
#18324: 
    push           -9223372036854775808 i64 
    pop            mm_type.tx_unary.xhigh i64 
    push           0          i64 
    pop            mm_type.tx_unary.x i64 
    push           5          i64 
    pop            mm_type.tx_unary.tmax i64 
    jump           #18328     
#18325: 
    push           0          i64 
    store          mm_type.tx_unary.xhigh i64 
    pop            mm_type.tx_unary.x i64 
    jump           #18328     
#18326: 
    push           0          i64 
    pop            mm_type.tx_unary.x i64 
    jump           #18328     
#18327: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           1          i64 
    push           mm_type.tx_unary.mbase i64 
    callfn         &mm_lib.strmode u64 
    push           "Can't do minvalue on #" u64 
    callproc       &mm_support.txerror_s 
#18328: 
    jump           #18329     
#18319: 
    push           mm_type.tx_unary.mbase i64 
    push           18         i64 
    casejumpeq     #18330     i64 0
    push           19         i64 
    casejumpeq     #18331     i64 0
    push           20         i64 
    casejumpeq     #18332     i64 0
    push           4          i64 
    casejumpeq     #18333     i64 0
    push           5          i64 
    casejumpeq     #18334     i64 0
    push           21         i64 
    casejumpeq     #18335     i64 0
    push           16         i64 
    casejumpeq     #18335     i64 0
    push           22         i64 
    casejumpeq     #18336     i64 0
    push           17         i64 
    casejumpeq     #18336     i64 0
    push           23         i64 
    casejumpeq     #18337     i64 0
    push           2          i64 
    casejumpeq     #18338     i64 0
    push           3          i64 
    casejumpeq     #18339     i64 0
    popstack                  i64 
    jump           #18340     
#18330: 
    push           127        i64 
    pop            mm_type.tx_unary.x i64 
    jump           #18341     
#18331: 
    push           32767      i64 
    pop            mm_type.tx_unary.x i64 
    jump           #18341     
#18332: 
    push           2147483647 i64 
    pop            mm_type.tx_unary.x i64 
    jump           #18341     
#18333: 
    push           9223372036854775807 i64 
    pop            mm_type.tx_unary.x i64 
    jump           #18341     
#18334: 
    push           -1         i64 
    pop            mm_type.tx_unary.x i64 
    push           9223372036854775807 i64 
    pop            mm_type.tx_unary.xhigh i64 
    push           5          i64 
    pop            mm_type.tx_unary.tmax i64 
    jump           #18341     
#18335: 
    push           255        i64 
    pop            mm_type.tx_unary.x i64 
    jump           #18341     
#18336: 
    push           65535      i64 
    pop            mm_type.tx_unary.x i64 
    jump           #18341     
#18337: 
    push           4294967295 i64 
    pop            mm_type.tx_unary.x i64 
    jump           #18341     
#18338: 
    push           0          i64 
    pop            mm_type.tx_unary.x i64 
    push           &mm_type.tx_unary.x 
    decr                      i64 1
    push           2          i64 
    pop            mm_type.tx_unary.tmax i64 
    jump           #18341     
#18339: 
    push           -1         i64 
    pop            mm_type.tx_unary.x i64 
    push           -1         i64 
    pop            mm_type.tx_unary.xhigh i64 
    push           3          i64 
    pop            mm_type.tx_unary.tmax i64 
    jump           #18341     
#18340: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           1          i64 
    push           mm_type.tx_unary.mbase i64 
    callfn         &mm_lib.strmode u64 
    push           "Can't do maxvalue on #" u64 
    callproc       &mm_support.txerror_s 
#18341: 
#18329: 
    push           1          i64 
    push           mm_type.tx_unary.p u64 
    push           0          
    popptroff                 u8 1 0
    push           0          u64 
    push           mm_type.tx_unary.p u64 
    push           16         
    popptroff                 u64 1 0
    push           0          i64 
    push           mm_type.tx_unary.p u64 
    push           1          
    popptroff                 u8 1 0
    push           mm_type.tx_unary.x i64 
    push           mm_type.tx_unary.p u64 
    push           16         
    popptroff                 i64 1 0
    push           mm_type.tx_unary.xhigh u64 
    push           mm_type.tx_unary.p u64 
    push           24         
    popptroff                 u64 1 0
    push           mm_type.tx_unary.tmax i64 
    push           mm_type.tx_unary.p u64 
    push           48         
    popptroff                 i32 1 0
    push           1          i64 
    push           mm_type.tx_unary.p u64 
    push           58         
    popptroff                 u8 1 0
    jump           #18311     
    jump           #18312     
#18306: 
    push           &mm_decls.ttisinteger 
    push           mm_type.tx_unary.amode i64 
    pushptroff                u8 1 0
    jumpfalse      #18342     i64 
    setargs                   3 0
    push           0          i64 
    push           7          i64 
    store          mm_type.tx_unary.amode i64 
    push           mm_type.tx_unary.a u64 
    callproc       &mm_type.coerceunit 
#18342: 
    jump           #18312     
#18305: 
    setargs                   3 0
    push           0          i64 
    push           7          i64 
    store          mm_type.tx_unary.amode i64 
    push           mm_type.tx_unary.a u64 
    callproc       &mm_type.coerceunit 
    jump           #18312     
#18310: 
    push           1          i64 
    push           mm_type.tx_unary.p u64 
    push           0          
    popptroff                 u8 1 0
    push           mm_type.tx_unary.a u64 
    pushptr                   u8 
    push           65         i64 
    jumpne         #18343     i64 
    push           mm_type.tx_unary.a u64 
    push           16         
    pushptroff                i64 1 0
    pop            mm_type.tx_unary.amode i64 
    jump           #18344     
#18343: 
    setargs                   1 0
    push           mm_type.tx_unary.a u64 
    callfn         &mm_lib.getmemmode i64 
    pop            mm_type.tx_unary.amode i64 
#18344: 
    push           10         i64 
    push           mm_type.tx_unary.p u64 
    push           48         
    popptroff                 i32 1 0
    push           0          i64 
    push           mm_type.tx_unary.p u64 
    push           1          
    popptroff                 u8 1 0
    setargs                   1 0
    setargs                   2 0
    push           1          i64 
    push           mm_type.tx_unary.amode i64 
    callfn         &mm_lib.strmode u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           mm_type.tx_unary.p u64 
    push           16         
    popptroff                 u64 1 0
    push           1          i64 
    push           mm_type.tx_unary.p u64 
    push           44         
    popptroff                 u8 1 0
    setargs                   1 0
    push           mm_type.tx_unary.p u64 
    push           16         
    pushptroff                u64 1 0
    callfn         &strlen    i64 
    push           mm_type.tx_unary.p u64 
    push           40         
    popptroff                 u32 1 0
    jump           #18311     
    jump           #18312     
#18304: 
#18312: 
    setargs                   1 0
    setargs                   1 0
    push           mm_type.tx_unary.amode i64 
    callfn         &mm_type.getnewbase i64 
    callfn         &mm_lib.getpclmode i64 
    push           mm_type.tx_unary.p u64 
    push           61         
    popptroff                 u8 1 0
    push           mm_type.tx_unary.amode i64 
    push           mm_type.tx_unary.p u64 
    push           48         
    popptroff                 i32 1 0
#18311: 
    retproc                   
End


Proc mm_type.tx_unaryto:
    param          mm_type.tx_unaryto.p u64 
    param          mm_type.tx_unaryto.a u64 
    local          mm_type.tx_unaryto.abase i64 
    local          mm_type.tx_unaryto.amode i64 
    local          mm_type.tx_unaryto.opc i64 
    procentry                 
    setargs                   3 0
    push           1          i64 
    push           26         i64 
    push           mm_type.tx_unaryto.a u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_unaryto.a u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.tx_unaryto.amode i64 
    setargs                   1 0
    push           mm_type.tx_unaryto.amode i64 
    callfn         &mm_lib.getpclmode i64 
    push           mm_type.tx_unaryto.p u64 
    push           61         
    popptroff                 u8 1 0
    push           0          i64 
    push           mm_type.tx_unaryto.p u64 
    push           48         
    popptroff                 i32 1 0
#18346: 
    retproc                   
End


Proc mm_type.tx_if:
    param          mm_type.tx_if.p u64 
    param          mm_type.tx_if.a u64 
    param          mm_type.tx_if.b u64 
    param          mm_type.tx_if.c u64 
    param          mm_type.tx_if.t i64 
    param          mm_type.tx_if.lv i64 
    local          mm_type.tx_if.u i64 
    procentry                 
    setargs                   1 0
    push           mm_type.tx_if.a u64 
    callproc       &mm_type.tcond 
    setargs                   3 0
    push           mm_type.tx_if.lv i64 
    push           mm_type.tx_if.t i64 
    push           mm_type.tx_if.b u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_if.t i64 
    push           0          i64 
    jumpeq         #18348     i64 
    push           mm_type.tx_if.c u64 
    jumptrue       #18348     u64 
    setargs                   2 0
    push           0          u64 
    push           "if needs else" u64 
    callproc       &mm_support.txerror 
#18348: 
    setargs                   3 0
    push           mm_type.tx_if.lv i64 
    push           mm_type.tx_if.t i64 
    push           mm_type.tx_if.c u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_if.t i64 
    push           26         i64 
    jumpne         #18349     i64 
    setargs                   2 0
    push           mm_type.tx_if.c u64 
    push           mm_type.tx_if.b u64 
    callfn         &mm_type.getdominantmodepp i64 
    pop            mm_type.tx_if.u i64 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_if.u i64 
    push           mm_type.tx_if.b u64 
    callproc       &mm_type.coerceunit 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_if.u i64 
    push           mm_type.tx_if.c u64 
    callproc       &mm_type.coerceunit 
    push           mm_type.tx_if.u i64 
    push           mm_type.tx_if.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #18350     
#18349: 
    push           mm_type.tx_if.t i64 
    push           mm_type.tx_if.p u64 
    push           48         
    popptroff                 i32 1 0
#18350: 
    setargs                   1 0
    push           mm_type.tx_if.a u64 
    callfn         &mm_type.iscondtrue i64 
    jumpfalse      #18351     i64 
    setargs                   2 0
    push           mm_type.tx_if.b u64 
    push           mm_type.tx_if.p u64 
    callproc       &mm_lib.deleteunit 
    jump           #18352     
#18351: 
    setargs                   1 0
    push           mm_type.tx_if.a u64 
    callfn         &mm_type.iscondfalse i64 
    jumpfalse      #18353     i64 
    push           mm_type.tx_if.c u64 
    push           0          u64 
    jumpne         #18354     u64 
    setargs                   1 0
    push           5          i64 
    callfn         &mm_lib.createunit0 u64 
    pop            mm_type.tx_if.c u64 
#18354: 
    setargs                   2 0
    push           mm_type.tx_if.c u64 
    push           mm_type.tx_if.p u64 
    callproc       &mm_lib.deleteunit 
#18353: 
#18352: 
#18355: 
    retproc                   
End


Proc mm_type.tx_longif:
    param          mm_type.tx_longif.p u64 
    param          mm_type.tx_longif.a u64 
    param          mm_type.tx_longif.b u64 
    param          mm_type.tx_longif.t i64 
    param          mm_type.tx_longif.lv i64 
    local          mm_type.tx_longif.q u64 
    local          mm_type.tx_longif.r u64 
    local          mm_type.tx_longif.u i64 
    procentry                 
    push           0          i64 
    pop            mm_type.tx_longif.u i64 
    push           mm_type.tx_longif.a u64 
    pop            mm_type.tx_longif.q u64 
    jump           #18357     
#18358: 
    setargs                   1 0
    push           mm_type.tx_longif.q u64 
    push           16         
    pushptroff                u64 1 0
    callproc       &mm_type.tcond 
    push           mm_type.tx_longif.q u64 
    push           24         
    pushptroff                u64 1 0
    pop            mm_type.tx_longif.r u64 
    setargs                   3 0
    push           mm_type.tx_longif.lv i64 
    push           mm_type.tx_longif.t i64 
    push           mm_type.tx_longif.r u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_longif.t i64 
    push           26         i64 
    jumpne         #18359     i64 
    push           mm_type.tx_longif.u i64 
    push           0          i64 
    jumpne         #18360     i64 
    push           mm_type.tx_longif.r u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.tx_longif.u i64 
    jump           #18361     
#18360: 
    setargs                   2 0
    push           mm_type.tx_longif.r u64 
    push           48         
    pushptroff                i32 1 0
    push           mm_type.tx_longif.u i64 
    callfn         &mm_type.getdominantmode i64 
    pop            mm_type.tx_longif.u i64 
#18361: 
#18359: 
    push           mm_type.tx_longif.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_longif.q u64 
#18357: 
    push           mm_type.tx_longif.q u64 
    jumptrue       #18358     u64 
#18362: 
    push           mm_type.tx_longif.t i64 
    push           0          i64 
    jumpeq         #18363     i64 
    push           mm_type.tx_longif.b u64 
    push           0          u64 
    jumpne         #18363     u64 
    setargs                   2 0
    push           0          u64 
    push           "longif needs else" u64 
    callproc       &mm_support.txerror 
#18363: 
    setargs                   3 0
    push           mm_type.tx_longif.lv i64 
    push           mm_type.tx_longif.t i64 
    push           mm_type.tx_longif.b u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_longif.t i64 
    push           26         i64 
    jumpne         #18364     i64 
    setargs                   2 0
    push           mm_type.tx_longif.b u64 
    push           48         
    pushptroff                i32 1 0
    push           mm_type.tx_longif.u i64 
    callfn         &mm_type.getdominantmode i64 
    pop            mm_type.tx_longif.u i64 
#18364: 
    push           mm_type.tx_longif.t i64 
    push           0          i64 
    jumpeq         #18365     i64 
    push           mm_type.tx_longif.a u64 
    pop            mm_type.tx_longif.q u64 
    jump           #18366     
#18367: 
    push           mm_type.tx_longif.t i64 
    push           26         i64 
    jumpne         #18368     i64 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_longif.u i64 
    push           mm_type.tx_longif.q u64 
    push           24         
    pushptroff                u64 1 0
    callproc       &mm_type.coerceunit 
#18368: 
    push           mm_type.tx_longif.q u64 
    push           24         
    pushptroff                u64 1 0
    push           48         
    pushptroff                i32 1 0
    push           mm_type.tx_longif.q u64 
    push           48         
    popptroff                 i32 1 0
    push           mm_type.tx_longif.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_longif.q u64 
#18366: 
    push           mm_type.tx_longif.q u64 
    jumptrue       #18367     u64 
#18369: 
    push           mm_type.tx_longif.t i64 
    push           26         i64 
    jumpne         #18370     i64 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_longif.u i64 
    push           mm_type.tx_longif.b u64 
    callproc       &mm_type.coerceunit 
#18370: 
    push           mm_type.tx_longif.b u64 
    push           48         
    pushptroff                i32 1 0
    push           mm_type.tx_longif.p u64 
    push           48         
    popptroff                 i32 1 0
#18365: 
#18371: 
    retproc                   
End


Proc mm_type.tx_incrto:
    param          mm_type.tx_incrto.p u64 
    param          mm_type.tx_incrto.a u64 
    param          mm_type.tx_incrto.t i64 
    procentry                 
    setargs                   3 0
    push           1          i64 
    push           26         i64 
    push           mm_type.tx_incrto.a u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_incrto.t i64 
    push           0          i64 
    jumpeq         #18373     i64 
    push           mm_type.tx_incrto.p u64 
    push           60         
    pushptroff                u8 1 0
    push           152        i64 
    casejumpeq     #18374     i64 0
    push           153        i64 
    casejumpeq     #18375     i64 0
    popstack                  i64 
    jump           #18376     
#18374: 
    push           154        i64 
    push           mm_type.tx_incrto.p u64 
    push           60         
    popptroff                 u8 1 0
    jump           #18377     
#18375: 
    push           155        i64 
    push           mm_type.tx_incrto.p u64 
    push           60         
    popptroff                 u8 1 0
    jump           #18377     
#18376: 
#18377: 
    setargs                   1 0
    push           mm_type.tx_incrto.a u64 
    push           48         
    pushptroff                i32 1 0
    callfn         &mm_lib.gettypebase i64 
    push           mm_type.tx_incrto.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #18378     
#18373: 
    push           mm_type.tx_incrto.p u64 
    push           60         
    pushptroff                u8 1 0
    push           156        i64 
    casejumpeq     #18379     i64 0
    push           157        i64 
    casejumpeq     #18380     i64 0
    popstack                  i64 
    jump           #18381     
#18379: 
    push           152        i64 
    push           mm_type.tx_incrto.p u64 
    push           60         
    popptroff                 u8 1 0
    jump           #18382     
#18380: 
    push           153        i64 
    push           mm_type.tx_incrto.p u64 
    push           60         
    popptroff                 u8 1 0
    jump           #18382     
#18381: 
#18382: 
    push           0          i64 
    push           mm_type.tx_incrto.p u64 
    push           48         
    popptroff                 i32 1 0
#18378: 
    setargs                   1 0
    push           mm_type.tx_incrto.a u64 
    push           48         
    pushptroff                i32 1 0
    callfn         &mm_lib.getpclmode i64 
    push           mm_type.tx_incrto.p u64 
    push           61         
    popptroff                 u8 1 0
    setargs                   2 0
    push           0          i64 
    push           mm_type.tx_incrto.p u64 
    callproc       &mm_type.twiden 
#18383: 
    retproc                   
End


Proc mm_type.tx_for:
    param          mm_type.tx_for.pindex u64 
    param          mm_type.tx_for.pfrom u64 
    param          mm_type.tx_for.pbody u64 
    local          mm_type.tx_for.pto u64 
    local          mm_type.tx_for.pstep u64 
    local          mm_type.tx_for.plocal u64 
    local          mm_type.tx_for.plist u64 
    local          mm_type.tx_for.u i64 
    procentry                 
    push           mm_type.tx_for.pfrom u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_for.pto u64 
    push           mm_type.tx_for.pto u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_for.pstep u64 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_for.pindex u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_for.pindex u64 
    pushptr                   u8 
    push           3          i64 
    jumpeq         #18385     i64 
    setargs                   2 0
    push           0          u64 
    push           "Loop index not a variable" u64 
    callproc       &mm_support.txerror 
#18385: 
    push           mm_type.tx_for.pindex u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.tx_for.u i64 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_for.pindex u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &mm_type.tpass 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_for.u i64 
    push           mm_type.tx_for.pfrom u64 
    callproc       &mm_type.tpass 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_for.u i64 
    push           mm_type.tx_for.pto u64 
    callproc       &mm_type.tpass 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_for.u i64 
    push           mm_type.tx_for.pstep u64 
    callproc       &mm_type.tpass 
    setargs                   3 0
    push           0          i64 
    push           0          i64 
    push           mm_type.tx_for.pbody u64 
    callproc       &mm_type.tpass 
    setargs                   3 0
    push           0          i64 
    push           0          i64 
    push           mm_type.tx_for.pbody u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &mm_type.tpass 
#18386: 
    retproc                   
End


Proc mm_type.tx_forall:
    param          mm_type.tx_forall.pindex u64 
    param          mm_type.tx_forall.plist u64 
    param          mm_type.tx_forall.pbody u64 
    local          mm_type.tx_forall.plocal u64 
    local          mm_type.tx_forall.pfrom u64 
    local          mm_type.tx_forall.pto u64 
    local          mm_type.tx_forall.passign u64 
    local          mm_type.tx_forall.u i64 
    local          mm_type.tx_forall.mlist i64 
    local          mm_type.tx_forall.elemtype i64 
    procentry                 
    push           mm_type.tx_forall.pindex u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_forall.plocal u64 
    push           mm_type.tx_forall.plocal u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_forall.pfrom u64 
    push           mm_type.tx_forall.pfrom u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_forall.pto u64 
    push           mm_type.tx_forall.plist u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_forall.passign u64 
    setargs                   3 0
    push           0          i64 
    push           4          i64 
    push           mm_type.tx_forall.pindex u64 
    callproc       &mm_type.tpass 
    setargs                   3 0
    push           0          i64 
    push           4          i64 
    push           mm_type.tx_forall.pfrom u64 
    callproc       &mm_type.tpass 
    setargs                   3 0
    push           0          i64 
    push           4          i64 
    push           mm_type.tx_forall.pto u64 
    callproc       &mm_type.tpass 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_forall.plist u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_forall.plist u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.tx_forall.mlist i64 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_forall.mlist i64 
    pushptroff                i32 4 0
    push           11         i64 
    casejumpeq     #18388     i64 0
    push           12         i64 
    casejumpeq     #18389     i64 0
    popstack                  i64 
    jump           #18390     
#18388: 
    push           &mm_decls.tttarget 
    push           mm_type.tx_forall.mlist i64 
    pushptroff                i32 4 0
    pop            mm_type.tx_forall.elemtype i64 
    jump           #18391     
#18389: 
    push           &mm_decls.tttarget 
    push           mm_type.tx_forall.mlist i64 
    pushptroff                i32 4 0
    pop            mm_type.tx_forall.elemtype i64 
    jump           #18391     
#18390: 
    setargs                   2 0
    push           0          u64 
    push           "forall/can't iterate" u64 
    callproc       &mm_support.txerror 
#18391: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_forall.plocal u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_forall.plocal u64 
    push           48         
    pushptroff                i32 1 0
    push           26         i64 
    jumpne         #18392     i64 
    push           mm_type.tx_forall.elemtype i64 
    push           mm_type.tx_forall.plocal u64 
    push           48         
    popptroff                 i32 1 0
    push           mm_type.tx_forall.elemtype i64 
    push           mm_type.tx_forall.plocal u64 
    push           16         
    pushptroff                u64 1 0
    push           72         
    popptroff                 i32 1 0
#18392: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_forall.passign u64 
    callproc       &mm_type.tpass 
    setargs                   3 0
    push           0          i64 
    push           0          i64 
    push           mm_type.tx_forall.pbody u64 
    callproc       &mm_type.tpass 
    setargs                   3 0
    push           0          i64 
    push           0          i64 
    push           mm_type.tx_forall.pbody u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &mm_type.tpass 
#18393: 
    retproc                   
End


Proc mm_type.tx_index:
    param          mm_type.tx_index.p u64 
    param          mm_type.tx_index.a u64 
    param          mm_type.tx_index.b u64 
    param          mm_type.tx_index.t i64 
    param          mm_type.tx_index.lv i64 
    local          mm_type.tx_index.amode i64 
    local          mm_type.tx_index.emode i64 
    local          mm_type.tx_index.pmode i64 
    local          mm_type.tx_index.tmode i64 
    local          mm_type.tx_index.tbasemode i64 
    procentry                 
    setargs                   3 0
    push           mm_type.tx_index.lv i64 
    push           26         i64 
    push           mm_type.tx_index.a u64 
    callproc       &mm_type.tpass 
    setargs                   2 0
    push           mm_type.tx_index.t i64 
    push           0          i64 
    setne                     i64 
    push           mm_type.tx_index.a u64 
    callproc       &mm_type.deref 
    push           mm_type.tx_index.a u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.tx_index.amode i64 
    setargs                   3 0
    push           0          i64 
    push           4          i64 
    push           mm_type.tx_index.b u64 
    callproc       &mm_type.tpass 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_index.amode i64 
    pushptroff                i32 4 0
    push           11         i64 
    setjumpeq      #18395     i64 
    push           12         i64 
    setjumpeqx     #18395     i64 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           1          i64 
    push           mm_type.tx_index.amode i64 
    callfn         &mm_lib.strmode u64 
    push           "Can't index: #" u64 
    callproc       &mm_support.txerror_s 
#18395: 
    push           &mm_decls.tttarget 
    push           mm_type.tx_index.amode i64 
    pushptroff                i32 4 0
    push           mm_type.tx_index.p u64 
    push           48         
    popptroff                 i32 1 0
    setargs                   2 0
    push           mm_type.tx_index.lv i64 
    push           mm_type.tx_index.p u64 
    callproc       &mm_type.twiden 
#18396: 
    retproc                   
End


Proc mm_type.tx_makerange:
    param          mm_type.tx_makerange.p u64 
    param          mm_type.tx_makerange.a u64 
    param          mm_type.tx_makerange.b u64 
    local          mm_type.tx_makerange.amode i64 
    local          mm_type.tx_makerange.bmode i64 
    procentry                 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_makerange.a u64 
    callproc       &mm_type.tpass 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_makerange.b u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_makerange.a u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.tx_makerange.amode i64 
    push           mm_type.tx_makerange.b u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.tx_makerange.bmode i64 
    push           &mm_decls.ttisinteger 
    push           mm_type.tx_makerange.amode i64 
    pushptroff                u8 1 0
    jumpfalse      #18398     i64 
    push           &mm_decls.ttisinteger 
    push           mm_type.tx_makerange.bmode i64 
    pushptroff                u8 1 0
    jumptrue       #18399     i64 
#18398: 
    setargs                   2 0
    push           0          u64 
    push           "range not int" u64 
    callproc       &mm_support.txerror 
#18399: 
    push           &mm_decls.ttisint 
    push           mm_type.tx_makerange.amode i64 
    pushptroff                u8 1 0
    jumpfalse      #18400     i64 
    setargs                   3 0
    push           0          i64 
    push           4          i64 
    push           mm_type.tx_makerange.a u64 
    callproc       &mm_type.coerceunit 
    setargs                   3 0
    push           0          i64 
    push           4          i64 
    push           mm_type.tx_makerange.b u64 
    callproc       &mm_type.coerceunit 
    jump           #18401     
#18400: 
    setargs                   3 0
    push           0          i64 
    push           2          i64 
    push           mm_type.tx_makerange.a u64 
    callproc       &mm_type.coerceunit 
    setargs                   3 0
    push           0          i64 
    push           2          i64 
    push           mm_type.tx_makerange.b u64 
    callproc       &mm_type.coerceunit 
#18401: 
    push           8          i64 
    push           mm_type.tx_makerange.p u64 
    push           48         
    popptroff                 i32 1 0
#18402: 
    retproc                   
End


Proc mm_type.tx_makeset:
    param          mm_type.tx_makeset.p u64 
    param          mm_type.tx_makeset.a u64 
    param          mm_type.tx_makeset.t i64 
    local          mm_type.tx_makeset.x i64 
    local          mm_type.tx_makeset.y i64 
    local          mm_type.tx_makeset.isconst i64 
    local          mm_type.tx_makeset.lower i64 
    local          mm_type.tx_makeset.upper i64 
    local          mm_type.tx_makeset.pvoid u64 
    procentry                 
    push           mm_type.tx_makeset.t i64 
    push           0          i64 
    jumpne         #18404     i64 
    setargs                   2 0
    push           0          u64 
    push           "open(var) set type" u64 
    callproc       &mm_support.txerror 
#18404: 
    push           2000000000 i64 
    pop            mm_type.tx_makeset.lower i64 
    push           -2000000000 i64 
    pop            mm_type.tx_makeset.upper i64 
    push           1          i64 
    pop            mm_type.tx_makeset.isconst i64 
    jump           #18405     
#18406: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_makeset.a u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_makeset.a u64 
    push           58         
    pushptroff                u8 1 0
    jumptrue       #18407     i64 
    push           0          i64 
    pop            mm_type.tx_makeset.isconst i64 
    jump           #18408     
#18407: 
    push           mm_type.tx_makeset.a u64 
    pushptr                   u8 
    push           20         i64 
    casejumpeq     #18409     i64 0
    push           1          i64 
    casejumpeq     #18410     i64 0
    popstack                  i64 
    jump           #18411     
#18409: 
    push           &mm_type.tx_makeset.lower 
    push           mm_type.tx_makeset.a u64 
    push           16         
    pushptroff                u64 1 0
    push           16         
    pushptroff                i64 1 0
    minto                     i64 
    push           &mm_type.tx_makeset.upper 
    push           mm_type.tx_makeset.a u64 
    push           24         
    pushptroff                u64 1 0
    push           16         
    pushptroff                i64 1 0
    maxto                     i64 
    jump           #18412     
#18410: 
    setargs                   3 0
    push           0          i64 
    push           4          i64 
    push           mm_type.tx_makeset.a u64 
    callproc       &mm_type.coerceunit 
    push           &mm_type.tx_makeset.lower 
    push           mm_type.tx_makeset.a u64 
    push           16         
    pushptroff                i64 1 0
    store          mm_type.tx_makeset.y i64 
    minto                     i64 
    push           &mm_type.tx_makeset.upper 
    push           mm_type.tx_makeset.a u64 
    push           16         
    pushptroff                i64 1 0
    store          mm_type.tx_makeset.y i64 
    maxto                     i64 
    jump           #18412     
#18411: 
#18412: 
#18408: 
    push           mm_type.tx_makeset.a u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_makeset.a u64 
#18405: 
    push           mm_type.tx_makeset.a u64 
    jumptrue       #18406     u64 
#18413: 
    push           mm_type.tx_makeset.isconst i64 
    push           mm_type.tx_makeset.p u64 
    push           58         
    popptroff                 u8 1 0
#18414: 
    retproc                   
End


Proc mm_type.tx_ptr:
    param          mm_type.tx_ptr.p u64 
    param          mm_type.tx_ptr.a u64 
    param          mm_type.tx_ptr.t i64 
    param          mm_type.tx_ptr.lv i64 
    local          mm_type.tx_ptr.d u64 
    procentry                 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_ptr.a u64 
    callproc       &mm_type.tpass 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_ptr.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           0          i64 
    casejumpeq     #18416     i64 0
    push           9          i64 
    casejumpeq     #18417     i64 0
    push           12         i64 
    casejumpeq     #18418     i64 0
    popstack                  i64 
    jump           #18419     
#18416: 
    setargs                   2 0
    push           0          u64 
    push           "Deref Void" u64 
    callproc       &mm_support.txerror 
    jump           #18420     
#18417: 
    push           &mm_decls.tttarget 
    push           mm_type.tx_ptr.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           mm_type.tx_ptr.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #18420     
#18418: 
    setargs                   2 0
    push           0          u64 
    push           "Can't deref slice" u64 
    callproc       &mm_support.txerror 
    jump           #18420     
#18419: 
    setargs                   2 0
    push           0          u64 
    push           "PTR: need ref T" u64 
    callproc       &mm_support.txerror 
#18420: 
    setargs                   2 0
    push           mm_type.tx_ptr.lv i64 
    push           mm_type.tx_ptr.p u64 
    callproc       &mm_type.twiden 
#18421: 
    retproc                   
End


Proc mm_type.setrecordsize:
    param          mm_type.setrecordsize.m i64 
    local          mm_type.setrecordsize.fieldlist block:1664 
    local          mm_type.setrecordsize.i i64 
    local          mm_type.setrecordsize.nfields i64 
    local          mm_type.setrecordsize.indent i64 
    local          mm_type.setrecordsize.nrfields i64 
    local          mm_type.setrecordsize.size i64 
    local          mm_type.setrecordsize.index i64 
    local          mm_type.setrecordsize.maxalign i64 
    local          mm_type.setrecordsize.d u64 
    local          mm_type.setrecordsize.e u64 
    local          mm_type.setrecordsize.flags u64 
    local          mm_type.setrecordsize.flag i64 
    procentry                 
    push           &mm_decls.ttsize 
    push           mm_type.setrecordsize.m i64 
    pushptroff                i32 4 0
    jumpfalse      #18423     i64 
    jump           #18424     
#18423: 
    push           &mm_decls.ttnamedef 
    push           mm_type.setrecordsize.m i64 
    pushptroff                u64 8 0
    pop            mm_type.setrecordsize.d u64 
    push           mm_type.setrecordsize.d u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_type.setrecordsize.e u64 
    push           0          i64 
    pop            mm_type.setrecordsize.nfields i64 
    push           83         u64 
    typepun                   u64 void 0
    push           &mm_type.setrecordsize.fieldlist 
    push           &mm_type.setrecordsize.nfields 
    incrload                  i64 1
    popptroff                 u64 8 -8
    jump           #18425     
#18426: 
    push           mm_type.setrecordsize.e u64 
    push           78         
    pushptroff                u8 1 0
    push           14         i64 
    jumpne         #18427     i64 
    push           mm_type.setrecordsize.nfields i64 
    push           200        i64 
    jumplt         #18428     i64 
    setargs                   2 0
    push           0          u64 
    push           "srs:too many fields" u64 
    callproc       &mm_support.gerror 
#18428: 
    setargs                   1 0
    push           mm_type.setrecordsize.e u64 
    push           72         
    pushptroff                i32 1 0
    callproc       &mm_type.setmodesize 
    push           mm_type.setrecordsize.e u64 
    push           104        
    addrefoff                 u64 1 0
    pop            mm_type.setrecordsize.flags u64 
#18429: 
    push           mm_type.setrecordsize.flags u64 
    pushptr                   u8 
    push           83         u64 
    casejumpeq     #18430     u64 0
    push           85         u64 
    casejumpeq     #18430     u64 0
    popstack                  u64 
    jump           #18431     
#18430: 
    push           mm_type.setrecordsize.flags u64 
    pushptr                   u8 
    pop            mm_type.setrecordsize.flag i64 
    push           mm_type.setrecordsize.flag i64 
    typepun                   u64 void 0
    push           &mm_type.setrecordsize.fieldlist 
    push           &mm_type.setrecordsize.nfields 
    incrload                  i64 1
    popptroff                 u64 8 -8
    push           &mm_type.setrecordsize.flags 
    incr                      u64 1
    jump           #18429     
#18431: 
    jump           #18432     
    jump           #18429     
#18432: 
    push           mm_type.setrecordsize.e u64 
    push           &mm_type.setrecordsize.fieldlist 
    push           &mm_type.setrecordsize.nfields 
    incrload                  i64 1
    popptroff                 u64 8 -8
#18433: 
    push           &mm_type.setrecordsize.flags 
    loadincr                  u64 1
    pushptr                   u8 
    pop            mm_type.setrecordsize.flag i64 
    push           mm_type.setrecordsize.flag i64 
    push           42         i64 
    casejumpeq     #18434     i64 0
    push           69         i64 
    casejumpeq     #18435     i64 0
    popstack                  i64 
    jump           #18436     
#18434: 
    jump           #18437     
#18435: 
    push           69         u64 
    typepun                   u64 void 0
    push           &mm_type.setrecordsize.fieldlist 
    push           &mm_type.setrecordsize.nfields 
    incrload                  i64 1
    popptroff                 u64 8 -8
    jump           #18437     
#18436: 
    jump           #18438     
#18437: 
    jump           #18433     
#18438: 
#18427: 
    push           mm_type.setrecordsize.e u64 
    push           32         
    pushptroff                u64 1 0
    pop            mm_type.setrecordsize.e u64 
#18425: 
    push           mm_type.setrecordsize.e u64 
    jumptrue       #18426     u64 
#18439: 
    push           69         u64 
    typepun                   u64 void 0
    push           &mm_type.setrecordsize.fieldlist 
    push           &mm_type.setrecordsize.nfields 
    incrload                  i64 1
    popptroff                 u64 8 -8
    push           0          u64 
    push           &mm_type.setrecordsize.fieldlist 
    push           mm_type.setrecordsize.nfields i64 
    popptroff                 u64 8 0
    push           0          i64 
    pop            mm_type.countedfields i64 
    push           2          i64 
    pop            mm_type.setrecordsize.index i64 
    push           1          i64 
    pop            mm_type.setrecordsize.maxalign i64 
    setargs                   7 0
    push           &mm_type.setrecordsize.maxalign 
    push           mm_type.setrecordsize.d u64 
    push           117        
    pushptroff                u8 1 0
    push           0          i64 
    push           &mm_type.setrecordsize.size 
    push           &mm_type.setrecordsize.index 
    push           &mm_type.setrecordsize.fieldlist 
    push           83         i64 
    callproc       &mm_type.scanrecord 
    push           mm_type.setrecordsize.d u64 
    push           117        
    pushptroff                u8 1 0
    jumpfalse      #18440     i64 
    setargs                   2 0
    push           mm_type.setrecordsize.maxalign i64 
    push           mm_type.setrecordsize.size i64 
    callfn         &mm_type.roundoffset i64 
    pop            mm_type.setrecordsize.size i64 
    push           mm_type.setrecordsize.maxalign i64 
    push           mm_type.setrecordsize.d u64 
    push           122        
    popptroff                 i16 1 0
    jump           #18441     
#18440: 
    push           1          i64 
    push           mm_type.setrecordsize.d u64 
    push           122        
    popptroff                 i16 1 0
#18441: 
    push           mm_type.setrecordsize.size i64 
    push           &mm_decls.ttsize 
    push           mm_type.setrecordsize.m i64 
    popptroff                 i32 4 0
    push           mm_type.countedfields i64 
    push           &mm_decls.ttlength 
    push           mm_type.setrecordsize.m i64 
    popptroff                 i32 4 0
    push           1          i64 
    push           &mm_decls.ttlower 
    push           mm_type.setrecordsize.m i64 
    popptroff                 i32 4 0
#18424: 
    retproc                   
End


Proc mm_type.scanrecord:
    param          mm_type.scanrecord.state i64 
    param          mm_type.scanrecord.fields u64 
    param          mm_type.scanrecord.index u64 
    param          mm_type.scanrecord.isize u64 
    param          mm_type.scanrecord.offset i64 
    param          mm_type.scanrecord.calign i64 
    param          mm_type.scanrecord.maxalign u64 
    local          mm_type.scanrecord.e u64 
    local          mm_type.scanrecord.f u64 
    local          mm_type.scanrecord.ea u64 
    local          mm_type.scanrecord.size i64 
    local          mm_type.scanrecord.fieldsize i64 
    local          mm_type.scanrecord.bitoffset i64 
    local          mm_type.scanrecord.alignment i64 
    local          mm_type.scanrecord.newoffset i64 
    procentry                 
    push           0          i64 
    pop            mm_type.scanrecord.size i64 
    push           0          i64 
    pop            mm_type.scanrecord.bitoffset i64 
    jump           #18443     
#18444: 
    push           mm_type.scanrecord.f i64 
    push           83         i64 
    casejumpeq     #18445     i64 0
    push           85         i64 
    casejumpeq     #18445     i64 0
    push           69         i64 
    casejumpeq     #18446     i64 0
    popstack                  i64 
    jump           #18447     
#18445: 
    setargs                   7 0
    push           mm_type.scanrecord.maxalign u64 
    push           mm_type.scanrecord.calign i64 
    push           mm_type.scanrecord.offset i64 
    push           &mm_type.scanrecord.fieldsize 
    push           mm_type.scanrecord.index u64 
    push           mm_type.scanrecord.fields u64 
    push           mm_type.scanrecord.f i64 
    callproc       &mm_type.scanrecord 
    jump           #18448     
#18446: 
    push           mm_type.scanrecord.state i64 
    push           85         i64 
    jumpne         #18449     i64 
    push           &mm_type.countedfields 
    incr                      i64 1
#18449: 
    push           mm_type.scanrecord.size i64 
    push           mm_type.scanrecord.isize u64 
    popptr                    i64 
    jump           #18450     
    jump           #18448     
#18447: 
    push           mm_type.scanrecord.f u64 
    push           72         
    pushptroff                i32 1 0
    push           30         i64 
    jumpne         #18451     i64 
    push           0          i64 
    pop            mm_type.scanrecord.fieldsize i64 
    push           mm_type.scanrecord.f u64 
    push           96         
    pushptroff                u64 1 0
    pop            mm_type.scanrecord.ea u64 
    push           mm_type.scanrecord.ea u64 
    push           84         
    pushptroff                i32 1 0
    push           mm_type.scanrecord.f u64 
    push           84         
    popptroff                 i32 1 0
    push           mm_type.scanrecord.bitoffset i64 
    push           mm_type.scanrecord.f u64 
    push           118        
    popptroff                 u8 1 0
    push           &mm_type.scanrecord.bitoffset 
    push           mm_type.scanrecord.f u64 
    push           116        
    pushptroff                u8 1 0
    addto                     i64 
    push           mm_type.scanrecord.bitoffset i64 
    push           &mm_decls.ttsize 
    push           mm_type.scanrecord.f u64 
    push           96         
    pushptroff                u64 1 0
    push           72         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           8          i64 
    mul                       i64 
    jumple         #18452     i64 
    setargs                   2 0
    push           0          u64 
    push           "Bit fields overflow type" u64 
    callproc       &mm_support.txerror 
#18452: 
    jump           #18453     
#18451: 
    push           mm_type.scanrecord.f u64 
    push           92         
    pushptroff                u16 1 0
    push           13         i64 
    dotindex                  i64 
    jumpfalse      #18454     u64 
    push           0          i64 
    pop            mm_type.scanrecord.bitoffset i64 
    push           mm_type.scanrecord.f u64 
    push           96         
    pushptroff                u64 1 0
    pop            mm_type.scanrecord.e u64 
    push           0          i64 
    pop            mm_type.scanrecord.fieldsize i64 
    setargs                   2 0
    push           mm_type.scanrecord.e u64 
    push           mm_type.scanrecord.f u64 
    push           8          
    pushptroff                u64 1 0
    callfn         &mm_name.resolve_equiv_name u64 
    pop            mm_type.scanrecord.ea u64 
    push           mm_type.scanrecord.ea u64 
    push           84         
    pushptroff                i32 1 0
    push           mm_type.scanrecord.f u64 
    push           84         
    popptroff                 i32 1 0
    jump           #18453     
#18454: 
    push           0          i64 
    pop            mm_type.scanrecord.bitoffset i64 
    push           mm_type.scanrecord.state i64 
    push           83         i64 
    jumpne         #18455     i64 
    push           &mm_type.countedfields 
    incr                      i64 1
#18455: 
    push           &mm_decls.ttsize 
    push           mm_type.scanrecord.f u64 
    push           72         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    pop            mm_type.scanrecord.fieldsize i64 
    push           mm_type.scanrecord.calign i64 
    jumpfalse      #18456     i64 
    setargs                   1 0
    push           mm_type.scanrecord.f u64 
    push           72         
    pushptroff                i32 1 0
    callfn         &mm_type.getalignment i64 
    pop            mm_type.scanrecord.alignment i64 
    push           mm_type.scanrecord.alignment i64 
    push           mm_type.scanrecord.maxalign u64 
    pushptr                   i64 
    jumple         #18457     i64 
    push           mm_type.scanrecord.alignment i64 
    push           mm_type.scanrecord.maxalign u64 
    popptr                    i64 
#18457: 
    setargs                   2 0
    push           mm_type.scanrecord.alignment i64 
    push           mm_type.scanrecord.offset i64 
    callfn         &mm_type.roundoffset i64 
    pop            mm_type.scanrecord.newoffset i64 
    push           &mm_type.scanrecord.size 
    push           mm_type.scanrecord.newoffset i64 
    push           mm_type.scanrecord.offset i64 
    sub                       i64 
    addto                     i64 
    jump           #18458     
#18456: 
    push           mm_type.scanrecord.offset i64 
    pop            mm_type.scanrecord.newoffset i64 
#18458: 
    push           mm_type.scanrecord.newoffset i64 
    push           mm_type.scanrecord.f u64 
    push           84         
    popptroff                 i32 1 0
    push           mm_type.scanrecord.newoffset i64 
    pop            mm_type.scanrecord.offset i64 
#18453: 
#18448: 
    push           mm_type.scanrecord.state i64 
    push           83         i64 
    jumpne         #18459     i64 
    push           &mm_type.scanrecord.offset 
    push           mm_type.scanrecord.fieldsize i64 
    addto                     i64 
    push           &mm_type.scanrecord.size 
    push           mm_type.scanrecord.fieldsize i64 
    addto                     i64 
    jump           #18460     
#18459: 
    push           mm_type.scanrecord.size i64 
    push           mm_type.scanrecord.fieldsize i64 
    max                       i64 
    pop            mm_type.scanrecord.size i64 
#18460: 
#18443: 
    push           mm_type.scanrecord.fields u64 
    push           mm_type.scanrecord.index u64 
    loadincr                  i64 1
    pushptroff                u64 8 -8
    store          mm_type.scanrecord.f u64 
    jumptrue       #18444     u64 
#18461: 
#18450: 
    retproc                   
End


Proc mm_type.roundoffset: i64
    param          mm_type.roundoffset.offset i64 
    param          mm_type.roundoffset.alignment i64 
    local          mm_type.roundoffset.mask i64 
    procentry                 
    push           mm_type.roundoffset.alignment i64 
    push           1          i64 
    jumpne         #18463     i64 
    push           mm_type.roundoffset.offset i64 
    setret                    i64 
    jump           #18464     
#18463: 
    push           mm_type.roundoffset.alignment i64 
    push           1          i64 
    sub                       i64 
    pop            mm_type.roundoffset.mask i64 
    jump           #18465     
#18466: 
    push           &mm_type.roundoffset.offset 
    incr                      i64 1
#18465: 
    push           mm_type.roundoffset.offset i64 
    push           mm_type.roundoffset.mask i64 
    iand                      i64 
    jumptrue       #18466     i64 
#18467: 
    push           mm_type.roundoffset.offset i64 
    setret                    i64 
    jump           #18464     
#18464: 
    retfn                     i64 
End


Proc mm_type.getalignment: i64
    param          mm_type.getalignment.m i64 
    local          mm_type.getalignment.a i64 
    procentry                 
    push           &mm_decls.ttbasetype 
    push           mm_type.getalignment.m i64 
    pushptroff                i32 4 0
    push           11         i64 
    casejumpeq     #18469     i64 0
    push           13         i64 
    casejumpeq     #18470     i64 0
    popstack                  i64 
    jump           #18471     
#18469: 
    setargs                   1 0
    push           &mm_decls.tttarget 
    push           mm_type.getalignment.m i64 
    pushptroff                i32 4 0
    callfn         &mm_type.getalignment i64 
    setret                    i64 
    jump           #18472     
    jump           #18473     
#18470: 
    push           &mm_decls.ttnamedef 
    push           mm_type.getalignment.m i64 
    pushptroff                u64 8 0
    push           122        
    pushptroff                i16 1 0
    setret                    i64 
    jump           #18472     
    jump           #18473     
#18471: 
#18473: 
    push           &mm_decls.ttsize 
    push           mm_type.getalignment.m i64 
    pushptroff                i32 4 0
    pop            mm_type.getalignment.a i64 
    push           mm_type.getalignment.a i64 
    push           1          i64 
    casejumpeq     #18474     i64 0
    push           2          i64 
    casejumpeq     #18474     i64 0
    push           4          i64 
    casejumpeq     #18474     i64 0
    push           8          i64 
    casejumpeq     #18474     i64 0
    popstack                  i64 
    jump           #18475     
#18474: 
    push           mm_type.getalignment.a i64 
    setret                    i64 
    jump           #18472     
    jump           #18476     
#18475: 
#18476: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    setargs                   2 0
    push           1          i64 
    push           mm_type.getalignment.m i64 
    callfn         &mm_lib.strmode u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_type.getalignment.a i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "GETALIGN SIZE NOT 1248" u64 
    callproc       &mm_support.serror 
    push           0          i64 
    setret                    i64 
    jump           #18472     
#18472: 
    retfn                     i64 
End


Proc mm_type.tx_convert:
    param          mm_type.tx_convert.p u64 
    param          mm_type.tx_convert.a u64 
    param          mm_type.tx_convert.hard i64 
    procentry                 
    push           mm_type.tx_convert.a u64 
    pushptr                   u8 
    push           19         i64 
    jumpne         #18478     i64 
    setargs                   4 0
    push           0          i64 
    push           mm_type.tx_convert.p u64 
    push           52         
    pushptroff                i32 1 0
    push           mm_type.tx_convert.a u64 
    push           16         
    pushptroff                u64 1 0
    push           mm_type.tx_convert.a u64 
    callproc       &mm_type.tx_makelist 
    jump           #18479     
#18478: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_convert.a u64 
    callproc       &mm_type.tpass 
    setargs                   3 0
    push           mm_type.tx_convert.hard i64 
    push           mm_type.tx_convert.p u64 
    push           52         
    pushptroff                i32 1 0
    push           mm_type.tx_convert.a u64 
    callproc       &mm_type.coerceunit 
#18479: 
    setargs                   2 0
    push           mm_type.tx_convert.a u64 
    push           mm_type.tx_convert.p u64 
    callproc       &mm_lib.deleteunit 
#18480: 
    retproc                   
End


Proc mm_type.tx_makelist:
    param          mm_type.tx_makelist.p u64 
    param          mm_type.tx_makelist.a u64 
    param          mm_type.tx_makelist.t i64 
    param          mm_type.tx_makelist.lv i64 
    local          mm_type.tx_makelist.alength i64 
    local          mm_type.tx_makelist.tlength i64 
    local          mm_type.tx_makelist.elemtype i64 
    local          mm_type.tx_makelist.newt i64 
    local          mm_type.tx_makelist.i i64 
    local          mm_type.tx_makelist.nfields i64 
    local          mm_type.tx_makelist.isconst i64 
    local          mm_type.tx_makelist.m i64 
    local          mm_type.tx_makelist.q u64 
    local          mm_type.tx_makelist.b u64 
    local          mm_type.tx_makelist.e u64 
    procentry                 
    push           mm_type.tx_makelist.p u64 
    push           40         
    pushptroff                u32 1 0
    pop            mm_type.tx_makelist.alength i64 
    push           0          i64 
    pop            mm_type.tx_makelist.newt i64 
    push           1          i64 
    pop            mm_type.tx_makelist.isconst i64 
    push           &mm_decls.ttlength 
    push           mm_type.tx_makelist.t i64 
    pushptroff                i32 4 0
    pop            mm_type.tx_makelist.tlength i64 
    push           mm_type.tx_makelist.tlength i64 
    jumpfalse      #18482     i64 
    push           mm_type.tx_makelist.alength i64 
    push           mm_type.tx_makelist.tlength i64 
    jumpge         #18483     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "ALENGTH=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_type.tx_makelist.alength i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           "TLENGTH=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_type.tx_makelist.tlength i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           0          u64 
    push           "Too few elements" u64 
    callproc       &mm_support.txerror 
    jump           #18484     
#18483: 
    push           mm_type.tx_makelist.alength i64 
    push           mm_type.tx_makelist.tlength i64 
    jumple         #18485     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "ALENGTH=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_type.tx_makelist.alength i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           "TLENGTH=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_type.tx_makelist.tlength i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           0          u64 
    push           "Too many elements" u64 
    callproc       &mm_support.txerror 
#18485: 
#18484: 
#18482: 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_makelist.t i64 
    pushptroff                i32 4 0
    push           11         i64 
    casejumpeq     #18486     i64 0
    push           13         i64 
    casejumpeq     #18487     i64 0
    push           12         i64 
    casejumpeq     #18488     i64 0
    push           0          i64 
    casejumpeq     #18489     i64 0
    popstack                  i64 
    jump           #18490     
#18486: 
    push           &mm_decls.tttarget 
    push           mm_type.tx_makelist.t i64 
    pushptroff                i32 4 0
    pop            mm_type.tx_makelist.elemtype i64 
    push           mm_type.tx_makelist.tlength i64 
    push           0          i64 
    jumpne         #18491     i64 
    setargs                   5 0
    push           0          i64 
    push           mm_type.tx_makelist.alength i64 
    push           &mm_decls.ttlower 
    push           mm_type.tx_makelist.t i64 
    pushptroff                i32 4 0
    push           mm_type.tx_makelist.elemtype i64 
    push           0          u64 
    callfn         &mm_lib.createarraymodek i64 
    pop            mm_type.tx_makelist.newt i64 
    jump           #18492     
#18491: 
    push           mm_type.tx_makelist.t i64 
    pop            mm_type.tx_makelist.newt i64 
#18492: 
    push           mm_type.tx_makelist.a u64 
    pop            mm_type.tx_makelist.q u64 
    jump           #18493     
#18494: 
    setargs                   3 0
    push           mm_type.tx_makelist.lv i64 
    push           mm_type.tx_makelist.elemtype i64 
    push           mm_type.tx_makelist.q u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_makelist.q u64 
    pushptr                   u8 
    push           1          i64 
    jumpeq         #18495     i64 
    push           0          i64 
    pop            mm_type.tx_makelist.isconst i64 
#18495: 
    push           mm_type.tx_makelist.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_makelist.q u64 
#18493: 
    push           mm_type.tx_makelist.q u64 
    jumptrue       #18494     u64 
#18496: 
    push           mm_type.tx_makelist.newt i64 
    push           mm_type.tx_makelist.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #18497     
#18487: 
    push           &mm_decls.ttnamedef 
    push           mm_type.tx_makelist.t i64 
    pushptroff                u64 8 0
    push           16         
    pushptroff                u64 1 0
    pop            mm_type.tx_makelist.e u64 
    push           mm_type.tx_makelist.a u64 
    pop            mm_type.tx_makelist.q u64 
    jump           #18498     
#18499: 
    push           mm_type.tx_makelist.e u64 
    push           78         
    pushptroff                u8 1 0
    push           14         i64 
    jumpne         #18500     i64 
    jump           #18501     
#18502: 
    push           mm_type.tx_makelist.e u64 
    push           32         
    pushptroff                u64 1 0
    pop            mm_type.tx_makelist.e u64 
    push           mm_type.tx_makelist.e u64 
    jumptrue       #18503     u64 
    jump           #18504     
#18503: 
#18501: 
    push           mm_type.tx_makelist.e u64 
    push           72         
    pushptroff                i32 1 0
    push           30         i64 
    jumpeq         #18502     i64 
#18504: 
    setargs                   3 0
    push           mm_type.tx_makelist.lv i64 
    push           mm_type.tx_makelist.e u64 
    push           72         
    pushptroff                i32 1 0
    push           mm_type.tx_makelist.q u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_makelist.q u64 
    pushptr                   u8 
    push           1          i64 
    jumpeq         #18505     i64 
    push           0          i64 
    pop            mm_type.tx_makelist.isconst i64 
#18505: 
    push           mm_type.tx_makelist.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_makelist.q u64 
#18500: 
    push           mm_type.tx_makelist.e u64 
    push           32         
    pushptroff                u64 1 0
    pop            mm_type.tx_makelist.e u64 
#18498: 
    push           mm_type.tx_makelist.q u64 
    jumpfalse      #18506     u64 
    push           mm_type.tx_makelist.e u64 
    jumptrue       #18499     u64 
#18506: 
#18507: 
    jump           #18508     
#18509: 
    push           mm_type.tx_makelist.e u64 
    push           32         
    pushptroff                u64 1 0
    pop            mm_type.tx_makelist.e u64 
#18508: 
    push           mm_type.tx_makelist.e u64 
    jumpfalse      #18510     u64 
    push           mm_type.tx_makelist.e u64 
    push           78         
    pushptroff                u8 1 0
    push           14         i64 
    jumpne         #18509     i64 
    push           mm_type.tx_makelist.e u64 
    push           72         
    pushptroff                i32 1 0
    push           30         i64 
    jumpeq         #18509     i64 
#18510: 
#18511: 
    push           mm_type.tx_makelist.q u64 
    jumptrue       #18512     u64 
    push           mm_type.tx_makelist.e u64 
    jumpfalse      #18513     u64 
#18512: 
    setargs                   2 0
    push           0          u64 
    push           "Can't initialise unions" u64 
    callproc       &mm_support.txerror 
#18513: 
    push           mm_type.tx_makelist.t i64 
    push           mm_type.tx_makelist.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #18497     
#18488: 
    push           mm_type.tx_makelist.a u64 
    push           0          u64 
    jumpeq         #18514     u64 
    push           mm_type.tx_makelist.a u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_makelist.b u64 
    push           mm_type.tx_makelist.b u64 
    push           0          u64 
    seteq                     u64 
    jumptrue       #18514     i64 
    push           mm_type.tx_makelist.b u64 
    push           8          
    pushptroff                u64 1 0
    jumpfalse      #18515     u64 
#18514: 
    setargs                   2 0
    push           0          u64 
    push           "bad slice init" u64 
    callproc       &mm_support.txerror 
#18515: 
    push           mm_type.tx_makelist.b u64 
    push           mm_type.tx_makelist.p u64 
    push           24         
    popptroff                 u64 1 0
    push           1          i64 
    push           mm_type.tx_makelist.p u64 
    push           2          
    popptroff                 u8 1 0
    push           0          u64 
    push           mm_type.tx_makelist.a u64 
    push           8          
    popptroff                 u64 1 0
    setargs                   3 0
    push           mm_type.tx_makelist.lv i64 
    push           26         i64 
    push           mm_type.tx_makelist.a u64 
    callproc       &mm_type.tpass 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_makelist.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           9          i64 
    jumpeq         #18516     i64 
    setargs                   2 0
    push           0          u64 
    push           "slice init not ref" u64 
    callproc       &mm_support.txerror 
#18516: 
    push           &mm_decls.tttarget 
    push           mm_type.tx_makelist.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           0          i64 
    jumpeq         #18517     i64 
    setargs                   2 0
    push           &mm_decls.tttarget 
    push           mm_type.tx_makelist.t i64 
    pushptroff                i32 4 0
    push           &mm_decls.tttarget 
    push           mm_type.tx_makelist.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    callfn         &mm_type.comparemodes i64 
    jumptrue       #18518     i64 
    setargs                   2 0
    push           0          u64 
    push           "slice/ptr mismatch" u64 
    callproc       &mm_support.txerror 
#18518: 
#18517: 
    setargs                   3 0
    push           0          i64 
    push           4          i64 
    push           mm_type.tx_makelist.b u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_makelist.t i64 
    push           mm_type.tx_makelist.p u64 
    push           48         
    popptroff                 i32 1 0
    push           23         i64 
    push           mm_type.tx_makelist.p u64 
    push           0          
    popptroff                 u8 1 0
    push           1          i64 
    push           mm_type.tx_makelist.p u64 
    push           59         
    popptroff                 u8 1 0
    jump           #18497     
#18489: 
    push           mm_type.tx_makelist.a u64 
    pop            mm_type.tx_makelist.q u64 
    push           mm_type.tx_makelist.p u64 
    push           40         
    pushptroff                u8 1 0
    jumpfalse      #18519     i64 
    push           mm_type.tx_makelist.q u64 
    push           0          u64 
    jumpne         #18520     u64 
    setargs                   2 0
    push           0          u64 
    push           "array()?" u64 
    callproc       &mm_support.txerror 
#18520: 
    setargs                   3 0
    push           mm_type.tx_makelist.lv i64 
    push           26         i64 
    push           mm_type.tx_makelist.q u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_makelist.q u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.tx_makelist.m i64 
    push           mm_type.tx_makelist.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_makelist.q u64 
    jump           #18521     
#18519: 
    setargs                   2 0
    push           0          u64 
    push           "MAKELIST1" u64 
    callproc       &mm_support.txerror 
#18521: 
    jump           #18522     
#18523: 
    setargs                   3 0
    push           mm_type.tx_makelist.lv i64 
    push           mm_type.tx_makelist.m i64 
    push           mm_type.tx_makelist.q u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_makelist.q u64 
    pushptr                   u8 
    push           1          i64 
    jumpeq         #18524     i64 
    push           0          i64 
    pop            mm_type.tx_makelist.isconst i64 
#18524: 
    push           mm_type.tx_makelist.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_makelist.q u64 
#18522: 
    push           mm_type.tx_makelist.q u64 
    jumptrue       #18523     u64 
#18525: 
    jump           #18497     
#18490: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           1          i64 
    push           mm_type.tx_makelist.t i64 
    callfn         &mm_lib.strmode u64 
    push           "Unknown makelist type: #" u64 
    callproc       &mm_support.txerror_s 
#18497: 
    push           mm_type.tx_makelist.isconst i64 
    push           mm_type.tx_makelist.p u64 
    push           58         
    popptroff                 u8 1 0
    setargs                   3 0
    push           0          i64 
    push           4          i64 
    push           mm_type.tx_makelist.p u64 
    push           24         
    pushptroff                u64 1 0
    callproc       &mm_type.tpass 
#18526: 
    retproc                   
End


Proc mm_type.tx_dot:
    param          mm_type.tx_dot.p u64 
    param          mm_type.tx_dot.a u64 
    param          mm_type.tx_dot.b u64 
    param          mm_type.tx_dot.lv i64 
    local          mm_type.tx_dot.recmode i64 
    local          mm_type.tx_dot.recbasemode i64 
    local          mm_type.tx_dot.i i64 
    local          mm_type.tx_dot.j i64 
    local          mm_type.tx_dot.newtag i64 
    local          mm_type.tx_dot.tmode i64 
    local          mm_type.tx_dot.q u64 
    local          mm_type.tx_dot.pindex u64 
    local          mm_type.tx_dot.d u64 
    local          mm_type.tx_dot.dequiv u64 
    procentry                 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_dot.a u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_dot.a u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.tx_dot.recmode i64 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_dot.recmode i64 
    pushptroff                i32 4 0
    pop            mm_type.tx_dot.recbasemode i64 
    jump           #18528     
#18529: 
    push           &mm_decls.tttarget 
    push           mm_type.tx_dot.recmode i64 
    pushptroff                i32 4 0
    pop            mm_type.tx_dot.tmode i64 
    setargs                   2 0
    push           57         i64 
    push           mm_type.tx_dot.a u64 
    callproc       &mm_lib.insertunit 
    push           mm_type.tx_dot.tmode i64 
    push           mm_type.tx_dot.a u64 
    push           48         
    storeptroff               i32 1 0
    pop            mm_type.tx_dot.recmode i64 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_dot.recmode i64 
    pushptroff                i32 4 0
    pop            mm_type.tx_dot.recbasemode i64 
#18528: 
    push           mm_type.tx_dot.recbasemode i64 
    push           9          i64 
    jumpeq         #18529     i64 
#18530: 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_dot.recmode i64 
    pushptroff                i32 4 0
    push           13         i64 
    jumpeq         #18531     i64 
    setargs                   2 0
    push           0          u64 
    push           "Bad record type" u64 
    callproc       &mm_support.txerror 
#18531: 
    push           mm_type.tx_dot.b u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_type.tx_dot.d u64 
    push           mm_type.tx_dot.d u64 
    push           78         
    pushptroff                u8 1 0
    push           0          i64 
    jumpne         #18532     i64 
    setargs                   2 0
    push           mm_type.tx_dot.recmode i64 
    push           mm_type.tx_dot.d u64 
    callfn         &mm_type.resolvefield u64 
    push           mm_type.tx_dot.b u64 
    push           16         
    storeptroff               u64 1 0
    pop            mm_type.tx_dot.d u64 
#18532: 
    push           mm_type.tx_dot.d u64 
    push           72         
    pushptroff                i32 1 0
    push           30         i64 
    jumpne         #18533     i64 
    push           mm_type.tx_dot.d u64 
    push           118        
    pushptroff                u8 1 0
    pop            mm_type.tx_dot.i i64 
    push           mm_type.tx_dot.i i64 
    push           mm_type.tx_dot.d u64 
    push           116        
    pushptroff                u8 1 0
    add                       i64 
    push           1          i64 
    sub                       i64 
    pop            mm_type.tx_dot.j i64 
    push           mm_type.tx_dot.d u64 
    push           96         
    pushptroff                u64 1 0
    pop            mm_type.tx_dot.dequiv u64 
    push           mm_type.tx_dot.dequiv u64 
    push           mm_type.tx_dot.b u64 
    push           16         
    popptroff                 u64 1 0
    push           mm_type.tx_dot.dequiv u64 
    push           72         
    pushptroff                i32 1 0
    push           mm_type.tx_dot.b u64 
    push           48         
    popptroff                 i32 1 0
    push           mm_type.tx_dot.d u64 
    push           84         
    pushptroff                i32 1 0
    push           mm_type.tx_dot.p u64 
    push           40         
    popptroff                 u32 1 0
    push           mm_type.tx_dot.i i64 
    push           mm_type.tx_dot.j i64 
    jumpne         #18534     i64 
    setargs                   2 0
    push           4          i64 
    push           mm_type.tx_dot.i u64 
    callfn         &mm_lib.createconstunit u64 
    pop            mm_type.tx_dot.pindex u64 
    push           53         i64 
    pop            mm_type.tx_dot.newtag i64 
    jump           #18535     
#18534: 
    setargs                   3 0
    setargs                   2 0
    push           4          i64 
    push           mm_type.tx_dot.j u64 
    callfn         &mm_lib.createconstunit u64 
    setargs                   2 0
    push           4          i64 
    push           mm_type.tx_dot.i u64 
    callfn         &mm_lib.createconstunit u64 
    push           20         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_type.tx_dot.pindex u64 
    push           8          i64 
    push           mm_type.tx_dot.pindex u64 
    push           48         
    popptroff                 i32 1 0
    push           1          i64 
    push           mm_type.tx_dot.pindex u64 
    push           16         
    pushptroff                u64 1 0
    push           59         
    popptroff                 u8 1 0
    push           1          i64 
    push           mm_type.tx_dot.pindex u64 
    push           24         
    pushptroff                u64 1 0
    push           59         
    popptroff                 u8 1 0
    push           54         i64 
    pop            mm_type.tx_dot.newtag i64 
#18535: 
    push           mm_type.tx_dot.b u64 
    push           48         
    pushptroff                i32 1 0
    push           mm_type.tx_dot.p u64 
    push           48         
    popptroff                 i32 1 0
    setargs                   2 0
    push           mm_type.tx_dot.lv i64 
    push           mm_type.tx_dot.p u64 
    callproc       &mm_type.twiden 
    setargs                   2 0
    push           mm_type.tx_dot.newtag i64 
    push           mm_type.tx_dot.p u64 
    callproc       &mm_lib.insertunit 
    push           2          i64 
    push           mm_type.tx_dot.p u64 
    push           48         
    popptroff                 i32 1 0
    push           mm_type.tx_dot.pindex u64 
    push           mm_type.tx_dot.p u64 
    push           24         
    popptroff                 u64 1 0
    push           1          i64 
    push           mm_type.tx_dot.p u64 
    push           2          
    popptroff                 u8 1 0
    push           1          i64 
    push           mm_type.tx_dot.p u64 
    push           16         
    pushptroff                u64 1 0
    push           59         
    popptroff                 u8 1 0
    push           1          i64 
    push           mm_type.tx_dot.p u64 
    push           24         
    pushptroff                u64 1 0
    push           59         
    popptroff                 u8 1 0
    push           1          i64 
    push           mm_type.tx_dot.p u64 
    push           59         
    popptroff                 u8 1 0
    jump           #18536     
#18533: 
    push           mm_type.tx_dot.d u64 
    push           72         
    pushptroff                i32 1 0
    push           mm_type.tx_dot.b u64 
    push           48         
    popptroff                 i32 1 0
    push           mm_type.tx_dot.d u64 
    push           72         
    pushptroff                i32 1 0
    push           mm_type.tx_dot.p u64 
    push           48         
    popptroff                 i32 1 0
    push           mm_type.tx_dot.d u64 
    push           84         
    pushptroff                i32 1 0
    push           mm_type.tx_dot.p u64 
    push           40         
    popptroff                 u32 1 0
    setargs                   2 0
    push           mm_type.tx_dot.lv i64 
    push           mm_type.tx_dot.p u64 
    callproc       &mm_type.twiden 
#18536: 
    retproc                   
End


Proc mm_type.resolvefield: u64
    param          mm_type.resolvefield.d u64 
    param          mm_type.resolvefield.m i64 
    local          mm_type.resolvefield.e u64 
    local          mm_type.resolvefield.t u64 
    procentry                 
    push           &mm_decls.ttbasetype 
    push           mm_type.resolvefield.m i64 
    pushptroff                i32 4 0
    push           13         i64 
    casejumpeq     #18538     i64 0
    push           9          i64 
    casejumpeq     #18539     i64 0
    popstack                  i64 
    jump           #18540     
#18538: 
    jump           #18541     
#18539: 
    push           &mm_decls.tttarget 
    push           mm_type.resolvefield.m i64 
    pushptroff                i32 4 0
    pop            mm_type.resolvefield.m i64 
    push           &mm_decls.ttbasetype 
    push           mm_type.resolvefield.m i64 
    pushptroff                i32 4 0
    push           13         i64 
    jumpeq         #18542     i64 
    setargs                   2 0
    push           0          u64 
    push           "3:record expected" u64 
    callproc       &mm_support.txerror 
#18542: 
    jump           #18541     
#18540: 
    setargs                   2 0
    push           0          u64 
    push           "4:record expected" u64 
    callproc       &mm_support.txerror 
#18541: 
    push           &mm_decls.ttnamedef 
    push           mm_type.resolvefield.m i64 
    pushptroff                u64 8 0
    pop            mm_type.resolvefield.t u64 
    setargs                   2 0
    push           mm_type.resolvefield.d u64 
    push           mm_type.resolvefield.t u64 
    callfn         &mm_name.finddupl u64 
    pop            mm_type.resolvefield.e u64 
    push           mm_type.resolvefield.e u64 
    jumptrue       #18543     u64 
    setargs                   3 0
    push           0          u64 
    push           mm_type.resolvefield.d u64 
    pushptr                   u64 
    push           "Not a field: #" u64 
    callproc       &mm_support.txerror_s 
#18543: 
    push           mm_type.resolvefield.e u64 
    setret                    u64 
    jump           #18544     
#18544: 
    retfn                     u64 
End


Proc mm_type.tx_andl:
    param          mm_type.tx_andl.p u64 
    param          mm_type.tx_andl.a u64 
    param          mm_type.tx_andl.b u64 
    procentry                 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_andl.a u64 
    callproc       &mm_type.tpass 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_andl.b u64 
    callproc       &mm_type.tpass 
    push           4          i64 
    push           mm_type.tx_andl.p u64 
    push           48         
    popptroff                 i32 1 0
    setargs                   1 0
    push           mm_type.tx_andl.a u64 
    callfn         &mm_type.iscondfalse i64 
    jumptrue       #18546     i64 
    setargs                   1 0
    push           mm_type.tx_andl.b u64 
    callfn         &mm_type.iscondfalse i64 
    jumpfalse      #18547     i64 
#18546: 
    setargs                   3 0
    push           4          i64 
    push           0          i64 
    push           mm_type.tx_andl.p u64 
    callproc       &mm_type.makenewconst 
    jump           #18548     
#18547: 
    setargs                   1 0
    push           mm_type.tx_andl.a u64 
    callfn         &mm_type.iscondtrue i64 
    jumpfalse      #18549     i64 
    setargs                   2 0
    push           mm_type.tx_andl.b u64 
    push           mm_type.tx_andl.p u64 
    callproc       &mm_lib.deleteunit 
    jump           #18548     
#18549: 
    setargs                   1 0
    push           mm_type.tx_andl.b u64 
    callfn         &mm_type.iscondtrue i64 
    jumpfalse      #18550     i64 
    setargs                   2 0
    push           mm_type.tx_andl.a u64 
    push           mm_type.tx_andl.p u64 
    callproc       &mm_lib.deleteunit 
#18550: 
#18548: 
#18551: 
    retproc                   
End


Proc mm_type.convintconst:
    param          mm_type.convintconst.p u64 
    param          mm_type.convintconst.x i64 
    procentry                 
    push           1          i64 
    push           mm_type.convintconst.p u64 
    push           0          
    popptroff                 u8 1 0
    push           4          i64 
    push           mm_type.convintconst.p u64 
    push           48         
    popptroff                 i32 1 0
    push           0          u64 
    push           mm_type.convintconst.p u64 
    push           32         
    storeptroff               u64 1 0
    push           mm_type.convintconst.p u64 
    push           24         
    storeptroff               u64 1 0
    push           mm_type.convintconst.p u64 
    push           16         
    popptroff                 u64 1 0
    push           0          i64 
    push           mm_type.convintconst.p u64 
    push           3          
    storeptroff               u8 1 0
    push           mm_type.convintconst.p u64 
    push           2          
    storeptroff               u8 1 0
    push           mm_type.convintconst.p u64 
    push           1          
    popptroff                 u8 1 0
    push           mm_type.convintconst.x i64 
    push           mm_type.convintconst.p u64 
    push           16         
    popptroff                 i64 1 0
    push           1          i64 
    push           mm_type.convintconst.p u64 
    push           58         
    popptroff                 u8 1 0
#18553: 
    retproc                   
End


Proc mm_type.tx_sliceptr:
    param          mm_type.tx_sliceptr.p u64 
    param          mm_type.tx_sliceptr.a u64 
    local          mm_type.tx_sliceptr.m i64 
    local          mm_type.tx_sliceptr.tmode i64 
    procentry                 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_sliceptr.a u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_sliceptr.a u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.tx_sliceptr.m i64 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_sliceptr.m i64 
    pushptroff                i32 4 0
    push           12         i64 
    casejumpeq     #18555     i64 0
    popstack                  i64 
    jump           #18556     
#18555: 
    jump           #18557     
#18556: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           1          i64 
    push           mm_type.tx_sliceptr.m i64 
    callfn         &mm_lib.strmode u64 
    push           "SLICEPTR #" u64 
    callproc       &mm_support.txerror_s 
#18557: 
    setargs                   5 0
    push           0          i64 
    push           0          i64 
    push           &mm_decls.ttlower 
    push           mm_type.tx_sliceptr.m i64 
    pushptroff                i32 4 0
    push           &mm_decls.tttarget 
    push           mm_type.tx_sliceptr.m i64 
    pushptroff                i32 4 0
    push           0          u64 
    callfn         &mm_lib.createarraymodek i64 
    pop            mm_type.tx_sliceptr.tmode i64 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_sliceptr.tmode i64 
    push           0          u64 
    callfn         &mm_lib.createrefmode i64 
    push           mm_type.tx_sliceptr.p u64 
    push           48         
    popptroff                 i32 1 0
#18558: 
    retproc                   
End


Proc mm_type.tx_swap:
    param          mm_type.tx_swap.p u64 
    param          mm_type.tx_swap.a u64 
    param          mm_type.tx_swap.b u64 
    procentry                 
    setargs                   3 0
    push           1          i64 
    push           26         i64 
    push           mm_type.tx_swap.a u64 
    callproc       &mm_type.tpass 
    setargs                   3 0
    push           1          i64 
    push           26         i64 
    push           mm_type.tx_swap.b u64 
    callproc       &mm_type.tpass 
    setargs                   2 0
    push           mm_type.tx_swap.b u64 
    push           48         
    pushptroff                i32 1 0
    push           mm_type.tx_swap.a u64 
    push           48         
    pushptroff                i32 1 0
    callfn         &mm_type.comparemodes i64 
    jumptrue       #18560     i64 
    setargs                   2 0
    push           0          u64 
    push           "SWAP: type mismatch" u64 
    callproc       &mm_support.txerror 
#18560: 
    push           0          i64 
    push           mm_type.tx_swap.p u64 
    push           48         
    popptroff                 i32 1 0
#18561: 
    retproc                   
End


Proc mm_type.tx_select:
    param          mm_type.tx_select.p u64 
    param          mm_type.tx_select.a u64 
    param          mm_type.tx_select.b u64 
    param          mm_type.tx_select.c u64 
    param          mm_type.tx_select.t i64 
    param          mm_type.tx_select.lv i64 
    local          mm_type.tx_select.i i64 
    local          mm_type.tx_select.u i64 
    local          mm_type.tx_select.q u64 
    procentry                 
    setargs                   3 0
    push           0          i64 
    push           4          i64 
    push           mm_type.tx_select.a u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_select.b u64 
    pop            mm_type.tx_select.q u64 
    jump           #18563     
#18564: 
    setargs                   3 0
    push           mm_type.tx_select.lv i64 
    push           mm_type.tx_select.t i64 
    push           mm_type.tx_select.q u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_select.q u64 
    push           mm_type.tx_select.b u64 
    jumpne         #18565     u64 
    push           mm_type.tx_select.q u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.tx_select.u i64 
    jump           #18566     
#18565: 
    setargs                   2 0
    push           mm_type.tx_select.q u64 
    push           48         
    pushptroff                i32 1 0
    push           mm_type.tx_select.u i64 
    callfn         &mm_type.getdominantmode i64 
    pop            mm_type.tx_select.u i64 
#18566: 
    push           mm_type.tx_select.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_select.q u64 
#18563: 
    push           mm_type.tx_select.q u64 
    jumptrue       #18564     u64 
#18567: 
    setargs                   3 0
    push           mm_type.tx_select.lv i64 
    push           mm_type.tx_select.t i64 
    push           mm_type.tx_select.c u64 
    callproc       &mm_type.tpass 
    setargs                   2 0
    push           mm_type.tx_select.c u64 
    push           48         
    pushptroff                i32 1 0
    push           mm_type.tx_select.u i64 
    callfn         &mm_type.getdominantmode i64 
    pop            mm_type.tx_select.u i64 
    push           mm_type.tx_select.b u64 
    pop            mm_type.tx_select.q u64 
    jump           #18568     
#18569: 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_select.u i64 
    push           mm_type.tx_select.q u64 
    callproc       &mm_type.coerceunit 
    push           mm_type.tx_select.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_select.q u64 
#18568: 
    push           mm_type.tx_select.q u64 
    jumptrue       #18569     u64 
#18570: 
    push           mm_type.tx_select.u i64 
    push           mm_type.tx_select.p u64 
    push           48         
    popptroff                 i32 1 0
#18571: 
    retproc                   
End


Proc mm_type.tx_case:
    param          mm_type.tx_case.p u64 
    param          mm_type.tx_case.a u64 
    param          mm_type.tx_case.b u64 
    param          mm_type.tx_case.c u64 
    param          mm_type.tx_case.t i64 
    param          mm_type.tx_case.lv i64 
    local          mm_type.tx_case.amode i64 
    local          mm_type.tx_case.u i64 
    local          mm_type.tx_case.wt u64 
    local          mm_type.tx_case.w u64 
    procentry                 
    push           mm_type.tx_case.p u64 
    pushptr                   u8 
    push           116        i64 
    jumpne         #18573     i64 
    push           mm_type.tx_case.lv i64 
    jumpfalse      #18573     i64 
    setargs                   2 0
    push           0          u64 
    push           "&docase"  u64 
    callproc       &mm_support.gerror 
#18573: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_case.a u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_case.a u64 
    push           0          u64 
    jumpne         #18574     u64 
    push           26         i64 
    pop            mm_type.tx_case.amode i64 
    jump           #18575     
#18574: 
    push           mm_type.tx_case.a u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.tx_case.amode i64 
#18575: 
    push           &mm_decls.ttisinteger 
    push           mm_type.tx_case.amode i64 
    pushptroff                u8 1 0
    jumpfalse      #18576     i64 
    push           &mm_decls.ttsize 
    push           mm_type.tx_case.amode i64 
    pushptroff                i32 4 0
    push           8          i64 
    jumpge         #18576     i64 
    setargs                   3 0
    push           0          i64 
    push           4          i64 
    push           mm_type.tx_case.a u64 
    callproc       &mm_type.coerceunit 
    push           4          i64 
    pop            mm_type.tx_case.amode i64 
#18576: 
    push           0          i64 
    pop            mm_type.tx_case.u i64 
    push           mm_type.tx_case.b u64 
    pop            mm_type.tx_case.wt u64 
    jump           #18577     
#18578: 
    push           mm_type.tx_case.wt u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_type.tx_case.w u64 
    jump           #18579     
#18580: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_case.w u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_case.w u64 
    pushptr                   u8 
    push           20         i64 
    jumpne         #18581     i64 
    push           &mm_decls.ttisinteger 
    push           mm_type.tx_case.amode i64 
    pushptroff                u8 1 0
    jumptrue       #18582     i64 
    setargs                   2 0
    push           0          u64 
    push           "case: need int index" u64 
    callproc       &mm_support.txerror 
#18582: 
    jump           #18583     
#18581: 
    push           mm_type.tx_case.amode i64 
    push           26         i64 
    jumpne         #18584     i64 
    setargs                   1 0
    push           mm_type.tx_case.w u64 
    callfn         &mm_lib.isboolunit i64 
    jumptrue       #18585     i64 
    setargs                   2 0
    push           0          u64 
    push           "CASE/BOOL?" u64 
    callproc       &mm_support.txerror 
    setargs                   2 0
    push           18         i64 
    push           mm_type.tx_case.w u64 
    callproc       &mm_lib.insertunit 
#18585: 
    jump           #18586     
#18584: 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_case.amode i64 
    push           mm_type.tx_case.w u64 
    callproc       &mm_type.coerceunit 
#18586: 
#18583: 
    push           mm_type.tx_case.w u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_case.w u64 
#18579: 
    push           mm_type.tx_case.w u64 
    jumptrue       #18580     u64 
#18587: 
    setargs                   3 0
    push           mm_type.tx_case.lv i64 
    push           mm_type.tx_case.t i64 
    push           mm_type.tx_case.wt u64 
    push           24         
    pushptroff                u64 1 0
    callproc       &mm_type.tpass 
    push           mm_type.tx_case.t i64 
    push           0          i64 
    jumpeq         #18588     i64 
    push           mm_type.tx_case.u i64 
    jumpfalse      #18589     i64 
    setargs                   2 0
    push           mm_type.tx_case.wt u64 
    push           24         
    pushptroff                u64 1 0
    push           48         
    pushptroff                i32 1 0
    push           mm_type.tx_case.u i64 
    callfn         &mm_type.getdominantmode i64 
    pop            mm_type.tx_case.u i64 
    jump           #18590     
#18589: 
    push           mm_type.tx_case.wt u64 
    push           24         
    pushptroff                u64 1 0
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.tx_case.u i64 
#18590: 
#18588: 
    push           mm_type.tx_case.wt u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_case.wt u64 
#18577: 
    push           mm_type.tx_case.wt u64 
    jumptrue       #18578     u64 
#18591: 
    push           mm_type.tx_case.c u64 
    jumpfalse      #18592     u64 
    setargs                   3 0
    push           mm_type.tx_case.lv i64 
    push           mm_type.tx_case.t i64 
    push           mm_type.tx_case.c u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_case.t i64 
    push           26         i64 
    jumpne         #18593     i64 
    setargs                   2 0
    push           mm_type.tx_case.c u64 
    push           48         
    pushptroff                i32 1 0
    push           mm_type.tx_case.u i64 
    callfn         &mm_type.getdominantmode i64 
    pop            mm_type.tx_case.u i64 
#18593: 
    jump           #18594     
#18592: 
    push           mm_type.tx_case.t i64 
    push           0          i64 
    jumpeq         #18595     i64 
    setargs                   2 0
    push           0          u64 
    push           "case needs else" u64 
    callproc       &mm_support.txerror 
#18595: 
#18594: 
    push           mm_type.tx_case.t i64 
    push           0          i64 
    jumpeq         #18596     i64 
    push           mm_type.tx_case.u i64 
    push           mm_type.tx_case.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #18597     
#18596: 
    push           0          i64 
    push           mm_type.tx_case.p u64 
    push           48         
    popptroff                 i32 1 0
#18597: 
#18598: 
    retproc                   
End


Proc mm_type.tx_notl:
    param          mm_type.tx_notl.p u64 
    param          mm_type.tx_notl.a u64 
    procentry                 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_notl.a u64 
    callproc       &mm_type.tpass 
    push           4          i64 
    push           mm_type.tx_notl.p u64 
    push           48         
    popptroff                 i32 1 0
#18600: 
    retproc                   
End


Proc mm_type.tx_istruel:
    param          mm_type.tx_istruel.p u64 
    param          mm_type.tx_istruel.a u64 
    local          mm_type.tx_istruel.abase i64 
    procentry                 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_istruel.a u64 
    callproc       &mm_type.tpass 
    setargs                   1 0
    push           mm_type.tx_istruel.a u64 
    callfn         &mm_lib.isboolunit i64 
    jumpfalse      #18602     i64 
    setargs                   2 0
    push           mm_type.tx_istruel.a u64 
    push           mm_type.tx_istruel.p u64 
    callproc       &mm_lib.deleteunit 
    jump           #18603     
#18602: 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_istruel.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    pop            mm_type.tx_istruel.abase i64 
    push           mm_type.tx_istruel.abase i64 
    push           9          i64 
    jumpne         #18604     i64 
    push           4          i64 
    pop            mm_type.tx_istruel.abase i64 
#18604: 
    push           4          i64 
    push           mm_type.tx_istruel.p u64 
    push           48         
    popptroff                 i32 1 0
    setargs                   1 0
    push           mm_type.tx_istruel.abase i64 
    callfn         &mm_lib.getpclmode i64 
    push           mm_type.tx_istruel.p u64 
    push           61         
    popptroff                 u8 1 0
#18603: 
    retproc                   
End


Proc mm_type.tx_typepun:
    param          mm_type.tx_typepun.p u64 
    param          mm_type.tx_typepun.a u64 
    local          mm_type.tx_typepun.smode i64 
    procentry                 
    push           mm_type.tx_typepun.a u64 
    pushptr                   u8 
    push           19         i64 
    casejumpeq     #18606     i64 0
    popstack                  i64 
    jump           #18607     
#18606: 
    setargs                   2 0
    push           0          u64 
    push           "TYPEPUN/LIST" u64 
    callproc       &mm_support.txerror 
    jump           #18608     
#18607: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_typepun.a u64 
    callproc       &mm_type.tpass 
    setargs                   1 0
    push           mm_type.tx_typepun.a u64 
    callfn         &mm_lib.getmemmode i64 
    pop            mm_type.tx_typepun.smode i64 
    push           &mm_decls.ttsize 
    push           mm_type.tx_typepun.smode i64 
    pushptroff                i32 4 0
    push           &mm_decls.ttsize 
    push           mm_type.tx_typepun.p u64 
    push           52         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    jumpge         #18609     i64 
    setargs                   2 0
    push           0          u64 
    push           "Typepun: sizes must match" u64 
    callproc       &mm_support.txerror 
#18609: 
    setargs                   1 0
    push           mm_type.tx_typepun.p u64 
    push           52         
    pushptroff                i32 1 0
    callfn         &mm_lib.gettypebase i64 
    push           mm_type.tx_typepun.p u64 
    push           48         
    popptroff                 i32 1 0
#18608: 
#18610: 
    retproc                   
End


Proc mm_type.tx_bytesize:
    param          mm_type.tx_bytesize.p u64 
    param          mm_type.tx_bytesize.a u64 
    procentry                 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_bytesize.a u64 
    callproc       &mm_type.tpass 
    push           4          i64 
    push           mm_type.tx_bytesize.p u64 
    push           48         
    popptroff                 i32 1 0
#18612: 
    retproc                   
End


Proc mm_type.tx_exit:
    param          mm_type.tx_exit.p u64 
    param          mm_type.tx_exit.a u64 
    procentry                 
    push           mm_type.tx_exit.a u64 
    push           0          u64 
    jumpne         #18614     u64 
    jump           #18615     
#18614: 
    setargs                   3 0
    push           0          i64 
    push           4          i64 
    push           mm_type.tx_exit.a u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_exit.a u64 
    pushptr                   u8 
    push           1          i64 
    jumpeq         #18616     i64 
    setargs                   2 0
    push           0          u64 
    push           "exit/etc not const" u64 
    callproc       &mm_support.txerror 
#18616: 
    push           mm_type.tx_exit.a u64 
    push           16         
    pushptroff                i64 1 0
    push           mm_type.tx_exit.p u64 
    push           40         
    popptroff                 i32 1 0
    push           0          u64 
    push           mm_type.tx_exit.p u64 
    push           16         
    popptroff                 u64 1 0
    push           0          i64 
    push           mm_type.tx_exit.p u64 
    push           1          
    popptroff                 u8 1 0
#18615: 
    retproc                   
End


Proc mm_type.tx_goto:
    param          mm_type.tx_goto.p u64 
    param          mm_type.tx_goto.a u64 
    local          mm_type.tx_goto.m i64 
    procentry                 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_goto.a u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_goto.a u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.tx_goto.m i64 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_goto.m i64 
    pushptroff                i32 4 0
    push           9          i64 
    jumpne         #18618     i64 
    push           &mm_decls.ttbasetype 
    push           &mm_decls.tttarget 
    push           mm_type.tx_goto.m i64 
    pushptroff                i32 4 0
    pushptroff                i32 4 0
    push           28         i64 
    jumpeq         #18619     i64 
#18618: 
    setargs                   2 0
    push           0          u64 
    push           "goto: not label" u64 
    callproc       &mm_support.txerror 
#18619: 
#18620: 
    retproc                   
End


Proc mm_type.tx_switch:
    param          mm_type.tx_switch.p u64 
    param          mm_type.tx_switch.a u64 
    param          mm_type.tx_switch.b u64 
    param          mm_type.tx_switch.c u64 
    param          mm_type.tx_switch.t i64 
    param          mm_type.tx_switch.lv i64 
    local          mm_type.tx_switch.valueset block:2048 
    local          mm_type.tx_switch.wt u64 
    local          mm_type.tx_switch.w u64 
    local          mm_type.tx_switch.ax i64 
    local          mm_type.tx_switch.bx i64 
    local          mm_type.tx_switch.i i64 
    local          mm_type.tx_switch.u i64 
    procentry                 
    push           mm_type.tx_switch.p u64 
    pushptr                   u8 
    push           118        i64 
    jumpne         #18622     i64 
    push           mm_type.tx_switch.lv i64 
    jumpfalse      #18622     i64 
    setargs                   2 0
    push           0          u64 
    push           "&doswitch" u64 
    callproc       &mm_support.gerror 
#18622: 
    setargs                   3 0
    push           0          i64 
    push           4          i64 
    push           mm_type.tx_switch.a u64 
    callproc       &mm_type.tpass 
    setargs                   3 0
    push           2048       u64 
    push           0          i64 
    push           &mm_type.tx_switch.valueset 
    callproc       &memset    
    push           0          i64 
    pop            mm_type.tx_switch.u i64 
    push           mm_type.tx_switch.b u64 
    pop            mm_type.tx_switch.wt u64 
    jump           #18623     
#18624: 
    push           mm_type.tx_switch.wt u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_type.tx_switch.w u64 
    jump           #18625     
#18626: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_switch.w u64 
    callproc       &mm_type.tpass 
    setargs                   1 0
    push           mm_type.tx_switch.w u64 
    callfn         &mm_lib.isconstunit i64 
    jumptrue       #18627     i64 
    setargs                   2 0
    push           0          u64 
    push           "Switch not constant" u64 
    callproc       &mm_support.txerror 
#18627: 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_switch.w u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           8          i64 
    casejumpeq     #18628     i64 0
    popstack                  i64 
    jump           #18629     
#18628: 
    push           mm_type.tx_switch.w u64 
    push           16         
    pushptroff                u64 1 0
    push           16         
    pushptroff                i64 1 0
    pop            mm_type.tx_switch.ax i64 
    push           mm_type.tx_switch.w u64 
    push           24         
    pushptroff                u64 1 0
    push           16         
    pushptroff                i64 1 0
    pop            mm_type.tx_switch.bx i64 
!dorange::
#18630: 
#18631: 
    push           mm_type.tx_switch.ax i64 
    pop            mm_type.tx_switch.i i64 
    push           mm_type.tx_switch.i i64 
    push           mm_type.tx_switch.bx i64 
    jumpgt         #18632     i64 
#18633: 
    push           mm_type.tx_switch.i i64 
    push           0          i64 
    jumplt         #18634     i64 
    push           mm_type.tx_switch.i i64 
    push           2047       i64 
    jumple         #18635     i64 
#18634: 
    setargs                   2 0
    push           0          u64 
    push           "switch: value out of range" u64 
    callproc       &mm_support.txerror 
#18635: 
    push           &mm_type.tx_switch.valueset 
    push           mm_type.tx_switch.i i64 
    pushptroff                u8 1 0
    jumpfalse      #18636     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mm_type.tx_switch.i i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           0          u64 
    push           "Duplicate switch value" u64 
    callproc       &mm_support.txerror 
#18636: 
    push           1          i64 
    push           &mm_type.tx_switch.valueset 
    push           mm_type.tx_switch.i i64 
    popptroff                 u8 1 0
#18637: 
    forup          #18633     i64 1
    opnd           mm_type.tx_switch.i 
    opnd           mm_type.tx_switch.bx 
#18632: 
    jump           #18638     
#18629: 
    setargs                   3 0
    push           0          i64 
    push           4          i64 
    push           mm_type.tx_switch.w u64 
    callproc       &mm_type.coerceunit 
    setargs                   1 0
    push           mm_type.tx_switch.w u64 
    callproc       &mm_type.tevaluate 
    push           mm_type.tx_switch.w u64 
    pushptr                   u8 
    push           1          i64 
    jumpeq         #18639     i64 
    setargs                   2 0
    push           0          u64 
    push           "Switch value: not const int" u64 
    callproc       &mm_support.txerror 
#18639: 
    push           mm_type.tx_switch.w u64 
    push           16         
    pushptroff                i64 1 0
    store          mm_type.tx_switch.bx i64 
    pop            mm_type.tx_switch.ax i64 
    jump           #18630     
#18638: 
    push           mm_type.tx_switch.w u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_switch.w u64 
#18625: 
    push           mm_type.tx_switch.w u64 
    jumptrue       #18626     u64 
#18640: 
    setargs                   3 0
    push           mm_type.tx_switch.lv i64 
    push           mm_type.tx_switch.t i64 
    push           mm_type.tx_switch.wt u64 
    push           24         
    pushptroff                u64 1 0
    callproc       &mm_type.tpass 
    push           mm_type.tx_switch.t i64 
    push           26         i64 
    jumpne         #18641     i64 
    push           mm_type.tx_switch.u i64 
    jumpfalse      #18642     i64 
    setargs                   2 0
    push           mm_type.tx_switch.wt u64 
    push           24         
    pushptroff                u64 1 0
    push           48         
    pushptroff                i32 1 0
    push           mm_type.tx_switch.u i64 
    callfn         &mm_type.getdominantmode i64 
    pop            mm_type.tx_switch.u i64 
    jump           #18643     
#18642: 
    push           mm_type.tx_switch.wt u64 
    push           24         
    pushptroff                u64 1 0
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.tx_switch.u i64 
#18643: 
#18641: 
    push           mm_type.tx_switch.wt u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_switch.wt u64 
#18623: 
    push           mm_type.tx_switch.wt u64 
    jumptrue       #18624     u64 
#18644: 
    push           mm_type.tx_switch.c u64 
    jumpfalse      #18645     u64 
    setargs                   3 0
    push           mm_type.tx_switch.lv i64 
    push           mm_type.tx_switch.t i64 
    push           mm_type.tx_switch.c u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_switch.t i64 
    push           26         i64 
    jumpne         #18646     i64 
    setargs                   2 0
    push           mm_type.tx_switch.c u64 
    push           48         
    pushptroff                i32 1 0
    push           mm_type.tx_switch.u i64 
    callfn         &mm_type.getdominantmode i64 
    pop            mm_type.tx_switch.u i64 
#18646: 
    jump           #18647     
#18645: 
    push           mm_type.tx_switch.t i64 
    push           0          i64 
    jumpeq         #18648     i64 
    setargs                   2 0
    push           0          u64 
    push           "switch needs else" u64 
    callproc       &mm_support.txerror 
#18648: 
#18647: 
    push           mm_type.tx_switch.t i64 
    push           0          i64 
    jumpeq         #18649     i64 
    push           mm_type.tx_switch.b u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_type.tx_switch.w u64 
    jump           #18650     
#18651: 
    push           mm_type.tx_switch.t i64 
    push           26         i64 
    jumpne         #18652     i64 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_switch.u i64 
    push           mm_type.tx_switch.b u64 
    push           24         
    pushptroff                u64 1 0
    callproc       &mm_type.coerceunit 
#18652: 
    push           mm_type.tx_switch.b u64 
    push           24         
    pushptroff                u64 1 0
    push           48         
    pushptroff                i32 1 0
    push           mm_type.tx_switch.w u64 
    push           48         
    popptroff                 i32 1 0
    push           mm_type.tx_switch.w u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_switch.w u64 
#18650: 
    push           mm_type.tx_switch.w u64 
    jumptrue       #18651     u64 
#18653: 
    push           mm_type.tx_switch.t i64 
    push           26         i64 
    jumpne         #18654     i64 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_switch.u i64 
    push           mm_type.tx_switch.c u64 
    callproc       &mm_type.coerceunit 
    push           mm_type.tx_switch.u i64 
    push           mm_type.tx_switch.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #18655     
#18654: 
    push           mm_type.tx_switch.t i64 
    push           mm_type.tx_switch.p u64 
    push           48         
    popptroff                 i32 1 0
#18655: 
    jump           #18656     
#18649: 
    push           0          i64 
    push           mm_type.tx_switch.p u64 
    push           48         
    popptroff                 i32 1 0
#18656: 
#18657: 
    retproc                   
End


Proc mm_type.tx_addroffirst:
    param          mm_type.tx_addroffirst.p u64 
    param          mm_type.tx_addroffirst.a u64 
    param          mm_type.tx_addroffirst.t i64 
    local          mm_type.tx_addroffirst.m i64 
    procentry                 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_addroffirst.a u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_addroffirst.a u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.tx_addroffirst.m i64 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_addroffirst.m i64 
    pushptroff                i32 4 0
    push           11         i64 
    jumpeq         #18659     i64 
    setargs                   2 0
    push           0          u64 
    push           "&. ref[] expected" u64 
    callproc       &mm_support.txerror 
#18659: 
    setargs                   3 0
    push           0          i64 
    push           &mm_decls.tttarget 
    push           mm_type.tx_addroffirst.m i64 
    pushptroff                i32 4 0
    push           0          u64 
    callfn         &mm_lib.createrefmode i64 
    pop            mm_type.tx_addroffirst.m i64 
    push           mm_type.tx_addroffirst.a u64 
    pushptr                   u8 
    push           3          i64 
    jumpne         #18660     i64 
    push           1          i64 
    push           mm_type.tx_addroffirst.a u64 
    push           40         
    popptroff                 u8 1 0
#18660: 
    push           mm_type.tx_addroffirst.m i64 
    push           mm_type.tx_addroffirst.p u64 
    push           48         
    popptroff                 i32 1 0
#18661: 
    retproc                   
End


Proc mm_type.tx_return:
    param          mm_type.tx_return.p u64 
    param          mm_type.tx_return.a u64 
    param          mm_type.tx_return.t i64 
    local          mm_type.tx_return.m i64 
    local          mm_type.tx_return.nvalues i64 
    local          mm_type.tx_return.nret i64 
    local          mm_type.tx_return.i i64 
    local          mm_type.tx_return.pmult u64 
    local          mm_type.tx_return.q u64 
    procentry                 
    push           mm_decls.currproc u64 
    push           72         
    pushptroff                i32 1 0
    pop            mm_type.tx_return.m i64 
    push           mm_decls.currproc u64 
    push           116        
    pushptroff                u8 1 0
    pop            mm_type.tx_return.nret i64 
    push           &mm_decls.ttmult 
    push           mm_decls.currproc u64 
    push           72         
    pushptroff                i32 1 0
    pushptroff                u64 8 0
    pop            mm_type.tx_return.pmult u64 
    push           mm_type.tx_return.a u64 
    push           0          u64 
    jumpne         #18663     u64 
    push           mm_type.tx_return.nret i64 
    jumpfalse      #18664     i64 
    setargs                   2 0
    push           0          u64 
    push           "return value(s) missing" u64 
    callproc       &mm_support.txerror 
#18664: 
    jump           #18665     
    jump           #18666     
#18663: 
    push           mm_type.tx_return.nret i64 
    push           0          i64 
    jumpne         #18667     i64 
    setargs                   2 0
    push           0          u64 
    push           "Superfluous return value" u64 
    callproc       &mm_support.txerror 
#18667: 
#18666: 
    push           mm_type.tx_return.a u64 
    pushptr                   u8 
    push           19         i64 
    jumpne         #18668     i64 
    push           26         i64 
    push           mm_type.tx_return.a u64 
    push           0          
    popptroff                 u8 1 0
    push           mm_type.tx_return.a u64 
    push           40         
    pushptroff                u32 1 0
    push           mm_type.tx_return.nret i64 
    jumpeq         #18669     i64 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_return.m i64 
    pushptroff                i32 4 0
    push           13         i64 
    casejumpeq     #18670     i64 0
    push           11         i64 
    casejumpeq     #18670     i64 0
    popstack                  i64 
    jump           #18671     
#18670: 
    setargs                   2 0
    push           0          u64 
    push           "return constructor not supported" u64 
    callproc       &mm_support.txerror 
    jump           #18672     
#18671: 
    setargs                   2 0
    push           0          u64 
    push           "Wrong number of return values" u64 
    callproc       &mm_support.txerror 
#18672: 
#18669: 
    push           mm_type.tx_return.a u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_type.tx_return.q u64 
#18673: 
    push           1          i64 
    pop            mm_type.tx_return.i i64 
    push           mm_type.tx_return.nret i64 
    push           1          i64 
    jumplt         #18674     i64 
#18675: 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_return.pmult u64 
    push           mm_type.tx_return.i i64 
    pushptroff                i32 4 -4
    push           mm_type.tx_return.q u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_return.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_return.q u64 
#18676: 
    forup          #18675     i64 1
    opnd           mm_type.tx_return.i 
    opnd           mm_type.tx_return.nret 
#18674: 
    setargs                   2 0
    push           mm_type.tx_return.a u64 
    push           mm_type.tx_return.p u64 
    callproc       &mm_lib.deleteunit 
    push           mm_type.tx_return.t i64 
    push           0          i64 
    jumpne         #18677     i64 
    push           0          i64 
    push           mm_type.tx_return.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #18678     
#18677: 
    push           31         i64 
    push           mm_type.tx_return.p u64 
    push           48         
    popptroff                 i32 1 0
#18678: 
    jump           #18679     
#18668: 
    push           mm_type.tx_return.nret i64 
    push           1          i64 
    jumple         #18680     i64 
    setargs                   2 0
    push           0          u64 
    push           "RETERROR?" u64 
    callproc       &mm_support.txerror 
#18680: 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_return.m i64 
    push           mm_type.tx_return.a u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_return.t i64 
    push           0          i64 
    jumpne         #18681     i64 
    push           0          i64 
    push           mm_type.tx_return.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #18682     
#18681: 
    setargs                   2 0
    push           mm_type.tx_return.a u64 
    push           mm_type.tx_return.p u64 
    callproc       &mm_lib.deleteunit 
#18682: 
#18679: 
    push           &mm_decls.ttisshort 
    push           mm_type.tx_return.p u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    jumpfalse      #18683     i64 
    setargs                   2 0
    push           0          u64 
    push           "SHORT RET TYPE" u64 
    callproc       &mm_support.txerror 
#18683: 
#18665: 
    retproc                   
End


Proc mm_type.tx_dotindex:
    param          mm_type.tx_dotindex.p u64 
    param          mm_type.tx_dotindex.a u64 
    param          mm_type.tx_dotindex.b u64 
    param          mm_type.tx_dotindex.lv i64 
    local          mm_type.tx_dotindex.pmode i64 
    local          mm_type.tx_dotindex.i u64 
    local          mm_type.tx_dotindex.j u64 
    procentry                 
    setargs                   3 0
    push           mm_type.tx_dotindex.lv i64 
    push           26         i64 
    push           mm_type.tx_dotindex.a u64 
    callproc       &mm_type.tpass 
    push           2          i64 
    pop            mm_type.tx_dotindex.pmode i64 
    push           &mm_decls.ttisinteger 
    push           mm_type.tx_dotindex.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    jumptrue       #18685     i64 
    setargs                   2 0
    push           0          u64 
    push           "a.[i]: not int/str value" u64 
    callproc       &mm_support.txerror 
#18685: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_dotindex.b u64 
    callproc       &mm_type.tpass 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_dotindex.b u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           8          i64 
    casejumpeq     #18686     i64 0
    popstack                  i64 
    jump           #18687     
#18686: 
    push           mm_type.tx_dotindex.b u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_type.tx_dotindex.i u64 
    push           mm_type.tx_dotindex.b u64 
    push           24         
    pushptroff                u64 1 0
    pop            mm_type.tx_dotindex.j u64 
    push           mm_type.tx_dotindex.i u64 
    pushptr                   u8 
    push           mm_type.tx_dotindex.j u64 
    pushptr                   u8 
    jumpne         #18688     i64 
    push           mm_type.tx_dotindex.j u64 
    pushptr                   u8 
    push           1          i64 
    jumpne         #18688     i64 
    push           mm_type.tx_dotindex.i u64 
    push           16         
    pushptroff                i64 1 0
    push           mm_type.tx_dotindex.j u64 
    push           16         
    pushptroff                i64 1 0
    jumple         #18689     i64 
    push           mm_type.tx_dotindex.b u64 
    push           16         
    addrefoff                 u64 1 0
    push           mm_type.tx_dotindex.b u64 
    push           24         
    addrefoff                 u64 1 0
    swap                      u64 
#18689: 
#18688: 
    jump           #18690     
#18687: 
    setargs                   3 0
    push           0          i64 
    push           4          i64 
    push           mm_type.tx_dotindex.b u64 
    callproc       &mm_type.coerceunit 
#18690: 
    push           mm_type.tx_dotindex.pmode i64 
    push           mm_type.tx_dotindex.p u64 
    push           48         
    popptroff                 i32 1 0
#18691: 
    retproc                   
End


Proc mm_type.tx_slice:
    param          mm_type.tx_slice.p u64 
    param          mm_type.tx_slice.a u64 
    param          mm_type.tx_slice.b u64 
    procentry                 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_slice.a u64 
    callproc       &mm_type.tpass 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_slice.b u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_slice.a u64 
    push           48         
    pushptroff                i32 1 0
    push           10         i64 
    jumpne         #18693     i64 
    setargs                   4 0
    push           0          i64 
    push           1          i64 
    push           16         i64 
    push           mm_decls.currproc u64 
    callfn         &mm_lib.createslicemodek i64 
    push           mm_type.tx_slice.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #18694     
#18693: 
    setargs                   2 0
    push           1          i64 
    push           mm_type.tx_slice.a u64 
    callproc       &mm_type.deref 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_slice.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           11         i64 
    casejumpeq     #18695     i64 0
    push           12         i64 
    casejumpeq     #18696     i64 0
    popstack                  i64 
    jump           #18697     
#18695: 
    setargs                   4 0
    push           0          i64 
    push           1          i64 
    push           &mm_decls.tttarget 
    push           mm_type.tx_slice.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           mm_decls.currproc u64 
    callfn         &mm_lib.createslicemodek i64 
    push           mm_type.tx_slice.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #18698     
#18696: 
    push           mm_type.tx_slice.a u64 
    push           48         
    pushptroff                i32 1 0
    push           mm_type.tx_slice.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #18698     
#18697: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "STRMODE(A.MODE)=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    setargs                   2 0
    push           1          i64 
    push           mm_type.tx_slice.a u64 
    push           48         
    pushptroff                i32 1 0
    callfn         &mm_lib.strmode u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           0          u64 
    push           "a[i..j]: not array" u64 
    callproc       &mm_support.txerror 
#18698: 
#18694: 
#18699: 
    retproc                   
End


Proc mm_type.tx_assign:
    param          mm_type.tx_assign.p u64 
    param          mm_type.tx_assign.a u64 
    param          mm_type.tx_assign.b u64 
    param          mm_type.tx_assign.t i64 
    local          mm_type.tx_assign.m i64 
    local          mm_type.tx_assign.mm i64 
    local          mm_type.tx_assign.d u64 
    procentry                 
    push           mm_type.tx_assign.a u64 
    pushptr                   u8 
    push           19         i64 
    casejumpeq     #18701     i64 0
    push           53         i64 
    casejumpeq     #18702     i64 0
    push           54         i64 
    casejumpeq     #18702     i64 0
    popstack                  i64 
    jump           #18703     
#18701: 
    setargs                   2 0
    push           mm_type.tx_assign.b u64 
    push           mm_type.tx_assign.a u64 
    callproc       &mm_type.tx_multassign 
    jump           #18704     
#18702: 
    setargs                   4 0
    push           1          i64 
    push           mm_type.tx_assign.a u64 
    push           24         
    pushptroff                u64 1 0
    push           mm_type.tx_assign.a u64 
    push           16         
    pushptroff                u64 1 0
    push           mm_type.tx_assign.a u64 
    callproc       &mm_type.tx_dotindex 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_assign.a u64 
    push           48         
    pushptroff                i32 1 0
    push           mm_type.tx_assign.b u64 
    callproc       &mm_type.tpass 
    push           4          i64 
    push           mm_type.tx_assign.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #18704     
#18703: 
    push           mm_type.tx_assign.a u64 
    pushptr                   u8 
    push           3          i64 
    jumpne         #18705     i64 
    push           mm_type.tx_assign.a u64 
    push           16         
    pushptroff                u64 1 0
    push           92         
    pushptroff                u16 1 0
    push           6          i64 
    dotindex                  i64 
    jumpfalse      #18705     u64 
    push           mm_type.tx_assign.p u64 
    push           57         
    pushptroff                u8 1 0
    jumpfalse      #18705     i64 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_assign.a u64 
    callproc       &mm_type.tpass 
    jump           #18706     
#18705: 
    setargs                   3 0
    push           1          i64 
    push           26         i64 
    push           mm_type.tx_assign.a u64 
    callproc       &mm_type.tpass 
#18706: 
    push           mm_type.tx_assign.a u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.tx_assign.m i64 
    push           mm_type.tx_assign.t i64 
    push           0          i64 
    setne                     i64 
    push           mm_type.tx_assign.a u64 
    push           59         
    popptroff                 u8 1 0
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_assign.m i64 
    pushptroff                i32 4 0
    push           12         i64 
    jumpne         #18707     i64 
    push           mm_type.tx_assign.b u64 
    pushptr                   u8 
    push           19         i64 
    jumpne         #18707     i64 
    setargs                   4 0
    push           0          i64 
    push           mm_type.tx_assign.m i64 
    push           mm_type.tx_assign.b u64 
    push           16         
    pushptroff                u64 1 0
    push           mm_type.tx_assign.b u64 
    callproc       &mm_type.tx_makelist 
    jump           #18708     
#18707: 
    push           &mm_decls.ttisshort 
    push           mm_type.tx_assign.m i64 
    pushptroff                u8 1 0
    jumpfalse      #18709     i64 
    push           mm_type.tx_assign.t i64 
    push           0          i64 
    jumpeq         #18709     i64 
    push           mm_type.tx_assign.m i64 
    push           mm_type.tx_assign.p u64 
    push           52         
    popptroff                 i32 1 0
    setargs                   1 0
    push           mm_type.tx_assign.m i64 
    callfn         &mm_lib.gettypebase i64 
    push           mm_type.tx_assign.p u64 
    push           48         
    popptroff                 i32 1 0
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_assign.p u64 
    push           48         
    pushptroff                i32 1 0
    push           mm_type.tx_assign.b u64 
    callproc       &mm_type.tpass 
    jump           #18708     
#18709: 
    push           mm_type.tx_assign.b u64 
    push           60         
    pushptroff                u8 1 0
    push           105        i64 
    setjumpeq      #18710     i64 
    push           106        i64 
    setjumpne      #18711     i64 
#18710: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_assign.b u64 
    callproc       &mm_type.tpass 
    jump           #18712     
#18711: 
    push           mm_type.tx_assign.b u64 
    pushptr                   u8 
    push           130        i64 
    jumpne         #18713     i64 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_assign.m i64 
    push           mm_type.tx_assign.b u64 
    callproc       &mm_type.tpass 
    jump           #18712     
#18713: 
    push           mm_type.tx_assign.m i64 
    pop            mm_type.tx_assign.mm i64 
    push           &mm_decls.ttisshort 
    push           mm_type.tx_assign.m i64 
    pushptroff                u8 1 0
    jumpfalse      #18714     i64 
    setargs                   1 0
    push           mm_type.tx_assign.m i64 
    callfn         &mm_lib.gettypebase i64 
    pop            mm_type.tx_assign.mm i64 
#18714: 
    push           mm_type.tx_assign.b u64 
    pushptr                   u8 
    push           63         i64 
    casejumpeq     #18715     i64 0
    push           19         i64 
    casejumpeq     #18716     i64 0
    popstack                  i64 
    jump           #18717     
#18715: 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_assign.mm i64 
    push           mm_type.tx_assign.b u64 
    callproc       &mm_type.tpass 
    jump           #18718     
#18716: 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_assign.m i64 
    push           mm_type.tx_assign.b u64 
    callproc       &mm_type.tpass 
    jump           #18718     
#18717: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_assign.b u64 
    callproc       &mm_type.tpass 
#18718: 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_assign.b u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           31         i64 
    jumpne         #18719     i64 
    setargs                   1 0
    push           mm_type.tx_assign.b u64 
    callfn         &mm_lib.getprocretmodes u64 
    pop            mm_type.tx_assign.d u64 
    setargs                   3 0
    push           0          i64 
    push           &mm_decls.ttmult 
    push           mm_type.tx_assign.d u64 
    push           72         
    pushptroff                i32 1 0
    pushptroff                u64 8 0
    push           1          i64 
    pushptroff                i32 4 -4
    push           mm_type.tx_assign.a u64 
    callproc       &mm_type.coerceunit 
    push           mm_type.tx_assign.a u64 
    push           48         
    pushptroff                i32 1 0
    push           mm_type.tx_assign.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #18720     
#18719: 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_assign.mm i64 
    push           mm_type.tx_assign.b u64 
    callproc       &mm_type.coerceunit 
    push           mm_type.tx_assign.mm i64 
    push           mm_type.tx_assign.p u64 
    push           48         
    popptroff                 i32 1 0
#18720: 
#18712: 
#18708: 
#18704: 
#18721: 
    retproc                   
End


Proc mm_type.tx_multassign:
    param          mm_type.tx_multassign.a u64 
    param          mm_type.tx_multassign.b u64 
    local          mm_type.tx_multassign.p u64 
    local          mm_type.tx_multassign.q u64 
    local          mm_type.tx_multassign.lhs u64 
    local          mm_type.tx_multassign.rhs u64 
    local          mm_type.tx_multassign.nretmodes i64 
    local          mm_type.tx_multassign.i i64 
    local          mm_type.tx_multassign.pmult u64 
    local          mm_type.tx_multassign.d u64 
    procentry                 
    push           0          i64 
    pop            mm_type.tx_multassign.nretmodes i64 
    push           mm_type.tx_multassign.b u64 
    pushptr                   u8 
    push           19         i64 
    jumpeq         #18723     i64 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_multassign.b u64 
    callproc       &mm_type.tpass 
    setargs                   1 0
    push           mm_type.tx_multassign.b u64 
    callfn         &mm_lib.getprocretmodes u64 
    pop            mm_type.tx_multassign.d u64 
    push           mm_type.tx_multassign.d u64 
    push           116        
    pushptroff                u8 1 0
    pop            mm_type.tx_multassign.nretmodes i64 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_multassign.d u64 
    push           72         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           31         i64 
    jumpeq         #18724     i64 
    setargs                   2 0
    push           0          u64 
    push           "Not a tuple" u64 
    callproc       &mm_support.txerror 
#18724: 
    push           mm_type.tx_multassign.a u64 
    push           40         
    pushptroff                u32 1 0
    push           mm_type.tx_multassign.nretmodes i64 
    jumple         #18725     i64 
    setargs                   2 0
    push           0          u64 
    push           "mult ass/mult returns don't agree in number" u64 
    callproc       &mm_support.txerror 
#18725: 
    push           mm_type.tx_multassign.nretmodes i64 
    push           1          i64 
    jumpgt         #18726     i64 
    setargs                   2 0
    push           0          u64 
    push           "mult ass rhs needs fn yielding 2+ values" u64 
    callproc       &mm_support.txerror 
#18726: 
    push           mm_type.tx_multassign.a u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_type.tx_multassign.p u64 
    push           &mm_decls.ttmult 
    push           mm_type.tx_multassign.d u64 
    push           72         
    pushptroff                i32 1 0
    pushptroff                u64 8 0
    pop            mm_type.tx_multassign.pmult u64 
    push           1          i64 
    pop            mm_type.tx_multassign.i i64 
    jump           #18727     
#18728: 
    setargs                   3 0
    push           1          i64 
    push           26         i64 
    push           mm_type.tx_multassign.p u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_multassign.p u64 
    push           48         
    pushptroff                i32 1 0
    push           mm_type.tx_multassign.pmult u64 
    push           &mm_type.tx_multassign.i 
    loadincr                  i64 1
    pushptroff                i32 4 -4
    jumpeq         #18729     i64 
    setargs                   2 0
    push           0          u64 
    push           "mult ass/mult fn needs exact type match" u64 
    callproc       &mm_support.txerror 
#18729: 
    push           mm_type.tx_multassign.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_multassign.p u64 
#18727: 
    push           mm_type.tx_multassign.p u64 
    jumptrue       #18728     u64 
#18730: 
    jump           #18731     
#18723: 
    push           mm_type.tx_multassign.a u64 
    push           40         
    pushptroff                u32 1 0
    push           mm_type.tx_multassign.b u64 
    push           40         
    pushptroff                u32 1 0
    jumpeq         #18732     i64 
    setargs                   2 0
    push           0          u64 
    push           "Mult assign: count mismatch" u64 
    callproc       &mm_support.txerror 
#18732: 
    push           mm_type.tx_multassign.a u64 
    push           40         
    pushptroff                u32 1 0
    push           0          i64 
    jumpne         #18733     i64 
    setargs                   2 0
    push           0          u64 
    push           "Invalid assignment" u64 
    callproc       &mm_support.txerror 
#18733: 
    push           mm_type.tx_multassign.b u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_type.tx_multassign.rhs u64 
    push           mm_type.tx_multassign.a u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_type.tx_multassign.lhs u64 
    push           mm_type.tx_multassign.lhs u64 
    pop            mm_type.tx_multassign.p u64 
    jump           #18734     
#18735: 
    setargs                   3 0
    push           1          i64 
    push           26         i64 
    push           mm_type.tx_multassign.p u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_multassign.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_multassign.p u64 
#18734: 
    push           mm_type.tx_multassign.p u64 
    jumptrue       #18735     u64 
#18736: 
    push           mm_type.tx_multassign.lhs u64 
    pop            mm_type.tx_multassign.p u64 
    push           mm_type.tx_multassign.rhs u64 
    pop            mm_type.tx_multassign.q u64 
    jump           #18737     
#18738: 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_multassign.p u64 
    push           48         
    pushptroff                i32 1 0
    push           mm_type.tx_multassign.q u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_multassign.p u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_multassign.p u64 
    push           mm_type.tx_multassign.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_multassign.q u64 
#18737: 
    push           mm_type.tx_multassign.q u64 
    jumptrue       #18738     u64 
#18739: 
#18731: 
    retproc                   
End


Proc mm_type.tx_exprlist:
    param          mm_type.tx_exprlist.p u64 
    param          mm_type.tx_exprlist.a u64 
    param          mm_type.tx_exprlist.t i64 
    local          mm_type.tx_exprlist.q u64 
    procentry                 
    push           mm_type.tx_exprlist.a u64 
    pop            mm_type.tx_exprlist.q u64 
    jump           #18741     
#18742: 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_exprlist.q u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_exprlist.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_type.tx_exprlist.q u64 
#18741: 
    push           mm_type.tx_exprlist.q u64 
    jumpfalse      #18743     u64 
    push           mm_type.tx_exprlist.q u64 
    push           8          
    pushptroff                u64 1 0
    jumptrue       #18742     u64 
#18743: 
#18744: 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tx_exprlist.t i64 
    push           mm_type.tx_exprlist.q u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_exprlist.q u64 
    push           48         
    pushptroff                i32 1 0
    push           mm_type.tx_exprlist.p u64 
    push           48         
    popptroff                 i32 1 0
#18745: 
    retproc                   
End


Proc mm_type.twiden:
    param          mm_type.twiden.p u64 
    param          mm_type.twiden.lv i64 
    local          mm_type.twiden.m i64 
    local          mm_type.twiden.u i64 
    local          mm_type.twiden.mbase i64 
    procentry                 
    push           &mm_decls.ttbasetype 
    push           mm_type.twiden.p u64 
    push           48         
    pushptroff                i32 1 0
    store          mm_type.twiden.m i64 
    pushptroff                i32 4 0
    pop            mm_type.twiden.mbase i64 
    push           mm_type.twiden.mbase i64 
    push           0          i64 
    jumpne         #18747     i64 
    jump           #18748     
#18747: 
    push           mm_type.twiden.lv i64 
    jumpfalse      #18749     i64 
    jump           #18748     
#18749: 
    push           &mm_decls.ttisshort 
    push           mm_type.twiden.mbase i64 
    pushptroff                u8 1 0
    jumptrue       #18750     i64 
    jump           #18748     
#18750: 
    push           mm_type.twiden.p u64 
    pushptr                   u8 
    push           3          i64 
    casejumpeq     #18751     i64 0
    push           57         i64 
    casejumpeq     #18751     i64 0
    push           48         i64 
    casejumpeq     #18751     i64 0
    push           51         i64 
    casejumpeq     #18751     i64 0
    push           96         i64 
    casejumpeq     #18752     i64 0
    push           31         i64 
    casejumpeq     #18752     i64 0
    popstack                  i64 
    jump           #18753     
#18751: 
    push           mm_type.twiden.m i64 
    push           mm_type.twiden.p u64 
    push           52         
    popptroff                 i32 1 0
    setargs                   1 0
    push           mm_type.twiden.m i64 
    callfn         &mm_lib.gettypebase i64 
    push           mm_type.twiden.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #18754     
#18752: 
    push           mm_type.twiden.m i64 
    push           mm_type.twiden.p u64 
    push           52         
    popptroff                 i32 1 0
    setargs                   1 0
    push           mm_type.twiden.m i64 
    callfn         &mm_lib.gettypebase i64 
    push           mm_type.twiden.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #18754     
#18753: 
    setargs                   4 0
    push           0          u64 
    push           "*"        u64 
    push           0          i64 
    push           mm_type.twiden.p u64 
    callproc       &mm_diags.printunit 
    setargs                   3 0
    push           0          u64 
    push           &mm_tables.jtagnames 
    push           mm_type.twiden.p u64 
    pushptr                   u8 
    pushptroff                u64 8 0
    push           "widen? #" u64 
    callproc       &mm_support.txerror_s 
#18754: 
#18748: 
    retproc                   
End


Proc mm_type.removeaddrof:
    param          mm_type.removeaddrof.p u64 
    procentry                 
    push           mm_type.removeaddrof.p u64 
    push           0          u64 
    jumpne         #18756     u64 
    jump           #18757     
#18756: 
    push           mm_type.removeaddrof.p u64 
    pushptr                   u8 
    push           59         i64 
    casejumpeq     #18758     i64 0
    push           100        i64 
    casejumpeq     #18759     i64 0
    popstack                  i64 
    jump           #18760     
#18758: 
    setargs                   2 0
    push           mm_type.removeaddrof.p u64 
    push           16         
    pushptroff                u64 1 0
    push           mm_type.removeaddrof.p u64 
    callproc       &mm_lib.deleteunit 
    jump           #18761     
#18759: 
    setargs                   1 0
    push           mm_type.removeaddrof.p u64 
    push           24         
    pushptroff                u64 1 0
    callproc       &mm_type.removeaddrof 
    setargs                   1 0
    push           mm_type.removeaddrof.p u64 
    push           32         
    pushptroff                u64 1 0
    callproc       &mm_type.removeaddrof 
    jump           #18761     
#18760: 
    setargs                   2 0
    push           0          u64 
    push           "dot/flex: complex record expr, can't remove &" u64 
    callproc       &mm_support.txerror 
#18761: 
#18757: 
    retproc                   
End


Proc mm_type.tstringslice:
    param          mm_type.tstringslice.p u64 
    param          mm_type.tstringslice.slicemode i64 
    local          mm_type.tstringslice.a u64 
    local          mm_type.tstringslice.b u64 
    local          mm_type.tstringslice.prange u64 
    local          mm_type.tstringslice.length i64 
    procentry                 
    push           &mm_decls.tttarget 
    push           mm_type.tstringslice.slicemode i64 
    pushptroff                i32 4 0
    push           16         i64 
    jumpeq         #18763     i64 
    setargs                   2 0
    push           0          u64 
    push           "Not char slice" u64 
    callproc       &mm_support.txerror 
#18763: 
    push           mm_type.tstringslice.p u64 
    pop            mm_type.tstringslice.a u64 
    setargs                   2 0
    push           50         i64 
    push           mm_type.tstringslice.p u64 
    callproc       &mm_lib.insertunit 
    push           mm_type.tstringslice.p u64 
    push           16         
    pushptroff                u64 1 0
    pushptr                   u8 
    push           1          i64 
    jumpne         #18764     i64 
    jump           #18765     
#18764: 
    setargs                   2 0
    push           0          i64 
    push           mm_type.tstringslice.p u64 
    push           16         
    pushptroff                u64 1 0
    callfn         &mm_lib.duplunit u64 
    pop            mm_type.tstringslice.b u64 
    setargs                   2 0
    push           37         i64 
    push           mm_type.tstringslice.b u64 
    callproc       &mm_lib.insertunit 
    setargs                   3 0
    push           mm_type.tstringslice.b u64 
    setargs                   2 0
    push           4          i64 
    push           1          u64 
    callfn         &mm_lib.createconstunit u64 
    push           20         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_type.tstringslice.prange u64 
    push           8          i64 
    push           mm_type.tstringslice.prange u64 
    push           48         
    popptroff                 i32 1 0
    push           mm_type.tstringslice.prange u64 
    push           mm_type.tstringslice.p u64 
    push           24         
    popptroff                 u64 1 0
    push           1          i64 
    push           mm_type.tstringslice.p u64 
    push           2          
    popptroff                 u8 1 0
#18765: 
    push           mm_type.tstringslice.slicemode i64 
    push           mm_type.tstringslice.p u64 
    push           48         
    popptroff                 i32 1 0
#18766: 
    retproc                   
End


Proc mm_type.tx_bitfield:
    param          mm_type.tx_bitfield.p u64 
    param          mm_type.tx_bitfield.a u64 
    param          mm_type.tx_bitfield.lv i64 
    local          mm_type.tx_bitfield.i i64 
    local          mm_type.tx_bitfield.j i64 
    local          mm_type.tx_bitfield.bitsize i64 
    local          mm_type.tx_bitfield.topbit i64 
    local          mm_type.tx_bitfield.r u64 
    procentry                 
    setargs                   3 0
    push           mm_type.tx_bitfield.lv i64 
    push           26         i64 
    push           mm_type.tx_bitfield.a u64 
    callproc       &mm_type.tpass 
    push           &mm_decls.ttisinteger 
    push           mm_type.tx_bitfield.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    jumptrue       #18768     i64 
    push           &mm_decls.ttisref 
    push           mm_type.tx_bitfield.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    jumptrue       #18768     i64 
    setargs                   2 0
    push           0          u64 
    push           "Int/ref needed" u64 
    callproc       &mm_support.txerror 
#18768: 
    push           &mm_decls.ttsize 
    push           &mm_decls.ttbasetype 
    push           mm_type.tx_bitfield.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    pushptroff                i32 4 0
    push           8          i64 
    mul                       i64 
    pop            mm_type.tx_bitfield.bitsize i64 
    push           mm_type.tx_bitfield.bitsize i64 
    push           1          i64 
    sub                       i64 
    pop            mm_type.tx_bitfield.topbit i64 
    push           mm_type.tx_bitfield.p u64 
    push           40         
    pushptroff                i16 1 0
    push           2          i64 
    casejumpeq     #18769     i64 0
    push           1          i64 
    casejumpeq     #18770     i64 0
    push           4          i64 
    casejumpeq     #18771     i64 0
    push           7          i64 
    casejumpeq     #18772     i64 0
    push           8          i64 
    casejumpeq     #18772     i64 0
    push           3          i64 
    casejumpeq     #18773     i64 0
    push           6          i64 
    casejumpeq     #18774     i64 0
    push           5          i64 
    casejumpeq     #18775     i64 0
    popstack                  i64 
    jump           #18776     
#18769: 
    push           0          i64 
    pop            mm_type.tx_bitfield.i i64 
    push           7          i64 
    pop            mm_type.tx_bitfield.j i64 
    jump           #18777     
#18770: 
    push           mm_type.tx_bitfield.topbit i64 
    pop            mm_type.tx_bitfield.j i64 
    push           mm_type.tx_bitfield.topbit i64 
    push           7          i64 
    sub                       i64 
    pop            mm_type.tx_bitfield.i i64 
    jump           #18777     
#18771: 
    push           0          i64 
    store          mm_type.tx_bitfield.j i64 
    pop            mm_type.tx_bitfield.i i64 
    jump           #18777     
#18772: 
    push           mm_type.tx_bitfield.lv i64 
    jumpfalse      #18778     i64 
    setargs                   2 0
    push           0          u64 
    push           "Can't assign" u64 
    callproc       &mm_support.txerror 
#18778: 
    push           0          i64 
    store          mm_type.tx_bitfield.j i64 
    pop            mm_type.tx_bitfield.i i64 
    jump           #18777     
#18773: 
    push           mm_type.tx_bitfield.topbit i64 
    store          mm_type.tx_bitfield.j i64 
    pop            mm_type.tx_bitfield.i i64 
    jump           #18777     
#18774: 
    push           0          i64 
    pop            mm_type.tx_bitfield.i i64 
    push           mm_type.tx_bitfield.bitsize i64 
    push           2          i64 
    idiv                      i64 
    push           1          i64 
    sub                       i64 
    pop            mm_type.tx_bitfield.j i64 
    jump           #18777     
#18775: 
    push           mm_type.tx_bitfield.bitsize i64 
    push           2          i64 
    idiv                      i64 
    pop            mm_type.tx_bitfield.i i64 
    push           mm_type.tx_bitfield.topbit i64 
    pop            mm_type.tx_bitfield.j i64 
    jump           #18777     
#18776: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           mm_type.tx_bitfield.p u64 
    push           40         
    pushptroff                i16 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           0          u64 
    push           "BITFIELD" u64 
    callproc       &mm_support.txerror 
#18777: 
    push           mm_type.tx_bitfield.i i64 
    push           mm_type.tx_bitfield.j i64 
    jumpne         #18779     i64 
    push           53         i64 
    push           mm_type.tx_bitfield.p u64 
    push           0          
    popptroff                 u8 1 0
    setargs                   2 0
    push           4          i64 
    push           mm_type.tx_bitfield.i u64 
    callfn         &mm_lib.createconstunit u64 
    push           mm_type.tx_bitfield.p u64 
    push           24         
    popptroff                 u64 1 0
    push           1          i64 
    push           mm_type.tx_bitfield.p u64 
    push           2          
    popptroff                 u8 1 0
    push           1          i64 
    push           mm_type.tx_bitfield.p u64 
    push           59         
    popptroff                 u8 1 0
    push           1          i64 
    push           mm_type.tx_bitfield.p u64 
    push           24         
    pushptroff                u64 1 0
    push           59         
    popptroff                 u8 1 0
    push           mm_type.tx_bitfield.p u64 
    push           40         
    pushptroff                i16 1 0
    push           8          i64 
    jumpne         #18780     i64 
    push           2          i64 
    push           mm_type.tx_bitfield.p u64 
    push           48         
    popptroff                 i32 1 0
    setargs                   1 0
    push           mm_type.tx_bitfield.p u64 
    callproc       &mm_type.addnotl 
#18780: 
    jump           #18781     
#18779: 
    setargs                   3 0
    setargs                   2 0
    push           4          i64 
    push           mm_type.tx_bitfield.j u64 
    callfn         &mm_lib.createconstunit u64 
    setargs                   2 0
    push           4          i64 
    push           mm_type.tx_bitfield.i u64 
    callfn         &mm_lib.createconstunit u64 
    push           20         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_type.tx_bitfield.r u64 
    push           1          i64 
    push           mm_type.tx_bitfield.r u64 
    push           16         
    pushptroff                u64 1 0
    push           59         
    popptroff                 u8 1 0
    push           1          i64 
    push           mm_type.tx_bitfield.r u64 
    push           24         
    pushptroff                u64 1 0
    push           59         
    popptroff                 u8 1 0
    push           8          i64 
    push           mm_type.tx_bitfield.r u64 
    push           48         
    popptroff                 i32 1 0
    push           54         i64 
    push           mm_type.tx_bitfield.p u64 
    push           0          
    popptroff                 u8 1 0
    push           1          i64 
    push           mm_type.tx_bitfield.p u64 
    push           2          
    popptroff                 u8 1 0
    push           mm_type.tx_bitfield.r u64 
    push           mm_type.tx_bitfield.p u64 
    push           24         
    popptroff                 u64 1 0
#18781: 
    push           2          i64 
    push           mm_type.tx_bitfield.p u64 
    push           48         
    popptroff                 i32 1 0
#18782: 
    retproc                   
End


Proc mm_type.deref:
    param          mm_type.deref.a u64 
    param          mm_type.deref.needres i64 
    local          mm_type.deref.abasemode i64 
    local          mm_type.deref.tmode i64 
    procentry                 
    push           &mm_decls.ttbasetype 
    push           mm_type.deref.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    pop            mm_type.deref.abasemode i64 
    jump           #18784     
#18785: 
    push           &mm_decls.tttarget 
    push           mm_type.deref.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    pop            mm_type.deref.tmode i64 
    setargs                   2 0
    push           57         i64 
    push           mm_type.deref.a u64 
    callproc       &mm_lib.insertunit 
    push           mm_type.deref.tmode i64 
    push           mm_type.deref.a u64 
    push           48         
    popptroff                 i32 1 0
    push           &mm_decls.ttbasetype 
    push           mm_type.deref.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    pop            mm_type.deref.abasemode i64 
#18784: 
    push           mm_type.deref.abasemode i64 
    push           9          i64 
    jumpeq         #18785     i64 
#18786: 
#18787: 
    retproc                   
End


Proc mm_type.tmethodcall:
    param          mm_type.tmethodcall.p u64 
    param          mm_type.tmethodcall.pdot u64 
    param          mm_type.tmethodcall.pargs u64 
    local          mm_type.tmethodcall.mrec i64 
    local          mm_type.tmethodcall.prec u64 
    local          mm_type.tmethodcall.pfield u64 
    local          mm_type.tmethodcall.pfunc u64 
    local          mm_type.tmethodcall.d u64 
    local          mm_type.tmethodcall.e u64 
    procentry                 
    push           mm_type.tmethodcall.pdot u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_type.tmethodcall.prec u64 
    push           mm_type.tmethodcall.pdot u64 
    push           24         
    pushptroff                u64 1 0
    pop            mm_type.tmethodcall.pfield u64 
    push           mm_type.tmethodcall.prec u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.tmethodcall.mrec i64 
    push           mm_type.tmethodcall.pfield u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_type.tmethodcall.d u64 
    setargs                   2 0
    push           mm_type.tmethodcall.mrec i64 
    push           mm_type.tmethodcall.d u64 
    callfn         &mm_type.resolvefield u64 
    pop            mm_type.tmethodcall.e u64 
    push           mm_type.tmethodcall.e u64 
    push           0          u64 
    jumpne         #18789     u64 
    setargs                   3 0
    push           0          u64 
    push           mm_type.tmethodcall.d u64 
    pushptr                   u64 
    push           "Can't resolve method:" u64 
    callproc       &mm_support.txerror_s 
#18789: 
    setargs                   1 0
    push           mm_type.tmethodcall.e u64 
    callfn         &mm_lib.createname u64 
    pop            mm_type.tmethodcall.pfunc u64 
    push           mm_type.tmethodcall.e u64 
    push           72         
    pushptroff                i32 1 0
    push           mm_type.tmethodcall.pfunc u64 
    push           48         
    popptroff                 i32 1 0
    push           mm_type.tmethodcall.pargs u64 
    push           mm_type.tmethodcall.prec u64 
    push           8          
    popptroff                 u64 1 0
    push           mm_type.tmethodcall.pfunc u64 
    push           mm_type.tmethodcall.p u64 
    push           16         
    popptroff                 u64 1 0
    push           mm_type.tmethodcall.prec u64 
    push           mm_type.tmethodcall.p u64 
    push           24         
    popptroff                 u64 1 0
#18790: 
    retproc                   
End


Proc mm_type.softconvert: i64
    param          mm_type.softconvert.s i64 
    param          mm_type.softconvert.t i64 
    param          mm_type.softconvert.hard i64 
    local          mm_type.softconvert.sbase i64 
    local          mm_type.softconvert.tbase i64 
    procentry                 
    push           mm_type.softconvert.s i64 
    push           mm_type.softconvert.t i64 
    jumpne         #18792     i64 
    push           181        i64 
    setret                    i64 
    jump           #18793     
#18792: 
    push           &mm_decls.ttbasetype 
    push           mm_type.softconvert.s i64 
    pushptroff                i32 4 0
    pop            mm_type.softconvert.sbase i64 
    push           &mm_decls.ttbasetype 
    push           mm_type.softconvert.t i64 
    pushptroff                i32 4 0
    pop            mm_type.softconvert.tbase i64 
    push           mm_type.softconvert.sbase i64 
    push           7          i64 
    jumpgt         #18794     i64 
    push           mm_type.softconvert.tbase i64 
    push           7          i64 
    jumpgt         #18794     i64 
    push           &mm_tables.softconvtable 
    push           mm_type.softconvert.sbase i64 
    addrefoff                 block:56 56 -56
    push           mm_type.softconvert.tbase i64 
    pushptroff                i64 8 -8
    setret                    i64 
    jump           #18793     
#18794: 
    push           mm_type.softconvert.sbase i64 
    push           mm_type.softconvert.tbase i64 
    jumpne         #18795     i64 
    push           mm_type.softconvert.tbase i64 
    push           9          i64 
    jumpne         #18795     i64 
    push           mm_type.softconvert.s i64 
    push           9          i64 
    jumpeq         #18796     i64 
    push           mm_type.softconvert.t i64 
    push           9          i64 
    jumpne         #18797     i64 
#18796: 
    push           181        i64 
    setret                    i64 
    jump           #18793     
#18797: 
    startmult                 
    setargs                   2 0
    push           mm_type.softconvert.t i64 
    push           mm_type.softconvert.s i64 
    callfn         &mm_type.comparemodes i64 
    jumpfalse      #18798     i64 
    push           181        i64 
    resetmult                 
    jump           #18799     
#18798: 
    push           211        i64 
    endmult                   
#18799: 
    setret                    i64 
    jump           #18793     
#18795: 
    push           mm_type.softconvert.sbase i64 
    push           11         i64 
    jumpne         #18800     i64 
    push           mm_type.softconvert.t i64 
    push           10         i64 
    jumpne         #18800     i64 
    push           &mm_decls.tttarget 
    push           mm_type.softconvert.s i64 
    pushptroff                i32 4 0
    push           16         i64 
    jumpne         #18800     i64 
    push           215        i64 
    setret                    i64 
    jump           #18793     
#18800: 
    push           mm_type.softconvert.hard i64 
    jumptrue       #18801     i64 
    push           mm_type.softconvert.sbase i64 
    push           7          i64 
    jumpgt         #18801     i64 
    push           &mm_decls.ttisshort 
    push           mm_type.softconvert.tbase i64 
    pushptroff                u8 1 0
    jumpfalse      #18801     i64 
    push           214        i64 
    setret                    i64 
    jump           #18793     
#18801: 
    push           mm_type.softconvert.sbase i64 
    push           mm_type.softconvert.tbase i64 
    jumpne         #18802     i64 
    push           mm_type.softconvert.tbase i64 
    push           11         i64 
    jumpne         #18802     i64 
    setargs                   2 0
    push           mm_type.softconvert.t i64 
    push           mm_type.softconvert.s i64 
    callfn         &mm_type.comparemodes i64 
    jumpfalse      #18803     i64 
    push           181        i64 
    setret                    i64 
    jump           #18793     
#18803: 
#18802: 
    push           mm_type.softconvert.sbase i64 
    push           11         i64 
    jumpne         #18804     i64 
    push           mm_type.softconvert.tbase i64 
    push           12         i64 
    jumpne         #18804     i64 
    setargs                   2 0
    push           &mm_decls.tttarget 
    push           mm_type.softconvert.t i64 
    pushptroff                i32 4 0
    push           &mm_decls.tttarget 
    push           mm_type.softconvert.s i64 
    pushptroff                i32 4 0
    callfn         &mm_type.comparemodes i64 
    jumptrue       #18805     i64 
    setargs                   2 0
    push           0          u64 
    push           "Bad array to slice" u64 
    callproc       &mm_support.txerror 
#18805: 
    push           212        i64 
    setret                    i64 
    jump           #18793     
#18804: 
    push           mm_type.softconvert.s i64 
    push           10         i64 
    jumpne         #18806     i64 
    push           mm_type.softconvert.tbase i64 
    push           12         i64 
    jumpne         #18806     i64 
    push           &mm_decls.tttarget 
    push           mm_type.softconvert.t i64 
    pushptroff                i32 4 0
    push           21         i64 
    setjumpeq      #18807     i64 
    push           16         i64 
    setjumpeqx     #18807     i64 
    setargs                   2 0
    push           0          u64 
    push           "Bad string to slice" u64 
    callproc       &mm_support.txerror 
#18807: 
    push           213        i64 
    setret                    i64 
    jump           #18793     
#18806: 
    push           mm_type.softconvert.sbase i64 
    push           12         i64 
    jumpne         #18808     i64 
    push           mm_type.softconvert.tbase i64 
    push           12         i64 
    jumpne         #18808     i64 
    setargs                   2 0
    push           mm_type.softconvert.t i64 
    push           mm_type.softconvert.s i64 
    callfn         &mm_type.comparemodes i64 
    jumpfalse      #18809     i64 
    push           181        i64 
    setret                    i64 
    jump           #18793     
#18809: 
#18808: 
    push           211        i64 
    setret                    i64 
    jump           #18793     
#18793: 
    retfn                     i64 
End


Proc mm_type.comparemodes: i64
    param          mm_type.comparemodes.s i64 
    param          mm_type.comparemodes.t i64 
    local          mm_type.comparemodes.sbase i64 
    local          mm_type.comparemodes.tbase i64 
    local          mm_type.comparemodes.starg i64 
    local          mm_type.comparemodes.ttarg i64 
    local          mm_type.comparemodes.d u64 
    local          mm_type.comparemodes.e u64 
    procentry                 
    push           mm_type.comparemodes.s i64 
    push           mm_type.comparemodes.t i64 
    jumpne         #18811     i64 
    push           1          i64 
    setret                    i64 
    jump           #18812     
#18811: 
    push           &mm_decls.ttbasetype 
    push           mm_type.comparemodes.s i64 
    pushptroff                i32 4 0
    pop            mm_type.comparemodes.sbase i64 
    push           &mm_decls.ttbasetype 
    push           mm_type.comparemodes.t i64 
    pushptroff                i32 4 0
    pop            mm_type.comparemodes.tbase i64 
    push           mm_type.comparemodes.sbase i64 
    push           9          i64 
    casejumpeq     #18813     i64 0
    push           11         i64 
    casejumpeq     #18814     i64 0
    push           12         i64 
    casejumpeq     #18815     i64 0
    push           27         i64 
    casejumpeq     #18816     i64 0
    popstack                  i64 
    jump           #18817     
#18813: 
    push           &mm_decls.tttarget 
    push           mm_type.comparemodes.s i64 
    pushptroff                i32 4 0
    pop            mm_type.comparemodes.starg i64 
    push           &mm_decls.tttarget 
    push           mm_type.comparemodes.t i64 
    pushptroff                i32 4 0
    pop            mm_type.comparemodes.ttarg i64 
    push           mm_type.comparemodes.starg i64 
    push           0          i64 
    jumpeq         #18818     i64 
    push           mm_type.comparemodes.ttarg i64 
    push           0          i64 
    jumpne         #18819     i64 
#18818: 
    push           1          i64 
    setret                    i64 
    jump           #18812     
#18819: 
    setargs                   2 0
    push           &mm_decls.tttarget 
    push           mm_type.comparemodes.t i64 
    pushptroff                i32 4 0
    push           &mm_decls.tttarget 
    push           mm_type.comparemodes.s i64 
    pushptroff                i32 4 0
    callfn         &mm_type.comparemodes i64 
    setret                    i64 
    jump           #18812     
    jump           #18820     
#18814: 
    setargs                   2 0
    push           &mm_decls.tttarget 
    push           mm_type.comparemodes.t i64 
    pushptroff                i32 4 0
    push           &mm_decls.tttarget 
    push           mm_type.comparemodes.s i64 
    pushptroff                i32 4 0
    callfn         &mm_type.comparemodes i64 
    jumpfalse      #18821     i64 
    push           &mm_decls.ttlength 
    push           mm_type.comparemodes.s i64 
    pushptroff                i32 4 0
    push           &mm_decls.ttlength 
    push           mm_type.comparemodes.t i64 
    pushptroff                i32 4 0
    jumpeq         #18822     i64 
    push           &mm_decls.ttlength 
    push           mm_type.comparemodes.s i64 
    pushptroff                i32 4 0
    push           0          i64 
    jumpeq         #18822     i64 
    push           &mm_decls.ttlength 
    push           mm_type.comparemodes.t i64 
    pushptroff                i32 4 0
    push           0          i64 
    jumpne         #18821     i64 
#18822: 
    push           1          i64 
    setret                    i64 
    jump           #18812     
#18821: 
    jump           #18820     
#18815: 
    setargs                   2 0
    push           &mm_decls.tttarget 
    push           mm_type.comparemodes.t i64 
    pushptroff                i32 4 0
    push           &mm_decls.tttarget 
    push           mm_type.comparemodes.s i64 
    pushptroff                i32 4 0
    callfn         &mm_type.comparemodes i64 
    setret                    i64 
    jump           #18812     
    jump           #18820     
#18816: 
    push           &mm_decls.ttnamedef 
    push           mm_type.comparemodes.s i64 
    pushptroff                u64 8 0
    pop            mm_type.comparemodes.d u64 
    push           &mm_decls.ttnamedef 
    push           mm_type.comparemodes.t i64 
    pushptroff                u64 8 0
    pop            mm_type.comparemodes.e u64 
    push           mm_type.comparemodes.d u64 
    jumpfalse      #18823     u64 
    push           mm_type.comparemodes.e u64 
    jumpfalse      #18823     u64 
    setargs                   2 0
    push           mm_type.comparemodes.e u64 
    push           72         
    pushptroff                i32 1 0
    push           mm_type.comparemodes.d u64 
    push           72         
    pushptroff                i32 1 0
    callfn         &mm_type.comparemodes i64 
    jumptrue       #18824     i64 
    push           0          i64 
    setret                    i64 
    jump           #18812     
#18824: 
    push           mm_type.comparemodes.d u64 
    push           104        
    pushptroff                u64 1 0
    push           0          u64 
    jumpne         #18825     u64 
    push           mm_type.comparemodes.e u64 
    push           104        
    pushptroff                u64 1 0
    push           0          u64 
    jumpne         #18825     u64 
    push           1          i64 
    setret                    i64 
    jump           #18812     
#18825: 
#18823: 
    jump           #18820     
#18817: 
    push           mm_type.comparemodes.sbase i64 
    push           16         i64 
    jumpne         #18826     i64 
    push           mm_type.comparemodes.tbase i64 
    push           21         i64 
    jumpeq         #18827     i64 
#18826: 
    push           mm_type.comparemodes.sbase i64 
    push           21         i64 
    jumpne         #18828     i64 
    push           mm_type.comparemodes.tbase i64 
    push           16         i64 
    jumpne         #18828     i64 
#18827: 
    push           1          i64 
    setret                    i64 
    jump           #18812     
    jump           #18829     
#18828: 
#18829: 
#18820: 
    push           0          i64 
    setret                    i64 
    jump           #18812     
#18812: 
    retfn                     i64 
End


Proc mm_type.hardconvert: i64
    param          mm_type.hardconvert.s i64 
    param          mm_type.hardconvert.t i64 
    local          mm_type.hardconvert.opc i64 
    local          mm_type.hardconvert.sbase i64 
    local          mm_type.hardconvert.tbase i64 
    local          mm_type.hardconvert.sint i64 
    local          mm_type.hardconvert.tint i64 
    local          mm_type.hardconvert.sref i64 
    local          mm_type.hardconvert.tref i64 
    procentry                 
    setargs                   3 0
    push           1          i64 
    push           mm_type.hardconvert.t i64 
    push           mm_type.hardconvert.s i64 
    callfn         &mm_type.softconvert i64 
    pop            mm_type.hardconvert.opc i64 
    push           mm_type.hardconvert.opc i64 
    push           211        i64 
    jumpeq         #18831     i64 
    push           mm_type.hardconvert.opc i64 
    setret                    i64 
    jump           #18832     
#18831: 
    push           mm_type.hardconvert.s i64 
    push           0          i64 
    jumpne         #18833     i64 
    setargs                   2 0
    push           0          u64 
    push           "Non-void type expected" u64 
    callproc       &mm_support.txerror 
#18833: 
    push           &mm_decls.ttbasetype 
    push           mm_type.hardconvert.s i64 
    pushptroff                i32 4 0
    pop            mm_type.hardconvert.sbase i64 
    push           &mm_decls.ttbasetype 
    push           mm_type.hardconvert.t i64 
    pushptroff                i32 4 0
    pop            mm_type.hardconvert.tbase i64 
    push           &mm_decls.ttisref 
    push           mm_type.hardconvert.s i64 
    pushptroff                u8 1 0
    pop            mm_type.hardconvert.sref i64 
    push           &mm_decls.ttisref 
    push           mm_type.hardconvert.t i64 
    pushptroff                u8 1 0
    pop            mm_type.hardconvert.tref i64 
    push           &mm_decls.ttisinteger 
    push           mm_type.hardconvert.s i64 
    pushptroff                u8 1 0
    pop            mm_type.hardconvert.sint i64 
    push           &mm_decls.ttisinteger 
    push           mm_type.hardconvert.t i64 
    pushptroff                u8 1 0
    pop            mm_type.hardconvert.tint i64 
    push           mm_type.hardconvert.sref i64 
    jumpfalse      #18834     i64 
    push           mm_type.hardconvert.tint i64 
    jumptrue       #18835     i64 
#18834: 
    push           mm_type.hardconvert.sint i64 
    jumpfalse      #18836     i64 
    push           mm_type.hardconvert.tref i64 
    jumptrue       #18835     i64 
#18836: 
    push           mm_type.hardconvert.sref i64 
    jumpfalse      #18837     i64 
    push           mm_type.hardconvert.tref i64 
    jumpfalse      #18837     i64 
#18835: 
    push           181        i64 
    setret                    i64 
    jump           #18832     
    jump           #18838     
#18837: 
    push           mm_type.hardconvert.sbase i64 
    push           24         i64 
    jumpne         #18839     i64 
    push           mm_type.hardconvert.tint i64 
    jumptrue       #18840     i64 
#18839: 
    push           mm_type.hardconvert.sint i64 
    jumpfalse      #18841     i64 
    push           mm_type.hardconvert.tbase i64 
    push           24         i64 
    jumpne         #18841     i64 
#18840: 
    push           181        i64 
    setret                    i64 
    jump           #18832     
    jump           #18838     
#18841: 
    push           mm_type.hardconvert.sint i64 
    jumpfalse      #18842     i64 
    push           &mm_decls.ttisshort 
    push           mm_type.hardconvert.tbase i64 
    pushptroff                u8 1 0
    jumpfalse      #18842     i64 
    startmult                 
    push           &mm_decls.ttsize 
    push           mm_type.hardconvert.sbase i64 
    pushptroff                i32 4 0
    push           16         i64 
    jumpne         #18843     i64 
    push           189        i64 
    resetmult                 
    jump           #18844     
#18843: 
    push           186        i64 
    endmult                   
#18844: 
    setret                    i64 
    jump           #18832     
#18842: 
#18838: 
    push           211        i64 
    setret                    i64 
    jump           #18832     
#18832: 
    retfn                     i64 
End


Proc mm_type.applyconversion:
    param          mm_type.applyconversion.p u64 
    param          mm_type.applyconversion.s i64 
    param          mm_type.applyconversion.t i64 
    param          mm_type.applyconversion.opc i64 
    local          mm_type.applyconversion.cmpop i64 
    procentry                 
    push           mm_type.applyconversion.opc i64 
    push           211        i64 
    casejumpeq     #18846     i64 0
    push           181        i64 
    casejumpeq     #18847     i64 0
    push           214        i64 
    casejumpeq     #18848     i64 0
    push           212        i64 
    casejumpeq     #18849     i64 0
    push           213        i64 
    casejumpeq     #18850     i64 0
    push           215        i64 
    casejumpeq     #18851     i64 0
    popstack                  i64 
    jump           #18852     
#18846: 
    setargs                   2 0
    push           0          u64 
    push           "No conversion possible" u64 
    callproc       &mm_support.txerror 
    jump           #18853     
#18847: 
    push           mm_type.applyconversion.t i64 
    push           mm_type.applyconversion.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #18854     
    jump           #18853     
#18848: 
    setargs                   2 0
    push           62         i64 
    push           mm_type.applyconversion.p u64 
    callproc       &mm_lib.insertunit 
    push           mm_type.applyconversion.t i64 
    push           mm_type.applyconversion.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #18854     
    jump           #18853     
#18849: 
    setargs                   2 0
    push           50         i64 
    push           mm_type.applyconversion.p u64 
    callproc       &mm_lib.insertunit 
    push           mm_type.applyconversion.t i64 
    push           mm_type.applyconversion.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #18854     
    jump           #18853     
#18850: 
    setargs                   2 0
    push           mm_type.applyconversion.t i64 
    push           mm_type.applyconversion.p u64 
    callproc       &mm_type.tstringslice 
    jump           #18854     
    jump           #18853     
#18851: 
    setargs                   2 0
    push           60         i64 
    push           mm_type.applyconversion.p u64 
    callproc       &mm_lib.insertunit 
    push           10         i64 
    push           mm_type.applyconversion.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #18854     
    jump           #18853     
#18852: 
#18853: 
    setargs                   4 0
    push           mm_type.applyconversion.opc i64 
    push           mm_type.applyconversion.t i64 
    push           mm_type.applyconversion.s i64 
    push           mm_type.applyconversion.p u64 
    callfn         &mm_type.tevalconvert i64 
    jumpfalse      #18855     i64 
    jump           #18854     
#18855: 
    setargs                   2 0
    push           61         i64 
    push           mm_type.applyconversion.p u64 
    callproc       &mm_lib.insertunit 
    push           mm_type.applyconversion.opc i64 
    push           mm_type.applyconversion.p u64 
    push           60         
    popptroff                 u8 1 0
    push           mm_type.applyconversion.s i64 
    push           mm_type.applyconversion.p u64 
    push           52         
    popptroff                 i32 1 0
    push           1          i64 
    push           mm_type.applyconversion.p u64 
    push           59         
    popptroff                 u8 1 0
    push           &mm_decls.ttisshort 
    push           mm_type.applyconversion.t i64 
    pushptroff                u8 1 0
    jumpfalse      #18856     i64 
    push           mm_type.applyconversion.t i64 
    push           mm_type.applyconversion.p u64 
    push           52         
    popptroff                 i32 1 0
    setargs                   1 0
    push           mm_type.applyconversion.t i64 
    callfn         &mm_lib.gettypebase i64 
    pop            mm_type.applyconversion.t i64 
#18856: 
    push           mm_type.applyconversion.t i64 
    push           mm_type.applyconversion.p u64 
    push           48         
    popptroff                 i32 1 0
#18854: 
    retproc                   
End


Proc mm_type.coerceunit:
    param          mm_type.coerceunit.p u64 
    param          mm_type.coerceunit.t i64 
    param          mm_type.coerceunit.hard i64 
    local          mm_type.coerceunit.opc i64 
    local          mm_type.coerceunit.s i64 
    procentry                 
    push           mm_type.coerceunit.p u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.coerceunit.s i64 
    push           mm_type.coerceunit.t i64 
    push           0          i64 
    jumpeq         #18858     i64 
    push           mm_type.coerceunit.s i64 
    push           mm_type.coerceunit.t i64 
    jumpne         #18859     i64 
#18858: 
    jump           #18860     
#18859: 
    push           mm_type.coerceunit.s i64 
    push           0          i64 
    jumpne         #18861     i64 
    push           mm_type.coerceunit.t i64 
    push           0          i64 
    jumpeq         #18861     i64 
    setargs                   2 0
    push           0          u64 
    push           "Void type in expression/return value missing" u64 
    callproc       &mm_support.txerror 
#18861: 
    push           mm_type.coerceunit.hard i64 
    jumpfalse      #18862     i64 
    setargs                   2 0
    push           mm_type.coerceunit.t i64 
    push           mm_type.coerceunit.s i64 
    callfn         &mm_type.hardconvert i64 
    pop            mm_type.coerceunit.opc i64 
    jump           #18863     
#18862: 
    setargs                   3 0
    push           0          i64 
    push           mm_type.coerceunit.t i64 
    push           mm_type.coerceunit.s i64 
    callfn         &mm_type.softconvert i64 
    pop            mm_type.coerceunit.opc i64 
#18863: 
    push           mm_type.coerceunit.opc i64 
    push           211        i64 
    jumpne         #18864     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    setargs                   2 0
    push           1          i64 
    push           mm_type.coerceunit.s i64 
    callfn         &mm_lib.strmode u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           "=>"       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    setargs                   2 0
    push           1          i64 
    push           mm_type.coerceunit.t i64 
    callfn         &mm_lib.strmode u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           mm_type.coerceunit.hard i64 
    jumptrue       #18865     i64 
    setargs                   2 0
    push           mm_type.coerceunit.t i64 
    push           mm_type.coerceunit.s i64 
    callfn         &mm_type.hardconvert i64 
    push           211        i64 
    jumpeq         #18865     i64 
    setargs                   2 0
    push           0          u64 
    push           "Need explicit conversion" u64 
    callproc       &mm_support.txerror 
    jump           #18866     
#18865: 
    setargs                   2 0
    push           0          u64 
    push           "Can't do conversion" u64 
    callproc       &mm_support.txerror 
#18866: 
#18864: 
    setargs                   4 0
    push           mm_type.coerceunit.opc i64 
    push           mm_type.coerceunit.t i64 
    push           mm_type.coerceunit.s i64 
    push           mm_type.coerceunit.p u64 
    callproc       &mm_type.applyconversion 
#18860: 
    retproc                   
End


Proc mm_type.tevalconvert: i64
    param          mm_type.tevalconvert.p u64 
    param          mm_type.tevalconvert.s i64 
    param          mm_type.tevalconvert.t i64 
    param          mm_type.tevalconvert.opc i64 
    local          mm_type.tevalconvert.x r64 
    local          mm_type.tevalconvert.z r64 
    local          mm_type.tevalconvert.a i64 
    local          mm_type.tevalconvert.c i64 
    local          mm_type.tevalconvert.aa i128 
    procentry                 
    push           mm_type.tevalconvert.p u64 
    pushptr                   u8 
    push           1          i64 
    jumpeq         #18868     i64 
    push           0          i64 
    setret                    i64 
    jump           #18869     
#18868: 
    push           mm_type.tevalconvert.s i64 
    push           16         i64 
    shl                       i64 
    push           mm_type.tevalconvert.t i64 
    ior                       i64 
    push           262151     i64 
    casejumpeq     #18870     i64 0
    push           458756     i64 
    casejumpeq     #18871     i64 0
    push           458758     i64 
    casejumpeq     #18872     i64 0
    popstack                  i64 
    jump           #18873     
#18870: 
    push           mm_type.tevalconvert.p u64 
    push           16         
    pushptroff                i64 1 0
    float                     r64 i64 
    pop            mm_type.tevalconvert.z r64 
    jump           #18874     
#18871: 
    push           mm_type.tevalconvert.p u64 
    push           16         
    pushptroff                r64 1 0
    fix                       i64 r64 
    pop            mm_type.tevalconvert.c i64 
    jump           #18874     
#18872: 
    push           mm_type.tevalconvert.p u64 
    push           16         
    pushptroff                r64 1 0
    fnarrow                   r32 r64 
    fwiden                    r64 r32 
    pop            mm_type.tevalconvert.z r64 
    jump           #18874     
#18873: 
    push           0          i64 
    setret                    i64 
    jump           #18869     
#18874: 
    push           &mm_decls.ttisreal 
    push           mm_type.tevalconvert.t i64 
    pushptroff                u8 1 0
    jumpfalse      #18875     i64 
    setargs                   3 0
    push           mm_type.tevalconvert.t i64 
    push           mm_type.tevalconvert.z r64 
    typepun                   i64 void 0
    push           mm_type.tevalconvert.p u64 
    callproc       &mm_type.makenewconst 
    jump           #18876     
#18875: 
    setargs                   3 0
    push           mm_type.tevalconvert.t i64 
    push           mm_type.tevalconvert.c i64 
    push           mm_type.tevalconvert.p u64 
    callproc       &mm_type.makenewconst 
#18876: 
    push           1          i64 
    setret                    i64 
    jump           #18869     
#18869: 
    retfn                     i64 
End


Proc mm_type.do_bounds:
    param          mm_type.do_bounds.p u64 
    param          mm_type.do_bounds.a u64 
    local          mm_type.do_bounds.m i64 
    local          mm_type.do_bounds.mbase i64 
    local          mm_type.do_bounds.opc i64 
    local          mm_type.do_bounds.lower i64 
    local          mm_type.do_bounds.upper i64 
    procentry                 
    setargs                   2 0
    push           1          i64 
    push           mm_type.do_bounds.a u64 
    callproc       &mm_type.deref 
    push           mm_type.do_bounds.a u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.do_bounds.m i64 
    push           mm_type.do_bounds.a u64 
    pushptr                   u8 
    push           65         i64 
    jumpne         #18878     i64 
    push           mm_type.do_bounds.a u64 
    push           16         
    pushptroff                i64 1 0
    pop            mm_type.do_bounds.m i64 
#18878: 
    push           &mm_decls.ttbasetype 
    push           mm_type.do_bounds.m i64 
    pushptroff                i32 4 0
    pop            mm_type.do_bounds.mbase i64 
    push           4          i64 
    push           mm_type.do_bounds.p u64 
    push           48         
    popptroff                 i32 1 0
    push           mm_type.do_bounds.p u64 
    push           60         
    pushptroff                u8 1 0
    push           201        i64 
    casejumpeq     #18879     i64 0
    push           202        i64 
    casejumpeq     #18880     i64 0
    push           200        i64 
    casejumpeq     #18881     i64 0
    push           203        i64 
    casejumpeq     #18882     i64 0
    popstack                  i64 
    jump           #18883     
#18879: 
    push           mm_type.do_bounds.mbase i64 
    push           11         i64 
    casejumpeq     #18884     i64 0
    push           12         i64 
    casejumpeq     #18884     i64 0
    popstack                  i64 
    jump           #18885     
#18884: 
    setargs                   2 0
    push           &mm_decls.ttlower 
    push           mm_type.do_bounds.m i64 
    pushptroff                i32 4 0
    push           mm_type.do_bounds.p u64 
    callproc       &mm_type.convintconst 
    jump           #18886     
    jump           #18887     
#18885: 
!error::
#18888: 
    setargs                   2 0
    push           0          u64 
    push           "lwb/upb/len?" u64 
    callproc       &mm_support.txerror 
#18887: 
    jump           #18889     
#18880: 
    push           mm_type.do_bounds.mbase i64 
    push           11         i64 
    casejumpeq     #18890     i64 0
    push           12         i64 
    casejumpeq     #18891     i64 0
    popstack                  i64 
    jump           #18892     
#18890: 
    setargs                   2 0
    push           &mm_decls.ttlower 
    push           mm_type.do_bounds.m i64 
    pushptroff                i32 4 0
    push           &mm_decls.ttlength 
    push           mm_type.do_bounds.m i64 
    pushptroff                i32 4 0
    add                       i64 
    push           1          i64 
    sub                       i64 
    push           mm_type.do_bounds.p u64 
    callproc       &mm_type.convintconst 
    jump           #18893     
#18891: 
    push           202        i64 
    push           mm_type.do_bounds.p u64 
    push           60         
    popptroff                 u8 1 0
    jump           #18893     
#18892: 
    jump           #18888     
#18893: 
    jump           #18889     
#18881: 
    push           mm_type.do_bounds.mbase i64 
    push           11         i64 
    casejumpeq     #18894     i64 0
    push           12         i64 
    casejumpeq     #18895     i64 0
    popstack                  i64 
    jump           #18896     
#18894: 
    setargs                   2 0
    push           &mm_decls.ttlength 
    push           mm_type.do_bounds.m i64 
    pushptroff                i32 4 0
    push           mm_type.do_bounds.p u64 
    callproc       &mm_type.convintconst 
    jump           #18897     
#18895: 
    push           200        i64 
    push           mm_type.do_bounds.p u64 
    push           60         
    popptroff                 u8 1 0
    jump           #18897     
#18896: 
    jump           #18888     
#18897: 
    jump           #18889     
#18882: 
    push           8          i64 
    push           mm_type.do_bounds.p u64 
    push           48         
    popptroff                 i32 1 0
    push           mm_type.do_bounds.mbase i64 
    push           11         i64 
    casejumpeq     #18898     i64 0
    push           12         i64 
    casejumpeq     #18899     i64 0
    push           20         i64 
    casejumpeq     #18900     i64 0
    popstack                  i64 
    jump           #18901     
#18898: 
    push           &mm_decls.ttlower 
    push           mm_type.do_bounds.m i64 
    pushptroff                i32 4 0
    push           mm_type.do_bounds.p u64 
    push           16         
    popptroff                 i64 1 0
    push           mm_type.do_bounds.p u64 
    push           16         
    pushptroff                i64 1 0
    push           &mm_decls.ttlength 
    push           mm_type.do_bounds.m i64 
    pushptroff                i32 4 0
    add                       i64 
    push           1          i64 
    sub                       i64 
    push           mm_type.do_bounds.p u64 
    push           24         
    popptroff                 i64 1 0
    push           1          i64 
    push           mm_type.do_bounds.p u64 
    push           0          
    popptroff                 u8 1 0
    push           0          u64 
    push           mm_type.do_bounds.p u64 
    push           32         
    storeptroff               u64 1 0
    push           mm_type.do_bounds.p u64 
    push           24         
    storeptroff               u64 1 0
    push           mm_type.do_bounds.p u64 
    push           16         
    popptroff                 u64 1 0
    push           0          i64 
    push           mm_type.do_bounds.p u64 
    push           3          
    storeptroff               u8 1 0
    push           mm_type.do_bounds.p u64 
    push           2          
    storeptroff               u8 1 0
    push           mm_type.do_bounds.p u64 
    push           1          
    popptroff                 u8 1 0
    push           1          i64 
    push           mm_type.do_bounds.p u64 
    push           58         
    popptroff                 u8 1 0
    jump           #18886     
    jump           #18902     
#18899: 
    push           203        i64 
    push           mm_type.do_bounds.p u64 
    push           60         
    popptroff                 u8 1 0
    jump           #18902     
#18900: 
    setargs                   2 0
    push           4294967296 i64 
    push           mm_type.do_bounds.p u64 
    callproc       &mm_type.convintconst 
    jump           #18886     
    jump           #18902     
#18901: 
    jump           #18888     
#18902: 
    jump           #18889     
#18883: 
#18889: 
#18886: 
    retproc                   
End


Proc mm_type.addnotl:
    param          mm_type.addnotl.p u64 
    procentry                 
    setargs                   2 0
    push           17         i64 
    push           mm_type.addnotl.p u64 
    callproc       &mm_lib.insertunit 
    push           4          i64 
    push           mm_type.addnotl.p u64 
    push           48         
    popptroff                 i32 1 0
    push           131        i64 
    push           mm_type.addnotl.p u64 
    push           60         
    popptroff                 u8 1 0
#18904: 
    retproc                   
End


Proc mm_type.tevaluate:
    param          mm_type.tevaluate.p u64 
    local          mm_type.tevaluate.a u64 
    local          mm_type.tevaluate.b u64 
    local          mm_type.tevaluate.pname u64 
    local          mm_type.tevaluate.offset i64 
    local          mm_type.tevaluate.tag i64 
    procentry                 
    push           mm_type.tevaluate.p u64 
    pushptr                   u8 
    pop            mm_type.tevaluate.tag i64 
    push           &mm_tables.jisexpr 
    push           mm_type.tevaluate.tag i64 
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #18906     i64 
    setargs                   1 0
    push           mm_type.tevaluate.p u64 
    callproc       &mm_type.tevalbinop 
    jump           #18907     
#18906: 
    push           &mm_tables.jisexpr 
    push           mm_type.tevaluate.tag i64 
    pushptroff                u8 1 0
    push           1          i64 
    jumpne         #18908     i64 
    setargs                   1 0
    push           mm_type.tevaluate.p u64 
    callproc       &mm_type.tevalmonop 
    jump           #18907     
#18908: 
    push           mm_type.tevaluate.tag i64 
    push           20         i64 
    casejumpeq     #18909     i64 0
    push           59         i64 
    casejumpeq     #18910     i64 0
    popstack                  i64 
    jump           #18911     
#18909: 
    push           mm_type.tevaluate.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_type.tevaluate.a u64 
    push           mm_type.tevaluate.p u64 
    push           24         
    pushptroff                u64 1 0
    pop            mm_type.tevaluate.b u64 
    push           &mm_decls.ttsize 
    push           mm_type.tevaluate.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           8          i64 
    jumpgt         #18912     i64 
    setargs                   1 0
    push           mm_type.tevaluate.a u64 
    callproc       &mm_type.tevaluate 
    setargs                   1 0
    push           mm_type.tevaluate.b u64 
    callproc       &mm_type.tevaluate 
    push           mm_type.tevaluate.a u64 
    pushptr                   u8 
    push           1          i64 
    jumpne         #18913     i64 
    push           mm_type.tevaluate.b u64 
    pushptr                   u8 
    push           1          i64 
    jumpne         #18913     i64 
    push           mm_type.tevaluate.a u64 
    push           58         
    pushptroff                u8 1 0
    push           mm_type.tevaluate.b u64 
    push           58         
    pushptroff                u8 1 0
    iand                      i64 
    push           mm_type.tevaluate.p u64 
    push           58         
    popptroff                 u8 1 0
#18913: 
#18912: 
    jump           #18914     
#18910: 
    push           mm_type.tevaluate.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_type.tevaluate.a u64 
    setargs                   2 0
    push           &mm_type.tevaluate.offset 
    push           mm_type.tevaluate.a u64 
    callfn         &mm_type.addrdotindex u64 
    pop            mm_type.tevaluate.pname u64 
    push           mm_type.tevaluate.pname u64 
    jumpfalse      #18915     u64 
    setargs                   2 0
    push           mm_type.tevaluate.pname u64 
    push           mm_type.tevaluate.a u64 
    callproc       &mm_lib.deleteunit 
    push           mm_type.tevaluate.p u64 
    push           24         
    pushptroff                u64 1 0
    push           0          u64 
    jumpne         #18916     u64 
    push           1          i64 
    push           mm_type.tevaluate.p u64 
    push           2          
    popptroff                 u8 1 0
    setargs                   2 0
    push           4          i64 
    push           mm_type.tevaluate.offset u64 
    callfn         &mm_lib.createconstunit u64 
    push           mm_type.tevaluate.p u64 
    push           24         
    popptroff                 u64 1 0
    jump           #18917     
#18916: 
    push           mm_type.tevaluate.p u64 
    push           24         
    pushptroff                u64 1 0
    push           16         
    addrefoff                 u64 1 0
    push           mm_type.tevaluate.offset i64 
    addto                     i64 
#18917: 
#18915: 
    jump           #18914     
#18911: 
#18914: 
#18907: 
#18918: 
    retproc                   
End


Proc mm_type.addrdotindex: u64
    param          mm_type.addrdotindex.p u64 
    param          mm_type.addrdotindex.offset u64 
    local          mm_type.addrdotindex.q u64 
    local          mm_type.addrdotindex.axmode i64 
    procentry                 
    startmult                 
    push           mm_type.addrdotindex.p u64 
    pushptr                   u8 
    push           51         i64 
    casejumpeq     #18920     i64 0
    push           48         i64 
    casejumpeq     #18921     i64 0
    popstack                  i64 
    jump           #18922     
#18920: 
    startmult                 
    push           mm_type.addrdotindex.p u64 
    push           16         
    pushptroff                u64 1 0
    pushptr                   u8 
    push           3          i64 
    jumpne         #18923     i64 
    push           mm_type.addrdotindex.p u64 
    push           40         
    pushptroff                u32 1 0
    push           mm_type.addrdotindex.offset u64 
    popptr                    i64 
    push           mm_type.addrdotindex.p u64 
    push           16         
    pushptroff                u64 1 0
    resetmult                 
    jump           #18924     
#18923: 
    setargs                   2 0
    push           mm_type.addrdotindex.offset u64 
    push           mm_type.addrdotindex.p u64 
    push           16         
    pushptroff                u64 1 0
    callfn         &mm_type.addrdotindex u64 
    pop            mm_type.addrdotindex.q u64 
    push           mm_type.addrdotindex.offset u64 
    push           mm_type.addrdotindex.p u64 
    push           40         
    pushptroff                u32 1 0
    addto                     i64 
    push           mm_type.addrdotindex.q u64 
    endmult                   
#18924: 
    resetmult                 
    jump           #18925     
#18921: 
    push           mm_type.addrdotindex.p u64 
    push           16         
    pushptroff                u64 1 0
    push           48         
    pushptroff                i32 1 0
    pop            mm_type.addrdotindex.axmode i64 
    startmult                 
    push           mm_type.addrdotindex.p u64 
    push           24         
    pushptroff                u64 1 0
    pushptr                   u8 
    push           1          i64 
    jumpne         #18926     i64 
    startmult                 
    push           mm_type.addrdotindex.p u64 
    push           16         
    pushptroff                u64 1 0
    pushptr                   u8 
    push           3          i64 
    jumpne         #18927     i64 
    push           mm_type.addrdotindex.p u64 
    push           24         
    pushptroff                u64 1 0
    push           16         
    pushptroff                i64 1 0
    push           &mm_decls.ttlower 
    push           mm_type.addrdotindex.axmode i64 
    pushptroff                i32 4 0
    sub                       i64 
    push           &mm_decls.ttsize 
    push           &mm_decls.tttarget 
    push           mm_type.addrdotindex.axmode i64 
    pushptroff                i32 4 0
    pushptroff                i32 4 0
    mul                       i64 
    push           mm_type.addrdotindex.offset u64 
    popptr                    i64 
    push           mm_type.addrdotindex.p u64 
    push           16         
    pushptroff                u64 1 0
    resetmult                 
    jump           #18928     
#18927: 
    setargs                   2 0
    push           mm_type.addrdotindex.offset u64 
    push           mm_type.addrdotindex.p u64 
    push           16         
    pushptroff                u64 1 0
    callfn         &mm_type.addrdotindex u64 
    pop            mm_type.addrdotindex.q u64 
    push           mm_type.addrdotindex.q u64 
    jumpfalse      #18929     u64 
    push           mm_type.addrdotindex.offset u64 
    push           mm_type.addrdotindex.p u64 
    push           24         
    pushptroff                u64 1 0
    push           16         
    pushptroff                i64 1 0
    push           &mm_decls.ttlower 
    push           mm_type.addrdotindex.axmode i64 
    pushptroff                i32 4 0
    sub                       i64 
    push           &mm_decls.ttsize 
    push           &mm_decls.tttarget 
    push           mm_type.addrdotindex.axmode i64 
    pushptroff                i32 4 0
    pushptroff                i32 4 0
    mul                       i64 
    addto                     i64 
#18929: 
    push           mm_type.addrdotindex.q u64 
    endmult                   
#18928: 
    resetmult                 
    jump           #18930     
#18926: 
    push           0          u64 
    endmult                   
#18930: 
    resetmult                 
    jump           #18925     
#18922: 
    push           0          u64 
    endmult                   
#18925: 
    setret                    u64 
    jump           #18931     
#18931: 
    retfn                     u64 
End


Proc mm_type.tevalbinop:
    param          mm_type.tevalbinop.p u64 
    local          mm_type.tevalbinop.a i64 
    local          mm_type.tevalbinop.b i64 
    local          mm_type.tevalbinop.c i64 
    local          mm_type.tevalbinop.offset i64 
    local          mm_type.tevalbinop.x r64 
    local          mm_type.tevalbinop.y r64 
    local          mm_type.tevalbinop.z r64 
    local          mm_type.tevalbinop.lhs u64 
    local          mm_type.tevalbinop.rhs u64 
    procentry                 
    push           mm_type.tevalbinop.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_type.tevalbinop.lhs u64 
    push           mm_type.tevalbinop.p u64 
    push           24         
    pushptroff                u64 1 0
    pop            mm_type.tevalbinop.rhs u64 
    push           mm_type.tevalbinop.lhs u64 
    pushptr                   u8 
    push           mm_type.tevalbinop.rhs u64 
    pushptr                   u8 
    jumpne         #18933     i64 
    push           mm_type.tevalbinop.rhs u64 
    pushptr                   u8 
    push           1          i64 
    jumpeq         #18934     i64 
#18933: 
    push           mm_type.tevalbinop.lhs u64 
    pushptr                   u8 
    push           59         i64 
    jumpne         #18935     i64 
    push           mm_type.tevalbinop.rhs u64 
    pushptr                   u8 
    push           1          i64 
    jumpne         #18935     i64 
    push           mm_type.tevalbinop.lhs u64 
    push           16         
    pushptroff                u64 1 0
    pushptr                   u8 
    push           3          i64 
    jumpne         #18936     i64 
    push           mm_type.tevalbinop.rhs u64 
    push           16         
    pushptroff                i64 1 0
    push           &mm_decls.ttsize 
    push           &mm_decls.tttarget 
    push           mm_type.tevalbinop.lhs u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    pushptroff                i32 4 0
    mul                       i64 
    pop            mm_type.tevalbinop.offset i64 
    push           mm_type.tevalbinop.lhs u64 
    push           24         
    pushptroff                u64 1 0
    push           0          u64 
    jumpne         #18937     u64 
    push           1          i64 
    push           mm_type.tevalbinop.lhs u64 
    push           2          
    popptroff                 u8 1 0
    setargs                   2 0
    push           4          i64 
    push           mm_type.tevalbinop.offset u64 
    callfn         &mm_lib.createconstunit u64 
    push           mm_type.tevalbinop.lhs u64 
    push           24         
    popptroff                 u64 1 0
    jump           #18938     
#18937: 
    push           mm_type.tevalbinop.lhs u64 
    push           24         
    pushptroff                u64 1 0
    push           16         
    addrefoff                 u64 1 0
    push           mm_type.tevalbinop.offset i64 
    addto                     i64 
#18938: 
    setargs                   2 0
    push           mm_type.tevalbinop.lhs u64 
    push           mm_type.tevalbinop.p u64 
    callproc       &mm_lib.deleteunit 
#18936: 
#18935: 
    jump           #18939     
#18934: 
    push           &mm_decls.ttisreal 
    push           mm_type.tevalbinop.p u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    jumpfalse      #18940     i64 
    push           mm_type.tevalbinop.p u64 
    push           16         
    pushptroff                u64 1 0
    push           16         
    pushptroff                r64 1 0
    pop            mm_type.tevalbinop.x r64 
    push           mm_type.tevalbinop.p u64 
    push           24         
    pushptroff                u64 1 0
    push           16         
    pushptroff                r64 1 0
    pop            mm_type.tevalbinop.y r64 
    jump           #18941     
#18940: 
    push           mm_type.tevalbinop.p u64 
    push           16         
    pushptroff                u64 1 0
    push           16         
    pushptroff                i64 1 0
    pop            mm_type.tevalbinop.a i64 
    push           mm_type.tevalbinop.p u64 
    push           24         
    pushptroff                u64 1 0
    push           16         
    pushptroff                i64 1 0
    pop            mm_type.tevalbinop.b i64 
#18941: 
    push           mm_type.tevalbinop.p u64 
    push           48         
    pushptroff                i32 1 0
    push           4          i64 
    casejumpeq     #18942     i64 0
    push           2          i64 
    casejumpeq     #18942     i64 0
    push           7          i64 
    casejumpeq     #18943     i64 0
    push           6          i64 
    casejumpeq     #18943     i64 0
    popstack                  i64 
    jump           #18944     
#18942: 
    push           mm_type.tevalbinop.p u64 
    push           60         
    pushptroff                u8 1 0
    switch         #18945     101 124
    opnd           #18946     
#18945: 
    switchlabel    #18947     
    switchlabel    #18948     
    switchlabel    #18949     
    switchlabel    #18946     
    switchlabel    #18950     
    switchlabel    #18946     
    switchlabel    #18951     
    switchlabel    #18952     
    switchlabel    #18946     
    switchlabel    #18953     
    switchlabel    #18946     
    switchlabel    #18946     
    switchlabel    #18946     
    switchlabel    #18946     
    switchlabel    #18946     
    switchlabel    #18954     
    switchlabel    #18955     
    switchlabel    #18956     
    switchlabel    #18957     
    switchlabel    #18958     
    switchlabel    #18959     
    switchlabel    #18946     
    switchlabel    #18960     
    switchlabel    #18961     
    endswitch                 
#18947: 
    push           mm_type.tevalbinop.a i64 
    push           mm_type.tevalbinop.b i64 
    add                       i64 
    pop            mm_type.tevalbinop.c i64 
    jump           #18962     
#18948: 
    push           mm_type.tevalbinop.a i64 
    push           mm_type.tevalbinop.b i64 
    sub                       i64 
    pop            mm_type.tevalbinop.c i64 
    jump           #18962     
#18949: 
    push           mm_type.tevalbinop.a i64 
    push           mm_type.tevalbinop.b i64 
    mul                       i64 
    pop            mm_type.tevalbinop.c i64 
    jump           #18962     
#18950: 
    push           mm_type.tevalbinop.a i64 
    push           mm_type.tevalbinop.b i64 
    idiv                      i64 
    pop            mm_type.tevalbinop.c i64 
    jump           #18962     
#18953: 
    push           mm_type.tevalbinop.a i64 
    push           mm_type.tevalbinop.b i64 
    shl                       i64 
    pop            mm_type.tevalbinop.c i64 
    jump           #18962     
#18954: 
    push           mm_type.tevalbinop.a i64 
    push           mm_type.tevalbinop.b i64 
    seteq                     i64 
    pop            mm_type.tevalbinop.c i64 
    jump           #18962     
#18955: 
    push           mm_type.tevalbinop.a i64 
    push           mm_type.tevalbinop.b i64 
    setne                     i64 
    pop            mm_type.tevalbinop.c i64 
    jump           #18962     
#18956: 
    push           mm_type.tevalbinop.a i64 
    push           mm_type.tevalbinop.b i64 
    setlt                     i64 
    pop            mm_type.tevalbinop.c i64 
    jump           #18962     
#18957: 
    push           mm_type.tevalbinop.a i64 
    push           mm_type.tevalbinop.b i64 
    setle                     i64 
    pop            mm_type.tevalbinop.c i64 
    jump           #18962     
#18958: 
    push           mm_type.tevalbinop.a i64 
    push           mm_type.tevalbinop.b i64 
    setge                     i64 
    pop            mm_type.tevalbinop.c i64 
    jump           #18962     
#18959: 
    push           mm_type.tevalbinop.a i64 
    push           mm_type.tevalbinop.b i64 
    setgt                     i64 
    pop            mm_type.tevalbinop.c i64 
    jump           #18962     
#18960: 
    startmult                 
    push           mm_type.tevalbinop.a i64 
    jumpfalse      #18963     i64 
    push           mm_type.tevalbinop.b i64 
    jumpfalse      #18963     i64 
    push           1          
    resetmult                 
    jump           #18964     
#18963: 
    push           0          
    endmult                   
#18964: 
    pop            mm_type.tevalbinop.c i64 
    jump           #18962     
#18961: 
    startmult                 
    push           mm_type.tevalbinop.a i64 
    jumptrue       #18965     i64 
    push           mm_type.tevalbinop.b i64 
    jumpfalse      #18966     i64 
#18965: 
    push           1          
    resetmult                 
    jump           #18967     
#18966: 
    push           0          
    endmult                   
#18967: 
    pop            mm_type.tevalbinop.c i64 
    jump           #18962     
#18951: 
    push           mm_type.tevalbinop.a i64 
    push           mm_type.tevalbinop.b i64 
    iand                      i64 
    pop            mm_type.tevalbinop.c i64 
    jump           #18962     
#18952: 
    push           mm_type.tevalbinop.a i64 
    push           mm_type.tevalbinop.b i64 
    ior                       i64 
    pop            mm_type.tevalbinop.c i64 
    jump           #18962     
#18946: 
    jump           #18939     
#18962: 
    jump           #18968     
#18943: 
    push           mm_type.tevalbinop.p u64 
    push           60         
    pushptroff                u8 1 0
    switch         #18969     101 104
    opnd           #18970     
#18969: 
    switchlabel    #18971     
    switchlabel    #18972     
    switchlabel    #18973     
    switchlabel    #18974     
    endswitch                 
#18971: 
    push           mm_type.tevalbinop.x r64 
    push           mm_type.tevalbinop.y r64 
    add                       r64 
    pop            mm_type.tevalbinop.z r64 
    jump           #18975     
#18972: 
    push           mm_type.tevalbinop.x r64 
    push           mm_type.tevalbinop.y r64 
    sub                       r64 
    pop            mm_type.tevalbinop.z r64 
    jump           #18975     
#18973: 
    push           mm_type.tevalbinop.x r64 
    push           mm_type.tevalbinop.y r64 
    mul                       r64 
    pop            mm_type.tevalbinop.z r64 
    jump           #18975     
#18974: 
    push           mm_type.tevalbinop.x r64 
    push           mm_type.tevalbinop.y r64 
    div                       r64 
    pop            mm_type.tevalbinop.z r64 
    jump           #18975     
#18970: 
    jump           #18939     
#18975: 
    jump           #18968     
#18944: 
    jump           #18939     
#18968: 
    push           &mm_decls.ttisreal 
    push           mm_type.tevalbinop.p u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    jumpfalse      #18976     i64 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tevalbinop.z r64 
    typepun                   i64 void 0
    push           mm_type.tevalbinop.p u64 
    callproc       &mm_type.makenewconst 
    jump           #18977     
#18976: 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tevalbinop.c i64 
    push           mm_type.tevalbinop.p u64 
    callproc       &mm_type.makenewconst 
#18977: 
#18939: 
    retproc                   
End


Proc mm_type.tevalmonop:
    param          mm_type.tevalmonop.p u64 
    local          mm_type.tevalmonop.a i64 
    local          mm_type.tevalmonop.b i64 
    local          mm_type.tevalmonop.c i64 
    local          mm_type.tevalmonop.x r64 
    local          mm_type.tevalmonop.z r64 
    local          mm_type.tevalmonop.q u64 
    procentry                 
    push           mm_type.tevalmonop.p u64 
    push           16         
    pushptroff                u64 1 0
    pushptr                   u8 
    push           1          i64 
    jumpeq         #18979     i64 
    jump           #18980     
#18979: 
    push           mm_type.tevalmonop.p u64 
    push           16         
    pushptroff                u64 1 0
    push           16         
    pushptroff                i64 1 0
    pop            mm_type.tevalmonop.a i64 
    push           mm_type.tevalmonop.p u64 
    push           16         
    pushptroff                u64 1 0
    push           16         
    pushptroff                r64 1 0
    pop            mm_type.tevalmonop.x r64 
    push           mm_type.tevalmonop.p u64 
    push           48         
    pushptroff                i32 1 0
    push           4          i64 
    casejumpeq     #18981     i64 0
    push           2          i64 
    casejumpeq     #18981     i64 0
    push           7          i64 
    casejumpeq     #18982     i64 0
    push           6          i64 
    casejumpeq     #18982     i64 0
    popstack                  i64 
    jump           #18983     
#18981: 
    push           mm_type.tevalmonop.p u64 
    push           60         
    pushptroff                u8 1 0
    switch         #18984     128 132
    opnd           #18985     
#18984: 
    switchlabel    #18986     
    switchlabel    #18987     
    switchlabel    #18988     
    switchlabel    #18989     
    switchlabel    #18990     
    endswitch                 
#18986: 
    push           mm_type.tevalmonop.a i64 
    neg                       i64 
    pop            mm_type.tevalmonop.c i64 
    jump           #18991     
#18990: 
    push           mm_type.tevalmonop.a i64 
    istruel                   i64 
    pop            mm_type.tevalmonop.c i64 
    jump           #18991     
#18989: 
    push           mm_type.tevalmonop.a i64 
    istruel                   i64 
    notl                      i64 
    pop            mm_type.tevalmonop.c i64 
    jump           #18991     
#18988: 
    push           mm_type.tevalmonop.a i64 
    inot                      i64 
    pop            mm_type.tevalmonop.c i64 
    jump           #18991     
#18987: 
    push           mm_type.tevalmonop.a i64 
    abs                       i64 
    pop            mm_type.tevalmonop.c i64 
    jump           #18991     
#18985: 
    jump           #18980     
#18991: 
    jump           #18992     
#18982: 
    push           mm_type.tevalmonop.p u64 
    push           60         
    pushptroff                u8 1 0
    switch         #18993     128 140
    opnd           #18994     
#18993: 
    switchlabel    #18995     
    switchlabel    #18994     
    switchlabel    #18994     
    switchlabel    #18994     
    switchlabel    #18994     
    switchlabel    #18994     
    switchlabel    #18994     
    switchlabel    #18994     
    switchlabel    #18994     
    switchlabel    #18994     
    switchlabel    #18994     
    switchlabel    #18994     
    switchlabel    #18996     
    endswitch                 
#18995: 
    push           mm_type.tevalmonop.x r64 
    neg                       r64 
    pop            mm_type.tevalmonop.z r64 
    jump           #18997     
#18996: 
    push           mm_type.tevalmonop.x r64 
    atan                      r64 
    pop            mm_type.tevalmonop.z r64 
    jump           #18997     
#18994: 
    jump           #18980     
#18997: 
    jump           #18992     
#18983: 
    jump           #18980     
#18992: 
    push           &mm_decls.ttisreal 
    push           mm_type.tevalmonop.p u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    jumpfalse      #18998     i64 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tevalmonop.z r64 
    typepun                   i64 void 0
    push           mm_type.tevalmonop.p u64 
    callproc       &mm_type.makenewconst 
    jump           #18999     
#18998: 
    setargs                   3 0
    push           0          i64 
    push           mm_type.tevalmonop.c i64 
    push           mm_type.tevalmonop.p u64 
    callproc       &mm_type.makenewconst 
#18999: 
#18980: 
    retproc                   
End


Proc mm_type.getnewbase: i64
    param          mm_type.getnewbase.m i64 
    procentry                 
    push           &mm_decls.ttbasetype 
    push           mm_type.getnewbase.m i64 
    pushptroff                i32 4 0
    pop            mm_type.getnewbase.m i64 
    push           mm_type.getnewbase.m i64 
    push           11         i64 
    casejumpeq     #19001     i64 0
    push           13         i64 
    casejumpeq     #19001     i64 0
    popstack                  i64 
    jump           #19002     
#19001: 
    push           14         i64 
    setret                    i64 
    jump           #19003     
    jump           #19004     
#19002: 
#19004: 
    push           mm_type.getnewbase.m i64 
    setret                    i64 
    jump           #19003     
#19003: 
    retfn                     i64 
End


Proc mm_type.iscondtrue: i64
    param          mm_type.iscondtrue.p u64 
    procentry                 
    startmult                 
    push           mm_type.iscondtrue.p u64 
    pushptr                   u8 
    push           1          i64 
    jumpne         #19006     i64 
    push           mm_type.iscondtrue.p u64 
    push           16         
    pushptroff                i64 1 0
    push           0          i64 
    jumpeq         #19006     i64 
    push           1          i64 
    resetmult                 
    jump           #19007     
#19006: 
    push           0          i64 
    endmult                   
#19007: 
    setret                    i64 
    jump           #19008     
#19008: 
    retfn                     i64 
End


Proc mm_type.iscondfalse: i64
    param          mm_type.iscondfalse.p u64 
    procentry                 
    startmult                 
    push           mm_type.iscondfalse.p u64 
    pushptr                   u8 
    push           1          i64 
    jumpne         #19010     i64 
    push           mm_type.iscondfalse.p u64 
    push           16         
    pushptroff                i64 1 0
    push           0          i64 
    jumpne         #19010     i64 
    push           1          i64 
    resetmult                 
    jump           #19011     
#19010: 
    push           0          i64 
    endmult                   
#19011: 
    setret                    i64 
    jump           #19012     
#19012: 
    retfn                     i64 
End


Proc mm_type.fixchararray:
    param          mm_type.fixchararray.a u64 
    procentry                 
    push           mm_type.fixchararray.a u64 
    jumpfalse      #19014     u64 
    push           &mm_decls.ttbasetype 
    push           mm_type.fixchararray.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           11         i64 
    jumpne         #19014     i64 
    push           &mm_decls.tttarget 
    push           mm_type.fixchararray.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           16         i64 
    jumpne         #19014     i64 
    setargs                   3 0
    push           0          i64 
    push           10         i64 
    push           mm_type.fixchararray.a u64 
    callproc       &mm_type.coerceunit 
#19014: 
#19015: 
    retproc                   
End


Proc mm_type.combinestrings:
    param          mm_type.combinestrings.p u64 
    local          mm_type.combinestrings.a u64 
    local          mm_type.combinestrings.b u64 
    local          mm_type.combinestrings.alen i64 
    local          mm_type.combinestrings.blen i64 
    local          mm_type.combinestrings.clen i64 
    local          mm_type.combinestrings.s u64 
    procentry                 
    push           mm_type.combinestrings.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_type.combinestrings.a u64 
    push           mm_type.combinestrings.p u64 
    push           24         
    pushptroff                u64 1 0
    pop            mm_type.combinestrings.b u64 
    push           mm_type.combinestrings.a u64 
    push           40         
    pushptroff                u32 1 0
    pop            mm_type.combinestrings.alen i64 
    push           mm_type.combinestrings.b u64 
    push           40         
    pushptroff                u32 1 0
    pop            mm_type.combinestrings.blen i64 
    push           mm_type.combinestrings.alen i64 
    push           mm_type.combinestrings.blen i64 
    add                       i64 
    pop            mm_type.combinestrings.clen i64 
    push           mm_type.combinestrings.blen i64 
    push           0          i64 
    jumpne         #19017     i64 
    setargs                   2 0
    push           mm_type.combinestrings.a u64 
    push           mm_type.combinestrings.p u64 
    callproc       &mm_lib.deleteunit 
    jump           #19018     
    jump           #19019     
#19017: 
    push           mm_type.combinestrings.alen i64 
    push           0          i64 
    jumpne         #19020     i64 
    setargs                   2 0
    push           mm_type.combinestrings.b u64 
    push           mm_type.combinestrings.p u64 
    callproc       &mm_lib.deleteunit 
    jump           #19018     
#19020: 
#19019: 
    setargs                   1 0
    push           mm_type.combinestrings.clen i64 
    push           1          i64 
    add                       i64 
    callfn         &mlibp.pcm_alloc u64 
    pop            mm_type.combinestrings.s u64 
    setargs                   3 0
    push           mm_type.combinestrings.alen u64 
    push           mm_type.combinestrings.a u64 
    push           16         
    pushptroff                u64 1 0
    push           mm_type.combinestrings.s u64 
    callproc       &memcpy    
    setargs                   3 0
    push           mm_type.combinestrings.blen u64 
    push           mm_type.combinestrings.b u64 
    push           16         
    pushptroff                u64 1 0
    push           mm_type.combinestrings.s u64 
    push           mm_type.combinestrings.alen i64 
    addrefoff                 u64 1 0
    callproc       &memcpy    
    push           0          u64 
    push           mm_type.combinestrings.s u64 
    push           mm_type.combinestrings.clen i64 
    popptroff                 u8 1 0
    setargs                   2 0
    push           mm_type.combinestrings.a u64 
    push           mm_type.combinestrings.p u64 
    callproc       &mm_lib.deleteunit 
    push           mm_type.combinestrings.clen i64 
    push           mm_type.combinestrings.p u64 
    push           40         
    popptroff                 u32 1 0
    push           mm_type.combinestrings.s u64 
    push           mm_type.combinestrings.p u64 
    push           16         
    popptroff                 u64 1 0
#19018: 
    retproc                   
End


Proc mm_type.tx_strinclude:
    param          mm_type.tx_strinclude.p u64 
    param          mm_type.tx_strinclude.a u64 
    local          mm_type.tx_strinclude.fileno i64 
    procentry                 
    setargs                   3 0
    push           0          i64 
    push           26         i64 
    push           mm_type.tx_strinclude.a u64 
    callproc       &mm_type.tpass 
    push           mm_type.tx_strinclude.a u64 
    pushptr                   u8 
    push           1          i64 
    jumpne         #19022     i64 
    push           mm_type.tx_strinclude.a u64 
    push           44         
    pushptroff                u8 1 0
    jumptrue       #19023     i64 
#19022: 
    setargs                   2 0
    push           0          u64 
    push           "strincl/not string" u64 
    callproc       &mm_support.txerror 
#19023: 
    setargs                   1 0
    push           mm_type.tx_strinclude.a u64 
    push           16         
    pushptroff                u64 1 0
    callfn         &mm_support.getsupportfile i64 
    pop            mm_type.tx_strinclude.fileno i64 
    push           &mm_decls.sourcefiletext 
    push           mm_type.tx_strinclude.fileno i64 
    pushptroff                u64 8 0
    push           mm_type.tx_strinclude.a u64 
    push           16         
    popptroff                 u64 1 0
    push           &mm_decls.sourcefilesizes 
    push           mm_type.tx_strinclude.fileno i64 
    pushptroff                i64 8 0
    push           mm_type.tx_strinclude.a u64 
    push           40         
    popptroff                 u32 1 0
    setargs                   2 0
    push           mm_type.tx_strinclude.a u64 
    push           mm_type.tx_strinclude.p u64 
    callproc       &mm_lib.deleteunit 
#19024: 
    retproc                   
End


Proc mm_genpcl.codegen_pcl: i64
    param          mm_genpcl.codegen_pcl.rts i64 
    local          mm_genpcl.codegen_pcl.d u64 
    local          mm_genpcl.codegen_pcl.e u64 
    local          mm_genpcl.codegen_pcl.pp u64 
    procentry                 
    setargs                   0 0
    callproc       &pc_libpcl.pcl_start 
    setargs                   1 0
    push           mm_decls.stprogram u64 
    callproc       &mm_genpcl.scansymbol 
    push           mm_decls.staticlist u64 
    pop            mm_genpcl.codegen_pcl.pp u64 
    jump           #19026     
#19027: 
    push           mm_genpcl.codegen_pcl.pp u64 
    pushptr                   u64 
    pop            mm_genpcl.codegen_pcl.d u64 
    setargs                   1 0
    push           mm_genpcl.codegen_pcl.d u64 
    callproc       &mm_genpcl.dostaticvar 
    push           mm_genpcl.codegen_pcl.pp u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_genpcl.codegen_pcl.pp u64 
#19026: 
    push           mm_genpcl.codegen_pcl.pp u64 
    jumptrue       #19027     u64 
#19028: 
    setargs                   1 0
    push           ""         u64 
    callproc       &pc_libpcl.pcl_gencomment 
    push           mm_decls.proclist u64 
    pop            mm_genpcl.codegen_pcl.pp u64 
    jump           #19029     
#19030: 
    push           mm_genpcl.codegen_pcl.pp u64 
    pushptr                   u64 
    pop            mm_genpcl.codegen_pcl.d u64 
    setargs                   1 0
    push           mm_genpcl.codegen_pcl.d u64 
    store          mm_decls.currproc u64 
    callproc       &mm_genpcl.genprocdef 
    push           mm_genpcl.codegen_pcl.pp u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_genpcl.codegen_pcl.pp u64 
#19029: 
    push           mm_genpcl.codegen_pcl.pp u64 
    jumptrue       #19030     u64 
#19031: 
    setargs                   2 0
    push           mm_genpcl.codegen_pcl.rts i64 
    push           0          i64 
    callproc       &pc_win64.pcl_endprog 
    push           1          i64 
    setret                    i64 
    jump           #19032     
#19032: 
    retfn                     i64 
End


Proc mm_genpcl.genprocdef:
    param          mm_genpcl.genprocdef.p u64 
    local          mm_genpcl.genprocdef.str block:1256 
    local          mm_genpcl.genprocdef.name block:1256 
    local          mm_genpcl.genprocdef.paramoffset i64 
    local          mm_genpcl.genprocdef.nparams i64 
    local          mm_genpcl.genprocdef.retaddrbytes i64 
    local          mm_genpcl.genprocdef.d u64 
    local          mm_genpcl.genprocdef.n i64 
    local          mm_genpcl.genprocdef.lab i64 
    local          mm_genpcl.genprocdef.np i64 
    local          mm_genpcl.genprocdef.offset i64 
    local          mm_genpcl.genprocdef.reg i64 
    local          mm_genpcl.genprocdef.i i64 
    local          mm_genpcl.genprocdef.xreg i64 
    local          mm_genpcl.genprocdef.isstart i64 
    local          mm_genpcl.genprocdef.structret i64 
    local          mm_genpcl.genprocdef.isfloat i64 
    local          mm_genpcl.genprocdef.hasparams i64 
    local          mm_genpcl.genprocdef.hasequiv i64 
    local          mm_genpcl.genprocdef.q u64 
    local          mm_genpcl.genprocdef.pcproc u64 
    local          mm_genpcl.genprocdef.oldpccode u64 
    local          mm_genpcl.genprocdef.oldpccurr u64 
    local          mm_genpcl.genprocdef.pp u64 
    local          mm_genpcl.genprocdef.qq u64 
    procentry                 
    push           mm_genpcl.genprocdef.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_genpcl.genprocdef.d u64 
    push           0          i64 
    pop            mm_genpcl.genprocdef.isstart i64 
    push           mm_genpcl.genprocdef.p u64 
    push           92         
    pushptroff                u16 1 0
    push           0          i64 
    push           1          i64 
    dotslice                  i64 
    jumpfalse      #19034     u64 
    setargs                   2 0
    push           "start"    u64 
    push           mm_genpcl.genprocdef.p u64 
    pushptr                   u64 
    callfn         &mlibp.eqstring i64 
    jumptrue       #19035     i64 
    setargs                   2 0
    push           "main"     u64 
    push           mm_genpcl.genprocdef.p u64 
    pushptr                   u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #19034     i64 
#19035: 
    push           1          i64 
    pop            mm_genpcl.genprocdef.isstart i64 
    push           pc_libpcl.labelno i64 
    push           mm_genpcl.genprocdef.p u64 
    push           80         
    popptroff                 i32 1 0
#19034: 
    push           1          i64 
    pop            mm_genpcl.retpending i64 
    push           mm_genpcl.genprocdef.p u64 
    push           88         
    pushptroff                u32 1 0
    pop            mm_tables.mlineno i64 
    setargs                   2 0
    setargs                   1 0
    push           mm_genpcl.genprocdef.p u64 
    callfn         &mm_genpcl.genmem_d u64 
    push           8          i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_genpcl.genprocdef.p u64 
    push           72         
    pushptroff                i32 1 0
    callproc       &mm_genpcl.setmode 
    push           mm_genpcl.genprocdef.p u64 
    push           92         
    pushptroff                u16 1 0
    push           0          i64 
    push           1          i64 
    dotslice                  i64 
    push           2          i64 
    jumpne         #19036     i64 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_libpcl.pcl_setexported 
#19036: 
    push           mm_genpcl.genprocdef.p u64 
    pushptr                   u64 
    pushptr                   u8 
    push           36         u64 
    jumpne         #19037     u64 
    setargs                   0 0
    callproc       &pc_libpcl.pcl_setrtsproc 
#19037: 
    push           pc_libpcl.pccurr u64 
    pop            mm_genpcl.genprocdef.pcproc u64 
    push           mm_genpcl.genprocdef.pcproc u64 
    pop            mm_genpcl.pclastframe u64 
    push           0          i64 
    pop            mm_genpcl.pcltempindex i64 
    push           mm_genpcl.genprocdef.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_genpcl.genprocdef.d u64 
    jump           #19038     
#19039: 
    push           mm_genpcl.genprocdef.d u64 
    push           88         
    pushptroff                u32 1 0
    pop            mm_tables.mlineno i64 
    push           mm_genpcl.genprocdef.d u64 
    push           78         
    pushptroff                u8 1 0
    push           12         i64 
    casejumpeq     #19040     i64 0
    push           13         i64 
    casejumpeq     #19041     i64 0
    popstack                  i64 
    jump           #19042     
#19040: 
    push           mm_genpcl.genprocdef.d u64 
    push           92         
    pushptroff                u16 1 0
    push           13         i64 
    dotindex                  i64 
    jumptrue       #19043     u64 
    setargs                   2 0
    setargs                   1 0
    push           mm_genpcl.genprocdef.d u64 
    callfn         &mm_genpcl.genmem_d u64 
    push           17         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_genpcl.genprocdef.d u64 
    push           72         
    pushptroff                i32 1 0
    callproc       &mm_genpcl.setmode 
    push           pc_libpcl.pccurr u64 
    pop            mm_genpcl.pclastframe u64 
#19043: 
    jump           #19044     
#19041: 
    setargs                   2 0
    setargs                   1 0
    push           mm_genpcl.genprocdef.d u64 
    callfn         &mm_genpcl.genmem_d u64 
    push           18         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_genpcl.genprocdef.d u64 
    push           72         
    pushptroff                i32 1 0
    callproc       &mm_genpcl.setmode 
    jump           #19044     
#19042: 
#19044: 
    push           mm_genpcl.genprocdef.d u64 
    push           32         
    pushptroff                u64 1 0
    pop            mm_genpcl.genprocdef.d u64 
#19038: 
    push           mm_genpcl.genprocdef.d u64 
    jumptrue       #19039     u64 
#19045: 
    setargs                   1 0
    push           mm_genpcl.genprocdef.isstart i64 
    callproc       &mm_genpcl.genprocentry 
    push           mm_genpcl.genprocdef.isstart i64 
    jumpfalse      #19046     i64 
    push           mm_decls.msyslevel i64 
    push           2          i64 
    jumpne         #19046     i64 
    setargs                   5 0
    push           0          i64 
    push           0          u64 
    push           0          u64 
    push           0          u64 
    push           1          i64 
    callproc       &mm_genpcl.pcl_gen_sysproc 
#19046: 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    store          mm_genpcl.genprocdef.lab i64 
    pop            mm_genpcl.retindex i64 
    push           mm_genpcl.genprocdef.isstart i64 
    jumpfalse      #19047     i64 
#19048: 
    push           mm_decls.nmodules i64 
    pop            mm_genpcl.genprocdef.i i64 
    push           mm_genpcl.genprocdef.i i64 
    push           1          i64 
    jumplt         #19049     i64 
#19050: 
    push           &mm_decls.moduletable 
    push           mm_genpcl.genprocdef.i i64 
    addrefoff                 block:456 456 0
    push           440        
    pushptroff                u64 1 0
    pop            mm_genpcl.genprocdef.d u64 
    push           mm_genpcl.genprocdef.d u64 
    jumpfalse      #19051     u64 
    setargs                   2 0
    push           0          u64 
    push           196        i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   2 0
    setargs                   1 0
    push           mm_genpcl.genprocdef.d u64 
    callfn         &mm_genpcl.genmemaddr_d u64 
    push           44         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           4          i64 
    callproc       &mm_genpcl.setmode 
#19051: 
#19052: 
    fordown        #19050     i64 1
    opnd           mm_genpcl.genprocdef.i 
    opnd           1          
#19049: 
#19047: 
    setargs                   1 0
    push           mm_genpcl.genprocdef.p u64 
    push           64         
    pushptroff                u64 1 0
    callproc       &mm_blockpcl.evalunit 
    setargs                   1 0
    push           mm_genpcl.retindex i64 
    callproc       &mm_genpcl.definefwdlabel 
    push           mm_genpcl.genprocdef.isstart i64 
    jumpfalse      #19053     i64 
    setargs                   2 0
    setargs                   2 0
    push           9          i64 
    push           0          i64 
    callfn         &pc_libpcl.pcl_genint u64 
    push           21         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   2 0
    push           0          u64 
    push           2          i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   0 0
    callproc       &mm_genpcl.genreturn 
    jump           #19054     
#19053: 
    setargs                   0 0
    callproc       &mm_genpcl.genreturn 
#19054: 
    push           mm_genpcl.genprocdef.p u64 
    push           72         
    pushptroff                i32 1 0
    push           0          i64 
    jumpeq         #19055     i64 
    setargs                   1 0
    push           mm_genpcl.genprocdef.p u64 
    push           64         
    pushptroff                u64 1 0
    callfn         &mm_lib.checkblockreturn i64 
    jumptrue       #19056     i64 
    setargs                   3 0
    push           0          u64 
    push           mm_genpcl.genprocdef.p u64 
    pushptr                   u64 
    push           "Function needs explicit return: " u64 
    callproc       &mm_support.gerror_s 
#19056: 
#19055: 
    setargs                   2 0
    push           0          u64 
    push           10         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           ""         u64 
    callproc       &pc_libpcl.pcl_gencomment 
#19057: 
    retproc                   
End


Proc mm_genpcl.genprocentry:
    param          mm_genpcl.genprocentry.isstart i64 
    procentry                 
    setargs                   2 0
    push           0          u64 
    push           9          i64 
    callproc       &pc_libpcl.pcl_gen 
#19059: 
    retproc                   
End


Proc mm_genpcl.dostaticvar:
    param          mm_genpcl.dostaticvar.d u64 
    local          mm_genpcl.dostaticvar.p u64 
    procentry                 
    push           mm_genpcl.dostaticvar.d u64 
    push           92         
    pushptroff                u16 1 0
    push           14         i64 
    dotindex                  i64 
    jumpfalse      #19061     u64 
    jump           #19062     
#19061: 
    push           mm_genpcl.dostaticvar.d u64 
    push           92         
    pushptroff                u16 1 0
    push           13         i64 
    dotindex                  i64 
    push           1          i64 
    jumpne         #19063     i64 
    jump           #19064     
#19063: 
    push           mm_genpcl.dostaticvar.d u64 
    push           64         
    pushptroff                u64 1 0
    jumpfalse      #19065     u64 
    setargs                   2 0
    setargs                   1 0
    push           mm_genpcl.dostaticvar.d u64 
    callfn         &mm_genpcl.genmem_d u64 
    push           5          i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_genpcl.dostaticvar.d u64 
    push           72         
    pushptroff                i32 1 0
    callproc       &mm_genpcl.setmode 
    setargs                   1 0
    setargs                   1 0
    push           mm_genpcl.dostaticvar.d u64 
    push           72         
    pushptroff                i32 1 0
    callfn         &mm_lib.getalignment i64 
    callproc       &pc_libpcl.pcl_setalign 
    setargs                   4 0
    push           0          i64 
    push           65         i64 
    push           1          i64 
    push           mm_genpcl.dostaticvar.d u64 
    push           64         
    pushptroff                u64 1 0
    callproc       &mm_genpcl.genidata 
    jump           #19064     
#19065: 
!dozstatic::
#19066: 
    setargs                   2 0
    setargs                   1 0
    push           mm_genpcl.dostaticvar.d u64 
    callfn         &mm_genpcl.genmem_d u64 
    push           6          i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_genpcl.dostaticvar.d u64 
    push           72         
    pushptroff                i32 1 0
    callproc       &mm_genpcl.setmode 
    setargs                   1 0
    setargs                   1 0
    push           mm_genpcl.dostaticvar.d u64 
    push           72         
    pushptroff                i32 1 0
    callfn         &mm_lib.getalignment i64 
    callproc       &pc_libpcl.pcl_setalign 
#19064: 
#19062: 
    retproc                   
End


Proc mm_genpcl.genidata:
    param          mm_genpcl.genidata.p u64 
    param          mm_genpcl.genidata.doterm i64 
    param          mm_genpcl.genidata.am i64 
    param          mm_genpcl.genidata.offset i64 
    local          mm_genpcl.genidata.t i64 
    local          mm_genpcl.genidata.length i64 
    local          mm_genpcl.genidata.n i64 
    local          mm_genpcl.genidata.i i64 
    local          mm_genpcl.genidata.j i64 
    local          mm_genpcl.genidata.nwords i64 
    local          mm_genpcl.genidata.offset1 i64 
    local          mm_genpcl.genidata.offset2 i64 
    local          mm_genpcl.genidata.size i64 
    local          mm_genpcl.genidata.padding i64 
    local          mm_genpcl.genidata.isunion i64 
    local          mm_genpcl.genidata.tbase i64 
    local          mm_genpcl.genidata.q u64 
    local          mm_genpcl.genidata.a u64 
    local          mm_genpcl.genidata.b u64 
    local          mm_genpcl.genidata.d u64 
    local          mm_genpcl.genidata.sx r32 
    procentry                 
    push           mm_genpcl.genidata.p u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_genpcl.genidata.t i64 
    push           mm_genpcl.genidata.p u64 
    push           4          
    pushptroff                u32 1 0
    push           0          i64 
    push           23         i64 
    dotslice                  i64 
    pop            mm_tables.mlineno i64 
    push           &mm_decls.ttbasetype 
    push           mm_genpcl.genidata.t i64 
    pushptroff                i32 4 0
    pop            mm_genpcl.genidata.tbase i64 
    push           mm_genpcl.genidata.p u64 
    pushptr                   u8 
    push           1          i64 
    casejumpeq     #19068     i64 0
    push           19         i64 
    casejumpeq     #19069     i64 0
    push           3          i64 
    casejumpeq     #19070     i64 0
    push           61         i64 
    casejumpeq     #19071     i64 0
    push           62         i64 
    casejumpeq     #19072     i64 0
    push           59         i64 
    casejumpeq     #19073     i64 0
    push           60         i64 
    casejumpeq     #19073     i64 0
    popstack                  i64 
    jump           #19074     
#19068: 
    push           &mm_decls.ttisref 
    push           mm_genpcl.genidata.p u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    jumpfalse      #19075     i64 
    push           mm_genpcl.genidata.p u64 
    push           48         
    pushptroff                i32 1 0
    push           10         i64 
    jumpne         #19076     i64 
    push           mm_genpcl.genidata.p u64 
    push           16         
    pushptroff                u64 1 0
    jumpfalse      #19077     u64 
    setargs                   2 0
    setargs                   1 0
    push           mm_genpcl.genidata.p u64 
    push           16         
    pushptroff                u64 1 0
    callfn         &pc_libpcl.pcl_genstring u64 
    push           96         i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #19078     
#19077: 
    setargs                   2 0
    setargs                   2 0
    push           9          i64 
    push           0          i64 
    callfn         &pc_libpcl.pcl_genint u64 
    push           96         i64 
    callproc       &pc_libpcl.pcl_gen 
#19078: 
    jump           #19079     
#19076: 
    setargs                   2 0
    setargs                   2 0
    push           9          i64 
    push           mm_genpcl.genidata.p u64 
    push           16         
    pushptroff                i64 1 0
    callfn         &pc_libpcl.pcl_genint u64 
    push           96         i64 
    callproc       &pc_libpcl.pcl_gen 
#19079: 
    jump           #19080     
#19075: 
    push           &mm_decls.ttisreal 
    push           mm_genpcl.genidata.p u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    jumpfalse      #19081     i64 
    push           &mm_decls.ttsize 
    push           mm_genpcl.genidata.p u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           4          i64 
    casejumpeq     #19082     i64 0
    push           8          i64 
    casejumpeq     #19083     i64 0
    popstack                  i64 
    jump           #19084     
#19082: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "HERE"     u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   2 0
    push           0          i64 
    push           mm_genpcl.genidata.p u64 
    push           16         
    pushptroff                r64 1 0
    callproc       &msysp.m$print_r64 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    setargs                   1 0
    push           mm_genpcl.genidata.p u64 
    push           16         
    pushptroff                r64 1 0
    callfn         &pc_libpcl.pcl_genreal32 u64 
    push           95         i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #19085     
#19083: 
    setargs                   2 0
    setargs                   1 0
    push           mm_genpcl.genidata.p u64 
    push           16         
    pushptroff                r64 1 0
    callfn         &pc_libpcl.pcl_genreal u64 
    push           96         i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #19085     
#19084: 
    setargs                   3 0
    push           mm_genpcl.genidata.p u64 
    setargs                   2 0
    push           1          i64 
    push           mm_genpcl.genidata.p u64 
    push           48         
    pushptroff                i32 1 0
    callfn         &mm_lib.strmode u64 
    push           "IDATA/REAL:" u64 
    callproc       &mm_support.gerror_s 
#19085: 
    jump           #19080     
#19081: 
    push           &mm_decls.ttsize 
    setargs                   1 0
    push           mm_genpcl.genidata.p u64 
    callfn         &mm_lib.getmemmode i64 
    pushptroff                i32 4 0
    push           1          i64 
    casejumpeq     #19086     i64 0
    push           2          i64 
    casejumpeq     #19087     i64 0
    push           4          i64 
    casejumpeq     #19088     i64 0
    push           8          i64 
    casejumpeq     #19089     i64 0
    push           16         i64 
    casejumpeq     #19090     i64 0
    popstack                  i64 
    jump           #19091     
#19086: 
    setargs                   2 0
    setargs                   2 0
    push           9          i64 
    push           mm_genpcl.genidata.p u64 
    push           16         
    pushptroff                i64 1 0
    callfn         &pc_libpcl.pcl_genint u64 
    push           93         i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #19092     
#19087: 
    setargs                   2 0
    setargs                   2 0
    push           9          i64 
    push           mm_genpcl.genidata.p u64 
    push           16         
    pushptroff                i64 1 0
    callfn         &pc_libpcl.pcl_genint u64 
    push           94         i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #19092     
#19088: 
    setargs                   2 0
    setargs                   2 0
    push           9          i64 
    push           mm_genpcl.genidata.p u64 
    push           16         
    pushptroff                i64 1 0
    callfn         &pc_libpcl.pcl_genint u64 
    push           95         i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #19092     
#19089: 
    setargs                   2 0
    setargs                   2 0
    push           9          i64 
    push           mm_genpcl.genidata.p u64 
    push           16         
    pushptroff                i64 1 0
    callfn         &pc_libpcl.pcl_genint u64 
    push           96         i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #19092     
#19090: 
    setargs                   2 0
    setargs                   2 0
    push           9          i64 
    push           mm_genpcl.genidata.p u64 
    push           16         
    pushptroff                i64 1 0
    callfn         &pc_libpcl.pcl_genint u64 
    push           96         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   2 0
    setargs                   2 0
    push           9          i64 
    push           mm_genpcl.genidata.p u64 
    push           24         
    pushptroff                i64 1 0
    callfn         &pc_libpcl.pcl_genint u64 
    push           96         i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #19092     
#19091: 
    setargs                   3 0
    push           mm_genpcl.genidata.p u64 
    setargs                   2 0
    push           1          i64 
    push           mm_genpcl.genidata.p u64 
    push           48         
    pushptroff                i32 1 0
    callfn         &mm_lib.strmode u64 
    push           "IDATA/INT:" u64 
    callproc       &mm_support.gerror_s 
#19092: 
#19080: 
    jump           #19093     
#19069: 
    push           mm_genpcl.genidata.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_genpcl.genidata.q u64 
    jump           #19094     
#19095: 
    setargs                   4 0
    push           0          i64 
    push           65         i64 
    push           1          i64 
    push           mm_genpcl.genidata.q u64 
    callproc       &mm_genpcl.genidata 
    push           mm_genpcl.genidata.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_genpcl.genidata.q u64 
#19094: 
    push           mm_genpcl.genidata.q u64 
    jumptrue       #19095     u64 
#19096: 
    jump           #19093     
#19070: 
    push           mm_genpcl.genidata.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_genpcl.genidata.d u64 
    push           mm_genpcl.genidata.d u64 
    push           78         
    pushptroff                u8 1 0
    push           11         i64 
    casejumpeq     #19097     i64 0
    push           5          i64 
    casejumpeq     #19097     i64 0
    push           6          i64 
    casejumpeq     #19097     i64 0
    popstack                  i64 
    jump           #19098     
#19097: 
    setargs                   2 0
    setargs                   1 0
    push           mm_genpcl.genidata.d u64 
    callfn         &mm_genpcl.genmemaddr_d u64 
    startmult                 
    push           mm_genpcl.genidata.am i64 
    push           80         i64 
    jumpeq         #19099     i64 
    push           &mm_decls.ttsize 
    push           mm_genpcl.genidata.p u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           8          i64 
    jumpne         #19100     i64 
#19099: 
    push           96         i64 
    resetmult                 
    jump           #19101     
#19100: 
    push           95         i64 
    endmult                   
#19101: 
    callproc       &pc_libpcl.pcl_gen 
    push           mm_genpcl.genidata.offset i64 
    jumpfalse      #19102     i64 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_libpcl.pcl_setscale 
    setargs                   1 0
    push           mm_genpcl.genidata.offset i64 
    callproc       &pc_libpcl.pcl_setoffset 
#19102: 
    jump           #19103     
#19098: 
    setargs                   2 0
    push           0          u64 
    push           "Idata &frameXXX" u64 
    callproc       &mm_support.gerror 
#19103: 
    jump           #19104     
    jump           #19093     
#19071: 
    setargs                   4 0
    push           0          i64 
    push           65         i64 
    push           1          i64 
    push           mm_genpcl.genidata.p u64 
    push           16         
    pushptroff                u64 1 0
    callproc       &mm_genpcl.genidata 
    jump           #19093     
#19072: 
    push           mm_genpcl.genidata.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_genpcl.genidata.a u64 
    push           &mm_decls.ttsize 
    push           mm_genpcl.genidata.p u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           1          i64 
    casejumpeq     #19105     i64 0
    push           2          i64 
    casejumpeq     #19106     i64 0
    push           4          i64 
    casejumpeq     #19107     i64 0
    popstack                  i64 
    jump           #19108     
#19105: 
    setargs                   2 0
    setargs                   2 0
    push           9          i64 
    push           mm_genpcl.genidata.a u64 
    push           16         
    pushptroff                i64 1 0
    callfn         &pc_libpcl.pcl_genint u64 
    push           93         i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #19109     
#19106: 
    setargs                   2 0
    setargs                   2 0
    push           9          i64 
    push           mm_genpcl.genidata.a u64 
    push           16         
    pushptroff                i64 1 0
    callfn         &pc_libpcl.pcl_genint u64 
    push           94         i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #19109     
#19107: 
    setargs                   2 0
    setargs                   2 0
    push           9          i64 
    push           mm_genpcl.genidata.a u64 
    push           16         
    pushptroff                i64 1 0
    callfn         &pc_libpcl.pcl_genint u64 
    push           95         i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #19109     
#19108: 
    setargs                   3 0
    push           mm_genpcl.genidata.p u64 
    setargs                   2 0
    push           1          i64 
    push           mm_genpcl.genidata.p u64 
    push           48         
    pushptroff                i32 1 0
    callfn         &mm_lib.strmode u64 
    push           "IDATA/SHORTEN:" u64 
    callproc       &mm_support.gerror_s 
#19109: 
    jump           #19093     
#19073: 
    setargs                   4 0
    startmult                 
    push           mm_genpcl.genidata.p u64 
    push           24         
    pushptroff                u64 1 0
    jumpfalse      #19110     u64 
    push           mm_genpcl.genidata.p u64 
    push           24         
    pushptroff                u64 1 0
    push           16         
    pushptroff                i64 1 0
    resetmult                 
    jump           #19111     
#19110: 
    push           0          i64 
    endmult                   
#19111: 
    push           80         i64 
    push           1          i64 
    push           mm_genpcl.genidata.p u64 
    push           16         
    pushptroff                u64 1 0
    callproc       &mm_genpcl.genidata 
    jump           #19093     
#19074: 
    setargs                   3 0
    push           mm_genpcl.genidata.p u64 
    push           &mm_tables.jtagnames 
    push           mm_genpcl.genidata.p u64 
    pushptr                   u8 
    pushptroff                u64 8 0
    push           "IDATA: "  u64 
    callproc       &mm_support.gerror_s 
#19093: 
#19104: 
    retproc                   
End


Proc mm_genpcl.genmem_u: u64
    param          mm_genpcl.genmem_u.p u64 
    procentry                 
    setargs                   1 0
    setargs                   1 0
    push           mm_genpcl.genmem_u.p u64 
    push           16         
    pushptroff                u64 1 0
    callfn         &mm_genpcl.getpst u64 
    callfn         &pc_libpcl.pcl_genmem u64 
    setret                    u64 
    jump           #19113     
#19113: 
    retfn                     u64 
End


Proc mm_genpcl.genmem_d: u64
    param          mm_genpcl.genmem_d.d u64 
    procentry                 
    setargs                   1 0
    setargs                   1 0
    push           mm_genpcl.genmem_d.d u64 
    callfn         &mm_genpcl.getpst u64 
    callfn         &pc_libpcl.pcl_genmem u64 
    setret                    u64 
    jump           #19115     
#19115: 
    retfn                     u64 
End


Proc mm_genpcl.genpushmem_d:
    param          mm_genpcl.genpushmem_d.d u64 
    procentry                 
    setargs                   2 0
    setargs                   1 0
    setargs                   1 0
    push           mm_genpcl.genpushmem_d.d u64 
    callfn         &mm_genpcl.getpst u64 
    callfn         &pc_libpcl.pcl_genmem u64 
    push           21         i64 
    callproc       &pc_libpcl.pcl_gen 
#19117: 
    retproc                   
End


Proc mm_genpcl.genmemaddr_d: u64
    param          mm_genpcl.genmemaddr_d.d u64 
    procentry                 
    setargs                   1 0
    setargs                   1 0
    push           mm_genpcl.genmemaddr_d.d u64 
    callfn         &mm_genpcl.getpst u64 
    callfn         &pc_libpcl.pcl_genmemaddr u64 
    setret                    u64 
    jump           #19119     
#19119: 
    retfn                     u64 
End


Proc mm_genpcl.genpushmemaddr_d:
    param          mm_genpcl.genpushmemaddr_d.d u64 
    procentry                 
    setargs                   2 0
    setargs                   1 0
    setargs                   1 0
    push           mm_genpcl.genpushmemaddr_d.d u64 
    callfn         &mm_genpcl.getpst u64 
    callfn         &pc_libpcl.pcl_genmemaddr u64 
    push           21         i64 
    callproc       &pc_libpcl.pcl_gen 
#19121: 
    retproc                   
End


Proc mm_genpcl.setmode:
    param          mm_genpcl.setmode.m i64 
    procentry                 
    setargs                   2 0
    push           &mm_decls.ttsize 
    push           mm_genpcl.setmode.m i64 
    pushptroff                i32 4 0
    setargs                   1 0
    push           mm_genpcl.setmode.m i64 
    callfn         &mm_lib.getpclmode i64 
    callproc       &pc_libpcl.pcl_settype 
#19123: 
    retproc                   
End


Proc mm_genpcl.setmode_u:
    param          mm_genpcl.setmode_u.p u64 
    procentry                 
    setargs                   2 0
    push           &mm_decls.ttsize 
    push           mm_genpcl.setmode_u.p u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    setargs                   1 0
    push           mm_genpcl.setmode_u.p u64 
    push           48         
    pushptroff                i32 1 0
    callfn         &mm_lib.getpclmode i64 
    callproc       &pc_libpcl.pcl_settype 
#19125: 
    retproc                   
End


Proc mm_genpcl.definelabel: i64
    procentry                 
    setargs                   2 0
    setargs                   1 0
    push           &pc_libpcl.labelno 
    incrload                  i64 1
    callfn         &pc_libpcl.pcl_genlabel u64 
    push           19         i64 
    callproc       &pc_libpcl.pcl_gen 
    push           pc_libpcl.labelno i64 
    setret                    i64 
    jump           #19127     
#19127: 
    retfn                     i64 
End


Proc mm_genpcl.createfwdlabel: i64
    procentry                 
    push           &pc_libpcl.labelno 
    incrload                  i64 1
    setret                    i64 
    jump           #19129     
#19129: 
    retfn                     i64 
End


Proc mm_genpcl.definefwdlabel:
    param          mm_genpcl.definefwdlabel.lab i64 
    procentry                 
    setargs                   2 0
    setargs                   1 0
    push           mm_genpcl.definefwdlabel.lab i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    push           19         i64 
    callproc       &pc_libpcl.pcl_gen 
#19131: 
    retproc                   
End


Proc mm_genpcl.genreturn:
    procentry                 
    push           mm_decls.currproc u64 
    push           116        
    pushptroff                u8 1 0
    push           0          i64 
    casejumpeq     #19133     i64 0
    push           1          i64 
    casejumpeq     #19134     i64 0
    popstack                  i64 
    jump           #19135     
#19133: 
    setargs                   2 0
    push           0          u64 
    push           46         i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #19136     
#19134: 
    setargs                   2 0
    push           0          u64 
    push           49         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_decls.currproc u64 
    push           72         
    pushptroff                i32 1 0
    callproc       &mm_genpcl.setmode 
    jump           #19136     
#19135: 
    setargs                   3 0
    push           0          u64 
    push           mm_decls.currproc u64 
    push           116        
    pushptroff                u8 1 0
    push           49         i64 
    callproc       &pc_libpcl.pcl_genx 
#19136: 
#19137: 
    retproc                   
End


Proc mm_genpcl.reversecond: i64
    param          mm_genpcl.reversecond.pclop i64 
    procentry                 
    push           mm_genpcl.reversecond.pclop i64 
    push           116        i64 
    casejumpeq     #19139     i64 0
    push           117        i64 
    casejumpeq     #19140     i64 0
    push           118        i64 
    casejumpeq     #19141     i64 0
    push           119        i64 
    casejumpeq     #19142     i64 0
    push           120        i64 
    casejumpeq     #19143     i64 0
    push           121        i64 
    casejumpeq     #19144     i64 0
    popstack                  i64 
    jump           #19145     
#19139: 
    push           117        i64 
    pop            mm_genpcl.reversecond.pclop i64 
    jump           #19146     
#19140: 
    push           116        i64 
    pop            mm_genpcl.reversecond.pclop i64 
    jump           #19146     
#19141: 
    push           120        i64 
    pop            mm_genpcl.reversecond.pclop i64 
    jump           #19146     
#19142: 
    push           121        i64 
    pop            mm_genpcl.reversecond.pclop i64 
    jump           #19146     
#19143: 
    push           118        i64 
    pop            mm_genpcl.reversecond.pclop i64 
    jump           #19146     
#19144: 
    push           119        i64 
    pop            mm_genpcl.reversecond.pclop i64 
    jump           #19146     
#19145: 
#19146: 
    push           mm_genpcl.reversecond.pclop i64 
    setret                    i64 
    jump           #19147     
#19147: 
    retfn                     i64 
End


Proc mm_genpcl.stacklooplabels:
    param          mm_genpcl.stacklooplabels.a i64 
    param          mm_genpcl.stacklooplabels.b i64 
    param          mm_genpcl.stacklooplabels.c i64 
    param          mm_genpcl.stacklooplabels.d i64 
    procentry                 
    push           &mm_genpcl.loopindex 
    incr                      i64 1
    push           mm_genpcl.loopindex i64 
    push           50         i64 
    jumple         #19149     i64 
    setargs                   2 0
    push           0          u64 
    push           "Too many nested loops" u64 
    callproc       &mm_support.gerror 
#19149: 
    push           mm_genpcl.stacklooplabels.a i64 
    push           &mm_genpcl.loopstack 
    push           mm_genpcl.loopindex i64 
    addrefoff                 block:32 32 -32
    push           1          i64 
    popptroff                 i64 8 -8
    push           mm_genpcl.stacklooplabels.b i64 
    push           &mm_genpcl.loopstack 
    push           mm_genpcl.loopindex i64 
    addrefoff                 block:32 32 -32
    push           2          i64 
    popptroff                 i64 8 -8
    push           mm_genpcl.stacklooplabels.c i64 
    push           &mm_genpcl.loopstack 
    push           mm_genpcl.loopindex i64 
    addrefoff                 block:32 32 -32
    push           3          i64 
    popptroff                 i64 8 -8
    push           mm_genpcl.stacklooplabels.d i64 
    push           &mm_genpcl.loopstack 
    push           mm_genpcl.loopindex i64 
    addrefoff                 block:32 32 -32
    push           4          i64 
    popptroff                 i64 8 -8
#19150: 
    retproc                   
End


Proc mm_genpcl.findlooplabel: i64
    param          mm_genpcl.findlooplabel.k i64 
    param          mm_genpcl.findlooplabel.n i64 
    local          mm_genpcl.findlooplabel.i i64 
    procentry                 
    push           mm_genpcl.loopindex i64 
    push           mm_genpcl.findlooplabel.n i64 
    push           1          i64 
    sub                       i64 
    sub                       i64 
    pop            mm_genpcl.findlooplabel.i i64 
    push           mm_genpcl.findlooplabel.i i64 
    push           1          i64 
    jumplt         #19152     i64 
    push           mm_genpcl.findlooplabel.i i64 
    push           mm_genpcl.loopindex i64 
    jumple         #19153     i64 
#19152: 
    setargs                   2 0
    push           0          u64 
    push           "Bad loop index" u64 
    callproc       &mm_support.gerror 
#19153: 
    push           &mm_genpcl.loopstack 
    push           mm_genpcl.findlooplabel.i i64 
    addrefoff                 block:32 32 -32
    push           mm_genpcl.findlooplabel.k i64 
    pushptroff                i64 8 -8
    setret                    i64 
    jump           #19154     
#19154: 
    retfn                     i64 
End


Proc mm_genpcl.pcl_gen_sysfn:
    param          mm_genpcl.pcl_gen_sysfn.fnindex i64 
    param          mm_genpcl.pcl_gen_sysfn.a u64 
    param          mm_genpcl.pcl_gen_sysfn.b u64 
    param          mm_genpcl.pcl_gen_sysfn.c u64 
    procentry                 
    setargs                   5 0
    push           1          i64 
    push           mm_genpcl.pcl_gen_sysfn.c u64 
    push           mm_genpcl.pcl_gen_sysfn.b u64 
    push           mm_genpcl.pcl_gen_sysfn.a u64 
    push           mm_genpcl.pcl_gen_sysfn.fnindex i64 
    callproc       &mm_genpcl.pcl_gen_sysproc 
#19156: 
    retproc                   
End


Proc mm_genpcl.getslots: i64
    param          mm_genpcl.getslots.p u64 
    procentry                 
    push           &mm_decls.ttbasetype 
    push           mm_genpcl.getslots.p u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           5          i64 
    setjumpeq      #19158     i64 
    push           3          i64 
    setjumpeq      #19158     i64 
    push           12         i64 
    setjumpne      #19159     i64 
#19158: 
    push           2          i64 
    setret                    i64 
    jump           #19160     
#19159: 
    push           1          i64 
    setret                    i64 
    jump           #19160     
#19160: 
    retfn                     i64 
End


Proc mm_genpcl.pcl_gen_sysproc:
    param          mm_genpcl.pcl_gen_sysproc.fnindex i64 
    param          mm_genpcl.pcl_gen_sysproc.a u64 
    param          mm_genpcl.pcl_gen_sysproc.b u64 
    param          mm_genpcl.pcl_gen_sysproc.c u64 
    param          mm_genpcl.pcl_gen_sysproc.asfunc i64 
    local          mm_genpcl.pcl_gen_sysproc.nargs i64 
    local          mm_genpcl.pcl_gen_sysproc.opc i64 
    local          mm_genpcl.pcl_gen_sysproc.p u64 
    procentry                 
    push           0          i64 
    pop            mm_genpcl.pcl_gen_sysproc.nargs i64 
    push           0          i64 
    pop            mm_genpcl.pcl_gen_sysproc.opc i64 
    setargs                   2 0
    push           0          u64 
    push           196        i64 
    callproc       &pc_libpcl.pcl_gen 
    push           pc_libpcl.pccurr u64 
    pop            mm_genpcl.pcl_gen_sysproc.p u64 
    push           mm_genpcl.pcl_gen_sysproc.c u64 
    jumpfalse      #19162     u64 
    setargs                   1 0
    push           mm_genpcl.pcl_gen_sysproc.c u64 
    callproc       &mm_blockpcl.evalunit 
    push           &mm_genpcl.pcl_gen_sysproc.nargs 
    setargs                   1 0
    push           mm_genpcl.pcl_gen_sysproc.c u64 
    callfn         &mm_genpcl.getslots i64 
    addto                     i64 
#19162: 
    push           mm_genpcl.pcl_gen_sysproc.b u64 
    jumpfalse      #19163     u64 
    setargs                   1 0
    push           mm_genpcl.pcl_gen_sysproc.b u64 
    callproc       &mm_blockpcl.evalunit 
    push           &mm_genpcl.pcl_gen_sysproc.nargs 
    setargs                   1 0
    push           mm_genpcl.pcl_gen_sysproc.b u64 
    callfn         &mm_genpcl.getslots i64 
    addto                     i64 
#19163: 
    push           mm_genpcl.pcl_gen_sysproc.a u64 
    jumpfalse      #19164     u64 
    setargs                   1 0
    push           mm_genpcl.pcl_gen_sysproc.a u64 
    callproc       &mm_blockpcl.evalunit 
    push           &mm_genpcl.pcl_gen_sysproc.nargs 
    setargs                   1 0
    push           mm_genpcl.pcl_gen_sysproc.a u64 
    callfn         &mm_genpcl.getslots i64 
    addto                     i64 
#19164: 
    push           mm_genpcl.pcl_gen_sysproc.nargs i64 
    push           mm_genpcl.pcl_gen_sysproc.p u64 
    push           16         
    popptroff                 i32 1 0
    setargs                   2 0
    setargs                   1 0
    setargs                   1 0
    push           mm_genpcl.pcl_gen_sysproc.fnindex i64 
    callfn         &mm_genpcl.getsysfnhandler u64 
    callfn         &pc_libpcl.pcl_genmemaddr u64 
    startmult                 
    push           mm_genpcl.pcl_gen_sysproc.asfunc i64 
    jumpfalse      #19165     i64 
    push           47         i64 
    resetmult                 
    jump           #19166     
#19165: 
    push           44         i64 
    endmult                   
#19166: 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_genpcl.pcl_gen_sysproc.nargs i64 
    callproc       &pc_libpcl.pcl_setnargs 
#19167: 
    retproc                   
End


Proc mm_genpcl.$init:
    procentry                 
    push           1          i64 
    push           &mm_genpcl.zero_unit 
    push           0          
    popptroff                 u8 1 0
    push           4          i64 
    push           &mm_genpcl.zero_unit 
    push           48         
    popptroff                 i32 1 0
    push           0          i64 
    push           &mm_genpcl.zero_unit 
    push           16         
    popptroff                 i64 1 0
    push           1          i64 
    push           &mm_genpcl.zero_unit 
    push           59         
    popptroff                 u8 1 0
#19169: 
    retproc                   
End


Proc mm_genpcl.newframetemp: u64
    param          mm_genpcl.newframetemp.owner u64 
    param          mm_genpcl.newframetemp.size i64 
    local          mm_genpcl.newframetemp.d u64 
    local          mm_genpcl.newframetemp.str block:32 
    procentry                 
    setargs                   1 0
    push           &mm_genpcl.newframetemp.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "$T#"      u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           &mm_genpcl.pcltempindex 
    incrload                  i64 1
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           128        i64 
    callfn         &mlibp.pcm_allocz u64 
    pop            mm_genpcl.newframetemp.d u64 
    setargs                   1 0
    push           &mm_genpcl.newframetemp.str 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           mm_genpcl.newframetemp.d u64 
    push           0          
    popptroff                 u64 1 0
    push           mm_genpcl.newframetemp.owner u64 
    push           mm_genpcl.newframetemp.d u64 
    push           8          
    popptroff                 u64 1 0
    push           12         i64 
    push           mm_genpcl.newframetemp.d u64 
    push           78         
    popptroff                 u8 1 0
    push           mm_genpcl.newframetemp.d u64 
    setret                    u64 
    jump           #19171     
#19171: 
    retfn                     u64 
End


Proc mm_genpcl.addframetemp:
    param          mm_genpcl.addframetemp.d u64 
    local          mm_genpcl.addframetemp.oldpccurr u64 
    local          mm_genpcl.addframetemp.pnew u64 
    local          mm_genpcl.addframetemp.pnext u64 
    procentry                 
    push           pc_libpcl.pccurr u64 
    pop            mm_genpcl.addframetemp.oldpccurr u64 
    setargs                   2 0
    setargs                   1 0
    setargs                   1 0
    push           mm_genpcl.addframetemp.d u64 
    callfn         &mm_genpcl.getpst u64 
    callfn         &pc_libpcl.pcl_genmem u64 
    push           17         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_genpcl.addframetemp.d u64 
    push           72         
    pushptroff                i32 1 0
    callproc       &mm_genpcl.setmode 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "ADDING NEW TEMPS" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#19173: 
    retproc                   
End


Proc mm_genpcl.getfullname:
    param          mm_genpcl.getfullname.d u64 
    param          mm_genpcl.getfullname.dest u64 
    procentry                 
    push           mm_genpcl.getfullname.d u64 
    push           8          
    pushptroff                u64 1 0
    jumpfalse      #19175     u64 
    push           mm_genpcl.getfullname.d u64 
    push           8          
    pushptroff                u64 1 0
    push           78         
    pushptroff                u8 1 0
    push           1          i64 
    jumpeq         #19175     i64 
    setargs                   2 0
    push           mm_genpcl.getfullname.dest u64 
    push           mm_genpcl.getfullname.d u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &mm_genpcl.getfullname 
    setargs                   2 0
    push           "."        u64 
    push           mm_genpcl.getfullname.dest u64 
    callproc       &strcat    
#19175: 
    setargs                   2 0
    push           mm_genpcl.getfullname.d u64 
    pushptr                   u64 
    push           mm_genpcl.getfullname.dest u64 
    callproc       &strcat    
#19176: 
    retproc                   
End


Proc mm_genpcl.getpst: u64
    param          mm_genpcl.getpst.d u64 
    local          mm_genpcl.getpst.p u64 
    local          mm_genpcl.getpst.str block:300 
    local          mm_genpcl.getpst.e u64 
    local          mm_genpcl.getpst.av_1 i64 
    local          mm_genpcl.getpst.i i64 
    procentry                 
    push           mm_genpcl.getpst.d u64 
    push           56         
    pushptroff                u64 1 0
    jumpfalse      #19178     u64 
    push           mm_genpcl.getpst.d u64 
    push           56         
    pushptroff                u64 1 0
    setret                    u64 
    jump           #19179     
#19178: 
    setargs                   1 0
    push           51         i64 
    callfn         &mlibp.pcm_allocz u64 
    store          mm_genpcl.getpst.p u64 
    push           mm_genpcl.getpst.d u64 
    push           56         
    popptroff                 u64 1 0
    push           mm_genpcl.getpst.d u64 
    push           92         
    pushptroff                u16 1 0
    push           13         i64 
    dotindex                  i64 
    jumpfalse      #19180     u64 
    push           mm_genpcl.getpst.d u64 
    push           96         
    pushptroff                u64 1 0
    jumpfalse      #19180     u64 
    setargs                   1 0
    push           mm_genpcl.getpst.d u64 
    push           96         
    pushptroff                u64 1 0
    push           16         
    pushptroff                u64 1 0
    store          mm_genpcl.getpst.e u64 
    callfn         &mm_genpcl.getpst u64 
    pop            mm_genpcl.getpst.p u64 
    push           mm_genpcl.getpst.e u64 
    push           56         
    pushptroff                u64 1 0
    push           mm_genpcl.getpst.d u64 
    push           56         
    popptroff                 u64 1 0
    push           mm_genpcl.getpst.p u64 
    setret                    u64 
    jump           #19179     
#19180: 
    push           0          u64 
    push           &mm_genpcl.getpst.str 
    push           1          i64 
    popptroff                 u8 1 -1
    push           mm_genpcl.getpst.d u64 
    push           78         
    pushptroff                u8 1 0
    push           6          i64 
    jumpne         #19181     i64 
    push           mm_genpcl.getpst.d u64 
    push           96         
    pushptroff                u64 1 0
    jumpfalse      #19182     u64 
    setargs                   2 0
    push           mm_genpcl.getpst.d u64 
    push           96         
    pushptroff                u64 1 0
    push           &mm_genpcl.getpst.str 
    callproc       &strcpy    
    push           1          u64 
    push           mm_genpcl.getpst.p u64 
    push           46         
    addrefoff                 u64 1 0
    push           8          i64 
    popdotindex               u16 
    jump           #19183     
#19182: 
    setargs                   2 0
    push           mm_genpcl.getpst.d u64 
    pushptr                   u64 
    push           &mm_genpcl.getpst.str 
    callproc       &strcpy    
#19183: 
    jump           #19184     
#19181: 
    setargs                   2 0
    push           &mm_genpcl.getpst.str 
    push           mm_genpcl.getpst.d u64 
    callproc       &mm_genpcl.getfullname 
#19184: 
    setargs                   1 0
    push           &mm_genpcl.getpst.str 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           mm_genpcl.getpst.p u64 
    push           0          
    popptroff                 u64 1 0
    push           79         i64 
    push           mm_genpcl.getpst.p u64 
    push           24         
    popptroff                 u8 1 0
    push           mm_genpcl.getpst.d u64 
    pushptr                   u64 
    pushptr                   u8 
    push           109        u64 
    jumpne         #19185     u64 
    push           mm_genpcl.getpst.d u64 
    pushptr                   u64 
    push           1          i64 
    pushptroff                u8 1 0
    push           36         u64 
    jumpne         #19185     u64 
#19186: 
    push           1          i64 
    pop            mm_genpcl.getpst.i i64 
    push           32         i64 
    pop            mm_genpcl.getpst.av_1 i64 
    push           mm_genpcl.getpst.av_1 i64 
    push           1          i64 
    jumplt         #19187     i64 
#19188: 
    setargs                   2 0
    push           &mm_tables.sysfnnames 
    push           mm_genpcl.getpst.i i64 
    pushptroff                u64 8 -8
    push           6          i64 
    addrefoff                 u64 1 0
    push           mm_genpcl.getpst.d u64 
    pushptr                   u64 
    push           2          i64 
    addrefoff                 u64 1 0
    callfn         &mlibp.eqstring i64 
    jumpfalse      #19189     i64 
    push           mm_genpcl.getpst.p u64 
    push           &mm_tables.sysfnhandlers 
    push           mm_genpcl.getpst.i i64 
    popptroff                 u64 8 -8
    jump           #19187     
#19189: 
#19190: 
    forup          #19188     i64 1
    opnd           mm_genpcl.getpst.i 
    opnd           mm_genpcl.getpst.av_1 
#19187: 
#19185: 
    push           mm_genpcl.getpst.p u64 
    setret                    u64 
    jump           #19179     
#19179: 
    retfn                     u64 
End


Proc mm_genpcl.getsysfnhandler: u64
    param          mm_genpcl.getsysfnhandler.fn i64 
    local          mm_genpcl.getsysfnhandler.p u64 
    local          mm_genpcl.getsysfnhandler.str block:300 
    procentry                 
    push           &mm_tables.sysfnhandlers 
    push           mm_genpcl.getsysfnhandler.fn i64 
    pushptroff                u64 8 -8
    jumpfalse      #19192     u64 
    push           &mm_tables.sysfnhandlers 
    push           mm_genpcl.getsysfnhandler.fn i64 
    pushptroff                u64 8 -8
    setret                    u64 
    jump           #19193     
#19192: 
    setargs                   1 0
    push           51         i64 
    callfn         &mlibp.pcm_allocz u64 
    store          mm_genpcl.getsysfnhandler.p u64 
    push           &mm_tables.sysfnhandlers 
    push           mm_genpcl.getsysfnhandler.fn i64 
    popptroff                 u64 8 -8
    push           mm_decls.msyslevel i64 
    push           1          i64 
    jumpne         #19194     i64 
    setargs                   2 0
    push           "msystemp.m$" u64 
    push           &mm_genpcl.getsysfnhandler.str 
    callproc       &strcpy    
    jump           #19195     
#19194: 
    setargs                   2 0
    push           "msysp.m$" u64 
    push           &mm_genpcl.getsysfnhandler.str 
    callproc       &strcpy    
#19195: 
    setargs                   2 0
    push           &mm_tables.sysfnnames 
    push           mm_genpcl.getsysfnhandler.fn i64 
    pushptroff                u64 8 -8
    push           6          i64 
    addrefoff                 u64 1 0
    push           &mm_genpcl.getsysfnhandler.str 
    callproc       &strcat    
    setargs                   1 0
    push           &mm_genpcl.getsysfnhandler.str 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           mm_genpcl.getsysfnhandler.p u64 
    push           0          
    popptroff                 u64 1 0
    push           79         i64 
    push           mm_genpcl.getsysfnhandler.p u64 
    push           24         
    popptroff                 u8 1 0
    push           mm_genpcl.getsysfnhandler.p u64 
    setret                    u64 
    jump           #19193     
#19193: 
    retfn                     u64 
End


Proc mm_genpcl.doimportedproc:
    param          mm_genpcl.doimportedproc.d u64 
    local          mm_genpcl.doimportedproc.e u64 
    procentry                 
    setargs                   2 0
    setargs                   1 0
    push           mm_genpcl.doimportedproc.d u64 
    callfn         &mm_genpcl.genmem_d u64 
    push           12         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_genpcl.doimportedproc.d u64 
    push           72         
    pushptroff                i32 1 0
    callproc       &mm_genpcl.setmode 
    push           mm_genpcl.doimportedproc.d u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_genpcl.doimportedproc.e u64 
    jump           #19197     
#19198: 
    push           mm_genpcl.doimportedproc.e u64 
    push           78         
    pushptroff                u8 1 0
    push           13         i64 
    jumpne         #19199     i64 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           mm_genpcl.doimportedproc.e u64 
    push           72         
    pushptroff                i32 1 0
    callfn         &mm_lib.getpclmode i64 
    push           13         i64 
    callproc       &pc_libpcl.pcl_gent 
#19199: 
#19200: 
    push           mm_genpcl.doimportedproc.e u64 
    push           32         
    pushptroff                u64 1 0
    pop            mm_genpcl.doimportedproc.e u64 
#19197: 
    push           mm_genpcl.doimportedproc.e u64 
    jumptrue       #19198     u64 
#19201: 
    push           mm_genpcl.doimportedproc.d u64 
    push           117        
    pushptroff                u8 1 0
    jumpfalse      #19202     i64 
    setargs                   4 0
    push           0          u64 
    push           0          i64 
    push           mm_genpcl.doimportedproc.d u64 
    push           117        
    pushptroff                u8 1 0
    push           14         i64 
    callproc       &pc_libpcl.pcl_genxy 
#19202: 
    setargs                   2 0
    push           0          u64 
    push           15         i64 
    callproc       &pc_libpcl.pcl_gen 
#19203: 
    retproc                   
End


Proc mm_genpcl.scansymbol:
    param          mm_genpcl.scansymbol.d u64 
    local          mm_genpcl.scansymbol.e u64 
    procentry                 
    push           mm_genpcl.scansymbol.d u64 
    push           78         
    pushptroff                u8 1 0
    push           6          i64 
    jumpne         #19205     i64 
    push           mm_genpcl.scansymbol.d u64 
    push           92         
    pushptroff                u16 1 0
    push           3          i64 
    dotindex                  i64 
    jumpfalse      #19205     u64 
    setargs                   1 0
    push           mm_genpcl.scansymbol.d u64 
    callproc       &mm_genpcl.doimportedproc 
#19205: 
    push           mm_genpcl.scansymbol.d u64 
    push           78         
    pushptroff                u8 1 0
    push           1          i64 
    casejumpeq     #19206     i64 0
    push           2          i64 
    casejumpeq     #19206     i64 0
    popstack                  i64 
    jump           #19207     
#19206: 
    jump           #19208     
#19207: 
    jump           #19209     
#19208: 
    push           mm_genpcl.scansymbol.d u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_genpcl.scansymbol.e u64 
    jump           #19210     
#19211: 
    setargs                   1 0
    push           mm_genpcl.scansymbol.e u64 
    callproc       &mm_genpcl.scansymbol 
#19212: 
    push           mm_genpcl.scansymbol.e u64 
    push           32         
    pushptroff                u64 1 0
    pop            mm_genpcl.scansymbol.e u64 
#19210: 
    push           mm_genpcl.scansymbol.e u64 
    jumptrue       #19211     u64 
#19213: 
#19209: 
    retproc                   
End


Proc mm_genpcl.genpushint:
    param          mm_genpcl.genpushint.a i64 
    param          mm_genpcl.genpushint.mode i64 
    procentry                 
    setargs                   2 0
    setargs                   2 0
    push           mm_genpcl.genpushint.mode i64 
    push           mm_genpcl.genpushint.a i64 
    callfn         &pc_libpcl.pcl_genint u64 
    push           21         i64 
    callproc       &pc_libpcl.pcl_gen 
#19215: 
    retproc                   
End


Proc mm_genpcl.genpushreal:
    param          mm_genpcl.genpushreal.x r64 
    procentry                 
    setargs                   2 0
    setargs                   1 0
    push           mm_genpcl.genpushreal.x r64 
    callfn         &pc_libpcl.pcl_genreal u64 
    push           21         i64 
    callproc       &pc_libpcl.pcl_gen 
#19217: 
    retproc                   
End


Proc mm_genpcl.genpushreal32:
    param          mm_genpcl.genpushreal32.x r64 
    procentry                 
    setargs                   2 0
    setargs                   1 0
    push           mm_genpcl.genpushreal32.x r64 
    callfn         &pc_libpcl.pcl_genreal32 u64 
    push           21         i64 
    callproc       &pc_libpcl.pcl_gen 
#19219: 
    retproc                   
End


Proc mm_genpcl.genpushstring:
    param          mm_genpcl.genpushstring.s u64 
    procentry                 
    setargs                   2 0
    setargs                   1 0
    push           mm_genpcl.genpushstring.s u64 
    callfn         &pc_libpcl.pcl_genstring u64 
    push           21         i64 
    callproc       &pc_libpcl.pcl_gen 
#19221: 
    retproc                   
End


Proc mm_blockpcl.evalunit:
    param          mm_blockpcl.evalunit.p u64 
    local          mm_blockpcl.evalunit.a u64 
    local          mm_blockpcl.evalunit.b u64 
    local          mm_blockpcl.evalunit.d u64 
    local          mm_blockpcl.evalunit.pmult u64 
    procentry                 
    push           mm_blockpcl.evalunit.p u64 
    push           0          u64 
    jumpne         #19223     u64 
    jump           #19224     
#19223: 
    push           mm_blockpcl.evalunit.p u64 
    push           4          
    pushptroff                u32 1 0
    pop            mm_tables.mlineno i64 
    push           mm_blockpcl.evalunit.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    push           24         
    pushptroff                u64 1 0
    pop            mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.p u64 
    pushptr                   u8 
    switch         #19225     1 142
    opnd           #19226     
#19225: 
    switchlabel    #19227     
    switchlabel    #19228     
    switchlabel    #19229     
    switchlabel    #19226     
    switchlabel    #19230     
    switchlabel    #19230     
    switchlabel    #19226     
    switchlabel    #19231     
    switchlabel    #19226     
    switchlabel    #19226     
    switchlabel    #19226     
    switchlabel    #19226     
    switchlabel    #19226     
    switchlabel    #19232     
    switchlabel    #19233     
    switchlabel    #19226     
    switchlabel    #19234     
    switchlabel    #19235     
    switchlabel    #19226     
    switchlabel    #19236     
    switchlabel    #19226     
    switchlabel    #19226     
    switchlabel    #19237     
    switchlabel    #19226     
    switchlabel    #19226     
    switchlabel    #19238     
    switchlabel    #19226     
    switchlabel    #19226     
    switchlabel    #19239     
    switchlabel    #19226     
    switchlabel    #19240     
    switchlabel    #19226     
    switchlabel    #19226     
    switchlabel    #19241     
    switchlabel    #19242     
    switchlabel    #19243     
    switchlabel    #19244     
    switchlabel    #19245     
    switchlabel    #19246     
    switchlabel    #19247     
    switchlabel    #19226     
    switchlabel    #19226     
    switchlabel    #19226     
    switchlabel    #19226     
    switchlabel    #19226     
    switchlabel    #19226     
    switchlabel    #19226     
    switchlabel    #19248     
    switchlabel    #19226     
    switchlabel    #19249     
    switchlabel    #19250     
    switchlabel    #19226     
    switchlabel    #19251     
    switchlabel    #19252     
    switchlabel    #19226     
    switchlabel    #19226     
    switchlabel    #19253     
    switchlabel    #19226     
    switchlabel    #19254     
    switchlabel    #19255     
    switchlabel    #19256     
    switchlabel    #19257     
    switchlabel    #19226     
    switchlabel    #19258     
    switchlabel    #19259     
    switchlabel    #19226     
    switchlabel    #19226     
    switchlabel    #19226     
    switchlabel    #19226     
    switchlabel    #19226     
    switchlabel    #19226     
    switchlabel    #19226     
    switchlabel    #19226     
    switchlabel    #19226     
    switchlabel    #19260     
    switchlabel    #19226     
    switchlabel    #19226     
    switchlabel    #19226     
    switchlabel    #19226     
    switchlabel    #19226     
    switchlabel    #19226     
    switchlabel    #19226     
    switchlabel    #19226     
    switchlabel    #19226     
    switchlabel    #19226     
    switchlabel    #19226     
    switchlabel    #19226     
    switchlabel    #19226     
    switchlabel    #19226     
    switchlabel    #19226     
    switchlabel    #19226     
    switchlabel    #19226     
    switchlabel    #19226     
    switchlabel    #19226     
    switchlabel    #19226     
    switchlabel    #19261     
    switchlabel    #19262     
    switchlabel    #19263     
    switchlabel    #19264     
    switchlabel    #19265     
    switchlabel    #19266     
    switchlabel    #19267     
    switchlabel    #19268     
    switchlabel    #19269     
    switchlabel    #19270     
    switchlabel    #19271     
    switchlabel    #19272     
    switchlabel    #19273     
    switchlabel    #19274     
    switchlabel    #19275     
    switchlabel    #19276     
    switchlabel    #19277     
    switchlabel    #19278     
    switchlabel    #19279     
    switchlabel    #19280     
    switchlabel    #19281     
    switchlabel    #19282     
    switchlabel    #19283     
    switchlabel    #19284     
    switchlabel    #19285     
    switchlabel    #19286     
    switchlabel    #19287     
    switchlabel    #19287     
    switchlabel    #19288     
    switchlabel    #19288     
    switchlabel    #19288     
    switchlabel    #19288     
    switchlabel    #19226     
    switchlabel    #19226     
    switchlabel    #19289     
    switchlabel    #19290     
    switchlabel    #19226     
    switchlabel    #19226     
    switchlabel    #19291     
    switchlabel    #19226     
    switchlabel    #19226     
    switchlabel    #19226     
    switchlabel    #19226     
    switchlabel    #19292     
    switchlabel    #19226     
    switchlabel    #19226     
    switchlabel    #19293     
    endswitch                 
#19227: 
    setargs                   1 0
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_const 
    jump           #19294     
#19228: 
    jump           #19294     
#19229: 
    setargs                   1 0
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_name 
    jump           #19294     
#19230: 
    setargs                   1 0
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_block 
    jump           #19294     
#19261: 
    setargs                   4 0
    push           0          i64 
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_callproc 
    jump           #19294     
#19262: 
    setargs                   2 0
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_return 
    jump           #19294     
#19238: 
    setargs                   2 0
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_returnmult 
    jump           #19294     
#19239: 
    setargs                   3 0
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_assign 
    jump           #19294     
#19264: 
    setargs                   3 0
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_to 
    jump           #19294     
#19265: 
    setargs                   5 0
    push           0          i64 
    push           mm_blockpcl.evalunit.p u64 
    push           32         
    pushptroff                u64 1 0
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_if 
    jump           #19294     
#19266: 
    setargs                   4 0
    push           0          i64 
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_longif 
    jump           #19294     
#19267: 
    setargs                   5 0
    push           0          i64 
    push           mm_blockpcl.evalunit.p u64 
    push           32         
    pushptroff                u64 1 0
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_for 
    jump           #19294     
#19268: 
    setargs                   5 0
    push           1          i64 
    push           mm_blockpcl.evalunit.p u64 
    push           32         
    pushptroff                u64 1 0
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_for 
    jump           #19294     
#19269: 
    setargs                   5 0
    push           0          i64 
    push           mm_blockpcl.evalunit.p u64 
    push           32         
    pushptroff                u64 1 0
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_forall 
    jump           #19294     
#19270: 
    setargs                   5 0
    push           1          i64 
    push           mm_blockpcl.evalunit.p u64 
    push           32         
    pushptroff                u64 1 0
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_forall 
    jump           #19294     
#19271: 
    setargs                   4 0
    push           mm_blockpcl.evalunit.p u64 
    push           32         
    pushptroff                u64 1 0
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_while 
    jump           #19294     
#19272: 
    setargs                   3 0
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_repeat 
    jump           #19294     
#19273: 
    setargs                   1 0
    push           mm_blockpcl.evalunit.a u64 
    callproc       &mm_blockpcl.do_goto 
    jump           #19294     
#19274: 
    setargs                   1 0
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_labeldef 
    jump           #19294     
#19275: 
    setargs                   2 0
    push           1          i64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_exit 
    jump           #19294     
#19276: 
    setargs                   2 0
    push           2          i64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_exit 
    jump           #19294     
#19277: 
    setargs                   2 0
    push           3          i64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_exit 
    jump           #19294     
#19278: 
    setargs                   2 0
    push           4          i64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_exit 
    jump           #19294     
#19279: 
    setargs                   3 0
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_do 
    jump           #19294     
#19280: 
    setargs                   6 0
    push           0          i64 
    push           0          i64 
    push           mm_blockpcl.evalunit.p u64 
    push           32         
    pushptroff                u64 1 0
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_case 
    jump           #19294     
#19281: 
    setargs                   6 0
    push           0          i64 
    push           1          i64 
    push           mm_blockpcl.evalunit.p u64 
    push           32         
    pushptroff                u64 1 0
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_case 
    jump           #19294     
#19282: 
    setargs                   6 0
    push           0          i64 
    push           0          i64 
    push           mm_blockpcl.evalunit.p u64 
    push           32         
    pushptroff                u64 1 0
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_switch 
    jump           #19294     
#19283: 
    setargs                   6 0
    push           0          i64 
    push           1          i64 
    push           mm_blockpcl.evalunit.p u64 
    push           32         
    pushptroff                u64 1 0
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_switch 
    jump           #19294     
#19286: 
    setargs                   2 0
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_recase 
    jump           #19294     
#19284: 
    setargs                   3 0
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_swap 
    jump           #19294     
#19285: 
    setargs                   5 0
    push           0          i64 
    push           mm_blockpcl.evalunit.p u64 
    push           32         
    pushptroff                u64 1 0
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_select 
    jump           #19294     
#19287: 
    setargs                   3 0
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_print 
    jump           #19294     
#19288: 
    setargs                   3 0
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_print 
    jump           #19294     
#19289: 
    setargs                   2 0
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_read 
    jump           #19294     
#19290: 
    setargs                   1 0
    push           mm_blockpcl.evalunit.a u64 
    callproc       &mm_blockpcl.do_readln 
    jump           #19294     
#19291: 
    setargs                   2 0
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_stop 
    jump           #19294     
#19292: 
    setargs                   1 0
    push           mm_blockpcl.evalunit.a u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    push           0          u64 
    push           43         i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #19294     
#19232: 
    setargs                   3 0
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_andl 
    jump           #19294     
#19233: 
    setargs                   3 0
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_orl 
    jump           #19294     
#19236: 
    setargs                   1 0
    push           "MAKERANGE" u64 
    callproc       &pc_libpcl.pcl_gencomment 
    jump           #19294     
#19240: 
    setargs                   4 0
    push           1          i64 
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_callproc 
    jump           #19294     
#19241: 
    setargs                   3 0
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_setcc 
    jump           #19294     
#19242: 
    setargs                   2 0
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_setccchain 
    jump           #19294     
#19243: 
    setargs                   3 0
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_bin 
    jump           #19294     
#19248: 
    setargs                   3 0
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_index 
    jump           #19294     
#19249: 
    setargs                   3 0
    push           0          i64 
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    callproc       &mm_blockpcl.do_slice 
    jump           #19294     
#19237: 
    setargs                   1 0
    push           mm_blockpcl.evalunit.b u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   1 0
    push           mm_blockpcl.evalunit.a u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    push           0          u64 
    push           83         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           3          i64 
    callproc       &mm_genpcl.setmode 
    jump           #19294     
#19251: 
    setargs                   3 0
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_dotindex 
    jump           #19294     
#19252: 
    setargs                   3 0
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_dotslice 
    jump           #19294     
#19250: 
    setargs                   1 0
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_dot 
    jump           #19294     
#19253: 
    setargs                   2 0
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_ptr 
    jump           #19294     
#19254: 
    setargs                   2 0
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    callproc       &mm_blockpcl.evalref 
    jump           #19294     
#19255: 
    setargs                   2 0
    push           0          u64 
    push           mm_blockpcl.evalunit.a u64 
    callproc       &mm_blockpcl.evalref 
    jump           #19294     
#19256: 
    setargs                   2 0
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_convert 
    jump           #19294     
#19258: 
    setargs                   2 0
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_typepun 
    jump           #19294     
#19257: 
    setargs                   2 0
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_shorten 
    jump           #19294     
#19259: 
    setargs                   1 0
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_typeconst 
    jump           #19294     
#19244: 
    setargs                   2 0
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_unary 
    jump           #19294     
#19234: 
    setargs                   2 0
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_notl 
    jump           #19294     
#19235: 
    setargs                   2 0
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_istruel 
    jump           #19294     
#19247: 
    push           mm_blockpcl.evalunit.p u64 
    push           60         
    pushptroff                u8 1 0
    push           152        i64 
    setjumpeq      #19295     i64 
    push           153        i64 
    setjumpne      #19296     i64 
#19295: 
    setargs                   2 0
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_incr 
    jump           #19297     
#19296: 
    setargs                   2 0
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_incrload 
#19297: 
    jump           #19294     
#19245: 
    setargs                   3 0
    push           mm_blockpcl.evalunit.b u64 
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_binto 
    jump           #19294     
#19246: 
    setargs                   2 0
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_unaryto 
    jump           #19294     
#19263: 
    setargs                   2 0
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_syscall 
    jump           #19294     
#19231: 
    setargs                   2 0
    push           0          u64 
    push           "ASSEM NOT READY" u64 
    callproc       &mm_support.gerror 
    jump           #19294     
#19260: 
    setargs                   2 0
    setargs                   2 0
    push           9          i64 
    push           mm_blockpcl.evalunit.p u64 
    push           4          
    pushptroff                u32 1 0
    push           0          i64 
    push           23         i64 
    dotslice                  i64 
    push           16777215   i64 
    iand                      i64 
    callfn         &pc_libpcl.pcl_genint u64 
    push           21         i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #19294     
#19293: 
    setargs                   2 0
    push           mm_blockpcl.evalunit.a u64 
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_blockpcl.do_empty 
    jump           #19294     
#19226: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "UNSUPPORTED TAG: " u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &mm_tables.jtagnames 
    push           mm_blockpcl.evalunit.p u64 
    pushptr                   u8 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_tables.mlineno i64 
    push           16777215   i64 
    iand                      i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   1 0
    push           &mm_decls.sourcefilenames 
    push           mm_tables.mlineno i64 
    push           24         i64 
    shr                       i64 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Unimplemented:" u64 
    callproc       &pc_libpcl.pcl_gencomment 
    setargs                   1 0
    push           &mm_tables.jtagnames 
    push           mm_blockpcl.evalunit.p u64 
    pushptr                   u8 
    pushptroff                u64 8 0
    callproc       &pc_libpcl.pcl_gencomment 
    jump           #19224     
#19294: 
    push           mm_blockpcl.evalunit.p u64 
    push           48         
    pushptroff                i32 1 0
    push           0          i64 
    jumpeq         #19298     i64 
    push           mm_blockpcl.evalunit.p u64 
    push           59         
    pushptroff                u8 1 0
    jumptrue       #19298     i64 
    push           mm_blockpcl.evalunit.p u64 
    pushptr                   u8 
    push           29         i64 
    casejumpeq     #19299     i64 0
    push           96         i64 
    casejumpeq     #19299     i64 0
    push           98         i64 
    casejumpeq     #19299     i64 0
    popstack                  i64 
    jump           #19300     
#19299: 
    jump           #19301     
#19300: 
    setargs                   2 0
    push           0          u64 
    push           42         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.evalunit.p u64 
    callproc       &mm_genpcl.setmode_u 
#19301: 
#19298: 
#19224: 
    retproc                   
End


Proc mm_blockpcl.evalref:
    param          mm_blockpcl.evalref.p u64 
    param          mm_blockpcl.evalref.q u64 
    local          mm_blockpcl.evalref.a u64 
    local          mm_blockpcl.evalref.b u64 
    local          mm_blockpcl.evalref.c u64 
    procentry                 
    push           mm_blockpcl.evalref.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_blockpcl.evalref.a u64 
    push           mm_blockpcl.evalref.p u64 
    push           24         
    pushptroff                u64 1 0
    pop            mm_blockpcl.evalref.b u64 
    push           mm_blockpcl.evalref.p u64 
    push           32         
    pushptroff                u64 1 0
    pop            mm_blockpcl.evalref.c u64 
    push           mm_blockpcl.evalref.p u64 
    push           4          
    pushptroff                u32 1 0
    pop            mm_tables.mlineno i64 
    push           mm_blockpcl.evalref.p u64 
    pushptr                   u8 
    switch         #19303     3 57
    opnd           #19304     
#19303: 
    switchlabel    #19305     
    switchlabel    #19304     
    switchlabel    #19304     
    switchlabel    #19304     
    switchlabel    #19304     
    switchlabel    #19304     
    switchlabel    #19304     
    switchlabel    #19304     
    switchlabel    #19304     
    switchlabel    #19304     
    switchlabel    #19304     
    switchlabel    #19304     
    switchlabel    #19304     
    switchlabel    #19304     
    switchlabel    #19304     
    switchlabel    #19304     
    switchlabel    #19304     
    switchlabel    #19304     
    switchlabel    #19304     
    switchlabel    #19304     
    switchlabel    #19304     
    switchlabel    #19304     
    switchlabel    #19304     
    switchlabel    #19304     
    switchlabel    #19304     
    switchlabel    #19304     
    switchlabel    #19304     
    switchlabel    #19304     
    switchlabel    #19304     
    switchlabel    #19304     
    switchlabel    #19304     
    switchlabel    #19304     
    switchlabel    #19304     
    switchlabel    #19304     
    switchlabel    #19304     
    switchlabel    #19304     
    switchlabel    #19304     
    switchlabel    #19304     
    switchlabel    #19304     
    switchlabel    #19304     
    switchlabel    #19304     
    switchlabel    #19304     
    switchlabel    #19304     
    switchlabel    #19304     
    switchlabel    #19304     
    switchlabel    #19306     
    switchlabel    #19304     
    switchlabel    #19304     
    switchlabel    #19307     
    switchlabel    #19304     
    switchlabel    #19304     
    switchlabel    #19304     
    switchlabel    #19304     
    switchlabel    #19304     
    switchlabel    #19308     
    endswitch                 
#19305: 
    setargs                   1 0
    push           mm_blockpcl.evalref.p u64 
    push           16         
    pushptroff                u64 1 0
    callproc       &mm_genpcl.genpushmemaddr_d 
    push           mm_blockpcl.evalref.q u64 
    jumpfalse      #19309     u64 
    setargs                   2 0
    push           9          i64 
    push           mm_blockpcl.evalref.q u64 
    push           16         
    pushptroff                i64 1 0
    callproc       &mm_genpcl.genpushint 
    setargs                   2 0
    push           0          u64 
    push           125        i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_libpcl.pcl_setscale 
    setargs                   1 0
    push           21         i64 
    callproc       &mm_genpcl.setmode 
#19309: 
    jump           #19310     
#19306: 
    setargs                   2 0
    push           mm_blockpcl.evalref.b u64 
    push           mm_blockpcl.evalref.a u64 
    callproc       &mm_blockpcl.do_indexref 
    jump           #19310     
#19307: 
    setargs                   1 0
    push           mm_blockpcl.evalref.p u64 
    callproc       &mm_blockpcl.do_dotref 
    jump           #19310     
#19308: 
    setargs                   1 0
    push           mm_blockpcl.evalref.p u64 
    push           16         
    pushptroff                u64 1 0
    callproc       &mm_blockpcl.evalunit 
    jump           #19310     
#19304: 
    push           mm_blockpcl.evalref.p u64 
    pushptr                   u8 
    push           100        i64 
    casejumpeq     #19311     i64 0
    push           101        i64 
    casejumpeq     #19312     i64 0
    popstack                  i64 
    jump           #19313     
#19311: 
    setargs                   5 0
    push           1          i64 
    push           mm_blockpcl.evalref.c u64 
    push           mm_blockpcl.evalref.b u64 
    push           mm_blockpcl.evalref.a u64 
    push           mm_blockpcl.evalref.p u64 
    callproc       &mm_blockpcl.do_if 
    jump           #19314     
#19312: 
    setargs                   4 0
    push           1          i64 
    push           mm_blockpcl.evalref.b u64 
    push           mm_blockpcl.evalref.a u64 
    push           mm_blockpcl.evalref.p u64 
    callproc       &mm_blockpcl.do_longif 
    jump           #19314     
#19313: 
    setargs                   4 0
    push           0          u64 
    push           "*"        u64 
    push           0          i64 
    push           mm_blockpcl.evalref.p u64 
    callproc       &mm_diags.printunit 
    setargs                   2 0
    push           0          u64 
    push           "evalref"  u64 
    callproc       &mm_support.gerror 
#19314: 
#19310: 
#19315: 
    retproc                   
End


Proc mm_blockpcl.evallv:
    param          mm_blockpcl.evallv.p u64 
    procentry                 
    setargs                   2 0
    push           0          u64 
    push           mm_blockpcl.evallv.p u64 
    callproc       &mm_blockpcl.evalref 
#19317: 
    retproc                   
End


Proc mm_blockpcl.evalunitx:
    param          mm_blockpcl.evalunitx.p u64 
    param          mm_blockpcl.evalunitx.isref i64 
    procentry                 
    push           mm_blockpcl.evalunitx.isref i64 
    jumpfalse      #19319     i64 
    setargs                   2 0
    push           0          u64 
    push           mm_blockpcl.evalunitx.p u64 
    callproc       &mm_blockpcl.evalref 
    jump           #19320     
#19319: 
    setargs                   1 0
    push           mm_blockpcl.evalunitx.p u64 
    callproc       &mm_blockpcl.evalunit 
#19320: 
#19321: 
    retproc                   
End


Proc mm_blockpcl.evalblock:
    param          mm_blockpcl.evalblock.p u64 
    procentry                 
    setargs                   1 0
    push           mm_blockpcl.evalblock.p u64 
    callproc       &mm_blockpcl.evalunit 
#19323: 
    retproc                   
End


Proc mm_blockpcl.evalarray:
    param          mm_blockpcl.evalarray.p u64 
    procentry                 
    push           &mm_decls.ttbasetype 
    push           mm_blockpcl.evalarray.p u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           12         i64 
    jumpne         #19325     i64 
    setargs                   1 0
    push           mm_blockpcl.evalarray.p u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    push           0          u64 
    push           216        i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           2          i64 
    callproc       &mm_genpcl.setmode 
    jump           #19326     
#19325: 
    push           mm_blockpcl.evalarray.p u64 
    push           48         
    pushptroff                i32 1 0
    push           10         i64 
    jumpne         #19327     i64 
    setargs                   1 0
    push           mm_blockpcl.evalarray.p u64 
    callproc       &mm_blockpcl.evalunit 
    jump           #19326     
#19327: 
    setargs                   2 0
    push           0          u64 
    push           mm_blockpcl.evalarray.p u64 
    callproc       &mm_blockpcl.evalref 
#19326: 
#19328: 
    retproc                   
End


Proc mm_blockpcl.do_block:
    param          mm_blockpcl.do_block.p u64 
    local          mm_blockpcl.do_block.a u64 
    procentry                 
    push           mm_blockpcl.do_block.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_block.a u64 
    jump           #19330     
#19331: 
    setargs                   1 0
    push           mm_blockpcl.do_block.a u64 
    callproc       &mm_blockpcl.evalunit 
    push           mm_blockpcl.do_block.a u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_block.a u64 
#19330: 
    push           mm_blockpcl.do_block.a u64 
    jumptrue       #19331     u64 
#19332: 
#19333: 
    retproc                   
End


Proc mm_blockpcl.genjumpcond:
    param          mm_blockpcl.genjumpcond.opc i64 
    param          mm_blockpcl.genjumpcond.p u64 
    param          mm_blockpcl.genjumpcond.lab i64 
    local          mm_blockpcl.genjumpcond.q u64 
    local          mm_blockpcl.genjumpcond.r u64 
    local          mm_blockpcl.genjumpcond.s u64 
    local          mm_blockpcl.genjumpcond.lab2 i64 
    local          mm_blockpcl.genjumpcond.i i64 
    procentry                 
    push           mm_blockpcl.genjumpcond.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_blockpcl.genjumpcond.q u64 
    push           mm_blockpcl.genjumpcond.p u64 
    push           24         
    pushptroff                u64 1 0
    pop            mm_blockpcl.genjumpcond.r u64 
    push           mm_blockpcl.genjumpcond.p u64 
    pushptr                   u8 
    switch         #19335     5 43
    opnd           #19336     
#19335: 
    switchlabel    #19337     
    switchlabel    #19336     
    switchlabel    #19336     
    switchlabel    #19336     
    switchlabel    #19336     
    switchlabel    #19336     
    switchlabel    #19336     
    switchlabel    #19336     
    switchlabel    #19336     
    switchlabel    #19338     
    switchlabel    #19339     
    switchlabel    #19336     
    switchlabel    #19340     
    switchlabel    #19341     
    switchlabel    #19336     
    switchlabel    #19336     
    switchlabel    #19336     
    switchlabel    #19336     
    switchlabel    #19336     
    switchlabel    #19336     
    switchlabel    #19336     
    switchlabel    #19336     
    switchlabel    #19336     
    switchlabel    #19336     
    switchlabel    #19336     
    switchlabel    #19336     
    switchlabel    #19336     
    switchlabel    #19336     
    switchlabel    #19336     
    switchlabel    #19342     
    switchlabel    #19343     
    switchlabel    #19336     
    switchlabel    #19336     
    switchlabel    #19336     
    switchlabel    #19336     
    switchlabel    #19336     
    switchlabel    #19336     
    switchlabel    #19344     
    switchlabel    #19345     
    endswitch                 
#19338: 
    push           mm_blockpcl.genjumpcond.opc i64 
    push           0          i64 
    casejumpeq     #19346     i64 0
    push           1          i64 
    casejumpeq     #19347     i64 0
    popstack                  i64 
    jump           #19348     
#19346: 
    setargs                   3 0
    push           mm_blockpcl.genjumpcond.lab i64 
    push           mm_blockpcl.genjumpcond.q u64 
    push           0          i64 
    callproc       &mm_blockpcl.genjumpcond 
    setargs                   3 0
    push           mm_blockpcl.genjumpcond.lab i64 
    push           mm_blockpcl.genjumpcond.r u64 
    push           0          i64 
    callproc       &mm_blockpcl.genjumpcond 
    jump           #19349     
#19347: 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.genjumpcond.lab2 i64 
    setargs                   3 0
    push           mm_blockpcl.genjumpcond.lab2 i64 
    push           mm_blockpcl.genjumpcond.q u64 
    push           0          i64 
    callproc       &mm_blockpcl.genjumpcond 
    setargs                   3 0
    push           mm_blockpcl.genjumpcond.lab i64 
    push           mm_blockpcl.genjumpcond.r u64 
    push           1          i64 
    callproc       &mm_blockpcl.genjumpcond 
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.lab2 i64 
    callproc       &mm_genpcl.definefwdlabel 
    jump           #19349     
#19348: 
#19349: 
    jump           #19350     
#19339: 
    push           mm_blockpcl.genjumpcond.opc i64 
    push           0          i64 
    casejumpeq     #19351     i64 0
    push           1          i64 
    casejumpeq     #19352     i64 0
    popstack                  i64 
    jump           #19353     
#19351: 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.genjumpcond.lab2 i64 
    setargs                   3 0
    push           mm_blockpcl.genjumpcond.lab2 i64 
    push           mm_blockpcl.genjumpcond.q u64 
    push           1          i64 
    callproc       &mm_blockpcl.genjumpcond 
    setargs                   3 0
    push           mm_blockpcl.genjumpcond.lab i64 
    push           mm_blockpcl.genjumpcond.r u64 
    push           0          i64 
    callproc       &mm_blockpcl.genjumpcond 
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.lab2 i64 
    callproc       &mm_genpcl.definefwdlabel 
    jump           #19354     
#19352: 
    setargs                   3 0
    push           mm_blockpcl.genjumpcond.lab i64 
    push           mm_blockpcl.genjumpcond.q u64 
    push           1          i64 
    callproc       &mm_blockpcl.genjumpcond 
    setargs                   3 0
    push           mm_blockpcl.genjumpcond.lab i64 
    push           mm_blockpcl.genjumpcond.r u64 
    push           1          i64 
    callproc       &mm_blockpcl.genjumpcond 
    jump           #19354     
#19353: 
#19354: 
    jump           #19350     
#19340: 
    push           mm_blockpcl.genjumpcond.opc i64 
    push           0          i64 
    casejumpeq     #19355     i64 0
    push           1          i64 
    casejumpeq     #19356     i64 0
    popstack                  i64 
    jump           #19357     
#19355: 
    setargs                   3 0
    push           mm_blockpcl.genjumpcond.lab i64 
    push           mm_blockpcl.genjumpcond.q u64 
    push           1          i64 
    callproc       &mm_blockpcl.genjumpcond 
    jump           #19358     
#19356: 
    setargs                   3 0
    push           mm_blockpcl.genjumpcond.lab i64 
    push           mm_blockpcl.genjumpcond.q u64 
    push           0          i64 
    callproc       &mm_blockpcl.genjumpcond 
    jump           #19358     
#19357: 
#19358: 
    jump           #19350     
#19341: 
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.q u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.lab i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    startmult                 
    push           mm_blockpcl.genjumpcond.opc i64 
    push           1          i64 
    jumpne         #19359     i64 
    push           58         i64 
    resetmult                 
    jump           #19360     
#19359: 
    push           59         i64 
    endmult                   
#19360: 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.q u64 
    callproc       &mm_genpcl.setmode_u 
    jump           #19350     
#19337: 
    jump           #19361     
#19362: 
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.q u64 
    callproc       &mm_blockpcl.evalunit 
    push           mm_blockpcl.genjumpcond.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.genjumpcond.q u64 
#19361: 
    push           mm_blockpcl.genjumpcond.q u64 
    jumpfalse      #19363     u64 
    push           mm_blockpcl.genjumpcond.q u64 
    push           8          
    pushptroff                u64 1 0
    jumptrue       #19362     u64 
#19363: 
#19364: 
    setargs                   3 0
    push           mm_blockpcl.genjumpcond.lab i64 
    push           mm_blockpcl.genjumpcond.q u64 
    push           mm_blockpcl.genjumpcond.opc i64 
    callproc       &mm_blockpcl.genjumpcond 
    jump           #19350     
#19342: 
    setargs                   5 0
    push           mm_blockpcl.genjumpcond.lab i64 
    push           mm_blockpcl.genjumpcond.r u64 
    push           mm_blockpcl.genjumpcond.q u64 
    push           mm_blockpcl.genjumpcond.p u64 
    push           60         
    pushptroff                u8 1 0
    push           mm_blockpcl.genjumpcond.opc i64 
    callproc       &mm_blockpcl.gcomparejump 
    jump           #19350     
#19344: 
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.q u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.r u64 
    push           16         
    pushptroff                u64 1 0
    callproc       &mm_blockpcl.evalunit 
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.r u64 
    push           24         
    pushptroff                u64 1 0
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.lab i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    startmult                 
    push           mm_blockpcl.genjumpcond.opc i64 
    push           0          i64 
    jumpne         #19365     i64 
    push           61         i64 
    resetmult                 
    jump           #19366     
#19365: 
    push           60         i64 
    endmult                   
#19366: 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.q u64 
    callproc       &mm_genpcl.setmode_u 
    jump           #19350     
#19345: 
    push           mm_blockpcl.genjumpcond.r u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_blockpcl.genjumpcond.s u64 
    push           mm_blockpcl.genjumpcond.s u64 
    push           0          u64 
    jumpne         #19367     u64 
    setargs                   2 0
    push           0          u64 
    push           "empty set" u64 
    callproc       &mm_support.gerror 
#19367: 
    push           mm_blockpcl.genjumpcond.opc i64 
    push           0          i64 
    jumpne         #19368     i64 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.genjumpcond.lab2 i64 
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.q u64 
    callproc       &mm_blockpcl.evalunit 
    jump           #19369     
#19370: 
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.s u64 
    callproc       &mm_blockpcl.evalunit 
    push           mm_blockpcl.genjumpcond.s u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.genjumpcond.s u64 
    push           mm_blockpcl.genjumpcond.s u64 
    jumpfalse      #19371     u64 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.lab2 i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    push           62         i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #19372     
#19371: 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.lab i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    push           64         i64 
    callproc       &pc_libpcl.pcl_gen 
#19372: 
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.q u64 
    callproc       &mm_genpcl.setmode_u 
#19369: 
    push           mm_blockpcl.genjumpcond.s u64 
    jumptrue       #19370     u64 
#19373: 
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.lab2 i64 
    callproc       &mm_genpcl.definefwdlabel 
    jump           #19374     
#19368: 
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.q u64 
    callproc       &mm_blockpcl.evalunit 
    jump           #19375     
#19376: 
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.s u64 
    callproc       &mm_blockpcl.evalunit 
    push           mm_blockpcl.genjumpcond.s u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.genjumpcond.s u64 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.lab i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    startmult                 
    push           mm_blockpcl.genjumpcond.s u64 
    jumpfalse      #19377     u64 
    push           62         i64 
    resetmult                 
    jump           #19378     
#19377: 
    push           63         i64 
    endmult                   
#19378: 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.q u64 
    callproc       &mm_genpcl.setmode_u 
#19375: 
    push           mm_blockpcl.genjumpcond.s u64 
    jumptrue       #19376     u64 
#19379: 
#19374: 
    jump           #19350     
#19343: 
    push           mm_blockpcl.genjumpcond.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.genjumpcond.r u64 
    push           1          i64 
    pop            mm_blockpcl.genjumpcond.i i64 
    push           mm_blockpcl.genjumpcond.opc i64 
    push           0          i64 
    jumpne         #19380     i64 
    jump           #19381     
#19382: 
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.q u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.r u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.lab i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    setargs                   2 0
    push           52         i64 
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.p u64 
    push           40         
    addrefoff                 u64 1 0
    push           mm_blockpcl.genjumpcond.i i64 
    pushptroff                u8 1 -1
    callfn         &mm_genpcl.reversecond i64 
    callfn         &mm_blockpcl.condtopclop i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.q u64 
    callproc       &mm_genpcl.setmode_u 
    push           &mm_blockpcl.genjumpcond.i 
    incr                      i64 1
    push           mm_blockpcl.genjumpcond.r u64 
    pop            mm_blockpcl.genjumpcond.q u64 
    push           mm_blockpcl.genjumpcond.r u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.genjumpcond.r u64 
#19381: 
    push           mm_blockpcl.genjumpcond.r u64 
    jumptrue       #19382     u64 
#19383: 
    jump           #19384     
#19380: 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.genjumpcond.lab2 i64 
    jump           #19385     
#19386: 
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.q u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.r u64 
    callproc       &mm_blockpcl.evalunit 
    push           mm_blockpcl.genjumpcond.r u64 
    push           8          
    pushptroff                u64 1 0
    jumpfalse      #19387     u64 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.lab2 i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    setargs                   2 0
    push           52         i64 
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.p u64 
    push           40         
    addrefoff                 u64 1 0
    push           mm_blockpcl.genjumpcond.i i64 
    pushptroff                u8 1 -1
    callfn         &mm_genpcl.reversecond i64 
    callfn         &mm_blockpcl.condtopclop i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #19388     
#19387: 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.lab i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    setargs                   2 0
    push           52         i64 
    push           mm_blockpcl.genjumpcond.p u64 
    push           40         
    addrefoff                 u64 1 0
    push           mm_blockpcl.genjumpcond.i i64 
    pushptroff                u8 1 -1
    callfn         &mm_blockpcl.condtopclop i64 
    callproc       &pc_libpcl.pcl_gen 
#19388: 
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.q u64 
    callproc       &mm_genpcl.setmode_u 
    push           &mm_blockpcl.genjumpcond.i 
    incr                      i64 1
    push           mm_blockpcl.genjumpcond.r u64 
    pop            mm_blockpcl.genjumpcond.q u64 
    push           mm_blockpcl.genjumpcond.r u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.genjumpcond.r u64 
#19385: 
    push           mm_blockpcl.genjumpcond.r u64 
    jumptrue       #19386     u64 
#19389: 
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.lab2 i64 
    callproc       &mm_genpcl.definefwdlabel 
#19384: 
    jump           #19350     
#19336: 
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.p u64 
    callproc       &mm_blockpcl.evalunit 
    push           mm_blockpcl.genjumpcond.p u64 
    push           48         
    pushptroff                i32 1 0
    push           4          i64 
    setjumpeq      #19390     i64 
    push           2          i64 
    setjumpeqx     #19390     i64 
    setargs                   2 0
    push           0          u64 
    push           "jumptrue/not i64" u64 
    callproc       &mm_support.gerror 
#19390: 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.genjumpcond.lab i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    startmult                 
    push           mm_blockpcl.genjumpcond.opc i64 
    push           1          i64 
    jumpne         #19391     i64 
    push           58         i64 
    resetmult                 
    jump           #19392     
#19391: 
    push           59         i64 
    endmult                   
#19392: 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           4          i64 
    callproc       &mm_genpcl.setmode 
#19350: 
#19393: 
    retproc                   
End


Proc mm_blockpcl.gcomparejump:
    param          mm_blockpcl.gcomparejump.jumpopc i64 
    param          mm_blockpcl.gcomparejump.cond i64 
    param          mm_blockpcl.gcomparejump.lhs u64 
    param          mm_blockpcl.gcomparejump.rhs u64 
    param          mm_blockpcl.gcomparejump.lab i64 
    local          mm_blockpcl.gcomparejump.opc i64 
    procentry                 
    push           mm_blockpcl.gcomparejump.jumpopc i64 
    push           0          i64 
    jumpne         #19395     i64 
    setargs                   1 0
    push           mm_blockpcl.gcomparejump.cond i64 
    callfn         &mm_genpcl.reversecond i64 
    pop            mm_blockpcl.gcomparejump.cond i64 
#19395: 
    setargs                   1 0
    push           mm_blockpcl.gcomparejump.lhs u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   1 0
    push           mm_blockpcl.gcomparejump.rhs u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.gcomparejump.lab i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    setargs                   2 0
    push           52         i64 
    push           mm_blockpcl.gcomparejump.cond i64 
    callfn         &mm_blockpcl.condtopclop i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.gcomparejump.lhs u64 
    callproc       &mm_genpcl.setmode_u 
#19396: 
    retproc                   
End


Proc mm_blockpcl.genjumpl:
    param          mm_blockpcl.genjumpl.lab i64 
    procentry                 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.genjumpl.lab i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    push           50         i64 
    callproc       &pc_libpcl.pcl_gen 
#19398: 
    retproc                   
End


Proc mm_blockpcl.unimpl:
    param          mm_blockpcl.unimpl.mess u64 
    procentry                 
    setargs                   3 0
    push           0          u64 
    push           mm_blockpcl.unimpl.mess u64 
    push           "Unimplemented: #" u64 
    callproc       &mm_support.gerror_s 
#19400: 
    retproc                   
End


Proc mm_blockpcl.do_const:
    param          mm_blockpcl.do_const.p u64 
    local          mm_blockpcl.do_const.mode i64 
    procentry                 
    push           mm_blockpcl.do_const.p u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_blockpcl.do_const.mode i64 
    push           &mm_decls.ttisinteger 
    push           mm_blockpcl.do_const.mode i64 
    pushptroff                u8 1 0
    jumpfalse      #19402     i64 
    push           &mm_decls.ttsize 
    push           mm_blockpcl.do_const.mode i64 
    pushptroff                i32 4 0
    push           16         i64 
    jumpge         #19403     i64 
    setargs                   2 0
    push           mm_blockpcl.do_const.mode i64 
    push           mm_blockpcl.do_const.p u64 
    push           16         
    pushptroff                i64 1 0
    callproc       &mm_genpcl.genpushint 
    jump           #19404     
#19403: 
    setargs                   2 0
    setargs                   3 0
    push           mm_blockpcl.do_const.mode i64 
    push           mm_blockpcl.do_const.p u64 
    push           16         
    pushptroff                i128 1 0
    callfn         &pc_libpcl.pcl_genint128 u64 
    push           21         i64 
    callproc       &pc_libpcl.pcl_gen 
#19404: 
    jump           #19405     
#19402: 
    push           &mm_decls.ttisreal 
    push           mm_blockpcl.do_const.mode i64 
    pushptroff                u8 1 0
    jumpfalse      #19406     i64 
    push           &mm_decls.ttsize 
    push           mm_blockpcl.do_const.mode i64 
    pushptroff                i32 4 0
    push           4          i64 
    jumpne         #19407     i64 
    setargs                   1 0
    push           mm_blockpcl.do_const.p u64 
    push           16         
    pushptroff                r64 1 0
    callproc       &mm_genpcl.genpushreal32 
    jump           #19408     
#19407: 
    setargs                   1 0
    push           mm_blockpcl.do_const.p u64 
    push           16         
    pushptroff                r64 1 0
    callproc       &mm_genpcl.genpushreal 
#19408: 
    jump           #19405     
#19406: 
    push           &mm_decls.ttisref 
    push           mm_blockpcl.do_const.mode i64 
    pushptroff                u8 1 0
    jumpfalse      #19409     i64 
    push           mm_blockpcl.do_const.p u64 
    push           44         
    pushptroff                u8 1 0
    jumpfalse      #19410     i64 
    setargs                   1 0
    push           mm_blockpcl.do_const.p u64 
    push           16         
    pushptroff                u64 1 0
    callproc       &mm_genpcl.genpushstring 
    jump           #19411     
#19410: 
    setargs                   2 0
    push           9          i64 
    push           mm_blockpcl.do_const.p u64 
    push           16         
    pushptroff                i64 1 0
    callproc       &mm_genpcl.genpushint 
#19411: 
    jump           #19405     
#19409: 
    setargs                   2 0
    push           0          u64 
    push           "do_const" u64 
    callproc       &mm_support.gerror 
#19405: 
    setargs                   1 0
    push           mm_blockpcl.do_const.mode i64 
    callproc       &mm_genpcl.setmode 
#19412: 
    retproc                   
End


Proc mm_blockpcl.do_name:
    param          mm_blockpcl.do_name.p u64 
    local          mm_blockpcl.do_name.d u64 
    procentry                 
    push           mm_blockpcl.do_name.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_name.d u64 
    push           mm_blockpcl.do_name.d u64 
    push           78         
    pushptroff                u8 1 0
    push           5          i64 
    casejumpeq     #19414     i64 0
    push           6          i64 
    casejumpeq     #19414     i64 0
    push           17         i64 
    casejumpeq     #19415     i64 0
    push           14         i64 
    casejumpeq     #19416     i64 0
    popstack                  i64 
    jump           #19417     
#19414: 
    setargs                   1 0
    push           mm_blockpcl.do_name.d u64 
    callproc       &mm_genpcl.genpushmemaddr_d 
    jump           #19418     
#19415: 
    push           mm_blockpcl.do_name.d u64 
    push           80         
    pushptroff                i32 1 0
    push           0          i64 
    jumpne         #19419     i64 
    push           &pc_libpcl.labelno 
    incrload                  i64 1
    push           mm_blockpcl.do_name.d u64 
    push           80         
    popptroff                 i32 1 0
#19419: 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.do_name.d u64 
    push           80         
    pushptroff                i32 1 0
    callfn         &pc_libpcl.pcl_genlabel u64 
    push           50         i64 
    callproc       &pc_libpcl.pcl_gen 
    push           0          i64 
    push           mm_blockpcl.do_name.p u64 
    push           59         
    popptroff                 u8 1 0
    push           0          i64 
    push           mm_blockpcl.do_name.p u64 
    push           48         
    popptroff                 i32 1 0
    jump           #19418     
#19416: 
    setargs                   2 0
    push           4          i64 
    push           mm_blockpcl.do_name.d u64 
    push           84         
    pushptroff                i32 1 0
    callproc       &mm_genpcl.genpushint 
    jump           #19418     
#19417: 
    setargs                   1 0
    push           mm_blockpcl.do_name.d u64 
    callproc       &mm_genpcl.genpushmem_d 
    setargs                   1 0
    setargs                   1 0
    push           mm_blockpcl.do_name.p u64 
    callfn         &mm_lib.getmemmode i64 
    callproc       &mm_genpcl.setmode 
#19418: 
#19420: 
    retproc                   
End


Proc mm_blockpcl.do_stop:
    param          mm_blockpcl.do_stop.p u64 
    param          mm_blockpcl.do_stop.a u64 
    procentry                 
    push           mm_blockpcl.do_stop.a u64 
    jumpfalse      #19422     u64 
    setargs                   1 0
    push           mm_blockpcl.do_stop.a u64 
    callproc       &mm_blockpcl.evalunit 
    jump           #19423     
#19422: 
    setargs                   2 0
    setargs                   2 0
    push           9          i64 
    push           0          i64 
    callfn         &pc_libpcl.pcl_genint u64 
    push           21         i64 
    callproc       &pc_libpcl.pcl_gen 
#19423: 
    setargs                   2 0
    push           0          u64 
    push           2          i64 
    callproc       &pc_libpcl.pcl_gen 
#19424: 
    retproc                   
End


Proc mm_blockpcl.do_andl:
    param          mm_blockpcl.do_andl.p u64 
    param          mm_blockpcl.do_andl.a u64 
    param          mm_blockpcl.do_andl.b u64 
    local          mm_blockpcl.do_andl.labfalse i64 
    local          mm_blockpcl.do_andl.labend i64 
    procentry                 
    setargs                   2 0
    push           0          u64 
    push           191        i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_andl.labfalse i64 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_andl.labend i64 
    setargs                   3 0
    push           mm_blockpcl.do_andl.labfalse i64 
    push           mm_blockpcl.do_andl.a u64 
    push           0          i64 
    callproc       &mm_blockpcl.genjumpcond 
    setargs                   3 0
    push           mm_blockpcl.do_andl.labfalse i64 
    push           mm_blockpcl.do_andl.b u64 
    push           0          i64 
    callproc       &mm_blockpcl.genjumpcond 
    setargs                   2 0
    push           9          i64 
    push           1          i64 
    callproc       &mm_genpcl.genpushint 
    setargs                   2 0
    push           0          u64 
    push           192        i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.do_andl.labend i64 
    callproc       &mm_blockpcl.genjumpl 
    setargs                   1 0
    push           mm_blockpcl.do_andl.labfalse i64 
    callproc       &mm_genpcl.definefwdlabel 
    setargs                   2 0
    push           9          i64 
    push           0          i64 
    callproc       &mm_genpcl.genpushint 
    setargs                   2 0
    push           0          u64 
    push           193        i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.do_andl.labend i64 
    callproc       &mm_genpcl.definefwdlabel 
#19426: 
    retproc                   
End


Proc mm_blockpcl.do_orl:
    param          mm_blockpcl.do_orl.p u64 
    param          mm_blockpcl.do_orl.a u64 
    param          mm_blockpcl.do_orl.b u64 
    local          mm_blockpcl.do_orl.labtrue i64 
    local          mm_blockpcl.do_orl.labfalse i64 
    local          mm_blockpcl.do_orl.labend i64 
    procentry                 
    setargs                   2 0
    push           0          u64 
    push           191        i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_orl.labtrue i64 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_orl.labfalse i64 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_orl.labend i64 
    setargs                   3 0
    push           mm_blockpcl.do_orl.labtrue i64 
    push           mm_blockpcl.do_orl.a u64 
    push           1          i64 
    callproc       &mm_blockpcl.genjumpcond 
    setargs                   3 0
    push           mm_blockpcl.do_orl.labfalse i64 
    push           mm_blockpcl.do_orl.b u64 
    push           0          i64 
    callproc       &mm_blockpcl.genjumpcond 
    setargs                   1 0
    push           mm_blockpcl.do_orl.labtrue i64 
    callproc       &mm_genpcl.definefwdlabel 
    setargs                   2 0
    push           9          i64 
    push           1          i64 
    callproc       &mm_genpcl.genpushint 
    setargs                   2 0
    push           0          u64 
    push           192        i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.do_orl.labend i64 
    callproc       &mm_blockpcl.genjumpl 
    setargs                   1 0
    push           mm_blockpcl.do_orl.labfalse i64 
    callproc       &mm_genpcl.definefwdlabel 
    setargs                   2 0
    push           9          i64 
    push           0          i64 
    callproc       &mm_genpcl.genpushint 
    setargs                   2 0
    push           0          u64 
    push           193        i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.do_orl.labend i64 
    callproc       &mm_genpcl.definefwdlabel 
#19428: 
    retproc                   
End


Proc mm_blockpcl.do_notl:
    param          mm_blockpcl.do_notl.p u64 
    param          mm_blockpcl.do_notl.a u64 
    procentry                 
    setargs                   1 0
    push           mm_blockpcl.do_notl.a u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    push           0          u64 
    push           mm_blockpcl.do_notl.p u64 
    push           60         
    pushptroff                u8 1 0
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           4          i64 
    callproc       &mm_genpcl.setmode 
#19430: 
    retproc                   
End


Proc mm_blockpcl.do_istruel:
    param          mm_blockpcl.do_istruel.p u64 
    param          mm_blockpcl.do_istruel.a u64 
    procentry                 
    setargs                   1 0
    push           mm_blockpcl.do_istruel.a u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   1 0
    push           mm_blockpcl.do_istruel.a u64 
    callfn         &mm_blockpcl.islogical i64 
    jumpfalse      #19432     i64 
    jump           #19433     
#19432: 
    setargs                   2 0
    push           0          u64 
    push           mm_blockpcl.do_istruel.p u64 
    push           60         
    pushptroff                u8 1 0
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           4          i64 
    callproc       &mm_genpcl.setmode 
#19433: 
    retproc                   
End


Proc mm_blockpcl.do_typepun:
    param          mm_blockpcl.do_typepun.p u64 
    param          mm_blockpcl.do_typepun.a u64 
    procentry                 
    setargs                   1 0
    push           mm_blockpcl.do_typepun.a u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   1 0
    push           mm_blockpcl.do_typepun.a u64 
    callproc       &mm_genpcl.setmode_u 
    push           mm_blockpcl.do_typepun.a u64 
    push           48         
    pushptroff                i32 1 0
    push           mm_blockpcl.do_typepun.p u64 
    push           48         
    pushptroff                i32 1 0
    jumpne         #19435     i64 
    jump           #19436     
#19435: 
    setargs                   2 0
    push           0          u64 
    push           180        i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.do_typepun.p u64 
    push           52         
    pushptroff                i32 1 0
    callproc       &mm_genpcl.setmode 
#19436: 
    retproc                   
End


Proc mm_blockpcl.do_shorten:
    param          mm_blockpcl.do_shorten.p u64 
    param          mm_blockpcl.do_shorten.a u64 
    procentry                 
    setargs                   1 0
    push           mm_blockpcl.do_shorten.a u64 
    callproc       &mm_blockpcl.evalunit 
#19438: 
    retproc                   
End


Proc mm_blockpcl.islogical: i64
    param          mm_blockpcl.islogical.p u64 
    procentry                 
    push           mm_blockpcl.islogical.p u64 
    pushptr                   u8 
    push           18         i64 
    casejumpeq     #19440     i64 0
    push           17         i64 
    casejumpeq     #19440     i64 0
    push           14         i64 
    casejumpeq     #19440     i64 0
    push           15         i64 
    casejumpeq     #19440     i64 0
    push           16         i64 
    casejumpeq     #19440     i64 0
    popstack                  i64 
    jump           #19441     
#19440: 
    push           1          i64 
    setret                    i64 
    jump           #19442     
    jump           #19443     
#19441: 
#19443: 
    push           0          i64 
    setret                    i64 
    jump           #19442     
#19442: 
    retfn                     i64 
End


Proc mm_blockpcl.do_assign:
    param          mm_blockpcl.do_assign.p u64 
    param          mm_blockpcl.do_assign.a u64 
    param          mm_blockpcl.do_assign.b u64 
    local          mm_blockpcl.do_assign.c u64 
    local          mm_blockpcl.do_assign.d u64 
    local          mm_blockpcl.do_assign.offset i64 
    procentry                 
    push           mm_blockpcl.do_assign.a u64 
    pushptr                   u8 
    push           19         i64 
    jumpeq         #19445     i64 
    push           mm_blockpcl.do_assign.b u64 
    pushptr                   u8 
    push           19         i64 
    jumpne         #19445     i64 
    push           mm_blockpcl.do_assign.p u64 
    push           59         
    pushptroff                u8 1 0
    jumptrue       #19446     i64 
    setargs                   3 0
    push           mm_blockpcl.do_assign.b u64 
    push           mm_blockpcl.do_assign.a u64 
    push           mm_blockpcl.do_assign.p u64 
    callproc       &mm_blockpcl.do_assignblock 
    jump           #19447     
#19446: 
#19445: 
    push           mm_blockpcl.do_assign.a u64 
    pushptr                   u8 
    push           19         i64 
    jumpne         #19448     i64 
    push           mm_blockpcl.do_assign.p u64 
    push           59         
    pushptroff                u8 1 0
    jumpfalse      #19449     i64 
    setargs                   2 0
    push           0          u64 
    push           "multass/store" u64 
    callproc       &mm_support.gerror 
#19449: 
    setargs                   2 0
    push           mm_blockpcl.do_assign.b u64 
    push           mm_blockpcl.do_assign.a u64 
    callproc       &mm_blockpcl.do_multassign 
    jump           #19447     
    jump           #19450     
#19448: 
    push           mm_blockpcl.do_assign.b u64 
    pushptr                   u8 
    push           31         i64 
    jumpne         #19451     i64 
    push           &mm_decls.ttbasetype 
    push           mm_blockpcl.do_assign.b u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           31         i64 
    jumpne         #19451     i64 
    setargs                   2 0
    push           mm_blockpcl.do_assign.b u64 
    push           mm_blockpcl.do_assign.a u64 
    callproc       &mm_blockpcl.do_multassign 
    jump           #19447     
#19451: 
#19450: 
    push           mm_blockpcl.do_assign.a u64 
    pushptr                   u8 
    push           48         i64 
    casejumpeq     #19452     i64 0
    push           50         i64 
    casejumpeq     #19453     i64 0
    push           51         i64 
    casejumpeq     #19454     i64 0
    popstack                  i64 
    jump           #19455     
#19452: 
    setargs                   4 0
    push           mm_blockpcl.do_assign.b u64 
    push           mm_blockpcl.do_assign.a u64 
    push           24         
    pushptroff                u64 1 0
    push           mm_blockpcl.do_assign.a u64 
    push           16         
    pushptroff                u64 1 0
    push           mm_blockpcl.do_assign.p u64 
    callproc       &mm_blockpcl.do_storeindex 
    jump           #19447     
    jump           #19456     
#19453: 
    setargs                   2 0
    push           0          u64 
    push           "ASS/SLICE" u64 
    callproc       &mm_support.gerror 
    jump           #19456     
#19454: 
    setargs                   3 0
    push           mm_blockpcl.do_assign.b u64 
    push           mm_blockpcl.do_assign.a u64 
    push           24         
    pushptroff                u64 1 0
    push           mm_blockpcl.do_assign.a u64 
    callproc       &mm_blockpcl.do_storedot 
    jump           #19447     
    jump           #19456     
#19455: 
#19456: 
    push           mm_blockpcl.do_assign.a u64 
    pushptr                   u8 
    switch         #19457     3 57
    opnd           #19458     
#19457: 
    switchlabel    #19459     
    switchlabel    #19458     
    switchlabel    #19458     
    switchlabel    #19458     
    switchlabel    #19458     
    switchlabel    #19458     
    switchlabel    #19458     
    switchlabel    #19458     
    switchlabel    #19458     
    switchlabel    #19458     
    switchlabel    #19458     
    switchlabel    #19458     
    switchlabel    #19458     
    switchlabel    #19458     
    switchlabel    #19458     
    switchlabel    #19458     
    switchlabel    #19458     
    switchlabel    #19458     
    switchlabel    #19458     
    switchlabel    #19458     
    switchlabel    #19458     
    switchlabel    #19458     
    switchlabel    #19458     
    switchlabel    #19458     
    switchlabel    #19458     
    switchlabel    #19458     
    switchlabel    #19458     
    switchlabel    #19458     
    switchlabel    #19458     
    switchlabel    #19458     
    switchlabel    #19458     
    switchlabel    #19458     
    switchlabel    #19458     
    switchlabel    #19458     
    switchlabel    #19458     
    switchlabel    #19458     
    switchlabel    #19458     
    switchlabel    #19458     
    switchlabel    #19458     
    switchlabel    #19458     
    switchlabel    #19458     
    switchlabel    #19458     
    switchlabel    #19458     
    switchlabel    #19458     
    switchlabel    #19458     
    switchlabel    #19458     
    switchlabel    #19458     
    switchlabel    #19458     
    switchlabel    #19458     
    switchlabel    #19458     
    switchlabel    #19460     
    switchlabel    #19461     
    switchlabel    #19458     
    switchlabel    #19458     
    switchlabel    #19462     
    endswitch                 
#19459: 
    setargs                   1 0
    push           mm_blockpcl.do_assign.b u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.do_assign.a u64 
    callfn         &mm_genpcl.genmem_u u64 
    startmult                 
    push           mm_blockpcl.do_assign.p u64 
    push           59         
    pushptroff                u8 1 0
    jumpfalse      #19463     i64 
    push           23         i64 
    resetmult                 
    jump           #19464     
#19463: 
    push           22         i64 
    endmult                   
#19464: 
    callproc       &pc_libpcl.pcl_gen 
    jump           #19465     
#19462: 
    setargs                   1 0
    push           mm_blockpcl.do_assign.b u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    push           0          u64 
    push           mm_blockpcl.do_assign.a u64 
    callproc       &mm_blockpcl.evalref 
    setargs                   0 0
    callfn         &pc_libpcl.pcl_getopcode i64 
    push           125        i64 
    jumpne         #19466     i64 
    setargs                   1 0
    startmult                 
    push           mm_blockpcl.do_assign.p u64 
    push           59         
    pushptroff                u8 1 0
    jumpfalse      #19467     i64 
    push           32         i64 
    resetmult                 
    jump           #19468     
#19467: 
    push           31         i64 
    endmult                   
#19468: 
    callproc       &pc_libpcl.pcl_setopcode 
    jump           #19469     
#19466: 
    setargs                   2 0
    push           0          u64 
    startmult                 
    push           mm_blockpcl.do_assign.p u64 
    push           59         
    pushptroff                u8 1 0
    jumpfalse      #19470     i64 
    push           35         i64 
    resetmult                 
    jump           #19471     
#19470: 
    push           34         i64 
    endmult                   
#19471: 
    callproc       &pc_libpcl.pcl_gen 
#19469: 
    setargs                   1 0
    setargs                   1 0
    push           mm_blockpcl.do_assign.a u64 
    callfn         &mm_lib.getmemmode i64 
    callproc       &mm_genpcl.setmode 
    jump           #19465     
#19460: 
    setargs                   1 0
    push           mm_blockpcl.do_assign.b u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    push           0          u64 
    push           mm_blockpcl.do_assign.a u64 
    push           16         
    pushptroff                u64 1 0
    callproc       &mm_blockpcl.evalref 
    setargs                   1 0
    push           mm_blockpcl.do_assign.a u64 
    push           24         
    pushptroff                u64 1 0
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    push           0          u64 
    startmult                 
    push           mm_blockpcl.do_assign.p u64 
    push           59         
    pushptroff                u8 1 0
    jumpfalse      #19472     i64 
    push           38         i64 
    resetmult                 
    jump           #19473     
#19472: 
    push           37         i64 
    endmult                   
#19473: 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.do_assign.a u64 
    push           16         
    pushptroff                u64 1 0
    callproc       &mm_genpcl.setmode_u 
    jump           #19447     
    jump           #19465     
#19461: 
    setargs                   1 0
    push           mm_blockpcl.do_assign.b u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    push           0          u64 
    push           mm_blockpcl.do_assign.a u64 
    push           16         
    pushptroff                u64 1 0
    callproc       &mm_blockpcl.evalref 
    setargs                   1 0
    push           mm_blockpcl.do_assign.a u64 
    push           24         
    pushptroff                u64 1 0
    push           16         
    pushptroff                u64 1 0
    callproc       &mm_blockpcl.evalunit 
    setargs                   1 0
    push           mm_blockpcl.do_assign.a u64 
    push           24         
    pushptroff                u64 1 0
    push           24         
    pushptroff                u64 1 0
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    push           0          u64 
    startmult                 
    push           mm_blockpcl.do_assign.p u64 
    push           59         
    pushptroff                u8 1 0
    jumpfalse      #19474     i64 
    push           41         i64 
    resetmult                 
    jump           #19475     
#19474: 
    push           40         i64 
    endmult                   
#19475: 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.do_assign.a u64 
    push           16         
    pushptroff                u64 1 0
    callproc       &mm_genpcl.setmode_u 
    jump           #19447     
    jump           #19465     
#19458: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &mm_tables.jtagnames 
    push           mm_blockpcl.do_assign.a u64 
    pushptr                   u8 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           0          u64 
    push           "Can't assign" u64 
    callproc       &mm_support.gerror 
#19465: 
    setargs                   1 0
    push           mm_blockpcl.do_assign.a u64 
    callproc       &mm_genpcl.setmode_u 
#19447: 
    retproc                   
End


Proc mm_blockpcl.do_bin:
    param          mm_blockpcl.do_bin.p u64 
    param          mm_blockpcl.do_bin.a u64 
    param          mm_blockpcl.do_bin.b u64 
    local          mm_blockpcl.do_bin.offset i64 
    procentry                 
    setargs                   1 0
    push           mm_blockpcl.do_bin.a u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   0 0
    callfn         &pc_libpcl.pcl_getopcode i64 
    push           125        i64 
    jumpne         #19477     i64 
    push           mm_blockpcl.do_bin.p u64 
    push           60         
    pushptroff                u8 1 0
    push           125        i64 
    setjumpeq      #19478     i64 
    push           126        i64 
    setjumpne      #19477     i64 
#19478: 
    push           &mm_decls.ttisref 
    push           mm_blockpcl.do_bin.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    jumpfalse      #19477     i64 
    push           &mm_decls.ttisinteger 
    push           mm_blockpcl.do_bin.b u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    jumpfalse      #19477     i64 
    push           mm_blockpcl.do_bin.b u64 
    pushptr                   u8 
    push           1          i64 
    jumpne         #19477     i64 
    push           &mm_decls.ttsize 
    push           &mm_decls.tttarget 
    push           mm_blockpcl.do_bin.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    pushptroff                i32 4 0
    push           mm_blockpcl.do_bin.b u64 
    push           16         
    pushptroff                i64 1 0
    mul                       i64 
    pop            mm_blockpcl.do_bin.offset i64 
    push           mm_blockpcl.do_bin.p u64 
    push           60         
    pushptroff                u8 1 0
    push           125        i64 
    jumpne         #19479     i64 
    setargs                   1 0
    push           mm_blockpcl.do_bin.offset i64 
    callproc       &pc_libpcl.pcl_addoffset 
    jump           #19480     
#19479: 
    setargs                   1 0
    push           mm_blockpcl.do_bin.offset i64 
    neg                       i64 
    callproc       &pc_libpcl.pcl_addoffset 
#19480: 
    jump           #19481     
#19477: 
    setargs                   1 0
    push           mm_blockpcl.do_bin.b u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    push           0          u64 
    push           mm_blockpcl.do_bin.p u64 
    push           60         
    pushptroff                u8 1 0
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.do_bin.p u64 
    callproc       &mm_genpcl.setmode_u 
    push           &mm_decls.ttisref 
    push           mm_blockpcl.do_bin.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    jumpfalse      #19482     i64 
    push           &mm_decls.ttisinteger 
    push           mm_blockpcl.do_bin.b u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    jumpfalse      #19482     i64 
    setargs                   1 0
    push           &mm_decls.ttsize 
    push           &mm_decls.tttarget 
    push           mm_blockpcl.do_bin.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    pushptroff                i32 4 0
    callproc       &pc_libpcl.pcl_setscale 
#19482: 
    push           mm_blockpcl.do_bin.p u64 
    push           60         
    pushptroff                u8 1 0
    push           127        i64 
    jumpne         #19483     i64 
    push           &mm_decls.ttisref 
    push           mm_blockpcl.do_bin.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    jumpfalse      #19483     i64 
    setargs                   1 0
    push           &mm_decls.ttsize 
    push           &mm_decls.tttarget 
    push           mm_blockpcl.do_bin.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    pushptroff                i32 4 0
    callproc       &pc_libpcl.pcl_setscale 
#19483: 
#19481: 
    retproc                   
End


Proc mm_blockpcl.do_setcc:
    param          mm_blockpcl.do_setcc.p u64 
    param          mm_blockpcl.do_setcc.a u64 
    param          mm_blockpcl.do_setcc.b u64 
    procentry                 
    setargs                   1 0
    push           mm_blockpcl.do_setcc.a u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   1 0
    push           mm_blockpcl.do_setcc.b u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    push           0          u64 
    setargs                   2 0
    push           65         i64 
    push           mm_blockpcl.do_setcc.p u64 
    push           60         
    pushptroff                u8 1 0
    callfn         &mm_blockpcl.condtopclop i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.do_setcc.a u64 
    callproc       &mm_genpcl.setmode_u 
#19485: 
    retproc                   
End


Proc mm_blockpcl.do_setccchain:
    param          mm_blockpcl.do_setccchain.p u64 
    param          mm_blockpcl.do_setccchain.q u64 
    local          mm_blockpcl.do_setccchain.lab1 i64 
    local          mm_blockpcl.do_setccchain.lab2 i64 
    local          mm_blockpcl.do_setccchain.i i64 
    local          mm_blockpcl.do_setccchain.r u64 
    procentry                 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_setccchain.lab1 i64 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_setccchain.lab2 i64 
    push           mm_blockpcl.do_setccchain.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_setccchain.r u64 
    push           1          i64 
    pop            mm_blockpcl.do_setccchain.i i64 
    setargs                   2 0
    push           0          u64 
    push           191        i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #19487     
#19488: 
    setargs                   1 0
    push           mm_blockpcl.do_setccchain.q u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   1 0
    push           mm_blockpcl.do_setccchain.r u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.do_setccchain.lab1 i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    setargs                   2 0
    push           52         i64 
    setargs                   1 0
    push           mm_blockpcl.do_setccchain.p u64 
    push           40         
    addrefoff                 u64 1 0
    push           mm_blockpcl.do_setccchain.i i64 
    pushptroff                u8 1 -1
    callfn         &mm_genpcl.reversecond i64 
    callfn         &mm_blockpcl.condtopclop i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.do_setccchain.q u64 
    callproc       &mm_genpcl.setmode_u 
    push           &mm_blockpcl.do_setccchain.i 
    incr                      i64 1
    push           mm_blockpcl.do_setccchain.r u64 
    pop            mm_blockpcl.do_setccchain.q u64 
    push           mm_blockpcl.do_setccchain.r u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_setccchain.r u64 
#19487: 
    push           mm_blockpcl.do_setccchain.r u64 
    jumptrue       #19488     u64 
#19489: 
    setargs                   2 0
    push           9          i64 
    push           1          i64 
    callproc       &mm_genpcl.genpushint 
    setargs                   2 0
    push           0          u64 
    push           192        i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.do_setccchain.lab2 i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    push           50         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.do_setccchain.lab1 i64 
    callproc       &mm_genpcl.definefwdlabel 
    setargs                   2 0
    push           9          i64 
    push           0          i64 
    callproc       &mm_genpcl.genpushint 
    setargs                   2 0
    push           0          u64 
    push           193        i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.do_setccchain.lab2 i64 
    callproc       &mm_genpcl.definefwdlabel 
#19490: 
    retproc                   
End


Proc mm_blockpcl.do_binto:
    param          mm_blockpcl.do_binto.p u64 
    param          mm_blockpcl.do_binto.a u64 
    param          mm_blockpcl.do_binto.b u64 
    procentry                 
    setargs                   1 0
    push           mm_blockpcl.do_binto.a u64 
    callproc       &mm_blockpcl.evallv 
    setargs                   1 0
    push           mm_blockpcl.do_binto.b u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    push           0          u64 
    push           mm_blockpcl.do_binto.p u64 
    push           60         
    pushptroff                u8 1 0
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.do_binto.a u64 
    callproc       &mm_genpcl.setmode_u 
    push           &mm_decls.ttisref 
    push           mm_blockpcl.do_binto.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    jumpfalse      #19492     i64 
    push           &mm_decls.ttisinteger 
    push           mm_blockpcl.do_binto.b u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    jumpfalse      #19492     i64 
    setargs                   1 0
    push           &mm_decls.ttsize 
    push           &mm_decls.tttarget 
    push           mm_blockpcl.do_binto.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    pushptroff                i32 4 0
    callproc       &pc_libpcl.pcl_setscale 
#19492: 
#19493: 
    retproc                   
End


Proc mm_blockpcl.do_unary:
    param          mm_blockpcl.do_unary.p u64 
    param          mm_blockpcl.do_unary.a u64 
    procentry                 
    setargs                   1 0
    push           mm_blockpcl.do_unary.a u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    push           0          u64 
    push           mm_blockpcl.do_unary.p u64 
    push           60         
    pushptroff                u8 1 0
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.do_unary.p u64 
    callproc       &mm_genpcl.setmode_u 
    push           mm_blockpcl.do_unary.p u64 
    push           60         
    pushptroff                u8 1 0
    push           202        i64 
    jumpne         #19495     i64 
    push           &mm_decls.ttbasetype 
    push           mm_blockpcl.do_unary.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           12         i64 
    jumpne         #19495     i64 
    setargs                   2 0
    push           0          i64 
    push           &mm_decls.ttlower 
    push           mm_blockpcl.do_unary.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    callproc       &pc_libpcl.pcl_setxy 
#19495: 
#19496: 
    retproc                   
End


Proc mm_blockpcl.do_unaryto:
    param          mm_blockpcl.do_unaryto.p u64 
    param          mm_blockpcl.do_unaryto.a u64 
    procentry                 
    setargs                   1 0
    push           mm_blockpcl.do_unaryto.a u64 
    callproc       &mm_blockpcl.evallv 
    setargs                   2 0
    push           0          u64 
    push           mm_blockpcl.do_unaryto.p u64 
    push           60         
    pushptroff                u8 1 0
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.do_unaryto.a u64 
    callproc       &mm_genpcl.setmode_u 
#19498: 
    retproc                   
End


Proc mm_blockpcl.do_ptr:
    param          mm_blockpcl.do_ptr.p u64 
    param          mm_blockpcl.do_ptr.a u64 
    procentry                 
    setargs                   1 0
    push           mm_blockpcl.do_ptr.a u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   0 0
    callfn         &pc_libpcl.pcl_getopcode i64 
    push           125        i64 
    jumpne         #19500     i64 
    setargs                   1 0
    push           30         i64 
    callproc       &pc_libpcl.pcl_setopcode 
    jump           #19501     
#19500: 
    setargs                   2 0
    push           0          u64 
    push           33         i64 
    callproc       &pc_libpcl.pcl_gen 
#19501: 
    setargs                   1 0
    setargs                   1 0
    push           mm_blockpcl.do_ptr.p u64 
    callfn         &mm_lib.getmemmode i64 
    callproc       &mm_genpcl.setmode 
#19502: 
    retproc                   
End


Proc mm_blockpcl.do_labeldef:
    param          mm_blockpcl.do_labeldef.p u64 
    local          mm_blockpcl.do_labeldef.d u64 
    local          mm_blockpcl.do_labeldef.str block:256 
    procentry                 
    push           mm_blockpcl.do_labeldef.p u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_labeldef.d u64 
    push           mm_blockpcl.do_labeldef.d u64 
    push           80         
    pushptroff                i32 1 0
    push           0          i64 
    jumpne         #19504     i64 
    push           &pc_libpcl.labelno 
    incrload                  i64 1
    push           mm_blockpcl.do_labeldef.d u64 
    push           80         
    popptroff                 i32 1 0
#19504: 
    setargs                   1 0
    push           &mm_blockpcl.do_labeldef.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           mm_blockpcl.do_labeldef.d u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           "::"       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           &mm_blockpcl.do_labeldef.str 
    callproc       &pc_libpcl.pcl_gencomment 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.do_labeldef.d u64 
    push           80         
    pushptroff                i32 1 0
    callfn         &pc_libpcl.pcl_genlabel u64 
    push           19         i64 
    callproc       &pc_libpcl.pcl_gen 
#19505: 
    retproc                   
End


Proc mm_blockpcl.do_goto:
    param          mm_blockpcl.do_goto.a u64 
    local          mm_blockpcl.do_goto.d u64 
    procentry                 
    push           mm_blockpcl.do_goto.a u64 
    pushptr                   u8 
    push           3          i64 
    casejumpeq     #19507     i64 0
    popstack                  i64 
    jump           #19508     
#19507: 
    push           mm_blockpcl.do_goto.a u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_goto.d u64 
    push           mm_blockpcl.do_goto.d u64 
    push           80         
    pushptroff                i32 1 0
    push           0          i64 
    jumpne         #19509     i64 
    push           &pc_libpcl.labelno 
    incrload                  i64 1
    push           mm_blockpcl.do_goto.d u64 
    push           80         
    popptroff                 i32 1 0
#19509: 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.do_goto.d u64 
    push           80         
    pushptroff                i32 1 0
    callfn         &pc_libpcl.pcl_genlabel u64 
    push           50         i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #19510     
#19508: 
    setargs                   2 0
    push           0          u64 
    push           "goto ptr?" u64 
    callproc       &mm_support.gerror 
#19510: 
#19511: 
    retproc                   
End


Proc mm_blockpcl.do_do:
    param          mm_blockpcl.do_do.p u64 
    param          mm_blockpcl.do_do.a u64 
    param          mm_blockpcl.do_do.b u64 
    local          mm_blockpcl.do_do.lab_abc i64 
    local          mm_blockpcl.do_do.lab_d i64 
    procentry                 
    setargs                   0 0
    callfn         &mm_genpcl.definelabel i64 
    pop            mm_blockpcl.do_do.lab_abc i64 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_do.lab_d i64 
    setargs                   4 0
    push           mm_blockpcl.do_do.lab_d i64 
    push           mm_blockpcl.do_do.lab_abc i64 
    push           mm_blockpcl.do_do.lab_abc i64 
    push           mm_blockpcl.do_do.lab_abc i64 
    callproc       &mm_genpcl.stacklooplabels 
    setargs                   1 0
    push           mm_blockpcl.do_do.a u64 
    callproc       &mm_blockpcl.evalblock 
    setargs                   1 0
    push           mm_blockpcl.do_do.lab_abc i64 
    callproc       &mm_blockpcl.genjumpl 
    setargs                   1 0
    push           mm_blockpcl.do_do.lab_d i64 
    callproc       &mm_genpcl.definefwdlabel 
    push           &mm_genpcl.loopindex 
    decr                      i64 1
#19513: 
    retproc                   
End


Proc mm_blockpcl.do_to:
    param          mm_blockpcl.do_to.p u64 
    param          mm_blockpcl.do_to.a u64 
    param          mm_blockpcl.do_to.b u64 
    local          mm_blockpcl.do_to.cvar u64 
    local          mm_blockpcl.do_to.lab_a i64 
    local          mm_blockpcl.do_to.lab_b i64 
    local          mm_blockpcl.do_to.lab_c i64 
    local          mm_blockpcl.do_to.lab_d i64 
    local          mm_blockpcl.do_to.count i64 
    procentry                 
    push           mm_blockpcl.do_to.p u64 
    push           32         
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_to.cvar u64 
    setargs                   0 0
    callfn         &mm_genpcl.definelabel i64 
    pop            mm_blockpcl.do_to.lab_a i64 
    push           4          i64 
    push           mm_blockpcl.do_to.a u64 
    push           48         
    popptroff                 i32 1 0
    setargs                   1 0
    push           mm_blockpcl.do_to.a u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.do_to.cvar u64 
    callfn         &mm_genpcl.genmem_u u64 
    push           22         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           4          i64 
    callproc       &mm_genpcl.setmode 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_to.lab_b i64 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_to.lab_c i64 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_to.lab_d i64 
    setargs                   4 0
    push           mm_blockpcl.do_to.lab_d i64 
    push           mm_blockpcl.do_to.lab_c i64 
    push           mm_blockpcl.do_to.lab_b i64 
    push           mm_blockpcl.do_to.lab_a i64 
    callproc       &mm_genpcl.stacklooplabels 
    push           mm_blockpcl.do_to.a u64 
    pushptr                   u8 
    push           1          i64 
    jumpeq         #19515     i64 
    setargs                   1 0
    push           mm_blockpcl.do_to.cvar u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   1 0
    push           mm_genpcl.pzero u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.do_to.lab_d i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    push           55         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           4          i64 
    callproc       &mm_genpcl.setmode 
    jump           #19516     
#19515: 
    push           mm_blockpcl.do_to.a u64 
    push           16         
    pushptroff                i64 1 0
    pop            mm_blockpcl.do_to.count i64 
    push           mm_blockpcl.do_to.count i64 
    push           0          i64 
    jumpgt         #19517     i64 
    setargs                   1 0
    push           mm_blockpcl.do_to.lab_d i64 
    callproc       &mm_blockpcl.genjumpl 
#19517: 
#19516: 
    setargs                   1 0
    push           mm_blockpcl.do_to.lab_b i64 
    callproc       &mm_genpcl.definefwdlabel 
    setargs                   1 0
    push           mm_blockpcl.do_to.b u64 
    callproc       &mm_blockpcl.evalblock 
    setargs                   1 0
    push           mm_blockpcl.do_to.lab_c i64 
    callproc       &mm_genpcl.definefwdlabel 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.do_to.lab_b i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    push           79         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.do_to.cvar u64 
    callfn         &mm_genpcl.genmem_u u64 
    push           26         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.do_to.lab_d i64 
    callproc       &mm_genpcl.definefwdlabel 
    push           &mm_genpcl.loopindex 
    decr                      i64 1
#19518: 
    retproc                   
End


Proc mm_blockpcl.do_while:
    param          mm_blockpcl.do_while.p u64 
    param          mm_blockpcl.do_while.pcond u64 
    param          mm_blockpcl.do_while.pbody u64 
    param          mm_blockpcl.do_while.pincr u64 
    local          mm_blockpcl.do_while.lab_b i64 
    local          mm_blockpcl.do_while.lab_c i64 
    local          mm_blockpcl.do_while.lab_d i64 
    local          mm_blockpcl.do_while.lab_incr i64 
    procentry                 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_while.lab_b i64 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_while.lab_c i64 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_while.lab_d i64 
    push           mm_blockpcl.do_while.pincr u64 
    jumpfalse      #19520     u64 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_while.lab_incr i64 
    jump           #19521     
#19520: 
    push           mm_blockpcl.do_while.lab_c i64 
    pop            mm_blockpcl.do_while.lab_incr i64 
#19521: 
    setargs                   4 0
    push           mm_blockpcl.do_while.lab_d i64 
    push           mm_blockpcl.do_while.lab_c i64 
    push           mm_blockpcl.do_while.lab_b i64 
    push           mm_blockpcl.do_while.lab_c i64 
    callproc       &mm_genpcl.stacklooplabels 
    setargs                   1 0
    push           mm_blockpcl.do_while.lab_incr i64 
    callproc       &mm_blockpcl.genjumpl 
    setargs                   1 0
    push           mm_blockpcl.do_while.lab_b i64 
    callproc       &mm_genpcl.definefwdlabel 
    setargs                   1 0
    push           mm_blockpcl.do_while.pbody u64 
    callproc       &mm_blockpcl.evalblock 
    setargs                   1 0
    push           mm_blockpcl.do_while.lab_c i64 
    callproc       &mm_genpcl.definefwdlabel 
    push           mm_blockpcl.do_while.pincr u64 
    jumpfalse      #19522     u64 
    setargs                   1 0
    push           mm_blockpcl.do_while.pincr u64 
    callproc       &mm_blockpcl.evalblock 
    setargs                   1 0
    push           mm_blockpcl.do_while.lab_incr i64 
    callproc       &mm_genpcl.definefwdlabel 
#19522: 
    setargs                   3 0
    push           mm_blockpcl.do_while.lab_b i64 
    push           mm_blockpcl.do_while.pcond u64 
    push           1          i64 
    callproc       &mm_blockpcl.docond 
    setargs                   1 0
    push           mm_blockpcl.do_while.lab_d i64 
    callproc       &mm_genpcl.definefwdlabel 
    push           &mm_genpcl.loopindex 
    decr                      i64 1
#19523: 
    retproc                   
End


Proc mm_blockpcl.do_repeat:
    param          mm_blockpcl.do_repeat.p u64 
    param          mm_blockpcl.do_repeat.a u64 
    param          mm_blockpcl.do_repeat.b u64 
    local          mm_blockpcl.do_repeat.lab_ab i64 
    local          mm_blockpcl.do_repeat.lab_c i64 
    local          mm_blockpcl.do_repeat.lab_d i64 
    procentry                 
    setargs                   0 0
    callfn         &mm_genpcl.definelabel i64 
    pop            mm_blockpcl.do_repeat.lab_ab i64 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_repeat.lab_c i64 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_repeat.lab_d i64 
    setargs                   4 0
    push           mm_blockpcl.do_repeat.lab_d i64 
    push           mm_blockpcl.do_repeat.lab_c i64 
    push           mm_blockpcl.do_repeat.lab_ab i64 
    push           mm_blockpcl.do_repeat.lab_ab i64 
    callproc       &mm_genpcl.stacklooplabels 
    setargs                   1 0
    push           mm_blockpcl.do_repeat.a u64 
    callproc       &mm_blockpcl.evalblock 
    setargs                   1 0
    push           mm_blockpcl.do_repeat.lab_c i64 
    callproc       &mm_genpcl.definefwdlabel 
    push           mm_blockpcl.do_repeat.b u64 
    pushptr                   u8 
    push           1          i64 
    jumpne         #19525     i64 
    push           mm_blockpcl.do_repeat.b u64 
    push           16         
    pushptroff                i64 1 0
    push           0          i64 
    jumpeq         #19526     i64 
#19525: 
    setargs                   3 0
    push           mm_blockpcl.do_repeat.lab_ab i64 
    push           mm_blockpcl.do_repeat.b u64 
    push           0          i64 
    callproc       &mm_blockpcl.docond 
#19526: 
    setargs                   1 0
    push           mm_blockpcl.do_repeat.lab_d i64 
    callproc       &mm_genpcl.definefwdlabel 
    push           &mm_genpcl.loopindex 
    decr                      i64 1
#19527: 
    retproc                   
End


Proc mm_blockpcl.do_exit:
    param          mm_blockpcl.do_exit.p u64 
    param          mm_blockpcl.do_exit.k i64 
    local          mm_blockpcl.do_exit.n i64 
    local          mm_blockpcl.do_exit.index i64 
    procentry                 
    push           mm_blockpcl.do_exit.p u64 
    push           40         
    pushptroff                i32 1 0
    pop            mm_blockpcl.do_exit.index i64 
    push           mm_blockpcl.do_exit.index i64 
    push           0          i64 
    jumpne         #19529     i64 
    push           mm_genpcl.loopindex i64 
    pop            mm_blockpcl.do_exit.index i64 
#19529: 
    setargs                   2 0
    push           mm_blockpcl.do_exit.index i64 
    push           mm_blockpcl.do_exit.k i64 
    callfn         &mm_genpcl.findlooplabel i64 
    pop            mm_blockpcl.do_exit.n i64 
    push           mm_blockpcl.do_exit.n i64 
    push           0          i64 
    jumpne         #19530     i64 
    setargs                   2 0
    push           mm_blockpcl.do_exit.p u64 
    push           "Bad exit/loop index" u64 
    callproc       &mm_support.gerror 
    jump           #19531     
#19530: 
    setargs                   1 0
    push           mm_blockpcl.do_exit.n i64 
    callproc       &mm_blockpcl.genjumpl 
#19531: 
#19532: 
    retproc                   
End


Proc mm_blockpcl.do_if:
    param          mm_blockpcl.do_if.p u64 
    param          mm_blockpcl.do_if.a u64 
    param          mm_blockpcl.do_if.b u64 
    param          mm_blockpcl.do_if.c u64 
    param          mm_blockpcl.do_if.isref i64 
    local          mm_blockpcl.do_if.lab1 i64 
    local          mm_blockpcl.do_if.lab2 i64 
    local          mm_blockpcl.do_if.ismult i64 
    procentry                 
    push           mm_blockpcl.do_if.p u64 
    push           48         
    pushptroff                i32 1 0
    push           0          i64 
    setne                     i64 
    pop            mm_blockpcl.do_if.ismult i64 
    push           mm_blockpcl.do_if.ismult i64 
    jumpfalse      #19534     i64 
    setargs                   2 0
    push           0          u64 
    push           191        i64 
    callproc       &pc_libpcl.pcl_gen 
#19534: 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_if.lab1 i64 
    setargs                   3 0
    push           mm_blockpcl.do_if.lab1 i64 
    push           mm_blockpcl.do_if.a u64 
    push           0          i64 
    callproc       &mm_blockpcl.docond 
    setargs                   2 0
    push           mm_blockpcl.do_if.isref i64 
    push           mm_blockpcl.do_if.b u64 
    callproc       &mm_blockpcl.evalunitx 
    push           mm_blockpcl.do_if.ismult i64 
    jumpfalse      #19535     i64 
    setargs                   2 0
    push           0          u64 
    push           192        i64 
    callproc       &pc_libpcl.pcl_gen 
#19535: 
    push           mm_blockpcl.do_if.c u64 
    jumpfalse      #19536     u64 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_if.lab2 i64 
    setargs                   1 0
    push           mm_blockpcl.do_if.lab2 i64 
    callproc       &mm_blockpcl.genjumpl 
    setargs                   1 0
    push           mm_blockpcl.do_if.lab1 i64 
    callproc       &mm_genpcl.definefwdlabel 
    setargs                   2 0
    push           mm_blockpcl.do_if.isref i64 
    push           mm_blockpcl.do_if.c u64 
    callproc       &mm_blockpcl.evalunitx 
    push           mm_blockpcl.do_if.ismult i64 
    jumpfalse      #19537     i64 
    setargs                   2 0
    push           0          u64 
    push           193        i64 
    callproc       &pc_libpcl.pcl_gen 
#19537: 
    setargs                   1 0
    push           mm_blockpcl.do_if.lab2 i64 
    callproc       &mm_genpcl.definefwdlabel 
    jump           #19538     
#19536: 
    setargs                   1 0
    push           mm_blockpcl.do_if.lab1 i64 
    callproc       &mm_genpcl.definefwdlabel 
#19538: 
#19539: 
    retproc                   
End


Proc mm_blockpcl.do_longif:
    param          mm_blockpcl.do_longif.p u64 
    param          mm_blockpcl.do_longif.a u64 
    param          mm_blockpcl.do_longif.b u64 
    param          mm_blockpcl.do_longif.isref i64 
    local          mm_blockpcl.do_longif.labend i64 
    local          mm_blockpcl.do_longif.i i64 
    local          mm_blockpcl.do_longif.lab2 i64 
    local          mm_blockpcl.do_longif.ismult i64 
    local          mm_blockpcl.do_longif.pcond u64 
    procentry                 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_longif.labend i64 
    push           mm_blockpcl.do_longif.p u64 
    push           48         
    pushptroff                i32 1 0
    push           0          i64 
    setne                     i64 
    pop            mm_blockpcl.do_longif.ismult i64 
    push           mm_blockpcl.do_longif.a u64 
    pop            mm_blockpcl.do_longif.pcond u64 
    push           0          i64 
    pop            mm_blockpcl.do_longif.i i64 
    push           mm_blockpcl.do_longif.ismult i64 
    jumpfalse      #19541     i64 
    setargs                   2 0
    push           0          u64 
    push           191        i64 
    callproc       &pc_libpcl.pcl_gen 
#19541: 
    jump           #19542     
#19543: 
    push           &mm_blockpcl.do_longif.i 
    incr                      i64 1
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_longif.lab2 i64 
    setargs                   3 0
    push           mm_blockpcl.do_longif.lab2 i64 
    push           mm_blockpcl.do_longif.pcond u64 
    push           16         
    pushptroff                u64 1 0
    push           0          i64 
    callproc       &mm_blockpcl.docond 
    setargs                   2 0
    push           mm_blockpcl.do_longif.isref i64 
    push           mm_blockpcl.do_longif.pcond u64 
    push           24         
    pushptroff                u64 1 0
    callproc       &mm_blockpcl.evalunitx 
    push           mm_blockpcl.do_longif.ismult i64 
    jumpfalse      #19544     i64 
    setargs                   2 0
    push           0          u64 
    push           192        i64 
    callproc       &pc_libpcl.pcl_gen 
#19544: 
    push           mm_blockpcl.do_longif.pcond u64 
    push           8          
    pushptroff                u64 1 0
    jumptrue       #19545     u64 
    push           mm_blockpcl.do_longif.b u64 
    jumpfalse      #19546     u64 
#19545: 
    setargs                   1 0
    push           mm_blockpcl.do_longif.labend i64 
    callproc       &mm_blockpcl.genjumpl 
#19546: 
    setargs                   1 0
    push           mm_blockpcl.do_longif.lab2 i64 
    callproc       &mm_genpcl.definefwdlabel 
    push           mm_blockpcl.do_longif.pcond u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_longif.pcond u64 
#19542: 
    push           mm_blockpcl.do_longif.pcond u64 
    jumptrue       #19543     u64 
#19547: 
    push           mm_blockpcl.do_longif.b u64 
    jumpfalse      #19548     u64 
    setargs                   2 0
    push           mm_blockpcl.do_longif.isref i64 
    push           mm_blockpcl.do_longif.b u64 
    callproc       &mm_blockpcl.evalunitx 
    push           mm_blockpcl.do_longif.ismult i64 
    jumpfalse      #19549     i64 
    setargs                   2 0
    push           0          u64 
    push           193        i64 
    callproc       &pc_libpcl.pcl_gen 
#19549: 
#19548: 
    setargs                   1 0
    push           mm_blockpcl.do_longif.labend i64 
    callproc       &mm_genpcl.definefwdlabel 
#19550: 
    retproc                   
End


Proc mm_blockpcl.do_return:
    param          mm_blockpcl.do_return.p u64 
    param          mm_blockpcl.do_return.a u64 
    procentry                 
    push           mm_blockpcl.do_return.a u64 
    jumpfalse      #19552     u64 
    setargs                   1 0
    push           mm_blockpcl.do_return.a u64 
    callproc       &mm_blockpcl.evalunit 
    push           &mm_decls.ttbasetype 
    push           mm_blockpcl.do_return.p u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           12         i64 
    setjumpeq      #19553     i64 
    push           5          i64 
    setjumpeq      #19553     i64 
    push           3          i64 
    setjumpne      #19554     i64 
#19553: 
    setargs                   3 0
    push           0          u64 
    push           2          i64 
    push           195        i64 
    callproc       &pc_libpcl.pcl_genx 
    jump           #19555     
#19554: 
    setargs                   2 0
    push           0          u64 
    push           194        i64 
    callproc       &pc_libpcl.pcl_gen 
#19555: 
    setargs                   1 0
    push           mm_blockpcl.do_return.a u64 
    callproc       &mm_genpcl.setmode_u 
#19552: 
    setargs                   1 0
    push           mm_genpcl.retindex i64 
    callproc       &mm_blockpcl.genjumpl 
#19556: 
    retproc                   
End


Proc mm_blockpcl.do_returnmult:
    param          mm_blockpcl.do_returnmult.p u64 
    param          mm_blockpcl.do_returnmult.a u64 
    local          mm_blockpcl.do_returnmult.params block:800 
    local          mm_blockpcl.do_returnmult.q u64 
    local          mm_blockpcl.do_returnmult.nparams i64 
    local          mm_blockpcl.do_returnmult.i i64 
    procentry                 
    push           mm_blockpcl.do_returnmult.a u64 
    pop            mm_blockpcl.do_returnmult.q u64 
    push           0          i64 
    pop            mm_blockpcl.do_returnmult.nparams i64 
    jump           #19558     
#19559: 
    push           mm_blockpcl.do_returnmult.nparams i64 
    push           100        i64 
    jumplt         #19560     i64 
    setargs                   2 0
    push           0          u64 
    push           "Mult?"    u64 
    callproc       &mm_support.gerror 
#19560: 
    push           mm_blockpcl.do_returnmult.q u64 
    push           &mm_blockpcl.do_returnmult.params 
    push           &mm_blockpcl.do_returnmult.nparams 
    incrload                  i64 1
    popptroff                 u64 8 -8
    push           mm_blockpcl.do_returnmult.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_returnmult.q u64 
#19558: 
    push           mm_blockpcl.do_returnmult.q u64 
    jumptrue       #19559     u64 
#19561: 
#19562: 
    push           mm_blockpcl.do_returnmult.nparams i64 
    pop            mm_blockpcl.do_returnmult.i i64 
    push           mm_blockpcl.do_returnmult.i i64 
    push           1          i64 
    jumplt         #19563     i64 
#19564: 
    setargs                   1 0
    push           &mm_blockpcl.do_returnmult.params 
    push           mm_blockpcl.do_returnmult.i i64 
    pushptroff                u64 8 -8
    callproc       &mm_blockpcl.evalunit 
#19565: 
    fordown        #19564     i64 1
    opnd           mm_blockpcl.do_returnmult.i 
    opnd           1          
#19563: 
    setargs                   3 0
    push           0          u64 
    push           mm_blockpcl.do_returnmult.nparams i64 
    push           195        i64 
    callproc       &pc_libpcl.pcl_genx 
    setargs                   1 0
    push           mm_genpcl.retindex i64 
    callproc       &mm_blockpcl.genjumpl 
    push           1          i64 
    push           mm_blockpcl.do_returnmult.p u64 
    push           59         
    popptroff                 u8 1 0
#19566: 
    retproc                   
End


Proc mm_blockpcl.do_callproc:
    param          mm_blockpcl.do_callproc.p u64 
    param          mm_blockpcl.do_callproc.a u64 
    param          mm_blockpcl.do_callproc.b u64 
    param          mm_blockpcl.do_callproc.isfn i64 
    local          mm_blockpcl.do_callproc.paramlist block:800 
    local          mm_blockpcl.do_callproc.nparams i64 
    local          mm_blockpcl.do_callproc.nmult i64 
    local          mm_blockpcl.do_callproc.ffi i64 
    local          mm_blockpcl.do_callproc.isptr i64 
    local          mm_blockpcl.do_callproc.nslots i64 
    local          mm_blockpcl.do_callproc.nvariadics i64 
    local          mm_blockpcl.do_callproc.blockret i64 
    local          mm_blockpcl.do_callproc.nret i64 
    local          mm_blockpcl.do_callproc.d u64 
    local          mm_blockpcl.do_callproc.dtemp u64 
    local          mm_blockpcl.do_callproc.pmult u64 
    local          mm_blockpcl.do_callproc.q u64 
    local          mm_blockpcl.do_callproc.i i64 
    procentry                 
    push           0          i64 
    pop            mm_blockpcl.do_callproc.isptr i64 
    push           mm_blockpcl.do_callproc.a u64 
    pushptr                   u8 
    push           3          i64 
    casejumpeq     #19568     i64 0
    push           57         i64 
    casejumpeq     #19569     i64 0
    popstack                  i64 
    jump           #19570     
#19568: 
    push           mm_blockpcl.do_callproc.a u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_callproc.d u64 
    jump           #19571     
#19569: 
    push           &mm_decls.ttnamedef 
    push           mm_blockpcl.do_callproc.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                u64 8 0
    pop            mm_blockpcl.do_callproc.d u64 
    push           1          i64 
    pop            mm_blockpcl.do_callproc.isptr i64 
    jump           #19571     
#19570: 
    setargs                   2 0
    push           0          u64 
    push           "call/not ptr" u64 
    callproc       &mm_support.gerror 
#19571: 
    push           0          i64 
    pop            mm_blockpcl.do_callproc.nparams i64 
    push           0          i64 
    pop            mm_blockpcl.do_callproc.nslots i64 
    push           0          i64 
    pop            mm_blockpcl.do_callproc.nvariadics i64 
    push           0          i64 
    pop            mm_blockpcl.do_callproc.blockret i64 
    push           0          i64 
    pop            mm_blockpcl.do_callproc.ffi i64 
    push           mm_blockpcl.do_callproc.d u64 
    push           115        
    pushptroff                u8 1 0
    push           2          i64 
    setjumpeq      #19572     i64 
    push           1          i64 
    setjumpne      #19573     i64 
#19572: 
    push           1          i64 
    pop            mm_blockpcl.do_callproc.ffi i64 
#19573: 
    push           mm_blockpcl.do_callproc.b u64 
    pop            mm_blockpcl.do_callproc.q u64 
    jump           #19574     
#19575: 
    push           &mm_blockpcl.do_callproc.nslots 
    incr                      i64 1
    push           mm_blockpcl.do_callproc.nparams i64 
    push           100        i64 
    jumplt         #19576     i64 
    setargs                   2 0
    push           0          u64 
    push           "maxparams" u64 
    callproc       &mm_support.gerror 
#19576: 
    push           mm_blockpcl.do_callproc.q u64 
    push           &mm_blockpcl.do_callproc.paramlist 
    push           &mm_blockpcl.do_callproc.nparams 
    incrload                  i64 1
    popptroff                 u64 8 -8
    push           mm_blockpcl.do_callproc.ffi i64 
    jumpfalse      #19577     i64 
    push           mm_blockpcl.do_callproc.d u64 
    push           117        
    pushptroff                u8 1 0
    jumpfalse      #19577     i64 
    push           mm_blockpcl.do_callproc.nparams i64 
    push           mm_blockpcl.do_callproc.d u64 
    push           117        
    pushptroff                u8 1 0
    jumplt         #19577     i64 
    push           mm_blockpcl.do_callproc.nparams i64 
    push           4          i64 
    jumpgt         #19577     i64 
    push           mm_blockpcl.do_callproc.nvariadics i64 
    push           0          i64 
    jumpne         #19577     i64 
    push           mm_blockpcl.do_callproc.nparams i64 
    pop            mm_blockpcl.do_callproc.nvariadics i64 
#19577: 
    push           &mm_decls.ttbasetype 
    push           mm_blockpcl.do_callproc.q u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           12         i64 
    setjumpeq      #19578     i64 
    push           5          i64 
    setjumpeq      #19578     i64 
    push           3          i64 
    setjumpne      #19579     i64 
#19578: 
    push           &mm_blockpcl.do_callproc.nslots 
    incr                      i64 1
#19579: 
    push           mm_blockpcl.do_callproc.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_callproc.q u64 
#19574: 
    push           mm_blockpcl.do_callproc.q u64 
    jumptrue       #19575     u64 
#19580: 
    setargs                   2 0
    push           0          u64 
    push           196        i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.do_callproc.nslots i64 
    callproc       &pc_libpcl.pcl_setnargs 
    setargs                   1 0
    push           mm_blockpcl.do_callproc.nvariadics i64 
    callproc       &pc_libpcl.pcl_setnvariadics 
#19581: 
    push           mm_blockpcl.do_callproc.nparams i64 
    pop            mm_blockpcl.do_callproc.i i64 
    push           mm_blockpcl.do_callproc.i i64 
    push           1          i64 
    jumplt         #19582     i64 
#19583: 
    setargs                   1 0
    push           &mm_blockpcl.do_callproc.paramlist 
    push           mm_blockpcl.do_callproc.i i64 
    pushptroff                u64 8 -8
    callproc       &mm_blockpcl.evalunit 
#19584: 
    fordown        #19583     i64 1
    opnd           mm_blockpcl.do_callproc.i 
    opnd           1          
#19582: 
    push           mm_blockpcl.do_callproc.isptr i64 
    jumptrue       #19585     i64 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.do_callproc.d u64 
    callfn         &mm_genpcl.genmemaddr_d u64 
    startmult                 
    push           mm_blockpcl.do_callproc.isfn i64 
    jumpfalse      #19586     i64 
    push           47         i64 
    resetmult                 
    jump           #19587     
#19586: 
    push           44         i64 
    endmult                   
#19587: 
    callproc       &pc_libpcl.pcl_gen 
    jump           #19588     
#19585: 
    setargs                   1 0
    push           mm_blockpcl.do_callproc.a u64 
    push           16         
    pushptroff                u64 1 0
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    push           0          u64 
    startmult                 
    push           mm_blockpcl.do_callproc.isfn i64 
    jumpfalse      #19589     i64 
    push           48         i64 
    resetmult                 
    jump           #19590     
#19589: 
    push           45         i64 
    endmult                   
#19590: 
    callproc       &pc_libpcl.pcl_gen 
#19588: 
    push           mm_blockpcl.do_callproc.isfn i64 
    jumpfalse      #19591     i64 
    setargs                   1 0
    setargs                   1 0
    push           mm_blockpcl.do_callproc.p u64 
    callfn         &mm_lib.getmemmode i64 
    callproc       &mm_genpcl.setmode 
#19591: 
    push           mm_blockpcl.do_callproc.d u64 
    push           116        
    pushptroff                u8 1 0
    push           1          i64 
    jumple         #19592     i64 
    push           mm_blockpcl.do_callproc.d u64 
    push           116        
    pushptroff                u8 1 0
    pop            mm_blockpcl.do_callproc.nret i64 
    push           &mm_decls.ttmult 
    push           mm_blockpcl.do_callproc.d u64 
    push           72         
    pushptroff                i32 1 0
    pushptroff                u64 8 0
    pop            mm_blockpcl.do_callproc.pmult u64 
#19593: 
    push           1          i64 
    pop            mm_blockpcl.do_callproc.i i64 
    push           mm_blockpcl.do_callproc.nret i64 
    push           1          i64 
    jumplt         #19594     i64 
#19595: 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           mm_blockpcl.do_callproc.pmult u64 
    push           mm_blockpcl.do_callproc.i i64 
    pushptroff                i32 4 -4
    callfn         &mm_lib.getpclmode i64 
    push           27         i64 
    callproc       &pc_libpcl.pcl_gent 
#19596: 
    forup          #19595     i64 1
    opnd           mm_blockpcl.do_callproc.i 
    opnd           mm_blockpcl.do_callproc.nret 
#19594: 
#19592: 
#19597: 
    retproc                   
End


Proc mm_blockpcl.do_print:
    param          mm_blockpcl.do_print.p u64 
    param          mm_blockpcl.do_print.a u64 
    param          mm_blockpcl.do_print.b u64 
    local          mm_blockpcl.do_print.q u64 
    local          mm_blockpcl.do_print.r u64 
    local          mm_blockpcl.do_print.fmt u64 
    local          mm_blockpcl.do_print.m i64 
    local          mm_blockpcl.do_print.fn i64 
    local          mm_blockpcl.do_print.needprintend i64 
    procentry                 
    push           mm_blockpcl.do_print.a u64 
    jumpfalse      #19599     u64 
    push           1          i64 
    pop            mm_blockpcl.do_print.needprintend i64 
    push           &mm_decls.ttbasetype 
    push           mm_blockpcl.do_print.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           9          i64 
    jumpeq         #19600     i64 
    setargs                   2 0
    push           0          u64 
    push           "@dev no ref" u64 
    callproc       &mm_support.gerror 
#19600: 
    push           &mm_decls.ttbasetype 
    push           &mm_decls.tttarget 
    push           mm_blockpcl.do_print.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    pushptroff                i32 4 0
    push           0          i64 
    casejumpeq     #19601     i64 0
    push           16         i64 
    casejumpeq     #19602     i64 0
    push           9          i64 
    casejumpeq     #19603     i64 0
    popstack                  i64 
    jump           #19604     
#19601: 
    setargs                   5 0
    push           0          i64 
    push           0          u64 
    push           0          u64 
    push           mm_blockpcl.do_print.a u64 
    push           2          i64 
    callproc       &mm_genpcl.pcl_gen_sysproc 
    jump           #19605     
#19602: 
    setargs                   5 0
    push           0          i64 
    push           0          u64 
    push           0          u64 
    push           mm_blockpcl.do_print.a u64 
    push           3          i64 
    callproc       &mm_genpcl.pcl_gen_sysproc 
    jump           #19605     
#19603: 
    setargs                   5 0
    push           0          i64 
    push           0          u64 
    push           0          u64 
    push           mm_blockpcl.do_print.a u64 
    push           4          i64 
    callproc       &mm_genpcl.pcl_gen_sysproc 
    jump           #19605     
#19604: 
    setargs                   2 0
    push           0          u64 
    push           "@dev?"    u64 
    callproc       &mm_support.gerror 
#19605: 
    jump           #19606     
#19599: 
    push           1          i64 
    pop            mm_blockpcl.do_print.needprintend i64 
    setargs                   5 0
    push           0          i64 
    push           0          u64 
    push           0          u64 
    push           0          u64 
    push           5          i64 
    callproc       &mm_genpcl.pcl_gen_sysproc 
#19606: 
    push           mm_blockpcl.do_print.b u64 
    pop            mm_blockpcl.do_print.q u64 
    push           mm_blockpcl.do_print.p u64 
    pushptr                   u8 
    push           124        i64 
    casejumpeq     #19607     i64 0
    push           125        i64 
    casejumpeq     #19607     i64 0
    popstack                  i64 
    jump           #19608     
#19607: 
    push           &mm_decls.ttbasetype 
    push           mm_blockpcl.do_print.q u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           9          i64 
    jumpne         #19609     i64 
    push           &mm_decls.ttbasetype 
    push           &mm_decls.tttarget 
    push           mm_blockpcl.do_print.q u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    pushptroff                i32 4 0
    push           16         i64 
    jumpeq         #19610     i64 
#19609: 
    setargs                   2 0
    push           0          u64 
    push           "string expected" u64 
    callproc       &mm_support.gerror 
#19610: 
    setargs                   5 0
    push           0          i64 
    push           0          u64 
    push           0          u64 
    push           mm_blockpcl.do_print.q u64 
    push           6          i64 
    callproc       &mm_genpcl.pcl_gen_sysproc 
    push           mm_blockpcl.do_print.p u64 
    push           32         
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_print.q u64 
    jump           #19611     
#19608: 
#19611: 
    jump           #19612     
#19613: 
    push           mm_blockpcl.do_print.q u64 
    pushptr                   u8 
    push           93         i64 
    casejumpeq     #19614     i64 0
    push           94         i64 
    casejumpeq     #19615     i64 0
    push           95         i64 
    casejumpeq     #19616     i64 0
    popstack                  i64 
    jump           #19617     
#19614: 
    push           mm_blockpcl.do_print.q u64 
    push           24         
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_print.fmt u64 
    push           mm_blockpcl.do_print.q u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_print.r u64 
    push           mm_blockpcl.do_print.r u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_blockpcl.do_print.m i64 
    jump           #19618     
#19615: 
    setargs                   5 0
    push           0          i64 
    push           0          u64 
    push           0          u64 
    push           0          u64 
    push           7          i64 
    callproc       &mm_genpcl.pcl_gen_sysproc 
    push           mm_blockpcl.do_print.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_print.q u64 
    jump           #19612     
    jump           #19618     
#19616: 
    setargs                   5 0
    push           0          i64 
    push           0          u64 
    push           0          u64 
    push           0          u64 
    push           8          i64 
    callproc       &mm_genpcl.pcl_gen_sysproc 
    push           mm_blockpcl.do_print.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_print.q u64 
    jump           #19612     
    jump           #19618     
#19617: 
    push           0          u64 
    pop            mm_blockpcl.do_print.fmt u64 
    push           mm_blockpcl.do_print.q u64 
    pop            mm_blockpcl.do_print.r u64 
    push           mm_blockpcl.do_print.q u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_blockpcl.do_print.m i64 
#19618: 
    push           &mm_decls.ttbasetype 
    push           mm_blockpcl.do_print.m i64 
    pushptroff                i32 4 0
    switch         #19619     1 13
    opnd           #19620     
#19619: 
    switchlabel    #19621     
    switchlabel    #19622     
    switchlabel    #19623     
    switchlabel    #19624     
    switchlabel    #19625     
    switchlabel    #19626     
    switchlabel    #19627     
    switchlabel    #19620     
    switchlabel    #19628     
    switchlabel    #19620     
    switchlabel    #19629     
    switchlabel    #19630     
    switchlabel    #19631     
    endswitch                 
#19624: 
    push           9          i64 
    pop            mm_blockpcl.do_print.fn i64 
    push           mm_blockpcl.do_print.fmt u64 
    jumptrue       #19632     u64 
    push           10         i64 
    pop            mm_blockpcl.do_print.fn i64 
#19632: 
    jump           #19633     
#19622: 
    push           11         i64 
    pop            mm_blockpcl.do_print.fn i64 
    jump           #19633     
#19626: 
    push           13         i64 
    pop            mm_blockpcl.do_print.fn i64 
    jump           #19633     
#19627: 
    push           12         i64 
    pop            mm_blockpcl.do_print.fn i64 
    jump           #19633     
#19625: 
    push           14         i64 
    pop            mm_blockpcl.do_print.fn i64 
    jump           #19633     
#19623: 
    push           15         i64 
    pop            mm_blockpcl.do_print.fn i64 
    jump           #19633     
#19628: 
    push           &mm_decls.tttarget 
    push           mm_blockpcl.do_print.m i64 
    pushptroff                i32 4 0
    push           16         i64 
    jumpeq         #19634     i64 
    push           &mm_decls.tttarget 
    push           mm_blockpcl.do_print.m i64 
    pushptroff                i32 4 0
    push           11         i64 
    jumpne         #19635     i64 
    push           &mm_decls.tttarget 
    push           &mm_decls.tttarget 
    push           mm_blockpcl.do_print.m i64 
    pushptroff                i32 4 0
    pushptroff                i32 4 0
    push           16         i64 
    jumpne         #19635     i64 
#19634: 
    push           16         i64 
    pop            mm_blockpcl.do_print.fn i64 
    push           mm_blockpcl.do_print.fmt u64 
    jumptrue       #19636     u64 
    push           17         i64 
    pop            mm_blockpcl.do_print.fn i64 
#19636: 
    jump           #19637     
#19635: 
    push           19         i64 
    pop            mm_blockpcl.do_print.fn i64 
    push           mm_blockpcl.do_print.fmt u64 
    jumptrue       #19638     u64 
    push           20         i64 
    pop            mm_blockpcl.do_print.fn i64 
#19638: 
#19637: 
    jump           #19633     
#19629: 
    setargs                   2 0
    push           0          u64 
    push           "PRINTARRAY" u64 
    callproc       &mm_support.gerror 
    push           mm_blockpcl.do_print.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_print.q u64 
    jump           #19633     
#19631: 
    setargs                   2 0
    push           0          u64 
    push           "PRINTRECORD" u64 
    callproc       &mm_support.gerror 
    jump           #19633     
#19630: 
    push           &mm_decls.tttarget 
    push           mm_blockpcl.do_print.m i64 
    pushptroff                i32 4 0
    push           16         i64 
    jumpne         #19639     i64 
    push           18         i64 
    pop            mm_blockpcl.do_print.fn i64 
    jump           #19640     
#19639: 
    setargs                   2 0
    push           0          u64 
    push           "PRINTSLICE" u64 
    callproc       &mm_support.gerror 
#19640: 
    jump           #19633     
#19621: 
    push           21         i64 
    pop            mm_blockpcl.do_print.fn i64 
    jump           #19633     
#19620: 
    setargs                   3 0
    push           0          u64 
    setargs                   2 0
    push           1          i64 
    push           mm_blockpcl.do_print.m i64 
    callfn         &mm_lib.strmode u64 
    push           "PRINT/T=#" u64 
    callproc       &mm_support.gerror_s 
#19633: 
    push           mm_blockpcl.do_print.fn i64 
    push           10         i64 
    casejumpeq     #19641     i64 0
    push           17         i64 
    casejumpeq     #19641     i64 0
    push           20         i64 
    casejumpeq     #19641     i64 0
    popstack                  i64 
    jump           #19642     
#19641: 
    setargs                   5 0
    push           0          i64 
    push           0          u64 
    push           0          u64 
    push           mm_blockpcl.do_print.r u64 
    push           mm_blockpcl.do_print.fn i64 
    callproc       &mm_genpcl.pcl_gen_sysproc 
    jump           #19643     
#19642: 
    setargs                   5 0
    push           0          i64 
    push           0          u64 
    startmult                 
    push           mm_blockpcl.do_print.fmt u64 
    jumpfalse      #19644     u64 
    push           mm_blockpcl.do_print.fmt u64 
    resetmult                 
    jump           #19645     
#19644: 
    push           mm_genpcl.pzero u64 
    endmult                   
#19645: 
    push           mm_blockpcl.do_print.r u64 
    push           mm_blockpcl.do_print.fn i64 
    callproc       &mm_genpcl.pcl_gen_sysproc 
#19643: 
    push           mm_blockpcl.do_print.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_print.q u64 
#19612: 
    push           mm_blockpcl.do_print.q u64 
    jumptrue       #19613     u64 
#19646: 
    push           mm_blockpcl.do_print.p u64 
    pushptr                   u8 
    push           123        i64 
    casejumpeq     #19647     i64 0
    push           125        i64 
    casejumpeq     #19647     i64 0
    popstack                  i64 
    jump           #19648     
#19647: 
    setargs                   5 0
    push           0          i64 
    push           0          u64 
    push           0          u64 
    push           0          u64 
    push           22         i64 
    callproc       &mm_genpcl.pcl_gen_sysproc 
    jump           #19649     
#19648: 
#19649: 
    push           mm_blockpcl.do_print.needprintend i64 
    jumpfalse      #19650     i64 
    setargs                   5 0
    push           0          i64 
    push           0          u64 
    push           0          u64 
    push           0          u64 
    push           23         i64 
    callproc       &mm_genpcl.pcl_gen_sysproc 
#19650: 
#19651: 
    retproc                   
End


Proc mm_blockpcl.do_incr:
    param          mm_blockpcl.do_incr.p u64 
    param          mm_blockpcl.do_incr.a u64 
    procentry                 
    setargs                   1 0
    push           mm_blockpcl.do_incr.a u64 
    callproc       &mm_blockpcl.evallv 
    setargs                   2 0
    push           0          u64 
    push           mm_blockpcl.do_incr.p u64 
    push           60         
    pushptroff                u8 1 0
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.do_incr.a u64 
    callproc       &mm_genpcl.setmode_u 
    setargs                   1 0
    push           mm_blockpcl.do_incr.a u64 
    push           48         
    pushptroff                i32 1 0
    callproc       &mm_blockpcl.setincrstep 
#19653: 
    retproc                   
End


Proc mm_blockpcl.setincrstep:
    param          mm_blockpcl.setincrstep.m i64 
    procentry                 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_libpcl.pcl_setincr 
    push           &mm_decls.ttisref 
    push           mm_blockpcl.setincrstep.m i64 
    pushptroff                u8 1 0
    jumpfalse      #19655     i64 
    setargs                   1 0
    push           &mm_decls.ttsize 
    push           &mm_decls.tttarget 
    push           mm_blockpcl.setincrstep.m i64 
    pushptroff                i32 4 0
    pushptroff                i32 4 0
    callproc       &pc_libpcl.pcl_setincr 
#19655: 
#19656: 
    retproc                   
End


Proc mm_blockpcl.do_incrload:
    param          mm_blockpcl.do_incrload.p u64 
    param          mm_blockpcl.do_incrload.a u64 
    procentry                 
    setargs                   1 0
    push           mm_blockpcl.do_incrload.a u64 
    callproc       &mm_blockpcl.evallv 
    setargs                   2 0
    push           0          u64 
    push           mm_blockpcl.do_incrload.p u64 
    push           60         
    pushptroff                u8 1 0
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.do_incrload.a u64 
    callproc       &mm_genpcl.setmode_u 
    setargs                   1 0
    push           mm_blockpcl.do_incrload.a u64 
    push           48         
    pushptroff                i32 1 0
    callproc       &mm_blockpcl.setincrstep 
#19658: 
    retproc                   
End


Proc mm_blockpcl.do_for:
    param          mm_blockpcl.do_for.p u64 
    param          mm_blockpcl.do_for.pindex u64 
    param          mm_blockpcl.do_for.pfrom u64 
    param          mm_blockpcl.do_for.pbody u64 
    param          mm_blockpcl.do_for.down i64 
    local          mm_blockpcl.do_for.pto u64 
    local          mm_blockpcl.do_for.pstep u64 
    local          mm_blockpcl.do_for.pelse u64 
    local          mm_blockpcl.do_for.px u64 
    local          mm_blockpcl.do_for.plimit u64 
    local          mm_blockpcl.do_for.ptoinit u64 
    local          mm_blockpcl.do_for.lab_a i64 
    local          mm_blockpcl.do_for.lab_b i64 
    local          mm_blockpcl.do_for.lab_c i64 
    local          mm_blockpcl.do_for.lab_d i64 
    local          mm_blockpcl.do_for.lab_e i64 
    local          mm_blockpcl.do_for.a i64 
    local          mm_blockpcl.do_for.b i64 
    local          mm_blockpcl.do_for.stepx i64 
    local          mm_blockpcl.do_for.d u64 
    procentry                 
    push           mm_blockpcl.do_for.pfrom u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_for.pto u64 
    push           mm_blockpcl.do_for.pto u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_for.pstep u64 
    push           mm_blockpcl.do_for.pbody u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_for.pelse u64 
    push           mm_blockpcl.do_for.pindex u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_for.ptoinit u64 
    push           mm_blockpcl.do_for.pto u64 
    pushptr                   u8 
    push           57         i64 
    jumpne         #19660     i64 
    push           mm_blockpcl.do_for.pto u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_for.px u64 
    push           mm_blockpcl.do_for.px u64 
    pushptr                   u8 
    push           3          i64 
    jumpne         #19661     i64 
    push           mm_blockpcl.do_for.px u64 
    push           16         
    pushptroff                u64 1 0
    store          mm_blockpcl.do_for.d u64 
    push           78         
    pushptroff                u8 1 0
    push           13         i64 
    jumpne         #19661     i64 
    push           mm_blockpcl.do_for.d u64 
    push           104        
    pushptroff                u8 1 0
    push           2          i64 
    jumpne         #19661     i64 
    setargs                   2 0
    push           0          u64 
    push           "Possibly using &param as for-loop limit" u64 
    callproc       &mm_support.gerror 
#19661: 
#19660: 
    setargs                   0 0
    callfn         &mm_genpcl.definelabel i64 
    pop            mm_blockpcl.do_for.lab_a i64 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_for.lab_b i64 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_for.lab_c i64 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_for.lab_d i64 
    push           mm_blockpcl.do_for.pelse u64 
    jumpfalse      #19662     u64 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_for.lab_e i64 
    jump           #19663     
#19662: 
    push           mm_blockpcl.do_for.lab_d i64 
    pop            mm_blockpcl.do_for.lab_e i64 
#19663: 
    setargs                   4 0
    push           mm_blockpcl.do_for.lab_d i64 
    push           mm_blockpcl.do_for.lab_c i64 
    push           mm_blockpcl.do_for.lab_b i64 
    push           mm_blockpcl.do_for.lab_a i64 
    callproc       &mm_genpcl.stacklooplabels 
    setargs                   1 0
    push           mm_blockpcl.do_for.pfrom u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.do_for.pindex u64 
    callfn         &mm_genpcl.genmem_u u64 
    push           22         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.do_for.pindex u64 
    callproc       &mm_genpcl.setmode_u 
    push           mm_blockpcl.do_for.ptoinit u64 
    jumpfalse      #19664     u64 
    push           0          i64 
    push           mm_blockpcl.do_for.ptoinit u64 
    push           59         
    popptroff                 u8 1 0
    setargs                   1 0
    push           mm_blockpcl.do_for.ptoinit u64 
    callproc       &mm_blockpcl.evalunit 
#19664: 
    push           mm_blockpcl.do_for.pfrom u64 
    pushptr                   u8 
    push           1          i64 
    jumpne         #19665     i64 
    push           mm_blockpcl.do_for.pto u64 
    pushptr                   u8 
    push           1          i64 
    jumpne         #19665     i64 
    push           mm_blockpcl.do_for.pfrom u64 
    push           16         
    pushptroff                i64 1 0
    pop            mm_blockpcl.do_for.a i64 
    push           mm_blockpcl.do_for.pto u64 
    push           16         
    pushptroff                i64 1 0
    pop            mm_blockpcl.do_for.b i64 
    push           mm_blockpcl.do_for.down i64 
    jumpfalse      #19666     i64 
    push           mm_blockpcl.do_for.a i64 
    push           mm_blockpcl.do_for.b i64 
    jumpge         #19667     i64 
#19666: 
    push           mm_blockpcl.do_for.down i64 
    jumptrue       #19668     i64 
    push           mm_blockpcl.do_for.a i64 
    push           mm_blockpcl.do_for.b i64 
    jumpgt         #19668     i64 
#19667: 
    jump           #19669     
#19668: 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.do_for.lab_e i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    push           50         i64 
    callproc       &pc_libpcl.pcl_gen 
#19669: 
    jump           #19670     
#19665: 
    push           mm_blockpcl.do_for.pfrom u64 
    pushptr                   u8 
    push           1          i64 
    jumpne         #19671     i64 
    setargs                   1 0
    push           mm_blockpcl.do_for.pto u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   1 0
    push           mm_blockpcl.do_for.pfrom u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.do_for.lab_e i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    startmult                 
    push           mm_blockpcl.do_for.down i64 
    jumpfalse      #19672     i64 
    push           57         i64 
    resetmult                 
    jump           #19673     
#19672: 
    push           54         i64 
    endmult                   
#19673: 
    callproc       &pc_libpcl.pcl_gen 
    jump           #19674     
#19671: 
    setargs                   1 0
    push           mm_blockpcl.do_for.pindex u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   1 0
    push           mm_blockpcl.do_for.pto u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.do_for.lab_e i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    startmult                 
    push           mm_blockpcl.do_for.down i64 
    jumpfalse      #19675     i64 
    push           54         i64 
    resetmult                 
    jump           #19676     
#19675: 
    push           57         i64 
    endmult                   
#19676: 
    callproc       &pc_libpcl.pcl_gen 
#19674: 
    setargs                   1 0
    push           mm_blockpcl.do_for.pindex u64 
    callproc       &mm_genpcl.setmode_u 
#19670: 
    setargs                   1 0
    push           mm_blockpcl.do_for.lab_b i64 
    callproc       &mm_genpcl.definefwdlabel 
    setargs                   1 0
    push           mm_blockpcl.do_for.pbody u64 
    callproc       &mm_blockpcl.evalblock 
    setargs                   1 0
    push           mm_blockpcl.do_for.lab_c i64 
    callproc       &mm_genpcl.definefwdlabel 
    push           mm_blockpcl.do_for.pstep u64 
    jumpfalse      #19677     u64 
    push           mm_blockpcl.do_for.pstep u64 
    pushptr                   u8 
    push           1          i64 
    jumpeq         #19678     i64 
    setargs                   2 0
    push           0          u64 
    push           "for/step non-const not ready" u64 
    callproc       &mm_support.gerror 
#19678: 
    push           mm_blockpcl.do_for.pstep u64 
    push           16         
    pushptroff                i64 1 0
    pop            mm_blockpcl.do_for.stepx i64 
    push           mm_blockpcl.do_for.stepx i64 
    push           0          i64 
    jumpgt         #19679     i64 
    setargs                   2 0
    push           0          u64 
    push           "Bad for-step" u64 
    callproc       &mm_support.gerror 
#19679: 
    setargs                   3 0
    setargs                   1 0
    push           mm_blockpcl.do_for.lab_b i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    push           mm_blockpcl.do_for.stepx i64 
    startmult                 
    push           mm_blockpcl.do_for.down i64 
    jumpfalse      #19680     i64 
    push           81         i64 
    resetmult                 
    jump           #19681     
#19680: 
    push           80         i64 
    endmult                   
#19681: 
    callproc       &pc_libpcl.pcl_genx 
    setargs                   1 0
    push           mm_blockpcl.do_for.pindex u64 
    callproc       &mm_genpcl.setmode_u 
    jump           #19682     
#19677: 
    setargs                   3 0
    setargs                   1 0
    push           mm_blockpcl.do_for.lab_b i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    push           1          i64 
    startmult                 
    push           mm_blockpcl.do_for.down i64 
    jumpfalse      #19683     i64 
    push           81         i64 
    resetmult                 
    jump           #19684     
#19683: 
    push           80         i64 
    endmult                   
#19684: 
    callproc       &pc_libpcl.pcl_genx 
    setargs                   1 0
    push           mm_blockpcl.do_for.pindex u64 
    callproc       &mm_genpcl.setmode_u 
#19682: 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.do_for.pindex u64 
    callfn         &mm_genpcl.genmem_u u64 
    push           26         i64 
    callproc       &pc_libpcl.pcl_gen 
    push           mm_blockpcl.do_for.pto u64 
    pushptr                   u8 
    push           1          i64 
    jumpne         #19685     i64 
    setargs                   2 0
    setargs                   2 0
    push           9          i64 
    push           mm_blockpcl.do_for.pto u64 
    push           16         
    pushptroff                i64 1 0
    callfn         &pc_libpcl.pcl_genint u64 
    push           26         i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #19686     
#19685: 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.do_for.pto u64 
    callfn         &mm_genpcl.genmem_u u64 
    push           26         i64 
    callproc       &pc_libpcl.pcl_gen 
#19686: 
    push           mm_blockpcl.do_for.pelse u64 
    jumpfalse      #19687     u64 
    setargs                   1 0
    push           mm_blockpcl.do_for.lab_e i64 
    callproc       &mm_genpcl.definefwdlabel 
    setargs                   1 0
    push           mm_blockpcl.do_for.pelse u64 
    callproc       &mm_blockpcl.evalblock 
#19687: 
    setargs                   1 0
    push           mm_blockpcl.do_for.lab_d i64 
    callproc       &mm_genpcl.definefwdlabel 
    push           &mm_genpcl.loopindex 
    decr                      i64 1
#19688: 
    retproc                   
End


Proc mm_blockpcl.do_forall:
    param          mm_blockpcl.do_forall.p u64 
    param          mm_blockpcl.do_forall.pindex u64 
    param          mm_blockpcl.do_forall.plist u64 
    param          mm_blockpcl.do_forall.pbody u64 
    param          mm_blockpcl.do_forall.down i64 
    local          mm_blockpcl.do_forall.plocal u64 
    local          mm_blockpcl.do_forall.pfrom u64 
    local          mm_blockpcl.do_forall.pto u64 
    local          mm_blockpcl.do_forall.pelse u64 
    local          mm_blockpcl.do_forall.px u64 
    local          mm_blockpcl.do_forall.plimit u64 
    local          mm_blockpcl.do_forall.passign u64 
    local          mm_blockpcl.do_forall.lab_a i64 
    local          mm_blockpcl.do_forall.lab_b i64 
    local          mm_blockpcl.do_forall.lab_c i64 
    local          mm_blockpcl.do_forall.lab_d i64 
    local          mm_blockpcl.do_forall.lab_e i64 
    local          mm_blockpcl.do_forall.a i64 
    local          mm_blockpcl.do_forall.b i64 
    local          mm_blockpcl.do_forall.stepx i64 
    procentry                 
    push           mm_blockpcl.do_forall.pindex u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_forall.plocal u64 
    push           mm_blockpcl.do_forall.plocal u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_forall.pfrom u64 
    push           mm_blockpcl.do_forall.pfrom u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_forall.pto u64 
    push           mm_blockpcl.do_forall.plist u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_forall.passign u64 
    push           mm_blockpcl.do_forall.pbody u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_forall.pelse u64 
    setargs                   0 0
    callfn         &mm_genpcl.definelabel i64 
    pop            mm_blockpcl.do_forall.lab_a i64 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_forall.lab_b i64 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_forall.lab_c i64 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_forall.lab_d i64 
    push           mm_blockpcl.do_forall.pelse u64 
    jumpfalse      #19690     u64 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_forall.lab_e i64 
    jump           #19691     
#19690: 
    push           mm_blockpcl.do_forall.lab_d i64 
    pop            mm_blockpcl.do_forall.lab_e i64 
#19691: 
    setargs                   4 0
    push           mm_blockpcl.do_forall.lab_d i64 
    push           mm_blockpcl.do_forall.lab_c i64 
    push           mm_blockpcl.do_forall.lab_b i64 
    push           mm_blockpcl.do_forall.lab_a i64 
    callproc       &mm_genpcl.stacklooplabels 
    setargs                   1 0
    push           mm_blockpcl.do_forall.pfrom u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.do_forall.pindex u64 
    callfn         &mm_genpcl.genmem_u u64 
    push           22         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.do_forall.pindex u64 
    callproc       &mm_genpcl.setmode_u 
    push           mm_blockpcl.do_forall.pfrom u64 
    pushptr                   u8 
    push           1          i64 
    jumpne         #19692     i64 
    push           mm_blockpcl.do_forall.pto u64 
    pushptr                   u8 
    push           1          i64 
    jumpne         #19692     i64 
    push           mm_blockpcl.do_forall.pfrom u64 
    push           16         
    pushptroff                i64 1 0
    pop            mm_blockpcl.do_forall.a i64 
    push           mm_blockpcl.do_forall.pto u64 
    push           16         
    pushptroff                i64 1 0
    pop            mm_blockpcl.do_forall.b i64 
    push           mm_blockpcl.do_forall.down i64 
    jumpfalse      #19693     i64 
    push           mm_blockpcl.do_forall.a i64 
    push           mm_blockpcl.do_forall.b i64 
    jumpge         #19694     i64 
#19693: 
    push           mm_blockpcl.do_forall.down i64 
    jumptrue       #19695     i64 
    push           mm_blockpcl.do_forall.a i64 
    push           mm_blockpcl.do_forall.b i64 
    jumpgt         #19695     i64 
#19694: 
    jump           #19696     
#19695: 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.do_forall.lab_e i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    push           50         i64 
    callproc       &pc_libpcl.pcl_gen 
#19696: 
    jump           #19697     
#19692: 
    push           mm_blockpcl.do_forall.pfrom u64 
    pushptr                   u8 
    push           1          i64 
    jumpne         #19698     i64 
    setargs                   1 0
    push           mm_blockpcl.do_forall.pfrom u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   1 0
    push           mm_blockpcl.do_forall.pto u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.do_forall.lab_e i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    startmult                 
    push           mm_blockpcl.do_forall.down i64 
    jumpfalse      #19699     i64 
    push           57         i64 
    resetmult                 
    jump           #19700     
#19699: 
    push           54         i64 
    endmult                   
#19700: 
    callproc       &pc_libpcl.pcl_gen 
    jump           #19701     
#19698: 
    setargs                   1 0
    push           mm_blockpcl.do_forall.pfrom u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   1 0
    push           mm_blockpcl.do_forall.pto u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.do_forall.lab_e i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    startmult                 
    push           mm_blockpcl.do_forall.down i64 
    jumpfalse      #19702     i64 
    push           54         i64 
    resetmult                 
    jump           #19703     
#19702: 
    push           57         i64 
    endmult                   
#19703: 
    callproc       &pc_libpcl.pcl_gen 
#19701: 
    setargs                   1 0
    push           mm_blockpcl.do_forall.pindex u64 
    callproc       &mm_genpcl.setmode_u 
#19697: 
    setargs                   1 0
    push           mm_blockpcl.do_forall.lab_b i64 
    callproc       &mm_genpcl.definefwdlabel 
    push           0          i64 
    push           mm_blockpcl.do_forall.passign u64 
    push           59         
    popptroff                 u8 1 0
    setargs                   1 0
    push           mm_blockpcl.do_forall.passign u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   1 0
    push           mm_blockpcl.do_forall.pbody u64 
    callproc       &mm_blockpcl.evalblock 
    setargs                   1 0
    push           mm_blockpcl.do_forall.lab_c i64 
    callproc       &mm_genpcl.definefwdlabel 
    setargs                   3 0
    setargs                   1 0
    push           mm_blockpcl.do_forall.lab_b i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    push           1          i64 
    startmult                 
    push           mm_blockpcl.do_forall.down i64 
    jumpfalse      #19704     i64 
    push           81         i64 
    resetmult                 
    jump           #19705     
#19704: 
    push           80         i64 
    endmult                   
#19705: 
    callproc       &pc_libpcl.pcl_genx 
    setargs                   1 0
    push           mm_blockpcl.do_forall.pindex u64 
    callproc       &mm_genpcl.setmode_u 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.do_forall.pindex u64 
    callfn         &mm_genpcl.genmem_u u64 
    push           26         i64 
    callproc       &pc_libpcl.pcl_gen 
    push           mm_blockpcl.do_forall.pto u64 
    pushptr                   u8 
    push           1          i64 
    jumpne         #19706     i64 
    setargs                   2 0
    setargs                   2 0
    push           9          i64 
    push           mm_blockpcl.do_forall.pto u64 
    push           16         
    pushptroff                i64 1 0
    callfn         &pc_libpcl.pcl_genint u64 
    push           26         i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #19707     
#19706: 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.do_forall.pto u64 
    callfn         &mm_genpcl.genmem_u u64 
    push           26         i64 
    callproc       &pc_libpcl.pcl_gen 
#19707: 
    jump           #19708     
    push           mm_blockpcl.do_forall.pelse u64 
    jumpfalse      #19709     u64 
    setargs                   1 0
    push           mm_blockpcl.do_forall.lab_e i64 
    callproc       &mm_genpcl.definefwdlabel 
    setargs                   1 0
    push           mm_blockpcl.do_forall.pelse u64 
    callproc       &mm_blockpcl.evalblock 
#19709: 
    setargs                   1 0
    push           mm_blockpcl.do_forall.lab_d i64 
    callproc       &mm_genpcl.definefwdlabel 
    push           &mm_genpcl.loopindex 
    decr                      i64 1
#19708: 
    retproc                   
End


Proc mm_blockpcl.do_swap:
    param          mm_blockpcl.do_swap.p u64 
    param          mm_blockpcl.do_swap.a u64 
    param          mm_blockpcl.do_swap.b u64 
    procentry                 
    setargs                   1 0
    push           mm_blockpcl.do_swap.a u64 
    callproc       &mm_blockpcl.evallv 
    setargs                   1 0
    push           mm_blockpcl.do_swap.b u64 
    callproc       &mm_blockpcl.evallv 
    setargs                   2 0
    push           0          u64 
    push           82         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.do_swap.a u64 
    callproc       &mm_genpcl.setmode_u 
#19711: 
    retproc                   
End


Proc mm_blockpcl.do_convert:
    param          mm_blockpcl.do_convert.p u64 
    param          mm_blockpcl.do_convert.a u64 
    local          mm_blockpcl.do_convert.opc i64 
    procentry                 
    push           mm_blockpcl.do_convert.p u64 
    pushptr                   u8 
    push           19         i64 
    casejumpeq     #19713     i64 0
    push           21         i64 
    casejumpeq     #19713     i64 0
    popstack                  i64 
    jump           #19714     
#19713: 
    jump           #19715     
#19714: 
    push           mm_blockpcl.do_convert.p u64 
    push           60         
    pushptroff                u8 1 0
    push           181        i64 
    casejumpeq     #19716     i64 0
    push           211        i64 
    casejumpeq     #19717     i64 0
    popstack                  i64 
    jump           #19718     
#19716: 
    setargs                   2 0
    push           0          u64 
    push           "CONV/SOFTCONV" u64 
    callproc       &mm_support.gerror 
    jump           #19719     
#19717: 
    setargs                   2 0
    push           0          u64 
    push           "CONV/ERROR" u64 
    callproc       &mm_support.gerror 
    jump           #19719     
#19718: 
    setargs                   1 0
    push           mm_blockpcl.do_convert.a u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    push           0          u64 
    push           mm_blockpcl.do_convert.p u64 
    push           60         
    pushptroff                u8 1 0
    callproc       &pc_libpcl.pcl_gen 
#19719: 
    setargs                   1 0
    push           mm_blockpcl.do_convert.p u64 
    callproc       &mm_genpcl.setmode_u 
    setargs                   1 0
    setargs                   1 0
    push           mm_blockpcl.do_convert.p u64 
    push           52         
    pushptroff                i32 1 0
    callfn         &mm_lib.getpclmode i64 
    callproc       &pc_libpcl.pcl_setoldtype 
#19715: 
#19720: 
    retproc                   
End


Proc mm_blockpcl.do_dot:
    param          mm_blockpcl.do_dot.pdot u64 
    local          mm_blockpcl.do_dot.offset i64 
    local          mm_blockpcl.do_dot.a u64 
    local          mm_blockpcl.do_dot.pname u64 
    procentry                 
    push           mm_blockpcl.do_dot.pdot u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_dot.a u64 
    push           0          u64 
    pop            mm_blockpcl.do_dot.pname u64 
    setargs                   2 0
    push           &mm_blockpcl.do_dot.pname 
    push           mm_blockpcl.do_dot.a u64 
    callfn         &mm_blockpcl.checkdotchain i64 
    pop            mm_blockpcl.do_dot.offset i64 
    push           &mm_blockpcl.do_dot.offset 
    push           mm_blockpcl.do_dot.pdot u64 
    push           40         
    pushptroff                u32 1 0
    addto                     i64 
    push           mm_blockpcl.do_dot.pname u64 
    pop            mm_blockpcl.do_dot.a u64 
    setargs                   2 0
    push           0          u64 
    push           mm_blockpcl.do_dot.a u64 
    callproc       &mm_blockpcl.evalref 
    push           mm_blockpcl.do_dot.offset i64 
    jumpfalse      #19722     i64 
    setargs                   2 0
    push           9          i64 
    push           mm_blockpcl.do_dot.offset i64 
    callproc       &mm_genpcl.genpushint 
    setargs                   2 0
    push           0          u64 
    push           30         i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #19723     
#19722: 
    setargs                   2 0
    push           0          u64 
    push           33         i64 
    callproc       &pc_libpcl.pcl_gen 
#19723: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_libpcl.pcl_setscale 
    setargs                   1 0
    setargs                   1 0
    push           mm_blockpcl.do_dot.pdot u64 
    callfn         &mm_lib.getmemmode i64 
    callproc       &mm_genpcl.setmode 
#19724: 
    retproc                   
End


Proc mm_blockpcl.checkdotchain: i64
    param          mm_blockpcl.checkdotchain.p u64 
    param          mm_blockpcl.checkdotchain.pname u64 
    local          mm_blockpcl.checkdotchain.offset i64 
    local          mm_blockpcl.checkdotchain.axmode i64 
    procentry                 
    push           mm_blockpcl.checkdotchain.p u64 
    pushptr                   u8 
    push           51         i64 
    casejumpeq     #19726     i64 0
    popstack                  i64 
    jump           #19727     
#19726: 
    setargs                   2 0
    push           mm_blockpcl.checkdotchain.pname u64 
    push           mm_blockpcl.checkdotchain.p u64 
    push           16         
    pushptroff                u64 1 0
    callfn         &mm_blockpcl.checkdotchain i64 
    pop            mm_blockpcl.checkdotchain.offset i64 
    push           mm_blockpcl.checkdotchain.p u64 
    push           40         
    pushptroff                u32 1 0
    push           mm_blockpcl.checkdotchain.offset i64 
    add                       i64 
    setret                    i64 
    jump           #19728     
    jump           #19729     
#19727: 
    push           mm_blockpcl.checkdotchain.p u64 
    push           mm_blockpcl.checkdotchain.pname u64 
    popptr                    u64 
    push           0          i64 
    setret                    i64 
    jump           #19728     
#19729: 
    push           0          i64 
    setret                    i64 
    jump           #19728     
#19728: 
    retfn                     i64 
End


Proc mm_blockpcl.do_dotref:
    param          mm_blockpcl.do_dotref.pdot u64 
    local          mm_blockpcl.do_dotref.imode i64 
    local          mm_blockpcl.do_dotref.offset i64 
    local          mm_blockpcl.do_dotref.a u64 
    local          mm_blockpcl.do_dotref.pname u64 
    procentry                 
    setargs                   3 0
    push           0          i64 
    push           mm_blockpcl.do_dotref.pdot u64 
    push           48         
    pushptroff                i32 1 0
    push           0          u64 
    callfn         &mm_lib.createrefmode i64 
    pop            mm_blockpcl.do_dotref.imode i64 
    push           mm_blockpcl.do_dotref.pdot u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_dotref.a u64 
    push           0          u64 
    pop            mm_blockpcl.do_dotref.pname u64 
    setargs                   2 0
    push           &mm_blockpcl.do_dotref.pname 
    push           mm_blockpcl.do_dotref.a u64 
    callfn         &mm_blockpcl.checkdotchain i64 
    pop            mm_blockpcl.do_dotref.offset i64 
    push           &mm_blockpcl.do_dotref.offset 
    push           mm_blockpcl.do_dotref.pdot u64 
    push           40         
    pushptroff                u32 1 0
    addto                     i64 
    push           mm_blockpcl.do_dotref.pname u64 
    pop            mm_blockpcl.do_dotref.a u64 
    setargs                   2 0
    push           0          u64 
    push           mm_blockpcl.do_dotref.a u64 
    callproc       &mm_blockpcl.evalref 
    push           mm_blockpcl.do_dotref.offset i64 
    jumpfalse      #19731     i64 
    setargs                   2 0
    push           9          i64 
    push           mm_blockpcl.do_dotref.offset i64 
    callproc       &mm_genpcl.genpushint 
    setargs                   2 0
    push           0          u64 
    push           125        i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_libpcl.pcl_setscale 
#19731: 
    setargs                   1 0
    push           mm_blockpcl.do_dotref.imode i64 
    callproc       &mm_genpcl.setmode 
#19732: 
    retproc                   
End


Proc mm_blockpcl.do_storedot:
    param          mm_blockpcl.do_storedot.pdot u64 
    param          mm_blockpcl.do_storedot.pfield u64 
    param          mm_blockpcl.do_storedot.rhs u64 
    local          mm_blockpcl.do_storedot.offset i64 
    local          mm_blockpcl.do_storedot.a u64 
    local          mm_blockpcl.do_storedot.pname u64 
    procentry                 
    setargs                   1 0
    push           mm_blockpcl.do_storedot.rhs u64 
    callproc       &mm_blockpcl.evalunit 
    push           mm_blockpcl.do_storedot.pdot u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_storedot.a u64 
    push           0          u64 
    pop            mm_blockpcl.do_storedot.pname u64 
    setargs                   2 0
    push           &mm_blockpcl.do_storedot.pname 
    push           mm_blockpcl.do_storedot.a u64 
    callfn         &mm_blockpcl.checkdotchain i64 
    pop            mm_blockpcl.do_storedot.offset i64 
    push           &mm_blockpcl.do_storedot.offset 
    push           mm_blockpcl.do_storedot.pdot u64 
    push           40         
    pushptroff                u32 1 0
    addto                     i64 
    push           mm_blockpcl.do_storedot.pname u64 
    pop            mm_blockpcl.do_storedot.a u64 
    setargs                   2 0
    push           0          u64 
    push           mm_blockpcl.do_storedot.a u64 
    callproc       &mm_blockpcl.evalref 
    setargs                   2 0
    push           9          i64 
    push           mm_blockpcl.do_storedot.offset i64 
    callproc       &mm_genpcl.genpushint 
    setargs                   2 0
    push           0          u64 
    startmult                 
    push           mm_blockpcl.do_storedot.pdot u64 
    push           59         
    pushptroff                u8 1 0
    jumpfalse      #19734     i64 
    push           32         i64 
    resetmult                 
    jump           #19735     
#19734: 
    push           31         i64 
    endmult                   
#19735: 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_libpcl.pcl_setscale 
    setargs                   1 0
    push           mm_blockpcl.do_storedot.pdot u64 
    callproc       &mm_genpcl.setmode_u 
#19736: 
    retproc                   
End


Proc mm_blockpcl.do_index:
    param          mm_blockpcl.do_index.p u64 
    param          mm_blockpcl.do_index.parray u64 
    param          mm_blockpcl.do_index.pindex u64 
    local          mm_blockpcl.do_index.addoffset i64 
    local          mm_blockpcl.do_index.scale i64 
    procentry                 
    push           &mm_decls.ttbasetype 
    push           mm_blockpcl.do_index.p u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           11         i64 
    setjumpeq      #19738     i64 
    push           14         i64 
    setjumpne      #19739     i64 
#19738: 
    setargs                   2 0
    push           mm_blockpcl.do_index.pindex u64 
    push           mm_blockpcl.do_index.parray u64 
    callproc       &mm_blockpcl.do_indexref 
    jump           #19740     
#19739: 
    setargs                   1 0
    push           &mm_blockpcl.do_index.pindex 
    callfn         &mm_blockpcl.getindexoffset i64 
    pop            mm_blockpcl.do_index.addoffset i64 
    setargs                   1 0
    push           mm_blockpcl.do_index.parray u64 
    callproc       &mm_blockpcl.evalarray 
    setargs                   1 0
    push           mm_blockpcl.do_index.pindex u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    push           0          u64 
    push           30         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    setargs                   1 0
    push           mm_blockpcl.do_index.p u64 
    callfn         &mm_lib.getmemmode i64 
    callproc       &mm_genpcl.setmode 
    setargs                   1 0
    push           &mm_decls.ttsize 
    push           &mm_decls.tttarget 
    push           mm_blockpcl.do_index.parray u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    pushptroff                i32 4 0
    store          mm_blockpcl.do_index.scale i64 
    callproc       &pc_libpcl.pcl_setscale 
    setargs                   1 0
    push           &mm_decls.ttlower 
    push           mm_blockpcl.do_index.parray u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    neg                       i64 
    push           mm_blockpcl.do_index.scale i64 
    mul                       i64 
    push           mm_blockpcl.do_index.addoffset i64 
    push           mm_blockpcl.do_index.scale i64 
    mul                       i64 
    add                       i64 
    callproc       &pc_libpcl.pcl_setoffset 
#19740: 
    retproc                   
End


Proc mm_blockpcl.do_storeindex:
    param          mm_blockpcl.do_storeindex.p u64 
    param          mm_blockpcl.do_storeindex.parray u64 
    param          mm_blockpcl.do_storeindex.pindex u64 
    param          mm_blockpcl.do_storeindex.rhs u64 
    local          mm_blockpcl.do_storeindex.addoffset i64 
    local          mm_blockpcl.do_storeindex.scale i64 
    procentry                 
    setargs                   1 0
    push           &mm_blockpcl.do_storeindex.pindex 
    callfn         &mm_blockpcl.getindexoffset i64 
    pop            mm_blockpcl.do_storeindex.addoffset i64 
    setargs                   1 0
    push           mm_blockpcl.do_storeindex.rhs u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   1 0
    push           mm_blockpcl.do_storeindex.parray u64 
    callproc       &mm_blockpcl.evalarray 
    setargs                   1 0
    push           mm_blockpcl.do_storeindex.pindex u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    push           0          u64 
    startmult                 
    push           mm_blockpcl.do_storeindex.p u64 
    push           59         
    pushptroff                u8 1 0
    jumpfalse      #19742     i64 
    push           32         i64 
    resetmult                 
    jump           #19743     
#19742: 
    push           31         i64 
    endmult                   
#19743: 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.do_storeindex.p u64 
    push           16         
    pushptroff                u64 1 0
    callproc       &mm_genpcl.setmode_u 
    setargs                   1 0
    push           &mm_decls.ttsize 
    push           &mm_decls.tttarget 
    push           mm_blockpcl.do_storeindex.parray u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    pushptroff                i32 4 0
    store          mm_blockpcl.do_storeindex.scale i64 
    callproc       &pc_libpcl.pcl_setscale 
    setargs                   1 0
    push           &mm_decls.ttlower 
    push           mm_blockpcl.do_storeindex.parray u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    neg                       i64 
    push           mm_blockpcl.do_storeindex.scale i64 
    mul                       i64 
    push           mm_blockpcl.do_storeindex.addoffset i64 
    push           mm_blockpcl.do_storeindex.scale i64 
    mul                       i64 
    add                       i64 
    callproc       &pc_libpcl.pcl_setoffset 
#19744: 
    retproc                   
End


Proc mm_blockpcl.do_indexref:
    param          mm_blockpcl.do_indexref.parray u64 
    param          mm_blockpcl.do_indexref.pindex u64 
    local          mm_blockpcl.do_indexref.addoffset i64 
    local          mm_blockpcl.do_indexref.scale i64 
    procentry                 
    setargs                   1 0
    push           &mm_blockpcl.do_indexref.pindex 
    callfn         &mm_blockpcl.getindexoffset i64 
    pop            mm_blockpcl.do_indexref.addoffset i64 
    setargs                   1 0
    push           mm_blockpcl.do_indexref.parray u64 
    callproc       &mm_blockpcl.evalarray 
    setargs                   1 0
    push           mm_blockpcl.do_indexref.pindex u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    push           0          u64 
    push           125        i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           &mm_decls.tttarget 
    push           mm_blockpcl.do_indexref.parray u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    callproc       &mm_genpcl.setmode 
    setargs                   1 0
    push           &mm_decls.ttsize 
    push           &mm_decls.tttarget 
    push           mm_blockpcl.do_indexref.parray u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    pushptroff                i32 4 0
    store          mm_blockpcl.do_indexref.scale i64 
    callproc       &pc_libpcl.pcl_setscale 
    setargs                   1 0
    push           &mm_decls.ttlower 
    push           mm_blockpcl.do_indexref.parray u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    neg                       i64 
    push           mm_blockpcl.do_indexref.scale i64 
    mul                       i64 
    push           mm_blockpcl.do_indexref.addoffset i64 
    push           mm_blockpcl.do_indexref.scale i64 
    mul                       i64 
    add                       i64 
    callproc       &pc_libpcl.pcl_setoffset 
#19746: 
    retproc                   
End


Proc mm_blockpcl.getindexoffset: i64
    param          mm_blockpcl.getindexoffset.pindex u64 
    local          mm_blockpcl.getindexoffset.offset i64 
    local          mm_blockpcl.getindexoffset.addoffset i64 
    procentry                 
    push           0          i64 
    pop            mm_blockpcl.getindexoffset.addoffset i64 
    push           mm_blockpcl.getindexoffset.pindex u64 
    pushptr                   u64 
    pushptr                   u8 
    push           36         i64 
    jumpne         #19748     i64 
    push           mm_blockpcl.getindexoffset.pindex u64 
    pushptr                   u64 
    push           60         
    pushptroff                u8 1 0
    push           101        i64 
    setjumpeq      #19749     i64 
    push           102        i64 
    setjumpne      #19748     i64 
#19749: 
    push           mm_blockpcl.getindexoffset.pindex u64 
    pushptr                   u64 
    push           24         
    pushptroff                u64 1 0
    pushptr                   u8 
    push           1          i64 
    jumpne         #19750     i64 
    startmult                 
    push           mm_blockpcl.getindexoffset.pindex u64 
    pushptr                   u64 
    push           60         
    pushptroff                u8 1 0
    push           101        i64 
    jumpne         #19751     i64 
    push           mm_blockpcl.getindexoffset.pindex u64 
    pushptr                   u64 
    push           24         
    pushptroff                u64 1 0
    push           16         
    pushptroff                i64 1 0
    resetmult                 
    jump           #19752     
#19751: 
    push           mm_blockpcl.getindexoffset.pindex u64 
    pushptr                   u64 
    push           24         
    pushptroff                u64 1 0
    push           16         
    pushptroff                i64 1 0
    neg                       i64 
    endmult                   
#19752: 
    pop            mm_blockpcl.getindexoffset.addoffset i64 
    push           mm_blockpcl.getindexoffset.pindex u64 
    pushptr                   u64 
    push           16         
    pushptroff                u64 1 0
    push           mm_blockpcl.getindexoffset.pindex u64 
    popptr                    u64 
#19750: 
#19748: 
    push           mm_blockpcl.getindexoffset.addoffset i64 
    setret                    i64 
    jump           #19753     
#19753: 
    retfn                     i64 
End


Proc mm_blockpcl.do_switch:
    param          mm_blockpcl.do_switch.p u64 
    param          mm_blockpcl.do_switch.pindex u64 
    param          mm_blockpcl.do_switch.pwhenthen u64 
    param          mm_blockpcl.do_switch.pelse u64 
    param          mm_blockpcl.do_switch.loopsw i64 
    param          mm_blockpcl.do_switch.isref i64 
    local          mm_blockpcl.do_switch.minlab i64 
    local          mm_blockpcl.do_switch.maxlab i64 
    local          mm_blockpcl.do_switch.n i64 
    local          mm_blockpcl.do_switch.iscomplex i64 
    local          mm_blockpcl.do_switch.i i64 
    local          mm_blockpcl.do_switch.lab_a i64 
    local          mm_blockpcl.do_switch.lab_b i64 
    local          mm_blockpcl.do_switch.lab_d i64 
    local          mm_blockpcl.do_switch.labjump i64 
    local          mm_blockpcl.do_switch.elselab i64 
    local          mm_blockpcl.do_switch.labstmt i64 
    local          mm_blockpcl.do_switch.ax i64 
    local          mm_blockpcl.do_switch.bx i64 
    local          mm_blockpcl.do_switch.ismult i64 
    local          mm_blockpcl.do_switch.labels block:8008 
    local          mm_blockpcl.do_switch.w u64 
    local          mm_blockpcl.do_switch.wt u64 
    procentry                 
    startmult                 
    push           mm_blockpcl.do_switch.p u64 
    push           48         
    pushptroff                i32 1 0
    push           0          i64 
    jumpeq         #19755     i64 
    push           mm_blockpcl.do_switch.loopsw i64 
    jumptrue       #19755     i64 
    push           1          
    resetmult                 
    jump           #19756     
#19755: 
    push           0          
    endmult                   
#19756: 
    pop            mm_blockpcl.do_switch.ismult i64 
    push           1000000    i64 
    pop            mm_blockpcl.do_switch.minlab i64 
    push           -1000000   i64 
    pop            mm_blockpcl.do_switch.maxlab i64 
    push           0          i64 
    pop            mm_blockpcl.do_switch.n i64 
    push           0          i64 
    pop            mm_blockpcl.do_switch.iscomplex i64 
    push           mm_blockpcl.do_switch.pwhenthen u64 
    pop            mm_blockpcl.do_switch.wt u64 
    jump           #19757     
#19758: 
    push           mm_blockpcl.do_switch.wt u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_switch.w u64 
    jump           #19759     
#19760: 
    push           mm_blockpcl.do_switch.w u64 
    pushptr                   u8 
    push           20         i64 
    casejumpeq     #19761     i64 0
    push           1          i64 
    casejumpeq     #19762     i64 0
    popstack                  i64 
    jump           #19763     
#19761: 
    push           mm_blockpcl.do_switch.w u64 
    push           16         
    pushptroff                u64 1 0
    push           16         
    pushptroff                i64 1 0
    pop            mm_blockpcl.do_switch.ax i64 
    push           mm_blockpcl.do_switch.w u64 
    push           24         
    pushptroff                u64 1 0
    push           16         
    pushptroff                i64 1 0
    pop            mm_blockpcl.do_switch.bx i64 
!dorange::
#19764: 
#19765: 
    push           mm_blockpcl.do_switch.ax i64 
    pop            mm_blockpcl.do_switch.i i64 
    push           mm_blockpcl.do_switch.i i64 
    push           mm_blockpcl.do_switch.bx i64 
    jumpgt         #19766     i64 
#19767: 
    push           mm_blockpcl.do_switch.i i64 
    push           mm_blockpcl.do_switch.minlab i64 
    min                       i64 
    pop            mm_blockpcl.do_switch.minlab i64 
    push           mm_blockpcl.do_switch.i i64 
    push           mm_blockpcl.do_switch.maxlab i64 
    max                       i64 
    pop            mm_blockpcl.do_switch.maxlab i64 
#19768: 
    forup          #19767     i64 1
    opnd           mm_blockpcl.do_switch.i 
    opnd           mm_blockpcl.do_switch.bx 
#19766: 
    jump           #19769     
#19762: 
    push           mm_blockpcl.do_switch.w u64 
    push           16         
    pushptroff                i64 1 0
    store          mm_blockpcl.do_switch.bx i64 
    pop            mm_blockpcl.do_switch.ax i64 
    jump           #19764     
    jump           #19769     
#19763: 
    setargs                   3 0
    push           0          u64 
    setargs                   1 0
    push           mm_blockpcl.do_switch.w u64 
    callfn         &mm_lib.strexpr u64 
    pushptr                   u64 
    push           "Switch when2: not const: #" u64 
    callproc       &mm_support.gerror_s 
#19769: 
    push           mm_blockpcl.do_switch.w u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_switch.w u64 
#19759: 
    push           mm_blockpcl.do_switch.w u64 
    jumptrue       #19760     u64 
#19770: 
    push           mm_blockpcl.do_switch.wt u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_switch.wt u64 
#19757: 
    push           mm_blockpcl.do_switch.wt u64 
    jumptrue       #19758     u64 
#19771: 
    push           mm_blockpcl.do_switch.maxlab i64 
    push           mm_blockpcl.do_switch.minlab i64 
    sub                       i64 
    push           1          i64 
    add                       i64 
    pop            mm_blockpcl.do_switch.n i64 
    push           mm_blockpcl.do_switch.n i64 
    push           1000       i64 
    jumple         #19772     i64 
    setargs                   2 0
    push           0          u64 
    push           "Switch too big" u64 
    callproc       &mm_support.gerror 
#19772: 
    push           mm_blockpcl.do_switch.loopsw i64 
    jumpfalse      #19773     i64 
    setargs                   0 0
    callfn         &mm_genpcl.definelabel i64 
    pop            mm_blockpcl.do_switch.lab_a i64 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_switch.lab_d i64 
    setargs                   4 0
    push           mm_blockpcl.do_switch.lab_d i64 
    push           mm_blockpcl.do_switch.lab_a i64 
    push           mm_blockpcl.do_switch.lab_a i64 
    push           mm_blockpcl.do_switch.lab_a i64 
    callproc       &mm_genpcl.stacklooplabels 
    jump           #19774     
#19773: 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_switch.lab_d i64 
#19774: 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_switch.labjump i64 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_switch.elselab i64 
    push           mm_blockpcl.do_switch.ismult i64 
    jumpfalse      #19775     i64 
    setargs                   2 0
    push           0          u64 
    push           191        i64 
    callproc       &pc_libpcl.pcl_gen 
#19775: 
    setargs                   1 0
    push           mm_blockpcl.do_switch.pindex u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   4 0
    setargs                   1 0
    push           mm_blockpcl.do_switch.labjump i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    push           mm_blockpcl.do_switch.maxlab i64 
    push           mm_blockpcl.do_switch.minlab i64 
    push           84         i64 
    callproc       &pc_libpcl.pcl_genxy 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.do_switch.elselab i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    push           26         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.do_switch.labjump i64 
    callproc       &mm_genpcl.definefwdlabel 
#19776: 
    push           mm_blockpcl.do_switch.minlab i64 
    pop            mm_blockpcl.do_switch.i i64 
    push           mm_blockpcl.do_switch.i i64 
    push           mm_blockpcl.do_switch.maxlab i64 
    jumpgt         #19777     i64 
#19778: 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.do_switch.elselab i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    push           85         i64 
    callproc       &pc_libpcl.pcl_gen 
    push           pc_libpcl.pccurr u64 
    push           &mm_blockpcl.do_switch.labels 
    push           mm_blockpcl.do_switch.i i64 
    popptroff                 u64 8 0
#19779: 
    forup          #19778     i64 1
    opnd           mm_blockpcl.do_switch.i 
    opnd           mm_blockpcl.do_switch.maxlab 
#19777: 
    setargs                   2 0
    push           0          u64 
    push           86         i64 
    callproc       &pc_libpcl.pcl_gen 
    push           mm_blockpcl.do_switch.pwhenthen u64 
    pop            mm_blockpcl.do_switch.wt u64 
    jump           #19780     
#19781: 
    setargs                   0 0
    callfn         &mm_genpcl.definelabel i64 
    pop            mm_blockpcl.do_switch.labstmt i64 
    push           mm_blockpcl.do_switch.wt u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_switch.w u64 
    jump           #19782     
#19783: 
    push           mm_blockpcl.do_switch.w u64 
    pushptr                   u8 
    push           20         i64 
    casejumpeq     #19784     i64 0
    push           1          i64 
    casejumpeq     #19785     i64 0
    popstack                  i64 
    jump           #19786     
#19784: 
    push           mm_blockpcl.do_switch.w u64 
    push           16         
    pushptroff                u64 1 0
    push           16         
    pushptroff                i64 1 0
    pop            mm_blockpcl.do_switch.ax i64 
    push           mm_blockpcl.do_switch.w u64 
    push           24         
    pushptroff                u64 1 0
    push           16         
    pushptroff                i64 1 0
    pop            mm_blockpcl.do_switch.bx i64 
    jump           #19787     
#19785: 
    push           mm_blockpcl.do_switch.w u64 
    push           16         
    pushptroff                i64 1 0
    store          mm_blockpcl.do_switch.bx i64 
    pop            mm_blockpcl.do_switch.ax i64 
    jump           #19787     
#19786: 
#19787: 
#19788: 
    push           mm_blockpcl.do_switch.ax i64 
    pop            mm_blockpcl.do_switch.i i64 
    push           mm_blockpcl.do_switch.i i64 
    push           mm_blockpcl.do_switch.bx i64 
    jumpgt         #19789     i64 
#19790: 
    push           mm_blockpcl.do_switch.labstmt i64 
    push           &mm_blockpcl.do_switch.labels 
    push           mm_blockpcl.do_switch.i i64 
    pushptroff                u64 8 0
    push           8          
    popptroff                 i64 1 0
#19791: 
    forup          #19790     i64 1
    opnd           mm_blockpcl.do_switch.i 
    opnd           mm_blockpcl.do_switch.bx 
#19789: 
    push           mm_blockpcl.do_switch.w u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_switch.w u64 
#19782: 
    push           mm_blockpcl.do_switch.w u64 
    jumptrue       #19783     u64 
#19792: 
    setargs                   2 0
    push           mm_blockpcl.do_switch.isref i64 
    push           mm_blockpcl.do_switch.wt u64 
    push           24         
    pushptroff                u64 1 0
    callproc       &mm_blockpcl.evalunitx 
    push           mm_blockpcl.do_switch.ismult i64 
    jumpfalse      #19793     i64 
    setargs                   2 0
    push           0          u64 
    push           192        i64 
    callproc       &pc_libpcl.pcl_gen 
#19793: 
    setargs                   1 0
    startmult                 
    push           mm_blockpcl.do_switch.loopsw i64 
    jumpfalse      #19794     i64 
    push           mm_blockpcl.do_switch.lab_a i64 
    resetmult                 
    jump           #19795     
#19794: 
    push           mm_blockpcl.do_switch.lab_d i64 
    endmult                   
#19795: 
    callproc       &mm_blockpcl.genjumpl 
    push           mm_blockpcl.do_switch.wt u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_switch.wt u64 
#19780: 
    push           mm_blockpcl.do_switch.wt u64 
    jumptrue       #19781     u64 
#19796: 
    setargs                   1 0
    push           mm_blockpcl.do_switch.elselab i64 
    callproc       &mm_genpcl.definefwdlabel 
    push           mm_blockpcl.do_switch.pelse u64 
    jumpfalse      #19797     u64 
    setargs                   2 0
    push           mm_blockpcl.do_switch.isref i64 
    push           mm_blockpcl.do_switch.pelse u64 
    callproc       &mm_blockpcl.evalunitx 
    push           mm_blockpcl.do_switch.ismult i64 
    jumpfalse      #19798     i64 
    setargs                   2 0
    push           0          u64 
    push           193        i64 
    callproc       &pc_libpcl.pcl_gen 
#19798: 
#19797: 
    push           mm_blockpcl.do_switch.loopsw i64 
    jumpfalse      #19799     i64 
    setargs                   1 0
    push           mm_blockpcl.do_switch.lab_a i64 
    callproc       &mm_blockpcl.genjumpl 
    setargs                   1 0
    push           mm_blockpcl.do_switch.lab_d i64 
    callproc       &mm_genpcl.definefwdlabel 
    push           &mm_genpcl.loopindex 
    decr                      i64 1
    jump           #19800     
#19799: 
    setargs                   1 0
    push           mm_blockpcl.do_switch.lab_d i64 
    callproc       &mm_genpcl.definefwdlabel 
#19800: 
#19801: 
    retproc                   
End


Proc mm_blockpcl.do_select:
    param          mm_blockpcl.do_select.p u64 
    param          mm_blockpcl.do_select.a u64 
    param          mm_blockpcl.do_select.b u64 
    param          mm_blockpcl.do_select.c u64 
    param          mm_blockpcl.do_select.isref i64 
    local          mm_blockpcl.do_select.labels block:2048 
    local          mm_blockpcl.do_select.labend i64 
    local          mm_blockpcl.do_select.labjump i64 
    local          mm_blockpcl.do_select.n i64 
    local          mm_blockpcl.do_select.i i64 
    local          mm_blockpcl.do_select.elselab i64 
    local          mm_blockpcl.do_select.labstmt i64 
    local          mm_blockpcl.do_select.ismult i64 
    local          mm_blockpcl.do_select.q u64 
    procentry                 
    startmult                 
    push           mm_blockpcl.do_select.p u64 
    push           48         
    pushptroff                i32 1 0
    push           0          i64 
    jumpeq         #19803     i64 
    push           mm_blockpcl.do_select.p u64 
    push           59         
    pushptroff                u8 1 0
    jumpfalse      #19803     i64 
    push           1          
    resetmult                 
    jump           #19804     
#19803: 
    push           0          
    endmult                   
#19804: 
    pop            mm_blockpcl.do_select.ismult i64 
    push           mm_blockpcl.do_select.b u64 
    pop            mm_blockpcl.do_select.q u64 
    push           0          i64 
    pop            mm_blockpcl.do_select.n i64 
    jump           #19805     
#19806: 
    push           mm_blockpcl.do_select.n i64 
    push           256        i64 
    jumplt         #19807     i64 
    setargs                   2 0
    push           0          u64 
    push           "selectx: too many labels" u64 
    callproc       &mm_support.gerror 
#19807: 
    push           &mm_blockpcl.do_select.n 
    incr                      i64 1
    push           mm_blockpcl.do_select.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_select.q u64 
#19805: 
    push           mm_blockpcl.do_select.q u64 
    jumptrue       #19806     u64 
#19808: 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_select.labend i64 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_select.labjump i64 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_select.elselab i64 
    push           mm_blockpcl.do_select.ismult i64 
    jumpfalse      #19809     i64 
    setargs                   2 0
    push           0          u64 
    push           191        i64 
    callproc       &pc_libpcl.pcl_gen 
#19809: 
    setargs                   1 0
    push           mm_blockpcl.do_select.a u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   4 0
    setargs                   1 0
    push           mm_blockpcl.do_select.labjump i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    push           mm_blockpcl.do_select.n i64 
    push           1          i64 
    push           84         i64 
    callproc       &pc_libpcl.pcl_genxy 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.do_select.elselab i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    push           26         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.do_select.labjump i64 
    callproc       &mm_genpcl.definefwdlabel 
    push           mm_blockpcl.do_select.b u64 
    pop            mm_blockpcl.do_select.q u64 
    push           0          i64 
    pop            mm_blockpcl.do_select.i i64 
#19810: 
    push           1          i64 
    pop            mm_blockpcl.do_select.i i64 
    push           mm_blockpcl.do_select.n i64 
    push           1          i64 
    jumplt         #19811     i64 
#19812: 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.do_select.elselab i64 
    callfn         &pc_libpcl.pcl_genlabel u64 
    push           85         i64 
    callproc       &pc_libpcl.pcl_gen 
    push           pc_libpcl.pccurr u64 
    push           &mm_blockpcl.do_select.labels 
    push           mm_blockpcl.do_select.i i64 
    popptroff                 u64 8 -8
#19813: 
    forup          #19812     i64 1
    opnd           mm_blockpcl.do_select.i 
    opnd           mm_blockpcl.do_select.n 
#19811: 
    setargs                   2 0
    push           0          u64 
    push           86         i64 
    callproc       &pc_libpcl.pcl_gen 
    push           mm_blockpcl.do_select.b u64 
    pop            mm_blockpcl.do_select.q u64 
    push           0          i64 
    pop            mm_blockpcl.do_select.i i64 
    jump           #19814     
#19815: 
    setargs                   0 0
    callfn         &mm_genpcl.definelabel i64 
    pop            mm_blockpcl.do_select.labstmt i64 
    push           &mm_blockpcl.do_select.i 
    incr                      i64 1
    push           mm_blockpcl.do_select.labstmt i64 
    push           &mm_blockpcl.do_select.labels 
    push           mm_blockpcl.do_select.i i64 
    pushptroff                u64 8 -8
    push           8          
    popptroff                 i64 1 0
    setargs                   2 0
    push           mm_blockpcl.do_select.isref i64 
    push           mm_blockpcl.do_select.q u64 
    callproc       &mm_blockpcl.evalunitx 
    push           mm_blockpcl.do_select.ismult i64 
    jumpfalse      #19816     i64 
    setargs                   2 0
    push           0          u64 
    push           192        i64 
    callproc       &pc_libpcl.pcl_gen 
#19816: 
    setargs                   1 0
    push           mm_blockpcl.do_select.labend i64 
    callproc       &mm_blockpcl.genjumpl 
    push           mm_blockpcl.do_select.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_select.q u64 
#19814: 
    push           mm_blockpcl.do_select.q u64 
    jumptrue       #19815     u64 
#19817: 
    setargs                   1 0
    push           mm_blockpcl.do_select.elselab i64 
    callproc       &mm_genpcl.definefwdlabel 
    setargs                   2 0
    push           mm_blockpcl.do_select.isref i64 
    push           mm_blockpcl.do_select.c u64 
    callproc       &mm_blockpcl.evalunitx 
    push           mm_blockpcl.do_select.ismult i64 
    jumpfalse      #19818     i64 
    setargs                   2 0
    push           0          u64 
    push           193        i64 
    callproc       &pc_libpcl.pcl_gen 
#19818: 
    setargs                   1 0
    push           mm_blockpcl.do_select.labend i64 
    callproc       &mm_genpcl.definefwdlabel 
#19819: 
    retproc                   
End


Proc mm_blockpcl.do_case:
    param          mm_blockpcl.do_case.p u64 
    param          mm_blockpcl.do_case.pindex u64 
    param          mm_blockpcl.do_case.pwhenthen u64 
    param          mm_blockpcl.do_case.pelse u64 
    param          mm_blockpcl.do_case.loopsw i64 
    param          mm_blockpcl.do_case.isref i64 
    local          mm_blockpcl.do_case.labtable block:2048 
    local          mm_blockpcl.do_case.unittable block:2048 
    local          mm_blockpcl.do_case.ncases i64 
    local          mm_blockpcl.do_case.opc i64 
    local          mm_blockpcl.do_case.ismult i64 
    local          mm_blockpcl.do_case.lab_abc i64 
    local          mm_blockpcl.do_case.lab_d i64 
    local          mm_blockpcl.do_case.fmult i64 
    local          mm_blockpcl.do_case.labnextwhen i64 
    local          mm_blockpcl.do_case.labstmtstart i64 
    local          mm_blockpcl.do_case.labelse i64 
    local          mm_blockpcl.do_case.w u64 
    local          mm_blockpcl.do_case.wt u64 
    local          mm_blockpcl.do_case.i i64 
    procentry                 
    push           mm_blockpcl.do_case.pindex u64 
    push           0          u64 
    jumpne         #19821     u64 
    setargs                   2 0
    push           0          u64 
    push           "EMPTY CASE NOT DONE" u64 
    callproc       &mm_support.gerror 
#19821: 
    startmult                 
    push           mm_blockpcl.do_case.p u64 
    push           48         
    pushptroff                i32 1 0
    push           0          i64 
    jumpeq         #19822     i64 
    push           mm_blockpcl.do_case.loopsw i64 
    jumptrue       #19822     i64 
    push           1          
    resetmult                 
    jump           #19823     
#19822: 
    push           0          
    endmult                   
#19823: 
    pop            mm_blockpcl.do_case.ismult i64 
    push           mm_blockpcl.do_case.loopsw i64 
    jumpfalse      #19824     i64 
    setargs                   0 0
    callfn         &mm_genpcl.definelabel i64 
    pop            mm_blockpcl.do_case.lab_abc i64 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_case.lab_d i64 
    setargs                   4 0
    push           mm_blockpcl.do_case.lab_d i64 
    push           mm_blockpcl.do_case.lab_abc i64 
    push           mm_blockpcl.do_case.lab_abc i64 
    push           mm_blockpcl.do_case.lab_abc i64 
    callproc       &mm_genpcl.stacklooplabels 
    jump           #19825     
#19824: 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_case.lab_d i64 
#19825: 
    push           mm_blockpcl.do_case.ismult i64 
    jumpfalse      #19826     i64 
    setargs                   2 0
    push           0          u64 
    push           191        i64 
    callproc       &pc_libpcl.pcl_gen 
#19826: 
    setargs                   1 0
    push           mm_blockpcl.do_case.pindex u64 
    callproc       &mm_blockpcl.evalunit 
    push           mm_blockpcl.casedepth i64 
    push           20         i64 
    jumplt         #19827     i64 
    setargs                   2 0
    push           0          u64 
    push           "case nested too deeply" u64 
    callproc       &mm_support.gerror 
#19827: 
    push           mm_blockpcl.do_case.p u64 
    push           &mm_blockpcl.casestmt 
    push           &mm_blockpcl.casedepth 
    incrload                  i64 1
    popptroff                 u64 8 -8
    push           0          i64 
    pop            mm_blockpcl.do_case.ncases i64 
    push           mm_blockpcl.do_case.pwhenthen u64 
    pop            mm_blockpcl.do_case.wt u64 
    jump           #19828     
#19829: 
    push           mm_blockpcl.do_case.wt u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_case.w u64 
    push           mm_blockpcl.do_case.ncases i64 
    push           256        i64 
    jumplt         #19830     i64 
    setargs                   2 0
    push           0          u64 
    push           "too many cases" u64 
    callproc       &mm_support.gerror 
#19830: 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    push           &mm_blockpcl.do_case.labtable 
    push           &mm_blockpcl.do_case.ncases 
    incrload                  i64 1
    popptroff                 i64 8 -8
    push           mm_blockpcl.do_case.wt u64 
    push           24         
    pushptroff                u64 1 0
    push           &mm_blockpcl.do_case.unittable 
    push           mm_blockpcl.do_case.ncases i64 
    popptroff                 u64 8 -8
    jump           #19831     
#19832: 
    setargs                   1 0
    push           mm_blockpcl.do_case.w u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    setargs                   1 0
    push           &mm_blockpcl.do_case.labtable 
    push           mm_blockpcl.do_case.ncases i64 
    pushptroff                i64 8 -8
    push           mm_blockpcl.do_case.w u64 
    push           40         
    storeptroff               i32 1 0
    callfn         &pc_libpcl.pcl_genlabel u64 
    push           71         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.do_case.w u64 
    callproc       &mm_genpcl.setmode_u 
    push           mm_blockpcl.do_case.w u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_case.w u64 
#19831: 
    push           mm_blockpcl.do_case.w u64 
    jumptrue       #19832     u64 
#19833: 
    push           mm_blockpcl.do_case.wt u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_case.wt u64 
#19828: 
    push           mm_blockpcl.do_case.wt u64 
    jumptrue       #19829     u64 
#19834: 
    setargs                   2 0
    push           0          u64 
    push           42         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.do_case.pindex u64 
    callproc       &mm_genpcl.setmode_u 
    setargs                   0 0
    callfn         &mm_genpcl.createfwdlabel i64 
    pop            mm_blockpcl.do_case.labelse i64 
    push           mm_blockpcl.do_case.labelse i64 
    push           &mm_blockpcl.caseelse 
    push           mm_blockpcl.casedepth i64 
    popptroff                 i64 8 -8
    setargs                   1 0
    push           mm_blockpcl.do_case.labelse i64 
    callproc       &mm_blockpcl.genjumpl 
#19835: 
    push           1          i64 
    pop            mm_blockpcl.do_case.i i64 
    push           mm_blockpcl.do_case.ncases i64 
    push           1          i64 
    jumplt         #19836     i64 
#19837: 
    setargs                   1 0
    push           &mm_blockpcl.do_case.labtable 
    push           mm_blockpcl.do_case.i i64 
    pushptroff                i64 8 -8
    callproc       &mm_genpcl.definefwdlabel 
    setargs                   2 0
    push           mm_blockpcl.do_case.isref i64 
    push           &mm_blockpcl.do_case.unittable 
    push           mm_blockpcl.do_case.i i64 
    pushptroff                u64 8 -8
    callproc       &mm_blockpcl.evalunitx 
    push           mm_blockpcl.do_case.ismult i64 
    jumpfalse      #19838     i64 
    setargs                   2 0
    push           0          u64 
    push           192        i64 
    callproc       &pc_libpcl.pcl_gen 
#19838: 
    push           mm_blockpcl.do_case.loopsw i64 
    jumpfalse      #19839     i64 
    setargs                   1 0
    push           mm_blockpcl.do_case.lab_abc i64 
    callproc       &mm_blockpcl.genjumpl 
    jump           #19840     
#19839: 
    setargs                   1 0
    push           mm_blockpcl.do_case.lab_d i64 
    callproc       &mm_blockpcl.genjumpl 
#19840: 
#19841: 
    forup          #19837     i64 1
    opnd           mm_blockpcl.do_case.i 
    opnd           mm_blockpcl.do_case.ncases 
#19836: 
    setargs                   1 0
    push           mm_blockpcl.do_case.labelse i64 
    callproc       &mm_genpcl.definefwdlabel 
    push           mm_blockpcl.do_case.pelse u64 
    jumpfalse      #19842     u64 
    setargs                   2 0
    push           mm_blockpcl.do_case.isref i64 
    push           mm_blockpcl.do_case.pelse u64 
    callproc       &mm_blockpcl.evalunitx 
    push           mm_blockpcl.do_case.ismult i64 
    jumpfalse      #19843     i64 
    setargs                   2 0
    push           0          u64 
    push           193        i64 
    callproc       &pc_libpcl.pcl_gen 
#19843: 
#19842: 
    push           mm_blockpcl.do_case.loopsw i64 
    jumpfalse      #19844     i64 
    setargs                   1 0
    push           mm_blockpcl.do_case.lab_abc i64 
    callproc       &mm_blockpcl.genjumpl 
    setargs                   1 0
    push           mm_blockpcl.do_case.lab_d i64 
    callproc       &mm_genpcl.definefwdlabel 
    push           &mm_genpcl.loopindex 
    decr                      i64 1
    jump           #19845     
#19844: 
    setargs                   1 0
    push           mm_blockpcl.do_case.lab_d i64 
    callproc       &mm_genpcl.definefwdlabel 
#19845: 
    push           &mm_blockpcl.casedepth 
    decr                      i64 1
#19846: 
    retproc                   
End


Proc mm_blockpcl.do_dotindex:
    param          mm_blockpcl.do_dotindex.p u64 
    param          mm_blockpcl.do_dotindex.a u64 
    param          mm_blockpcl.do_dotindex.b u64 
    procentry                 
    setargs                   1 0
    push           mm_blockpcl.do_dotindex.a u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   1 0
    push           mm_blockpcl.do_dotindex.b u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    push           0          u64 
    push           36         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           4          i64 
    callproc       &mm_genpcl.setmode 
#19848: 
    retproc                   
End


Proc mm_blockpcl.do_dotslice:
    param          mm_blockpcl.do_dotslice.p u64 
    param          mm_blockpcl.do_dotslice.a u64 
    param          mm_blockpcl.do_dotslice.b u64 
    procentry                 
    setargs                   1 0
    push           mm_blockpcl.do_dotslice.a u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   1 0
    push           mm_blockpcl.do_dotslice.b u64 
    push           16         
    pushptroff                u64 1 0
    callproc       &mm_blockpcl.evalunit 
    setargs                   1 0
    push           mm_blockpcl.do_dotslice.b u64 
    push           24         
    pushptroff                u64 1 0
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    push           0          u64 
    push           39         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           4          i64 
    callproc       &mm_genpcl.setmode 
#19850: 
    retproc                   
End


Proc mm_blockpcl.do_read:
    param          mm_blockpcl.do_read.p u64 
    param          mm_blockpcl.do_read.a u64 
    local          mm_blockpcl.do_read.m i64 
    procentry                 
    push           mm_blockpcl.do_read.p u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_blockpcl.do_read.m i64 
    push           mm_blockpcl.do_read.a u64 
    push           0          u64 
    jumpne         #19852     u64 
    push           mm_genpcl.pzero u64 
    pop            mm_blockpcl.do_read.a u64 
#19852: 
    push           &mm_decls.ttisinteger 
    push           mm_blockpcl.do_read.m i64 
    pushptroff                u8 1 0
    jumpfalse      #19853     i64 
    setargs                   4 0
    push           0          u64 
    push           0          u64 
    push           mm_blockpcl.do_read.a u64 
    push           24         i64 
    callproc       &mm_genpcl.pcl_gen_sysfn 
    jump           #19854     
#19853: 
    push           &mm_decls.ttisreal 
    push           mm_blockpcl.do_read.m i64 
    pushptroff                u8 1 0
    jumpfalse      #19855     i64 
    push           &mm_decls.ttsize 
    push           mm_blockpcl.do_read.m i64 
    pushptroff                i32 4 0
    push           8          i64 
    jumpne         #19855     i64 
    setargs                   4 0
    push           0          u64 
    push           0          u64 
    push           mm_blockpcl.do_read.a u64 
    push           25         i64 
    callproc       &mm_genpcl.pcl_gen_sysfn 
    jump           #19854     
#19855: 
    push           mm_blockpcl.do_read.m i64 
    push           10         i64 
    jumpne         #19856     i64 
    setargs                   4 0
    push           0          u64 
    push           0          u64 
    push           mm_blockpcl.do_read.a u64 
    push           26         i64 
    callproc       &mm_genpcl.pcl_gen_sysfn 
    jump           #19854     
#19856: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "STRMODE(M)=" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    setargs                   2 0
    push           1          i64 
    push           mm_blockpcl.do_read.m i64 
    callfn         &mm_lib.strmode u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           0          u64 
    push           "CAN'T READ THIS ITEM" u64 
    callproc       &mm_support.gerror 
#19854: 
    setargs                   1 0
    push           mm_blockpcl.do_read.p u64 
    callproc       &mm_genpcl.setmode_u 
#19857: 
    retproc                   
End


Proc mm_blockpcl.do_readln:
    param          mm_blockpcl.do_readln.a u64 
    procentry                 
    push           mm_blockpcl.do_readln.a u64 
    jumpfalse      #19859     u64 
    push           &mm_decls.ttbasetype 
    push           mm_blockpcl.do_readln.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           9          i64 
    jumpeq         #19860     i64 
    setargs                   2 0
    push           0          u64 
    push           "@dev no ref" u64 
    callproc       &mm_support.gerror 
#19860: 
    push           &mm_decls.ttbasetype 
    push           &mm_decls.tttarget 
    push           mm_blockpcl.do_readln.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    pushptroff                i32 4 0
    push           0          i64 
    casejumpeq     #19861     i64 0
    push           21         i64 
    casejumpeq     #19862     i64 0
    push           16         i64 
    casejumpeq     #19862     i64 0
    popstack                  i64 
    jump           #19863     
#19861: 
    setargs                   5 0
    push           0          i64 
    push           0          u64 
    push           0          u64 
    push           mm_blockpcl.do_readln.a u64 
    push           27         i64 
    callproc       &mm_genpcl.pcl_gen_sysproc 
    jump           #19864     
#19862: 
    setargs                   5 0
    push           0          i64 
    push           0          u64 
    push           0          u64 
    push           mm_blockpcl.do_readln.a u64 
    push           28         i64 
    callproc       &mm_genpcl.pcl_gen_sysproc 
    jump           #19864     
#19863: 
    setargs                   2 0
    push           0          u64 
    push           "rd@dev?"  u64 
    callproc       &mm_support.gerror 
#19864: 
    jump           #19865     
#19859: 
    setargs                   5 0
    push           0          i64 
    push           0          u64 
    push           0          u64 
    push           0          u64 
    push           29         i64 
    callproc       &mm_genpcl.pcl_gen_sysproc 
#19865: 
#19866: 
    retproc                   
End


Proc mm_blockpcl.docond:
    param          mm_blockpcl.docond.opc i64 
    param          mm_blockpcl.docond.p u64 
    param          mm_blockpcl.docond.lab i64 
    procentry                 
    setargs                   3 0
    push           mm_blockpcl.docond.lab i64 
    push           mm_blockpcl.docond.p u64 
    push           mm_blockpcl.docond.opc i64 
    callproc       &mm_blockpcl.genjumpcond 
#19868: 
    retproc                   
End


Proc mm_blockpcl.do_syscall:
    param          mm_blockpcl.do_syscall.p u64 
    param          mm_blockpcl.do_syscall.a u64 
    procentry                 
    push           mm_blockpcl.do_syscall.p u64 
    push           40         
    pushptroff                i16 1 0
    push           30         i64 
    casejumpeq     #19870     i64 0
    push           31         i64 
    casejumpeq     #19871     i64 0
    push           32         i64 
    casejumpeq     #19872     i64 0
    popstack                  i64 
    jump           #19873     
#19870: 
    setargs                   2 0
    push           0          u64 
    push           197        i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #19874     
#19871: 
    setargs                   1 0
    push           mm_blockpcl.do_syscall.a u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    push           0          u64 
    push           198        i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #19874     
#19872: 
    setargs                   1 0
    push           mm_blockpcl.do_syscall.a u64 
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    push           0          u64 
    push           199        i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #19874     
#19873: 
#19874: 
    setargs                   1 0
    push           4          i64 
    callproc       &mm_genpcl.setmode 
#19875: 
    retproc                   
End


Proc mm_blockpcl.do_slice:
    param          mm_blockpcl.do_slice.a u64 
    param          mm_blockpcl.do_slice.b u64 
    param          mm_blockpcl.do_slice.doref i64 
    procentry                 
    push           mm_blockpcl.do_slice.doref i64 
    jumpfalse      #19877     i64 
    setargs                   2 0
    push           0          u64 
    push           "DOSLICE/REF?" u64 
    callproc       &mm_support.gerror 
#19877: 
    push           mm_blockpcl.do_slice.b u64 
    push           0          u64 
    jumpne         #19878     u64 
    push           mm_blockpcl.do_slice.a u64 
    pushptr                   u8 
    push           1          i64 
    jumpne         #19879     i64 
    setargs                   2 0
    push           9          i64 
    setargs                   1 0
    push           mm_blockpcl.do_slice.a u64 
    push           16         
    pushptroff                u64 1 0
    callfn         &strlen    i64 
    callproc       &mm_genpcl.genpushint 
    jump           #19880     
#19879: 
    setargs                   2 0
    push           9          i64 
    push           &mm_decls.ttlength 
    push           mm_blockpcl.do_slice.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    callproc       &mm_genpcl.genpushint 
#19880: 
    setargs                   1 0
    push           mm_blockpcl.do_slice.a u64 
    callproc       &mm_blockpcl.evalarray 
    jump           #19881     
#19878: 
    push           mm_blockpcl.do_slice.b u64 
    push           16         
    pushptroff                u64 1 0
    pushptr                   u8 
    push           mm_blockpcl.do_slice.b u64 
    push           24         
    pushptroff                u64 1 0
    pushptr                   u8 
    jumpne         #19882     i64 
    push           mm_blockpcl.do_slice.b u64 
    push           24         
    pushptroff                u64 1 0
    pushptr                   u8 
    push           1          i64 
    jumpne         #19882     i64 
    setargs                   2 0
    push           9          i64 
    push           mm_blockpcl.do_slice.b u64 
    push           24         
    pushptroff                u64 1 0
    push           16         
    pushptroff                i64 1 0
    push           mm_blockpcl.do_slice.b u64 
    push           16         
    pushptroff                u64 1 0
    push           16         
    pushptroff                i64 1 0
    sub                       i64 
    push           1          i64 
    add                       i64 
    callproc       &mm_genpcl.genpushint 
    jump           #19883     
#19882: 
    setargs                   1 0
    push           mm_blockpcl.do_slice.b u64 
    push           24         
    pushptroff                u64 1 0
    callproc       &mm_blockpcl.evalunit 
    setargs                   1 0
    push           mm_blockpcl.do_slice.b u64 
    push           16         
    pushptroff                u64 1 0
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    push           0          u64 
    push           102        i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           4          i64 
    callproc       &mm_genpcl.setmode 
    setargs                   2 0
    push           9          i64 
    push           1          i64 
    callproc       &mm_genpcl.genpushint 
    setargs                   2 0
    push           0          u64 
    push           101        i64 
    callproc       &pc_libpcl.pcl_gen 
#19883: 
    setargs                   1 0
    push           4          i64 
    callproc       &mm_genpcl.setmode 
    setargs                   2 0
    push           mm_blockpcl.do_slice.b u64 
    push           16         
    pushptroff                u64 1 0
    push           mm_blockpcl.do_slice.a u64 
    callproc       &mm_blockpcl.do_indexref 
#19881: 
    setargs                   2 0
    push           0          u64 
    push           83         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           3          i64 
    callproc       &mm_genpcl.setmode 
#19884: 
    retproc                   
End


Proc mm_blockpcl.do_assignblock:
    param          mm_blockpcl.do_assignblock.p u64 
    param          mm_blockpcl.do_assignblock.a u64 
    param          mm_blockpcl.do_assignblock.b u64 
    procentry                 
    push           mm_blockpcl.do_assignblock.b u64 
    pushptr                   u8 
    push           19         i64 
    jumpne         #19886     i64 
    push           &mm_decls.ttbasetype 
    push           mm_blockpcl.do_assignblock.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           11         i64 
    jumpne         #19887     i64 
    setargs                   2 0
    push           mm_blockpcl.do_assignblock.b u64 
    push           mm_blockpcl.do_assignblock.a u64 
    callproc       &mm_blockpcl.do_assignarray 
    jump           #19888     
#19887: 
    setargs                   2 0
    push           mm_blockpcl.do_assignblock.b u64 
    push           mm_blockpcl.do_assignblock.a u64 
    callproc       &mm_blockpcl.do_assignrecord 
#19888: 
    jump           #19889     
#19886: 
    setargs                   2 0
    push           0          u64 
    push           "ASSIGN BLOCK" u64 
    callproc       &mm_support.gerror 
#19889: 
#19890: 
    retproc                   
End


Proc mm_blockpcl.do_assignarray:
    param          mm_blockpcl.do_assignarray.a u64 
    param          mm_blockpcl.do_assignarray.b u64 
    local          mm_blockpcl.do_assignarray.passign u64 
    local          mm_blockpcl.do_assignarray.pindex u64 
    local          mm_blockpcl.do_assignarray.pconst u64 
    local          mm_blockpcl.do_assignarray.q u64 
    local          mm_blockpcl.do_assignarray.index i64 
    procentry                 
    push           &mm_decls.ttbasetype 
    push           &mm_decls.tttarget 
    push           mm_blockpcl.do_assignarray.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    pushptroff                i32 4 0
    push           16         i64 
    jumpne         #19892     i64 
    setargs                   2 0
    push           0          u64 
    push           "Assignment not suitable for []char type" u64 
    callproc       &mm_support.gerror 
#19892: 
    setargs                   2 0
    push           4          i64 
    push           1          u64 
    callfn         &mm_lib.createconstunit u64 
    pop            mm_blockpcl.do_assignarray.pconst u64 
    setargs                   3 0
    push           mm_blockpcl.do_assignarray.pconst u64 
    push           mm_blockpcl.do_assignarray.a u64 
    push           48         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_blockpcl.do_assignarray.pindex u64 
    setargs                   3 0
    push           mm_blockpcl.do_assignarray.b u64 
    push           16         
    pushptroff                u64 1 0
    push           mm_blockpcl.do_assignarray.pindex u64 
    push           29         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_blockpcl.do_assignarray.passign u64 
    push           &mm_decls.tttarget 
    push           mm_blockpcl.do_assignarray.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           mm_blockpcl.do_assignarray.pindex u64 
    push           48         
    storeptroff               i32 1 0
    push           mm_blockpcl.do_assignarray.passign u64 
    push           48         
    popptroff                 i32 1 0
    push           &mm_decls.ttlower 
    push           mm_blockpcl.do_assignarray.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    pop            mm_blockpcl.do_assignarray.index i64 
    push           mm_blockpcl.do_assignarray.b u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_assignarray.q u64 
    jump           #19893     
#19894: 
    push           mm_blockpcl.do_assignarray.index i64 
    push           mm_blockpcl.do_assignarray.pconst u64 
    push           16         
    popptroff                 i64 1 0
    push           1          i64 
    push           mm_blockpcl.do_assignarray.pconst u64 
    push           59         
    popptroff                 u8 1 0
    push           mm_blockpcl.do_assignarray.q u64 
    push           mm_blockpcl.do_assignarray.passign u64 
    push           24         
    popptroff                 u64 1 0
    setargs                   1 0
    push           mm_blockpcl.do_assignarray.passign u64 
    callproc       &mm_blockpcl.evalunit 
    push           &mm_blockpcl.do_assignarray.index 
    incr                      i64 1
    push           mm_blockpcl.do_assignarray.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_assignarray.q u64 
#19893: 
    push           mm_blockpcl.do_assignarray.q u64 
    jumptrue       #19894     u64 
#19895: 
#19896: 
    retproc                   
End


Proc mm_blockpcl.do_assignrecord:
    param          mm_blockpcl.do_assignrecord.a u64 
    param          mm_blockpcl.do_assignrecord.b u64 
    local          mm_blockpcl.do_assignrecord.passign u64 
    local          mm_blockpcl.do_assignrecord.pdot u64 
    local          mm_blockpcl.do_assignrecord.pfield u64 
    local          mm_blockpcl.do_assignrecord.q u64 
    local          mm_blockpcl.do_assignrecord.m i64 
    local          mm_blockpcl.do_assignrecord.fieldtype i64 
    local          mm_blockpcl.do_assignrecord.d u64 
    local          mm_blockpcl.do_assignrecord.e u64 
    procentry                 
    setargs                   1 0
    push           3          i64 
    callfn         &mm_lib.createunit0 u64 
    pop            mm_blockpcl.do_assignrecord.pfield u64 
    setargs                   3 0
    push           mm_blockpcl.do_assignrecord.pfield u64 
    push           mm_blockpcl.do_assignrecord.a u64 
    push           51         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_blockpcl.do_assignrecord.pdot u64 
    setargs                   3 0
    push           mm_blockpcl.do_assignrecord.b u64 
    push           16         
    pushptroff                u64 1 0
    push           mm_blockpcl.do_assignrecord.pdot u64 
    push           29         i64 
    callfn         &mm_lib.createunit2 u64 
    pop            mm_blockpcl.do_assignrecord.passign u64 
    push           &mm_decls.tttarget 
    push           mm_blockpcl.do_assignrecord.a u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    push           mm_blockpcl.do_assignrecord.pdot u64 
    push           48         
    storeptroff               i32 1 0
    push           mm_blockpcl.do_assignrecord.passign u64 
    push           48         
    popptroff                 i32 1 0
    push           mm_blockpcl.do_assignrecord.a u64 
    push           48         
    pushptroff                i32 1 0
    pop            mm_blockpcl.do_assignrecord.m i64 
    push           &mm_decls.ttnamedef 
    push           mm_blockpcl.do_assignrecord.m i64 
    pushptroff                u64 8 0
    pop            mm_blockpcl.do_assignrecord.d u64 
    push           mm_blockpcl.do_assignrecord.d u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_assignrecord.e u64 
    push           mm_blockpcl.do_assignrecord.b u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_assignrecord.q u64 
    jump           #19898     
#19899: 
    push           mm_blockpcl.do_assignrecord.e u64 
    push           78         
    pushptroff                u8 1 0
    push           14         i64 
    jumpne         #19900     i64 
    push           mm_blockpcl.do_assignrecord.e u64 
    push           72         
    pushptroff                i32 1 0
    push           30         i64 
    jumpeq         #19900     i64 
    push           mm_blockpcl.do_assignrecord.e u64 
    push           72         
    pushptroff                i32 1 0
    pop            mm_blockpcl.do_assignrecord.fieldtype i64 
    push           mm_blockpcl.do_assignrecord.e u64 
    push           mm_blockpcl.do_assignrecord.pfield u64 
    push           16         
    popptroff                 u64 1 0
    push           mm_blockpcl.do_assignrecord.fieldtype i64 
    push           mm_blockpcl.do_assignrecord.pdot u64 
    push           48         
    storeptroff               i32 1 0
    push           mm_blockpcl.do_assignrecord.pfield u64 
    push           48         
    storeptroff               i32 1 0
    push           mm_blockpcl.do_assignrecord.passign u64 
    push           48         
    popptroff                 i32 1 0
    push           mm_blockpcl.do_assignrecord.q u64 
    push           mm_blockpcl.do_assignrecord.passign u64 
    push           24         
    popptroff                 u64 1 0
    push           mm_blockpcl.do_assignrecord.e u64 
    push           84         
    pushptroff                i32 1 0
    push           mm_blockpcl.do_assignrecord.pdot u64 
    push           40         
    popptroff                 u32 1 0
    setargs                   1 0
    push           mm_blockpcl.do_assignrecord.passign u64 
    callproc       &mm_blockpcl.evalunit 
    push           mm_blockpcl.do_assignrecord.q u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_assignrecord.q u64 
#19900: 
    push           mm_blockpcl.do_assignrecord.e u64 
    push           32         
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_assignrecord.e u64 
#19898: 
    push           mm_blockpcl.do_assignrecord.e u64 
    jumptrue       #19899     u64 
#19901: 
#19902: 
    retproc                   
End


Proc mm_blockpcl.pushrhs:
    param          mm_blockpcl.pushrhs.a u64 
    procentry                 
    push           mm_blockpcl.pushrhs.a u64 
    push           0          u64 
    jumpne         #19904     u64 
    jump           #19905     
#19904: 
    setargs                   1 0
    push           mm_blockpcl.pushrhs.a u64 
    push           8          
    pushptroff                u64 1 0
    callproc       &mm_blockpcl.pushrhs 
    setargs                   1 0
    push           mm_blockpcl.pushrhs.a u64 
    callproc       &mm_blockpcl.evalunit 
#19905: 
    retproc                   
End


Proc mm_blockpcl.do_multassign:
    param          mm_blockpcl.do_multassign.a u64 
    param          mm_blockpcl.do_multassign.b u64 
    local          mm_blockpcl.do_multassign.p u64 
    local          mm_blockpcl.do_multassign.nlhs i64 
    local          mm_blockpcl.do_multassign.nrhs i64 
    local          mm_blockpcl.do_multassign.d u64 
    local          mm_blockpcl.do_multassign.i i64 
    procentry                 
    push           mm_blockpcl.do_multassign.a u64 
    push           40         
    pushptroff                u32 1 0
    pop            mm_blockpcl.do_multassign.nlhs i64 
    push           mm_blockpcl.do_multassign.b u64 
    pushptr                   u8 
    push           31         i64 
    jumpne         #19907     i64 
    setargs                   1 0
    push           mm_blockpcl.do_multassign.b u64 
    callproc       &mm_blockpcl.evalunit 
    push           mm_blockpcl.do_multassign.b u64 
    push           16         
    pushptroff                u64 1 0
    pushptr                   u8 
    push           3          i64 
    jumpeq         #19908     i64 
    setargs                   2 0
    push           0          u64 
    push           "multassign from fn: not simple fn" u64 
    callproc       &mm_support.gerror 
#19908: 
    push           mm_blockpcl.do_multassign.b u64 
    push           16         
    pushptroff                u64 1 0
    push           16         
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_multassign.d u64 
    push           mm_blockpcl.do_multassign.d u64 
    push           116        
    pushptroff                u8 1 0
    pop            mm_blockpcl.do_multassign.nrhs i64 
    push           mm_blockpcl.do_multassign.a u64 
    pushptr                   u8 
    push           19         i64 
    jumpeq         #19909     i64 
    push           mm_blockpcl.do_multassign.a u64 
    push           8          
    pushptroff                u64 1 0
    jumpfalse      #19910     u64 
    setargs                   2 0
    push           0          u64 
    push           "MULTASS?" u64 
    callproc       &mm_support.gerror 
#19910: 
    push           1          i64 
    pop            mm_blockpcl.do_multassign.nlhs i64 
    jump           #19911     
#19909: 
    push           mm_blockpcl.do_multassign.a u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_multassign.a u64 
#19911: 
    jump           #19912     
#19907: 
    push           mm_blockpcl.do_multassign.b u64 
    push           40         
    pushptroff                u32 1 0
    pop            mm_blockpcl.do_multassign.nrhs i64 
    setargs                   1 0
    push           mm_blockpcl.do_multassign.b u64 
    push           16         
    pushptroff                u64 1 0
    callproc       &mm_blockpcl.pushrhs 
    push           mm_blockpcl.do_multassign.a u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_multassign.a u64 
#19912: 
#19913: 
    push           mm_blockpcl.do_multassign.a u64 
    pushptr                   u8 
    switch         #19914     3 120
    opnd           #19915     
#19914: 
    switchlabel    #19916     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19917     
    switchlabel    #19915     
    switchlabel    #19917     
    switchlabel    #19917     
    switchlabel    #19915     
    switchlabel    #19918     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19919     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19920     
    switchlabel    #19920     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19920     
    switchlabel    #19915     
    switchlabel    #19920     
    switchlabel    #19915     
    switchlabel    #19915     
    switchlabel    #19920     
    endswitch                 
#19916: 
    setargs                   2 0
    setargs                   1 0
    push           mm_blockpcl.do_multassign.a u64 
    callfn         &mm_genpcl.genmem_u u64 
    push           22         i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #19921     
#19917: 
    setargs                   2 0
    push           0          u64 
    push           mm_blockpcl.do_multassign.a u64 
    callproc       &mm_blockpcl.evalref 
    setargs                   2 0
    setargs                   2 0
    push           9          i64 
    push           0          i64 
    callfn         &pc_libpcl.pcl_genint u64 
    push           34         i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #19921     
#19919: 
    setargs                   1 0
    push           mm_blockpcl.do_multassign.a u64 
    push           16         
    pushptroff                u64 1 0
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    setargs                   2 0
    push           9          i64 
    push           0          i64 
    callfn         &pc_libpcl.pcl_genint u64 
    push           34         i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #19921     
#19920: 
    setargs                   2 0
    push           0          u64 
    push           mm_blockpcl.do_multassign.a u64 
    callproc       &mm_blockpcl.evalref 
    setargs                   2 0
    setargs                   2 0
    push           9          i64 
    push           0          i64 
    callfn         &pc_libpcl.pcl_genint u64 
    push           34         i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #19921     
#19918: 
    setargs                   2 0
    push           0          u64 
    push           mm_blockpcl.do_multassign.a u64 
    push           16         
    pushptroff                u64 1 0
    callproc       &mm_blockpcl.evalref 
    setargs                   1 0
    push           mm_blockpcl.do_multassign.a u64 
    push           24         
    pushptroff                u64 1 0
    callproc       &mm_blockpcl.evalunit 
    setargs                   2 0
    push           0          u64 
    push           37         i64 
    callproc       &pc_libpcl.pcl_gen 
    jump           #19921     
#19915: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &mm_tables.jtagnames 
    push           mm_blockpcl.do_multassign.a u64 
    pushptr                   u8 
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           0          u64 
    push           "Bad mult assign element" u64 
    callproc       &mm_support.gerror 
#19921: 
    setargs                   1 0
    push           mm_blockpcl.do_multassign.a u64 
    callproc       &mm_genpcl.setmode_u 
    push           mm_blockpcl.do_multassign.a u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_multassign.a u64 
#19922: 
    push           mm_blockpcl.do_multassign.a u64 
    push           0          u64 
    jumpne         #19913     u64 
#19923: 
    setargs                   1 0
    push           mm_blockpcl.do_multassign.b u64 
    callfn         &mm_lib.getprocretmodes u64 
    pop            mm_blockpcl.do_multassign.d u64 
#19924: 
    push           mm_blockpcl.do_multassign.nlhs i64 
    push           1          i64 
    add                       i64 
    pop            mm_blockpcl.do_multassign.i i64 
    push           mm_blockpcl.do_multassign.i i64 
    push           mm_blockpcl.do_multassign.nrhs i64 
    jumpgt         #19925     i64 
#19926: 
    setargs                   2 0
    push           0          u64 
    push           42         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           &mm_decls.ttmult 
    push           mm_blockpcl.do_multassign.d u64 
    push           72         
    pushptroff                i32 1 0
    pushptroff                u64 8 0
    push           mm_blockpcl.do_multassign.i i64 
    pushptroff                i32 4 -4
    callproc       &mm_genpcl.setmode 
#19927: 
    forup          #19926     i64 1
    opnd           mm_blockpcl.do_multassign.i 
    opnd           mm_blockpcl.do_multassign.nrhs 
#19925: 
#19928: 
    retproc                   
End


Proc mm_blockpcl.do_recase:
    param          mm_blockpcl.do_recase.p u64 
    param          mm_blockpcl.do_recase.a u64 
    local          mm_blockpcl.do_recase.q u64 
    local          mm_blockpcl.do_recase.wt u64 
    local          mm_blockpcl.do_recase.w u64 
    local          mm_blockpcl.do_recase.destlab i64 
    local          mm_blockpcl.do_recase.casevalue i64 
    procentry                 
    push           mm_blockpcl.casedepth i64 
    push           0          i64 
    jumpne         #19930     i64 
    setargs                   2 0
    push           0          u64 
    push           "recase outside case stmt" u64 
    callproc       &mm_support.gerror 
#19930: 
    push           mm_blockpcl.do_recase.a u64 
    jumpfalse      #19931     u64 
    push           mm_blockpcl.do_recase.a u64 
    push           16         
    pushptroff                i64 1 0
    pop            mm_blockpcl.do_recase.casevalue i64 
    jump           #19932     
#19931: 
    setargs                   1 0
    push           &mm_blockpcl.caseelse 
    push           mm_blockpcl.casedepth i64 
    pushptroff                i64 8 -8
    callproc       &mm_blockpcl.genjumpl 
#19932: 
    push           &mm_blockpcl.casestmt 
    push           mm_blockpcl.casedepth i64 
    pushptroff                u64 8 -8
    pop            mm_blockpcl.do_recase.q u64 
    push           0          i64 
    pop            mm_blockpcl.do_recase.destlab i64 
    push           mm_blockpcl.do_recase.q u64 
    push           24         
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_recase.wt u64 
    jump           #19933     
#19934: 
    push           mm_blockpcl.do_recase.wt u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_recase.w u64 
    jump           #19935     
#19936: 
    push           mm_blockpcl.do_recase.w u64 
    pushptr                   u8 
    push           1          i64 
    jumpne         #19937     i64 
    push           &mm_decls.ttisinteger 
    push           mm_blockpcl.do_recase.w u64 
    push           48         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    jumpfalse      #19937     i64 
    push           mm_blockpcl.do_recase.w u64 
    push           16         
    pushptroff                i64 1 0
    push           mm_blockpcl.do_recase.casevalue i64 
    jumpne         #19937     i64 
    push           mm_blockpcl.do_recase.w u64 
    push           40         
    pushptroff                i32 1 0
    pop            mm_blockpcl.do_recase.destlab i64 
    jump           #19938     
#19937: 
    push           mm_blockpcl.do_recase.w u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_recase.w u64 
#19935: 
    push           mm_blockpcl.do_recase.w u64 
    jumptrue       #19936     u64 
#19939: 
    push           mm_blockpcl.do_recase.wt u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_blockpcl.do_recase.wt u64 
#19933: 
    push           mm_blockpcl.do_recase.wt u64 
    jumptrue       #19934     u64 
#19938: 
    push           mm_blockpcl.do_recase.destlab i64 
    push           0          i64 
    jumpne         #19940     i64 
    setargs                   1 0
    push           &mm_blockpcl.caseelse 
    push           mm_blockpcl.casedepth i64 
    pushptroff                i64 8 -8
    callproc       &mm_blockpcl.genjumpl 
    jump           #19941     
#19940: 
    setargs                   1 0
    push           mm_blockpcl.do_recase.destlab i64 
    callproc       &mm_blockpcl.genjumpl 
#19941: 
#19942: 
    retproc                   
End


Proc mm_blockpcl.do_empty:
    param          mm_blockpcl.do_empty.p u64 
    param          mm_blockpcl.do_empty.a u64 
    procentry                 
    setargs                   1 0
    push           mm_blockpcl.do_empty.a u64 
    callproc       &mm_blockpcl.evallv 
    setargs                   2 0
    push           0          u64 
    push           87         i64 
    callproc       &pc_libpcl.pcl_gen 
    setargs                   1 0
    push           mm_blockpcl.do_empty.a u64 
    callproc       &mm_genpcl.setmode_u 
#19944: 
    retproc                   
End


Proc mm_blockpcl.do_typeconst:
    param          mm_blockpcl.do_typeconst.p u64 
    procentry                 
    setargs                   2 0
    push           4          i64 
    push           mm_blockpcl.do_typeconst.p u64 
    push           16         
    pushptroff                i64 1 0
    callproc       &mm_genpcl.genpushint 
#19946: 
    retproc                   
End


Proc mm_blockpcl.condtopclop: i64
    param          mm_blockpcl.condtopclop.cond i64 
    param          mm_blockpcl.condtopclop.baseop i64 
    procentry                 
    push           mm_blockpcl.condtopclop.baseop i64 
    push           mm_blockpcl.condtopclop.cond i64 
    push           116        i64 
    sub                       i64 
    add                       i64 
    setret                    i64 
    jump           #19948     
#19948: 
    retfn                     i64 
End


Proc pc_win64.pcl_genmcl:: i64
    param          pc_win64.pcl_genmcl.optim i64 
    procentry                 
    setargs                   0 0
    callproc       &pc_libpcl.fixuppcl 
    setargs                   1 0
    push           pc_win64.pcl_genmcl.optim i64 
    callproc       &pc_genmcl.genmcl 
    push           1          i64 
    setret                    i64 
    jump           #19950     
#19950: 
    retfn                     i64 
End


Proc pc_win64.pcl_writeasmfile:: i64
    param          pc_win64.pcl_writeasmfile.filename u64 
    param          pc_win64.pcl_writeasmfile.optim i64 
    procentry                 
    setargs                   1 0
    push           pc_win64.pcl_writeasmfile.optim i64 
    callproc       &pc_win64.pcl_genmcl 
    setargs                   1 0
    push           pc_win64.pcl_writeasmfile.filename u64 
    callproc       &pc_win64.writeasmfile 
    push           1          i64 
    setret                    i64 
    jump           #19952     
#19952: 
    retfn                     i64 
End


Proc pc_win64.pcl_getasmstring:: u64
    param          pc_win64.pcl_getasmstring.optim i64 
    local          pc_win64.pcl_getasmstring.asmstr u64 
    procentry                 
    setargs                   1 0
    push           pc_win64.pcl_getasmstring.optim i64 
    callproc       &pc_win64.pcl_genmcl 
    setargs                   0 0
    callfn         &pc_libmcl.getmclstr u64 
    pop            pc_win64.pcl_getasmstring.asmstr u64 
    push           pc_win64.pcl_getasmstring.asmstr u64 
    pushptr                   u64 
    setret                    u64 
    jump           #19954     
#19954: 
    retfn                     u64 
End


Proc pc_win64.pcl_writeexefile:: i64
    param          pc_win64.pcl_writeexefile.filename u64 
    param          pc_win64.pcl_writeexefile.optim i64 
    procentry                 
    setargs                   1 0
    push           pc_win64.pcl_writeexefile.optim i64 
    callproc       &pc_win64.pcl_genmcl 
    setargs                   3 0
    push           0          i64 
    push           pc_win64.pcl_writeexefile.optim i64 
    push           pc_win64.pcl_writeexefile.filename u64 
    callfn         &pc_win64.writeexefile i64 
    setret                    i64 
    jump           #19956     
#19956: 
    retfn                     i64 
End


Proc pc_win64.pcl_writedllfile:: i64
    param          pc_win64.pcl_writedllfile.filename u64 
    param          pc_win64.pcl_writedllfile.optim i64 
    procentry                 
    setargs                   1 0
    push           pc_win64.pcl_writedllfile.optim i64 
    callproc       &pc_win64.pcl_genmcl 
    setargs                   3 0
    push           1          i64 
    push           pc_win64.pcl_writedllfile.optim i64 
    push           pc_win64.pcl_writedllfile.filename u64 
    callfn         &pc_win64.writeexefile i64 
    setret                    i64 
    jump           #19958     
#19958: 
    retfn                     i64 
End


Proc pc_win64.writeexefile: i64
    param          pc_win64.writeexefile.filename u64 
    param          pc_win64.writeexefile.optim i64 
    param          pc_win64.writeexefile.gendll i64 
    local          pc_win64.writeexefile.asmfilename block:300 
    local          pc_win64.writeexefile.str block:300 
    procentry                 
    setargs                   0 0
    callproc       &pc_genss.genss 
    setargs                   0 0
    callproc       &pc_writeexe.initsectiontable 
    setargs                   3 0
    push           pc_win64.writeexefile.gendll i64 
    push           pc_win64.writeexefile.filename u64 
    push           0          u64 
    callproc       &pc_writeexe.genexe 
    setargs                   2 0
    push           pc_win64.writeexefile.gendll i64 
    push           pc_win64.writeexefile.filename u64 
    callproc       &pc_writeexe.writeexe 
    push           1          i64 
    setret                    i64 
    jump           #19960     
#19960: 
    retfn                     i64 
End


Proc pc_win64.oldwriteexefile: i64
    param          pc_win64.oldwriteexefile.filename u64 
    param          pc_win64.oldwriteexefile.optim i64 
    param          pc_win64.oldwriteexefile.gendll i64 
    local          pc_win64.oldwriteexefile.asmfilename block:300 
    local          pc_win64.oldwriteexefile.str block:300 
    procentry                 
    setargs                   2 0
    setargs                   2 0
    push           "asm"      u64 
    push           pc_win64.oldwriteexefile.filename u64 
    callfn         &mlibp.changeext u64 
    push           &pc_win64.oldwriteexefile.asmfilename 
    callproc       &strcpy    
    setargs                   2 0
    push           pc_win64.oldwriteexefile.optim i64 
    push           &pc_win64.oldwriteexefile.asmfilename 
    callfn         &pc_win64.pcl_writeasmfile i64 
    jumptrue       #19962     i64 
    push           0          i64 
    setret                    i64 
    jump           #19963     
#19962: 
    setargs                   1 0
    push           &pc_win64.oldwriteexefile.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "/m/aa # #" u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   1 0
    push           &pc_win64.oldwriteexefile.asmfilename 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    startmult                 
    push           pc_win64.oldwriteexefile.gendll i64 
    jumpfalse      #19964     i64 
    push           "-dll"     u64 
    resetmult                 
    jump           #19965     
#19964: 
    push           "-exe"     u64 
    endmult                   
#19965: 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    startmult                 
    setargs                   1 0
    push           &pc_win64.oldwriteexefile.str 
    callfn         &system    i32 
    push           0          i64 
    jumpne         #19966     i64 
    push           1          i64 
    resetmult                 
    jump           #19967     
#19966: 
    push           0          i64 
    endmult                   
#19967: 
    setret                    i64 
    jump           #19963     
#19963: 
    retfn                     i64 
End


Proc pc_win64.writeasmfile:
    param          pc_win64.writeasmfile.filename u64 
    local          pc_win64.writeasmfile.asmstr u64 
    procentry                 
    setargs                   0 0
    callfn         &pc_libmcl.getmclstr u64 
    pop            pc_win64.writeasmfile.asmstr u64 
    setargs                   2 0
    push           pc_win64.writeasmfile.asmstr u64 
    push           pc_win64.writeasmfile.filename u64 
    callproc       &pc_libmcl.writegsfile 
    setargs                   1 0
    push           pc_win64.writeasmfile.asmstr u64 
    callproc       &mlibp.gs_free 
#19969: 
    retproc                   
End


Proc pc_win64.pcl_readrts:: i64
    param          pc_win64.pcl_readrts.filename u64 
    procentry                 
    push           pc_libpcl.maxuserlabel i64 
    jumpfalse      #19971     i64 
    push           pc_libpcl.maxuserlabel i64 
    pop            pc_libpcl.labelnooffset i64 
    jump           #19972     
#19971: 
    push           &pc_libpcl.labelno 
    incrload                  i64 1
    pop            pc_libpcl.labelnooffset i64 
#19972: 
    setargs                   0 0
    callfn         &pc_parse.parse_readrts i64 
    jumptrue       #19973     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "No RTS file found" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           0          i64 
    setret                    i64 
    jump           #19974     
#19973: 
    push           1          i64 
    setret                    i64 
    jump           #19974     
#19974: 
    retfn                     i64 
End


Proc pc_win64.pcl_endprog::
    param          pc_win64.pcl_endprog.fixup i64 
    param          pc_win64.pcl_endprog.dorts i64 
    procentry                 
    push           pc_win64.pcl_endprog.dorts i64 
    jumpfalse      #19976     i64 
    setargs                   1 0
    push           "rts.pcl"  u64 
    callproc       &pc_win64.pcl_readrts 
#19976: 
    setargs                   1 0
    push           pc_win64.pcl_endprog.fixup i64 
    callproc       &pc_libpcl.pcl_end 
#19977: 
    retproc                   
End


Proc pc_win64.pcl_showss::
    param          pc_win64.pcl_showss.filename u64 
    param          pc_win64.pcl_showss.fexe i64 
    local          pc_win64.pcl_showss.ssstr u64 
    procentry                 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_init 
    setargs                   1 0
    push           pc_win64.pcl_showss.fexe i64 
    callfn         &pc_writess.writessdata u64 
    pop            pc_win64.pcl_showss.ssstr u64 
    setargs                   2 0
    push           pc_win64.pcl_showss.ssstr u64 
    push           pc_win64.pcl_showss.filename u64 
    callproc       &pc_libmcl.writegsfile 
#19979: 
    retproc                   
End


Proc pc_win64.pcl_writeclangfile::
    param          pc_win64.pcl_writeclangfile.filename u64 
    procentry                 
#19981: 
    retproc                   
End


Proc pc_writeexe.writeexe:
    param          pc_writeexe.writeexe.outfile u64 
    param          pc_writeexe.writeexe.dodll i64 
    local          pc_writeexe.writeexe.header block:20 
    local          pc_writeexe.writeexe.optheader block:240 
    local          pc_writeexe.writeexe.offset i64 
    local          pc_writeexe.writeexe.i i64 
    local          pc_writeexe.writeexe.aa i64 
    procentry                 
    push           pc_writeexe.writeexe.outfile u64 
    pop            pc_writeexe.dllfilename u64 
    push           pc_writeexe.writeexe.dodll i64 
    pop            pc_writeexe.isdll i64 
    setargs                   1 0
    push           pc_writeexe.filesize i64 
    callfn         &mlibp.pcm_allocz u64 
    store          pc_writeexe.dataptr u64 
    pop            pc_writeexe.datastart u64 
    setargs                   0 0
    callproc       &pc_writeexe.writedosstub 
    setargs                   0 0
    callproc       &pc_writeexe.writepesig 
    setargs                   0 0
    callproc       &pc_writeexe.writefileheader 
    setargs                   0 0
    callproc       &pc_writeexe.writeoptheader 
#19983: 
    push           1          i64 
    pop            pc_writeexe.writeexe.i i64 
    push           pc_writeexe.nsections i64 
    push           1          i64 
    jumplt         #19984     i64 
#19985: 
    setargs                   1 0
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.writeexe.i i64 
    addrefoff                 block:72 72 -72
    callproc       &pc_writeexe.writesectionheader 
#19986: 
    forup          #19985     i64 1
    opnd           pc_writeexe.writeexe.i 
    opnd           pc_writeexe.nsections 
#19984: 
    setargs                   1 0
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           32         
    pushptroff                i64 1 0
    callproc       &pc_writeexe.writepadding 
#19987: 
    push           1          i64 
    pop            pc_writeexe.writeexe.i i64 
    push           pc_writeexe.nsections i64 
    push           1          i64 
    jumplt         #19988     i64 
#19989: 
    setargs                   1 0
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.writeexe.i i64 
    addrefoff                 block:72 72 -72
    callproc       &pc_writeexe.writesectiondata 
#19990: 
    forup          #19989     i64 1
    opnd           pc_writeexe.writeexe.i 
    opnd           pc_writeexe.nsections 
#19988: 
    setargs                   3 0
    push           pc_writeexe.dataptr u64 
    push           pc_writeexe.datastart u64 
    subref                    i64 1
    push           pc_writeexe.datastart u64 
    push           pc_writeexe.writeexe.outfile u64 
    callfn         &mlibp.writefile i64 
    push           0          i64 
    jumpne         #19991     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Error writing exe file (possibly still running)" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           1          i64 
    stop                      
#19991: 
#19992: 
    retproc                   
End


Proc pc_writeexe.genexe:
    param          pc_writeexe.genexe.entrypoint u64 
    param          pc_writeexe.genexe.outfile u64 
    param          pc_writeexe.genexe.dodll i64 
    procentry                 
    push           pc_writeexe.genexe.outfile u64 
    pop            pc_writeexe.dllfilename u64 
    push           pc_writeexe.genexe.dodll i64 
    pop            pc_writeexe.isdll i64 
    setargs                   0 0
    callproc       &pc_writeexe.setuplibfiles 
    startmult                 
    push           pc_writeexe.isdll i64 
    jumpfalse      #19994     i64 
    push           1713635328 i64 
    resetmult                 
    jump           #19995     
#19994: 
    push           4194304    i64 
    endmult                   
#19995: 
    pop            pc_writeexe.imagebase i64 
    push           pc_writeexe.genexe.entrypoint u64 
    pop            pc_writeexe.userentrypoint u64 
    setargs                   0 0
    callproc       &pc_writeexe.loadlibs 
    setargs                   0 0
    callproc       &pc_writeexe.scanst 
    setargs                   0 0
    callproc       &pc_writeexe.getoffsets 
    setargs                   1 0
    push           &pc_writeexe.sectiontable 
    push           0          
    addrefoff                 u8 1 0
    callproc       &pc_writeexe.relocdata 
    setargs                   1 0
    push           &pc_writeexe.sectiontable 
    push           72         
    addrefoff                 u8 1 0
    callproc       &pc_writeexe.relocdata 
#19996: 
    retproc                   
End


Proc pc_writeexe.loadlibs:
    local          pc_writeexe.loadlibs.i i64 
    local          pc_writeexe.loadlibs.hinst i64 
    local          pc_writeexe.loadlibs.file u64 
    local          pc_writeexe.loadlibs.filename block:300 
    procentry                 
#19998: 
    push           1          i64 
    pop            pc_writeexe.loadlibs.i i64 
    push           pci_mcl.npsearchlibs i64 
    push           1          i64 
    jumplt         #19999     i64 
#20000: 
    setargs                   2 0
    push           &pci_mcl.psearchlibs 
    push           pc_writeexe.loadlibs.i i64 
    pushptroff                u64 8 -8
    push           &pc_writeexe.loadlibs.filename 
    callproc       &strcpy    
    setargs                   1 0
    push           &pc_writeexe.loadlibs.filename 
    callfn         &mwindowsp.os_getdllinst i64 
    pop            pc_writeexe.loadlibs.hinst i64 
    push           pc_writeexe.loadlibs.hinst i64 
    push           0          i64 
    jumpne         #20001     i64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "File:"    u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           &pc_writeexe.loadlibs.filename 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Can't load search lib" u64 
    callproc       &pci_mcl.axerror 
#20001: 
    push           pc_writeexe.loadlibs.hinst i64 
    push           &pc_writeexe.libinsttable 
    push           pc_writeexe.loadlibs.i i64 
    popptroff                 i64 8 -8
    setargs                   1 0
    push           &pc_writeexe.loadlibs.filename 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &pc_writeexe.libinstnames 
    push           pc_writeexe.loadlibs.i i64 
    popptroff                 u64 8 -8
#20002: 
    forup          #20000     i64 1
    opnd           pc_writeexe.loadlibs.i 
    opnd           pci_mcl.npsearchlibs 
#19999: 
#20003: 
    retproc                   
End


Proc pc_writeexe.initsectiontable:
    procentry                 
    push           ".text"    u64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           8          
    popptroff                 u64 1 0
    push           1          i64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           16         
    popptroff                 i64 1 0
    push           pci_mcl.ss_code u64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           0          
    popptroff                 u64 1 0
    setargs                   1 0
    push           pci_mcl.ss_code u64 
    callfn         &pc_genss.bufferlength i64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           40         
    popptroff                 i64 1 0
    setargs                   1 0
    push           pci_mcl.ss_idata u64 
    callfn         &pc_genss.bufferlength i64 
    push           0          i64 
    jumpne         #20005     i64 
    setargs                   2 0
    push           0          i64 
    push           pci_mcl.ss_idata u64 
    callproc       &pc_genss.addqword 
#20005: 
    push           ".data"    u64 
    push           &pc_writeexe.sectiontable 
    push           2          i64 
    addrefoff                 block:72 72 -72
    push           8          
    popptroff                 u64 1 0
    push           2          i64 
    push           &pc_writeexe.sectiontable 
    push           2          i64 
    addrefoff                 block:72 72 -72
    push           16         
    popptroff                 i64 1 0
    push           pci_mcl.ss_idata u64 
    push           &pc_writeexe.sectiontable 
    push           2          i64 
    addrefoff                 block:72 72 -72
    push           0          
    popptroff                 u64 1 0
    setargs                   1 0
    push           pci_mcl.ss_idata u64 
    callfn         &pc_genss.bufferlength i64 
    push           &pc_writeexe.sectiontable 
    push           2          i64 
    addrefoff                 block:72 72 -72
    push           40         
    popptroff                 i64 1 0
    setargs                   2 0
    push           512        i64 
    push           &pc_writeexe.sectiontable 
    push           2          i64 
    addrefoff                 block:72 72 -72
    push           40         
    pushptroff                i64 1 0
    callfn         &pc_writeexe.roundtoblock i64 
    push           &pc_writeexe.sectiontable 
    push           2          i64 
    addrefoff                 block:72 72 -72
    push           24         
    popptroff                 i64 1 0
    push           pci_mcl.ss_nidatarelocs i64 
    push           &pc_writeexe.sectiontable 
    push           2          i64 
    addrefoff                 block:72 72 -72
    push           64         
    popptroff                 i64 1 0
    push           pci_mcl.ss_idatarelocs u64 
    push           &pc_writeexe.sectiontable 
    push           2          i64 
    addrefoff                 block:72 72 -72
    push           56         
    popptroff                 u64 1 0
    push           pci_mcl.ss_zdatalen i64 
    push           0          i64 
    jumpne         #20006     i64 
    push           16         i64 
    pop            pci_mcl.ss_zdatalen i64 
#20006: 
    push           ".bss"     u64 
    push           &pc_writeexe.sectiontable 
    push           3          i64 
    addrefoff                 block:72 72 -72
    push           8          
    popptroff                 u64 1 0
    push           3          i64 
    push           &pc_writeexe.sectiontable 
    push           3          i64 
    addrefoff                 block:72 72 -72
    push           16         
    popptroff                 i64 1 0
    push           pci_mcl.ss_zdatalen i64 
    push           &pc_writeexe.sectiontable 
    push           3          i64 
    addrefoff                 block:72 72 -72
    push           40         
    popptroff                 i64 1 0
    setargs                   2 0
    push           512        i64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           40         
    pushptroff                i64 1 0
    callfn         &pc_writeexe.roundtoblock i64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           24         
    popptroff                 i64 1 0
    push           pci_mcl.ss_ncoderelocs i64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           64         
    popptroff                 i64 1 0
    push           pci_mcl.ss_coderelocs u64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           56         
    popptroff                 u64 1 0
    push           ".idata"   u64 
    push           &pc_writeexe.sectiontable 
    push           4          i64 
    addrefoff                 block:72 72 -72
    push           8          
    popptroff                 u64 1 0
    push           5          i64 
    push           &pc_writeexe.sectiontable 
    push           4          i64 
    addrefoff                 block:72 72 -72
    push           16         
    popptroff                 i64 1 0
    push           0          i64 
    push           &pc_writeexe.sectiontable 
    push           4          i64 
    addrefoff                 block:72 72 -72
    push           40         
    popptroff                 i64 1 0
    push           0          i64 
    push           &pc_writeexe.sectiontable 
    push           4          i64 
    addrefoff                 block:72 72 -72
    push           24         
    popptroff                 i64 1 0
    push           4          i64 
    pop            pc_writeexe.nsections i64 
#20007: 
    retproc                   
End


Proc pc_writeexe.roundtoblock: i64
    param          pc_writeexe.roundtoblock.n i64 
    param          pc_writeexe.roundtoblock.align i64 
    procentry                 
    push           pc_writeexe.roundtoblock.n i64 
    push           pc_writeexe.roundtoblock.align i64 
    push           1          i64 
    sub                       i64 
    iand                      i64 
    push           0          i64 
    jumpne         #20009     i64 
    push           pc_writeexe.roundtoblock.n i64 
    setret                    i64 
    jump           #20010     
#20009: 
    push           pc_writeexe.roundtoblock.n i64 
    push           pc_writeexe.roundtoblock.align i64 
    push           pc_writeexe.roundtoblock.n i64 
    push           pc_writeexe.roundtoblock.align i64 
    push           1          i64 
    sub                       i64 
    iand                      i64 
    sub                       i64 
    add                       i64 
    setret                    i64 
    jump           #20010     
#20010: 
    retfn                     i64 
End


Proc pc_writeexe.extractlibname: u64
    param          pc_writeexe.extractlibname.name u64 
    param          pc_writeexe.extractlibname.libno u64 
    param          pc_writeexe.extractlibname.moduleno i64 
    local          pc_writeexe.extractlibname.s u64 
    local          pc_writeexe.extractlibname.name2 u64 
    local          pc_writeexe.extractlibname.str block:256 
    local          pc_writeexe.extractlibname.str2 block:256 
    local          pc_writeexe.extractlibname.i i64 
    local          pc_writeexe.extractlibname.n i64 
    procentry                 
    push           0          u64 
    pop            pc_writeexe.extractlibname.name2 u64 
!reenter::
#20012: 
    push           pc_writeexe.extractlibname.name u64 
    pop            pc_writeexe.extractlibname.s u64 
    push           0          i64 
    push           pc_writeexe.extractlibname.libno u64 
    popptr                    i64 
    jump           #20013     
#20014: 
    push           pc_writeexe.extractlibname.s u64 
    pushptr                   u8 
    push           46         u64 
    jumpne         #20015     u64 
    setargs                   3 0
    push           pc_writeexe.extractlibname.s u64 
    push           pc_writeexe.extractlibname.name u64 
    subref                    u64 1
    push           pc_writeexe.extractlibname.name u64 
    push           &pc_writeexe.extractlibname.str 
    callproc       &memcpy    
    push           0          u64 
    push           &pc_writeexe.extractlibname.str 
    push           pc_writeexe.extractlibname.s u64 
    push           pc_writeexe.extractlibname.name u64 
    subref                    i64 1
    popptroff                 u8 1 0
    setargs                   2 0
    push           ".dll"     u64 
    push           &pc_writeexe.extractlibname.str 
    callproc       &strcat    
#20016: 
    push           1          i64 
    pop            pc_writeexe.extractlibname.i i64 
    push           pc_writeexe.ndlls i64 
    push           1          i64 
    jumplt         #20017     i64 
#20018: 
    setargs                   2 0
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.extractlibname.i i64 
    addrefoff                 block:48 48 -48
    pushptr                   u64 
    push           &pc_writeexe.extractlibname.str 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #20019     i64 
    push           pc_writeexe.extractlibname.i i64 
    push           pc_writeexe.extractlibname.libno u64 
    popptr                    i64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.extractlibname.libno u64 
    pushptr                   i64 
    addrefoff                 block:48 48 -48
    push           8          
    addrefoff                 u64 1 0
    incr                      i64 1
    startmult                 
    push           pc_writeexe.extractlibname.name2 u64 
    jumpfalse      #20020     u64 
    push           pc_writeexe.extractlibname.name2 u64 
    resetmult                 
    jump           #20021     
#20020: 
    push           pc_writeexe.extractlibname.s u64 
    push           1          i64 
    addrefoff                 u64 1 0
    endmult                   
#20021: 
    setret                    u64 
    jump           #20022     
#20019: 
#20023: 
    forup          #20018     i64 1
    opnd           pc_writeexe.extractlibname.i 
    opnd           pc_writeexe.ndlls 
#20017: 
    push           pc_writeexe.ndlls i64 
    push           50         i64 
    jumplt         #20024     i64 
    setargs                   1 0
    push           "Too many libs" u64 
    callproc       &pci_mcl.axerror 
#20024: 
    push           &pc_writeexe.ndlls 
    incrload                  i64 1
    push           pc_writeexe.extractlibname.libno u64 
    popptr                    i64 
    setargs                   1 0
    push           &pc_writeexe.extractlibname.str 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.extractlibname.libno u64 
    pushptr                   i64 
    addrefoff                 block:48 48 -48
    push           0          
    popptroff                 u64 1 0
    push           1          i64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.extractlibname.libno u64 
    pushptr                   i64 
    addrefoff                 block:48 48 -48
    push           8          
    popptroff                 i64 1 0
    startmult                 
    push           pc_writeexe.extractlibname.name2 u64 
    jumpfalse      #20025     u64 
    push           pc_writeexe.extractlibname.name2 u64 
    resetmult                 
    jump           #20026     
#20025: 
    push           pc_writeexe.extractlibname.s u64 
    push           1          i64 
    addrefoff                 u64 1 0
    endmult                   
#20026: 
    setret                    u64 
    jump           #20022     
#20015: 
    push           &pc_writeexe.extractlibname.s 
    incr                      u64 1
#20013: 
    push           pc_writeexe.extractlibname.s u64 
    pushptr                   u8 
    jumptrue       #20014     u64 
#20027: 
#20028: 
    push           1          i64 
    pop            pc_writeexe.extractlibname.i i64 
    push           pci_mcl.npsearchlibs i64 
    push           1          i64 
    jumplt         #20029     i64 
#20030: 
    setargs                   2 0
    push           pc_writeexe.extractlibname.name u64 
    push           &pc_writeexe.libinsttable 
    push           pc_writeexe.extractlibname.i i64 
    pushptroff                i64 8 -8
    callfn         &mwindowsp.os_getdllprocaddr u64 
    jumpfalse      #20031     u64 
    push           pc_writeexe.extractlibname.i i64 
    pop            pc_writeexe.extractlibname.n i64 
    jump           #20032     
#20031: 
#20033: 
    forup          #20030     i64 1
    opnd           pc_writeexe.extractlibname.i 
    opnd           pci_mcl.npsearchlibs 
#20029: 
    setargs                   1 0
    push           "Can't find external function" u64 
    callproc       &pci_mcl.axerror 
#20032: 
    push           &pc_writeexe.libnotable 
    push           pc_writeexe.extractlibname.n i64 
    pushptroff                i64 8 -8
    push           pc_writeexe.extractlibname.libno u64 
    storeptr                  i64 
    jumpfalse      #20034     i64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.extractlibname.libno u64 
    pushptr                   i64 
    addrefoff                 block:48 48 -48
    push           8          
    addrefoff                 u64 1 0
    incr                      i64 1
    push           pc_writeexe.extractlibname.name u64 
    setret                    u64 
    jump           #20022     
#20034: 
    setargs                   2 0
    push           &pci_mcl.psearchlibs 
    push           pc_writeexe.extractlibname.n i64 
    pushptroff                u64 8 -8
    push           &pc_writeexe.extractlibname.str 
    callproc       &strcpy    
    setargs                   2 0
    push           ".dll"     u64 
    push           &pc_writeexe.extractlibname.str 
    callproc       &strcat    
    push           pc_writeexe.ndlls i64 
    push           50         i64 
    jumplt         #20035     i64 
    setargs                   1 0
    push           "2:Too many libs" u64 
    callproc       &pci_mcl.axerror 
#20035: 
    push           &pc_writeexe.ndlls 
    incrload                  i64 1
    push           pc_writeexe.extractlibname.libno u64 
    popptr                    i64 
    setargs                   1 0
    push           &pc_writeexe.extractlibname.str 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.extractlibname.libno u64 
    pushptr                   i64 
    addrefoff                 block:48 48 -48
    push           0          
    popptroff                 u64 1 0
    push           1          i64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.extractlibname.libno u64 
    pushptr                   i64 
    addrefoff                 block:48 48 -48
    push           8          
    popptroff                 i64 1 0
    push           pc_writeexe.extractlibname.libno u64 
    pushptr                   i64 
    push           &pc_writeexe.libnotable 
    push           pc_writeexe.extractlibname.n i64 
    popptroff                 i64 8 -8
    push           pc_writeexe.extractlibname.name u64 
    setret                    u64 
    jump           #20022     
#20022: 
    retfn                     u64 
End


Proc pc_writeexe.scanst:
    local          pc_writeexe.scanst.i i64 
    local          pc_writeexe.scanst.libno i64 
    local          pc_writeexe.scanst.d u64 
    local          pc_writeexe.scanst.name u64 
    local          pc_writeexe.scanst.libname u64 
    local          pc_writeexe.scanst.dname u64 
    local          pc_writeexe.scanst.basename u64 
    procentry                 
#20037: 
    push           1          i64 
    pop            pc_writeexe.scanst.i i64 
    push           pci_mcl.ss_nsymbols i64 
    push           1          i64 
    jumplt         #20038     i64 
#20039: 
    push           pci_mcl.ss_symboltable u64 
    push           pc_writeexe.scanst.i i64 
    pushptroff                u64 8 -8
    pop            pc_writeexe.scanst.d u64 
    push           pc_writeexe.scanst.d u64 
    push           46         
    pushptroff                u16 1 0
    push           1          i64 
    dotindex                  i64 
    jumpfalse      #20040     u64 
    push           pc_writeexe.nimports i64 
    push           3000       i64 
    jumplt         #20041     i64 
    setargs                   1 0
    push           "genexe: Too many imports" u64 
    callproc       &pci_mcl.axerror 
#20041: 
    push           &pc_writeexe.nimports 
    incr                      i64 1
    push           pc_writeexe.scanst.d u64 
    pushptr                   u64 
    pop            pc_writeexe.scanst.dname u64 
    setargs                   3 0
    push           1          i64 
    push           &pc_writeexe.scanst.libno 
    push           pc_writeexe.scanst.dname u64 
    callfn         &pc_writeexe.extractlibname u64 
    pop            pc_writeexe.scanst.name u64 
    push           pc_writeexe.scanst.libno i64 
    push           &pc_writeexe.importtable 
    push           pc_writeexe.nimports i64 
    addrefoff                 block:48 48 -48
    push           8          
    popptroff                 i64 1 0
    push           pc_writeexe.scanst.name u64 
    push           &pc_writeexe.importtable 
    push           pc_writeexe.nimports i64 
    addrefoff                 block:48 48 -48
    push           16         
    popptroff                 u64 1 0
    push           pc_writeexe.scanst.d u64 
    push           &pc_writeexe.importtable 
    push           pc_writeexe.nimports i64 
    addrefoff                 block:48 48 -48
    push           0          
    popptroff                 u64 1 0
    push           pc_writeexe.nimports i64 
    push           pc_writeexe.scanst.d u64 
    push           44         
    popptroff                 i16 1 0
    jump           #20042     
#20040: 
    push           pc_writeexe.scanst.d u64 
    push           46         
    pushptroff                u16 1 0
    push           3          i64 
    dotindex                  i64 
    jumpfalse      #20043     u64 
    setargs                   1 0
    push           pc_writeexe.scanst.d u64 
    pushptr                   u64 
    callfn         &pc_libpcl.getbasename u64 
    pop            pc_writeexe.scanst.basename u64 
    push           pc_writeexe.userentrypoint u64 
    jumpfalse      #20044     u64 
    setargs                   2 0
    push           pc_writeexe.userentrypoint u64 
    push           pc_writeexe.scanst.basename u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #20045     i64 
    push           pc_writeexe.scanst.d u64 
    pop            pc_writeexe.stentrypoint u64 
#20045: 
    jump           #20046     
#20044: 
    setargs                   2 0
    push           "main"     u64 
    push           pc_writeexe.scanst.basename u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #20047     i64 
    push           pc_writeexe.isdll i64 
    jumptrue       #20047     i64 
    push           pc_writeexe.scanst.d u64 
    pop            pc_writeexe.stentrypoint u64 
    jump           #20048     
#20047: 
    setargs                   2 0
    push           "start"    u64 
    push           pc_writeexe.scanst.basename u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #20049     i64 
    push           pc_writeexe.isdll i64 
    jumptrue       #20049     i64 
    push           pc_writeexe.scanst.d u64 
    pop            pc_writeexe.stentrypoint2 u64 
    jump           #20048     
#20049: 
    setargs                   2 0
    push           "dllmain"  u64 
    push           pc_writeexe.scanst.basename u64 
    callfn         &mlibp.eqstring i64 
    jumpfalse      #20050     i64 
    push           pc_writeexe.isdll i64 
    jumpfalse      #20050     i64 
    push           pc_writeexe.scanst.d u64 
    pop            pc_writeexe.stentrypoint u64 
#20050: 
#20048: 
#20046: 
    push           pc_writeexe.nexports i64 
    push           1000       i64 
    jumplt         #20051     i64 
    setargs                   1 0
    push           "gendll: Too many exports" u64 
    callproc       &pci_mcl.axerror 
#20051: 
    push           &pc_writeexe.nexports 
    incr                      i64 1
    push           pc_writeexe.scanst.d u64 
    push           &pc_writeexe.exporttable 
    push           pc_writeexe.nexports i64 
    addrefoff                 block:16 16 -16
    push           0          
    popptroff                 u64 1 0
    push           pc_writeexe.scanst.dname u64 
    push           &pc_writeexe.exporttable 
    push           pc_writeexe.nexports i64 
    addrefoff                 block:16 16 -16
    push           8          
    popptroff                 u64 1 0
#20043: 
#20042: 
#20052: 
    forup          #20039     i64 1
    opnd           pc_writeexe.scanst.i 
    opnd           pci_mcl.ss_nsymbols 
#20038: 
#20053: 
    retproc                   
End


Proc pc_writeexe.relocdata:
    param          pc_writeexe.relocdata.s u64 
    local          pc_writeexe.relocdata.u u64 
    local          pc_writeexe.relocdata.r u64 
    local          pc_writeexe.relocdata.p u64 
    local          pc_writeexe.relocdata.p32 u64 
    local          pc_writeexe.relocdata.p64 u64 
    local          pc_writeexe.relocdata.d u64 
    local          pc_writeexe.relocdata.offset i64 
    local          pc_writeexe.relocdata.index i64 
    local          pc_writeexe.relocdata.thunkoffset i64 
    local          pc_writeexe.relocdata.iatoffset i64 
    procentry                 
    setargs                   2 0
    push           0          i64 
    push           pc_writeexe.relocdata.s u64 
    pushptr                   u64 
    callfn         &pc_genss.bufferelemptr u64 
    pop            pc_writeexe.relocdata.p u64 
    push           pc_writeexe.relocdata.s u64 
    push           56         
    pushptroff                u64 1 0
    pop            pc_writeexe.relocdata.r u64 
    jump           #20055     
#20056: 
    push           pci_mcl.ss_symboltable u64 
    push           pc_writeexe.relocdata.r u64 
    push           24         
    pushptroff                i64 1 0
    pushptroff                u64 8 -8
    pop            pc_writeexe.relocdata.d u64 
    push           pc_writeexe.relocdata.d u64 
    push           44         
    pushptroff                i16 1 0
    pop            pc_writeexe.relocdata.index i64 
    push           &pc_writeexe.importtable 
    push           pc_writeexe.relocdata.index i64 
    addrefoff                 block:48 48 -48
    push           40         
    pushptroff                i64 1 0
    pop            pc_writeexe.relocdata.thunkoffset i64 
    push           pc_writeexe.relocdata.r u64 
    push           8          
    pushptroff                i64 1 0
    push           4          i64 
    casejumpeq     #20057     i64 0
    push           2          i64 
    casejumpeq     #20058     i64 0
    push           1          i64 
    casejumpeq     #20058     i64 0
    popstack                  i64 
    jump           #20059     
#20057: 
    push           pc_writeexe.relocdata.d u64 
    push           46         
    pushptroff                u16 1 0
    push           1          i64 
    dotindex                  i64 
    jumptrue       #20060     u64 
    setargs                   1 0
    push           "rel32/not imported" u64 
    callproc       &pci_mcl.axerror 
#20060: 
    push           pc_writeexe.relocdata.thunkoffset i64 
    push           pc_writeexe.relocdata.r u64 
    push           16         
    pushptroff                i64 1 0
    sub                       i64 
    push           4          i64 
    sub                       i64 
    push           pc_writeexe.relocdata.p u64 
    push           pc_writeexe.relocdata.r u64 
    push           16         
    pushptroff                i64 1 0
    popptroff                 u32 1 0
    jump           #20061     
#20058: 
    push           pc_writeexe.relocdata.d u64 
    push           46         
    pushptroff                u16 1 0
    push           1          i64 
    dotindex                  i64 
    jumpfalse      #20062     u64 
    push           pc_writeexe.imagebase i64 
    push           pc_writeexe.relocdata.thunkoffset i64 
    add                       i64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           48         
    pushptroff                i64 1 0
    add                       i64 
    push           pc_writeexe.relocdata.p u64 
    push           pc_writeexe.relocdata.r u64 
    push           16         
    pushptroff                i64 1 0
    popptroff                 u32 1 0
    jump           #20063     
#20062: 
    push           0          u64 
    pop            pc_writeexe.relocdata.u u64 
    push           pc_writeexe.relocdata.d u64 
    push           30         
    pushptroff                u8 1 0
    push           3          i64 
    casejumpeq     #20064     i64 0
    push           2          i64 
    casejumpeq     #20065     i64 0
    push           1          i64 
    casejumpeq     #20066     i64 0
    popstack                  i64 
    jump           #20067     
#20064: 
    push           &pc_writeexe.sectiontable 
    push           144        
    addrefoff                 u8 1 0
    pop            pc_writeexe.relocdata.u u64 
    jump           #20068     
#20065: 
    push           &pc_writeexe.sectiontable 
    push           72         
    addrefoff                 u8 1 0
    pop            pc_writeexe.relocdata.u u64 
    jump           #20068     
#20066: 
    push           &pc_writeexe.sectiontable 
    push           0          
    addrefoff                 u8 1 0
    pop            pc_writeexe.relocdata.u u64 
    jump           #20068     
#20067: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           pc_writeexe.relocdata.d u64 
    pushptr                   u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_writeexe.relocdata.d u64 
    push           30         
    pushptroff                u8 1 0
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "RELOCDATA/SEG?" u64 
    callproc       &pci_mcl.axerror 
#20068: 
    push           pc_writeexe.relocdata.p u64 
    push           pc_writeexe.relocdata.r u64 
    push           16         
    pushptroff                i64 1 0
    addrefoff                 u64 1 0
    pop            pc_writeexe.relocdata.p32 u64 
    push           pc_writeexe.relocdata.r u64 
    push           8          
    pushptroff                i64 1 0
    push           2          i64 
    jumpne         #20069     i64 
    push           pc_writeexe.relocdata.p32 u64 
    pushptr                   u32 
    push           pc_writeexe.relocdata.u u64 
    push           48         
    pushptroff                i64 1 0
    add                       i64 
    push           pc_writeexe.imagebase i64 
    add                       i64 
    push           pc_writeexe.relocdata.p32 u64 
    popptr                    u32 
    jump           #20070     
#20069: 
    push           pc_writeexe.relocdata.p32 u64 
    pop            pc_writeexe.relocdata.p64 u64 
    push           pc_writeexe.relocdata.p64 u64 
    pushptr                   i64 
    push           pc_writeexe.relocdata.u u64 
    push           48         
    pushptroff                i64 1 0
    add                       i64 
    push           pc_writeexe.imagebase i64 
    add                       u64 
    push           pc_writeexe.relocdata.p64 u64 
    popptr                    u64 
#20070: 
#20063: 
    jump           #20061     
#20059: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           &pc_objdecls.relocnames 
    push           pc_writeexe.relocdata.r u64 
    push           8          
    pushptroff                i64 1 0
    pushptroff                u64 8 0
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "Can't do this rel type" u64 
    callproc       &pci_mcl.axerror 
#20061: 
    push           pc_writeexe.relocdata.r u64 
    pushptr                   u64 
    pop            pc_writeexe.relocdata.r u64 
#20055: 
    push           pc_writeexe.relocdata.r u64 
    jumptrue       #20056     u64 
#20071: 
#20072: 
    retproc                   
End


Proc pc_writeexe.getbaserelocs:
    param          pc_writeexe.getbaserelocs.s u64 
    local          pc_writeexe.getbaserelocs.u u64 
    local          pc_writeexe.getbaserelocs.r u64 
    local          pc_writeexe.getbaserelocs.p u64 
    local          pc_writeexe.getbaserelocs.d u64 
    local          pc_writeexe.getbaserelocs.index i64 
    procentry                 
    setargs                   2 0
    push           0          i64 
    push           pc_writeexe.getbaserelocs.s u64 
    pushptr                   u64 
    callfn         &pc_genss.bufferelemptr u64 
    pop            pc_writeexe.getbaserelocs.p u64 
    push           pc_writeexe.getbaserelocs.s u64 
    push           56         
    pushptroff                u64 1 0
    pop            pc_writeexe.getbaserelocs.r u64 
    jump           #20074     
#20075: 
    push           pci_mcl.ss_symboltable u64 
    push           pc_writeexe.getbaserelocs.r u64 
    push           24         
    pushptroff                i64 1 0
    pushptroff                u64 8 -8
    pop            pc_writeexe.getbaserelocs.d u64 
    push           pc_writeexe.getbaserelocs.r u64 
    push           8          
    pushptroff                i64 1 0
    push           2          i64 
    casejumpeq     #20076     i64 0
    push           1          i64 
    casejumpeq     #20076     i64 0
    popstack                  i64 
    jump           #20077     
#20076: 
    push           pc_writeexe.getbaserelocs.d u64 
    push           46         
    pushptroff                u16 1 0
    push           1          i64 
    dotindex                  i64 
    jumpfalse      #20078     u64 
    jump           #20079     
#20078: 
    push           pc_writeexe.getbaserelocs.d u64 
    push           30         
    pushptroff                u8 1 0
    push           3          i64 
    casejumpeq     #20080     i64 0
    push           2          i64 
    casejumpeq     #20081     i64 0
    push           1          i64 
    casejumpeq     #20082     i64 0
    popstack                  i64 
    jump           #20083     
#20080: 
    push           &pc_writeexe.sectiontable 
    push           144        
    addrefoff                 u8 1 0
    pop            pc_writeexe.getbaserelocs.u u64 
    jump           #20084     
#20081: 
    push           &pc_writeexe.sectiontable 
    push           72         
    addrefoff                 u8 1 0
    pop            pc_writeexe.getbaserelocs.u u64 
    jump           #20084     
#20082: 
    push           &pc_writeexe.sectiontable 
    push           0          
    addrefoff                 u8 1 0
    pop            pc_writeexe.getbaserelocs.u u64 
    jump           #20084     
#20083: 
#20084: 
    setargs                   2 0
    push           pc_writeexe.getbaserelocs.r u64 
    push           8          
    pushptroff                i64 1 0
    push           pc_writeexe.getbaserelocs.u u64 
    push           48         
    pushptroff                i64 1 0
    push           pc_writeexe.getbaserelocs.r u64 
    push           16         
    pushptroff                i64 1 0
    add                       i64 
    callproc       &pc_writeexe.newbasereloc 
#20079: 
    jump           #20085     
#20077: 
#20085: 
    push           pc_writeexe.getbaserelocs.r u64 
    pushptr                   u64 
    pop            pc_writeexe.getbaserelocs.r u64 
#20074: 
    push           pc_writeexe.getbaserelocs.r u64 
    jumptrue       #20075     u64 
#20086: 
#20087: 
    retproc                   
End


Proc pc_writeexe.writerecordx:
    param          pc_writeexe.writerecordx.r u64 
    param          pc_writeexe.writerecordx.length i64 
    procentry                 
    setargs                   3 0
    push           pc_writeexe.writerecordx.length u64 
    push           pc_writeexe.writerecordx.r u64 
    push           pc_writeexe.dataptr u64 
    callproc       &memcpy    
    push           &pc_writeexe.dataptr 
    push           pc_writeexe.writerecordx.length i64 
    addrefoffto               u64 1 0
#20089: 
    retproc                   
End


Proc pc_writeexe.writedosstub:
    procentry                 
    setargs                   2 0
    push           128        i64 
    push           &pc_writeexe.writedosstub.stubdata 
    callproc       &pc_writeexe.writerecordx 
#20091: 
    retproc                   
End


Proc pc_writeexe.writepesig:
    procentry                 
    push           80         i64 
    push           &pc_writeexe.dataptr 
    loadincr                  u64 1
    popptr                    u8 
    push           69         i64 
    push           &pc_writeexe.dataptr 
    loadincr                  u64 1
    popptr                    u8 
    push           0          i64 
    push           &pc_writeexe.dataptr 
    loadincr                  u64 1
    popptr                    u8 
    push           0          i64 
    push           &pc_writeexe.dataptr 
    loadincr                  u64 1
    popptr                    u8 
#20093: 
    retproc                   
End


Proc pc_writeexe.writepadding:
    param          pc_writeexe.writepadding.offset i64 
    procentry                 
    push           pc_writeexe.datastart u64 
    push           pc_writeexe.writepadding.offset i64 
    addrefoff                 u64 1 0
    pop            pc_writeexe.dataptr u64 
#20095: 
    retproc                   
End


Proc pc_writeexe.writefileheader:
    local          pc_writeexe.writefileheader.header block:20 
    procentry                 
    push           &pc_writeexe.writefileheader.header 
    clear                     block:20 
    push           34404      i64 
    push           &pc_writeexe.writefileheader.header 
    push           0          
    popptroff                 u16 1 0
    push           pc_writeexe.nsections i64 
    push           &pc_writeexe.writefileheader.header 
    push           2          
    popptroff                 u16 1 0
    push           240        i64 
    push           &pc_writeexe.writefileheader.header 
    push           16         
    popptroff                 u16 1 0
    push           559        i64 
    push           &pc_writeexe.writefileheader.header 
    push           18         
    popptroff                 u16 1 0
    setargs                   2 0
    push           20         i64 
    push           &pc_writeexe.writefileheader.header 
    callproc       &pc_writeexe.writerecordx 
#20097: 
    retproc                   
End


Proc pc_writeexe.writeoptheader:
    local          pc_writeexe.writeoptheader.header block:240 
    procentry                 
    push           &pc_writeexe.writeoptheader.header 
    clear                     block:240 
    push           523        i64 
    push           &pc_writeexe.writeoptheader.header 
    push           0          
    popptroff                 u16 1 0
    push           1          i64 
    push           &pc_writeexe.writeoptheader.header 
    push           2          
    popptroff                 u8 1 0
    push           0          i64 
    push           &pc_writeexe.writeoptheader.header 
    push           3          
    popptroff                 u8 1 0
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           24         
    pushptroff                i64 1 0
    push           &pc_writeexe.writeoptheader.header 
    push           4          
    popptroff                 u32 1 0
    push           &pc_writeexe.sectiontable 
    push           2          i64 
    addrefoff                 block:72 72 -72
    push           24         
    pushptroff                i64 1 0
    push           &pc_writeexe.sectiontable 
    push           4          i64 
    addrefoff                 block:72 72 -72
    push           24         
    pushptroff                i64 1 0
    add                       i64 
    push           &pc_writeexe.writeoptheader.header 
    push           8          
    popptroff                 u32 1 0
    setargs                   2 0
    push           512        i64 
    push           &pc_writeexe.sectiontable 
    push           3          i64 
    addrefoff                 block:72 72 -72
    push           40         
    pushptroff                i64 1 0
    callfn         &pc_writeexe.roundtoblock i64 
    push           &pc_writeexe.writeoptheader.header 
    push           12         
    popptroff                 u32 1 0
    push           pc_writeexe.stentrypoint u64 
    push           0          u64 
    jumpne         #20099     u64 
    push           pc_writeexe.stentrypoint2 u64 
    pop            pc_writeexe.stentrypoint u64 
#20099: 
    push           pc_writeexe.stentrypoint u64 
    push           0          u64 
    jumpne         #20100     u64 
    push           pc_writeexe.userentrypoint u64 
    jumpfalse      #20101     u64 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           pc_writeexe.userentrypoint u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           "User entry point not found" u64 
    callproc       &pci_mcl.axerror 
    jump           #20102     
#20101: 
    push           pc_writeexe.isdll i64 
    jumptrue       #20103     i64 
    setargs                   1 0
    push           "Entry point not found: main or start" u64 
    callproc       &pci_mcl.axerror 
#20103: 
#20102: 
    jump           #20104     
#20100: 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           48         
    pushptroff                i64 1 0
    push           pc_writeexe.stentrypoint u64 
    push           32         
    pushptroff                i32 1 0
    add                       i64 
    push           &pc_writeexe.writeoptheader.header 
    push           16         
    popptroff                 u32 1 0
#20104: 
    push           4096       i64 
    push           &pc_writeexe.writeoptheader.header 
    push           20         
    popptroff                 u32 1 0
    push           pc_writeexe.imagebase u64 
    push           &pc_writeexe.writeoptheader.header 
    push           24         
    popptroff                 u64 1 0
    push           4096       i64 
    push           &pc_writeexe.writeoptheader.header 
    push           32         
    popptroff                 u32 1 0
    push           512        i64 
    push           &pc_writeexe.writeoptheader.header 
    push           36         
    popptroff                 u32 1 0
    push           4          i64 
    push           &pc_writeexe.writeoptheader.header 
    push           40         
    popptroff                 u16 1 0
    push           0          i64 
    push           &pc_writeexe.writeoptheader.header 
    push           42         
    popptroff                 u16 1 0
    push           5          i64 
    push           &pc_writeexe.writeoptheader.header 
    push           48         
    popptroff                 u16 1 0
    push           2          i64 
    push           &pc_writeexe.writeoptheader.header 
    push           50         
    popptroff                 u16 1 0
    push           pc_writeexe.imagesize i64 
    push           &pc_writeexe.writeoptheader.header 
    push           56         
    popptroff                 u32 1 0
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           32         
    pushptroff                i64 1 0
    push           &pc_writeexe.writeoptheader.header 
    push           60         
    popptroff                 u32 1 0
    push           3          i64 
    push           &pc_writeexe.writeoptheader.header 
    push           68         
    popptroff                 u16 1 0
    push           4194304    u64 
    push           &pc_writeexe.writeoptheader.header 
    push           72         
    popptroff                 u64 1 0
    push           2097152    u64 
    push           &pc_writeexe.writeoptheader.header 
    push           80         
    popptroff                 u64 1 0
    push           1048576    u64 
    push           &pc_writeexe.writeoptheader.header 
    push           88         
    popptroff                 u64 1 0
    push           4096       u64 
    push           &pc_writeexe.writeoptheader.header 
    push           96         
    popptroff                 u64 1 0
    push           16         i64 
    push           &pc_writeexe.writeoptheader.header 
    push           108        
    popptroff                 u32 1 0
    push           &pc_writeexe.sectiontable 
    push           4          i64 
    addrefoff                 block:72 72 -72
    push           48         
    pushptroff                i64 1 0
    push           &pc_writeexe.writeoptheader.header 
    push           120        
    popptroff                 u32 1 0
    push           &pc_writeexe.sectiontable 
    push           4          i64 
    addrefoff                 block:72 72 -72
    push           40         
    pushptroff                i64 1 0
    push           pc_writeexe.exportdirvirtsize i64 
    sub                       i64 
    push           pc_writeexe.blockdirvirtsize i64 
    sub                       i64 
    push           &pc_writeexe.writeoptheader.header 
    push           124        
    popptroff                 u32 1 0
    push           pc_writeexe.isdll i64 
    jumpfalse      #20105     i64 
    push           64         i64 
    push           &pc_writeexe.writeoptheader.header 
    push           70         
    popptroff                 u16 1 0
    push           pc_writeexe.exportdirvirtaddr i64 
    push           &pc_writeexe.writeoptheader.header 
    push           112        
    popptroff                 u32 1 0
    push           pc_writeexe.exportdirvirtsize i64 
    push           &pc_writeexe.writeoptheader.header 
    push           116        
    popptroff                 u32 1 0
    push           pc_writeexe.blockdirvirtaddr i64 
    push           &pc_writeexe.writeoptheader.header 
    push           152        
    popptroff                 u32 1 0
    push           pc_writeexe.blockdirvirtsize i64 
    push           &pc_writeexe.writeoptheader.header 
    push           156        
    popptroff                 u32 1 0
#20105: 
    push           pc_writeexe.fileiatoffset i64 
    push           &pc_writeexe.writeoptheader.header 
    push           208        
    popptroff                 u32 1 0
    push           pc_writeexe.fileiatsize i64 
    push           &pc_writeexe.writeoptheader.header 
    push           212        
    popptroff                 u32 1 0
    setargs                   2 0
    push           240        i64 
    push           &pc_writeexe.writeoptheader.header 
    callproc       &pc_writeexe.writerecordx 
#20106: 
    retproc                   
End


Proc pc_writeexe.writesectionheader:
    param          pc_writeexe.writesectionheader.s u64 
    local          pc_writeexe.writesectionheader.sheader block:40 
    local          pc_writeexe.writesectionheader.aa i64 
    procentry                 
    push           &pc_writeexe.writesectionheader.sheader 
    clear                     block:40 
    setargs                   2 0
    push           pc_writeexe.writesectionheader.s u64 
    push           8          
    pushptroff                u64 1 0
    push           &pc_writeexe.writesectionheader.sheader 
    push           0          
    addrefoff                 u8 1 0
    callproc       &strcpy    
    push           pc_writeexe.writesectionheader.s u64 
    push           40         
    pushptroff                i64 1 0
    push           &pc_writeexe.writesectionheader.sheader 
    push           8          
    popptroff                 u32 1 0
    push           pc_writeexe.writesectionheader.s u64 
    push           48         
    pushptroff                i64 1 0
    push           &pc_writeexe.writesectionheader.sheader 
    push           12         
    popptroff                 u32 1 0
    push           pc_writeexe.writesectionheader.s u64 
    push           32         
    pushptroff                i64 1 0
    push           &pc_writeexe.writesectionheader.sheader 
    push           20         
    popptroff                 u32 1 0
    push           pc_writeexe.writesectionheader.s u64 
    push           24         
    pushptroff                i64 1 0
    push           &pc_writeexe.writesectionheader.sheader 
    push           16         
    popptroff                 u32 1 0
    push           pc_writeexe.writesectionheader.s u64 
    push           16         
    pushptroff                i64 1 0
    push           3          i64 
    casejumpeq     #20108     i64 0
    push           2          i64 
    casejumpeq     #20109     i64 0
    push           1          i64 
    casejumpeq     #20110     i64 0
    push           5          i64 
    casejumpeq     #20111     i64 0
    popstack                  i64 
    jump           #20112     
#20108: 
    push           3226468480 i64 
    pop            pc_writeexe.writesectionheader.aa i64 
    push           pc_writeexe.writesectionheader.aa i64 
    push           &pc_writeexe.writesectionheader.sheader 
    push           36         
    popptroff                 u32 1 0
    jump           #20113     
#20109: 
    push           3226468416 i64 
    pop            pc_writeexe.writesectionheader.aa i64 
    push           pc_writeexe.writesectionheader.aa i64 
    push           &pc_writeexe.writesectionheader.sheader 
    push           36         
    popptroff                 u32 1 0
    jump           #20113     
#20110: 
    push           1615855648 i64 
    pop            pc_writeexe.writesectionheader.aa i64 
    push           pc_writeexe.writesectionheader.aa i64 
    push           &pc_writeexe.writesectionheader.sheader 
    push           36         
    popptroff                 u32 1 0
    jump           #20113     
#20111: 
    push           3224371264 i64 
    pop            pc_writeexe.writesectionheader.aa i64 
    push           pc_writeexe.writesectionheader.aa i64 
    push           &pc_writeexe.writesectionheader.sheader 
    push           36         
    popptroff                 u32 1 0
    jump           #20113     
#20112: 
#20113: 
    setargs                   2 0
    push           40         i64 
    push           &pc_writeexe.writesectionheader.sheader 
    callproc       &pc_writeexe.writerecordx 
#20114: 
    retproc                   
End


Proc pc_writeexe.writesectiondata:
    param          pc_writeexe.writesectiondata.s u64 
    procentry                 
    push           pc_writeexe.writesectiondata.s u64 
    push           16         
    pushptroff                i64 1 0
    push           5          i64 
    casejumpeq     #20116     i64 0
    push           3          i64 
    casejumpeq     #20117     i64 0
    popstack                  i64 
    jump           #20118     
#20116: 
    setargs                   2 0
    push           pc_writeexe.writesectiondata.s u64 
    push           40         
    pushptroff                i64 1 0
    push           pc_writeexe.writesectiondata.s u64 
    pushptr                   u64 
    callproc       &pc_writeexe.writerecordx 
    push           pc_writeexe.writesectiondata.s u64 
    push           24         
    pushptroff                i64 1 0
    push           pc_writeexe.writesectiondata.s u64 
    push           40         
    pushptroff                i64 1 0
    jumple         #20119     i64 
    push           &pc_writeexe.dataptr 
    push           pc_writeexe.writesectiondata.s u64 
    push           24         
    pushptroff                i64 1 0
    push           pc_writeexe.writesectiondata.s u64 
    push           40         
    pushptroff                i64 1 0
    sub                       i64 
    addrefoffto               u64 1 0
#20119: 
    jump           #20120     
#20117: 
    jump           #20120     
#20118: 
    setargs                   2 0
    push           pc_writeexe.writesectiondata.s u64 
    push           24         
    pushptroff                i64 1 0
    setargs                   2 0
    push           0          i64 
    push           pc_writeexe.writesectiondata.s u64 
    pushptr                   u64 
    callfn         &pc_genss.bufferelemptr u64 
    callproc       &pc_writeexe.writerecordx 
#20120: 
#20121: 
    retproc                   
End


Proc pc_writeexe.getoffsets:
    local          pc_writeexe.getoffsets.fileoffset i64 
    local          pc_writeexe.getoffsets.imageoffset i64 
    local          pc_writeexe.getoffsets.i i64 
    local          pc_writeexe.getoffsets.diroffset i64 
    local          pc_writeexe.getoffsets.impdirno i64 
    local          pc_writeexe.getoffsets.hinttableoffset i64 
    local          pc_writeexe.getoffsets.j i64 
    local          pc_writeexe.getoffsets.n i64 
    local          pc_writeexe.getoffsets.codesize i64 
    local          pc_writeexe.getoffsets.length i64 
    local          pc_writeexe.getoffsets.thunkoffset i64 
    local          pc_writeexe.getoffsets.offset i64 
    local          pc_writeexe.getoffsets.dirstartoffset i64 
    local          pc_writeexe.getoffsets.pcode u64 
    local          pc_writeexe.getoffsets.pimpdir u64 
    local          pc_writeexe.getoffsets.pdir u64 
    local          pc_writeexe.getoffsets.paddr u64 
    local          pc_writeexe.getoffsets.pname u64 
    local          pc_writeexe.getoffsets.iatoffset i64 
    local          pc_writeexe.getoffsets.phint u64 
    local          pc_writeexe.getoffsets.pextra u64 
    local          pc_writeexe.getoffsets.xxx i64 
    local          pc_writeexe.getoffsets.av_1 i64 
    local          pc_writeexe.getoffsets.thunkptr u64 
    local          pc_writeexe.getoffsets.codebase u64 
    local          pc_writeexe.getoffsets.thunkaddr i64 
    procentry                 
    push           392        i64 
    pop            pc_writeexe.getoffsets.fileoffset i64 
    push           &pc_writeexe.getoffsets.fileoffset 
    push           40         i64 
    push           pc_writeexe.nsections i64 
    mul                       i64 
    addto                     i64 
    setargs                   2 0
    push           512        i64 
    push           pc_writeexe.getoffsets.fileoffset i64 
    callfn         &pc_writeexe.roundtoblock i64 
    pop            pc_writeexe.getoffsets.fileoffset i64 
    push           4096       i64 
    pop            pc_writeexe.getoffsets.imageoffset i64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           40         
    pushptroff                i64 1 0
    pop            pc_writeexe.getoffsets.codesize i64 
    setargs                   2 0
    push           pc_writeexe.getoffsets.codesize i64 
    push           pci_mcl.ss_code u64 
    callfn         &pc_genss.bufferelemptr u64 
    pop            pc_writeexe.getoffsets.pcode u64 
    jump           #20123     
#20124: 
    push           144        i64 
    push           &pc_writeexe.getoffsets.pcode 
    loadincr                  u64 1
    popptr                    u8 
    push           &pc_writeexe.getoffsets.codesize 
    incr                      i64 1
#20123: 
    push           pc_writeexe.getoffsets.codesize i64 
    push           7          i64 
    iand                      i64 
    jumptrue       #20124     i64 
#20125: 
    push           pc_writeexe.getoffsets.codesize i64 
    pop            pc_writeexe.getoffsets.thunkoffset i64 
    push           &pc_writeexe.getoffsets.codesize 
    push           pc_writeexe.nimports i64 
    push           8          i64 
    mul                       i64 
    addto                     i64 
    push           pc_writeexe.getoffsets.codesize i64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           40         
    popptroff                 i64 1 0
    setargs                   2 0
    push           512        i64 
    push           pc_writeexe.getoffsets.codesize i64 
    callfn         &pc_writeexe.roundtoblock i64 
    push           &pc_writeexe.sectiontable 
    push           1          i64 
    addrefoff                 block:72 72 -72
    push           24         
    popptroff                 i64 1 0
    setargs                   2 0
    push           pc_writeexe.getoffsets.codesize i64 
    push           pc_writeexe.getoffsets.thunkoffset i64 
    sub                       i64 
    push           16         i64 
    add                       i64 
    push           pci_mcl.ss_code u64 
    callproc       &pc_genss.buffercheck 
#20126: 
    push           1          i64 
    pop            pc_writeexe.getoffsets.i i64 
    push           pc_writeexe.nsections i64 
    push           1          i64 
    jumplt         #20127     i64 
#20128: 
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:72 72 -72
    push           16         
    pushptroff                i64 1 0
    push           3          i64 
    jumpeq         #20129     i64 
    push           pc_writeexe.getoffsets.fileoffset i64 
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:72 72 -72
    push           32         
    popptroff                 i64 1 0
#20129: 
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:72 72 -72
    push           16         
    pushptroff                i64 1 0
    push           3          i64 
    jumpeq         #20130     i64 
    setargs                   2 0
    push           512        i64 
    push           pc_writeexe.getoffsets.fileoffset i64 
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:72 72 -72
    push           40         
    pushptroff                i64 1 0
    add                       i64 
    callfn         &pc_writeexe.roundtoblock i64 
    pop            pc_writeexe.getoffsets.fileoffset i64 
#20130: 
    push           pc_writeexe.getoffsets.imageoffset i64 
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:72 72 -72
    push           48         
    popptroff                 i64 1 0
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:72 72 -72
    push           16         
    pushptroff                i64 1 0
    push           5          i64 
    jumpne         #20131     i64 
    push           pc_writeexe.getoffsets.imageoffset i64 
    pop            pc_writeexe.getoffsets.diroffset i64 
    push           pc_writeexe.getoffsets.i i64 
    pop            pc_writeexe.getoffsets.impdirno i64 
#20131: 
    setargs                   2 0
    push           4096       i64 
    push           pc_writeexe.getoffsets.imageoffset i64 
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:72 72 -72
    push           40         
    pushptroff                i64 1 0
    add                       i64 
    callfn         &pc_writeexe.roundtoblock i64 
    pop            pc_writeexe.getoffsets.imageoffset i64 
#20132: 
    forup          #20128     i64 1
    opnd           pc_writeexe.getoffsets.i 
    opnd           pc_writeexe.nsections 
#20127: 
    push           pc_writeexe.isdll i64 
    jumpfalse      #20133     i64 
    setargs                   1 0
    push           &pc_writeexe.sectiontable 
    push           0          
    addrefoff                 u8 1 0
    callproc       &pc_writeexe.getbaserelocs 
    setargs                   1 0
    push           &pc_writeexe.sectiontable 
    push           72         
    addrefoff                 u8 1 0
    callproc       &pc_writeexe.getbaserelocs 
#20133: 
    push           &pc_writeexe.getoffsets.diroffset 
    push           pc_writeexe.ndlls i64 
    push           1          i64 
    add                       i64 
    push           20         i64 
    mul                       i64 
    addto                     i64 
#20134: 
    push           1          i64 
    pop            pc_writeexe.getoffsets.i i64 
    push           pc_writeexe.ndlls i64 
    push           1          i64 
    jumplt         #20135     i64 
#20136: 
    push           pc_writeexe.getoffsets.diroffset i64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           16         
    popptroff                 i64 1 0
    push           &pc_writeexe.getoffsets.diroffset 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           8          
    pushptroff                i64 1 0
    push           1          i64 
    add                       i64 
    push           8          i64 
    mul                       i64 
    addto                     i64 
#20137: 
    forup          #20136     i64 1
    opnd           pc_writeexe.getoffsets.i 
    opnd           pc_writeexe.ndlls 
#20135: 
    push           pc_writeexe.getoffsets.diroffset i64 
    pop            pc_writeexe.fileiatoffset i64 
#20138: 
    push           1          i64 
    pop            pc_writeexe.getoffsets.i i64 
    push           pc_writeexe.ndlls i64 
    push           1          i64 
    jumplt         #20139     i64 
#20140: 
    push           pc_writeexe.getoffsets.diroffset i64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           24         
    popptroff                 i64 1 0
    push           &pc_writeexe.getoffsets.diroffset 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           8          
    pushptroff                i64 1 0
    push           1          i64 
    add                       i64 
    push           8          i64 
    mul                       i64 
    addto                     i64 
#20141: 
    forup          #20140     i64 1
    opnd           pc_writeexe.getoffsets.i 
    opnd           pc_writeexe.ndlls 
#20139: 
    push           pc_writeexe.getoffsets.diroffset i64 
    push           pc_writeexe.fileiatoffset i64 
    sub                       i64 
    pop            pc_writeexe.fileiatsize i64 
    push           pc_writeexe.getoffsets.diroffset i64 
    pop            pc_writeexe.getoffsets.hinttableoffset i64 
#20142: 
    push           1          i64 
    pop            pc_writeexe.getoffsets.i i64 
    push           pc_writeexe.nimports i64 
    push           1          i64 
    jumplt         #20143     i64 
#20144: 
    setargs                   1 0
    push           &pc_writeexe.importtable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           16         
    pushptroff                u64 1 0
    callfn         &strlen    i64 
    push           3          i64 
    add                       i64 
    pop            pc_writeexe.getoffsets.length i64 
    push           pc_writeexe.getoffsets.length i64 
    push           1          i64 
    iand                      i64 
    jumpfalse      #20145     i64 
    push           &pc_writeexe.getoffsets.length 
    incr                      i64 1
#20145: 
    push           pc_writeexe.getoffsets.diroffset i64 
    push           &pc_writeexe.importtable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           24         
    popptroff                 i64 1 0
    push           &pc_writeexe.getoffsets.diroffset 
    push           pc_writeexe.getoffsets.length i64 
    addto                     i64 
#20146: 
    forup          #20144     i64 1
    opnd           pc_writeexe.getoffsets.i 
    opnd           pc_writeexe.nimports 
#20143: 
    setargs                   2 0
    push           4          i64 
    push           pc_writeexe.getoffsets.diroffset i64 
    callfn         &pc_writeexe.roundtoblock i64 
    pop            pc_writeexe.getoffsets.diroffset i64 
#20147: 
    push           1          i64 
    pop            pc_writeexe.getoffsets.i i64 
    push           pc_writeexe.ndlls i64 
    push           1          i64 
    jumplt         #20148     i64 
#20149: 
    setargs                   1 0
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    pushptr                   u64 
    callfn         &strlen    i64 
    push           1          i64 
    add                       i64 
    pop            pc_writeexe.getoffsets.length i64 
    push           pc_writeexe.getoffsets.length i64 
    push           1          i64 
    iand                      i64 
    jumpfalse      #20150     i64 
    push           &pc_writeexe.getoffsets.length 
    incr                      i64 1
#20150: 
    push           pc_writeexe.getoffsets.diroffset i64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           40         
    popptroff                 i64 1 0
    push           &pc_writeexe.getoffsets.diroffset 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           8          
    pushptroff                i64 1 0
    push           4          i64 
    mul                       i64 
    addto                     i64 
    push           pc_writeexe.getoffsets.diroffset i64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           32         
    popptroff                 i64 1 0
    push           &pc_writeexe.getoffsets.diroffset 
    push           pc_writeexe.getoffsets.length i64 
    addto                     i64 
#20151: 
    forup          #20149     i64 1
    opnd           pc_writeexe.getoffsets.i 
    opnd           pc_writeexe.ndlls 
#20148: 
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.getoffsets.impdirno i64 
    addrefoff                 block:72 72 -72
    push           48         
    pushptroff                i64 1 0
    pop            pc_writeexe.getoffsets.dirstartoffset i64 
    push           pc_writeexe.isdll i64 
    jumpfalse      #20152     i64 
    push           pc_writeexe.getoffsets.diroffset i64 
    pop            pc_writeexe.exportdirvirtaddr i64 
    push           pc_writeexe.getoffsets.diroffset i64 
    push           pc_writeexe.getoffsets.dirstartoffset i64 
    sub                       i64 
    pop            pc_writeexe.exportdiroffset i64 
    setargs                   0 0
    callfn         &pc_writeexe.getexporttablesize i64 
    pop            pc_writeexe.exportdirvirtsize i64 
    push           &pc_writeexe.getoffsets.diroffset 
    push           pc_writeexe.exportdirvirtsize i64 
    addto                     i64 
    setargs                   0 0
    callproc       &pc_writeexe.scanbaserelocs 
    push           pc_writeexe.getoffsets.diroffset i64 
    pop            pc_writeexe.blockdirvirtaddr i64 
    push           pc_writeexe.getoffsets.diroffset i64 
    push           pc_writeexe.getoffsets.dirstartoffset i64 
    sub                       i64 
    pop            pc_writeexe.blockdiroffset i64 
    push           pc_writeexe.basetablesize i64 
    pop            pc_writeexe.blockdirvirtsize i64 
    push           &pc_writeexe.getoffsets.diroffset 
    push           pc_writeexe.blockdirvirtsize i64 
    addto                     i64 
#20152: 
    push           pc_writeexe.getoffsets.diroffset i64 
    push           pc_writeexe.getoffsets.dirstartoffset i64 
    sub                       i64 
    pop            pc_writeexe.getoffsets.offset i64 
    push           pc_writeexe.getoffsets.offset i64 
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.getoffsets.impdirno i64 
    addrefoff                 block:72 72 -72
    push           40         
    popptroff                 i64 1 0
    setargs                   2 0
    push           512        i64 
    push           pc_writeexe.getoffsets.offset i64 
    callfn         &pc_writeexe.roundtoblock i64 
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.getoffsets.impdirno i64 
    addrefoff                 block:72 72 -72
    push           24         
    popptroff                 i64 1 0
    setargs                   2 0
    push           512        i64 
    push           pc_writeexe.getoffsets.fileoffset i64 
    push           pc_writeexe.getoffsets.offset i64 
    add                       i64 
    callfn         &pc_writeexe.roundtoblock i64 
    pop            pc_writeexe.filesize i64 
    setargs                   2 0
    push           4096       i64 
    push           pc_writeexe.getoffsets.imageoffset i64 
    push           pc_writeexe.getoffsets.diroffset i64 
    push           pc_writeexe.getoffsets.dirstartoffset i64 
    sub                       i64 
    add                       i64 
    callfn         &pc_writeexe.roundtoblock i64 
    pop            pc_writeexe.imagesize i64 
    setargs                   1 0
    push           pc_writeexe.getoffsets.offset i64 
    callfn         &mlibp.pcm_allocz u64 
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.getoffsets.impdirno i64 
    addrefoff                 block:72 72 -72
    push           0          
    storeptroff               u64 1 0
    pop            pc_writeexe.getoffsets.pimpdir u64 
    push           pc_writeexe.getoffsets.pimpdir u64 
    pop            pc_writeexe.getoffsets.pdir u64 
#20153: 
    push           1          i64 
    pop            pc_writeexe.getoffsets.i i64 
    push           pc_writeexe.ndlls i64 
    push           1          i64 
    jumplt         #20154     i64 
#20155: 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           16         
    pushptroff                i64 1 0
    push           pc_writeexe.getoffsets.pdir u64 
    push           0          
    popptroff                 u32 1 0
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           24         
    pushptroff                i64 1 0
    push           pc_writeexe.getoffsets.pdir u64 
    push           16         
    popptroff                 u32 1 0
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           32         
    pushptroff                i64 1 0
    push           pc_writeexe.getoffsets.pdir u64 
    push           12         
    popptroff                 u32 1 0
    push           &pc_writeexe.getoffsets.pdir 
    incr                      u64 20
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           24         
    pushptroff                i64 1 0
    pop            pc_writeexe.getoffsets.iatoffset i64 
    push           pc_writeexe.getoffsets.pimpdir u64 
    push           pc_writeexe.getoffsets.iatoffset i64 
    addrefoff                 u64 1 0
    push           pc_writeexe.getoffsets.dirstartoffset i64 
    subrefoff                 u64 1 0
    pop            pc_writeexe.getoffsets.paddr u64 
    push           pc_writeexe.getoffsets.pimpdir u64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           16         
    pushptroff                i64 1 0
    addrefoff                 u64 1 0
    push           pc_writeexe.getoffsets.dirstartoffset i64 
    subrefoff                 u64 1 0
    pop            pc_writeexe.getoffsets.pname u64 
#20156: 
    push           1          i64 
    pop            pc_writeexe.getoffsets.j i64 
    push           pc_writeexe.nimports i64 
    push           1          i64 
    jumplt         #20157     i64 
#20158: 
    push           &pc_writeexe.importtable 
    push           pc_writeexe.getoffsets.j i64 
    addrefoff                 block:48 48 -48
    push           8          
    pushptroff                i64 1 0
    push           pc_writeexe.getoffsets.i i64 
    jumpne         #20159     i64 
    push           &pc_writeexe.importtable 
    push           pc_writeexe.getoffsets.j i64 
    addrefoff                 block:48 48 -48
    push           24         
    pushptroff                i64 1 0
    push           pc_writeexe.getoffsets.paddr u64 
    storeptr                  i64 
    push           pc_writeexe.getoffsets.pname u64 
    popptr                    i64 
    push           pc_writeexe.getoffsets.iatoffset i64 
    push           &pc_writeexe.importtable 
    push           pc_writeexe.getoffsets.j i64 
    addrefoff                 block:48 48 -48
    push           32         
    popptroff                 i64 1 0
    push           &pc_writeexe.getoffsets.iatoffset 
    push           8          i64 
    addto                     i64 
    push           &pc_writeexe.getoffsets.pname 
    incr                      u64 8
    push           &pc_writeexe.getoffsets.paddr 
    incr                      u64 8
#20159: 
#20160: 
    forup          #20158     i64 1
    opnd           pc_writeexe.getoffsets.j 
    opnd           pc_writeexe.nimports 
#20157: 
#20161: 
    forup          #20155     i64 1
    opnd           pc_writeexe.getoffsets.i 
    opnd           pc_writeexe.ndlls 
#20154: 
#20162: 
    push           1          i64 
    pop            pc_writeexe.getoffsets.i i64 
    push           pc_writeexe.nimports i64 
    push           1          i64 
    jumplt         #20163     i64 
#20164: 
    push           pc_writeexe.getoffsets.pimpdir u64 
    push           &pc_writeexe.importtable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           24         
    pushptroff                i64 1 0
    addrefoff                 u64 1 0
    push           pc_writeexe.getoffsets.dirstartoffset i64 
    subrefoff                 u64 1 0
    pop            pc_writeexe.getoffsets.phint u64 
    push           &pc_writeexe.getoffsets.phint 
    push           2          i64 
    addrefoffto               u64 1 0
    setargs                   2 0
    push           &pc_writeexe.importtable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           16         
    pushptroff                u64 1 0
    push           pc_writeexe.getoffsets.phint u64 
    callproc       &strcpy    
#20165: 
    forup          #20164     i64 1
    opnd           pc_writeexe.getoffsets.i 
    opnd           pc_writeexe.nimports 
#20163: 
    push           pc_writeexe.getoffsets.dirstartoffset i64 
    pop            pc_writeexe.getoffsets.xxx i64 
#20166: 
    push           1          i64 
    pop            pc_writeexe.getoffsets.i i64 
    push           pc_writeexe.ndlls i64 
    push           1          i64 
    jumplt         #20167     i64 
#20168: 
    push           pc_writeexe.getoffsets.pimpdir u64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           40         
    pushptroff                i64 1 0
    addrefoff                 u64 1 0
    push           pc_writeexe.getoffsets.dirstartoffset i64 
    subrefoff                 u64 1 0
    pop            pc_writeexe.getoffsets.pextra u64 
#20169: 
    push           1          i64 
    pop            pc_writeexe.getoffsets.j i64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           8          
    pushptroff                i64 1 0
    pop            pc_writeexe.getoffsets.av_1 i64 
    push           pc_writeexe.getoffsets.av_1 i64 
    push           1          i64 
    jumplt         #20170     i64 
#20171: 
    push           pc_writeexe.getoffsets.xxx i64 
    push           pc_writeexe.getoffsets.pextra u64 
    popptr                    u32 
    push           &pc_writeexe.getoffsets.pextra 
    incr                      u64 4
#20172: 
    forup          #20171     i64 1
    opnd           pc_writeexe.getoffsets.j 
    opnd           pc_writeexe.getoffsets.av_1 
#20170: 
    push           &pc_writeexe.getoffsets.xxx 
    push           20         i64 
    addto                     i64 
    push           pc_writeexe.getoffsets.pimpdir u64 
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           32         
    pushptroff                i64 1 0
    addrefoff                 u64 1 0
    push           pc_writeexe.getoffsets.dirstartoffset i64 
    subrefoff                 u64 1 0
    pop            pc_writeexe.getoffsets.phint u64 
    setargs                   2 0
    push           &pc_writeexe.dlltable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    pushptr                   u64 
    push           pc_writeexe.getoffsets.phint u64 
    callproc       &strcpy    
#20173: 
    forup          #20168     i64 1
    opnd           pc_writeexe.getoffsets.i 
    opnd           pc_writeexe.ndlls 
#20167: 
    push           pc_writeexe.isdll i64 
    jumpfalse      #20174     i64 
    setargs                   1 0
    push           pc_writeexe.getoffsets.pimpdir u64 
    push           pc_writeexe.exportdiroffset i64 
    addrefoff                 u64 1 0
    callproc       &pc_writeexe.writeexporttable 
    setargs                   1 0
    push           pc_writeexe.getoffsets.pimpdir u64 
    push           pc_writeexe.blockdiroffset i64 
    addrefoff                 u64 1 0
    callproc       &pc_writeexe.writebasereloctable 
#20174: 
    setargs                   2 0
    push           pc_writeexe.getoffsets.thunkoffset i64 
    push           pci_mcl.ss_code u64 
    callfn         &pc_genss.bufferelemptr u64 
    pop            pc_writeexe.getoffsets.thunkptr u64 
    setargs                   2 0
    push           0          i64 
    push           pci_mcl.ss_code u64 
    callfn         &pc_genss.bufferelemptr u64 
    pop            pc_writeexe.getoffsets.codebase u64 
#20175: 
    push           1          i64 
    pop            pc_writeexe.getoffsets.i i64 
    push           pc_writeexe.nimports i64 
    push           1          i64 
    jumplt         #20176     i64 
#20177: 
    push           pc_writeexe.getoffsets.thunkptr u64 
    push           pc_writeexe.getoffsets.codebase u64 
    subref                    i64 1
    push           &pc_writeexe.importtable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           40         
    popptroff                 i64 1 0
    push           72         i64 
    push           &pc_writeexe.getoffsets.thunkptr 
    loadincr                  u64 1
    popptr                    u8 
    push           255        i64 
    push           &pc_writeexe.getoffsets.thunkptr 
    loadincr                  u64 1
    popptr                    u8 
    push           36         i64 
    push           &pc_writeexe.getoffsets.thunkptr 
    loadincr                  u64 1
    popptr                    u8 
    push           37         i64 
    push           &pc_writeexe.getoffsets.thunkptr 
    loadincr                  u64 1
    popptr                    u8 
    push           pc_writeexe.imagebase i64 
    push           &pc_writeexe.importtable 
    push           pc_writeexe.getoffsets.i i64 
    addrefoff                 block:48 48 -48
    push           32         
    pushptroff                i64 1 0
    add                       i64 
    pop            pc_writeexe.getoffsets.thunkaddr i64 
    push           pc_writeexe.getoffsets.thunkaddr i64 
    push           pc_writeexe.getoffsets.thunkptr u64 
    popptr                    i32 
    push           &pc_writeexe.getoffsets.thunkptr 
    push           4          i64 
    addrefoffto               u64 1 0
#20178: 
    forup          #20177     i64 1
    opnd           pc_writeexe.getoffsets.i 
    opnd           pc_writeexe.nimports 
#20176: 
#20179: 
    retproc                   
End


Proc pc_writeexe.addsearchlib:
    param          pc_writeexe.addsearchlib.name u64 
    local          pc_writeexe.addsearchlib.i i64 
    procentry                 
    setargs                   2 0
    push           ""         u64 
    push           pc_writeexe.addsearchlib.name u64 
    callfn         &mlibp.changeext u64 
    pop            pc_writeexe.addsearchlib.name u64 
#20181: 
    push           1          i64 
    pop            pc_writeexe.addsearchlib.i i64 
    push           pci_mcl.npsearchlibs i64 
    push           1          i64 
    jumplt         #20182     i64 
#20183: 
    setargs                   2 0
    push           pc_writeexe.addsearchlib.name u64 
    push           &pci_mcl.psearchlibs 
    push           pc_writeexe.addsearchlib.i i64 
    pushptroff                u64 8 -8
    callfn         &mlibp.eqstring i64 
    jumpfalse      #20184     i64 
    jump           #20185     
#20184: 
#20186: 
    forup          #20183     i64 1
    opnd           pc_writeexe.addsearchlib.i 
    opnd           pci_mcl.npsearchlibs 
#20182: 
    push           pci_mcl.npsearchlibs i64 
    push           30         i64 
    jumplt         #20187     i64 
    setargs                   1 0
    push           "Too many LIB files" u64 
    callproc       &pci_mcl.axerror 
#20187: 
    setargs                   1 0
    push           pc_writeexe.addsearchlib.name u64 
    callfn         &mlibp.pcm_copyheapstring u64 
    push           &pci_mcl.psearchlibs 
    push           &pci_mcl.npsearchlibs 
    incrload                  i64 1
    popptroff                 u64 8 -8
#20185: 
    retproc                   
End


Proc pc_writeexe.setuplibfiles:
    local          pc_writeexe.setuplibfiles.i i64 
    procentry                 
    push           0          i64 
    pop            pci_mcl.npsearchlibs i64 
    push           "msvcrt"   u64 
    push           &pci_mcl.psearchlibs 
    push           1          i64 
    popptroff                 u64 8 -8
    push           "gdi32"    u64 
    push           &pci_mcl.psearchlibs 
    push           2          i64 
    popptroff                 u64 8 -8
    push           "user32"   u64 
    push           &pci_mcl.psearchlibs 
    push           3          i64 
    popptroff                 u64 8 -8
    push           "kernel32" u64 
    push           &pci_mcl.psearchlibs 
    push           4          i64 
    popptroff                 u64 8 -8
    push           4          i64 
    pop            pci_mcl.npsearchlibs i64 
#20189: 
    push           1          i64 
    pop            pc_writeexe.setuplibfiles.i i64 
    push           pci_mcl.nplibfiles i64 
    push           1          i64 
    jumplt         #20190     i64 
#20191: 
    setargs                   1 0
    push           &pci_mcl.plibfiles 
    push           pc_writeexe.setuplibfiles.i i64 
    pushptroff                u64 8 0
    callproc       &pc_writeexe.addsearchlib 
#20192: 
    forup          #20191     i64 1
    opnd           pc_writeexe.setuplibfiles.i 
    opnd           pci_mcl.nplibfiles 
#20190: 
#20193: 
    push           1          i64 
    pop            pc_writeexe.setuplibfiles.i i64 
    push           pc_decls.npdllnametable i64 
    push           1          i64 
    jumplt         #20194     i64 
#20195: 
    push           &pc_decls.pdllnametable 
    push           pc_writeexe.setuplibfiles.i i64 
    pushptroff                u64 8 -8
    pushptr                   u8 
    push           36         u64 
    jumpeq         #20196     u64 
    setargs                   1 0
    push           &pc_decls.pdllnametable 
    push           pc_writeexe.setuplibfiles.i i64 
    pushptroff                u64 8 -8
    callproc       &pc_writeexe.addsearchlib 
#20196: 
#20197: 
    forup          #20195     i64 1
    opnd           pc_writeexe.setuplibfiles.i 
    opnd           pc_decls.npdllnametable 
#20194: 
#20198: 
    retproc                   
End


Proc pc_writeexe.writeexporttable:
    param          pc_writeexe.writeexporttable.pstart u64 
    local          pc_writeexe.writeexporttable.sortindex block:16000 
    local          pc_writeexe.writeexporttable.phdr u64 
    local          pc_writeexe.writeexporttable.paddrtable u64 
    local          pc_writeexe.writeexporttable.pnametable u64 
    local          pc_writeexe.writeexporttable.pordtable u64 
    local          pc_writeexe.writeexporttable.pdllname u64 
    local          pc_writeexe.writeexporttable.pnames u64 
    local          pc_writeexe.writeexporttable.addrtableoffset i64 
    local          pc_writeexe.writeexporttable.nametableoffset i64 
    local          pc_writeexe.writeexporttable.ordtableoffset i64 
    local          pc_writeexe.writeexporttable.dllnameoffset i64 
    local          pc_writeexe.writeexporttable.namesoffset i64 
    local          pc_writeexe.writeexporttable.virtoffset i64 
    local          pc_writeexe.writeexporttable.sectionno i64 
    local          pc_writeexe.writeexporttable.d u64 
    local          pc_writeexe.writeexporttable.i i64 
    procentry                 
    push           pc_writeexe.writeexporttable.pstart u64 
    pop            pc_writeexe.writeexporttable.phdr u64 
    push           1602876664 i64 
    push           pc_writeexe.writeexporttable.phdr u64 
    push           4          
    popptroff                 u32 1 0
    push           1          i64 
    push           pc_writeexe.writeexporttable.phdr u64 
    push           16         
    popptroff                 u32 1 0
    push           pc_writeexe.nexports i64 
    push           pc_writeexe.writeexporttable.phdr u64 
    push           20         
    popptroff                 u32 1 0
    push           pc_writeexe.nexports i64 
    push           pc_writeexe.writeexporttable.phdr u64 
    push           24         
    popptroff                 u32 1 0
    push           40         i64 
    pop            pc_writeexe.writeexporttable.addrtableoffset i64 
    push           pc_writeexe.writeexporttable.addrtableoffset i64 
    push           pc_writeexe.nexports i64 
    push           4          i64 
    mul                       i64 
    add                       i64 
    pop            pc_writeexe.writeexporttable.nametableoffset i64 
    push           pc_writeexe.writeexporttable.nametableoffset i64 
    push           pc_writeexe.nexports i64 
    push           4          i64 
    mul                       i64 
    add                       i64 
    pop            pc_writeexe.writeexporttable.ordtableoffset i64 
    push           pc_writeexe.writeexporttable.ordtableoffset i64 
    push           pc_writeexe.nexports i64 
    push           2          i64 
    mul                       i64 
    add                       i64 
    pop            pc_writeexe.writeexporttable.dllnameoffset i64 
    push           pc_writeexe.writeexporttable.dllnameoffset i64 
    setargs                   1 0
    push           pc_writeexe.dllfilename u64 
    callfn         &strlen    i64 
    add                       i64 
    push           1          i64 
    add                       i64 
    pop            pc_writeexe.writeexporttable.namesoffset i64 
    push           &pc_writeexe.sectiontable 
    push           4          i64 
    addrefoff                 block:72 72 -72
    push           48         
    pushptroff                i64 1 0
    push           pc_writeexe.exportdiroffset i64 
    add                       i64 
    pop            pc_writeexe.writeexporttable.virtoffset i64 
    push           pc_writeexe.writeexporttable.pstart u64 
    push           pc_writeexe.writeexporttable.addrtableoffset i64 
    addrefoff                 u64 1 0
    pop            pc_writeexe.writeexporttable.paddrtable u64 
    push           pc_writeexe.writeexporttable.pstart u64 
    push           pc_writeexe.writeexporttable.nametableoffset i64 
    addrefoff                 u64 1 0
    pop            pc_writeexe.writeexporttable.pnametable u64 
    push           pc_writeexe.writeexporttable.pstart u64 
    push           pc_writeexe.writeexporttable.ordtableoffset i64 
    addrefoff                 u64 1 0
    pop            pc_writeexe.writeexporttable.pordtable u64 
    push           pc_writeexe.writeexporttable.pstart u64 
    push           pc_writeexe.writeexporttable.dllnameoffset i64 
    addrefoff                 u64 1 0
    pop            pc_writeexe.writeexporttable.pdllname u64 
    push           pc_writeexe.writeexporttable.pstart u64 
    push           pc_writeexe.writeexporttable.namesoffset i64 
    addrefoff                 u64 1 0
    pop            pc_writeexe.writeexporttable.pnames u64 
    push           pc_writeexe.writeexporttable.dllnameoffset i64 
    push           pc_writeexe.writeexporttable.virtoffset i64 
    add                       i64 
    push           pc_writeexe.writeexporttable.phdr u64 
    push           12         
    popptroff                 u32 1 0
    push           pc_writeexe.writeexporttable.addrtableoffset i64 
    push           pc_writeexe.writeexporttable.virtoffset i64 
    add                       i64 
    push           pc_writeexe.writeexporttable.phdr u64 
    push           28         
    popptroff                 u32 1 0
    push           pc_writeexe.writeexporttable.nametableoffset i64 
    push           pc_writeexe.writeexporttable.virtoffset i64 
    add                       i64 
    push           pc_writeexe.writeexporttable.phdr u64 
    push           32         
    popptroff                 u32 1 0
    push           pc_writeexe.writeexporttable.ordtableoffset i64 
    push           pc_writeexe.writeexporttable.virtoffset i64 
    add                       i64 
    push           pc_writeexe.writeexporttable.phdr u64 
    push           36         
    popptroff                 u32 1 0
    setargs                   2 0
    push           pc_writeexe.dllfilename u64 
    push           pc_writeexe.writeexporttable.pdllname u64 
    callproc       &strcpy    
    push           pc_writeexe.nexports i64 
    push           2000       i64 
    jumple         #20200     i64 
    setargs                   1 0
    push           "Too many exports - can't sort" u64 
    callproc       &pci_mcl.axerror 
#20200: 
    setargs                   1 0
    push           &pc_writeexe.writeexporttable.sortindex 
    callproc       &pc_writeexe.sortexports 
#20201: 
    push           1          i64 
    pop            pc_writeexe.writeexporttable.i i64 
    push           pc_writeexe.nexports i64 
    push           1          i64 
    jumplt         #20202     i64 
#20203: 
    push           &pc_writeexe.exporttable 
    push           &pc_writeexe.writeexporttable.sortindex 
    push           pc_writeexe.writeexporttable.i i64 
    pushptroff                i64 8 -8
    addrefoff                 block:16 16 -16
    pushptr                   u64 
    pop            pc_writeexe.writeexporttable.d u64 
    setargs                   1 0
    push           pc_writeexe.writeexporttable.d u64 
    push           30         
    pushptroff                u8 1 0
    callfn         &pc_writeexe.getsectionno i64 
    pop            pc_writeexe.writeexporttable.sectionno i64 
    setargs                   2 0
    push           pc_writeexe.writeexporttable.d u64 
    pushptr                   u64 
    push           pc_writeexe.writeexporttable.pnames u64 
    callproc       &strcpy    
    push           pc_writeexe.writeexporttable.namesoffset i64 
    push           pc_writeexe.writeexporttable.virtoffset i64 
    add                       i64 
    push           pc_writeexe.writeexporttable.pnametable u64 
    popptr                    u32 
    push           &pc_writeexe.writeexporttable.pnametable 
    incr                      u64 4
    push           &pc_writeexe.writeexporttable.namesoffset 
    setargs                   1 0
    push           pc_writeexe.writeexporttable.d u64 
    pushptr                   u64 
    callfn         &strlen    i64 
    push           1          i64 
    add                       i64 
    addto                     i64 
    push           &pc_writeexe.writeexporttable.pnames 
    setargs                   1 0
    push           pc_writeexe.writeexporttable.d u64 
    pushptr                   u64 
    callfn         &strlen    i64 
    push           1          i64 
    add                       i64 
    addrefoffto               u64 1 0
    push           pc_writeexe.writeexporttable.d u64 
    push           32         
    pushptroff                i32 1 0
    push           &pc_writeexe.sectiontable 
    push           pc_writeexe.writeexporttable.sectionno i64 
    addrefoff                 block:72 72 -72
    push           48         
    pushptroff                i64 1 0
    add                       i64 
    push           pc_writeexe.writeexporttable.paddrtable u64 
    popptr                    u32 
    push           &pc_writeexe.writeexporttable.paddrtable 
    incr                      u64 4
    push           pc_writeexe.writeexporttable.i i64 
    push           1          i64 
    sub                       i64 
    push           pc_writeexe.writeexporttable.pordtable u64 
    popptr                    u16 
    push           &pc_writeexe.writeexporttable.pordtable 
    incr                      u64 2
#20204: 
    forup          #20203     i64 1
    opnd           pc_writeexe.writeexporttable.i 
    opnd           pc_writeexe.nexports 
#20202: 
#20205: 
    retproc                   
End


Proc pc_writeexe.getexporttablesize: i64
    local          pc_writeexe.getexporttablesize.size i64 
    local          pc_writeexe.getexporttablesize.i i64 
    procentry                 
    push           40         i64 
    pop            pc_writeexe.getexporttablesize.size i64 
    push           &pc_writeexe.getexporttablesize.size 
    push           pc_writeexe.nexports i64 
    push           4          i64 
    mul                       i64 
    addto                     i64 
    push           &pc_writeexe.getexporttablesize.size 
    push           pc_writeexe.nexports i64 
    push           4          i64 
    mul                       i64 
    addto                     i64 
    push           &pc_writeexe.getexporttablesize.size 
    push           pc_writeexe.nexports i64 
    push           2          i64 
    mul                       i64 
    addto                     i64 
    push           &pc_writeexe.getexporttablesize.size 
    setargs                   1 0
    push           pc_writeexe.dllfilename u64 
    callfn         &strlen    i64 
    push           1          i64 
    add                       i64 
    addto                     i64 
#20207: 
    push           1          i64 
    pop            pc_writeexe.getexporttablesize.i i64 
    push           pc_writeexe.nexports i64 
    push           1          i64 
    jumplt         #20208     i64 
#20209: 
    push           &pc_writeexe.getexporttablesize.size 
    setargs                   1 0
    push           &pc_writeexe.exporttable 
    push           pc_writeexe.getexporttablesize.i i64 
    addrefoff                 block:16 16 -16
    pushptr                   u64 
    pushptr                   u64 
    callfn         &strlen    i64 
    push           1          i64 
    add                       i64 
    addto                     i64 
#20210: 
    forup          #20209     i64 1
    opnd           pc_writeexe.getexporttablesize.i 
    opnd           pc_writeexe.nexports 
#20208: 
    push           pc_writeexe.getexporttablesize.size i64 
    setret                    i64 
    jump           #20211     
#20211: 
    retfn                     i64 
End


Proc pc_writeexe.newbasereloc:
    param          pc_writeexe.newbasereloc.addr i64 
    param          pc_writeexe.newbasereloc.reltype i64 
    local          pc_writeexe.newbasereloc.p u64 
    procentry                 
    setargs                   1 0
    push           16         i64 
    callfn         &mlibp.pcm_allocz u64 
    pop            pc_writeexe.newbasereloc.p u64 
    push           pc_writeexe.newbasereloc.addr i64 
    push           pc_writeexe.newbasereloc.p u64 
    push           8          
    popptroff                 u32 1 0
    push           pc_writeexe.newbasereloc.reltype i64 
    push           pc_writeexe.newbasereloc.p u64 
    push           12         
    popptroff                 i32 1 0
    push           pc_writeexe.basereloclist u64 
    push           pc_writeexe.newbasereloc.p u64 
    push           0          
    popptroff                 u64 1 0
    push           pc_writeexe.newbasereloc.p u64 
    pop            pc_writeexe.basereloclist u64 
    push           &pc_writeexe.nbaserelocs 
    incr                      i64 1
    push           &pc_writeexe.maxrelocaddr 
    push           pc_writeexe.newbasereloc.addr i64 
    maxto                     i64 
#20213: 
    retproc                   
End


Proc pc_writeexe.scanbaserelocs:
    local          pc_writeexe.scanbaserelocs.baseaddr i64 
    local          pc_writeexe.scanbaserelocs.addr i64 
    local          pc_writeexe.scanbaserelocs.nextblock i64 
    local          pc_writeexe.scanbaserelocs.p u64 
    local          pc_writeexe.scanbaserelocs.i i64 
    procentry                 
    push           4096       i64 
    pop            pc_writeexe.scanbaserelocs.baseaddr i64 
    push           0          i64 
    pop            pc_writeexe.nbaseblocks i64 
#20215: 
    push           pc_writeexe.scanbaserelocs.baseaddr i64 
    push           4096       i64 
    add                       i64 
    pop            pc_writeexe.scanbaserelocs.nextblock i64 
    push           pc_writeexe.nbaseblocks i64 
    push           500        i64 
    jumplt         #20216     i64 
    setargs                   1 0
    push           "Too many blocks" u64 
    callproc       &pci_mcl.axerror 
#20216: 
    push           &pc_writeexe.nbaseblocks 
    incr                      i64 1
    push           pc_writeexe.scanbaserelocs.baseaddr i64 
    push           &pc_writeexe.blockbases 
    push           pc_writeexe.nbaseblocks i64 
    popptroff                 i64 8 -8
    push           0          i64 
    push           &pc_writeexe.blockcounts 
    push           pc_writeexe.nbaseblocks i64 
    popptroff                 i32 4 -4
    push           pc_writeexe.basereloclist u64 
    pop            pc_writeexe.scanbaserelocs.p u64 
    jump           #20217     
#20218: 
    push           pc_writeexe.scanbaserelocs.p u64 
    push           8          
    pushptroff                u32 1 0
    pop            pc_writeexe.scanbaserelocs.addr i64 
    push           pc_writeexe.scanbaserelocs.addr i64 
    push           pc_writeexe.scanbaserelocs.baseaddr i64 
    jumplt         #20219     i64 
    push           pc_writeexe.scanbaserelocs.addr i64 
    push           pc_writeexe.scanbaserelocs.nextblock i64 
    jumpge         #20219     i64 
    push           &pc_writeexe.blockcounts 
    push           pc_writeexe.nbaseblocks i64 
    addrefoff                 i32 4 -4
    incr                      i32 1
#20219: 
    push           pc_writeexe.scanbaserelocs.p u64 
    pushptr                   u64 
    pop            pc_writeexe.scanbaserelocs.p u64 
#20217: 
    push           pc_writeexe.scanbaserelocs.p u64 
    jumptrue       #20218     u64 
#20220: 
    push           pc_writeexe.scanbaserelocs.nextblock i64 
    pop            pc_writeexe.scanbaserelocs.baseaddr i64 
#20221: 
    push           pc_writeexe.scanbaserelocs.baseaddr i64 
    push           pc_writeexe.maxrelocaddr i64 
    jumple         #20215     i64 
#20222: 
#20223: 
    push           1          i64 
    pop            pc_writeexe.scanbaserelocs.i i64 
    push           pc_writeexe.nbaseblocks i64 
    push           1          i64 
    jumplt         #20224     i64 
#20225: 
    push           &pc_writeexe.blockcounts 
    push           pc_writeexe.scanbaserelocs.i i64 
    pushptroff                i32 4 -4
    jumpfalse      #20226     i64 
    push           &pc_writeexe.blockcounts 
    push           pc_writeexe.scanbaserelocs.i i64 
    pushptroff                i32 4 -4
    push           0          i64 
    dotindex                  i64 
    jumpfalse      #20227     u64 
    push           &pc_writeexe.blockcounts 
    push           pc_writeexe.scanbaserelocs.i i64 
    addrefoff                 i32 4 -4
    incr                      i32 1
    push           &pc_writeexe.blockpadding 
    push           pc_writeexe.scanbaserelocs.i i64 
    addrefoff                 u8 1 -1
    incr                      u8 1
#20227: 
    push           &pc_writeexe.blockcounts 
    push           pc_writeexe.scanbaserelocs.i i64 
    pushptroff                i32 4 -4
    push           2          i64 
    mul                       i64 
    push           8          i64 
    add                       i64 
    push           &pc_writeexe.blockbytes 
    push           pc_writeexe.scanbaserelocs.i i64 
    popptroff                 i32 4 -4
    push           &pc_writeexe.basetablesize 
    push           &pc_writeexe.blockbytes 
    push           pc_writeexe.scanbaserelocs.i i64 
    pushptroff                i32 4 -4
    addto                     i64 
#20226: 
#20228: 
    forup          #20225     i64 1
    opnd           pc_writeexe.scanbaserelocs.i 
    opnd           pc_writeexe.nbaseblocks 
#20224: 
#20229: 
    retproc                   
End


Proc pc_writeexe.writebasereloctable:
    param          pc_writeexe.writebasereloctable.pstart u64 
    local          pc_writeexe.writebasereloctable.p32 u64 
    local          pc_writeexe.writebasereloctable.p16 u64 
    local          pc_writeexe.writebasereloctable.baseaddr i64 
    local          pc_writeexe.writebasereloctable.addr i64 
    local          pc_writeexe.writebasereloctable.nextblock i64 
    local          pc_writeexe.writebasereloctable.q u64 
    local          pc_writeexe.writebasereloctable.i i64 
    procentry                 
    push           pc_writeexe.writebasereloctable.pstart u64 
    pop            pc_writeexe.writebasereloctable.p32 u64 
#20231: 
    push           1          i64 
    pop            pc_writeexe.writebasereloctable.i i64 
    push           pc_writeexe.nbaseblocks i64 
    push           1          i64 
    jumplt         #20232     i64 
#20233: 
    push           &pc_writeexe.blockcounts 
    push           pc_writeexe.writebasereloctable.i i64 
    pushptroff                i32 4 -4
    jumpfalse      #20234     i64 
    push           &pc_writeexe.blockbases 
    push           pc_writeexe.writebasereloctable.i i64 
    pushptroff                i64 8 -8
    push           pc_writeexe.writebasereloctable.p32 u64 
    popptr                    u32 
    push           &pc_writeexe.writebasereloctable.p32 
    incr                      u64 4
    push           &pc_writeexe.blockbytes 
    push           pc_writeexe.writebasereloctable.i i64 
    pushptroff                i32 4 -4
    push           pc_writeexe.writebasereloctable.p32 u64 
    popptr                    u32 
    push           &pc_writeexe.writebasereloctable.p32 
    incr                      u64 4
    push           pc_writeexe.writebasereloctable.p32 u64 
    pop            pc_writeexe.writebasereloctable.p16 u64 
    push           pc_writeexe.basereloclist u64 
    pop            pc_writeexe.writebasereloctable.q u64 
    push           &pc_writeexe.blockbases 
    push           pc_writeexe.writebasereloctable.i i64 
    pushptroff                i64 8 -8
    pop            pc_writeexe.writebasereloctable.baseaddr i64 
    push           pc_writeexe.writebasereloctable.baseaddr i64 
    push           4096       i64 
    add                       i64 
    pop            pc_writeexe.writebasereloctable.nextblock i64 
    jump           #20235     
#20236: 
    push           pc_writeexe.writebasereloctable.q u64 
    push           8          
    pushptroff                u32 1 0
    pop            pc_writeexe.writebasereloctable.addr i64 
    push           pc_writeexe.writebasereloctable.addr i64 
    push           pc_writeexe.writebasereloctable.baseaddr i64 
    jumplt         #20237     i64 
    push           pc_writeexe.writebasereloctable.addr i64 
    push           pc_writeexe.writebasereloctable.nextblock i64 
    jumpge         #20237     i64 
    push           pc_writeexe.writebasereloctable.addr i64 
    push           pc_writeexe.writebasereloctable.baseaddr i64 
    sub                       i64 
    startmult                 
    push           pc_writeexe.writebasereloctable.q u64 
    push           12         
    pushptroff                i32 1 0
    push           2          i64 
    jumpne         #20238     i64 
    push           3          i64 
    resetmult                 
    jump           #20239     
#20238: 
    push           10         i64 
    endmult                   
#20239: 
    push           12         i64 
    shl                       i64 
    add                       i64 
    push           pc_writeexe.writebasereloctable.p16 u64 
    popptr                    u16 
    push           &pc_writeexe.writebasereloctable.p16 
    incr                      u64 2
#20237: 
    push           pc_writeexe.writebasereloctable.q u64 
    pushptr                   u64 
    pop            pc_writeexe.writebasereloctable.q u64 
#20235: 
    push           pc_writeexe.writebasereloctable.q u64 
    jumptrue       #20236     u64 
#20240: 
    push           &pc_writeexe.blockpadding 
    push           pc_writeexe.writebasereloctable.i i64 
    pushptroff                u8 1 -1
    jumpfalse      #20241     i64 
    push           0          i64 
    push           &pc_writeexe.writebasereloctable.p16 
    loadincr                  u64 2
    popptr                    u16 
#20241: 
    push           pc_writeexe.writebasereloctable.p16 u64 
    pop            pc_writeexe.writebasereloctable.p32 u64 
#20234: 
#20242: 
    forup          #20233     i64 1
    opnd           pc_writeexe.writebasereloctable.i 
    opnd           pc_writeexe.nbaseblocks 
#20232: 
#20243: 
    retproc                   
End


Proc pc_writeexe.sortexports:
    param          pc_writeexe.sortexports.sortindex u64 
    local          pc_writeexe.sortexports.d u64 
    local          pc_writeexe.sortexports.e u64 
    local          pc_writeexe.sortexports.swapped i64 
    local          pc_writeexe.sortexports.av_1 i64 
    local          pc_writeexe.sortexports.i i64 
    procentry                 
#20245: 
    push           1          i64 
    pop            pc_writeexe.sortexports.i i64 
    push           pc_writeexe.nexports i64 
    push           1          i64 
    jumplt         #20246     i64 
#20247: 
    push           pc_writeexe.sortexports.i i64 
    push           pc_writeexe.sortexports.sortindex u64 
    push           pc_writeexe.sortexports.i i64 
    popptroff                 i64 8 -8
#20248: 
    forup          #20247     i64 1
    opnd           pc_writeexe.sortexports.i 
    opnd           pc_writeexe.nexports 
#20246: 
#20249: 
    push           0          i64 
    pop            pc_writeexe.sortexports.swapped i64 
#20250: 
    push           1          i64 
    pop            pc_writeexe.sortexports.i i64 
    push           pc_writeexe.nexports i64 
    push           1          i64 
    sub                       i64 
    pop            pc_writeexe.sortexports.av_1 i64 
    push           pc_writeexe.sortexports.av_1 i64 
    push           1          i64 
    jumplt         #20251     i64 
#20252: 
    push           &pc_writeexe.exporttable 
    push           pc_writeexe.sortexports.sortindex u64 
    push           pc_writeexe.sortexports.i i64 
    pushptroff                i64 8 -8
    addrefoff                 block:16 16 -16
    pushptr                   u64 
    pop            pc_writeexe.sortexports.d u64 
    push           &pc_writeexe.exporttable 
    push           pc_writeexe.sortexports.sortindex u64 
    push           pc_writeexe.sortexports.i i64 
    pushptroff                i64 8 0
    addrefoff                 block:16 16 -16
    pushptr                   u64 
    pop            pc_writeexe.sortexports.e u64 
    setargs                   2 0
    push           pc_writeexe.sortexports.e u64 
    pushptr                   u64 
    push           pc_writeexe.sortexports.d u64 
    pushptr                   u64 
    callfn         &strcmp    i32 
    push           0          i64 
    jumple         #20253     i64 
    push           1          i64 
    pop            pc_writeexe.sortexports.swapped i64 
    push           pc_writeexe.sortexports.sortindex u64 
    push           pc_writeexe.sortexports.i i64 
    addrefoff                 i64 8 -8
    push           pc_writeexe.sortexports.sortindex u64 
    push           pc_writeexe.sortexports.i i64 
    addrefoff                 i64 8 0
    swap                      i64 
#20253: 
#20254: 
    forup          #20252     i64 1
    opnd           pc_writeexe.sortexports.i 
    opnd           pc_writeexe.sortexports.av_1 
#20251: 
#20255: 
    push           pc_writeexe.sortexports.swapped i64 
    jumptrue       #20249     i64 
#20256: 
#20257: 
    retproc                   
End


Proc pc_writeexe.getsectionno: i64
    param          pc_writeexe.getsectionno.segment i64 
    procentry                 
    startmult                 
    push           pc_writeexe.getsectionno.segment i64 
    push           3          i64 
    casejumpeq     #20259     i64 0
    push           2          i64 
    casejumpeq     #20260     i64 0
    push           1          i64 
    casejumpeq     #20261     i64 0
    popstack                  i64 
    jump           #20262     
#20259: 
    push           3          i64 
    resetmult                 
    jump           #20263     
#20260: 
    push           2          i64 
    resetmult                 
    jump           #20263     
#20261: 
    push           1          i64 
    resetmult                 
    jump           #20263     
#20262: 
    setargs                   1 0
    push           "GSN"      u64 
    callproc       &pci_mcl.axerror 
    push           0          i64 
    endmult                   
#20263: 
    setret                    i64 
    jump           #20264     
#20264: 
    retfn                     i64 
End


Proc pc_writess.writessdata: u64
    param          pc_writess.writessdata.fexe i64 
    procentry                 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_init 
    setargs                   1 0
    push           pc_writess.writessdata.fexe i64 
    callproc       &pc_writess.showssdata 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_line 
    push           pci_mcl.dest u64 
    setret                    u64 
    jump           #20266     
#20266: 
    retfn                     u64 
End


Proc pc_writess.showssdata:
    param          pc_writess.showssdata.fexe i64 
    procentry                 
    setargs                   2 0
    startmult                 
    push           pc_writess.showssdata.fexe i64 
    jumpfalse      #20268     i64 
    push           "EXE FORMAT" u64 
    resetmult                 
    jump           #20269     
#20268: 
    push           "AFTER GENSS" u64 
    endmult                   
#20269: 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_strln 
    setargs                   0 0
    callproc       &pc_writess.showsections 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_line 
    setargs                   3 0
    push           pci_mcl.ss_nidatarelocs i64 
    push           pci_mcl.ss_idatarelocs u64 
    push           "Idata"    u64 
    callproc       &pc_writess.showsectionrelocs2 
    setargs                   3 0
    push           pci_mcl.ss_ncoderelocs i64 
    push           pci_mcl.ss_coderelocs u64 
    push           "Code"     u64 
    callproc       &pc_writess.showsectionrelocs2 
    setargs                   2 0
    push           "proc Section Zdata: " u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           pci_mcl.ss_zdatalen i64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_strint 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_line 
    setargs                   1 0
    push           &pc_writeexe.sectiontable 
    push           72         
    addrefoff                 u8 1 0
    callproc       &pc_writess.showsectiondata 
    setargs                   1 0
    push           &pc_writeexe.sectiontable 
    push           0          
    addrefoff                 u8 1 0
    callproc       &pc_writess.showsectioncode 
    push           pc_writess.showssdata.fexe i64 
    jumpfalse      #20270     i64 
    setargs                   1 0
    push           &pc_writeexe.sectiontable 
    push           216        
    addrefoff                 u8 1 0
    callproc       &pc_writess.showsectiondata 
#20270: 
    setargs                   0 0
    callproc       &pc_writess.showsymboltable2 
    setargs                   0 0
    callproc       &pc_writess.showimporttable 
    setargs                   2 0
    push           "END OF GENSS" u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_strln 
#20271: 
    retproc                   
End


Proc pc_writess.showsectiondata:
    param          pc_writess.showsectiondata.d u64 
    local          pc_writess.showsectiondata.i i64 
    local          pc_writess.showsectiondata.k i64 
    local          pc_writess.showsectiondata.length i64 
    local          pc_writess.showsectiondata.bb i64 
    local          pc_writess.showsectiondata.str block:128 
    local          pc_writess.showsectiondata.str2 block:128 
    local          pc_writess.showsectiondata.p u64 
    local          pc_writess.showsectiondata.baseaddr u64 
    local          pc_writess.showsectiondata.av_1 i64 
    procentry                 
    setargs                   2 0
    push           "proc Section " u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           pc_writess.showsectiondata.d u64 
    push           8          
    pushptroff                u64 1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           " Size:"   u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           pc_writess.showsectiondata.d u64 
    push           40         
    pushptroff                i64 1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_strint 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_line 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_line 
    push           0          i64 
    pop            pc_writess.showsectiondata.k i64 
    push           pc_writess.showsectiondata.d u64 
    push           16         
    pushptroff                i64 1 0
    push           5          i64 
    jumpeq         #20273     i64 
    setargs                   2 0
    push           0          i64 
    push           pc_writess.showsectiondata.d u64 
    pushptr                   u64 
    callfn         &pc_genss.bufferelemptr u64 
    pop            pc_writess.showsectiondata.p u64 
    jump           #20274     
#20273: 
    push           pc_writess.showsectiondata.d u64 
    pushptr                   u64 
    pop            pc_writess.showsectiondata.p u64 
#20274: 
    push           pc_writess.showsectiondata.d u64 
    push           40         
    pushptroff                i64 1 0
    pop            pc_writess.showsectiondata.length i64 
    push           0          u64 
    push           &pc_writess.showsectiondata.str 
    push           1          i64 
    popptroff                 u8 1 -1
    push           pc_writeexe.imagebase i64 
    push           pc_writess.showsectiondata.d u64 
    push           48         
    pushptroff                i64 1 0
    add                       u64 
    pop            pc_writess.showsectiondata.baseaddr u64 
    setargs                   1 0
    push           &pc_writess.showsectiondata.str2 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    push           "Z8H"      u64 
    push           pc_writess.showsectiondata.baseaddr u64 
    callproc       &msysp.m$print_ptr 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           ": "       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           &pc_writess.showsectiondata.str2 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
#20275: 
    push           1          i64 
    pop            pc_writess.showsectiondata.i i64 
    push           pc_writess.showsectiondata.length i64 
    push           1          i64 
    jumplt         #20276     i64 
#20277: 
    push           &pc_writess.showsectiondata.p 
    loadincr                  u64 1
    pushptr                   u8 
    pop            pc_writess.showsectiondata.bb i64 
    setargs                   1 0
    push           &pc_writess.showsectiondata.str2 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    push           "z2H"      u64 
    push           pc_writess.showsectiondata.bb i64 
    callproc       &msysp.m$print_i64 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           " "        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           &pc_writess.showsectiondata.str2 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    push           32         i64 
    push           pc_writess.showsectiondata.bb i64 
    jumpgt         #20278     i64 
    push           pc_writess.showsectiondata.bb i64 
    push           127        i64 
    jumpgt         #20278     i64 
    push           pc_writess.showsectiondata.bb u64 
    push           &pc_writess.showsectiondata.str2 
    push           1          i64 
    popptroff                 u8 1 -1
    push           0          u64 
    push           &pc_writess.showsectiondata.str2 
    push           2          i64 
    popptroff                 u8 1 -1
    setargs                   2 0
    push           &pc_writess.showsectiondata.str2 
    push           &pc_writess.showsectiondata.str 
    callproc       &strcat    
    jump           #20279     
#20278: 
    setargs                   2 0
    push           "."        u64 
    push           &pc_writess.showsectiondata.str 
    callproc       &strcat    
#20279: 
    push           &pc_writess.showsectiondata.k 
    incrload                  i64 1
    push           16         i64 
    jumpeq         #20280     i64 
    push           pc_writess.showsectiondata.i i64 
    push           pc_writess.showsectiondata.length i64 
    jumpne         #20281     i64 
#20280: 
    push           pc_writess.showsectiondata.k i64 
    push           16         i64 
    jumpge         #20282     i64 
#20283: 
    push           16         i64 
    push           pc_writess.showsectiondata.k i64 
    sub                       i64 
    pop            pc_writess.showsectiondata.av_1 i64 
    push           pc_writess.showsectiondata.av_1 i64 
    push           0          i64 
    jumple         #20284     i64 
#20285: 
    setargs                   2 0
    push           "   "      u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           " "        u64 
    push           &pc_writess.showsectiondata.str 
    callproc       &strcat    
#20286: 
    to             #20285     
    opnd           pc_writess.showsectiondata.av_1 
#20284: 
#20282: 
    setargs                   2 0
    push           "\t["      u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           &pc_writess.showsectiondata.str 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           "]"        u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_strln 
    push           0          i64 
    pop            pc_writess.showsectiondata.k i64 
    push           0          u64 
    push           &pc_writess.showsectiondata.str 
    push           1          i64 
    popptroff                 u8 1 -1
    push           &pc_writess.showsectiondata.baseaddr 
    push           16         i64 
    addrefoffto               u64 1 0
    setargs                   1 0
    push           &pc_writess.showsectiondata.str2 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    push           "z8h"      u64 
    push           pc_writess.showsectiondata.baseaddr u64 
    callproc       &msysp.m$print_ptr 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           ": "       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           &pc_writess.showsectiondata.str2 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
#20281: 
#20287: 
    forup          #20277     i64 1
    opnd           pc_writess.showsectiondata.i 
    opnd           pc_writess.showsectiondata.length 
#20276: 
    push           pc_writess.showsectiondata.k i64 
    push           0          i64 
    jumpne         #20288     i64 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_line 
#20288: 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_line 
    push           pc_writess.showsectiondata.k i64 
    jumpfalse      #20289     i64 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_line 
#20289: 
#20290: 
    retproc                   
End


Proc pc_writess.showsectioncode:
    param          pc_writess.showsectioncode.p u64 
    local          pc_writess.showsectioncode.codeptr u64 
    local          pc_writess.showsectioncode.codeend u64 
    local          pc_writess.showsectioncode.codestart u64 
    local          pc_writess.showsectioncode.length i64 
    local          pc_writess.showsectioncode.offset i64 
    local          pc_writess.showsectioncode.s u64 
    local          pc_writess.showsectioncode.str block:16 
    local          pc_writess.showsectioncode.baseaddr u64 
    procentry                 
    setargs                   2 0
    push           "proc Section Code" u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_strln 
    push           pc_writess.showsectioncode.p u64 
    push           40         
    pushptroff                i64 1 0
    pop            pc_writess.showsectioncode.length i64 
    setargs                   2 0
    push           0          i64 
    push           pc_writess.showsectioncode.p u64 
    pushptr                   u64 
    callfn         &pc_genss.bufferelemptr u64 
    store          pc_writess.showsectioncode.codeptr u64 
    pop            pc_writess.showsectioncode.codestart u64 
    push           pc_writess.showsectioncode.codeptr u64 
    push           pc_writess.showsectioncode.length i64 
    addrefoff                 u64 1 0
    pop            pc_writess.showsectioncode.codeend u64 
    push           pc_writeexe.imagebase i64 
    push           pc_writess.showsectioncode.p u64 
    push           48         
    pushptroff                i64 1 0
    add                       u64 
    pop            pc_writess.showsectioncode.baseaddr u64 
    jump           #20292     
#20293: 
    push           pc_writess.showsectioncode.codeptr u64 
    push           pc_writess.showsectioncode.codestart u64 
    subref                    i64 1
    pop            pc_writess.showsectioncode.offset i64 
    setargs                   2 0
    push           pc_writess.showsectioncode.baseaddr u64 
    push           pc_writess.showsectioncode.offset i64 
    addrefoff                 u64 1 0
    push           &pc_writess.showsectioncode.codeptr 
    callfn         &pc_disasm.decodeinstr u64 
    pop            pc_writess.showsectioncode.s u64 
    push           pc_writess.showsectioncode.s u64 
    push           0          u64 
    jumpne         #20294     u64 
    jump           #20295     
#20294: 
    setargs                   1 0
    push           &pc_writess.showsectioncode.str 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    push           "4"        u64 
    push           pc_writess.showsectioncode.offset i64 
    callproc       &msysp.m$print_i64 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           " "        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           &pc_writess.showsectioncode.str 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           pc_writess.showsectioncode.s u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_strln 
#20292: 
    push           pc_writess.showsectioncode.codeptr u64 
    push           pc_writess.showsectioncode.codeend u64 
    jumplt         #20293     u64 
#20295: 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_line 
#20296: 
    retproc                   
End


Proc pc_writess.showsectionrelocs2:
    param          pc_writess.showsectionrelocs2.caption u64 
    param          pc_writess.showsectionrelocs2.relocs u64 
    param          pc_writess.showsectionrelocs2.nrelocs i64 
    local          pc_writess.showsectionrelocs2.r u64 
    procentry                 
    setargs                   2 0
    push           "proc Section Relocs: " u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           pc_writess.showsectionrelocs2.caption u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           " "        u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           pc_writess.showsectionrelocs2.nrelocs i64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_strint 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_line 
    push           pc_writess.showsectionrelocs2.relocs u64 
    pop            pc_writess.showsectionrelocs2.r u64 
    jump           #20298     
#20299: 
    setargs                   2 0
    push           "Reloc: "  u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           &pc_objdecls.relocnames 
    push           pc_writess.showsectionrelocs2.r u64 
    push           8          
    pushptroff                i64 1 0
    pushptroff                u64 8 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           " Offset: " u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           pc_writess.showsectionrelocs2.r u64 
    push           16         
    pushptroff                i64 1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_strint 
    setargs                   2 0
    push           " ST Index: " u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           pc_writess.showsectionrelocs2.r u64 
    push           24         
    pushptroff                i64 1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_strint 
    setargs                   2 0
    push           " "        u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           pci_mcl.ss_symboltable u64 
    push           pc_writess.showsectionrelocs2.r u64 
    push           24         
    pushptroff                i64 1 0
    pushptroff                u64 8 -8
    pushptr                   u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_line 
    push           pc_writess.showsectionrelocs2.r u64 
    pushptr                   u64 
    pop            pc_writess.showsectionrelocs2.r u64 
#20298: 
    push           pc_writess.showsectionrelocs2.r u64 
    jumptrue       #20299     u64 
#20300: 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_line 
#20301: 
    retproc                   
End


Proc pc_writess.gs_value:
    param          pc_writess.gs_value.caption u64 
    param          pc_writess.gs_value.value i64 
    local          pc_writess.gs_value.str block:256 
    procentry                 
    setargs                   2 0
    push           pc_writess.gs_value.caption u64 
    push           &pc_writess.gs_value.str 
    callproc       &strcpy    
    setargs                   2 0
    push           ":"        u64 
    push           &pc_writess.gs_value.str 
    callproc       &strcat    
    setargs                   3 0
    push           " "        u64 
    push           20         i64 
    push           &pc_writess.gs_value.str 
    callproc       &mlibp.ipadstr 
    setargs                   2 0
    push           &pc_writess.gs_value.str 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   1 0
    push           &pc_writess.gs_value.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "0x# #"    u64 
    callproc       &msysp.m$print_setfmt 
    setargs                   2 0
    push           "H"        u64 
    push           pc_writess.gs_value.value i64 
    callproc       &msysp.m$print_i64 
    setargs                   1 0
    push           pc_writess.gs_value.value i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           &pc_writess.gs_value.str 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_strln 
#20303: 
    retproc                   
End


Proc pc_writess.showsymboltable2:
    local          pc_writess.showsymboltable2.i i64 
    procentry                 
    setargs                   2 0
    push           "Proc Symbol Table" u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_strln 
#20305: 
    push           1          i64 
    pop            pc_writess.showsymboltable2.i i64 
    push           pci_mcl.ss_nsymbols i64 
    push           1          i64 
    jumplt         #20306     i64 
#20307: 
    setargs                   2 0
    push           pc_writess.showsymboltable2.i i64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_strint 
    setargs                   2 0
    push           ": "       u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           pci_mcl.ss_symboltable u64 
    push           pc_writess.showsymboltable2.i i64 
    pushptroff                u64 8 -8
    pushptr                   u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_strln 
#20308: 
    forup          #20307     i64 1
    opnd           pc_writess.showsymboltable2.i 
    opnd           pci_mcl.ss_nsymbols 
#20306: 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_line 
#20309: 
    retproc                   
End


Proc pc_writess.showimporttable:
    local          pc_writess.showimporttable.str block:256 
    local          pc_writess.showimporttable.d block:48 
    local          pc_writess.showimporttable.p block:48 
    local          pc_writess.showimporttable.i i64 
    procentry                 
    setargs                   2 0
    push           "Proc Dll List" u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_strln 
#20311: 
    push           1          i64 
    pop            pc_writess.showimporttable.i i64 
    push           pc_writeexe.ndlls i64 
    push           1          i64 
    jumplt         #20312     i64 
#20313: 
    setargs                   2 0
    push           pc_writess.showimporttable.i i64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_strint 
    setargs                   2 0
    push           ": "       u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           &pc_writeexe.dlltable 
    push           pc_writess.showimporttable.i i64 
    addrefoff                 block:48 48 -48
    pushptr                   u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           " "        u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           &pc_writeexe.dlltable 
    push           pc_writess.showimporttable.i i64 
    addrefoff                 block:48 48 -48
    push           8          
    pushptroff                i64 1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_strint 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_line 
    setargs                   2 0
    push           &pc_writeexe.dlltable 
    push           pc_writess.showimporttable.i i64 
    addrefoff                 block:48 48 -48
    push           16         
    pushptroff                i64 1 0
    push           "\t\tName Table Offset" u64 
    callproc       &pc_writess.gs_value 
    setargs                   2 0
    push           &pc_writeexe.dlltable 
    push           pc_writess.showimporttable.i i64 
    addrefoff                 block:48 48 -48
    push           24         
    pushptroff                i64 1 0
    push           "\t\tAddr Table Offset" u64 
    callproc       &pc_writess.gs_value 
    setargs                   2 0
    push           &pc_writeexe.dlltable 
    push           pc_writess.showimporttable.i i64 
    addrefoff                 block:48 48 -48
    push           32         
    pushptroff                i64 1 0
    push           "\t\tDLL Name Offset  " u64 
    callproc       &pc_writess.gs_value 
#20314: 
    forup          #20313     i64 1
    opnd           pc_writess.showimporttable.i 
    opnd           pc_writeexe.ndlls 
#20312: 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_line 
    setargs                   2 0
    push           "Proc Import List" u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_strln 
#20315: 
    push           1          i64 
    pop            pc_writess.showimporttable.i i64 
    push           pc_writeexe.nimports i64 
    push           1          i64 
    jumplt         #20316     i64 
#20317: 
    push           &pc_writeexe.importtable 
    push           pc_writess.showimporttable.i i64 
    pushptroff                block:48 48 -48
    pop            pc_writess.showimporttable.p block:48 
    setargs                   2 0
    push           pc_writess.showimporttable.i i64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_strint 
    setargs                   2 0
    push           ": "       u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    push           &pc_writess.showimporttable.p 
    push           8          
    pushptroff                i64 1 0
    jumpfalse      #20318     i64 
    setargs                   2 0
    push           &pc_writess.showimporttable.p 
    push           16         
    pushptroff                u64 1 0
    push           &pc_writess.showimporttable.str 
    callproc       &strcpy    
    setargs                   3 0
    push           " "        u64 
    push           16         i64 
    push           &pc_writess.showimporttable.str 
    callproc       &mlibp.ipadstr 
    setargs                   2 0
    push           &pc_writess.showimporttable.str 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           " ("       u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           &pc_writeexe.dlltable 
    push           &pc_writess.showimporttable.p 
    push           8          
    pushptroff                i64 1 0
    addrefoff                 block:48 48 -48
    pushptr                   u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           ")"        u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_strln 
    setargs                   2 0
    push           &pc_writess.showimporttable.p 
    push           32         
    pushptroff                i64 1 0
    push           "\tIAT Offset        " u64 
    callproc       &pc_writess.gs_value 
    setargs                   2 0
    push           &pc_writess.showimporttable.p 
    push           40         
    pushptroff                i64 1 0
    push           "\tThunk Offset      " u64 
    callproc       &pc_writess.gs_value 
    setargs                   2 0
    push           &pc_writess.showimporttable.p 
    push           24         
    pushptroff                i64 1 0
    push           "\tHint/Name Offset  " u64 
    callproc       &pc_writess.gs_value 
    jump           #20319     
#20318: 
    setargs                   2 0
    push           &pc_writess.showimporttable.p 
    push           16         
    pushptroff                u64 1 0
    push           &pc_writess.showimporttable.str 
    callproc       &strcpy    
    setargs                   3 0
    push           " "        u64 
    push           20         i64 
    push           &pc_writess.showimporttable.str 
    callproc       &mlibp.ipadstr 
    setargs                   2 0
    push           &pc_writess.showimporttable.str 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           " (---)"   u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_strln 
#20319: 
#20320: 
    forup          #20317     i64 1
    opnd           pc_writess.showimporttable.i 
    opnd           pc_writeexe.nimports 
#20316: 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_line 
#20321: 
    retproc                   
End


Proc pc_writess.showsections:
    local          pc_writess.showsections.s block:72 
    local          pc_writess.showsections.i i64 
    procentry                 
    setargs                   2 0
    push           "proc Section Headersxxx" u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_strln 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_line 
#20323: 
    push           1          i64 
    pop            pc_writess.showsections.i i64 
    push           pc_writeexe.nsections i64 
    push           1          i64 
    jumplt         #20324     i64 
#20325: 
    push           &pc_writeexe.sectiontable 
    push           pc_writess.showsections.i i64 
    pushptroff                block:72 72 -72
    pop            pc_writess.showsections.s block:72 
    setargs                   2 0
    push           "Section " u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           pc_writess.showsections.i i64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_strint 
    setargs                   2 0
    push           ": "       u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           &pc_writess.showsections.s 
    push           8          
    pushptroff                u64 1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           "  ("      u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           &pci_mcl.segmentnames 
    push           &pc_writess.showsections.s 
    push           16         
    pushptroff                i64 1 0
    pushptroff                u64 8 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_str 
    setargs                   2 0
    push           ")"        u64 
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_strln 
    setargs                   2 0
    push           &pc_writess.showsections.s 
    push           32         
    pushptroff                i64 1 0
    push           "    Raw Offset" u64 
    callproc       &pc_writess.gs_value 
    setargs                   2 0
    push           &pc_writess.showsections.s 
    push           24         
    pushptroff                i64 1 0
    push           "    Raw Size" u64 
    callproc       &pc_writess.gs_value 
    setargs                   2 0
    push           &pc_writess.showsections.s 
    push           48         
    pushptroff                i64 1 0
    push           "    Virtual Offset" u64 
    callproc       &pc_writess.gs_value 
    setargs                   2 0
    push           &pc_writess.showsections.s 
    push           40         
    pushptroff                i64 1 0
    push           "    Virtual Size" u64 
    callproc       &pc_writess.gs_value 
    setargs                   2 0
    push           &pc_writess.showsections.s 
    push           64         
    pushptroff                i64 1 0
    push           "    Nrelocs" u64 
    callproc       &pc_writess.gs_value 
    setargs                   2 0
    push           &pc_writess.showsections.s 
    pushptr                   i64 
    push           "    Data" u64 
    callproc       &pc_writess.gs_value 
    setargs                   1 0
    push           pci_mcl.dest u64 
    callproc       &mlibp.gs_line 
#20326: 
    forup          #20325     i64 1
    opnd           pc_writess.showsections.i 
    opnd           pc_writeexe.nsections 
#20324: 
#20327: 
    retproc                   
End


Proc pc_disasm.decodeinstr: u64
    param          pc_disasm.decodeinstr.cptr u64 
    param          pc_disasm.decodeinstr.baseaddr u64 
    local          pc_disasm.decodeinstr.n i64 
    local          pc_disasm.decodeinstr.w i64 
    local          pc_disasm.decodeinstr.opc i64 
    local          pc_disasm.decodeinstr.reg i64 
    local          pc_disasm.decodeinstr.op i64 
    local          pc_disasm.decodeinstr.xxx i64 
    local          pc_disasm.decodeinstr.oldopsize i64 
    local          pc_disasm.decodeinstr.dispsize i64 
    local          pc_disasm.decodeinstr.pstart u64 
    local          pc_disasm.decodeinstr.str2 block:128 
    local          pc_disasm.decodeinstr.s u64 
    local          pc_disasm.decodeinstr.av_1 i64 
    local          pc_disasm.decodeinstr.av_2 i64 
    procentry                 
    push           0          u64 
    push           &pc_disasm.deststr 
    push           1          i64 
    popptroff                 u8 1 -1
    push           pc_disasm.decodeinstr.cptr u64 
    pushptr                   u64 
    store          pc_disasm.codeptr u64 
    pop            pc_disasm.decodeinstr.pstart u64 
    push           0          i64 
    pop            pc_disasm.rex i64 
    push           1          i64 
    pop            pc_disasm.opsize i64 
    push           0          i64 
    store          pc_disasm.addroverride i64 
    store          pc_disasm.sizeoverride i64 
    store          pc_disasm.f3override i64 
    pop            pc_disasm.f2override i64 
    push           0          i64 
    store          pc_disasm.offset i64 
    store          pc_disasm.indexreg i64 
    pop            pc_disasm.basereg i64 
!retry::
#20329: 
    push           &pc_disasm.codeptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          pc_disasm.decodeinstr.opc i64 
    switch         #20330     0 255
    opnd           #20331     
#20330: 
    switchlabel    #20332     
    switchlabel    #20332     
    switchlabel    #20333     
    switchlabel    #20333     
    switchlabel    #20334     
    switchlabel    #20334     
    switchlabel    #20331     
    switchlabel    #20331     
    switchlabel    #20332     
    switchlabel    #20332     
    switchlabel    #20333     
    switchlabel    #20333     
    switchlabel    #20334     
    switchlabel    #20334     
    switchlabel    #20331     
    switchlabel    #20335     
    switchlabel    #20332     
    switchlabel    #20332     
    switchlabel    #20333     
    switchlabel    #20333     
    switchlabel    #20334     
    switchlabel    #20334     
    switchlabel    #20331     
    switchlabel    #20331     
    switchlabel    #20332     
    switchlabel    #20332     
    switchlabel    #20333     
    switchlabel    #20333     
    switchlabel    #20334     
    switchlabel    #20334     
    switchlabel    #20331     
    switchlabel    #20331     
    switchlabel    #20332     
    switchlabel    #20332     
    switchlabel    #20333     
    switchlabel    #20333     
    switchlabel    #20334     
    switchlabel    #20334     
    switchlabel    #20331     
    switchlabel    #20331     
    switchlabel    #20332     
    switchlabel    #20332     
    switchlabel    #20333     
    switchlabel    #20333     
    switchlabel    #20334     
    switchlabel    #20334     
    switchlabel    #20331     
    switchlabel    #20331     
    switchlabel    #20332     
    switchlabel    #20332     
    switchlabel    #20333     
    switchlabel    #20333     
    switchlabel    #20334     
    switchlabel    #20334     
    switchlabel    #20331     
    switchlabel    #20331     
    switchlabel    #20332     
    switchlabel    #20332     
    switchlabel    #20333     
    switchlabel    #20333     
    switchlabel    #20334     
    switchlabel    #20334     
    switchlabel    #20331     
    switchlabel    #20331     
    switchlabel    #20336     
    switchlabel    #20336     
    switchlabel    #20336     
    switchlabel    #20336     
    switchlabel    #20336     
    switchlabel    #20336     
    switchlabel    #20336     
    switchlabel    #20336     
    switchlabel    #20336     
    switchlabel    #20336     
    switchlabel    #20336     
    switchlabel    #20336     
    switchlabel    #20336     
    switchlabel    #20336     
    switchlabel    #20336     
    switchlabel    #20336     
    switchlabel    #20337     
    switchlabel    #20337     
    switchlabel    #20337     
    switchlabel    #20337     
    switchlabel    #20337     
    switchlabel    #20337     
    switchlabel    #20337     
    switchlabel    #20337     
    switchlabel    #20338     
    switchlabel    #20338     
    switchlabel    #20338     
    switchlabel    #20338     
    switchlabel    #20338     
    switchlabel    #20338     
    switchlabel    #20338     
    switchlabel    #20338     
    switchlabel    #20331     
    switchlabel    #20331     
    switchlabel    #20331     
    switchlabel    #20339     
    switchlabel    #20331     
    switchlabel    #20331     
    switchlabel    #20340     
    switchlabel    #20341     
    switchlabel    #20342     
    switchlabel    #20343     
    switchlabel    #20344     
    switchlabel    #20343     
    switchlabel    #20331     
    switchlabel    #20331     
    switchlabel    #20331     
    switchlabel    #20331     
    switchlabel    #20345     
    switchlabel    #20345     
    switchlabel    #20345     
    switchlabel    #20345     
    switchlabel    #20345     
    switchlabel    #20345     
    switchlabel    #20345     
    switchlabel    #20345     
    switchlabel    #20345     
    switchlabel    #20345     
    switchlabel    #20345     
    switchlabel    #20345     
    switchlabel    #20345     
    switchlabel    #20345     
    switchlabel    #20345     
    switchlabel    #20345     
    switchlabel    #20346     
    switchlabel    #20346     
    switchlabel    #20346     
    switchlabel    #20346     
    switchlabel    #20347     
    switchlabel    #20347     
    switchlabel    #20348     
    switchlabel    #20348     
    switchlabel    #20349     
    switchlabel    #20349     
    switchlabel    #20350     
    switchlabel    #20350     
    switchlabel    #20331     
    switchlabel    #20351     
    switchlabel    #20331     
    switchlabel    #20352     
    switchlabel    #20353     
    switchlabel    #20354     
    switchlabel    #20354     
    switchlabel    #20354     
    switchlabel    #20354     
    switchlabel    #20354     
    switchlabel    #20354     
    switchlabel    #20354     
    switchlabel    #20355     
    switchlabel    #20356     
    switchlabel    #20331     
    switchlabel    #20357     
    switchlabel    #20358     
    switchlabel    #20359     
    switchlabel    #20360     
    switchlabel    #20361     
    switchlabel    #20331     
    switchlabel    #20331     
    switchlabel    #20331     
    switchlabel    #20331     
    switchlabel    #20362     
    switchlabel    #20362     
    switchlabel    #20362     
    switchlabel    #20362     
    switchlabel    #20363     
    switchlabel    #20363     
    switchlabel    #20362     
    switchlabel    #20362     
    switchlabel    #20362     
    switchlabel    #20362     
    switchlabel    #20362     
    switchlabel    #20362     
    switchlabel    #20364     
    switchlabel    #20364     
    switchlabel    #20364     
    switchlabel    #20364     
    switchlabel    #20364     
    switchlabel    #20364     
    switchlabel    #20364     
    switchlabel    #20364     
    switchlabel    #20364     
    switchlabel    #20364     
    switchlabel    #20364     
    switchlabel    #20364     
    switchlabel    #20364     
    switchlabel    #20364     
    switchlabel    #20364     
    switchlabel    #20364     
    switchlabel    #20365     
    switchlabel    #20365     
    switchlabel    #20366     
    switchlabel    #20367     
    switchlabel    #20331     
    switchlabel    #20331     
    switchlabel    #20368     
    switchlabel    #20368     
    switchlabel    #20331     
    switchlabel    #20331     
    switchlabel    #20331     
    switchlabel    #20331     
    switchlabel    #20331     
    switchlabel    #20331     
    switchlabel    #20331     
    switchlabel    #20331     
    switchlabel    #20365     
    switchlabel    #20365     
    switchlabel    #20365     
    switchlabel    #20365     
    switchlabel    #20331     
    switchlabel    #20331     
    switchlabel    #20331     
    switchlabel    #20369     
    switchlabel    #20370     
    switchlabel    #20370     
    switchlabel    #20370     
    switchlabel    #20370     
    switchlabel    #20370     
    switchlabel    #20370     
    switchlabel    #20370     
    switchlabel    #20370     
    switchlabel    #20371     
    switchlabel    #20372     
    switchlabel    #20373     
    switchlabel    #20374     
    switchlabel    #20331     
    switchlabel    #20331     
    switchlabel    #20331     
    switchlabel    #20331     
    switchlabel    #20375     
    switchlabel    #20376     
    switchlabel    #20331     
    switchlabel    #20377     
    switchlabel    #20331     
    switchlabel    #20331     
    switchlabel    #20331     
    switchlabel    #20331     
    switchlabel    #20331     
    switchlabel    #20331     
    switchlabel    #20378     
    switchlabel    #20379     
    switchlabel    #20380     
    switchlabel    #20331     
    switchlabel    #20381     
    switchlabel    #20381     
    switchlabel    #20331     
    switchlabel    #20331     
    switchlabel    #20331     
    switchlabel    #20331     
    switchlabel    #20331     
    switchlabel    #20331     
    switchlabel    #20382     
    switchlabel    #20383     
    endswitch                 
#20332: 
    push           pc_disasm.decodeinstr.opc i64 
    push           3          i64 
    shr                       i64 
    pop            pc_disasm.decodeinstr.op i64 
    setargs                   1 0
    push           pc_disasm.decodeinstr.opc i64 
    push           1          i64 
    iand                      i64 
    callproc       &pc_disasm.decodeaddr 
    setargs                   1 0
    push           &pc_disasm.basereg 
    callproc       &pc_disasm.getsilx 
    setargs                   1 0
    push           &pc_disasm.rmreg 
    callproc       &pc_disasm.getsil 
    setargs                   1 0
    push           &pc_disasm.opnames 
    push           pc_disasm.decodeinstr.op i64 
    pushptroff                u64 8 0
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_disasm.printaddrmode 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   2 0
    push           pc_disasm.opsize i64 
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strreg u64 
    callproc       &pc_disasm.genstr 
    jump           #20384     
#20333: 
    push           pc_disasm.decodeinstr.opc i64 
    push           3          i64 
    shr                       i64 
    pop            pc_disasm.decodeinstr.op i64 
    setargs                   1 0
    push           pc_disasm.decodeinstr.opc i64 
    push           1          i64 
    iand                      i64 
    callproc       &pc_disasm.decodeaddr 
    setargs                   1 0
    push           &pc_disasm.opnames 
    push           pc_disasm.decodeinstr.op i64 
    pushptroff                u64 8 0
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           &pc_disasm.rmreg 
    callproc       &pc_disasm.getsil 
    setargs                   1 0
    setargs                   2 0
    push           pc_disasm.opsize i64 
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strreg u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_disasm.printaddrmode 
    jump           #20384     
#20334: 
    setargs                   1 0
    push           &pc_disasm.opnames 
    push           pc_disasm.decodeinstr.opc i64 
    push           3          i64 
    shr                       i64 
    pushptroff                u64 8 0
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_disasm.genstr 
    push           pc_disasm.decodeinstr.opc i64 
    push           1          i64 
    iand                      i64 
    jumpfalse      #20385     i64 
    push           4          i64 
    pop            pc_disasm.opsize i64 
    push           pc_disasm.sizeoverride i64 
    jumpfalse      #20386     i64 
    push           2          i64 
    pop            pc_disasm.opsize i64 
#20386: 
    push           pc_disasm.rex i64 
    push           8          i64 
    iand                      i64 
    jumpfalse      #20387     i64 
    push           8          i64 
    pop            pc_disasm.opsize i64 
#20387: 
#20385: 
    setargs                   1 0
    setargs                   2 0
    push           pc_disasm.opsize i64 
    push           1          i64 
    callfn         &pc_disasm.strreg u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   0 0
    callfn         &pc_disasm.readimm i64 
    callproc       &pc_disasm.genintd 
    jump           #20384     
#20335: 
    setargs                   0 0
    callproc       &pc_disasm.decodetwobyteinstr 
    jump           #20384     
#20336: 
    push           pc_disasm.decodeinstr.opc i64 
    pop            pc_disasm.rex i64 
    jump           #20329     
    jump           #20384     
#20337: 
    setargs                   2 0
    push           pc_disasm.rex i64 
    push           1          i64 
    iand                      i64 
    push           pc_disasm.decodeinstr.opc i64 
    push           7          i64 
    iand                      i64 
    callfn         &pc_disasm.getreg i64 
    pop            pc_disasm.decodeinstr.reg i64 
    setargs                   1 0
    push           "push "    u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   2 0
    push           8          i64 
    push           pc_disasm.decodeinstr.reg i64 
    callfn         &pc_disasm.strreg u64 
    callproc       &pc_disasm.genstr 
    jump           #20384     
#20338: 
    setargs                   2 0
    push           pc_disasm.rex i64 
    push           1          i64 
    iand                      i64 
    push           pc_disasm.decodeinstr.opc i64 
    push           7          i64 
    iand                      i64 
    callfn         &pc_disasm.getreg i64 
    pop            pc_disasm.decodeinstr.reg i64 
    setargs                   1 0
    push           "pop "     u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   2 0
    push           8          i64 
    push           pc_disasm.decodeinstr.reg i64 
    callfn         &pc_disasm.strreg u64 
    callproc       &pc_disasm.genstr 
    jump           #20384     
#20339: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.decodeaddr 
    setargs                   1 0
    push           "movsxd "  u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   2 0
    push           pc_disasm.opsize i64 
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strreg u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    push           4          i64 
    pop            pc_disasm.opsize i64 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_disasm.printaddrmode 
    jump           #20384     
#20340: 
    push           1          i64 
    pop            pc_disasm.sizeoverride i64 
    jump           #20329     
    jump           #20384     
#20341: 
    push           1          i64 
    pop            pc_disasm.addroverride i64 
    jump           #20329     
    jump           #20384     
#20342: 
    setargs                   1 0
    push           "push "    u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   0 0
    callfn         &pc_disasm.readint32 i64 
    callproc       &pc_disasm.genintd 
    jump           #20384     
#20344: 
    setargs                   1 0
    push           "push "    u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   0 0
    callfn         &pc_disasm.readsbyte i64 
    callproc       &pc_disasm.genintd 
    jump           #20384     
#20343: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.decodeaddr 
    push           pc_disasm.basereg i64 
    push           pc_disasm.rmreg i64 
    jumpeq         #20388     i64 
    setargs                   1 0
    push           "imul3"    u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   2 0
    push           pc_disasm.opsize i64 
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strreg u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    jump           #20389     
#20388: 
    setargs                   1 0
    push           "imul2"    u64 
    callproc       &pc_disasm.genstr 
#20389: 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_disasm.printaddrmode 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    startmult                 
    push           pc_disasm.decodeinstr.opc i64 
    push           2          i64 
    iand                      i64 
    jumpfalse      #20390     i64 
    push           1          i64 
    resetmult                 
    jump           #20391     
#20390: 
    push           pc_disasm.opsize i64 
    endmult                   
#20391: 
    pop            pc_disasm.opsize i64 
    setargs                   1 0
    setargs                   0 0
    callfn         &pc_disasm.readimm i64 
    callproc       &pc_disasm.genintd 
    jump           #20384     
#20345: 
    setargs                   1 0
    push           "j"        u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           &pc_disasm.condnames 
    push           pc_disasm.decodeinstr.opc i64 
    push           15         i64 
    iand                      i64 
    pushptroff                u64 8 0
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   0 0
    callfn         &pc_disasm.readsbyte i64 
    callproc       &pc_disasm.genintd 
    jump           #20384     
#20346: 
    setargs                   1 0
    push           pc_disasm.decodeinstr.opc i64 
    push           1          i64 
    iand                      i64 
    callproc       &pc_disasm.decodeaddr 
    setargs                   1 0
    push           &pc_disasm.opnames 
    push           pc_disasm.rmopc i64 
    pushptroff                u64 8 0
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           &pc_disasm.basereg 
    callproc       &pc_disasm.getsilx 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_disasm.printaddrmode 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    push           pc_disasm.decodeinstr.opc i64 
    push           131        i64 
    jumpeq         #20392     i64 
    setargs                   1 0
    setargs                   0 0
    callfn         &pc_disasm.readimm i64 
    callproc       &pc_disasm.genintd 
    jump           #20393     
#20392: 
    setargs                   1 0
    setargs                   0 0
    callfn         &pc_disasm.readsbyte i64 
    callproc       &pc_disasm.genintd 
#20393: 
    jump           #20384     
#20347: 
    setargs                   1 0
    push           pc_disasm.decodeinstr.opc i64 
    push           1          i64 
    iand                      i64 
    callproc       &pc_disasm.decodeaddr 
    setargs                   1 0
    push           &pc_disasm.basereg 
    callproc       &pc_disasm.getsilx 
    setargs                   1 0
    push           &pc_disasm.rmreg 
    callproc       &pc_disasm.getsil 
    setargs                   1 0
    push           "test "    u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_disasm.printaddrmode 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   2 0
    push           pc_disasm.opsize i64 
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strreg u64 
    callproc       &pc_disasm.genstr 
    jump           #20384     
#20348: 
    setargs                   1 0
    push           pc_disasm.decodeinstr.opc i64 
    push           1          i64 
    iand                      i64 
    callproc       &pc_disasm.decodeaddr 
    setargs                   1 0
    push           "exch2 "   u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           &pc_disasm.basereg 
    callproc       &pc_disasm.getsilx 
    setargs                   1 0
    push           &pc_disasm.rmreg 
    callproc       &pc_disasm.getsil 
    setargs                   1 0
    setargs                   2 0
    push           pc_disasm.opsize i64 
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strreg u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           ","        u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_disasm.printaddrmode 
    jump           #20384     
#20349: 
    setargs                   1 0
    push           pc_disasm.decodeinstr.opc i64 
    push           1          i64 
    iand                      i64 
    callproc       &pc_disasm.decodeaddr 
    setargs                   1 0
    push           "mov"      u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           &pc_disasm.basereg 
    callproc       &pc_disasm.getsilx 
    setargs                   1 0
    push           &pc_disasm.rmreg 
    callproc       &pc_disasm.getsil 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_disasm.printaddrmode 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   2 0
    push           pc_disasm.opsize i64 
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strreg u64 
    callproc       &pc_disasm.genstr 
    jump           #20384     
#20350: 
    setargs                   1 0
    push           pc_disasm.decodeinstr.opc i64 
    push           1          i64 
    iand                      i64 
    callproc       &pc_disasm.decodeaddr 
    setargs                   1 0
    push           "mov "     u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           &pc_disasm.basereg 
    callproc       &pc_disasm.getsilx 
    setargs                   1 0
    push           &pc_disasm.rmreg 
    callproc       &pc_disasm.getsil 
    setargs                   1 0
    setargs                   2 0
    push           pc_disasm.opsize i64 
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strreg u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_disasm.printaddrmode 
    jump           #20384     
#20351: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.decodeaddr 
    setargs                   1 0
    push           "lea "     u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   2 0
    push           pc_disasm.opsize i64 
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strreg u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_disasm.printaddrmode 
    jump           #20384     
#20352: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.decodeaddr 
    push           1          i64 
    pop            pc_disasm.opsize i64 
    setargs                   1 0
    push           "pop"      u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_disasm.printaddrmode 
    jump           #20384     
#20353: 
    push           pc_disasm.rex i64 
    jumpfalse      #20394     i64 
    jump           #20395     
#20394: 
    setargs                   1 0
    push           "nop"      u64 
    callproc       &pc_disasm.genstr 
    jump           #20384     
#20354: 
!doexch::
#20395: 
    push           pc_disasm.decodeinstr.opc i64 
    push           7          i64 
    iand                      i64 
    push           1          i64 
    add                       i64 
    pop            pc_disasm.decodeinstr.reg i64 
    push           pc_disasm.rex i64 
    push           1          i64 
    iand                      i64 
    jumpfalse      #20396     i64 
    push           &pc_disasm.decodeinstr.reg 
    push           8          i64 
    addto                     i64 
#20396: 
    startmult                 
    push           pc_disasm.sizeoverride i64 
    jumpfalse      #20397     i64 
    push           2          i64 
    resetmult                 
    jump           #20398     
#20397: 
    push           4          i64 
    endmult                   
#20398: 
    pop            pc_disasm.opsize i64 
    push           pc_disasm.rex i64 
    push           8          i64 
    iand                      i64 
    jumpfalse      #20399     i64 
    push           8          i64 
    pop            pc_disasm.opsize i64 
#20399: 
    setargs                   1 0
    push           "xchg "    u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   2 0
    push           pc_disasm.opsize i64 
    push           1          i64 
    callfn         &pc_disasm.strreg u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   2 0
    push           pc_disasm.opsize i64 
    push           pc_disasm.decodeinstr.reg i64 
    callfn         &pc_disasm.strreg u64 
    callproc       &pc_disasm.genstr 
    jump           #20384     
#20355: 
    push           pc_disasm.sizeoverride i64 
    jumpfalse      #20400     i64 
    setargs                   1 0
    push           "cbw"      u64 
    callproc       &pc_disasm.genstr 
    jump           #20401     
#20400: 
    setargs                   1 0
    push           "cbw???"   u64 
    callproc       &pc_disasm.genstr 
#20401: 
    jump           #20384     
#20356: 
    push           pc_disasm.sizeoverride i64 
    jumpfalse      #20402     i64 
    setargs                   1 0
    push           "cwd"      u64 
    callproc       &pc_disasm.genstr 
    jump           #20403     
#20402: 
    push           pc_disasm.rex i64 
    push           8          i64 
    iand                      i64 
    jumpfalse      #20404     i64 
    setargs                   1 0
    push           "cqo"      u64 
    callproc       &pc_disasm.genstr 
    jump           #20403     
#20404: 
    setargs                   1 0
    push           "cdq"      u64 
    callproc       &pc_disasm.genstr 
#20403: 
    jump           #20384     
#20357: 
    setargs                   1 0
    push           "wait"     u64 
    callproc       &pc_disasm.genstr 
    jump           #20384     
#20358: 
    setargs                   1 0
    push           "pushf"    u64 
    callproc       &pc_disasm.genstr 
    jump           #20384     
#20359: 
    setargs                   1 0
    push           "popf"     u64 
    callproc       &pc_disasm.genstr 
    jump           #20384     
#20360: 
    setargs                   1 0
    push           "sahf"     u64 
    callproc       &pc_disasm.genstr 
    jump           #20384     
#20361: 
    setargs                   1 0
    push           "lahf"     u64 
    callproc       &pc_disasm.genstr 
    jump           #20384     
#20362: 
    setargs                   1 0
    startmult                 
    push           pc_disasm.decodeinstr.opc i64 
    push           1          i64 
    shr                       i64 
    push           7          i64 
    iand                      i64 
    switch         #20405     1 7
    opnd           #20406     
#20405: 
    switchlabel    #20407     
    switchlabel    #20408     
    switchlabel    #20409     
    switchlabel    #20410     
    switchlabel    #20411     
    switchlabel    #20412     
    switchlabel    #20413     
    endswitch                 
#20407: 
    push           "?"        u64 
    resetmult                 
    jump           #20414     
#20408: 
    push           "movs"     u64 
    resetmult                 
    jump           #20414     
#20409: 
    push           "cmps"     u64 
    resetmult                 
    jump           #20414     
#20410: 
    push           "?"        u64 
    resetmult                 
    jump           #20414     
#20411: 
    push           "stos"     u64 
    resetmult                 
    jump           #20414     
#20412: 
    push           "lods"     u64 
    resetmult                 
    jump           #20414     
#20413: 
    push           "scas"     u64 
    resetmult                 
    jump           #20414     
#20406: 
    push           "?"        u64 
    endmult                   
#20414: 
    callproc       &pc_disasm.genstr 
    push           pc_disasm.decodeinstr.opc i64 
    push           1          i64 
    iand                      i64 
    push           0          i64 
    jumpne         #20415     i64 
    setargs                   1 0
    push           "b"        u64 
    callproc       &pc_disasm.genstr 
    jump           #20416     
#20415: 
    push           pc_disasm.rex i64 
    push           8          i64 
    iand                      i64 
    jumpfalse      #20417     i64 
    setargs                   1 0
    push           "q"        u64 
    callproc       &pc_disasm.genstr 
    jump           #20418     
#20417: 
    push           pc_disasm.sizeoverride i64 
    jumpfalse      #20419     i64 
    setargs                   1 0
    push           "w"        u64 
    callproc       &pc_disasm.genstr 
    jump           #20418     
#20419: 
    setargs                   1 0
    push           "d"        u64 
    callproc       &pc_disasm.genstr 
#20418: 
#20416: 
    jump           #20384     
#20363: 
    setargs                   1 0
    push           "test "    u64 
    callproc       &pc_disasm.genstr 
    push           pc_disasm.decodeinstr.opc i64 
    push           1          i64 
    iand                      i64 
    jumpfalse      #20420     i64 
    startmult                 
    push           pc_disasm.sizeoverride i64 
    jumpfalse      #20421     i64 
    push           2          i64 
    resetmult                 
    jump           #20422     
#20421: 
    push           4          i64 
    endmult                   
#20422: 
    pop            pc_disasm.opsize i64 
    push           pc_disasm.rex i64 
    push           8          i64 
    iand                      i64 
    jumpfalse      #20423     i64 
    push           8          i64 
    pop            pc_disasm.opsize i64 
#20423: 
#20420: 
    setargs                   1 0
    setargs                   2 0
    push           pc_disasm.opsize i64 
    push           1          i64 
    callfn         &pc_disasm.strreg u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   0 0
    callfn         &pc_disasm.readimm i64 
    callproc       &pc_disasm.genintd 
    jump           #20384     
#20364: 
    push           pc_disasm.decodeinstr.opc i64 
    push           7          i64 
    iand                      i64 
    push           1          i64 
    add                       i64 
    pop            pc_disasm.decodeinstr.reg i64 
    push           pc_disasm.rex i64 
    push           1          i64 
    iand                      i64 
    jumpfalse      #20424     i64 
    push           &pc_disasm.decodeinstr.reg 
    push           8          i64 
    addto                     i64 
#20424: 
    push           pc_disasm.decodeinstr.opc i64 
    push           8          i64 
    iand                      i64 
    jumpfalse      #20425     i64 
    startmult                 
    push           pc_disasm.sizeoverride i64 
    jumpfalse      #20426     i64 
    push           2          i64 
    resetmult                 
    jump           #20427     
#20426: 
    push           4          i64 
    endmult                   
#20427: 
    pop            pc_disasm.opsize i64 
    push           pc_disasm.rex i64 
    push           8          i64 
    iand                      i64 
    jumpfalse      #20428     i64 
    push           8          i64 
    pop            pc_disasm.opsize i64 
#20428: 
#20425: 
    setargs                   1 0
    push           "mov "     u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           &pc_disasm.decodeinstr.reg 
    callproc       &pc_disasm.getsil 
    setargs                   1 0
    setargs                   2 0
    push           pc_disasm.opsize i64 
    push           pc_disasm.decodeinstr.reg i64 
    callfn         &pc_disasm.strreg u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   0 0
    callfn         &pc_disasm.readimm8 i64 
    callproc       &pc_disasm.genintd 
    jump           #20384     
#20365: 
    setargs                   1 0
    push           pc_disasm.decodeinstr.opc i64 
    push           1          i64 
    iand                      i64 
    callproc       &pc_disasm.decodeaddr 
    setargs                   1 0
    push           &pc_disasm.basereg 
    callproc       &pc_disasm.getsilx 
    setargs                   1 0
    startmult                 
    push           pc_disasm.rmopc i64 
    push           1          i64 
    add                       i64 
    switch         #20429     1 8
    opnd           #20430     
#20429: 
    switchlabel    #20431     
    switchlabel    #20432     
    switchlabel    #20433     
    switchlabel    #20434     
    switchlabel    #20435     
    switchlabel    #20436     
    switchlabel    #20437     
    switchlabel    #20438     
    endswitch                 
#20431: 
    push           "rol"      u64 
    resetmult                 
    jump           #20439     
#20432: 
    push           "ror"      u64 
    resetmult                 
    jump           #20439     
#20433: 
    push           "rcl"      u64 
    resetmult                 
    jump           #20439     
#20434: 
    push           "rcr"      u64 
    resetmult                 
    jump           #20439     
#20435: 
    push           "shl"      u64 
    resetmult                 
    jump           #20439     
#20436: 
    push           "shr"      u64 
    resetmult                 
    jump           #20439     
#20437: 
    push           "?"        u64 
    resetmult                 
    jump           #20439     
#20438: 
    push           "sar"      u64 
    resetmult                 
    jump           #20439     
#20430: 
    push           "?"        u64 
    endmult                   
#20439: 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_disasm.printaddrmode 
    push           pc_disasm.decodeinstr.opc i64 
    push           193        i64 
    jumpgt         #20440     i64 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   0 0
    callfn         &pc_disasm.readbyte i64 
    callproc       &pc_disasm.genintd 
    jump           #20441     
#20440: 
    setargs                   1 0
    startmult                 
    push           pc_disasm.decodeinstr.opc i64 
    push           2          i64 
    iand                      i64 
    jumpfalse      #20442     i64 
    push           ", cl"     u64 
    resetmult                 
    jump           #20443     
#20442: 
    push           ", 1"      u64 
    endmult                   
#20443: 
    callproc       &pc_disasm.genstr 
#20441: 
    jump           #20384     
#20366: 
    setargs                   1 0
    push           "retn "    u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   0 0
    callfn         &pc_disasm.readword16 i64 
    callproc       &pc_disasm.genintd 
    jump           #20384     
#20367: 
    setargs                   1 0
    push           "ret"      u64 
    callproc       &pc_disasm.genstr 
    jump           #20384     
#20368: 
    setargs                   1 0
    push           pc_disasm.decodeinstr.opc i64 
    push           1          i64 
    iand                      i64 
    callproc       &pc_disasm.decodeaddr 
    setargs                   1 0
    push           "mov"      u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_disasm.printaddrmode 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   0 0
    callfn         &pc_disasm.readimm i64 
    callproc       &pc_disasm.genintd 
    jump           #20384     
#20369: 
    setargs                   1 0
    push           "xlat"     u64 
    callproc       &pc_disasm.genstr 
    jump           #20384     
#20370: 
    setargs                   1 0
    push           pc_disasm.decodeinstr.opc i64 
    push           7          i64 
    iand                      i64 
    callproc       &pc_disasm.decode8087 
    jump           #20384     
#20371: 
    setargs                   1 0
    push           "loopnz "  u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   0 0
    callfn         &pc_disasm.readsbyte i64 
    callproc       &pc_disasm.genintd 
    jump           #20384     
#20372: 
    setargs                   1 0
    push           "loopz "   u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   0 0
    callfn         &pc_disasm.readsbyte i64 
    callproc       &pc_disasm.genintd 
    jump           #20384     
#20373: 
    setargs                   1 0
    push           "loop "    u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   0 0
    callfn         &pc_disasm.readsbyte i64 
    callproc       &pc_disasm.genintd 
    jump           #20384     
#20374: 
    push           pc_disasm.addroverride i64 
    jumpfalse      #20444     i64 
    setargs                   1 0
    push           "jecxz "   u64 
    callproc       &pc_disasm.genstr 
    jump           #20445     
#20444: 
    setargs                   1 0
    push           "jrcxz "   u64 
    callproc       &pc_disasm.genstr 
#20445: 
    setargs                   1 0
    setargs                   0 0
    callfn         &pc_disasm.readsbyte i64 
    callproc       &pc_disasm.genintd 
    jump           #20384     
#20375: 
    setargs                   1 0
    push           "call "    u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   0 0
    callfn         &pc_disasm.readint32 i64 
    callproc       &pc_disasm.genintd 
    jump           #20384     
#20376: 
    setargs                   1 0
    push           "[4] jmp " u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   0 0
    callfn         &pc_disasm.readint32 i64 
    callproc       &pc_disasm.genintd 
    jump           #20384     
#20377: 
    setargs                   1 0
    push           "jmp "     u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   0 0
    callfn         &pc_disasm.readsbyte i64 
    callproc       &pc_disasm.genintd 
    jump           #20384     
#20378: 
    push           pc_disasm.codeptr u64 
    pushptr                   u8 
    push           15         i64 
    jumpeq         #20446     i64 
    push           pc_disasm.codeptr u64 
    pushptr                   u8 
    push           64         i64 
    jumpge         #20446     i64 
    push           pc_disasm.codeptr u64 
    pushptr                   u8 
    push           79         i64 
    jumple         #20446     i64 
    setargs                   1 0
    push           "repne"    u64 
    callproc       &pc_disasm.genstr 
    jump           #20447     
#20446: 
    push           1          i64 
    pop            pc_disasm.f2override i64 
    jump           #20329     
#20447: 
    jump           #20384     
#20379: 
    push           pc_disasm.codeptr u64 
    pushptr                   u8 
    push           15         i64 
    jumpeq         #20448     i64 
    push           pc_disasm.codeptr u64 
    pushptr                   u8 
    push           64         i64 
    jumpge         #20448     i64 
    push           pc_disasm.codeptr u64 
    pushptr                   u8 
    push           79         i64 
    jumple         #20448     i64 
    setargs                   1 0
    push           "repe"     u64 
    callproc       &pc_disasm.genstr 
    jump           #20449     
#20448: 
    push           1          i64 
    pop            pc_disasm.f3override i64 
    jump           #20329     
#20449: 
    jump           #20384     
#20380: 
    push           0          u64 
    setret                    u64 
    jump           #20450     
    jump           #20384     
#20381: 
    setargs                   1 0
    push           pc_disasm.decodeinstr.opc i64 
    push           1          i64 
    iand                      i64 
    callproc       &pc_disasm.decodeaddr 
    setargs                   1 0
    push           &pc_disasm.basereg 
    callproc       &pc_disasm.getsilx 
    setargs                   1 0
    startmult                 
    push           pc_disasm.rmopc i64 
    push           1          i64 
    add                       i64 
    switch         #20451     1 8
    opnd           #20452     
#20451: 
    switchlabel    #20453     
    switchlabel    #20454     
    switchlabel    #20455     
    switchlabel    #20456     
    switchlabel    #20457     
    switchlabel    #20458     
    switchlabel    #20459     
    switchlabel    #20460     
    endswitch                 
#20453: 
    push           "test"     u64 
    resetmult                 
    jump           #20461     
#20454: 
    push           "?"        u64 
    resetmult                 
    jump           #20461     
#20455: 
    push           "not"      u64 
    resetmult                 
    jump           #20461     
#20456: 
    push           "neg"      u64 
    resetmult                 
    jump           #20461     
#20457: 
    push           "mul"      u64 
    resetmult                 
    jump           #20461     
#20458: 
    push           "imul"     u64 
    resetmult                 
    jump           #20461     
#20459: 
    push           "div"      u64 
    resetmult                 
    jump           #20461     
#20460: 
    push           "idiv"     u64 
    resetmult                 
    jump           #20461     
#20452: 
    push           "?"        u64 
    endmult                   
#20461: 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_disasm.printaddrmode 
    push           pc_disasm.rmopc i64 
    push           0          i64 
    jumpne         #20462     i64 
    push           pc_disasm.opsize i64 
    push           8          i64 
    jumpne         #20463     i64 
    push           4          i64 
    pop            pc_disasm.opsize i64 
#20463: 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   0 0
    callfn         &pc_disasm.readimm i64 
    callproc       &pc_disasm.genintd 
#20462: 
    jump           #20384     
#20382: 
    push           0          i64 
    pop            pc_disasm.decodeinstr.w i64 
    jump           #20464     
    jump           #20384     
#20383: 
    push           1          i64 
    pop            pc_disasm.decodeinstr.w i64 
!doff::
#20464: 
    setargs                   1 0
    push           pc_disasm.decodeinstr.w i64 
    callproc       &pc_disasm.decodeaddr 
    push           pc_disasm.rmopc i64 
    push           0          i64 
    casejumpeq     #20465     i64 0
    push           1          i64 
    casejumpeq     #20466     i64 0
    push           2          i64 
    casejumpeq     #20467     i64 0
    push           4          i64 
    casejumpeq     #20468     i64 0
    push           6          i64 
    casejumpeq     #20469     i64 0
    popstack                  i64 
    jump           #20470     
#20465: 
    setargs                   1 0
    push           &pc_disasm.basereg 
    callproc       &pc_disasm.getsilx 
    setargs                   1 0
    push           "inc"      u64 
    callproc       &pc_disasm.genstr 
    jump           #20471     
#20466: 
    setargs                   1 0
    push           &pc_disasm.basereg 
    callproc       &pc_disasm.getsilx 
    setargs                   1 0
    push           "dec"      u64 
    callproc       &pc_disasm.genstr 
    jump           #20471     
#20467: 
    push           8          i64 
    pop            pc_disasm.opsize i64 
    setargs                   1 0
    push           "icall"    u64 
    callproc       &pc_disasm.genstr 
    jump           #20471     
#20468: 
    push           8          i64 
    pop            pc_disasm.opsize i64 
    setargs                   1 0
    push           "jmp"      u64 
    callproc       &pc_disasm.genstr 
    jump           #20471     
#20469: 
    push           8          i64 
    pop            pc_disasm.opsize i64 
    setargs                   1 0
    push           "push"     u64 
    callproc       &pc_disasm.genstr 
    jump           #20471     
#20470: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "FFxx?"    u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#20471: 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_disasm.printaddrmode 
    jump           #20384     
#20331: 
    setargs                   1 0
    push           "Unknown opcode: " u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           pc_disasm.decodeinstr.opc i64 
    callproc       &pc_disasm.genhex 
#20384: 
    push           pc_disasm.decodeinstr.baseaddr u64 
    jumpfalse      #20472     u64 
    setargs                   1 0
    push           &pc_disasm.decodeinstr.str 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    push           "z6h"      u64 
    push           pc_disasm.decodeinstr.baseaddr u64 
    callproc       &msysp.m$print_ptr 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           ": "       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    jump           #20473     
#20472: 
    setargs                   1 0
    push           &pc_disasm.decodeinstr.str 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    push           "z6h"      u64 
    push           pc_disasm.decodeinstr.pstart u64 
    callproc       &msysp.m$print_ptr 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           ": "       u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#20473: 
    push           pc_disasm.codeptr u64 
    push           pc_disasm.decodeinstr.pstart u64 
    subref                    i64 1
    pop            pc_disasm.decodeinstr.n i64 
#20474: 
    push           pc_disasm.decodeinstr.n i64 
    pop            pc_disasm.decodeinstr.av_1 i64 
    push           pc_disasm.decodeinstr.av_1 i64 
    push           0          i64 
    jumple         #20475     i64 
#20476: 
    setargs                   1 0
    push           &pc_disasm.decodeinstr.str2 
    callproc       &msysp.m$print_startstr 
    setargs                   2 0
    push           "z2H"      u64 
    push           &pc_disasm.decodeinstr.pstart 
    loadincr                  u64 1
    pushptr                   u8 
    callproc       &msysp.m$print_i64 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           " "        u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   2 0
    push           &pc_disasm.decodeinstr.str2 
    push           &pc_disasm.decodeinstr.str 
    callproc       &strcat    
#20477: 
    to             #20476     
    opnd           pc_disasm.decodeinstr.av_1 
#20475: 
#20478: 
    push           14         i64 
    push           pc_disasm.decodeinstr.n i64 
    sub                       i64 
    pop            pc_disasm.decodeinstr.av_2 i64 
    push           pc_disasm.decodeinstr.av_2 i64 
    push           0          i64 
    jumple         #20479     i64 
#20480: 
    setargs                   2 0
    push           "-- "      u64 
    push           &pc_disasm.decodeinstr.str 
    callproc       &strcat    
#20481: 
    to             #20480     
    opnd           pc_disasm.decodeinstr.av_2 
#20479: 
    setargs                   2 0
    push           &pc_disasm.deststr 
    push           &pc_disasm.decodeinstr.str 
    callproc       &strcat    
    push           pc_disasm.codeptr u64 
    push           pc_disasm.decodeinstr.cptr u64 
    popptr                    u64 
    push           &pc_disasm.decodeinstr.str 
    setret                    u64 
    jump           #20450     
#20450: 
    retfn                     u64 
End


Proc pc_disasm.decodetwobyteinstr:
    local          pc_disasm.decodetwobyteinstr.opc i64 
    local          pc_disasm.decodetwobyteinstr.rhssize i64 
    local          pc_disasm.decodetwobyteinstr.third i64 
    local          pc_disasm.decodetwobyteinstr.imm i64 
    local          pc_disasm.decodetwobyteinstr.opcstr u64 
    procentry                 
    push           &pc_disasm.codeptr 
    loadincr                  u64 1
    pushptr                   u8 
    store          pc_disasm.decodetwobyteinstr.opc i64 
    switch         #20483     42 239
    opnd           #20484     
#20483: 
    switchlabel    #20485     
    switchlabel    #20484     
    switchlabel    #20486     
    switchlabel    #20487     
    switchlabel    #20484     
    switchlabel    #20488     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20489     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20490     
    switchlabel    #20490     
    switchlabel    #20490     
    switchlabel    #20490     
    switchlabel    #20490     
    switchlabel    #20490     
    switchlabel    #20490     
    switchlabel    #20490     
    switchlabel    #20490     
    switchlabel    #20490     
    switchlabel    #20490     
    switchlabel    #20490     
    switchlabel    #20490     
    switchlabel    #20490     
    switchlabel    #20490     
    switchlabel    #20490     
    switchlabel    #20484     
    switchlabel    #20491     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20492     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20493     
    switchlabel    #20494     
    switchlabel    #20495     
    switchlabel    #20496     
    switchlabel    #20484     
    switchlabel    #20497     
    switchlabel    #20498     
    switchlabel    #20499     
    switchlabel    #20500     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20501     
    switchlabel    #20502     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20503     
    switchlabel    #20504     
    switchlabel    #20505     
    switchlabel    #20505     
    switchlabel    #20505     
    switchlabel    #20505     
    switchlabel    #20505     
    switchlabel    #20505     
    switchlabel    #20505     
    switchlabel    #20505     
    switchlabel    #20505     
    switchlabel    #20505     
    switchlabel    #20505     
    switchlabel    #20505     
    switchlabel    #20505     
    switchlabel    #20505     
    switchlabel    #20505     
    switchlabel    #20505     
    switchlabel    #20506     
    switchlabel    #20506     
    switchlabel    #20506     
    switchlabel    #20506     
    switchlabel    #20506     
    switchlabel    #20506     
    switchlabel    #20506     
    switchlabel    #20506     
    switchlabel    #20506     
    switchlabel    #20506     
    switchlabel    #20506     
    switchlabel    #20506     
    switchlabel    #20506     
    switchlabel    #20506     
    switchlabel    #20506     
    switchlabel    #20506     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20507     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20508     
    switchlabel    #20508     
    switchlabel    #20509     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20510     
    switchlabel    #20510     
    switchlabel    #20508     
    switchlabel    #20508     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20511     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20512     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20484     
    switchlabel    #20513     
    endswitch                 
#20485: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.decodeaddr 
    push           pc_disasm.f3override i64 
    jumpfalse      #20514     i64 
    setargs                   1 0
    push           "cvtsi2ss " u64 
    callproc       &pc_disasm.genstr 
    jump           #20515     
#20514: 
    setargs                   1 0
    push           "cvtsi2sd " u64 
    callproc       &pc_disasm.genstr 
#20515: 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strxmm u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_disasm.printaddrmode 
    jump           #20516     
#20486: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.decodeaddr 
    push           pc_disasm.f3override i64 
    jumpfalse      #20517     i64 
    setargs                   1 0
    push           "cvttss2si " u64 
    callproc       &pc_disasm.genstr 
    push           4          i64 
    pop            pc_disasm.decodetwobyteinstr.rhssize i64 
    jump           #20518     
#20517: 
    setargs                   1 0
    push           "cvttsd2si " u64 
    callproc       &pc_disasm.genstr 
    push           8          i64 
    pop            pc_disasm.decodetwobyteinstr.rhssize i64 
#20518: 
    push           pc_disasm.rex i64 
    push           8          i64 
    iand                      i64 
    jumpfalse      #20519     i64 
    setargs                   1 0
    setargs                   2 0
    push           8          i64 
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strreg u64 
    callproc       &pc_disasm.genstr 
    jump           #20520     
#20519: 
    setargs                   1 0
    setargs                   2 0
    push           4          i64 
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strreg u64 
    callproc       &pc_disasm.genstr 
#20520: 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    push           pc_disasm.decodetwobyteinstr.rhssize i64 
    pop            pc_disasm.opsize i64 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.printaddrmode 
    jump           #20516     
#20487: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.decodeaddr 
    push           pc_disasm.f3override i64 
    jumpfalse      #20521     i64 
    setargs                   1 0
    push           "cvtss2si " u64 
    callproc       &pc_disasm.genstr 
    push           4          i64 
    pop            pc_disasm.decodetwobyteinstr.rhssize i64 
    jump           #20522     
#20521: 
    setargs                   1 0
    push           "cvtsd2si " u64 
    callproc       &pc_disasm.genstr 
    push           8          i64 
    pop            pc_disasm.decodetwobyteinstr.rhssize i64 
#20522: 
    push           pc_disasm.rex i64 
    push           8          i64 
    iand                      i64 
    jumpfalse      #20523     i64 
    setargs                   1 0
    setargs                   2 0
    push           8          i64 
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strreg u64 
    callproc       &pc_disasm.genstr 
    jump           #20524     
#20523: 
    setargs                   1 0
    setargs                   2 0
    push           4          i64 
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strreg u64 
    callproc       &pc_disasm.genstr 
#20524: 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    push           pc_disasm.decodetwobyteinstr.rhssize i64 
    pop            pc_disasm.opsize i64 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.printaddrmode 
    jump           #20516     
#20488: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.decodeaddr 
    push           pc_disasm.sizeoverride i64 
    jumpfalse      #20525     i64 
    push           8          i64 
    pop            pc_disasm.opsize i64 
    setargs                   1 0
    push           "comisd "  u64 
    callproc       &pc_disasm.genstr 
    jump           #20526     
#20525: 
    push           4          i64 
    pop            pc_disasm.opsize i64 
    setargs                   1 0
    push           "comiss "  u64 
    callproc       &pc_disasm.genstr 
#20526: 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strxmm u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.printaddrmode 
    jump           #20516     
#20489: 
    push           &pc_disasm.codeptr 
    loadincr                  u64 1
    pushptr                   u8 
    pop            pc_disasm.decodetwobyteinstr.third i64 
    push           pc_disasm.decodetwobyteinstr.third i64 
    push           99         i64 
    casejumpeq     #20527     i64 0
    push           98         i64 
    casejumpeq     #20528     i64 0
    popstack                  i64 
    jump           #20529     
#20527: 
    setargs                   1 0
    push           "pcmpistri " u64 
    callproc       &pc_disasm.genstr 
    jump           #20530     
#20528: 
    setargs                   1 0
    push           "pcmpistrm " u64 
    callproc       &pc_disasm.genstr 
    jump           #20530     
#20529: 
    setargs                   1 0
    push           "Unknown opcode 2-byte opcode: 0F " u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           pc_disasm.decodetwobyteinstr.opc i64 
    callproc       &pc_disasm.genhex 
    jump           #20531     
#20530: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.decodeaddr 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strxmm u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.printaddrmode 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    push           &pc_disasm.codeptr 
    loadincr                  u64 1
    pushptr                   u8 
    pop            pc_disasm.decodetwobyteinstr.imm i64 
    setargs                   1 0
    push           pc_disasm.decodetwobyteinstr.imm i64 
    callproc       &pc_disasm.genintd 
    jump           #20516     
#20490: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.decodeaddr 
    setargs                   1 0
    push           "cmov"     u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           &pc_disasm.condnames 
    push           pc_disasm.decodetwobyteinstr.opc i64 
    push           15         i64 
    iand                      i64 
    pushptroff                u64 8 0
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   2 0
    push           pc_disasm.opsize i64 
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strreg u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_disasm.printaddrmode 
    jump           #20516     
#20491: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.decodeaddr 
    startmult                 
    push           pc_disasm.f3override i64 
    jumpfalse      #20532     i64 
    push           4          i64 
    resetmult                 
    jump           #20533     
#20532: 
    push           8          i64 
    endmult                   
#20533: 
    pop            pc_disasm.opsize i64 
    setargs                   1 0
    startmult                 
    push           pc_disasm.opsize i64 
    push           4          i64 
    jumpne         #20534     i64 
    push           "sqrtss "  u64 
    resetmult                 
    jump           #20535     
#20534: 
    push           "sqrtsd "  u64 
    endmult                   
#20535: 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strxmm u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.printaddrmode 
    jump           #20516     
#20492: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.decodeaddr 
    setargs                   1 0
    startmult                 
    push           pc_disasm.sizeoverride i64 
    jumpfalse      #20536     i64 
    push           "andpd "   u64 
    resetmult                 
    jump           #20537     
#20536: 
    push           "andps "   u64 
    endmult                   
#20537: 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strxmm u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    startmult                 
    push           pc_disasm.sizeoverride i64 
    jumpfalse      #20538     i64 
    push           8          i64 
    resetmult                 
    jump           #20539     
#20538: 
    push           4          i64 
    endmult                   
#20539: 
    pop            pc_disasm.opsize i64 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.printaddrmode 
    jump           #20516     
#20493: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.decodeaddr 
    setargs                   1 0
    startmult                 
    push           pc_disasm.sizeoverride i64 
    jumpfalse      #20540     i64 
    push           "xorpd "   u64 
    resetmult                 
    jump           #20541     
#20540: 
    push           "xorps "   u64 
    endmult                   
#20541: 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strxmm u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    startmult                 
    push           pc_disasm.sizeoverride i64 
    jumpfalse      #20542     i64 
    push           8          i64 
    resetmult                 
    jump           #20543     
#20542: 
    push           4          i64 
    endmult                   
#20543: 
    pop            pc_disasm.opsize i64 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.printaddrmode 
    jump           #20516     
#20494: 
    push           "adds"     u64 
    pop            pc_disasm.decodetwobyteinstr.opcstr u64 
!doarith::
#20544: 
    setargs                   1 0
    push           pc_disasm.decodetwobyteinstr.opcstr u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.decodeaddr 
    push           pc_disasm.f2override i64 
    jumpfalse      #20545     i64 
    push           8          i64 
    pop            pc_disasm.opsize i64 
    setargs                   1 0
    push           "d "       u64 
    callproc       &pc_disasm.genstr 
    jump           #20546     
#20545: 
    push           4          i64 
    pop            pc_disasm.opsize i64 
    setargs                   1 0
    push           "s "       u64 
    callproc       &pc_disasm.genstr 
#20546: 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strxmm u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.printaddrmode 
    jump           #20516     
#20495: 
    push           "muls"     u64 
    pop            pc_disasm.decodetwobyteinstr.opcstr u64 
    jump           #20544     
    jump           #20516     
#20496: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.decodeaddr 
    push           pc_disasm.f3override i64 
    jumpfalse      #20547     i64 
    setargs                   1 0
    push           "cvtss2sd " u64 
    callproc       &pc_disasm.genstr 
    push           4          i64 
    pop            pc_disasm.decodetwobyteinstr.rhssize i64 
    jump           #20548     
#20547: 
    setargs                   1 0
    push           "cvtsd2ss " u64 
    callproc       &pc_disasm.genstr 
    push           8          i64 
    pop            pc_disasm.decodetwobyteinstr.rhssize i64 
#20548: 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strxmm u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    push           pc_disasm.decodetwobyteinstr.rhssize i64 
    pop            pc_disasm.opsize i64 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.printaddrmode 
    jump           #20516     
#20497: 
    push           "subs"     u64 
    pop            pc_disasm.decodetwobyteinstr.opcstr u64 
    jump           #20544     
    jump           #20516     
#20498: 
    push           "mins"     u64 
    pop            pc_disasm.decodetwobyteinstr.opcstr u64 
    jump           #20544     
    jump           #20516     
#20499: 
    push           "divs"     u64 
    pop            pc_disasm.decodetwobyteinstr.opcstr u64 
    jump           #20544     
    jump           #20516     
#20500: 
    push           "maxs"     u64 
    pop            pc_disasm.decodetwobyteinstr.opcstr u64 
    jump           #20544     
    jump           #20516     
#20501: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.decodeaddr 
    startmult                 
    push           pc_disasm.rex i64 
    push           8          i64 
    iand                      i64 
    jumpfalse      #20549     i64 
    push           8          i64 
    resetmult                 
    jump           #20550     
#20549: 
    push           4          i64 
    endmult                   
#20550: 
    pop            pc_disasm.opsize i64 
    setargs                   1 0
    startmult                 
    push           pc_disasm.opsize i64 
    push           4          i64 
    jumpne         #20551     i64 
    push           "movd "    u64 
    resetmult                 
    jump           #20552     
#20551: 
    push           "movq "    u64 
    endmult                   
#20552: 
    callproc       &pc_disasm.genstr 
    push           pc_disasm.sizeoverride i64 
    jumpfalse      #20553     i64 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strxmm u64 
    callproc       &pc_disasm.genstr 
    jump           #20554     
#20553: 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strmmx u64 
    callproc       &pc_disasm.genstr 
#20554: 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_disasm.printaddrmode 
    jump           #20516     
#20502: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.decodeaddr 
    push           16         i64 
    pop            pc_disasm.opsize i64 
    push           pc_disasm.sizeoverride i64 
    jumpfalse      #20555     i64 
    setargs                   1 0
    push           "movdqa "  u64 
    callproc       &pc_disasm.genstr 
    jump           #20556     
#20555: 
    push           pc_disasm.f3override i64 
    jumpfalse      #20557     i64 
    setargs                   1 0
    push           "movdqu "  u64 
    callproc       &pc_disasm.genstr 
    jump           #20556     
#20557: 
    setargs                   1 0
    push           "No 66/F3 " u64 
    callproc       &pc_disasm.genstr 
#20556: 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strxmm u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.printaddrmode 
    jump           #20516     
#20503: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.decodeaddr 
    push           pc_disasm.f3override i64 
    jumpfalse      #20558     i64 
    push           8          i64 
    pop            pc_disasm.opsize i64 
    setargs                   1 0
    push           "movq "    u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strxmm u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.printaddrmode 
    jump           #20559     
#20558: 
    push           pc_disasm.rex i64 
    push           8          i64 
    iand                      i64 
    jumpfalse      #20560     i64 
    push           8          i64 
    pop            pc_disasm.opsize i64 
    setargs                   1 0
    push           "movq "    u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_disasm.printaddrmode 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strxmm u64 
    callproc       &pc_disasm.genstr 
    jump           #20559     
#20560: 
    push           4          i64 
    pop            pc_disasm.opsize i64 
    setargs                   1 0
    push           "movd "    u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_disasm.printaddrmode 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    push           pc_disasm.sizeoverride i64 
    jumpfalse      #20561     i64 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strxmm u64 
    callproc       &pc_disasm.genstr 
    jump           #20562     
#20561: 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strmmx u64 
    callproc       &pc_disasm.genstr 
#20562: 
#20559: 
    jump           #20516     
#20504: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.decodeaddr 
    push           16         i64 
    pop            pc_disasm.opsize i64 
    push           pc_disasm.sizeoverride i64 
    jumpfalse      #20563     i64 
    setargs                   1 0
    push           "movdqa "  u64 
    callproc       &pc_disasm.genstr 
    jump           #20564     
#20563: 
    push           pc_disasm.f3override i64 
    jumpfalse      #20565     i64 
    setargs                   1 0
    push           "movdqu "  u64 
    callproc       &pc_disasm.genstr 
    jump           #20564     
#20565: 
    setargs                   1 0
    push           "No 66/F3 " u64 
    callproc       &pc_disasm.genstr 
#20564: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.printaddrmode 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strxmm u64 
    callproc       &pc_disasm.genstr 
    jump           #20516     
#20505: 
    setargs                   1 0
    push           "[long] j" u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           &pc_disasm.condnames 
    push           pc_disasm.decodetwobyteinstr.opc i64 
    push           15         i64 
    iand                      i64 
    pushptroff                u64 8 0
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_disasm.genstr 
    push           pc_disasm.sizeoverride i64 
    jumpfalse      #20566     i64 
    setargs                   1 0
    setargs                   0 0
    callfn         &pc_disasm.readint16 i64 
    callproc       &pc_disasm.genintd 
    jump           #20567     
#20566: 
    setargs                   1 0
    setargs                   0 0
    callfn         &pc_disasm.readint32 i64 
    callproc       &pc_disasm.genintd 
#20567: 
    jump           #20516     
#20506: 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_disasm.decodeaddr 
    setargs                   1 0
    push           "set"      u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           &pc_disasm.condnames 
    push           pc_disasm.decodetwobyteinstr.opc i64 
    push           15         i64 
    iand                      i64 
    pushptroff                u64 8 0
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           &pc_disasm.basereg 
    callproc       &pc_disasm.getsilx 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_disasm.printaddrmode 
    jump           #20516     
#20507: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.decodeaddr 
    setargs                   1 0
    push           "imul "    u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   2 0
    push           pc_disasm.opsize i64 
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strreg u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_disasm.printaddrmode 
    jump           #20516     
#20508: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.decodeaddr 
    setargs                   1 0
    startmult                 
    push           pc_disasm.decodetwobyteinstr.opc i64 
    push           190        i64 
    jumpge         #20568     i64 
    push           "movzx "   u64 
    resetmult                 
    jump           #20569     
#20568: 
    push           "movsx "   u64 
    endmult                   
#20569: 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   2 0
    push           pc_disasm.opsize i64 
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strreg u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    startmult                 
    push           pc_disasm.decodetwobyteinstr.opc i64 
    push           1          i64 
    iand                      i64 
    jumpfalse      #20570     i64 
    push           2          i64 
    resetmult                 
    jump           #20571     
#20570: 
    push           1          i64 
    endmult                   
#20571: 
    pop            pc_disasm.opsize i64 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_disasm.printaddrmode 
    jump           #20516     
#20509: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.decodeaddr 
    setargs                   1 0
    push           "popcnt "  u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   2 0
    push           pc_disasm.opsize i64 
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strreg u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_disasm.printaddrmode 
    jump           #20516     
#20510: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.decodeaddr 
    setargs                   1 0
    startmult                 
    push           pc_disasm.decodetwobyteinstr.opc i64 
    push           188        i64 
    jumpne         #20572     i64 
    push           "bsf "     u64 
    resetmult                 
    jump           #20573     
#20572: 
    push           "bsr "     u64 
    endmult                   
#20573: 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   2 0
    push           pc_disasm.opsize i64 
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strreg u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_disasm.printaddrmode 
    jump           #20516     
#20511: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.decodeaddr 
    push           8          i64 
    pop            pc_disasm.opsize i64 
    setargs                   1 0
    push           "movq "    u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.printaddrmode 
    setargs                   1 0
    push           ","        u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strxmm u64 
    callproc       &pc_disasm.genstr 
    jump           #20516     
#20512: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.decodeaddr 
    setargs                   1 0
    push           "pand "    u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strxmm u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    push           8          i64 
    pop            pc_disasm.opsize i64 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.printaddrmode 
    jump           #20516     
#20513: 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.decodeaddr 
    setargs                   1 0
    push           "pxor "    u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.rmreg i64 
    callfn         &pc_disasm.strxmm u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           ", "       u64 
    callproc       &pc_disasm.genstr 
    push           8          i64 
    pop            pc_disasm.opsize i64 
    setargs                   1 0
    push           1          i64 
    callproc       &pc_disasm.printaddrmode 
    jump           #20516     
#20484: 
!error::
#20574: 
    setargs                   1 0
    push           "Unknown opcode 2-byte opcode: 0F " u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           pc_disasm.decodetwobyteinstr.opc i64 
    callproc       &pc_disasm.genhex 
#20516: 
#20531: 
    retproc                   
End


Proc pc_disasm.decodeaddr:
    param          pc_disasm.decodeaddr.w i64 
    local          pc_disasm.decodeaddr.modrm i64 
    local          pc_disasm.decodeaddr.xxx i64 
    local          pc_disasm.decodeaddr.mode i64 
    local          pc_disasm.decodeaddr.sib i64 
    local          pc_disasm.decodeaddr.rm i64 
    procentry                 
    push           0          i64 
    store          pc_disasm.indexreg i64 
    pop            pc_disasm.basereg i64 
    push           1          i64 
    pop            pc_disasm.scale i64 
    push           0          i64 
    pop            pc_disasm.offset i64 
    push           pc_disasm.decodeaddr.w i64 
    jumpfalse      #20576     i64 
    startmult                 
    push           pc_disasm.sizeoverride i64 
    jumpfalse      #20577     i64 
    push           2          i64 
    resetmult                 
    jump           #20578     
#20577: 
    push           4          i64 
    endmult                   
#20578: 
    pop            pc_disasm.opsize i64 
    push           pc_disasm.rex i64 
    push           8          i64 
    iand                      i64 
    jumpfalse      #20579     i64 
    push           8          i64 
    pop            pc_disasm.opsize i64 
#20579: 
    jump           #20580     
#20576: 
    push           1          i64 
    pop            pc_disasm.opsize i64 
#20580: 
    push           &pc_disasm.codeptr 
    loadincr                  u64 1
    pushptr                   u8 
    pop            pc_disasm.decodeaddr.modrm i64 
    push           pc_disasm.decodeaddr.modrm i64 
    push           6          i64 
    shr                       i64 
    pop            pc_disasm.decodeaddr.mode i64 
    push           pc_disasm.decodeaddr.modrm i64 
    push           3          i64 
    shr                       i64 
    push           7          i64 
    iand                      i64 
    pop            pc_disasm.decodeaddr.xxx i64 
    push           pc_disasm.decodeaddr.modrm i64 
    push           7          i64 
    iand                      i64 
    pop            pc_disasm.decodeaddr.rm i64 
    push           pc_disasm.decodeaddr.mode i64 
    push           3          i64 
    jumpne         #20581     i64 
    push           pc_disasm.decodeaddr.rm i64 
    push           1          i64 
    add                       i64 
    pop            pc_disasm.basereg i64 
    push           1          i64 
    pop            pc_disasm.addrmode i64 
    jump           #20582     
#20581: 
    push           pc_disasm.decodeaddr.rm i64 
    push           4          i64 
    jumpeq         #20583     i64 
    push           pc_disasm.decodeaddr.mode i64 
    push           0          i64 
    jumpne         #20584     i64 
    push           pc_disasm.decodeaddr.rm i64 
    push           5          i64 
    jumpne         #20584     i64 
    setargs                   0 0
    callfn         &pc_disasm.readint32 i64 
    pop            pc_disasm.offset i64 
    push           2          i64 
    pop            pc_disasm.addrmode i64 
    jump           #20585     
#20584: 
    push           pc_disasm.decodeaddr.rm i64 
    push           1          i64 
    add                       i64 
    pop            pc_disasm.basereg i64 
    push           2          i64 
    pop            pc_disasm.addrmode i64 
    push           pc_disasm.decodeaddr.mode i64 
    push           1          i64 
    casejumpeq     #20586     i64 0
    push           2          i64 
    casejumpeq     #20587     i64 0
    popstack                  i64 
    jump           #20588     
#20586: 
    setargs                   0 0
    callfn         &pc_disasm.readsbyte i64 
    pop            pc_disasm.offset i64 
    jump           #20589     
#20587: 
    setargs                   0 0
    callfn         &pc_disasm.readint32 i64 
    pop            pc_disasm.offset i64 
    jump           #20589     
#20588: 
#20589: 
#20585: 
    jump           #20582     
#20583: 
    push           2          i64 
    pop            pc_disasm.addrmode i64 
    setargs                   0 0
    callfn         &pc_disasm.readbyte i64 
    pop            pc_disasm.decodeaddr.sib i64 
    push           pc_disasm.decodeaddr.sib i64 
    push           3          i64 
    shr                       i64 
    push           7          i64 
    iand                      i64 
    push           1          i64 
    add                       i64 
    pop            pc_disasm.indexreg i64 
    push           pc_disasm.decodeaddr.sib i64 
    push           7          i64 
    iand                      i64 
    push           1          i64 
    add                       i64 
    pop            pc_disasm.basereg i64 
    startmult                 
    push           pc_disasm.decodeaddr.sib i64 
    push           6          i64 
    shr                       i64 
    push           1          i64 
    add                       i64 
    switch         #20590     1 4
    opnd           #20591     
#20590: 
    switchlabel    #20592     
    switchlabel    #20593     
    switchlabel    #20594     
    switchlabel    #20595     
    endswitch                 
#20592: 
    push           1          i64 
    resetmult                 
    jump           #20596     
#20593: 
    push           2          i64 
    resetmult                 
    jump           #20596     
#20594: 
    push           4          i64 
    resetmult                 
    jump           #20596     
#20595: 
    push           8          i64 
    resetmult                 
    jump           #20596     
#20591: 
    push           0          i64 
    endmult                   
#20596: 
    pop            pc_disasm.scale i64 
    push           pc_disasm.decodeaddr.mode i64 
    push           0          i64 
    jumpne         #20597     i64 
    push           pc_disasm.basereg i64 
    push           6          i64 
    jumpne         #20597     i64 
    push           pc_disasm.indexreg i64 
    push           5          i64 
    jumpne         #20597     i64 
    push           0          i64 
    store          pc_disasm.basereg i64 
    pop            pc_disasm.indexreg i64 
    setargs                   0 0
    callfn         &pc_disasm.readint32 i64 
    pop            pc_disasm.offset i64 
    jump           #20598     
#20597: 
    push           pc_disasm.decodeaddr.mode i64 
    push           0          i64 
    jumpne         #20599     i64 
    push           pc_disasm.basereg i64 
    push           6          i64 
    jumpne         #20599     i64 
    push           0          i64 
    pop            pc_disasm.basereg i64 
    setargs                   0 0
    callfn         &pc_disasm.readint32 i64 
    pop            pc_disasm.offset i64 
    jump           #20598     
#20599: 
    push           pc_disasm.decodeaddr.mode i64 
    push           0          i64 
    jumpne         #20600     i64 
    push           pc_disasm.indexreg i64 
    push           5          i64 
    jumpne         #20600     i64 
    push           0          i64 
    pop            pc_disasm.indexreg i64 
    jump           #20598     
#20600: 
    push           pc_disasm.decodeaddr.mode i64 
    push           1          i64 
    casejumpeq     #20601     i64 0
    push           2          i64 
    casejumpeq     #20602     i64 0
    popstack                  i64 
    jump           #20603     
#20601: 
    setargs                   0 0
    callfn         &pc_disasm.readsbyte i64 
    pop            pc_disasm.offset i64 
    jump           #20604     
#20602: 
    setargs                   0 0
    callfn         &pc_disasm.readint32 i64 
    pop            pc_disasm.offset i64 
    jump           #20604     
#20603: 
#20604: 
    push           pc_disasm.indexreg i64 
    push           5          i64 
    jumpne         #20605     i64 
    push           0          i64 
    pop            pc_disasm.indexreg i64 
#20605: 
#20598: 
#20582: 
    push           pc_disasm.basereg i64 
    jumpfalse      #20606     i64 
    push           pc_disasm.rex i64 
    push           1          i64 
    iand                      i64 
    jumpfalse      #20606     i64 
    push           &pc_disasm.basereg 
    push           8          i64 
    addto                     i64 
#20606: 
    push           pc_disasm.indexreg i64 
    jumpfalse      #20607     i64 
    push           pc_disasm.rex i64 
    push           2          i64 
    iand                      i64 
    jumpfalse      #20607     i64 
    push           &pc_disasm.indexreg 
    push           8          i64 
    addto                     i64 
#20607: 
    push           pc_disasm.decodeaddr.xxx i64 
    push           1          i64 
    add                       i64 
    pop            pc_disasm.rmreg i64 
    push           pc_disasm.rex i64 
    push           4          i64 
    iand                      i64 
    jumpfalse      #20608     i64 
    push           &pc_disasm.rmreg 
    push           8          i64 
    addto                     i64 
#20608: 
    push           pc_disasm.decodeaddr.xxx i64 
    pop            pc_disasm.rmopc i64 
#20609: 
    retproc                   
End


Proc pc_disasm.readbyte: i64
    procentry                 
    push           &pc_disasm.codeptr 
    loadincr                  u64 1
    pushptr                   u8 
    setret                    i64 
    jump           #20611     
#20611: 
    retfn                     i64 
End


Proc pc_disasm.readsbyte: i64
    procentry                 
    push           &pc_disasm.codeptr 
    loadincr                  u64 1
    pushptr                   i8 
    setret                    i64 
    jump           #20613     
#20613: 
    retfn                     i64 
End


Proc pc_disasm.readword16: u64
    local          pc_disasm.readword16.a u64 
    procentry                 
    push           pc_disasm.codeptr u64 
    pushptr                   u16 
    pop            pc_disasm.readword16.a u64 
    push           &pc_disasm.codeptr 
    push           2          i64 
    addrefoffto               u64 1 0
    push           pc_disasm.readword16.a u64 
    setret                    u64 
    jump           #20615     
#20615: 
    retfn                     u64 
End


Proc pc_disasm.readint16: i64
    local          pc_disasm.readint16.a i64 
    procentry                 
    push           pc_disasm.codeptr u64 
    pushptr                   i16 
    pop            pc_disasm.readint16.a i64 
    push           &pc_disasm.codeptr 
    push           2          i64 
    addrefoffto               u64 1 0
    push           pc_disasm.readint16.a i64 
    setret                    i64 
    jump           #20617     
#20617: 
    retfn                     i64 
End


Proc pc_disasm.readword32: u64
    local          pc_disasm.readword32.a u64 
    procentry                 
    push           pc_disasm.codeptr u64 
    pushptr                   u32 
    pop            pc_disasm.readword32.a u64 
    push           &pc_disasm.codeptr 
    push           4          i64 
    addrefoffto               u64 1 0
    push           pc_disasm.readword32.a u64 
    setret                    u64 
    jump           #20619     
#20619: 
    retfn                     u64 
End


Proc pc_disasm.readint32: i64
    local          pc_disasm.readint32.a i64 
    procentry                 
    push           pc_disasm.codeptr u64 
    pushptr                   i32 
    pop            pc_disasm.readint32.a i64 
    push           &pc_disasm.codeptr 
    push           4          i64 
    addrefoffto               u64 1 0
    push           pc_disasm.readint32.a i64 
    setret                    i64 
    jump           #20621     
#20621: 
    retfn                     i64 
End


Proc pc_disasm.readint64: i64
    local          pc_disasm.readint64.a i64 
    procentry                 
    push           pc_disasm.codeptr u64 
    pushptr                   i64 
    pop            pc_disasm.readint64.a i64 
    push           &pc_disasm.codeptr 
    push           8          i64 
    addrefoffto               u64 1 0
    push           pc_disasm.readint64.a i64 
    setret                    i64 
    jump           #20623     
#20623: 
    retfn                     i64 
End


Proc pc_disasm.getreg: i64
    param          pc_disasm.getreg.regcode i64 
    param          pc_disasm.getreg.upper i64 
    procentry                 
    push           pc_disasm.getreg.upper i64 
    jumpfalse      #20625     i64 
    push           pc_disasm.getreg.regcode i64 
    push           8          i64 
    add                       i64 
    push           1          i64 
    add                       i64 
    setret                    i64 
    jump           #20626     
#20625: 
    push           pc_disasm.getreg.regcode i64 
    push           1          i64 
    add                       i64 
    setret                    i64 
    jump           #20626     
#20626: 
    retfn                     i64 
End


Proc pc_disasm.strreg: u64
    param          pc_disasm.strreg.reg i64 
    param          pc_disasm.strreg.opsize i64 
    procentry                 
    push           pc_disasm.strreg.reg i64 
    push           0          i64 
    jumpne         #20628     i64 
    push           "<>"       u64 
    setret                    u64 
    jump           #20629     
#20628: 
    push           pc_disasm.strreg.opsize i64 
    push           1          i64 
    casejumpeq     #20630     i64 0
    push           2          i64 
    casejumpeq     #20631     i64 0
    push           4          i64 
    casejumpeq     #20632     i64 0
    push           8          i64 
    casejumpeq     #20633     i64 0
    popstack                  i64 
    jump           #20634     
#20630: 
    push           &pc_disasm.strreg.regnames8 
    push           pc_disasm.strreg.reg i64 
    pushptroff                u64 8 -8
    setret                    u64 
    jump           #20629     
    jump           #20635     
#20631: 
    push           &pc_disasm.strreg.regnames16 
    push           pc_disasm.strreg.reg i64 
    pushptroff                u64 8 -8
    setret                    u64 
    jump           #20629     
    jump           #20635     
#20632: 
    push           &pc_disasm.strreg.regnames32 
    push           pc_disasm.strreg.reg i64 
    pushptroff                u64 8 -8
    setret                    u64 
    jump           #20629     
    jump           #20635     
#20633: 
    push           &pc_disasm.strreg.regnames64 
    push           pc_disasm.strreg.reg i64 
    pushptroff                u64 8 -8
    setret                    u64 
    jump           #20629     
    jump           #20635     
#20634: 
#20635: 
    push           ""         u64 
    setret                    u64 
    jump           #20629     
#20629: 
    retfn                     u64 
End


Proc pc_disasm.strfreg: u64
    param          pc_disasm.strfreg.freg i64 
    procentry                 
    push           &pc_disasm.strfreg.fregnames 
    push           pc_disasm.strfreg.freg i64 
    pushptroff                u64 8 -8
    setret                    u64 
    jump           #20637     
#20637: 
    retfn                     u64 
End


Proc pc_disasm.printaddrmode:
    param          pc_disasm.printaddrmode.xmm i64 
    local          pc_disasm.printaddrmode.plus u64 
    local          pc_disasm.printaddrmode.addrsize i64 
    procentry                 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_disasm.genstr 
    push           pc_disasm.addrmode i64 
    push           1          i64 
    casejumpeq     #20639     i64 0
    popstack                  i64 
    jump           #20640     
#20639: 
    push           pc_disasm.printaddrmode.xmm i64 
    jumpfalse      #20641     i64 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.basereg i64 
    callfn         &pc_disasm.strxmm u64 
    callproc       &pc_disasm.genstr 
    jump           #20642     
#20641: 
    setargs                   1 0
    push           &pc_disasm.basereg 
    callproc       &pc_disasm.getsilx 
    setargs                   1 0
    setargs                   2 0
    push           pc_disasm.opsize i64 
    push           pc_disasm.basereg i64 
    callfn         &pc_disasm.strreg u64 
    callproc       &pc_disasm.genstr 
#20642: 
    jump           #20643     
    jump           #20644     
#20640: 
#20644: 
    push           pc_disasm.opsize i64 
    push           1          i64 
    casejumpeq     #20645     i64 0
    push           2          i64 
    casejumpeq     #20646     i64 0
    push           4          i64 
    casejumpeq     #20647     i64 0
    push           8          i64 
    casejumpeq     #20648     i64 0
    push           10         i64 
    casejumpeq     #20649     i64 0
    push           16         i64 
    casejumpeq     #20650     i64 0
    popstack                  i64 
    jump           #20651     
#20645: 
    setargs                   1 0
    push           "byte "    u64 
    callproc       &pc_disasm.genstr 
    jump           #20652     
#20646: 
    setargs                   1 0
    push           "word "    u64 
    callproc       &pc_disasm.genstr 
    jump           #20652     
#20647: 
    setargs                   1 0
    push           "dword "   u64 
    callproc       &pc_disasm.genstr 
    jump           #20652     
#20648: 
    setargs                   1 0
    push           "qword "   u64 
    callproc       &pc_disasm.genstr 
    jump           #20652     
#20649: 
    setargs                   1 0
    push           "tword "   u64 
    callproc       &pc_disasm.genstr 
    jump           #20652     
#20650: 
    setargs                   1 0
    push           "oword "   u64 
    callproc       &pc_disasm.genstr 
    jump           #20652     
#20651: 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "///OPSIZE" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           pc_disasm.opsize i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
#20652: 
    setargs                   1 0
    push           "["        u64 
    callproc       &pc_disasm.genstr 
    push           ""         u64 
    pop            pc_disasm.printaddrmode.plus u64 
    startmult                 
    push           pc_disasm.addroverride i64 
    jumpfalse      #20653     i64 
    push           4          i64 
    resetmult                 
    jump           #20654     
#20653: 
    push           8          i64 
    endmult                   
#20654: 
    pop            pc_disasm.printaddrmode.addrsize i64 
    push           pc_disasm.basereg i64 
    jumpfalse      #20655     i64 
    setargs                   1 0
    setargs                   2 0
    push           pc_disasm.printaddrmode.addrsize i64 
    push           pc_disasm.basereg i64 
    callfn         &pc_disasm.strreg u64 
    callproc       &pc_disasm.genstr 
    push           "+"        u64 
    pop            pc_disasm.printaddrmode.plus u64 
#20655: 
    push           pc_disasm.indexreg i64 
    jumpfalse      #20656     i64 
    setargs                   1 0
    push           pc_disasm.printaddrmode.plus u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   2 0
    push           pc_disasm.printaddrmode.addrsize i64 
    push           pc_disasm.indexreg i64 
    callfn         &pc_disasm.strreg u64 
    callproc       &pc_disasm.genstr 
    push           pc_disasm.scale i64 
    push           1          i64 
    jumple         #20657     i64 
    setargs                   1 0
    push           "*"        u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           pc_disasm.scale i64 
    callproc       &pc_disasm.genintd 
#20657: 
    push           "+"        u64 
    pop            pc_disasm.printaddrmode.plus u64 
#20656: 
    push           pc_disasm.offset i64 
    jumptrue       #20658     i64 
    push           pc_disasm.basereg i64 
    push           0          i64 
    jumpne         #20659     i64 
    push           pc_disasm.indexreg i64 
    push           0          i64 
    jumpne         #20659     i64 
#20658: 
    push           pc_disasm.basereg i64 
    push           0          i64 
    jumpne         #20660     i64 
    push           pc_disasm.indexreg i64 
    push           0          i64 
    jumpne         #20660     i64 
    setargs                   1 0
    push           pc_disasm.offset i64 
    callproc       &pc_disasm.genhex 
    jump           #20661     
#20660: 
    push           pc_disasm.offset i64 
    push           0          i64 
    jumple         #20662     i64 
    setargs                   1 0
    push           pc_disasm.printaddrmode.plus u64 
    callproc       &pc_disasm.genstr 
#20662: 
    setargs                   1 0
    push           pc_disasm.offset i64 
    callproc       &pc_disasm.genintd 
#20661: 
#20659: 
    setargs                   1 0
    push           "]"        u64 
    callproc       &pc_disasm.genstr 
    push           pc_disasm.addrmode i64 
    push           3          i64 
    jumpne         #20663     i64 
    setargs                   1 0
    push           "+RIP"     u64 
    callproc       &pc_disasm.genstr 
#20663: 
#20643: 
    retproc                   
End


Proc pc_disasm.genstr:
    param          pc_disasm.genstr.s u64 
    procentry                 
    setargs                   2 0
    push           pc_disasm.genstr.s u64 
    push           &pc_disasm.deststr 
    callproc       &strcat    
#20665: 
    retproc                   
End


Proc pc_disasm.genintd:
    param          pc_disasm.genintd.a i64 
    procentry                 
    setargs                   1 0
    setargs                   2 0
    push           0          u64 
    push           pc_disasm.genintd.a i64 
    callfn         &msysp.strint u64 
    callproc       &pc_disasm.genstr 
#20667: 
    retproc                   
End


Proc pc_disasm.genhex:
    param          pc_disasm.genhex.a i64 
    procentry                 
    setargs                   1 0
    setargs                   2 0
    push           "h"        u64 
    push           pc_disasm.genhex.a i64 
    callfn         &msysp.strint u64 
    callproc       &pc_disasm.genstr 
#20669: 
    retproc                   
End


Proc pc_disasm.readimm: i64
    procentry                 
    push           pc_disasm.opsize i64 
    push           1          i64 
    casejumpeq     #20671     i64 0
    push           2          i64 
    casejumpeq     #20672     i64 0
    push           4          i64 
    casejumpeq     #20673     i64 0
    push           8          i64 
    casejumpeq     #20673     i64 0
    popstack                  i64 
    jump           #20674     
#20671: 
    setargs                   0 0
    callfn         &pc_disasm.readsbyte i64 
    setret                    i64 
    jump           #20675     
    jump           #20676     
#20672: 
    setargs                   0 0
    callfn         &pc_disasm.readint16 i64 
    setret                    i64 
    jump           #20675     
    jump           #20676     
#20673: 
    setargs                   0 0
    callfn         &pc_disasm.readint32 i64 
    setret                    i64 
    jump           #20675     
    jump           #20676     
#20674: 
#20676: 
    push           0          i64 
    setret                    i64 
    jump           #20675     
#20675: 
    retfn                     i64 
End


Proc pc_disasm.readimm8: i64
    procentry                 
    push           pc_disasm.opsize i64 
    push           8          i64 
    jumpge         #20678     i64 
    setargs                   0 0
    callfn         &pc_disasm.readimm i64 
    setret                    i64 
    jump           #20679     
#20678: 
    setargs                   0 0
    callfn         &pc_disasm.readint64 i64 
    setret                    i64 
    jump           #20679     
#20679: 
    retfn                     i64 
End


Proc pc_disasm.strxmm: u64
    param          pc_disasm.strxmm.reg i64 
    procentry                 
    setargs                   1 0
    push           &pc_disasm.strxmm.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "xmm"      u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           pc_disasm.strxmm.reg i64 
    push           1          i64 
    sub                       i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           &pc_disasm.strxmm.str 
    setret                    u64 
    jump           #20681     
#20681: 
    retfn                     u64 
End


Proc pc_disasm.strmmx: u64
    param          pc_disasm.strmmx.reg i64 
    procentry                 
    setargs                   1 0
    push           &pc_disasm.strmmx.str 
    callproc       &msysp.m$print_startstr 
    setargs                   1 0
    push           "mmx"      u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_nogap 
    setargs                   1 0
    push           pc_disasm.strmmx.reg i64 
    push           1          i64 
    sub                       i64 
    callproc       &msysp.m$print_i64_nf 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    push           &pc_disasm.strmmx.str 
    setret                    u64 
    jump           #20683     
#20683: 
    retfn                     u64 
End


Proc pc_disasm.decode8087:
    param          pc_disasm.decode8087.ttt i64 
    local          pc_disasm.decode8087.bb u8 
    local          pc_disasm.decode8087.longopc i64 
    local          pc_disasm.decode8087.freg i64 
    local          pc_disasm.decode8087.shortopc i64 
    local          pc_disasm.decode8087.code i64 
    procentry                 
    push           &pc_disasm.codeptr 
    loadincr                  u64 1
    pushptr                   u8 
    pop            pc_disasm.decode8087.bb u8 
    push           pc_disasm.decode8087.ttt i64 
    push           8          i64 
    shl                       i64 
    push           pc_disasm.decode8087.bb u8 
    add                       i64 
    pop            pc_disasm.decode8087.longopc i64 
    push           pc_disasm.decode8087.bb u8 
    push           7          i64 
    iand                      i64 
    push           1          i64 
    add                       i64 
    pop            pc_disasm.decode8087.freg i64 
    push           pc_disasm.decode8087.longopc i64 
    push           1753       i64 
    casejumpeq     #20685     i64 0
    push           484        i64 
    casejumpeq     #20686     i64 0
    push           485        i64 
    casejumpeq     #20687     i64 0
    push           494        i64 
    casejumpeq     #20688     i64 0
    push           488        i64 
    casejumpeq     #20689     i64 0
    push           491        i64 
    casejumpeq     #20690     i64 0
    push           489        i64 
    casejumpeq     #20691     i64 0
    push           490        i64 
    casejumpeq     #20692     i64 0
    push           492        i64 
    casejumpeq     #20693     i64 0
    push           493        i64 
    casejumpeq     #20694     i64 0
    push           506        i64 
    casejumpeq     #20695     i64 0
    push           510        i64 
    casejumpeq     #20696     i64 0
    push           511        i64 
    casejumpeq     #20697     i64 0
    push           507        i64 
    casejumpeq     #20698     i64 0
    push           509        i64 
    casejumpeq     #20699     i64 0
    push           504        i64 
    casejumpeq     #20700     i64 0
    push           508        i64 
    casejumpeq     #20701     i64 0
    push           500        i64 
    casejumpeq     #20702     i64 0
    push           481        i64 
    casejumpeq     #20703     i64 0
    push           480        i64 
    casejumpeq     #20704     i64 0
    push           498        i64 
    casejumpeq     #20705     i64 0
    push           499        i64 
    casejumpeq     #20706     i64 0
    push           496        i64 
    casejumpeq     #20707     i64 0
    push           497        i64 
    casejumpeq     #20708     i64 0
    push           505        i64 
    casejumpeq     #20709     i64 0
    push           995        i64 
    casejumpeq     #20710     i64 0
    push           992        i64 
    casejumpeq     #20711     i64 0
    push           993        i64 
    casejumpeq     #20712     i64 0
    push           994        i64 
    casejumpeq     #20713     i64 0
    push           503        i64 
    casejumpeq     #20714     i64 0
    push           502        i64 
    casejumpeq     #20715     i64 0
    push           464        i64 
    casejumpeq     #20716     i64 0
    popstack                  i64 
    jump           #20717     
#20685: 
    setargs                   1 0
    push           "fcompp"   u64 
    callproc       &pc_disasm.genstr 
    jump           #20718     
#20686: 
    setargs                   1 0
    push           "ftst"     u64 
    callproc       &pc_disasm.genstr 
    jump           #20718     
#20687: 
    setargs                   1 0
    push           "fxam"     u64 
    callproc       &pc_disasm.genstr 
    jump           #20718     
#20688: 
    setargs                   1 0
    push           "fldz"     u64 
    callproc       &pc_disasm.genstr 
    jump           #20718     
#20689: 
    setargs                   1 0
    push           "fld1"     u64 
    callproc       &pc_disasm.genstr 
    jump           #20718     
#20690: 
    setargs                   1 0
    push           "fldpi"    u64 
    callproc       &pc_disasm.genstr 
    jump           #20718     
#20691: 
    setargs                   1 0
    push           "fldl2t"   u64 
    callproc       &pc_disasm.genstr 
    jump           #20718     
#20692: 
    setargs                   1 0
    push           "fldl2e"   u64 
    callproc       &pc_disasm.genstr 
    jump           #20718     
#20693: 
    setargs                   1 0
    push           "fldlg2"   u64 
    callproc       &pc_disasm.genstr 
    jump           #20718     
#20694: 
    setargs                   1 0
    push           "fldln2"   u64 
    callproc       &pc_disasm.genstr 
    jump           #20718     
#20695: 
    setargs                   1 0
    push           "fsqrt"    u64 
    callproc       &pc_disasm.genstr 
    jump           #20718     
#20696: 
    setargs                   1 0
    push           "fsin"     u64 
    callproc       &pc_disasm.genstr 
    jump           #20718     
#20697: 
    setargs                   1 0
    push           "fcos"     u64 
    callproc       &pc_disasm.genstr 
    jump           #20718     
#20698: 
    setargs                   1 0
    push           "fsincos"  u64 
    callproc       &pc_disasm.genstr 
    jump           #20718     
#20699: 
    setargs                   1 0
    push           "fscale"   u64 
    callproc       &pc_disasm.genstr 
    jump           #20718     
#20700: 
    setargs                   1 0
    push           "fprem"    u64 
    callproc       &pc_disasm.genstr 
    jump           #20718     
#20701: 
    setargs                   1 0
    push           "frndint"  u64 
    callproc       &pc_disasm.genstr 
    jump           #20718     
#20702: 
    setargs                   1 0
    push           "fxtract"  u64 
    callproc       &pc_disasm.genstr 
    jump           #20718     
#20703: 
    setargs                   1 0
    push           "fabs"     u64 
    callproc       &pc_disasm.genstr 
    jump           #20718     
#20704: 
    setargs                   1 0
    push           "fchs"     u64 
    callproc       &pc_disasm.genstr 
    jump           #20718     
#20705: 
    setargs                   1 0
    push           "fptan"    u64 
    callproc       &pc_disasm.genstr 
    jump           #20718     
#20706: 
    setargs                   1 0
    push           "fpatan"   u64 
    callproc       &pc_disasm.genstr 
    jump           #20718     
#20707: 
    setargs                   1 0
    push           "f2xm1"    u64 
    callproc       &pc_disasm.genstr 
    jump           #20718     
#20708: 
    setargs                   1 0
    push           "fyl2x"    u64 
    callproc       &pc_disasm.genstr 
    jump           #20718     
#20709: 
    setargs                   1 0
    push           "fyl2xp1"  u64 
    callproc       &pc_disasm.genstr 
    jump           #20718     
#20710: 
    setargs                   1 0
    push           "finit"    u64 
    callproc       &pc_disasm.genstr 
    jump           #20718     
#20711: 
    setargs                   1 0
    push           "feni"     u64 
    callproc       &pc_disasm.genstr 
    jump           #20718     
#20712: 
    setargs                   1 0
    push           "fdisi"    u64 
    callproc       &pc_disasm.genstr 
    jump           #20718     
#20713: 
    setargs                   1 0
    push           "fclex"    u64 
    callproc       &pc_disasm.genstr 
    jump           #20718     
#20714: 
    setargs                   1 0
    push           "fincstp"  u64 
    callproc       &pc_disasm.genstr 
    jump           #20718     
#20715: 
    setargs                   1 0
    push           "fdecstp"  u64 
    callproc       &pc_disasm.genstr 
    jump           #20718     
#20716: 
    setargs                   1 0
    push           "fnop"     u64 
    callproc       &pc_disasm.genstr 
    jump           #20718     
#20717: 
    push           pc_disasm.decode8087.longopc i64 
    push           2040       i64 
    iand                      i64 
    push           448        i64 
    casejumpeq     #20719     i64 0
    push           1488       i64 
    casejumpeq     #20720     i64 0
    push           1496       i64 
    casejumpeq     #20721     i64 0
    push           456        i64 
    casejumpeq     #20722     i64 0
    push           208        i64 
    casejumpeq     #20723     i64 0
    push           216        i64 
    casejumpeq     #20724     i64 0
    push           1472       i64 
    casejumpeq     #20725     i64 0
    popstack                  i64 
    jump           #20726     
#20719: 
    setargs                   1 0
    push           "fld "     u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.decode8087.freg i64 
    callfn         &pc_disasm.strfreg u64 
    callproc       &pc_disasm.genstr 
    jump           #20727     
#20720: 
    setargs                   1 0
    push           "fst "     u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.decode8087.freg i64 
    callfn         &pc_disasm.strfreg u64 
    callproc       &pc_disasm.genstr 
    jump           #20727     
#20721: 
    setargs                   1 0
    push           "fstp "    u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.decode8087.freg i64 
    callfn         &pc_disasm.strfreg u64 
    callproc       &pc_disasm.genstr 
    jump           #20727     
#20722: 
    setargs                   1 0
    push           "fxch "    u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.decode8087.freg i64 
    callfn         &pc_disasm.strfreg u64 
    callproc       &pc_disasm.genstr 
    jump           #20727     
#20723: 
    setargs                   1 0
    push           "fcom "    u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.decode8087.freg i64 
    callfn         &pc_disasm.strfreg u64 
    callproc       &pc_disasm.genstr 
    jump           #20727     
#20724: 
    setargs                   1 0
    push           "fcomp "   u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.decode8087.freg i64 
    callfn         &pc_disasm.strfreg u64 
    callproc       &pc_disasm.genstr 
    jump           #20727     
#20725: 
    setargs                   1 0
    push           "ffree "   u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.decode8087.freg i64 
    callfn         &pc_disasm.strfreg u64 
    callproc       &pc_disasm.genstr 
    jump           #20727     
#20726: 
    push           pc_disasm.decode8087.longopc i64 
    push           504        i64 
    iand                      i64 
    push           192        i64 
    casejumpeq     #20728     i64 0
    push           224        i64 
    casejumpeq     #20729     i64 0
    push           232        i64 
    casejumpeq     #20730     i64 0
    push           200        i64 
    casejumpeq     #20731     i64 0
    push           240        i64 
    casejumpeq     #20732     i64 0
    push           248        i64 
    casejumpeq     #20733     i64 0
    popstack                  i64 
    jump           #20734     
#20728: 
    setargs                   3 0
    push           pc_disasm.decode8087.freg i64 
    push           pc_disasm.decode8087.ttt i64 
    push           "fadd"     u64 
    callproc       &pc_disasm.do87arith 
    jump           #20735     
#20729: 
    setargs                   3 0
    push           pc_disasm.decode8087.freg i64 
    push           pc_disasm.decode8087.ttt i64 
    push           "fsub"     u64 
    callproc       &pc_disasm.do87arith 
    jump           #20735     
#20730: 
    setargs                   3 0
    push           pc_disasm.decode8087.freg i64 
    push           pc_disasm.decode8087.ttt i64 
    push           "fsubr"    u64 
    callproc       &pc_disasm.do87arith 
    jump           #20735     
#20731: 
    setargs                   3 0
    push           pc_disasm.decode8087.freg i64 
    push           pc_disasm.decode8087.ttt i64 
    push           "fmul"     u64 
    callproc       &pc_disasm.do87arith 
    jump           #20735     
#20732: 
    setargs                   3 0
    push           pc_disasm.decode8087.freg i64 
    push           pc_disasm.decode8087.ttt i64 
    push           "fdiv"     u64 
    callproc       &pc_disasm.do87arith 
    jump           #20735     
#20733: 
    setargs                   3 0
    push           pc_disasm.decode8087.freg i64 
    push           pc_disasm.decode8087.ttt i64 
    push           "fdivr"    u64 
    callproc       &pc_disasm.do87arith 
    jump           #20735     
#20734: 
    push           &pc_disasm.codeptr 
    decr                      u64 1
    setargs                   1 0
    push           0          i64 
    callproc       &pc_disasm.decodeaddr 
    push           pc_disasm.decode8087.ttt i64 
    push           3          i64 
    shl                       i64 
    push           pc_disasm.rmopc i64 
    add                       i64 
    pop            pc_disasm.decode8087.shortopc i64 
    push           pc_disasm.decode8087.shortopc i64 
    push           61         i64 
    casejumpeq     #20736     i64 0
    push           29         i64 
    casejumpeq     #20737     i64 0
    push           60         i64 
    casejumpeq     #20738     i64 0
    push           63         i64 
    casejumpeq     #20739     i64 0
    push           31         i64 
    casejumpeq     #20740     i64 0
    push           62         i64 
    casejumpeq     #20741     i64 0
    push           13         i64 
    casejumpeq     #20742     i64 0
    push           15         i64 
    casejumpeq     #20743     i64 0
    push           47         i64 
    casejumpeq     #20744     i64 0
    push           14         i64 
    casejumpeq     #20745     i64 0
    push           12         i64 
    casejumpeq     #20746     i64 0
    push           46         i64 
    casejumpeq     #20747     i64 0
    push           44         i64 
    casejumpeq     #20748     i64 0
    popstack                  i64 
    jump           #20749     
#20736: 
    setargs                   2 0
    push           4          i64 
    push           "fld"      u64 
    callproc       &pc_disasm.do87mem 
    jump           #20750     
#20737: 
    setargs                   2 0
    push           5          i64 
    push           "fld"      u64 
    callproc       &pc_disasm.do87mem 
    jump           #20750     
#20738: 
    setargs                   2 0
    push           -1         i64 
    push           "fldbcd"   u64 
    callproc       &pc_disasm.do87mem 
    jump           #20750     
#20739: 
    setargs                   2 0
    push           4          i64 
    push           "fstp"     u64 
    callproc       &pc_disasm.do87mem 
    jump           #20750     
#20740: 
    setargs                   2 0
    push           5          i64 
    push           "fstp"     u64 
    callproc       &pc_disasm.do87mem 
    jump           #20750     
#20741: 
    setargs                   2 0
    push           -1         i64 
    push           "fstpbcd"  u64 
    callproc       &pc_disasm.do87mem 
    jump           #20750     
#20742: 
    setargs                   2 0
    push           -1         i64 
    push           "fldcw"    u64 
    callproc       &pc_disasm.do87mem 
    jump           #20750     
#20743: 
    setargs                   2 0
    push           -1         i64 
    push           "fstcw"    u64 
    callproc       &pc_disasm.do87mem 
    jump           #20750     
#20744: 
    setargs                   2 0
    push           -1         i64 
    push           "fstsw"    u64 
    callproc       &pc_disasm.do87mem 
    jump           #20750     
#20745: 
    setargs                   2 0
    push           -1         i64 
    push           "fstenv"   u64 
    callproc       &pc_disasm.do87mem 
    jump           #20750     
#20746: 
    setargs                   2 0
    push           -1         i64 
    push           "fldenv"   u64 
    callproc       &pc_disasm.do87mem 
    jump           #20750     
#20747: 
    setargs                   2 0
    push           -1         i64 
    push           "fsave"    u64 
    callproc       &pc_disasm.do87mem 
    jump           #20750     
#20748: 
    setargs                   2 0
    push           -1         i64 
    push           "frstor"   u64 
    callproc       &pc_disasm.do87mem 
    jump           #20750     
#20749: 
    push           pc_disasm.decode8087.shortopc i64 
    push           15         i64 
    iand                      i64 
    push           8          i64 
    casejumpeq     #20751     i64 0
    push           10         i64 
    casejumpeq     #20752     i64 0
    push           11         i64 
    casejumpeq     #20753     i64 0
    push           2          i64 
    casejumpeq     #20754     i64 0
    push           3          i64 
    casejumpeq     #20755     i64 0
    push           0          i64 
    casejumpeq     #20756     i64 0
    push           4          i64 
    casejumpeq     #20757     i64 0
    push           5          i64 
    casejumpeq     #20758     i64 0
    push           1          i64 
    casejumpeq     #20759     i64 0
    push           6          i64 
    casejumpeq     #20760     i64 0
    push           7          i64 
    casejumpeq     #20761     i64 0
    popstack                  i64 
    jump           #20762     
#20751: 
    setargs                   2 0
    push           pc_disasm.decode8087.ttt i64 
    push           1          i64 
    shr                       i64 
    push           "fld"      u64 
    callproc       &pc_disasm.do87mem 
    jump           #20763     
#20752: 
    setargs                   2 0
    push           pc_disasm.decode8087.ttt i64 
    push           1          i64 
    shr                       i64 
    push           "fst"      u64 
    callproc       &pc_disasm.do87mem 
    jump           #20763     
#20753: 
    setargs                   2 0
    push           pc_disasm.decode8087.ttt i64 
    push           1          i64 
    shr                       i64 
    push           "fstp"     u64 
    callproc       &pc_disasm.do87mem 
    jump           #20763     
#20754: 
    setargs                   2 0
    push           pc_disasm.decode8087.ttt i64 
    push           1          i64 
    shr                       i64 
    push           "fcom"     u64 
    callproc       &pc_disasm.do87mem 
    jump           #20763     
#20755: 
    setargs                   2 0
    push           pc_disasm.decode8087.ttt i64 
    push           1          i64 
    shr                       i64 
    push           "fcomp"    u64 
    callproc       &pc_disasm.do87mem 
    jump           #20763     
#20756: 
    setargs                   2 0
    push           pc_disasm.decode8087.ttt i64 
    push           1          i64 
    shr                       i64 
    push           "fadd"     u64 
    callproc       &pc_disasm.do87mem 
    jump           #20763     
#20757: 
    setargs                   2 0
    push           pc_disasm.decode8087.ttt i64 
    push           1          i64 
    shr                       i64 
    push           "fsub"     u64 
    callproc       &pc_disasm.do87mem 
    jump           #20763     
#20758: 
    setargs                   2 0
    push           pc_disasm.decode8087.ttt i64 
    push           1          i64 
    shr                       i64 
    push           "fsubr"    u64 
    callproc       &pc_disasm.do87mem 
    jump           #20763     
#20759: 
    setargs                   2 0
    push           pc_disasm.decode8087.ttt i64 
    push           1          i64 
    shr                       i64 
    push           "fmul"     u64 
    callproc       &pc_disasm.do87mem 
    jump           #20763     
#20760: 
    setargs                   2 0
    push           pc_disasm.decode8087.ttt i64 
    push           1          i64 
    shr                       i64 
    push           "fdiv"     u64 
    callproc       &pc_disasm.do87mem 
    jump           #20763     
#20761: 
    setargs                   2 0
    push           pc_disasm.decode8087.ttt i64 
    push           1          i64 
    shr                       i64 
    push           "fdivr"    u64 
    callproc       &pc_disasm.do87mem 
    jump           #20763     
#20762: 
    setargs                   1 0
    push           "UNKNOWN x87 OPCODE" u64 
    callproc       &pc_disasm.genstr 
#20763: 
#20750: 
#20735: 
#20727: 
#20718: 
#20764: 
    retproc                   
End


Proc pc_disasm.do87arith:
    param          pc_disasm.do87arith.opcstr u64 
    param          pc_disasm.do87arith.ttt i64 
    param          pc_disasm.do87arith.freg i64 
    local          pc_disasm.do87arith.d i64 
    local          pc_disasm.do87arith.p i64 
    procentry                 
    push           pc_disasm.do87arith.ttt i64 
    push           4          i64 
    iand                      i64 
    pop            pc_disasm.do87arith.d i64 
    push           pc_disasm.do87arith.ttt i64 
    push           2          i64 
    iand                      i64 
    pop            pc_disasm.do87arith.p i64 
    setargs                   1 0
    push           pc_disasm.do87arith.opcstr u64 
    callproc       &pc_disasm.genstr 
    push           pc_disasm.do87arith.p i64 
    jumpfalse      #20766     i64 
    setargs                   1 0
    push           "p"        u64 
    callproc       &pc_disasm.genstr 
#20766: 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_disasm.genstr 
    push           pc_disasm.do87arith.d i64 
    push           0          i64 
    jumpne         #20767     i64 
    setargs                   1 0
    push           "st0, "    u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.do87arith.freg i64 
    callfn         &pc_disasm.strfreg u64 
    callproc       &pc_disasm.genstr 
    jump           #20768     
#20767: 
    setargs                   1 0
    setargs                   1 0
    push           pc_disasm.do87arith.freg i64 
    callfn         &pc_disasm.strfreg u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           ", st0"    u64 
    callproc       &pc_disasm.genstr 
#20768: 
#20769: 
    retproc                   
End


Proc pc_disasm.do87mem:
    param          pc_disasm.do87mem.opcstr u64 
    param          pc_disasm.do87mem.mf i64 
    procentry                 
    setargs                   1 0
    push           "f"        u64 
    callproc       &pc_disasm.genstr 
    push           pc_disasm.do87mem.mf i64 
    push           0          i64 
    casejumpeq     #20771     i64 0
    push           1          i64 
    casejumpeq     #20772     i64 0
    push           2          i64 
    casejumpeq     #20773     i64 0
    push           3          i64 
    casejumpeq     #20774     i64 0
    push           4          i64 
    casejumpeq     #20775     i64 0
    push           5          i64 
    casejumpeq     #20776     i64 0
    popstack                  i64 
    jump           #20777     
#20771: 
    push           4          i64 
    pop            pc_disasm.opsize i64 
    jump           #20778     
#20772: 
    setargs                   1 0
    push           "i"        u64 
    callproc       &pc_disasm.genstr 
    push           4          i64 
    pop            pc_disasm.opsize i64 
    jump           #20778     
#20773: 
    push           8          i64 
    pop            pc_disasm.opsize i64 
    jump           #20778     
#20774: 
    setargs                   1 0
    push           "i"        u64 
    callproc       &pc_disasm.genstr 
    push           2          i64 
    pop            pc_disasm.opsize i64 
    jump           #20778     
#20775: 
    setargs                   1 0
    push           "i"        u64 
    callproc       &pc_disasm.genstr 
    push           8          i64 
    pop            pc_disasm.opsize i64 
    jump           #20778     
#20776: 
    push           10         i64 
    pop            pc_disasm.opsize i64 
    jump           #20778     
#20777: 
#20778: 
    setargs                   1 0
    push           pc_disasm.do87mem.opcstr u64 
    push           1          i64 
    addrefoff                 u64 1 0
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           " "        u64 
    callproc       &pc_disasm.genstr 
    setargs                   1 0
    push           0          i64 
    callproc       &pc_disasm.printaddrmode 
#20779: 
    retproc                   
End


Proc pc_disasm.getsil:
    param          pc_disasm.getsil.reg u64 
    procentry                 
    push           pc_disasm.opsize i64 
    push           1          i64 
    jumpne         #20781     i64 
    push           pc_disasm.rex i64 
    jumptrue       #20781     i64 
    push           pc_disasm.getsil.reg u64 
    pushptr                   i64 
    push           5          i64 
    jumplt         #20781     i64 
    push           pc_disasm.getsil.reg u64 
    pushptr                   i64 
    push           8          i64 
    jumpgt         #20781     i64 
    push           pc_disasm.getsil.reg u64 
    push           12         i64 
    addto                     i64 
#20781: 
#20782: 
    retproc                   
End


Proc pc_disasm.getsilx:
    param          pc_disasm.getsilx.reg u64 
    procentry                 
    push           pc_disasm.addrmode i64 
    push           1          i64 
    jumpne         #20784     i64 
    push           pc_disasm.opsize i64 
    push           1          i64 
    jumpne         #20784     i64 
    push           pc_disasm.rex i64 
    push           0          i64 
    jumpne         #20784     i64 
    push           pc_disasm.getsilx.reg u64 
    pushptr                   i64 
    push           5          i64 
    jumplt         #20784     i64 
    push           pc_disasm.getsilx.reg u64 
    pushptr                   i64 
    push           8          i64 
    jumpgt         #20784     i64 
    push           pc_disasm.getsilx.reg u64 
    push           12         i64 
    addto                     i64 
#20784: 
#20785: 
    retproc                   
End


Proc mm_export.writeexports:
    param          mm_export.writeexports.outfile u64 
    param          mm_export.writeexports.modulename u64 
    local          mm_export.writeexports.d u64 
    local          mm_export.writeexports.e u64 
    local          mm_export.writeexports.pp u64 
    local          mm_export.writeexports.filename block:300 
    local          mm_export.writeexports.f u64 
    local          mm_export.writeexports.i i64 
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$print_startcon 
    setargs                   1 0
    push           "Writing exports file to" u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   1 0
    push           mm_export.writeexports.outfile u64 
    callproc       &msysp.m$print_str_nf 
    setargs                   0 0
    callproc       &msysp.m$print_newline 
    setargs                   0 0
    callproc       &msysp.m$print_end 
    setargs                   1 0
    push           mm_export.dest u64 
    callproc       &mlibp.gs_init 
    setargs                   1 0
    push           "importlib $" u64 
    callproc       &mm_export.wxstr 
    setargs                   1 0
    push           mm_export.writeexports.modulename u64 
    callproc       &mm_export.wxstr 
    setargs                   1 0
    push           " ="       u64 
    callproc       &mm_export.wxstrln 
#20787: 
    push           33         i64 
    pop            mm_export.writeexports.i i64 
    push           mm_decls.ntypes i64 
    push           33         i64 
    jumplt         #20788     i64 
#20789: 
    push           &mm_decls.ttnamedef 
    push           mm_export.writeexports.i i64 
    pushptroff                u64 8 0
    pop            mm_export.writeexports.d u64 
    push           mm_export.writeexports.d u64 
    push           92         
    pushptroff                u16 1 0
    push           0          i64 
    push           1          i64 
    dotslice                  i64 
    push           2          i64 
    jumpne         #20790     i64 
    push           mm_export.writeexports.d u64 
    pushptr                   u64 
    pushptr                   u8 
    push           36         u64 
    jumpeq         #20790     u64 
    push           &mm_decls.ttbasetype 
    push           mm_export.writeexports.i i64 
    pushptroff                i32 4 0
    push           13         i64 
    casejumpeq     #20791     i64 0
    push           24         i64 
    casejumpeq     #20792     i64 0
    popstack                  i64 
    jump           #20793     
#20791: 
    setargs                   1 0
    push           mm_export.writeexports.d u64 
    callproc       &mm_export.exportrecord 
    jump           #20794     
#20792: 
    setargs                   1 0
    push           mm_export.writeexports.d u64 
    callproc       &mm_export.exportenum 
    jump           #20794     
#20793: 
    setargs                   1 0
    push           "    type " u64 
    callproc       &mm_export.wxstr 
    setargs                   1 0
    push           mm_export.writeexports.d u64 
    pushptr                   u64 
    callproc       &mm_export.wxstr 
    setargs                   1 0
    push           " = "      u64 
    callproc       &mm_export.wxstr 
    setargs                   1 0
    setargs                   2 0
    push           0          i64 
    push           mm_export.writeexports.d u64 
    push           72         
    pushptroff                i32 1 0
    callfn         &mm_lib.strmode u64 
    callproc       &mm_export.wxstr 
    setargs                   0 0
    callproc       &mm_export.wxline 
#20794: 
#20790: 
#20795: 
    forup          #20789     i64 1
    opnd           mm_export.writeexports.i 
    opnd           mm_decls.ntypes 
#20788: 
    push           mm_decls.staticlist u64 
    pop            mm_export.writeexports.pp u64 
    jump           #20796     
#20797: 
    push           mm_export.writeexports.pp u64 
    pushptr                   u64 
    pop            mm_export.writeexports.d u64 
    push           mm_export.writeexports.d u64 
    push           92         
    pushptroff                u16 1 0
    push           0          i64 
    push           1          i64 
    dotslice                  i64 
    push           2          i64 
    jumpne         #20798     i64 
    setargs                   1 0
    push           mm_export.writeexports.d u64 
    callproc       &mm_export.exportstatic 
#20798: 
    push           mm_export.writeexports.pp u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_export.writeexports.pp u64 
#20796: 
    push           mm_export.writeexports.pp u64 
    jumptrue       #20797     u64 
#20799: 
    push           mm_decls.staticlist u64 
    jumpfalse      #20800     u64 
    setargs                   0 0
    callproc       &mm_export.wxline 
#20800: 
    push           mm_decls.constlist u64 
    pop            mm_export.writeexports.pp u64 
    jump           #20801     
#20802: 
    push           mm_export.writeexports.pp u64 
    pushptr                   u64 
    pop            mm_export.writeexports.d u64 
    setargs                   1 0
    push           mm_export.writeexports.d u64 
    callproc       &mm_export.exportconst 
    push           mm_export.writeexports.pp u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_export.writeexports.pp u64 
#20801: 
    push           mm_export.writeexports.pp u64 
    jumptrue       #20802     u64 
#20803: 
    push           mm_decls.constlist u64 
    jumpfalse      #20804     u64 
    setargs                   0 0
    callproc       &mm_export.wxline 
#20804: 
    push           mm_decls.proclist u64 
    pop            mm_export.writeexports.pp u64 
    jump           #20805     
#20806: 
    push           mm_export.writeexports.pp u64 
    pushptr                   u64 
    pop            mm_export.writeexports.d u64 
    push           mm_export.writeexports.d u64 
    push           92         
    pushptroff                u16 1 0
    push           0          i64 
    push           1          i64 
    dotslice                  i64 
    push           2          i64 
    jumpne         #20807     i64 
    setargs                   1 0
    push           mm_export.writeexports.d u64 
    callproc       &mm_export.exportproc 
#20807: 
    push           mm_export.writeexports.pp u64 
    push           8          
    pushptroff                u64 1 0
    pop            mm_export.writeexports.pp u64 
#20805: 
    push           mm_export.writeexports.pp u64 
    jumptrue       #20806     u64 
#20808: 
    setargs                   1 0
    push           "end importlib" u64 
    callproc       &mm_export.wxstrln 
    setargs                   2 0
    push           "wb"       u64 
    push           mm_export.writeexports.outfile u64 
    callfn         &fopen     u64 
    pop            mm_export.writeexports.f u64 
    setargs                   2 0
    push           mm_export.writeexports.f u64 
    push           mm_export.dest u64 
    callproc       &mlibp.gs_println 
    setargs                   1 0
    push           mm_export.writeexports.f u64 
    callproc       &fclose    
#20809: 
    retproc                   
End


Proc mm_export.exportstatic:
    param          mm_export.exportstatic.d u64 
    procentry                 
    setargs                   1 0
    push           "    var " u64 
    callproc       &mm_export.wxstr 
    setargs                   1 0
    push           mm_export.exportstatic.d u64 
    push           72         
    pushptroff                i32 1 0
    callproc       &mm_export.wxmode 
    setargs                   1 0
    push           " "        u64 
    callproc       &mm_export.wxstr 
    setargs                   1 0
    push           mm_export.exportstatic.d u64 
    pushptr                   u64 
    callproc       &mm_export.wxstr 
    setargs                   0 0
    callproc       &mm_export.wxline 
#20811: 
    retproc                   
End


Proc mm_export.exportconst:
    param          mm_export.exportconst.d u64 
    procentry                 
    setargs                   1 0
    push           "    const " u64 
    callproc       &mm_export.wxstr 
    setargs                   1 0
    push           mm_export.exportconst.d u64 
    push           72         
    pushptroff                i32 1 0
    callproc       &mm_export.wxmode 
    setargs                   1 0
    push           " "        u64 
    callproc       &mm_export.wxstr 
    setargs                   1 0
    push           mm_export.exportconst.d u64 
    pushptr                   u64 
    callproc       &mm_export.wxstr 
    setargs                   1 0
    push           " = "      u64 
    callproc       &mm_export.wxstr 
    setargs                   2 0
    push           mm_export.exportconst.d u64 
    push           64         
    pushptroff                u64 1 0
    push           mm_export.dest u64 
    callproc       &mm_lib.jeval 
    setargs                   0 0
    callproc       &mm_export.wxline 
#20813: 
    retproc                   
End


Proc mm_export.exportproc:
    param          mm_export.exportproc.d u64 
    local          mm_export.exportproc.e u64 
    local          mm_export.exportproc.currmode i64 
    local          mm_export.exportproc.needcomma i64 
    procentry                 
    setargs                   1 0
    push           "    mlang " u64 
    callproc       &mm_export.wxstr 
    setargs                   1 0
    startmult                 
    push           mm_export.exportproc.d u64 
    push           72         
    pushptroff                i32 1 0
    push           0          i64 
    jumpne         #20815     i64 
    push           "proc     " u64 
    resetmult                 
    jump           #20816     
#20815: 
    push           "function " u64 
    endmult                   
#20816: 
    callproc       &mm_export.wxstr 
    setargs                   1 0
    push           mm_export.exportproc.d u64 
    pushptr                   u64 
    callproc       &mm_export.wxstr 
    setargs                   1 0
    push           "("        u64 
    callproc       &mm_export.wxstr 
    push           mm_export.exportproc.d u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_export.exportproc.e u64 
    push           0          i64 
    pop            mm_export.exportproc.needcomma i64 
    push           0          i64 
    pop            mm_export.exportproc.currmode i64 
    jump           #20817     
#20818: 
    push           mm_export.exportproc.e u64 
    push           78         
    pushptroff                u8 1 0
    push           13         i64 
    jumpne         #20819     i64 
    push           mm_export.exportproc.needcomma i64 
    jumpfalse      #20820     i64 
    setargs                   1 0
    push           ","        u64 
    callproc       &mm_export.wxstr 
#20820: 
    push           mm_export.exportproc.e u64 
    push           104        
    pushptroff                u8 1 0
    push           2          i64 
    jumpeq         #20821     i64 
    push           mm_export.exportproc.e u64 
    push           72         
    pushptroff                i32 1 0
    push           mm_export.exportproc.currmode i64 
    jumpeq         #20822     i64 
    setargs                   1 0
    push           mm_export.exportproc.e u64 
    push           72         
    pushptroff                i32 1 0
    callproc       &mm_export.wxmode 
    setargs                   1 0
    push           " "        u64 
    callproc       &mm_export.wxstr 
    push           mm_export.exportproc.e u64 
    push           72         
    pushptroff                i32 1 0
    pop            mm_export.exportproc.currmode i64 
#20822: 
    jump           #20823     
#20821: 
    setargs                   1 0
    push           &mm_decls.tttarget 
    push           mm_export.exportproc.e u64 
    push           72         
    pushptroff                i32 1 0
    pushptroff                i32 4 0
    callproc       &mm_export.wxmode 
    setargs                   1 0
    push           " &"       u64 
    callproc       &mm_export.wxstr 
    push           0          i64 
    pop            mm_export.exportproc.currmode i64 
#20823: 
    setargs                   1 0
    push           mm_export.exportproc.e u64 
    pushptr                   u64 
    callproc       &mm_export.wxstr 
    push           mm_export.exportproc.e u64 
    push           64         
    pushptroff                u64 1 0
    jumpfalse      #20824     u64 
    setargs                   1 0
    push           "="        u64 
    callproc       &mm_export.wxstr 
    push           &mm_decls.ttisref 
    push           mm_export.exportproc.e u64 
    push           72         
    pushptroff                i32 1 0
    pushptroff                u8 1 0
    jumpfalse      #20825     i64 
    push           mm_export.exportproc.e u64 
    push           64         
    pushptroff                u64 1 0
    pushptr                   u8 
    push           1          i64 
    jumpne         #20825     i64 
    push           mm_export.exportproc.e u64 
    push           64         
    pushptroff                u64 1 0
    push           16         
    pushptroff                i64 1 0
    push           0          i64 
    jumpne         #20825     i64 
    setargs                   1 0
    push           "nil"      u64 
    callproc       &mm_export.wxstr 
    jump           #20826     
#20825: 
    setargs                   2 0
    push           mm_export.exportproc.e u64 
    push           64         
    pushptroff                u64 1 0
    push           mm_export.dest u64 
    callproc       &mm_lib.jeval 
#20826: 
#20824: 
    push           1          i64 
    pop            mm_export.exportproc.needcomma i64 
#20819: 
    push           mm_export.exportproc.e u64 
    push           32         
    pushptroff                u64 1 0
    pop            mm_export.exportproc.e u64 
#20817: 
    push           mm_export.exportproc.e u64 
    jumptrue       #20818     u64 
#20827: 
    setargs                   1 0
    push           ")"        u64 
    callproc       &mm_export.wxstr 
    push           mm_export.exportproc.d u64 
    push           72         
    pushptroff                i32 1 0
    jumpfalse      #20828     i64 
    setargs                   1 0
    push           " => "     u64 
    callproc       &mm_export.wxstr 
    setargs                   1 0
    push           mm_export.exportproc.d u64 
    push           72         
    pushptroff                i32 1 0
    callproc       &mm_export.wxmode 
#20828: 
    setargs                   0 0
    callproc       &mm_export.wxline 
#20829: 
    retproc                   
End


Proc mm_export.exportenum:
    param          mm_export.exportenum.d u64 
    local          mm_export.exportenum.e u64 
    procentry                 
    setargs                   1 0
    push           "    type " u64 
    callproc       &mm_export.wxstr 
    setargs                   1 0
    push           mm_export.exportenum.d u64 
    pushptr                   u64 
    callproc       &mm_export.wxstr 
    setargs                   1 0
    push           " = enum(" u64 
    callproc       &mm_export.wxstr 
    push           mm_export.exportenum.d u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_export.exportenum.e u64 
    jump           #20831     
#20832: 
    setargs                   1 0
    push           mm_export.exportenum.e u64 
    pushptr                   u64 
    callproc       &mm_export.wxstr 
    setargs                   1 0
    push           "="        u64 
    callproc       &mm_export.wxstr 
    setargs                   2 0
    push           mm_export.exportenum.e u64 
    push           64         
    pushptroff                u64 1 0
    push           mm_export.dest u64 
    callproc       &mm_lib.jeval 
    push           mm_export.exportenum.e u64 
    push           32         
    pushptroff                u64 1 0
    pop            mm_export.exportenum.e u64 
    push           mm_export.exportenum.e u64 
    jumpfalse      #20833     u64 
    setargs                   1 0
    push           ", "       u64 
    callproc       &mm_export.wxstr 
#20833: 
#20831: 
    push           mm_export.exportenum.e u64 
    jumptrue       #20832     u64 
#20834: 
    setargs                   1 0
    push           ")"        u64 
    callproc       &mm_export.wxstrln 
#20835: 
    retproc                   
End


Proc mm_export.wxstr:
    param          mm_export.wxstr.s u64 
    procentry                 
    setargs                   2 0
    push           mm_export.wxstr.s u64 
    push           mm_export.dest u64 
    callproc       &mlibp.gs_str 
#20837: 
    retproc                   
End


Proc mm_export.wxstrln:
    param          mm_export.wxstrln.s u64 
    procentry                 
    setargs                   2 0
    push           mm_export.wxstrln.s u64 
    push           mm_export.dest u64 
    callproc       &mlibp.gs_strln 
#20839: 
    retproc                   
End


Proc mm_export.wxline:
    procentry                 
    setargs                   1 0
    push           mm_export.dest u64 
    callproc       &mlibp.gs_line 
#20841: 
    retproc                   
End


Proc mm_export.exportrecord:
    param          mm_export.exportrecord.d u64 
    local          mm_export.exportrecord.e u64 
    local          mm_export.exportrecord.flags u64 
    local          mm_export.exportrecord.flag i64 
    local          mm_export.exportrecord.indent i64 
    local          mm_export.exportrecord.av_1 i64 
    local          mm_export.exportrecord.av_2 i64 
    local          mm_export.exportrecord.av_3 i64 
    local          mm_export.exportrecord.av_4 i64 
    procentry                 
    push           mm_export.exportrecord.d u64 
    push           16         
    pushptroff                u64 1 0
    pop            mm_export.exportrecord.e u64 
    setargs                   1 0
    push           "    record " u64 
    callproc       &mm_export.wxstr 
    setargs                   1 0
    push           mm_export.exportrecord.d u64 
    pushptr                   u64 
    callproc       &mm_export.wxstr 
    setargs                   1 0
    push           " = "      u64 
    callproc       &mm_export.wxstr 
    setargs                   0 0
    callproc       &mm_export.wxline 
    push           2          i64 
    pop            mm_export.exportrecord.indent i64 
    jump           #20843     
#20844: 
    push           mm_export.exportrecord.e u64 
    push           78         
    pushptroff                u8 1 0
    push           14         i64 
    jumpne         #20845     i64 
    push           mm_export.exportrecord.e u64 
    push           104        
    addrefoff                 u64 1 0
    pop            mm_export.exportrecord.flags u64 
#20846: 
    push           mm_export.exportrecord.flags u64 
    pushptr                   u8 
    push           83         u64 
    casejumpeq     #20847     u64 0
    push           85         u64 
    casejumpeq     #20848     u64 0
    popstack                  u64 
    jump           #20849     
#20847: 
#20850: 
    push           mm_export.exportrecord.indent i64 
    pop            mm_export.exportrecord.av_1 i64 
    push           mm_export.exportrecord.av_1 i64 
    push           0          i64 
    jumple         #20851     i64 
#20852: 
    setargs                   1 0
    push           "    "     u64 
    callproc       &mm_export.wxstr 
#20853: 
    to             #20852     
    opnd           mm_export.exportrecord.av_1 
#20851: 
    setargs                   1 0
    push           "struct"   u64 
    callproc       &mm_export.wxstrln 
    push           &mm_export.exportrecord.indent 
    incr                      i64 1
    push           &mm_export.exportrecord.flags 
    incr                      u64 1
    jump           #20846     
#20848: 
#20854: 
    push           mm_export.exportrecord.indent i64 
    pop            mm_export.exportrecord.av_2 i64 
    push           mm_export.exportrecord.av_2 i64 
    push           0          i64 
    jumple         #20855     i64 
#20856: 
    setargs                   1 0
    push           "    "     u64 
    callproc       &mm_export.wxstr 
#20857: 
    to             #20856     
    opnd           mm_export.exportrecord.av_2 
#20855: 
    setargs                   1 0
    push           "union"    u64 
    callproc       &mm_export.wxstrln 
    push           &mm_export.exportrecord.indent 
    incr                      i64 1
    push           &mm_export.exportrecord.flags 
    incr                      u64 1
    jump           #20846     
#20849: 
    jump           #20858     
    jump           #20846     
#20858: 
#20859: 
    push           mm_export.exportrecord.indent i64 
    pop            mm_export.exportrecord.av_3 i64 
    push           mm_export.exportrecord.av_3 i64 
    push           0          i64 
    jumple         #20860     i64 
#20861: 
    setargs                   1 0
    push           "    "     u64 
    callproc       &mm_export.wxstr 
#20862: 
    to             #20861     
    opnd           mm_export.exportrecord.av_3 
#20860: 
    setargs                   1 0
    push           mm_export.exportrecord.e u64 
    push           72         
    pushptroff                i32 1 0
    callproc       &mm_export.wxmode 
    setargs                   1 0
    push           " "        u64 
    callproc       &mm_export.wxstr 
    setargs                   1 0
    push           mm_export.exportrecord.e u64 
    pushptr                   u64 
    callproc       &mm_export.wxstrln 
#20863: 
    push           &mm_export.exportrecord.flags 
    loadincr                  u64 1
    pushptr                   u8 
    pop            mm_export.exportrecord.flag i64 
    push           mm_export.exportrecord.flag i64 
    push           42         i64 
    casejumpeq     #20864     i64 0
    push           69         i64 
    casejumpeq     #20865     i64 0
    popstack                  i64 
    jump           #20866     
#20864: 
    jump           #20867     
#20865: 
    push           &mm_export.exportrecord.indent 
    decr                      i64 1
#20868: 
    push           mm_export.exportrecord.indent i64 
    pop            mm_export.exportrecord.av_4 i64 
    push           mm_export.exportrecord.av_4 i64 
    push           0          i64 
    jumple         #20869     i64 
#20870: 
    setargs                   1 0
    push           "    "     u64 
    callproc       &mm_export.wxstr 
#20871: 
    to             #20870     
    opnd           mm_export.exportrecord.av_4 
#20869: 
    setargs                   1 0
    push           "end"      u64 
    callproc       &mm_export.wxstrln 
    jump           #20867     
#20866: 
    jump           #20872     
#20867: 
    jump           #20863     
#20872: 
#20845: 
    push           mm_export.exportrecord.e u64 
    push           32         
    pushptroff                u64 1 0
    pop            mm_export.exportrecord.e u64 
#20843: 
    push           mm_export.exportrecord.e u64 
    jumptrue       #20844     u64 
#20873: 
    setargs                   1 0
    push           "    end"  u64 
    callproc       &mm_export.wxstrln 
    setargs                   0 0
    callproc       &mm_export.wxline 
#20874: 
    retproc                   
End


Proc mm_export.wxmode:
    param          mm_export.wxmode.mode i64 
    local          mm_export.wxmode.name u64 
    procentry                 
    push           mm_export.wxmode.mode i64 
    push           33         i64 
    jumplt         #20876     i64 
    push           &mm_decls.ttnamedef 
    push           mm_export.wxmode.mode i64 
    pushptroff                u64 8 0
    pushptr                   u64 
    pop            mm_export.wxmode.name u64 
    push           mm_export.wxmode.name u64 
    pushptr                   u8 
    push           36         u64 
    jumpeq         #20877     u64 
    setargs                   1 0
    push           mm_export.wxmode.name u64 
    callproc       &mm_export.wxstr 
    jump           #20878     
#20877: 
#20876: 
    setargs                   1 0
    setargs                   2 0
    push           0          i64 
    push           mm_export.wxmode.mode i64 
    callfn         &mm_lib.strmode u64 
    callproc       &mm_export.wxstr 
#20878: 
    retproc                   
End


Proc mm.start::
    procentry                 
    setargs                   0 0
    callproc       &msysp.m$init 
    setargs                   0 0
    callproc       &mm_genpcl.$init i64 
    setargs                   0 0
    callproc       &mm_type.$init i64 
    setargs                   4 0
    push           0          u64 
    push           0          u64 
    push           "mlibp"    u64 
    push           "mlib"     u64 
    callproc       &mm_start.addmodulemapping 
    setargs                   4 0
    push           0          u64 
    push           0          u64 
    push           "mclib"    u64 
    push           "clib"     u64 
    callproc       &mm_start.addmodulemapping 
    setargs                   4 0
    push           0          u64 
    push           0          u64 
    push           "mwindowsp" u64 
    push           "oslib"    u64 
    callproc       &mm_start.addmodulemapping 
    setargs                   4 0
    push           0          u64 
    push           0          u64 
    push           "mwindllc" u64 
    push           "osdll"    u64 
    callproc       &mm_start.addmodulemapping 
    setargs                   2 0
    push           3421784    i64 
    push           87         i64 
    callproc       &mm_start.start_common 
#20880: 
    push           0          
    stop                      
    retproc                   
End


Endprogram
